<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostStatementViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostStatementViewBuilder</c> class creates the <c>CostStatementView</c> view.
/// </summary>
class CostStatementViewBuilder extends ApplicationSQLObjects
{
    str     costStatementViewName;
    str     asPartition;
    str     asDataAreaId;
    str     asRecId;
    str     asTransDate;
    str     asResourceType;
    str     asResourceId;
    str     asResourceGroupId;
    str     asConfigId;
    str     asColorId;
    str     asSizeId;
    str     asStyleId;
    str     asVersionId;
    str     asSiteId;
    str     asReferenceType;
    str     asReference;
    str     asStatementType;
    str     asStatementLineCategoryLevel1;
    str     asStatementLineCategoryLevel2;
    str     asStatementLineCategoryLevel3;
    str     asQty;
    str     asAmount;

    str     inventItemGroupItemTableName;
    str     inventItemGroupItemPartition;
    str     inventItemGroupItemItemDataAreaId;
    str     inventItemGroupItemItemId;
    str     inventItemGroupItemItemGroupId;

    str     inventDimTableName;
    str     inventDimPartition;
    str     inventDimDataAreaId;
    str     inventDimInventDimId;
    str     inventDimConfigId;
    str     inventDimColorId;
    str     inventDimSizeIdId;
    str     inventDimStyleId;
    str     inventDimVersionId;
    str     inventDimSiteId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = CostStatementViewBuilder::contruct();
        if (!builder.isViewCreated())
        {
            builder.createView();

            builder.persistViewCreatedFlag();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isViewCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>CostStatementView</c> view is created.
    /// </summary>
    /// <returns>
    /// true if the view is created; false otherwise.
    /// </returns>
    protected boolean isViewCreated()
    {
        SysGlobalObjectCache objectCache = classFactory.globalObjectCache();

        var con = objectCache.find(classStr(CostStatementViewBuilder), [methodStr(CostStatementViewBuilder, isViewCreated)]);

        return con != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistViewCreatedFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the information that the <c>CostStatementView</c> view is created.
    /// </summary>
    protected void persistViewCreatedFlag()
    {
        SysGlobalObjectCache objectCache = classFactory.globalObjectCache();

        objectCache.insert(classStr(CostStatementViewBuilder), [methodStr(CostStatementViewBuilder, isViewCreated)], [true]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCostStatementView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds synchronization of the view to the database.
    /// </summary>
    internal static void buildCostStatementView()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            #OccRetryCount
            try
            {
                var builder = CostStatementViewBuilder::contruct();
                builder.createView();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>CostStatementView</c> view.
    /// </summary>
    private void createView()
    {
        this.initialize();
        connection.ttsbegin();
        this.dropView(costStatementViewName);

        if (this.executeSqlStatement(this.createViewSqlStmt()))
        {
            connection.ttscommit();
        }
        else
        {
            connection.ttsabort();
        }

        connection.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>as</Name>
				<Source><![CDATA[
    private str as(str _fieldName, str _alias)
    {
        return _fieldName + ' AS ' + _alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKeyDependentExpression</Name>
				<Source><![CDATA[
    private str configurationKeyDependentExpression(ConfigurationKeyId _configKeyId, str _statement)
    {            
        return isConfigurationkeyEnabled(_configKeyId) ? _statement : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKeyDependentExpressionOrEmptyLiteral</Name>
				<Source><![CDATA[
    private str configurationKeyDependentExpressionOrEmptyLiteral(ConfigurationKeyId _configKeyId, str _statement)
    {
        return isConfigurationkeyEnabled(_configKeyId) ? _statement : SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSqlStatementForConsumedmanufacturingCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the SQL statement for consumed manufacturing cost.
    /// </summary>
    /// <returns>
    /// The SQL statement for consumed manufacturing cost.
    /// </returns>
    /// <remarks>
    /// Creates the following SQL statement:
    /// SELECT INVENTVALUEWRKCTRUNIONALL.PARTITION AS PARTITION,
    ///        INVENTVALUEWRKCTRUNIONALL.DATAAREAID AS DATAAREAID,
    ///        INVENTVALUEWRKCTRUNIONALL.RECID AS RECID,
    ///        INVENTVALUEWRKCTRUNIONALL.TRANSDATE AS TRANSDATE,
    ///        2 AS RESOURCETYPE,
    ///        INVENTVALUEWRKCTRUNIONALL.WRKCTRID AS RESOURCEID,
    ///        CASE WHEN INVENTITEMGROUPITEM.ITEMGROUPID IS NULL THEN '' ELSE INVENTITEMGROUPITEM.ITEMGROUPID END AS RESOURCEGROUPID,
    ///        '' AS CONFIGID,
    ///        '' AS COLORID,
    ///        '' AS SIZEID,
    ///        '' AS STYLEID,
    ///        '' AS VERSIONID,
    ///        CASE WHEN WRKCTRRESOURCEGROUP.SITEID IS NULL THEN '' ELSE WRKCTRRESOURCEGROUP.SITEID END AS SITEID,
    ///        CASE INVENTVALUEWRKCTRUNIONALL.TRANSREFTYPE WHEN 0 THEN 3 WHEN 1 THEN 12 ELSE 0 END AS REFERENCETYPE,
    ///        INVENTVALUEWRKCTRUNIONALL.REFERENCE AS REFERENCE,
    ///        2 AS STATEMENTTYPE,
    ///        3 AS STATEMENTLINECATEGORYLEVEL1,
    ///        7 AS STATEMENTLINECATEGORYLEVEL2,
    ///        0 AS STATEMENTLINECATEGORYLEVEL3,
    ///        0 AS QTY,
    ///        INVENTVALUEWRKCTRUNIONALL.AMOUNT AS AMOUNT
    /// FROM INVENTVALUEWRKCTRUNIONALL
    /// LEFT OUTER JOIN WRKCTRRESOURCEGROUP
    ///   ON WRKCTRRESOURCEGROUP.PARTITION=INVENTVALUEWRKCTRUNIONALL.PARTITION
    ///  AND WRKCTRRESOURCEGROUP.DATAAREAID=INVENTVALUEWRKCTRUNIONALL.DATAAREAID
    ///  AND WRKCTRRESOURCEGROUP.RECID=INVENTVALUEWRKCTRUNIONALL.RESOURCEGROUP
    /// </remarks>
    private str createSqlStatementForConsumedmanufacturingCost()
    {
        CostProdTransRefType2InventCostTransRefTypeMapping  prodTransRefType2InventCostTransRefTypeMapping = CostProdTransRefType2InventCostTransRefTypeMapping::construct();

        SysDictView view = new SysDictView(tableNum(InventValueWrkCtrUnionAll));
        str viewName = view.name(DbBackend::Sql);
        str viewPartition = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewDataAreaId = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewRecId = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransDate = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, TransDate)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewWrkCtrId = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, WrkCtrId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewResourceGroup = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, ResourceGroup)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransRefType = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, TransRefType)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewReference = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, Reference)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewAmount = view.fieldObject(fieldNum(InventValueWrkCtrUnionAll, Amount)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);

        SysDictTable wrkCtrResourceGroup = new SysDictTable(tableNum(WrkCtrResourceGroup));
        str wrkCtrResourceGroupTableName = wrkCtrResourceGroup.name(DbBackend::Sql);
        str wrkCtrResourceGroupPartition = wrkCtrResourceGroup.fieldObject(fieldNum(WrkCtrResourceGroup, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, wrkCtrResourceGroupTableName);
        str wrkCtrResourceGroupDataAreaId = wrkCtrResourceGroup.fieldObject(fieldNum(WrkCtrResourceGroup, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, wrkCtrResourceGroupTableName);
        str wrkCtrResourceGroupRecId = wrkCtrResourceGroup.fieldObject(fieldNum(WrkCtrResourceGroup, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, wrkCtrResourceGroupTableName);
        str wrkCtrResourceGroupWrkCtrId = wrkCtrResourceGroup.fieldObject(fieldNum(WrkCtrResourceGroup, WrkCtrId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, wrkCtrResourceGroupTableName);
        str wrkCtrResourceGroupSiteId = wrkCtrResourceGroup.fieldObject(fieldNum(WrkCtrResourceGroup, SiteId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, wrkCtrResourceGroupTableName);

        str sqlStmt = 'SELECT ' +
            this.as(viewPartition, asPartition) + ',' +
            this.as(viewDataAreaId, asDataAreaId) + ',' +
            this.as(viewRecId, asRecId) + ',' +
            this.as(viewTransDate, asTransDate) + ',' +
            this.as(SysComputedColumn::returnLiteral(InventValueReportResourceType::Labor), asResourceType) + ',' +
            this.as(this.configurationKeyDependentExpressionOrEmptyLiteral(configurationKeyNum(WrkCtr), viewWrkCtrId), asResourceId) + ',' +
            this.as(this.configurationKeyDependentExpressionOrEmptyLiteral(configurationKeyNum(WrkCtr), 
                                          SysComputedColumn::if(SysComputedColumn::isNullExpression(wrkCtrResourceGroupWrkCtrId),
                                          SysComputedColumn::returnLiteral(''),
                                          wrkCtrResourceGroupWrkCtrId)), asResourceGroupId) + ',' +
            this.configurationKeyDependentExpression(configurationKeyNum(Config), this.as(SysComputedColumn::returnLiteral(''), asConfigId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductColor), this.as(SysComputedColumn::returnLiteral(''), asColorId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductSize), this.as(SysComputedColumn::returnLiteral(''), asSizeId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductStyle), this.as(SysComputedColumn::returnLiteral(''), asStyleId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductVersion), this.as(SysComputedColumn::returnLiteral(''), asVersionId) + ',') +
            this.as(this.configurationKeyDependentExpressionOrEmptyLiteral(configurationKeyNum(WrkCtr), 
                                          SysComputedColumn::if(SysComputedColumn::isNullExpression(wrkCtrResourceGroupSiteId),
                                          SysComputedColumn::returnLiteral(''),
                                          wrkCtrResourceGroupSiteId)), asSiteId) + ',' +
            this.as(SysComputedColumn::switch(viewTransRefType,
                                              prodTransRefType2InventCostTransRefTypeMapping.getComparisionExpressionMap(),
                                              SysComputedColumn::returnLiteral(prodTransRefType2InventCostTransRefTypeMapping.getDefaultValue())), asReferenceType) + ', ' +
            this.as(viewReference, asReference) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementType::WIP), asStatementType) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel1::NetConversionCost), asStatementLineCategoryLevel1) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel2::ConsumedManufacturingCost), asStatementLineCategoryLevel2) + ',' +
            this.as(SysComputedColumn::returnLiteral(0), asStatementLineCategoryLevel3) + ',' +
            this.as(SysComputedColumn::returnLiteral(0), asQty) + ',' +
            this.as(viewAmount, asAmount) + ' ' +
            'FROM ' + viewName + ' ' +
            this.configurationKeyDependentExpression(configurationKeyNum(WrkCtr),'LEFT OUTER JOIN ' + wrkCtrResourceGroupTableName + ' ') +
            this.configurationKeyDependentExpression(configurationKeyNum(WrkCtr),'ON ' + wrkCtrResourceGroupPartition + '=' + viewPartition + ' ') +
            this.configurationKeyDependentExpression(configurationKeyNum(WrkCtr),'AND ' + wrkCtrResourceGroupDataAreaId + '=' + viewDataAreaId + ' ') +
            this.configurationKeyDependentExpression(configurationKeyNum(WrkCtr),'AND ' + wrkCtrResourceGroupRecId + '=' + viewResourceGroup);

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an round expression.
    /// </summary>
    /// <param name="_expression1">
    /// A string value that contains the real expression.
    /// </param>
    /// <param name="_expression2">
    /// A string value that contains the decimals precision.
    /// </param>
    /// <returns>
    /// A string expression that is formatted as an round expression.
    /// </returns>
    public static str round(str _expresion1, str _expresion2)
    {
        str decimalExpresion = SysComputedColumn::if(SysComputedColumn::equalExpression(_expresion2, SysComputedColumn::returnLiteral(0.0)),
                                                     '0.01',
                                                     _expresion2);

        return '(' + 'ROUND('+ _expresion1 + '/' + decimalExpresion + ', 0)*' + decimalExpresion +')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSQLStatementForConsumedIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the SQL statement for consumed indirect cost.
    /// </summary>
    /// <returns>
    /// The SQL statement for consumed indirect cost.
    /// </returns>
    /// <remarks>
    /// Creates the following SQL statement:
    /// SELECT INVENTVALUEINDIRECTUNIONALL.PARTITION AS PARTITION,
    ///        INVENTVALUEINDIRECTUNIONALL.DATAAREAID AS DATAAREAID,
    ///        INVENTVALUEINDIRECTUNIONALL.RECID AS RECID,
    ///        INVENTVALUEINDIRECTUNIONALL.TRANSDATE AS TRANSDATE,
    ///        3 AS RESOURCETYPE,
    ///        INVENTVALUEINDIRECTUNIONALL.CODE AS RESOURCEID,
    ///        INVENTVALUEINDIRECTUNIONALL.COSTGROUPID AS RESOURCEGROUPID,
    ///        '' AS CONFIGID,
    ///        '' AS COLORID,
    ///        '' AS SIZEID,
    ///        '' AS STYLEID,
    ///        '' AS VERSIONID,
    ///        CASE WHEN INVENTDIM.INVENTSITEID IS NULL THEN '' ELSE INVENTDIM.INVENTSITEID END AS SITEID,
    ///        CASE INVENTVALUEINDIRECTUNIONALL.TRANSREFTYPE WHEN 0 THEN 3 WHEN 1 THEN 12 ELSE 0 END AS REFERENCETYPE,
    ///        INVENTVALUEINDIRECTUNIONALL.TRANSREFID AS REFERENCE,
    ///        2 AS STATEMENTTYPE,
    ///        3 AS STATEMENTLINECATEGORYLEVEL1,
    ///        9 AS STATEMENTLINECATEGORYLEVEL2,
    ///        0 AS STATEMENTLINECATEGORYLEVEL3,
    ///        0 AS QTY,
    ///        (ROUND(INVENTVALUEINDIRECTUNIONALL.AMOUNT/CASE WHEN CURRENCY.ROUNDINGPRECISION = 0 THEN 1.E-2 ELSE CURRENCY.ROUNDINGPRECISION END, 0)*CASE WHEN CURRENCY.ROUNDINGPRECISION = 0 THEN 1.E-2 ELSE CURRENCY.ROUNDINGPRECISION END) AS AMOUNT
    ///   	FROM INVENTVALUEINDIRECTUNIONALL
    ///   	JOIN DIRPARTYTABLE
    ///   	  ON DIRPARTYTABLE.PARTITION=INVENTVALUEINDIRECTUNIONALL.PARTITION
    ///   	 AND DIRPARTYTABLE.DATAAREA=INVENTVALUEINDIRECTUNIONALL.DATAAREAID
    ///   	JOIN LEDGER
    ///   	  ON LEDGER.PARTITION=DIRPARTYTABLE.PARTITION
    ///   	 AND LEDGER.PRIMARYFORLEGALENTITY=DIRPARTYTABLE.RECID
    ///   	JOIN CURRENCY
    ///   	  ON CURRENCY.PARTITION=LEDGER.PARTITION
    ///   	 AND CURRENCY.CURRENCYCODE=LEDGER.ACCOUNTINGCURRENCY
    ///   	LEFT OUTER JOIN PRODTABLE
    ///   	  ON PRODTABLE.PARTITION=INVENTVALUEINDIRECTUNIONALL.PARTITION
    ///   	 AND PRODTABLE.DATAAREAID=INVENTVALUEINDIRECTUNIONALL.DATAAREAID
    ///   	 AND INVENTVALUEINDIRECTUNIONALL.TRANSREFTYPE=0
    ///   	 AND PRODTABLE.PRODID=INVENTVALUEINDIRECTUNIONALL.TRANSREFID
    ///   	LEFT OUTER JOIN INVENTDIM
    ///   	  ON INVENTDIM.PARTITION=PRODTABLE.PARTITION
    ///   	 AND INVENTDIM.DATAAREAID=PRODTABLE.DATAAREAID
    ///   	 AND INVENTDIM.INVENTDIMID=PRODTABLE.INVENTDIMID
    /// </remarks>
    private str createSQLStatementForConsumedIndirectCost()
    {
        CostProdTransRefType2InventCostTransRefTypeMapping  prodTransRefType2InventCostTransRefTypeMapping = CostProdTransRefType2InventCostTransRefTypeMapping::construct();

        SysDictView view = new SysDictView(tableNum(InventValueIndirectUnionAll));
        str viewName = view.name(DbBackend::Sql);
        str viewPartition = view.fieldObject(fieldNum(InventValueIndirectUnionAll, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewDataAreaId = view.fieldObject(fieldNum(InventValueIndirectUnionAll, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewRecId = view.fieldObject(fieldNum(InventValueIndirectUnionAll, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransDate = view.fieldObject(fieldNum(InventValueIndirectUnionAll, TransDate)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewCode = view.fieldObject(fieldNum(InventValueIndirectUnionAll, Code)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewCostGroupId = view.fieldObject(fieldNum(InventValueIndirectUnionAll, CostGroupId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransRefType = view.fieldObject(fieldNum(InventValueIndirectUnionAll, TransRefType)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransRefId = view.fieldObject(fieldNum(InventValueIndirectUnionAll, TransRefId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewAmount = view.fieldObject(fieldNum(InventValueIndirectUnionAll, Amount)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);

        SysDictTable companyInfo = new SysDictTable(tableNum(CompanyInfo));
        str companyInfoTableName = companyInfo.name(DbBackend::Sql);
        str companyInfoPartition = companyInfo.fieldObject(fieldNum(CompanyInfo, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, companyInfoTableName);
        str companyInfoDataArea = companyInfo.fieldObject(fieldNum(CompanyInfo, DataArea)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, companyInfoTableName);
        str companyInfoRecId = companyInfo.fieldObject(fieldNum(CompanyInfo, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, companyInfoTableName);

        SysDictTable ledger = new SysDictTable(tableNum(Ledger));
        str ledgerTableName = ledger.name(DbBackend::Sql);
        str ledgerPartition = ledger.fieldObject(fieldNum(Ledger, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, ledgerTableName);
        str ledgerPrimaryForLegalEntity = ledger.fieldObject(fieldNum(Ledger, PrimaryForLegalEntity)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, ledgerTableName);
        str ledgerAccountingCurrency = ledger.fieldObject(fieldNum(Ledger, AccountingCurrency)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, ledgerTableName);

        SysDictTable currency = new SysDictTable(tableNum(Currency));
        str currencyTableName = currency.name(DbBackend::Sql);
        str currencyPartition = currency.fieldObject(fieldNum(Currency, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, currencyTableName);
        str currencyCurrencyCode = currency.fieldObject(fieldNum(Currency, CurrencyCode)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, currencyTableName);
        str currencyRoundingPrecision = currency.fieldObject(fieldNum(Currency, RoundingPrecision)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, currencyTableName);

        SysDictTable prodTable = new SysDictTable(tableNum(ProdTable));
        str prodTableName = prodTable.name(DbBackend::Sql);
        str prodTablePartition = prodTable.fieldObject(fieldNum(ProdTable, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, prodTableName);
        str prodTableDataAreaId = prodTable.fieldObject(fieldNum(ProdTable, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, prodTableName);
        str prodTableProdId = prodTable.fieldObject(fieldNum(ProdTable, ProdId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, prodTableName);
        str prodTableInventDimId = prodTable.fieldObject(fieldNum(ProdTable, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, prodTableName);

        str sqlStmt = 'SELECT ' +
            this.as(viewPartition, asPartition) + ',' +
            this.as(viewDataAreaId, asDataAreaId) + ',' +
            this.as(viewRecId, asRecId) + ',' +
            this.as(viewTransDate, asTransDate) + ',' +
            this.as(SysComputedColumn::returnLiteral(InventValueReportResourceType::Indirect), asResourceType) + ',' +
            this.as(viewCode, asResourceId) + ',' +
            this.as(viewCostGroupId, asResourceGroupId) + ',' +
            this.configurationKeyDependentExpression(configurationKeyNum(Config), this.as(SysComputedColumn::returnLiteral(''), asConfigId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductColor), this.as(SysComputedColumn::returnLiteral(''), asColorId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductSize), this.as(SysComputedColumn::returnLiteral(''), asSizeId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductStyle), this.as(SysComputedColumn::returnLiteral(''), asStyleId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductVersion), this.as(SysComputedColumn::returnLiteral(''), asVersionId) + ',') +
            this.as(SysComputedColumn::if(SysComputedColumn::isNullExpression(inventDimSiteId),
                                          SysComputedColumn::returnLiteral(''),
                                          inventDimSiteId), asSiteId) + ',' +
            this.as(SysComputedColumn::switch(viewTransRefType,
                                              prodTransRefType2InventCostTransRefTypeMapping.getComparisionExpressionMap(),
                                              SysComputedColumn::returnLiteral(prodTransRefType2InventCostTransRefTypeMapping.getDefaultValue())), asReferenceType) + ', ' +
            this.as(viewTransRefId, asReference) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementType::WIP), asStatementType) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel1::NetConversionCost), asStatementLineCategoryLevel1) + ',' +
            this.as(SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel2::ConsumedIndirectCost), asStatementLineCategoryLevel2) + ',' +
            this.as(SysComputedColumn::returnLiteral(0), asStatementLineCategoryLevel3) + ',' +
            this.as(SysComputedColumn::returnLiteral(0), asQty) + ',' +
            this.as(CostStatementViewBuilder::round(viewAmount, currencyRoundingPrecision), asAmount) + ' ' +
            'FROM ' + viewName + ' ' +
            'JOIN ' + companyInfoTableName + ' ' +
				'ON '  + companyInfoPartition + '=' + viewPartition + ' ' +
				'AND ' + companyInfoDataArea + '=' + viewDataAreaId + ' ' +
            'JOIN ' + ledgerTableName + ' ' +
				'ON '  + ledgerPartition + '=' + companyInfoPartition + ' ' +
				'AND ' + ledgerPrimaryForLegalEntity + '=' + companyInfoRecId + ' ' +
            'JOIN ' + currencyTableName + ' ' +
				'ON '  + currencyPartition + '=' + ledgerPartition + ' ' +
				'AND ' + currencyCurrencyCode + '=' + ledgerAccountingCurrency + ' ' +
			'LEFT OUTER JOIN ' + prodTableName + ' ' +
				'ON '  + prodTablePartition + '=' + viewPartition + ' ' +
				'AND ' + prodTableDataAreaId + '=' + viewDataAreaID + ' ' +
				'AND ' + viewTransRefType + '=' + SysComputedColumn::returnLiteral(0) + ' ' +
                'AND ' + prodTableProdId + '=' + viewTransRefId + ' ' +
			'LEFT OUTER JOIN ' + inventDimTableName + ' ' +
                'ON '  + inventDimPartition + '=' + prodTablePartition + ' ' +
                'AND ' + inventDimDataAreaId + '=' + prodTableDataAreaId + ' ' +
                'AND ' + inventDimInventDimId + '=' + prodTableInventDimId;

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSQLStatementForMaterialCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the SQL statement for material cost.
    /// </summary>
    /// <returns>
    /// The SQL statement for consumed and manufactured cost.
    /// </returns>
    /// <remarks>
    /// Create the following SQL statement:
    /// SELECT INVENTVALUETRANSUNIONALL.PARTITION AS PARTITION,
    ///        INVENTVALUETRANSUNIONALL.DATAAREAID AS DATAAREAID,
    ///        INVENTVALUETRANSUNIONALL.RECID AS RECID,
    ///        INVENTVALUETRANSUNIONALL.TRANSDATE AS TRANSDATE,
    ///        1 AS RESOURCETYPE,
    ///        INVENTVALUETRANSUNIONALL.ITEMID AS RESOURCEID,
    ///        CASE WHEN INVENTITEMGROUPITEM.ITEMGROUPID IS NULL THEN '' ELSE INVENTITEMGROUPITEM.ITEMGROUPID END AS RESOURCEGROUPID,
    ///        INVENTDIM.CONFIGID AS CONFIGID,
    ///        INVENTDIM.INVENTCOLORID AS COLORID,
    ///        INVENTDIM.INVENTSIZEID AS SIZEID,
    ///        INVENTDIM.INVENTSTYLEID AS STYLEID,
    ///        INVENTDIM.INVENTVERSIONID AS VERSIONID,
    ///        INVENTDIM.INVENTSITEID AS SITEID,
    ///        CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 0 THEN 2 WHEN 10 THEN 5 WHEN 100 THEN 3 WHEN 103 THEN 5 WHEN 11 THEN 10 WHEN 12 THEN 11 WHEN 13 THEN 5 WHEN 14 THEN 10 WHEN 15 THEN 8 WHEN 150 THEN 2 WHEN 2 THEN 3 WHEN 20 THEN 5 WHEN 201 THEN 5 WHEN 202 THEN 5 WHEN 203 THEN 5 WHEN 21 THEN 4 WHEN 22 THEN 4 WHEN 23 THEN 4 WHEN 25 THEN 9 WHEN 27 THEN 12 WHEN 28 THEN 5 WHEN 29 THEN 5 WHEN 3 THEN 1 WHEN 30 THEN 12 WHEN 31 THEN 12 WHEN 32 THEN 12 WHEN 4 THEN 5 WHEN 5 THEN 5 WHEN 6 THEN 5 WHEN 8 THEN 3 WHEN 9 THEN 5 ELSE 0 END AS REFERENCETYPE,
    ///        INVENTVALUETRANSUNIONALL.REFERENCE AS REFERENCE,
    ///        x.statementType AS STATEMENTTYPE,
    ///        x.StatementLineCategoryLevel1 AS STATEMENTLINECATEGORYLEVEL1,
    ///        x.StatementLineCategoryLevel2 AS STATEMENTLINECATEGORYLEVEL2,
    ///        x.StatementLineCategoryLevel3 AS STATEMENTLINECATEGORYLEVEL3,
    ///        x.Qty AS QTY,
    ///        x.Amount AS AMOUNT
    /// FROM INVENTVALUETRANSUNIONALL
    ///     CROSS APPLY (values
    ///     (1,CASE WHEN INVENTVALUETRANSUNIONALL.ISPOSTED = 1 THEN CASE INVENTVALUETRANSUNIONALL.POSTINGTYPEOFFSET WHEN 106 THEN 1 WHEN 110 THEN 1 WHEN 71 THEN 1 WHEN 83 THEN 1 ELSE 2 END ELSE CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 100 THEN 1 WHEN 2 THEN 1 WHEN 27 THEN 1 WHEN 3 THEN 1 ELSE 2 END END,CASE WHEN INVENTVALUETRANSUNIONALL.ISPOSTED = 1 THEN CASE INVENTVALUETRANSUNIONALL.POSTINGTYPEOFFSET WHEN 106 THEN 2 WHEN 108 THEN 4 WHEN 110 THEN 2 WHEN 111 THEN 4 WHEN 121 THEN 4 WHEN 219 THEN 5 WHEN 220 THEN 5 WHEN 52 THEN 6 WHEN 60 THEN 6 WHEN 71 THEN 1 WHEN 83 THEN 1 ELSE 3 END ELSE CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 0 THEN 6 WHEN 100 THEN 2 WHEN 14 THEN 5 WHEN 15 THEN 5 WHEN 2 THEN 2 WHEN 201 THEN 5 WHEN 202 THEN 5 WHEN 203 THEN 5 WHEN 21 THEN 5 WHEN 22 THEN 5 WHEN 27 THEN 2 WHEN 28 THEN 5 WHEN 29 THEN 5 WHEN 3 THEN 1 WHEN 30 THEN 4 WHEN 31 THEN 4 WHEN 32 THEN 4 WHEN 6 THEN 5 WHEN 7 THEN 5 WHEN 8 THEN 4 ELSE 3 END END,CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 13 THEN 1 ELSE 0 END,INVENTVALUETRANSUNIONALL.QTY,INVENTVALUETRANSUNIONALL.AMOUNT),
    ///     (2,CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 100 THEN 4 WHEN 2 THEN 4 WHEN 27 THEN 4 WHEN 30 THEN 3 WHEN 31 THEN 3 WHEN 32 THEN 3 WHEN 8 THEN 3 ELSE 0 END,CASE INVENTVALUETRANSUNIONALL.REFERENCECATEGORY WHEN 100 THEN 2 WHEN 2 THEN 2 WHEN 27 THEN 2 WHEN 30 THEN 4 WHEN 31 THEN 4 WHEN 32 THEN 4 WHEN 8 THEN 4 ELSE 0 END,0,0,-(INVENTVALUETRANSUNIONALL.AMOUNT)))
    ///     x(StatementType, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Qty, Amount)
    /// LEFT OUTER JOIN INVENTTABLE
    ///   ON INVENTTABLE.PARTITION=INVENTVALUETRANSUNIONALL.PARTITION
    ///  AND INVENTTABLE.DATAAREAID=INVENTVALUETRANSUNIONALL.DATAAREAID
    ///  AND INVENTTABLE.ITEMID=INVENTVALUETRANSUNIONALL.ITEMID
    /// LEFT OUTER JOIN INVENTITEMGROUPITEM
    ///   ON INVENTITEMGROUPITEM.PARTITION=INVENTTABLE.PARTITION
    ///  AND INVENTITEMGROUPITEM.ITEMDATAAREAID=INVENTTABLE.DATAAREAID
    ///  AND INVENTITEMGROUPITEM.ITEMID=INVENTTABLE.ITEMID
    /// LEFT OUTER JOIN INVENTDIM
    ///   ON INVENTDIM.PARTITION=INVENTVALUETRANSUNIONALL.PARTITION
    ///  AND INVENTDIM.DATAAREAID=INVENTVALUETRANSUNIONALL.DATAAREAID
    ///  AND INVENTDIM.INVENTDIMID=INVENTVALUETRANSUNIONALL.INVENTDIMID
    /// WHERE ((x.StatementType = 2 AND INVENTVALUETRANSUNIONALL.REFERENCECATEGORY in (2,8,27,30,32,31,100) AND INVENTVALUETRANSUNIONALL.POSTINGTYPEOFFSET not in (225,235)) OR (x.StatementType = 1 AND INVENTTABLE.ITEMTYPE=0))
    /// </remarks>
    private str createSQLStatementForMaterialCost()
    {
        CostInventTransType2InventCostTransRefTypeMapping inventTransType2InventCostTransRefTypeMapping = CostInventTransType2InventCostTransRefTypeMapping::construct();
        CostInventTransType2CostStatementLineCategoryLevel1Mapping inventTransType2CostStatementLineCategoryLevel1Mapping = CostInventTransType2CostStatementLineCategoryLevel1Mapping::construct();
        CostInventTransType2CostStatementLineCategoryLevel2Mapping inventTransType2CostStatementLineCategoryLevel2Mapping = CostInventTransType2CostStatementLineCategoryLevel2Mapping::construct();
        CostInventTransType2CostStatementLineCategoryLevel3Mapping inventTransType2CostStatementLineCategoryLevel3Mapping = CostInventTransType2CostStatementLineCategoryLevel3Mapping::construct();
        CostOffsetPostingType2CostStatementLineCategoryLevel1Mapping offsetPostingType2CostStatementLineCategoryLevel1Mapping = CostOffsetPostingType2CostStatementLineCategoryLevel1Mapping::construct();
        CostOffsetPostingType2CostStatementLineCategoryLevel2Mapping offsetPostingType2CostStatementLineCategoryLevel2Mapping = CostOffsetPostingType2CostStatementLineCategoryLevel2Mapping::construct();
        CostInventTransType2CostStatementLineCategoryLevel1MappingForWIP inventTransType2CostStatementLineCategoryLevel1MappingForWIP = CostInventTransType2CostStatementLineCategoryLevel1MappingForWIP::construct();
        CostInventTransType2CostStatementLineCategoryLevel2MappingForWIP inventTransType2CostStatementLineCategoryLevel2MappingForWIP = CostInventTransType2CostStatementLineCategoryLevel2MappingForWIP::construct();

        SysDictView view = new SysDictView(tableNum(InventValueTransUnionAll));
        str viewName = view.name(DbBackend::Sql);
        str viewPartition = view.fieldObject(fieldNum(InventValueTransUnionAll, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewDataAreaId = view.fieldObject(fieldNum(InventValueTransUnionAll, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewRecId = view.fieldObject(fieldNum(InventValueTransUnionAll, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransDate = view.fieldObject(fieldNum(InventValueTransUnionAll, TransDate)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewItemId = view.fieldObject(fieldNum(InventValueTransUnionAll, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewInventDimId = view.fieldObject(fieldNum(InventValueTransUnionAll, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewIsPosted = view.fieldObject(fieldNum(InventValueTransUnionAll, IsPosted)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewPostingTypeOffset = view.fieldObject(fieldNum(InventValueTransUnionAll, PostingTypeOffset)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewReferenceCategory = view.fieldObject(fieldNum(InventValueTransUnionAll, ReferenceCategory)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewReference = view.fieldObject(fieldNum(InventValueTransUnionAll, Reference)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewQty = view.fieldObject(fieldNum(InventValueTransUnionAll, Qty)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewAmount = view.fieldObject(fieldNum(InventValueTransUnionAll, Amount)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);

        SysDictTable inventTable = new SysDictTable(tableNum(InventTable));
        str inventTableTableName = inventTable.name(DbBackend::Sql);
        str inventTablePartition = inventTable.fieldObject(fieldNum(InventTable, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventTableTableName);
        str inventTableDataAreaId = inventTable.fieldObject(fieldNum(InventTable, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventTableTableName);
        str inventTableItemId = inventTable.fieldObject(fieldNum(InventTable, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventTableTableName);
        str inventTableItemType = inventTable.fieldObject(fieldNum(InventTable, ItemType)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventTableTableName);

        str viewPostingTypeOffsetRange = SysComputedColumn::returnLiteral(LedgerPostingType::InventStdCostRoundingVariance) + ',' 
                        + SysComputedColumn::returnLiteral(LedgerPostingType::InventStdCostRevaluation);

        if (CostWIPStatementExcludeAdjustmentAmountFlight::instance().isEnabled())
        {
            // Exclude production finished goods receipt adjustment cost amount directly from closing form
            viewPostingTypeOffsetRange += ',';
            viewPostingTypeOffsetRange += SysComputedColumn::returnLiteral(LedgerPostingType::InventProfit);
        }
        
        str sqlStmt = 'SELECT ' +
            this.as(viewPartition, asPartition) + ',' +
            this.as(viewDataAreaId, asDataAreaId) + ',' +
            this.as(viewRecId, asRecId) + ',' +
            this.as(viewTransDate, asTransDate) + ',' +
            this.as(SysComputedColumn::returnLiteral(InventValueReportResourceType::Material), asResourceType) + ',' +
            this.as(viewItemId, asResourceId) + ',' +
            this.as(SysComputedColumn::if(SysComputedColumn::isNullExpression(inventItemGroupItemItemGroupId),
                                          SysComputedColumn::returnLiteral(''),
                                          inventItemGroupItemItemGroupId), asResourceGroupId) + ',' +
            this.configurationKeyDependentExpression(configurationKeyNum(Config), this.as(inventDimConfigId, asConfigId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductColor), this.as(inventDimColorId, asColorId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductSize), this.as(inventDimSizeIdId, asSizeId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductStyle), this.as(inventDimStyleId, asStyleId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductVersion), this.as(inventDimVersionId, asVersionId) + ',') +
            this.as(inventDimSiteId, asSiteId) + ',' +
            this.as(SysComputedColumn::switch(viewReferenceCategory,
                                              inventTransType2InventCostTransRefTypeMapping.getComparisionExpressionMap(),
                                              SysComputedColumn::returnLiteral(inventTransType2InventCostTransRefTypeMapping.getDefaultValue())), asReferenceType) + ', ' +
            this.as(viewReference, asReference) + ',' +
            this.as('x.statementType', asStatementType) + ',' +
            this.as('x.StatementLineCategoryLevel1', asStatementLineCategoryLevel1) + ',' +
            this.as('x.StatementLineCategoryLevel2', asStatementLineCategoryLevel2) + ',' +
            this.as('x.StatementLineCategoryLevel3', asStatementLineCategoryLevel3) + ',' +
            this.as('x.Qty', asQty) + ',' +
            this.as('x.Amount', asAmount) + ' ' +
            'FROM ' + viewName + ' ' +
            'CROSS APPLY (values '+
                '(' + SysComputedColumn::returnLiteral(CostStatementType::Inventory) + ',' +
                      SysComputedColumn::if(SysComputedColumn::equalExpression(viewIsPosted,
                                                                               SysComputedColumn::returnLiteral(NoYes::Yes)),
                                            SysComputedColumn::switch(viewPostingTypeOffset,
                                                                      offsetPostingType2CostStatementLineCategoryLevel1Mapping.getComparisionExpressionMap(),
                                                                      SysComputedColumn::returnLiteral(offsetPostingType2CostStatementLineCategoryLevel1Mapping.getDefaultValue())),
                                            SysComputedColumn::switch(viewReferenceCategory,
                                                                      inventTransType2CostStatementLineCategoryLevel1Mapping.getComparisionExpressionMap(),
                                                                      SysComputedColumn::returnLiteral(inventTransType2CostStatementLineCategoryLevel1Mapping.getDefaultValue()))) + ',' +
                      SysComputedColumn::if(SysComputedColumn::equalExpression(viewIsPosted,
                                                                               SysComputedColumn::returnLiteral(NoYes::Yes)),
                                            SysComputedColumn::switch(viewPostingTypeOffset,
                                                                      offsetPostingType2CostStatementLineCategoryLevel2Mapping.getComparisionExpressionMap(),
                                                                      SysComputedColumn::returnLiteral(offsetPostingType2CostStatementLineCategoryLevel2Mapping.getDefaultValue())),
                                            SysComputedColumn::switch(viewReferenceCategory,
                                                                      inventTransType2CostStatementLineCategoryLevel2Mapping.getComparisionExpressionMap(),
                                                                      SysComputedColumn::returnLiteral(inventTransType2CostStatementLineCategoryLevel2Mapping.getDefaultValue()))) + ',' +
                      SysComputedColumn::switch(viewReferenceCategory,
                                                inventTransType2CostStatementLineCategoryLevel3Mapping.getComparisionExpressionMap(),
                                                SysComputedColumn::returnLiteral(inventTransType2CostStatementLineCategoryLevel3Mapping.getDefaultValue())) + ',' +
                      viewQty + ',' +
                      viewAmount + '),' +
                '(' + SysComputedColumn::returnLiteral(CostStatementType::WIP) + ',' +
                      SysComputedColumn::switch(viewReferenceCategory,
                                                inventTransType2CostStatementLineCategoryLevel1MappingForWIP.getComparisionExpressionMap(),
                                                SysComputedColumn::returnLiteral(inventTransType2CostStatementLineCategoryLevel1MappingForWIP.getDefaultValue())) + ',' +
                      SysComputedColumn::switch(viewReferenceCategory,
                                                inventTransType2CostStatementLineCategoryLevel2MappingForWIP.getComparisionExpressionMap(),
                                                SysComputedColumn::returnLiteral(inventTransType2CostStatementLineCategoryLevel2MappingForWIP.getDefaultValue())) + ',' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      SysComputedColumn::negative(viewAmount) + ')' +
            ') x(StatementType, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Qty, Amount) ' +
            'LEFT OUTER JOIN ' + inventTableTableName + ' ' +
              'ON '  + inventTablePartition + '=' + viewPartition + ' ' +
              'AND ' + inventTableDataAreaId + '=' + viewDataAreaID + ' ' +
              'AND ' + inventTableItemId + '=' + viewItemId + ' ' +
            'LEFT OUTER JOIN ' + inventItemGroupItemTableName + ' ' +
              'ON '  + inventItemGroupItemPartition + '=' + inventTablePartition + ' ' +
              'AND ' + inventItemGroupItemItemDataAreaId + '=' + inventTableDataAreaId + ' ' +
              'AND ' + inventItemGroupItemItemId + '=' + inventTableItemId + ' ' +
            'LEFT OUTER JOIN ' + inventDimTableName + ' ' +
              'ON '  + inventDimPartition + '=' + viewPartition + ' ' +
              'AND ' + inventDimDataAreaId + '=' + viewDataAreaId + ' ' +
              'AND ' + inventDimInventDimId + '=' + viewInventDimId + ' ' +
            'WHERE (( x.StatementType = ' + SysComputedColumn::returnLiteral(CostStatementType::WIP) + ' ' +
              'AND ' + viewReferenceCategory + ' in (' + SysComputedColumn::returnLiteral(InventTransType::Production) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::ProdLine) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::KanbanJobProcess) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::KanbanJobPickingList) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::KanbanEmptied) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::KanbanJobWIP) + ',' +
                                                         SysComputedColumn::returnLiteral(InventTransType::PmfProdCoBy) + ') ' +
              'AND ' + viewPostingTypeOffset + ' not in (' + viewPostingTypeOffsetRange + ')' +
             ') OR (x.StatementType = ' + SysComputedColumn::returnLiteral(CostStatementType::Inventory) + ' ' +
             'AND ' + inventTableItemType + '=' + SysComputedColumn::returnLiteral(ItemType::Item) +
             '))';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSQLStatementForVariances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the SQL statement for variances.
    /// </summary>
    /// <returns>
    /// The SQL statement for variances.
    /// </returns>
    /// <remarks>
    /// Creates the following SQL statement:
    /// SELECT INVENTCOSTTRANSVARIANCEVIEW.PARTITION AS PARTITION,
    ///        INVENTCOSTTRANSVARIANCEVIEW.DATAAREAID AS DATAAREAID,
    ///        INVENTCOSTTRANSVARIANCEVIEW.RECID AS RECID,
    ///        INVENTCOSTTRANSVARIANCEVIEW.TRANSDATE AS TRANSDATE,
    ///        1 AS RESOURCETYPE,
    ///        INVENTCOSTTRANSVARIANCEVIEW.ITEMID AS RESOURCEID,
    ///        CASE WHEN INVENTITEMGROUPITEM.ITEMGROUPID IS NULL THEN '' ELSE INVENTITEMGROUPITEM.ITEMGROUPID END AS RESOURCEGROUPID,
    ///        INVENTDIM.CONFIGID AS CONFIGID,
    ///        INVENTDIM.INVENTCOLORID AS COLORID,
    ///        INVENTDIM.INVENTSIZEID AS SIZEID,
    ///        INVENTDIM.INVENTSTYLEID AS STYLEID,
    ///        INVENTDIM.INVENTVERSIONID AS VERSIONID,
    ///        INVENTDIM.INVENTSITEID AS SITEID,
    ///        INVENTCOSTTRANSVARIANCEVIEW.COSTTRANSREFTYPE AS REFERENCETYPE,
    ///        INVENTCOSTTRANSVARIANCEVIEW.TRANSREFID AS REFERENCE,
    ///        x.statementType AS STATEMENTTYPE,
    ///        x.StatementLineCategoryLevel1 AS STATEMENTLINECATEGORYLEVEL1,
    ///        x.StatementLineCategoryLevel2 AS STATEMENTLINECATEGORYLEVEL2,
    ///        x.StatementLineCategoryLevel2 AS STATEMENTLINECATEGORYLEVEL3,
    ///        0 AS QTY,x.Amount AS AMOUNT
    /// FROM INVENTCOSTTRANSVARIANCEVIEW
    /// CROSS APPLY (values
    /// (3,0,(CASE INVENTCOSTTRANSVARIANCEVIEW.COSTTRANSREFTYPE WHEN 1 THEN 1 WHEN 10 THEN 1 WHEN 11 THEN 1 WHEN 12 THEN 2 WHEN 2 THEN 1 WHEN 3 THEN 2 WHEN 4 THEN 1 WHEN 5 THEN 1 WHEN 8 THEN 1 WHEN 9 THEN 1 ELSE 3 END),(CASE INVENTCOSTTRANSVARIANCEVIEW.VARIANCETYPE WHEN 1 THEN 101 WHEN 2 THEN 102 WHEN 3 THEN 103 WHEN 4 THEN 104 WHEN 5 THEN 105 WHEN 6 THEN 106 WHEN 7 THEN 107 WHEN 8 THEN 108 WHEN 9 THEN 109 ELSE 109 END),INVENTCOSTTRANSVARIANCEVIEW.COSTAMOUNTPOSTED),
    /// (1,2,3,0,INVENTCOSTTRANSVARIANCEVIEW.COSTAMOUNTPOSTED),
    /// (1,(CASE INVENTCOSTTRANSVARIANCEVIEW.COSTTRANSREFTYPE WHEN 1 THEN 1 WHEN 10 THEN 1 WHEN 11 THEN 1 WHEN 2 THEN 1 WHEN 4 THEN 1 WHEN 5 THEN 1 WHEN 8 THEN 1 WHEN 9 THEN 1 ELSE 2 END),(CASE INVENTCOSTTRANSVARIANCEVIEW.COSTTRANSREFTYPE WHEN 1 THEN 1 WHEN 10 THEN 1 WHEN 11 THEN 1 WHEN 12 THEN 2 WHEN 2 THEN 1 WHEN 3 THEN 2 WHEN 4 THEN 1 WHEN 5 THEN 1 WHEN 8 THEN 1 WHEN 9 THEN 1 ELSE 3 END),0,-(INVENTCOSTTRANSVARIANCEVIEW.COSTAMOUNTPOSTED)),
    /// (2,4,2,0,INVENTCOSTTRANSVARIANCEVIEW.COSTAMOUNTPOSTED),
    /// (2,4,10,(CASE INVENTCOSTTRANSVARIANCEVIEW.VARIANCETYPE WHEN 1 THEN 101 WHEN 2 THEN 102 WHEN 3 THEN 103 WHEN 4 THEN 104 WHEN 5 THEN 105 WHEN 6 THEN 106 WHEN 7 THEN 107 WHEN 8 THEN 108 WHEN 9 THEN 109 ELSE 109 END),-(INVENTCOSTTRANSVARIANCEVIEW.COSTAMOUNTPOSTED)))
    /// x(StatementType, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Amount)
    /// LEFT OUTER JOIN INVENTITEMGROUPITEM
    ///   ON INVENTITEMGROUPITEM.PARTITION=INVENTCOSTTRANSVARIANCEVIEW.PARTITION
    ///  AND INVENTITEMGROUPITEM.ITEMDATAAREAID=INVENTCOSTTRANSVARIANCEVIEW.DATAAREAID
    ///  AND INVENTITEMGROUPITEM.ITEMID=INVENTCOSTTRANSVARIANCEVIEW.ITEMID
    /// LEFT OUTER JOIN INVENTDIM
    ///   ON INVENTDIM.PARTITION=INVENTCOSTTRANSVARIANCEVIEW.PARTITION
    ///  AND INVENTDIM.DATAAREAID=INVENTCOSTTRANSVARIANCEVIEW.DATAAREAID
    ///  AND INVENTDIM.INVENTDIMID=INVENTCOSTTRANSVARIANCEVIEW.FINANCIALINVENTDIMID
    /// WHERE ((x.StatementType = 1 AND INVENTCOSTTRANSVARIANCEVIEW.ITEMID!='')
    ///    OR x.StatementType = 3
    ///    OR (x.StatementType = 2 AND INVENTCOSTTRANSVARIANCEVIEW.COSTTRANSREFTYPE in (3,12)))
    /// </remarks>
    private str createSQLStatementForVariances()
    {
        var inventCostVarianceType2CostStatementLineCategoryLevel3Mapping = CostInventCostVarianceType2CostStatementLineCategoryLevel3Mapping::construct();
        var inventCostTransRefType2CostStatementLineCategoryLevel1MappingForVariance = CostInventCostTransRefType2CostStatementLineCategoryLevel1MappingForVariance::construct();
        var inventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance = CostInventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance::construct();

        SysDictView view = new SysDictView(tableNum(InventCostTransVarianceView));
        str viewName = view.name(DbBackend::Sql);
        str viewPartition = view.fieldObject(fieldNum(InventCostTransVarianceView, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewDataAreaId = view.fieldObject(fieldNum(InventCostTransVarianceView, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewRecId = view.fieldObject(fieldNum(InventCostTransVarianceView, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransDate = view.fieldObject(fieldNum(InventCostTransVarianceView, TransDate)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewItemId = view.fieldObject(fieldNum(InventCostTransVarianceView, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewInventDimId = view.fieldObject(fieldNum(InventCostTransVarianceView, FinancialInventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewCostTransRefType = view.fieldObject(fieldNum(InventCostTransVarianceView, CostTransRefType)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewTransRefId = view.fieldObject(fieldNum(InventCostTransVarianceView, TransRefId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewVarianceType = view.fieldObject(fieldNum(InventCostTransVarianceView, VarianceType)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        str viewAmount = view.fieldObject(fieldNum(InventCostTransVarianceView, CostAmountPosted)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, viewName);
        
        str sqlStmt = 'SELECT ' +
            this.as(viewPartition, asPartition) + ',' +
            this.as(viewDataAreaId, asDataAreaId) + ',' +
            this.as(viewRecId, asRecId) + ',' +
            this.as(viewTransDate, asTransDate) + ',' +
            this.as(SysComputedColumn::returnLiteral(InventValueReportResourceType::Material), asResourceType) + ',' +
            this.as(viewItemId, asResourceId) + ',' +
            this.as(SysComputedColumn::if(SysComputedColumn::isNullExpression(inventItemGroupItemItemGroupId),
                                          SysComputedColumn::returnLiteral(''),
                                          inventItemGroupItemItemGroupId), asResourceGroupId) + ',' +
            this.configurationKeyDependentExpression(configurationKeyNum(Config), this.as(inventDimConfigId, asConfigId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductColor), this.as(inventDimColorId, asColorId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductSize), this.as(inventDimSizeIdId, asSizeId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductStyle), this.as(inventDimStyleId, asStyleId) + ',') +
            this.configurationKeyDependentExpression(configurationKeyNum(EcoResProductVersion), this.as(inventDimVersionId, asVersionId) + ',') +
            this.as(inventDimSiteId, asSiteId) + ',' +
            this.as(viewCostTransRefType, asReferenceType) + ', ' +
            this.as(viewTransRefId, asReference) + ',' +
            this.as('x.statementType', asStatementType) + ',' +
            this.as('x.StatementLineCategoryLevel1', asStatementLineCategoryLevel1) + ',' +
            this.as('x.StatementLineCategoryLevel2', asStatementLineCategoryLevel2) + ',' +
            this.as('x.StatementLineCategoryLevel3', asStatementLineCategoryLevel3) + ',' +
            this.as(SysComputedColumn::returnLiteral(0), asQty) + ',' +
            this.as('x.Amount', asAmount) + ' ' +
            'FROM ' + viewName + ' ' +
            'CROSS APPLY (values '+
                '(' + SysComputedColumn::returnLiteral(CostStatementType::Variance) + ',' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      '(' + SysComputedColumn::switch(viewCostTransRefType,
                                                      inventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance.getComparisionExpressionMap(),
                                                      SysComputedColumn::returnLiteral(inventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance.getDefaultValue())) +
                      '),' +
                      '(' + SysComputedColumn::switch(viewVarianceType,
                                                      inventCostVarianceType2CostStatementLineCategoryLevel3Mapping.getComparisionExpressionMap(),
                                                      SysComputedColumn::returnLiteral(inventCostVarianceType2CostStatementLineCategoryLevel3Mapping.getDefaultValue())) +
                      '),' +
                      viewAmount + '),' +
                // Adjust disposed on inventory statement with variance
                '(' + SysComputedColumn::returnLiteral(CostStatementType::Inventory) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel1::NetUsage) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel2::Disposed) + ',' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      viewAmount + '),' +
                // Adjust statement lines on inventory statement with variance
                '(' + SysComputedColumn::returnLiteral(CostStatementType::Inventory) + ',' +
                      '(' + SysComputedColumn::switch(viewCostTransRefType,
                                                      inventCostTransRefType2CostStatementLineCategoryLevel1MappingForVariance.getComparisionExpressionMap(),
                                                      SysComputedColumn::returnLiteral(inventCostTransRefType2CostStatementLineCategoryLevel1MappingForVariance.getDefaultValue())) +
                      '),' +
                      '(' + SysComputedColumn::switch(viewCostTransRefType,
                                                      inventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance.getComparisionExpressionMap(),
                                                      SysComputedColumn::returnLiteral(inventCostTransRefType2CostStatementLineCategoryLevel2MappingForVariance.getDefaultValue())) +
                      '),' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      SysComputedColumn::negative(viewAmount) + '),' +
                // Adjust WIP statement
                '(' + SysComputedColumn::returnLiteral(CostStatementType::WIP) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel1::NetCostOfGoodsManufactured) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel2::ManufacturedCost) + ',' +
                      SysComputedColumn::returnLiteral(0) + ',' +
                      viewAmount + '),' +
                '(' + SysComputedColumn::returnLiteral(CostStatementType::WIP) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel1::NetCostOfGoodsManufactured) + ',' +
                      SysComputedColumn::returnLiteral(CostStatementLineCategoryLevel2::Variances) + ',' +
                      '(' + SysComputedColumn::switch(viewVarianceType,
                                                      inventCostVarianceType2CostStatementLineCategoryLevel3Mapping.getComparisionExpressionMap(),
                                                      SysComputedColumn::returnLiteral(inventCostVarianceType2CostStatementLineCategoryLevel3Mapping.getDefaultValue())) +
                      '),' +
                      SysComputedColumn::negative(viewAmount) + ')' +
            ') x(StatementType, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Amount) ' +
            'LEFT OUTER JOIN ' + inventItemGroupItemTableName + ' ' +
              'ON ' + inventItemGroupItemPartition + '=' + viewPartition + ' ' +
              'AND ' + inventItemGroupItemItemDataAreaId + '=' + viewDataAreaId + ' ' +
              'AND ' + inventItemGroupItemItemId + '=' + viewItemId + ' ' +
            'LEFT OUTER JOIN ' + inventDimTableName + ' ' +
              'ON '  + inventDimPartition + '=' + viewPartition + ' ' +
              'AND ' + inventDimDataAreaId + '=' + viewDataAreaId + ' ' +
              'AND ' + inventDimInventDimId + '=' + viewInventDimId + ' ' +
            'WHERE ((x.StatementType = ' + SysComputedColumn::returnLiteral(CostStatementType::Inventory) + ' AND ' + viewItemId + '!=\'\') ' +
               'OR x.StatementType = ' + SysComputedColumn::returnLiteral(CostStatementType::Variance) + ' ' +
               'OR (x.StatementType = ' + SysComputedColumn::returnLiteral(CostStatementType::WIP) + ' AND ' + viewCostTransRefType + ' in (' + SysComputedColumn::returnLiteral(InventCostTransRefType::Production) + ',' + SysComputedColumn::returnLiteral(InventCostTransRefType::ProductionFlow) + ')))';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the SQL statement to create the <c>CostStatementViewBuilder</c> view.
    /// </summary>
    private str createViewSqlStmt()
    {
        str sqlStmt = 'CREATE VIEW ' + costStatementViewName + ' AS ' + this.createSQLStatementForMaterialCost();

        sqlStmt += ' UNION ALL ' + this.createSQLStatementForVariances();

        if (isConfigurationkeyEnabled(configurationKeyNum(ProdRouting)))
        {
            sqlStmt += ' UNION ALL ' + this.createSQLStatementForConsumedmanufacturingCost();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Prod)))
        {
            sqlStmt += ' UNION ALL ' + this.createSQLStatementForConsumedIndirectCost();
        }

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        SysDictView costStatementView = new SysDictView(tableNum(CostStatementView));
        costStatementViewName           = costStatementView.name(DbBackend::Sql);
        asPartition                     = costStatementView.fieldObject(fieldNum(CostStatementView, Partition)).name(DbBackend::Sql);
        asDataAreaId                    = costStatementView.fieldObject(fieldNum(CostStatementView, DataAreaId)).name(DbBackend::Sql);
        asRecId                         = costStatementView.fieldObject(fieldNum(CostStatementView, RecId)).name(DbBackend::Sql);
        asTransDate                     = costStatementView.fieldObject(fieldNum(CostStatementView, TransDate)).name(DbBackend::Sql);
        asResourceType                  = costStatementView.fieldObject(fieldNum(CostStatementView, ResourceType)).name(DbBackend::Sql);
        asResourceId                    = costStatementView.fieldObject(fieldNum(CostStatementView, ResourceId)).name(DbBackend::Sql);
        asResourceGroupId               = costStatementView.fieldObject(fieldNum(CostStatementView, ResourceGroupId)).name(DbBackend::Sql);
        asConfigId                      = costStatementView.fieldObject(fieldNum(CostStatementView, ConfigId)).name(DbBackend::Sql);
        asColorId                       = costStatementView.fieldObject(fieldNum(CostStatementView, ColorId)).name(DbBackend::Sql);
        asSizeId                        = costStatementView.fieldObject(fieldNum(CostStatementView, SizeId)).name(DbBackend::Sql);
        asStyleId                       = costStatementView.fieldObject(fieldNum(CostStatementView, StyleId)).name(DbBackend::Sql);
        asVersionId                     = costStatementView.fieldObject(fieldNum(CostStatementView, VersionId)).name(DbBackend::Sql);
        asSiteId                        = costStatementView.fieldObject(fieldNum(CostStatementView, SiteId)).name(DbBackend::Sql);
        asReferenceType                 = costStatementView.fieldObject(fieldNum(CostStatementView, ReferenceType)).name(DbBackend::Sql);
        asReference                     = costStatementView.fieldObject(fieldNum(CostStatementView, Reference)).name(DbBackend::Sql);
        asStatementType                 = costStatementView.fieldObject(fieldNum(CostStatementView, StatementType)).name(DbBackend::Sql);
        asStatementLineCategoryLevel1   = costStatementView.fieldObject(fieldNum(CostStatementView, StatementLineCategoryLevel1)).name(DbBackend::Sql);
        asStatementLineCategoryLevel2   = costStatementView.fieldObject(fieldNum(CostStatementView, StatementLineCategoryLevel2)).name(DbBackend::Sql);
        asStatementLineCategoryLevel3   = costStatementView.fieldObject(fieldNum(CostStatementView, StatementLineCategoryLevel3)).name(DbBackend::Sql);
        asQty                           = costStatementView.fieldObject(fieldNum(CostStatementView, Qty)).name(DbBackend::Sql);
        asAmount                        = costStatementView.fieldObject(fieldNum(CostStatementView, Amount)).name(DbBackend::Sql);

        SysDictTable inventItemGroupItem = new SysDictTable(tableNum(InventItemGroupItem));
        inventItemGroupItemTableName = inventItemGroupItem.name(DbBackend::Sql);
        inventItemGroupItemPartition = inventItemGroupItem.fieldObject(fieldNum(InventItemGroupItem, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventItemGroupItemTableName);
        inventItemGroupItemItemDataAreaId = inventItemGroupItem.fieldObject(fieldNum(InventItemGroupItem, ItemDataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventItemGroupItemTableName);
        inventItemGroupItemItemId = inventItemGroupItem.fieldObject(fieldNum(InventItemGroupItem, ItemId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventItemGroupItemTableName);
        inventItemGroupItemItemGroupId = inventItemGroupItem.fieldObject(fieldNum(InventItemGroupItem, ItemGroupId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventItemGroupItemTableName);

        SysDictTable inventDim = new SysDictTable(tableNum(InventDim));
        inventDimTableName = inventDim.name(DbBackend::Sql);
        inventDimPartition = inventDim.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimDataAreaId = inventDim.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimInventDimId = inventDim.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimConfigId = inventDim.fieldObject(fieldNum(InventDim, ConfigId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimColorId = inventDim.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimSizeIdId = inventDim.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimStyleId = inventDim.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimVersionId = inventDim.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
        inventDimSiteId = inventDim.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, inventDimTableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>CostStatementViewBuilder</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>CostStatementViewBuilder</c> class.</returns>
    public static CostStatementViewBuilder contruct()
    {
        return new CostStatementViewBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>