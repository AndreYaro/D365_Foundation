<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetSettingsService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TSTimesheetSettingsService</c> class contains the methods for the retrieval of timesheet settings for the <c>TsTimesheetService</c> class.
/// </summary>
public class TSTimesheetSettingsService extends TsTimesheetService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTimesheetSettingsByRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the initial configuration settings.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_settingsIncludeFieldRulesParams">
    ///     Rules on which fields to retrieve.  Can impact performance.
    /// </param>
    /// <returns>
    ///     An object of <c>TSTimesheetSettings</c> class.
    /// </returns>
    public TSTimesheetSettings getTimesheetSettingsByRules(ResourceRecId _resource, TSTimesheetSettingsIncludeFieldRulesParams _settingsIncludeFieldRulesParams)
    {
        TSTimesheetSettings tsTimesheetSettings = new TSTimesheetSettings();
        DataAreaId defaultLE = this.getDefaultLegalEntity();

        if (this.isValidResource(_resource))
        {
            DataAreaId resourceCompanyId = this.getResourceLegalEntity(_resource);
            changecompany(resourceCompanyId)
            {
                tsTimesheetSettings.parmDefaultLegalEntity(defaultLE);
                tsTimesheetSettings.parmLegalEntity(resourceCompanyId);
                tsTimesheetSettings.parmLegalEntityName(CompanyInfo::findDataArea(resourceCompanyId).Name);

                tsTimesheetSettings.populateFromParameters();
                tsTimesheetSettings.populateFromUserInfo();

                tsTimesheetSettings.parmIsCurrentUserAnApprover(this.isUserAnApprover());
                
                if (_settingsIncludeFieldRulesParams.parmIncludePeriods())
                {
                    ProjPeriodId periodId = ResourceFacade::getPeriodId(_resource);
                    tsTimesheetSettings.parmPeriodList(this.getPeriodsById(_resource, periodId));
                    tsTimesheetSettings.parmPeriodId(periodId);
                }

                if (_settingsIncludeFieldRulesParams.parmIncludeResources())
                {
                    tsTimesheetSettings.parmResources(this.getResourcesForCurrentUser());
                }
            }
        }
        return tsTimesheetSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodsById</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the periods for the provided resource and period id.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_periodId">
    ///     The <c>ProjPeriodId</c> of the periods to retrieve.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>TsTimesheetPeriods</c> objects.
    /// </returns>
    private List getPeriodsById(ResourceRecId _resource, ProjPeriodId _periodId)
    {
        return this.getPeriodsByIdSinceDate(_resource, _periodId, this.getMinimumDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumDate</Name>
				<Source><![CDATA[
    private date getMinimumDate()
    {
        return DateTimeUtil::date(DateTimeUtil::minValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodsInLastYear</Name>
				<Source><![CDATA[
    private List getPeriodsInLastYear(ResourceRecId _resource, ProjPeriodId _periodId)
    {
        return this.getPeriodsByIdSinceDate(_resource, _periodId, this.getOneYearAgoDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOneYearAgoDate</Name>
				<Source><![CDATA[
    private date getOneYearAgoDate()
    {
        return DateTimeUtil::date(DateTimeUtil::addYears(DateTimeUtil::getSystemDateTime(), -1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodsByIdSinceDate</Name>
				<Source><![CDATA[
    private List getPeriodsByIdSinceDate(ResourceRecId _resource, ProjPeriodId _periodId, date _date)
    {
        ProjPeriodEmpl          projPeriodEmpl;
        ProjPeriodLine          projPeriodLine;

        List periodList = new List(Types::Class);

        while select PeriodFrom, PeriodTo from projPeriodLine
            where projPeriodLine.PeriodId == _periodId
                && projPeriodLine.PeriodTo >= _date
                outer join NormBillable from projPeriodEmpl
                    where projPeriodEmpl.PeriodId  == projPeriodLine.PeriodId
                        && projPeriodEmpl.PeriodFrom == projPeriodLine.PeriodFrom
                        && projPeriodEmpl.Resource == _resource    
        {
            TSTimesheetPeriods tsTimesheetPeriods = new TSTimesheetPeriods();

            tsTimesheetPeriods.parmPeriodFrom(projPeriodLine.PeriodFrom);
            tsTimesheetPeriods.parmPeriodTo(projPeriodLine.PeriodTo);
            tsTimesheetPeriods.parmNormBillable(projPeriodEmpl.NormBillable);

            periodList.addEnd(tsTimesheetPeriods);
        }

        return periodList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserAnApprover</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the current user is authorized to approve timesheets.
    /// </summary>
    /// <returns>
    ///     true if the user is authorized as a timesheet approver; otherwise, false.
    /// </returns>
    private boolean isUserAnApprover()
    {
        return hasMenuItemAccess(menuItemActionStr(TSWorkflowApprove), MenuItemType::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourcesForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the resources the current user has access to including as delegate in the current company.
    /// </summary>
    /// <returns>
    ///     A <c>List</c> of <c>TsTimesheetResource</c> objects.
    /// </returns>
    protected List getResourcesForCurrentUser()
    {
        // Retrieve all the resources that this user has delegate access to
        List resourcesList = this.getDelegatedResourcesForCurrentUser();

        // Add in the resource for the current user
        resourcesList.addStart(this.getCurrentUserResource());

        return resourcesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelegatedResourcesForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the resources the current user has access to as a delegate in the current company.
    /// </summary>
    /// <returns>
    ///     A <c>List</c> of <c>TsTimesheetResource</c> objects.
    /// </returns>
    private List getDelegatedResourcesForCurrentUser()
    {
        List resourcesList = new List(Types::Class);
        
        TSDate today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        UserId currentUserId = curUserId();
        TSAppEmplSub tsAppEmplSub;

        while select DataAreaId, TimesheetResource from tsAppEmplSub
            where tsAppEmplSub.DelegatedUser == currentUserId
                && (tsAppEmplSub.DateFrom <= today
                ||  tsAppEmplSub.DateFrom == dateNull())
                && (tsAppEmplSub.DateTo   >= today
                ||  tsAppEmplSub.DateTo   == dateNull())
                && TSAppEmplSub.DataAreaId == curExt()
        {
            TSTimesheetResource tsTimesheetResource = new TSTimesheetResource();
            tsTimesheetResource.parmLegalEntity(tsAppEmplSub.DataAreaId);
            tsTimesheetResource.parmResourceRecId(tsAppEmplSub.TimesheetResource);
            tsTimesheetResource.parmWorkerName(ResourceFacade::getName(tsAppEmplSub.TimesheetResource));
            tsTimesheetResource.parmPersonnelNumber(ResourceFacade::getPersonnelId(tsAppEmplSub.TimesheetResource));

            ProjPeriodId periodId = ResourceFacade::getPeriodId(tsAppEmplSub.TimesheetResource);
            tsTimesheetResource.parmPeriodList(this.getPeriodsInLastYear(tsAppEmplSub.TimesheetResource, periodId));
            tsTimesheetResource.parmPeriodId(periodId);

            ProjCategory projCategory = this.findDefaultCategoryForDelegatedResource(tsAppEmplSub);
            tsTimesheetResource.parmDefaultHourCategory(projCategory.CategoryId);
            tsTimesheetResource.parmDefaultHourCategoryName(projCategory.Name);

            tsTimesheetResource.parmIsCurrentUser(false);
            tsTimesheetResource.parmRequireStartStopTime(TSResource::timesheetRequiresStartStopTime(tsAppEmplSub.TimesheetResource));

            resourcesList.addEnd(tsTimesheetResource);
        }

        return resourcesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForDelegatedResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the default project category for the given resource.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>TSAppEmplSub</c> record for the delegated resource.
    /// </param>
    /// <returns>
    ///     A <c>ProjCategory</c> record.
    /// </returns>
    protected ProjCategory findDefaultCategoryForDelegatedResource(TSAppEmplSub _tsAppEmplSub)
    {
        return TsTimesheetService::findDefaultCategoryForResource(_tsAppEmplSub.TimesheetResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUserResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the resource information for the current user in the current company.
    /// </summary>
    /// <returns>
    ///     A <c>TsTimesheetResource</c> object.
    /// </returns>
    private TSTimesheetResource getCurrentUserResource()
    {
        HcmWorkerRecId workerRecId = HcmWorkerLookup::currentWorker();

        ResourceWorkerView workerResource;

        select RecId, ResourceCompanyId, Name, PersonnelNumber from workerResource
            where workerResource.Worker == workerRecId
                && workerResource.ResourceCompanyId == curExt();

        TSTimesheetResource tsTimesheetResource = new TSTimesheetResource();
        tsTimesheetResource.parmLegalEntity(workerResource.ResourceCompanyId);
        tsTimesheetResource.parmResourceRecId(workerResource.RecId);
        tsTimesheetResource.parmWorkerName(workerResource.Name);
        tsTimesheetResource.parmPersonnelNumber(workerResource.PersonnelNumber);

        ProjPeriodId periodId = ResourceFacade::getPeriodId(workerResource.RecId);
        tsTimesheetResource.parmPeriodList(this.getPeriodsInLastYear(workerResource.RecId, periodId));
        tsTimesheetResource.parmPeriodId(periodId);

        ProjCategory projCategory = this.findDefaultCategoryForResource(workerResource);
        tsTimesheetResource.parmDefaultHourCategory(projCategory.CategoryId);
        tsTimesheetResource.parmDefaultHourCategoryName(projCategory.Name);

        tsTimesheetResource.parmIsCurrentUser(true);
        tsTimesheetResource.parmRequireStartStopTime(TSResource::timesheetRequiresStartStopTime(workerResource.RecId));

        return tsTimesheetResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryForResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the default project category for the given worker resource.
    /// </summary>
    /// <param name="_workerResource">
    ///     The <c>ResourceWorkerView</c> record for the resource.
    /// </param>
    /// <returns>
    ///     A <c>ProjCategory</c> record.
    /// </returns>
    protected ProjCategory findDefaultCategoryForResource(ResourceWorkerView _workerResource)
    {
        return TsTimesheetService::findDefaultCategoryForResource(_workerResource.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>