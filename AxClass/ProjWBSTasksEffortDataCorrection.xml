<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWBSTasksEffortDataCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWBSTasksEffortDataCorrection
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
	public static void main(Args _args)
    {
        ProjPlanVersion projPlanVersion;
        str projPlanVersionTableName = tableId2PName(projPlanVersion.TableId);
        if (Box::yesNoCancel((
                    strFmt("@Res:ValidateWBSTasksEffortDataCorrection", projPlanVersionTableName)
                    ), DialogButton::No) == DialogButton::Yes)
        {

            ProjWBSTasksEffortDataCorrection dataCorrection = new ProjWBSTasksEffortDataCorrection();
            dataCorrection.updateTasksEffortAcrossCompanies();

            info("@Res:ProjWBSTasksEffortDataCorrectionSuccessful");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxHierarchyLevelAcrossCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the maximum hierarchy level across all companies.
    /// </summary>
    private ProjHierarchyLevel getMaxHierarchyLevelAcrossCompanies()
    {
        ProjPlanVersion projPlanVersion;

        select crosscompany maxof(HierarchyLevel) from projPlanVersion;
        return projPlanVersion.HierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTasksEffortAcrossCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the task efforts and related fields in parent tasks of all migrated hierarchies accross all companies with aggregated data from child tasks.
    /// </summary>
    private void updateTasksEffortAcrossCompanies()
    {
        int currentLevel = this.getMaxHierarchyLevelAcrossCompanies() - 1;

        ProjPlanVersion parentPlanVersion;
        ProjPlanVersionAggByParentUnionView childPlanVersionAggregation;
        ProjPlanVersionAggByParentTemplateView childPlanVersionAggregationForTemplate;
        ProjHierarchySorting hierarchySorting;
        
        this.skipDatabaseLogAndEvent(parentPlanVersion);

        ttsbegin;
        while(currentLevel >= 0)
        {
            // Update for non template hierarchies.
            update_recordset crosscompany parentPlanVersion
                setting TaskEffort = childPlanVersionAggregation.TaskEffort,
                    TaskStartDate = childPlanVersionAggregation.TaskStartDate,
                    TaskDuration = childPlanVersionAggregation.TaskDuration,
                    TaskFinishDate = childPlanVersionAggregation.TaskFinishDate,
                    TaskEffortAtComplete = childPlanVersionAggregation.TaskEffortAtComplete,
                    TaskEffortToComplete = childPlanVersionAggregation.TaskEffortToComplete,
                    TaskCostAtComplete = childPlanVersionAggregation.TaskCostAtComplete
                where parentPlanVersion.HierarchyLevel == currentLevel
                join childPlanVersionAggregation
                    where childPlanVersionAggregation.HierarchyId == parentPlanVersion.HierarchyId
                        && childPlanVersionAggregation.ParentHierarchyTaskId == parentPlanVersion.HierarchyTaskId
                        && childPlanVersionAggregation.DataAreaId == parentPlanVersion.DataAreaId
                join hierarchySorting 
                    where hierarchySorting.RefId == parentPlanVersion.HierarchyId
                        && hierarchySorting.RefNodeId == parentPlanVersion.HierarchyTaskId
                        && hierarchySorting.DataAreaId == parentPlanVersion.DataAreaId;

            // Update for template hierarchies.
            update_recordset crosscompany parentPlanVersion
                setting TaskEffort = childPlanVersionAggregationForTemplate.TaskEffort
                where parentPlanVersion.HierarchyLevel == currentLevel
                join childPlanVersionAggregationForTemplate
                    where childPlanVersionAggregationForTemplate.HierarchyId == parentPlanVersion.HierarchyId
                        && childPlanVersionAggregationForTemplate.ParentHierarchyTaskId == parentPlanVersion.HierarchyTaskId
                        && childPlanVersionAggregationForTemplate.DataAreaId == parentPlanVersion.DataAreaId;
            
            currentLevel--;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    private void skipDatabaseLogAndEvent(Common _table)
    {
        // Skip database log and event to improve performance.
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>