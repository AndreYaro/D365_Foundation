<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSEnableSystemDirectedWorkSequenceQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class enables the use of the System Directed sequence query and updates any
/// existing system directed mobile device flow to use this sequence functionality.
/// </summary>
final internal class WHSEnableSystemDirectedWorkSequenceQuery extends RunBase
{
    private WHSParameters parameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
	public static ClassDescription description()
    {
        return "@WAX:Description_RunBaseSystemDirectedWorkSequenceQuery";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
	public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.caption(strFmt("@WAX:Warning_ExtensionNoLongerPossibleSysDirWorkSequenceQuery", curExt()));
        dialog.windowType(FormWindowType::PopUp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
	/// <summary>
    /// Enables the system directed work sequencing query.
    /// </summary>
	public void run()
    {
        ttsbegin;

        this.findParametersForUpdate();

        if (this.validate())
        {
  
            this.updateMobileDeviceSetup();
            this.updateParameters();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return this.checkParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParametersForUpdate</Name>
				<Source><![CDATA[
	private void findParametersForUpdate()
    {
        parameters = WHSParameters::find(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
	private boolean checkParameters()
    {
        if (parameters.EnableSystemDirectedWorkSequencing)
        {
            return checkFailed("@WAX:Error_EnableSystemDirectedWorkSequenceQuery");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMobileDeviceSetup</Name>
				<Source><![CDATA[
	private void updateMobileDeviceSetup()
    {
        WHSRFMenuItemTable menuItemTable;

		// This change should impact all system directed menu items for the current company
		while select MenuItemName from menuItemTable
            where menuItemTable.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected
        {
            if (this.isMenuItemAlreadyUpgraded(menuItemTable.MenuItemName))
            {
                continue;
            }

            QueryRun queryRunWorkSequence = this.createWorkSequenceQueryRun(menuItemTable.MenuItemName);

            this.createSystemDirectedWorkSequenceQuery(menuItemTable.MenuItemName, queryRunWorkSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMenuItemAlreadyUpgraded</Name>
				<Source><![CDATA[
    private boolean isMenuItemAlreadyUpgraded(WHSMenuItemName _menuItemName)
    {
        WHSSystemDirectedWorkSequenceQuery systemDirectedWorkSequenceQuery;
        
        select firstonly RecId from systemDirectedWorkSequenceQuery
            where systemDirectedWorkSequenceQuery.MenuItemName == _menuItemName;

        return systemDirectedWorkSequenceQuery.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkSequenceQueryRun</Name>
				<Source><![CDATA[
	private QueryRun createWorkSequenceQueryRun(WHSMenuItemName _menuItemName)
    {
        Query queryWorkSequence = new Query(queryStr(WHSWorkSysDir));
        QueryBuildDataSource qbdsWorkTable = queryWorkSequence.dataSourceTable(tableNum(WHSWorkTable));

        // Add sort order
        qbdsWorkTable.addOrderByField(fieldNum(WHSWorkTable, LockedUser), SortOrder::Descending);

        WHSRFSysDirSort rfSysDirSort;

		// It is only possible that the sort criteria are fields on the WHSWorkTable
		while select AscendingDescending, FieldName from rfSysDirSort
            where rfSysDirSort.MenuItemName == _menuItemName
        {
            SortOrder sortOrder = (rfSysDirSort.AscendingDescending == AscendingDescending::Ascending)
                ? SortOrder::Ascending
                : SortOrder::Descending;

            qbdsWorkTable.addOrderByField(fieldName2id(tableNum(WHSWorkTable), rfSysDirSort.FieldName), sortOrder);
        }

        return new QueryRun(queryWorkSequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemDirectedWorkSequenceQuery</Name>
				<Source><![CDATA[
	private void createSystemDirectedWorkSequenceQuery(WHSMenuItemName _menuItemName, QueryRun _workSequenceQueryRun)
    {
        WHSSystemDirectedWorkSequenceQuery systemDirectedWorkSequenceQuery;

        systemDirectedWorkSequenceQuery.MenuItemName = _menuItemName;
        systemDirectedWorkSequenceQuery.initValue();

        systemDirectedWorkSequenceQuery.QueryDescription	= "@WAX:WHSSystemDirectedSequenceEnablement_AutoGeneratedQuery";
        systemDirectedWorkSequenceQuery.PackedQueryRun		= _workSequenceQueryRun.pack(); // override the query run with the query generated from the sort order

        systemDirectedWorkSequenceQuery.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameters</Name>
				<Source><![CDATA[
	private void updateParameters()
    {
        parameters.EnableSystemDirectedWorkSequencing = NoYes::Yes;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
	[Hookable(false)]
    internal static void main(Args _args)
    {
        WHSEnableSystemDirectedWorkSequenceQuery enableSystemDirectedWorkSequenceQuery = new WHSEnableSystemDirectedWorkSequenceQuery();

        if (enableSystemDirectedWorkSequenceQuery.prompt())
        {
            enableSystemDirectedWorkSequenceQuery.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
	protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>