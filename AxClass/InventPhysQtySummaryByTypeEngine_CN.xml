<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySummaryByTypeEngine_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySummaryByTypeEngine_CN</c> class is used to calculate quantity of each type during a period.
/// </summary>

class InventPhysQtySummaryByTypeEngine_CN extends InventPhysQtySummaryEngine_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mergeEmptyRecords</Name>
				<Source><![CDATA[
        protected void mergeEmptyRecords()
    {
        //dummy
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeExternalRecords</Name>
				<Source><![CDATA[
        protected void mergeExternalRecords()
    {
        InventTransType                 inventTransTypeLocal = InventTransType::Sales;
        TransDate                       beginDateLocal = beginDate;
        TransDate                       endDateLocal = endDate;

        InventSumDateTransPhysTmp_CN inventSumDateTransnew = inventSumDateTransResult;
        inventSumDateType = InventSumDateType::Final;

        //merge the on hand result from the external table
        select firstonly RecId from inventSumDateTransResultOnHand;
        if (inventSumDateTransResultOnHand.RecId)
        {
            insert_recordset inventSumDateTransnew (
                ItemId, InventDimId, PhysicalQty, InventTransType, BeginDate, EndDate, TransType)
            select ItemId, InventDimId, PhysicalQty, inventTransTypeLocal, beginDateLocal, endDateLocal, inventSumDateType
            from inventSumDateTransResultOnHand;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges intermediate result by type.
    /// </summary>

    protected void mergeRecords()
    {
        InventSumDateTransPhysTmp_CN    inventSumDateTrans;
        InventSumDateTransPhysTmp_CN    inventSumDateTransnew;

        inventSumDateTransnew = inventSumDateTransResult;
        inventSumDateTrans = inventSumDateTransPhy;

        //Physical inventory
        this.progressUpdate("@SYS23942");
        inventSumDateType = InventSumDateType::Final;
        insert_recordset inventSumDateTransnew (
            ItemId, InventDimId, InventTransType, BeginDate, EndDate,
            ReceivedQty, IssuedQty,
            TransType)
            select ItemId, InventDimId, InventTransType, BeginDate, EndDate,
                sum(ReceivedQty), sum(IssuedQty),
                inventSumDateType /*scalar*/
                from inventSumDateTrans
                group by ItemId, InventDimId, InventTransType, BeginDate, EndDate
                where inventSumDateTrans.TransType  != InventSumDateType::Final
                   && inventSumDateTrans.BeginDate  == beginDate
                   && inventSumDateTrans.EndDate    == endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates physical quantity.
    /// </summary>

    protected void selectInventTransPostingPhysical()
    {
        //  Update Inventory Physical by Transaction Type
        this.selectInventTransPostingPhysicalByType();
        this.selectInventTransRegisterPickByType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysicalByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inventory quantity of each transaction type during a period.
    /// </summary>
    protected void selectInventTransPostingPhysicalByType()
    {
        InventTrans                 inventTrans;
        InventTransPosting          inventTransPostingPhysical;
        InventTransOrigin           inventTransOrigin;

        InventSumDateTransPhysTmp_CN inventSumDateTransNew = inventSumDateTransPhy;
        InventSumDateTransPhysTmp_CN inventSumDateTrans = inventSumDateTransOrigin;

        //  Received + Purchased:   ReceivedQty         -= Qty
        this.progressUpdate("@SYS4465");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, Sign, BeginDate, EndDate, InventTransType)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate == endDate
                join inventTransPostingPhysical
                    where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                        && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                        && inventTransPostingPhysical.TransDate                 >= beginDate
                        && inventTransPostingPhysical.TransDate                 <= endDate
                join sum(Qty), minus /*scalar*/,  beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                    where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                        && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                        && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.StatusIssue              == StatusIssue::None
                        && (inventTrans.StatusReceipt           == StatusReceipt::Received
                            || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId;

        //  Deducted + Sold:        DeductedQty         += Qty
        this.progressUpdate("@SYS15979");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, IssuedQty, BeginDate, EndDate, InventTransType)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate == endDate
                join inventTransPostingPhysical
                    where inventTransPostingPhysical.ItemId                     == inventSumDateTrans.ItemId
                        && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                        && inventTransPostingPhysical.TransDate                 >= beginDate
                        && inventTransPostingPhysical.TransDate                 <= endDate
                join sum(Qty), beginDate /*scalar*/ , endDate /*scalar*/ from inventTrans
                    where inventTrans.VoucherPhysical           == inventTransPostingPhysical.Voucher
                        && inventTrans.DatePhysical             == inventTransPostingPhysical.TransDate
                        && inventTrans.InventTransOrigin        == inventTransPostingPhysical.InventTransOrigin
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.StatusReceipt            == StatusReceipt::None
                        && (inventTrans.StatusIssue             == StatusIssue::Deducted
                            || inventTrans.StatusIssue          == StatusIssue::Sold)
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransRegisterPickByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registered and picked quantity during the period.
    /// </summary>
    protected void selectInventTransRegisterPickByType()
    {
        InventTrans                     inventTrans;
        InventTransOrigin               inventTransOrigin;

        InventSumDateTransPhysTmp_CN inventSumDateTransNew = inventSumDateTransPhy;
        InventSumDateTransPhysTmp_CN inventSumDateTrans = inventSumDateTransOrigin;

        // Registered
        this.progressUpdate("@SYS50316");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, Sign, BeginDate, EndDate, InventTransType)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate == endDate
                join sum(Qty), minus /*scalar*/,  beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                    where  inventTrans.ItemId                   == inventSumDateTrans.ItemId
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.DateInvent               >= beginDate
                        && inventTrans.DateInvent               <= endDate
                        && inventTrans.StatusReceipt            == StatusReceipt::Registered
                        && inventTrans.StatusIssue              == StatusIssue::None
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId;

        //Picked
        this.progressUpdate("@SYS15980");
        insert_recordset inventSumDateTransNew (ItemId, InventDimId, IssuedQty, BeginDate, EndDate, InventTransType)
            select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                group by ItemId, InventDimId
                    where inventSumDateTrans.TransType == InventSumDateType::Base
                        && inventSumDateTrans.BeginDate == beginDate
                        && inventSumDateTrans.EndDate == endDate
                join sum(Qty),  beginDate /*scalar*/, endDate /*scalar*/ from inventTrans
                    where  inventTrans.ItemId                   == inventSumDateTrans.ItemId
                        && inventTrans.InventDimId              == inventSumDateTrans.InventDimId
                        && inventTrans.DateInvent               >= beginDate
                        && inventTrans.DateInvent               <= endDate
                        && inventTrans.StatusIssue              == StatusIssue::Picked
                        && inventTrans.StatusReceipt            == StatusReceipt::None
                join ReferenceCategory from inventTransOrigin
                    group by ReferenceCategory
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>