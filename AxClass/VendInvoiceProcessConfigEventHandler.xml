<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceProcessConfigEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceProcessConfigEventHandler</c> class is the event handler that manages changes to
/// the <c>WorkflowConfigurationTable</c> table.
/// </summary>
internal class VendInvoiceProcessConfigEventHandler implements
    WorkflowConfigDataChangeEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the workflow version record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    public void activate(WorkflowVersionTable _workflowVersionTable)
    {
        // interface method that must be implemented
        // there is no code for VendProcessInvoice workflow
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates the workflow version record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    public void deactivate(WorkflowVersionTable _workflowVersionTable)
    {
        VendInvoiceProcessConfigEventHandler::check(_workflowVersionTable.ConfigurationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deleting the workflow version record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    public void delete(WorkflowVersionTable _workflowVersionTable)
    {
        // interface method that must be implemented
        // there is no code for VendProcessInvoice workflow
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the workflow version record can be started.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean validateActivate(WorkflowVersionTable _workflowVersionTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeactivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the workflow version record can be deactivated.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <returns>
    /// true if the record can be deactivated; otherwise, false.
    /// </returns>
    public boolean validateDeactivate(WorkflowVersionTable _workflowVersionTable)
    {
        boolean isValid = true;

        isValid = VendInvoiceProcessConfigEventHandler::check(_workflowVersionTable.ConfigurationId);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the workflow version record can be deleted.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// A record of the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <returns>
    /// true if the record can be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete(WorkflowVersionTable _workflowVersionTable)
    {
        boolean isValid = true;

        isValid = VendInvoiceProcessConfigEventHandler::check(_workflowVersionTable.ConfigurationId);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    internal static boolean check(WorkflowConfigurationId _configurationId)
    { 
        WorkflowAssociationType associationType = VendInvoiceProcessConfigEventHandler::getWorkflowAssociationType();
        boolean automaticWorkflowSubmissionEnabled, activeVersionsExists;

        automaticWorkflowSubmissionEnabled = VendInvoiceProcessConfigEventHandler::validateAutomationWorkflowSubmission(associationType);
        if (automaticWorkflowSubmissionEnabled)
        {
            activeVersionsExists = VendInvoiceProcessConfigEventHandler::validateActiveVendInvoiceWorkflowPerCompany(associationType, _configurationId);
        
            if (!activeVersionsExists)
            {
                throw error("@AccountsPayable:VendorInvoiceWorkflowInUseLabel");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowAssociationType</Name>
				<Source><![CDATA[
    internal static WorkflowAssociationType getWorkflowAssociationType()
    {
        SysDictWorkflowType sysDictWorkflowTemplate = new SysDictWorkflowType(workFlowTypeStr(VendProcessInvoice));
        return sysDictWorkflowTemplate.associationType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveVendInvoiceWorkflowPerCompany</Name>
				<Source><![CDATA[
    internal static boolean validateActiveVendInvoiceWorkflowPerCompany(WorkflowAssociationType _associationType,
        WorkflowConfigurationId _configurationId)
    {
        boolean activeWFConfigExists = true;
        WorkflowTable workflowTable;
        WorkflowVersionTable versionTable;

        if (_associationType == WorkflowAssociationType::Company)
        {
            select workflowTable
                exists join versionTable
                    where versionTable.Enabled == NoYes::Yes
                        && versionTable.WorkflowTable == workflowTable.RecId
                        && workflowTable.Type == WorkflowConfigurationType::Definition
                        && workflowTable.DataArea == curext()
                        && workflowTable.TemplateName == workFlowTypeStr(VendProcessInvoice)
                        && versionTable.ConfigurationId != _configurationId;     
                                        
            if (!workflowTable)
            {
                activeWFConfigExists = false;
            }
        }
          
        return activeWFConfigExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAutomationWorkflowSubmission</Name>
				<Source><![CDATA[
    internal static boolean validateAutomationWorkflowSubmission(WorkflowAssociationType _associationType)
    {
        if (_associationType == WorkflowAssociationType::Company)
        {
            return VendParameters::find().AutomationWorkflowSubmission ? true : false;
        }
        
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>