<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionPurchaseOrderGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for releasing requisition lines to the purchase orders.
/// </summary>
class RequisitionPurchaseOrderGeneration extends RequisitionDocumentGeneration
{
    Map vendorMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSourcingPolicyRuleQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the purchase requisition sourcing policy rule query.
    /// </summary>
    /// <param name = "_buyingLegalEntity">The buying legal entity id.</param>
    /// <returns>A <c>Query</c> object for the sourcing policy rules.</returns>
    protected Query buildSourcingPolicyRuleQuery(LegalEntityRecId _buyingLegalEntity)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsPurchReqTmpSourcingPolicyRule = query.addDataSource(tableNum(PurchReqTmpSourcingPolicyRule));

        qbdsPurchReqTmpSourcingPolicyRule.addRange(fieldNum(PurchReqTmpSourcingPolicyRule, BuyingLegalEntity)).value(queryValue(_buyingLegalEntity));

        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, TransDate));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, VendQuoteNumber));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, PurchAgreement));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, VendAccount));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, ProjId));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, Requisitioner));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, LineType));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, ProcurementCategory));
        qbdsPurchReqTmpSourcingPolicyRule.addGroupByField(fieldNum(PurchReqTmpSourcingPolicyRule, RefRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a purchase order based on splitting rules
    /// </summary>
    protected void create()
    {
        int numberofBuyingLegalEntities = conLen(buyingLegalEntityCon);

        using (var activityContext = this.instrumentationLogger().requisitionRelease().create(numberofBuyingLegalEntities))
        {
            // Split by LE to retrieve policy rules
            for (int buyingLegalEntityCount = 1; buyingLegalEntityCount <= numberofBuyingLegalEntities; buyingLegalEntityCount++)
            {
                LegalEntityRecId buyingLegalEntity = conPeek(buyingLegalEntityCon, buyingLegalEntityCount);

                changecompany(CompanyInfo::findRecId(buyingLegalEntity).DataArea)
                {
                    this.updateEmptyVendAccountsForManualCreation(buyingLegalEntity);

                    this.generateRequisitionLines(buyingLegalEntity);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRequisitionPurchaseOrderGenerationPolicy</Name>
				<Source><![CDATA[
    private RequisitionPurchaseOrderGenerationPolicy initializeRequisitionPurchaseOrderGenerationPolicy(LegalEntityRecId _buyingLegalEntity)
    {
        PurchReqTmpSourcingPolicyRule purchReqTmpSourcingPolicyRuleCreate;
        purchReqTmpSourcingPolicyRuleCreate.setTmpData(purchReqTmpSourcingPolicyRule);
        select firstonly purchReqTmpSourcingPolicyRuleCreate
                 where purchReqTmpSourcingPolicyRuleCreate.BuyingLegalEntity == _buyingLegalEntity;

        PurchReqPurchaseOrderGenerationRule         purchReqPurchaseOrderGenerationRule = this.createAndInitializePurchReqPurchaseOrderGenerationRule(purchReqTmpSourcingPolicyRuleCreate);
        RequisitionPurchaseOrderGenerationPolicy    requisitionPurchaseOrderGenerationPolicy = RequisitionPurchaseOrderGenerationPolicy::construct();
        requisitionPurchaseOrderGenerationPolicy.initializeFromPurchReqPurchaseOrderGenerationRule(purchReqPurchaseOrderGenerationRule);

        return requisitionPurchaseOrderGenerationPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRequisitionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the purchase requisition lines.
    /// </summary>
    /// <param name = "_buyingLegalEntity">The legal entity for which to run the sourcing policy rule.</param>
    protected void generateRequisitionLines(LegalEntityRecId _buyingLegalEntity)
    {
        Query query = this.buildSourcingPolicyRuleQuery(_buyingLegalEntity);
        QueryRun queryRun = new QueryRun(query);
        queryRun.setRecord(purchReqTmpSourcingPolicyRule);

        RequisitionPurchaseOrderGenerationPolicy requisitionPurchaseOrderGenerationPolicy;
        container requisitionLines;

        while (queryRun.next())
        {
            if (!requisitionPurchaseOrderGenerationPolicy)
            {
                requisitionPurchaseOrderGenerationPolicy = this.initializeRequisitionPurchaseOrderGenerationPolicy(_buyingLegalEntity);
            }

            PurchReqTmpSourcingPolicyRule purchReqTmpSourcingPolicyRuleCur = queryRun.get(tableNum(PurchReqTmpSourcingPolicyRule));
            if (requisitionPurchaseOrderGenerationPolicy.mustCreatePurchaseOrder(purchReqTmpSourcingPolicyRuleCur))
            {
                this.createPurchaseOrder(requisitionLines);
                requisitionLines = conNull();
                requisitionPurchaseOrderGenerationPolicy.initializeFromPurchReqTmpSourcingPolicyRule(purchReqTmpSourcingPolicyRuleCur);
            }

            PurchReqLine purchReqLineRecord = PurchReqLine::find(purchReqTmpSourcingPolicyRuleCur.RefRecId);
            if (!purchReqLineRecord.VendAccount)
            {
                purchReqLineRecord.VendAccount = purchReqTmpSourcingPolicyRuleCur.VendAccount;
                purchReqLineRecord.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));
            }
            this.initializePurchReqLine(purchReqLineRecord);

            requisitionLines += [purchReqLineRecord];
        }

        this.createPurchaseOrder(requisitionLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase requisition line.
    /// </summary>
    /// <param name = "_purchReqLineRecord">The requisition line to initialize.</param>
    protected void initializePurchReqLine(PurchReqLine _purchReqLineRecord)
    {
        PurchReqConsolidationLine purchReqConsolidationLine = PurchReqConsolidationLine::findByReqLineId(_purchReqLineRecord.RecId);

        if (purchReqConsolidationLine)
        {
            if (purchReqConsolidationLine.NewVendor)
            {
                _purchReqLineRecord.VendAccount = purchReqConsolidationLine.NewVendor;
                _purchReqLineRecord.modifiedField(fieldNum(PurchReqLine,VendAccount));
            }

            if (purchReqConsolidationLine.NewRequestedDate)
            {
                _purchReqLineRecord.RequiredDate = purchReqConsolidationLine.NewRequestedDate;
                _purchReqLineRecord.setTransDate(false);
            }

            _purchReqLineRecord.CurrencyCode = purchReqConsolidationLine.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitializePurchReqPurchaseOrderGenerationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PurchReqPurchaseOrderGenerationRule</c>.
    /// </summary>
    /// <param name = "_purchReqTmpSourcingPolicyRuleCreate">A <c>PurchReqTmpSourcingPolicyRule</c> record to initialize from.</param>
    /// <returns>An instance of <c>PurchReqPurchaseOrderGenerationRule</c>.</returns>
    protected PurchReqPurchaseOrderGenerationRule createAndInitializePurchReqPurchaseOrderGenerationRule(PurchReqTmpSourcingPolicyRule _purchReqTmpSourcingPolicyRuleCreate)
    {
        PurchReqLine purchReqLine = PurchReqLine::find(_purchReqTmpSourcingPolicyRuleCreate.RefRecId);
        PurchReqPurchaseOrderGenerationRule purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
        purchReqPurchaseOrderGenerationRule.parmPurchReqLine(purchReqLine);
        purchReqPurchaseOrderGenerationRule.initPolicy();

        return purchReqPurchaseOrderGenerationRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmptyVendAccountsForManualCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates empty vendor accounts for manual creation.
    /// </summary>
    /// <param name = "_buyingLegalEntity">The buying legal entity.</param>
    protected final void updateEmptyVendAccountsForManualCreation(LegalEntityRecId _buyingLegalEntity)
    {
        if (!isRunningInAutoMode)
        {
            while select forUpdate purchReqTmpSourcingPolicyRule
                where purchReqTmpSourcingPolicyRule.BuyingLegalEntity == _buyingLegalEntity
                  && !purchReqTmpSourcingPolicyRule.VendAccount
            {
                purchReqTmpSourcingPolicyRule.VendAccount = vendorMap.lookup(purchReqTmpSourcingPolicyRule.RefRecId);
                purchReqTmpSourcingPolicyRule.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a purchase order
    /// </summary>
    /// <param name="_packedLines">
    ///     A container with PurchReqLine records.
    /// </param>
    protected void createPurchaseOrder(container _packedLines)
    {
        #OCCRetryCount
        int errorNum;
        const str newLine = '\n';

        void doError()
        {
            FreeTxt errorDescription;

            error("@SYS332046");

            for (int i = errorNum; i <= infolog.num(); i++)
            {
                errorDescription += newLine + infolog.text(i);
            }

            this.updatePurchReqLineProcessingError(_packedLines, PurchReqLineProcessingErrorType::Other, errorDescription);
        }

        if (!_packedLines)
        {
            return;
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().createPurchaseOrder())
        {
            try
            {
                errornum = infolog.num();
                boolean localValidationPassed = true;

                int numberOfLines = conLen(_packedLines);
                for (int i = 1; i <= numberOfLines; i++)
                {
                    PurchReqLine purchReqLineRecord = conPeek(_packedLines, i);

                    // Clear PO creation error code for specified purchase requisition line
                    PurchReqLineProcessingError::deleteAllPurchaseOrderGenerationErrors(purchReqLineRecord.RecId);

                    using (var activityContextValidate = this.instrumentationLogger().requisitionPurchaseOrderGenerationActivities()
                        .validatePurchReqLine(purchReqLineRecord.RecId, funcName()))
                    {
                        if (!this.validatePurchReqLine(purchReqLineRecord))
                        {
                            error(strFmt("@SYS332047", purchReqLineRecord.purchReqId(), purchReqLineRecord.SequenceNumber));

                            localValidationPassed = false;
                        }
                    }
                }

                activityContext.addCustomProperty('LocalValidationPassed', int2Str(localValidationPassed));

                if (!localValidationPassed)
                {
                    throw Exception::Error;
                }

                using (var autoCreatActivityContext = this.instrumentationLogger().requisitionRelease().autoCreatePurchaseOrder())
                {
                    PurchAutoCreate_PurchReq purchAutoCreate = PurchAutoCreate_PurchReq::construct();

                    purchAutoCreate.setPurchReqLines(_packedLines);

                    purchAutoCreate.parmRequisitionPurchaseOrderGeneration(this);

                    purchAutoCreate.create();
                }
            }
            catch (Exception::Error)
            {
                doError();
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        doError();
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                doError();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendorMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>vendorMap</c> from the purchase requisition lines.
    /// </summary>
    protected final void populateVendorMap()
    {
        this.populateVendorMapFromPurchReqLine();

        if (!vendorMap.empty())//Call the intermediate form if any of the line doesn't have vendor
        {
            Args args = new Args();
            args.name(formStr(PurchReqAddVendor));
            args.caller(this);
            args.parmObject(vendorMap);
            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendorMapFromPurchReqLine</Name>
				<Source><![CDATA[
    protected void populateVendorMapFromPurchReqLine()
    {
        vendorMap = new Map(Types::Int64,Types::String);
        int numberOfBuyingLegalEntities = conLen(buyingLegalEntityCon);

        for (int buyingLegalEntityCount = 1; buyingLegalEntityCount <= numberOfBuyingLegalEntities; buyingLegalEntityCount++)
        {
            DirPartyRecId buyingLegalEntity = conPeek(buyingLegalEntityCon, buyingLegalEntityCount);

            while select purchReqTmpSourcingPolicyRule
                where purchReqTmpSourcingPolicyRule.BuyingLegalEntity == buyingLegalEntity
            {
                PurchReqLine purchReqLine = PurchReqLine::find(purchReqTmpSourcingPolicyRule.RefRecId);

                if (purchReqLine.VendAccount == '' && purchReqTmpSourcingPolicyRule.VendAccount == '')
                {
                    vendorMap.insert(purchReqLine.RecId, purchReqLine.VendAccount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchReqPurchaseOrderGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Convert TmpFrmVirtual into PurchReqTmpSourcingPolicyRule object
    /// </summary>
    public void insertPurchReqPurchaseOrderGeneration()
    {
        PurchReqLine                        purchReqLine;
        PurchReqLineExternalCatalogQuote    purchReqLineExternalCatalogQuote;
        CatExternalCatalogQuote             catExternalCatalogQuote;

        int                                 buyingLegalEntityCount;
        int                                 countI;
        int                                 numberofPurchReqLineRecId = conLen(purchReqLineRecIdCon);

        purchReqTmpSourcingPolicyRule = null;

        using (var activityContext = this.instrumentationLogger().requisitionRelease().insertPurchReqPurchaseOrderGeneration(numberofPurchReqLineRecId))
        {
            for (countI = 1; countI <= numberofPurchReqLineRecId; countI++)
            {
                purchReqLine = PurchReqLine::find(conPeek(purchReqLineRecIdCon, countI));

                if (purchReqLine && !purchReqLine.PurchLineCreated)
                {
                    select firstonly Number, RecId from catExternalCatalogQuote
                      join ExternalCatalogQuote from purchReqLineExternalCatalogQuote
                     where purchReqLineExternalCatalogQuote.ExternalCatalogQuote == catExternalCatalogQuote.RecId
                        && purchReqLineExternalCatalogQuote.PurchReqLine         == purchReqLine.RecId
                        && catExternalCatalogQuote.ExpirationDate                >= DateTimeUtil::date(DateTimeUtil::utcNow());

                    this.instrumentationLogger().logInformation(strFmt('%1.RecId:%2 - LineCreated: %3 - %4.RecId:%5', tableStr(PurchReqLine), purchReqLine.RecId, purchReqLine.PurchLineCreated, tableStr(CatExternalCatalogQuote), catExternalCatalogQuote.RecId));

                    this.initializePurchReqTmpSourcingPolicyRule(purchReqTmpSourcingPolicyRule, purchReqLine, catExternalCatalogQuote);
                    purchReqTmpSourcingPolicyRule.insert();
                }
                else
                {
                    this.instrumentationLogger().logInformation(strFmt('%1.RecId:%2 - LineCreated: %3', tableStr(PurchReqLine), purchReqLine.RecId, purchReqLine.PurchLineCreated));
                }
            }

            buyingLegalEntityCon = conNull();
            buyingLegalEntityCount = 1;

            while select purchReqTmpSourcingPolicyRule group by purchReqTmpSourcingPolicyRule.BuyingLegalEntity
            {
               buyingLegalEntityCon = conIns(buyingLegalEntityCon, buyingLegalEntityCount, purchReqTmpSourcingPolicyRule.BuyingLegalEntity);
               buyingLegalEntityCount++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchReqTmpSourcingPolicyRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchReqTmpSourcingPolicyRule</c> record.
    /// </summary>
    /// <param name = "_purchReqTmpSourcingPolicyRule">A <c>PurchReqTmpSourcingPolicyRule</c> record to initialize.</param>
    /// <param name = "_purchReqLine">A <c>PurchReqLine</c> record to initialize from.</param>
    /// <param name = "_catExternalCatalogQuote">The <c>CatExternalCatalogQuote</c> record.</param>
    protected void initializePurchReqTmpSourcingPolicyRule(PurchReqTmpSourcingPolicyRule _purchReqTmpSourcingPolicyRule, PurchReqLine _purchReqLine, CatExternalCatalogQuote _catExternalCatalogQuote)
    {
        PurchReqConsolidationLine purchReqConsolidationLine  = PurchReqConsolidationLine::findByReqLineId(_purchReqLine.RecId);
        _purchReqTmpSourcingPolicyRule.RefRecId              = _purchReqLine.RecId;
        _purchReqTmpSourcingPolicyRule.PurchReqTable         = _purchReqLine.PurchReqTable;
        _purchReqTmpSourcingPolicyRule.PurchReqId            = _purchReqLine.purchReqTable().PurchReqId;
        _purchReqTmpSourcingPolicyRule.LineNum               = _purchReqLine.LineNum;
        _purchReqTmpSourcingPolicyRule.VendAccount           = purchReqConsolidationLine.NewVendor? purchReqConsolidationLine.NewVendor: _purchReqLine.VendAccount;
        _purchReqTmpSourcingPolicyRule.ProjId                = _purchReqLine.ProjId;
        _purchReqTmpSourcingPolicyRule.CurrencyCode          = _purchReqLine.CurrencyCode;
        _purchReqTmpSourcingPolicyRule.TransDate             = _purchReqLine.TransDate;
        _purchReqTmpSourcingPolicyRule.Requisitioner         = _purchReqLine.Requisitioner;
        _purchReqTmpSourcingPolicyRule.LineType              = _purchReqLine.LineType;
        _purchReqTmpSourcingPolicyRule.ProcurementCategory   = _purchReqLine.ProcurementCategory;
        _purchReqTmpSourcingPolicyRule.VendQuoteNumber       = _catExternalCatalogQuote.Number;
        _purchReqTmpSourcingPolicyRule.BuyingLegalEntity     = _purchReqLine.BuyingLegalEntity;
        _purchReqTmpSourcingPolicyRule.PurchAgreement        = _purchReqLine.PurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLineFromPurchaseOrderGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the <c>PurchReqLine</c> record from <c>PurchReqTmpSourcingPolicyRule</c> table
    /// </summary>
    /// <param name="_purchReqLine">
    ///     The <c>PurchReqLine</c> record to remove
    /// </param>
    public void removeLineFromPurchaseOrderGeneration(PurchReqLine _purchReqLine)
    {
        delete_from purchReqTmpSourcingPolicyRule
            where purchReqTmpSourcingPolicyRule.RefRecId == _purchReqLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var activityContext = this.instrumentationLogger().requisitionRelease().run())
        {
            this.insertPurchReqPurchaseOrderGeneration();

            if (!isRunningInAutoMode)
            {
                this.populateVendorMap();//Get vendors for PR lines
            }

            this.create();

            if (purchReqTableFailureMap)
            {
                this.applySourcingPolicyOnError();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a map of vendors.
    /// </summary>
    /// <param name="_vendorMap">
    /// A map that should be assigned to <c>vendorMap</c> object variable.
    /// </param>
    public void setSelectedVendors(Map _vendorMap)
    {
        vendorMap = _vendorMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate all lines in a single purchReqTable table record.
    /// </summary>
    /// <param name="_purchReqTable">
    ///    The PurchReqTable table object from the <c>PurchReqTable</c> table to retrieve.
    /// </param>
    /// <returns>
    ///    True if passes all validation; otherwise, false.
    /// </returns>
    public boolean validateAllLines(PurchReqTable _purchReqTable)
    {
        PurchReqLine        purchReqLine;
        boolean             ret = true;

        while select * from purchReqLine
              where purchReqLine.PurchReqTable == _purchReqTable.RecId

        {
            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                // We have quote only if line type is of external
                if (purchReqLine.LineType == PurchReqLineType::External && !this.validateQuote(purchReqLine))
                {
                    ret = false;
                }

                // One can submit purchase requisitions without vendor if purchase requisition control rule allows it. The vendor is filled up during pending completion phase.
                if ( purchReqLine.VendAccount != ""                     && !this.validateVendor(purchReqLine))
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if trans date is same as accounting event date.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The PurchReqLine table object from the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    ///    False if trans date is not the same as accounting event date; otherwise, true.
    /// </returns>
    public boolean validateFiscalYear(PurchReqLine _purchReqLine)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().validateFiscalYear(_purchReqLine))
        {
            FiscalCalendarYear  fiscalCalendarYearPurchOrder;
            FiscalCalendarYear  fiscalCalendarYearPurchReqLine;
            RecId               fiscalCalendar;
            TransDate           transDatePurchaseOrder;
            BudgetCheckResult   budgetCheckResult;
            str                 errorMessage;
            boolean             fiscalYearValid = true;

            budgetCheckResult = _purchReqLine.getBudgetCheckResult();
            // This check is only needed if we already have a budget reservation.
            if ((budgetCheckResult == BudgetCheckResult::Passed || budgetCheckResult == BudgetCheckResult::PassedWithWarnings) &&
                !(_purchReqLine.ProjId && ProjTable::find(_purchReqLine.ProjId).ProjCarryForwardRemainingBudget == NoYes::Yes))
            {
                fiscalCalendar  = Ledger::fiscalCalendar(_purchReqLine.BuyingLegalEntity);

                if (_purchReqLine.TransDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    transDatePurchaseOrder = _purchReqLine.TransDate;
                }
                else
                {
                    transDatePurchaseOrder = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                fiscalCalendarYearPurchReqLine = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendar, _purchReqLine.TransDate);
                fiscalCalendarYearPurchOrder   = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendar, transDatePurchaseOrder);

                // Do not allow the purchase order to be created if the transaction date of the purchase order is not in the same fiscal calendar year
                // as the accounting date of the purchase requisition line.
                if (fiscalCalendarYearPurchReqLine.RecId != fiscalCalendarYearPurchOrder.RecId)
                {
                    errorMessage = "@SYS326172";
                    error(errorMessage);
                    this.updatePurchReqLineProcessingError([_purchReqLine], PurchReqLineProcessingErrorType::PreEncumbranceError, errorMessage);
                    
                    fiscalYearValid = false;
                }
            }

            activityContext.addCustomProperty('Valid', int2Str(fiscalYearValid));

            return fiscalYearValid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the line is posted.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The PurchReqLine table object from the <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    ///    true if the line is posted.
    /// </returns>
    public boolean validatePreEncumbrance(PurchReqLine _purchReqLine)
    {
        boolean preEncumbranceValid = true;

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().validatePreEncumbrance(_purchReqLine))
        {
            if (_purchReqLine.lineNotPosted())
            {
                error("@SCM:PurchReqContainsSourceDocumentLineWithIncompleteStatusError");               
                preEncumbranceValid = false;
            }

            activityContext.addCustomProperty('Valid', int2Str(preEncumbranceValid));

            return preEncumbranceValid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for price tolerance rule.
    /// </summary>
    /// <param name="_purchLine">
    ///    A record in <c>PurchLine</c> table to compare price with.
    /// </param>
    /// <param name="_purchReqLine">
    ///    A record in <c>PurchReqLine</c> table to compare price with.
    /// </param>
    public void validatePriceTolerance(PurchLine _purchLine, PurchReqLine _purchReqLine)
    {
        str                                 errorMessage;
        PurchReqPurchaseOrderGenerationRule purchReqPurchaseOrderGenerationRule;
        Amount                              purchLineAmount;
        Amount                              purchReqLineAmount;
        Amount                              priceToleranceAmount;
        Percent                             priceTolerancePercent;
        boolean                             validPriceToleranceAmount   = true;
        boolean                             validPriceTolerancePercent  = true;
        boolean                             retPriceTolerance           = true;

        //requisition line prices have been copied over to the purchase order.
        if (RequisitionPurchaseOrderGeneration::isPurchReqLinePrice2PurchaseOrder(_purchReqLine, _purchLine))
        {
            return;
        }

        using (var activityContext = this.instrumentationLogger().requisitionRelease().validatePriceTolerance())
        {
            purchReqPurchaseOrderGenerationRule = PurchReqPurchaseOrderGenerationRule::construct();
            purchReqPurchaseOrderGenerationRule.parmPurchReqLine(_purchReqLine);
            purchReqPurchaseOrderGenerationRule.initPolicy();

            if (purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().EnablePriceTolerance)
            {
                purchReqLineAmount = _purchReqLine.LineAmount;
                purchLineAmount    = _purchLine.LineAmount;

                if (purchReqLineAmount != purchLineAmount)
                {
                    // Only check if trade agreement amount is greater than line amount
                    if (purchLineAmount > 0)
                    {
                        if (purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().EnableAmountLimit)
                        {
                            // Get price tolerance amount limit
                            priceToleranceAmount    = CurrencyExchangeHelper::curAmount2CurAmount(purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().AmountLimit, purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().AmountLimitCurrencyCode, _purchReqLine.CurrencyCode);

                            if (purchReqLineAmount < purchLineAmount)
                            {
                                if (purchLineAmount - purchReqLineAmount > priceToleranceAmount)
                                {
                                    validPriceToleranceAmount = false;
                                }
                            }
                        }

                        if (purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().EnablePercentageLimit && validPriceToleranceAmount)
                        {
                            // Get price tolerance percent limit
                            priceTolerancePercent   = purchReqPurchaseOrderGenerationRule.purchReqSourcingPriceToleranceRule().PercentageLimit;

                            if (((purchLineAmount - purchReqLineAmount) / purchReqLineAmount * 100) > priceTolerancePercent)
                            {
                                validPriceTolerancePercent = false;
                            }
                        }
                    }

                    if (!validPriceToleranceAmount || !validPriceTolerancePercent)
                    {
                        retPriceTolerance = false;
                    }
                }
            }

            if (!retPriceTolerance)
            {
                errorMessage = strfmt("@SYS305330", datetime2str(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
                this.updatePurchReqLineProcessingError([_purchReqLine], PurchReqLineProcessingErrorType::ExceededPriceTolerance, errorMessage);
                throw error(errorMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a purchase requisition line.
    /// </summary>
    /// <param name = "_purchReqLine">The line to validate.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    protected boolean validatePurchReqLine(PurchReqLine _purchReqLine)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().validatePurchReqLine(_purchReqLine))
        {
            boolean ret = true;

            // Check pre-encumbrance
            if (!this.validatePreEncumbrance(_purchReqLine))
            {
                ret = false;
            }

            // Validate vendor rule
            if (!this.validateVendor(_purchReqLine, true))
            {
                ret = false;
            }

            // Validate aggregation quote rule
            if (!this.validateQuote(_purchReqLine))
            {
                ret = false;
            }

            // Validate fiscal year between trans date and accounting date
            if (!this.validateFiscalYear(_purchReqLine))
            {
                ret = false;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for quote rule.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The PurchReqLine table object from the <c>PurchReqLine</c> table to retrieve.
    /// </param>
    /// <returns>
    ///    True if quote rule passes; otherwise, false.
    /// </returns>
    private boolean validateQuote(PurchReqLine _purchReqLine)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().validateQuote(_purchReqLine))
        {
            PurchReqLineExternalCatalogQuote    purchReqLineExternalCatalogQuote;
            CatExternalCatalogQuote             catExternalCatalogQuote;
            boolean                             retQuote = true;
            str                                 errorMessage;

            if (_purchReqLine.LineType == PurchReqLineType::External)
            {
                select RecId from purchReqLineExternalCatalogQuote where
                        purchReqLineExternalCatalogQuote.PurchReqLine  == _purchReqLine.RecId
                   exists join RecId from catExternalCatalogQuote where
                        catExternalCatalogQuote.RecId          == purchReqLineExternalCatalogQuote.ExternalCatalogQuote &&
                        catExternalCatalogQuote.ExpirationDate <  DateTimeUtil::date(DateTimeUtil::utcNow());

                if (purchReqLineExternalCatalogQuote)
                {
                    retQuote = false;
                }
            }

            if (!retQuote)
            {
                errorMessage = strFmt("@SYS305331", datetime2str(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
            
                error(errorMessage);
            
                this.updatePurchReqLineProcessingError([_purchReqLine], PurchReqLineProcessingErrorType::InvalidQuote, errorMessage);
            }

            activityContext.addCustomProperty('Valid', int2Str(retQuote));

            return retQuote;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for vendor rule.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The PurchReqLine table object from the <c>PurchReqLine</c> table to retrieve.
    /// </param>
    /// <param name="_purchaseOrderCreate">
    ///    The boolean value indicates if the caller is from PO creation.
    /// </param>
    /// <returns>
    ///    true if vendor rule passes; otherwise, false.
    /// </returns>
    private boolean validateVendor(PurchReqLine _purchReqLine, boolean _purchaseOrderCreate = false)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().requisitionRelease().validateVendor(_purchReqLine, _purchaseOrderCreate))
        {
            boolean ret = true;

            if (_purchaseOrderCreate)
            {
                ret = !VendTable::isVendorBlocked(_purchReqLine.VendAccount, CustVendorBlocked::Requisition);

                if (ret)
                {
                    ret = !VendTable::isVendorBlocked(_purchReqLine.VendAccount, CustVendorBlocked::PurchOrder);
                }
            }

            if (!ret)
            {
                str errorMessage = strFmt("@SYS305323", datetime2str(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
            
                error(errorMessage);

                this.updatePurchReqLineProcessingError([_purchReqLine], PurchReqLineProcessingErrorType::InvalidVendor, errorMessage);
            }

            activityContext.addCustomProperty('Valid', int2Str(ret));

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RequisitionPurchaseOrderGeneration construct()
    {
        return new RequisitionPurchaseOrderGeneration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchReqLinePrice2PurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true if the requisition line price information is to be copied over to purchase order line.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    A <c>PurchReqLine</c> record to evaluate.
    /// </param>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> record to evaluate trade agreements information.
    /// </param>
    /// <param name="_purchReqSourcingPolicyRuleProvider">
    ///    A <c>PurchReqSourcingPolicyRuleProvider</c> used to inject information about Purchase order creation and demand consolidation rule for unit tests.
    /// </param>
    /// <param name="_purchRFQCaseLineProvider">
    ///    A <c>PurchRFQCaseLineProvider</c> used for test units.
    /// </param>
    /// <returns>
    ///    true if the requisition line price information is to be copied over; otherwise, false.
    /// </returns>
    public static boolean isPurchReqLinePrice2PurchaseOrder(PurchReqLine _purchReqLine,
        PurchLine _purchLine = null,
        PurchReqSourcingPolicyRuleProvider _purchReqSourcingPolicyRuleProvider = new PurchReqSourcingPolicyRuleProvider(),
        PurchRFQCaseLineProvider _purchRFQCaseLineProvider = new PurchRFQCaseLineProvider()
    )
    {
        boolean transferPriceDiscountFromPurchReqToPO;

        switch (_purchReqLine.LineType)
        {
            case PurchReqLineType::Category:
                // For line type non catalog item we will always transfer price.
                transferPriceDiscountFromPurchReqToPO = true;
                break;
            default:
                if (_purchReqLine.PurchReqConsolidationStatus == PurchReqConsolidationStatus::Consolidated)
                {
                    // For catalog items with consolidation, we will always do transfer
                    transferPriceDiscountFromPurchReqToPO = true;
                }
                else
                {
                    // For catalog items without consolidation we will need to evaluate policy rule and line policy for price/discount transfer
                    transferPriceDiscountFromPurchReqToPO = RequisitionPurchaseOrderGeneration::transferPriceFromPurchReqToPOForItemLine(_purchReqLine,
                        _purchLine, _purchReqSourcingPolicyRuleProvider, _purchRFQCaseLineProvider);
                }
                break;
        }

        return transferPriceDiscountFromPurchReqToPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPriceFromPurchReqToPOForItemLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if the requisition line price information is to be copied over to purchase order line.
    ///     This is for specific requisition line of type item and without RFQs with highest status accepted
    /// </summary>
    /// <param name="_purchReqLine">
    ///    A <c>PurchReqLine</c> record to evaluate.
    /// </param>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> record to evaluate trade agreements information.
    /// </param>
    /// <param name="_purchReqSourcingPolicyRuleProvider">
    ///    A <c>PurchReqSourcingPolicyRuleProvider</c> used to inject information about Purchase order creation and demand consolidation rule for unit tests.
    /// </param>
    /// <param name="_purchRFQCaseLineProvider">
    ///    A <c>PurchRFQCaseLineProvider</c> used to inject information about RFQ for unit tests.
    /// </param>
    /// <returns>
    ///    true if the requisition line price information is to be copied over; otherwise, false.
    /// </returns>
    private static boolean transferPriceFromPurchReqToPOForItemLine(
        PurchReqLine _purchReqLine,
        PurchLine _purchLine,
        PurchReqSourcingPolicyRuleProvider _purchReqSourcingPolicyRuleProvider = new PurchReqSourcingPolicyRuleProvider(),
        PurchRFQCaseLineProvider _purchRFQCaseLineProvider = new PurchRFQCaseLineProvider()
        )
    {
        #PurchReqPriceDiscountTransferPolicyRule
        container                               purchReqSourcingPolicyRuleContainer;
        boolean                                 cntValueAllowPriceDiscountTransferOverride;
        PurchReqPolicyPriceDiscountTransfer     cntValuePolicyPriceDiscountTransferValue;
        boolean                                 transferPriceDiscountFromPurchReqToPO = true;

        // Calculates based on policy rule setting if the requisition line price information is to be copied over to purchase order line.
        boolean calculateTransferPriceBasedOnPolicyRule(PurchReqPolicyPriceDiscountTransfer policyPriceDiscountTransferValue)
        {
            boolean result;

            // If transfer price is set to "TransferAlwaysPrices" return true
            switch (policyPriceDiscountTransferValue)
            {
                case PurchReqPolicyPriceDiscountTransfer::Always:
                    result = true;
                    break;
                case PurchReqPolicyPriceDiscountTransfer::OnlyIfNoTradeAgreements:
                    result = !_purchLine.salesPurchLineInterface().priceAgreementExists(_purchLine.inventDim());
                    break;
            }

            return result;
        }

        // Calculates based on policy line rule setting if the requisition line price information is to be copied over to purchase order line.
        boolean calculateTransferPriceBasedOnPolicyRuleForLine(PurchReqPriceDiscountTransfer policyLinePriceDiscountTransferValue,
            PurchReqPolicyPriceDiscountTransfer policyPriceDiscountTransferValue)
        {
            boolean result;

            // If transfer price is set to "TransferAlwaysPrices" return true
            switch (policyLinePriceDiscountTransferValue)
            {
                case PurchReqPriceDiscountTransfer::Always:
                    result = true;
                    break;
                case PurchReqPriceDiscountTransfer::OnlyIfNoTradeAgreements:
                    result = !_purchLine.salesPurchLineInterface().priceAgreementExists(_purchLine.inventDim());
                    break;
                case PurchReqPriceDiscountTransfer::UsePolicy:
                    result = calculateTransferPriceBasedOnPolicyRule(policyPriceDiscountTransferValue);
                    break;
            }

            return result;
        }

        // For line type catalog item with a RFQ with highest status accepted, we will always transfer price, so we will return default value: true
        if (_purchRFQCaseLineProvider.getPurchRFQCaseLineStatusHigh(_purchReqLine) != PurchRFQStatus::Accepted)
        {
            // Get "Purchase order creation and demand consolidation rule" main information
            purchReqSourcingPolicyRuleContainer = _purchReqSourcingPolicyRuleProvider.getPurchReqSourcingPolicyRuleContainer(_purchReqLine);

            cntValuePolicyPriceDiscountTransferValue = conPeek(purchReqSourcingPolicyRuleContainer, #PosPriceDiscountTransfer);
            cntValueAllowPriceDiscountTransferOverride = conPeek(purchReqSourcingPolicyRuleContainer, #PosAllowPriceDiscountTransferOverride);

            // If we allow to override value at line level, verify what value we have on line level for Price\discount transfer setting.
            // Handle separate if value per line is 'Set by policy'
            transferPriceDiscountFromPurchReqToPO = cntValueAllowPriceDiscountTransferOverride ?
                calculateTransferPriceBasedOnPolicyRuleForLine(_purchReqLine.PriceDiscountTransfer, cntValuePolicyPriceDiscountTransferValue) :
                calculateTransferPriceBasedOnPolicyRule(cntValuePolicyPriceDiscountTransferValue);
        }

        return transferPriceDiscountFromPurchReqToPO;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>