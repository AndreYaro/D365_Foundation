<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementUnexpectedErrorLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using StringBuilder = System.Text.StringBuilder;
using StringWriter = System.IO.StringWriter;
using JsonTextWriter = Newtonsoft.Json.JsonTextWriter;

internal static final class InventMovementUnexpectedErrorLogger
{
    const str instrumentationNamespace = classStr(InventMovementUnexpectedErrorLogger);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logUnexpectedLotIdNotSpecified</Name>
				<Source><![CDATA[
    internal static void logUnexpectedLotIdNotSpecified(InventMovement _movement, MethodName _fromMethod, container _callStack = conNull())
    {
        const str FromMethodName = 'FromMethodName';
        const str CallStack = 'CallStack';
        const str movementClassName = 'MovementClassName';
       
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(instrumentationNamespace);

        var stringBuilder = new StringBuilder();

        using (var stringWriter = new StringWriter(stringBuilder))
        {
            using (var writer = new JsonTextWriter(stringWriter))
            {
                writer.WriteStartObject();

                if (_movement)
                {
                    writer.WritePropertyName(movementClassName);
                    writer.WriteValue(classId2Name(_movement.handle()));
                }

                writer.WritePropertyName(FromMethodName);
                writer.WriteValue(_fromMethod);

                if (_callStack != conNull())
                {
                    writer.WritePropertyName(CallStack);
                    writer.WriteValue(con2Str(_callStack));
                }

                writer.WriteEndObject();
            }
        }

        instrumentationLogger.logInformation(stringBuilder.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>