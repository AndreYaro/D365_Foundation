<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceWHSFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;
using KernelStateProvider = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider;
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class InventInventoryDataServiceWHSFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureDependencies, IFeatureMetadataEnablementNotifiable
{
    private static InventInventoryDataServiceWHSFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new InventInventoryDataServiceWHSFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventInventoryDataServiceWHSFeature instance()
    {
        return InventInventoryDataServiceWHSFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str label()
    {
        return literalStr("@SCM:InventoryServiceWHSFeature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::InventoryAndWarehouseManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str summary()
    {
        return literalStr("@SCM:InventoryServiceWHSFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isFeatureEnabled()
    {
        return KernelStateProvider::isFeatureEnabled(InventInventoryDataServiceWHSFeature::instance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAllFeatures()
    {
        var featureDependency = new IFeature[1]();
        featureDependency.SetValue(InventInventoryDataServiceFeature::instance(), 0);
        return featureDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        InventInventoryDataServiceParameters para = InventInventoryDataServiceParameters::find(true);
        if (para)
        {
            para.IsWHSItemEnabled = true;
            para.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        InventInventoryDataServiceParameters para = InventInventoryDataServiceParameters::find(true);
        if (para)
        {
            para.IsWHSItemEnabled = false;
            para.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>