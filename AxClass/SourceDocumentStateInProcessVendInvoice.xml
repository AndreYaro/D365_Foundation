<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentStateInProcessVendInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentStateInProcessVendInvoice</c> class is an in-process source document state for
/// a vendor invoice.
/// </summary>
[SourceDocumentClassExtensionAttribute(tableStr(VendInvoiceInfoTable))]
public class SourceDocumentStateInProcessVendInvoice extends SourceDocumentStateInProcess
{
    boolean isSourceDocumentLineItemListNotEmpty;
    VendInvoiceInfoLine vendInvoiceInfoLine;
    boolean isHungary;

    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSourceDocumentLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query to obtain SourceDocumentLine and associated VendInvoiceInfoLine, VendInvoiceInfoLine_Asset and VendInvoiceInfoLine_Project records
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">Source document header record</param>
    /// <returns>
    /// The initialized query
    /// </returns>
    protected Query getSourceDocumentLineQuery(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        QueryBuildDataSource retrieveSDLQbds;
        QueryBuildDataSource vendInvoiceLineQbds;
        QueryBuildDataSource vendInvoiceAssetLineQbds;
        QueryBuildDataSource vendInvoiceProjectLineQbds;
        Query query;

        query = super(_sourceDocumentHeaderRecId);

        retrieveSDLQbds = query.dataSourceNo(query.dataSourceCount());

        // If the country context is not Hungary, the accounting status check does not have to be performed for the children of source document lines
        if (!isHungary)
        {
            retrieveSDLQbds.addRange(fieldNum(SourceDocumentLine, AccountingStatus)).value(queryValue(SourceDocumentLineAccountingStatus::Draft));
            retrieveSDLQbds.addRange(fieldNum(SourceDocumentLine, AccountingStatus)).value(queryValue(SourceDocumentLineAccountingStatus::FullyDistributed));
            retrieveSDLQbds.addRange(fieldNum(SourceDocumentLine, AccountingStatus)).value(queryValue(SourceDocumentLineAccountingStatus::PartlyDistributed));
        }
        vendInvoiceLineQbds = retrieveSDLQbds.addDataSource(tableNum(VendInvoiceInfoLine));
        vendInvoiceLineQbds.joinMode(JoinMode::OuterJoin);
        vendInvoiceLineQbds.addLink(fieldNum(SourceDocumentLine, RecId), fieldNum(VendInvoiceInfoLine, SourceDocumentLine));

        vendInvoiceAssetLineQbds = vendInvoiceLineQbds.addDataSource(tableNum(VendInvoiceInfoLine_Asset));
        vendInvoiceAssetLineQbds.fetchMode(QueryFetchMode::One2One);
        vendInvoiceAssetLineQbds.joinMode(JoinMode::OuterJoin);
        vendInvoiceAssetLineQbds.addLink(fieldNum(VendInvoiceInfoLine, RecId), fieldNum(VendInvoiceInfoLine_Asset, VendInvoiceInfoLineRecId));

        vendInvoiceProjectLineQbds = vendInvoiceLineQbds.addDataSource(tableNum(VendInvoiceInfoLine_Project));
        vendInvoiceProjectLineQbds.fetchMode(QueryFetchMode::One2One);
        vendInvoiceProjectLineQbds.joinMode(JoinMode::OuterJoin);
        vendInvoiceProjectLineQbds.addLink(fieldNum(VendInvoiceInfoLine, RecId), fieldNum(VendInvoiceInfoLine_Project, VendInvoiceInfoLineRefRecId));

        query.clearOrderBy();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalInformationMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates map holding the VendInvoiceInfoLine_Asset, VendInvoiceInfoLine_Project and VendInvoiceInfoLine record associated with the specific SourceDocumentLine
    /// </summary>
    /// <param name="_queryRun">
    /// The queryRun object holding the SourceDocumentLineImplementationRecords.
    /// </param>
    /// <returns>
    /// The initialized map.
    /// </returns>
    protected Map initAdditionalInformationMap(QueryRun _queryRun)
    {
        List tableList;
        Map additionalInformation;

        tableList = new List(Types::Integer);
        tableList.addEnd(tableNum(VendInvoiceInfoLine_Asset));
        tableList.addEnd(tableNum(VendInvoiceInfoLine_Project));

        additionalInformation = this.fillMap(_queryRun, tableList);

        return additionalInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSDLImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the VendInvoiceInfoLine record associated with the SourceDocumentLine instance.
    /// </summary>
    /// <param name="_queryRun">
    /// The queryRun object holding the VendInvoiceInfoLine records.
    /// </param>
    /// <returns>
    /// The VendInvoiceInfoLine record
    /// </returns>
    protected SourceDocumentLineImplementation initSDLImplementation(QueryRun _queryRun)
    {
        vendInvoiceInfoLine = _queryRun.get(tableNum(VendInvoiceInfoLine));

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a boolean variable used to ensure there is only one voucher per line per journalization if the SourceDocumentLine is of type
    /// VendorInvoiceLineSourceDocLineItem and PurchInvoiceLineType is of Prepayment application
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">Source document header record</param>
    /// <param name = "_isTransition">is it a transition</param>
    protected void initSourceDocumentLineItemList(
        SourceDocumentHeaderRecId _sourceDocumentHeaderRecId,
        boolean _isTransition = false)
    {
        isHungary = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]);
        isSourceDocumentLineItemListNotEmpty = false;
        super(_sourceDocumentHeaderRecId, _isTransition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Destermines:
    /// a) if the SourceDocumentLine record or any of its children have a specific accounting status for Hungary
    /// b) if there is only one voucher per line per journalization if the SourceDocumentLine is of type VendorInvoiceLineSourceDocLineItem and PurchInvoiceLineType is of Prepayment application
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The sourceDocumentLine record to be analyzed for its accounting status
    /// </param>
    /// <param name="_eligibleStatuses">
    /// The eligible accounting statuses for lines.
    /// </param>
    /// <returns>
    /// <c>true</c> if both conditions in the summary are validated; otherwise,
    /// <c>false</c>.
    /// </returns>
    protected boolean isEligibleSourceDocumentLine(SourceDocumentLine _sourceDocumentLine, Set _eligibleStatuses = lineAccountingStatus)
    {
        boolean isEligible;

        isEligible = (!isHungary) || super(_sourceDocumentLine, _eligibleStatuses);

        isEligible = isEligible && this.isVendInvoiceInfoLineEligible(_sourceDocumentLine);

        isSourceDocumentLineItemListNotEmpty = true;

        return isEligible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendInvoiceInfoLineEligible</Name>
				<Source><![CDATA[
    private boolean isVendInvoiceInfoLineEligible(SourceDocumentLine _sourceDocumentLine)
    {
        return !(isSourceDocumentLineItemListNotEmpty &&
                     _sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine) &&
                     ((vendInvoiceInfoLine.LineType == PurchInvoiceLineType::ReverseAdvanceApplication) ||
                       vendInvoiceInfoLine.isAdvanceApplication()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimizeTransitionSourceDocLinesUpdate</Name>
				<Source><![CDATA[
    protected boolean optimizeTransitionSourceDocLinesUpdate()
    {
        boolean optimizeTransitionSourceDocLinesUpdate;

        if (targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            optimizeTransitionSourceDocLinesUpdate = true;
        }

        return optimizeTransitionSourceDocLinesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessEvent</Name>
				<Source><![CDATA[
    protected BusinessEventsBase getBusinessEvent()
    {
        VendorInvoicePostedBusinessEvent businessEvent;
        
        if (targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            businessEvent = VendorInvoicePostedBusinessEvent::newFromSourceDocumentHeaderRecId(sourceDocumentHeader.RecId);
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLineQueryUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the getSourceDocumentLineQuery() implementation using the SysDa framework
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">Source document header record</param>
    /// <returns>The initialized query.</returns>
    protected SysDaQueryObject getSourceDocumentLineQueryUsingSysDa(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        SysDaQueryObject ret = super(_sourceDocumentHeaderRecId);        

        SourceDocumentLine  sourceDocumentLine = ret.table();

        VendInvoiceInfoLine vendInvoiceInfoLineTable;
        SysDaQueryObject sysDaQueryLineObject = new SysDaQueryObject(vendInvoiceInfoLineTable);

        ret.joinClause(SysDaJoinKind::OuterJoin, sysDaQueryLineObject);
        sysDaQueryLineObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(vendInvoiceInfoLineTable, fieldStr(AdvancedLedgerEntryLine, SourceDocumentLine)),
                new SysDaFieldExpression(sourceDocumentLine, fieldStr(SourceDocumentLine, RecId))));

        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        SysDaQueryObject sysDaQueryLineAssetObject = new SysDaQueryObject(vendInvoiceInfoLine_Asset);

        sysDaQueryLineObject.joinClause(SysDaJoinKind::OuterJoin, sysDaQueryLineAssetObject);
        sysDaQueryLineAssetObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(vendInvoiceInfoLineTable, fieldStr(VendInvoiceInfoLine, RecId)),
                new SysDaFieldExpression(vendInvoiceInfoLine_Asset, fieldStr(VendInvoiceInfoLine_Asset, VendInvoiceInfoLineRecId))));

        VendInvoiceInfoLine_Project VendInvoiceInfoLine_Project;
        SysDaQueryObject sysDaQueryLineProjectObject = new SysDaQueryObject(VendInvoiceInfoLine_Project);

        sysDaQueryLineObject.joinClause(SysDaJoinKind::OuterJoin, sysDaQueryLineAssetObject);
        sysDaQueryLineProjectObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(vendInvoiceInfoLineTable, fieldStr(VendInvoiceInfoLine, RecId)),
                new SysDaFieldExpression(vendInvoiceInfoLine_Project, fieldStr(VendInvoiceInfoLine_Project, VendInvoiceInfoLineRefRecId))));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalInformationMapUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the implementation of initAdditionalInformationMap() using the SysDa framework
    /// </summary>
    /// <param name = "_sdso">SysDaSearchObject instead of QueryRun</param>
    /// <returns>
    /// The initialized map.
    /// </returns>
    protected Map initAdditionalInformationMapUsingSysDa(SysDaSearchObject _sdso)
    {
        List tableList = new List(Types::Integer);
        tableList.addEnd(tableNum(VendInvoiceInfoLine_Asset));
        tableList.addEnd(tableNum(VendInvoiceInfoLine_Project));

        Map additionalInformation = this.fillMapUsingSysDa(_sdso, tableList);

        return additionalInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSDLImplementationUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the implementation of initSDLImplementation(), using the SysDa framework.
    /// </summary>
    /// <param name = "_sdso">
    /// The SysDa Search object containing the query to search in.
    /// </param>
    /// <returns>
    /// The CustInvoiceLine record as <c>SourceDocumentLineImplementation</c>.
    /// </returns>
    protected SourceDocumentLineImplementation initSDLImplementationUsingSysDa(SysDaSearchObject _sdso)
    {
        vendInvoiceInfoLine = this.sysDaGetRecordByTableId(_sdso.query(), tableNum(VendInvoiceInfoLine));

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>