<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WmsJournalCheckPost extends JournalCheckPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pdsVendBatchInfoUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the update of the vendor batch information by using the <c>PdsVendBatchEditLines</c> form.
    /// </summary>
    /// <remarks>
    /// This method uses the same steps as in the Inventory Registration Process to display the Vendor
    /// Batch Details form. This method calls the form to update the vendor batch information for all
    /// purchase line transactions.
    /// </remarks>
    private void pdsVendBatchInfoUpdate()
    {
        InventTable                             inventTable;
        InventModelGroupItem                    inventModelGroupItem;
        InventModelGroup                        inventModelGroup;
        InventTrans                             inventTrans;
        InventTransOrigin                       inventTransOrigin;
        WMSJournalTrans                         wMSJournalTrans;
        EcoResTrackingDimensionGroupItem        ecoResTrackingDimensionGroupItem;
        EcoResTrackingDimensionGroupFldSetup    ecoResTrackingDimensionGroupFldSetup;

        if (!journalId || !#pdsEnabled)
        {
            return;
        }

        select firstonly RecId from wMSJournalTrans
            where wMSJournalTrans.journalId                                       == journalId
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId                             == wMSJournalTrans.inventTransId
                    && inventTransOrigin.ReferenceCategory                        == InventTransType::Purch
            exists join inventModelGroupItem
                where inventModelGroupItem.ItemId                                 == wMSJournalTrans.ItemId
                    && inventModelGroupItem.ItemDataAreaId                        == curext()
            exists join inventModelGroup
                where inventModelGroup.ModelGroupId                               == inventModelGroupItem.ModelGroupId
                    && inventModelGroup.DataAreaId                                == inventModelGroupItem.ModelGroupDataAreaId
                    && inventModelGroup.PdsReqVendBatchDetail
            exists join ecoResTrackingDimensionGroupItem
                where ecoResTrackingDimensionGroupItem.ItemId                     == wMSJournalTrans.ItemId
                    && ecoResTrackingDimensionGroupItem.ItemDataAreaId            == curext()
            exists join ecoResTrackingDimensionGroupFldSetup
                where ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup == ecoResTrackingDimensionGroupItem.TrackingDimensionGroup
                    && ecoResTrackingDimensionGroupFldSetup.DimensionFieldId      == fieldNum(InventDim, InventBatchId)
                    && ecoResTrackingDimensionGroupFldSetup.IsActive              == NoYes::Yes
            exists join inventTrans
                where inventTrans.InventTransOrigin                               == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt                                  == StatusReceipt::Registered
                    && inventTrans.StatusIssue                                    == StatusIssue::None;

        if (wMSJournalTrans.RecId && this.shouldOpenVendBatchInfoForm())
        {
            WmsJournalCheckPost::openVendBatchInfoUpdateForm(journalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSJournalCheckPost     journalCheckPost;
        JournalForm             journalForm;

        journalForm      = JournalForm::fromArgs(_args);
        journalCheckPost = WMSJournalCheckPost::newFromForm(_args,journalForm);

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            journalForm.runbaseMainStart();

            if (!journalCheckPost.prompt())
            {
                if (! journalCheckPost.batchInfo().parmBatchExecute())
                {
                    journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
                }
                return;
            }

            try
            {
                journalCheckPost.runOperation();
                journalForm.runbaseMainEnd(journalCheckPost,false);
                journalCheckPost.pdsVendBatchInfoUpdate();
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(journalCheckPost,true);
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                journalForm.runbaseMainEnd(journalCheckPost,true);
                throw Exception::UpdateConflictNotRecovered;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    private static WMSJournalCheckPost newFromForm(
        Args        _args,
        JournalForm _journalForm)
    {
        WMSJournalTable     journalTable = _journalForm.journalTable();

        switch (journalTable.JournalType)
        {
            case WMSJournalType::Reception:
            case WMSJournalType::Production:
                return WMSJournalCheckPostReception::newTypeJournalTable(_args.parmEnum(), journalTable);
        }
        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openVendBatchInfoUpdateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>PdsVendBatchEditLines</c> form for a given journal.
    /// </summary>
    /// <param name="_journalId">
    /// The ID of the journal.
    /// </param>
    private static void openVendBatchInfoUpdateForm(JournalId _journalId)
    {
        FormRun formRun;
        args args;

        args = new Args();
        args.parm(_journalId);

        formRun = new MenuFunction(menuitemdisplaystr(PdsVendBatchEditLines), MenuItemType::Display).create(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOpenVendBatchInfoForm</Name>
				<Source><![CDATA[
    protected boolean shouldOpenVendBatchInfoForm()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>