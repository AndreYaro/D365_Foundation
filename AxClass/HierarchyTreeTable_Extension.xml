<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HierarchyTreeTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class HierarchyTreeTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteActivityEstimates</Name>
				<Source><![CDATA[
    private static boolean deleteActivityEstimates(HierarchyTreeTable  _hierarchyTreeTable,
                                            boolean             _validateOnly = false,
                                            boolean             _silentValidation = false)
    {
        smmActivities                   smmActivity;
        PSAActivityEstimates            psaActivityEstimates;
        boolean                         validationResult = true;

        smmActivity = smmActivities::findWithRecId(_hierarchyTreeTable.RefRecId, true);
        if (smmActivity)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                while select forupdate psaActivityEstimates where psaActivityEstimates.ActivityNumber == smmActivity.ActivityNumber
                {
                    if (psaActivityEstimates.validateDelete(_validateOnly))
                    {
                        if (!_validateOnly)
                        {
                            psaActivityEstimates.delete();
                        }
                    }
                    else
                    {
                        if (!_silentValidation)
                        {
                            throw Exception::Error;
                        }
                        else
                        {
                            validationResult = false;
                            break;
                        }
                    }
                }
            }
        }

        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEffort</Name>
				<Source><![CDATA[
    public static display Hours totalEffort(HierarchyTreeTable _hierarchyTreeTable)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        PSAActivitySetup    psaActivitySetup;
        smmActivities       smmActivities;
        Hours               effort;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select sum(Effort) from psaActivitySetup
                join RecId from smmActivities
                    where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
                        join HierarchyId, ParentElementNumber from hierarchyTreeTable
                          where hierarchyTreeTable.RefRecId == smmActivities.RecId &&
                                hierarchyTreeTable.HierarchyId == _hierarchyTreeTable.HierarchyId &&
                                hierarchyTreeTable.ParentElementNumber != _hierarchyTreeTable.ElementNumber;
        }

        return effort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActivityHourTrx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether hour transactions exist for the selected activity record.
    /// </summary>
    /// <param name="_activityNumber">
    /// The activity number.
    /// </param>
    /// <returns>
    /// true if hour transactions exist; otherwise, false.
    /// </returns>
    public static boolean existActivityHourTrx(smmActivityNumber _activityNumber)
    {
        if (_activityNumber)
        {
            ProjEmplTrans       projEmplTrans;

            select firstonly RecId from projEmplTrans
                where projEmplTrans.ActivityNumber == _activityNumber;
            if (projEmplTrans.RecId != 0)
            {
                return true;
            }

            TSTimesheetLine     timesheetLine;

            select firstonly RecId from timesheetLine
                where timesheetLine.ActivityNumber == _activityNumber &&
                    timesheetLine.ProjectDataAreaId == curExt();
            if (timesheetLine.RecId != 0)
            {
                return true;
            }

            ProjJournalTable    projJournalTable;
            ProjJournalTrans    projJournalTrans;

            select firstonly RecId from projJournalTrans
                where projJournalTrans.ActivityNumber == _activityNumber
                    join RecId from projJournalTable
                    where projJournalTable.JournalId == projJournalTrans.JournalId &&
                        projJournalTable.JournalType == ProjJournalType::Hour;
            if (projJournalTrans.RecId != 0)
            {
                return true;
            }

            ProjForecastEmpl    projForecastEmpl;

            select firstonly RecId from projForecastEmpl
                where projForecastEmpl.ActivityNumber == _activityNumber;
            if (projForecastEmpl.RecId != 0)
            {
                return true;
            }

            ProjBegBalJournalTrans_CostSales    projBegBalJournalTrans;

            select firstonly RecId from projBegBalJournalTrans
                where projBegBalJournalTrans.ActivityNumber == _activityNumber;
            if (projBegBalJournalTrans.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssociation</Name>
				<Source><![CDATA[
    public static Common findAssociation(Common _leaf, int _associationTablenum)
    {
        ElementNodeType     nodeType;

        HierarchyLinkTable  hierarchyLinkTable;
        HierarchyTreeTable  hierarchyTreeTable;

        nodeType = HierarchyTreeTable::tableIdToNodeType(_leaf.TableId);

        select firstonly HierarchyId from hierarchyTreeTable
            where hierarchyTreeTable.ElementNodeType == nodeType &&
                hierarchyTreeTable.RefRecId == _leaf.RecId
        join RefRecId from hierarchyLinkTable where
                hierarchyLinkTable.HierarchyId == hierarchyTreeTable.HierarchyId &&
                hierarchyLinkTable.RefTableId == _associationTablenum;

        switch (_associationTablenum)
        {
            case tableNum(ProjTable):
                return ProjTable::findRecId(hierarchyLinkTable.RefRecId);

            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyNameonHierarchy</Name>
				<Source><![CDATA[
    public static HierarchyTreeTable findbyNameonHierarchy(HierarchyIdBase   _hId, Name _name)
    {
        HierarchyTreeTable      hierarchyTreeTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId     ==  _hId &&
                      hierarchyTreeTable.Name  == _name;
        }

        return hierarchyTreeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyQuotation</Name>
				<Source><![CDATA[
    public static HierarchyTreeTable findbyQuotation(QuotationId   _quotationId, RefRecId _psaRefRecId)
    {
        HierarchyTreeTable      hierarchyTreeTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select firstonly hierarchyTreeTable
                where hierarchyTreeTable.psaQuotationId    == _quotationId &&
                      hierarchyTreeTable.psaRefRecID       == _psaRefRecId;
        }

        return hierarchyTreeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCreateProjectRootActivityRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create project activity records for Project hierarchy root record.
    /// </summary>
    /// <param name="_wbsOwner">
    ///     Hierarchy owner. Can be a Project, a Project quotation or null.
    /// </param>
    /// <param name="_rootTemplateTaskName">
    ///     If the root is for a template, provide this as the root task's name.
    /// </param>
    /// <returns>
    ///     RecId to be assigned to a HierarchyTreeTable RefRecId.
    /// </returns>
    public static RefRecId projCreateProjectRootActivityRecords(Common _wbsOwner, smmActivityPurpose _rootTemplateTaskName = "")
    {
        smmActivities           smmActivities;        
        ProjTable               projTable;
        SalesQuotationTable     salesQuotationTable;        
        smmActivityParentType   parentType;

        ttsbegin;
        if (_wbsOwner.TableId == tableNum(ProjTable))
        {
            projTable = _wbsOwner;
        }
        else if (_wbsOwner.TableId == tableNum(SalesQuotationTable))
        {
            salesQuotationTable = _wbsOwner;
        }

        smmActivities.initValue(smmActivityCategory::Task);

        if (projTable)
        {
            smmActivities.StartDateTime = DateTimeUtil::newDateTime(projTable.PSASchedStartDate, 0);
            smmActivities.EndDateTime   = DateTimeUtil::newDateTime(projTable.PSASchedEndDate, 0);
            smmActivities.Purpose       = strLTrim(projTable.Name);
            parentType                  = smmActivityParentType::Project;
        }
        else if (salesQuotationTable)
        {
            smmActivities.StartDateTime = DateTimeUtil::newDateTime(salesQuotationTable.PSAEstProjStartDate, 0);
            smmActivities.EndDateTime   = DateTimeUtil::newDateTime(salesQuotationTable.PSAEstProjEndDate, 0);
            smmActivities.Purpose       = strLTrim(salesQuotationTable.QuotationName);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                parentType = smmActivityParentType::Quotation;
            }
        }
        else
        {
            smmActivities.Purpose = _rootTemplateTaskName;
            parentType = smmActivityParentType::Project;
        }
        smmActivities.setActivityNum();

        if (!smmActivityParentLinkTable::existsByActivityAndParent(smmActivities.ActivityNumber, parentType, _wbsOwner.RecId, _wbsOwner.TableId))
        {
            smmActivityParentLink::insertLink(smmActivities.ActivityNumber, parentType, _wbsOwner.RecId, true);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            PSAActivitySetup psaActivitySetup;

            psaActivitySetup.ActivityNumber = smmActivities.ActivityNumber;

            if (projTable)
            {
                psaActivitySetup.PSASchedStart      = projTable.PSASchedStartDate;
                psaActivitySetup.PSASchedEnd        = projTable.PSASchedEndDate;
                psaActivitySetup.ActivityDuration   = projTable.PSASchedDuration;
                psaActivitySetup.Effort             = projTable.PSASchedEffort;
                psaActivitySetup.EffortAtComplete   = projTable.PSASchedEffort;
                psaActivitySetup.CalendarId         = projTable.PSASchedCalendarId;
            }
            else if (salesQuotationTable)
            {
                psaActivitySetup.PSASchedStart      = salesQuotationTable.PSAEstProjStartDate;
                psaActivitySetup.PSASchedEnd        = salesQuotationTable.PSAEstProjEndDate;
                psaActivitySetup.ActivityDuration   = salesQuotationTable.PSAEstdProjDuration;
                psaActivitySetup.Effort             = 0;
                psaActivitySetup.EffortAtComplete   = 0;
                psaActivitySetup.CalendarId         = salesQuotationTable.PSASchedCalendarId;
            }
            else
            {
                PSAParameters psaParameters = PSAParameters::find();
                if (psaParameters)
                {
                    psaActivitySetup.CalendarId = psaParameters.SchedDefaultCalendar;
                }
            }
            psaActivitySetup.NumberOfResources = 0;
            psaActivitySetup.insert();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ProjActivity projActivity;
            projActivity.ActivityNumber = smmActivities.ActivityNumber;
            projActivity.insert();
        }

        smmActivities.insert();
        ttscommit;

        return smmActivities.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSetHierarchyRootTaskName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates project hierarchy root task name.
    /// </summary>
    /// <param name="_recId">
    ///    RecId of the record that owns the Hierarchy. (e.g.ProjTable or SalesQuotationTable).
    /// </param>
    /// <param name="_name">
    ///    New name from the record that owns the Hierarchy. (e.g.ProjTable or SalesQuotationTable).
    /// </param>
    /// <param name="_mainTableId">
    ///    Main Table Id: (e.g. SalesQuotationTable or ProjTable )
    /// </param>
    public static void projSetHierarchyRootTaskName(RecId _recId, Name _name, RefTableId _mainTableId)
    {
        HierarchyTreeTable rootHierarchyTreeTable;
        HierarchyLinkTable hierarchyLinkTable;
        smmActivities      rootSmmActivities;

        hierarchyLinkTable = HierarchyLinkTable::findRefTableRecId(_mainTableId, _recId, false);
        if (hierarchyLinkTable)
        {
            rootHierarchyTreeTable = HierarchyTreeTable::findRootLevelNode(hierarchyLinkTable.HierarchyId);

            //update SmmActivities
            rootSmmActivities = smmActivities::findWithRecId(rootHierarchyTreeTable.RefRecId, true);
            if (rootSmmActivities)
            {
                ttsbegin;
                rootSmmActivities.Purpose = _name;
                rootSmmActivities.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSetRootTaskScheduleAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates schedule related fields in the root project task.
    /// </summary>
    /// <param name="_ownerRecId">
    ///    RecId of the record that owns the project tasks Hierarchy (e.g.ProjTable or SalesQuotationTable).
    /// </param>
    /// <param name="_ownerTableId">
    ///    Owner table id.
    /// </param>
    /// <param name="_effort">
    ///     Project task effort.
    /// </param>
    /// <param name="_startDate">
    ///     Project task start date.
    /// </param>
    /// <param name="_endDate">
    ///     Project task end date.
    /// </param>
    /// <param name="_duration">
    ///     Project task duration.
    /// </param>
    /// <param name="_skipReservationUpdate">
    ///     Determines whether related Reservation records will be updated along with the Task update
    /// </param>
    /// <remarks>
    ///     This method fails silently, unless the project tasks hierarchy only contains the root task.
    ///     Passing TRUE to the _skipReservationUpdate argument may cause the Reservation data to be misaligned
    ///     with the Task data because reactive update of Reservation data will be skipped.
    /// </remarks>
    public static void projSetRootTaskScheduleAttributes(RecId              _ownerRecId,
                                                         RefTableId         _ownerTableId,
                                                         Hours              _effort,
                                                         SchedFromDate      _startDate,
                                                         SchedToDate        _endDate,
                                                         Hours              _duration,
                                                         boolean            _skipReservationUpdate = false)
    {
        HierarchyTreeTable  rootHierarchyTreeTable;
        smmActivities       rootSmmActivities;
        PSAActivitySetup    rootPSAActivitySetup;
        HierarchyLinkTable  hierarchyLinkTable;

        hierarchyLinkTable = HierarchyLinkTable::findRefTableRecId(_ownerTableId, _ownerRecId);
        if (hierarchyLinkTable)
        {
            if (HierarchyTreeTable::hasOnlyRoot(hierarchyLinkTable.HierarchyId))
            {
                rootHierarchyTreeTable = HierarchyTreeTable::findRootLevelNode(hierarchyLinkTable.HierarchyId);

                ttsbegin;
                rootSmmActivities = smmActivities::findWithRecId(rootHierarchyTreeTable.RefRecId, true);
                if (rootSmmActivities)
                {
                    rootSmmActivities.StartDateTime = DateTimeUtil::newDateTime(_startDate, 0);
                    rootSmmActivities.EndDateTime   = DateTimeUtil::newDateTime(_endDate, 0);
                    rootSmmActivities.update();
                }

                rootPSAActivitySetup = PSAActivitySetup::findActivityNumber(rootSmmActivities.ActivityNumber, true);
                if (rootPSAActivitySetup)
                {
                    rootPSAActivitySetup.EffortAtComplete   += _effort - rootPSAActivitySetup.orig().Effort;
                    rootPSAActivitySetup.Effort             = _effort;
                    rootPSAActivitySetup.PSASchedStart      = _startDate;
                    rootPSAActivitySetup.PSASchedEnd        = _endDate;
                    rootPSAActivitySetup.ActivityDuration   = _duration;
                    rootPSAActivitySetup.update(_skipReservationUpdate);
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaFindChildElement</Name>
				<Source><![CDATA[
    public static HierarchyTreeTable psaFindChildElement(HierarchyIdBase _hierarchyId, ElementNumber _elementNumber)
    {
        HierarchyTreeTable      hierarchyTreeTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _hierarchyId && _elementNumber)
        {
            select firstonly hierarchyTreeTable
                    where hierarchyTreeTable.HierarchyId            == _hierarchyId &&
                          hierarchyTreeTable.ParentElementNumber    == _elementNumber;
        }

        return hierarchyTreeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAinsertActivityNew</Name>
				<Source><![CDATA[
    public static void psAinsertActivityNew(HierarchyIdBase _hierarchyId, ElementNumber _parentElementNumber,
                smmActivities _smmActivities,
                Name _nameLink,
                ElementNumber _referenceElementNumber,
                Name _nameA)
    {
        #Characters

        HierarchyTreeTable  hierarchyTreeTable;

        if (_hierarchyId)
        {
            ttsbegin;

            hierarchyTreeTable.clear();

            hierarchyTreeTable.HierarchyId = _hierarchyId;
            hierarchyTreeTable.ElementNumber = NumberSeq::newGetNum(CompanyInfo::numRefElementNumber()).num();
            hierarchyTreeTable.SiblingNumber = HierarchyTreeTable::nextSiblingNum(_hierarchyId, _parentElementNumber);
            hierarchyTreeTable.ParentElementNumber = _parentElementNumber;
            hierarchyTreeTable.ElementNodeType = ElementNodeType::Activity;
            hierarchyTreeTable.Name = _nameA;
            hierarchyTreeTable.RefRecId = _smmActivities.RecId;
            hierarchyTreeTable.Path = HierarchyTreeTable::findElementNumber(_hierarchyId, _parentElementNumber).Path + hierarchyTreeTable.ParentElementNumber + #sharp;
            hierarchyTreeTable.ReferenceElementNumber = _referenceElementNumber;
            hierarchyTreeTable.psaNameLink = _nameLink;

            hierarchyTreeTable.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>