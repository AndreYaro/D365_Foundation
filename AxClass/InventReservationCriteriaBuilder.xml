<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReservationCriteriaBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventReservationCriteriaBuilder</c> class builds composite criterias for filtering inventory
///    on-hand reservation queries.
/// </summary>
public class InventReservationCriteriaBuilder
{
    InventMovement          movement;

    TmpPdsBatchAttribSelect batchAttributeFilters;
    boolean                 ignoreBatchAttributes;
    boolean                 alwaysApplyBatchAttributes;
    boolean                 batchAttributeFiltersSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates criteria to apply to an inventory on-hand query.
    /// </summary>
    /// <returns>
    ///    The criteria to apply to an inventory on-hand query.
    /// </returns>
    public InventOnHandCompositeCriteria buildCriteria()
    {
        InventBatchAttributeCriteria    batchAttributeCriteria;

        InventOnHandCompositeCriteria criteria = InventOnHandCompositeCriteria::newStandard();
        if (#PdsShelfEnabled)
        {
            criteria.addCriteria(InventBatchDispositionCriteria::newFromMovement(movement));
            criteria.addCriteria(InventShelfLifeCriteria::newFromMovement(movement));
        }

        if (#PdsBatchAttribEnabled && !ignoreBatchAttributes)
        {
            if (alwaysApplyBatchAttributes)
            {
                batchAttributeCriteria = InventBatchAttributeCriteria::newItemCustomer(movement.itemId(), movement.custVendAc());
            }
            else
            {
                batchAttributeCriteria = InventBatchAttributeCriteria::newFromMovement(movement);
            }
            if (batchAttributeFiltersSet)
            {
                batchAttributeCriteria.parmFilterConditions(batchAttributeFilters);
            }
            criteria.addCriteria(batchAttributeCriteria);
        }

        if (isConfigurationkeyEnabled(configurationkeynum(LeanManufacturing)))
        {
            criteria.addCriteria(InventKanbanReservationCriteria::newFromMovement(movement));
        }

        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlwaysApplyBatchAttributes</Name>
				<Source><![CDATA[
        public boolean parmAlwaysApplyBatchAttributes(boolean _alwaysApplyBatchAttributes = alwaysApplyBatchAttributes)
    {
        alwaysApplyBatchAttributes = _alwaysApplyBatchAttributes;

        return alwaysApplyBatchAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchAttributeFilters</Name>
				<Source><![CDATA[
        public TmpPdsBatchAttribSelect parmBatchAttributeFilters(TmpPdsBatchAttribSelect _filterConditions = null)
    {
        if (!prmisDefault(_filterConditions))
        {
            batchAttributeFilters.setTmpData(_filterConditions);
            batchAttributeFiltersSet = true;
        }

        return batchAttributeFilters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreBatchAttributes</Name>
				<Source><![CDATA[
        public boolean parmIgnoreBatchAttributes(boolean _ignoreBatchAttributes = ignoreBatchAttributes)
    {
        ignoreBatchAttributes = _ignoreBatchAttributes;

        return ignoreBatchAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
        public InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static InventReservationCriteriaBuilder construct()
    {
        return new InventReservationCriteriaBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventReservationCriteriaBuilder</c> class for building a composite on-hand criteria
    ///    for the given movement.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement that this builder will use when creating the individual criteria objects.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventReservationCriteriaBuilder</c> class to build composite on-hand criteria for <paramref name="_movement"/>.
    /// </returns>
    public static InventReservationCriteriaBuilder newMovement(InventMovement _movement)
    {
        InventReservationCriteriaBuilder builder = InventReservationCriteriaBuilder::construct();

        if (!_movement)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        builder.parmMovement(_movement);
        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventReservationCriteriaBuilder</c> class for building a composite on-hand criteria
    ///    for the given inventory reservation update.
    /// </summary>
    /// <param name="_update">
    ///    The inventory reservation update that this builder will use when creating the individual criteria objects.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventReservationCriteriaBuilder</c> class to build composite on-hand criteria for <paramref name="_update"/>.
    /// </returns>
    public static InventReservationCriteriaBuilder newUpdate(InventUpd_Reservation _update)
    {
        InventReservationCriteriaBuilder builder = InventReservationCriteriaBuilder::construct();

        if (!_update)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        builder.parmMovement(_update.movement());
        builder.parmBatchAttributeFilters(_update.parmPdsTmpAttrSel());
        return builder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
