<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceBudgetTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceBudgetTransaction</c> is used to generate budget plan data from budget transactions.
/// </summary>
public class BudgetPlanGenerateServiceBudgetTransaction extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractBudgetTransaction budgetPlanGenerateContractBudgetTransaction;
    BudgetTransactionHeader                     budgetTransactionHeader;
    BudgetTransactionLine                       budgetTransactionLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanGenerateServiceBudgetTransaction construct()
    {
        return new BudgetPlanGenerateServiceBudgetTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>BudgetPlanGenerateContractBudgetTransaction</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractBudgetTransaction _contract)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceBudgetTransaction));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceBudgetTransContext = budgetPlanLogger.budgetPlanGeneration().budgetTransContext(_contract))
        {
            this.parmBudgetPlanGenerateContract(_contract);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        boolean isValidQuery;
        Query   userDefinedQuery = this.createQuery();

        try
        {
            ttsbegin;

            BudgetPlanHeader budgetPlanHeader    = this.createOrUpdateBudgetPlanHeader();
            QueryRun         userDefinedQueryRun = new QueryRun(userDefinedQuery);

            while (userDefinedQueryRun.next())
            {
                isValidQuery = true;

                budgetTransactionHeader = userDefinedQueryRun.get(tableNum(BudgetTransactionHeader)) as BudgetTransactionHeader;
                budgetTransactionLine   = userDefinedQueryRun.get(tableNum(BudgetTransactionLine)) as BudgetTransactionLine;

                this.createOrUpdateBudgetPlanLine(this.setBudgetPlanLineDataGenerationTmp(budgetPlanHeader.RecId));
            }

            if (isValidQuery)
            {
                this.bulkInsertOrUpdateBudgetPlanLines();
            }

            if (!isValidQuery || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= BudgetPlanningConstants::MaxRetryCount)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@Budget:BudgetPlanning_Validation_ErrorOccurredDuringUpdate");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmp</Name>
				<Source><![CDATA[
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmp(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp = super(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount = budgetTransactionLine.TransactionCurrencyAmount;
        budgetPlanLineDataGenerationTmp.TransactionCurrencyCode   = budgetTransactionLine.TransactionCurrency;
        budgetPlanLineDataGenerationTmp.LedgerDimension           = this.generateBudgetPlanningLedgerDim(budgetTransactionLine.LedgerDimension);
        budgetPlanLineDataGenerationTmp.BudgetClass               = this.getBudgetClass(budgetTransactionLine.BudgetType);

        BudgetCycle                 destinationBudgetCycle = BudgetCycle::find(BudgetPlanningProcess::find(budgetPlanGenerateContractBudgetTransaction.parmTargetBudgetPlanningProcess()).BudgetCycle);
        BudgetPlanLineEffectiveDate effectiveDate          = budgetTransactionLine.Date;

        BudgetControlBudgetCycle budgetControlBudgetCycle;

        select BudgetCycle from budgetControlBudgetCycle
            where budgetControlBudgetCycle.BudgetModelId == budgetPlanGenerateContractBudgetTransaction.parmBudgetModelId();

        BudgetCycle sourceBudgetCycle        = BudgetCycle::find(budgetControlBudgetCycle.BudgetCycle);
        boolean     isEquivalentBudgetCycles = this.validateEquivalentBudgetCycles(sourceBudgetCycle, destinationBudgetCycle);

        // Check to see if the source and target budget cycles have the same start and end month/day and the same number of operating periods
        if (isEquivalentBudgetCycles)
        {
            budgetPlanLineDataGenerationTmp.EffectiveDate = this.calculateBudgetPlanLineEffectiveDate(sourceBudgetCycle, destinationBudgetCycle, effectiveDate);
        }
        else
        {
            budgetPlanLineDataGenerationTmp.EffectiveDate = effectiveDate;
        }

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractBudgetTransaction = _budgetPlanGenerateContract as BudgetPlanGenerateContractBudgetTransaction;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                query;
        QueryBuildDataSource budgetTransactionHeaderQueryBuildDataSource;

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractBudgetTransaction.parmQueryBudgetPlanGenerateBudgetTransaction()));

        budgetTransactionHeaderQueryBuildDataSource = query.dataSourceTable(tableNum(BudgetTransactionHeader));

        if (budgetPlanGenerateContractBudgetTransaction.parmBudgetModelId())
        {
            budgetTransactionHeaderQueryBuildDataSource.addRange(fieldNum(BudgetTransactionHeader, BudgetSubModelId)).value(queryValue(budgetPlanGenerateContractBudgetTransaction.parmBudgetModelId()));
        }

        if (budgetPlanGenerateContractBudgetTransaction.parmBudgetTransactionCode())
        {
            budgetTransactionHeaderQueryBuildDataSource.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionCode)).value(queryValue(budgetPlanGenerateContractBudgetTransaction.parmBudgetTransactionCode()));
        }

        if (budgetPlanGenerateContractBudgetTransaction.parmBudgetTransactionId())
        {
            budgetTransactionHeaderQueryBuildDataSource.addRange(fieldNum(BudgetTransactionHeader, TransactionNumber)).value(queryValue(budgetPlanGenerateContractBudgetTransaction.parmBudgetTransactionId()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget class using BudgetType value.
    /// </summary>
    /// <param name = "_budgetType">
    /// The value of the BudgetType enum.
    /// </param>
    /// <returns>
    /// The BudgetClass enum value.
    /// </returns>
    protected BudgetClass getBudgetClass(BudgetType _budgetType)
    {
        BudgetClass budgetClass;

        switch (_budgetType)
        {
            case BudgetType::Expense:
                budgetClass = BudgetClass::Expense;
                break;

            case BudgetType::Revenue:
                budgetClass = BudgetClass::Revenue;
                break;
        }

        return budgetClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>