<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqMemoryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Runtime.Caching;

/// <summary>
/// The <c>ReqMemoryCache</c> class allows caching of large amounts of data 
/// without worrying about running out of memory. 
/// </summary>
/// <remarks>
/// The cache is able to sense memory pressure and automatically remove items from the
/// cache when the memory limit is reached.
/// Note! Before using the class you must read carefully descriptions of the <c>add</c> methods. 
/// Not following the rules may result in leaks of resources.
/// </remarks>
public final class ReqMemoryCache
{
    const static int RequiredPhysicalMemoryLimitPercentage = 80;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>physicalMemoryLimitPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the percentage of physical memory that the cache can use.
    /// </summary>
    /// <returns>The percentage of physical memory that the cache can use.</returns>
    public static int64 physicalMemoryLimitPercentage()
    {
        return ReqMemoryCache::internalInstance().PhysicalMemoryLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the global instance of the memory cache.
    /// </summary>
    /// <returns>The global instance of the memory cache.</returns>
    [Hookable(false)]
    internal static MemoryCache internalInstance()
    {
        var memoryCache = MemoryCache::Default;
        if (memoryCache.PhysicalMemoryLimit != ReqMemoryCache::RequiredPhysicalMemoryLimitPercentage)
        {
            boolean lockWasTaken = false;
            try
            {
                System.Threading.Monitor::Enter(memoryCache, byref lockWasTaken);

                if (memoryCache.PhysicalMemoryLimit != ReqMemoryCache::RequiredPhysicalMemoryLimitPercentage)
                {
                    ReqMemoryCache::updateMemoryCacheInstanceConfiguration(memoryCache);
                }
            }
            finally
            {
                if (lockWasTaken)
                {
                    System.Threading.Monitor::Exit(memoryCache);
                }
            }
        }
        
        return MemoryCache::Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMemoryCacheConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates memory cache configuration.
    /// </summary>
    /// <returns>The memory cache configuration.</returns>
    private static System.Collections.Specialized.NameValueCollection createMemoryCacheConfiguration()
    {
        var config = new System.Collections.Specialized.NameValueCollection();
        config.Add('physicalMemoryLimitPercentage', int2Str(ReqMemoryCache::RequiredPhysicalMemoryLimitPercentage));
        return config;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMemoryCacheInstanceConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the configuration of the memory cache instance. 
    /// </summary>
    /// <param name = "_memoryCache">The memory cache.</param>
    private static void updateMemoryCacheInstanceConfiguration(MemoryCache _memoryCache)
    {
        System.Type memoryCacheType = _memoryCache.GetType();

        // The System.Runtime.Caching.MemoryCache.UpdateConfig method is internal. 
        // We need to call it through reflection as this is the only option available to us in the Application Suite model.
        const str updateConfigMethodName = 'UpdateConfig';
        System.Reflection.MethodInfo updateConfigMethod = memoryCacheType.GetMethod(updateConfigMethodName, System.Reflection.BindingFlags::Instance | System.Reflection.BindingFlags::NonPublic);
        if (updateConfigMethod)
        {
            System.Object[] memoryCacheConfigurationParameter = new System.Object[1]();
            memoryCacheConfigurationParameter.SetValue(ReqMemoryCache::createMemoryCacheConfiguration(), 0);
            updateConfigMethod.Invoke(_memoryCache, memoryCacheConfigurationParameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValueAllowedForCrossSessionCaching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given object can be safely stored in a cross session cache.
    /// </summary>
    /// <param name = "_value">Object to check.</param>
    /// <returns>True if the object can be cached; false otherwise.</returns>
    /// <remarks>
    /// Objects that hold a reference to a native implementation in the kernel cannot be cached as the native implementation gets disposed when the session that instantiated it gets closed.
    /// This includes kernel objects (e.g. RecordInsertList) and table buffers.
    /// </remarks>
    private static boolean isValueAllowedForCrossSessionCaching(anytype _value)
    {
        Microsoft.Dynamics.AX.KernelInterop.IProxy objectProxy = _value as Microsoft.Dynamics.AX.KernelInterop.IProxy;
        if (objectProxy && objectProxy.ProxyWrapper)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCrossSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new cache item to the cache that will be available across sessions/threads.
    /// </summary>
    /// <param name = "_key">The key of the cache item.</param>
    /// <param name = "_value">The value of the cache item.</param>
    /// <param name = "_policy">The policy that defines the life time of the cache item.</param>
    /// <remarks>
    /// Note! Using this method requires extreme diligence. Cached values must follow the rules below:
    /// 1. The cached value must not have references to record buffers. 
    /// Record buffers have references to native objects which are also rooted to the session 
    /// and the kernel expects to garbage collect them when the session expires. 
    /// 2. The cached value must not have references to other classes that are not designed 
    /// with the cross-session caching rules in mind or may change in the future and violate these rules.
    /// 3. The cached value must be thread-safe, i.e. several threads should be able
    /// to interact with it concurrently without any unexpected side-effects. 
    /// 4. If your cached data is specific to a data area or partition then it is your responsibility to add 
    /// corresponding prefix to the key of the cache item.
    /// 5. If you need to cache data within a single session then please use the <c>addToCurrentSessionScope</c> method.
    /// </remarks>
    [Hookable(false)]
    public static void addCrossSession(
        str _key,
        anytype _value,
        ReqMemoryCacheItemPolicy _policy = null)
    {
        if (!ReqMemoryCache::isValueAllowedForCrossSessionCaching(_value))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CacheItem cacheItem = new CacheItem(_key, _value);
        CacheItemPolicy internalPolicy = _policy ? _policy.internalPolicy : null;

        ReqMemoryCache::internalInstance().Add(cacheItem, internalPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCrossSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the cache item with the specified key from the cache.
    /// </summary>
    /// <param name = "_key">The key of the cache item.</param>
    /// <param name = "_notFoundValue">The value that will be returned from the method if the cache item with the specified key is not found.</param>
    /// <returns>The value of the cache item.</returns>
    [Hookable(false)]
    public static anytype getCrossSession(str _key, anytype _notFoundValue = null)
    {
        CacheItem cacheItem = ReqMemoryCache::internalInstance().GetCacheItem(_key);

        return cacheItem ? cacheItem.Value : _notFoundValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCrossSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the cache item with the specified key from the cache.
    /// </summary>
    /// <param name = "_key">The key of the cache item.</param>
    [Hookable(false)]
    public static void removeCrossSession(str _key)
    {
        ReqMemoryCache::internalInstance().Remove(_key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCurrentSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to the cache a new cache item which is intended to be used only within the current session.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_value">The value of the cache item.</param>
    /// <param name = "_currentSessionCacheScope">The scope of the cache item.</param>
    /// <param name = "_policy">The policy that defines the life time of the cache item.</param>
    /// <remarks>
    /// Note! The scope is a disposable object and must always be instantiated in a <c>using</c> block.
    /// Not following this rule may potentially lead to leaks of resources. 
    /// </remarks>
    [Hookable(false)]
    public static void addToCurrentSessionScope(
        str _scopeKey, 
        anytype _value, 
        ReqMemoryCacheCurrentSessionScope _currentSessionCacheScope,
        ReqMemoryCacheItemPolicy _policy = null)
    {
        str key = _currentSessionCacheScope.scopeKeyToGlobalKey(_scopeKey);

        ReqMemoryCache::addCrossSession(key, _value, _policy);

        _currentSessionCacheScope.trackGlobalKey(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromCurrentSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the cache item with the specified key and scope from the cache.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_currentSessionCacheScope">The scope of the cache item.</param>
    /// <param name = "_notFoundValue">The value that will be returned from the method if the cache item with the specified key is not found.</param>
    /// <returns>The value of the cache item.</returns>
    public static anytype getFromCurrentSessionScope(
        str _scopeKey,
        ReqMemoryCacheCurrentSessionScope _currentSessionCacheScope,
        anytype _notFoundValue = null)
    {
        return ReqMemoryCache::getCrossSession(_currentSessionCacheScope.scopeKeyToGlobalKey(_scopeKey), _notFoundValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromCurrentSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the cache item with the specified key and scope from the cache.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_currentSessionCacheScope">The scope of the cache item.</param>
    [Hookable(false)]
    public static void removeFromCurrentSessionScope(
        str _scopeKey,
        ReqMemoryCacheCurrentSessionScope _currentSessionCacheScope)
    {
        ReqMemoryCache::removeCrossSession(_currentSessionCacheScope.scopeKeyToGlobalKey(_scopeKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCrossSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new cache item to the cache. The cache item will be available accross sessions/threads.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_value">The value of the cache item.</param>
    /// <param name = "_crossSessionScope">The scope of the cache item.</param>
    /// <param name = "_policy">The policy that defines the life time of the cache item.</param>
    /// <remarks>
    /// Note! Using this method requires extreme diligence. Cached values must follow the rules below:
    /// 1. The cached value must not have references to record buffers.
    /// Record buffers have references to native objects which are also rooted to the session
    /// and the kernel expects to garbage collect them when the session expires.
    /// 2. The cached value must not have references to other classes that are not designed
    /// with the cross-session caching rules in mind or may change in the future and violate these rules.
    /// 3. The cached value must be thread-safe, i.e. several threads should be able
    /// to interact with it concurrently without any unexpected side-effects.
    /// 4. If your cached data is specific to a data area or partition then use the appropriate scope.
    /// 5. If you need to cache data within a single session then please use the <c>addToCurrentSessionScope</c> method.
    /// </remarks>
    [Hookable(false)]
    public static void addToCrossSessionScope(
        str _scopeKey,
        anytype _value,
        ReqMemoryCacheCrossSessionScope _crossSessionScope,
        ReqMemoryCacheItemPolicy _policy = null)
    {
        if (!ReqMemoryCache::isValueAllowedForCrossSessionCaching(_value))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        str key = _crossSessionScope.scopeKeyToGlobalKey(_scopeKey);

        ReqMemoryCache::addCrossSession(key, _value, _policy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromCrossSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the cache item with the specified key and scope from the cache.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_crossSessionScope">The scope of the cache item.</param>
    /// <param name = "_notFoundValue">The value that will be returned from the method if the cache item with the specified key is not found.</param>
    /// <returns>The value of the cache item.</returns>
    public static anytype getFromCrossSessionScope(
        str _scopeKey,
        ReqMemoryCacheCrossSessionScope _crossSessionScope,
        anytype _notFoundValue = null)
    {
        return ReqMemoryCache::getCrossSession(_crossSessionScope.scopeKeyToGlobalKey(_scopeKey), _notFoundValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromCrossSessionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the cache item with the specified key and scope from the cache.
    /// </summary>
    /// <param name = "_scopeKey">The key of the cache item which is unique within the specified scope.</param>
    /// <param name = "_crossSessionScope">The scope of the cache item.</param>
    [Hookable(false)]
    public static void removeFromCrossSessionScope(
        str _scopeKey,
        ReqMemoryCacheCrossSessionScope _crossSessionScope)
    {
        ReqMemoryCache::removeCrossSession(_crossSessionScope.scopeKeyToGlobalKey(_scopeKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of the items in the cache. 
    /// </summary>
    /// <returns>The total number of the items in the cache.</returns>
    [Hookable(false)]
    public static int64 count()
    {
        return ReqMemoryCache::internalInstance().GetCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache. 
    /// </summary>
    /// <param name="_percent">The percentage of the total number of cache items to remove.</param>
    [Hookable(false)]
    public static void trim(int _percent = 100)
    {
        ReqMemoryCache::internalInstance().Trim(_percent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>