<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Mov_OrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimCtrl_Frm_Mov_OrderLine</c> class is used by Sales, Purchase, and Sales Quotation
///    lines to lock item dimension changes for delivery schedule lines and also commercial lines of
///    delivery schedules.
/// </summary>
public class InventDimCtrl_Frm_Mov_OrderLine extends InventDimCtrl_Frm_Mov
{
    boolean editProductDimensionsAllowed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>formActiveSetup</c> method to set the lock option of the item dimension that is
    ///    used for delivery schedules.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    ///    setup.
    /// </param>
    /// <param name="_movement">
    ///    The inventory movement that is associated with the line; optional.
    /// </param>
    public void formActiveSetup(
        InventDimGroupSetup         _inventDimGroupSetup    = null,
        InventMovement              _movement               = null)
    {
        InventDimParm           inventDimParmEnabled;
        SalesPurchLine          salesPurchLine = _movement.buffer();
        SalesPurchLineInterface salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();

        editProductDimensionsAllowed = salesPurchLineInterface.editProductDimensionsAllowed();
        super(_inventDimGroupSetup, _movement);

        // Enable only location and site for category based lines
        if (salesPurchLineInterface.isCategoryBased())
        {
            inventDimParmEnabled.setActiveSiteAndWarehouseDimensions();
            this.parmDimParmEnabled(inventDimParmEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreOrderLineSpecificFieldEnablementRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the rules for disabling inventory dimension fields that are specific to the <c>InventDimCtrl_Frm_Mov_OrderLine</c>
    /// class can be ignored.
    /// </summary>
    /// <returns>true, if the rules can be ignored; otherwise, false.</returns>
    /// <remarks>This method can be overridden in the child classes to modify the result of the <c>mustEnableField</c> method.</remarks>
    protected boolean ignoreOrderLineSpecificFieldEnablementRules()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the field based on the setup in the inventory dimension group and the item
    ///    dimension lock setting.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of the field to enable or disable.
    /// </param>
    /// <returns>
    ///    true if the field must be enabled; otherwise, false.
    /// </returns>
    protected NoYes mustEnableField(FieldId _dimFieldId)
    {
        SalesPurchLine              salesPurchLine  = movement.buffer();
        SalesPurchLineInterface     salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();

        // <GEERU>
        // </GEERU>

        if (!super(_dimFieldId))
        {
            return NoYes::No;
        }

        if (this.ignoreOrderLineSpecificFieldEnablementRules())
        {
            return NoYes::Yes;
        }

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);

        if (this.validateFieldMustBeDisabled(_dimFieldId, inventDimGroupFieldSetup, salesPurchLineInterface, salesPurchLine))
        {
            return NoYes::No;
        }

        // <GEERU>
        if (_dimFieldId == fieldNum(InventDim, InventProfileId_RU) && salesPurchLine.RecId)
        {
            if (salesPurchLine.TableId == tableNum(SalesLine))
            {
                SalesTable salesTable = salesPurchLineInterface.salesPurchTable();
                SalesTable_RU salesTableRU = salesTable.salesTable_RU();
                if (salesTableRU.InventProfileId_RU &&
                    salesTableRU.InventProfileUseRelated_RU == NoYes::No)
                {
                    return false;
                }
            }
            else if (salesPurchLine.TableId == tableNum(PurchLine))
            {
                PurchTable purchTable = salesPurchLineInterface.salesPurchTable();
                if (purchTable.purchTable_RU().InventProfileId_RU)
                {
                    return false;
                }
            }
        }
        // </GEERU>

        return (editProductDimensionsAllowed || !inventDimGroupFieldSetup.isProductDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldMustBeDisabled</Name>
				<Source><![CDATA[
    private boolean validateFieldMustBeDisabled(FieldId _dimFieldId,
        InventDimGroupFieldSetup _inventDimGroupFieldSetup,
        SalesPurchLineInterface _salesPurchLineInterface,
        SalesPurchLine _salesPurchLine)
    {
        return (movement.interCompanyMovement() && _inventDimGroupFieldSetup.isFinancialInventoryEnabled()
                || movement.interCompanyTransaction() && _inventDimGroupFieldSetup.isProductDimension())
            || (_salesPurchLineInterface.isDropShipment()
                && (_inventDimGroupFieldSetup.isProductDimension() || _dimFieldId == fieldNum(InventDim, InventSiteId))
                && (_salesPurchLine || !SalesPurchDropShipmentMustEnableFieldFlight::instance().isEnabled()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        editProductDimensionsAllowed = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Mov_OrderLine construct()
    {
        return new InventDimCtrl_Frm_Mov_OrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    /// The form where controls are maintained.
    /// </param>
    /// <param name="_movement">
    /// An instance of the movement for which the class is used.
    /// </param>
    /// <param name="_validInventDimDS">
    /// A set of valid <c>InventDim</c> data sources for which the class is used; optional.
    /// </param>
    /// <param name="_inventDimControlIdCollection">
    /// An instance of the <c>InventDimControlIdCollection</c> class; optional.
    /// </param>
    /// <returns>
    /// An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Mov_OrderLine newFromFormMovement(
        FormRun         _formRun,
        InventMovement  _movement,
        Set             _validInventDimDS = null, 
        InventDimControlIdCollection _inventDimControlIdCollection = null
        )
    {
        InventDimCtrl_Frm_Mov_OrderLine inventDimCtrl = InventDimCtrl_Frm_Mov_OrderLine::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.parmValidDataSources(_validInventDimDS);

        if (_inventDimControlIdCollection)
        {
            InventDimCtrl_Frm_Mov_OrderLine::updateInventDimControlIdCollection(_formRun, _inventDimControlIdCollection);

            inventDimCtrl.parmControlIdCollectionEnumerator(_inventDimControlIdCollection.getEnumerator());
        }

        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimControlIdCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate that can be used to add controls to the <c>InventDimControlIdCollection</c> before the initialization of the class <c>InventDimCtrl_Frm_Mov_OrderLine</c>.
    /// </summary>
    /// <param name = "_formRun">
    /// The form where controls are maintained.
    /// </param>
    /// <param name = "_inventDimControlIdCollection">
    /// An instance of the <c>InventDimControlIdCollection</c> class.
    /// </param>
    static delegate void updateInventDimControlIdCollection(FormRun _formRun, InventDimControlIdCollection _inventDimControlIdCollection)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>