<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEmailReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Sends the email to all the recepients whose transactions are posted and sentEmail status is NO.
/// </summary>
/// <remarks>
/// Sends email to single recepient if the class is called with transaction else sends email to all the recepients in the <c>RetailTransactionTable</c>
/// whose entryStatus is 'Posted' and EmailSent status is 'No'.
/// </remarks>
class RetailEmailReceipt
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #MAPI
    SysINetTable    _mapiSetup;
    Mapi            _mapi;
    MapiRecipDesc   receiver;

    RetailTransactionTable transactionTable;
    Batch currentBatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RetailTransactionTable</c> table with the caller record.
    /// </summary>
    /// <param name="args">
    /// A caller arguments.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the class is not called with particular transaction.
    /// </exception>
    void initFromArgs(Args args)
    {
        if (args && args.dataset())
        {
            if (args.dataset() == tablenum(RetailTransactionTable) && args.record())
                transactionTable = args.record();
            else
                throw error("@RET4566");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBatch</Name>
				<Source><![CDATA[
    Batch parmCurrentBatch(Batch _batch = currentBatch)
    {
        currentBatch = _batch;

        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEmailName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the connection with the email server and resolves the name of the recepient.
    /// </summary>
    /// <param name="_receiptEmail">
    /// The email address of the recepient.
    /// </param>
    /// <returns>
    /// True if the recepient name is resolved; otherwise, false.
    /// </returns>
    boolean resolveEmailName(RetailReceiptEmail _receiptEmail)
    {
        int     line = Global::infologLine();
        int     logonstatus;
        boolean ret;

        receiver = new MapiRecipDesc();

        try
        {
            _mapi = new Mapi();
        }
        catch (Exception::Internal)
        {
            infolog.clear(line);
            _mapi = null;
        }

        if (_mapi)
        {
            _mapiSetup = SysINetTable::find(curuserid());

            if (_mapiSetup.ProfileName == "@SYS21993")       // Default Configuration
                logonstatus = #MAPI_USE_DEFAULT;
            else
                logonstatus = #MAPI_FORCE_DOWNLOAD;

            _mapi.logon( _mapiSetup.ProfileName, '', logonstatus);

            receiver = _mapi.resolveName(_receiptEmail, #MAPI_AB_NOMODIFY);

            ret = receiver ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the transactionTable is initialized then sends email to single recepient otherwise send to all recepients of the transactions which are posted.
    /// </summary>
    /// <param name="_schedulerJobTable">
    /// The current instance of <c>RetailConnSchedulerJobTable</c> table.
    /// </param>
    public void run(RetailConnSchedulerJobTable _schedulerJobTable)
    {
        if (transactionTable)
            this.sendSingleReceipt(transactionTable);
        else
            this.sendAllReceipts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAllReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the email to the recepients of all the transactions which are posted and  emailSent status is 'NO'.
    /// </summary>
    /// <remarks>
    /// Calls the method <c>sendSingleReceipt</c> to send the emails.
    /// </remarks>
    void sendAllReceipts()
    {
        RetailTransactionTable localTransactionTable;

        real succededEmailSendings, failedEmailSendings = 0;

        while select forUpdate localTransactionTable
        where localTransactionTable.entryStatus == RetailEntryStatus::Posted
           && localTransactionTable.receiptEmail != ''
           && localTransactionTable.receiptEmailSent == NoYes::No
        {
            System.Exception exception;

            try
            {
                eventSource.WriteStartEmailReceiptSending(transactionTable.RecId);
                this.sendSingleReceipt(localTransactionTable);
                eventSource.WriteEmailReceiptSentSuccessfully(transactionTable.RecId);
                succededEmailSendings++;
            }
            catch (exception)
            {
                failedEmailSendings++;
                ttsbegin;
                localTransactionTable.receiptEmailSent = NoYes::Yes;
                localTransactionTable.update();
                ttscommit;
                warning(strFmt("@Retail:RetailEmailReceiptSendingFailedWarningMessage", transactionTable.receiptId));
                eventSource.WriteEmailReceiptSendingFailed(transactionTable.RecId, exception.StackTrace);
            }
        }

        // Check if the number of failed email receipts sendings is bigger than the specified threshold.
        // If so, then the job must be failed.
        real unsentEmailsThreshold = 0.8;
        boolean failJobOnThresholdReach;
        int emailsCount = succededEmailSendings + failedEmailSendings;

        if (emailsCount > 0)
        {
            failJobOnThresholdReach = (failedEmailSendings / emailsCount) > unsentEmailsThreshold;

            if (failJobOnThresholdReach)
            {
                error("@Retail:RetailEmailReceiptJobFailedWarningMessage");
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendSingleReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends email to the recepient of the transaction table passed as parameter.
    /// </summary>
    /// <param name="_transactionTable">
    /// The current instance of <c>RetailTransactionTable</c> table.
    /// </param>
    /// <remarks>
    /// Initializes and calls the methods of <c>PrintJobSettings</c> class to send the email.
    /// </remarks>
    void sendSingleReceipt(RetailTransactionTable  _transactionTable)
    {
        Args                            args = new Args();
        SRSPrintDestinationSettings     printJobSettings = new SRSPrintDestinationSettings();
        LanguageId                      languageId = (CustTable::find(_transactionTable.custAccount).languageId()) == '' ?
                                                        CompanyInfo::languageId() : CustTable::find(_transactionTable.custAccount).languageId();
        str                             mailSubject = (RetailParameters::find().receiptEmailSubject != '') ?
                                                        RetailParameters::find().receiptEmailSubject : "@RET4567";
        RetailTransactionsController    reportController;
        str                             specifiedAttachmentName;

        reportController = new RetailTransactionsController();
        args.record(_transactionTable);
        reportController.parmStatementArgs(args);
        reportController.parmReportName(ssrsReportStr(RetailTransactions, Report));
        printJobSettings.printMediumType(SRSPrintMediumType::Email);
        printJobSettings.emailAttachmentFileFormat(SRSReportFileFormat::PDF);
        specifiedAttachmentName = RetailParameters::find().receiptEmailFilename;
        if (specifiedAttachmentName != '')
        {   // Override the default file name for the attachment with the value specified in Retail parameters
            printJobSettings.parmFileName(specifiedAttachmentName);
        }
        printJobSettings.emailTo(_transactionTable.receiptEmail);
        printJobSettings.emailSubject(mailSubject);
        printJobSettings.parmEMailContract().parmBody(FormLetterRemarks::find(languageId, FormTextType::RBOReceipt).Txt);  // Uses attachment for receipt
        reportController.parmReportContract().parmPrintSettings(printJobSettings);
        reportController.parmReportContract().parmRdlContract().parmLanguageId(languageId);
        reportController.parmReportContract().parmRdlContract().parmLabelLanguageId(languageId);
        reportController.startOperation();

        if (reportController.parmReportContract().parmReportExecutionInfo().parmIsSuccessful())
        {
            ttsbegin;
            _transactionTable.receiptEmailSent = NoYes::Yes;
            _transactionTable.update();
            ttscommit;
        }
        else
        {
            throw error("@RET260986");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RetailEmailReceipt          emailReceipt = new RetailEmailReceipt();
        RetailConnSchedulerJobTable schedulerJobTable;

        emailReceipt.initFromArgs(args);
        emailReceipt.run(schedulerJobTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>