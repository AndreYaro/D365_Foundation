<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobSchedulerDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobSchedulerDelete</c> class removes a kanban job from the schedule.
/// </summary>
/// <remarks>
/// This class removes process jobs from the schedule. It does not handle transfer jobs.
/// </remarks>
public class KanbanJobSchedulerDelete extends KanbanJobScheduler
{
    KanbanJobUpdReset   kanbanJobUpdReset;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRemoveFromSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a record in the <c>KanbanJob</c> table can be removed from the schedule.
    /// </summary>
    /// <param name="_kanbanJobSchedule">
    ///    A <c>KanbanJobSchedule</c> record.
    /// </param>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban job can be removed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canRemoveFromSchedule(
        KanbanJobSchedule _kanbanJobSchedule,
        KanbanJob         _kanbanJob = kanbanJob)
    {
        return    _kanbanJob
               && _kanbanJobSchedule
               && _kanbanJob.ExpectedDateTime
               && _kanbanJob.Status < LeanKanbanJobStatus::InProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeKanbanJobFromSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a kanban job from the schedule and updates the schedule.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The job cannot be planned.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeKanbanJobFromSchedule()
    {
        if (!kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            throw error(strFmt("@SYS134380",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
        }

        ttsbegin;

        KanbanJobSchedule kanbanJobSchedule = KanbanJobSchedule::findJob(kanbanJob.RecId,true);

        if ((!KanbanJobDeferredSchedulingScope::shouldSkipPlanning()) && this.canRemoveFromSchedule(kanbanJobSchedule,kanbanJob))
        {
            if (this.lockWorkCell(kanbanJobSchedule.WorkCell))
            {
                // remove from schedule
                KanbanJobCapacitySum kanbanJobCapacitySum = KanbanJobCapacitySum::findJob(kanbanJob.RecId);
                KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySum,kanbanJobSchedule,false);
                KanbanJobCapacitySum::removeCapacityConsumption(kanbanJob.RecId);
                kanbanJobSchedule.delete();

                // update job
                KanbanJob::setCapacityConsumption(kanbanJob.RecId);

                // update later jobs in same schedule
                KanbanJobSchedule nextKanbanJobSchedule = kanbanJobSchedule.nextKanbanJobSchedule();
                if (nextKanbanJobSchedule)
                {
                    KanbanJobSchedulerMove::newStandard(KanbanJob::find(nextKanbanJobSchedule.Job),
                                                        nextKanbanJobSchedule,
                                                        this.rootKanbanJobScheduler()).run();
                }

                // update next transfer jobs
                this.resetNextJobExpectedDateTime();

                // release lock
                this.releaseLockWorkCell(kanbanJobSchedule.WorkCell);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNextJobExpectedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the <c>ExpectedDateTime</c> field of the next kanban job given that the next jobs are not
    /// planned individually.
    /// </summary>
    /// <remarks>
    /// The next jobs are not planned if they are transfer jobs.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void resetNextJobExpectedDateTime()
    {
        ttsbegin;
        KanbanJobExpectedDateTime expectedDateTime = kanbanJob.ExpectedDateTime;
        KanbanJob nextKanbanJob = kanbanJob.nextJob(true);

        while (    nextKanbanJob
               && !nextKanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            nextKanbanJob.ExpectedDateTime = nextKanbanJob.DueDateTime;
            nextKanbanJob.update();

            nextKanbanJob = nextKanbanJob.nextJob(true);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the scheduling action.
    /// </summary>
    protected void runScheduler()
    {
        this.removeKanbanJobFromSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the schedule date.
    /// </summary>
    /// <returns>
    /// The schedule date.
    /// </returns>
    protected TransDateTime scheduleDateTime()
    {
        if (!scheduleDateTime)
        {
            scheduleDateTime = kanbanJob.ExpectedDateTime;
        }

        return scheduleDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobScheduler construct()
    {
        return new KanbanJobSchedulerDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobSchedulerDelete</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A <c>KanbanJob</c> record that is used to initialize the instance.
    /// </param>
    /// <param name="_rootKanbanJobScheduler">
    /// A <c>KanbanJobScheduler</c> object that is used to initialize the instance; optional.
    /// </param>
    /// <param name="_lockOwnerKanbanJobScheduler">
    /// A related <c>KanbanJobScheduler</c> object that is used for locking work cells; optional.
    /// </param>
    /// <returns>
    /// A new <c>KanbanJobSchedulerDelete</c> object.
    /// </returns>
    /// <remarks>
    /// All planning must be initiated from the <c>KanbanJobUpd</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobScheduler newStandard(
        KanbanJob          _kanbanJob,
        KanbanJobScheduler _rootKanbanJobScheduler      = null,
        KanbanJobScheduler _lockOwnerKanbanJobScheduler = _rootKanbanJobScheduler)
    {
        KanbanJobSchedulerDelete  kanbanJobSchedulerDelete = KanbanJobSchedulerDelete::construct();

        kanbanJobSchedulerDelete.parmKanbanJob(_kanbanJob);
        kanbanJobSchedulerDelete.parmRootKanbanJobScheduler(_rootKanbanJobScheduler);
        kanbanJobSchedulerDelete.parmLockOwnerKanbanJobScheduler(_lockOwnerKanbanJobScheduler);

        return kanbanJobSchedulerDelete;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
