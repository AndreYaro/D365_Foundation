<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099BRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Always a child of an A-Record, contains payment information given by the payer. This includes information about the payer, payee, and the amounts and categories paid
/// </summary>
public class Tax1099BRecord extends Tax1099ElectronicBodyRecord
{
    private const Tax1099ERecordType recordType_B = 'B'; /* Payee */
    Tax1099FileIndicator fileIndicator;
    Tax1099AmountCollection localAmounts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new B-Record with given information
    /// </summary>
    /// <param name = "_fileIndicator"> Enum identifies whether file is a correction or not </param>
    /// <param name = "_currentType"> The current type of 1099 being dealt with </param>
    /// <returns>A Tax1099BRecord</returns>
    public static Tax1099BRecord construct(Tax1099FileIndicator _fileIndicator, Tax1099Type _currentType)
    {
        return new Tax1099BRecord(_fileIndicator, _currentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Tax1099FileIndicator _fileIndicator, Tax1099Type _currentType)
    {
        super(_currentType);

        this.parmStartIndexForAmounts(55);
        this.parmLengthOfAmounts(12);

        fileIndicator = _fileIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manually gets or sets the amount collection for this B-Record.
    /// </summary>
    /// <param name = "_collection">The Tax1099AmountCollection this B-Record should use</param>
    /// <returns>The Tax1099AmountCollection used by this B-Record</returns>
    public Tax1099AmountCollection parmAmounts(Tax1099AmountCollection _collection = localAmounts)
    {
        localAmounts = _collection;
        return localAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the B-Record for use in electronic 1099 file
    /// </summary>
    /// <param name = "_realSequenceNumber"> The line in which this record will appear in the file </param>
    /// <param name = "_calendarYear"> The calendar year to which this file will belong </param>
    /// <param name = "_isCombinedFiling"> Whether combined State/Federal filing is to be used for this file </param>
    /// <param name = "_localIRSPayerRec"> Table buffer containing transaction information (Optional argument) </param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string </returns>
    public Tax1099ERecord generateRecord(real _realSequenceNumber, Tax1099CalendarYear _calendarYear, boolean _isCombinedFiling, Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        this.fillOutputRecord();

        // Record Type: Required. Enter B. Field Position: 1
        this.strInsert(recordType_B, 1);

        // Payment Year: Required. Enter 2004. Field Position: 2-5
        this.strInsert(_calendarYear, 2);

        // Corrected Return Indicator. Field Position: 6
        if (fileIndicator == Tax1099FileIndicator::Correction)
        {
            this.strInsert('G', 6);
        }

        // Name Control: Field Position: 7-10
        this.strInsert(_localIRSPayerRec.NameControl, 7);

        // Type of TIN: Field Position: 11
        this.strInsert(_localIRSPayerRec.TypeOfTIN, 11);

        // Payee's TIN: Required. Field Position: 12-20
        this.strInsert(this.formatNumericOnly(_localIRSPayerRec.Tax1099RegNum), 12);

        // Payer's Account Number For Payee: Required. Field Position: 21-40
        this.strInsert(_localIRSPayerRec.AcctNumForPayee, 21);

        // Payer's Office Code. Field Position: 41-44
        this.strInsert(_localIRSPayerRec.OfficeCode, 41);

        // Blank. Field Position: 45-54

        // If this B-Record instance has its own Tax1099AmountCollection, use the amounts from that. If not, use the amounts from the given Tax1099IRSPayerRec
        // Field Position: 55-270
        Tax1099AmountCollection amounts = localAmounts == null ? Tax1099AmountCollection::construct(_localIRSPayerRec) : localAmounts;
        container gatheredAmounts = amounts.getAmounts();

        int startIndex;
        for (int i = 1; i <= conLen(gatheredAmounts); i++)
        {
            startIndex = startIndexForAmounts + (lengthOfAmounts * (i - 1));
            this.strInsert(this.formatIRSAmount(conPeek(gatheredAmounts, i), lengthOfAmounts), startIndex);
        }

        // Blank. Field Position: 271-286

        // Foreign Country or Region Indicator. Field Position: 287
        this.strInsert(_localIRSPayerRec.ForeignCountryRegionInd, 287);

        VendTable vendTable;
        select Tax1099NameChoice from vendTable where vendTable.AccountNum == _localIRSPayerRec.AcctNumForPayee;

        if (vendTable.Tax1099NameChoice == Tax1099NameChoice::DBA)
        {
            // Display DBA Name
            this.strInsert(_localIRSPayerRec.SecondPayeeName, 288);
        }

        else
        {
            // First Payee Name Line. Field Position: 288-327
            this.strInsert(_localIRSPayerRec.PayeeNameLine, 288);

            // Second Payee Name Line. Field Position: 328-367
            this.strInsert(_localIRSPayerRec.SecondPayeeName, 328);
        }

        // Payee Mailing Address. Field Position: 368-407
        this.strInsert(this.formatStreet(_localIRSPayerRec.MailingAddress), 368);

        // Blank. Field Position: 408-447

        // Payee City. Field Position: 448-487
        this.strInsert(_localIRSPayerRec.City, 448);

        // Payee State. Field Position: 488-489
        this.strInsert(_localIRSPayerRec.State, 488);

        // Payee Zip Code. Field Position: 490-498
        this.strInsert(_localIRSPayerRec.ZipCode, 490); // vendTable.zipCode

        // Blank. Field Position: 499

        // Record Sequence Number. Field Position: 500-507
        this.strInsert(num2Str0(_realSequenceNumber, 8, 0, 0, 0), 500);

        // Blank.  Field Position: 508-543

        // ------------[ 1099 specific information ]-------------
        Tax1099IForm tax1099Form = Tax1099Base::createTax1099IForm(currentTax1099Type);
        output = tax1099Form.outputPartialBRecord(output, _localIRSPayerRec);

        //Combined Federal/State Code: Field Position: 747-748 (only if set to perform combined filing)
        if (_isCombinedFiling && currentTax1099Type != Tax1099Type::F1099S)
        {
            var matchingStateInCFSFTable = Tax1099CF_SFParticipatingStateCodes::findByStateAbbreviation(_localIRSPayerRec.Tax1099StateTaxID);
            var combinedCode =
                matchingStateInCFSFTable && matchingStateInCFSFTable.IsCombinedFiling == NoYes::Yes ? this.formatIRSStateCode(matchingStateInCFSFTable.StateTaxCode) : '';

            this.strInsert(combinedCode, 747);
        }

        // Blank.  Field Position: 749-750 - (CR/LF)

        return output;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>