<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class MarkupPeriodChargeCalculateService extends SysOperationServiceBase
{   
    #OCCRetryCount

    private MarkupInstrumentationLogger instrumentationLogger;

    private MarkupPeriodChargeCalculateServiceContract contract;
    private MarkupPeriodChargeCalculateInvoiceDateFrom fromDate;
    private MarkupPeriodChargeCalculateInvoiceDateTo toDate;

    private Map custInvoiceTableMap;
    protected SysGuid currentExecutionId;
    
    private MarkupPeriodChargeCalculateServiceBundleId bundleIds [];

    private Map bundleIdnvoiceLineCountMap;

    // Number of not empty tasks that need to be created
    private MarkupPeriodChargeBatchHelpers numberOfThreads;
    private MarkupPeriodChargeBatchHelpers batchHelpers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processOperation(MarkupPeriodChargeCalculateServiceContract _contract)
    {
        contract = _contract;

        this.initializeExecutionId();
        this.calculateDateRange();
        
        numberOfThreads = max(1, SalesParameters::find().MarkupPeriodChargeBatchHelpers);

        if (this.isExecutingInBatch() 
            && !_contract.parmBundleId()
            && !_contract.parmInvoiceAccount()
            && numberOfThreads > 1)
        {
            using (var activityContext = this.instrumentationLogger().periodChargeRuleActivities().processOperationActivity(numberOfThreads))
            {
                using (var lock = ReqReaderWriterLock::construct())
                {
                    if (!_contract.parmBundleId() && !lock.tryEnterWriterLock(classStr(MarkupPeriodChargeCalculateService)))
                    {
                        throw error("@SCM:MarkupPeriodChargeCalculateServiceLockError");
                    }

                    this.startChildThreads(_contract, activityContext);
                    lock.releaseAllLocks();
                }
            }
        }
        else
        {
            this.runPeriodChargeCalculate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPeriodChargeCalculate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void runPeriodChargeCalculate()
    {
        this.processPeriodChargeRules();
        this.createInvoices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeExecutionId()
    {
        currentExecutionId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDateRange</Name>
				<Source><![CDATA[
    private void calculateDateRange()
    {
        if (contract.parmMaxInvoiceAge())
        {
            toDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
            fromDate = toDate - contract.parmMaxInvoiceAge() + 1;
        }
        else
        {
            fromDate = contract.parmInvoiceDateFrom();
            toDate = contract.parmInvoiceDateTo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPeriodChargeRules</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processPeriodChargeRules()
    {
        try
        {
            custInvoiceTableMap = null;
            
			MarkupPeriodChargeCalculateInvoiceDateFrom dateRangeFromDate = fromDate;
				
			while (dateRangeFromDate <= toDate)
			{
			    this.processDateRangePeriodChargeRules(dateRangeFromDate);
				dateRangeFromDate += contract.parmDaysPerInvoice();
			}
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.preExceptionRelationshipDataCleanup();
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.preExceptionRelationshipDataCleanup();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.preExceptionRelationshipDataCleanup();
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.preExceptionRelationshipDataCleanup();
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.preExceptionRelationshipDataCleanup();
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.preExceptionRelationshipDataCleanup();
                throw Exception::TransientSqlConnectionError;
            }
            else
            {
                retry;
            }
        }
        catch
        {
            this.preExceptionRelationshipDataCleanup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDateRangePeriodChargeRules</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processDateRangePeriodChargeRules(MarkupPeriodChargeCalculateInvoiceDateFrom _dateRangeFromDate)
    {
        MarkupPeriodChargeRule periodChargeRule;
        MarkupPeriodChargeCalculateExecutionItem periodChargeCalculateExecutionItem;

        MarkupPeriodChargeCalculateInvoiceDateTo dateRangeToDate = _dateRangeFromDate + contract.parmDaysPerInvoice() - 1;

        if (contract.parmPeriodChargeRuleName())
        {
            periodChargeRule = MarkupPeriodChargeRule::find(contract.parmPeriodChargeRuleName());
            this.processPeriodChargeRule(periodChargeRule, _dateRangeFromDate, dateRangeToDate);
        }
        else if (contract.parmBundleId())
        {
            while select validTimeState(_dateRangeFromDate, dateRangeToDate) RecId, AccountCode, AccountRelation, InventSiteId, InventLocationId from periodChargeRule
                order by periodChargeRule.AccountCode, periodChargeRule.AccountRelation, periodChargeRule.InventSiteId desc, periodChargeRule.InventLocationId desc
                    exists join periodChargeCalculateExecutionItem
                        where periodChargeRule.AccountCode == TableAll::All
                            || (periodChargeRule.AccountCode == TableAll::Table
                                && periodChargeRule.AccountRelation == periodChargeCalculateExecutionItem.InvoiceAccount
                                && periodChargeCalculateExecutionItem.BundleId == contract.parmBundleId())
            {
                this.processPeriodChargeRule(periodChargeRule, _dateRangeFromDate, dateRangeToDate);
            }
        }
        else
        {
            while select validTimeState(_dateRangeFromDate, dateRangeToDate) RecId from  periodChargeRule
                order by AccountCode, AccountRelation, InventSiteId desc, InventLocationId desc
                    where !contract.parmInvoiceAccount()
                        || periodChargeRule.AccountCode == TableAll::All
                        || (periodChargeRule.AccountCode == TableAll::Table
                            && periodChargeRule.AccountRelation == contract.parmInvoiceAccount())
            {
                this.processPeriodChargeRule(periodChargeRule, _dateRangeFromDate, dateRangeToDate);
            }
        } 
	}

]]></Source>
			</Method>
			<Method>
				<Name>processPeriodChargeRule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processPeriodChargeRule(MarkupPeriodChargeRule _periodChargeRule, MarkupPeriodChargeCalculateInvoiceDateFrom _fromDate, MarkupPeriodChargeCalculateInvoiceDateTo _toDate)
    {
        MarkupPeriodChargeRuleLine periodChargeRuleLine;
        
        while select periodChargeRuleLine
            where periodChargeRuleLine.PeriodChargeRule == _periodChargeRule.RecId
        {
            this.processPeriodChargeRuleLine(periodChargeRuleLine, _fromDate, _toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPeriodChargeRuleLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processPeriodChargeRuleLine(MarkupPeriodChargeRuleLine _periodChargeRuleLine, MarkupPeriodChargeCalculateInvoiceDateFrom _fromDate, MarkupPeriodChargeCalculateInvoiceDateTo _toDate)
    {
        MarkupPeriodChargeCalculate periodChargeCalculate = MarkupPeriodChargeCalculate::construct(_periodChargeRuleLine);
        
        periodChargeCalculate.parmFromDate(_fromDate);
        periodChargeCalculate.parmToDate(_toDate);
        periodChargeCalculate.parmDaysPerInvoice(contract.parmDaysPerInvoice());
        periodChargeCalculate.parmCustInvoiceTableMap(custInvoiceTableMap);

        if (contract.parmInvoiceAccount())
        {
            periodChargeCalculate.parmInvoiceAccount(contract.parmInvoiceAccount());
        }
        periodChargeCalculate.parmExecutionId(currentExecutionId);
        periodChargeCalculate.parmBundleId(contract.parmBundleId());
        periodChargeCalculate.run();

        custInvoiceTableMap = periodChargeCalculate.parmCustInvoiceTableMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoices</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createInvoices()
    {
        if (custInvoiceTableMap && !custInvoiceTableMap.empty())
        {
            MapEnumerator invoiceHeaderMapEnumerator = custInvoiceTableMap.getEnumerator();
            while (invoiceHeaderMapEnumerator.moveNext())
            {
                
                this.createInvoice(invoiceHeaderMapEnumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoice</Name>
				<Source><![CDATA[
    private void createInvoice(List _custInvoiceLinesList)
    {
        try
        {
            ttsbegin;

            MarkupPeriodChargeFreeTextInvoiceCreate::createFreeTextInvoice(_custInvoiceLinesList);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
                throw Exception::TransientSqlConnectionError;
            }
            else
            {
                retry;
            }
        }
        catch
        {
            this.preExceptionRelationshipDataCleanup(_custInvoiceLinesList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preExceptionRelationshipDataCleanup</Name>
				<Source><![CDATA[
    private void preExceptionRelationshipDataCleanup(List _custInvoiceLinesList = null)
    {
        try
        {
            if (_custInvoiceLinesList)
            {
                this.preExceptionRelationshipDataCleanupForInvoice(_custInvoiceLinesList);
            }
            else
            {
                this.preExceptionRelationshipDataCleanupForExecution();
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::TransientSqlConnectionError;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preExceptionRelationshipDataCleanupForExecution</Name>
				<Source><![CDATA[
    private void preExceptionRelationshipDataCleanupForExecution()
    {
        MarkupPeriodChargeInvoiceLineBaseRelationship invoiceLineBaseRelationship;

        ttsbegin;

        delete_from invoiceLineBaseRelationship
        where invoiceLineBaseRelationship.ExecutionId == currentExecutionId;

        ttscommit;
        
        error("@SCM:MarkupPeriodChargeRuleProcessingError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preExceptionRelationshipDataCleanupForInvoice</Name>
				<Source><![CDATA[
    private void preExceptionRelationshipDataCleanupForInvoice(List _custInvoiceLinesList)
    {
        MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters;
        ListEnumerator custInvoiceLinesListEnumerator = _custInvoiceLinesList.getEnumerator();
        
        ttsbegin;

        while (custInvoiceLinesListEnumerator.moveNext())
        {
            invoiceCreationParameters = custInvoiceLinesListEnumerator.current();
            MarkupPeriodChargeFreeTextInvoiceCreate::deleteInvoiceLineBaseRelationship(invoiceCreationParameters.parmInvoiceLineBaseSet(), currentExecutionId);
        }

        ttscommit;

        if (invoiceCreationParameters)
        {
            // Expected to be the same for all invoiceCreationParameters in the list - same invoice.
            error(strFmt("@SCM:MarkupPeriodChargeFreeTextInvoiceCreationError", invoiceCreationParameters.parmInvoiceAccount(), invoiceCreationParameters.parmCurrency()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startChildThreads</Name>
				<Source><![CDATA[
    private void startChildThreads(MarkupPeriodChargeCalculateServiceContract _contract, SysInstrumentationActivityContext _activityContext)
    {
        this.setBundleIds();
        this.insertRecordsIntoExecutionList(_contract, _activityContext);
        this.registerChildTreads(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleIds</Name>
				<Source><![CDATA[
    private void setBundleIds()
    {
        for (var i = 1; i <= numberOfThreads; i++)
        {
            bundleIds[i] = System.Guid::NewGuid();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsIntoExecutionList</Name>
				<Source><![CDATA[
    private void insertRecordsIntoExecutionList(MarkupPeriodChargeCalculateServiceContract _contract, SysInstrumentationActivityContext _activityContext)
    {
        bundleIdnvoiceLineCountMap = new Map(Types::Guid, Types::Integer);

        ttsbegin;
        this.generatePeriodChargeExecutionItems(_contract);
        this.updateBundleIds(_activityContext);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePeriodChargeExecutionItems</Name>
				<Source><![CDATA[
    private void generatePeriodChargeExecutionItems(MarkupPeriodChargeCalculateServiceContract _contract)
    {
        MarkupPeriodChargeCalculateExecutionItem markupPeriodChargeCalculateExecutionItem, notExistsMarkupPeriodChargeCalculateExecutionItem;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;

        insert_recordset markupPeriodChargeCalculateExecutionItem (InvoiceAccount, BatchExecutionId, CustInvoiceTransRecIdCount)
            select InvoiceAccount, currentExecutionId from custInvoiceJour
                where custInvoiceJour.InvoiceDate >= _contract.parmInvoiceDateFrom()
                    && custInvoiceJour.InvoiceDate <= _contract.parmInvoiceDateTo()
                join count(RecId) from custInvoiceTrans
                    group by custInvoiceJour.InvoiceAccount
                        where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
                            && custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                            && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                            && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                notexists join notExistsMarkupPeriodChargeCalculateExecutionItem
                    where notExistsMarkupPeriodChargeCalculateExecutionItem.InvoiceAccount == custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBundleIds</Name>
				<Source><![CDATA[
    private void updateBundleIds(SysInstrumentationActivityContext _activityContext)
    {
        MarkupPeriodChargeCalculateExecutionItem markupPeriodChargeCalculateExecutionItem;
        MarkupPeriodChargeCustInvoiceTransRecIdCount totalCustInvoiceLineCount = 0;

        // Update the table ordered by numbers of invoice lines per customer
        while select forupdate * from markupPeriodChargeCalculateExecutionItem
            order by CustInvoiceTransRecIdCount desc
                where markupPeriodChargeCalculateExecutionItem.BatchExecutionId == currentExecutionId
        {
            totalCustInvoiceLineCount += markupPeriodChargeCalculateExecutionItem.CustInvoiceTransRecIdCount;
            markupPeriodChargeCalculateExecutionItem.BundleId = this.getBundleIdWithMinimumInvoiceLineCount(markupPeriodChargeCalculateExecutionItem.CustInvoiceTransRecIdCount);
            markupPeriodChargeCalculateExecutionItem.update();
        }

        this.instrumentationLogger().periodChargeRuleActivities().logCustInvoiceTransRecIdCount(_activityContext, totalCustInvoiceLineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBundleIdWithMinimumInvoiceLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the thread with minimum line count.
    /// </summary>
    /// <param name = "_invoiceLineCount"> Count of invoice lines for the customer.</param>
    /// <returns></returns>
    private guid getBundleIdWithMinimumInvoiceLineCount(MarkupPeriodChargeCustInvoiceTransRecIdCount _invoiceLineCount)
    {
        int minInvoiceLineCount = 0;
        MarkupPeriodChargeCalculateServiceBundleId bundleID;

        for (var i = 1; i <= numberOfThreads; i++)
        {
            if (bundleIdnvoiceLineCountMap.exists(bundleIds[i]))
            {
                int bundleIdLineQuantity = bundleIdnvoiceLineCountMap.lookup(bundleIds[i]);

                // Find thread with minimum line count
                if (minInvoiceLineCount == 0 || bundleIdLineQuantity <= minInvoiceLineCount)
                { 
                    minInvoiceLineCount = bundleIdLineQuantity;
                    bundleID = bundleIds[i];
                }
            }
            else
            {
                // Add map element
                bundleID = bundleIds[i];
                minInvoiceLineCount = 0;

                batchHelpers = i;
                break;
            }
        }

        bundleIdnvoiceLineCountMap.add(bundleID, minInvoiceLineCount + _invoiceLineCount);

        return bundleID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerChildTreads</Name>
				<Source><![CDATA[
    private void registerChildTreads(MarkupPeriodChargeCalculateServiceContract _contract)
    {
        if (!bundleIdnvoiceLineCountMap.empty())
        {
            BatchHeader batchHeader = this.getCurrentBatchHeader();

            // Add cleanup batch task
            SysOperationServiceController cleanupExecutionListController = new SysOperationServiceController(classStr(MarkupPeriodChargeCleanupService),
                                                                                                            methodStr(MarkupPeriodChargeCleanupService, processOperation));
            MarkupPeriodChargeCleanupContract periodChargeCleanupContract = cleanupExecutionListController.getDataContractObject();
            periodChargeCleanupContract.parmBatchExecutionId(currentExecutionId);
            batchHeader.addRuntimeTask(cleanupExecutionListController, this.getCurrentBatchTask().RecId);
        
            for (int i = 1; i <= batchHelpers; i++)
            {
                SysOperationServiceController periodChargeCalculateServiceController = new SysOperationServiceController(classStr(MarkupPeriodChargeCalculateService), 
                                                                                                                        methodStr(MarkupPeriodChargeCalculateService, processOperation));
                MarkupPeriodChargeCalculateServiceContract periodChargeCalculateServiceContract = periodChargeCalculateServiceController.getDataContractObject();

                periodChargeCalculateServiceContract.unpack(_contract.pack());
                periodChargeCalculateServiceContract.parmBundleId(bundleIds[i]);

                batchHeader.addRuntimeTask(periodChargeCalculateServiceController, this.getCurrentBatchTask().RecId);

                // Add dependency for cleanup batch task
                batchHeader.addDependency(cleanupExecutionListController, periodChargeCalculateServiceController, BatchDependencyStatus::FinishedOrError);
            }

            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MarkupInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>