<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsSpaceUtilPlanForecastProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WMSSpaceUtilPlanForecastProvider</c> class encapsulates logic for handling
///     forecast records.
/// </summary>
public class wmsSpaceUtilPlanForecastProvider
{
    WMSSpaceUtilInconsistencyLogger inconsistencyLogger;
    WMSSpaceUtilSetupOptions        setupOptions;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildBacklogQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve backlog records for master plan.
    /// </summary>
    /// <returns>
    /// An query that contains backlog records for the master plan.
    /// </returns>
    protected Query buildBacklogQuery()
    {
        QueryBuildDataSource    reqTransDatasource;
        QueryBuildDataSource    inventDimDataSource;
        Query                   query = new Query();
        ListEnumerator          productDimFields    = InventDim::dimProductDimFieldList().getEnumerator();

        reqTransDatasource = query.addDataSource(tableNum(ReqTrans));
        inventDimDataSource = reqTransDatasource.addDataSource(tableNum(InventDim));
        inventDimDataSource.relations(true);

        reqTransDatasource.addRange(fieldNum(ReqTrans, PlanVersion)).value(queryValue(this.getCurrentReqPlan()));
        reqTransDatasource.addRange(fieldNum(ReqTrans, ReqDate)).value(queryRange(dateNull(), setupOptions.parmFromDate()));

        reqTransDatasource.addGroupByField(fieldNum(ReqTrans, ItemId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventSiteId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventLocationId));
        while (productDimFields.moveNext())
        {
            inventDimDataSource.addGroupByField(productDimFields.current());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query to retrieve item combinations in the expected master plan records.
    /// </summary>
    /// <returns>
    /// A query to retrieve item combinations in the expected master plan records.
    /// </returns>
    protected Query buildQuery()
    {
        QueryBuildDataSource            reqTransDatasource;
        QueryBuildDataSource            inventDimDataSource;
        Query                           query = new Query();
        ListEnumerator                  productDimFields    = InventDim::dimProductDimFieldList().getEnumerator();

        reqTransDatasource = query.addDataSource(tableNum(ReqTrans));
        inventDimDataSource = reqTransDatasource.addDataSource(tableNum(InventDim));
        inventDimDataSource.relations(true);

        reqTransDatasource.addRange(fieldNum(ReqTrans, PlanVersion)).value(queryValue(this.getCurrentReqPlan()));
        reqTransDatasource.addRange(fieldNum(ReqTrans, ReqDate)).value(queryRange(setupOptions.parmFromDate(), setupOptions.parmToDate()));

        reqTransDatasource.addGroupByField(fieldNum(ReqTrans, ItemId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventSiteId));
        inventDimDataSource.addGroupByField(fieldNum(InventDim, InventLocationId));
        while (productDimFields.moveNext())
        {
            inventDimDataSource.addGroupByField(productDimFields.current());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSSpaceUtilizationRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates space utilization run parameters table with the master plan data.
    /// </summary>
    /// <param name="_reqPlanId">
    ///     A specified <c>ReqPlanId</c> master plan value.
    /// </param>
    protected void createWMSSpaceUtilizationRun(ReqPlanId _reqPlanId)
    {
        ReqLog                  reqLog;
        WMSSpaceUtilizationRun  spaceUtilizationRun;
        RefRecId                reportSetup = setupOptions.parmReportSetupRecId();

        ttsbegin;

        delete_from spaceUtilizationRun
            where spaceUtilizationRun.wmsReportSetup == reportSetup;

        if (_reqPlanId)
        {
            select firstonly EndDateTime from reqLog
                order by EndDateTime desc
                    where reqLog.ReqPlanId == _reqPlanId;

            spaceUtilizationRun.PlanId = _reqPlanId;
            spaceUtilizationRun.LastRun = reqLog.EndDateTime;
            spaceUtilizationRun.wmsReportSetup = reportSetup;
            spaceUtilizationRun.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingPlannedForecastData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all planned forecast data for the storage load units
    /// </summary>
    protected void deleteExistingPlannedForecastData()
    {
        WMSSpaceUtilPlanForecast    planForecast;
        WMSStorageLoadUnitReqTrans  storageLoadUnitReqTrans;
        WMSStorageLoadUnit          storageLoadUnit;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        delete_from planForecast
            where planForecast.wmsReportSetup == reportSetup;

        delete_from storageLoadUnitReqTrans
            exists join storageLoadUnit
                where storageLoadUnit.RecId             == storageLoadUnitReqTrans.wmsStorageLoadUnit
                      && storageLoadUnit.wmsReportSetup == reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentReqPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current master plan version
    /// </summary>
    /// <returns>
    ///     A reference to the master plan version.
    /// </returns>
    protected RefRecId getCurrentReqPlan()
    {
        return ReqPlan::findReqPlanId(setupOptions.parmReqPlanId()).findActiveVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInconsistencyLogger</Name>
				<Source><![CDATA[
        public WMSSpaceUtilInconsistencyLogger parmInconsistencyLogger(WMSSpaceUtilInconsistencyLogger _inconsistencyLogger = inconsistencyLogger)
    {
        inconsistencyLogger = _inconsistencyLogger;

        return inconsistencyLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupOptions</Name>
				<Source><![CDATA[
        public WMSSpaceUtilSetupOptions parmSetupOptions(WMSSpaceUtilSetupOptions _setupOptions = setupOptions)
    {
        setupOptions = _setupOptions;

        return setupOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the forecast execution for the given query.
    /// </summary>
    /// <param name="_processor">
    /// An instance of <c>WMSSpaceUtilProcessor</c> class.
    /// </param>
    /// <param name="_query">
    /// A specified query with the master plan transactions.
    /// </param>
    protected void processForecast(WMSSpaceUtilProcessor _processor, Query _query)
    {
        _processor.parmInconsistencyLogger(inconsistencyLogger);
        _processor.parmSetupOptions(setupOptions);
        _processor.processForecast(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPlannedForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a planned forecast.
    /// </summary>
    public void processPlannedForecast()
    {
        ttsBegin;

        this.deleteExistingPlannedForecastData();

        inconsistencyLogger.deleteExistingLog();

        this.createWMSSpaceUtilizationRun(setupOptions.parmReqPlanId());

        // process planned forecasts
        this.processForecast(WMSSpaceUtilProcessorPlannedForecast::construct(), this.buildQuery());

        // process backlog transactions
        this.processForecast(WMSSpaceUtilProcessorBacklog::construct(), this.buildBacklogQuery());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSSpaceUtilPlanForecastProvider construct()
    {
        return new WMSSpaceUtilPlanForecastProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>