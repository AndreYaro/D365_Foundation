<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EeAccessLogDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Data provider for the <c>EeAccessLog</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(EeAccessLog)),
    SRSReportParameterAttribute(classstr(EeAccessLogContract))
]
class EeAccessLogDP extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'EE-00012';

    EeAccessLogTmp              accessLogTmp;
    EeAccessLogSysDatabaseTmp   accessLogSysDatabaseTmp;
    int                         currentSessionId;
    int                         tmpSessionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearTemporaryJoinData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the data associated with this session from the <c>AccessLogSysDatabaseTmp</c> table.
    /// </summary>
    /// <param name="_sessionId">
    /// The session id to clean out data for.
    /// </param>
    /// <remarks>
    /// AccessLogSysDatabaseTmp is not a true temp file so we need to explicitly remove the temporary
    /// data associated with the current session.
    /// </remarks>
    private void clearTemporaryJoinData(int _sessionId)
    {
        delete_from accessLogSysDatabaseTmp
            where accessLogSysDatabaseTmp.UserSessionId == _sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataFromReadDatabaseLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate report data based on provided <c>EeReadDataBaseLog</c> table record.
    /// </summary>
    /// <param name="_readDatabaseLog">
    /// Source record from <c>EeReadDataBaseLog</c> table from which to generate report data.
    /// </param>
    private void generateDataFromReadDatabaseLog(EeReadDataBaseLog _readDatabaseLog)
    {
        List            dataList;
        ListEnumerator  dataListEnumerator;
        FieldId         fieldId;
        container       con;

        accessLogTmp.clear();
        accessLogTmp.DateTime = _readDatabaseLog.CreatedDateTime;
        accessLogTmp.TableName = _readDatabaseLog.tableName();
        accessLogTmp.AccessedByUser = _readDatabaseLog.createdBy;
        accessLogTmp.ActionString = "@SYS11559";    // only "Read" actions are logged in the EeReadDatabaseLog table
        accessLogTmp.PreviousValue = '';            // only reads are logged so there is no change in the value

        // the data blob from the log may contain multiple fields, create a report entry for each field
        dataList = _readDatabaseLog.LogMap::getDataAsList();
        dataListEnumerator = dataList.getEnumerator();
        while (dataListEnumerator.moveNext())
        {
            con = dataListEnumerator.current();
            fieldId = conpeek(con, 1);
            accessLogTmp.FieldName = fieldid2pname(_readDatabaseLog.RefTableId, fieldId);
            accessLogTmp.NewValue = con2Str(conPeek(con, 2));

            accessLogTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataFromSysDatabaseLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate report data based on provided <c>SysDataBaseLog</c> table record.
    /// </summary>
    /// <param name="_sysDatabaseLog">
    /// Source record from <c>SysDataBaseLog</c> table from which to generate report data.
    /// </param>
    private void generateDataFromSysDatabaseLog(SysDataBaseLog _sysDatabaseLog)
    {
        List            dataList;
        ListEnumerator  dataListEnumerator;
        FieldId         fieldId;
        container       con;

        accessLogTmp.clear();
        accessLogTmp.DateTime = _sysDatabaseLog.createdDateTime;
        accessLogTmp.TableName = _sysDatabaseLog.tableName();
        accessLogTmp.AccessedByUser = _sysDatabaseLog.createdBy;
        accessLogTmp.ActionString = enum2str(_sysDatabaseLog.LogType);

        // the data blob from the log may contain multiple fields, create report entry for each field
        dataList = _sysDatabaseLog.getDataAslist();
        dataListEnumerator = dataList.getEnumerator();
        while (dataListEnumerator.moveNext())
        {
            con = dataListEnumerator.current();
            fieldId = conpeek(con, 1);
            accessLogTmp.FieldName = fieldid2pname(_sysDatabaseLog.table, fieldId);
            accessLogTmp.NewValue = _sysDatabaseLog.contents2Str(conPeek(con, 2), fieldId);
            accessLogTmp.PreviousValue = _sysDatabaseLog.contents2Str(conPeek(con, 3), fieldId);

            accessLogTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTemporaryJoinData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assembles a set of Table/Rec id values which identify the personal data associated with a <c>DirPerson</c>.
    /// </summary>
    /// <param name="_personId">
    /// The surrogate key value of the <c>DirPerson</c> for which to identify personal data.
    /// </param>
    /// <remarks>
    /// We need to identify which <c>SysDatabaseLog</c> records exist for a specific <c>DirPerson</c>. This method leverages the
    /// <c>EePersonalDataPerUser</c> query to identify the existing set of personal data records and the <c>EeReadDatabaseLog</c> records
    /// for the specific <c>DirPerson</c> to ensure that previously deleted personal data records are also identified.
    /// The resulting <c>AccessLogSysDatabaseTmp</c> records will later be joined to the <c>SysDatabaseLog</c> table to retrieve only the
    /// log records of interest.
    /// </remarks>
    private void generateTemporaryJoinData(DirPersonRecId _personId)
    {
        Query                       query = new Query(queryStr(EePersonalDataPerUser));
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             queryBuildRange;
        QueryRun                    queryRun;
        int                         i;
        EeAccessLogSysDatabaseTmp   tmp;
        EeReadDataBaseLog           readDatabaseLog;

        this.clearTemporaryJoinData(currentSessionId);
        this.clearTemporaryJoinData(tmpSessionId);

        // some tables involved may contain date effective data, set the valid date and datetime ranges for the query
        // to include all data records, not just the "current" date effective records
        query.validTimeStateDateRange(dateNull(), maxDate());
        query.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());

        // add a range to the query to include only data associated with the selected Person
        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(DirPerson));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(DirPerson, RecId));
        queryBuildRange.value(SysQuery::value(_personId));

        // process the query results to identify the existing personal data records for the selected person
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            // the joins in the query are set with Fetch mode = 1:n
            // this combined with the use of queryRun.changed ensures that each record in the overall join is only processed once
            for (i = 1; i <= query.dataSourceCount(); i++)
            {
                if (queryRun.changed(query.dataSourceNo(i).table()))
                {
                    accessLogSysDatabaseTmp.UserSessionId = tmpSessionId;
                    accessLogSysDatabaseTmp.RefTableId = query.dataSourceNo(i).table();
                    accessLogSysDatabaseTmp.RefRecId = queryRun.getNo(i).RecId;

                    accessLogSysDatabaseTmp.insert();
                }
            }
        }

        // Need to ensure we do not overlook personal data records which were previously deleted.
        // At this point we have only identified existing records.
        // Leverage the EeReadDatabaseLog to ensure we include personal data records which no longer exist.
        // There will be overlap in the resulting set but we must have the above process to ensure created records are not overlooked,
        // and the following process to ensure deleted are not overlooked.
        insert_recordset accessLogSysDatabaseTmp(UserSessionId, RefTableId, RefRecId)
            select tmpSessionId, RefTableId, LogRecId from readDatabaseLog
                group by readDatabaseLog.RefTableId, readDatabaseLog.LogRecId
                where readDatabaseLog.Person == _personId;

        // Trim duplicates from the temp data so we only have one instance of each RefTable/RefRec combination
        insert_recordset accessLogSysDatabaseTmp(UserSessionId, RefTableId, RefRecId)
            select currentSessionId, RefTableId, RefRecId from tmp
                group by tmp.RefTableId, tmp.RefRecId
                where tmp.UserSessionId == tmpSessionId;
        this.clearTemporaryJoinData(tmpSessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEeAccessLogTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records drom the <c>EeAccessLogTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The values from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(EeAccessLogTmp))
    ]
    public EeAccessLogTmp getEeAccessLogTmp()
    {
        select accessLogTmp;
        return accessLogTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        this.setSessionIds();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun                queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query = new Query(this.parmQuery());
        EeReadDataBaseLog       readDatabaseLog;
        SysDataBaseLog          sysDatabaseLog;

        EeAccessLogContract     contract = this.parmDataContract() as EeAccessLogContract;
        DirPersonRecId          personId = contract.parmPersonId();
        FromDate                fromDate = contract.parmFromDate();
        ToDate                  toDate = contract.parmToDate();

        // translate the parameter values into query ranges for the EeReadDataBaseLog data source
        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(EeReadDataBaseLog));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(EeReadDataBaseLog, Person));
        queryBuildRange.value(SysQuery::value(personId));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(EeReadDataBaseLog, CreatedDateTime));
        queryBuildRange.value(SysQuery::range(fromDate, toDate));

        // translate the parameter values into query ranges for the SysDatabaseLog data source
        // the SysDatabaseLog data source in the query includes a join to the AccessLogSysDatabaseTmp table populated below
        // this join represents the "person" criteria
        this.generateTemporaryJoinData(personId);

        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(EeAccessLogSysDatabaseTmp));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(EeAccessLogSysDatabaseTmp, UserSessionId));
        queryBuildRange.value(SysQuery::value(currentSessionId));

        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(SysDataBaseLog));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SysDataBaseLog, CreatedDateTime));
        queryBuildRange.value(SysQuery::range(fromDate, toDate));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            readDatabaseLog = queryRun.get(tableNum(EeReadDataBaseLog));
            sysDatabaseLog = queryRun.get(tableNum(sysDatabaseLog));

            if (readDatabaseLog)
            {
                // translate EeReadDataBaseLog record to temp table
                this.generateDataFromReadDatabaseLog(readDatabaseLog);
            }

            if (sysDatabaseLog)
            {
                // translate SysDataBaseLog record to temp table
                this.generateDataFromSysDatabaseLog(sysDatabaseLog);
            }
        }

        this.clearTemporaryJoinData(currentSessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSessionIds</Name>
				<Source><![CDATA[
    private void setSessionIds()
    {
        // generate a session Id for the temp file processing
        currentSessionId = new xSession().sessionId();
        tmpSessionId = maxInt() - currentSessionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>