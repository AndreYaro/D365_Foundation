<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCoverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCoverage</c> class performs calculations for cash flow forecasting.
/// </summary>
public class LedgerCoverage
{
    private const int NumberOfKeyFields = 7;
    private const int NumberOfDataFields = 4;

    private TableId transTableId;
    private RecId transRecId;

    private Factor remainingPercentage;
    private AmountCur lastAmountCur;
    private CurrencyCode enterpriseCurrencyCode;
    private CurrencyCode companyCurrencyCode;
    private ExchangeRateTypeId enterpriseExchangeRateTypeId;

    // Key: TransDate, PostingType, MainAccount, DefaultDimension, CurrencyCode, PostingProfile_RU, InventProfileType_RU
    // Data: AmountCur, AmountMST, EnterpriseCurrencyAmount, BankAccountCurrencyAmount
    private KeySum coverageKeySum;

    private PostingProfile postingProfile;
    private InventProfileType_RU inventProfileType;

    protected Map splitLinesMap;
    protected Map copyLinesMap;
    protected LedgerCov ledgerCov;
    protected TmpDataAreaRecIdFilter updatedCashFlowDocumentRows;

    private BankAccountMainAccount bankAccountMainAccount;

    private Common common;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCoverageFromSum</Name>
				<Source><![CDATA[
    private void createCoverageFromSum()
    {
        ledgerCov.TransTableId = transTableId;
        ledgerCov.TransRecId = transRecId;

        for (Row trans = 1; trans <= coverageKeySum.numOfTrans(); trans++)
        {
            [ledgerCov.TransDate,
                ledgerCov.Posting,
                ledgerCov.MainAccount,
                ledgerCov.DefaultDimension,
                ledgerCov.CurrencyCode,
                ledgerCov.PostingProfile_RU,
                ledgerCov.InventProfileType_RU] = coverageKeySum.index2Key(trans);

            [ledgerCov.AmountMST, ledgerCov.AmountCur, ledgerCov.EnterpriseCurrencyAmount, ledgerCov.BankAccountCurrencyAmount] = coverageKeySum.index2Data(trans);

            ledgerCov.BankAccount = bankAccountMainAccount.findBankAccountForMainAccount(ledgerCov.MainAccount);

            if (ledgerCov.AmountMST || ledgerCov.AmountCur || ledgerCov.EnterpriseCurrencyAmount || ledgerCov.BankAccountCurrencyAmount)
            {
                if (ledgerCov.AmountMST < 0 )
                {
                    ledgerCov.Crediting = NoYes::Yes;
                }
                else
                {
                    ledgerCov.Crediting = NoYes::No;
                }

                ledgerCov.insert();
            }
        }

        coverageKeySum.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumForMainAccount</Name>
				<Source><![CDATA[
    private void updateSumForMainAccount(
        TransDate _transDate,
        LedgerPostingType _postingType,
        RefRecId _mainAccount,
        DimensionDefault _dimensionDefault,
        CurrencyCode _currencyCode,
        AmountMST _amountMST,
        AmountCur _amountCur,
        AmountCur _enterpriseCurrencyAmount,
        AmountCur _bankAccountCurrencyAmount = 0.0,
        boolean _clearingAccount_RU = false)
    {
        #ISOCountryRegionCodes

        MapEnumerator linesMapEnumerator;
        AmountCur remainAmountMST = _amountMST;
        AmountCur remainEnterpriseCurrencyAmount = _enterpriseCurrencyAmount;
        AmountCur remainBankAccountCurrencyAmount = _bankAccountCurrencyAmount;
        AmountCur remainAmountCur = _amountCur;
        AmountCur lineAmountMST;
        AmountCur lineEnterpriseCurrencyAmount;
        AmountCur lineBankAccountCurrencyAmount;
        AmountCur lineAmountCur;
        PostingProfile linePostingProfile;
        InventProfileType_RU lineInventProfileType;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (copyLinesMap && copyLinesMap.elements())
            {
                linesMapEnumerator = copyLinesMap.getEnumerator();

                while (linesMapEnumerator.moveNext())
                {
                    if (!linesMapEnumerator.currentValue())
                    {
                        continue;
                    }

                    [linePostingProfile, lineInventProfileType] = linesMapEnumerator.currentKey();

                    coverageKeySum.updateNow(
                        [_transDate,
                            _postingType,
                            LedgerCoverageMainAccountRU::findMainAccount(common, _postingType, linePostingProfile, _mainAccount, _clearingAccount_RU),
                            _dimensionDefault,
                            _currencyCode,
                            linePostingProfile,
                            lineInventProfileType],
                        [_amountMST, _amountCur, _enterpriseCurrencyAmount, _bankAccountCurrencyAmount]);
                }
            }
            else
            {
                AmountCur splitTotalAmount = 0.0;

                if (splitLinesMap && splitLinesMap.elements())
                {
                    linesMapEnumerator = splitLinesMap.getEnumerator();

                    while (linesMapEnumerator.moveNext())
                    {
                        splitTotalAmount += linesMapEnumerator.currentValue();
                    }
                }

                if (splitTotalAmount != 0.0)
                {
                    int i = 0;
                    linesMapEnumerator = splitLinesMap.getEnumerator();

                    while (linesMapEnumerator.moveNext())
                    {
                        i++;
                        [linePostingProfile, lineInventProfileType] = linesMapEnumerator.currentKey();

                        if (i == splitLinesMap.elements())
                        {
                            // last line
                            lineAmountMST = remainAmountMST;
                            lineEnterpriseCurrencyAmount = remainEnterpriseCurrencyAmount;
                            lineBankAccountCurrencyAmount = remainBankAccountCurrencyAmount;
                            lineAmountCur = remainAmountCur;
                        }
                        else
                        {
                            lineAmountMST = CurrencyExchangeHelper::amount(_amountMST * linesMapEnumerator.currentValue() / splitTotalAmount);
                            lineAmountCur = CurrencyExchangeHelper::amount(_amountCur * linesMapEnumerator.currentValue() / splitTotalAmount, _currencyCode);
                            lineEnterpriseCurrencyAmount = CurrencyExchangeHelper::amount(_enterpriseCurrencyAmount * linesMapEnumerator.currentValue() / splitTotalAmount, enterpriseCurrencyCode);
                            if (bankAccountMainAccount.doesMainAccountHaveBankAccount(_mainAccount))
                            {
                                CurrencyCode bankCurrencyCode = bankAccountMainAccount.findBankAccountCurrencyCodeForMainAccount(_mainAccount);
                                lineBankAccountCurrencyAmount = CurrencyExchangeHelper::amount(_bankAccountCurrencyAmount * linesMapEnumerator.currentValue() / splitTotalAmount, bankCurrencyCode);
                            }

                            remainAmountMST -= lineAmountMST;
                            remainEnterpriseCurrencyAmount -= lineEnterpriseCurrencyAmount;
                            remainBankAccountCurrencyAmount  -= lineBankAccountCurrencyAmount;

                            remainAmountCur -= lineAmountCur;
                        }

                        coverageKeySum.updateNow(
                            [_transDate,
                                _postingType,
                                LedgerCoverageMainAccountRU::findMainAccount(common, _postingType, linePostingProfile, _mainAccount, _clearingAccount_RU),
                                _dimensionDefault,
                                _currencyCode,
                                linePostingProfile,
                                lineInventProfileType],
                            [lineAmountMST, lineAmountCur, lineEnterpriseCurrencyAmount, lineBankAccountCurrencyAmount]);
                    }
                }
                else
                {
                    coverageKeySum.updateNow(
                        [_transDate,
                            _postingType,
                            LedgerCoverageMainAccountRU::findMainAccount(common, _postingType, postingProfile, _mainAccount, _clearingAccount_RU),
                            _dimensionDefault,
                            _currencyCode,
                            postingProfile,
                            inventProfileType],
                        [_amountMST, _amountCur, _enterpriseCurrencyAmount, _bankAccountCurrencyAmount]);
                }
            }
        }
        else
        {
            coverageKeySum.updateNow(
                [_transDate,
                    _postingType,
                    _mainAccount,
                    _dimensionDefault,
                    _currencyCode],
                [_amountMST, _amountCur, _enterpriseCurrencyAmount, _bankAccountCurrencyAmount]);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLinesClear_RU</Name>
				<Source><![CDATA[
    public void copyLinesClear_RU()
    {
        copyLinesMap = new Map(Types::Container, Types::void);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLinesMap_RU</Name>
				<Source><![CDATA[
    public void copyLinesMap_RU(Map _copyLinesMap)
    {
        copyLinesMap = _copyLinesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerCov</c> table with the
    /// cash flow forecasting calculations.
    /// </summary>
    public void endCov()
    {
        if (coverageKeySum.numOfTrans() != 0)
        {
            this.createCoverageFromSum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last amount calculated in terms of the transaction currency.
    /// </summary>
    /// <returns>
    /// The last amount calculated in terms of the transaction currency.
    /// </returns>
    public AmountCur lastAmount()
    {
        return lastAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerCoverage construct(Common _common, NoYes _isSetBased = NoYes::No)
    {
        LedgerCoverage ledgerCoverage;

        if (_isSetBased)
        {
            ledgerCoverage = new LedgerCoverageSetBased();
        }
        else
        {
            ledgerCoverage = new LedgerCoverage();
        }

        ledgerCoverage.init(_common);

        return ledgerCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    public void insertDatabase()
    {
        Debug::assert(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Common _common)
    {
        common = _common;
        remainingPercentage = 1.0;

        if (!common)
        {
            this.finalize();
        }

        SystemParameters systemParameters = SystemParameters::find();
        enterpriseCurrencyCode = systemParameters.SystemCurrencyCode;
        enterpriseExchangeRateTypeId = systemParameters.SystemExchangeRateType;

        companyCurrencyCode = Ledger::accountingCurrency();

        transTableId = common.TableId;
        transRecId = common.RecId;
        coverageKeySum = KeySum::construct(NumberOfKeyFields, NumberOfDataFields);

        if (bankAccountMainAccount == null)
        {
            bankAccountMainAccount = BankAccountMainAccount::construct();
        }

        this.deleteTransaction(transTableId, transRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransaction</Name>
				<Source><![CDATA[
    protected void deleteTransaction(tableId _extTableId, recId _extRecId)
    {
        if (_extRecId != 0)
        {
            LedgerCov::deleteTransact(transTableId, transRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType = inventProfileType)
    {
        inventProfileType = _inventProfileType;
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedCashFlowDocumentRows</Name>
				<Source><![CDATA[
    public TmpDataAreaRecIdFilter parmUpdatedCashFlowDocumentRows()
    {
        return updatedCashFlowDocumentRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPercent</Name>
				<Source><![CDATA[
    public void setRemainPercent(
        TransDate _transDate,
        LedgerAllocateKeyId _key,
        TransDate _breakEvenPoint = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        remainingPercentage = LedgerAllocateTrans::remainPercent(_transDate, _key, _breakEvenPoint) / 100.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainingPercentage</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    internal void setRemainingPercentage(Factor _remainingPercentage)
    {
        remainingPercentage = _remainingPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLinesClear_RU</Name>
				<Source><![CDATA[
    public void splitLinesClear_RU()
    {
        splitLinesMap = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLinesMap_RU</Name>
				<Source><![CDATA[
    public void splitLinesMap_RU(Map _splitLinesMap)
    {
        splitLinesMap = _splitLinesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerCov</c> table with the
    /// cash flow forecasting calculations.
    /// </summary>
    [SysObsoleteAttribute('Use endCov and init instead.', false, 30\6\2020)]
    public void updateNow()
    {
        if (coverageKeySum.numOfTrans() != 0)
        {
            this.createCoverageFromSum();
        }

        lastAmountCur = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cash flow forecasting calculations for the given transaction.
    /// </summary>
    /// <param name = "_transDate">The date of the transaction.</param>
    /// <param name = "_postingType">The posting type of the transaction.</param>
    /// <param name = "_mainAccount">The main account of the transaction.</param>
    /// <param name = "_dimensionDefault">The dimensions of the transaction.</param>
    /// <param name = "_currencyCode">The currency of the transaction.</param>
    /// <param name = "_amountCur">The amount of the transaction in the transaction currency.</param>
    /// <param name = "_isFactorOk">If true, allocates the transaction amount based on the ledger allocation rules.</param>
    /// <param name = "_clearingAccount">The clearing account of the transaction.</param>
    /// <param name = "_paymentTermId">The payment terms of the transaction for calculating the due date.</param>
    /// <param name = "_clearingPeriod">The clearing period.</param>
    /// <param name = "_paymentDay">The payment day.</param>
    /// <param name = "_fixedDueDate">The fixed due date of the transaction, used in place of the calculated due date.</param>
    /// <param name = "_exchangeRateTypeRecId">The exchange rate type.</param>
    public void updateSum(
        TransDate _transDate,
        LedgerPostingType _postingType,
        RefRecId _mainAccount,
        DimensionDefault _dimensionDefault,
        CurrencyCode _currencyCode,
        AmountCur _amountCur,
        NoYes _isFactorOk = NoYes::Yes,
        RefRecId _clearingAccount = 0,
        PaymTermId _paymentTermId = '',
        PaymTermId _clearingPeriod = '',
        PaymDayId _paymentDay = '',
        TransDate _fixedDueDate = dateNull(),
        ExchangeRateTypeRecId _exchangeRateTypeRecId = 0)
    {
        AmountMST amountMST;
        AmountCur enterpriseCurrencyAmount;
        AmountCur bankAccountCurrencyAmount;
        AmountCur amountCur = _amountCur;
        CurrencyExchangeHelper currencyHelper;

        if (remainingPercentage != 0.0)
        {
            if (_isFactorOk == NoYes::Yes)
            {
                if (remainingPercentage != 1.0)
                {
                    amountCur = CurrencyExchangeHelper::amount(_amountCur * remainingPercentage, _currencyCode);
                }
            }

            currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _transDate);

            if (_exchangeRateTypeRecId)
            {
                // An exchange rate type was specified - use it to determine the accounting currency amount
                currencyHelper.parmExchangeRateTypeRecId(_exchangeRateTypeRecId);
            }

            amountMST = currencyHelper.calculateTransactionToAccounting(_currencyCode, amountCur, true);

            ExchangeRateTypeRecId bankAccountCurrencyExchangeRateTypeId = currencyHelper.parmExchangeRateTypeRecId();

            currencyHelper.parmExchangeRateTypeRecId(enterpriseExchangeRateTypeId);
            enterpriseCurrencyAmount = LedgerCov::determineEnterpriseCurrencyAmountWithCurrentRate(
                _currencyCode,
                amountCur,
                companyCurrencyCode,
                amountMST,
                enterpriseCurrencyCode);

            currencyHelper.parmExchangeRateTypeRecId(bankAccountCurrencyExchangeRateTypeId);
            bankAccountCurrencyAmount = LedgerCov::determineBankAccountCurrencyAmountFromTransactionDate(
                bankAccountMainAccount,
                currencyHelper,
                _mainAccount,
                _currencyCode,
                amountCur,
                companyCurrencyCode,
                amountMST);

            this.updateSumForMainAccount(
                _transDate,
                _postingType,
                _mainAccount,
                _dimensionDefault,
                _currencyCode,
                amountMST,
                amountCur,
                enterpriseCurrencyAmount,
                bankAccountCurrencyAmount);

            lastAmountCur = amountCur;

            // Create the "payment" from the "invoice".  These additional parameters are typically used from sources like
            // sales orders and purchase orders when the invoices are being forecasted (do not exist yet).
            if (_clearingAccount != 0)
            {
                TransDate dueDate = this.determineDueDate(_transDate, _paymentTermId, _paymentDay, _fixedDueDate);

                TransDate paymentDueDate = this.adjustDueDateByClearingPeriod(dueDate, _clearingPeriod);

                currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), paymentDueDate);

                bankAccountCurrencyAmount = LedgerCov::determineBankAccountCurrencyAmountFromTransactionDate(
                    bankAccountMainAccount,
                    currencyHelper,
                    _clearingAccount,
                    _currencyCode,
                    amountCur,
                    companyCurrencyCode,
                    amountMST);

                this.updateSumForMainAccount(
                    paymentDueDate,
                    _postingType,
                    _mainAccount,
                    _dimensionDefault,
                    _currencyCode,
                    -amountMST,
                    -amountCur,
                    -enterpriseCurrencyAmount,
                    -bankAccountCurrencyAmount);

                this.updateSumForMainAccount(
                    paymentDueDate,
                    _postingType,
                    _clearingAccount,
                    _dimensionDefault,
                    _currencyCode,
                    amountMST,
                    amountCur,
                    enterpriseCurrencyAmount,
                    bankAccountCurrencyAmount,
                    true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateByClearingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the due date by the clearing period.
    /// </summary>
    /// <param name = "_dueDate">The invoice due date.</param>
    /// <param name = "_clearingPeriod">The clearing period.</param>
    /// <returns>The payment due date.</returns>
    internal TransDate adjustDueDateByClearingPeriod(TransDate _dueDate, PaymTermId _clearingPeriod)
    {
        TransDate paymentDueDate = _dueDate;

        if (_clearingPeriod != '')
        {
            PaymTerm paymentTerm;

            select firstonly paymentTerm
                where paymentTerm.PaymTermId == _clearingPeriod;

            paymentDueDate = paymentTerm.due(_dueDate);
        }

        return paymentDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePaymentDueDateWithAverages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the due date by the average days (pay or deliver) and falls back to the clearing period.
    /// </summary>
    /// <param name = "_selector">The average days selector.</param>
    /// <param name = "_account">The account used for averages.</param>
    /// <param name = "_dueDate">The invoice due date.</param>
    /// <param name = "_clearingPeriod">The clearing period.</param>
    /// <returns>The payment due date.</returns>
    internal TransDate determinePaymentDueDateWithAverages(LedgerCovAvgAverageDaysSelector _selector, CustVendAC _account, TransDate _dueDate, PaymTermId _clearingPeriod)
    {
        TransDate paymentDueDate;

        if (CashflowInsightsActivation::isActive())
        {
            paymentDueDate = LedgerCovAvgAverageDaysCalculator::newFromContext(LedgerCovAvgExecutionContextFactory::newFromSelector(_selector)).adjustDateByAverage(_account, _dueDate);
        }

        if (paymentDueDate == dateNull())
        {
            paymentDueDate = this.adjustDueDateByClearingPeriod(_dueDate, _clearingPeriod);
        }

        return paymentDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the due date.
    /// </summary>
    /// <param name = "_transDate">The invoice date.</param>
    /// <param name = "_paymentTermId">The payment term; optional.</param>
    /// <param name = "_paymentDay">The payment day; optional.</param>
    /// <param name = "_fixedDueDate">The fixed due date; optional.</param>
    /// <returns></returns>
    internal TransDate determineDueDate(
        TransDate _transDate,
        PaymTermId _paymentTermId = '',
        PaymDayId _paymentDay = '',
        TransDate _fixedDueDate = dateNull())
    {
        TransDate dueDate;

        if (_fixedDueDate != dateNull())
        {
            return _fixedDueDate;
        }

        if (_paymentTermId != '')
        {
            PaymTerm paymentTerm;
            select firstonly paymentTerm
                where paymentTerm.PaymTermId == _paymentTermId;

            dueDate = paymentTerm.due(_transDate, _paymentDay);
        }
        else
        {
            dueDate = _transDate;
        }

        return dueDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>