<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineCustVend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureEditLinesEngineCustVend_RU extends FactureEditLinesEngine_RU
{
    MarkupTrans     tmpMarkupTrans;

    Set             roundOffSet,
                    endDiscSet;

    SetEnumerator   roundOffEn,
                    endDiscEn;

    Map             roundOffMap,
                    endDiscMap;

    Num             origSalesPurchId;

    NumberSequenceGroupId extFactureIdNumSeqGroup;
    QueryBuildDataSource  dsCommExistsJour;
    QueryBuildDataSource  dsCommReportTrans;
    QueryBuildDataSource  dsCommContract;
 
    QueryFilter     inventProfileTypeFilter,
                    inventOwnerIdFilter,
                    correctFilter,
                    vatOnPaymentFilter;

    QueryBuildRange contragentRange,
                    creditNoteRange,
                    correctionTypeRange,
                    recIdRange,
                    commJourAccountRange,
                    commJourFactureIdExtRange,
                    commJourFactureDateExtRange,
                    commTransAccountRange,
                    commTransFactureIdExtRange,
                    commTransFactureDateExtRange;
    boolean         markupTransCached;
    Map             markupTransMap;
    Set             markupTransSet;
    boolean         taxCodeCached;
    Map             taxCodeMap;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedInventProfileTypes</Name>
				<Source><![CDATA[
    public Set allowedInventProfileTypes()
    {
        Set inventProfileTypeSet = super();
        ;
        inventProfileTypeSet.remove(InventProfileType_RU::Bailee);

        return inventProfileTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    final public int buildTree()
    {
        MarkupTrans      tmpMarkup;
        int              globalIdx,
                         rootIdx;
        InvoiceId        invoiceId;

        if (treeIsBuilt)
            return 0;

        globalIdx = super();

        if (factureCreate && markupSet.elements())
        {
            rootIdx = this.treeControl().addItem(0,
                                                 globalIdx,
                                                 new FormTreeItem("@SYS8371",
                                                                  markupSet.empty() ? 1 : 0,
                                                                  markupSet.elements(),
                                                                  ""));
            globalIdx ++;

            markupEn = markupSet.getEnumerator();

            while (markupEn.moveNext())
            {
                tmpMarkup.con2buf(markupMap.lookup(markupEn.current()));
                switch (tmpMarkup.TransTableId)
                {
                    case tableNum(CustInvoiceJour)  :
                    case tableNum(VendInvoiceJour)  :
                        select firstonly tmpJour
                            where tmpJour.RecId == tmpMarkup.TransRecId;
                        invoiceId = tmpJour.InvoiceId;
                        break;
                    case tableNum(CustInvoiceTrans) :
                    case tableNum(VendInvoiceTrans) :
                        select firstonly tmpTrans
                            where tmpTrans.RecId == tmpMarkup.TransRecId;
                        invoiceId = tmpTrans.InvoiceNum;
                        break;
                }
                this.treeControl().addItem(rootIdx,
                                           globalIdx,
                                           new FormTreeItem(strFmt("@GLS104574",
                                                                   invoiceId,
                                                                   tmpMarkup.MarkupCode,
                                                                   tmpMarkup.Txt,
                                                                   (isInsertAllJours ?
                                                                    this.lookupTrans([ tableNum(MarkupTrans), tmpMarkup.RecId, 0 ]) :
                                                                    factureCreate.lookupTrans([ tableNum(MarkupTrans), tmpMarkup.RecId, 0])),
                                                                   tmpMarkup.CurrencyCode),
                                                            1,
                                                            0,
                                                            ""));
                globalIdx ++;
            }
            this.treeControl().expand(rootIdx, FormTreeExpand::Expand);
        }

        if (factureCreate && roundOffSet.elements())
        {
            rootIdx = this.treeControl().addItem(0,
                                                 globalIdx,
                                                 new FormTreeItem("@SYS10112",
                                                                  roundOffSet.empty() ? 1 : 0,
                                                                  roundOffSet.elements(),
                                                                  ""));
            globalIdx ++;

            roundOffEn = roundOffSet.getEnumerator();

            while (roundOffEn.moveNext())
            {
                tmpJour.con2buf(jourMap.lookup(roundOffEn.current()));

                this.treeControl().addItem(rootIdx,
                                           globalIdx,
                                           new FormTreeItem(strFmt("@GLS102591",
                                                                   tmpJour.InvoiceId,
                                                                   (isInsertAllJours ?
                                                                    this.lookupTrans([ this.jourTableId(),
                                                                                                tmpJour.RecId,
                                                                                                0,
                                                                                                FactureLineType_RU::InvoiceRoundOff ]) :
                                                                    factureCreate.lookupTrans([ this.jourTableId(),
                                                                                                tmpJour.RecId,
                                                                                                0,
                                                                                                FactureLineType_RU::InvoiceRoundOff ])),
                                                                   tmpJour.CurrencyCode),
                                                            1,
                                                            0,
                                                            ""));
                globalIdx ++;
            }
            this.treeControl().expand(rootIdx, FormTreeExpand::Expand);
        }

        if (factureCreate && endDiscSet.elements())
        {
            rootIdx = this.treeControl().addItem(0,
                                         globalIdx,
                                         new FormTreeItem("@SYS6465",
                                                          endDiscSet.empty() ? 1 : 0,
                                                          endDiscSet.elements(),
                                                          ""));
            globalIdx ++;

            endDiscEn = endDiscSet.getEnumerator();

            while (endDiscEn.moveNext())
            {
                tmpJour.con2buf(jourMap.lookup(endDiscEn.current()));

                this.treeControl().addItem(rootIdx,
                                           globalIdx,
                                           new FormTreeItem(strFmt("@GLS106941",
                                                                   tmpJour.InvoiceId,
                                                                   (isInsertAllJours ?
                                                                    this.lookupTrans([ this.jourTableId(),
                                                                                                tmpJour.RecId,
                                                                                                0,
                                                                                                FactureLineType_RU::InvoiceEndDisc ]) :
                                                                    factureCreate.lookupTrans([ this.jourTableId(),
                                                                                                tmpJour.RecId,
                                                                                                0,
                                                                                                FactureLineType_RU::InvoiceEndDisc ]))),
                                                            1,
                                                            0,
                                                            ""));
                globalIdx ++;
            }
            this.treeControl().expand(rootIdx, FormTreeExpand::Expand);
        }

        return globalIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear()
    {
        super();

        roundOffSet = new Set(typeName2Type(extendedTypeStr(recId)));
        endDiscSet  = new Set(typeName2Type(extendedTypeStr(recId)));

        roundOffEn  = roundOffSet.getEnumerator();
        endDiscEn   = endDiscSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commContractPartnerType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report for principal type.
    /// </summary>
    /// <returns>
    /// Report for principal type.
    /// </returns>
    abstract protected ModuleCustVend commContractPartnerType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    public void contragentInit()
    {
        const str fieldName = 'InvoiceAccount';
        
        DictTable srcTable = new DictTable(sourceRecord.TableId);

        if (sourceRecord)
        {
            switch (sourceRecord.TableId)
            {
                case tableNum(SalesTable)         :
                case tableNum(PurchTable)         :
                case tableNum(CustInvoiceJour)    :
                case tableNum(VendInvoiceJour)    :
                    this.contragent(sourceRecord.(srcTable.fieldName2Id(fieldName)));
                    break;
                default                           :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query of source documents behind the facture update form.
    /// </summary>
    /// <param name="_clear">
    /// Clears user selected documents.
    /// </param>
    public void criteriaChanged(boolean _clear = true)
    {
        super(_clear);

        if (this.commPartner() || factureIdExternalControl.text())
        {
            dsCommExistsJour.enabled(inventProfileTypeControl.selection() == InventProfileType_RU::CommissionAgent ||
                                 inventProfileTypeControl.selection() == InventProfileType_RU::CommissionPrincipalAgent);
            dsCommReportTrans.enabled(dsCommExistsJour.enabled());

            commJourAccountRange.value(this.commPartner());
            commJourFactureIdExtRange.value(factureIdExternalControl.text());
            commJourFactureDateExtRange.value(queryValue(factureDateExternalControl.dateValue()));

            commTransAccountRange.value(this.commPartner());
            commTransFactureIdExtRange.value(factureIdExternalControl.text());
            commTransFactureDateExtRange.value(queryValue(factureDateExternalControl.dateValue()));
        }
        else
        {
            dsCommExistsJour.enabled(false);
            dsCommReportTrans.enabled(false);
        }

        dsCommContract.enabled(! dsCommExistsJour.enabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveInvoiceJour</Name>
				<Source><![CDATA[
    final public void dsActiveInvoiceJour(FormDataSource _jourDs)
    {
        CustVendInvoiceJour jour = this.invoiceJourDatasource().cursor();

        if (_jourDs.table() != this.invoiceJourDatasource().table())
        {
            return;
        }

        this.invoiceJourDatasource().allowEdit(!jour.CustVendInvoiceJour::getFacturedFully_RU() && jour.InvoiceDate <= factureDateControl.dateValue());

        this.roundOffGroup().allowEdit(jour.RoundOff_W && !this.roundOffFactured(jour.RecId));
        this.endDiscGroup().allowEdit(jour.EndDisc_RU && !this.endDiscFactured(jour.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveInvoiceTrans</Name>
				<Source><![CDATA[
    final public void dsActiveInvoiceTrans(FormDataSource _transDs)
    {
        CustVendInvoiceJour  jour  = this.invoiceJourDatasource().cursor();
        CustVendInvoiceTrans trans = this.invoiceTransDatasource().cursor();

        if (_transDs.table() != this.invoiceTransDatasource().table())
            return;

        this.invoiceTransDatasource().allowEdit(! trans.fullyfactured_RU() &&
                                                jour.InvoiceDate           <= factureDateControl.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveMarkup</Name>
				<Source><![CDATA[
    public void dsActiveMarkup()
    {
        MarkupTrans         trans = markupDS.cursor();
        CustVendInvoiceJour jour = this.invoiceJourDatasource().cursor();

        markupDS.allowEdit(! trans.fullyFactured_RU() &&
                           jour.InvoiceDate <= factureDateControl.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteInvoiceJour</Name>
				<Source><![CDATA[
    public boolean dsExecuteInvoiceJour(FormDataSource _jourDs)
    {
        FactureCorrectionType_RU correctionType = correctionTypeControl.selection();
        boolean                  ret            = _jourDs.table() == this.invoiceJourDatasource().table();

        if (ret)
        {
            if (currentJourOnly)
            {
                recIdRange.value(queryValue(sourceRecord.RecId));
            }
            else
            {
                currencyRange.value(currencyControl.text());
                contragentRange.value(SysQuery::value(this.contragent()));

                if (! this.useCommReportedQty())
                {
                    if (! correctControl.value())
                    {
                        creditNoteRange.value(creditNoteControl.value() ? '..0' : '0..');
                    }
                    else
                    {
                        creditNoteRange.value(SysQuery::valueUnlimited());
                    }

                    correctFilter.value(correctControl.value() ? SysQuery::value(NoYes::Yes) : SysQuery::value(NoYes::No));

                    correctionTypeRange.value(correctionType == FactureCorrectionType_RU::Revision ?
                                              queryValue(FactureCorrectionType_RU::Revision)       :
                                              SysQuery::valueNot(FactureCorrectionType_RU::Revision));
                }
                else
                {
                    creditNoteRange.value(SysQuery::valueUnlimited());
                    correctFilter.value(SysQuery::valueUnlimited());
                    correctionTypeRange.value(SysQuery::valueUnlimited());
                }

                vatOnPaymentFilter.value(vatOnPaymentControl.value() ? SysQuery::value(NoYes::Yes) : SysQuery::value(NoYes::No));
                this.setInventProfileTypeRange();

                if (inventOwnerIdFilter)
                {
                    inventOwnerIdFilter.value(inventOwnerIdControl.text() ? inventOwnerIdControl.text() : SysQuery::valueUnlimited());
                }
            }

            factureDateRange.value(this.valueBeforeFactureDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteMarkup</Name>
				<Source><![CDATA[
    public void dsExecuteMarkup()
    {
        Query                query = markupDS.query();
        QueryBuildDataSource mrkDS = query.dataSourceTable(tableNum(MarkupTrans));
        ;
        super();

        mrkDS.clearDynalinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitInvoiceJour</Name>
				<Source><![CDATA[
    public void dsInitInvoiceJour()
    {
        QueryBuildDataSource tmpDS = this.invoiceJourDatasource().query().dataSourceTable(this.invoiceJourDatasource().table());
        tmpDS.clearDynalinks();
        tmpDS.addSortField(this.invoiceJourDateField(), SortOrder::Ascending);
        tmpDS.addSortField(this.invoiceJourIdField(), SortOrder::Ascending);

        currencyRange = tmpDS.addRange(this.invoiceJourCurrencyField());
        currencyRange.status(RangeStatus::Hidden);

        contragentRange = tmpDS.addRange(this.invoiceJourAccountField());
        contragentRange.status(RangeStatus::Hidden);

        creditNoteRange = tmpDS.addRange(this.invoiceJourAmountField());
        creditNoteRange.status(RangeStatus::Hidden);

        factureDateRange = tmpDS.addRange(this.invoiceJourDateField());
        factureDateRange.status(RangeStatus::Hidden);

        recIdRange = tmpDS.addRange(this.invoiceJourRecIdField());
        recIdRange.status(RangeStatus::Hidden);

        if (this.invoiceJourCorrectionTypeTable())
        {
            QueryBuildDataSource tmpDSCorr = this.invoiceJourDatasource().query().dataSourceTable(this.invoiceJourCorrectionTypeTable());

            correctionTypeRange = tmpDSCorr.addRange(this.invoiceJourCorrectionTypeField());
        }
        else
        {
            correctionTypeRange = tmpDS.addRange(this.invoiceJourCorrectionTypeField());
        }

        correctionTypeRange.status(RangeStatus::Hidden);

        if (this.invoiceJourInventOwnerIdField())
        {
            inventOwnerIdFilter = this.getQueryFilter(this.invoiceJourInventOwnerIdFieldDS(), this.invoiceJourInventOwnerIdField());
        }

        inventProfileTypeFilter = this.getQueryFilter(this.invoiceJourInventProfileTypeFieldDS(), this.invoiceJourInventProfileTypeField());
        vatOnPaymentFilter = this.getQueryFilter(this.invoiceJourVATOnPaymentFieldDS(), this.invoiceJourVATOnPaymentField());
        correctFilter = this.getQueryFilter(this.invoiceJourCorrectFieldDS(), this.invoiceJourCorrectField());

        QueryFilter filter = this.getQueryFilter(this.invoiceJourFacturedFieldDS(), this.invoiceJourFacturedField());
        filter.value(int2str(NoYes::No));

        QueryBuildRange range = tmpDS.addRange(this.invoiceJourIdField());
        range.value(SysQuery::valueNotEmptyString());
        range.status(RangeStatus::Hidden);

        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (dimAttrRecId)
        {
            SysQuery::addDimensionAttributeRange(this.invoiceJourDatasource().query(),
                tmpDS.name(),
                this.invoiceJourDefaultDimensionField(),
                DimensionComponent::DimensionAttribute,
                false,
                DimensionAttribute::find(dimAttrRecId).Name);
        }

        tmpDS = this.invoiceJourDatasource().query().dataSourceTable(tableNum(DimensionAttributeValueSet));

        if (tmpDS)
        {
            tmpDS = tmpDS.addDataSource(tableNum(DimensionAttributeValueSetItem));
            tmpDS.relations(true);
            tmpDS.joinMode(JoinMode::OuterJoin);

            dsCommContract = tmpDS.addDataSource(tableNum(AgreementHeaderExt_RU));
            dsCommContract.addLink(
                fieldNum(DimensionAttributeValueSetItem, DisplayValue),
                fieldNum(AgreementHeaderExt_RU, AgreementId));
            dsCommContract.joinMode(JoinMode::NoExistsJoin);
            dsCommContract.enabled(true);
        }

        tmpDS = this.invoiceJourDatasource().query().dataSourceTable(this.invoiceJourDatasource().table());

        dsCommExistsJour = tmpDS.addDataSource(tableNum(CommReportTransItem_RU));
        dsCommExistsJour.relations(true);
        dsCommExistsJour.joinMode(JoinMode::ExistsJoin);
        dsCommExistsJour.enabled(false);

        QueryBuildRange qbr = dsCommExistsJour.addRange(fieldNum(CommReportTransItem_RU, Approved));
        qbr.value(queryValue(NoYes::Yes));
        qbr.status(RangeStatus::Hidden);

        QueryBuildDataSource dsFactureTrans = dsCommExistsJour.addDataSource(tableNum(FactureTrans_RU));
        dsFactureTrans.relations(true);
        dsFactureTrans.joinMode(JoinMode::NoExistsJoin);

        QueryBuildDataSource dsCommReport = dsCommExistsJour.addDataSource(tableNum(CommReportJour_RU));
        dsCommReport.relations(true);
        dsCommReport.joinMode(JoinMode::ExistsJoin);

        qbr = dsCommReport.addRange(fieldNum(CommReportJour_RU, PartnerType));
        qbr.value(queryValue(this.commContractPartnerType()));
        qbr.status(RangeStatus::Hidden);

        commJourFactureIdExtRange = dsCommExistsJour.addRange(fieldNum(CommReportTransItem_RU, FactureExternalId));
        commJourFactureIdExtRange.status(RangeStatus::Hidden);

        commJourFactureDateExtRange = dsCommExistsJour.addRange(fieldNum(CommReportTransItem_RU, FactureDateExternal));
        commJourFactureDateExtRange.status(RangeStatus::Hidden);
        
        tmpDS = tmpDS.addDataSource(this.invoiceTransDatasource().table());
        tmpDS.relations(true);
        tmpDS.joinMode(JoinMode::ExistsJoin);
    
        dsCommReportTrans = this.invoiceTransDatasource().query().dataSourceTable(tableNum(CommReportTransItem_RU));
        dsCommReportTrans.enabled(false);

        qbr = dsCommReportTrans.addRange(fieldNum(CommReportTransItem_RU, Approved));
        qbr.value(queryValue(NoYes::Yes));
        qbr.status(RangeStatus::Hidden);

        dsFactureTrans = dsCommReportTrans.addDataSource(tableNum(FactureTrans_RU));
        dsFactureTrans.relations(true);
        dsFactureTrans.joinMode(JoinMode::NoExistsJoin);

        dsCommReport = dsCommReportTrans.addDataSource(tableNum(CommReportJour_RU));
        dsCommReport.relations(true);
        dsCommReport.joinMode(JoinMode::ExistsJoin);

        qbr = dsCommReport.addRange(fieldNum(CommReportJour_RU, PartnerType));
        qbr.value(queryValue(this.commContractPartnerType()));
        qbr.status(RangeStatus::Hidden);

        commTransFactureIdExtRange = dsCommReportTrans.addRange(fieldNum(CommReportTransItem_RU, FactureExternalId));
        commTransFactureIdExtRange.status(RangeStatus::Hidden);

        commTransFactureDateExtRange = dsCommReportTrans.addRange(fieldNum(CommReportTransItem_RU, FactureDateExternal));
        commTransFactureDateExtRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscExistsFacture</Name>
				<Source><![CDATA[
    abstract protected boolean endDiscExistsFacture(Common _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscFactured</Name>
				<Source><![CDATA[
    final public boolean endDiscFactured(recId _recId)
    {
        boolean ret;

        if (endDiscMap.exists(_recId))
        {
            ret = endDiscMap.lookup(_recId);
        }
        else
        {
            select firstonly tmpJour
                where tmpJour.RecId == _recId;

            ret = (tmpJour.EndDisc_RU == 0)        ||
                  this.endDiscExistsFacture(tmpJour);

            endDiscMap.insert(_recId, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscGroup</Name>
				<Source><![CDATA[
    abstract protected FormGroupControl endDiscGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    final public FactureType_RU factureType()
    {
        return FactureType_RU::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFilter</Name>
				<Source><![CDATA[
    private QueryFilter getQueryFilter(FormDataSource _fds, FieldName _filedName)
    {
        QueryFilter queryFilter;

        queryFilter = _fds.query().findQueryFilter(_fds.queryBuildDataSource(), _filedName);
        if (! queryFilter)
        {
            queryFilter = _fds.query().addQueryFilter(_fds.queryBuildDataSource(), _filedName);
            queryFilter.status(RangeStatus::Hidden);
        }
        return queryFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inEndDisc</Name>
				<Source><![CDATA[
    final public boolean inEndDisc(recId _recId)
    {
        return endDiscSet.in(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommissionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits commissioner control group with blank values.
    /// </summary>
    public void initCommissionGroup()
    {
        super();

        sellerControl.text('');
        buyerControl.text('');
        factureIdExternalControl.text('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionGroup</Name>
				<Source><![CDATA[
    public void initCorrectionGroup()
    {
        Object form = editLinesForm;
        ;

        form.editCorrFactureExternalId(true, '');
        form.editCorrFactureDate(true, dateNull());
        correctedPeriodControl.dateValue(dateNull());
        correctionTypeControl.allowEdit(! currentJourOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceLinkDS</Name>
				<Source><![CDATA[
    final public void initInvoiceLinkDS(FormDataSource _ds)
    {
        QueryBuildDataSource tmpDS;

        if (origSalesPurchId && _ds.table() == this.invoiceLinkTableNum())
        {
            tmpDS = _ds.query().dataSourceTable(this.invoiceLinkTableNum());

            tmpDS.addRange(this.invoiceLinkFieldNum()).value(origSalesPurchId);
            tmpDS.findRange(this.invoiceLinkFieldNum()).status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inRoundOff</Name>
				<Source><![CDATA[
    final public boolean inRoundOff(recId _recId)
    {
        return roundOffSet.in(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEndDisc</Name>
				<Source><![CDATA[
    final public void insertEndDisc(Common  _jour,
                                    NoYes   _updateJour = NoYes::No)
    {
        CustVendInvoiceJour localCustVendInvoiceJour = _jour;
        ;

        if (! localCustVendInvoiceJour.EndDisc_RU || this.endDiscFactured(localCustVendInvoiceJour.RecId))
            return;

        endDiscSet.add(localCustVendInvoiceJour.RecId);

        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.appendTrans([ this.jourTableId(),
                                            localCustVendInvoiceJour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceEndDisc ],
                                          - localCustVendInvoiceJour.EndDisc_RU);
            }
            else
            {
                factureCreate.appendTrans([ this.jourTableId(),
                                            localCustVendInvoiceJour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceEndDisc ],
                                          - localCustVendInvoiceJour.EndDisc_RU);
            }
        }

        if (_updateJour)
        {
            this.insertJourWithUpdate(localCustVendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJourWithUpdate</Name>
				<Source><![CDATA[
    protected void insertJourWithUpdate(CustVendInvoiceJour _jour)
    {
        if (jourSet.elements())
        {
            if (_jour.CustVendInvoiceJour::getConsigneeAccount_RU() != consignee)
            {
                consignee = '';
            }
            if (_jour.CustVendInvoiceJour::getConsignorAccount_RU() != consignor)
            {
                consignor = '';
            }
            if (_jour.NumberSequenceGroupId != extFactureIdNumSeqGroup)
            {
                extFactureIdNumSeqGroup = '';
            }
        }
        else
        {
            consignee               = _jour.CustVendInvoiceJour::getConsigneeAccount_RU();
            consignor               = _jour.CustVendInvoiceJour::getConsignorAccount_RU();
            extFactureIdNumSeqGroup = _jour.NumberSequenceGroupId;
        }

        super(_jour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinkedTrans</Name>
				<Source><![CDATA[
    final protected void insertLinkedTrans(CustVendInvoiceTrans _trans)
    {
        TaxCode tmpCode;
        SetEnumerator se;
        boolean ret;
        void getFirstMarkupTrans()
        {
            if (isInsertAllJours)
            {
                se = markupTransSet.getEnumerator();
                ret = se.moveNext();
            }
            else
            {
                select tmpMarkupTrans
                    where tmpMarkupTrans.TransTableId   == _trans.TableId &&
                      tmpMarkupTrans.TransRecId         == _trans.RecId   &&
                      tmpMarkupTrans.CustVendPosted_RU                &&
                      tmpMarkupTrans.ItemPosted_RU;
                ret = tmpMarkupTrans.RecId;
            }
        }
        MarkupTrans getCurMarkupTrans()
        {
            MarkupTrans markupTransLoc;
            if (isInsertAllJours)
            {
                markupTransLoc.con2buf(se.current());
            }
            else
            {
                markupTransLoc = tmpMarkupTrans;
            }
            return markupTransLoc;
        }
        void getNextMarkupTrans()
        {
            if (isInsertAllJours)
            {
                ret = se.moveNext();
            }
            else
            {
                next tmpMarkupTrans;
                ret = tmpMarkupTrans.RecId;
            }
        }

        if (isInsertAllJours)
        {
            tmpCode = taxCodeMap.lookup([_trans.TaxGroup_RU, _trans.TaxItemGroup_RU]);
            markupTransSet = Set::create(markupTransMap.lookup([_trans.TableId, _trans.RecId, true]));
            se = markupTransSet.getEnumerator();
        }
        else
        {
            tmpCode = TaxTable::vatCode_RU(_trans.TaxGroup_RU, _trans.TaxItemGroup_RU);
        }
        getFirstMarkupTrans();
        while (ret)
        {
            getCurMarkupTrans();
            if (TaxTable::vatCode_RU(tmpMarkupTrans.TaxGroup, tmpMarkupTrans.TaxItemGroup) != tmpCode)
            {
                this.insertMarkup(tmpMarkupTrans);
            }
            getNextMarkupTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkup</Name>
				<Source><![CDATA[
    public void insertMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        markupSet.add(_trans.RecId);
        markupMap.insert(_trans.RecId, _trans.buf2con());
        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.appendTrans([ tableNum(MarkupTrans), _trans.RecId, 0 ], _trans.CalculatedAmount);
            }
            else
            {
                factureCreate.appendTrans([ tableNum(MarkupTrans), _trans.RecId, 0 ], _trans.CalculatedAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRoundOff</Name>
				<Source><![CDATA[
    final public void insertRoundOff(Common _jour,
                                     NoYes  _updateJour = NoYes::No)
    {
        CustVendInvoiceJour localCustVendInvoiceJour = _jour;
        ;

        if (! localCustVendInvoiceJour.RoundOff_W || this.roundOffFactured(localCustVendInvoiceJour.RecId))
            return;

        roundOffSet.add(localCustVendInvoiceJour.RecId);

        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.appendTrans([ this.jourTableId(),
                                            localCustVendInvoiceJour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceRoundOff ],
                                            localCustVendInvoiceJour.RoundOff_W);
            }
            else
            {
                factureCreate.appendTrans([ this.jourTableId(),
                                            localCustVendInvoiceJour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceRoundOff ],
                                            localCustVendInvoiceJour.RoundOff_W);
            }
        }

        if (_updateJour)
        {
            this.insertJourWithUpdate(localCustVendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAccountField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourAccountField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAmountField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourAmountField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectField</Name>
				<Source><![CDATA[
    abstract protected fieldName invoiceJourCorrectField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectFieldDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source containing the correction type field.
    /// </summary>
    /// <returns>
    /// The data source containing the correction type field.
    /// </returns>
    abstract protected FormDataSource invoiceJourCorrectFieldDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectionTypeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the correction type field.
    /// </summary>
    /// <returns>
    /// The field ID for the correction type field.
    /// </returns>
    abstract protected fieldId invoiceJourCorrectionTypeField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectionTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the table containing the correction type field.
    /// </summary>
    /// <returns>
    /// The table ID of the table containing the correction type field.
    /// </returns>
    protected tableId invoiceJourCorrectionTypeTable()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCurrencyField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourCurrencyField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDatasource</Name>
				<Source><![CDATA[
    abstract protected FormDataSource invoiceJourDatasource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDateField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourDateField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDefaultDimensionField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets name of default dimension field of the invoice journal.
    /// </summary>
    /// <returns>
    /// Name of default dimension field of the invoice journal.
    /// </returns>
    abstract protected fieldName invoiceJourDefaultDimensionField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedField</Name>
				<Source><![CDATA[
    abstract protected fieldName invoiceJourFacturedField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedFieldDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>FormDataSource</c> class which contains
    /// invoice journal factured field.
    /// </summary>
    /// <returns>
    /// Returns the instance of <c>FormDataSource</c> class.
    /// </returns>
    abstract protected FormDataSource invoiceJourFacturedFieldDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourIdField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourIdField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventOwnerIdField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourInventOwnerIdField()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventOwnerIdFieldDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>FormDataSource</c> class which contains
    /// inventory owner field.
    /// </summary>
    /// <returns>
    /// Returns the instance of <c>FormDataSource</c> class.
    /// </returns>
    abstract protected FormDataSource invoiceJourInventOwnerIdFieldDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeField</Name>
				<Source><![CDATA[
    abstract protected fieldName invoiceJourInventProfileTypeField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeFieldDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>FormDataSource</c> class which contains
    /// inventory profile type field.
    /// </summary>
    /// <returns>
    /// Returns the instance of <c>FormDataSource</c> class.
    /// </returns>
    abstract protected FormDataSource invoiceJourInventProfileTypeFieldDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourRecIdField</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceJourRecIdField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentField</Name>
				<Source><![CDATA[
    abstract protected fieldName invoiceJourVATOnPaymentField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentFieldDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>FormDataSource</c> class which contains
    /// VAT on payment field.
    /// </summary>
    /// <returns>
    /// Returns the instance of <c>FormDataSource</c> class.
    /// </returns>
    abstract protected FormDataSource invoiceJourVATOnPaymentFieldDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkFieldNum</Name>
				<Source><![CDATA[
    abstract protected fieldId invoiceLinkFieldNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkTableNum</Name>
				<Source><![CDATA[
    abstract protected tableId invoiceLinkTableNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTransDatasource</Name>
				<Source><![CDATA[
    abstract protected FormDataSource invoiceTransDatasource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container which holds chain of correction journals.
    /// </summary>
    /// <returns>
    /// Container which holds chain of correction journals.
    /// </returns>
    public container jourList()
    {
        container               ret;
        RecId                   recId;
        SetEnumerator           setEnumerator;
        CorrectedInvoiceDate_RU correctedInvoiceDate;
        CorrectedInvoiceId_RU   correctedInvoiceId;
        CustVendInvoiceJour origInvoiceJour;
        CustVendInvoiceJour custVendInvoiceJour = new DictTable(this.jourTableId()).makeRecord();

        origInvoiceJour = custVendInvoiceJour.data();

        setEnumerator = jourSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            recId = setEnumerator.current();

            select firstonly custVendInvoiceJour
                where custVendInvoiceJour.RecId == recId;

            correctedInvoiceId = custVendInvoiceJour.getCorrectedInvoiceId_RU();
            correctedInvoiceDate = custVendInvoiceJour.getCorrectedInvoiceDate_RU();

            if (correctedInvoiceId && correctedInvoiceDate)
            {
                select firstonly origInvoiceJour
                    where origInvoiceJour.InvoiceAccount == custVendInvoiceJour.InvoiceAccount
                       && origInvoiceJour.InvoiceId      == correctedInvoiceId
                       && origInvoiceJour.InvoiceDate    == correctedInvoiceDate;

                if (origInvoiceJour)
                {
                    ret += [origInvoiceJour];
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    protected tableId jourTableId()
    {
        ;
        Error::missingOverload(funcName());
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFullyFactured</Name>
				<Source><![CDATA[
    final protected boolean markupFullyFactured(tableId _tableId,
                                                recId   _recId)

    {
        boolean ret = true;

        this.selectMarkupTrans(_tableId, _recId);
        while (ret && tmpMarkupTrans)
        {
            ret = tmpMarkupTrans.fullyFactured_RU();
            next tmpMarkupTrans;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupsNotIncluded</Name>
				<Source><![CDATA[
    final protected boolean markupsNotIncluded(tableId _tableId,
                                               recId   _recId)
    {
        boolean matchNotFound = true;

        this.selectMarkupTrans(_tableId, _recId);
        while (tmpMarkupTrans && matchNotFound)
        {
            matchNotFound = ! markupSet.in(tmpMarkupTrans.RecId);
            next tmpMarkupTrans;
        }

        return matchNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    final public void new(FactureJourCreate_RU _factureCreate)
    {
        super(_factureCreate);

        roundOffSet = new Set(typeName2Type(extendedTypeStr(recId)));
        endDiscSet  = new Set(typeName2Type(extendedTypeStr(recId)));

        roundOffEn  = roundOffSet.getEnumerator();
        endDiscEn   = endDiscSet.getEnumerator();

        roundOffMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Enum);
        endDiscMap  = new Map(typeName2Type(extendedTypeStr(recId)), Types::Enum);

        tmpJour     = new DictTable(this.jourTableId()).makeRecord();
        localJour   = new DictTable(this.jourTableId()).makeRecord();
        tmpTrans    = new DictTable(this.transTableId()).makeRecord();

        markupTransMap = new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
    protected CustVendAC offAccount()
    {
        return this.contragent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEndDisc</Name>
				<Source><![CDATA[
    final public void removeEndDisc(Common _jour,
                                    NoYes  _updateJour = NoYes::No)
    {
        endDiscSet.remove(_jour.RecId);

        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.removeTransMap([ this.jourTableId(),
                                            _jour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceEndDisc ]);
            }
            else
            {
                factureCreate.removeTrans([ this.jourTableId(),
                                            _jour.RecId,
                                            0,
                                            FactureLineType_RU::InvoiceEndDisc ]);
            }
        }

        if (_updateJour)
        {
            select firstonly tmpJour
                where tmpJour.RecId == _jour.RecId;

            if (this.jourHasNoSelectedChildren())
            {
                this.removeJourWithUpdate(_jour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJourWithUpdate</Name>
				<Source><![CDATA[
    final protected void removeJourWithUpdate(CustVendInvoiceJour _jour)
    {
        super(_jour);

        if (jourSet.elements())
        {
            jourEn = jourSet.getEnumerator();
            jourEn.moveNext();

            select firstonly tmpJour
                where tmpJour.RecId == jourEn.current();
            consignor = tmpJour.CustVendInvoiceJour::getConsignorAccount_RU();
            consignee = tmpJour.CustVendInvoiceJour::getConsigneeAccount_RU();
            extFactureIdNumSeqGroup = tmpJour.NumberSequenceGroupId;

            while (jourEn.moveNext() && (consignor || consignee))
            {
                select firstonly tmpJour
                    where tmpJour.RecId == jourEn.current();
                if (consignor && consignor != tmpJour.CustVendInvoiceJour::getConsignorAccount_RU())
                {
                    consignor = '';
                }
                if (consignee && consignee != tmpJour.CustVendInvoiceJour::getConsigneeAccount_RU())
                {
                    consignee = '';
                }
                if (extFactureIdNumSeqGroup && extFactureIdNumSeqGroup != tmpJour.NumberSequenceGroupId)
                {
                    extFactureIdNumSeqGroup = '';
                }
            }
        }
        else
        {
            consignor               = '';
            consignee               = '';
            extFactureIdNumSeqGroup = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLinkedTrans</Name>
				<Source><![CDATA[
    final protected void removeLinkedTrans(Common _trans)
    {
        CustVendInvoiceTrans localCustVendInvoiceTrans = _trans;
        TaxCode              tmpCode;
        SetEnumerator        se;
        boolean              ret;
        void getFirstMarkupTrans()
        {
            if (isInsertAllJours)
            {
                se = markupTransSet.getEnumerator();
                ret = se.moveNext();
            }
            else
            {
                select tmpMarkupTrans
                    where tmpMarkupTrans.TransTableId   == localCustVendInvoiceTrans.TableId &&
                      tmpMarkupTrans.TransRecId         == localCustVendInvoiceTrans.RecId   &&
                      tmpMarkupTrans.CustVendPosted_RU                &&
                      tmpMarkupTrans.ItemPosted_RU;
                ret = tmpMarkupTrans.RecId;
            }
        }
        MarkupTrans getCurMarkupTrans()
        {
            MarkupTrans markupTransLoc;
            if (isInsertAllJours)
            {
                markupTransLoc.con2buf(se.current());
            }
            else
            {
                markupTransLoc = tmpMarkupTrans;
            }
            return markupTransLoc;
        }
        void getNextMarkupTrans()
        {
            if (isInsertAllJours)
            {
                ret = se.moveNext();
            }
            else
            {
                next tmpMarkupTrans;
                ret = tmpMarkupTrans.RecId;
            }
        }
        if (isInsertAllJours)
        {
            tmpCode = taxCodeMap.lookup([localCustVendInvoiceTrans.TaxGroup_RU, localCustVendInvoiceTrans.TaxItemGroup_RU]);
            markupTransSet = Set::create(markupTransMap.lookup([localCustVendInvoiceTrans.TableId, localCustVendInvoiceTrans.RecId, true]));
            se = markupTransSet.getEnumerator();
        }
        else
        {
            tmpCode = TaxTable::vatCode_RU(localCustVendInvoiceTrans.TaxGroup_RU, localCustVendInvoiceTrans.TaxItemGroup_RU);
        }

        getFirstMarkupTrans();
        while (ret)
        {
            getCurMarkupTrans();
            if (TaxTable::vatCode_RU(tmpMarkupTrans.TaxGroup, tmpMarkupTrans.TaxItemGroup) != tmpCode)
            {
                this.removeMarkup(tmpMarkupTrans);
            }
            getNextMarkupTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarkup</Name>
				<Source><![CDATA[
    final public void removeMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        markupSet.remove(_trans.RecId);
        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.removeTransMap([ tableNum(MarkupTrans), _trans.RecId, 0 ]);
            }
            else
            {
                factureCreate.removeTrans([ tableNum(MarkupTrans), _trans.RecId, 0 ]);
            }
        }

        if (_updateJour)
        {
            switch (_trans.TransTableId)
            {
                case this.jourTableId()  :
                    select firstonly tmpJour
                        where tmpJour.RecId == _trans.TransRecId;
                    break;
                case this.transTableId() :
                    select firstonly tmpTrans
                        where tmpTrans.RecId == _trans.TransRecId;
                    this.findJourByTrans(tmpTrans);
                    break;
            }

            if (this.jourHasNoSelectedChildren())
            {
                this.removeJourWithUpdate(tmpJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRoundOff</Name>
				<Source><![CDATA[
    final public void removeRoundOff(Common _jour,
                                     NoYes  _updateJour = NoYes::No)
    {
        roundOffSet.remove(_jour.RecId);

        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.removeTransMap([ this.jourTableId(), _jour.RecId, 0, FactureLineType_RU::InvoiceRoundOff ]);
            }
            else
            {
                factureCreate.removeTrans([ this.jourTableId(), _jour.RecId, 0, FactureLineType_RU::InvoiceRoundOff ]);
            }
        }

        if (_updateJour)
        {
            select firstonly tmpJour
                where tmpJour.RecId == _jour.RecId;

            if (this.jourHasNoSelectedChildren())
            {
                this.removeJourWithUpdate(_jour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffExistsFacture</Name>
				<Source><![CDATA[
    abstract protected boolean roundOffExistsFacture(Common _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffFactured</Name>
				<Source><![CDATA[
    final public boolean roundOffFactured(recId _recId)
    {
        boolean ret;

        if (roundOffMap.exists(_recId))
        {
            ret = roundOffMap.lookup(_recId);
        }
        else
        {
            select firstonly tmpJour
                where tmpJour.RecId == _recId;

            ret = (tmpJour.RoundOff_W == 0)        ||
                  this.roundOffExistsFacture(tmpJour);

            roundOffMap.insert(_recId, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffGroup</Name>
				<Source><![CDATA[
    abstract protected FormGroupControl roundOffGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectMarkupTrans</Name>
				<Source><![CDATA[
    final private void selectMarkupTrans(tableId _tableId,
                                         recId   _recId)
    {
        if (isInsertAllJours)
        {
            markupTransSet = Set::create(markupTransMap.lookup([_tableId, _recId, false]));
        }
        else
        {
            select tmpMarkupTrans
                where tmpMarkupTrans.TransRecId   == _recId     &&
                      tmpMarkupTrans.TransTableId == _tableId   &&
                      tmpMarkupTrans.CustVendPosted_RU          &&
                      ! tmpMarkupTrans.ItemPosted_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCache</Name>
				<Source><![CDATA[
    protected void setCache()
    {
        container markupTransCon;
        container taxCodeCon;
        if (!markupTransCached || cachedQueryRun != currentQueryRun)
        {
            cachedQueryRun = this.mainQueryRun().pack();
            [markupTransCon, taxCodeCon] = FactureEditLinesEngineCustVend_RU::getCacheData(cachedQueryRun, this.jourTableId());

            markupTransMap  = Map::create(markupTransCon);
            taxCodeMap      = Map::create(taxCodeCon);
            markupTransCached = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileTypeRange</Name>
				<Source><![CDATA[
    private void setInventProfileTypeRange()
    {
        InventProfileType_RU    inventProfileType;
        SetEnumerator           setEnumerator = this.allowedInventProfileTypes().getEnumerator();
        Range                   queryRange;

        setEnumerator.moveNext();
        while (setEnumerator.moveNext())
        {
            inventProfileType = setEnumerator.current();

            if (inventProfileTypeControl.selection() == inventProfileType)
            {
                queryRange = queryRangeConcat(queryRange, inventProfileType);
                if (inventProfileTypeControl.selection() == InventProfileType_RU::General)
                {
                    queryRange = queryRangeConcat(queryRange, InventProfileType_RU::NotSpecified);
                }
            }
        }
        inventProfileTypeFilter.value(queryRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        boolean isCommTrade = inventProfileTypeControl.selection() == InventProfileType_RU::CommissionAgent ||
                              inventProfileTypeControl.selection() == InventProfileType_RU::CommissionPrincipalAgent;
        
        creditNoteControl.visible(true);
        positiveControl.visible(false);
        showJournalsControl.visible(false);
        externalDateGroupControl.visible(true);
        vatOnPaymentControl.visible(true);
        correctControl.visible(true);
        correctionGroupControl.visible(correctControl.value());
        inventProfileTypeControl.visible(true);
        inventOwnerIdControl.visible(false);
     
        commissionGroupControl.visible(isCommTrade);
        invAmountGroupControl.visible(! this.useCommReportedQty());
        commAmountGroupControl.visible(this.useCommReportedQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
    final protected str transHeaderName()
    {
        return "@GLS104541";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
    final public str transName(CustVendInvoiceTrans _trans)
    {
        return factureCreate                                                   ?
               strFmt("@GLS104573",
                      _trans.InvoiceNum,
                      _trans.ItemId ? _trans.ItemId : EcoResCategory::find(_trans.Category_RU).Name,
                      _trans.Name_RU,
                      (isInsertAllJours ?
                       this.lookupTrans([ _trans.TableId, _trans.RecId, _trans.RefCommReportTrans_RU ]) :
                       factureCreate.lookupTrans([ _trans.TableId, _trans.RecId, _trans.RefCommReportTrans_RU ]))) :
               "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected tableId transTableId()
    {
        ;
        Error::missingOverload(funcName());
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllMarkups</Name>
				<Source><![CDATA[
    final protected void updateAllMarkups(tableId _tableId,
                                          recId   _recId,
                                          boolean _insert)
    {
        SetEnumerator se;
        boolean ret;
        void getFirstMarkupTrans()
        {
            if (isInsertAllJours)
            {
                se = markupTransSet.getEnumerator();
                ret = se.moveNext();
            }
            else
            {
                ret = tmpMarkupTrans.RecId;
            }
        }
        MarkupTrans getCurMarkupTrans()
        {
            MarkupTrans markupTransLoc;
            if (isInsertAllJours)
            {
                markupTransLoc.con2buf(se.current());
            }
            else
            {
                markupTransLoc = tmpMarkupTrans;
            }
            return markupTransLoc;
        }
        void getNextMarkupTrans()
        {
            if (isInsertAllJours)
            {
                ret = se.moveNext();
            }
            else
            {
                next tmpMarkupTrans;
                ret = tmpMarkupTrans.RecId;
            }
        }

        this.selectMarkupTrans(_tableId, _recId);
        getFirstMarkupTrans();
        while (ret)
        {
            tmpMarkupTrans = getCurMarkupTrans();
            if (_insert)
            {
                this.insertMarkup(tmpMarkupTrans);
            }
            else
            {
                this.removeMarkup(tmpMarkupTrans);
            }
            getNextMarkupTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
    final public void updateMarkup(MarkupTrans _trans,
                             Amount      _amount)
    {
        this.insertMarkup(_trans, NoYes::Yes);
        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.updateTransMap([ _trans.TableId, _trans.RecId, 0 ], _amount);
            }
            else
            {
                factureCreate.updateTrans([ _trans.TableId, _trans.RecId, 0 ], _amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheData</Name>
				<Source><![CDATA[
    static private container getCacheData(container _queryRunPack, TableId _jourTableId)
    {
        const int jourDS = 1;

        MarkupTrans markupTrans;
        CustVendInvoiceJour     custVendInvoiceJour;
        CustVendInvoiceTrans    custVendInvoiceTrans;

        RefRecId    recId;
        RefTableId  tableId;
        TaxCode     tmpCode;

        QueryRun    queryRun        = new QueryRun(_queryRunPack);
        Map         markupTransMap  = new Map(Types::Container, Types::Container);
        Map         taxCodeMap      = new Map(Types::Container, Types::String);

        Set newSet()
        {
            return new Set(Types::Container);
        }
        void insertMap(Set _markupTransSet1, Set _markupTransSet2)
        {
            markupTransMap.insert([tableId, recId, true], _markupTransSet1.pack());
            markupTransMap.insert([tableId, recId, false], _markupTransSet2.pack());
        }
        void fillMap(MarkupTrans _markupTrans = null)
        {
            Set         markupTransSet1 = newSet();
            Set         markupTransSet2 = newSet();

            if (_markupTrans)
            {
                if (_markupTrans.ItemPosted_RU)
                {
                    markupTransSet1.add(_markupTrans.buf2con());
                }
                else
                {
                    markupTransSet2.add(_markupTrans.buf2con());
                }
            }
            else
            {
                while select markupTrans
                    where markupTrans.TransRecId   == recId     &&
                          markupTrans.TransTableId == tableId   &&
                          markupTrans.CustVendPosted_RU
                {
                    if (markupTrans.ItemPosted_RU)
                    {
                        markupTransSet1.add(markupTrans.buf2con());
                    }
                    else
                    {
                        markupTransSet2.add(markupTrans.buf2con());
                    }
                }
            }
            insertMap(markupTransSet1, markupTransSet2);
        }
        if (_jourTableId == tableNum(CustInvoiceJour))
        {
            custVendInvoiceTrans = new DictTable(tableNum(CustInvoiceTrans)).makeRecord();
        }
        else
        {
            custVendInvoiceTrans = new DictTable(tableNum(VendInvoiceTrans)).makeRecord();
        }

        queryRun.reset();
        while (queryRun.next())
        {
            custVendInvoiceJour = queryRun.getNo(jourDS);
            if (queryRun.changedNo(jourDS))
            {
                recId = custVendInvoiceJour.RecId;
                tableId = custVendInvoiceJour.TableId;
                fillMap();
            }

            while select custVendInvoiceTrans
                where custVendInvoiceTrans.SalesPurchId_RU           == custVendInvoiceJour.Num                   &&
                      custVendInvoiceTrans.InvoiceNum                == custVendInvoiceJour.InvoiceId             &&
                      custVendInvoiceTrans.InvoiceDate               == custVendInvoiceJour.InvoiceDate           &&
                      custVendInvoiceTrans.NumberSequenceGroupId_RU  == custVendInvoiceJour.NumberSequenceGroupId &&
                      (_jourTableId != tableNum(VendInvoiceJour) ||
                       custVendInvoiceTrans.PurchInternalInvoiceId_RU == custVendInvoiceJour.PurchInternalInvoiceId_RU)
            outer join markupTrans
                where markupTrans.TransRecId   == custVendInvoiceTrans.RecId     &&
                      markupTrans.TransTableId == custVendInvoiceTrans.TableId   &&
                      markupTrans.CustVendPosted_RU
            {
                if (!taxCodeMap.exists([custVendInvoiceTrans.TaxGroup_RU, custVendInvoiceTrans.TaxItemGroup_RU]))
                {
                    tmpCode = TaxTable::vatCode_RU(custVendInvoiceTrans.TaxGroup_RU, custVendInvoiceTrans.TaxItemGroup_RU);
                    taxCodeMap.insert([custVendInvoiceTrans.TaxGroup_RU, custVendInvoiceTrans.TaxItemGroup_RU], tmpCode);
                }
                tableId = custVendInvoiceTrans.TableId;
                recId   = custVendInvoiceTrans.RecId;
                if (markupTrans)
                {
                    fillMap(markupTrans);
                }
                else
                {
                    insertMap(newSet(), newSet());
                }
            }
        }
        return [markupTransMap.pack(), taxCodeMap.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCommReportedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether report for principal line quantity should be used in facture line.
    /// </summary>
    /// <returns>
    /// True if report for principal line quantity should be used in facture line; otherwise false.
    /// </returns>
    public boolean useCommReportedQty()
    {
        return inventProfileTypeControl &&
              (inventProfileTypeControl.selection() == InventProfileType_RU::CommissionAgent ||
               inventProfileTypeControl.selection() == InventProfileType_RU::CommissionPrincipalAgent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>