<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DirPartyMerge
{
    container       selectedParties;
    Notes           notes;
    boolean         hideInfo;
    DirPartyRecId   partyId;
    Map             partyDataAreaMap;
    MapEnumerator   partyMapEnumerator;
    container       partyMapValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mergedPartyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the party to keep.
    /// </summary>
    /// <param name="_partyId">
    ///    Sets the value.
    /// </param>
    /// <returns>
    ///    The party record ID to keep after the merge.
    /// </returns>
    public DirPartyRecId mergedPartyId(DirPartyRecId _partyId = partyId)
    {
        partyId = _partyId;
        return partyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    Notes parmNotes(Notes _notes = notes)
    {
        notes = _notes;
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedParties</Name>
				<Source><![CDATA[
    container parmSelectedParties(container _selectedParties = selectedParties)
    {
        selectedParties = _selectedParties;
        return selectedParties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfo</Name>
				<Source><![CDATA[
    boolean parmShowInfo(boolean _showInfo = !hideInfo)
    {
        hideInfo = !_showInfo;
        return !hideInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>runOnServer</c> method and shows the information message, if it is required.
    /// </summary>
    void run()
    {
        boolean res;

        res = DirPartyMerge::runOnServer(partyId, notes, selectedParties);
        if (res && !hideInfo)
        {
            // Merge successfully completed
            info("@SYS111892");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHRMPartiesMerge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the selected HRM parties can be successfully merged.
    /// </summary>
    /// <param name="_selectedPartyRecId">
    /// The record ID of the target party.
    /// </param>
    /// <param name="_mergingParties">
    /// A container that contains the selected parties to merge.
    /// </param>
    /// <param name="_hideinfo">
    /// A Boolean value that indicates whether to display the information message.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the selected parties can be successfully merged.
    /// </returns>
    /// <remarks>
    /// The following parties cannot be merged: Applicant and Contact , Applicant and Worker, Worker and
    /// Contact.
    /// </remarks>
    public boolean validateHRMPartiesMerge(DirPartyRecId _selectedPartyRecId, container _mergingParties, boolean _hideinfo)
    {
        DirPartyRecId mergingPartyRecId;
        boolean       val;
        DirPartyName  selectedPartyName;
        DirPartyName  mergingPartyName;
        boolean       isSelectedApplicant, isSelectedWorker, isSelectedContact;
        boolean       isMergingApplicant, isMergingWorker, isMergingContact;

        mergingPartyRecId = conPeek(_mergingParties, 1);
        isMergingWorker = DirPartyTableHelper::isWorker(mergingPartyRecId);
        isMergingApplicant = DirPartyTableHelper::isApplicant(mergingPartyRecId);
        isMergingContact = DirPartyTableHelper::isContactPerson(mergingPartyRecId);
        isSelectedWorker = DirPartyTableHelper::isWorker(_selectedPartyRecId);
        isSelectedApplicant = DirPartyTableHelper::isApplicant(_selectedPartyRecId);
        isSelectedContact = DirPartyTableHelper::isContactPerson(_selectedPartyRecId);

        val = false;
        if ((isMergingWorker && (isSelectedApplicant || isSelectedContact)) ||
        (isMergingApplicant && (isSelectedWorker || isSelectedContact)) ||
        (isMergingContact && (isSelectedApplicant || isSelectedWorker)))
        {
            val = true;
        }

        if (val)
        {
            selectedPartyName = DirPartyTable::getName(_selectedPartyRecId);
            mergingPartyName = DirPartyTable::getName(mergingPartyRecId);

            return _hideinfo ? false : checkFailed(strFmt("@SYS345437", selectedPartyName, mergingPartyName));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMerge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the selected parties can be successfully merged.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the selected parties can be successfully merged.
    /// </returns>
    /// <remarks>
    ///    1 - Parties should be the same type. 2 - There should not be the same role, such as Customer,
    ///    Vendor, BusRel, and so on, for any parties to merge.
    /// </remarks>
    public boolean validateMerge()
    {
        int         i;
        boolean     ret = true;

        if (!partyId)
        {
            // !UA Directory ids must be filled.
            return hideinfo ? false : checkFailed("@SYS112191");
        }
        if (conLen(selectedParties) == 1 && partyId == conPeek(selectedParties,1))
        {
            // Cannot merge to itself.
            return hideinfo ? false : checkFailed("@SYS111888");
        }

        ret = ret && DirPartyMerge::validateTypeConflict(selectedParties, hideinfo);

        i = conFind(selectedParties,partyId);
        if (i)
        {
            selectedParties = conDel(selectedParties,i,1);
        }

        ret = ret && this.validateHRMPartiesMerge(partyId, selectedParties, hideinfo);
        ret = ret && DirPartyMerge::validatePartiesConflict(partyId, selectedParties, hideinfo);

        selectedParties = [partyId] + selectedParties;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the field ID of the party for a table.
    /// </summary>
    /// <param name="tableId">
    ///    The table ID for the corresponding entity.
    /// </param>
    /// <param name="_partyType">
    ///    The <c>DirPartyType</c> to use to determine for contact person.
    /// </param>
    /// <returns>
    ///    A <c>FieldId</c> value that is based on the specified table ID.
    /// </returns>
    static FieldId getPartyFieldId(TableId tableId,DirPartyType _partyType)
    {
        FieldId fieldId;

        switch (tableId)
        {
            case tableNum(ContactPerson) :
                if (_partyType == DirPartyType::Organization)
                {
                    fieldId = fieldNum(ContactPerson,ContactForParty);
                }
                else if (_partyType == DirPartyType::Person)
                {
                    fieldId = fieldNum(ContactPerson,Party);
                }
                break;

            default:
                fieldId = DirParty::getPartyFieldId(tableId);
                break;
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges multiple party records that are of the same type.
    /// </summary>
    /// <param name="_targetParty">
    /// The record ID of the party to keep.
    /// </param>
    /// <param name="_notes">
    /// Any comments or reasons for the merge.
    /// </param>
    /// <param name="_selectedParties">
    /// All the parties selected to merge.
    /// </param>
    /// <returns>
    /// true if the merge is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// 1 - Gather target party information and get the primary postal and electronic address of the target
    /// party. 2 - Iterate through the parties to merge and do the following: a. Delete address books that
    /// will cause duplicate records. Remove the primary flag for the postal address if one already exists.
    /// c. Remove the primary flag for electronic address for each type if one already exists. d. Delete
    /// invalid relationships. e. Update document records to the target party. f. Delete name history 3 -
    /// Merge the parties 4 - Create a docuRef record for note.
    /// </remarks>
    static boolean runOnServer(DirPartyRecId _targetParty, Notes _notes, container _selectedParties)
    {
        #DirParty
        #Admin

        DocuRef                             docuRef;
        DirPartyTable                       sourcePartyRecord;
        DirPartyTable                       targetPartyRecord;
        DirPartyRecId                       sourceParty;
        DirPartyLocation                    partyLocation;
        LogisticsElectronicAddress          electronicAddress;
        DirPartyRelationship                partyRelationship;
        DirPartyRelationship                partyRelationshipDup;
        DirOrganizationName                 organizationName;
        DirPartyMemo                        targetDirPartyMemo;
        DirPartyMemo                        sourceDirPartyMemo;
        DirPersonName                       personName;
        DirAddressBookParty                 addressBookParty;
        HcmPersonSkillMapping               personSkillMapping;
        HcmPersonPrivateDetails             personPrivateDetails;
        HcmPersonPrivateCitizenshipDetails  citizenshipDetails;
        HcmPersonCertificate                personCertificate;
        CustHierarchyNode                   custHierarchyNode;
        int                                 i, j, counter;
        container                           targetAddressBooks, targetPrimaryContactInfoType, sourceElectronicAddresses;
        RecId addressBook;
        boolean                             primaryAddressExists, targetDirPartyMemoCreated;
        utcdatetime minDateTime = DateTimeUtil::minValue(), maxDateTime = DateTimeUtil::maxValue();

        DirAddressBookParty                 targetAddressBookParty;
        DirPartyTable                       sourcePartyTable;
        container                           sourceAddressBooks;
        boolean                             foundActiveInTarget, foundActiveInSource;
        smmActivityParentLinkTable          smmActivityParentLinkTable;
        smmBusRelTable                      targetProspectTable,sourceProspectTable;
        DirPartyView                        dirPartyView;
        RecId                               electronicAddressLocation, electronicAddressRecid, sourcePartyLogisticsLocation;
        LogisticsLocation                   logisticsLocation;

        ttsbegin;
        targetPartyRecord = DirPartyTable::findRec(_targetParty,true);
        targetAddressBooks = conPeek(targetPartyRecord.addressBooks(), #ADDRESSBOOKID);

        // Get target primary address
        select firstonly RecId from partyLocation where partyLocation.Party == _targetParty && partyLocation.IsPrimary == true && partyLocation.IsPostalAddress == true;
        primaryAddressExists = (partyLocation.RecId != 0);

        // Get target's primary electronic address types
        while select RecId from partyLocation
            where partyLocation.Party == _targetParty &&
                partyLocation.IsPostalAddress == false
            join Type from electronicAddress
                where electronicAddress.Location == partyLocation.Location &&
                      electronicAddress.IsPrimary == true
        {
            targetPrimaryContactInfoType += electronicAddress.Type;
        }

        electronicAddressLocation = (select firstonly Location from DirPartyLocation
                                        where   DirPartyLocation.Party == _targetParty &&
                                                DirPartyLocation.IsPostalAddress == false).Location;

        _selectedParties = conDel(_selectedParties, 1, conFind(_selectedParties, _targetParty));

        // Iterate through the parties that will be merged
        for (i=1 ; i<=conLen(_selectedParties) ; i++)
        {
            sourceParty = conPeek(_selectedParties,i);


            // Remove location from source party which is shared with target party
            // Case 1: If both source and target parties share same location and non of them are location owner     => Delete the location of the source party
            // Case 2: If both source and target parties share same location and source party is the location owner => Do not Merge
            // Case 3  If both source and target parties share same location and target party is the location owner => Delete the location of the source party
            DirPartyLocation sourceLocation;
            while select forupdate sourceLocation
                where sourceLocation.Party == sourceParty && sourceLocation.IsPostalAddress == true
            {
                DirPartyLocation targetLocation;

                select firstonly forupdate targetLocation
                    where targetLocation.Party == _targetParty && targetLocation.Location == sourceLocation.Location && targetLocation.IsPostalAddress == true ;

                if(targetLocation)
                {
                    // Case 2
                    if(sourceLocation.isLocationOwner == NoYes::Yes)
                    {
                        throw Error("@GlobalAddressBook:DirPartyMergeMultipleLocation");
                    }
                    // Case 1 and Case 3
                    sourceLocation.doDelete();
                }

            }



            // Delete address book party records that will cause duplicate records
            while select forupdate validTimeState(minDateTime, maxDateTime) targetAddressBookParty
                    where targetAddressBookParty.Party == _targetParty
            {
                foundActiveInSource = false;
                foundActiveInTarget = false;

                // Check if record is an active record in target, delete from source
                for (counter = 1; counter <= conLen(targetAddressBooks); counter++)
                {
                    addressBook = conPeek(targetAddressBooks, counter);
                    if ( addressBook == targetAddressBookParty.AddressBook)
                    {
                        foundActiveInTarget = true;
                        delete_from addressBookParty
                            where addressBookParty.Party        == sourceParty &&
                                  addressBookParty.AddressBook  == addressBook;
                    }
                }

                // else if it is not an active record in target
                // check if it is an active record in source then delete from target
                if (!foundActiveInTarget)
                {
                    sourcePartyTable = DirPartyTable::findRec(sourceParty,true);
                    sourceAddressBooks = conPeek(sourcePartyTable.addressBooks(), #ADDRESSBOOKID);
                    for (counter = 1; counter <= conLen(sourceAddressBooks); counter++)
                    {
                        addressBook = conPeek(sourceAddressBooks, counter);

                        if ( addressBook == targetAddressBookParty.AddressBook)
                        {
                            foundActiveInSource = true;
                            delete_from addressBookParty
                                where addressBookParty.Party        == _targetParty &&
                                      addressBookParty.AddressBook  == addressBook;
                        }
                    }
                }
                // else if it is not an active record in target and source
                // but there is corresponding record in source then delete the same from source
                if (!foundActiveInTarget && !foundActiveInSource)
                {
                    delete_from addressBookParty
                        where   addressBookParty.Party          == sourceParty &&
                                addressBookParty.AddressBook    == targetAddressBookParty.AddressBook;
                }
            }

            // Remove primary postal address from source party
            select firstonly forupdate partyLocation
                where partyLocation.Party == sourceParty && partyLocation.IsPostalAddress == true && partyLocation.IsPrimary == true;

            if (partyLocation)
            {
                if (primaryAddressExists)
                {
                    partyLocation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    partyLocation.IsPrimary = false;
                    partyLocation.doUpdate();
                }
                else
                {
                    primaryAddressExists = true;
                }
            }
              
            // Remove primary electronic address from source party
            while select forupdate electronicAddress
                join Location from partyLocation
                where electronicAddress.Location == partyLocation.Location &&
                      partyLocation.Party == sourceParty &&
                      partyLocation.IsPostalAddress == false
            {
                sourceElectronicAddresses += electronicAddress.RecId;
                if (conFind(targetPrimaryContactInfoType, electronicAddress.Type))
                {
                    electronicAddress.IsPrimary = false;
                    electronicAddress.doUpdate();
                }
                else
                {
                    targetPrimaryContactInfoType += electronicAddress.Type;
                    switch (electronicAddress.Type)
                    {
                        case LogisticsElectronicAddressMethodType::Email :
                            targetPartyRecord.PrimaryContactEmail = electronicAddress.RecId;
                            break;
                        case LogisticsElectronicAddressMethodType::Phone :
                            targetPartyRecord.PrimaryContactPhone = electronicAddress.RecId;
                            break;
                        case LogisticsElectronicAddressMethodType::Fax :
                            targetPartyRecord.PrimaryContactFax = electronicAddress.RecId;
                            break;
                        case LogisticsElectronicAddressMethodType::URL :
                            targetPartyRecord.PrimaryContactURL = electronicAddress.RecId;
                            break;
                        case LogisticsElectronicAddressMethodType::Telex :
                            targetPartyRecord.PrimaryContactTelex = electronicAddress.RecId;
                            break;
                        default :
                            break;
                    }
                    targetPartyRecord.doUpdate();
                }
            }

            // All electronic addresses in logisticselectronic address table are referred using a single dirpartylocation record.
            for (j=1 ; j<=conLen(sourceElectronicAddresses) ; j++)
            {
                electronicAddressRecid = conPeek(sourceElectronicAddresses, j);

                select firstonly forupdate electronicAddress
                    where electronicAddress.RecId == electronicAddressRecid;

                electronicAddress.Location = electronicAddressLocation;
                electronicAddress.update();
            }

            select firstOnly forupdate logisticsLocation
                join partyLocation
                where logisticsLocation.RecId == partyLocation.Location &&
                      partyLocation.Party == sourceParty &&
                      partyLocation.IsPostalAddress == false;
            // Delete irrelevant logisitics locations of source party.
            sourcePartyLogisticsLocation = logisticsLocation.RecId;
            logisticsLocation.doDelete();

            // Delete irrelevant partylocation records
            while select forUpdate partyLocation
                   where partyLocation.Location == sourcePartyLogisticsLocation &&
                         partyLocation.Party == sourceParty &&
                         partyLocation.IsPostalAddress == false
            {
                partyLocation.doDelete();
            }

            // Delete irrelevant relationships
            while select forupdate partyRelationship
                where (partyRelationship.ParentParty == _targetParty &&
                      partyRelationship.ChildParty == sourceParty) ||
                      (partyRelationship.ParentParty == sourceParty &&
                      partyRelationship.ChildParty == _targetParty)
            {
                partyRelationship.doDelete();
            }

            // Delete relationships (in which both parties are parent) which will lead to duplicate
            while select forupdate partyRelationship
                    where partyRelationship.ParentParty == sourceParty
                exists join partyRelationshipDup
                    where partyRelationshipDup.ParentParty == _targetParty &&
                          partyRelationshipDup.ChildParty == partyRelationship.ChildParty &&
                          partyRelationshipDup.RelationshipTypeId == partyRelationship.RelationshipTypeId
            {
                partyRelationship.doDelete();
            }

            // Delete relationships(in which both parties are child)  which will lead to duplicacy
            while select forupdate partyRelationship
                    where partyRelationship.ChildParty == sourceParty
                exists join partyRelationshipDup
                    where partyRelationshipDup.ChildParty == _targetParty &&
                          partyRelationshipDup.ParentParty == partyRelationship.ParentParty &&
                          partyRelationshipDup.RelationshipTypeId == partyRelationship.RelationshipTypeId
            {
                partyRelationship.doDelete();
            }

            while select forupdate docuRef
                where docuRef.RefTableId == (tableNum(DirPartyTable))
                join sourcePartyRecord
                where sourcePartyRecord.RecId == sourceParty &&
                      sourcePartyRecord.RecId == docuRef.RefRecId
            {
                docuRef.Party = targetPartyRecord.RecId;
                docuRef.RefRecId = targetPartyRecord.RecId;
                docuRef.doUpdate();
            }

            // Name History
            if (targetPartyRecord.baseType() == DirPartyBaseType::Person)
            {
                delete_from personName where personName.Person == sourceParty;
            }
            else
            {
                delete_from organizationName where organizationName.Organization == sourceParty;
            }

            // Merge the contents of the Memos.
            select firstonly forupdate Memo from sourceDirPartyMemo
                where sourceDirPartyMemo.Party == sourceParty;
            if (sourceDirPartyMemo)
            {
                if (sourceDirPartyMemo.Memo != "")
                {
                    // targetDirPartyMemo is selected until we know that there is a sourcePartyMemo available to be merged.
                    // For this reason we first check if it hasn't been already selected by a previous iteration, if it is not then we select it
                    // or we create it in the event that it does not exist. (It does not exist if the user did not enter a value in the Memo field).
                    // This buffer is kept at hand for the next iterations and saved once after the loop is complete.
                    if (!targetDirPartyMemo && !targetDirPartyMemoCreated)
                    {
                        select firstonly forupdate Memo from targetDirPartyMemo
                            where targetDirPartyMemo.Party == _targetParty;
                        if (!targetDirPartyMemo)
                        {
                            targetDirPartyMemo.clear();
                            targetDirPartyMemo.initValue();
                            targetDirPartyMemo.Party = _targetParty;
                            targetDirPartyMemoCreated = true;
                        }
                    }
                    // Do not add new line if target memo is empty
                    if (targetDirPartyMemo.Memo == "")
                    {
                        targetDirPartyMemo.Memo = sourceDirPartyMemo.Memo;
                    }
                    else
                    {
                        targetDirPartyMemo.Memo = targetDirPartyMemo.Memo + "\n\n" + sourceDirPartyMemo.Memo;
                    }
                }
                // Delete this record to avoid a duplicate attempt when the parties are merged.
                sourceDirPartyMemo.delete();
            }

            if (RetailCustHierarchyNodeHardDeleteFlight::instance().isEnabled())
            {
                // Delete soft-deleted customer hierarchy nodes that will cause duplicate records.
                delete_from custHierarchyNode where CustHierarchyNode.Party == sourceParty;
            }

            //Deleting orphan records from the tables to prevent duplicate record exceptions while doing merge
            delete_from personSkillMapping where personSkillMapping.Person == sourceParty;
            delete_from personPrivateDetails where personPrivateDetails.Person == sourceParty;
            delete_from citizenshipDetails where citizenshipDetails.Person == sourceParty;
            delete_from personCertificate where personCertificate.Person == sourceParty;
        }

        //Handling Duplicate records while merging in for RU legal entity
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CFMDirPartyTable  cfmDirPartyTable;

            delete_from cfmDirPartyTable
                where cfmDirPartyTable.DirPartyTable == sourceParty;
        }


        // If we have this buffer at hand then changes have been made to it, if not we check if we have created it
        // we perform update/insert until here to avoid saving on each loop iteration and perform one trip to DB.
        if (targetDirPartyMemo)
        {
            targetDirPartyMemo.update();
        }
        else if (targetDirPartyMemoCreated)
        {
            targetDirPartyMemo.insert();
        }

        select firstonly RoleType from dirPartyView where dirPartyView.Party == _targetParty;

        for (i=1 ; i<=conLen(_selectedParties) ; i++)
        {
            sourceParty = conPeek(_selectedParties,i);

            if (_targetParty != sourceParty)
            {
                select firstonly forupdate sourcePartyRecord where sourcePartyRecord.RecId == sourceParty;
                if (sourcePartyRecord)
                {
                    select firstonly RecId from sourceProspectTable where sourceProspectTable.Party == sourceParty;
                    sourcePartyRecord.merge(targetPartyRecord);

                    // Run through all the activity parent links which are connected to the old party record and update the parent refrecId's with the target refrecId.
                    // this will update the parent links eg: person, organization
                    while select forupdate crosscompany smmActivityParentLinkTable
                        where smmActivityParentLinkTable.RefRecId == sourcePartyRecord.RecId
                        && smmActivityParentLinkTable.RefTableId == sourcePartyRecord.TableId
                    {
                        smmActivityParentLinkTable.RefRecId = targetPartyRecord.RecId;
                        changecompany(smmActivityParentLinkTable.DataAreaId)
                        {
                            smmActivityParentLinkTable.update();
                        }
                    }

                    if (dirPartyView && sourceProspectTable.RecId)
                    {
                        select firstonly forupdate targetProspectTable where targetProspectTable.Party == _targetParty;
                        if (targetProspectTable && sourceProspectTable.RecId == targetProspectTable.RecId)
                        {
                            targetProspectTable.BusRelTypeId = enum2Value(dirPartyView.RoleType);
                            targetProspectTable.update();
                        }
                    }
                }
            }
        }

        // Insert docuref for reason notes.
        docuRef.clear();
        docuRef.initValue();

        // Merge - Reason
        docuRef.Name = "@SYS115519";

        docuRef.Party = _targetParty;
        docuRef.TypeId = DocuType::typeNote();
        docuRef.Notes = _notes;
        docuRef.RefCompanyId = #DATCompany;
        docuRef.ActualCompanyId = curext();
        docuRef.RefTableId = tableNum(DirPartyTable);
        docuRef.RefRecId = _targetParty;
        docuRef.insert();

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePartiesConflict</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the parties to merge do not have the same role.
    /// </summary>
    /// <param name="_partyId">
    ///    The record ID of the target party.
    /// </param>
    /// <param name="_selectedParties">
    ///    A container that has the selected parties to merge.
    /// </param>
    /// <param name="_hideInfo">
    ///    A Boolean value that indicates whether to show the information message.
    /// </param>
    /// <returns>
    ///    A Boolean value that indicates whether there is a conflict.
    /// </returns>
    static boolean validatePartiesConflict(DirPartyRecId _partyId, container _selectedParties,boolean _hideInfo = false)
    {
        Query                   query;
        QueryRun                qRun;
        QueryBuildDataSource    qbDataSource;
        DirPartyType            partyType;
        int                     i;
        DictTable               dictTable;
        FieldId                 partyFieldId;
        Common                  common;
        TableId                 tableId;
        DataAreaId              dataAreaId;
        container               perCompanyList;
        boolean                 ret = true;
        container               partyTableList;

        Map                     partyDataAreaMap;
        container               partyMapValue;
        container               partyContacts, partyContactsFor;
        ContactPerson           contactPerson;
        MapEnumerator           partyMapEnumerator;

        partyTableList = DirParty::tableList();
        partyType = DirPartyTable::findRec(_partyId).type();
        query = new Query();
        query.queryType(QueryType::Union);
        query.allowCrossCompany(true);
        for (i=1 ; i <= conLen(partyTablelist);i++)
        {
            dictTable = new DictTable(conPeek(partyTableList,i));

            if (isConfigurationkeyEnabled(dictTable.configurationKeyId()))
            {
                qbDataSource = query.addDataSource(dictTable.id());
                qbDataSource.unionType(UnionType::UnionAll);
                qbDataSource.fields().dynamic(false);
                qbDataSource.fields().clearFieldList();
                partyFieldId = DirPartyMerge::getPartyFieldId(dictTable.id(),partyType);
                if (partyFieldId)
                {
                    qbDataSource.fields().addField(partyFieldId);
                    qbDataSource.addRange(partyFieldId).value((con2Str(_selectedParties+[_partyId])));
                }
                qbDataSource.fields().addField(dictTable.fieldName2Id(identifierStr(DataAreaId)));
                qbDataSource.addOrderByField(dictTable.fieldName2Id(identifierStr(DataAreaId)));
                qbDataSource.addOrderByField(dictTable.fieldName2Id(identifierStr(unionAllBranchId)));
            }
        }
        partyDataAreaMap = new Map(Types::String,Types::Container);
        dictTable = new DictTable(conPeek(partyTableList,1));
        qRun = new QueryRun(query);
        common = null;
        while (qRun.next())
        {
            common = qRun.getNo(1);
            if (conPeek(partyTableList, common.UnionAllBranchId) == tableNum(ContactPerson))
            {
                partyContacts += [common.RecId];

                select firstonly ContactForParty from contactPerson where contactPerson.RecId == common.RecId;

                if (conFind(partyContactsFor, contactPerson.ContactForParty) > 0)
                {
                    return checkFailed(strFmt("@SYS123373", tableId2pname(tableNum(ContactPerson))));
                }
                else
                {
                    partyContactsFor += contactPerson.ContactForParty;
                }
            }
            else
            {
                if (partyDataAreaMap.exists(common.DataAreaId))
                {
                    partyMapValue = partyDataAreaMap.lookup(common.DataAreaId);
                }
                else
                {
                    partyMapValue = conNull();
                }
                partyMapValue += [conPeek(partyTableList,common.UnionAllBranchId),common.(DirPartyMerge::getPartyFieldId(common.TableId,partyType))];
                partyDataAreaMap.insert(common.DataAreaId,partyMapValue);
            }
        }

        partyMapEnumerator = partyDataAreaMap.getEnumerator();
        // The records cannot be merged.
        setPrefix("@SYS123372");
        while (partyMapEnumerator.moveNext())
        {
            dataAreaId = partyMapEnumerator.currentKey();
            partyMapValue = partyMapEnumerator.currentValue();

            if (partyMapValue && (conLen(partyMapValue)/2) > 1)
            {
                perCompanyList = conNull();
                tableId = 0;
                // Conflicts in company %1
                setPrefix(strFmt("@SYS111891",dataAreaId));
                for (i=1;i<=conLen(partyMapValue);i+=2)
                {
                    if ( partyType == DirPartyType::Organization && conPeek(partyMapValue,i) == tableNum(ContactPerson))
                    {
                        continue;
                    }
                    if (tableId == 0 || tableId == conPeek(partyMapValue,i))
                    {
                        perCompanyList += [conPeek(partyMapValue,i+1)];
                    }
                    else
                    {
                        if (conLen(perCompanyList) >1)
                        {
                            if (_hideInfo)
                            {
                                ret = false;
                            }
                            else
                            {
                                // You cannot have multiple %1 per company for a Global address book record - %2
                                ret = checkFailed(strFmt("@SYS123373",tableId2pname(tableId),con2Str(perCompanyList)));
                            }
                        }
                        perCompanyList = conNull();
                        perCompanyList += [conPeek(partyMapValue,i+1)];
                    }
                    tableId = conPeek(partyMapValue,i);
                }
                if (conLen(perCompanyList) >1)
                {
                    if (_hideInfo)
                    {
                        ret = false;
                    }
                    else
                    {
                        // You cannot have multiple %1 per company for a Global address book record - %2
                        ret = checkFailed(strFmt("@SYS123373",tableId2pname(tableId),con2Str(perCompanyList)));
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTypeConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the parties to be merged are of the same type.
    /// </summary>
    /// <param name="_selectedParties">
    /// A container of the selected parties to be merged.
    /// </param>
    /// <param name="_hideInfo">
    /// A Boolean value that indicates whether information message is displayed.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether there is a conflict.
    /// </returns>
    static boolean validateTypeConflict(container _selectedParties, boolean _hideInfo = false)
    {
        Query                   query;
        QueryRun                qRun;
        QueryBuildDataSource    qbDataSource;
        int64                   i;
        boolean                 ret = true;
        DirPartyTable           partyRecord;

        query = new Query();
        qbDataSource = query.addDataSource(tableNum(DirPartyTable));
        qbDataSource.addRange(fieldNum(DirPartyTable,RecId)).value((con2Str(_selectedParties)));
        qbDataSource.addGroupByField(fieldNum(DirPartyTable,InstanceRelationType));
        qbDataSource.addSelectionField(fieldNum(DirPartyTable,RecId),SelectionField::Count);
        qbDataSource.addSelectionField(fieldNum(DirPartyTable,InstanceRelationType));
        qRun = new QueryRun(query);
        i = 0;
        while (qRun.next())
        {
            i++;

            partyRecord = qRun.get(tableNum(DirPartyTable));
            if (partyRecord.InstanceRelationType != DictTable::getRelationTypeFromTableName(tableStr(DirPerson)) &&
                partyRecord.InstanceRelationType != DictTable::getRelationTypeFromTableName(tableStr(DirOrganization)))
            {
                // Cannot merge internal organization address book.
                ret = _hideInfo ? false : checkFailed("@SYS339124");
                break;
            }

            if (i > 1)
            {
                // Selected address book entries are of different types.
                ret = _hideInfo ? false : checkFailed("@SYS111893");
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>