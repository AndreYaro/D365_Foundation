<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransSummarizationDocumentGroupFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankTransSummarizationDocumentGroupFilter
{
    // Actual type of this field should be List<List<LedgerJournalTrans>>
    private List paymentTransactionGroups;

    // Actual type of this field should be List<List<LedgerJournalTrans, BankAccountTrans>>
    private List filteredPaymBankTransactionPairGroups;

    private NumberOfRecords numOfOriginalLines = 1;
    private NumberOfRecords numOfFilteredLines = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    // Actual type of the parameter should be List<List<LedgerJournalTrans>>
    public void new(List _paymentTransactionGroups)
    {
        if (_paymentTransactionGroups == null)
        {
            throw error(Error::missingMethodParameter(classStr(BankTransSummarizationDocumentGroupFilter), funcName(), identifierStr(_paymentTransactionGroups)));
        }

        paymentTransactionGroups = _paymentTransactionGroups;

        filteredPaymBankTransactionPairGroups = new List(Types::Class);
        ListEnumerator paymentTransactionGroupsEnumerator = paymentTransactionGroups.getEnumerator();

        while (paymentTransactionGroupsEnumerator.moveNext())
        {
            List paymentTransactionGroup = paymentTransactionGroupsEnumerator.current();
            numOfOriginalLines += paymentTransactionGroup.elements();

            List filteredTransactionGroup = this.filterTransactionGroup(paymentTransactionGroup);
            int transCount = filteredTransactionGroup.elements();
            if (transCount > 1)
            {
                numOfFilteredLines += transCount;
                filteredPaymBankTransactionPairGroups.addEnd(filteredTransactionGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilteredPaymBankTransactionGroups</Name>
				<Source><![CDATA[
    [Hookable(false)]
    // Actual type of the return value should be List<List<LedgerJournalTrans, BankAccountTrans>>
    public List getFilteredPaymBankTransactionGroups()
    {
        return filteredPaymBankTransactionPairGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>log</Name>
				<Source><![CDATA[
    internal void log(BankTransSummarizationLogger _logger)
    {
        _logger.logOriginalGroupCount(paymentTransactionGroups.elements());
        _logger.logOriginalLineCountMagnitude(int642int(numOfOriginalLines));
        _logger.logFilteredGroupCount(filteredPaymBankTransactionPairGroups.elements());
        _logger.logFilteredLineCountMagnitude(numOfFilteredLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTransactionGroup</Name>
				<Source><![CDATA[
    // Actual type of the parameter should be List<LedgerJournalTrans>, actual type of the return value should be List<Container<LedgerJournalTrans, BankAccountTrans>>
    private List filterTransactionGroup(List _transactionGroup)
    {
        List filteredGroup = new List(Types::Container);
        ListEnumerator transactionsEnumerator = _transactionGroup.getEnumerator();

        boolean advancedBankReconciliationEnabled;
        if (_transactionGroup.elements())
        {
            transactionsEnumerator.moveNext();
            LedgerJournalTrans firstPaymentTrans = transactionsEnumerator.current();
            BankAccountTrans firstBankTrans = this.getBankTransaction(firstPaymentTrans);
            advancedBankReconciliationEnabled = BankAccountTable::isAdvancedBankReconciliationEnabled(firstBankTrans.AccountId);
            transactionsEnumerator.reset();
        }

        while (transactionsEnumerator.moveNext())
        {
            LedgerJournalTrans paymentTransaction = transactionsEnumerator.current();
            if (paymentTransaction.BankDepositVoucher == NoYes::Yes)
            {
                continue;
            }

            BankAccountTrans bankTransaction = this.getBankTransaction(paymentTransaction);
            if (!advancedBankReconciliationEnabled || this.bankTransactionCanBeSummarized(bankTransaction))
            {
                filteredGroup.addEnd([paymentTransaction, bankTransaction]);
            }
        }

        return filteredGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransaction</Name>
				<Source><![CDATA[
    private BankAccountTrans getBankTransaction(LedgerJournalTrans _paymentTransaction)
    {
        return BankAccountTrans::findByVoucher(_paymentTransaction.Voucher, _paymentTransaction.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankTransactionCanBeSummarized</Name>
				<Source><![CDATA[
    private boolean bankTransactionCanBeSummarized(BankAccountTrans _bankTransaction)
    {
        BankDocumentTable bankDocumentTable = _bankTransaction.getBankDocumentTable();

        return !bankDocumentTable || !BankReconciliationMatchingItem::findValidByDocumentRecId(bankDocumentTable.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>