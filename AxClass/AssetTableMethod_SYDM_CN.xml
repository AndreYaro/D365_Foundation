<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SYDM_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// calculate the period depreciation amount under method of Sum year digits
/// </summary>
class AssetTableMethod_SYDM_CN extends AssetTableMethod
{
    AssetAmount             periodAmount; // Store the value for current period
    AssetAmount             unitPeriodAmount; // Store the unit amount: amountToDepreciation / digits
    AssetAmount             lifeTimeYear;         //Life time(unit year)
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;
    AssetAmount             extraodinaryDepAmount;

    AssetTransDate          previousDepreciationDate;
    AssetTableDepConv       deprConv;
    AssetDepreciationTime   periods;
    AssetDepreciationTime   currPeriod;
    Integer                 numOfPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the period depreciation amount under method of Sum year digits
    /// </summary>
    /// <returns>
    /// depreciation amount for each period
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate  startOfPeriod;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);

        if (periodEnd <= parmRunDate )
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            extraodinaryDepAmount = -AssetTrans::amountMSTPerDateTranstype(
                                        assetBook.AssetId,
                                        periodEnd,
                                        assetBook.BookId,
                                        AssetTransType::ExtraordinaryDepreciation);

            this.calcRestPeriod(startOfPeriod);

            switch (assetDepreciationProfile.Accrual)
            {
                case AssetAccrual::Yearly:
                    periodAmount = assetBook.roundOffDepreciation(this.calcSYDMYearServiceLife());
                    break;
                default:
                    periodAmount = assetBook.roundOffDepreciation(this.calcSYDMPeriodServiceLife());
                    break;
            }

            periodAmount = CurrencyExchangeHelper::amount(periodAmount);

            currPeriod -= restPeriod;
            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);
            previousDepreciationDate = depreciationDate;

            // To set the acural value of Amount to depreciation
            if (amountToDepreciate < prevDepAmount + prevDepAmountExternal + extraodinaryDepAmount + periodAmount)
            {
                periodAmount = CurrencyExchangeHelper::amount(amountToDepreciate - prevDepAmount - extraodinaryDepAmount - prevDepAmountExternal);
            }

            // If period reach last depreciation month then set the depreciation value to the value left.
            if (currPeriod <= 0)
            {
                if (amountToDepreciate != prevDepAmount + prevDepAmountThisYear + extraodinaryDepAmount + prevDepAmountExternal)
                {
                    periodAmount = CurrencyExchangeHelper::amount(amountToDepreciate - prevDepAmount - extraodinaryDepAmount - prevDepAmountThisYear);
                }
            }

            if (amountToDepreciate < prevDepAmount + extraodinaryDepAmount + periodAmount)
            {
                periodAmount = CurrencyExchangeHelper::amount(amountToDepreciate - prevDepAmountPriorYears - extraodinaryDepAmount - prevDepAmount);
            }

            prevDepAmount += periodAmount;
        }
        else
        {
            periodAmount = 0;
        }
        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the period depreciation amount under method of Sum year digits
    /// </summary>
    /// <returns>
    /// depreciation amount for each period other than year
    /// </returns>
    private AssetAmount calcPeriodAmount()
    {
        AssetAmount     currPeriodAmount;
        AssetAmount     currPeriodYearly;
        AssetAmount     prevPeriodRate;
        AssetAmount     currPeriodRate;
        AssetAmount     prevYearDigits;

        if (numOfPeriod)
        {
            currPeriodYearly = currPeriod / numOfPeriod;
        }
        prevYearDigits = roundUp(currPeriodYearly, 1);

        if (numOfPeriod)
        {
            prevPeriodRate = (currPeriodYearly - prevYearDigits + 1) * numOfPeriod;
        }
        currPeriodRate = 1 - prevPeriodRate;

        if (currPeriod == periods)
        {
            currPeriodAmount = 0;
        }
        else
        {
            currPeriodAmount = CurrencyExchangeHelper::amount(unitPeriodAmount * currPeriodRate * (prevYearDigits - 1));
        }
        currPeriodAmount += CurrencyExchangeHelper::amount(unitPeriodAmount * prevPeriodRate * prevYearDigits);

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodYearAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each year
    /// </summary>
    /// <returns>
    /// depreciation amount for each year
    /// </returns>
    private AssetAmount calcPeriodYearAmount()
    {
        AssetAmount     currPeriodAmount;
        AssetAmount     currPeriodYearly;
        AssetAmount     prevPeriodRate;
        AssetAmount     currPeriodRate;
        AssetAmount     prevYearDigits;

        if (numOfPeriod)
        {
            currPeriodYearly = (currPeriod-restPeriod) / numOfPeriod;
        }
        prevYearDigits = round(currPeriodYearly - 0.5, 1) + 1;
        prevPeriodRate = (currPeriodYearly - prevYearDigits + 1) * numOfPeriod;
        currPeriodRate = 1 - prevPeriodRate;

        if (currPeriod == periods)
        {
            currPeriodAmount = 0;
        }
        else
        {
            currPeriodAmount = CurrencyExchangeHelper::amount(unitPeriodAmount * prevPeriodRate * (prevYearDigits + 1));
        }

        currPeriodAmount += CurrencyExchangeHelper::amount(unitPeriodAmount * currPeriodRate * prevYearDigits);

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// calc the rest period of the interval
    /// </summary>
    /// <param name="_startOfPeriod">
    /// transaction date
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //
            //  The restPeriod may be updated based on the assets depreciation convention or
            //  will be returned unchanged.
            //
            restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSYDMPeriodServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each calendar year for each calendar year can cover two fiscal years.
    ///  for example: depreciation start date is 2009/3/1, then the depreciation amount of 2010 cover 2010/1/1- 2010/3/1 and 2010/3/1- 2010/12/1
    /// </summary>
    /// <returns>
    /// depreciation amount for each calendar year
    /// </returns>
    private AssetAmount calcSYDMPeriodServiceLife()
    {
        AssetAmount currPeriodAmount;

        if (this.getDepYear(currPeriod) == this.getDepYear(currPeriod - 1))
        {
            currPeriodAmount = restPeriod * this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod));
        }
        else
        {
            currPeriodAmount = this.calcPeriodAmount();
        }

        if (numOfPeriod)
        {
            currPeriodAmount = currPeriodAmount / numOfPeriod;
        }

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSYDMYearServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each fiscal year for each fiscal year.
    /// </summary>
    /// <returns>
    /// depreciation amount for each fiscal year
    /// </returns>
    private AssetAmount calcSYDMYearServiceLife()
    {
        AssetAmount    currPeriodAmount;

        currPeriodAmount = this.calcPeriodYearAmount();

        if (numOfPeriod)
        {
            currPeriodAmount = currPeriodAmount / numOfPeriod;
        }

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepAmountOfFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each fiscal year
    /// </summary>
    /// <param name="_period">
    /// AssetDepreciationTime
    /// </param>
    /// <returns>
    /// depreciation amount for each fiscal year
    /// </returns>
    /// <remarks>
    /// no
    /// </remarks>
    public AssetAmount getDepAmountOfFiscalYear(AssetDepreciationTime _period)
    {
        unitPeriodAmount = amountToDepreciate * 2 /(lifeTimeYear * (lifeTimeYear + 1));

        return unitPeriodAmount * _period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// check which fiscal year the given date belong to
    /// </summary>
    /// <param name="_currPeriod">
    /// AssetDepreciationTime
    /// </param>
    /// <returns>
    ///     return the year index, for example, the depreciation start date is 2008/1/2.
    ///     getDepYearIdx(2008/1/2)=1;     getDepYearIdx(2009/1/1)=1;
    ///     getDepYearIdx(2009/1/5)=2;     getDepYearIdx(2010/1/1)=2;
    /// </returns>
    public AssetAmount getDepYear(AssetDepreciationTime _currPeriod)
    {
        AssetAmount depreciationYear = 0;

        if (numOfPeriod)
        {
            depreciationYear = roundUp(_currPeriod / numOfPeriod, 1);
        }
        return depreciationYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Init unitPeriodAmount value and life time amount
    ///     lifeTimeYear:
    ///         if calendar accural is yearly, the value is lifeTime/1
    ///         if calendar accural is monthly, the value is lifeTime/12
    ///     UnitPeriodAmount:
    ///         its value is amountToDepreciation / (sum year digits)
    /// </summary>
    public void init()
    {
        super();
        periods         = assetBook.LifeTime;
        currPeriod      = assetBook.LifeTimeRest;
        numOfPeriod     = deprInterval.numOfPeriodsPerYear();

        // Construct an asset depreciation convention class
        deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);

        if (numOfPeriod)
        {
            lifeTimeYear    = assetBook.LifeTime / numOfPeriod;
        }

        this.setAmountToDepreciate();
        unitPeriodAmount = amountToDepreciate * 2 / (lifeTimeYear * (lifeTimeYear + 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// whether the depreciation comes to the end.
    /// </summary>
    /// <returns>
    /// true if ended, else false.
    /// </returns>
    public boolean next()
    {
        if (parmRunDate <= baseDate)
        {
            return false;
        }

        if (currPeriod <= 0)
        {
            return false;
        }

        this.setDepDate();

        //  This prevents depreciations with invalid dates from
        //  being handled.
        if (!depreciationDate
            || depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>