<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendEditInvoiceTotalsStatusBadgeRenderer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class handles rendering of status badges for invoice and sales tax amounts on the <c>VendEditInvoiceTotals</c> form.
/// </summary>
internal final class VendEditInvoiceTotalsStatusBadgeRenderer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldStatusBadgesBeRendered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not status badges should be rendered for the given vendor invoice on the totals dialog.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if status badges should be rendered; else, false.</returns>
    internal static boolean shouldStatusBadgesBeRendered(VendInvoiceInfoTable _vendorInvoice)
    {
        return VendAutomateVendorInvoicesFeature::isEnabled() && _vendorInvoice.DocumentOrigin == DocumentOrigin::Service;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStatusBadgeBeRenderedForImportedAmount</Name>
				<Source><![CDATA[
    internal static boolean shouldStatusBadgeBeRenderedForImportedAmount(AmountCur _importedAmount)
    {
        return _importedAmount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderInvoiceAmountMatchingStatusBadge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renders a status badge within a given group control on the vendor invoice totals form.
    /// </summary>
    /// <param name = "_importedAmountGroup">The group control in which the status badge will be rendered.</param>
    /// <param name = "_calculatedAmount">The calculated amount on the invoice.</param>
    /// <param name = "_importedAmount">The imported amount on the invoice to which the calculated amount will be compared.</param>
    /// <param name = "_statusBadgeHelpText">The help text to be shown on the status badge.</param>
    /// <returns>A successful status badge if the calculated amount matches the imported amount; else, a failed status badge.</returns>
    internal static FormStaticTextControl renderInvoiceAmountMatchingStatusBadge(
        FormGroupControl _importedAmountGroup, 
        real _calculatedAmount, 
        real _importedAmount, 
        str _statusBadgeHelpText)
    {
        boolean doesCalculatedAmountMatchImportedAmount = _calculatedAmount == _importedAmount;
        return VendEditInvoiceTotalsStatusBadgeRenderer::renderAmountMatchingStatusBadge(_importedAmountGroup, doesCalculatedAmountMatchImportedAmount, _statusBadgeHelpText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAmountMatchingStatusBadge</Name>
				<Source><![CDATA[
    private static FormStaticTextControl renderAmountMatchingStatusBadge(
        FormGroupControl _parentGroupControl,
        boolean _doAmountsMatch,
        str _statusBadgeHelpText)
    {
        return _doAmountsMatch ? VendEditInvoiceTotalsStatusBadgeRenderer::renderSuccessfulInvoiceAmountMatchingStatusBadge(_parentGroupControl, _statusBadgeHelpText)
                               : VendEditInvoiceTotalsStatusBadgeRenderer::renderFailedInvoiceAmountMatchingStatusBadge(_parentGroupControl, _statusBadgeHelpText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderSuccessfulInvoiceAmountMatchingStatusBadge</Name>
				<Source><![CDATA[
    private static FormStaticTextControl renderSuccessfulInvoiceAmountMatchingStatusBadge(FormGroupControl _parentGroupControl, str _statusBadgeHelpText)
    {
        FormControlName statusBadgeControlName = _parentGroupControl.name() + '_MatchingStatus';
        str successfulBadgeExtendedStyle = enum2Symbol(enumNum(FormStaticTextControlExtendedStyle), FormStaticTextControlExtendedStyle::statusBadgeSuccess);

        FormStaticTextControl successfulInvoiceAmountMatchingBadge;
        successfulInvoiceAmountMatchingBadge = VendEditInvoiceTotalsStatusBadgeRenderer::getMatchStatusBadgeControl(_parentGroupControl, statusBadgeControlName);
        successfulInvoiceAmountMatchingBadge.text("@AccountsPayable:VendInvoiceTotalsImportedAmountMatches");
        successfulInvoiceAmountMatchingBadge.helpText(_statusBadgeHelpText);
        successfulInvoiceAmountMatchingBadge.extendedStyle(successfulBadgeExtendedStyle);

        return successfulInvoiceAmountMatchingBadge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderFailedInvoiceAmountMatchingStatusBadge</Name>
				<Source><![CDATA[
    private static FormStaticTextControl renderFailedInvoiceAmountMatchingStatusBadge(FormGroupControl _parentGroupControl, str _statusBadgeHelpText)
    {
        FormControlName statusBadgeControlName = _parentGroupControl.name() + '_MatchingStatus';
        str errorBadgeExtendedStyle = enum2Symbol(enumNum(FormStaticTextControlExtendedStyle), FormStaticTextControlExtendedStyle::statusBadgeError);

        FormStaticTextControl failedMatchStatusBadge;

        failedMatchStatusBadge = VendEditInvoiceTotalsStatusBadgeRenderer::getMatchStatusBadgeControl(_parentGroupControl, statusBadgeControlName);
        failedMatchStatusBadge.text("@AccountsPayable:VendInvoiceTotalsImportedAmountDoesNotMatch");
        failedMatchStatusBadge.helpText(_statusBadgeHelpText);
        failedMatchStatusBadge.extendedStyle(errorBadgeExtendedStyle);

        return failedMatchStatusBadge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchStatusBadgeControl</Name>
				<Source><![CDATA[
    private static FormStaticTextControl getMatchStatusBadgeControl(FormGroupControl _parentGroupControl, str _statusBadgeControlName)
    {
        FormStaticTextControl matchStatusBadge;
        FormControl childFormControl;
        int counter = 1;
        int childControlCount = _parentGroupControl.controlCount();
        
        while (counter <= childControlCount)
        {
            childFormControl = _parentGroupControl.controlNum(counter);
            if (childFormControl.name() == _statusBadgeControlName)
            {
                matchStatusBadge = childFormControl;
                return matchStatusBadge;
            }
            counter = counter+1;
        }

        if (!matchStatusBadge)
        {
            matchStatusBadge = _parentGroupControl.addControl(FormControlType::StaticText, _statusBadgeControlName);
        }
        return matchStatusBadge;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>