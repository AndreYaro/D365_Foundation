<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransIntercompanyInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransIntercompanyInteraction</c> class is the  interaction class for the
///    <c>ReqTransIntercompanyListPage</c> form that enables and disables buttons, sets filters, and
///    updates the view of inventory dimensions.
/// </summary>
class ReqTransIntercompanyInteraction extends SysListPageInteractionBase
{
    InventDimCtrl_Frm   inventDimFormSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions display.
    /// </summary>
    public void initialized()
    {
        super();

        inventDimFormSetup = InventDimCtrl_Frm::construct();
        inventDimFormSetup.parmCallingElement(
            InventDimListPageInteractionAdapter::newFromListPageInteraction(this));
        inventDimFormSetup.init();

        this.updateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records by using the inventory dimensions form.
    /// </summary>
    /// <returns>
    ///    An inventory dimensions set up object.
    /// </returns>
    /// <remarks>
    ///    This method is used by inventory dimensions set up logic.
    /// </remarks>
    public Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables buttons on the list page.
    /// </summary>
    public void selectionChanged()
    {
        ListPage                listPage                = this.listPage();
        ReqTransIntercompany    reqTransIntercompany    = listPage.activeRecord(queryDataSourceStr(ReqTransIntercompanyListPage,ReqTransIntercompany)) as ReqTransIntercompany;

        super();

        listPage.actionPaneControlEnabled(formControlStr(ReqTransIntercompanyListPage,ReqTransIntercompanyCustomerReference), reqTransIntercompany.CustomerReference != '');
        listPage.actionPaneControlEnabled(formControlStr(ReqTransIntercompanyListPage,ReqTransIntercompanyVendorReference), reqTransIntercompany.VendorReference != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates design when called.
    /// </summary>
    /// <param name="_mode">
    ///    The update mode.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An unknown mode is provided as a parameter.
    /// </exception>
    private void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventDimParm   inventDimParm;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init :
                inventDimParm.initCovDimAllGrp();
                inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm.data());
                inventDimFormSetup.formSetControls(true);
                break;

            default :
                throw error(strFmt("@SYS54195", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefCustomerVendorReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides view details functionality for customer and vendor reference fields.
    /// </summary>
    /// <param name="_caller">
    ///    The calling form.
    /// </param>
    /// <param name="_reqTransIntercompany">
    ///    The current <c>ReqTransInterCompany</c> record.
    /// </param>
    public static void jumpRefCustomerVendorReference(
        FormRun _caller,
        ReqTransIntercompany _reqTransIntercompany)
    {
        Args    args = new Args();

        if (_reqTransIntercompany)
        {
            args.record(_reqTransIntercompany);
            args.caller(_caller);
            args.openMode(OpenMode::View);
            args.copyCallerQuery(CopyCallerQuery::Yes);
            ReqTransIntercompanyJumpRef::jumpRef(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>