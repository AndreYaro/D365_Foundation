<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSplitPaymentPost_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSplitPaymentPost_IT</c> class is an absract class used to create tax, ledger and customer transactions
/// while posting sales and project invoices, in case these invoices include split payment taxes.
/// </summary>
abstract class TaxSplitPaymentPost_IT
{
    CustVendInvoiceJour invoiceJour;
    LedgerVoucher parentLedgerVoucher, ledgerVoucher;
    NumberSeq numberSeq;
    Voucher splitPaymVoucher;
    LedgerVoucherObject ledgerVoucherObject;
    CurrencyExchangeHelper exchangeRateHelper;
    boolean isCorrection;
    TransactionTxt transactionTxt;
    DimensionDefault dimensionDefault;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the value of DimensionDefault.
    /// </summary>
    /// <param name="_dimensionDefault">
    ///    To set dimensionDefault.
    /// </param>
    /// <returns>
    ///   Returns the value DimensionDefault.
    /// </returns>
    protected DimensionDefault parmDimensionDefault(DimensionDefault _dimensionDefault = dimensionDefault)
    {
        dimensionDefault = _dimensionDefault;
        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reverse customer transaction corresponding to the split payment tax transaction being reversed.
    /// </summary>
    /// <param name="_sumTaxAmountCur">The amount of the customer transaction being created.</param>
    abstract protected void createReverseCustTrans(TaxRegulationAmountCur _sumTaxAmountCur)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create reverse tax transaction based on the direct split payment transaction.
    /// </summary>
    /// <param name="_taxTransToReverse">Tax transaction to reverse.</param>
    protected void createReverseTaxTrans(TaxTrans _taxTransToReverse)
    {
        TaxTrans reverseTaxTrans;
        LedgerVoucherTransObject ledgerVoucherTransObject;

        this.initReverseTaxTrans(_taxTransToReverse, reverseTaxTrans);
        this.initReverseTaxTrans_IT(reverseTaxTrans);
        
        reverseTaxTrans.insert();

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            ledgerVoucher.findLedgerVoucherObject(),
            LedgerPostingType::Tax,
            LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::accountLedgerDimension(_taxTransToReverse.TaxCode, TaxDirection::OutgoingTax), dimensionDefault),
            invoiceJour.CurrencyCode,
            reverseTaxTrans.SourceRegulateAmountCur,
            exchangeRateHelper);

        ledgerVoucherTransObject.parmSourceRecId(invoiceJour.RecId);
        ledgerVoucherTransObject.parmSourceTableId(invoiceJour.TableId);
        ledgerVoucherTransObject.parmText(transactionTxt.txt());
        ledgerVoucherTransObject.parmIsCorrection(isCorrection);
        ledgerVoucherTransObject.addTaxTransRelationship(reverseTaxTrans.RecId, TaxTransRelationshipType::Tax);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    private void endPost()
    {
        numberSeq.used();
        ledgerVoucher.createVoucherLinks(parentLedgerVoucher.lastVoucher(), parentLedgerVoucher.lastTransDate());
        ledgerVoucher.end();

        info(strFmt("@AccountsReceivable:SplitPaymentDoneUseVoucher", splitPaymVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized some objects and variables which will be used throughout the posting.
    /// </summary>
    protected void init()
    {
        numberSeq = NumberSeq::newGetVoucher(NumberSeqReference::findReference(extendedTypeNum(SplitPaymentVoucher_IT)));
        splitPaymVoucher = numberSeq.voucher();
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, this.sysModule(), numberSeq.parmVoucherSequenceCode());
        isCorrection = LedgerParameters::find().TransactionReversalCorrection;

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(
            splitPaymVoucher,
            invoiceJour.InvoiceDate,
            this.sysModule(),
            this.ledgerTransType(),
            isCorrection);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(invoiceJour.ExchRate);
        exchangeRateHelper.parmExchangeRate2(invoiceJour.ExchrateSecondary);

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setLanguage(invoiceJour.LanguageId);
        transactionTxt.setDate(invoiceJour.InvoiceDate);
        transactionTxt.setFormLetter(invoiceJour.InvoiceId);
        transactionTxt.setVoucher(invoiceJour.LedgerVoucher);
        transactionTxt.setKey1(invoiceJour.InvoiceAccount);
        transactionTxt.setKey2(CustTable::groupId(invoiceJour.InvoiceAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction type corresponding to the current subclass of the <c>TaxSplitPayment_IT</c> class.
    /// </summary>
    /// <returns>
    /// The transaction type corresponding to the current subclass of the <c>TaxSplitPayment_IT</c> class.
    /// </returns>
    abstract protected LedgerTransType ledgerTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>TaxSplitPaymentPost_IT</c> class and passes the parameters.
    /// </summary>
    /// <param name="_invoiceJour">Sales or project invoice being posted and which has to be analyzed from the split payment perspective.</param>
    /// <param name="_parentLedgerVoucher">The <c>LedgerVoucher</c> object in scope of which the invoice is being posted.</param>
    protected void new(CustVendInvoiceJour _invoiceJour, LedgerVoucher  _parentLedgerVoucher)
    {
        invoiceJour = _invoiceJour;
        parentLedgerVoucher = _parentLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the main logic of the class.
    /// </summary>
    /// <returns>True if there were found split payment tax transactions and posting was performed; otherwise, false.</returns>
    protected boolean post()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00037, funcName());

        TaxTrans taxTrans;
        TaxTrans_IT taxTrans_IT;
        TaxGroupHeading taxGroupHeading;
        TaxRegulationAmountCur sumTaxAmountCur;
        boolean splitPaymTaxTransExist = false;

        if (TaxSplitPaymentPost_IT::getSplitPaymTaxAmount_IT(null, invoiceJour.LedgerVoucher, invoiceJour.InvoiceDate))
        {
            this.init();

            while select forUpdate taxTrans
                where taxTrans.Voucher == invoiceJour.LedgerVoucher
                    && taxTrans.TransDate == invoiceJour.InvoiceDate
                    && taxTrans.ExemptTax == NoYes::No
                exists join taxGroupHeading
                    where taxGroupHeading.TaxGroup == taxTrans.TaxGroup
                        && taxGroupHeading.SplitPayment_IT
            {
                taxTrans_IT = taxTrans.taxTrans_IT();
                taxTrans_IT.SplitPaymDirect  = NoYes::Yes;
                taxTrans_IT.SplitPaymReverse = NoYes::No;
                taxTrans.packTaxTrans_IT(taxTrans_IT);
                taxTrans.update();

                this.createReverseTaxTrans(taxTrans);
                sumTaxAmountCur += taxTrans.SourceRegulateAmountCur;
            }

            this.createReverseCustTrans(sumTaxAmountCur);
            this.settleCustTransOpen(sumTaxAmountCur);
            this.endPost();

            splitPaymTaxTransExist = true;
        }

        return splitPaymTaxTransExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleCustTransOpen</Name>
				<Source><![CDATA[
    private void settleCustTransOpen(TaxRegulationAmountCur  _taxTransSum)
    {
        SpecTransManager specTransManager;
        CustSettlement custSettlement;
        CustTrans directCustTrans, reverseCustTrans;
        CustTransOpen directCustTransOpen, reverseCustTransOpen;
        CustVendTransData custVendTransData;

        select firstOnly directCustTransOpen
            where directCustTransOpen.DueDate == invoiceJour.InvoiceDate && directCustTransOpen.AmountCur == -_taxTransSum
        join directCustTrans
            where directCustTrans.RecId       == directCustTransOpen.RefRecId
                && directCustTrans.Voucher     == invoiceJour.LedgerVoucher
                && directCustTrans.AccountNum  == invoiceJour.InvoiceAccount
                && directCustTrans.TransDate   == invoiceJour.InvoiceDate;

        if (!directCustTransOpen)
        {
            select firstOnly directCustTransOpen
                    where (_taxTransSum < 0 && directCustTransOpen.AmountCur >= -_taxTransSum)
                       || (_taxTransSum > 0 && directCustTransOpen.AmountCur <= -_taxTransSum)
                join directCustTrans
                    where directCustTrans.RecId       == directCustTransOpen.RefRecId
                       && directCustTrans.Voucher     == invoiceJour.LedgerVoucher
                       && directCustTrans.AccountNum  == invoiceJour.InvoiceAccount
                       && directCustTrans.TransDate   == invoiceJour.InvoiceDate;
        }

        select firstOnly reverseCustTransOpen
            exists join reverseCustTrans
            where reverseCustTrans.RecId       == reverseCustTransOpen.RefRecId
               && reverseCustTrans.Voucher     == splitPaymVoucher
               && reverseCustTrans.AccountNum  == invoiceJour.InvoiceAccount
               && reverseCustTrans.TransDate   == invoiceJour.InvoiceDate;

        if (directCustTransOpen && reverseCustTransOpen)
        {
            specTransManager = SpecTransManager::newFromSpec(directCustTrans);

            specTransManager.insert(
                directCustTransOpen.company(),
                directCustTransOpen.TableId,
                directCustTransOpen.RecId,
                -_taxTransSum,
                directCustTransOpen.custTrans().CurrencyCode);

            specTransManager.insert(
                reverseCustTransOpen.company(),
                reverseCustTransOpen.TableId,
                reverseCustTransOpen.RecId,
                _taxTransSum,
                reverseCustTransOpen.custTrans().CurrencyCode);

            custVendTransData = CustVendTransData::construct(directCustTrans);
            custVendTransData.updateOffsetVoucher(
                SettlementType::SelectedTransact,
                ledgerVoucher,
                directCustTrans);

            update_recordset custSettlement
                setting CanBeReversed = NoYes::No
                    where (custSettlement.TransRecId == directCustTrans.RecId ||
                          (custSettlement.OffsetRecid == directCustTrans.RecId &&
                           custSettlement.OffsetCompany == directCustTrans.company())) &&
                           custSettlement.CanBeReversed == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the application module corresponding to the current subclass of the <c>TaxSplitPayment_IT</c> class.
    /// </summary>
    /// <returns>The application module corresponding to the current subclass of the <c>TaxSplitPayment_IT</c> class.</returns>
    abstract protected SysModule sysModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a subclass of the <c>TaxSplitPaymentPost_IT</c> class.
    /// </summary>
    /// <param name="_invoiceJour">Sales or project invoice being posted and which has to be analyzed from the split payment perspective.</param>
    /// <param name="_parentLedgerVoucher">The <c>LedgerVoucher</c> object in scope of which the invoice is being posted.</param>
    /// <exception cref="Exception::Error">The <c>_invoiceJour</c> parameter differs from the sales or project invoices.</exception>
    /// <returns>An instance of a subclass of the <c>TaxSplitPaymentPost_IT</c> class.</returns>
    public static TaxSplitPaymentPost_IT construct(CustVendInvoiceJour _invoiceJour, LedgerVoucher _parentLedgerVoucher)
    {
        TaxSplitPaymentPost_IT  taxSplitPaymentPost;

        switch (_invoiceJour.TableId)
        {
            case tableNum(CustInvoiceJour):
                taxSplitPaymentPost = new TaxSplitPaymentPostCust_IT(_invoiceJour, _parentLedgerVoucher);
                break;

            case tableNum(ProjInvoiceJour):
                taxSplitPaymentPost = new TaxSplitPaymentPostProj_IT(_invoiceJour, _parentLedgerVoucher);
                break;

            default:
                throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }

        return taxSplitPaymentPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPaymTaxAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the SplitPayment TaxAmount.
    /// </summary>
    /// <param name="_tax">
    /// param _tax represents the tax.
    /// </param>
    /// <param name="_voucher">
    /// param _voucher represents the LedgerVoucher.
    /// </param>
    /// <param name="_invoiceDate">
    /// param _invoiceDate represents the invoice date.
    /// </param>
    /// <returns>
    /// Returns the SplitPayment TaxAmount.
    /// </returns>
    public static TaxAmountCur getSplitPaymTaxAmount_IT(Tax             _tax = null,
                                                        Voucher         _voucher = '',
                                                        InvoiceDate     _invoiceDate = dateNull())
    {
        TmpTaxWorkTrans     tmpTaxWorkTrans;
        TaxGroupHeading     taxGroupHeading;
        TaxTrans            taxTrans;
        TaxAmountCur        splitPaymTaxAmount;

        if (_tax)
        {
            tmpTaxWorkTrans = _tax.tmpTaxWorkTrans();

            select sum (SourceRegulateAmountCur) from tmpTaxWorkTrans
                where tmpTaxWorkTrans.ExemptTax == NoYes::No
            exists join taxGroupHeading
                where taxGroupHeading.TaxGroup == tmpTaxWorkTrans.TaxGroup
                    && taxGroupHeading.SplitPayment_IT;

            splitPaymTaxAmount = -tmpTaxWorkTrans.SourceRegulateAmountCur;
        }
        else
        {
            select sum(SourceRegulateAmountCur) from taxTrans
                where taxTrans.Voucher   == _voucher
                   && taxTrans.TransDate == _invoiceDate
                   && taxTrans.ExemptTax == NoYes::No
            exists join taxGroupHeading
                where taxGroupHeading.TaxGroup == taxTrans.TaxGroup
                   && taxGroupHeading.SplitPayment_IT;

            splitPaymTaxAmount = -taxTrans.SourceRegulateAmountCur;
        }

        return splitPaymTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSplitPaymentWithDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a subclass of the <c>TaxSplitPaymentPost_IT</c> class and calls the posting.
    /// </summary>
    /// <param name="_invoiceJour">Sales or project invoice being posted and which has to be analyzed from the split payment perspective.</param>
    /// <param name="_parentLedgerVoucher">The <c>LedgerVoucher</c> object in scope of which the invoice is being posted.</param>
    /// <param name="_dimensionDefault">The default dimension.</param>
    /// <returns>true if there were found split payment tax transactions and posting was performed; otherwise, false.</returns>
    public static boolean postSplitPaymentWithDimensionDefault(CustVendInvoiceJour _invoiceJour, LedgerVoucher _parentLedgerVoucher, DimensionDefault _dimensionDefault = 0)
    {
        TaxSplitPaymentPost_IT taxSplitPaymentPost;

        taxSplitPaymentPost = TaxSplitPaymentPost_IT::construct(_invoiceJour, _parentLedgerVoucher);
        taxSplitPaymentPost.parmDimensionDefault(_dimensionDefault);
        return taxSplitPaymentPost.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReverseTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tax transaction <c>TaxTrans</c> to reverse.
    /// </summary>
    /// <param name = "_taxTransToReverse">
    /// Tax transaction to reverse.
    /// </param>
    /// <param name = "_reverseTaxTrans">
    /// The buffer of <c>TaxTrans</c>.
    /// </param>
    protected void initReverseTaxTrans(TaxTrans _taxTransToReverse, TaxTrans _reverseTaxTrans)
    {
        _reverseTaxTrans.data(_taxTransToReverse);
        _reverseTaxTrans.copyTaxTrans(_taxTransToReverse, -1);
        _reverseTaxTrans.TaxBaseAmount = 0;
        _reverseTaxTrans.TaxBaseAmountCur = 0;
        _reverseTaxTrans.TaxBaseAmountRep = 0;
        _reverseTaxTrans.SourceBaseAmountCur = 0;
        _reverseTaxTrans.SourceBaseAmountCurRegulated = 0;
        _reverseTaxTrans.TaxOrigin = TaxOrigin::TaxReversed;
        _reverseTaxTrans.SourceRecId = _taxTransToReverse.RecId;
        _reverseTaxTrans.SourceTableId = _taxTransToReverse.TableId;
        _reverseTaxTrans.Voucher = splitPaymVoucher;

        // Initialize SourceDocumentLine; otherwise, it will link the original TaxTrans' SourceDocumentLine.
        _reverseTaxTrans.SourceDocumentLine = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReverseTaxTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the tax transaction <c>TaxTrans_IT</c> to reverse.
    /// </summary>
    /// <param name = "_reverseTaxTrans">
    /// Tax transaction to reverse.
    /// </param>
    protected void initReverseTaxTrans_IT(TaxTrans _reverseTaxTrans)
    {
        TaxTrans_IT reverseTaxTrans_IT;

        reverseTaxTrans_IT = _reverseTaxTrans.taxTrans_IT();
        reverseTaxTrans_IT.SplitPaymDirect  = NoYes::No;
        reverseTaxTrans_IT.SplitPaymReverse = NoYes::Yes;
        _reverseTaxTrans.packTaxTrans_IT(reverseTaxTrans_IT);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>