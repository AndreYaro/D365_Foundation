<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEmailReaderController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller for the electronic fiscal document e-mail reading process
/// </summary>
class EFDocEmailReaderController_BR extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@SYS4003359";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        SysOperationDialog  sysOperationDialog;
        FormTabPageControl  batchTabPageControl;

        super();

        sysOperationDialog = dialog as SysOperationDialog;
        batchTabPageControl = sysOperationDialog.batchDialogTabPage().control();

        if (batchTabPageControl)
        {
            batchTabPageControl.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onMarshalledOperationCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event method invoked when operation is cancelled.
    /// Connection end time is marked with the current time, to avoid locking the import process on next runs
    /// </summary>
    /// <param name="_waitCaption">The caption of the event.</param>
    public void onMarshalledOperationCancelled(str _waitCaption)
    {
        SysEmailAccountTable emailAccount;

        while select forupdate emailAccount
        {
            if (emailAccount.LastConnectionEnd < emailAccount.LastConnectionStart)
            {
                ttsbegin;

                emailAccount.LastConnectionEnd = DateTimeUtil::getSystemDateTime();
                emailAccount.update();

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of EFDocEmailReaderController_BR initialized
    /// </summary>
    /// <returns>
    /// Instance of EFDocEmailReaderController_BR
    /// </returns>
    public static EFDocEmailReaderController_BR construct()
    {
        EFDocEmailReaderController_BR operation;
        IdentifierName operationClass = classStr(EFDocEmailProcessor_BR);
        IdentifierName operationMethod = methodStr(EFDocEmailProcessor_BR, execute);

        operation = new EFDocEmailReaderController_BR(operationClass, operationMethod);
        operation.parmExecutionMode(SysOperationExecutionMode::Synchronous);

        return operation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the emails through sys operation framework and processes each read email in order to
    /// extract the xml and the danfe
    /// </summary>
    /// <param name="args">
    /// An Args object containing parameters and information about the caller
    /// </param>
    public static void main(Args args)
    {
        var controller = BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00053])
            ? BusinessDocumentVendorImportController::construct(args)
            : EFDocEmailReaderController_BR::construct();

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>