<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJobTicketReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WmsJobTicketReport_RU</c> class prints the job tickets report for transportation invoices.
/// </summary>
class WmsJobTicketReport_RU extends RunBase
{
    ComOfficeDocument_RU        document;

    TmpSalesPurchReportTable_RU header;
    TmpSalesPurchReportLine_RU  dynamicData;

    WMSBillOfLading             billOfLading;
    WMSBillOfLadingId           billOfLadingId;
    DialogField                 dlgBillOfLadingId;

    container        consignorInfo,
                     consigneeInfo,
                     carrierInfo,
                     accompanyingDocInfo;

    boolean          creditNote;
    OffSessionId_RU  offSessionId;
    OffReportType_RU reportType;
    OffPosition_RU   consignorCarrierPos,
                     consigneeCarrierPos,
                     carrierPos;

    AmountMST                   totalAmount;
    CurrencyCode                currencyCode;
    ModuleCustVend              offCustVend;

    PrintJobSettings            printJobSettings;
    PrintCopyOriginal           printCopyOriginal;

    #define.ConsignorContactInfo    ('ConsignorContactInfo')
    #define.ConsignorFullName       ('ConsignorFullName')
    #define.ConsignorCarrierInfo    ('ConsignorCarrierInfo')
    #define.ConsigneeContactInfo    ('ConsigneeContactInfo')
    #define.ConsigneeFullName       ('ConsigneeFullName')
    #define.ConsigneeCarrierInfo    ('ConsigneeCarrierInfo')
    #define.CargoDesc               ('CargoDesc')
    #define.NumPackUnit             ('NumPackUnit')
    #define.GrossWeightUnit         ('GrossWeightUnit')
    #define.LadingAddr              ('LadingAddr')
    #define.UnladingAddr            ('UnladingAddr')
    #define.VehicleInfo             ('VehicleInfo')
    #define.VehicleRegNum           ('VehicleRegNum')
    #define.ConsignorSign           ('ConsignorSign')
    #define.CarrierSign             ('CarrierSign')
    #define.DocumentNum             ('DocumentNum')
    #define.DocumentDate            ('DocumentDate')
    #define.AccompanyingDoc         ('AccompanyingDoc')
    #define.VehicleDriverInfo       ('VehicleDriverInfo')
    #define.BOLDate1                ('BOLDate1')
    #define.BOLDate2                ('BOLDate2')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        billOfLadingId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accompanyDocInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes document information from <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///     Source <c>CustInvoiceJour</c> record.
    /// </param>
    protected void accompanyDocInfo(CustInvoiceJour _custInvoiceJour)
    {
        FactureJour_RU      factureJour;
        RecordSortedList    factureJourList = _custInvoiceJour.factureJourSortedList_RU();

        accompanyingDocInfo += "@SYS14204" + " " + strFmt("@GLS102243", _custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceDate);

        while (factureJourList.next(factureJour))
        {
            accompanyingDocInfo += "@GLS100743" + " " + strFmt("@GLS102243", factureJour.FactureExternalId, factureJour.FactureDate_External);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>concat</Name>
				<Source><![CDATA[
    #define.CommaSpace(', ')

    private str concat(container _values)
    {
        int         idx;
        str         value;
        container   ret;
        int         cLen;

        cLen = conLen(_values);
        for (idx = 1; idx <= cLen; idx++)
        {
            value = strFmt("@GLS106007", conPeek(_values, idx));
            if (value)
            {
                ret += value;
            }
        }

        return con2Str(ret, #CommaSpace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the consignee and consignor information for Invent references.
    /// </summary>
    /// <param name="_inventTransferTable">
    ///     Source <c>InventTransferTable</c> table.
    /// </param>
    protected void custVendInfoInvent(InventTransferTable _inventTransferTable)
    {
        CustVendAC custVendAC;

        consignorCarrierPos = OffPosition_RU::TransResp;
        consigneeCarrierPos = OffPosition_RU::TransRespCust;
        carrierPos          = OffPosition_RU::TransRespCarrier;

        switch (_inventTransferTable.TransferType_RU)
        {
            case InventTransferType_RU::Standard :
                custVendAC = InventLocation::find(_inventTransferTable.InventLocationIdTo).VendAccount;
                if (custVendAC)
                {
                    consignorInfo = this.getCompanyInfo();
                    consigneeInfo = this.getDirPartyInfo(VendTable::find(custVendAC));

                    this.initCarrierType(consigneeInfo);
                }
                else
                {
                    consignorInfo = this.getCompanyInfo();
                    consigneeInfo = consignorInfo;

                    this.initCarrierType(consignorInfo);
                }
                break;

            case InventTransferType_RU::IssueToParty :

                consignorInfo = this.getCompanyInfo();
                consigneeInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());

                this.custVendInfoInvent_Party(_inventTransferTable);

                break;

            case InventTransferType_RU::ReceiptFromParty :
                consigneeInfo = this.getCompanyInfo();
                consignorInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());

                this.custVendInfoInvent_Party(_inventTransferTable);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets carrier info for standard transfer type for vendor.
    /// </summary>
    /// <param name = "_invoiceAccountInfo">Container with invoice account info.</param>
    protected void initCarrierType(container _invoiceAccountInfo)
    {
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = _invoiceAccountInfo;
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoInvent_Party</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets carrier info for issue to party or receipt from party transfer type.
    /// </summary>
    /// <param name = "_inventTransferTable">Cursor of <c>InventTransferTable</c> table.</param>
    protected void custVendInfoInvent_Party(InventTransferTable _inventTransferTable)
    {
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the consignee and consignor information for Production references.
    /// </summary>
    protected void custVendInfoProd()
    {
        consignorCarrierPos = OffPosition_RU::TransResp;
        consigneeCarrierPos = OffPosition_RU::TransRespCust;
        carrierPos          = OffPosition_RU::TransRespCarrier;

        consignorInfo = this.getCompanyInfo();
        consigneeInfo = consignorInfo;

        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = consignorInfo;
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the consignee and consignor information customer invoice references.
    /// </summary>
    /// <param name="_invoiceAccount">
    ///     Customer account from invoice; optional.
    /// </param>
    /// <param name="_consignor">
    ///     Consignor account; optional.
    /// </param>
    /// <param name="_consingee">
    ///     Consignee account. optional.
    /// </param>
    protected void custVendInfoSales(CustVendAC     _invoiceAccount,
                                     VendAccount    _consignor = '',
                                     CustAccount    _consingee = '')
    {
        container tmpCon;

        carrierPos = OffPosition_RU::TransRespCarrier;

        consigneeInfo = this.getDirPartyInfo(CustTable::find(_consingee ? _consingee : billOfLading.CustAccount));
        if (_consignor)
        {
            consignorInfo = this.getDirPartyInfo(VendTable::find(_consignor));
        }
        else
        {
            consignorInfo = this.getCompanyInfo();
        }

        if (creditNote)
        {
            tmpCon          = consigneeInfo;
            consigneeInfo   = consignorInfo;
            consignorInfo   = tmpCon;

            consignorCarrierPos = OffPosition_RU::TransRespCust;
            consigneeCarrierPos = OffPosition_RU::TransResp;
        }
        else
        {
            consignorCarrierPos = OffPosition_RU::TransResp;
            consigneeCarrierPos = OffPosition_RU::TransRespCust;
        }

        this.fillCarrierInfo(_invoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCarrierInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills carrier info container.
    /// </summary>
    /// <param name="_invoiceAccount">Customer account from invoice.</param>
    protected void fillCarrierInfo(CustVendAC _invoiceAccount)
    {
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = this.getDirPartyInfo(CustTable::find(_invoiceAccount));
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes document information from <c>InventTransJour</c>.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Throws if <c>InvnetTransferJour</c> is not exists.
    /// </exception>
    protected void docInfoInvent()
    {
        InventTransferJour      inventTransferJour;
        InventTransferTable     inventTransferTable;
        WMSShipment             wmsShipment;

        inventTransferTable = InventTransferTable::find(billOfLading.InventTransRefId);
        currencyCode = inventTransferTable.CurrencyCode_RU;

        if (billOfLading.ShipmentId)
        {
            wmsShipment = WMSShipment::find(billOfLading.ShipmentId);
            this.initFromShipment();
            offSessionId = wmsShipment.OffSessionId_RU;
        }
        else
        {
            select firstonly inventTransferJour
                where inventTransferJour.BillOfLadingId_RU == billOfLading.BillOfLadingId;

            if (! inventTransferJour)
            {
                throw error(strFmt("@GLS115701", billOfLadingId));
            }

            this.initFromTransferJour(inventTransferJour);
            offSessionId = inventTransferJour.OffSessionId_RU;
        }

        reportType   = OffReportType_RU::TransferInvoiceM15;
        offCustVend  = ModuleCustVend::Vend;

        this.custVendInfoInvent(inventTransferTable);

        totalAmount  = header.TotalAmountWithVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes document information from <c>ProdTable</c>.
    /// </summary>
    protected void docInfoProd()
    {
        ProdTable prodTable;
        WMSShipment wmsShipment = WMSShipment::find(billOfLading.ShipmentId);

        prodTable = ProdTable::find(billOfLading.InventTransRefId);
        currencyCode = prodTable.CurrencyCode_RU;

        this.initFromShipment();

        reportType   = OffReportType_RU::TransferInvoiceM15;
        offSessionId = wmsShipment.OffSessionId_RU;

        this.custVendInfoProd();

        totalAmount  = header.TotalAmountWithVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes document information from <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Throws if <c>custInvoiceJour</c> record is not exists.
    /// </exception>
    protected void docInfoSales()
    {
        SalesTable                  salesTable;
        CustPackingSlipJour         custPackingSlipJour;
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceJour_RU          custInvoiceJourRU;
        CustInvoiceJour_Officials   custInvoiceJour_Officials;
        SalesReport_WMSBOL_RU       reportBOL;
        SalesReport_InvoiceM15_RU   reportM15;
        WMSShipment                 wmsShipment;

        if (billOfLading.ShipmentId)
        {
            salesTable = SalesTable::find(billOfLading.InventTransRefId);
            currencyCode = salesTable.CurrencyCode;

            this.initFromShipment();
            wmsShipment = WMSShipment::find(billOfLading.ShipmentId);
            offSessionId = wmsShipment.OffSessionId_RU;

            this.custVendInfoSales(salesTable.InvoiceAccount,
                                   salesTable.salesTable_RU().ConsignorAccount_RU,
                                   salesTable.salesTable_RU().ConsigneeAccount_RU);

            reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote : OffReportType_RU::SalesInvoice;
        }
        else
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.BillOfLadingId == billOfLading.BillOfLadingId;

            if (custInvoiceJour)
            {
                custInvoiceJourRU = custInvoiceJour.custInvoiceJour_RU();
                custInvoiceJour_Officials = custInvoiceJour.custInvoiceJour_Officials();

                offSessionId = custInvoiceJour_Officials.OffSessionId;

                if (custInvoiceJourRU.CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12)
                {
                    reportBOL = new SalesReport_WMSBOL_RU();
                    reportBOL.setParameters(PrintCopyOriginal::Original, custInvoiceJour);
                    reportBOL.parmIsBOL(true);
                    reportBOL.preRun();
                    header = reportBOL.parmHeader();
                    dynamicData.setTmpData(reportBOL.parmDynamicData());
                }
                else
                {
                    reportM15 = new SalesReport_InvoiceM15_RU();
                    reportM15.setParameters(PrintCopyOriginal::Original, custInvoiceJour);
                    reportM15.parmIsBOL(true);
                    reportM15.preRun();
                    header = reportM15.parmHeader();
                    dynamicData.setTmpData(reportM15.parmDynamicData());
                }

                creditNote = custInvoiceJour.creditNote();
                this.custVendInfoSales(custInvoiceJour.InvoiceAccount,
                                       custInvoiceJourRU.ConsignorAccount_RU,
                                       custInvoiceJourRU.ConsigneeAccount_RU);

                this.accompanyDocInfo(custInvoiceJour);

                currencyCode = custInvoiceJour.CurrencyCode;
                reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote :
                                            (custInvoiceJourRU.CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12 ? OffReportType_RU::SalesInvoice :
                                                                                                                                 OffReportType_RU::SalesInvoiceM15);
            }
            else
            {
                select firstonly custPackingSlipJour
                    where custPackingSlipJour.BillOfLadingId == billOfLading.BillOfLadingId;

                if (custPackingSlipJour)
                {
                    this.initFromPackingSlip(custPackingSlipJour);
                    offSessionId = custPackingSlipJour.OffSessionId_RU;
                    creditNote   = (custPackingSlipJour.Qty < 0);
                    this.custVendInfoSales(custPackingSlipJour.InvoiceAccount,
                                           custPackingSlipJour.salesTable().salesTable_RU().ConsignorAccount_RU,
                                           custPackingSlipJour.salesTable().salesTable_RU().ConsigneeAccount_RU);

                    currencyCode = custPackingSlipJour.salesTable().CurrencyCode;
                    reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote : OffReportType_RU::SalesInvoice;
                }
                else
                {
                    throw error(strFmt("@GLS111079", billOfLadingId));
                }
            }
        }

        totalAmount  = abs(header.TotalAmountWithVAT);
        offCustVend  = ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills document information.
    /// </summary>
    protected void fillDocInfo()
    {
        document.insertValue(#DocumentNum, billOfLading.TransportInvoiceId_RU);
        document.insertValue(#DocumentDate, strFmt("@GLS106007", DateTimeUtil::date(billOfLading.CreatedDateTime)));
        document.insertValue(#AccompanyingDoc, this.concat(accompanyingDocInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the template.
    /// </summary>
    #define.IsCompanyPos(4)
    #define.NamePos(1)
    protected void fillDocument()
    {
        Name                    consignorName, carrierName;
        boolean                 isCompany;
        UnitOfMeasureReportingText      massUnitText;
        UnitOfMeasureReportingText      volumeUnitText;

        isCompany = conPeek(consignorInfo, #IsCompanyPos);
        consignorInfo = conDel(consignorInfo, #IsCompanyPos, 1);
        document.insertValue(isCompany ? #ConsignorFullName : #ConsignorContactInfo, this.concat(consignorInfo));
        consignorName = conPeek(consignorInfo, #NamePos);

        isCompany = conPeek(carrierInfo, #IsCompanyPos);
        carrierInfo = conDel(carrierInfo, #IsCompanyPos, 1);
        document.insertValue(isCompany ? #ConsigneeFullName : #ConsigneeContactInfo, this.concat(carrierInfo));
        carrierName   = conPeek(carrierInfo, #NamePos);

        //find translations for system units of measure;

        massUnitText = UnitOfMeasureReportingTranslation::findByReportingTranslation(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
                                                                       CompanyInfo::languageId()
                                                                       ).Text;
        if ( !massUnitText )
        {
            massUnitText = UnitOfMeasure::find( UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass)
                                                    .UnitOfMeasure).Symbol;
        }

        volumeUnitText = UnitOfMeasureReportingTranslation::findByReportingTranslation(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume).UnitOfMeasure,
                                                                       CompanyInfo::languageId()
                                                                       ).Text;
        if ( !volumeUnitText )
        {
            volumeUnitText = UnitOfMeasure::find( UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume)
                                                    .UnitOfMeasure).Symbol;
        }

        document.insertValue(#CargoDesc, billOfLading.CargoDescription_RU);
        document.insertValue(#NumPackUnit, this.concat([abs(header.TotalPackagingQty), billOfLading.CargoPacking_RU]));
        document.insertValue(#GrossWeightUnit, this.concat([strFmt("@SYS76498", abs(header.TotalGrossWeight),
                                                                  massUnitText),
                                                            strFmt("@SYS76498", abs(header.TotalVolume),
                                                                  volumeUnitText)]));
        document.insertValue(#LadingAddr, billOfLading.addressLading_RU());
        document.insertValue(#UnladingAddr, billOfLading.addressUnlading_RU());
        document.insertValue(#VehicleInfo, VehicleModelTable_W::description(billOfLading.VehicleModel_RU));
        document.insertValue(#VehicleRegNum, billOfLading.VehiclePlateNum_RU);
        document.insertValue(#ConsignorSign, consignorName);
        document.insertValue(#CarrierSign, carrierName);
        document.insertValue(#VehicleDriverInfo, this.concat([billOfLading.DriverName_RU, billOfLading.DriverContact_RU, billOfLading.WaybillNum_RU]));
        document.insertValue(#BOLDate1, this.concat([strFmt('%1', billOfLading.DeliveryDate_RU)]));
        document.insertValue(#BOLDate2, this.concat([strFmt('%1', billOfLading.DeliveryDate_RU)]));

        document.insertValue(#ConsignorCarrierInfo, this.concat(this.getOfficialsInfo(offSessionId, consignorCarrierPos)));
        document.insertValue(#ConsigneeCarrierInfo, this.concat(this.getOfficialsInfo(offSessionId, carrierPos)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates description for current company.
    /// </summary>
    /// <returns>
    ///     Container with description.
    /// </returns>
    protected container getCompanyInfo()
    {
        CompanyInfo company = CompanyInfo::find();

        return [company.Name, company.postalAddress().Address, company.phone(), true];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates description for customer.
    /// </summary>
    /// <param name="_custVendTable">
    ///     Source <c>CustVendTable</c> record.
    /// </param>
    /// <returns>
    ///     Container with description.
    /// </returns>
    protected container getDirPartyInfo(CustVendTable _custVendTable)
    {
        DirPartyTable               dirPartyTable                       = DirPartyTable::findRec(_custVendTable.Party);
        LogisticsElectronicAddressLocator locator = DirParty::primaryElectronicAddress(_custVendTable.Party, SalesParameters::find().EmplPhoneTypeId).Locator;

        return [dirPartyTable.Name,
                dirPartyTable.primaryAddress(),
                locator,
                dirPartyTable.partyType() != DirPartyType::Person];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates Word document.
    /// </summary>
    /// <returns>
    ///     <c>ComOfficeDocument_RU</c> instance.
    /// </returns>
    protected ComOfficeDocument_RU getDocument()
    {
        return new ComWordDocument_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        billOfLadingId = dlgBillOfLadingId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfficialsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets official info.
    /// </summary>
    /// <param name="_session">
    ///     Officials id;
    /// </param>
    /// <param name="_position">
    ///     Officials position.
    /// </param>
    /// <returns>
    ///     Container with officials description.
    /// </returns>
    #define.AddressPos(2)
    #define.IsCompanyPos(4)
    protected container getOfficialsInfo(
        OffSessionId_RU  _session,
        OffPosition_RU   _position)
    {
        OfficialsTrans_RU   officialsTrans;
        CustVendTable       custVendTable = CustVendTransStatic::newModuleCustVend(offCustVend).custVendTable();
        container           vendInfo;

        officialsTrans = OfficialsTrans_RU::findSessionId(_session, _position);

        custVendTable.clear();

        custVendTable.Party = DirPartyTable::findByName(officialsTrans.Name).RecId;

        if (custVendTable.Party)
        {
            vendInfo = this.getDirPartyInfo(custVendTable);
            vendInfo = conDel(vendInfo, #IsCompanyPos, 1);
            vendInfo = conDel(vendInfo, #AddressPos, 1);
            return vendInfo;
        }
        else
        {
            return [officialsTrans.Name];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes documentation info depending on reference type.
    /// </summary>
    protected void initDocumentInfo()
    {
        switch (billOfLading.wmsReferenceType)
        {
            case WMSReferenceType::TransferOrderShipment:
                this.docInfoInvent();
                break;

            case WMSReferenceType::Sales:
                this.docInfoSales();
                break;

            case WMSReferenceType::ProductionOrder_RU:
            case WMSReferenceType::ProductionLine:
                this.docInfoProd();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes report from <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    ///     Source <c>CustPackingSlipJour</c> record.
    /// </param>
    protected void initFromPackingSlip(CustPackingSlipJour _custPackingSlipJour)
    {
        CustPackingSlipTrans    custPackingSlipTrans;
        InventTable             inventTable;
        TaxPackagingQty         taxPackingQty;
        Qty                     qtyInStandardUnits;

        while select custPackingSlipTrans
            where custPackingSlipTrans.SalesId       == _custPackingSlipJour.SalesId
               && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
               && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
        outer join inventTable
            where inventTable.ItemId == custPackingSlipTrans.ItemId
        {
            ItemId itemId               = FormLetter::journalItemId(ModuleInventPurchSales::Sales,
                                                                    custPackingSlipTrans.ItemId,
                                                                    custPackingSlipTrans.ExternalItemId);
            dynamicData.clear();
            dynamicData.ItemId          = itemId;
            dynamicData.ItemName        = custPackingSlipTrans.itemName();

            dynamicData.Unit            = UnitOfMeasureReportingTranslation::findByReportingTranslation(
                                                UnitOfMeasure::findBySymbol(custPackingSlipTrans.SalesUnit).RecId,
                                                billOfLading.LanguageId
                                                ).Text;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit = UnitOfMeasureReportingTranslation::findByReportingTranslation(
                                                UnitOfMeasure::findBySymbol(custPackingSlipTrans.SalesUnit).RecId,
                                                billOfLading.LanguageId
                                                ).Text;
            }

            Qty qty         = custPackingSlipTrans.Qty;
            dynamicData.Qty = qty;

            dynamicData.LineAmount = abs(custPackingSlipTrans.salesLine().calcLineAmountInclTax_RU(qty));
            if (inventTable)
            {
                EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                        itemId, 
                                                                        custPackingSlipTrans.InventDimId,
                                                                        custPackingSlipTrans.SalesUnit, 
                                                                        InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId);

                boolean conversionOk = productUnitConverter.canValueBeConverted();
                if (!conversionOk)
                {
                    warning(strFmt("@SYS28690", custPackingSlipTrans.SalesUnit, InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId));
                }

                qtyInStandardUnits              = (custPackingSlipTrans.SalesUnit && custPackingSlipTrans.Qty && conversionOk) ? productUnitConverter.convertValue(qty) : qty;

                if (qtyInStandardUnits)
                {
                    taxPackingQty               = abs(inventTable.TaxPackagingQty) * qty / qtyInStandardUnits;
                }

                dynamicData.TaxPackagingQty     = taxPackingQty;
                dynamicData.QtyNumber           = abs(taxPackingQty ? roundUp(custPackingSlipTrans.Qty / taxPackingQty, 1) : 0);
                dynamicData.Packing             = inventTable.Packing_RU;
                dynamicData.GrossWeight         = abs(qtyInStandardUnits * inventTable.grossWeight());
            }
            else
            {
                dynamicData.GrossWeight  = SalesLineForeignTradeCategory::findSalesLine(custPackingSlipTrans.salesLine()).UnitWeight * custPackingSlipTrans.Qty;
            }

            dynamicData.insert();

            header.TotalGrossWeight         += dynamicData.GrossWeight;
            header.TotalPackagingQty        += dynamicData.QtyNumber;
            header.TotalVolume              += qtyInStandardUnits * inventTable.UnitVolume;
            header.TotalAmount              += custPackingSlipTrans.ValueMST;
            header.TotalAmountWithVAT       += dynamicData.LineAmount;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes report from <c>WMSOrderTrans</c> record.
    /// </summary>
    protected void initFromShipment()
    {
        SalesLine               salesLine;
        ProdBOM                 prodBOM;
        InventTransferLine      inventTransferLine;

        WMSOrderTrans           wmsOrderTrans;
        InventTable             inventTable;
        InventDim               inventDim;
        SalesQty                salesQty;
        BOMQty                  bomQty;

        // init lines
        while select wmsOrderTrans
            where wmsOrderTrans.ShipmentId      == billOfLading.ShipmentId
               && wmsOrderTrans.Customer        == billOfLading.CustAccount
               && wmsOrderTrans.DeliveryPostalAddress == billOfLading.DeliveryPostalAddress
        join inventDim
            where inventDim.InventDimId == wmsOrderTrans.InventDimId
        join inventTable
            where inventTable.ItemId == wmsOrderTrans.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = wmsOrderTrans.ItemId;
            dynamicData.ItemName        = wmsOrderTrans.inventTable().itemName(inventDim);
            dynamicData.Unit            = UnitOfMeasureTranslation::findByTranslation(
                        UnitOfMeasure::findBySymbol(wmsOrderTrans.unitId()).RecId,
                        billOfLading.LanguageId ).Description;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit        = UnitOfMeasureTranslation::findByTranslation(  UnitOfMeasure::findBySymbol(wmsOrderTrans.unitId()).RecId,
                                    billOfLading.LanguageId ).Description;
            }
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = wmsOrderTrans.Qty;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(wmsOrderTrans.Qty / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = wmsOrderTrans.Qty * inventTable.grossWeight();

            if (wmsOrderTrans.isProdLine_RU())
            {
                prodBOM = ProdBOM::findTransId(wmsOrderTrans.InventTransId);

                if (prodBOM)
                {
                    bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                            inventTable.ItemId,
                                                            prodBOM.InventDimId,
                                                            prodBOM.QtyBOMCalc,
                                                            prodBOM.UnitId,
                                                            wmsOrderTrans.unitId());
                    if (bomQty)
                    {
                        dynamicData.LineAmount  = CurrencyExchangeHelper::amount(prodBOM.LineAmount_RU * wmsOrderTrans.Qty / bomQty);
                    }
                }
            }
            else
            if (wmsOrderTrans.InventTransType == InventTransType::TransferOrderShip)
            {
                select firstonly inventTransferLine
                    where inventTransferLine.TransferId     == wmsOrderTrans.InventTransRefId
                       && inventTransferLine.InventTransId  == wmsOrderTrans.InventTransId;

                if (inventTransferLine)
                {
                    dynamicData.LineAmount  = CurrencyExchangeHelper::amount(inventTransferLine.LineAmount_RU * wmsOrderTrans.Qty / inventTransferLine.QtyTransfer);
                }
            }
            else
            {
                salesLine                = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
                salesQty                 = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                    inventTable.ItemId, 
                                                    wmsOrderTrans.InventDimId,
                                                    wmsOrderTrans.Qty,
                                                    wmsOrderTrans.unitId(),
                                                    salesLine.SalesUnit);

                dynamicData.LineAmount   = abs(salesLine.calcLineAmountInclTax_RU(salesQty));
                dynamicData.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(dynamicData.LineAmount, salesLine.CurrencyCode, currencyCode, DateTimeUtil::date(billOfLading.CreatedDateTime));
            }

            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalPackagingQty    += dynamicData.QtyNumber;
            header.TotalVolume          += wmsOrderTrans.Qty * inventTable.UnitVolume;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes report from <c>InventTransferJour</c> record.
    /// </summary>
    /// <param name="_inventTransferJour">
    ///     Source <c>InventTransferJour</c> record.
    /// </param>
    protected void initFromTransferJour(InventTransferJour _inventTransferJour)
    {
        InventTransferJourLine  inventTransferJourLine;
        InventTable             inventTable;

        // init lines
        while select inventTransferJourLine
            where inventTransferJourLine.TransferId == _inventTransferJour.TransferId
               && inventTransferJourLine.VoucherId  == _inventTransferJour.VoucherId
        join inventTable
            where inventTable.ItemId                == inventTransferJourLine.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = inventTransferJourLine.ItemId;
            dynamicData.ItemName        = inventTransferJourLine.itemName();

            dynamicData.Unit =  UnitOfMeasure::find(
                                                UnitOfMeasureTranslation::findByTranslation(
                                                        UnitOfMeasure::findBySymbol(inventTransferJourLine.UnitId).RecId,
                                                        billOfLading.LanguageId
                                                ).UnitOfMeasure
                                            ).Symbol;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit        = inventTransferJourLine.UnitId;
            }

            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = inventTransferJourLine.QtyShipped;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(inventTransferJourLine.QtyShipped / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = inventTransferJourLine.QtyShipped * inventTable.grossWeight();
            dynamicData.LineAmount      = inventTransferJourLine.LineAmountShipped_RU;
            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalPackagingQty    += dynamicData.QtyNumber;
            header.TotalVolume          += inventTransferJourLine.QtyShipped * inventTable.UnitVolume;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    private boolean makeDocument()
    {
        str templateName = GlobalEx::templateFolder_W()    +
                           this.templateName();
        document = this.getDocument();

        if (! document.newFile(templateName, false))
        {
            return checkFailed(strFmt("@GLS111555", templateName));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfLading</Name>
				<Source><![CDATA[
    public WMSBillOfLading parmBillOfLading(WMSBillOfLading _billOfLading = billOfLading)
    {
        billOfLading    = _billOfLading;
        billOfLadingId  = _billOfLading.BillOfLadingId;
        return billOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintJobSettings</Name>
				<Source><![CDATA[
    // will be obsolete after report migrated to XMLExcelReport_RU
    public PrintJobSettings parmPrintJobSettings(PrintJobSettings _printJobSettings = printJobSettings)
    {
        printJobSettings = _printJobSettings;
        return printJobSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #AviFiles
        this.progressInit("@GLS221913", 3, #AviFormLetter);
        progress.setText("@SYS26577");

        try
        {
            if (this.validate())
            {
                billOfLading = WMSBillOfLading::find_RU(billOfLadingId);
                this.initDocumentInfo();
                progress.incCount();

                if (this.makeDocument())
                {
                    this.fillDocInfo();

                    progress.setText("@GLS102227");
                    progress.incCount();

                    this.fillDocument();
                    progress.incCount();

                    document.visible(true);
                }
            }
        }
        catch (Exception::Error)
        {
            document = null;
        }

        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns name of template.
    /// </summary>
    /// <returns>
    ///     Name of template.
    /// </returns>
    #define.TemplateName('JobTicket.dot')
    protected str templateName()
    {
        return #TemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if all fields and parameters is set correctly.
    /// </summary>
    /// <param name="calledFrom">
    ///     <c>RunBase</c> overriding param.
    /// </param>
    /// <returns>
    ///     true if validate is successeful; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        if (!billOfLadingId)
        {
            return checkFailed("@GLS111786");
        }

        if (!UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass))
        {
            return checkFailed(strFmt("@GLS222804", enum2str(UnitOfMeasureClass::Mass)));
        }

        if (!UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume))
        {
            return checkFailed(strFmt("@GLS222804", enum2str(UnitOfMeasureClass::DryVolume)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS221926";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>