<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkCalendarCreate extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase       dialog;

    DialogField         dialogCalendar;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogUseBasic;
    DialogField         dialogWorkTime;

    CalendarId          calendar;

    TransDate           fromDate;
    TransDate           toDate;

    NoYes               useBasic;

    WorkTimeId          workTimeId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
         Calendar,
         FromDate,
         ToDate,
         UseBasic,
         WorkTimeId
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialog = super();

        dialogCalendar = dialog.addField(extendedtypestr(CalendarId));
        dialogCalendar.value(calendar);

        dialogFromDate = dialog.addField(extendedtypestr(TransDate),"@SYS5209","@SYS5209");
        dialogFromDate.value(fromDate);

        dialogToDate = dialog.addField(extendedtypestr(TransDate),"@SYS14656","@SYS14656");
        dialogToDate.value(toDate);

        dialogUseBasic = dialog.addField(extendedtypestr(WorkCalendarUseBasic),"@SYS25936");
        dialogUseBasic.value(useBasic);

        dialogWorkTime = dialog.addField(extendedtypestr(WorkTimeId),fieldpname(WorkTimeTable,WorkTimeId));
        dialogWorkTime.value(workTimeId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        calendar    = dialogCalendar.value();
        fromDate    = dialogFromDate.value();
        toDate      = dialogToDate.value();
        useBasic    = dialogUseBasic.value();
        workTimeId    = dialogWorkTime.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        fromDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        toDate      = nextyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendar</Name>
				<Source><![CDATA[
    protected CalendarId  parmCalendar(CalendarId _calendar = calendar)
    {
        calendar = _calendar;
        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsebasic</Name>
				<Source><![CDATA[
    NoYes parmUsebasic(NoYes _useBasic = useBasic)
    {
        useBasic = _useBasic;
        return useBasic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTimeId</Name>
				<Source><![CDATA[
    WorkTimeId parmWorkTimeId(WorkTimeId _workTime = workTimeId)
    {
        workTimeId = _workTime;

        return workTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.updateCalender();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalender</Name>
				<Source><![CDATA[
    void updateCalender()
    {
        WorkTimeLine            workTimeLine;
        WorkTimeTable           workTimeTable;
        WorkCalendarDate        workCalendarDate;
        WorkCalendarDateLine    workCalendarDateLine;

        TransDate               transDate = fromDate;

        workCalendarDateLine.disableCache(true);

        while (transDate <= toDate)
        {
            select firstonly forupdate workCalendarDate
                index hint CalendarDateIdx
                where workCalendarDate.CalendarId       == calendar    &&
                      workCalendarDate.TransDate        == transDate;

            if (workCalendarDate)
            {
                workCalendarDate.delete();
            }

            workCalendarDate.CalendarId = calendar;
            workCalendarDate.TransDate = transDate;
            workCalendarDate.WorkTimeId = workTimeId;

            if (useBasic)
            {
                workCalendarDate.WorkTimeControl    = WorkTimeControl::UseBasic;
            }
            else
            {
                workCalendarDate.WorkTimeControl    = WorkTimeControl::Closed;

                if (workTimeId)
                {
                    select firstonly
                        ClosedForPickupMonday, ClosedForPickupTuesday, ClosedForPickupWednesday,
                        ClosedForPickupThursday, ClosedForPickupFriday,
                        ClosedForPickupSaturday, ClosedForPickupSunday
                    from workTimeTable
                        where workTimeTable.WorkTimeId == workTimeId;

                    switch (dayofwk(workCalendarDate.TransDate))
                    {
                        case WeekDays::Monday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupMonday;
                            break;
                        case WeekDays::Tuesday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupTuesday;
                            break;
                        case WeekDays::Wednesday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupWednesday;
                            break;
                        case WeekDays::Thursday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupThursday;
                            break;
                        case WeekDays::Friday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupFriday;
                            break;
                        case WeekDays::Saturday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupSaturday;
                            break;
                        case WeekDays::Sunday :
                            workCalendarDate.ClosedForPickup = workTimeTable.ClosedForPickupSunday;
                            break;
                        default :
                            break;
                    }

                    while select workTimeLine
                        index hint TimeDayIdx
                        where workTimeLine.WorkTimeId == workTimeId &&
                              workTimeLine.WeekDay == dayofwk(transDate)
                    {
                        workCalendarDate.WorkTimeControl = WorkTimeControl::Open;
                        workCalendarDate.createWorkCalendarDateLine(workCalendarDate, workTimeLine);
                    }
                }
            }

            if (workCalendarDate.WorkTimeControl == WorkTimeControl::Closed || workCalendarDate.WorkTimeControl == WorkTimeControl::Holiday)
            {
                workCalendarDate.ClosedForPickup = NoYes::Yes;
            }

            workCalendarDate.insert();

            transDate++;
        }
        workCalendarDateLine.disableCache(false);
        Dictionary::dataFlush(tablenum(WorkCalendarDateLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        boolean         ok;

        ok = super();

        if (!calendar)
        {
            ok = checkFailed("@SYS25956");
        }

        if (! WorkCalendarTable::checkExist(calendar))
        {
            ok = false;
        }

        if (workTimeId && ! WorkTimeTable::checkExist(workTimeId))
        {
            ok = false;
        }

        if (fromDate > toDate)
        {
            ok = checkFailed("@SYS16982");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25939";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WorkCalendarCreate  workCalendarCreate;
        FormRun             callerForm;

        switch (args.dataset())
        {
            case tablenum(WorkCalendarTable):
                workCalendarCreate = WorkCalendarCreate::newWorkCalendarTable(args.record());
                break;
            case tablenum(WorkCalendarDate):
                workCalendarCreate = WorkCalendarCreate::newWorkCalendarDate(args.record(),args);
                break;
            default:
                throw error(strfmt("@SYS25516",funcname()));
        }

        if (workCalendarCreate.prompt())
        {
            workCalendarCreate.runOperation();
        }

        if (args.caller())
        {
            callerForm  = args.caller();
            callerForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarDate</Name>
				<Source><![CDATA[
    static WorkCalendarCreate newWorkCalendarDate(
        WorkCalendarDate    _workCalendarDate,
        Args                _args
        )
    {
        WorkCalendarCreate  workCalendarCreate = new WorkCalendarCreate();
        WorkCalendarTable   workCalendarTable = WorkCalendarTable::find(_workCalendarDate.CalendarId);

        workCalendarCreate.getLast();
        workCalendarCreate.parmCalendar(workCalendarTable.CalendarId);

        if (! workCalendarCreate.parmCalendar() && _args.caller())
        {
            workCalendarCreate.parmCalendar(_args.caller().calendarId());
        }

        if (workCalendarTable.BasicCalendarId)
        {
            workCalendarCreate.parmUsebasic(NoYes::Yes);
        }
        else
        {
            workCalendarCreate.parmUsebasic(NoYes::No);
        }

        return workCalendarCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkCalendarTable</Name>
				<Source><![CDATA[
    static WorkCalendarCreate newWorkCalendarTable(WorkCalendarTable _workCalendarTable)
    {
        WorkCalendarCreate  workCalendarCreate = new WorkCalendarCreate();

        workCalendarCreate.getLast();
        workCalendarCreate.parmCalendar(_workCalendarTable.CalendarId);

        if (_workCalendarTable.BasicCalendarId)
        {
            workCalendarCreate.parmUsebasic(NoYes::Yes);
        }
        else
        {
            workCalendarCreate.parmUsebasic(NoYes::No);
        }

        return workCalendarCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>