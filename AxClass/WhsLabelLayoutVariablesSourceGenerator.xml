<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLabelLayoutVariablesSourceGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsLabelLayoutVariablesSourceGenerator implements WhsDocumentRoutingTemplateTranslatorLabelCollector
{    
    internal static const str SystemVariableLabelFile = 'LabelFile';
    internal static const str SystemVariableQuantity = 'Quantity';
    internal static const str SystemVariableTable = 'Table';
    internal static const str SystemVariableMaxRowsPerLabel = 'RowsPerLabel';

    internal static const str LabelLayoutVariableDSName = 'LabelLayoutVariable';
    internal static const str SystemVariablesParamMapName = 'SystemVariables';

    private WHSLabelLayout labelLayout;
    private WHSPrinterName printerName;

    private WHSZPL printerSpecificLayoutSource;
    private boolean hasPrinterSpecificLayoutSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLayoutAndPrinter</Name>
				<Source><![CDATA[
    public static WhsLabelLayoutVariablesSourceGenerator newFromLayoutAndPrinter(WHSLabelLayout _labelLayout, WHSPrinterName _printerName)
    {
        if (_labelLayout.DefinitionType != WHSLabelLayoutDefinitionType::Variables)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WhsLabelLayoutVariablesSourceGenerator generator = new WhsLabelLayoutVariablesSourceGenerator();
        generator.labelLayout = _labelLayout;
        generator.printerName = _printerName;

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLayoutSourceFromVariables</Name>
				<Source><![CDATA[
    internal WHSZPL getLayoutSourceFromVariables()
    {
        WHSZPL variablesLayoutTemplateForPrinter = this.getVariablesLayoutTemplateForPrinter();

        Map systemVariables = this.createSystemVariablesMap();
        QueryRun userDefinedVariablesQueryRun = this.createUserDefinedVariablesQueryRun();
               
        this.createPrinterSpecificLayoutSource(variablesLayoutTemplateForPrinter, systemVariables, userDefinedVariablesQueryRun);
        
        if (labelLayout.EnableTemplateTranslator)
        {
            System.Text.StringBuilder printerSpecificLayoutSourceTemplateBuilder = Microsoft.Dynamics.ApplicationPlatform.PooledStringBuilder::GetInstance();

            str tableVariable = systemVariables.lookup(SystemVariableTable);

            printerSpecificLayoutSourceTemplateBuilder.Append('{{Row Table=');             
            printerSpecificLayoutSourceTemplateBuilder.Append(tableVariable);

            str maxRowsPerLabel = systemVariables.lookup(SystemVariableMaxRowsPerLabel);
            if (maxRowsPerLabel)
            {
                printerSpecificLayoutSourceTemplateBuilder.Append(' RowsPerLabel=');
                printerSpecificLayoutSourceTemplateBuilder.AppendLine(maxRowsPerLabel);
            }
            else
            {
                printerSpecificLayoutSourceTemplateBuilder.AppendLine('');
            }

            printerSpecificLayoutSourceTemplateBuilder.AppendLine(printerSpecificLayoutSource);
            printerSpecificLayoutSourceTemplateBuilder.AppendLine('}}');
                                    
            return Microsoft.Dynamics.ApplicationPlatform.PooledStringBuilder::GetStringAndRelease(printerSpecificLayoutSourceTemplateBuilder);
        }
            
        return printerSpecificLayoutSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemVariablesMap</Name>
				<Source><![CDATA[
    private Map createSystemVariablesMap()
    {
        Map systemVariables = new Map(Types::String, Types::String);

        WHSLabelLayoutVariable systemVariable;
        while select systemVariable
            where systemVariable.LabelLayout == labelLayout.RecId
               && systemVariable.SystemVariable
        {
            systemVariables.add(systemVariable.Variable, systemVariable.Value);
        }

        return systemVariables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUserDefinedVariablesQueryRun</Name>
				<Source><![CDATA[
    private QueryRun createUserDefinedVariablesQueryRun()
    {
        Query q = new Query();
        QueryBuildDataSource labelVariables = q.addDataSource(tableNum(WHSLabelLayoutVariable), LabelLayoutVariableDSName);
        labelVariables.addRange(fieldNum(WHSLabelLayoutVariable, SystemVariable)).value(queryValue(NoYes::No));
        labelVariables.addRange(fieldNum(WHSLabelLayoutVariable, LabelLayout)).value(queryValue(labelLayout.RecId));

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablesLayoutTemplateForPrinter</Name>
				<Source><![CDATA[
    private WHSZPL getVariablesLayoutTemplateForPrinter()
    {
        if (!printerName)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        WHSSysCorpNetPrinters whsPrinter = WHSSysCorpNetPrinters::find(printerName);

        if (!whsPrinter)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (whsPrinter.LabelPrintServiceInstance)
        {
            return WhsExternalLabelServiceDefinition::getVariableLabelTemplateForExternalServiceInstance(whsPrinter.LabelPrintServiceInstance);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrinterSpecificLayoutSource</Name>
				<Source><![CDATA[
    private void createPrinterSpecificLayoutSource(WHSZPL _printerSpecificVariableLayoutTemplate, Map _systemVariablesMap, QueryRun _userDefinedVariablesQueryRun)
    {
        WhsDocumentRoutingTranslator labelVariablesZPLTranslator = WhsDocumentRoutingTranslator::construct().withParameterMap(_systemVariablesMap, SystemVariablesParamMapName);
        WhsDocumentRoutingTemplateTranslator labelVariablesZPLTemplateTranslator = WhsDocumentRoutingTemplateTranslator::newFromTemplateAndQueryRun(_printerSpecificVariableLayoutTemplate, _userDefinedVariablesQueryRun);
        labelVariablesZPLTemplateTranslator.withTranslator(labelVariablesZPLTranslator);

        hasPrinterSpecificLayoutSource = false;
        labelVariablesZPLTemplateTranslator.translateTemplateToLabelCollector(this);

        if (!hasPrinterSpecificLayoutSource)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void collectLabel(str _generatedLabel)
    {
        // Expecting only one label to come from the template translator
        if (hasPrinterSpecificLayoutSource)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        hasPrinterSpecificLayoutSource = true;
        printerSpecificLayoutSource = _generatedLabel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>