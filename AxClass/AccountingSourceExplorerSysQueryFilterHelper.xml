<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingSourceExplorerSysQueryFilterHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class AccountingSourceExplorerSysQueryFilterHelper
{
    private Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AccountingSourceExplorerSysQueryFilterHelper</c> class.
    /// </summary>
    /// <param name = "_accountingSourceExplorerBalanceParameters">
    /// AccountingSourceExplorerBalanceParameters object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>AccountingSourceExplorerSysQueryFilterHelper</c> class.
    /// </returns>
    [Hookable(false)]
    public static AccountingSourceExplorerSysQueryFilterHelper construct(AccountingSourceExplorerBalanceParameters _accountingSourceExplorerBalanceParameters)
    {
        AccountingSourceExplorerSysQueryFilterHelper sysQueryFilterHelper;
        LedgerRecId ledger = _accountingSourceExplorerBalanceParameters.parmLedger();

        sysQueryFilterHelper = new AccountingSourceExplorerSysQueryFilterHelper();
        sysQueryFilterHelper.constructDefaultSysQuery(ledger);

        return sysQueryFilterHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefaultSysQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void constructDefaultSysQuery(LedgerRecId ledger)
    {
        QueryBuildDataSource dsDavc, dsMainAccount, dsGeneralJournalEntry, dsGeneralJournalAccountEntry;

        query = new Query();
        dsGeneralJournalEntry = query.addDataSource(tableNum(GeneralJournalEntry));
        dsGeneralJournalEntry.addSortField(fieldNum(GeneralJournalEntry, AccountingDate));
        QueryBuildRange ledgerRange = dsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger));
        ledgerRange.value(SysQuery::value(ledger));
        ledgerRange.status(RangeStatus::Hidden);
        dsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
        dsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, JournalNumber));
        dsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, SubledgerVoucher));

        dsGeneralJournalAccountEntry = dsGeneralJournalEntry.addDataSource(tableNum(GeneralJournalAccountEntry));
        dsGeneralJournalAccountEntry.joinMode(JoinMode::InnerJoin);
        dsGeneralJournalAccountEntry.clearLinks();
        dsGeneralJournalAccountEntry.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        dsGeneralJournalAccountEntry.addRange(fieldNum(GeneralJournalAccountEntry, LedgerAccount));

        dsDavc = dsGeneralJournalAccountEntry.addDataSource(tableNum(DimensionAttributeValueCombination));
        dsDavc.joinMode(JoinMode::InnerJoin);
        dsDavc.clearLinks();
        dsDavc.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        dsMainAccount = dsDavc.addDataSource(tableNum(MainAccount));
        dsMainAccount.joinMode(JoinMode::InnerJoin);
        dsMainAccount.clearLinks();
        dsMainAccount.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
        dsMainAccount.addRange(fieldNum(MainAccount, MainAccountId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadQueryRunResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads results of a queryRun using insert_recordset into temp table that is used to filter results in the
    /// accounting source explorer processor.
    /// </summary>
    /// <param name = "_queryRun">
    /// QueryRun object originating from sysQuery prompt on accounting source explorer.
    /// </param>
    /// <returns>
    /// Temp table holding results of the query run.
    /// </returns>
    [Hookable(false)]
    public AccountingSourceExplorerGeneralJournalAccountEntryTmp loadQueryRunResults(QueryRun _queryRun)
    {
        AccountingSourceExplorerGeneralJournalAccountEntryTmp generalJournalAccountEntryTmp;
        Query filterQuery = _queryRun.query();
        QueryBuildDataSource qbdsGeneralJournalAccountEntry = filterQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
    
        filterQuery.clearAllFields();
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        //Disabling left joins as they cause insert_RecordSet to fail and they are not needed
        this.DisableOuterJoins(filterQuery);

        Map fieldMapping = new Map(Types::String, Types::Container);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, GeneralJournalAccountEntry),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, RecId)]);
        fieldMapping.insert(
            fieldStr(AccountingSourceExplorerTmp, LedgerDimension),
            [qbdsGeneralJournalAccountEntry.uniqueId(), fieldStr(GeneralJournalAccountEntry, LedgerDimension)]);

        generalJournalAccountEntryTmp.clear();
        Query::insert_recordset(generalJournalAccountEntryTmp, fieldMapping, filterQuery);

        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        update_recordset generalJournalAccountEntryTmp
        setting Voucher = subledgerVoucherGeneralJournalEntry.Voucher
        join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == generalJournalAccountEntryTmp.GeneralJournalAccountEntry
        join generalJournalEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId;

        return generalJournalAccountEntryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting date range from GeneralJournalEntry based on the selections
    /// made in the sysQuery prompt. This is a work around for sysQuery prompt date field
    /// not being bound to date data type. This respects user date format preference.
    /// </summary>
    /// <param name = "_queryRun">
    /// QueryRun object originating from sysQuery prompt on accounting source explorer.
    /// </param>
    /// <returns>List with two dates, from and to date.</returns>
    [Hookable(false)]
    public List getAccountingDateRange(QueryRun _queryRun)
    {
        List accountingDateRange = new List(Types::Date);
        date minAccountingDate;
        date maxAccountingDate;

        Query filterQuery = _queryRun.query();
        QueryBuildDataSource qdbsGeneralJournalEntry = filterQuery.dataSourceTable(tableNum(GeneralJournalEntry));

        filterQuery.clearAllFields();
        qdbsGeneralJournalEntry.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate), SelectionField::Min);

        QueryRun qr = new QueryRun(filterQuery);
        if(qr.next())
        {
            minAccountingDate = (qr.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry).AccountingDate;
        }

        filterQuery.clearAllFields();
        qdbsGeneralJournalEntry.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate), SelectionField::Max);

        qr = new QueryRun(filterQuery);

        if(qr.next())
        {
            maxAccountingDate = (qr.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry).AccountingDate;
        }

        accountingDateRange.addEnd(minAccountingDate);
        accountingDateRange.addEnd(maxAccountingDate);

        return accountingDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromAndToDateInSameFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>Date validation to see if they belong in the same fiscal year.
    /// Since date range cannot be directly retrived from sysQuery prompt, this will validate
    /// if documents in the date range the user provided are within the same fiscal year.
    /// </summary>
    /// <param name = "_accountingDateRange">List with two dates, from and to date.</param>
    /// <returns>Boolean value indicating if dates are valid.</returns>
    [Hookable(false)]
    public boolean validateFromAndToDateInSameFiscalYear(List _accountingDateRange)
    {
        TransDate toOpeningStartDate, fromOpeningStartDate;
        FiscalCalendarRecId calendarRecId;

        ListEnumerator le = _accountingDateRange.getEnumerator();
        le.moveNext();
        date fromDate = le.current();
        le.moveNext();
        date toDate = le.current();

        if (fromDate == toDate)
        {
            return true;
        }

        calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        fromOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, fromDate);
        toOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, toDate);

        if (fromOpeningStartDate != toOpeningStartDate)
        {
            return checkFailed(strfmt("@SYS28745", year(fromOpeningStartDate), year(toOpeningStartDate)));
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromAndToDateNotNull</Name>
				<Source><![CDATA[
    /// <summary>Date validation to see if they are not null.
    /// Since date range cannot be directly retrieved from sysQuery prompt, this will validate
    /// if from date and to date in the date range the user provided are not null.
    /// </summary>
    /// <param name = "_accountingDateRange">List with two dates, from and to date.</param>
    /// <returns>Boolean value indicating if dates are not null.</returns>
    [Hookable(false)]
    public boolean validateFromAndToDateNotNull(List _accountingDateRange)
    {
        TransDate toOpeningStartDate, fromOpeningStartDate;

        ListEnumerator le = _accountingDateRange.getEnumerator();
        le.moveNext();
        date fromDate = le.current();
        le.moveNext();
        date toDate = le.current();

        if (toDate == dateNull() && fromDate == dateNull())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartAndEndDateInBalanceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Important to set start and end date in balance parameters as core
    /// accounting source explorer queries rely on this information.
    /// </summary>
    /// <param name = "_accountingDateRange">List with from and to date.</param>
    /// <param name = "_accountingSourceExplorerBalanceParameters">
    /// AccountingSourceExplorerBalanceParameters object which will be used by processor class.
    /// </param>
    [Hookable(false)]
    public void setStartAndEndDateInBalanceParameters(List _accountingDateRange , AccountingSourceExplorerBalanceParameters _accountingSourceExplorerBalanceParameters)
    {
        ListEnumerator le = _accountingDateRange.getEnumerator();

        // set the from date
        le.moveNext();
        _accountingSourceExplorerBalanceParameters.parmStartDate(le.current());

        // set the to date
        le.moveNext();
        _accountingSourceExplorerBalanceParameters.parmEndDate(le.current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberOfRowsUnderProcessingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if user selected criteria returns number of records below processing limit.
    /// By default, the processing limit is set to one million general journal account entry records.
    /// </summary>
    /// <param name = "_queryRun">QueryRun object from sys query based advanced filter.</param>
    /// <returns>Boolean value indicating filter query returns less than one million records.</returns>
    [Hookable(false)]
    public boolean isNumberOfRowsUnderProcessingLimit(QueryRun _queryRun)
    {
        int limitParameter = AccountingSourceExplorerParameters::find().GeneralJournalAccountEntryProcessingLimit;
        int rowCount = QueryRun::getQueryRowCount(_queryRun.query(), limitParameter + 1);

        if (rowCount > limitParameter)
        {
            warning("@GeneralLedger:AccountingSourceExplorerProcessingLimitReachedWarning");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DisableOuterJoins</Name>
				<Source><![CDATA[
    private void DisableOuterJoins(Query filterQuery)
    {
        var dataSourceCount = filterQuery.dataSourceCount();

        for(int i = 1; i <= dataSourceCount; i++)
        {
            QueryBuildDataSource ds = filterQuery.dataSourceNo(i);
            if(ds.joinMode() == JoinMode::OuterJoin || ds.joinMode() == JoinMode::ExistsJoin)
            {
                ds.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>