<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeriodTemplateCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeriodTemplateCalculate</c> class summarizes receipts, issues a master plan, and groups
///    these according to the specified period template.
/// </summary>
/// <remarks>
///    The result is saved as records in the temporary <c>ReqTmpPeriodQty</c> table.
/// </remarks>
public class ReqPeriodTemplateCalculate implements WorkPeriodTemplateCalculable
{
    ReqTmpPeriodQty         reqTmpPeriodQty;

    ReqPlanId               reqPlanId;
    RefRecId                reqPlanVersionRefRecId;
    ItemId                  itemId;
    InventDimId             covDimId;
    ReqTmpPeriod            reqTmpPeriod;

    TransDate               todayDate;
    WorkPeriodTemplate      workPeriodTemplate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a single temporary <c>ReqTmpPeriodQty</c> record that corresponds to one time period.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date of the time period.
    /// </param>
    /// <param name="_toDate">
    ///    The to date of the time period.
    /// </param>
    /// <param name="_periodDescription">
    ///    A string that contains the description of the period.
    /// </param>
    /// <param name="_workDays">
    ///    An integer that contains the number of working days between the from date and the to date. Both
    ///    days are inclusive.
    /// </param>
    public void addPeriod(
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PeriodTemplateDescription   _periodDescription,
        PeriodTemplateOpenDays      _workDays)
    {
        reqTmpPeriodQty.FromDate      = _fromDate;
        reqTmpPeriodQty.ToDate        = _toDate;
        reqTmpPeriodQty.Description   = _periodDescription;

        reqTmpPeriodQty.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates accumulated quantities and updates <c>ReqTmpPeriodQty</c> records.
    /// </summary>
    protected void calcDelta()
    {
        ReqQtyAccumulated   qtyReceiptAcc;
        ReqQtyAccumulated   qtyIssueAcc;
        ReqQtyAccumulated   qtyDeltaAcc;
        PdsCWQtyAccumulated cwReceiptAcc;
        PdsCWQtyAccumulated cwIssueAcc;
        PdsCWQtyAccumulated cwDeltaAcc;
        ReqTrans            blockingIssueReqTrans;
        InventTransOrigin   inventTransOrigin;
        PdsCWInventQty      cwBlockingQty;

        while select forupdate reqTmpPeriodQty
            order by FromDate
        {
            // Calculate issue qty from blocking transaction
            select sum(Qty) from blockingIssueReqTrans
               where blockingIssueReqTrans.PlanVersion    == this.reqPlanVersionRefRecId()
                  && blockingIssueReqTrans.ItemId         == itemId
                  && blockingIssueReqTrans.CovInventDimId == covDimId
                  && blockingIssueReqTrans.Direction      == InventDirection::Issue
                  && blockingIssueReqTrans.RefType        == ReqRefType::InventJournal
                  && blockingIssueReqTrans.ReqDate        >= reqTmpPeriodQty.FromDate
                  && blockingIssueReqTrans.ReqDate        <= reqTmpPeriodQty.ToDate
              exists join inventTransOrigin
                  where inventTransOrigin.RecId             == blockingIssueReqTrans.InventTransOrigin
                     && inventTransOrigin.ReferenceCategory == InventTransType::Blocking;

            qtyReceiptAcc += reqTmpPeriodQty.QtyReceipt + blockingIssueReqTrans.Qty;
            reqTmpPeriodQty.QtyReceiptAccumulated = qtyReceiptAcc;

            qtyIssueAcc += reqTmpPeriodQty.QtyIssue - blockingIssueReqTrans.Qty;
            reqTmpPeriodQty.QtyIssueAccumulated = qtyIssueAcc;

            reqTmpPeriodQty.QtyDelta = reqTmpPeriodQty.QtyReceipt + reqTmpPeriodQty.QtyIssue;

            qtyDeltaAcc += reqTmpPeriodQty.QtyDelta;
            reqTmpPeriodQty.QtyDeltaAccumulated = qtyDeltaAcc;

            reqTmpPeriodQty.PdsCWQtyReceipt = PdsCatchWeight::cwQty(itemId, reqTmpPeriodQty.QtyReceipt);
            cwBlockingQty = PdsCatchWeight::cwQty(itemId, blockingIssueReqTrans.Qty);
            cwReceiptAcc += reqTmpPeriodQty.PdsCWQtyReceipt + cwBlockingQty;
            reqTmpPeriodQty.PdsCWQtyReceiptAccumulated = cwReceiptAcc;

            reqTmpPeriodQty.PdsCWQtyIssue = PdsCatchWeight::cwQty(itemId, reqTmpPeriodQty.QtyIssue);
            cwIssueAcc += reqTmpPeriodQty.PdsCWQtyIssue - cwBlockingQty;
            reqTmpPeriodQty.PdsCWQtyIssueAccumulated = cwIssueAcc;

            reqTmpPeriodQty.PdsCWQtyDelta = reqTmpPeriodQty.PdsCWQtyReceipt + reqTmpPeriodQty.PdsCWQtyIssue;

            cwDeltaAcc += reqTmpPeriodQty.PdsCWQtyDelta;
            reqTmpPeriodQty.PdsCWQtyDeltaAccumulated = cwDeltaAcc;

            if (reqTmpPeriodQty.ToDate == dateMax())
            {
                reqTmpPeriodQty.ToDate = dateNull(); //due to performance the to date was set to dateMax
            }

            reqTmpPeriodQty.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIssues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and updates the <c>qtyIssue</c> field for all <c>ReqTmpPeriodQty</c> records.
    /// </summary>
    protected void calcIssues()
    {
        ReqTrans    reqTrans;

        while select sum(Qty), ReqDate from reqTrans
            join FromDate, ToDate from reqTmpPeriod
            group by FromDate, ToDate
            where reqTrans.PlanVersion              == this.reqPlanVersionRefRecId()
               && reqTrans.ItemId                   == itemId
               && reqTrans.CovInventDimId           == covDimId
               && reqTrans.Direction                == InventDirection::Issue
               && reqTrans.RefType                  != ReqRefType::SafetyInvent
               && reqTrans.ReqDate                  >= reqTmpPeriod.FromDate
               && reqTrans.ReqDate                  <= reqTmpPeriod.ToDate
        {
            update_recordset reqTmpPeriodQty
            setting QtyIssue = reqTmpPeriodQty.QtyIssue + reqTrans.Qty
                where reqTmpPeriod.FromDate  == reqTmpPeriodQty.FromDate
                    && reqTmpPeriod.ToDate == reqTmpPeriodQty.ToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all periods defined by the period template.
    /// </summary>
    public void calcPeriods()
    {
        WorkPeriodTemplateCalculate  workPeriodTemplateCalculate;
        workPeriodTemplateCalculate = WorkPeriodTemplateCalculate::newStandard(workPeriodTemplate.RecId,todayDate,ForwardBackward::Forward);
        workPeriodTemplateCalculate.calcPeriods(this);

        RecordInsertList periods = new RecordInsertList(tableNum(ReqTmpPeriod), true, true, true, true, true, reqTmpPeriod);

        while select reqTmpPeriodQty
        {
            reqTmpPeriod.FromDate = reqTmpPeriodQty.FromDate;
            reqTmpPeriod.ToDate= reqTmpPeriodQty.ToDate;
            periods.add(reqTmpPeriod);
        }
        periods.insertDatabase();

        this.calcReceipts();
        this.calcIssues();
        this.calcDelta();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and updates the <c>qtyReceipt</c> field for all <c>ReqTmpPeriodQty</c> records.
    /// </summary>
    protected void calcReceipts()
    {
        ReqTrans    reqTrans;

        while select sum(Qty) from reqTrans
            join FromDate, ToDate from reqTmpPeriod
            group by FromDate, ToDate
            where reqTrans.PlanVersion              == this.reqPlanVersionRefRecId()
               && reqTrans.ItemId                   == itemId
               && reqTrans.CovInventDimId           == covDimId
               && reqTrans.Direction                == InventDirection::Receipt
               && reqTrans.RefType                  != ReqRefType::SafetyInvent
               && reqTrans.ReqDate                  >= reqTmpPeriod.FromDate
               && reqTrans.ReqDate                  <= reqTmpPeriod.ToDate
        {
            update_recordset reqTmpPeriodQty
            setting QtyReceipt = reqTmpPeriodQty.QtyReceipt + reqTrans.Qty
                where reqTmpPeriod.FromDate  == reqTmpPeriodQty.FromDate
                    && reqTmpPeriod.ToDate == reqTmpPeriodQty.ToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCovDimId</Name>
				<Source><![CDATA[
    public InventDimId parmCovDimId(InventDimId _covDimId = covDimId)
    {
        covDimId = _covDimId;

        return covDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodayDate</Name>
				<Source><![CDATA[
    public TransDate parmTodayDate(TransDate _todayDate = todayDate)
    {
        todayDate = _todayDate;

        return todayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplate</Name>
				<Source><![CDATA[
    public WorkPeriodTemplate parmWorkPeriodTemplate(WorkPeriodTemplate _workPeriodTemplate = workPeriodTemplate)
    {
        workPeriodTemplate = _workPeriodTemplate;

        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanVersionRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the master plan version ID.
    /// </summary>
    /// <returns>
    ///     The ID of the active master plan version.
    /// </returns>
    protected RefRecId reqPlanVersionRefRecId()
    {
        if (!reqPlanVersionRefRecId)
        {
            reqPlanVersionRefRecId =
                                     ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
        }

        return reqPlanVersionRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTmpPeriodQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>reqTmpPeriodQty</c> object variable that contains the created periods.
    /// </summary>
    /// <returns>
    ///    The handle of the table buffer of the <c>reqTmpPeriodQty</c> object variable that contains all
    ///    created periods.
    /// </returns>
    public ReqTmpPeriodQty  reqTmpPeriodQty()
    {
        return reqTmpPeriodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReqTmpPeriodQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the periods on the server and retrieves the results as temporary records.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_todayDate">
    ///    A date that contains the current date.
    /// </param>
    /// <param name="_reqPlanId">
    ///    A string that contains a master plan ID.
    /// </param>
    /// <param name="_itemId">
    ///    A string that contains an item ID.
    /// </param>
    /// <param name="_covDimId">
    ///    A string that contains a coverage dimension ID.
    /// </param>
    /// <returns>
    ///    The handle of the table buffer of the <c>reqTmpPeriodQty</c> object variable that contains all
    ///    created periods.
    /// </returns>
    public static ReqTmpPeriodQty calcReqTmpPeriodQty(
        RecId               _workPeriodTemplateRecId,
        TransDate           _todayDate,
        ReqPlanId           _reqPlanId,
        ItemId              _itemId,
        InventDimId         _covDimId)
    {
        ReqPeriodTemplateCalculate  reqPeriodTemplateCalculate;

        reqPeriodTemplateCalculate = ReqPeriodTemplateCalculate::newStandard(_workPeriodTemplateRecId,_todayDate,_reqPlanId,_itemId,_covDimId);
        reqPeriodTemplateCalculate.calcPeriods();

        return reqPeriodTemplateCalculate.reqTmpPeriodQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqPeriodTemplateCalculate construct()
    {
        return new ReqPeriodTemplateCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>ReqPeriodTemplateCalculate</c> object.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_todayDate">
    ///    A date that contains the current date.
    /// </param>
    /// <param name="_reqPlanId">
    ///    A string that contains a master plan ID.
    /// </param>
    /// <param name="_itemId">
    ///    A string that contains an item ID.
    /// </param>
    /// <param name="_covDimId">
    ///    A string that contains a coverage dimension ID.
    /// </param>
    /// <returns>
    ///    A <c>ReqPeriodTemplateCalculate</c> object.
    /// </returns>
    public static ReqPeriodTemplateCalculate newStandard(
        RecId               _workPeriodTemplateRecId,
        TransDate           _todayDate,
        ReqPlanId           _reqPlanId,
        ItemId              _itemId,
        InventDimId         _covDimId)
    {
        ReqPeriodTemplateCalculate  reqPeriodTemplateCalculate;

        reqPeriodTemplateCalculate = ReqPeriodTemplateCalculate::construct();
        reqPeriodTemplateCalculate.parmTodayDate(_todayDate);
        reqPeriodTemplateCalculate.parmWorkPeriodTemplate(WorkPeriodTemplate::find(_workPeriodTemplateRecId));
        reqPeriodTemplateCalculate.parmReqPlanId(_reqPlanId);
        reqPeriodTemplateCalculate.parmItemId(_itemId);
        reqPeriodTemplateCalculate.parmCovDimId(_covDimId);

        return reqPeriodTemplateCalculate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>