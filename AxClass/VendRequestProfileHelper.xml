<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestProfileHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestProfileHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the enabled fields.
    /// </summary>
    /// <param name="_fieldMetadataGroupType">
    ///    The group type to get the enabled fields for.
    /// </param>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <returns>
    /// The list of the fields.
    /// </returns>
    public static List allowedFields(VendFieldMetadataGroupType _fieldMetadataGroupType, VendFieldMetaDataTmp _vendFieldMetaDataTmp = null)
    {
        List fields = new List(Types::Container);

        switch (_fieldMetadataGroupType)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
            case VendFieldMetadataGroupType::VendRequestCategory:
            case VendFieldMetadataGroupType::VendRequestStatusChange:
                VendRequestProfileHelper::addVendRequestBusinessJustFields(_vendFieldMetaDataTmp, _fieldMetadataGroupType);
                break;

            case VendFieldMetadataGroupType::VendRequestProfile:
                VendRequestProfileHelper::addVendRequestProspectiveProfileFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestProfile);
                break;

            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
                VendRequestProfileHelper::addVendRequestProspectiveProfileFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestExtensionProfile);
                break;

            case VendFieldMetadataGroupType::VendRequestVSS:
                VendRequestProfileHelper::addVendTableFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                VendRequestProfileHelper::addDirOrganizationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                VendRequestProfileHelper::addVendBankAccountFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                VendRequestProfileHelper::addVendStateTaxIDFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                VendRequestProfileHelper::addVendCertificationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                VendRequestProfileHelper::addVendProcurementCategoryStatusFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
                break;

            case VendFieldMetadataGroupType::VendRequestUnsolicitedRegistration:
                VendRequestProfileHelper::addVendRequestSignupFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestUnsolicitedRegistration);
                break;

            case VendFieldMetadataGroupType::VendProspectiveVendorRegistration:
                VendRequestProfileHelper::addVendProspectiveVendorRegistrationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendProspectiveVendorRegistration);
                break;
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowsMultipleProfiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a group profile type allows for multiple profiles for that type.
    /// </summary>
    /// <param name="_type">
    /// The profile type to check.
    /// </param>
    /// <returns>
    /// true if the profile type allows for multiple profiles for that type; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When looking up a profile type where the look up does not use any parameters (such as looking up by
    /// profile type instead of by profile name or by country/region), then that profile would only allow a
    /// single instance.
    /// </remarks>
    public static boolean allowsMultipleProfiles(VendFieldMetadataGroupType _type)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that all of the mandatory fields have a value.
    /// </summary>
    /// <param name="_configurationProfileRecId">
    /// The record ID of the configuration to use.
    /// </param>
    /// <param name="_record">
    /// The record to check mandatory fields.
    /// </param>
    /// <param name = "_checkContactInfoFields"></param>
    ///    A Boolean value that indicates whether or not to check the configurable Contact Information related fields; optional.
    /// </param>
    /// <returns>
    /// true if all of the mandatory fields have a value; otherwise, false.
    /// </returns>
    public static boolean checkMandatoryFields(recId _configurationProfileRecId, Common _record, boolean _checkContactInfoFields = true)
    {
        boolean             ret = true;
        VendFieldMetadata   fieldMetadata;
        DictField           field;

        str currentIsoCode = LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).ISOcode;

        while select Field from fieldMetadata
            where fieldMetadata.MetadataGroup == _configurationProfileRecId
                && fieldMetadata.FieldTable == _record.TableId
                && fieldMetadata.FieldStatus == VendFieldMetadataStatus::Required
        {
            field = SysDictField::findFieldById(_record.TableId, fieldMetadata.Field);

            if ((!_checkContactInfoFields
                    && VendRequestProfileHelper::isProspectiveVendorRegistrationContactField(fieldMetadata))
                || (conLen(field.getCountryRegionCodes()) > 0
                    && conFind(field.getCountryRegionCodes(), currentIsoCode) == 0))
            {
                continue;
            }

            if (field != null && !_record.(fieldMetadata.Field))
            {
                ret = checkFailed(strFmt("@SYS84378", field.label()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProspectiveVendorRegistrationContactField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>VendFieldMetadata</c> refers to a <c>VendProspectiveVendorRegistration</c> contact information field.
    /// </summary>
    /// <param name = "_vendFieldMetadata">The <c>VendFieldMetadata</c> record.</param>
    /// <returns>
    /// true if the <c>VendFieldMetadata</c> refers to a <c>VendProspectiveVendorRegistration</c> contact information field; otherwise, false.
    /// </returns>
    private static boolean isProspectiveVendorRegistrationContactField(VendFieldMetadata _vendFieldMetadata)
    {
        return _vendFieldMetadata.FieldTable == tableNum(VendProspectiveVendorRegistration)
                && (_vendFieldMetadata.Field == fieldNum(VendProspectiveVendorRegistration, Phone)
                    || _vendFieldMetadata.Field == fieldNum(VendProspectiveVendorRegistration, Email)
                    || _vendFieldMetadata.Field == fieldNum(VendProspectiveVendorRegistration, TeleFax)
                    || _vendFieldMetadata.Field == fieldNum(VendProspectiveVendorRegistration, Website)
                    || _vendFieldMetadata.Field == fieldNum(VendProspectiveVendorRegistration, ContactPhone));
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the metadata properties of the fields at runtime.
    /// </summary>
    /// <param name="_configurationProfileRecId">
    /// The record ID of the configuration to use.
    /// </param>
    /// <param name="_formDatSource">
    /// The form data source to update.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the field to update.
    /// </param>
    /// <param name="_mandatoryOnly">
    /// A boolean indicating if only the mandatory fields should be configured; optional.
    /// </param>
    /// <param name="_mandatoryOnly">
    /// A boolean indicating if the configuration of the contact fields should be ignored; optional.
    /// </param>
    public static void configureFields(recId _configurationProfileRecId, FormDataSource _formDatSource, tableId _tableId, boolean _mandatoryOnly = false, boolean _ignoreContactFields = false)
    {
        VendFieldMetadata    fieldMetadata;

        if (_configurationProfileRecId)
        {
            str currentIsoCode = LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).ISOcode;

            while select Field from fieldMetadata where fieldMetadata.MetadataGroup == _configurationProfileRecId &&
                    fieldMetadata.FieldTable == _tableId
            {
                DictField dictField = new DictField(_tableId, fieldMetadata.Field);
                
                if (_ignoreContactFields
                    && VendRequestProfileHelper::isProspectiveVendorRegistrationContactField(fieldMetadata))
                {
                    continue;
                }

                if (conLen(dictField.getCountryRegionCodes()) > 0
                    && conFind(dictField.getCountryRegionCodes(), currentIsoCode) == 0)
                {
                    _formDatSource.object(fieldMetadata.Field).visible(false);
                    continue;
                }

                if (!_mandatoryOnly)
                {
                    _formDatSource.object(fieldMetadata.Field).visible(fieldMetadata.FieldStatus != VendFieldMetadataStatus::NotDisplayed);
                }

                _formDatSource.object(fieldMetadata.Field).mandatory(fieldMetadata.FieldStatus == VendFieldMetadataStatus::Required);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the configuration profile and the fields that are associated with it.
    /// </summary>
    /// <param name="_profileRecIdToCopy">
    /// The profile record ID for the profile to copy.
    /// </param>
    /// <returns>
    /// The copied configuration profile.
    /// </returns>
    public static VendRequestProfile copyConfiguration(recId _profileRecIdToCopy)
    {
        VendFieldMetadataGroup configuration;
        VendFieldMetadata existingConfiguredField;
        VendFieldMetadata configuredField;
        VendRequestProfile existingVendorConfiguration;
        VendRequestProfile vendorConfiguration;
        VendRequestProfile profileToCopy = VendRequestProfile::find(_profileRecIdToCopy);

        if (!VendRequestProfileHelper::allowsMultipleProfiles(profileToCopy.ProfileType))
        {
            //Profile type does not allow multiple profile configurations
            throw error("@SYS130908");
        }
        //@SYS130909=Copy of %
        select firstonly existingVendorConfiguration
            where existingVendorConfiguration.Name == strFmt("@SYS130909", profileToCopy.Name)
                && existingVendorConfiguration.ProfileType == profileToCopy.ProfileType;

        if (existingVendorConfiguration.RecId)
        {
            //Copy of configuration already exists
            throw error("@SYS130910");
        }
        ttsbegin;
        configuration = null;
        configuration.initValue();
        configuration.insert();

        vendorConfiguration = null;
        vendorConfiguration.MetadataGroup = configuration.RecId;

        vendorConfiguration.AcceptAgreementText = profileToCopy.AcceptAgreementText;
        vendorConfiguration.AgreementText = profileToCopy.AgreementText;
        vendorConfiguration.CheckDisallowed = profileToCopy.CheckDisallowed;
        vendorConfiguration.CheckEmbargoCountries = profileToCopy.CheckEmbargoCountries;
        vendorConfiguration.CheckParties = profileToCopy.CheckParties;
        vendorConfiguration.ShowAcceptAgreement = profileToCopy.ShowAcceptAgreement;
        vendorConfiguration.ShowAgreementText = profileToCopy.ShowAgreementText;
        vendorConfiguration.SubmittedText = profileToCopy.SubmittedText;

        //@SYS130909=Copy of %1
        vendorConfiguration.Name = strFmt("@SYS130909", profileToCopy.Name);
        vendorConfiguration.Description = profileToCopy.Description;
        vendorConfiguration.ProfileType = profileToCopy.ProfileType;
        vendorConfiguration.IsDefault = false;
        vendorConfiguration.insert();

        while select MetadataGroup, FieldTable, Field, FieldStatus from existingConfiguredField where existingConfiguredField.MetadataGroup == profileToCopy.MetadataGroup
        {
            configuredField = null;
            configuredField.MetadataGroup = vendorConfiguration.MetadataGroup;
            configuredField.FieldTable = existingConfiguredField.FieldTable;
            configuredField.Field = existingConfiguredField.Field;
            configuredField.FieldStatus = existingConfiguredField.FieldStatus;
            configuredField.insert();
        }
        ttscommit;
        return vendorConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProfileFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the enabled fields for the profile's type with default field status values.
    /// </summary>
    /// <param name="_profileRecId">
    ///    The record ID of the profile to create fields for.
    /// </param>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table contains the fields for different meta data group type.
    /// </param>
    /// <param name="_profileType">
    /// The <c>VendFieldMetadataGroupType</c> field of the profile.
    /// </param>
    /// <param name="_metaDataGroup">
    /// The <c>MetaDataGroup</c> fied of the profile.
    /// </param>
    public static void createProfileFields(
        RecId _profileRecId,
        VendFieldMetaDataTmp _vendFieldMetaDataTmp = null,
        VendFieldMetadataGroupType _profileType = VendFieldMetadataGroupType::VendRequestCategory,
        RefRecId _metaDataGroup = 0)
    {
        VendFieldMetadata configurationField;
        VendFieldMetadataStatus fieldStatus = VendFieldMetadataStatus::Displayed;

        insert_recordset configurationField(
            MetadataGroup,
            FieldTable,
            Field,
            FieldStatus)
        select
            _metaDataGroup,
            FieldTable,
            Field,
            FieldStatus
        from _vendFieldMetaDataTmp
            where _vendFieldMetaDataTmp.profileType == _profileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureHasDefaultProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that there is a default profile based on the profile type.
    /// </summary>
    /// <param name="_type">
    ///    The profile group type to check.
    /// </param>
    /// <returns>
    ///    The default profile.
    /// </returns>
    /// <remarks>
    ///    Only one default profile is enabled per type. The default profile is returned by the
    ///    <c>findByMetadataGroup</c> method when no other profile matches the search criteria.
    /// </remarks>
    public static VendRequestProfile ensureHasDefaultProfile(VendFieldMetadataGroupType _type)
    {
        VendRequestProfile defaultProfile;
        VendFieldMetadataGroup defaultConfiguration;
        VendFieldMetaDataTmp   vendFieldMetaDataTmp;

        select firstonly defaultProfile
            where defaultProfile.ProfileType == _type
            && defaultProfile.IsDefault == true;

        ttsbegin;

        if (!defaultProfile.RecId)
        {
            defaultConfiguration.clear();
            defaultConfiguration.initValue();
            defaultConfiguration.insert();

            defaultProfile.clear();
            defaultProfile.initValue();
            defaultProfile.MetadataGroup = defaultConfiguration.RecId;
            defaultProfile.ProfileType = _type;
            defaultProfile.Name = "@SYS130911";
            defaultProfile.insert();

            VendRequestProfileHelper::allowedFields(defaultProfile.ProfileType, vendFieldMetaDataTmp);

            VendRequestProfileHelper::createProfileFields(
                defaultProfile.RecId,
                vendFieldMetaDataTmp,
                defaultProfile.ProfileType,
                defaultProfile.MetadataGroup);
        }

        ttscommit;

        return defaultProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendRequestProfile</c> record based on the profile group type and a country/region.
    /// </summary>
    /// <param name="_type">
    /// The profile group type for which to find a <c>VendRequestProfile</c> record.
    /// </param>
    /// <param name="_dataAreaId">
    /// The company for which to find a <c>VendRequestProfile</c> record.
    /// </param>
    /// <returns>
    /// The <c>VendRequestProfile</c> record that matches the country/region; otherwise, the default
    /// <c>VendRequestProfile</c> record for a profile group type.
    /// </returns>
    /// <remarks>
    /// Because each company can only be assigned one time per profile group type, a single
    /// <c>VendRequestProfile</c> record is returned. This makes sure that a default profile exists. The
    /// default profile is used as a fall back when a company is not assigned for the type.
    /// </remarks>
    public static VendRequestProfile findByDataArea(VendFieldMetadataGroupType _type, dataAreaId _dataAreaId = curext())
    {
        VendRequestProfile          profile;
        VendRequestProfileCompany   profileCompany;

        select firstonly profile where
            profile.ProfileType == _type
            exists join profileCompany where
            profileCompany.VendRequestProfile == profile.RecId && profileCompany.Company == _dataAreaId;

        if (profile.RecId == 0)
        {
            profile = VendRequestProfileHelper::ensureHasDefaultProfile(_type);
        }

        return profile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendRequestProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendRequestProfile</c> record based on the profile group type and a country/region.
    /// </summary>
    /// <param name="_type">
    /// The profile group type for which to find a <c>VendRequestProfile</c> record.
    /// </param>
    /// <param name="_countryRegion">
    /// The country/region for which to find a <c>VendRequestProfile</c> record.
    /// </param>
    /// <returns>
    /// The <c>VendRequestProfile</c> record that matches the country/region; otherwise, the default
    /// <c>VendRequestProfile</c> record for a profile group type.
    /// </returns>
    /// <remarks>
    /// A single <c>VendRequestProfile</c> record is returned. This makes sure that a default profile
    /// exists because each country/region can only be assigned one time per profile group type. The
    /// default profile is used as a fall back when a country/region is not assigned for the type.
    /// </remarks>
    public static VendRequestProfile findVendRequestProfile(VendFieldMetadataGroupType _type, LogisticsAddressCountryRegionId _countryRegion)
    {
        VendRequestProfile profile;
        VendRequestProfileCountry countryRegion;

        select firstonly profile where
            profile.ProfileType == _type
            exists join countryRegion where
            countryRegion.VendRequestProfile == profile.RecId && countryRegion.CountryRegion == _countryRegion;

        if (profile.RecId == 0)
        {
            profile = VendRequestProfileHelper::ensureHasDefaultProfile(_type);
        }
        return profile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of tables that are used in the field metadata for a configuration profile.
    /// </summary>
    /// <param name="_type">
    ///    The group type to get the tables for.
    /// </param>
    /// <returns>
    ///    The tables that is used in the field metadata.
    /// </returns>
    public static Set getFieldTables(VendFieldMetadataGroupType _type)
    {
        VendFieldMetadataTmp vendFieldMetadataTmp;
        Set tableIds = new Set(Types::Integer);

        VendRequestProfileHelper::allowedFields(_type, vendFieldMetadataTmp);

        while select FieldTable from vendFieldMetaDataTmp
            group by vendFieldMetaDataTmp.FieldTable
        {
            tableIds.add(vendFieldMetaDataTmp.FieldTable);
        }

        return tableIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileVendRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the vendor request record of the current user.
    /// </summary>
    /// <returns>
    ///    The vendor request record of the current user.
    /// </returns>
    public static VendRequest getProfileVendRequest()
    {
        VendRequestCompany vendRequestCompany;
        DirPersonUser dirPersonUser;

        select firstonly RecId from vendRequestCompany
              exists join dirPersonUser
              where vendRequestCompany.ContactParty == dirPersonUser.PersonParty &&
              dirPersonUser.User == curUserId() &&
              vendRequestCompany.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyProfile &&
              vendRequestCompany.VendRequestCompanyStatus != VendRequestCompanyStatus::VendorRejected &&
              vendRequestCompany.VendRequestCompanyStatus != VendRequestCompanyStatus::VendorApproved;

        return VendRequest::find(vendRequestCompany.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the content management
    ///    for the vendor request feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports content.
    /// </param>
    /// <returns>
    ///    true if the type supports content; otherwise, false.
    /// </returns>
    public static boolean supportsContent(VendFieldMetadataGroupType _type)
    {
        boolean ret = _type != VendFieldMetadataGroupType::VendRequestVSS;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>SysFieldMetadataGroupType</c> enumeration type supports a questionnaire.
    /// </summary>
    /// <param name="_type">
    /// The type to check if it supports system checks.
    /// </param>
    /// <returns>
    /// true value if the type supports questionnaire; otherwise, false.
    /// </returns>
    public static boolean supportsQuestionnaire(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestProfile:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
            case VendFieldMetadataGroupType::VendRequestVSS:
            case VendFieldMetadataGroupType::VendProspectiveVendorRegistration:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsSystemChecks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports system checks for the
    ///    vendor request feature. System checks are validation checks for vendor requests.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports system checks.
    /// </param>
    /// <returns>
    ///    true if the type supports system checks; otherwise, false.
    /// </returns>
    public static boolean supportsSystemChecks(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
            case VendFieldMetadataGroupType::VendRequestProfile:
            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsRequireCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the require category feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the required category feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the require category feature; otherwise, false.
    /// </returns>
    public static boolean supportsRequireCategory(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsCheckDisallowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the check disallowed feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the check disallowed feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the check disallowed feature; otherwise, false.
    /// </returns>
    public static boolean supportsCheckDisallowed(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestProfile:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsCheckEmbargoCountriesRegions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the check embargo countries feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the check embargo countries feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the check embargo countries feature; otherwise, false.
    /// </returns>
    public static boolean supportsCheckEmbargoCountriesRegions(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestProfile:
            case VendFieldMetadataGroupType::VendRequestExtensionJustification:
            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsCheckParties</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the check parties feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the check parties feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the check parties feature; otherwise, false.
    /// </returns>
    public static boolean supportsCheckParties(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestNewVendorJustification:
            case VendFieldMetadataGroupType::VendRequestProfile:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsShowBusinessInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the show business information feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the show business information feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the show business information feature; otherwise, false.
    /// </returns>
    public static boolean supportsShowBusinessInformation(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestProfile:
            case VendFieldMetadataGroupType::VendRequestExtensionProfile:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the fields tab.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the fields tab.
    /// </param>
    /// <returns>
    ///    true if the type supports the fields tab; otherwise, false.
    /// </returns>
    public static boolean supportsFields(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestCategoryApproval:
            case VendFieldMetadataGroupType::VendRequestVendorCategory:
                return false;
            default:
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsSubmittedText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>SysFieldMetadataGroupType</c> enumeration value supports the submitted text feature.
    /// </summary>
    /// <param name="_type">
    ///    The type to check if it supports the submitted text feature.
    /// </param>
    /// <returns>
    ///    true if the type supports the submitted text feature; otherwise, false.
    /// </returns>
    public static boolean supportsSubmittedText(VendFieldMetadataGroupType _type)
    {
        switch (_type)
        {
            case VendFieldMetadataGroupType::VendRequestUnsolicitedRegistration:
            case VendFieldMetadataGroupType::VendProspectiveVendorRegistration:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirOrganizationFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>DirOrganization</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addDirOrganizationFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(DirOrganization), fieldNum(DirOrganization, OrgNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewProfileFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new configuration fields in the existing profiles.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table buffer that contains the fields for different meta data group type
    /// </param>
    public static void addNewProfileFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp)
    {
        VendFieldMetadata  configurationField;
        VendFieldMetadata  defaultConfigurationField;
        VendRequestProfile existingProfile;

        ttsBegin;

        insert_recordset configurationField(
            FieldTable,
            Field,
            FieldStatus,
            MetadataGroup)
        select
            FieldTable,
            Field,
            FieldStatus
        from _vendFieldMetaDataTmp
            join MetaDataGroup from existingProfile
                where _vendFieldMetaDataTmp.profileType == existingProfile.ProfileType
            notExists join defaultConfigurationField
                where defaultConfigurationField.Field == _vendFieldMetaDataTmp.Field
                    && defaultConfigurationField.FieldTable == _vendFieldMetaDataTmp.FieldTable
                    && defaultConfigurationField.MetadataGroup == existingProfile.MetadataGroup;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendBankAccountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendBankAccount</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendBankAccountFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, BankCIN), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, Name), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, AccountNum), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, BankAccountType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, RegistrationNum), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, ContactPerson), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, swiftNo), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, BankCodeType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, BankIBAN), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, ExpiryDate), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendBankAccount), fieldNum(VendBankAccount, ActiveDate), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendCertificationFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendCertification</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendCertificationFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendCertification), fieldNum(VendCertification, ValidFromDate), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendCertification), fieldNum(VendCertification, ValidToDate), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendProcurementCategoryStatusFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendProcurementCategoryStatus</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendProcurementCategoryStatusFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProcurementCategoryStatus), fieldNum(VendProcurementCategoryStatus, ValidFrom), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProcurementCategoryStatus), fieldNum(VendProcurementCategoryStatus, ValidTo), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProcurementCategoryStatus), fieldNum(VendProcurementCategoryStatus, OperatingUnit), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProcurementCategoryStatus), fieldNum(VendProcurementCategoryStatus, VendorCategoryStatus), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendRequestBusinessJustFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendRequestBusinessJustification</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendRequestBusinessJustFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, Justification), VendFieldMetadataStatus::Required, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, PreferenceReason), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, CheckedExistingVendors), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, EstimatedActivityStartDate), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, InitalOrderValue), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, EstimatedBusinessAmount), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, EstimatedNumberOfTransactions), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, OneTimeVendor), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestBusinessJustification), fieldNum(VendRequestBusinessJustification, BidOnly), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendRequestProspectiveProfileFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendRequestProspectiveProfile</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendRequestProspectiveProfileFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, ForeignOwnership), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, MinorityOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, FemaleOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, SmallBusiness), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, LocallyOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, PaymTerm), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, Currency), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, CompanyIdSiret), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, CompanyNAFCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, LineOfBusinessId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, FiscalCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, vatNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, Federal1099Number), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, Federal1099NumberType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, dba), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, Tax1099NameChoice), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, OrganizationNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, TaxState), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, TaxStateIdentifier), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, TaxStateIdentifierType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestProspectiveProfile), fieldNum(VendRequestProspectiveProfile, OrganizationIdentifier), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendRequestSignupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendRequestSignup</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendRequestSignupFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, MinorityOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, FemaleOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, SmallBusiness), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, LocallyOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, VatNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, Tax1099Fields), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, TaxIdType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, DBA), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, Phone), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, Telefax), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, Email), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, Website), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, ContactPhone), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, ContactTelefax), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, NumberOfEmployees), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendRequestSignup), fieldNum(VendRequestSignup, OrganizationType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendProspectiveVendorRegistrationFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendProspectiveVendorRegistration</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendProspectiveVendorRegistrationFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, ForeignOwnership), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, MinorityOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, FemaleOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, SmallBusiness), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, LocallyOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, PaymTerm), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Currency), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, CompanyIdSiret), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, CompanyNAFCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, LineOfBusinessId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, FiscalCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Federal1099Number), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Federal1099NumberType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Tax1099NameChoice), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, OrganizationNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, TaxState), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, TaxStateIdentifier), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, TaxStateIdentifierType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, OrganizationIdentifier), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, VatNumber), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Tax1099Fields), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, DBA), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Phone), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Telefax), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Email), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, Website), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, NumberOfEmployees), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendProspectiveVendorRegistration), fieldNum(VendProspectiveVendorRegistration, OrganizationType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendStateTaxIDFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendStateTaxID</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void addVendStateTaxIDFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendStateTaxID), fieldNum(VendStateTaxID, StateId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendStateTaxID), fieldNum(VendStateTaxID, StateTaxID), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendStateTaxID), fieldNum(VendStateTaxID, TaxIDType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the configuration fieds of the <c>VendTable</c> table in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldMetadataGroupType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    protected static void addVendTableFields(VendFieldMetaDataTmp _vendFieldMetaDataTmp, VendFieldMetadataGroupType _fieldMetadataGroupType)
    {
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, AccountNum), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, Currency), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, CompanyNAFCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, BankAccount), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, CompanyIdSiret), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, MinorityOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, FemaleOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, Tax1099Reports), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, Tax1099RegNum), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, FiscalCode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, BirthPlace), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, ResidenceForeignCountryRegionId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, ForeignEntityIndicator), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, TaxIDType), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, dba), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, Tax1099NameChoice), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, MainContactWorker), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, SmallBusiness), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, LocallyOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, w9), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, OrgId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, EthnicOriginId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, VeteranOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, DisabledOwned), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, hubZone), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, YourAccountNum), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, DlvTerm), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, DlvMode), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
        VendRequestProfileHelper::insertVendFieldMetaDataTmp(_vendFieldMetaDataTmp, tableNum(VendTable), fieldNum(VendTable, DestinationCodeId), VendFieldMetadataStatus::Displayed, _fieldMetadataGroupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedFieldsForAllTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the configuration fields in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    public static void allowedFieldsForAllTypes(VendFieldMetaDataTmp _vendFieldMetaDataTmp)
    {
        // Add fields for VendFieldMetadataGroupType::VendRequestNewVendorJustification
        VendRequestProfileHelper::addVendRequestBusinessJustFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestNewVendorJustification);

        // Add fields for VendFieldMetadataGroupType::VendRequestExtensionJustification
        VendRequestProfileHelper::addVendRequestBusinessJustFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestExtensionJustification);

        // Add fields for VendFieldMetadataGroupType::VendRequestCategory
        VendRequestProfileHelper::addVendRequestBusinessJustFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestCategory);

        // Add fields for VendFieldMetadataGroupType::VendRequestStatusChange
        VendRequestProfileHelper::addVendRequestBusinessJustFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestStatusChange);

        // Add fields for VendFieldMetadataGroupType::VendRequestProfile
        VendRequestProfileHelper::addVendRequestProspectiveProfileFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestProfile);

        // Add fields for VendFieldMetadataGroupType::VendRequestExtensionProfile
        VendRequestProfileHelper::addVendRequestProspectiveProfileFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestExtensionProfile);

        // Add fields for VendFieldMetadataGroupType::VendRequestVSS
        VendRequestProfileHelper::addVendTableFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
        VendRequestProfileHelper::addDirOrganizationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
        VendRequestProfileHelper::addVendBankAccountFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
        VendRequestProfileHelper::addVendStateTaxIDFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
        VendRequestProfileHelper::addVendCertificationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);
        VendRequestProfileHelper::addVendProcurementCategoryStatusFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestVSS);

        // Add fields for VendFieldMetadataGroupType::VendRequestUnsolicitedRegistration
        VendRequestProfileHelper::addVendRequestSignupFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendRequestUnsolicitedRegistration);

        // Add fields for VendFieldMetadataGroupType::VendProspectiveVendorRegistration
        VendRequestProfileHelper::addVendProspectiveVendorRegistrationFields(_vendFieldMetaDataTmp, VendFieldMetadataGroupType::VendProspectiveVendorRegistration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendFieldMetaDataTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record in the <c>VendFieldMetaDataTmp</c> table.
    /// </summary>
    /// <param name="_vendFieldMetaDataTmp">
    /// The <c>VendFieldMetaDataTmp</c> table to store the configuration fields.
    /// </param>
    /// <param name="_fieldTable">
    /// The field table of the configuration field.
    /// </param>
    /// <param name="_field">
    /// The field Id of the configuration field.
    /// </param>
    /// <param name="_fieldStatus">
    /// The field status of the configuration field.
    /// </param>
    /// <param name="_profileType">
    /// The field metadata group type of the configuration fields.
    /// </param>
    private static void insertVendFieldMetaDataTmp(
        VendFieldMetaDataTmp _vendFieldMetaDataTmp,
        RefTableId _fieldTable,
        RefFieldId _field,
        VendFieldMetaDataStatus _fieldStatus,
        VendFieldMetaDataGroupType _profileType)
    {
        DictField dictField = SysDictField::findFieldById(_fieldTable, _field);

        _vendFieldMetaDataTmp.clear();
        _vendFieldMetaDataTmp.Field       = _field;
        _vendFieldMetaDataTmp.FieldTable  = _fieldTable;
        _vendFieldMetaDataTmp.FieldStatus = _fieldStatus;
        _vendFieldMetaDataTmp.profileType = _profileType;
        _vendFieldMetaDataTmp.FieldName   = dictField.name();
        _vendFieldMetaDataTmp.FieldLabel  = dictField.label();
        _vendFieldMetaDataTmp.doInsert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>