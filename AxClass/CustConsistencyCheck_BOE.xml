<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustConsistencyCheck_BOE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustConsistencyCheck_BOE extends CustConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBillOfExchangeJour</Name>
				<Source><![CDATA[
        private void checkBillOfExchangeJour()
    {
        CustBillOfExchangeJour  custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustVendNegInstSeqNum   seqNum;

        while select optimisticlock custBillOfExchangeJour
        {
            seqNum = CustBillOfExchangeTrans::maxSeqNum(custBillOfExchangeJour.BillOfExchangeId);

            select firstonly BillOfExchangeId, Status, SeqNum, DueDate from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId     &&
                  custBillOfExchangeTrans.Status           == custBillOfExchangeJour.Status               &&
                  custBillOfExchangeTrans.SeqNum           == seqNum;

            if (custBillOfExchangeJour.DueDate != custBillOfExchangeTrans.DueDate)
            {
                checkFailed(strfmt("@SYS83704", custBillOfExchangeJour.BillOfExchangeId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    custBillOfExchangeJour.DueDate = custBillOfExchangeTrans.DueDate;
                    custBillOfExchangeJour.update();
                    this.updateCorrected();
                }
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBillOfExchangeTrans</Name>
				<Source><![CDATA[
    private void checkBillOfExchangeTrans()
    {
        CustBillOfExchangeJour  custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustVendNegInstSeqNum   seqNum;
        DueDate                 dueDate;

        while select optimisticlock custBillOfExchangeTrans
        {
            dueDate = this.calculateDueDate(custBillOfExchangeTrans);

            if (custBillOfExchangeTrans.DueDate != dueDate)
            {
                checkFailed(strfmt("@SYS83705", custBillOfExchangeTrans.BillOfExchangeId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    custBillOfExchangeTrans.DueDate = dueDate;
                    custBillOfExchangeTrans.update();

                    seqNum = CustBillOfExchangeTrans::maxSeqNum(custBillOfExchangeTrans.BillOfExchangeId);
                    if (custBillOfExchangeTrans.SeqNum == seqNum)
                    {
                        custBillOfExchangeJour = CustBillOfExchangeJour::find(custBillOfExchangeTrans.BillOfExchangeId,true);
                        if (custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status)
                        {
                            custBillOfExchangeJour.DueDate = dueDate;
                            custBillOfExchangeJour.update();
                        }
                    }

                    this.updateCorrected();
                }
            }
        }
        if (this.checkFix() == CheckFix::Fix)
        {
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
        public configurationKeyId configurationKey()
    {
        return configurationkeynum(CustBillOfExchange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the due date for bill of exchange record.
    /// </summary>
    /// <param name = "_custBillOfExchangeTrans">
    ///     A <c>CustBillOfExchangeTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     The due date.
    /// </returns>
    [Wrappable(true)]
    protected final DueDate calculateDueDate(CustBillOfExchangeTrans _custBillOfExchangeTrans)
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;
        DueDate dueDate;

        select custTrans
            where custTrans.BillOfExchangeID == _custBillOfExchangeTrans.BillOfExchangeId
                && custTrans.AccountNum == _custBillOfExchangeTrans.CustAccount
                && custTrans.Voucher == _custBillOfExchangeTrans.Voucher
                && custTrans.TransDate == _custBillOfExchangeTrans.TransDate;

        dueDate = custTrans.DueDate;
        if (!dueDate)
        {
            if (_custBillOfExchangeTrans.Status == CustVendNegInstStatus::Honored)
            {
                select RecId from custTrans
                    order by BillOfExchangeSeqNum desc
                        where custTrans.BillOfExchangeID == _custBillOfExchangeTrans.BillOfExchangeId
                    join DueDate from custSettlement
                        order by DueDate desc
                            where custSettlement.TransRecId == custTrans.RecId;

                dueDate = custSettlement.DueDate;
            }
            else
            {
                select DueDate from custTransOpen
                    order by DueDate desc
                        exists join custTrans
                            where custTrans.RecId == custTransOpen.RefRecId 
                                && custTrans.AccountNum == custTransOpen.AccountNum 
                                && custTrans.BillOfExchangeID == _custBillOfExchangeTrans.BillOfExchangeId 
                                && custTrans.AccountNum == _custBillOfExchangeTrans.CustAccount 
                                && custTrans.Voucher == _custBillOfExchangeTrans.Voucher 
                                && custTrans.TransDate == _custBillOfExchangeTrans.TransDate;

                dueDate = custTransOpen.DueDate != dateNull() ? custTransOpen.DueDate : _custBillOfExchangeTrans.DueDate;
            }
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ttsbegin;

        this.checkBillOfExchangeJour();

        this.checkBillOfExchangeTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
        public classId treeParentClassId()
    {
        return classnum(CustConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public ClassDescription description()
    {
        return "@SYS69795";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static HelpTxt helpText()
    {
        return "@SYS83695";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>