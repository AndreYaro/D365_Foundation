<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalReferenceController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller for what is viewed by the user when
/// setting up fiscal references for an specific document, and
/// handles database updates accordingly.
/// </summary>
abstract class FiscalReferenceController_BR
{
    Common source;
    FiscalReferenceParmCreator_BR fiscalReferenceCreator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeleteRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a record can be deleted.
    /// </summary>
    /// <param name="_tmpFiscalReference">The record to be checked.</param>
    /// <returns><c>true</c> if record can be deleted; <c>false</c> otherwise.</returns>
    abstract public boolean canDeleteRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canManageRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a new record can be created.
    /// </summary>
    /// <returns>
    /// True if record can be created; false otherwise.
    /// </returns>
    abstract public boolean canManageRecords()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delete process for a specific tmpTable record.
    /// </summary>
    /// <param name="_tmpFiscalReference">Row to be deleted</param>
    abstract public void deleteTempTableRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLegalTextId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default legal text for fiscal references from the current document.
    /// </summary>
    /// <returns>ID of the default legal text</returns>
    public FiscalDocumentTextID_BR getDefaultLegalTextId()
    {
        return fiscalReferenceCreator.getDefaultLegalTextId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the temporary table with the rows that must be presented to the user
    /// prior to the fiscal reference setup.
    /// </summary>
    /// <returns>tmpTable pointer to be presented to the user</returns>
    abstract public TmpFiscalReference_BR initTempTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRefDocumentEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the fiscal document that is referenced by passed record
    /// is editable or not.
    /// </summary>
    /// <param name="_tmpFiscalReference">Record that contains data about the referenced document</param>
    /// <returns>true if document can be edited; false otherwise</returns>
    public boolean isRefDocumentEditable(TmpFiscalReference_BR _tmpFiscalReference)
    {
        return (_tmpFiscalReference.RefTableId != tableNum(FiscalDocument_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New class to manage fiscal references for an specific document
    /// </summary>
    /// <param name="_source">Source table reference</param>
    protected void new(Common _source)
    {
        if (!_source.RecId)
        {
            throw error("@SYS111577");
        }
        source = _source;
        fiscalReferenceCreator = new FiscalReferenceParmCreator_BR(source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveLegalTextsToSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve all legal text IDs with the corresponding texts and
    /// associate them with the source document.
    /// All previously resolved legal texts are deleted and the current
    /// ones are resolved.
    /// </summary>
    abstract public void resolveLegalTextsToSourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the tmpTable record update accordingly.
    /// It persists the changes in tmpTable record in the proper
    /// tables on the database.
    /// </summary>
    /// <param name="_tmpFiscalReference">
    /// Updated or new temporary record to be persisted
    /// </param>
    abstract public void writeTempTableRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FiscalReferenceController_BR</c> type.
    /// </summary>
    /// <param name="_source">
    /// Record which holds the fiscal references.
    /// </param>
    /// <returns>
    /// An instance of <c>FiscalReferenceController_BR</c> type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Table buffer passed as parameter is not supported by fiscal reference framework.
    /// </exception>
    public static FiscalReferenceController_BR construct(Common _source)
    {
        SalesComplementaryInvoiceHeader salesComplementaryInvoice;
        PurchComplementaryInvoiceHeader purchComplementaryInvoice;

        switch (_source.TableId)
        {
            case tableNum(FiscalDocument_BR):
                return new FiscalReferenceControllerPosted_BR(_source);

            case tableNum(VendInvoiceInfoTable):
            case tableNum(CustInvoiceTable):
            case tableNum(SalesParmTable):
            case tableNum(InventTransferTable):
                return new FiscalReferenceControllerParm_BR(_source);

            case tableNum(SalesComplementaryInvoiceHeader):
                salesComplementaryInvoice = _source;
                if (salesComplementaryInvoice.Status == ComplementaryInvoiceStatus::Open)
                {
                    return new FiscalReferenceControllerParm_BR(_source);
                }
                else
                {
                    return new FiscalReferenceControllerPosted_BR(_source);
                }

            case tableNum(PurchComplementaryInvoiceHeader):
                purchComplementaryInvoice = _source;
                if (purchComplementaryInvoice.Status == ComplementaryInvoiceStatus::Open)
                {
                    return new FiscalReferenceControllerParm_BR(_source);
                }
                else
                {
                    return new FiscalReferenceControllerPosted_BR(_source);
                }

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form string lookup according to fiscal reference requirements.
    /// </summary>
    /// <param name="_formStringControl">Form control for the lookup</param>
    /// <param name="_accountType">Customer/Vendor</param>
    public static void lookupAccount(FormStringControl _formStringControl, CustVendType_BR _accountType)
    {
        SysTableLookup          tableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    dsCustVend;

        #LOCALMACRO.SetupLookup
            tableLookup = SysTableLookup::newParameters(tableNum(%1), _formStringControl, true, %2);
            dsCustVend = query.addDataSource(tableNum(%1));

            tableLookup.addLookupfield(fieldNum(%1, AccountNum));
            tableLookup.addLookupfield(fieldNum(%1, Party));
            tableLookup.addLookupfield(fieldNum(%1, CNPJCPFNum_BR));
            tableLookup.addLookupfield(fieldNum(%1, IENum_BR));
        #ENDMACRO

        if (_accountType == CustVendType_BR::Customer)
        {
            #SetupLookup(CustTable, CustomerDataInteractorFactory::useExistingOrCreateResolver(_formStringControl));
        }
        else
        {
            #SetupLookup(VendTable, VendorDataInteractorFactory::useExistingOrCreateResolver(_formStringControl));
        }

        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the customer or vendor account number or by mapping
    /// it to the customer or vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name="_formStringControl">Form control for the resolution.</param>
    /// <param name="_accountType">Customer/Vendor.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>FiscalReferenceController_BR::lookupAccount</c> method.
    /// </remarks>
    public static str resolveAmbiguousReferenceAccount(FormStringControl _formStringControl, CustVendType_BR _accountType)
    {
        if (_accountType == CustVendType_BR::Customer)
        {
            return CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(_formStringControl);
        }
        else
        {
            return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_formStringControl);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>