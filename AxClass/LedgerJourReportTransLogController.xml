<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJourReportTransLogController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJourReportTransLogController</c> class is the controller class for the
///    <c>LedgerJournalizeReportTransLog</c> SSRS report.
/// </summary>
class LedgerJourReportTransLogController extends SRSReportRunController implements BatchRetryable
{
    // <GEEPL>
    #define.sysVersion('SysVersion')
    #define.userName('UserName')
    #define.displayDescription('DisplayDescription')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // </GEEPL>

    /// <summary>
    ///    Initializes the report objects.
    /// </summary>
    /// <param name="_query">
    ///    The report query to use.
    /// </param>
    public void init(Query _query)
    {
        LedgerJournalizeReport ledgerJournalizeReport;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRangeJournalizeNum;

        //Getting the args record
        ledgerJournalizeReport = this.parmArgs().record();

        if (ledgerJournalizeReport)
        {
            // Get the current Query from the report
            queryBuildDataSource = _query.dataSourceTable(tablenum(LedgerEntryJournalizing));

            // Create the JournalizeNum range
            queryBuildRangeJournalizeNum = queryBuildDataSource.findRange(fieldnum(LedgerEntryJournalizing, Journal));

            if (!queryBuildRangeJournalizeNum)
            {
                queryBuildRangeJournalizeNum = queryBuildDataSource.addRange(fieldnum(LedgerEntryJournalizing, Journal));
            }

            // Set the range values
            queryBuildRangeJournalizeNum.value(ledgerJournalizeReport.JournalizeNum);

            // Set the range status to hidden
            queryBuildRangeJournalizeNum.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before the dialog box is displayed.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, common use case is to add or change a query. This
    /// method is called only during interactive scenario, before rendering the UI to user.For batch
    /// scenario, we do not start this method, because there is no user interaction and contract values are
    /// already saved in batch.Do not create any instance variables in this code if they are used during
    /// the lifetime of controller, because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        Query query;

        query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        this.init(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes

        SrsReportDataContract  contract;

        this.parmReportContract().parmReportName(ssrsReportStr(LedgerJournalizeReportTransLog,Report));

        contract = this.parmReportContract() as SrsReportDataContract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmRdlContract().setValue(#sysVersion, SysReportRun::sysVersion());
            contract.parmRdlContract().setValue(#userName, SysReportRun::userName());
            contract.parmRdlContract().setValue(#displayDescription, True);
        }
        else
        {
            contract.parmRdlContract().setValue(#displayDescription, False);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJourReportTransLogController controller = new LedgerJourReportTransLogController();
        controller.parmReportName(ssrsReportStr(LedgerJournalizeReportTransLog, Report));
        controller.parmArgs(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>