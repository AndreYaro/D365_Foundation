<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreatePayment_Cash</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayCreatePayment_Cash extends RPayCreatePayment
{
    RCashTrans          cashTrans;
    Notes               notes;
    LedgerJournalTable  ledgerJournalTable;
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_RCash   ledgerJournalTrans_RCash;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        if (! paymentParameters.CashAutoPost)
            return;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(
                                    cashTrans.ledgerJournalTrans().ledgerJournalTable(),
                                    NoYes::Yes,
                                    NoYes::No);

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean createCashTrans()
    {
        RCashTransSetStatus setStatus;
        RecordSortedList    ledgerJournalTransList = new RecordSortedList(tablenum(LedgerJournalTrans));
        ledgerJournalTransList.ins(ledgerJournalTrans);

        setStatus = new RCashTransSetStatus();
        setStatus.parmLedgerJournalTransList(ledgerJournalTransList);
        if (RCashParameters::find().ConfirmationEnabled)
        {
            setStatus.parmStatus(RCashTransStatus::Confirmed);
            setStatus.runOperation();
        }
        setStatus.parmStatus(RCashTransStatus::Approved);
        setStatus.runOperation();

        ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, false);
        cashTrans = RCashTrans::findLedgerJournalTrans(ledgerJournalTrans);

        return cashTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans createLedgerJournalTrans(LedgerJournalTrans _journalTrans, LedgerJournalTable _journalTable)
    {
        LedgerJournalTrans ret;

        ret = super(_journalTrans, _journalTable);

        ledgerJournalTrans_RCash.RefRecId = ret.recId;
        ledgerJournalTrans_RCash.insert();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        RPayParameters      payParameters = RPayParameters::find();
        RPayTitleposting    payTitlePosting;

        if (! paymentParameters.CashPaymentJournalName)
        {
            return checkFailed("@SYS16764");
        }
        if (! payParameters.OffsetAccountPostingProfile)
        {
            return checkFailed("@RUP2662");
        }

        payTitlePosting = RPayTitleposting::findAccount(payParameters.OffsetAccountPostingProfile, '', '', '', 0);

        ledgerJournalTable.OffsetAccountType     = payTitlePosting.AccountType;
        ledgerJournalTable.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(payTitlePosting.LedgerDimension, payTitlePosting.DefaultDimension);
        ledgerJournalTable.DefaultDimension      = payTitlePosting.DefaultDimension;
        this.createLedgerJournalTable(ledgerJournalTable,
                                      paymentParameters.CashPaymentJournalName);

        if (paymentParameters.CashDefaultDimension != 0)
        {
            ledgerJournalTable.DefaultDimension     = paymentParameters.CashDefaultDimension;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        OfficialsServ_RU    officialsServ = new OfficialsServ_RU();
        ledgerJournalTrans.AccountType          = LedgerJournalACType::RCash;

        ledgerJournalTrans.LedgerDimension      = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(RPayPaymentParameters::find().CashAccount, LedgerJournalACType::RCash);

        ledgerJournalTrans_RCash.DocType        = this.docType();
        ledgerJournalTrans.PostingProfile       = RCashParameters::find().PostingProfile;

        ledgerJournalTrans.AmountCurCredit      = totalAmount;

        officialsServ.initTableRCash(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension));
        ledgerJournalTrans.OffSessionId_RU      = officialsServ.newId();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RCashDocType docType()
    {
        return RCashDocType::DisbursementSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected void showInfo()
    {
        SysInfoAction_FormRun sysInfoAction = SysInfoAction_FormRun::newFormname(formstr(LedgerJournalTable));

        sysInfoAction.parmCallerBuffer(ledgerJournalTable);
        sysInfoAction.parmDescription("@GLS104353");

        info(strfmt("@RUP685", cashTrans.DocId, cashTrans.TransDate), '', sysInfoAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayCreatePayment_Cash createPayment_Cash;

        switch (_args.dataset())
        {
            case tablenum(RPaySheetTable):
                createPayment_Cash = new RPayCreatePayment_CashSheetTable();
                break;
            case tablenum(RPayDepositTable):
                createPayment_Cash = new RPayCreatePayment_CashDepositTable();
                break;
            default :
                throw error("@SYS18232");
        }

        createPayment_Cash.setDataSource(_args.record(), FormDataUtil::getFormDataSource(_args.record()));

        if (createPayment_Cash.prompt())
        {
            createPayment_Cash.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>