<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInitDepreciationProfile_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>AssetInitDepreciationProfile_IN</c> contains logic to calculate Indian depreciation amounts forecast.
/// </summary>
internal class AssetInitDepreciationProfile_IN extends AssetInitDepreciationProfile
{
    private TypeOfShift_IN  shiftType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromShiftTypeAndBookDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of <c>AssetInitDepreciationProfile_IN</c> by the given book, shift type and max date.
    /// </summary>
    /// <param name = "_book">A record of an asset book.</param>
    /// <param name = "_shiftType">The selected shift type, a value of the TypeOfShift_IN enum.</param>
    /// <param name = "_maxPlanDate">Maximum date for which the calculation will be done.</param>
    /// <param name = "_cancellationToken">The cancellation token for asynchronous run.</param>
    /// <returns>The instance of <c>AssetInitDepreciationProfile_IN</c>.</returns>
    internal static AssetInitDepreciationProfile_IN newFromShiftTypeAndBookDate(
        AssetBook _book,
        TypeOfShift_IN _shiftType,
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        return AssetInitDepreciationProfile_IN::construct(_book, _shiftType, _maxPlanDate, _cancellationToken);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static AssetInitDepreciationProfile_IN construct(
        AssetBook _book,
        TypeOfShift_IN _shiftType,
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        AssetInitDepreciationProfile_IN ret;
        ret = new AssetInitDepreciationProfile_IN();
        ret.parmShiftType(_shiftType);
        ret.init(_book, _maxPlanDate, _cancellationToken);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShiftType</Name>
				<Source><![CDATA[
    internal TypeOfShift_IN parmShiftType(TypeOfShift_IN _shiftType = shiftType)
    {
        shiftType = _shiftType;
        return shiftType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates depreciation amounts forecast.
    /// </summary>
    /// <returns>Temporary table buffer that contains the depreciation amounts.</returns>
    internal TmpDateSum calcDepreciationProfile()
    {
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;
        AssetTransDate transDate;
        TmpDateSum tmpDateSum;

        tmpDateSum.ttsbegin();

        if (book.depreciationAltProfile())
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax(),'', true);
            book.setParmValues_IN(assetTableMethodPrimary, shiftType);
            assetTableMethodSecondary = AssetTableMethod::construct(book, dateMax(),'', true, true);
            book.setParmValues_IN(assetTableMethodSecondary, shiftType);
        }
        else
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax());
            book.setParmValues_IN(assetTableMethodPrimary, shiftType);
        }

        AssetAmount depreciationAcc;
        AssetTableInterval assetTableInterval = AssetTableInterval::construct(book.depreciationProfile(), AssetBookTable::find(book.BookId).FiscalCalendar);

        tmpDateSum.TransDate = book.depreciationProfile().Method == AssetDepreciationMethod::RBSL ?
            endmth(prevMth(max(book.DepreciationStartDate, book.LastDepreciationDate + 1))) + 1 :
            assetTableInterval.endPeriod(max(book.DepreciationStartDate - 1, book.LastDepreciationDate) + 1) - 1;
        tmpDateSum.TmpNumerals01 = 0;
        var amountToDepreciate = this.amountToDepreciate(tmpDateSum.TransDate);
        if (!calculateOnlyDepreciation)
        {
            depreciationAcc = -(AssetTrans::amountMSTPerDateTranstype(book.AssetId, tmpDateSum.TransDate, book.BookId, AssetTransType::Depreciation) +
                AssetTrans::amountMSTPerDateTranstype(book.AssetId, tmpDateSum.TransDate, book.BookId, AssetTransType::DepreciationAdj));
            tmpDateSum.TmpNumerals02 = amountToDepreciate;
        }
        tmpDateSum.insert();

        if ((book.Status == AssetStatus::NoAcquisition || book.Status == AssetStatus::Open) && amountToDepreciate)
        {
            if (!book.depreciationAltProfile())
            {
                while (!cancellationToken.IsCancellationRequested
                    && transDate <= maxPlanDate
                    && assetTableMethodPrimary.next())
                {
                    AssetAmount depreciation = assetTableMethodPrimary.calc();
                    transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());
                    if (depreciation > 0)
                    {
                        if (tmpDateSum.TransDate != transDate)
                        {
                            this.writeTmpDateSum(tmpDateSum, depreciationAcc);

                            tmpDateSum.clear();
                            tmpDateSum.TransDate = transDate;
                            tmpDateSum.TmpNumerals02 = calculateOnlyDepreciation ? 0 : this.amountToDepreciate(tmpDateSum.TransDate);
                        }
                        depreciationAcc += depreciation;
                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals01 += depreciation;
                    }
                }
            }
            else
            {
                AssetAmount currentYearDepreciation;
                boolean isPrimaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationProfile().Method);
                boolean isSecondaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationAltProfile().Method);

                while (!cancellationToken.IsCancellationRequested
                    && transDate <= maxPlanDate
                    && assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                {
                    AssetAmount depreciation;
                    AssetAmount depreciationPrimary = assetTableMethodPrimary.calc();
                    AssetAmount depreciationSecondary = assetTableMethodSecondary.calc();

                    if (abs(depreciationPrimary) > abs(depreciationSecondary))
                    {
                        if (isPrimaryMethodReducingBalance)
                        {
                            currentYearDepreciation += depreciationPrimary - depreciationSecondary;

                            if (assetTableMethodPrimary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodPrimary.depDate()))
                            {
                                assetTableMethodSecondary.addPrevDepAmountExternal(currentYearDepreciation);
                                currentYearDepreciation = 0;
                            }
                        }
                        else
                        {
                            assetTableMethodSecondary.addPrevDepAmountExternal(depreciationPrimary - depreciationSecondary);
                        }
                        depreciation = depreciationPrimary;
                    }
                    else
                    {
                        if (isSecondaryMethodReducingBalance)
                        {
                            currentYearDepreciation += depreciationSecondary - depreciationPrimary;

                            if (assetTableMethodSecondary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodSecondary.depDate()))
                            {
                                assetTableMethodPrimary.addPrevDepAmountExternal(currentYearDepreciation);
                                currentYearDepreciation = 0;
                            }
                        }
                        else
                        {
                            assetTableMethodPrimary.addPrevDepAmountExternal(depreciationSecondary - depreciationPrimary);
                        }
                        depreciation = depreciationSecondary;
                    }

                    transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                    if (tmpDateSum.TransDate != transDate)
                    {
                        this.writeTmpDateSum(tmpDateSum, depreciationAcc);

                        tmpDateSum.clear();
                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals02 = calculateOnlyDepreciation ? 0 : this.amountToDepreciate(tmpDateSum.TransDate);
                    }

                    depreciationAcc += depreciation;
                    tmpDateSum.TransDate = transDate;
                    tmpDateSum.TmpNumerals01 += depreciation;
                    tmpDateSum.TmpNumerals03 += depreciationPrimary;
                    tmpDateSum.TmpNumerals04 += depreciationSecondary;
                }
            }
            this.writeTmpDateSum(tmpDateSum, depreciationAcc);
        }

        if (cancellationToken.IsCancellationRequested)
        {
            tmpDateSum.ttsabort();
        }
        else
        {
            tmpDateSum.ttscommit();
        }
        return tmpDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciate</Name>
				<Source><![CDATA[
    private AssetAmount amountToDepreciate(AssetTransDate _transDate)
    {
        AssetAmount ret;
        if (book.AcquisitionDate <= _transDate && isBookAcquired)
        {
            ret = AssetTrans::amountToDepriciate(book.AssetId, _transDate, book.BookId) +
                AssetTrans::amountMSTPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::ExtraordinaryDepreciation);
        }
        else
        {
            ret = book.AcquisitionPrice;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpDateSum</Name>
				<Source><![CDATA[
    private void writeTmpDateSum(TmpDateSum _tmpDateSum, AssetAmount _depreciationAcc)
    {
        if (_tmpDateSum.TransDate)
        {
            if (!calculateOnlyDepreciation)
            {
                _tmpDateSum.Total = _depreciationAcc;
                _tmpDateSum.TmpNumerals02 -= _depreciationAcc;
            }
            _tmpDateSum.write();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>