<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayRecalculateSickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayRecalculateSickList extends RunBaseBatch implements BatchRetryable
{
    Counter             progressCounter;
    QueryRun            queryRun;
    container           lastValue;

    DialogField         fieldRecalcPeriod;

    ReportPeriod_RU     recalcPeriod;

    #Define.CurrentVersion(4)

    #LocalMacro.CurrentList
        recalcPeriod
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    QueryRun buildQueryRun()
    {
        Query                query           = new Query();
        QueryBuildDataSource queryDataSource = query.addDataSource(tablenum(RPayAverageEarnEmplPeriodTable));
        QueryBuildRange      queryRange;

        queryDataSource.allowAdd();

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, Included));
        queryRange.value(QueryValue(NoYes::Yes));
        queryRange.status(RangeStatus::Locked);

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        queryRange.value(QueryValue(RPayAverageEarnCodeType::SickList));
        queryRange.status(RangeStatus::Locked);

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, EndDate));
        queryRange.status(RangeStatus::Locked);

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, StartDate));
        queryRange.status(RangeStatus::Locked);

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, SickListRecalcPeriod));
        queryRange.value(SysQuery::range(dateNull(), dateStartMth(recalcPeriod) - 1));
        queryRange.status(RangeStatus::Locked);

        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, RecalcSickListId));
        queryRange.value(SysQuery::valueEmptyString());
        queryRange.status(RangeStatus::Locked);
        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, EmplId));
        queryRange = queryDataSource.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, RPaySickListId));

        queryDataSource.addSortField(fieldnum(RPayAverageEarnEmplPeriodTable, EmplId));
        queryDataSource.addSortField(fieldnum(RPayAverageEarnEmplPeriodTable, StartDate));
        queryDataSource.addSortField(fieldnum(RPayAverageEarnEmplPeriodTable, RPaySickListId));
        queryDataSource.addSortField(fieldnum(RPayAverageEarnEmplPeriodTable, PrevPaySickListId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret;

        ret = super();

        if (ret)
        {
            fieldRecalcPeriod = ret.addFieldValue(extendedTypeStr(ReportPeriod_RU), recalcPeriod, "@RUP2944", "@RUP2974");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RHRMEmplId _emplId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strfmt("@SYS32621", _emplId));
        progress.update(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            recalcPeriod = endMth(fieldRecalcPeriod.value());

            this.setQueryRanges();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        recalcPeriod    = RPayParameters::payPeriod();
        queryRun        = this.buildQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return lastValue ? lastValue : [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Counter                         progressTotal;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable,
                                        recalcAverageEarnEmplPeriodTable,
                                        prevAverageEarnEmplPeriodTable;
        RPayAverageEarnValue            averageEarnValue;
        RPayTrans                       payTransCheck;
        RPayAverageEarnEngine_SickList  recalcAverageEarnEngine_SickList;
        int                             recalcSickListCount;
        boolean                         canSickListBeReversed;
        RPayReverse_SickList            rPayReverse;
        Args                            args                = new Args(this, this);
        RPayEmplPeriodTrans             emplPeriodTransSource;
        Amount                          currentAmount, recalcAmount;
        #define.NewLegislationDate (01\01\2010)

        #macrolib.AviFiles

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@RUP2702", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        ttsbegin;

        while (queryRun.next())
        {
            averageEarnEmplPeriodTable = queryRun.get(tablenum(RPayAverageEarnEmplPeriodTable));
            this.displayProgress(averageEarnEmplPeriodTable.EmplId);

            canSickListBeReversed = averageEarnEmplPeriodTable.PayPeriod == averageEarnEmplPeriodTable.CorrectedPeriod                   &&
                                    averageEarnEmplPeriodTable.PayPeriod <= RPayParameters::payPeriod(averageEarnEmplPeriodTable.EmplId) &&
                                    averageEarnEmplPeriodTable.Included                                                                  &&
                                    ! TransLink_RU::exist(averageEarnEmplPeriodTable.TableId,
                                                          averageEarnEmplPeriodTable.RecId,
                                                          averageEarnEmplPeriodTable.RecId);

            if (! canSickListBeReversed)
                continue;

            if (averageEarnEmplPeriodTable.RpayIllType != RpayIllType::ChildVacation)
            {
                if (RPayRateTable::find(averageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(averageEarnEmplPeriodTable.EndDate)) <= 0)
                {
                    select firstonly averageEarnValue
                        where averageEarnValue.AverageEarnEmplPeriodRecid == averageEarnEmplPeriodTable.RecId
                           && averageEarnValue.PayPeriod                  >= recalcPeriod;

                    if (! averageEarnValue)
                    {
                        warning(strFmt("@RUP2979",
                                       averageEarnEmplPeriodTable.EmplId, averageEarnEmplPeriodTable.payEmplName(),
                                       averageEarnEmplPeriodTable.RpaySickListId, dateStartMth(recalcPeriod)));
                        continue;
                    }

                    select firstonly averageEarnValue
                        where averageEarnValue.AverageEarnEmplPeriodRecid == averageEarnEmplPeriodTable.RecId
                           && averageEarnValue.PayPeriod                  >= recalcPeriod
                    join SourceTableId, SourceRecId from payTransCheck
                        where payTransCheck.SourceTableId                 == averageEarnValue.TableId &&
                              payTransCheck.SourceRecId                   == averageEarnValue.RecId;

                    if (! averageEarnValue)
                    {
                        warning(strFmt("@RUP2980",
                                       averageEarnEmplPeriodTable.EmplId, averageEarnEmplPeriodTable.payEmplName(),
                                       averageEarnEmplPeriodTable.RpaySickListId, dateStartMth(recalcPeriod)));
                        continue;
                    }
                }
            }

            recalcAverageEarnEngine_SickList = new RPayAverageEarnEngine_SickList(averageEarnEmplPeriodTable.EmplId,
                                                                                  averageEarnEmplPeriodTable.RPayAverageEarnCode,
                                                                                  averageEarnEmplPeriodTable.AverageEarnCalcPeriod);

            recalcAverageEarnEmplPeriodTable = recalcAverageEarnEngine_SickList.initFromRecalcSickList(averageEarnEmplPeriodTable,
                                                                                                       recalcPeriod);
            recalcAverageEarnEngine_SickList.rPayAverageEarnEmplPeriodTable(recalcAverageEarnEmplPeriodTable);
            recalcAverageEarnEngine_SickList.parmCalcByPrevYears(RPayRateTable::find(recalcAverageEarnEmplPeriodTable.CalcByFund).getValue(RPayRateCallContext::construct(recalcPeriod)) > 0);
            recalcAverageEarnEngine_SickList.parmPeriodicRecalc(true);
            recalcAverageEarnEngine_SickList.calculateNow();

            if (recalcAverageEarnEmplPeriodTable.RpayIllType != RpayIllType::ChildVacation)
            {
                if (averageEarnEmplPeriodTable.PrevPaySickListId)
                {
                    prevAverageEarnEmplPeriodTable = averageEarnEmplPeriodTable.previousSickList();
                }
                else
                {
                    prevAverageEarnEmplPeriodTable = averageEarnEmplPeriodTable;
                }

                currentAmount = averageEarnEmplPeriodTable.averageEarnValueSum(dateStartMth(recalcPeriod), RPayAverageSourceType::OtherFund);
                recalcAmount  = recalcAverageEarnEmplPeriodTable.averageEarnValueSum(dateStartMth(recalcPeriod), RPayAverageSourceType::OtherFund);

                if (prevAverageEarnEmplPeriodTable.StartDate >= #NewLegislationDate)
                {
                    currentAmount += averageEarnEmplPeriodTable.averageEarnValueSum(dateStartMth(recalcPeriod), RPayAverageSourceType::PaymentFund);
                    recalcAmount  += recalcAverageEarnEmplPeriodTable.averageEarnValueSum(dateStartMth(recalcPeriod), RPayAverageSourceType::PaymentFund);
                }

                if (currentAmount >= recalcAmount)
                {
                    recalcAverageEarnEmplPeriodTable.delete();
                    continue;
                }
            }
            recalcAverageEarnEmplPeriodTable.Included = NoYes::Yes;
            recalcAverageEarnEngine_SickList.includedModified();
            recalcAverageEarnEmplPeriodTable.update();

            if (recalcAverageEarnEmplPeriodTable.RpayIllType == RpayIllType::ChildVacation)
            {
                while select forupdate emplPeriodTransSource
                    where emplPeriodTransSource.AverageEarnEmplPeriodRecId == averageEarnEmplPeriodTable.RecId
                {
                    emplPeriodTransSource.EndDate = min(emplPeriodTransSource.EndDate, dateStartMth(recalcPeriod) - 1);
                    emplPeriodTransSource.update();
                }
            }

            args.record(averageEarnEmplPeriodTable);
            args.parmEnumType(enumnum(RPayReverseType));
            args.parmEnum(RPayReverseType::Reverse);

            rPayReverse = RPayReverse::newFromTable(args);
            rPayReverse.parmCheckAmountForReverse(false);
            rPayReverse.parmMinPeriod(recalcPeriod);
            rPayReverse.parmMaxPeriod(dateMax());
            rPayReverse.parmUpdateTbl(false);
            rPayReverse.parmRecalcSickListId(recalcAverageEarnEmplPeriodTable.RecalcSickListId);
            rPayReverse.runOperation();

            recalcSickListCount++;
        }

        ttscommit;

        info(strFmt("@RUP2703", recalcSickListCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setQueryRanges()
    {
        Query                query;
        QueryBuildDataSource queryDataSource;
        QueryBuildRange      queryRange;

        if (queryRun)
        {
            query           = queryRun.query();
            queryDataSource = query.dataSourceTable(tablenum(RPayAverageEarnEmplPeriodTable));

            queryRange      = queryDataSource.findRange(fieldnum(RPayAverageEarnEmplPeriodTable, StartDate));
            if (queryRange)
            {
                queryRange.value(SysQuery::range('', dateEndMth(recalcPeriod)));
            }

            queryRange      = queryDataSource.findRange(fieldnum(RPayAverageEarnEmplPeriodTable, EndDate));
            if (queryRange)
            {
                queryRange.value(SysQuery::range(dateStartMth(recalcPeriod), ''));
            }

            queryRange      = queryDataSource.findRange(fieldnum(RPayAverageEarnEmplPeriodTable, SickListRecalcPeriod));
            if (queryRange)
            {
                queryRange.value(SysQuery::range(dateNull(), endMth(recalcPeriod)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                if (this.canGoBatch())
                {
                    [version, #CurrentList, packedQuery] = _packedClass;

                    if (packedQuery && SysQuery::isPackedOk(packedQuery))
                    {
                        queryRun = new QueryRun(packedQuery);
                    }
                    else
                    {
                        queryRun = this.buildQueryRun();
                    }
                    break;
                }
                else
                {
                    lastValue = _packedClass;
                    return false;
                }

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        #define.MinRecalcPeriod(31\01\2010)

        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! recalcPeriod)
            {
                ret = checkFailed("@RUP2975");
            }

            if (recalcPeriod && recalcPeriod < #MinRecalcPeriod)
            {
                ret = checkFailed(strFmt("@RUP2976", #MinRecalcPeriod));
            }

            if (recalcPeriod && recalcPeriod > RPayParameters::payPeriod())
            {
                ret = checkFailed(strFmt("@RUP2977", RPayParameters::payPeriod()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayRecalculateSickList construct()
    {
        return new RPayRecalculateSickList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@RUP2702";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #define.MinPayPeriod(31\01\2010)

        RPayRecalculateSickList recalculateSickList;

        if (RPayParameters::payPeriod() < #MinPayPeriod)
        {
            warning(strFmt("@RUP2978", #MinPayPeriod));
            return;
        }

        recalculateSickList = RPayRecalculateSickList::construct();

        if (recalculateSickList.prompt())
        {
            recalculateSickList.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>