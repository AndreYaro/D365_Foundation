<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorRulesSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// Note: 
    /// * EntityTypeIds must have a maximum of 30 chraracters
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert(/*Channel assortments         */ '@Retail:RetailCommerceValidatorSetupEntityType1Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelAssortedProducts), classStr(RetailCommercevalidatorRulesSetup)]);
        entityList.insert(/*Channel products            */ '@Retail:RetailCommerceValidatorSetupEntityType2Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelProducts), classStr(RetailCommercevalidatorRulesSetup)]);
        entityList.insert(/*Channel catalogs            */ '@Retail:RetailCommerceValidatorSetupEntityType3Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelCatalogs), classStr(RetailCommercevalidatorRulesSetup)]);
        entityList.insert(/*Channel category hierarchies*/ '@Retail:RetailCommerceValidatorSetupEntityType4Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelCategoryHierarchies), classStr(RetailCommercevalidatorRulesSetup)]);
        entityList.insert(/*Channel languages           */ '@Retail:RetailCommerceValidatorSetupEntityType5Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelLanguages), classStr(RetailCommercevalidatorRulesSetup)]);
        entityList.insert(/*Channel categories          */ '@Retail:RetailCommerceValidatorSetupEntityType6Id', [RetailCommerceValidatorEntityFunction::Setup, tableNum(RetailCommerceValidatorWorkChannelCategories), classStr(RetailCommercevalidatorRulesSetup)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate setup rules list.
    /// Note:
    /// * RuleIds must have a maximum of 30 chraracters
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Calculates all channel assorted products
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule1Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType1Id',
            1,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule1Description',
            'calculateWorkChannelAssortedProducts',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculates all channel products.
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule2Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType2Id',
            2,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule2Description',
            'calculateWorkChannelProducts',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculates all channel products marked as excluded on assortments.
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule3Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType2Id',
            3,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule3Description',
            'calculateWorkChannelProductsExcluded',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculates all published and non expired channel catalogs .
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule4Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType3Id',
            4,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule4Description',
            'calculateWorkChannelCatalogs',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculates all channel category hierarchies.
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule5Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType4Id',
            5,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule5Description',
            'calculateWorkChannelCategoryHierarchies',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculates all channel active categories.
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule6Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType6Id',
            6,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule6Description',
            'calculateWorkChannelCategories',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Calculate all channel languages.
        rulesList.insert('@Retail:RetailCommerceValidatorSetupRule7Id', [
            '@Retail:RetailCommerceValidatorSetupEntityType5Id',
            7,
            RetailCommerceValidatorResultStatus::Passed,
            '@Retail:RetailCommerceValidatorSetupRule7Description',
            'calculateWorkChannelLanguages',
            '',
            NoYes::No, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelAssortedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all assorted products by validation Id and Assortment
    /// Includes date effectivity and Inclusions/Exclusions
    /// Includes Kit information
    /// </summary>
    /// <param name = "_test">The table buffer for the <c>retailCommerceValisdatorTests</c> table.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelAssortedProducts(RetailCommerceValidatorTests _test)
    {
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_test.ValidationId);

        RetailCommerceValidatorWorkChannelAssortedProducts retailCommerceValidatorWorkChannelAssortedProducts;
        EcoResProduct ecoResProduct;
        EcoResProductMaster ecoResProductMaster;
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        RetailAssortmentLookup retailAssortmentLookup;
        RetailAssortmentLookupChannelGroup retailAssortmentLookupChannelGroup;
        RetailKit retailKit;

        str testValidationId = _test.ValidationId;
        int64 catalogZero = 0;
        int64 itsNotAKit = 0;
        int64 itsNotAVariant = 0;

        ttsbegin;
        // Insert all assorted Product Masters and stand-alone products (excluding kit Masters)
        insert_recordset retailCommerceValidatorWorkChannelAssortedProducts (ValidationId, ProductrefRecId, MasterRefRecid, VariantRefRecId, AssortmentId, Included, ValidFrom, ValidTo, KitRefRecId)
        select testValidationId, RecId, RecId, itsNotAVariant from ecoResProduct
            join AssortmentId, LineType, ValidFrom, ValidTo, itsNotAKit from retailAssortmentLookup
                where retailAssortmentLookup.ProductId == ecoResProduct.RecId && retailAssortmentLookup.VariantId == 0
            join retailAssortmentLookupChannelGroup
                where retailAssortmentLookupChannelGroup.AssortmentId == retailAssortmentLookup.AssortmentId &&
                    retailAssortmentLookupChannelGroup.OMOperatingUnitId == retailCommerceValidator.OMOperatingUnitId
            notexists join retailKit
                where retailKit.ProductMaster == ecoResProduct.RecId;

        // Insert all assorted Product Masters and stand-alone products (only kit Masters)
        insert_recordset retailCommerceValidatorWorkChannelAssortedProducts (ValidationId, ProductrefRecId, MasterRefRecid, VariantRefRecId, AssortmentId, Included, ValidFrom, ValidTo, KitRefRecId)
        select testValidationId, RecId, RecId, itsNotAVariant from ecoResProduct
            join AssortmentId, LineType, ValidFrom, ValidTo from retailAssortmentLookup
                where retailAssortmentLookup.ProductId == ecoResProduct.RecId && retailAssortmentLookup.VariantId == 0
            join retailAssortmentLookupChannelGroup
                where retailAssortmentLookupChannelGroup.AssortmentId == retailAssortmentLookup.AssortmentId &&
                    retailAssortmentLookupChannelGroup.OMOperatingUnitId == retailCommerceValidator.OMOperatingUnitId
            join RecId from retailKit
                where retailKit.ProductMaster == ecoResProduct.RecId;

        // Insert all assorted Product variants
        insert_recordset retailCommerceValidatorWorkChannelAssortedProducts (ValidationId, ProductrefRecId, MasterRefRecid, VariantRefRecId, AssortmentId, Included, ValidFrom, ValidTo, KitRefRecId)
        select testValidationId, RecId, ProductMaster, RecId from ecoResDistinctProductVariant
            join AssortmentId, LineType, ValidFrom, ValidTo, itsNotAKit from retailAssortmentLookup
                where retailAssortmentLookup.VariantId == ecoResDistinctProductVariant.RecId && retailAssortmentLookup.VariantId != 0
            join retailAssortmentLookupChannelGroup
                where retailAssortmentLookupChannelGroup.AssortmentId == retailAssortmentLookup.AssortmentId &&
                    retailAssortmentLookupChannelGroup.OMOperatingUnitId == retailCommerceValidator.OMOperatingUnitId;

        // Explode all product master variants
        insert_recordset retailCommerceValidatorWorkChannelAssortedProducts (ValidationId, ProductrefRecId, MasterRefRecid, VariantRefRecId, AssortmentId, Included, ValidFrom, ValidTo, KitRefRecId)
        select testValidationId, RecId, ProductMaster, RecId from ecoResDistinctProductVariant
            join AssortmentId, LineType, ValidFrom, ValidTo, itsNotAKit from retailAssortmentLookup
                where retailAssortmentLookup.ProductId == ecoResDistinctProductVariant.ProductMaster && retailAssortmentLookup.VariantId == 0
            join retailAssortmentLookupChannelGroup
                where retailAssortmentLookupChannelGroup.AssortmentId == retailAssortmentLookup.AssortmentId &&
                    retailAssortmentLookupChannelGroup.OMOperatingUnitId == retailCommerceValidator.OMOperatingUnitId;
        ttscommit;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelAssortedProducts
            where retailCommerceValidatorWorkChannelAssortedProducts.ValidationId == _test.ValidationId;

        return [0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all valid channel products and variants
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelProducts(RetailCommerceValidatorTests _test)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts retailCommerceValidatorWorkChannelAssortedProducts;
        RetailCommerceValidatorWorkChannelProducts retailCommerceValidatorWorkChannelProducts;
        str testValidationId = _test.ValidationId;

        insert_recordset retailCommerceValidatorWorkChannelProducts (ValidationId, ProductRefRecId)
            select ValidationId, ProductRefRecId from retailCommerceValidatorWorkChannelAssortedProducts
                group by
                    retailCommerceValidatorWorkChannelAssortedProducts.ValidationId,
                    retailCommerceValidatorWorkChannelAssortedProducts.ProductRefRecId
                where retailCommerceValidatorWorkChannelAssortedProducts.ValidationId == testValidationId;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelProducts
            where retailCommerceValidatorWorkChannelProducts.ValidationId == _test.ValidationId;

        return [retailCommerceValidatorWorkChannelProducts.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelProductsExcluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all excluded products from assortments 
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelProductsExcluded(RetailCommerceValidatorTests _test)
    {
        RetailCommerceValidatorWorkChannelAssortedProducts retailCommerceValidatorWorkChannelAssortedProducts;
        RetailCommerceValidatorWorkChannelProducts retailCommerceValidatorWorkChannelProducts;
        str testValidationId = _test.ValidationId;

        update_recordset retailCommerceValidatorWorkChannelProducts
            setting ChannelExcluded = NoYes::Yes
            where retailCommerceValidatorWorkChannelProducts.ValidationId == testValidationId
            join retailCommerceValidatorWorkChannelAssortedProducts
                where retailCommerceValidatorWorkChannelAssortedProducts.ValidationId == retailCommerceValidatorWorkChannelProducts.ValidationId &&
                    retailCommerceValidatorWorkChannelAssortedProducts.ProductRefRecId == retailCommerceValidatorWorkChannelProducts.ProductRefRecId &&
                    retailCommerceValidatorWorkChannelAssortedProducts.Included == RetailAssortmentExcludeIncludeType::Exclude;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelProducts
            where retailCommerceValidatorWorkChannelProducts.ValidationId == _test.ValidationId
               && retailCommerceValidatorWorkChannelProducts.ChannelExcluded == true;

        return [-retailCommerceValidatorWorkChannelProducts.RecId];

    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all published channel catalogs.
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelCatalogs(RetailCommerceValidatorTests _test)
    {
        str testValidationId = _test.ValidationId;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(testValidationId);
        RetailInternalOrganization retailInternalOrganization = RetailInternalOrganization::findByOMInternalOrganization(retailCommerceValidator.OMOperatingUnitId);
        Catalog catalog;
        RetailCatalogInternalOrg retailcatalogInternalOrg;

        RetailCommerceValidatorWorkChannelCatalogs retailCommerceValidatorWorkChannelCatalogs;

        // Set variables
        RefRecId channelOMOperatingUnitId = retailCommerceValidator.OMOperatingUnitId;
        EcoResCategoryHierarchyId channelCategoryHierarchy = retailInternalOrganization.CategoryHierarchy;
        OnlineStoreCustomerType customerType = RetailOnlineChannelTable::find(RetailChannelTable::findByOperatingUnitId(retailCommerceValidator.OMOperatingUnitId).RecId).CustomerType;
        int64  catalogZero = 0;

        // Get Category hierarchies assigned to B2B catalogs of channel.
        insert_recordset retailCommerceValidatorWorkChannelCatalogs (ValidationId, OMOperatingUnitId, CatalogRefRecId, CatalogTarget, CategoryhierarchyRecId, CustomerType)
            select testValidationId, channelOMOperatingUnitId, RecId, CatalogTarget, CategoryHierarchy, customerType from catalog
                where catalog.CatalogTarget == RetailCatalogTarget::B2B && catalog.State == CatalogState::Published
                join retailcatalogInternalOrg
                    where retailcatalogInternalOrg.Catalog == catalog.RecId && retailcatalogInternalOrg.InternalOrganization == retailInternalOrganization.RecId;

        // Get Category hierarchies assigned to B2C catalogs of channel.
        insert_recordset retailCommerceValidatorWorkChannelCatalogs (ValidationId, OMOperatingUnitId, CatalogRefRecId, CatalogTarget, CategoryhierarchyRecId, CustomerType)
            select testValidationId, channelOMOperatingUnitId, RecId, CatalogTarget, channelCategoryHierarchy, customerType from catalog
                where catalog.CatalogTarget == RetailCatalogTarget::B2C && catalog.State == CatalogState::Published
                join retailcatalogInternalOrg
                    where retailcatalogInternalOrg.Catalog == catalog.RecId && retailcatalogInternalOrg.InternalOrganization == retailInternalOrganization.RecId;

        // Get Category hierarchy assigned to channel.
        insert_recordset retailCommerceValidatorWorkChannelCatalogs (ValidationId, OMOperatingUnitId, CategoryhierarchyRecId, CustomerType, CatalogRefRecId)
            select testValidationId, channelOMOperatingUnitId, channelCategoryHierarchy, customerType, catalogZero from retailInternalOrganization
                where retailInternalOrganization.InternalOrganization == channelOMOperatingUnitId;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelCatalogs
            where retailCommerceValidatorWorkChannelCatalogs.ValidationId == _test.ValidationId;

        return [retailCommerceValidatorWorkChannelCatalogs.RecId];

    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelCategoryHierarchies</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate all valid channel category hierarchies for the channel.
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelCategoryHierarchies(RetailCommerceValidatorTests _test)
    {
        RetailCommerceValidatorWorkChannelCatalogs retailCommerceValidatorWorkChannelCatalogs;
        RetailCommerceValidatorWorkChannelCategoryHierarchies retailCommerceValidatorWorkChannelCategoryHierarchies;
        EcoResCategoryHierarchy ecoResCategoryHierarchy;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        RetailCommerceValidatorId validationId = _test.ValidationId;

        // Get category hierarchies from channel assortments (catalog 0) and Catalogs
        insert_recordset retailCommerceValidatorWorkChannelCategoryHierarchies (ValidationId, CategoryHierarchyRecId)
        select validationId, CategoryHierarchyRecId from retailCommerceValidatorWorkChannelCatalogs
            group by 
                retailCommerceValidatorWorkChannelCatalogs.ValidationId,
                retailCommerceValidatorWorkChannelCatalogs.CategoryHierarchyRecId
            where retailCommerceValidatorWorkChannelCatalogs.ValidationId == _test.ValidationId;

        // Get commerce product hierarchy
        insert_recordset retailCommerceValidatorWorkChannelCategoryHierarchies (ValidationId, CategoryHierarchyRecId)
        select validationId, RecId from ecoResCategoryHierarchy
            join ecoResCategoryHierarchyRole
            where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategoryHierarchy.RECID
                && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                && ecoResCategoryHierarchy.RecId != retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryhierarchyRecId;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelCategoryHierarchies
            where retailCommerceValidatorWorkChannelCategoryHierarchies.ValidationId == _test.ValidationId;

        return [retailCommerceValidatorWorkChannelCategoryHierarchies.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate all valid categories for the channel.
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelCategories(RetailCommerceValidatorTests _test)
    {
        str testValidationId = _test.ValidationId;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(testValidationId);
        RetailCommerceValidatorWorkChannelCategoryHierarchies retailCommerceValidatorWorkChannelCategoryHierarchies;
        RetailCommerceValidatorWorkChannelCategories retailCommerceValidatorWorkChannelCategories;
        EcoResCategory ecoresCategory;

        // Get categories of category hierarchies from channel assortments (catalog 0) and Catalogs
        insert_recordset retailCommerceValidatorWorkChannelCategories (ValidationId, CategoryHierarchyRecId, CategoryRefRecId, Name, DisplayOrder, IsActive)
        select testValidationId, CategoryHierarchyRecId from retailCommerceValidatorWorkChannelCategoryHierarchies
            join RecId, Name, DisplayOrder, IsActive  from ecoresCategory
            where ecoresCategory.CategoryHierarchy == retailCommerceValidatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId &&
                retailCommerceValidatorWorkChannelCategoryHierarchies.ValidationId == testValidationId;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelCategories
            where retailCommerceValidatorWorkChannelCategories.ValidationId == _test.ValidationId;

        return [retailCommerceValidatorWorkChannelCategories.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkChannelLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate all valid languages for the channel.
    /// </summary>
    /// <param name = "_test">The <c>RetailCommerceValidatorTests</c> test record.</param>
    /// <returns>A container with the result status and the count of records on  <c>RetailCommerceValidatorWorkChannelAssortedProducts</c> table.</returns>
    internal static container calculateWorkChannelLanguages(RetailCommerceValidatorTests _test)
    {
        str testValidationId = _test.ValidationId;
        RetailStoreTable retailStoreTable;
        RetailOnlineChannelTable onlineChannelTable;
        RetailOnlineChannelLanguages onlineChannelLanguages;
        RetailCommerceValidatorWorkChannelLanguages retailCommerceValidatorWorkChannelLanguages;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(testValidationId);

        // Find the langugae on a store for retail channel
        insert_recordset retailCommerceValidatorWorkChannelLanguages (ValidationId, LanguageId)
            select firstonly testValidationId, cultureName from retailStoreTable
            where retailStoreTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
            &&    retailStoreTable.ChannelType == RetailChannelType::RetailStore;

        // Find the languagaes on online store for online stores.
        insert_recordset retailCommerceValidatorWorkChannelLanguages (ValidationId, LanguageId)
            select testValidationId, LanguageId from onlineChannelLanguages
                exists join onlineChannelTable
                where onlineChannelTable.RecId == onlineChannelLanguages.OnlineChannel
                    && onlineChannelTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId;

        // Get worktable count
        select count(RecId) from retailCommerceValidatorWorkChannelLanguages
            where retailCommerceValidatorWorkChannelLanguages.ValidationId == _test.ValidationId;

        return [0];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>