<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel</c> class is an abstract class that represents a complex control built at
///    run-time.
/// </summary>
/// <remarks>
///    This consists of a header with several controls, and two grids underneath. One grid represents a
///    standard cost rollup, the other represents a costing sheet. Either of the grids is visible,
///    depending on the header controls setup.If any new form requires this complex control, a new class
///    should be created by extending the <c>CostSheetPanel</c> class.
/// </remarks>
abstract class CostSheetPanel
{
    private const int           ComboTypeList = 1;
    
    FormRun                     formRun;
    FormControlId               parentId;

    CostSheetPanelView          view;
    InventCostLevel             rollupLevel;
    CostSheetPanelPer           per;
    InventQty                   qty;
    CostAmount                  total;

    InventQty                   lotSize;
    UnitOfMeasureSymbol         unitID;

    CostTmpCostRollup           sourceCostTmpCostRollup;

    CostSheet                   costSheet;

    NoYes                       renderInUI;

    // Header controls -->
    FormBuildGroupControl       headerBuildGroup;
    FormGroupControl            headerGroup;

    FormBuildComboBoxControl    viewBuildComboBox;
    FormComboBoxControl         viewComboBox;

    FormBuildComboBoxControl    rollupLevelBuildComboBox;
    FormComboBoxControl         rollupLevelComboBox;

    FormBuildCheckBoxControl    detailBuildCheckBox;
    FormCheckBoxControl         detailCheckBox;

    FormBuildComboBoxControl    prodFlowModeBuildComboBox;
    FormComboBoxControl         prodFlowModeComboBox;

    FormBuildComboBoxControl    prodCalcModeBuildComboBox;
    FormComboBoxControl         prodCalcModeComboBox;

    FormBuildComboBoxControl    perBuildComboBox;
    FormComboBoxControl         perComboBox;

    FormBuildRealControl        qtyBuildReal;
    FormRealControl             qtyReal;

    FormBuildStringControl      unitIdBuildString;
    FormStringControl           unitIdString;

    FormBuildRealControl        totalBuildReal;
    FormRealControl             totalReal;
    // <-- Header controls

    // Costing sheet -->
    FormBuildDataSource         tmpCostSheetDatasource;
    int                         tmpCostSheetDatasourceNo;
    FormBuildGroupControl       costSheetBuildGroup;
    FormGroupControl            costSheetGroup;
    FormBuildGridControl        costSheetBuildGrid;
    FormGridControl             costSheetGrid;
    // <-- Costing sheet

    // Cost rollup -->
    FormBuildDataSource         tmpCostRollupDatasource;
    int                         tmpCostRollupDatasourceNo;
    FormBuildGroupControl       costRollupBuildGroup;
    FormGroupControl            costRollupGroup;
    FormBuildGridControl        costRollupBuildGrid;
    FormGridControl             costRollupGrid;
    // <-- Cost rollup

    #localMacro.Level_Corresponds_To_RollupLevel
        (  rollupLevel == InventCostLevel::Total  && (  (sourceCostTmpCostRollup.Level == InventCostLevel::Total)  )  )

     || (  rollupLevel == InventCostLevel::Single && (  (sourceCostTmpCostRollup.Level == InventCostLevel::Total && sourceCostTmpCostRollup.Split == NoYes::No)
                                                     || (sourceCostTmpCostRollup.Level == InventCostLevel::Single)  )  )

     || (  rollupLevel == InventCostLevel::Multi  && (  (sourceCostTmpCostRollup.Level == InventCostLevel::Total  && sourceCostTmpCostRollup.Split == NoYes::No)
                                                     || (sourceCostTmpCostRollup.Level == InventCostLevel::Single && sourceCostTmpCostRollup.Split == NoYes::No)
                                                     || (sourceCostTmpCostRollup.Level == InventCostLevel::Multi)  )  )
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the quantity field should be editable.
    /// </summary>
    /// <returns>
    ///    true if the quantity can be edited.
    /// </returns>
    protected boolean allowEditQty()
    {
        return new SysDictEnum(enumNum(CostSheetPanelPer)).index2Value(perComboBox.selection()) == CostSheetPanelPer::Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the complex control on a caller form at runtime.
    /// </summary>
    /// <remarks>
    ///    In order to have the costing sheet and the cost rollup views available, the
    ///    <c>CostTmpSchemeCalcResult</c> and <c>CostTmpCostRollup</c> data sources should exist on the caller
    ///    form. If there is only one data source created, only one corresponding view will be available.The
    ///    method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form. Call it after the initialization of parameters in the <c>newForm</c> static methods,
    ///    before it returns the created class instance.
    /// </remarks>
    protected void build()
    {
        Form                form            = formRun.form();
        FormBuildDesign     buildDesign     = form.design();
        Object              parent          = parentId ? buildDesign.control(parentId) : buildDesign;
        int                 i;

        for (i = 1; i <= form.dataSourceCount(); i++)
        {
            this.cacheCostSheetDataSources(form.dataSource(i), i);
        }

        this.setUpParentControl(parent);

        headerBuildGroup = this.addControlToParent(parent, FormControlType::Group, 'HeaderGroup');
        headerBuildGroup.widthMode(FormWidth::ColumnWidth);
        headerBuildGroup.columns(6);
        headerBuildGroup.frameType(FormFrameType::None);

        viewBuildComboBox = this.buildViewComboBoxControl();

        rollupLevelBuildComboBox = this.buildRollupLevelComboBoxControl();

        perBuildComboBox = this.buildPerComboBoxControl();

        qtyBuildReal = this.buildQuantityRealControl();

        unitIdBuildString = this.buildUnitIdStringControl();

        totalBuildReal = this.buildTotalRealControl();

        detailBuildCheckBox = this.buildDetailsCheckBoxControl();

        prodCalcModeBuildComboBox = this.buildProductionCalculationModeComboBoxControl();

        prodFlowModeBuildComboBox = this.buildProductionFlowModeComboBoxControl();

        if (tmpCostSheetDatasource != null)
        {
            costSheetBuildGroup = this.addControlToParent(parent, FormControlType::Group, 'CostSheetGroup');
            costSheetBuildGroup.widthMode(FormWidth::ColumnWidth);
            costSheetBuildGroup.heightMode(FormHeight::ColumnHeight);
            costSheetBuildGroup.columns(1);
            costSheetBuildGroup.frameType(FormFrameType::None);
            costSheetBuildGrid = costSheetBuildGroup.addControl(FormControlType::Grid, 'CostSheetGrid');
            costSheetBuildGrid.widthMode(FormWidth::ColumnWidth);
            costSheetBuildGrid.heightMode(FormHeight::ColumnHeight);
            costSheetBuildGrid.dataSource(tmpCostSheetDatasource.name());
            costSheetBuildGrid.dataGroup(InventParameters::isCostBreakdownActivated() ?
                                         tableFieldgroupStr(CostTmpSheetCalcResult, Cost) :
                                         tableFieldgroupStr(CostTmpSheetCalcResult, CostTotal));
        }

        if (tmpCostRollupDatasource != null)
        {
            costRollupBuildGroup = this.addControlToParent(parent, FormControlType::Group, 'CostRollupGroup');
            costRollupBuildGroup.widthMode(FormWidth::ColumnWidth);
            costRollupBuildGroup.heightMode(FormHeight::ColumnHeight);
            costRollupBuildGroup.columns(1);
            costRollupBuildGroup.frameType(FormFrameType::None);
            costRollupBuildGrid = costRollupBuildGroup.addControl(FormControlType::Grid, 'CostRollupGrid');
            costRollupBuildGrid.widthMode(FormWidth::ColumnWidth);
            costRollupBuildGrid.heightMode(FormHeight::ColumnHeight);
            costRollupBuildGrid.dataSource(tmpCostRollupDatasource.name());
            costRollupBuildGrid.dataGroup(this.costRollupFieldGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildViewComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a view combobox control to be added to the header group.
    /// </summary>
    /// <returns>The view combobox control.</returns>
    [Replaceable]
    protected FormBuildComboBoxControl buildViewComboBoxControl()
    {
        FormBuildComboBoxControl viewControl = headerBuildGroup.addControl(FormControlType::ComboBox, 'Header_View');
        this.initViewComboBoxControl(viewControl);

        return viewControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view combobox control.
    /// </summary>
    /// <param name = "_viewControl">The control to be initialized.</param>
    protected void initViewComboBoxControl(FormBuildComboBoxControl _viewControl)
    {
        _viewControl.enumType(enumNum(CostSheetPanelView));
        _viewControl.comboType(ComboTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRollupLevelComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a roll up level combobox control to be added to the header group.
    /// </summary>
    /// <returns>The roll up level combobox control.</returns>
    [Replaceable]
    protected FormBuildComboBoxControl buildRollupLevelComboBoxControl()
    {
        FormBuildComboBoxControl rollupLevelControl = headerBuildGroup.addControl(FormControlType::ComboBox, 'Header_RollupLevel');
        this.initRollupLevelComboBoxControl(rollupLevelControl);

        return rollupLevelControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRollupLevelComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the roll up level combobox control.
    /// </summary>
    /// <param name = "_rollupLevelControl">The control to be initialized.</param>
    protected void initRollupLevelComboBoxControl(FormBuildComboBoxControl _rollupLevelControl)
    {
        _rollupLevelControl.enumType(enumNum(InventCostLevel));
        _rollupLevelControl.comboType(ComboTypeList);
        _rollupLevelControl.viewEditMode(ViewEditMode::Edit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPerComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a per combobox control to be added to the header group.
    /// </summary>
    /// <returns>The per combobox control.</returns>
    [Replaceable]
    protected FormBuildComboBoxControl buildPerComboBoxControl()
    {
        FormBuildComboBoxControl perControl = headerBuildGroup.addControl(FormControlType::ComboBox, 'Header_Per');
        this.initPerComboBoxControl(perControl);

        return perControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPerComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the per combobox control.
    /// </summary>
    /// <param name = "_perControl">The control to be initialized.</param>
    protected void initPerComboBoxControl(FormBuildComboBoxControl _perControl)
    {
        _perControl.enumType(enumNum(CostSheetPanelPer));
        _perControl.comboType(ComboTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuantityRealControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a quantity real control to be added to the header group.
    /// </summary>
    /// <returns>The quantity real control.</returns>
    [Replaceable]
    protected FormBuildRealControl buildQuantityRealControl()
    {
        FormBuildRealControl qtyControl = headerBuildGroup.addControl(FormControlType::Real, 'Header_Qty');
        this.initQuantityRealControl(qtyControl);

        return qtyControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuantityRealControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quantity real control.
    /// </summary>
    /// <param name = "_qtyControl">The control to be initialized.</param>
    protected void initQuantityRealControl(FormBuildRealControl _qtyControl)
    {
        _qtyControl.extendedDataType(extendedTypeNum(InventQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUnitIdStringControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the unit id string control to be added to the header group.
    /// </summary>
    /// <returns>The unit id string control.</returns>
    [Replaceable]
    protected FormBuildStringControl buildUnitIdStringControl()
    {
        FormBuildStringControl unitIdControl = headerBuildGroup.addControl(FormControlType::String, 'Header_UnitId');
        this.initUnitIdStringControl(unitIdControl);

        return unitIdControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdStringControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the unit id string control.
    /// </summary>
    /// <param name = "_unitIdControl">The control to be initialized.</param>
    protected void initUnitIdStringControl(FormBuildStringControl _unitIdControl)
    {
        _unitIdControl.extendedDataType(extendedTypeNum(UnitOfMeasureSymbol));
        _unitIdControl.allowEdit(false);
        _unitIdControl.skip(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalRealControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the total real control to be added to the header group.
    /// </summary>
    /// <returns>The total real control.</returns>
    [Replaceable]
    protected FormBuildRealControl buildTotalRealControl()
    {
        FormBuildRealControl totalControl = headerBuildGroup.addControl(FormControlType::Real, 'Header_Total');
        this.initTotalRealControl(totalControl);

        return totalControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalRealControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total real control.
    /// </summary>
    /// <param name = "_totalControl">The control to be initialized.</param>
    protected void initTotalRealControl(FormBuildRealControl _totalControl)
    {
        _totalControl.extendedDataType(extendedTypeNum(CostAmount));
        _totalControl.label(this.totalLabel());
        _totalControl.leftMode(FormLeft::RightEdge);
        _totalControl.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailsCheckBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the details checkbox control to be added to the header group.
    /// </summary>
    /// <returns>The details checkbox control.</returns>
    [Replaceable]
    protected FormBuildCheckBoxControl buildDetailsCheckBoxControl()
    {
        FormBuildCheckBoxControl detailControl = headerBuildGroup.addControl(FormControlType::CheckBox, 'Header_Details');
        this.initDetailsCheckBoxControl(detailControl);

        return detailControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDetailsCheckBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the details checkbox control.
    /// </summary>
    /// <param name = "_detailControl">The control to be initialized.</param>
    protected void initDetailsCheckBoxControl(FormBuildCheckBoxControl _detailControl)
    {
        _detailControl.label("@SYS8811");
        _detailControl.viewEditMode(ViewEditMode::Edit);
        _detailControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductionCalculationModeComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production calculation mode combobox control to be added to the header group.
    /// </summary>
    /// <returns>The production calculation mode combobox control.</returns>
    [Replaceable]
    protected FormBuildComboBoxControl buildProductionCalculationModeComboBoxControl()
    {
        FormBuildComboBoxControl prodCalcModeControl = headerBuildGroup.addControl(FormControlType::ComboBox, 'Header_ProdCalcMode');
        this.initProductionCalculationModeComboBoxControl(prodCalcModeControl);

        return prodCalcModeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductionCalculationModeComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the production calculation mode combobox control.
    /// </summary>
    /// <param name = "_prodCalcModeControl">The control to be initialized.</param>
    protected void initProductionCalculationModeComboBoxControl(FormBuildComboBoxControl _prodCalcModeControl)
    {
        _prodCalcModeControl.enumType(enumNum(CostSheetProdCalcMode));
        _prodCalcModeControl.comboType(ComboTypeList);
        _prodCalcModeControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductionFlowModeComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production flow mode combobox control to be added to the header group.
    /// </summary>
    /// <returns>The production flow mode combobox control.</returns>
    [Replaceable]
    protected FormBuildComboBoxControl buildProductionFlowModeComboBoxControl()
    {
        FormBuildComboBoxControl prodFlowModeControl = headerBuildGroup.addControl(FormControlType::ComboBox, 'Header_ProdFlowMode');
        this.initProductionFlowModeComboBoxControl(prodFlowModeControl);

        return prodFlowModeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductionFlowModeComboBoxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the production flow mode combobox control.
    /// </summary>
    /// <param name = "_prodFlowModeControl">The control to be initialized.</param>
    protected void initProductionFlowModeComboBoxControl(FormBuildComboBoxControl _prodFlowModeControl)
    {
        _prodFlowModeControl.enumType(enumNum(CostSheetProdFlowMode));
        _prodFlowModeControl.comboType(ComboTypeList);
        _prodFlowModeControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheCostSheetDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches a data source in case it is the one needed to show cost sheet views.
    /// </summary>
    /// <param name = "_formBuildDataSource">A form data source.</param>
    /// <param name = "_formDataSourceIndex">An index of the form data source.</param>
    protected void cacheCostSheetDataSources(FormBuildDataSource _formBuildDataSource, int _formDataSourceIndex)
    {
        switch (_formBuildDataSource.table())
        {
            case tableNum(CostTmpSheetCalcResult):
                tmpCostSheetDatasource = _formBuildDataSource;
                tmpCostSheetDatasourceNo = _formDataSourceIndex;
                break;

            case tableNum(CostTmpCostRollup):
                tmpCostRollupDatasource = _formBuildDataSource;
                tmpCostRollupDatasourceNo = _formDataSourceIndex;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlToParent</Name>
				<Source><![CDATA[
    private FormBuildControl addControlToParent(
        Object          _parent,
        FormControlType _controlType,
        str             _controlName
    )
    {
        FormBuildDesign         parentDesign = _parent as FormBuildDesign;
        FormBuildTabPageControl parentTabPageControl = _parent as FormBuildTabPageControl;
        FormBuildGroupControl   parentGroupControl = _parent as FormBuildGroupControl;
        FormBuildControl        addedControl;

        if (parentDesign != null)
        {
            addedControl = parentDesign.addControl(_controlType, _controlName);
        }
        else if (parentTabPageControl != null)
        {
            addedControl = parentTabPageControl.addControl(_controlType, _controlName);
        }
        else if (parentGroupControl != null)
        {
            addedControl = parentGroupControl.addControl(_controlType, _controlName);
        }

        return addedControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpParentControl</Name>
				<Source><![CDATA[
    private void setUpParentControl(Object _parent)
    {
        FormBuildDesign         parentDesign = _parent as FormBuildDesign;
        FormBuildTabPageControl parentTabPageControl = _parent as FormBuildTabPageControl;
        FormBuildGroupControl   parentGroupControl = _parent as FormBuildGroupControl;

        if (parentDesign != null)
        {
            parentDesign.allowUserSetup(FormAllowUserSetup::Restricted);
            parentDesign.columns(1);
        }
        else if (parentTabPageControl != null)
        {
            parentTabPageControl.allowUserSetup(FormAllowUserSetup::Restricted);
            parentTabPageControl.columns(1);
        }
        else if (parentGroupControl != null)
        {
            parentGroupControl.allowUserSetup(FormAllowUserSetup::Restricted);
            parentGroupControl.columns(1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRollupFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines which field group should be used to represent cost rollup data.
    /// </summary>
    /// <returns>
    ///    A field group name.
    /// </returns>
    protected str costRollupFieldGroup()
    {
        return tableFieldgroupStr(CostTmpCostRollup, CostRollup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an instance of a costing sheet.
    /// </summary>
    /// <returns>
    ///    The costing sheet instance.
    /// </returns>
    /// <remarks>
    ///    If the instance does not exist, it is created.
    /// </remarks>
    protected CostSheet costSheet()
    {
        if (costSheet == null)
        {
            costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyPresent::newParameter(this.costType()));
        }

        return costSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTmpCostRollup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates data for a cost rollup data source.
    /// </summary>
    /// <returns>
    ///    A <c>CostTmpCostRollup</c> table buffer.
    /// </returns>
    /// <remarks>
    ///    The cost amount is divided by the quantity value selected in the header controls group.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An unexpected <c>CostSheetPanelPer</c> value is used.
    /// </exception>
    protected CostTmpCostRollup costTmpCostRollup()
    {
        CostTmpCostRollup   costTmpCostRollup;

        while select CostGroupId, sum(CostAmount) from sourceCostTmpCostRollup
            group by CostGroupId
                where #Level_Corresponds_To_RollupLevel
        {
            costTmpCostRollup.data(sourceCostTmpCostRollup);
            switch (per)
            {
                case CostSheetPanelPer::Unit:
                    costTmpCostRollup.CostAmount = costTmpCostRollup.CostAmount / lotSize;
                    break;

                case CostSheetPanelPer::Qty:
                    costTmpCostRollup.CostAmount = costTmpCostRollup.CostAmount * qty / lotSize;
                    break;

                case CostSheetPanelPer::LotSize:
                    // do nothing - by default, the amounts correspond to the lot size quantity
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            costTmpCostRollup.insert();
        }

        return costTmpCostRollup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTmpCostRollup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the generates data for a cost rollup.
    /// </summary>
    /// <param name="_rollupLevel">
    /// The level of decomposition.
    /// </param>
    /// <param name="_per">
    /// Should rollup be based on Unit, LotSize or Quantity.
    /// </param>
    /// <param name="_quantity">
    /// The quantity.
    /// </param>
    /// <param name="_lotSize">
    /// The lot size.
    /// </param>
    /// <returns>
    ///    A <c>CostTmpCostRollup</c> table buffer.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An unexpected <c>CostSheetPanelPer</c> value is used.
    /// </exception>
    public CostTmpCostRollup getCostTmpCostRollup(
        InventCostLevel     _rollupLevel,
        CostSheetPanelPer   _per,
        InventQty           _quantity,
        InventQty           _lotSize)
    {
        rollupLevel = _rollupLevel;
        per = _per;
        qty = _quantity;
        lotSize = _lotSize;

        return this.costTmpCostRollup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CostPriceType</c> enumeration value that represents the branch of the costing sheet
    ///    displayed in the panel.
    /// </summary>
    /// <returns>
    ///    A value in the <c>CostPriceType</c> enumeration.
    /// </returns>
    /// <remarks>
    ///    A <c>CostPriceType::COGM</c> value, unless this method is overridden in a derived class.
    /// </remarks>
    protected CostPriceType costType()
    {
        return CostPriceType::COGM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills in the temporary data source with cost rollup and updates the grids.
    /// </summary>
    /// <remarks>
    ///    This method calls the <c>packedRecordsList</c> method, which is overridden in the subclasses of the
    ///    <c>CostSheetPanel</c> class.
    /// </remarks>
    public void fill()
    {
        if (renderInUI
            && (tmpCostRollupDatasource == null && tmpCostSheetDatasource == null))
        {
            return;
        }

        this.initUnitIdAndLotSize();

        total = 0.00;

        delete_from sourceCostTmpCostRollup;

        List recordList = List::create(this.packedRecordsList());
        ListEnumerator recordEnumerator = recordList.getEnumerator();
        while (recordEnumerator.moveNext())
        {
            sourceCostTmpCostRollup.data(recordEnumerator.current());
            sourceCostTmpCostRollup.insert();

            if (sourceCostTmpCostRollup.Level == InventCostLevel::Total)
            {
                SetEnumerator setEnumerator = this.totalContributorFieldList().getEnumerator();
                while (setEnumerator.moveNext())
                {
                    FieldId totalContributorFieldId = setEnumerator.current();
                    total += sourceCostTmpCostRollup.(totalContributorFieldId);
                }
            }
        }

        if (renderInUI)
        {
            this.updateGrids();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_per_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>Per</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the combobox value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_per_modified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();

        this.modifiedPer();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_qty_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>Quantity</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_qty_modified(FormRealControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedQty();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_rollupLevel_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the rollup level control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the combobox value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_rollupLevel_modified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedRollupLevel();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_view_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>View</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the combobox value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_view_modified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedView();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_details_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>Details</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the check box value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_details_modified(FormCheckBoxControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedDetails(_control.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_prodCalcMode_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>ProdCalcMode</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the combobox value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_prodCalcMode_modified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedProdCalcMode();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header_ProdFlowMode_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the <c>modified</c> event of the <c>ProdFlowMode</c> control.
    /// </summary>
    /// <param name="_control">
    ///     The calling control.
    /// </param>
    /// <returns>
    ///    true if the combobox value was modified successfully; otherwise, false.
    /// </returns>
    protected boolean header_ProdFlowMode_modified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        this.modifiedProdFlowMode();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dynamically built controls.
    /// </summary>
    /// <remarks>
    ///    This method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public void init()
    {
        headerGroup             = formRun.control(headerBuildGroup.id());
        detailCheckBox          = formRun.control(detailBuildCheckBox.id());
        viewComboBox            = formRun.control(viewBuildComboBox.id());
        rollupLevelComboBox     = formRun.control(rollupLevelBuildComboBox.id());
        perComboBox             = formRun.control(perBuildComboBox.id());
        qtyReal                 = formRun.control(qtyBuildReal.id());
        unitIdString            = formRun.control(unitIdBuildString.id());
        totalReal               = formRun.control(totalBuildReal.id());
        prodCalcModeComboBox    = formRun.control(prodCalcModeBuildComboBox.id());
        prodFlowModeComboBox    = formRun.control(prodFlowModeBuildComboBox.id());
        renderInUI              = true;

        perComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CostSheetPanel, header_per_modified), this);
        qtyReal.registerOverrideMethod(methodstr(FormRealControl, modified), methodstr(CostSheetPanel, header_qty_modified), this);
        rollupLevelComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CostSheetPanel, header_rollupLevel_modified), this);
        viewComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CostSheetPanel, header_view_modified), this);
        detailCheckBox.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodstr(CostSheetPanel, header_details_modified), this);
        prodCalcModeComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CostSheetPanel, header_prodCalcMode_modified), this);
        prodFlowModeComboBox.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CostSheetPanel, header_prodFlowMode_modified), this);

        if (tmpCostSheetDatasource != null)
        {
            costSheetGroup  = formRun.control(costSheetBuildGroup.id());
            costSheetGrid   = formRun.control(costSheetBuildGrid.id());
            viewComboBox.selection(enum2int(CostSheetPanelView::CostSheet));
        }
        if (tmpCostRollupDatasource != null)
        {
            costRollupGroup = formRun.control(costRollupBuildGroup.id());
            costRollupGrid  = formRun.control(costRollupBuildGrid.id());
            viewComboBox.selection(enum2int(costSheetPanelView::CostRollup));
        }
        viewComboBox.allowEdit(tmpCostSheetDatasource != null && tmpCostRollupDatasource != null);
        viewComboBox.skip(tmpCostSheetDatasource == null || tmpCostRollupDatasource == null);

        // The initial selection depends on what datasources exist on the caller form
        view = any2Enum(viewComboBox.selection());

        if (tmpCostSheetDatasource != null)
        {
            costSheetGroup.visible(view == CostSheetPanelView::CostSheet);
        }
        if (tmpCostRollupDatasource != null)
        {
            costRollupGroup.visible(view == CostSheetPanelView::CostRollup);
        }

        totalReal.visible(view == CostSheetPanelView::CostRollup);

        // Set the initial "Rollup level"
        rollupLevel = InventCostLevel::Single;
        rollupLevelComboBox.selection(new SysDictEnum(enumNum(InventCostLevel)).value2Index(rollupLevel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the unit ID and the lot size values.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden in subclasses.
    /// </remarks>
    abstract protected void initUnitIdAndLotSize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in <c>Per</c> control.
    /// </summary>
    protected void modifiedPer()
    {
        per = new SysDictEnum(enumNum(CostSheetPanelPer)).index2Value(perComboBox.selection());
        qtyReal.allowEdit(this.allowEditQty());

        switch (per)
        {
            case CostSheetPanelPer::LotSize:
                qty = lotSize;
                break;

            case CostSheetPanelPer::Qty,
                 CostSheetPanelPer::Unit:
                qty = 1.00;
                break;
        }

        qtyReal.realValue(qty);
        this.updateGrids();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the Quantity control.
    /// </summary>
    protected void modifiedQty()
    {
        qty = qtyReal.realValue();
        this.updateGrids();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedRollupLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the rollup level control.
    /// </summary>
    protected void modifiedRollupLevel()
    {
        rollupLevel = any2Enum(rollupLevelComboBox.selection());
        this.updateGrids();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedView</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the <c>View</c> control.
    /// </summary>
    protected void modifiedView()
    {
        view = any2Enum(viewComboBox.selection());
        costSheetGroup.visible(view == CostSheetPanelView::CostSheet);
        costRollupGroup.visible(view == CostSheetPanelView::CostRollup);
        totalReal.visible(view == CostSheetPanelView::CostRollup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the <c>Details</c> control.
    /// </summary>
    /// <param name = "_modifiedDetails">Yes if details should be displayed; otherwise No</param>
    protected void modifiedDetails(NoYes _modifiedDetails)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProdCalcMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the prodCalcMode control.
    /// </summary>
    protected void modifiedProdCalcMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProdFlowMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the form control values according to the new selection in the prodFlowMode control.
    /// </summary>
    protected void modifiedProdFlowMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a packed <c>List</c> with cost rollup records that will later be used as a source for
    ///    cost rollup or costing sheet grids.
    /// </summary>
    /// <returns>
    ///    A container object.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in subclasses.
    /// </remarks>
    abstract protected container packedRecordsList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentId</Name>
				<Source><![CDATA[
    public FormControlId parmParentId(FormControlId _parentId = parentId)
    {
        parentId = _parentId;

        return parentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalContributorFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines which fields of the cost rollup table should be used to calculate the total amount.
    /// </summary>
    /// <returns>
    ///    A <c>Set</c> object that has field IDs.
    /// </returns>
    protected Set totalContributorFieldList()
    {
        Set fieldIdSet = new Set(typeName2Type(extendedTypeStr(FieldId)));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, CostAmount));

        return fieldIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines what label should be used in front of the total value.
    /// </summary>
    /// <returns>
    ///    The label for the total amount.
    /// </returns>
    protected str totalLabel()
    {
        return "@SYS809";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGrids</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Uses the temporary cost rollup data to fill in the grids.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The lot size value is zero.
    /// </exception>
    protected void updateGrids()
    {
        if (lotSize == 0.00)
        {
            throw error("@SCM:LotSizeIsZero");
        }

        CostTmpCostRollup costTmpCostRollup = this.costTmpCostRollup();

        totalReal.realValue(total * qty / lotSize); // update the displayed total amount

        if (tmpCostRollupDatasource)
        {
            formRun.dataSource(tmpCostRollupDatasourceNo).cursor().setTmpData(costTmpCostRollup);
            formRun.dataSource(tmpCostRollupDatasourceNo).research();
        }

        if (tmpCostSheetDatasource)
        {
            CostCalcTransData costCalcTransData = CostCalcTransData::construct();
            while select costTmpCostRollup
            {
                costCalcTransData.addCalcTrans(costTmpCostRollup.CostGroupId,
                                               unitID,
                                               ItemCalcType::Item,
                                               '',
                                               costTmpCostRollup.CostAmount,
                                               0.00,
                                               1.00,
                                               0.00,
                                               CostTmpCostRollup::inventCostLevel2Level(costTmpCostRollup.Level),
                                               '');
            }

            this.costSheet().calc(costCalcTransData);

            CostSheetResultOutputTmpTable costSheetResultOutputTmpTable = CostSheetResultOutputTmpTable::construct();
            this.costSheet().generateResult(costSheetResultOutputTmpTable);

            formRun.dataSource(tmpCostSheetDatasourceNo).cursor().setTmpData(costSheetResultOutputTmpTable.getCostTmpSheetCalcResult());
            formRun.dataSource(tmpCostSheetDatasourceNo).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRenderInUI</Name>
				<Source><![CDATA[
    protected NoYes parmRenderInUI(NoYes _renderInUI = renderInUI)
    {
        renderInUI = _renderInUI;
        return renderInUI;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>