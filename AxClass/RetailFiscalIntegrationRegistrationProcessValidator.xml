<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalIntegrationRegistrationProcessValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <C>RetailFiscalIntegrationRegistrationProcessValidator</C> class handles validate logic on RetailFiscalIntegrationRegistrationProcess form.
/// </summary>
public class RetailFiscalIntegrationRegistrationProcessValidator
{
    private static const str functionalityProfileDelimiter = ';';
    private static const str infoCodeDelimiter = ',';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateInfoCode</Name>
				<Source><![CDATA[
    private static void validateInfoCode(RetailFiscalIntegrationRegistrationProcess retailFiscalIntegrationRegistrationProcess)
    {
        RetailFiscalIntegrationRegistrationProcessLine processLine;
        RetailFiscalIntegrationFunctionalityProfileGroup functionalityProfileGroup;
        Exception infoCodeException;
        str functionalityProfiles;
        Set functionalityProfileSet = new Set(Types::String);
        SetEnumerator functionalityProfileEnumerator;

        while select processLine
            where processLine.RegistrationProcessId == retailFiscalIntegrationRegistrationProcess.RegistrationProcessId
            && (processLine.AllowMarkAsRegistered || 
                processLine.AllowSkip ||
                processLine.AllowPostpone)
            join functionalityProfileGroup
                where functionalityProfileGroup.FunctionalityProfileGroupId == processLine.FunctionalityProfileGroup
        {
            if ((processLine.AllowMarkAsRegistered && !functionalityProfileGroup.MarkAsRegistered) ||
                (processline.AllowSkip && !functionalityProfileGroup.Skip) ||
                (processline.AllowPostpone && !functionalityProfileGroup.Postpone))
            {
                functionalityProfileSet.add(functionalityProfileGroup.FunctionalityProfileGroupId);
            }
        }

        functionalityProfileEnumerator = functionalityProfileSet.getEnumerator();

        while (functionalityProfileEnumerator.moveNext())
        {
            functionalityProfiles += strFmt('%1%2', functionalityProfileEnumerator.current(), infoCodeDelimiter);
        }

        if (functionalityProfiles)
        {
            functionalityProfiles = subStr(functionalityProfiles, 1, strLen(functionalityProfiles) -1);
            infoCodeException = warning(strFmt("@RetailFiscalIntegration:InfoCodesCannotBeNullV2", functionalityProfiles));
        }

        if (infoCodeException)
        {
            throw infoCodeException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConnectorGroupWithFunctionalityProfile</Name>
				<Source><![CDATA[
    private static void validateConnectorGroupWithFunctionalityProfile(RetailFiscalIntegrationRegistrationProcess retailFiscalIntegrationRegistrationProcess)
    {
        Exception functionalityProfileException;
        str functionalityProfiles;
        RetailFiscalIntegrationRegistrationProcessLine processLine;
        RetailFiscalIntegrationFunctionalityProfileGroupLine groupLine;
        RetailFiscalIntegrationFunctionalityProfile fiscalFunctionalityProfile;
        RetailFunctionalityProfileFiscalIntegrationTechnicalProfileLine functionalityProfileTechnicalProfileLine;
        RetailFiscalIntegrationTechnicalProfile technicalProfile;
        RetailFunctionalityProfile functionalityProfile;

        while select processLine where processLine.RegistrationProcessId == retailFiscalIntegrationRegistrationProcess.RegistrationProcessId
            && (processLine.ConnectorType == RetailFiscalIntegrationConnectorType::External || processLine.ConnectorType == RetailFiscalIntegrationConnectorType::Internal)
        {
            while select crosscompany count(RecId) from fiscalFunctionalityProfile
                group by functionalityProfile.profileId
                    join groupLine
                        where fiscalFunctionalityProfile.RecId == groupLine.FunctionalityProfile
                           && groupLine.FunctionalityProfileGroup == processLine.FunctionalityProfileGroup
                           && groupLine.Disable == NoYes::No
                        join technicalProfile
                            where technicalProfile.ConnectorName == fiscalFunctionalityProfile.ConnectorName
                            join functionalityProfileTechnicalProfileLine
                                where technicalProfile.ProfileId == functionalityProfileTechnicalProfileLine.FiscalTechnicalProfileId
                                join profileId from functionalityProfile
                                    where functionalityProfile.RegistrationProcessId == retailFiscalIntegrationRegistrationProcess.RegistrationProcessId
                                        && functionalityProfile.profileId == functionalityProfileTechnicalProfileLine.FunctionalityProfileId
            {
                if (fiscalFunctionalityProfile.RecId > 1)
                {
                    functionalityProfiles += strFmt('%1%2',functionalityProfile.profileId, functionalityProfileDelimiter);
                }
            }
            if (functionalityProfiles)
            {
                functionalityProfiles = subStr(functionalityProfiles, 1, strLen(functionalityProfiles) - 1);
                functionalityProfileException = error(strFmt("@RetailFiscalIntegration:MoreThanOneIntersectionBetweenConnectorGroupAndFunctionalityProfile", processLine.FunctionalityProfileGroup, functionalityProfiles));
                functionalityProfiles = null;
            }
        }

        if (functionalityProfileException)
        {
            throw functionalityProfileException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConnectorGroupWithHardware</Name>
				<Source><![CDATA[
    private static void validateConnectorGroupWithHardware(RetailFiscalIntegrationRegistrationProcess retailFiscalIntegrationRegistrationProcess)
    {
        Exception hardwareException;
        int connectorCount;
        str hardwareProfiles;
        boolean isHardwareProfileAdded;

        RetailHardwareProfileId originalProfileId;
        RetailFiscalIntegrationConnectorGroupId groupId;
        RetailFiscalIntegrationFunctionalityProfileGroupLine groupLine;
        RetailFiscalIntegrationRegistrationProcessLine processLine;
        RetailHardwareProfileFiscalIntegrationTechnicalProfileLine profileLine;
        RecId processLineRecId;

        void collectErrorMessage()
        {
            if (processLineRecId != processLine.RecId)
            {
                if (hardwareProfiles != '')
                {
                    int length = strLen(hardwareProfiles);
                    hardwareProfiles = strDel(hardwareProfiles, strFind(hardwareProfiles, ';', length, -length), 1);

                    // If thereâ€™s more than one connector exists in both connector group lists of fiscal registration process and hardware profile connector lists, store error messages.
                    hardwareException = error(strFmt("@RetailFiscalIntegration:MoreThanOneIntersectionBetweenConnectorGroupAndHardwareProfile", groupId, hardwareProfiles));

                    hardwareProfiles = '';
                }

                originalProfileId = profileLine.HardwareProfileId;
                groupId = processLine.FunctionalityProfileGroup;
                processLineRecId = processLine.RecId;
                connectorCount = 0;
                isHardwareProfileAdded = false;
            }

            if (profileLine.HardwareProfileId != originalProfileId)
            {
                connectorCount = 0;
                isHardwareProfileAdded = false;
                originalProfileId = profileLine.HardwareProfileId;
            }
        }

        while select processLine where processLine.RegistrationProcessId == retailFiscalIntegrationRegistrationProcess.RegistrationProcessId
            && processLine.ConnectorType == RetailFiscalIntegrationConnectorType::Local
        {
            List connList = RetailFiscalIntegrationRegistrationProcessValidator::getConnectorListOfFunctionalProfile(processLine);

            // Check intersections between connector group and hardware profile.
            // Select hardware profiles with more than one technical profile added (skip hardware profiles with 0 or 1 technical profiles).
            while select count(RecId), HardwareProfileId from profileLine
                group by profileLine.HardwareProfileId
            {
                if (profileLine.RecId > 1)
                {
                    List connHardwareProfileList = RetailFiscalIntegrationRegistrationProcessValidator::getConnectorListOfHardwareProfile(profileLine);
                    ListEnumerator connListEnum = connList.getEnumerator();

                    collectErrorMessage();

                    while (connListEnum.moveNext())
                    {
                        ListEnumerator connHardwareProfileListEnum = connHardwareProfileList.getEnumerator();

                        while (connHardwareProfileListEnum.moveNext())
                        {
                            if (connHardwareProfileListEnum.current() == connListEnum.current())
                            {
                                connectorCount++;

                                if (connectorCount > 1 && !isHardwareProfileAdded)
                                {
                                    hardwareProfiles += profileLine.HardwareProfileId;
                                    hardwareProfiles += ';';
                                    isHardwareProfileAdded = true;

                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        collectErrorMessage();
        if (hardwareException)
        {
            throw hardwareException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegistrationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates fiscal integration registration process.
    /// </summary>
    public static void validateRegistrationProcess(RetailFiscalIntegrationRegistrationProcess retailFiscalIntegrationRegistrationProcess)
    {
        Exception exceptionForHardware, exceptionForFunctionalityProfile, warningMarkManually;

        // Check intersections between connector group and hardware.
        RetailFiscalIntegrationRegistrationProcessValidator::validateConnectorGroupWithHardware(retailFiscalIntegrationRegistrationProcess);

        // Check intersections between connector group and functionality profile.
        RetailFiscalIntegrationRegistrationProcessValidator::validateConnectorGroupWithFunctionalityProfile(retailFiscalIntegrationRegistrationProcess);

        // Check if an info code is missing from the functionality profile group when the corresponding option is enabled on process line.
        RetailFiscalIntegrationRegistrationProcessValidator::validateInfoCode(retailFiscalIntegrationRegistrationProcess);

        info("@RetailFiscalIntegration:ProcessValidationSucceeded");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorListOfFunctionalProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collect a list of connectors that have a functional profile included into process line.
    /// </summary>
    /// <param name = "_processLine">
    /// The <c>RetailFiscalIntegrationRegistrationProcessLine</c> object.
    /// </param>
    /// <returns>
    /// A list of fiscal integration connectors.
    /// </returns>
    public static List getConnectorListOfFunctionalProfile(RetailFiscalIntegrationRegistrationProcessLine _processLine)
    {
        List connList = new List(Types::String);
        RetailFiscalIntegrationFunctionalityProfile functionalProfile;
        RetailFiscalIntegrationFunctionalityProfileGroupLine functionalityProfileGroupLine;

        // Skip connectors with status disabled.
        while select crosscompany ConnectorName from functionalProfile exists join functionalityProfileGroupLine
            group by functionalProfile.ConnectorName
                where functionalityProfileGroupLine.FunctionalityProfile == functionalProfile.RecId
                && functionalityProfileGroupLine.FunctionalityProfileGroup == _processLine.FunctionalityProfileGroup
                && functionalityProfileGroupLine.Disable == NoYes::No
        {
            connList.addEnd(functionalProfile.ConnectorName);
        }

        return connList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorListOfHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collect a list of connectors that have a technical profile included into hardware profile.
    /// </summary>
    /// <param name = "_profileLine">
    /// The <c>RetailFiscalIntegrationRegistrationProcessLine</c> object.
    /// </param>
    /// <returns>
    /// A list of fiscal integration connectors.
    /// </returns>
    public static List getConnectorListOfHardwareProfile(RetailHardwareProfileFiscalIntegrationTechnicalProfileLine _profileLine)
    {
        List connHardwareProfileList = new List(Types::String);
        RetailFiscalIntegrationTechnicalProfile technicalProfile;
        RetailHardwareProfileFiscalIntegrationTechnicalProfileLine profileLine;

        while select ConnectorName from technicalProfile exists join profileLine
            group by technicalProfile.ConnectorName
                where profileLine.FiscalTechnicalProfileId == technicalProfile.ProfileId
                && profileLine.HardwareProfileId == _profileLine.HardwareProfileId
        {
            connHardwareProfileList.addEnd(technicalProfile.ConnectorName);
        }

        return connHardwareProfileList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>