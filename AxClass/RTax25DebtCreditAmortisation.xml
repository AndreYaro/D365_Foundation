<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25DebtCreditAmortisation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25DebtCreditAmortisation extends RTax25DebtAmortisation
{
    // Current transaction data
    AmountMST       vatAmountMST;
    // Common
    LedgerDimensionDefaultAccount revenueExpenseLedgerDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransAmounts</Name>
				<Source><![CDATA[
    protected void calcTransAmounts()
    {
        hopelessDebtMST   = custVendTrans.remainAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the tax ledger dimension default account for the specified customer ot vendor transactions and tax code.
    /// </summary>
    /// <param name="_custVendTrans">
    /// A buffer containing <c>CustTrans</c> or <c>VendTrans</c> table record.
    /// </param>
    /// <param name="_taxCode">
    /// A tax code which is used to find the tax account.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> tax account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionDefaultAccount findTaxLedgerDimension(CustVendTrans _custVendTrans, TaxCode _taxCode)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        TaxLedgerAccountGroup         taxLedgerAccountGroup;
        TaxTable                      taxTable;

        if (_custVendTrans.TableId == tableNum(CustTrans) && _custVendTrans.Prepayment)
        {
            ledgerDimension = CustLedgerAccounts::vatPrepaymentsLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile);
        }
        else
        {
            select TaxIncomingLedgerDimension from taxLedgerAccountGroup
                exists join RecId from taxTable
            where taxLedgerAccountGroup.TaxAccountGroup == taxTable.TaxAccountGroup                          &&
                  taxTable.TaxCode       == _taxCode                                                         &&
                  (taxTable.TaxType_W == TaxType_W::VAT || taxTable.TaxType_W == TaxType_W::VATReduced);

            ledgerDimension = taxLedgerAccountGroup.TaxIncomingLedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        VendParameters   vendParameters = VendParameters::find();
        DimensionDefault localDefaultDimension;

        super();
        transTxt               = "@GLS104194";

        revenueExpenseLedgerDimension = vendParameters.rTax25UnrealisedRevenueLedgerDimension;

        localDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(vendParameters.rTax25ProfitTable);

        if (!localDefaultDimension)
        {
            throw error(strFmt("@GLS104379", "@SYS25194"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    protected NumberSeq numberSeq()
    {
        NumberSeq   numberSeq;
        DictType    dictType;

        numberSeq = NumberSeq::newGetVoucher(VendParameters::numRefRTax25DebtCreditVoucher(),false,true);
        if (! numberSeq)
        {
            dictType = new DictType(extendedTypeNum(RTax25DebtDebitVoucher));
            throw error(strFmt("@SYS53184", "@SYS53912", dictType.label()));
        }
        return  numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAmounts</Name>
				<Source><![CDATA[
    protected void postAmounts()
    {
        this.postTaxAmounts();
        this.createLedgerTrans(revenueExpenseLedgerDimension, hopelessDebtMST);
        this.createCustVendVoucher(-hopelessDebtMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxAmounts</Name>
				<Source><![CDATA[
    #define.Two(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postTaxAmounts()
    {
        LedgerVoucherTransObject      ledgerVoucherTransObject;
        LedgerVoucherObject           ledgerVoucherObject;
        CustVendCalcSettledAmounts_RU custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(custVendTrans);
        Map                           mapSettledAmounts;
        MapIterator                   it;
        BookStructSmallVATAmounts_RU  settledAmounts;
        TaxAmount                     totalTaxAmount;
        TaxCode                       taxCode;
        CurrencyExchangeHelper        currencyExchHelper;

        custVendCalcSettledAmounts.calcSettledAmounts();
        custVendCalcSettledAmounts.calcNewSettlement(hopelessDebtMST, 0);

        mapSettledAmounts = custVendCalcSettledAmounts.mapLastSettledAmountsMST();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        currencyExchHelper  = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                      ledgerVoucherObject.parmAccountingDate());
        it  = new MapIterator(mapSettledAmounts);

        while (it.more())
        {
            settledAmounts = BookStructSmallVATAmounts_RU::create(it.value());

            taxCode = conPeek(it.key(), 1);

            if (settledAmounts.taxAmountVAT() && taxCode)
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucherObject,
                            LedgerPostingType::Tax,
                            LedgerDimensionFacade::serviceCreateLedgerDimension(this.findTaxLedgerDimension(custVendTrans, taxCode), defaultDimension),
                            currencyCode,
                            settledAmounts.taxAmountVAT(),
                            currencyExchHelper);
                ledgerVoucherTransObject.parmSourceTableId(custVendTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(custVendTrans.RecId);

                ledgerVoucherTransObject.parmTransTxt(transTxt);

                ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }

            totalTaxAmount += settledAmounts.taxAmountVAT();

            it.next();
        }

        if (totalTaxAmount)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::Tax,
                LedgerDimensionFacade::serviceCreateLedgerDimension(revenueExpenseLedgerDimension, defaultDimension),
                currencyCode,
                -totalTaxAmount,
                currencyExchHelper);

            ledgerVoucherTransObject.parmSourceTableId(custVendTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(custVendTrans.RecId);

            ledgerVoucherTransObject.parmTransTxt(transTxt);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (ledgerBondClient)
        {
            if (ledgerBondClient.currentLogLength() >= #Two) // we have a debt with taxes
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }
            ledgerBondClient.removeCurrentLogObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOffsetTrans</Name>
				<Source><![CDATA[
    protected void updateOffsetTrans(CustVendTrans _custVendTrans)
    {
        if (_custVendTrans)
        {
            _custVendTrans.TransType = LedgerTransType::RTax25_BadDebtCreditAmortisation;
            _custVendTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtCreditAmortisation construct()
    {
        return new RTax25DebtCreditAmortisation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendVoucher</Name>
				<Source><![CDATA[
    protected void createCustVendVoucher(AmountMST _amountMST = hopelessDebtMST)
    {
        super(_amountMST);

        if (initCustVendVoucherInvoiceLedgerDim)
        {
            custVendVoucher.parmFixedInvoiceTransLedgerDimension_RU(revenueExpenseLedgerDimension);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>