<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationPriceSimulationRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationPriceSimulationRecord
{
    SalesQuotationPriceSimTable salesQuotationPriceSimTable;
    SalesQuotationTable         salesQuotationTable;
    SalesQuotationLine          salesQuotationLine;

    AmountCur                   origSalesPricePerUnit;
    AmountCur                   origCostPricePerUnit;
    AmountCur                   origDiscountAmount;
    Percent                     origDiscountPct;
    AmountCur                   origAmount;
    AmountCur                   origMargin;
    AmountCur                   origRatio;
    AmountCur                   origMultiLineDisc;
    Percent                     origMultilinePercentage;
    AmountCur                   origSalesMarkUp;

    AmountCur                   origTotalSalesValue;
    AmountCur                   origTotalCostValue;
    AmountCur                   origTotalDiscountAmount;
    AmountCur                   origTotalDiscountHeader;

    Percent                     origTotalDiscountPercentage;
    AmountCur                   origTotalAmount;
    AmountCur                   origTotalMargin;
    AmountCur                   origTotalRatio;

    AmountCur                   simTotalSalesPricePerUnit;
    AmountCur                   simTotalCostPrice;
    AmountCur                   simTotalDiscountAmount;
    Percent                     simTotalDiscountPct;
    AmountCur                   simTotalAmount;
    AmountCur                   simTotalDiscountHeader;
    AmountCur                   simTotalMargin;
    AmountCur                   simTotalRatio;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateOriginalPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the original prices for the current sales quotation line.
    /// </summary>
    public void calculateOriginalPrices()
    {
        AmountCur   origCostPricePerSalesPriceUnit;

        origSalesPricePerUnit       = salesQuotationLine.SalesPrice;

        origCostPricePerUnit        = salesQuotationPriceSimTable.calcCostPrice(salesQuotationLine);
        // For category based lines there is no inventory unit and the cost price is already in sales units.
        if (salesQuotationLine.isCategoryBased())
        {
            origCostPricePerSalesPriceUnit = origCostPricePerUnit;
        }
        else
        {
            origCostPricePerSalesPriceUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesQuotationLine.ItemId,
																												   salesQuotationLine.InventDimId,
																												   origCostPricePerUnit,
																												   salesQuotationLine.SalesUnit,
																												   salesQuotationLine.inventTable().inventUnitId(),
																												   NoYes::Yes,
																												   NoYes::No);
        }
        origCostPricePerSalesPriceUnit = origCostPricePerSalesPriceUnit / (salesQuotationLine.PriceUnit? salesQuotationLine.PriceUnit : 1);

        origMultiLineDisc       = salesQuotationLine.MultiLnDisc;
        origMultilinePercentage = salesQuotationLine.MultiLnPercent;
        origSalesMarkUp         = salesQuotationLine.SalesMarkup;
        origDiscountAmount      = salesQuotationLine.LineDisc;
        origDiscountPct         = salesQuotationLine.LinePercent;
        origAmount              = salesQuotationLine.LineAmount;
        origMargin              = salesQuotationLine.LineAmount - (salesQuotationLine.SalesQty * origCostPricePerSalesPriceUnit);

        if (salesQuotationLine.LineAmount != 0)
        {
            origRatio = ((origAmount - (salesQuotationLine.SalesQty * origCostPricePerSalesPriceUnit)) * 100) / salesQuotationLine.LineAmount;
        }
        else
        {
            origRatio = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSimulatedTotalPrices</Name>
				<Source><![CDATA[
    public void calculateSimulatedTotalPrices()
    {
        SalesQuotationLine  s;
        Amount              baseAmount;
        PriceUnit           tmpPriceUnit;

        simTotalSalesPricePerUnit   = 0;
        simTotalAmount              = 0;
        simTotalDiscountAmount      = 0;

        // Find cost price using SCM classes
        simTotalCostPrice = 0;
        this.findQuotationTotals();

        if (salesQuotationLine)
        {
            // Traverse all the quotation lines except the one that is being simulated
            while select PriceUnit, SalesPrice, SalesQty, SalesMarkup, LineDisc, MultiLnDisc, MultiLnPercent, LinePercent, LineAmount from s where
                s.QuotationId == salesQuotationTable.QuotationId
                 && s.LineNum != salesQuotationLine.LineNum
            {
                tmpPriceUnit = s.PriceUnit ? s.PriceUnit : 1;
                simTotalSalesPricePerUnit += s.SalesPrice * s.SalesQty / tmpPriceUnit;
                simTotalSalesPricePerUnit += s.SalesMarkup;

                simTotalDiscountAmount += s.LineDisc * s.SalesQty / tmpPriceUnit;
                simTotalDiscountAmount += s.MultiLnDisc * s.SalesQty / tmpPriceUnit;

                baseAmount = s.SalesPrice + (s.SalesQty ? s.PriceUnit * s.SalesMarkup / s.SalesQty : 0) - s.LineDisc - s.MultiLnDisc;

                simTotalDiscountAmount += (baseAmount * (s.MultiLnPercent / 100)) * s.SalesQty / tmpPriceUnit;
                simTotalDiscountAmount += (baseAmount * (s.LinePercent / 100)) * s.SalesQty / tmpPriceUnit;

                simTotalAmount += s.LineAmount;
            }

            // Sales value
            tmpPriceUnit = salesQuotationLine.PriceUnit ? salesQuotationLine.PriceUnit : 1;
            simTotalSalesPricePerUnit += salesQuotationPriceSimTable.NewSalesPricePerUnit * salesQuotationLine.SalesQty / tmpPriceUnit;
            simTotalSalesPricePerUnit += salesQuotationLine.SalesMarkup;

            simTotalDiscountAmount += salesQuotationPriceSimTable.NewDiscountAmount * salesQuotationLine.SalesQty / tmpPriceUnit;
            simTotalDiscountAmount += salesQuotationLine.MultiLnDisc * salesQuotationLine.SalesQty / tmpPriceUnit;

            baseAmount = salesQuotationPriceSimTable.NewSalesPricePerUnit + (salesQuotationLine.SalesQty ? (tmpPriceUnit  * salesQuotationLine.SalesMarkup / salesQuotationLine.SalesQty) : 0)
                         - salesQuotationPriceSimTable.NewDiscountAmount - salesQuotationLine.MultiLnDisc;

            simTotalDiscountAmount += (baseAmount * (salesQuotationPriceSimTable.NewDiscountPercentage / 100)) * salesQuotationLine.SalesQty / tmpPriceUnit;
            simTotalDiscountAmount += (baseAmount * (salesQuotationLine.MultiLnPercent / 100)) * salesQuotationLine.SalesQty / tmpPriceUnit;

            simTotalAmount += salesQuotationPriceSimTable.NewAmount;

            simTotalMargin = simTotalAmount - simTotalCostPrice;

            if (simTotalAmount != 0)
            {
                simTotalRatio = (simTotalMargin / simTotalAmount) * 100;
            }
            else
            {
                simTotalRatio = 0;
            }
        }
        else
        {
            origTotalDiscountPercentage = salesQuotationTable.DiscPercent;
            simTotalDiscountPct         = salesQuotationPriceSimTable.NewDiscountPercentage;
            simTotalSalesPricePerUnit   = origTotalSalesValue;
            simTotalDiscountAmount      = origTotalDiscountAmount;
            simTotalDiscountHeader      = this.simTotalDiscountHeader();
            simTotalAmount              = this.simTotalAmount(simTotalDiscountHeader);

            simTotalMargin              = simTotalAmount - simTotalCostPrice;

            if (simTotalAmount != 0)
            {
                simTotalRatio           = (simTotalMargin / simTotalAmount) * 100;
            }
            else
            {
                simTotalRatio = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return salesQuotationTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercentageHeader</Name>
				<Source><![CDATA[
    public Percent discPercentageHeader()
    {
        Amount baseAmount = salesQuotationPriceSimTable.Margin + origTotalCostValue;
        AmountCur amountWtDisc = origTotalSalesValue - origTotalDiscountAmount;

        if (amountWtDisc != 0)
        {
            return ((amountWtDisc - baseAmount) / amountWtDisc) * 100;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQuotationTotals</Name>
				<Source><![CDATA[
    void findQuotationTotals()
    {
        SalesQuotationTotals        salesQuotationTotals = SalesQuotationTotals::construct(salesQuotationTable);
        container                   displayFields = salesQuotationTotals.displayFieldsCurrency(this.currencyCode());

        simTotalCostPrice           = conpeek(displayFields, TradeTotals::posCostValue());
        origTotalSalesValue         = conpeek(displayFields, TradeTotals::posLineDisc()) + conpeek(displayFields, TradeTotals::posBalance());
        origTotalCostValue          = conpeek(displayFields, TradeTotals::posCostValue());
        origTotalDiscountAmount     = conpeek(displayFields, TradeTotals::posLineDisc());
        origTotalDiscountHeader     = conpeek(displayFields, TradeTotals::posEndDisc());
        origTotalAmount             = conpeek(displayFields, TradeTotals::posTotalAmount()) - conpeek(displayFields, TradeTotals::posTaxTotal());
        origTotalMargin             = conpeek(displayFields, TradeTotals::posContributionMargin());
        origTotalRatio              = conpeek(displayFields, TradeTotals::posContributionRatio());

        if (this.currencyCode() != CompanyInfoHelper::standardCurrency())
        {
            origTotalCostValue = CurrencyExchangeHelper::curAmount(origTotalCostValue, this.currencyCode());
            simTotalCostPrice  = CurrencyExchangeHelper::curAmount(simTotalCostPrice, this.currencyCode());
            origTotalMargin    = CurrencyExchangeHelper::curAmount(origTotalMargin, this.currencyCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusRelAccount</Name>
				<Source><![CDATA[
    public smmBusRelAccount getBusRelAccount()
    {
        return salesQuotationTable.BusRelAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    public CustAccount getCustAccount()
    {
        return salesQuotationTable.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigAmount</Name>
				<Source><![CDATA[
    public AmountCur getOrigAmount()
    {
        return origAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigCostPricePerUnit</Name>
				<Source><![CDATA[
    public AmountCur getOrigCostPricePerUnit()
    {
        return origCostPricePerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getOrigDiscountAmount()
    {
        return origDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDiscountPct</Name>
				<Source><![CDATA[
    public Percent getOrigDiscountPct()
    {
        return origDiscountPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigMargin</Name>
				<Source><![CDATA[
    public AmountCur getOrigMargin()
    {
        return origMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigMultiLineDisc</Name>
				<Source><![CDATA[
    public AmountCur getOrigMultiLineDisc()
    {
        return origMultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigMultiLinePercentage</Name>
				<Source><![CDATA[
    public Percent getOrigMultiLinePercentage()
    {
        return origMultilinePercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigRatio</Name>
				<Source><![CDATA[
    public AmountCur getOrigRatio()
    {
        return origRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigSalesMarkUp</Name>
				<Source><![CDATA[
    public AmountCur getOrigSalesMarkUp()
    {
        return origSalesMarkUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigSalesPricePerUnit</Name>
				<Source><![CDATA[
    public AmountCur getOrigSalesPricePerUnit()
    {
        return origSalesPricePerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalAmount</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalAmount()
    {
        return origTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalCostValue</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalCostValue()
    {
        return origTotalCostValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalDiscountAmount()
    {
        return origTotalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalDiscountHeader</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalDiscountHeader()
    {
        return origTotalDiscountHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalDiscountPercentage</Name>
				<Source><![CDATA[
    public Percent getOrigTotalDiscountPercentage()
    {
        return origTotalDiscountPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalMargin</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalMargin()
    {
        return origTotalMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalRatio</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalRatio()
    {
        return origTotalRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTotalSalesValue</Name>
				<Source><![CDATA[
    public AmountCur getOrigTotalSalesValue()
    {
        return origTotalSalesValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationId</Name>
				<Source><![CDATA[
    public QuotationId getQuotationId()
    {
        return salesQuotationTable.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationStatus</Name>
				<Source><![CDATA[
    public SalesQuotationStatus getSalesQuotationStatus()
    {
        return salesQuotationTable.QuotationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalAmount</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalAmount()
    {
        return simTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalCostPrice</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalCostPrice()
    {
        return simTotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalDiscountAmount()
    {
        return simTotalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalDiscountHeader</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalDiscountHeader()
    {
        return simTotalDiscountHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalDiscountPct</Name>
				<Source><![CDATA[
    public Percent getSimTotalDiscountPct()
    {
        return simTotalDiscountPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalMargin</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalMargin()
    {
        return simTotalMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalRatio</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalRatio()
    {
        return simTotalRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimTotalSalesPricePerUnit</Name>
				<Source><![CDATA[
    public AmountCur getSimTotalSalesPricePerUnit()
    {
        return simTotalSalesPricePerUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginHeader</Name>
				<Source><![CDATA[
    public AmountCur marginHeader()
    {
        return this.simTotalAmount() - simTotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ratioHeader</Name>
				<Source><![CDATA[
    public Percent ratioHeader()
    {
        AmountCur sTotalAmount = this.simTotalAmount();

        if (sTotalAmount != 0 )
        {
            return  (sTotalAmount - simTotalCostPrice) / sTotalAmount * 100;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceSimTable</Name>
				<Source><![CDATA[
    void setPriceSimTable(SalesQuotationPriceSimTable _salesQuotationPriceSimTable)
    {
        salesQuotationPriceSimTable = _salesQuotationPriceSimTable;

        this.calculateSimulatedTotalPrices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationLine</Name>
				<Source><![CDATA[
    public void setQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        salesQuotationLine = _salesQuotationLine;

        this.calculateOriginalPrices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationTable</Name>
				<Source><![CDATA[
    public void setQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>simMargin</Name>
				<Source><![CDATA[
    AmountCur simMargin()
    {
        if (salesQuotationPriceSimTable.ContributionRatio >= 100)
            return 0;

        return origTotalCostValue * salesQuotationPriceSimTable.ContributionRatio / (100 - salesQuotationPriceSimTable.ContributionRatio);
    }

]]></Source>
			</Method>
			<Method>
				<Name>simTotalAmount</Name>
				<Source><![CDATA[
    AmountCur simTotalAmount(AmountCur _simTotalDiscountHeader = 0)
    {
        AmountCur simTotalDiscHeader;

        if (prmisdefault(_simTotalDiscountHeader))
            simTotalDiscHeader = this.simTotalDiscountHeader();
        else
            simTotalDiscHeader = _simTotalDiscountHeader;

        return origTotalSalesValue - origTotalDiscountAmount - simTotalDiscHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>simTotalDiscountHeader</Name>
				<Source><![CDATA[
    AmountCur simTotalDiscountHeader()
    {
        return (origTotalSalesValue - origTotalDiscountAmount) * (salesQuotationPriceSimTable.NewDiscountPercentage / 100);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>