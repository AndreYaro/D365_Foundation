<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPackingMaterialFeeCalcDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Data provider for Packing material weight - purchase report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventPackingMaterialFeeCalc)),
    SRSReportParameterAttribute(classStr(InventPackingMaterialFeeCalcContract))
]
class InventPackingMaterialFeeCalcDP extends SRSReportDataProviderBase
{
    InventPackingMaterialFeeCalcTmp inventPackingMaterialFeeCalcTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventPackingMaterialFeeCalcTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the temporary <c>InventPackingMaterialFeeCalcTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventPackingMaterialFeeCalcTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(InventPackingMaterialFeeCalcTmp))]
    public InventPackingMaterialFeeCalcTmp getInventPackingMaterialFeeCalcTmp()
    {
        select inventPackingMaterialFeeCalcTmp;
        return inventPackingMaterialFeeCalcTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        InventPackagingMaterialFee          inventPackagingMaterialFee;
        InventPackagingMaterialTrans        inventPackagingMaterialTrans;
        InventPackagingMaterialTransPurch   inventPackagingMaterialTransPurch;

        InventPackingMaterialFeeCalcContract contract = this.parmDataContract() as InventPackingMaterialFeeCalcContract;
        InvoiceDate fromDate = contract.parmFromDate();
        InvoiceDate toDate = contract.parmToDate();

        Query query = this.parmQuery();
        QueryRun queryRun = new QueryRun(query);

        // iterate over (possibly filtered) packing material codes
        while (queryRun.next())
        {
            InventPackagingMaterialCode inventPackagingMaterialCode = queryRun.get(tableNum(InventPackagingMaterialCode));

            inventPackingMaterialFeeCalcTmp.clear();
            inventPackingMaterialFeeCalcTmp.PackMaterialCode    = inventPackagingMaterialCode.PackMaterialCode;
            inventPackingMaterialFeeCalcTmp.PackMaterialName    = inventPackagingMaterialCode.Name;
            inventPackingMaterialFeeCalcTmp.Unit                = inventPackagingMaterialCode.Unit;

            // Find the fee. Note that the current data model allows there to be more than one, so we must assume here that the fee setup is correct.
            select firstonly inventPackagingMaterialFee
                   where inventPackagingMaterialFee.PackMaterialCode == inventPackagingMaterialCode.PackMaterialCode &&
                         inventPackagingMaterialFee.FromDate         <= fromDate &&
                         inventPackagingMaterialFee.ToDate           >= toDate;

            inventPackingMaterialFeeCalcTmp.PriceCur        = inventPackagingMaterialFee.PriceCur;
            inventPackingMaterialFeeCalcTmp.CurrencyCode    = inventPackagingMaterialFee.CurrencyCode;

            select sum(PackagingWeight) from inventPackagingMaterialTrans
                   where inventPackagingMaterialTrans.PackMaterialCode == inventPackagingMaterialCode.PackMaterialCode &&
                         inventPackagingMaterialTrans.FeeIsCalculated == NoYes::Yes &&
                         inventPackagingMaterialTrans.InvoiceDate >= fromDate &&
                         inventPackagingMaterialTrans.InvoiceDate <= toDate;

            inventPackingMaterialFeeCalcTmp.PackagingWeight = inventPackagingMaterialTrans.PackagingWeight;

            select sum(PackagingWeight) from inventPackagingMaterialTransPurch
                   where inventPackagingMaterialTransPurch.PackMaterialCode == inventPackagingMaterialCode.PackMaterialCode &&
                         inventPackagingMaterialTransPurch.FeeIsCalculated == NoYes::Yes &&
                         inventPackagingMaterialTransPurch.InvoiceDate >= fromDate &&
                         inventPackagingMaterialTransPurch.InvoiceDate <= toDate;

            inventPackingMaterialFeeCalcTmp.PackagingWeight += inventPackagingMaterialTransPurch.PackagingWeight;

            inventPackingMaterialFeeCalcTmp.Amount = inventPackingMaterialFeeCalcTmp.PackagingWeight * inventPackingMaterialFeeCalcTmp.PriceCur;
            inventPackingMaterialFeeCalcTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>