<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransViewerDataGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransViewerTmpDataGenerator</c> class loads customer, vendor, or both modules into a temporary table
/// for consumption by the <c>SpecTransViewer</c> form.
/// </summary>
internal final class SpecTransViewerDataGenerator
{
    private SpecTransViewerTmp viewerTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    internal SpecTransViewerTmp generate(SpecTransViewerDataGeneratorContract _contract)
    {
        this.setTmpTableToContractInstance(_contract);
        this.clearAnyExistingDataFromTmpTable();

        this.generateTransactionData(_contract.parmSearchCriteria());

        this.updateViewerWithSpecificationData();

        return viewerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTableToContractInstance</Name>
				<Source><![CDATA[
    private void setTmpTableToContractInstance(SpecTransViewerDataGeneratorContract _contract)
    {
        if (_contract.parmSpecTransTmpTableName() != '')
        {
            viewerTmp.useExistingTempDBTable(_contract.parmSpecTransTmpTableName());
        }

        viewerTmp.skipAosValidation();
        viewerTmp.skipDatabaseLog();
        viewerTmp.skipDataMethods();
        viewerTmp.skipBusinessEvents();
        viewerTmp.skipEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAnyExistingDataFromTmpTable</Name>
				<Source><![CDATA[
    private void clearAnyExistingDataFromTmpTable()
    {
        viewerTmp.skipDeleteActions();
        viewerTmp.skipDeleteMethod();

        delete_from viewerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTransactionData</Name>
				<Source><![CDATA[
    private SpecTransViewerTmp generateTransactionData(SpecTransViewerSearchCriteria _searchCriteria)
    {
        TmpDataAreaRecIdFilter companiesFilter = this.convertCompaniesToTmpTableFilter(_searchCriteria.getSelectedCompanies());

        this.copyViewDataToTmpTable(_searchCriteria, companiesFilter);

        return viewerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCompaniesToTmpTableFilter</Name>
				<Source><![CDATA[
    private TmpDataAreaRecIdFilter convertCompaniesToTmpTableFilter(Set _selectedCompanies)
    {
        TmpDataAreaRecIdFilter companiesFilter;

        SetEnumerator selectedCompaniesEnumerator = _selectedCompanies.getEnumerator();

        while (selectedCompaniesEnumerator.moveNext())
        {
            companiesFilter.RefDataAreaId = selectedCompaniesEnumerator.current();
            companiesFilter.insert();
        }

        return companiesFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyViewDataToTmpTable</Name>
				<Source><![CDATA[
    private void copyViewDataToTmpTable(
        SpecTransViewerSearchCriteria _searchCriteria,
        TmpDataAreaRecIdFilter _companiesFilter)
    {
        switch (_searchCriteria.getViewerMode())
        {
            case SpecTransViewerMode::Cust:
                this.executeInsert(this.getCustomerQuery(_searchCriteria, _companiesFilter));
                break;

            case SpecTransViewerMode::Vend:
                this.executeInsert(this.getVendorQuery(_searchCriteria, _companiesFilter));
                break;

            case SpecTransViewerMode::All:
                this.executeInsert(this.getCustomerQuery(_searchCriteria, _companiesFilter));
                this.executeInsert(this.getVendorQuery(_searchCriteria, _companiesFilter));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject getCustomerQuery(
        SpecTransViewerSearchCriteria _searchCriteria,
        TmpDataAreaRecIdFilter _companiesFilter)
    {
        SpecTransCustomerOpen specTransCustomerOpen;
        SysDaQueryObject viewerTmpQuery = new SysDaQueryObject(specTransCustomerOpen);

        viewerTmpQuery.projection()
            .add(fieldStr(SpecTransCustomerOpen, AccountNum))
            .add(fieldStr(SpecTransCustomerOpen, Voucher))
            .add(fieldStr(SpecTransCustomerOpen, TransDate))
            .add(fieldStr(SpecTransCustomerOpen, Invoice))
            .add(fieldStr(SpecTransCustomerOpen, DueDate))
            .add(fieldStr(SpecTransCustomerOpen, Company))
            .add(fieldStr(SpecTransCustomerOpen, module))
            .add(fieldStr(SpecTransCustomerOpen, Party))
            .add(fieldStr(SpecTransCustomerOpen, CustTransRecId))
            .add(fieldStr(SpecTransCustomerOpen, SpecTransRecId));

        this.applyCompanyFilter(
            viewerTmpQuery,
            _companiesFilter,
            specTransCustomerOpen,
            fieldStr(SpecTransCustomerOpen, Company));

        this.applySearchCriteria(
            viewerTmpQuery,
            _searchCriteria,
            specTransCustomerOpen,
            fieldStr(SpecTransCustomerOpen, Party),
            fieldStr(SpecTransCustomerOpen, Voucher),
            fieldStr(SpecTransCustomerOpen, TransDate),
            fieldStr(SpecTransCustomerOpen, Invoice));

        return viewerTmpQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject getVendorQuery(
        SpecTransViewerSearchCriteria _searchCriteria,
        TmpDataAreaRecIdFilter _companiesFilter)
    {
        SpecTransVendorOpen specTransVendorOpen;
        SysDaQueryObject viewerTmpQuery = new SysDaQueryObject(specTransVendorOpen);

        viewerTmpQuery.projection()
            .add(fieldStr(SpecTransVendorOpen, AccountNum))
            .add(fieldStr(SpecTransVendorOpen, Voucher))
            .add(fieldStr(SpecTransVendorOpen, TransDate))
            .add(fieldStr(SpecTransVendorOpen, Invoice))
            .add(fieldStr(SpecTransVendorOpen, DueDate))
            .add(fieldStr(SpecTransVendorOpen, Company))
            .add(fieldStr(SpecTransVendorOpen, module))
            .add(fieldStr(SpecTransVendorOpen, Party))
            .add(fieldStr(SpecTransVendorOpen, VendTransRecId))
            .add(fieldStr(SpecTransVendorOpen, SpecTransRecId));

        SysDaEqualsExpression whereExpression = viewerTmpQuery.whereClause();

        this.applyCompanyFilter(
            viewerTmpQuery,
            _companiesFilter,
            specTransVendorOpen,
            fieldStr(SpecTransVendorOpen, Company));

        this.applySearchCriteria(
            viewerTmpQuery,
            _searchCriteria,
            specTransVendorOpen,
            fieldStr(SpecTransVendorOpen, Party),
            fieldStr(SpecTransVendorOpen, Voucher),
            fieldStr(SpecTransVendorOpen, TransDate),
            fieldStr(SpecTransVendorOpen, Invoice));

        return viewerTmpQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCompanyFilter</Name>
				<Source><![CDATA[
    private void applyCompanyFilter(
        SysDaQueryObject _queryObject,
        TmpDataAreaRecIdFilter _companiesFilter,
        Common _targetTable,
        str _targetField)
    {
        SysDaQueryObject companiesFilterObject = new SysDaQueryObject(_companiesFilter);
        companiesFilterObject.joinClauseKind(SysDaJoinKind::ExistsJoin);

        companiesFilterObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_companiesFilter, fieldStr(TmpDataAreaRecIdFilter, RefDataAreaId)),
                new SysDaFieldExpression(_targetTable, _targetField)));

        _queryObject.joinClause(SysDaJoinKind::ExistsJoin, companiesFilterObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySearchCriteria</Name>
				<Source><![CDATA[
    private void applySearchCriteria(
        SysDaQueryObject _queryObject,
        SpecTransViewerSearchCriteria _searchCriteria,
        Common _targetTable,
        str PartyField,
        str VoucherField,
        str TransDateField,
        str InvoiceField)
    {
        if (_searchCriteria.getPartyRecId() != 0)
        {
            this.addWhereClause(
                _queryObject,
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_targetTable, PartyField),
                    new SysDaValueExpression(_searchCriteria.getPartyRecId())));
        }

        if (_searchCriteria.getVoucher() != '')
        {
            this.addWhereClause(
                _queryObject,
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_targetTable, VoucherField),
                    new SysDaValueExpression(_searchCriteria.getVoucher())));
        }

        if (_searchCriteria.getTransDate() != dateNull())
        {
            this.addWhereClause(
                _queryObject,
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_targetTable, TransDateField),
                    new SysDaValueExpression(_searchCriteria.getTransDate())));
        }

        if (_searchCriteria.getInvoiceId() != '')
        {
            this.addWhereClause(
                _queryObject,
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_targetTable, InvoiceField),
                    new SysDaValueExpression(_searchCriteria.getInvoiceId())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClause</Name>
				<Source><![CDATA[
    private void addWhereClause(SysDaQueryObject _queryObject, SysDaEqualsExpression _whereExpression)
    {
        if (_queryObject.whereClause())
        {
            _queryObject.whereClause().and(_whereExpression);
        }
        else
        {
            _queryObject.whereClause(_whereExpression);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInsert</Name>
				<Source><![CDATA[
    private void executeInsert(SysDaQueryObject _queryObject)
    {
        SysDaInsertObject viewerTmpInsert = new SysDaInsertObject(viewerTmp);

        viewerTmpInsert.fields()
            .add(fieldStr(SpecTransViewerTmp, CustVendAccount))
            .add(fieldStr(SpecTransViewerTmp, Voucher))
            .add(fieldStr(SpecTransViewerTmp, TransDate))
            .add(fieldStr(SpecTransViewerTmp, Invoice))
            .add(fieldStr(SpecTransViewerTmp, DueDate))
            .add(fieldStr(SpecTransViewerTmp, Company))
            .add(fieldStr(SpecTransViewerTmp, ModuleCustVend))
            .add(fieldStr(SpecTransViewerTmp, Party))
            .add(fieldStr(SpecTransViewerTmp, CustVendTransRecId))
            .add(fieldStr(SpecTransViewerTmp, SpecTransRecId));

        viewerTmpInsert.query(_queryObject);

        SysDaInsertStatement insertStatement = new SysDaInsertStatement();
        insertStatement.insert(viewerTmpInsert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateViewerWithSpecificationData</Name>
				<Source><![CDATA[
    private void updateViewerWithSpecificationData()
    {
        SpecTransViewerSpecificationIdGenerator::construct().updateViewerWithSpecificationData(viewerTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SpecTransViewerDataGenerator construct()
    {
        return new SpecTransViewerDataGenerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates data for the <c>SpecTransViewerTmp</c> table through static method call.
    /// Since the static method has no return value, the contract must provide an existing
    /// tempDB instance of the table in order for any results to be received.
    /// </summary>
    /// <param name = "_contract">The packed container of a <c>SpecTransViewerDataGeneatorContract</c> contract.</param>
    internal static void generateDataStatic(container _contract)
    {
        SpecTransViewerDataGeneratorContract contract = SpecTransViewerDataGeneratorContract::construct();
        contract.unpack(_contract);

        SpecTransViewerDataGenerator::construct().generate(contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>