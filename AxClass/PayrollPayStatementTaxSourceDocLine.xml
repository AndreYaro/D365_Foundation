<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>PayrollPayStatementTaxSourceDocLine</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementTaxSourceDocLine</c> class provides the information
///    to handle the distributions and sub-ledger journal account entries that apply to
///    pay statement tax lines.
/// </summary>
[SourceDocumentEnumLiteralClassExtensionAttribute(enumStr(SourceDocumentLine_PayrollPayStatement), enumLiteralStr(SourceDocumentLine_PayrollPayStatement, PayStatementTaxLine))]
class PayrollPayStatementTaxSourceDocLine extends PayrollPayStatementSourceDocumentLine
{
    PayrollPayStatementTaxLine  payStatementTaxLine;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>calculateSourceDocumentAmountMap</Name>
        <Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        SourceDocumentLine          sourceDocumentLineValue;
        MonetaryAmount              monetaryAmount;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        sourceDocumentLineValue = this.parmSourceDocumentLine();

        if (payStatementLine.IsEmployer == NoYes::Yes)
        {
            monetaryAmount = MonetaryAmount::PayrollCost;
        }
        else
        {
            monetaryAmount = MonetaryAmount::PayrollLiability;
        }
        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, payStatementLine.AccountingCurrencyAmount, monetaryAmount));

        return sourceDocumentAmountMap;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initializeImplementation</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects needed by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        super(_sourceDocumentLineImplementation);

        // Initialize the pay statement tax line from the base pay statement line
        select firstOnly payStatementTaxLine
            where payStatementTaxLine.RecId == payStatementLine.RecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDefaultDimension</Name>
        <Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;
        CompanyInfoRecId companyInfoRecId = CompanyInfo::current(payStatementTaxLine.dataAreaId);

        taxCodeDefaultDimension = PayrollTaxCodeDefaultDimension::findByPayrollTaxCodeLegalEntity(payStatementTaxLine.TaxCode, companyInfoRecId);

        return taxCodeDefaultDimension.DefaultDimension;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDescription</Name>
        <Source><![CDATA[
    public Description parmDescription()
    {
        return strFmt("@Payroll:Tax1", PayrollTaxCode::find(this.parmTaxCode()).Description);
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIsDocumentLineEditable</Name>
        <Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean isLineEditable = true;

        if (payStatement.RecId &&
                (payStatement.IsReversed
                || payStatement.PostedStatus != PayrollPayStatementPostedStatus::None))
        {
            // The source document line is locked for posted or reversed pay statements
            isLineEditable = false;
        }

        return isLineEditable;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmLedgerDimensionDefaultAccount</Name>
        <Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        PayrollTaxAccountingRule    taxAccountingRule;

        taxAccountingRule = PayrollTaxAccountingRule::findByTaxCodeAccountType(this.parmTaxCode(), _legalEntityRecId);

        return taxAccountingRule.LedgerDimension;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjectId</Name>
        <Source><![CDATA[
    public ProjId parmProjectId()
    {
        ProjId projectId;

        if (payStatementTaxLine.IsEmployer == NoYes::No)
        {
            // Deductions should not have project information
            projectId = '';
        }
        else
        {
            projectId = super();
        }

        return projectId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmTaxCode</Name>
        <Source><![CDATA[
    public PayrollTaxCodeRecId parmTaxCode()
    {
        return payStatementTaxLine.TaxCode;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>