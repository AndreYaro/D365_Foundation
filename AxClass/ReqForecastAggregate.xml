<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqForecastAggregate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqForecastAggregate</c> class handles aggregation of forecast.
/// </summary>
class ReqForecastAggregate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDateRangeForQuerySalesForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ReqDate range to SalesForecastQuery.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object that contains SalesForecastQuery.
    /// </param>
    /// <param name="_date">
    /// A ReqDate that will be used as a range value.
    /// </param>
    protected void addDateRangeForQuerySalesForecast(Query _query, ReqDate _date)
    {
        _query.dataSourceTable(tableNum(ReqTrans)).addRange(fieldNum(ReqTrans, ReqDate)).value(queryValue(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateDemandForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates demand forecast.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that contains master planning run data.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_validateOnly">
    /// A boolean value that specifies whether the validation of the aggregated forecast's quantities should be done
    /// without persisting aggregated values in the database.
    /// </param>
    public void aggregateDemandForecast(ReqPlanData _reqPlanData, ReqSetupDim _setupDim, boolean _validateOnly = false)
    {
        Query       salesForecastQuery;
        Query       salesForecastGroupQuery;
        QueryRun    queryRun;
        ReqTrans    reqTrans;
        Map         mapPeriod;

        if (_setupDim.reqGroupCache().CustForecastIncludedInOverallForecast == false)
        {
            return;
        }

        mapPeriod = new Map(Types::String,Types::Real);

        salesForecastQuery = this.newQuerySalesForecastOnlyPerCust(_reqPlanData.reqTransCache(), _setupDim);

        //Aggregate values from all forecasts specific for customer
        queryRun = new QueryRun(salesForecastQuery);
        while (queryRun.next())
        {
            reqTrans    = queryRun.get(tableNum(ReqTrans));

            //Aggregate value subtracted from customer group's forecasts
            this.mapPeriodAddValue(
                mapPeriod,
                this.getMapPeriodKey(reqTrans.ReqDate, reqTrans.CustGroupId),
                reqTrans.Qty);

            //Aggregate value subtracted from overall forecasts
            this.mapPeriodAddValue(
                mapPeriod,
                this.getMapPeriodKey(reqTrans.ReqDate, ''),
                reqTrans.Qty);
        }

        salesForecastGroupQuery = this.newQuerySalesForecastOnlyPerCustGroup(_reqPlanData.reqTransCache(), _setupDim, !_validateOnly);

        //For all forecasts specific for customer group
        queryRun = new QueryRun(salesForecastGroupQuery);
        while (queryRun.next())
        {
            reqTrans    = queryRun.get(tableNum(ReqTrans));

            //Forecast per customer group quantity should be reduced by already aggregated value
            this.reduceReqTransQty(reqTrans, mapPeriod, _reqPlanData, true, _validateOnly);

            //Aggregate value subtracted from overall forecasts
            this.mapPeriodAddValue(
                mapPeriod,
                this.getMapPeriodKey(reqTrans.ReqDate, ''),
                reqTrans.Qty);
        }

        //Overall forecast quantity should be reduced by already aggregated value
        this.reduceOverallDemandForecast(mapPeriod, _reqPlanData, _setupDim, _validateOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitAggregationWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Emits warning regarding demand forecasts aggregated quantity.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> object which quantity will be updated.
    /// </param>
    private void emitAggregationWarning(ReqTrans _reqTrans)
    {
        if (_reqTrans.CustGroupId == '')
        {
            warning(
                strFmt("@DMP1352",
                _reqTrans.ItemId,
                _reqTrans.ReqDate,
                abs(_reqTrans.OriginalQuantity),
                _reqTrans.Qty));
        }
        else
        {
            warning(
                strFmt("@DMP1353",
                _reqTrans.ItemId,
                _reqTrans.CustGroupId,
                _reqTrans.ReqDate,
                abs(_reqTrans.OriginalQuantity),
                _reqTrans.Qty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustGroupIdFromMapPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>CustGroupId</c> extracted from map key.
    /// </summary>
    /// <param name="_mapPeriodKey">
    /// A string that contains map key.
    /// </param>
    /// <returns>
    /// A <c>CustGroupId</c> extracted from map key.
    /// </returns>
    protected CustGroupId getCustGroupIdFromMapPeriodKey(str _mapPeriodKey)
    {
        int firstDelimiterPos;
        CustGroupId custGroupId;

        firstDelimiterPos = strFind(_mapPeriodKey, num2char(ReqForecastReduce::mapPeriodKeySeparatorAsciiCode), 1, strLen(_mapPeriodKey));
        custGroupId = subStr(_mapPeriodKey, firstDelimiterPos + 1, strLen(_mapPeriodKey) - firstDelimiterPos);

        return custGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns mapPeriod key.
    /// </summary>
    /// <param name="_keyDate">
    /// A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification.
    /// </param>
    /// <returns>
    /// A string key used for mapPeriod that contains the reduction period start date and the customer group id.
    /// </returns>
    protected str getMapPeriodKey(date _keyDate, CustGroupId _customerGroupId)
    {
        str dateStr;

        dateStr = date2Str(
            _keyDate,
            ReqForecastReduce::mapPeriodKeyDateSequence,
            DateDay::Digits2,

            DateSeparator::Hyphen,
            DateMonth::Digits2,
            DateSeparator::Hyphen,

            DateYear::Digits4,

            DateFlags::None);

        return strFmt('%1%2%3', dateStr, num2char(ReqForecastReduce::mapPeriodKeySeparatorAsciiCode), _customerGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqDateFromMapPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>ReqDate</c> extracted from map key.
    /// </summary>
    /// <param name="_mapPeriodKey">
    /// A string that contains map key.
    /// </param>
    /// <returns>
    /// A <c>ReqDate</c> extracted from map key.
    /// </returns>
    protected ReqDate getReqDateFromMapPeriodKey(str _mapPeriodKey)
    {
        ReqDate result;
        int firstDelimiterPos;
        str dateStr;

        firstDelimiterPos = strFind(_mapPeriodKey, num2char(ReqForecastReduce::mapPeriodKeySeparatorAsciiCode), 1, strLen(_mapPeriodKey));
        dateStr = subStr(_mapPeriodKey, 1, firstDelimiterPos - 1);

        result = str2Date(dateStr, ReqForecastReduce::mapPeriodKeyDateSequence);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodAddValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds value to the the map that contains the aggregation dates and quantities.
    /// </summary>
    /// <param name="_mapPeriod">
    /// A <c>Map</c> instance that contains aggregation dates and quantities.
    /// </param>
    /// <param name="_mapKey">
    /// A string that contains the mapKey of the reduction period.
    /// </param>
    /// <param name="_addValue">
    /// A real value that should be added to the reduction value.
    /// </param>
    protected void mapPeriodAddValue(
        Map         _mapPeriod,
        str         _mapKey,
        real        _addValue)
    {
        if (_addValue == 0)
        {
            return;
        }

        if (_mapPeriod.exists(_mapKey))
        {
            _mapPeriod.insert(_mapKey, _mapPeriod.lookup(_mapKey) + _addValue);
        }
        else
        {
            _mapPeriod.insert(_mapKey, _addValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuerySalesForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for the <c>ReqTrans</c> table containing all Sales Forecast for the currenty processed item.
    /// </summary>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item.
    /// </returns>
    protected Query newQuerySalesForecast(ReqTransCache _reqTransCache, ReqSetupDim _setupDim)
    {
        Query                           salesForecastsQuery;
        QueryBuildDataSource            ds;

        salesForecastsQuery = _reqTransCache.issuesQuery(_setupDim.setup().itemId(), _setupDim.parmCovInventDimId());
        ds = salesForecastsQuery.dataSourceTable(tableNum(ReqTrans));

        ds.addRange(fieldNum(ReqTrans, RefType)).value(queryValue(ReqRefType::SalesForecast));

        return salesForecastsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuerySalesForecastOnlyOverall</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with no CustomerAccountId and no CustGroupId set.
    /// </summary>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that specifies whether the query will be used to update values in the database.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with CustomerAccountId and CustGroupId set.
    /// </returns>
    protected Query newQuerySalesForecastOnlyOverall(ReqTransCache _reqTransCache, ReqSetupDim _setupDim, boolean _forUpdate)
    {
        Query                           salesForecastsQuery;
        QueryBuildDataSource            ds;

        salesForecastsQuery = this.newQuerySalesForecast(_reqTransCache, _setupDim);

        ds = salesForecastsQuery.dataSourceTable(tableNum(ReqTrans));

        ds.addRange(fieldNum(ReqTrans, CustAccountId)).value(SysQuery::valueEmptyString());
        ds.addRange(fieldNum(ReqTrans, CustGroupId)).value(SysQuery::valueEmptyString());

        if (_forUpdate)
        {
            salesForecastsQuery.userUpdate(true);
            salesForecastsQuery.dataSourceTable(tableNum(ReqTrans)).update(true);
        }

        return salesForecastsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuerySalesForecastOnlyPerCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with CustomerAccountId and CustGroupId set.
    /// </summary>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with CustomerAccountId and CustGroupId set.
    /// </returns>
    protected Query newQuerySalesForecastOnlyPerCust(ReqTransCache _reqTransCache, ReqSetupDim _setupDim)
    {
        Query                           salesForecastsQuery;
        QueryBuildDataSource            ds;

        salesForecastsQuery = this.newQuerySalesForecast(_reqTransCache, _setupDim);

        ds = salesForecastsQuery.dataSourceTable(tableNum(ReqTrans));

        ds.addRange(fieldNum(ReqTrans, CustAccountId)).value(SysQuery::valueNotEmptyString());
        ds.addRange(fieldNum(ReqTrans, CustGroupId)).value(SysQuery::valueNotEmptyString());

        return salesForecastsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuerySalesForecastOnlyPerCustGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with CustGroupId set, but with no CustAccountId set.
    /// </summary>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that specifies whether the query will be used to update values in the database.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object for the <c>ReqTrans</c> table containing Sales Forecast for the currenty processed item
    /// and with CustGroupId set, but with no CustAccountId set.
    /// </returns>
    protected Query newQuerySalesForecastOnlyPerCustGroup(ReqTransCache _reqTransCache, ReqSetupDim _setupDim, boolean _forUpdate)
    {
        Query                           salesForecastsQuery;
        QueryBuildDataSource            ds;

        salesForecastsQuery = this.newQuerySalesForecast(_reqTransCache, _setupDim);

        ds = salesForecastsQuery.dataSourceTable(tableNum(ReqTrans));

        ds.addRange(fieldNum(ReqTrans, CustAccountId)).value(SysQuery::valueEmptyString());
        ds.addRange(fieldNum(ReqTrans, CustGroupId)).value(SysQuery::valueNotEmptyString());

        if (_forUpdate)
        {
            salesForecastsQuery.userUpdate(true);
            salesForecastsQuery.dataSourceTable(tableNum(ReqTrans)).update(true);
        }

        return salesForecastsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOverallDemandForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces Overall forecast quantity by already aggregated values.
    /// </summary>
    /// <param name="_mapPeriod">
    /// A <c>Map</c> object that contains aggregated value that should be subtracted from <c>ReqTrans</c> table record.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that contains master planning run data.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_validateOnly">
    /// A boolean value that specifies whether the validation of the aggregated forecast's quantities should be done
    /// without persisting aggregated values in the database.
    /// </param>
    protected void reduceOverallDemandForecast(Map _mapPeriod, ReqPlanData _reqPlanData, ReqSetupDim _setupDim, boolean _validateOnly = false)
    {
        Query           salesForecastQuery;
        QueryRun        queryRun;
        MapEnumerator   me;
        ReqDate         reqDate;
        ReqTrans        reqTrans;

        if (! _mapPeriod)
        {
            return;
        }

        if (! _mapPeriod.elements())
        {
            return;
        }

        me = _mapPeriod.getEnumerator();
        while (me.moveNext())
        {
            //Only for values aggregated for overall forecast
            if (this.getCustGroupIdFromMapPeriodKey(me.currentKey()) == '')
            {
                reqDate = this.getReqDateFromMapPeriodKey(me.currentKey());

                salesForecastQuery  = this.newQuerySalesForecastOnlyOverall(_reqPlanData.reqTransCache(), _setupDim, !_validateOnly);
                this.addDateRangeForQuerySalesForecast(salesForecastQuery, reqDate);

                queryRun = new QueryRun(salesForecastQuery);
                while (queryRun.next())
                {
                    reqTrans    = queryRun.get(tableNum(ReqTrans));

                    //Overall forecast quantity should be reduced by already aggregated value
                    this.reduceReqTransQty(reqTrans, _mapPeriod, _reqPlanData, false, _validateOnly);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceReqTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces <c>ReqTrans</c> table record quantity based on the aggregated value from mapPeriod.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> object which quantity will be updated.
    /// </param>
    /// <param name="_mapPeriod">
    /// A <c>Map</c> object that contains aggregated value that should be subtracted from <c>ReqTrans</c> table record.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that contains master planning run data.
    /// </param>
    /// <param name="_forCustomerGroup">
    /// A boolean value saying if subtracted value should be taken for the customer group if <c>true</c>
    /// or for the overall forecast if <c>false</c>.
    /// </param>
    /// <param name="_validateOnly">
    /// A boolean value that specifies whether the validation of the aggregated forecast's quantities should be done
    /// without persisting aggregated values in the database.
    /// </param>
    protected void reduceReqTransQty(ReqTrans _reqTrans, Map _mapPeriod, ReqPlanData _reqPlanData, boolean _forCustomerGroup, boolean _validateOnly = false)
    {
        str mapKey;

        if (! _mapPeriod)
        {
            return;
        }

        if (! _mapPeriod.elements())
        {
            return;
        }

        mapKey = this.getMapPeriodKey(_reqTrans.ReqDate, _forCustomerGroup?_reqTrans.CustGroupId:'');
        if (_mapPeriod.exists(mapKey))
        {
            _reqTrans.Qty -= _mapPeriod.lookup(mapKey);

            //Demand forecast should not have positive quantity
            if (_reqTrans.Qty > 0)
            {
                if (_validateOnly)
                {
                    this.emitAggregationWarning(_reqTrans);
                }

                _reqTrans.Qty = 0;
            }

            if (!_validateOnly)
            {
                _reqTrans.update(_reqPlanData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqForecastAggregate</c> class.
    /// </summary>
    /// <returns>
    ///    An <c>ReqForecastAggregate</c> object.
    /// </returns>
    public static ReqForecastAggregate construct()
    {
        return new ReqForecastAggregate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>