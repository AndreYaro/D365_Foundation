<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsistencyCheckLoadWeightCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSConsistencyCheckLoadWeightCalculation</c> class recalculates the weight fields on loads and load lines.
/// </summary>
internal final class WHSConsistencyCheckLoadWeightCalculation extends SysConsistencyCheck
{
    private CheckFix    customCheckFix;
    private boolean     suppressWarnings;
    private DialogField dialogLoads;
    private DialogField dialogItems;
    private DialogField dialogAlwaysRecalculateWheightOnLoads;
    private DialogField dialogAllowOverrideWeightOnLoadLines;

    private NoYes       alwaysRecalculateWheightOnLoads;
    private NoYes       allowOverrideWeightOnLoadLines;
    private str         loads;
    private str         items;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        customCheckFix,
        alwaysRecalculateWheightOnLoads,
        allowOverrideWeightOnLoadLines,
        loads,
        items
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSuppressWarnings</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmSuppressWarnings(boolean _suppressWarnings = suppressWarnings)
    {
        suppressWarnings = _suppressWarnings;
        return suppressWarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixWeightOnLoad</Name>
				<Source><![CDATA[
    private void checkFixWeightOnLoad(WHSLoadTable _loadTable, Set _linesToCheck, CheckFix _checkFix)
    {
        #OCCRetryCount

        if (_loadTable.LoadId)
        {
            setPrefix(strFmt("@WAX:WHSLoadWeightCalculationLoad", _loadTable.LoadId));

            try
            {
                if (_checkFix == CheckFix::Fix)
                {
                    changecompany(_loadTable.DataAreaId)
                    {
                        ttsbegin;
                
                        Set correctedLoadLines = this.fixWeightOnLoadLines(_linesToCheck);

                        WHSLoadLine actualLoadLine;

                        WHSLoadNetWeight loadNetWeight = 0;
                        WHSLoadWeight loadWeight = 0;
                        TMSSystemTareWeight systemTareWeight = 0;

                        boolean additionalLinesFixed = false;

                        while select InventQty, ItemNetWeight, ItemTareWeight, ItemId from actualLoadLine
                            where actualLoadLine.LoadId == _loadTable.LoadId
                        {
                            ItemNetWeight itemNetWeight = actualLoadLine.ItemNetWeight;
                            ItemTaraWeight itemTareWeight = actualLoadLine.ItemTareWeight;

                            if (!correctedLoadLines.in(actualLoadLine.RecId) &&
                                this.allowSetWeightOnLoadLine(actualLoadLine))
                            {
                                InventTable item = actualLoadLine.inventTable();

                                if (this.weightDifferentThanItem(actualLoadLine, item))
                                {
                                    WHSConsistencyCheckLoadWeightCalculationElement lineElement = this.initializeLoadWeightCalculationElement(actualLoadLine, item);

                                    this.fixWeightOnLoadLine(lineElement);

                                    itemNetWeight = lineElement.itemNetWeight;
                                    itemTareWeight = lineElement.itemTareWeight;

                                    additionalLinesFixed = true;
                                }
                            }

                            loadNetWeight   += itemNetWeight * actualLoadLine.InventQty;
                            loadWeight      += (itemNetWeight + itemTareWeight) * actualLoadLine.InventQty;
                            systemTareWeight+= itemTareWeight * actualLoadLine.InventQty;
                        }

                        WHSLoadTable actualLoadTable = WHSLoadTable::find(_loadTable.LoadId, true);
                        actualLoadTable.LoadNetWeight   = loadNetWeight;
                        actualLoadTable.LoadWeight      = loadWeight;
                        actualLoadTable.SystemTareWeight= systemTareWeight;
                        actualLoadTable.update();

                        if (additionalLinesFixed && !suppressWarnings)
                        {
                            warning(strFmt("@WAX:WHSLoadWeightCalculationConsistencyCheckWeightOnLinesZeroWarning", actualLoadTable.LoadId));
                        }

                        ttscommit;
                    }

                    if (!suppressWarnings)
                    {
                        warning("@WAX:WHSLoadWeightCalculationConsistencyCheckFixWarning");
                    }
                }
                else
                {
                    if (!suppressWarnings)
                    {
                        warning("@WAX:WHSLoadWeightCalculationConsistencyCheckFoundWarning");
                    }
                }
            }
            catch (Exception::Error)
            {
                error("@SYS18447");
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                // Using the optimistic pattern - recovery without rollback of transaction
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                retry;
            }
            catch (Exception::DuplicateKeyException)
            {
                // Using the optimistic pattern - recovery without rollback of transaction
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }

                retry;
            }
            catch
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixWeightOnLoadLines</Name>
				<Source><![CDATA[
    private Set fixWeightOnLoadLines(Set _linesToCheck)
    {
        SetEnumerator linesEnumator = _linesToCheck.getEnumerator();
        Set correctedLoadLines = new Set(Types::Int64);

        while (linesEnumator.moveNext())
        {
            WHSConsistencyCheckLoadWeightCalculationElement lineElement = linesEnumator.current();

            WHSLoadLine actualLoadLine = this.fixWeightOnLoadLine(lineElement);

            correctedLoadLines.add(actualLoadLine.RecId);
        }

        return correctedLoadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixWeightOnLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine fixWeightOnLoadLine(WHSConsistencyCheckLoadWeightCalculationElement _lineElement)
    {
        WHSLoadLine actualLoadLine = WHSLoadLine::findbyRecId(_lineElement.loadLine, true);

        actualLoadLine.ItemNetWeight = _lineElement.itemNetWeight;
        actualLoadLine.ItemTareWeight = _lineElement.itemTareWeight;
        actualLoadLine.update();

        return actualLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLoadWeightCalculationElement</Name>
				<Source><![CDATA[
    private WHSConsistencyCheckLoadWeightCalculationElement initializeLoadWeightCalculationElement(WHSLoadLine _loadLine, InventTable _inventTable)
    {
        WHSConsistencyCheckLoadWeightCalculationElement lineElement = WHSConsistencyCheckLoadWeightCalculationElement::construct();

        lineElement.loadLine = _loadLine.RecId;
        lineElement.itemNetWeight = _inventTable.NetWeight;
        lineElement.itemTareWeight = _inventTable.TaraWeight;

        return lineElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixWeightOnLoadAndLines</Name>
				<Source><![CDATA[
    private void checkFixWeightOnLoadAndLines(CheckFix _checkFix)
    {
        Query loadQuery = new Query(queryStr(WHSLoad));

        QueryBuildDataSource loadDataSource = loadQuery.dataSourceTable(tableNum(WHSLoadTable));
        loadDataSource.addSortField(fieldNum(WHSLoadTable, LoadId));
        loadDataSource.addSortField(fieldNum(WHSLoadTable, DataAreaId));
        loadDataSource.addRange(fieldNum(WHSLoadTable, LoadStatus)).value(queryValue(WHSLoadStatus::Open));
        loadDataSource.addRange(fieldNum(WHSLoadTable, LoadStatus)).value(queryValue(WHSLoadStatus::Waved));
        loadDataSource.addRange(fieldNum(WHSLoadTable, LoadStatus)).value(queryValue(WHSLoadStatus::InProcess));
        loadDataSource.addRange(fieldNum(WHSLoadTable, LoadStatus)).value(queryValue(WHSLoadStatus::Posted));

        if (loads)
        {
            loadDataSource.addRange(fieldNum(WHSLoadTable, LoadId)).value(queryValue(loads));
        }

        if (items)
        {
            QueryBuildDataSource loadLineDataSource = loadQuery.dataSourceTable(tableNum(WHSLoadLine));
            loadLineDataSource.addRange(fieldNum(WHSLoadLine, ItemId)).value(queryValue(items));
        }

        QueryRun loadQueryRun = new QueryRun(loadQuery);

        setPrefix("@WAX:WHSLoadWeightCalculationConsistencyCheckPrefix");

        WHSLoadTable lastLoadTable;
        Set linesToCheck = new Set(Types::Class);

        while (loadQueryRun.next())
        {
            if (loadQueryRun.changed(tableNum(WHSLoadTable)))
            {
                if (linesToCheck.elements() ||
                    alwaysRecalculateWheightOnLoads)
                {
                    this.checkFixWeightOnLoad(lastLoadTable, linesToCheck, _checkFix);

                    linesToCheck = new Set(Types::Class);
                }

                lastLoadTable.data(loadQueryRun.get(tableNum(WHSLoadTable)));
            }

            WHSLoadLine loadLine = loadQueryRun.get(tableNum(WHSLoadLine));

            InventTable item = loadLine.inventTable();

            if (this.allowSetWeightOnLoadLine(loadLine) &&
                this.weightDifferentThanItem(loadLine, item))
            {
                linesToCheck.add(this.initializeLoadWeightCalculationElement(loadLine, item));
            }
        }

        if (linesToCheck.elements() ||
            alwaysRecalculateWheightOnLoads)
        {
            this.checkFixWeightOnLoad(lastLoadTable, linesToCheck, _checkFix);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSetWeightOnLoadLine</Name>
				<Source><![CDATA[
    private boolean allowSetWeightOnLoadLine(WHSLoadLine _loadLine)
    {
        return allowOverrideWeightOnLoadLines || (!_loadLine.ItemNetWeight && !_loadLine.ItemTareWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightDifferentThanItem</Name>
				<Source><![CDATA[
    private boolean weightDifferentThanItem(WHSLoadLine _loadLine, InventTable _inventTable)
    {
        return (_inventTable.NetWeight || _inventTable.TaraWeight) &&
            (_inventTable.NetWeight != _loadLine.ItemNetWeight || _inventTable.TaraWeight != _loadLine.ItemTareWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(WHSandTMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(WHSConsistencyCheckLoadWeightCalculation::description(), this);

        dialogLoads = dialog.addField(extendedTypeStr(WHSLoadId));
        dialogItems = dialog.addField(extendedTypeStr(ItemId));
        dialogAlwaysRecalculateWheightOnLoads = dialog.addField(extendedTypeStr(WHSLoadRecalculationWeight));
        dialogAllowOverrideWeightOnLoadLines = dialog.addField(extendedTypeStr(WHSLoadLineAllowOverwriteWeight));

        dialogLoads.value(loads);
        dialogItems.value(items);
        dialogAllowOverrideWeightOnLoadLines.value(allowOverrideWeightOnLoadLines);
        dialogAlwaysRecalculateWheightOnLoads.value(alwaysRecalculateWheightOnLoads);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean getFromDialog()
    {
        loads = dialogLoads.value();
        items = dialogItems.value();
        allowOverrideWeightOnLoadLines = dialogAllowOverrideWeightOnLoadLines.value();
        alwaysRecalculateWheightOnLoads = dialogAlwaysRecalculateWheightOnLoads.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Integer executionOrder()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomCheckFix</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal CheckFix parmCustomCheckFix(CheckFix _customCheckFix = customCheckFix)
    {
        if (prmisDefault(_customCheckFix))
        {
            return consistencyCheckJob ? consistencyCheckJob.parmCheckFix() : customCheckFix;
        }

        if (consistencyCheckJob)
        {
            consistencyCheckJob.parmCheckFix(_customCheckFix);
        }
        else
        {
            customCheckFix = _customCheckFix;
        }

        return _customCheckFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoads</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmLoads(str _loads = loads)
    {
        loads = _loads;

        return loads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItems</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmItems(str _items = items)
    {
        items = _items;

        return items;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlwaysRecalculateWheightOnLoads</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadRecalculationWeight parmAlwaysRecalculateWheightOnLoads(WHSLoadRecalculationWeight _alwaysRecalculateWheightOnLoads = alwaysRecalculateWheightOnLoads)
    {
        alwaysRecalculateWheightOnLoads = _alwaysRecalculateWheightOnLoads;

        return alwaysRecalculateWheightOnLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowOverrideWeightOnLoadLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadLineAllowOverwriteWeight parmAllowOverrideWeightOnLoadLines(WHSLoadLineAllowOverwriteWeight _allowOverrideWeightOnLoadLines = allowOverrideWeightOnLoadLines)
    {
        allowOverrideWeightOnLoadLines = _allowOverrideWeightOnLoadLines;

        return allowOverrideWeightOnLoadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        this.checkFixWeightOnLoadAndLines(this.parmCustomCheckFix());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean showInTree()
    {
        return isConfigurationKeyEnabled(configurationKeyNum(WHSandTMS));
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassId treeParentClassId()
    {
        return classNum(WHSConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

        default :
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@WAX:WHSLoadWeightCalculationConsistencyCheckDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static HelpTxt helpText()
    {
        return "@WAX:WHSLoadWeightCalculationConsistencyCheckHelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSConsistencyCheckLoadWeightCalculation construct()
    {
        return new WHSConsistencyCheckLoadWeightCalculation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>