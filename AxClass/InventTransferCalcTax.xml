<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventTransferCalcTax</c> class that abstracts the access of transfer order tables for tax calculation.
/// </summary>
public abstract class InventTransferCalcTax extends TradeCalcTax
{
    public Common source;
    private InventTransferTotals inventTransferTotals;
    protected InventTransferUpdateType updateType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>InventTransferCalcTax</c> object.
    /// </summary>
    /// <param name="_record">
    ///     The source record.
    /// </param>
    public void new(Common  _record)
    {
        source = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferCalcTax</c> object.
    /// </summary>
    /// <param name="_common">
    ///     The record used to initialize the <c>InventTransferCalcTax</c> class.
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferCalcTax</c>.
    /// </returns>
    [Replaceable]
    public static InventTransferCalcTax construct(Common _common)
    {
        switch (_common.TableId)
        {
            case tablenum(InventTransferParmTable):
                return new InventTransferCalcTax_Parm(_common);
            case tablenum(InventTransferTable):
                return new InventTransferCalcTax_Order(_common);
            case tablenum(InventTransferJour):
                return new InventTransferCalcTax_Invoice(_common);
            default:
                throw error(strfmt("@SYS19306",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always false.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes for transfer order.
    /// </summary>
    /// <param name="_inventTransferTotals">
    ///     An instance of the <c>InventTransferTotals</c> class that is used to obtain totals.
    /// </param>
    /// <returns>
    ///     Total taxes.
    /// </returns>
    [Replaceable]
    public TaxAmountCur calcTax(TradeTotalsBase _inventTransferTotals)
    {
        inventTransferTotals = _inventTransferTotals as InventTransferTotals;
        updateType = inventTransferTotals.getUpdateType();

        TaxInventTransfer taxTransfer = TaxInventTransfer::construct(this);
        TaxAmountCur amountCur = taxTransfer.calc(updateType);

        this.tax(taxTransfer);

        if (this.getUpdateType() == InventTransferUpdateType::Receive)
        {
            return amountCur;
        }

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tableId of the source record.
    /// </summary>
    /// <returns>
    ///     The tableId of the source record.
    /// </returns>
    public TableId tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the recId of the source record.
    /// </summary>
    /// <returns>
    ///     The recId of the source record.
    /// </returns>
    public RecId recId()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the source record.
    /// </summary>
    /// <returns>The source record.</returns>
    public Common getSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order update type.
    /// </summary>
    /// <returns>
    ///     The transfer order update type.
    /// </returns>
    /// <remarks>
    ///     This method is overriden in the sub classes.
    /// </remarks>
    public InventTransferUpdateType getUpdateType()
    {
        if (SysDictField::isFieldMapped(tableStr(InventTransferMap), tableId2Name(source.TableId), fieldStr(InventTransferMap, UpdateType)))
        {
            InventTransferMap inventMap = source;
            // Used for determine counterparty VAT ID, updateType can be receive while inventMap.UpdateType is shipment.
            if (inventMap.UpdateType == InventTransferUpdateType::Shipment && updateType == InventTransferUpdateType::Shipment)
            {
                return InventTransferUpdateType::Shipment;
            }
            else if (inventMap.UpdateType == InventTransferUpdateType::Receive || updateType == InventTransferUpdateType::Receive)
            {
                return InventTransferUpdateType::Receive;
            }
        }
        return InventTransferUpdateType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets delivery date.
    /// </summary>
    /// <returns>
    ///     The delivery date.
    /// </returns>
    public DlvDate deliveryDate()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document date.
    /// </summary>
    /// <returns>
    ///     The document date.
    /// </returns>
    public DocumentDate documentDate()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container used to pass various data between methods.
    /// </summary>
    /// <returns>
    /// A container containing various data.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W vatDate;
        DocumentDate documentDate;
        PlCustVendName custVendName;
        VATNum vatNum;
        Addressing addressing;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        IntraComVATDueDate_W useIntrComVatDate;

        // derived class is expected to override and return actual value.
        return [
            vatDate,
            documentDate,
            custVendName,
            vatNum,
            addressing,
            taxPeriodPaymentCode,
            useIntrComVatDate
        ];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>