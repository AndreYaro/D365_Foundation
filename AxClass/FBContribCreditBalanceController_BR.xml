<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBContribCreditBalanceController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBContribCreditBalanceController_BR
{
    FBTaxAssessment_BR                      fbTaxAssessment;
    FBBookingPeriod_BR                      fbBookingPeriod;
    FBTaxAssessmentWhtBalanceControl_BR     fbContribWhtCreditControl;
    FBContribCreditBalanceControl_BR        fbContribCreditControl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>distributeRemainingCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method distributes the debit amount between the credits from
    /// previous or current period.
    /// Both credit and wht credit are used according to a specified order.
    /// </summary>
    public void distributeRemainingCredit()
    {
        FBTaxAssessmentCalculatorPISCOFINS_BR   taxAssessmentCalculator;
        FBTaxWithholdTransCreditDetail_BR       recordFbTaxWithholdCreditDetail;
        FBContribCreditControlDetail_BR         recordFbContribCreditDetail;

        taxAssessmentCalculator = FBTaxAssessmentCalculator_BR::construct(fbTaxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;
        taxAssessmentCalculator.calculate();

        this.resetAllCreditDistribution();

        // Non cumulative section
        if (taxAssessmentCalculator.getNonCumulativeTaxAmountToPay() == 0) // Credit scenario
        {
            // Use the credits amounts following the calculator distribution
            fbContribWhtCreditControl.distributeRemaningDebitPerDetail(taxAssessmentCalculator.getUsedNonCumWhtCreditFromPreviousPeriod(), FBContribAssessmentRegimen_BR::NonCumulative);
            fbContribWhtCreditControl.distributeRemaningDebitPerDetail(taxAssessmentCalculator.getUsedNonCumWhtCreditFromCurrentPeriod(), FBContribAssessmentRegimen_BR::NonCumulative);
            fbContribCreditControl.distributeRemaningDebitPerDetail(taxAssessmentCalculator.getUsedNonCumCreditsFromPreviousPeriod(), FBContribAssessmentRegimen_BR::NonCumulative);
            fbContribCreditControl.distributeRemaningDebitPerDetail(taxAssessmentCalculator.getUsedNonCumCreditsFromCurrentPeriod(), FBContribAssessmentRegimen_BR::NonCumulative);
        }
        else // Debit scenario
        {
            // Use all the remaining amount from both wht credit and other one
            this.useAllRemainingCredit(recordFbTaxWithholdCreditDetail, fbContribWhtCreditControl, FBContribAssessmentRegimen_BR::NonCumulative);
            this.useAllRemainingCredit(recordFbContribCreditDetail, fbContribCreditControl, FBContribAssessmentRegimen_BR::NonCumulative);
        }

        // Cumulative section
        if (taxAssessmentCalculator.getCumulativeTaxAmountToPay() == 0) // Credit scenario
        {
            fbContribWhtCreditControl.distributeRemaningDebitPerDetail(taxAssessmentCalculator.getCumulativeWithholdings(), FBContribAssessmentRegimen_BR::Cumulative);
        }
        else // Debit scenario
        {
            this.useAllRemainingCredit(recordFbTaxWithholdCreditDetail, fbContribWhtCreditControl, FBContribAssessmentRegimen_BR::Cumulative);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FBContribCreditBalanceController_BR</c> class.
    /// </summary>
    /// <param name="_fbTaxAssessment">
    /// A <c>FBTaxAssessment_BR</c> table record.
    /// </param>
    protected void new(FBTaxAssessment_BR _fbTaxAssessment)
    {
        fbTaxAssessment             = _fbTaxAssessment;
        fbBookingPeriod             = fbTaxAssessment.bookingPeriod();
        fbContribWhtCreditControl   = FBTaxAssessmentWhtBalanceControl_BR::construct(fbTaxAssessment);
        fbContribCreditControl      = FBContribCreditBalanceControl_BR::construct(fbTaxAssessment);
    }
]]></Source>
			</Method>
			<Method>
				<Name>resetAllCreditDistribution</Name>
				<Source><![CDATA[
    private void resetAllCreditDistribution()
    {
        fbContribWhtCreditControl.resetCreditDistribution();
        fbContribCreditControl.resetCreditDistribution();
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the credit balance amount from previous period.
    /// Both withholding tax and credit are updated.
    /// </summary>
    public void updateCreditBalanceFromPreviousPeriod()
    {
        fbContribWhtCreditControl.updateCreditFromPreviousPeriod();
        fbContribCreditControl.updateCreditFromPreviousPeriod();
    }
]]></Source>
			</Method>
			<Method>
				<Name>useAllRemainingCredit</Name>
				<Source><![CDATA[
    private void useAllRemainingCredit( FBContribCreditDetailMap_BR             _currentRecord,
                                        FBContribCreditBalanceControlBase_BR    _currentBalanceControl,
                                        FBContribAssessmentRegimen_BR           _assessmentRegimen)
    {
        FBContribCreditDetailMap_BR fbContribCreditDetailMap;

        fbContribCreditDetailMap = _currentRecord;

        while select fbContribCreditDetailMap
                where   fbContribCreditDetailMap.FBTaxAssessment_BR == fbTaxAssessment.RecId
                    &&  fbContribCreditDetailMap.AssessmentRegimen  == _assessmentRegimen
                    && (fbContribCreditDetailMap.CreditBalance      != 0
                    || (fbContribCreditDetailMap.PeriodMonth        == fbBookingPeriod.PeriodMonth
                    &&  fbContribCreditDetailMap.PeriodYear         == fbBookingPeriod.PeriodYear))
        {
            ttsBegin;

            // The remaining amount is totally used
            fbContribCreditDetailMap.selectForUpdate(true);

            fbContribCreditDetailMap.CurrentCreditDeducted  = fbContribCreditDetailMap.CreditBalance;
            fbContribCreditDetailMap.CreditBalance          = 0;
            fbContribCreditDetailMap.update();

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBContribCreditBalanceController_BR construct(FBTaxAssessment_BR _fbTaxAssessment)
    {
        return new FBContribCreditBalanceController_BR(_fbTaxAssessment);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>