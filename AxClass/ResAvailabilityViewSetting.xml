<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResAvailabilityViewSetting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource availability view setting
/// </summary>
public class ResAvailabilityViewSetting
{
    private UserId currentUser;
    private utcdatetime startDateTime;
    private utcdatetime endDateTime;
    private AVTimeframeType timescale;
    private boolean showScheduleCapacity;
    private str capacityDesription;
    private boolean showScheduleDescription;
    private ResCapacityAggregation aggregation;
    private ResUserSettingCoverage coverage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>startDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets Start date/time
    /// </summary>
    /// <param name = "_startDateTime">Date/time value</param>
    /// <returns>Start date/time value</returns>
    public utcdatetime startDateTime(utcdatetime _startDateTime = startDateTime)
    {
        startDateTime = _startDateTime;
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets End date/time
    /// </summary>
    /// <param name = "_endDateTime">Date/time value</param>
    /// <returns>End date/time value</returns>
    public utcdatetime endDateTime(utcdatetime _endDateTime = endDateTime)
    {
        endDateTime = _endDateTime;
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timescale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the timescale of the view
    /// </summary>
    /// <param name = "_timescale">Enum value</param>
    /// <returns><c>AVTimeframeType</c> enum value</returns>
    public AVTimeframeType timescale(AVTimeframeType _timescale = timescale)
    {
        timescale = _timescale;
        return timescale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showScheduleCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets flag when to display schedule capacity
    /// </summary>
    /// <param name = "_showScheduleCapacity">Determines when to display schedule capacity</param>
    /// <returns>Boolean flag value</returns>
    public boolean showScheduleCapacity(boolean _showScheduleCapacity = showScheduleCapacity)
    {
        showScheduleCapacity = _showScheduleCapacity;
        return showScheduleCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityToggleDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the capacity toggle label
    /// </summary>
    /// <param name = "_capacityDesription">Capacity toggle label</param>
    /// <returns>String value label</returns>
    public str capacityToggleDescription(str _capacityDesription = capacityDesription)
    {
        capacityDesription = _capacityDesription;
        return capacityDesription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showScheduleDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets flag when to display schedule description
    /// </summary>
    /// <param name = "_showScheduleDescription">Determines when to display schedule description</param>
    /// <returns>String value description</returns>
    public boolean showScheduleDescription(boolean _showScheduleDescription = showScheduleDescription)
    {
        showScheduleDescription = _showScheduleDescription;
        return showScheduleDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the capacity aggregation
    /// </summary>
    /// <param name = "_aggregation">Enum value</param>
    /// <returns><c>ResCapacityAggregation</c> enum value</returns>
    public ResCapacityAggregation capacityAggregation(ResCapacityAggregation _aggregation = aggregation)
    {
        aggregation = _aggregation;
        return aggregation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>coverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the availability view user setting coverage
    /// </summary>
    /// <param name = "_coverage">Coverage of the user setting</param>
    /// <returns><c>ResUserSettingCoverage</c> enum value</returns>
    public ResUserSettingCoverage coverage(ResUserSettingCoverage _coverage = coverage)
    {
        coverage = _coverage;
        return coverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Availability view settings form
    /// </summary>
    /// <returns>True</returns>
    public boolean showForm()
    {
        Args formArgs = new Args();
        formArgs.caller(this);

        new MenuFunction(menuitemdisplaystr(ResAvailabilityViewSetting),
            MenuItemType::Display).run(formArgs);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResAvailabilityViewSetting_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles OnClosing event of ProjActivitySelection form
    /// </summary>
    [FormEventHandler(formstr(ResAvailabilityViewSetting), FormEventType::Closing)]
    public static void ResAvailabilityViewSetting_OnClosing(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        if (formRun.closedOk())
        {
            ResAvailabilityViewSetting control = formRun.availabilityViewSetting();
            control.selectionsReady(control);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionsReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when availability view setting selections are ready
    /// </summary>
    /// <param name = "_setting">Availablility view setting</param>
    delegate void selectionsReady(ResAvailabilityViewSetting _setting)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the user setting for the current user and coverage
    /// </summary>
    /// <returns>TRUE when the operation succeeds</returns>
    public boolean find()
    {
        ResAvailabilityViewUserSetting userSetting;

        select userSetting
            where userSetting.UserId == currentUser
            && userSetting.Coverage == coverage;

        if (userSetting)
        {
            timescale = userSetting.Timescale;
            showScheduleCapacity = userSetting.DisplayCapacity;
            showScheduleDescription = userSetting.DisplayDescriptions;
            aggregation = userSetting.CapacityAggregation;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the user setting for the current user and coverage
    /// </summary>
    /// <returns>TRUE when the operation succeeds</returns>
    public boolean save()
    {
        ResAvailabilityViewUserSetting userSetting;

        select forupdate userSetting
            where userSetting.UserId == currentUser
            && userSetting.Coverage == coverage;

        userSetting.Timescale = timescale;
        userSetting.DisplayCapacity = showScheduleCapacity;
        userSetting.DisplayDescriptions = showScheduleDescription;
        userSetting.CapacityAggregation = aggregation;

        boolean result;

        ttsbegin;
        if (!userSetting)
        {
            userSetting.UserId = currentUser;
            userSetting.Coverage = coverage;
            userSetting.insert();
            result = true;
        }
        else
        {
            userSetting.update();
            result = true;
        }
        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ResAvailabilityViewSetting</c>
    /// </summary>
    protected void new()
    {
        #ProjAvailabilityViewConstants
        currentUser = curUserId();

        Timezone tz = DateTimeUtil::getUserPreferredTimeZone();
        startDateTime = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(tz), 0);
        endDateTime = DateTimeUtil::addDays(startDateTime, #DefaultDateRangeInDays);
        timescale = AVTimeframeType::Week;
        aggregation = ResCapacityAggregation::Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>ResAvailabilityViewSetting</c>
    /// </summary>
    /// <returns>Instance of <c>ResAvailabilityViewSetting</c></returns>
    public static ResAvailabilityViewSetting construct()
    {
        ResAvailabilityViewSetting settingsForm = new ResAvailabilityViewSetting();
        return settingsForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>