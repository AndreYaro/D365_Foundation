<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransListContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for CustTransList SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the CustTransList SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustTransListUIBuilder),
    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class CustTransListContract implements SysOperationValidatable, SysOperationInitializable
{
    boolean onlyOpen;
    boolean includeReversed;
    ExchAdjustment exchangeRates;

    List billingClassification;
    NoYes inclTransWithNoBillingClass;
    boolean showReportingCurrency = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ExchangeRates.
    /// </summary>
    /// <param name="_exchangeRates">
    /// The new value of the datacontract parameter ExchangeRates; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ExchangeRates.
    /// </returns>
    [
        DataMemberAttribute('ExchangeRates'),
        SysOperationLabelAttribute(literalstr("@SYS4996")),
        SysOperationHelpTextAttribute(literalstr("@SYS4996")),
        SysOperationDisplayOrderAttribute('3')
    ]
    public ExchAdjustment parmExchangeRates(ExchAdjustment _exchangeRates = exchangeRates)
    {
        exchangeRates = _exchangeRates;

        return exchangeRates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;

        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter IncludeReversed.
    /// </summary>
    /// <param name="_includeReversed">
    /// The new value of the datacontract parameter IncludeReversed; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter IncludeReversed.
    /// </returns>
    [
        DataMemberAttribute('IncludeReversed'),
        SysOperationLabelAttribute(literalstr("@SYS78625")),
        SysOperationHelpTextAttribute(literalstr("@SYS78627")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public boolean parmIncludeReversed(boolean _includeReversed = includeReversed)
    {
        includeReversed = _includeReversed;

        return includeReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter OnlyOpen.
    /// </summary>
    /// <param name="_onlyOpen">
    /// The new value of the datacontract parameter OnlyOpen; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter OnlyOpen.
    /// </returns>
    [
        DataMemberAttribute('OnlyOpen'),
        SysOperationLabelAttribute(literalstr("@SYS6319")),
        SysOperationHelpTextAttribute(literalstr("@SYS16236")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public boolean parmOnlyOpen(boolean _onlyOpen = onlyOpen)
    {
        onlyOpen = _onlyOpen;

        return onlyOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog values for errors. The dialog values are handled through the contract.
    /// </summary>
    /// <returns>
    /// False if an error has occured in the dialog values; otherwise true.
    /// </returns>
    public boolean validate()
    {
        return CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hidden parameter for reporting currency column visibility.
    /// </summary>
    /// <param name = "_showReportingCurrency">
    /// boolean value.
    /// </param>
    /// <returns>
    /// Returns True if the current ledger's reporting currency is not blank and it is not same as accounting currency.
    /// </returns>
    [
        DataMemberAttribute('ShowReportingCurrency'),
        SysOperationControlVisibilityAttribute(false)
    ]
    public boolean parmShowReportingCurrency(boolean _showReportingCurrency = showReportingCurrency)
    {        
        if (Ledger::reportingCurrency() && Ledger::accountingCurrency() != Ledger::reportingCurrency())
        {
            showReportingCurrency = true;
        }
        else
        {
            showReportingCurrency = _showReportingCurrency;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>