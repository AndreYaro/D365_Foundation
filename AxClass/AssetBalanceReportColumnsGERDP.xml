<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalanceReportColumnsGERDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Captures all data required for AssetBalanceReportColumns GER report
/// </summary>
internal final class AssetBalanceReportColumnsGERDP
{
    private FromDate fromDate;
    private ToDate toDate;
    private AssetBookId assetBookId;
    private AssetBalance_DerogatoryDecrease_FR derogatoryDecrease;
    private AssetBalance_DerogatoryIncrease_FR derogatoryIncrease;
    private AssetId assetId;
    private AssetBalance_AcquisitionStartPeriod acquisitionStartPeriod;
    private AssetBalance_AcquisitionEndPeriod acquisitionEndPeriod;
    private AssetBalance_AcquisitionReceiptRepYear acquisitionReceiptRepYear;
    private AssetBalance_DepreciationStartPeriod depreciationStartPeriod;
    private AssetBalance_DepreciationRepYear depreciationRepYear;
    private AssetBalance_DepreciationVoidedRepYear depreciationVoidedRepYear;
    private AssetBalance_DepreciationEndPeriod depreciationEndPeriod;
    private AssetBalance_AdjStartPeriod adjStartPeriod;
    private AssetBalance_AdjWriteUpRepYear adjWriteUpRepYear;
    private AssetBalance_AdjWriteDownRepYear adjWriteDownRepYear;
    private AssetBalance_AdjRevaluationRepYear adjRevaluationRepYear;
    private AssetBalance_AdjVoidedRepYear adjVoidedRepYear;
    private AssetBalance_AdjEndPeriod adjEndPeriod;
    private AssetBalance_BalanceStartPeriod balanceStartPeriod;
    private AssetBalance_BalanceStartPeriod balanceEndPeriod;
    private AssetBalance_DepreciationRepYear bonusDepreciationRepYear;
    private AssetBalance_DerogatoryEndPeriod_FR derogatoryEndPeriod;
    private AssetBalance_DerogatoryStartPeriod_FR derogatoryStartPeriod;
    private AssetBalance_AcquisitionIssueRepYear acquisitionIssueRepYear;
    private AssetGroupId assetGroupId;
    private AssetGroupId lastAssetGroupId;
    private boolean balanceAdded;
    private AssetSumCalcType assetSumCalcType;

    private AssetBalanceReportColumnsTmp assetBalanceReportColumnsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    internal AssetBalanceReportColumnsTmp getAssetBalanceReportColumnsTmp(AssetBalanceReportColumnsGERContract _contract, Query _query)
    {
        Query query = _query;
        QueryRun queryRun;
        AssetCalcReport balanceReport;
        AssetBook assetBook;

        AssetBalanceReportColumnsGERContract contract = _contract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        assetBookId = contract.parmAssetBookId();

        if (contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting)
        {
            assetSumCalcType = AssetSumCalcType::MST;
        }
        else if (contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
        {
            assetSumCalcType = AssetSumCalcType::Reporting;
        }

        balanceReport = new AssetCalcReport(fromDate, toDate);

        SysQuery::findOrCreateRange(
            query.dataSourceTable(tablenum(AssetBook)),
            fieldnum(AssetBook, BookId)
            ).value(assetBookId);

        queryRun = new QueryRun(query);

        // Sum all chosen assets into groups.
        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));
            balanceReport.calcAssetByCurrency(assetBook, assetSumCalcType);
            this.totals(assetBook, balanceReport);
        }

        if (balanceAdded)
        {
            this.insertAssetBalanceReportColumnsTmp(false);
        }

        select AssetId, sum(AcquisitionStartPeriod),
                    sum(AcquisitionEndPeriod),
                    sum(AcquisitionsReceiptRepYear),
                    sum(DepreciationStartPeriod),
                    sum(DepreciationRepYear),
                    sum(DepreciationVoidedRepYear),
                    sum(DepreciationEndPeriod),
                    sum(AdjStartPeriod),
                    sum(AdjWriteUpRepYear),
                    sum(AdjWriteDownRepYear),
                    sum(AdjRevaluationRepYear),
                    sum(AdjVoidedRepYear),
                    sum(AdjEndPeriod),
                    sum(BalanceEndPeriod),
                    sum(AcquisitionIssueRepYear),
                    sum(BalanceStartPeriod),
                    sum(BonusDepreciationRepYear),
                    sum(DerogatoryEndPeriod),
                    sum(DerogatoryDecrease),
                    sum(DerogatoryIncrease),
                    sum(DerogatoryStartPeriod) from  assetBalanceReportColumnsTmp;

        balanceEndPeriod = assetBalanceReportColumnsTmp.BalanceEndPeriod;
        acquisitionIssueRepYear = assetBalanceReportColumnsTmp.AcquisitionIssueRepYear;
        acquisitionStartPeriod = assetBalanceReportColumnsTmp.AcquisitionStartPeriod;
        acquisitionEndPeriod = assetBalanceReportColumnsTmp.AcquisitionEndPeriod;
        acquisitionReceiptRepYear = assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear;
        depreciationStartPeriod = assetBalanceReportColumnsTmp.DepreciationStartPeriod;
        depreciationRepYear = assetBalanceReportColumnsTmp.DepreciationRepYear;
        depreciationVoidedRepYear = assetBalanceReportColumnsTmp.DepreciationVoidedRepYear;
        depreciationEndPeriod = assetBalanceReportColumnsTmp.DepreciationEndPeriod;
        adjStartPeriod = assetBalanceReportColumnsTmp.AdjStartPeriod ;
        adjWriteUpRepYear = assetBalanceReportColumnsTmp.AdjWriteUpRepYear;
        adjWriteDownRepYear = assetBalanceReportColumnsTmp.AdjWriteDownRepYear;
        adjRevaluationRepYear = assetBalanceReportColumnsTmp.AdjRevaluationRepYear;
        adjVoidedRepYear = assetBalanceReportColumnsTmp.AdjVoidedRepYear;
        adjEndPeriod = assetBalanceReportColumnsTmp.AdjEndPeriod;
        balanceStartPeriod = assetBalanceReportColumnsTmp.BalanceStartPeriod;
        bonusDepreciationRepYear = assetBalanceReportColumnsTmp.BonusDepreciationRepYear;
        derogatoryDecrease = assetBalanceReportColumnsTmp.DerogatoryDecrease;
        derogatoryIncrease = assetBalanceReportColumnsTmp.DerogatoryIncrease;
        derogatoryStartPeriod = assetBalanceReportColumnsTmp.DerogatoryStartPeriod;
        derogatoryEndPeriod = assetBalanceReportColumnsTmp.DerogatoryEndPeriod;
        //  Leaving this assetGroupId as "Total" will result in it coming before any asset groups that
        //      would ordinarily come after alphabetically. The correct name is replaced in the reporting configuration.
        assetGroupId = "~Total";
        this.insertAssetBalanceReportColumnsTmp(true);

        select assetBalanceReportColumnsTmp;
        return assetBalanceReportColumnsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static AssetBalanceReportColumnsGERDP construct()
    {
        AssetBalanceReportColumnsGERDP  dataProvider;
        dataProvider = new AssetBalanceReportColumnsGERDP();
        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    private void insertAssetBalanceReportColumnsTmp(boolean _balanceTotals)
    {
        #ISOCountryRegionCodes

        assetBalanceReportColumnsTmp.AssetGroup = assetGroupId;
        assetBalanceReportColumnsTmp.AcquisitionStartPeriod = acquisitionStartPeriod;
        assetBalanceReportColumnsTmp.AcquisitionEndPeriod = acquisitionEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear = acquisitionReceiptRepYear;
        assetBalanceReportColumnsTmp.DepreciationStartPeriod = depreciationStartPeriod;
        assetBalanceReportColumnsTmp.DepreciationRepYear = depreciationRepYear;
        assetBalanceReportColumnsTmp.DepreciationVoidedRepYear = depreciationVoidedRepYear;
        assetBalanceReportColumnsTmp.DepreciationEndPeriod = depreciationEndPeriod;
        assetBalanceReportColumnsTmp.AdjStartPeriod = adjStartPeriod;
        assetBalanceReportColumnsTmp.AdjWriteUpRepYear = adjWriteUpRepYear;
        assetBalanceReportColumnsTmp.AdjWriteDownRepYear = adjWriteDownRepYear;
        assetBalanceReportColumnsTmp.AdjRevaluationRepYear = adjRevaluationRepYear;
        assetBalanceReportColumnsTmp.AdjVoidedRepYear = adjVoidedRepYear;
        assetBalanceReportColumnsTmp.AdjEndPeriod = adjEndPeriod;
        assetBalanceReportColumnsTmp.BalanceEndPeriod = balanceEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionIssueRepYear = acquisitionIssueRepYear;
        assetBalanceReportColumnsTmp.BalanceStartPeriod = balanceStartPeriod;
        assetBalanceReportColumnsTmp.BonusDepreciationRepYear = bonusDepreciationRepYear;

        if (!_balanceTotals)
        {
            assetBalanceReportColumnsTmp.IsTotal = NoYes::No ;
            assetBalanceReportColumnsTmp.AssetId = assetId;
            assetBalanceReportColumnsTmp.AssetBookId = assetBookId;
        }
        else
        {
            assetBalanceReportColumnsTmp.IsTotal = NoYes::Yes;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            assetBalanceReportColumnsTmp.DerogatoryEndPeriod = derogatoryEndPeriod;
            assetBalanceReportColumnsTmp.DerogatoryDecrease = derogatoryDecrease;
            assetBalanceReportColumnsTmp.DerogatoryIncrease = derogatoryIncrease;
            assetBalanceReportColumnsTmp.DerogatoryStartPeriod = derogatoryStartPeriod;
        }
        assetBalanceReportColumnsTmp.insert();

        assetId = '';
        balanceEndPeriod = 0.0;
        acquisitionIssueRepYear = 0.0;
        acquisitionStartPeriod = 0.0;
        acquisitionEndPeriod = 0.0;
        acquisitionReceiptRepYear = 0.0;
        depreciationStartPeriod = 0.0;
        depreciationRepYear = 0.0;
        depreciationVoidedRepYear = 0.0;
        depreciationEndPeriod = 0.0;
        adjStartPeriod = 0.0;
        adjWriteUpRepYear = 0.0;
        adjWriteDownRepYear = 0.0;
        adjRevaluationRepYear = 0.0;
        adjVoidedRepYear = 0.0;
        adjEndPeriod = 0.0;
        balanceStartPeriod = 0.0;
        bonusDepreciationRepYear = 0.0;
        depreciationEndPeriod = 0.0;
        derogatoryDecrease = 0.0;
        derogatoryIncrease = 0.0;
        derogatoryStartPeriod = 0.0;
        derogatoryEndPeriod = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    private void totals(AssetBook _assetBook, AssetCalcReport  _balanceReport)
    {
        #ISOCountryRegionCodes

        _balanceReport.calcAssetByCurrency(_assetBook, assetSumCalcType);
        assetGroupId = _assetBook.AssetGroup;
        assetBookId = _assetBook.BookId;
        assetId = _assetBook.AssetId;
        acquisitionStartPeriod = acquisitionStartPeriod + _balanceReport.columnAcquisitionStartPeriod();
        acquisitionEndPeriod = acquisitionEndPeriod +  _balanceReport.columnAcquisitionEndPeriod();
        acquisitionReceiptRepYear = acquisitionReceiptRepYear + _balanceReport.columnAcquisitionReceiptRepYear();
        depreciationStartPeriod = depreciationStartPeriod + _balanceReport.columnDepreciationStartPeriod();
        depreciationRepYear = depreciationRepYear + _balanceReport.columnDepreciationRepYear();
        depreciationVoidedRepYear = depreciationVoidedRepYear + _balanceReport.columnDepreciationVoidedRepYear();
        depreciationEndPeriod = depreciationEndPeriod + _balanceReport.columnDepreciationEndPeriod();
        adjStartPeriod = adjStartPeriod + _balanceReport.columnAdjStartPeriod();
        adjWriteUpRepYear = adjWriteUpRepYear + _balanceReport.columnAdjWriteUpRepYear();
        adjWriteDownRepYear = adjWriteDownRepYear + _balanceReport.columnAdjWriteDownRepYear();
        adjRevaluationRepYear = adjRevaluationRepYear + _balanceReport.columnAdjRevaluationRepYear();
        adjVoidedRepYear = adjVoidedRepYear + _balanceReport.columnAdjVoidedRepYear();
        adjEndPeriod = adjEndPeriod + _balanceReport.columnAdjEndPeriod();
        balanceStartPeriod = balanceStartPeriod + _balanceReport.balanceStartPeriod();
        balanceEndPeriod = balanceEndPeriod + _balanceReport.balanceEndPeriod();
        acquisitionIssueRepYear = acquisitionIssueRepYear + _balanceReport.columnAcquisitionIssueRepYear();
        bonusDepreciationRepYear = bonusDepreciationRepYear + _balanceReport.columnBonusDepreciationRepYear();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            derogatoryEndPeriod = derogatoryEndPeriod + _balanceReport.columnDerogatoryEndPeriod();
            derogatoryDecrease = derogatoryDecrease + _balanceReport.columnDerogatoryDecrease();
            derogatoryIncrease = derogatoryIncrease + _balanceReport.columnDerogatoryIncrease();
            derogatoryStartPeriod = derogatoryStartPeriod + _balanceReport.columnDerogatoryStartPeriod();
        }
        this.insertAssetBalanceReportColumnsTmp(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>