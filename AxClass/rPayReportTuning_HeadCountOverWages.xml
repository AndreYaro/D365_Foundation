<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReportTuning_HeadCountOverWages</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayReportTuning_HeadCountOverWages extends RPayReportTuning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        ;
        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1 :
                _lookupCtrl.replaceOnLookup(true);

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            case 2, 3, 5, 6, 8 :
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedTypeNum(RpayTimeGroupCode), _lookupCtrl);
                break;

            case 10 :
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedTypeNum(RPayGroup), _lookupCtrl);
                break;

            case 11 :
                _lookupCtrl.replaceOnLookup(true);

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayRateTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayRateTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayRateTable, RateValueType)).value(queryValue(RpayRateValueType::Criterion));

                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, PayRate));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, Name));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, RateValueType));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;

            case 4, 7, 9, 12 :
                _lookupCtrl.replaceOnLookup(true);

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayRateTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayRateTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayRateTable, RateValueType)).
                    value(queryValue(RpayRateValueType::RealValue) + ',' + queryValue(RpayRateValueType::CounterValue));
                query.dataSourceNo(1).addRange(fieldNum(RPayRateTable, LineType)).value(queryValue(RPayRateType::System));

                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, PayRate));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, Name));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, RateValueType));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RPayReportName _reportName, FormRun _formRun)
    {
        parameterName = [literalStr("@RUP2132"),
                         literalStr("@RUP2134"),
                         literalStr("@RUP2135"),
                         literalStr("@RUP2728"),
                         literalStr("@RUP2136"),
                         literalStr("@RUP2729"),
                         literalStr("@RUP2730"),
                         literalStr("@RUP2185"),
                         literalStr("@RUP2731"),
                         literalStr("@RUP2137"),
                         literalStr("@RUP2732"),
                         literalStr("@RUP2548")];

        super(_reportName,_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
        public void openReportTemplate()
    {
        ComExcelDocument_RU doc = new ComExcelDocument_RU();

        doc.open(TemplateProvider_RU::getFor(new RPayReportHeadCountOverWages()).get(resourceStr(RPayReportHeadCountOverWages)), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        public void printReport()
    {
        new MenuFunction(menuitemoutputstr(RPayReportHeadCountOverWages), MenuItemType::Output).run(new Args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        ;

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1 :
                if ((select firstonly rPayCounterTable
                            where rPayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                  rPayCounterTable.CounterType == RPayCounterType::Fund).RecId == 0 &&
                    rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }
                break;

            case 2, 3, 5, 6, 8 :
                if ((select firstonly rPayTimeGroupTable
                           where rPayTimeGroupTable.TimeGroup == rPayReportTuningTable.Parameter).RecId == 0 &&
                    rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayTimeGroupTable, TimeGroup),
                                       tablePName(RPayTimeGroupTable)));
                }
                break;

            case 10 :
                if ((select firstonly rPayGroupTable
                         where rPayGroupTable.PayGroup == rPayReportTuningTable.Parameter &&
                               rPayGroupTable.Blocked  == NoYes::No).RecId == 0           &&
                   rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayGroupTable, PayGroup),
                                       tablePName(RPayGroupTable)));
                }
                break;

            case 11 :
                if ((select firstonly rPayRateTable
                         where rPayRateTable.PayRate       == rPayReportTuningTable.Parameter &&
                               rPayRateTable.RateValueType == RpayRateValueType::Criterion).RecId == 0 &&
                   rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayRateTable, PayRate),
                                       tablePName(RPayRateTable)));
                }
                break;

            case 4, 7, 9, 12 :
                if ((select firstonly rPayRateTable
                         where rPayRateTable.PayRate        == rPayReportTuningTable.Parameter &&
                               (rPayRateTable.RateValueType == RpayRateValueType::RealValue ||
                                rPayRateTable.RateValueType == RpayRateValueType::CounterValue)).RecId == 0 &&
                   rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayRateTable, PayRate),
                                       tablePName(RPayRateTable)));
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>