<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendExchAdjPostingEngine_InvoiceApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendExchAdjPostingEngine_InvoiceApproval</c> class is responsible for posting exchange rate adjustments for Invoice Approval Journals to the Purchasing ledger dimension of the posting profile
/// </summary>
class VendExchAdjPostingEngine_InvoiceApproval extends VendExchAdjPostingEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mergeProfitLossLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine merged profit loss ledger dimension value.
    /// </summary>
    /// <param name="_useSettingsFromPreviousAdjustment">
    /// True if the exchange adjustment settings from the previous adjustment should be used.
    /// </param>
    /// <param name="_previousAdjustmentLedgerDimension">
    /// Previous exchange adjustment ledger dimension value.
    /// </param>
    /// <param name="_currentAdjustmentLedgerDimension">
    /// Current exchange adjustment ledger dimension value.
    /// </param>
    /// <param name="_isReversing">
    /// Indicates if this is a reversing adjustment.
    /// </param>
    /// <returns>
    /// Returns gain or loss dimension value.
    /// </returns>
    protected LedgerDimensionAccount mergeProfitLossLedgerDimension(
        boolean _useSettingsFromPreviousAdjustment,
        LedgerDimensionDefaultAccount _previousAdjustmentLedgerDimension,
        LedgerDimensionDefaultAccount _currentAdjustmentLedgerDimension,
        boolean _isReversing = false)
    {
        LedgerDimensionAccount ledgerDimensionMerged;
        DimensionDefault dimensionsToDefault;
        DimensionDefault localDefaultDimension;

        if (countryRegion_RUCZ || !_useSettingsFromPreviousAdjustment)

        {
            ledgerDimensionMerged = super(_useSettingsFromPreviousAdjustment,
                _previousAdjustmentLedgerDimension,
                _currentAdjustmentLedgerDimension,
                _isReversing);
        }
        else
        {
            if (previousDimensionSpecification == NoneTableTrans::Table)
            {
                localDefaultDimension = CustVendTransData::construct(custVendTrans).custVendTable().DefaultDimension;

                dimensionsToDefault = LedgerDimensionFacade::serviceCreateLedgerDimension(
                    localDefaultDimension,
                    MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::findByLedgerDimension(_currentAdjustmentLedgerDimension).RecId, CompanyInfo::current()).DefaultDimension);
            }
            else if (previousDimensionSpecification == NoneTableTrans::Transaction)
            {
                dimensionsToDefault = custVendTrans.DefaultDimension;
            }
            else
            {
                dimensionsToDefault = 0;
            }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_currentAdjustmentLedgerDimension, dimensionsToDefault);
        }

        return ledgerDimensionMerged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSummaryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the merged dimension value.
    /// </summary>
    /// <param name="_useSettingsFromPreviousAdjustment">
    /// True if the exchange adjustment settings from the previous adjustment should be used.
    /// </param>
    /// <param name="_voucherContainsMultipleSummaryEntries">
    /// True if Voucher contains multiple summary entries.
    /// </param>
    /// <param name="_isReversing">
    /// Indicates if this is a reversing adjustment.
    /// </param>
    /// <returns>
    /// Returns LedgerDimension value.
    /// </returns>
    protected LedgerDimensionAccount mergeSummaryLedgerDimension(
        boolean _useSettingsFromPreviousAdjustment,
        boolean _voucherContainsMultipleSummaryEntries = false,
        boolean _isReversing = false)

    {
        DimensionDefault                localDimensionDefault;
        LedgerDimensionAccount          defaultLedgerDimension;
        LedgerDimensionDefaultAccount   localDefaultAccount;
        PostingProfile                  localPostingProfile;

        if (_useSettingsFromPreviousAdjustment)
        {
            switch (previousDimensionSpecification)
            {
                case NoneTableTrans::Table:
                    localDimensionDefault = CustVendTransData::construct(custVendTrans).custVendTable().DefaultDimension;
                    break;

                case NoneTableTrans::Transaction:
                    localDimensionDefault = custVendTrans.DefaultDimension;
                    break;
            }
        }
        else
        {
            switch (exchangeAdjustmentController.dimSpec())
            {
                case NoneTableTrans::Table:
                    localDimensionDefault = defaultDimension;
                    break;

                case NoneTableTrans::Transaction:
                    localDimensionDefault = custVendTrans.DefaultDimension;
                    break;
            }
        }

        localPostingProfile = this.getPostingProfile(_useSettingsFromPreviousAdjustment);

        if (_isReversing)
        {
            //While reversing a previous adjustment for invoice approval use the arrival account that was used to post the invoice register.
            localDefaultAccount = this.getPurchasingLedgerDimension(custVendTrans.AccountNum, localPostingProfile);
        }
        else
        {
            localDefaultAccount = this.getSummaryLedgerDimension(custVendTrans.AccountNum, localPostingProfile);
        }

        defaultLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(localDefaultAccount, localDimensionDefault);

        return defaultLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForInvoiceApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes an instance of the <c>VendExchAdjPostingEngine_InvoiceApproval</c> class for the reversal and posting of unrealized currency revaluation.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///  The ledger voucher to post the new currency revaluation.
    /// </param>
    /// <param name="_exchangeRateDate">
    ///  The exchange rate date.
    /// </param>
    /// <param name="_vendTrans">
    ///  The transaction being settled.
    /// </param>
    /// <param name="_vendTransOpen">
    /// The <c>VendTransOpen</c> record being settled.
    /// </param>
    /// <returns>
    ///  An instance of the <c>VendExchAdjPostingEngine_InvoiceApproval</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendExchAdjPostingEngine_InvoiceApproval constructForInvoiceApproval(
        LedgerVoucher _ledgerVoucher,
        TransDate _exchangeRateDate,
        VendTrans _vendTrans,
        VendTransOpen _vendTransOpen)
    {
        CustVendExchAdj custVendExchAdj;
        VendSettlement vendSettlement;
        Map lastExchangeAdjustmentHistory = new Map(Types::Int64, Types::Container);
        VendExchAdjPostingEngine_InvoiceApproval vendExchAdjPostingEngine;

        custVendExchAdj = CustVendExchAdj::construct(SysModule::Vend);

        custVendExchAdj.postingDate(_exchangeRateDate);       

        vendExchAdjPostingEngine = new VendExchAdjPostingEngine_InvoiceApproval();

        CreatedTransactionId previousCreatedTransactionId = CustVendExchAdjPostingEngine::getPrevCreatedTransactionId(
            moduleCustVend::Vend,
            _vendTrans.LastExchAdjVoucher,
            _vendTrans.LastExchAdj);

        boolean doesLedgerEntryIsExchangeAdjustmentExist = CustVendExchAdjPostingEngine::doesLedgerEntryIsExchangeAdjustmentExist(previousCreatedTransactionId);

        if (doesLedgerEntryIsExchangeAdjustmentExist)
        {
            CustVendExchRateAdjustment custVendExchRateAdjustment = CustVendExchRateAdjustment::getEmptyTableBuffer(moduleCustVend::Vend);

            select firstonly Dimensions from custVendExchRateAdjustment
                where custVendExchRateAdjustment.CreatedTransactionId == previousCreatedTransactionId;

            if (custVendExchRateAdjustment)
            {
                custVendExchAdj.dimSpec(custVendExchRateAdjustment.Dimensions);
            }
        }

        vendExchAdjPostingEngine.init(custVendExchAdj,
            _exchangeRateDate,
            _vendTrans,
            _vendTransOpen,
            vendSettlement,
            lastExchangeAdjustmentHistory,
            _ledgerVoucher);

        return vendExchAdjPostingEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>