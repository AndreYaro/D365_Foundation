<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListLedgerTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListLedgerTrans
{
    DialogField     dialogFromDate;
    DialogField     dialogToDate;

    FromDate            fromDate;
    ToDate              toDate;

    NoYes               levelSearch;

    ProjListLedgerTransType listLedgerTransType;

    #define.CurrentVersion(4)

    #localmacro.CurrentList
        fromDate,
        toDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog(Object _dialog)
    {
        DialogRunbase   dialog = _dialog;

        dialog.addGroup("@SYS23410").columns(1);
        dialogFromDate  = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS24050","@SYS90469");
        dialogToDate    = dialog.addFieldValue(extendedTypeStr(TransDate), toDate,   "@SYS80934","@SYS90470");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        fromDate            = dialogFromDate.value();
        toDate              = dialogToDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    void modifyQuery(Query _query)
    {
        QueryBuildRange         queryRangeTransDate;
        QueryBuildDataSource    queryDataSource;

        queryDataSource     = _query.dataSourceTable(tablenum(ProjTransPosting));
        queryRangeTransDate = queryDataSource.addRange(fieldnum(ProjTransPosting, LedgerTransDate));

        if (fromDate && toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..' + queryValue(toDate));
        }
        else if (fromDate && !toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..');
        }
        else if (!fromDate && toDate)
        {
            queryRangeTransDate.value('..' + queryValue(toDate));
        }
        else
        {
            queryRangeTransDate.value('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (fromDate > toDate && toDate)
        {
            return checkFailed("@SYS91020");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjListLedgerTrans construct()
    {
        ProjListLedgerTrans projListLedgerTrans;

        projListLedgerTrans = new ProjListLedgerTrans();

        return projListLedgerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    public static ProjId setProjId(
        ProjId      projIdCheck,
        Level       level,
        Map         mapProjId)
    {
        ProjTable   projTable   = ProjTable::find(projIdCheck);
        ProjId      projId;
        NoYes       thisLevel;

        if (level)
        {
            if (mapProjId.exists(projIdCheck))
            {
                projId = mapProjId.lookup(projIdCheck);
            }
            else
            {
                thisLevel = (level == projTable.level()) ? NoYes::Yes : NoYes::No;

                projId = '';

                if (thisLevel && projTable.childExist())
                {
                    projId      = projTable.ProjId + '*';
                }
                else
                {
                    if (!thisLevel && (level != 0))
                    {
                        while (projTable.level() > level)
                        {
                            projTable   = ProjTable::find(projTable.ParentId);
                            projId      = projTable.ProjId + '*';
                        }
                    }
                }

                if (!projId)
                {
                    projId = projTable.ProjId;
                }

                mapProjId.insert(projIdCheck, projId);
            }
        }
        else
        {
            projId = '*';
        }

        return projId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>