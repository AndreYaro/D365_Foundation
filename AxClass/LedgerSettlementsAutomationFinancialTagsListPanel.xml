<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationFinancialTagsListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerSettlementsAutomationFinancialTagsListPanel</c> class manages a list panel control to use to select the
///    Ledger settlement automation financial tags selections.
/// </summary>
public class LedgerSettlementsAutomationFinancialTagsListPanel extends SysListPanel
{
    LedgerSettlementsAutomationCriteria ledgerSettlementsAutomationCriteria;
    private boolean listPanelInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectionCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of items populated in the selected list panel.
    /// </summary>
    /// <returns>
    ///    An integer with the number of items populated in the selected list panel.
    /// </returns>
    internal int selectionCount()
    {
        return viewSelected.getCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all items that were populated in the selected list panel, returning them to the available list panel.
    /// </summary>
    internal void removeAllSelected()
    {
        viewSelected.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitSelectionToDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Save the selected Financial tags entries to the LedgerSettlementsAutomationMatchSelection table
    /// </summary>
    /// <param name="_ledgerSettlementsAutomationCriteriaRecId">
    ///    The parent record from the LedgerSettlementsAutomationCriteria table that the selected financial tags are bound to.
    /// </param>
    [Hookable(false)]
    public void commitSelectionToDatabase(RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        RefRecId finTagRecId;
        LedgerSettlementsAutomationMatchSelection ledgerSettlementsAutomationMatchSelection;

        // Need to remove all previous selections that were chosen.
        this.deletePreviousSelection(_ledgerSettlementsAutomationCriteriaRecId);

        FormListItem formListItem;
        container data;
        int idx = viewSelected.getCount() - 1;
        int i = 1;

        while(idx != -1)
        {
            formListItem = viewSelected.getItem(idx);
            data += formListItem.data();

            finTagRecId = conpeek(data, i);

            ledgerSettlementsAutomationMatchSelection.LedgerSettlementsAutomationCriteria = _ledgerSettlementsAutomationCriteriaRecId;
            ledgerSettlementsAutomationMatchSelection.SelectionRecId = finTagRecId;
            ledgerSettlementsAutomationMatchSelection.SelectionCriteria = LedgerSettlementsAutomationCriteriaSelection::Tags;
            ledgerSettlementsAutomationMatchSelection.insert();

            idx --;
            i ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Remove all saved Financial tags selected that are bound to the LedgerSettlementsAutomationCriteria record.
    /// </summary>
    /// <param name="_ledgerSettlementsAutomationCriteriaRecId">
    ///    The parent record from the LedgerSettlementsAutomationCriteria table that the selected financial tags are bound to.
    /// </param>
    [Hookable(false)]
    public void deletePreviousSelection(RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        LedgerSettlementsAutomationMatchSelection ledgerSettlementsAutomationMatchSelection;

        delete_from ledgerSettlementsAutomationMatchSelection
            where ledgerSettlementsAutomationMatchSelection.LedgerSettlementsAutomationCriteria == _ledgerSettlementsAutomationCriteriaRecId
                && ledgerSettlementsAutomationMatchSelection.SelectionCriteria == LedgerSettlementsAutomationCriteriaSelection::Tags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stub class to satisfy the implemention requirement of this abstract method from class SysListPanel
    /// </summary>
    /// <param name="_data">
    ///    The item that was added to the list of selected financial tags.
    /// </param>
    internal void addData(container _data)
    {
        //super(); No need to call super() as we aren't immediately adding data, but stil need the method to satisfy the abstract method's implementation.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    ///    A container with the items to add to both the selected and available lists of the list panel.
    /// </returns>
    internal container getData()
    {
        container financialTagsSelected;
        container financialTagsAvailable;

        RefRecId recId = ledgerSettlementsAutomationCriteria.RecId;

        if (!listPanelInitialized)
        {
            // Get the financial tags already selected.
            financialTagsSelected = LedgerSettlementsAutomationFinancialTagsListPanel::getFinancialTagsSelected(recId);

            // Get the financial tags available to select.
            financialTagsAvailable = LedgerSettlementsAutomationFinancialTagsListPanel::getFinancialTagsAvailable(recId);

            listPanelInitialized = true;
        }

        return [financialTagsAvailable, financialTagsSelected];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Typically, this method would remove a Financial tags entry from the "Selected financial tags" list,
    ///    but seeing as we are not actually storing the interim selections in a table, this method is not used, but since
    ///    we inherited it, we still need to have it's stub in this class.
    /// </summary>
    /// <param name="_data">
    ///    The item that was selected from the list of selected financial tags.
    /// </param>
    internal void removeData(container _data)
    {
        //super(); No need to call super() as we aren't immediately updating data, but stil need the method to satisfy the abstract method's implementation.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerSettlementsAutomationCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the LedgerSettlementsAutomationCriteria reference for the list panel.
    /// </summary>
    /// <param name="_ledgerSettlementsAutomationCriteriaRecId">
    ///    The record ID of the <c>LedgerSettlementsAutomationCriteria</c> record.
    /// </param>
    internal void setLedgerSettlementsAutomationCriteria(RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        ledgerSettlementsAutomationCriteria = LedgerSettlementsAutomationCriteria::find(_ledgerSettlementsAutomationCriteriaRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        // Do not sort the list as the data is returned in the correct order.
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected item can be added or removed from the list.
    /// </summary>
    /// <param name="_data">
    ///    The selected item in the panel list.
    /// </param>
    /// <param name="_addRemove">
    ///    Specifies whether the selected item is being added or removed.
    /// </param>
    /// <returns>
    ///    true if the selected item can be added or removed; otherwise, false.
    /// </returns>
    internal boolean validate(anytype _data, AddRemove _addRemove)
    {
        // Active configurations or configurations locked for editing by another user are not allowed to be updated.
        return super(_data, _addRemove);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LedgerSettlementsAutomationFinancialTagsListPanel</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LedgerSettlementsAutomationFinancialTagsListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal static LedgerSettlementsAutomationFinancialTagsListPanel construct()
    {
        return new LedgerSettlementsAutomationFinancialTagsListPanel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialTagsAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the left list of the list panel.
    /// </summary>
    /// <param name="_ledgerSettlementsAutomationCriteriaRecId">
    ///    The record ID of the <c>ledgerSettlementsAutomationCriteria</c> record.
    /// </param>
    /// <returns>
    ///    A container with the items to add to left list of the list panel.
    /// </returns>
    private static container getFinancialTagsAvailable(
        RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        container financialTagsAvailable;

        FinTagConfiguration finTag;
        LedgerSettlementsAutomationMatchSelection alreadySelectedFinancialTags;

        // Populate the list of financial tags that are available to be selected.
        while select RecId, TagName from finTag
            order by finTag.TagName
            where finTag.Active == NoYes::Yes
            notexists join alreadySelectedFinancialTags
                where finTag.RecId == alreadySelectedFinancialTags.SelectionRecId
                && alreadySelectedFinancialTags.SelectionCriteria == LedgerSettlementsAutomationCriteriaSelection::Tags
                && alreadySelectedFinancialTags.LedgerSettlementsAutomationCriteria == _ledgerSettlementsAutomationCriteriaRecId
 
        {
            financialTagsAvailable += [[finTag.RecId, finTag.TagName]];
        }

        return financialTagsAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialTagsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items of the right list of the list panel.
    /// </summary>
    /// <param name="_ledgerSettlementsAutomationCriteriaRecId">
    ///    The record ID of the <c>LedgerSettlementsAutomationCriteria</c> record.
    /// </param>
    /// <returns>
    ///    A container with the items to add to the right list of the list panel.
    /// </returns>
    private static container getFinancialTagsSelected(
        RefRecId _ledgerSettlementsAutomationCriteriaRecId)
    {
        container financialTags;

        FinTagConfiguration finTag;
        LedgerSettlementsAutomationMatchSelection alreadySelectedFinancialTags;

        // Populate the list of financial tags that are currently selected.
        while select RecId, TagName from finTag
            order by finTag.TagName
            where finTag.Active == NoYes::Yes
            join alreadySelectedFinancialTags
                where alreadySelectedFinancialTags.SelectionCriteria == LedgerSettlementsAutomationCriteriaSelection::Tags
                && alreadySelectedFinancialTags.SelectionRecId == finTag.RecId
                && alreadySelectedFinancialTags.LedgerSettlementsAutomationCriteria == _ledgerSettlementsAutomationCriteriaRecId
        {
            financialTags += [[fintag.RecId, fintag.TagName]];
        }

        return financialTags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>LedgerSettlementsAutomationFinancialTagsListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    The form that will contain the list panel controls.
    /// </param>
    /// <param name="_parentId">
    ///    The form control that will contain the list panel controls.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LedgerSettlementsAutomationFinancialTagsListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal static LedgerSettlementsAutomationFinancialTagsListPanel newForm(FormRun _formRun, int _parentId)
    {
        LedgerSettlementsAutomationFinancialTagsListPanel listPanel = LedgerSettlementsAutomationFinancialTagsListPanel::construct();

        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@GeneralLedger:SelectedFinancialTags");
        listPanel.parmCaptionAvailable("@GeneralLedger:AvailableFinancialTags");

        listPanel.parmHasUpDownButton(false);
        listPanel.parmHasAddAllButton(false);
        listPanel.parmHasRemoveAllButton(false);

        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>