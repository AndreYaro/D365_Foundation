<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcWhereUsedListDerivedDependecyRelationsPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMCalcWhereUsedListDerivedDependecyRelationsPopulator</c> class populates the <c>BOMTmpUsedItem2ProducedItem</c> table with information about derived dependency relations for the provided level.
/// </summary>
class BOMCalcWhereUsedListDerivedDependecyRelationsPopulator extends SysQueryInsertRecordSet
{
    QueryBuildDataSource    qbdsFirstRelation;
    QueryBuildDataSource    qbdsSecondRelation;
    QueryBuildDataSource    qbdsCalcWhereUsedRelation;
    QueryBuildDataSource    qbdsDupeRelation;

    SysGuid                 sessionGuid;
    int                     dependencyLevel;
    int                     nextLevel;

    const int               ConcreteDependencyGraph     = 1;
    const int               ElementaryDependencyLevel   = 1;

    BOMTmpUsedItem2ProducedItem derivedRelation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {        
        this.mapField(qbdsCalcWhereUsedRelation.uniqueId(), fieldStr(BOMTmpCalcWhereUsedRelation, Level), fieldStr(BOMTmpUsedItem2ProducedItem, Level));

        this.mapField(qbdsFirstRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, RelationSetNumber), fieldStr(BOMTmpUsedItem2ProducedItem, RelationSetNumber));
        this.mapField(qbdsFirstRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, SessionGuid), fieldStr(BOMTmpUsedItem2ProducedItem, SessionGuid));
        this.mapField(qbdsFirstRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemId), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemId));
        this.mapField(qbdsFirstRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemSiteId), fieldStr(BOMTmpUsedItem2ProducedItem, UsedItemSiteId));

        this.mapField(qbdsSecondRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemId), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemId));
        this.mapField(qbdsSecondRelation.uniqueId(), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId), fieldStr(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId));

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();

            FieldId producedProductDimFieldId = BOMTmpUsedItem2ProducedItem::producedProductDimensionFieldId(productDim);
            FieldId usedProductDimFieldId = BOMTmpUsedItem2ProducedItem::usedProductDimensionFieldId(productDim);

            if (producedProductDimFieldId && usedProductDimFieldId)
            {
                FieldName producedProductDimFieldName = fieldId2Name(tableNum(BOMTmpUsedItem2ProducedItem), producedProductDimFieldId);
                FieldName usedProductDimFieldName = fieldId2Name(tableNum(BOMTmpUsedItem2ProducedItem), usedProductDimFieldId);

                this.mapField(qbdsFirstRelation.uniqueId(), usedProductDimFieldName, usedProductDimFieldName);
                this.mapField(qbdsSecondRelation.uniqueId(), producedProductDimFieldName, producedProductDimFieldName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        BOMTmpCalcWhereUsedRelation::createRelation(sessionGuid, nextLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExecuted</Name>
				<Source><![CDATA[
    protected void onExecuted()
    {
        super();

        BOMTmpCalcWhereUsedRelation::deleteForSessionGuid(sessionGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        const TableName FirstRelationDataSourceName = 'FirstRelation';
        const TableName SecondRelationDataSourceName = 'SecondRelation';
        const TableName DupeRelationDataSourceName = 'DupeRelation';

        // Perform the matching of relations A->B (firstRelation) and B->C (secondRelation).
        Query query = new Query();
        
        qbdsFirstRelation = query.addDataSource(tableNum(BOMTmpUsedItem2ProducedItem), FirstRelationDataSourceName);
        qbdsFirstRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, Level)).value(queryValue(dependencyLevel));
        qbdsFirstRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, RelationSetNumber)).value(queryValue(ConcreteDependencyGraph));
        qbdsFirstRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, SessionGuid)).value(queryValue(sessionGuid));
        qbdsFirstRelation.fetchMode(QueryFetchMode::One2One);

        qbdsSecondRelation = qbdsFirstRelation.addDataSource(tableNum(BOMTmpUsedItem2ProducedItem), SecondRelationDataSourceName);
        qbdsSecondRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemId), fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemId), FirstRelationDataSourceName);
        qbdsSecondRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId), fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemSiteId), FirstRelationDataSourceName);
        qbdsSecondRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, Level)).value(queryValue(ElementaryDependencyLevel));
        qbdsSecondRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, RelationSetNumber)).value(queryValue(ConcreteDependencyGraph));
        qbdsSecondRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, SessionGuid)).value(queryValue(sessionGuid));
        qbdsSecondRelation.fetchMode(QueryFetchMode::One2One);

        qbdsCalcWhereUsedRelation = qbdsFirstRelation.addDataSource(tableNum(BOMTmpCalcWhereUsedRelation));
        qbdsCalcWhereUsedRelation.addRange(fieldNum(BOMTmpCalcWhereUsedRelation, SessionGuid)).value(queryValue(sessionGuid));
        qbdsCalcWhereUsedRelation.fetchMode(QueryFetchMode::One2One);

        qbdsDupeRelation = qbdsFirstRelation.addDataSource(tableNum(BOMTmpUsedItem2ProducedItem), DupeRelationDataSourceName);
        qbdsDupeRelation.joinMode(JoinMode::NoExistsJoin);
        qbdsDupeRelation.fetchMode(QueryFetchMode::One2One);
        qbdsDupeRelation.fields().dynamic(NoYes::No);
        qbdsDupeRelation.fields().clearFieldList();
        qbdsDupeRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, RelationSetNumber)).value(queryValue(ConcreteDependencyGraph));
        qbdsDupeRelation.addRange(fieldNum(BOMTmpUsedItem2ProducedItem, SessionGuid)).value(queryValue(sessionGuid));
        qbdsDupeRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemId), fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemId), FirstRelationDataSourceName);
        qbdsDupeRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemSiteId), fieldNum(BOMTmpUsedItem2ProducedItem, UsedItemSiteId), FirstRelationDataSourceName);
        qbdsDupeRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemId), fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemId), SecondRelationDataSourceName);
        qbdsDupeRelation.addLink(fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId), fieldNum(BOMTmpUsedItem2ProducedItem, ProducedItemSiteId), SecondRelationDataSourceName);

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();

            FieldId producedProductDimFieldId = BOMTmpUsedItem2ProducedItem::producedProductDimensionFieldId(productDim);
            FieldId usedProductDimFieldId = BOMTmpUsedItem2ProducedItem::usedProductDimensionFieldId(productDim);

            if (producedProductDimFieldId && usedProductDimFieldId)
            {
                qbdsSecondRelation.addLink(producedProductDimFieldId, usedProductDimFieldId, FirstRelationDataSourceName);

                qbdsDupeRelation.addLink(usedProductDimFieldId, usedProductDimFieldId, FirstRelationDataSourceName);
                qbdsDupeRelation.addLink(producedProductDimFieldId, producedProductDimFieldId, SecondRelationDataSourceName);
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected Common initTargetCursor()
    {
        return derivedRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BOMCalcWhereUsedListDerivedDependecyRelationsPopulator construct()
    {
        return new BOMCalcWhereUsedListDerivedDependecyRelationsPopulator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPopulator</Name>
				<Source><![CDATA[
    public static BOMCalcWhereUsedListDerivedDependecyRelationsPopulator newPopulator(int _dependencyLevel, BOMCalcWhereUsedList _calcWhereUsedList)
    {
        BOMCalcWhereUsedListDerivedDependecyRelationsPopulator populator = BOMCalcWhereUsedListDerivedDependecyRelationsPopulator::construct();

        populator.dependencyLevel = _dependencyLevel;
        populator.nextLevel = _dependencyLevel + 1;
        populator.sessionGuid = _calcWhereUsedList.parmSessionGuid();

        return populator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>