<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>tamVendRebatePaymentPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebatePaymentPost</c> class creates and posts payments for vendor rebates.
/// </summary>
class TAMVendRebatePaymentPost
{
    LedgerJournalTable                  ledgerJournalTable;
    MCRLedgerJournal                    mcrLedgerJournal;
    Amount                              totalAmount;
    Num                                 invoiceId;
    VendInvoiceInfoTable                vendInvoiceInfoTable;
    private VendAccount                 vendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the vendor invoice document that will be used to post the vendor claims based
    /// on the passed in rebate table record.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The the vendor rebate table record to include in the vendor invoice.
    /// </param>
    private void createVendorInvoice(TAMVendRebateTable _tamVendRebateTable, boolean _vendAccountChanged)
    {
        SalesVendorInvoiceInfoCreator vendInvoiceInfoCreator;
        TAMVendRebateParameters       vendRebateParameters = TAMVendRebateParameters::find();

        vendInvoiceInfoCreator = SalesVendorInvoiceInfoCreator::construct();

        if (!invoiceId || _vendAccountChanged)
        {
            invoiceId = this.getVendorInvoiceNumberSeq().num();

            vendInvoiceInfoCreator.parmInvoiceAccount(_tamVendRebateTable.VendAccount);
            vendInvoiceInfoCreator.parmOrderAccount(_tamVendRebateTable.VendAccount);
            vendInvoiceInfoCreator.parmInvoiceId(invoiceId);
            vendInvoiceInfoCreator.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            vendInvoiceInfoCreator.parmCurrencyCode(_tamVendRebateTable.CurrencyCode ? _tamVendRebateTable.CurrencyCode : Ledger::accountingCurrency(CompanyInfo::current()));
            vendInvoiceInfoCreator.parmDocumentStatus(DocumentStatus::Invoice);
            vendInvoiceInfoCreator.parmSkipVendInvoiceRelatedTables(true);

            vendInvoiceInfoTable = vendInvoiceInfoCreator.createVendorInvoiceInfoHeader();
        }

        vendInvoiceInfoCreator.parmLineAmount(-_tamVendRebateTable.ledgerPostingAmount());
        vendInvoiceInfoCreator.parmLineProcurementCategory(vendRebateParameters.ProcurementCategory);
        vendInvoiceInfoCreator.parmInvoiceLineDescription(_tamVendRebateTable.VendRebateId);

        vendInvoiceInfoCreator.createVendInvoiceInfoLine(vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog message when rebate posting succeeds.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The vendor rebate table record for which to display the end information log.
    /// </param>
    protected void endInfoLog(TAMVendRebateTable _tamVendRebateTable)
    {
        TAMVendRebateTrans tamVendRebateTrans;

        tamVendRebateTrans = TAMVendRebateTrans::findByVendRebateIdTransaction(_tamVendRebateTable.VendRebateId,
                                                                               TAMVendRebateTransactionType::VendorPayment);
        if (tamVendRebateTrans)
        {
            info(strFmt("@PRO1431", _tamVendRebateTable.VendRebateId));
            info(strFmt("@GLS222667", tamVendRebateTrans.RebateInvoiceId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the vendor invoice number sequence
    /// defined in the Payroll parameters.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeq</c> object for the vendor invoice number sequence.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>NumberSeq</c> object could not be initialized.
    /// </exception>
    protected NumberSeq getVendorInvoiceNumberSeq()
    {
        NumberSeq               numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;

        numberSequenceReference = TAMVendRebateParameters::numRefTAMVendRebateInvoiceId();

        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceTable)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (numberSeq == null)
        {
            throw error(strFmt("@GLS111556", new DictType(extendedTypeNum(TAMVendRebateInvoiceNum)).label(), "@SYS336254"));
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for vendor rebate process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameProcess()
    {
        return LedgerJournalName::find(TAMVendRebateParameters::find().VendLedgerAccrualJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    /// The jounal for which to retrieve the number sequence.
    /// </param>
    /// <returns>
    /// The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher(LedgerJournalName _ledgerJournalName)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>TAMVendRebatePaymentPost</c> class.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TAMVendRebateTable</c> record for which to post payment.
    /// </param>
    public void main(TAMVendRebateTable _tamVendRebateTable)
    {
        TAMVendRebateTable          tamVendRebateTableLocal;
        Description                 transDescription;
        TAMVendRebateParameters     vendRebateParameters = TAMVendRebateParameters::find();

        tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(_tamVendRebateTable.RecId);

        if (this.mustValidate(tamVendRebateTableLocal))
        {
            if (this.validate(tamVendRebateTableLocal))
            {
                ttsbegin;
                TAMVendRebateTableStatusType tamVendRebateTableStatusType = tamVendRebateTableLocal.status();
                if (tamVendRebateTableStatusType.mustRunPayment())
                {
                    tamVendRebateTableStatusType.runPayment();
                }

                if (this.mustPostAccrualReversal(tamVendRebateTableLocal))
                {
                    new TAMVendRebateTableProcess(tamVendRebateTableLocal).postAccrualReversal();
                }               
                
                this.createVendorInvoice(tamVendRebateTableLocal, vendAccount != tamVendRebateTableLocal.VendAccount);
                vendAccount = tamVendRebateTableLocal.VendAccount;

                tamVendRebateTableLocal.selectForUpdate(true);
                tamVendRebateTableLocal.reread();

                tamVendRebateTableLocal.setFinalStatus();

                if (!tamVendRebateTableLocal.ProcessDate)
                {
                    tamVendRebateTableLocal.ProcessDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                if (tamVendRebateTableLocal.validateWrite())
                {
                    tamVendRebateTableLocal.update();
                }
                else
                {
                    throw error("@SYS104318");
                }

                transDescription= strFmt("@MCR40304", tamVendRebateTableLocal.VendRebateId);
                TAMVendRebateTrans::insertFromTAMVendRebateTable(tamVendRebateTableLocal,
                                                                tamVendRebateTableLocal.ledgerPostingAmount(),
                                                                '',
                                                                vendRebateParameters.ManualInvoicing ? '': invoiceId,
                                                                TAMVendRebateTransactionType::VendorPayment,
                                                                transDescription,
                                                                vendRebateParameters.ManualInvoicing);
                ttscommit;
                this.endInfoLog(tamVendRebateTableLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if <c>TAMVendRebateTable</c> must be validated.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///     A <c>TAMVendRebateTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if validation must be done; otherwise, false.
    /// </returns>
    protected boolean mustValidate(TAMVendRebateTable _tamVendRebateTable)
    {
        if (_tamVendRebateTable)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostAccrualReversal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to post accrual journal to reverse out the transactions made against accrual accounts.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///     A <c>TAMVendRebateTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if posting of accrual is required; otherwise, false.
    /// </returns>
    protected boolean mustPostAccrualReversal(TAMVendRebateTable _tamVendRebateTable)
    {
        return (_tamVendRebateTable.JournalRefNum && _tamVendRebateTable.RebateBalance != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>TAMVendRebatePaymentPost</c> class.
    /// </summary>
    public void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invoice ID for the current instance of the <c>TAMVendRebatePaymentPost</c> class.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice ID to set as the invoide ID for the class instance.
    /// </param>
    /// <returns>
    /// The invoice ID for the current instance of the <c>TAMVendRebatePaymentPost</c> class.
    /// </returns>
    public Num parmInvoiceId(Num _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts a vendor invoice for the vendor rebate.
    /// </summary>
    public void postVendorInvoice()
    {
        VendInvoiceInfoLine       vendInvoiceInfoLine;
        VendInvoiceInfoTableRecId vendInvRecId;
        TAMVendRebateTable        tamVendRebateTableLocal;
        TAMVendRebateParameters   vendRebateParameters = TAMVendRebateParameters::find();
        TAMVendRebateTrans        tamVendRebateTrans;

        if (vendInvoiceInfoTable)
        {
            ttsbegin;

            while select forupdate vendInvoiceInfoLine
                order by RecId asc
                    where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                    &&    vendInvoiceInfoLine.ParmId     == vendInvoiceInfoTable.ParmId
                join tamVendRebateTableLocal
                    where tamVendRebateTableLocal.VendRebateId == vendInvoiceInfoLine.Description
                join forupdate tamVendRebateTrans
                    where tamVendRebateTrans.VendRebateId == vendInvoiceInfoLine.Description
                       && tamVendRebateTrans.RebateTransactionType == TAMVendRebateTransactionType::VendorPayment
            {
                // The expense related dimension should go to the line
                vendInvoiceInfoLine.DefaultDimension = tamVendRebateTableLocal.OffsetDefaultDimension;
                vendInvoiceInfoLine.TaxGroup         = tamVendRebateTableLocal.TaxGroup;
                vendInvoiceInfoLine.TaxItemGroup     = tamVendRebateTableLocal.TaxItemGroup;
                vendInvoiceInfoLine.update();

                tamVendRebateTrans.VendInvoiceInfoTableTableRefId = vendInvoiceInfoTable.TableRefId;
                tamVendRebateTrans.VendInvoiceInfoTableParmId = vendInvoiceInfoTable.ParmId;
                tamVendRebateTrans.update();

                // Fully distribute the source document line
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceInfoLine,
                                false, SourceDocumentLineAccountingStatus::FullyDistributed);

            }

            vendInvoiceInfoTable.InclTax = NoYes::No;
            vendInvoiceInfoTable.update();

            // Post the saved vendor invoice
            if (!vendRebateParameters.ManualInvoicing)
            {
                VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets exchange rate information in the <c>LedgerJournalTrans</c>
    /// based on the currency code and transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the values on.
    /// </param>
    protected void setLedgerJournalTransCurrencyExchRate(LedgerJournalTrans  _ledgerJournalTrans)
    {
        _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);

        _ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the vendor account.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The vendor rebate table record to be validated.
    /// </param>
    /// <returns>
    /// true if the values are valid; otherwise, check failed.
    /// </returns>
    protected boolean validate(TAMVendRebateTable _tamVendRebateTable)
    {
        boolean ret = true;

        if (_tamVendRebateTable.vendRebateAgreement().CumulatePurchaseBy != TAMCumulationPeriod::Invoice
            && !_tamVendRebateTable.JournalRefNum)
        {
            ret = checkFailed("@PDS1925");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>