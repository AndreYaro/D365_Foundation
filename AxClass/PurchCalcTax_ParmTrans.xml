<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_ParmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchCalcTax_ParmTrans
extends     PurchCalcTax_Purch
{
    VendDocumentTableMap    parmTable;
    VendDocumentLineMap     parmLine;
    VendDocumentLineMap     prevParmLine;
    VendInvoiceJour         vendInvoiceJour;

    ParmId                  parmId;
    PurchId                 sumPurchId;
    DocumentStatus          documentStatus;

    QueryRun                querySubTable;
    TableId                 queryMarkupTransFrom; // Header, SubHeader, or Line

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        //from PurchCalcTax
        update,
        specQty,
        //From PurchCalcTax_ParmTrans
        parmId,
        sumPurchId,
        documentStatus,
        queryMarkupTransFrom
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    public AmountCur assessableValue_IN()
    {
        return parmLine.VendDocumentLineMap::parmAssessableValue_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        PurchParmLine parmLineLocal;
        PurchLine     purchLineLocal;
        MarkupTrans markupTransLine;
        boolean taxGroupsExist;

        select firstonly RecId from parmLineLocal
                where parmLineLocal.ParmId == parmTable.ParmId &&
                      parmLineLocal.TableRefId == parmTable.TableRefId
            exists join purchLineLocal
                where purchLineLocal.RecId == parmLineLocal.PurchLineRecId &&
                      purchLineLocal.TaxGroup != '' &&
                      purchLineLocal.TaxItemGroup != '';
        if (parmLineLocal != null)
        {
            taxGroupsExist = true;
        }

        if (!taxGroupsExist)
        {
            if (MarkupTrans::doTaxGroupExistsForMarkup(purchTable.TableId, purchTable.RecId))
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstonly RecId from markupTransLine
                where markupTransLine.TaxGroup != '' &&
                      markupTransLine.TaxItemGroup != '' &&
                      !markupTransLine.IsDeleted
            exists join purchLineLocal
                where purchLineLocal.TableId == markupTransLine.TransTableId &&
                      purchLineLocal.RecId == markupTransLine.TransRecId
            exists join parmLineLocal
                where parmLineLocal.PurchLineRecId == purchLineLocal.RecId &&
                      parmLineLocal.ParmId == parmTable.ParmId &&
                      parmLineLocal.TableRefId == parmTable.TableRefId;

            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct   endDisc()
    {
        DiscPct     endDisc;
        AmountCur   calculatedEndDiscBalance;
        // <GIN>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchTotals.tax(this.tax());
        }
        // </GIN>

        // If purchTotals.discPercent() returns zero,  the internal PurchTotal class variable 'endDiscBalances' isn't set during execution of purchTotals.calc().
        // Hence the calls to purchTotals.calc(...) and purchTotals.calculatedEndDiscBalance() can be saved.
        if (purchTotals.discPercent() || this.forceDiscountCalculation())
        {
            // Only calculate totals if not already calculated
            if (!purchTotals.isCalculationComplete())
            {
                purchTotals.calc(false, true);
            }

            calculatedEndDiscBalance = purchTotals.calculatedEndDiscBalance();
        }

        if (calculatedEndDiscBalance)
        {
            endDisc = purchTotals.endDisc(false) * 100 / calculatedEndDiscBalance;
        }
        else
        {
            Debug::assert(parmLine.TableId != tableNum(VendDocumentLineMap));

            if (parmLine.OrigPurchId == '')
            {
                endDisc = 0.0;
            }
            else
            {
                endDisc = parmLine.purchTable().DiscPercent;
            }
        }

        return endDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscPercentWht_IN</Name>
				<Source><![CDATA[
    DiscPct endDiscPercentWht_IN()
    {
        if (!endDiscPercentWht && purchTotals)
        {
            endDiscPercentWht = purchTotals.discPercent();
        }

        return endDiscPercentWht;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (parmTable.FixedExchRate || parmTable.ExchRate)
            return parmTable.ExchRate;
        else
            // <GEEU>
            return super(parmTable.getExchRateDate(_date));
            // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));
        if (parmTable.FixedExchRate || parmTable.ExchRateSecondary)
            return parmTable.ExchRateSecondary;
        else
            // <GEEU>
            return super(parmTable.getExchRateDate(_date));
            // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return parmTable.FixedExchRate == NoYes::Yes ? parmTable.ReportingCurrencyExchangeRate : super(parmTable.getExchRateDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceDiscountCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to force document totals to be calculated when getting the discount percent.
    /// </summary>
    /// <returns>
    /// true if totals must be calculated; otherwise, false.
    /// </returns>
    protected boolean forceDiscountCalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets purch parm line.
    /// </summary>
    /// <returns>
    /// The instance of the <c>PurchParmLine</c> class.
    /// </returns>
    public PurchParmLine getPurchParmLine_IN()
    {
        return parmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecID</Name>
				<Source><![CDATA[
    RecId headingRecID()
    {
        if (parmTable.Ordering == DocumentStatus::PurchaseOrder)
        {
            return purchTable.RecId;
        }
        else
        {
            return parmTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableID</Name>
				<Source><![CDATA[
    TableId headingTableID()
    {
        if (parmTable.Ordering == DocumentStatus::PurchaseOrder)
        {
            return purchTable.TableId;
        }
        else
        {
            return parmTable.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the source record.
    /// </summary>
    /// <returns>
    /// A source record.
    /// </returns>
    internal Common getSource()
    {
        if (parmTable.Ordering == DocumentStatus::PurchaseOrder)
        {
            return purchTable;
        }
        else
        {
            return parmTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableSourceDocumentRecId</Name>
				<Source><![CDATA[
    public RecId headingTableSourceDocumentRecId()
    {
        if (parmTable.Ordering == DocumentStatus::PurchaseOrder)
        {
            return purchTable.SourceDocumentHeader;
        }
        else
        {
            return parmTable.SourceDocumentHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to ignore calculated sales tax and only use the tax amounts from tax adjustments.
    /// </summary>
    /// <returns>
    ///    true if only the tax amounts from tax adjustments should be used; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        if (parmTable.Ordering == DocumentStatus::Invoice || parmTable.Ordering == DocumentStatus::ApproveJournal)
        {
            return parmTable.IgnoreCalculatedSalesTax;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    public void initCursor()
    {
        super();
        queryMarkupTransFrom = this.invoiceDocumentLineTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void initCursorMarkupHeader(TableId tableId, RecId recId)
    {
        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));
        if (this.isInvoiceDocumentType())
        {
            this.initCursorMarkup(parmTable.TableId, parmTable.RecId);
            queryMarkupTransFrom = parmTable.TableId;
        }
        else
        {
            this.initCursorMarkup(purchTable.TableId, purchTable.RecId);
            queryMarkupTransFrom = tableNum(PurchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate  invoiceDate()
    {
        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));
        if (parmTable.useDocumentDate())
            return parmTable.DocumentDate;
        else
            return parmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDocumentLineTableId</Name>
				<Source><![CDATA[
    private TableId invoiceDocumentLineTableId()
    {
        if (this.isInvoiceDocumentType())
        {
            return tableNum(VendInvoiceInfoLine);
        }

        return tableNum(PurchParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current document is an invoice or approval journal.
    /// </summary>
    /// <returns>
    ///    true if the document is an invoice or approval journal; otherwise, false.
    /// </returns>
    protected boolean isInvoiceDocumentType()
    {
        // <GEERU><GEEPL>
        #ISOCountryRegionCodes
        // </GEERU></GEEPL>

        return documentStatus == DocumentStatus::Invoice
            || documentStatus == DocumentStatus::ApproveJournal
        // <GEERU>
            || (documentStatus == DocumentStatus::Facture_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        // </GEERU>
        // <GEEPL>
            || (documentStatus == DocumentStatus::PlSAD      && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        // </GEEPL>
        ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    boolean isNewLine()
    {
        Debug::assert(parmLine.TableId != tableNum(VendDocumentLineMap));
        return !prevParmLine.RecId || prevParmLine.RecId != parmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether sales tax adjustments should not be deleted when sales tax groups are changed on
    ///    the transaction.
    /// </summary>
    /// <returns>
    ///    true if sales tax adjustments should be kept; otherwise, false.
    /// </returns>
    public boolean keepSalesTaxAdjustments()
    {
        VendParameters vendParameters;

        if (parmTable.Ordering == DocumentStatus::Invoice || parmTable.Ordering == DocumentStatus::ApproveJournal)
        {
            vendParameters = VendParameters::find();
            if (vendParameters)
            {
                return vendParameters.KeepSalesTaxAdjustmentsForPO;
            }
            else
            {
                return false;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    Voucher ledgerVoucher()
    {
        return vendInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxTrans</Name>
				<Source><![CDATA[
    protected boolean loadTaxTrans()
    {
        if (vendInvoiceJour.SourceDocumentHeader)
        {
            return TaxTrans::existBySourceDocumentHeader(vendInvoiceJour.SourceDocumentHeader);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTotalRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns source document <c>RecId</c>.
    /// </summary>
    /// <returns>
    /// A <c>RecId</c> of source document.
    /// </returns>
    protected RecId markupTotalRecId()
    {
        return this.recID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return parmLine.VendDocumentLineMap::parmMaximumRetailPrice_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        VendDocumentTableMap    _parmTable,
        ParmId                  _parmId,
        PurchId                 _sumPurchId,
        DocumentStatus          _documentStatus,
        boolean                 skipInit = false)
    {
        parmTable = _parmTable;
        if (!skipInit)
        {
            parmLine = VendDocumentLineMap::newFromHeader(parmTable);
        }

        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));

        super(parmTable.purchTable());

        parmId          = _parmId;
        sumPurchId      = _sumPurchId;
        documentStatus  = _documentStatus;

        if (this.isInvoiceDocumentType())
        {
            if ((documentStatus == DocumentStatus::Invoice 
                || documentStatus == DocumentStatus::ApproveJournal
                // <GEERU>
                || (documentStatus == DocumentStatus::Facture_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])))
                // </GEERU>
                && fieldName2Id(parmTable.TableId, 'SourceDocumentHeader'))
            {
                vendInvoiceJour = VendInvoiceJour::findSourceDocumentHeader(parmTable.SourceDocumentHeader);
            }
            else
            {
                vendInvoiceJour = VendInvoiceJour::findFromPurchParmTable(parmTable.Num, parmTable.TransDate, parmTable.InvoiceAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public Common nextLine()
    {
        Common  nextLine;

        purchLine = null;

        prevParmLine = parmLine.data();
        parmLine = VendDocumentLineMap::newFromHeader(parmTable);

        while (queryTransact.next())
        {
            nextLine = this.queryGet(queryTransact);
            if (nextLine)
            {
                if (this.isInvoiceDocumentType())
                {
                    this.initCursorMarkupLine(parmLine.TableId, parmLine.RecId);
                }
                else
                {
                    purchLine = nextLine;
                    this.initCursorMarkupLine(purchLine.TableId, purchLine.RecId);
                }
                break;
            }
        }

        this.setLineReasonTableRefRecId(parmLine.ReasonTableRef);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    public MarkupTrans  nextMarkupLine()
    {
        VendDocumentSubTableMap parmSubTable;
        VendInvoiceInfoSubTable emptyVendInvoiceInfoSubTable;
        PurchParmSubTable purchParmSubTable;
        MarkupTrans localMarkupTrans;

        if (this.isInvoiceDocumentType())
        {
            parmSubTable = emptyVendInvoiceInfoSubTable;
        }
        else
        {
            parmSubTable = purchParmSubTable;
        }

        switch (queryMarkupTransFrom) // Which table are we returning MarkupTrans for?
        {
        case tableNum(PurchTable):
            localMarkupTrans = super();
            if (localMarkupTrans)
            {
                break;
            }
            // done with PurchTable, on to PurchLine
            queryMarkupTransFrom = tableNum(PurchLine);
            this.initCursorMarkup(purchLine.TableId, purchLine.RecId);
            localMarkupTrans = this.nextMarkupLine();
            break;
        case tableNum(PurchLine):
            localMarkupTrans = super();
            break;
        case tableNum(VendInvoiceInfoTable):
        case tableNum(PurchParmTable):
            localMarkupTrans = super();
            if (localMarkupTrans)
            {
                break;
            }
            // done with PurchParmTable, on to PurchParmSubTable
            queryMarkupTransFrom = parmSubTable.TableId;
            querySubTable = null;
            localMarkupTrans = this.nextMarkupLine();
            break;
        case tableNum(VendInvoiceInfoSubTable):
        case tableNum(PurchParmSubTable):
            if (!querySubTable)
            {
                querySubTable = this.queryBuildPurchParmSubTable();
            }
            else
            {
                localMarkupTrans = super();
                if (localMarkupTrans)
                {
                    break;
                }
            }
            while (querySubTable.next())
            {
                parmSubTable = querySubTable.get(parmSubTable.TableId);
                if (parmSubTable)
                {
                    this.initCursorMarkup(parmSubTable.TableId, parmSubTable.RecId);
                    localMarkupTrans = super();
                }
                if (localMarkupTrans)
                {
                    break;
                }
            }
            break;
        case tableNum(VendInvoiceInfoLine):
        case tableNum(PurchParmLine): // PurchParmLine
            localMarkupTrans = super();
            break;
        }
        return localMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container   packedContainer = [#CurrentVersion, #CurrentList, buf2Con(source), buf2Con(parmTable),
        buf2Con(parmLine), buf2Con(prevParmLine),  buf2Con(vendInvoiceJour), buf2Con(markupTrans),
        buf2Con(purchLine), querySubTable.pack(), queryTransact.pack()];

        return packedContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus_IN</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus_IN()
    {
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus()
    {
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    Object queryBuild()
    {
        Query query;
        QueryBuildDataSource qbds;

        TableId tableId = this.invoiceDocumentLineTableId();
        FieldId fieldId = VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineMap, PurchLineRecId), tableId);
        query = parmTable.queryLine();
        qbds = query.dataSourceTable(tableId);
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && qbds)
        {
        qbds.addSortField(fieldId);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildPurchParmSubTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildPurchParmSubTable()
    {
        return new QueryRun(parmTable.querySubTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    public Common queryGet(QueryRun _queryRun)
    {
        PurchLine localPurchLine;

        if (_queryRun.changed(tableNum(PurchParmLine)))
        {
            parmLine = _queryRun.get(tableNum(PurchParmLine));
            if (parmLine)
            {
                localPurchLine = parmLine.purchLine();
                purchLine.PurchReceivedNow = parmLine.ReceiveNow;
                purchLine.QtyOrdered = parmLine.InventNow;
                purchLine.LineAmount = parmLine.LineAmount;
            }
        }
        return localPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxRecalculationsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to recalculate the tax for the current line.
    /// </summary>
    /// <returns>
    /// true if tax recalculation will be skipped; otherwise, false.
    /// </returns>
    public boolean skipTaxRecalculationsForLine()
    {
        PurchParmLine purchParmLine;
        boolean skip;

        if (parmLine.TableId == tableNum(PurchParmLine))
        {
            purchParmLine = parmLine;
            skip = purchParmLine.PreviousReceiveNow == purchParmLine.ReceiveNow;
        }

        return skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;
        
        if (markupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            transLineAmount = parmLine.purchLine().interCompanyLineAmount(this.transQty(), this.invoiceDate(), tax);
        }
        else if (Project::Enabled() && this.canApplyRetention() && ProjParameters::find().VendorTaxOptions == ProjDefaultTaxOptions::SplittingTaxByRetainedAmount)
        {
            transLineAmount = this.transRetentionLineAmount();
        }
        else
        {
            transLineAmount = parmLine.LineAmount;
        }

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRetentionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Line Amount based on vendor retention amounts specified on project for the transaction.
    /// </summary>
    /// <returns>
    /// Returns the calculated retention line amount.
    /// </returns>
    protected AmountCur transRetentionLineAmount()
    {
        AmountCur               retentionLineAmount;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        PurchLine               purchLineLoc = parmLine.purchLine();

        retentionLineAmount = parmLine.LineAmount;
        
        if (purchLineLoc.ProjId && purchLineLoc.hasRetentionTerms()
            && ProjParameters::find().VendorTaxOptions == ProjDefaultTaxOptions::SplittingTaxByRetainedAmount)
        {
            select firstonly PSARetainageAmount, PSAReleaseAmount
                from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ParmId == this.vendInvoiceInfoTable().ParmId
                    && vendInvoiceInfoLine.PurchLineRecId == purchLineLoc.RecId;

            if (vendInvoiceInfoLine.PSARetainageAmount)
            {
                retentionLineAmount = parmLine.LineAmount - vendInvoiceInfoLine.PSARetainageAmount;
            }

            if (vendInvoiceInfoLine.PSAReleaseAmount)
            {
                retentionLineAmount = retentionLineAmount + vendInvoiceInfoLine.PSAReleaseAmount;
            }
        }

        return retentionLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return parmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty transQty()
    {
        return parmLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (parmTable.FixedExchRate)
            return parmTable.euroTriangulation;
        else
            return Currency::triangulation(purchTable.CurrencyCode, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        //containers for table buffers
        container               packedSource;
        container               packedParmTable;
        container               packedParmLine;
        container               packedPrevParmLine;
        container               packedVendInvoiceJour;
        container               packedMarkupTrans;
        container               packedPurchLine;

        Version                 version = RunBase::getVersion(packedClass);
        PackedQueryRun          querySubTablePacked;
        PackedQueryRun          queryTransactPacked;
        VendInvoiceInfoLine     blankVendInvoiceInfoLine;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSource, packedParmTable, packedParmLine, packedPrevParmLine,
                packedVendInvoiceJour, packedMarkupTrans, packedPurchLine, querySubTablePacked, queryTransactPacked] = packedClass;

                //initialize the maps so that they have the correct table id for con2buf.
                if (conPeek(packedParmLine,1) == tableNum(VendInvoiceInfoLine))
                {
                    parmLine = blankVendInvoiceInfoLine;
                }
                else
                {
                    throw error(strFmt("@SYS19306",funcName()));
                }

                con2Buf(packedSource, source);
                con2Buf(packedParmTable, parmTable);
                con2Buf(packedParmLine, parmLine);
                con2Buf(packedPrevParmLine, prevParmLine);
                con2Buf(packedVendInvoiceJour, vendInvoiceJour);
                con2Buf(packedMarkupTrans, markupTrans);

                if (SysQuery::isPackedOk(querySubTablePacked))
                {
                    querySubTable = new QueryRun(querySubTablePacked);
                }

                if (SysQuery::isPackedOk(queryTransactPacked))
                {
                    queryTransact = new QueryRun(queryTransactPacked);
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a tax calculation uses sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the tax calculation uses sales tax adjustments; otherwise, false.
    /// </returns>
    public boolean useSalesTaxAdjustments()
    {
        if (TaxParameters::isCustomsEnable_IN() && this.parmDocumentStatus_IN() == DocumentStatus::BillOfEntry_IN)
        {
            return true;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return (parmTable.Ordering == DocumentStatus::PurchaseOrder ||
                parmTable.Ordering == DocumentStatus::Invoice       ||
                parmTable.Ordering == DocumentStatus::ApproveJournal
            // <GEERU>
             || parmTable.Ordering == DocumentStatus::Facture_RU
            // </GEERU>
            // <GEEPL>
             || parmTable.Ordering == DocumentStatus::PlSAD
            // </GEEPL>
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        if (parmTable.Ordering == DocumentStatus::PurchaseOrder ||
            parmTable.Ordering == DocumentStatus::Invoice       ||
            parmTable.Ordering == DocumentStatus::ApproveJournal
        // <GEERU>
         || parmTable.Ordering == DocumentStatus::Facture_RU
        // </GEERU>
        // <GEEPL>
         || parmTable.Ordering == DocumentStatus::PlSAD
        // </GEEPL>
            )
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used by various financial transactions to pass information from the financial transaction down to the tax calculation engine.
    /// </summary>
    /// <returns>
    /// A container loaded with various fields needed by the tax calculation engine.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W           vatDate;
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        VendTable              vendTable;
        IntraComVATDueDate_W   useIntrComVatDate;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        NoYes                  postponeVAT;
        VendInvoiceInfoTable   vendInvoiceInfoTable = this.vendInvoiceInfoTable();
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W = vendInvoiceInfoTable.vendInvoiceInfoTable_W();
        #EECountryRegionCodes

        vatDate             = vendInvoiceInfoTable_W.VatDueDate_W;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            documentDate        = vendInvoiceInfoTable.DocumentDate;
            vendInvoiceJour     = VendInvoiceJour::findSourceDocumentHeader(this.vendInvoiceInfoTable().SourceDocumentHeader);
            useIntrComVatDate   = !vendInvoiceJour.creditNote();
            postponeVAT         = NoYes::No;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxPeriodPaymentCode = vendInvoiceInfoTable_W.TaxPeriodPaymentCode_PL;
            vendTable            = VendTable::find(this.vendInvoiceInfoTable().InvoiceAccount);
            custVendName         = vendTable.name();
            addressing           = vendTable.invoiceAddress().Address;
            if (purchTable.VATNum)
            {
                vatNum = purchTable.VATNum;
            }
            else
            {
                vatNum = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, vendInvoiceJour.InvoiceDate);
            }
        }

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 postponeVAT,
                 useIntrComVatDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetICMSReceivableLongTerm_BR</Name>
				<Source><![CDATA[
    public boolean assetICMSReceivableLongTerm_BR()
    {
        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (!this.isInvoiceDocumentType())
        {
            return false;
        }

        vendInvoiceInfoLine = parmLine;
        vendInvoiceInfoLine_Asset = vendInvoiceInfoLine.vendInvoiceInfoLine_Asset();

        return vendInvoiceInfoLine_Asset.ICMSReceivableLongTerm_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetPISCOFINSReceivableLongTerm</Name>
				<Source><![CDATA[
    public boolean assetPISCOFINSReceivableLongTerm()
    {
        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (!this.isInvoiceDocumentType())
        {
            return false;
        }

        vendInvoiceInfoLine = parmLine;
        vendInvoiceInfoLine_Asset = vendInvoiceInfoLine.vendInvoiceInfoLine_Asset();

        return vendInvoiceInfoLine_Asset.PISCOFINSReceivableLongTerm_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineRecId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets RecId of <c>PurchParmLine</c> transaction.
    /// </summary>
    /// <returns>
    /// RecId of <c>PurchParmLine</c> transaction.
    /// </returns>
    public RefRecId parmLineRecId_IN()
    {
        return parmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TableId of <c>PurchParmLine</c> transaction.
    /// </summary>
    /// <returns>
    /// TableId of <c>PurchParmLine</c> transaction.
    /// </returns>
    public TableId parmLineTableId_IN()
    {
        return parmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end discount amount for a line.
    /// </summary>
    /// <param name="_baseAmount">
    /// The base amount for the discount calculation.
    /// </param>
    /// <returns>
    /// The end discount amount.
    /// </returns>
    public DiscAmount lineEndDiscAmount(TaxBaseCur _baseAmount)
    {
        DiscAmount lineEndDisc;
        
        if (purchTotals)
        {
            lineEndDisc = purchTotals.lineEndDiscBalance(parmLine.RecId);
        }

        DiscPct discountPercent = this.endDisc();

        if (!lineEndDisc && discountPercent && parmLine.endDisc())
        {
            lineEndDisc = _baseAmount * discountPercent / 100;
        }

        return lineEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction record ID that is associated to a purch parm line.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction record for a purch parm line.
    /// </returns>
    public recId transRecId()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction record that is associated to a purch parm line.
    /// </summary>
    /// <returns>
    ///    The table ID of the transaction record that is associated to a purch parm line.
    /// </returns>
    public tableId transTableId()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        boolean ret = true;

        if (fieldName2Id(parmTable.TableId, fieldStr(VendDocumentTableMap, 'SourceDocumentHeader'))
            && parmTable.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(parmTable.SourceDocumentHeader);
        }

        if(TaxUncommitted::traceRecalculateTaxForFinalizedSourceDocument(ret))
        {
            str callStacking = TaxUncommitted::callStackInfo();
            taxEventSourceLog.RecalculateTaxForFinalizedSourceDocument(tableId2Name(parmTable.TableId), parmTable.SourceDocumentHeader, callStacking);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the parm table record.
    /// </summary>
    /// <returns>
    /// The parm table record.
    /// </returns>
    internal Common getParmTable()
    {
        return parmTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>