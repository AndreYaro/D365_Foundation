<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByAncestor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByAncestor</c> class manages the budget allocation from
/// ancestor budget plan to the currenct budget plan.
/// </summary>
public class BudgetPlanAllocateByAncestor extends BudgetPlanAllocateByPlan
{
    Map     ledgerDimensionsApplicableForTargetPlan;
    boolean areExistingLinesDeletedForTarget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new budget plan lines in the budget plan allocated from the ancestor budget plan.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;
        DimensionAttribute               dimensionAttribute;
        OMHierarchyRelationship          hierarchyRelationship;
        OMOperatingUnit                  operatingUnit;
        BudgetPlanHeader                 targetBudgetPlanHeader;
        BudgetPlanLine                   targetBudgetPlanLineLocal;
        BudgetPlanHeaderRecId            targetbudgetPlanHeaderRecIdLocal;
        utcDateTime                      now = DateTimeUtil::utcNow();
        TableId                          operatingUnitTableId = tableNum(OMOperatingUnit);
        OrganizationHierarchyTypeRecId   hierarchyTypeRecId;

        if (parentBudgetPlanHeader.RecId)
        {
            hierarchyTypeRecId = BudgetPlanningProcess::find(parentBudgetPlanHeader.BudgetPlanningProcess).OrganizationHierarchyType;

            // Create a set of ledger dimensions applicable for the target budget plan.
            if (!ledgerDimensionsApplicableForTargetPlan.exists(_sourceBudgetPlanLine.LedgerDimension))
            {
                // Get the organizations for dimension attribute
                select validTimeState(now) RecId from operatingUnit
                    join RecId from targetBudgetPlanHeader
                    where targetBudgetPlanHeader.BudgetingOrganization   == operatingUnit.RecId
                        && targetBudgetPlanHeader.RecId == targetBudgetPlanHeaderRecId
                        exists join hierarchyRelationship
                        where hierarchyRelationship.HierarchyType == hierarchyTypeRecId
                            exists join dimensionAttributeLevelValueView
                            where dimensionAttributeLevelValueView.ValueCombinationRecId == _sourceBudgetPlanLine.LedgerDimension
                                && dimensionAttributeLevelValueView.EntityInstance       == targetBudgetPlanHeader.BudgetingOrganization
                                exists join dimensionAttribute
                                where dimensionAttribute.RecId                 == dimensionAttributeLevelValueView.DimensionAttribute
                                    && dimensionAttribute.BackingEntityTableId == operatingUnitTableId;

                ledgerDimensionsApplicableForTargetPlan.insert(_sourceBudgetPlanLine.LedgerDimension, targetBudgetPlanHeader.RecId ? NoYes::Yes : NoYes::No);
            }

            if (ledgerDimensionsApplicableForTargetPlan.lookup(_sourceBudgetPlanLine.LedgerDimension) == NoYes::Yes)
            {
                if (!areExistingLinesDeletedForTarget && this.canDeleteExistingTargetLines())
                {
                    delete_from targetBudgetPlanLineLocal
                        where targetBudgetPlanLineLocal.BudgetPlanHeader    == targetBudgetPlanHeaderRecId
                            && targetBudgetPlanLineLocal.BudgetPlanScenario == targetBudgetPlanScenarioRecId;

                    areExistingLinesDeletedForTarget = true;
                }

                super(_sourceBudgetPlanLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        super(_budgetPlanAllocateRequest);

        BudgetPlanAllocateRequestByAncestor budgetPlanAllocateRequestByAncestor = _budgetPlanAllocateRequest;

        targetBudgetPlanHeaderRecId = budgetPlanAllocateRequestByAncestor.parmTargetBudgetPlanHeaderRecId();

        ledgerDimensionsApplicableForTargetPlan = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>