<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustConsistencyCheck_LinkTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustConsistencyCheck_LinkTable extends CustConsistencyCheck implements BatchRetryable
{
    boolean     releaseUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustConfirmSalesLink</Name>
				<Source><![CDATA[
        void checkCustConfirmSalesLink()
    {
        CustConfirmJour             custConfirmJour;
        CustConfirmTrans            custConfirmTrans;
        CustConfirmSalesLink        custConfirmSalesLink;
        CustConfirmSalesLink        custConfirmSalesLinkNew;
        SalesTable                  salesTable;
        SalesTableDelete            salesTableDelete;
        boolean                     cancelSales;
        RecordInsertList            recordInsertList = new RecordInsertList(tableNum(CustConfirmSalesLink));

        setPrefix(strFmt("@SYS26373", tableId2pname(tableNum(CustConfirmSalesLink))));

        progress.setTotal(2,2);
        progress.setText(getPrefix(),2);
        progress.incCount(1,2);

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            cancelSales = SalesParameters::find().CancelSales;

            ttsbegin;

            while select custConfirmTrans
                group by OrigSalesId, SalesId, ConfirmId, ConfirmDate
                where custConfirmTrans.OrigSalesId != ''

                join custConfirmJour
                group by ParmId, ConfirmId, ConfirmDate, SalesId, InvoiceAccount, OrderAccount, DeliveryName, DeliveryPostalAddress
                where custConfirmJour.ConfirmId     == custConfirmTrans.ConfirmId   &&
                      custConfirmJour.ConfirmDate   == custConfirmTrans.ConfirmDate &&
                      custConfirmJour.SalesId       == custConfirmTrans.SalesId

                notexists join custConfirmSalesLink
                    where custConfirmSalesLink.OrigSalesId  == custConfirmTrans.OrigSalesId  &&
                          custConfirmSalesLink.ConfirmId    == custConfirmTrans.ConfirmId    &&
                          custConfirmSalesLink.ConfirmDate  == custConfirmTrans.ConfirmDate
            {
                if (! releaseUpdate)
                {
                    setPrefix(#prefixField(custConfirmTrans,origSalesId));
                    warning("@SYS78896");
                    this.updateCorrected();
                }

                salesTable.clear();
                salesTableDelete.clear();

                select firstonly SalesId, SalesName, DeliveryPostalAddress, PurchOrderFormNum, CustomerRef, RecId from salesTable
                    index hint SalesIdx
                        where salesTable.SalesId == custConfirmTrans.OrigSalesId;

                if (!salesTable.SalesId && cancelSales)
                {
                    salesTableDelete = SalesTableDelete::find(custConfirmTrans.OrigSalesId);
                    if (salesTableDelete.SalesTable && salesTableDelete.Cancelled == Voided::Voided)
                        [salesTable] = salesTableDelete.SalesTable;
                }

                custConfirmSalesLinkNew.clear();
                custConfirmSalesLinkNew.initFromCustConfirmJour(custConfirmJour);
                custConfirmSalesLinkNew.OrigSalesId = custConfirmTrans.OrigSalesId;
                custConfirmSalesLinkNew.initFromSalesTable(salesTable);
                recordInsertList.add(custConfirmSalesLinkNew);
            }
            if (! releaseUpdate)
            {
                 this.updateNotCorrected();
            }

            if (recordInsertList.usageCount())
                recordInsertList.insertDatabase();

            ttscommit;
        }
        else
        {
            while select custConfirmTrans
                group by OrigSalesId, SalesId, ConfirmId, ConfirmDate
                where custConfirmTrans.OrigSalesId != ''
                notexists join custConfirmSalesLink
                    where custConfirmSalesLink.OrigSalesId  == custConfirmTrans.OrigSalesId &&
                          custConfirmSalesLink.ConfirmId    == custConfirmTrans.ConfirmId   &&
                          custConfirmSalesLink.ConfirmDate  == custConfirmTrans.ConfirmDate
            {
                setPrefix(#prefixField(custConfirmTrans,origSalesId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustInvoicesalesLink</Name>
				<Source><![CDATA[
        void checkCustInvoicesalesLink()
    {
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        CustInvoiceTable            custInvoiceTable;
        CustInvoiceSalesLink        custInvoiceSalesLink;
        CustInvoiceSalesLink        newCustInvoiceSalesLink;
        SalesTable                  salesTable;
        SalesTableDelete            salesTableDelete;
        boolean                     cancelSales;
        container                   packedTable;
        RecordInsertList            recordInsertList = new RecordInsertList(tableNum(CustInvoiceSalesLink));

        setPrefix(strFmt("@SYS26373", tableId2pname(tableNum(CustInvoiceSalesLink))));
        progress.setText(getPrefix(),2);
        progress.setTotal(2,2); // so we can se something happens ..
                                // takes to long time on a large database to do a select count(recId)
        progress.incCount(1,2);

        ttsbegin;

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            cancelSales = SalesParameters::find().CancelSales;

            while select custInvoiceTrans
                group by OrigSalesId, InvoiceDate, InvoiceId, NumberSequenceGroup, SalesId
                where custInvoiceTrans.OrigSalesId != ''

                join custInvoiceJour
                group by InvoiceId, InvoiceDate, NumberSequenceGroup, ParmId, SalesId, InvoiceAccount, OrderAccount, InvoicingName, InvoicePostalAddress, RecId
                    where   custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId   &&
                            custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate &&
                            custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup &&
                            custInvoiceJour.SalesId             == custInvoiceTrans.SalesId &&
                            custInvoiceJour.RefNum              != RefNum::Cust //Exclude free text invoices

                notexists join custInvoiceSalesLink
                where custInvoiceSalesLink.OrigSalesId == custInvoiceTrans.OrigSalesId
                  &&  custInvoiceSalesLink.InvoiceDate == custInvoiceTrans.InvoiceDate
                  &&  custInvoiceSalesLink.InvoiceId   == custInvoiceTrans.InvoiceId
            {
                if (! releaseUpdate)
                {
                    setPrefix(#prefixField(custInvoiceTrans,origSalesId));
                    warning("@SYS78896");
                    this.updateCorrected();
                }

                salesTable.clear();

                if (cancelSales)  // decide which way to go ...
                {
                    salesTableDelete = SalesTableDelete::find(custInvoiceTrans.OrigSalesId);
                    if (salesTableDelete.SalesTable && salesTableDelete.Cancelled == Voided::Voided)
                        [salesTable] = salesTableDelete.SalesTable;
                    else
                    {
                        select firstonly SalesId, SalesName, DeliveryPostalAddress, PurchOrderFormNum, CustomerRef, RecId from salesTable
                            index hint SalesIdx
                                where salesTable.SalesId == custInvoiceTrans.OrigSalesId;
                    }
                }
                else
                {
                    select firstonly SalesId, SalesName, DeliveryPostalAddress, PurchOrderFormNum, CustomerRef, RecId from salesTable
                        index hint SalesIdx
                            where salesTable.SalesId == custInvoiceTrans.OrigSalesId;

                    if (!salesTable.SalesId)
                    {
                        packedTable = SalesTableDelete::find(custInvoiceTrans.OrigSalesId).SalesTable;
                        if (packedTable)
                            [salesTable] = packedTable;
                    }
                }

                newCustInvoiceSalesLink.clear();
                newCustInvoiceSalesLink.initFromCustInvoiceJour(custInvoiceJour);
                newCustInvoiceSalesLink.OrigSalesId      = custInvoiceTrans.OrigSalesId;
                newCustInvoiceSalesLink.initFromSalesTable(salesTable);
                recordInsertList.add(newCustInvoiceSalesLink);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }

            if (recordInsertList.usageCount())
                recordInsertList.insertDatabase();
        }
        else
        {
            while select custInvoiceTrans
                group by OrigSalesId, InvoiceDate, InvoiceId, NumberSequenceGroup, SalesId
                where custInvoiceTrans.OrigSalesId != ''

                notexists join custInvoiceSalesLink
                    where custInvoiceSalesLink.OrigSalesId == custInvoiceTrans.OrigSalesId &&
                          custInvoiceSalesLink.InvoiceId   == custInvoiceTrans.InvoiceId
            {
                select RecId from custInvoiceTable
                    where custInvoiceTable.InvoiceId           == custInvoiceTrans.InvoiceId
                    &&  custInvoiceTable.InvoiceDate         == custInvoiceTrans.InvoiceDate
                    &&  custInvoiceTable.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup;

                if (custInvoiceTable.RecId)
                {
                    continue;
                }

                setPrefix(#prefixField(custInvoiceTrans,origSalesId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustPackingSlipSalesLink</Name>
				<Source><![CDATA[
        void checkCustPackingSlipSalesLink()
    {
        CustPackingSlipJour         custPackingSlipJour;
        CustPackingSlipTrans        custPackingSlipTrans;
        CustPackingSlipSalesLink    custPackingSlipSalesLink;
        CustPackingSlipSalesLink    custPackingSlipSalesLinkNew;
        SalesTable                  salesTable;
        SalesTableDelete            salesTableDelete;
        boolean                     cancelSales;
        RecordInsertList            recordInsertList = new RecordInsertList(tableNum(CustPackingSlipSalesLink));

        setPrefix(strFmt("@SYS26373", tableId2pname(tableNum(CustPackingSlipSalesLink))));
        progress.setTotal(3,2);
        progress.setText(getPrefix(),2);

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            ttsbegin;
                delete_from custPackingSlipSalesLink
                    where custPackingSlipSalesLink.ParmId == "";
            ttscommit;

            custPackingSlipSalesLink.clear();

            progress.incCount(1,2);

            cancelSales = SalesParameters::find().CancelSales;

            ttsbegin;

            while select custPackingSlipTrans
                group by OrigSalesId, SalesId, PackingSlipId, DeliveryDate, NumberSequenceGroup
                where custPackingSlipTrans.OrigSalesId != ''

                join custPackingSlipJour
                group by ParmId, SalesId, PackingSlipId, DeliveryDate, OrderAccount, InvoiceAccount, NumberSequenceGroup
                where custPackingSlipJour.PackingSlipId         ==  custPackingSlipTrans.PackingSlipId  &&
                      custPackingSlipJour.DeliveryDate          ==  custPackingSlipTrans.DeliveryDate   &&
                      custPackingSlipJour.SalesId               ==  custPackingSlipTrans.SalesId        &&
                      custPackingSlipJour.NumberSequenceGroup   ==  custPackingSlipTrans.NumberSequenceGroup

                notexists join custPackingSlipSalesLink
                    where custPackingSlipSalesLink.OrigSalesId   == custPackingSlipTrans.OrigSalesId   &&
                          custPackingSlipSalesLink.PackingSlipId == custPackingSlipTrans.PackingSlipId &&
                          custPackingSlipSalesLink.DeliveryDate  == custPackingSlipTrans.DeliveryDate
            {
                if (! releaseUpdate)
                {
                    setPrefix(#prefixField(custPackingSlipTrans,origSalesId));
                    warning(strFmt("@SYS78913","@SYS7632"));
                    this.updateCorrected();
                }

                salesTable.clear();
                salesTableDelete.clear();

                select firstonly SalesId, SalesName, DeliveryPostalAddress, PurchOrderFormNum, CustomerRef, RecId from salesTable
                    index hint SalesIdx
                        where salesTable.SalesId == custPackingSlipTrans.OrigSalesId;

                if (!salesTable.SalesId && cancelSales)
                {
                    salesTableDelete = SalesTableDelete::find(custPackingSlipTrans.OrigSalesId);
                    if (salesTableDelete.SalesTable && salesTableDelete.Cancelled == Voided::Voided)
                        [salesTable] = salesTableDelete.SalesTable;
                }

                custPackingSlipSalesLinkNew.clear();
                custPackingSlipSalesLinkNew.initFromCustPackingSlipJour    (custPackingSlipJour);
                custPackingSlipSalesLinkNew.OrigSalesId = custPackingSlipTrans.OrigSalesId;
                custPackingSlipSalesLinkNew.initFromSalesTable(salesTable);
                recordInsertList.add(custPackingSlipSalesLinkNew);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }

            if (recordInsertList.usageCount())
                recordInsertList.insertDatabase();

            ttscommit;
        }
        else
        {
            while select custPackingSlipTrans
                group by OrigSalesId, SalesId, PackingSlipId, DeliveryDate, NumberSequenceGroup
                where custPackingSlipTrans.OrigSalesId != ''
                notexists join custPackingSlipSalesLink
                    where custPackingSlipSalesLink.OrigSalesId   == custPackingSlipTrans.OrigSalesId    &&
                          custPackingSlipSalesLink.PackingSlipId == custPackingSlipTrans.PackingSlipId  &&
                          custPackingSlipSalesLink.DeliveryDate  == custPackingSlipTrans.DeliveryDate
            {
                setPrefix(#prefixField(custPackingSlipTrans,origSalesId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();

            while select custPackingSlipSalesLink
                where custPackingSlipSalesLink.ParmId            == ""
            {
                setPrefix(#prefixField(custPackingSlipSalesLink,origSalesId));
                warning(strFmt("@SYS78913","@SYS7632"));
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustQuotationSalesLink</Name>
				<Source><![CDATA[
        void checkCustQuotationSalesLink()
    {
        CustQuotationJour           custQuotationJour;
        CustQuotationTrans          custQuotationTrans;
        CustQuotationSalesLink      custQuotationSalesLink;
        CustQuotationSalesLink      custQuotationSalesLinkNew;
        SalesTable                  salesTable;
        SalesTableDelete            salesTableDelete;
        boolean                     cancelSales;
        RecordInsertList            recordInsertList = new RecordInsertList(tableNum(CustQuotationSalesLink));

        setPrefix(strFmt("@SYS26373", tableId2pname(tableNum(CustQuotationSalesLink))));
        progress.setText(getPrefix(),2);
        progress.setTotal(2,2);
        progress.incCount(1,2);

        if (this.checkFix() ==  CheckFix::Fix || releaseUpdate)
        {
            cancelSales = SalesParameters::find().CancelSales;

            ttsbegin;

            while select custQuotationTrans
                group by OrigSalesId, SalesId, QuotationId, QuotationDate
                where custQuotationTrans.OrigSalesId != ''

                join custQuotationJour
                group by ParmId, SalesId, QuotationId, QuotationDate, OrderAccount, InvoiceAccount
                where custQuotationJour.SalesId         ==  custQuotationTrans.SalesId      &&
                      custQuotationJour.QuotationId     ==  custQuotationTrans.QuotationId  &&
                      custQuotationJour.QuotationDate   ==  custQuotationTrans.QuotationDate

                notexists join custQuotationSalesLink
                    where custQuotationSalesLink.OrigSalesId    == custQuotationTrans.OrigSalesId &&
                          custQuotationSalesLink.QuotationId    == custQuotationTrans.QuotationId &&
                          custQuotationSalesLink.QuotationDate  == custQuotationTrans.QuotationDate
            {
                if (! releaseUpdate)
                {
                    setPrefix(#prefixField(custQuotationTrans,origSalesId));
                    warning("@SYS78896");
                    this.updateCorrected();
                }

                salesTable.clear();
                salesTableDelete.clear();

                select firstonly SalesId, SalesName, DeliveryPostalAddress, PurchOrderFormNum, CustomerRef, RecId from salesTable
                    index hint SalesIdx
                        where salesTable.SalesId == custQuotationTrans.OrigSalesId;

                if (!salesTable.SalesId && cancelSales)
                {
                    salesTableDelete = SalesTableDelete::find(custQuotationTrans.OrigSalesId);
                    if (salesTableDelete.SalesTable && salesTableDelete.Cancelled == Voided::Voided)
                        [salesTable] = salesTableDelete.SalesTable;
                }

                custQuotationSalesLinkNew.clear();
                custQuotationSalesLinkNew.initFromCustQuotationJour(custQuotationJour);
                custQuotationSalesLinkNew.OrigSalesId = custQuotationTrans.OrigSalesId;
                custQuotationSalesLinkNew.initFromSalesTable(salesTable);
                recordInsertList.add(custQuotationSalesLinkNew);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }

            if (recordInsertList.usageCount())
                recordInsertList.insertDatabase();

            ttscommit;
        }
        else
        {
            while select custQuotationTrans
                group by OrigSalesId, SalesId, QuotationId, QuotationDate
                where custQuotationTrans.OrigSalesId != ''
                notexists join custQuotationSalesLink
                    where custQuotationSalesLink.OrigSalesId    == custQuotationTrans.OrigSalesId &&
                          custQuotationSalesLink.QuotationId    == custQuotationTrans.QuotationId &&
                          custQuotationSalesLink.QuotationDate  == custQuotationTrans.QuotationDate
            {
                setPrefix(#prefixField(custQuotationTrans,origSalesId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSpickingRouteLink</Name>
				<Source><![CDATA[
        void checkWMSpickingRouteLink()
    {
        WMSPickingRoute         wmsPickingRoute;
        WMSOrderTrans           wmsOrderTrans;
        WMSPickingRouteLink     wmsPickingRouteLink;
        WMSPickingRouteLink     wmsPickingRouteLinkExists;
        RecordInsertList        recordInsertList = new RecordInsertList(tableNum(WMSPickingRouteLink));

        setPrefix(strFmt("@SYS26373", tableId2pname(tableNum(WMSPickingRouteLink))));

        progress.setTotal(2,2);
        progress.setText(getPrefix(),2);
        progress.incCount(1,2);

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            ttsbegin;

            insert_recordset wmsPickingRouteLink(PickingRouteId,InventTransRefId,ActivationDateTime,InventTransType,OrigInventTransRefId)
                select PickingRouteID,TransRefId,ActivationDateTime,TransType from wmsPickingRoute
                group by PickingRouteID,TransRefId,ActivationDateTime,TransType
                    where wmsPickingRoute.ShipmentType == WMSShipmentType::OrderPick
                    &&    wmsPickingRoute.TransType == InventTransType::Sales
                join InventTransRefId from wmsOrderTrans
                    group by InventTransRefId
                    where wmsOrderTrans.RouteId         == wmsPickingRoute.PickingRouteID
                    &&    wmsOrderTrans.OrderType       == WMSOrderType::OrderPick
                notexists join wmsPickingRouteLinkExists
                    where wmsPickingRouteLinkExists.PickingRouteId       == wmsPickingRoute.PickingRouteID
                    &&    wmsPickingRouteLinkExists.InventTransType      == wmsPickingRoute.TransType
                    &&    wmsPickingRouteLinkExists.InventTransRefId     == wmsPickingRoute.TransRefId
                    &&    wmsPickingRouteLinkExists.ActivationDateTime   == wmsPickingRoute.ActivationDateTime
                    &&    wmsPickingRouteLinkExists.OrigInventTransRefId == wmsOrderTrans.InventTransRefId;

            ttscommit;
        }
        else
        {
            while select wmsOrderTrans
                group by RouteId,InventTransRefId
                where wmsOrderTrans.RouteId         != ''
                &&    wmsOrderTrans.InventTransType == InventTransType::Sales
                &&    wmsOrderTrans.OrderType       == WMSOrderType::OrderPick
                notexists join wmsPickingRouteLinkExists
                    where wmsPickingRouteLinkExists.OrigInventTransRefId    == wmsOrderTrans.InventTransRefId     &&
                          wmsPickingRouteLinkExists.PickingRouteId          == wmsOrderTrans.RouteId
            {
                setPrefix(#prefixField(wmsOrderTrans,inventTransRefId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
        public configurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
        public boolean hasDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsistencyCheckJob</Name>
				<Source><![CDATA[
        private void initConsistencyCheckJob()
    {
        this.parmSysConsistencyCheckJob(new SysConsistencyCheckJob());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseUpdate</Name>
				<Source><![CDATA[
        boolean parmReleaseUpdate(boolean _releaseUpdate = releaseUpdate)
    {
        releaseUpdate = _releaseUpdate;
        return releaseUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.checkCustQuotationSalesLink();

        this.checkCustConfirmSalesLink();

        this.checkWMSpickingRouteLink();

        this.checkCustPackingSlipSalesLink();

        this.checkCustInvoicesalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
        public classId treeParentClassId()
    {
        ;
        return classNum(CustConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static public ClassDescription description()
    {
        return "@SYS78895";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        public static HelpTxt helpText()
    {
        return "@SYS78902";
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdCustLink_CustConfirmSales</Name>
				<Source><![CDATA[
        static void releaseUpdCustLink_CustConfirmSales()
    {
        CustConsistencyCheck_LinkTable  custConsistencyCheck_LinkTable = new CustConsistencyCheck_LinkTable();
        ;
        custConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        custConsistencyCheck_LinkTable.initConsistencyCheckJob();
        custConsistencyCheck_LinkTable.checkCustConfirmSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdCustLink_CustInvoiceSales</Name>
				<Source><![CDATA[
        static void releaseUpdCustLink_CustInvoiceSales()
    {
        CustConsistencyCheck_LinkTable  custConsistencyCheck_LinkTable = new CustConsistencyCheck_LinkTable();
        ;
        custConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        custConsistencyCheck_LinkTable.initConsistencyCheckJob();
        custConsistencyCheck_LinkTable.checkCustInvoicesalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdCustLink_CustPackingSlipSales</Name>
				<Source><![CDATA[
        static void releaseUpdCustLink_CustPackingSlipSales()
    {
        CustConsistencyCheck_LinkTable  custConsistencyCheck_LinkTable = new CustConsistencyCheck_LinkTable();
        ;
        custConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        custConsistencyCheck_LinkTable.initConsistencyCheckJob();
        custConsistencyCheck_LinkTable.checkCustPackingSlipSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdCustLink_CustQuotationSales</Name>
				<Source><![CDATA[
        static void releaseUpdCustLink_CustQuotationSales()
    {
        CustConsistencyCheck_LinkTable  custConsistencyCheck_LinkTable = new CustConsistencyCheck_LinkTable();
        ;
        custConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        custConsistencyCheck_LinkTable.initConsistencyCheckJob();
        custConsistencyCheck_LinkTable.checkCustQuotationSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdCustLink_WMSPickingRoute</Name>
				<Source><![CDATA[
        static void releaseUpdCustLink_WMSPickingRoute()
    {
        CustConsistencyCheck_LinkTable  custConsistencyCheck_LinkTable = new CustConsistencyCheck_LinkTable();
        ;
        custConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        custConsistencyCheck_LinkTable.initConsistencyCheckJob();
        custConsistencyCheck_LinkTable.checkWMSpickingRouteLink();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>