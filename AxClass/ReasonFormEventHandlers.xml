<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonFormEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReasonFormEventHandlers</c> class contains event handlers to support the additional functionality added to the Reasons form.
/// </summary>
public class ReasonFormEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Reasons_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes states of fields defined on the Reason form extension.
    /// </summary>
    /// <param name="_sender">The Reason form being initialized.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(Reasons), FormEventType::Initialized)]
    public static void Reasons_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        ReasonsIForm reasonForm = _sender as ReasonsIForm;
        if (reasonForm)
        {
            ReasonFormTable reasonFormTable = reasonForm.getReasonFormTable();

            reasonFormTable.parmReasonGridAccountTypeAsset(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::FixedAssets, reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeBank(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::Bank, reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeCust(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::Cust, reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeVend(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::Vend, reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeRAsset(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::RAsset, reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeRCash(ReasonFormEventHandlers::findCheckboxControl(ReasonCodeAccountTypeAll::RCash, reasonFormTable));

            if (reasonFormTable.parmReasonGridBankLGGroup())
            {
                boolean showBankLGFields = ((reasonFormTable.parmReasonCodeAccountType() == ReasonCodeAccountTypeAll::Bank || reasonFormTable.parmReasonCodeAccountType() == ReasonCodeAccountTypeAll::AllValues) && BankLGFeatureChecker::checkBankLGEnabled());
                reasonFormTable.parmReasonGridBankLGGroup().visible(showBankLGFields);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCheckboxControl</Name>
				<Source><![CDATA[
    private static FormCheckBoxControl findCheckboxControl(ReasonCodeAccountTypeAll _accountType, ReasonFormTable _reasonFormTable)
    {
        FormControlId formControlId;

        switch (_accountType)
        {
            case ReasonCodeAccountTypeAll::FixedAssets:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Asset));
                break;

            case ReasonCodeAccountTypeAll::Cust:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Cust));
                break;

            case ReasonCodeAccountTypeAll::Bank:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Bank));
                break;

            case ReasonCodeAccountTypeAll::Vend:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Vend));
                break;

            case ReasonCodeAccountTypeAll::RCash:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RCash));
                break;

            case ReasonCodeAccountTypeAll::RAsset:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RAsset));
                break;
        }

        FormCheckBoxControl checkboxControl = null;

        if (formControlId != 0)
        {
            checkboxControl = _reasonFormTable.parmReasonFormInstance().control(formControlId);
        }

        return checkboxControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>