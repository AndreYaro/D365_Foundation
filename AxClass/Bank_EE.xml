<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_EE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>Bank_EE</c> class provides Estonian bank rule overrides.
/// </summary>
final public class Bank_EE extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Ensure the bank account number matches the country format rules.
    /// </summary>
    /// <param name="bankAccount">
    ///     The bank account.
    /// </param>
    /// <returns>
    ///     true if the <c>BankAccount</c> is valid; otherwise false.
    /// </returns>
    private boolean checkBankAccountNumber(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEE00008, funcName());

        const str zero = '0';
        int digit, length = strLen(_bankAccount);

        if (!length)
        {
            return true;
        }
        else if (length < 4 || length > 16)
        {
            return checkFailed("@GLS220000");
        }

        for (int i = 1; i <= length; i++)
        {
            digit = char2Num(_bankAccount, i) - char2Num(zero, 1);

            if (digit < 0 || digit > 9)
            {
                return checkFailed("@GLS220001");
            }
        }

        digit = str2Int(subStr(_bankAccount, 1, 2));

        if (! (digit == 33 ||
               digit == 42 ||
               digit == 10 ||
               digit == 20 ||
               digit == 22 ||
               digit == 11 ||
               digit == 77 ||
               digit == 17 ||
               digit == 93))
        {
            return checkFailed("@GLS220003");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Ensure the bank account number matches the country format rules.
    /// </summary>
    /// <param name="bankAccount">
    ///     The bank account.
    /// </param>
    /// <returns>
    ///     true if the <c>BankAccount</c> is valid; otherwise false.
    /// </returns>
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        return this.checkBankAccountNumber(_bankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Ensure the bank account number matches the country format rules.
    /// </summary>
    /// <param name="bankAccountMap">
    ///     The bank account map.
    /// </param>
    /// <returns>
    ///     true if the <c>BankAccount</c> is valid; otherwise false.
    /// </returns>
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        if (strLen(_bankAccountMap.BankIBAN) > 7)
        {
            //AccountNumWithCheckDigit contains 2digit branch code, 11digit account number and 1digit national check digit.
            str accountNumWithCheckDigit = subStr(_bankAccountMap.BankIBAN, 7, strLen(_bankAccountMap.BankIBAN));

            if (!EeNumberChecker::check731(accountNumWithCheckDigit))
            {
                return checkFailed("@GLS220002");
            }
        }
        else
        {
            //The bank account requires a valid IBAN number.
            return checkFailed("@SYS4002533");
        }

        return this.checkBankAccountNumber(_bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current bank record before it is written to the database.
    /// </summary>
    /// <param name="_bankAccountMap">
    ///     Bank account map.
    /// </param>
    /// <returns>
    ///     true if the bank record is valid; otherwise, false
    /// </returns>
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, AccountNum)) != AccessRight::NoAccess
           && this.getBankIBANAccessRight(_bankAccountMap) != AccessRight::NoAccess)
        {
            // validate the Account Number
            ret = this.checkBankAccount(_bankAccountMap);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>