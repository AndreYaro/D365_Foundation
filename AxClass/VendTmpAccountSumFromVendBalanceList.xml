<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTmpAccountSumFromVendBalanceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendTmpAccSumFromVendBalanceList</c> class copies values from the <c>CustVendAgingCalculatedTmp</c> and <c>CustVendTransAging</c> records into the <c>VendTmpAccountSum</c>
/// </summary>
public final class VendTmpAccountSumFromVendBalanceList extends SysQueryInsertRecordSet
{
    private VendBalanceListParameters vendBalanceListParameters;

    private int vendAgingCalculatedDataSourceId;
    private int custVendTransAgingDataSourceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendAgingCalculatedDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendAgingCalculatedTmp</c> table.
    /// </summary>
    /// <returns>The unique ID.</returns>
    protected int getVendAgingCalculatedDataSourceId()
    {
        return vendAgingCalculatedDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAgingDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendTransAgingTmp</c> table.
    /// </summary>
    /// <returns>The unique ID.</returns>
    protected int getCustVendTransAgingDataSourceId()
    {
        return custVendTransAgingDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map fields from the <c>CustVendAgingCalculatedTmp</c> and <c>CustVendTransAging</c> records into the <c>VendTmpAccountSum</c>.
    /// </summary>
    protected void initFieldMapping()
    {
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, AccountNum), fieldStr(VendTmpAccountSum, AccountNum));
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, CurrencyCode), fieldStr(VendTmpAccountSum, CurrencyCode));
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, InvoiceId), fieldStr(VendTmpAccountSum, InvoiceId));
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, TransDate), fieldStr(VendTmpAccountSum, TransDate));
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, Txt), fieldStr(VendTmpAccountSum, Txt));
        this.mapField(vendAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, Voucher), fieldStr(VendTmpAccountSum, Voucher));

        this.mapField(custVendTransAgingDataSourceId, fieldStr(CustVendTransAging, Name), fieldStr(VendTmpAccountSum, Name));
        this.mapField(custVendTransAgingDataSourceId, fieldStr(CustVendTransAging, GroupId), fieldStr(VendTmpAccountSum, GroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to insert records into <c>VendTmpAccountSum</c> table.
    /// </summary>
    /// <returns>
    /// Query to insert records into <c>VendTmpAccountSum</c> table.
    /// </returns>
    protected Query initQuery()
    {
        Query q = new Query();
        QueryBuildDataSource qbdsVendors = q.addDataSource(tableNum(CustVendTransAging));
        qbdsVendors.addGroupByField(fieldNum(CustVendTransAging, Name));
        qbdsVendors.addGroupByField(fieldNum(CustVendTransAging, GroupId));
        qbdsVendors.cursor(vendBalanceListParameters.custVendTransAging);

        QueryBuildDataSource qbdsAgingCalculated = qbdsVendors.addDataSource(tableNum(CustVendAgingCalculatedTmp));
        qbdsAgingCalculated.joinMode(JoinMode::InnerJoin);
        qbdsAgingCalculated.addLink(fieldNum(CustVendTransAging, AccountNum), fieldNum(CustVendAgingCalculatedTmp, AccountNum));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, AccountNum));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, CurrencyCode));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, InvoiceId));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, TransDate));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, Txt));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, Voucher));
        qbdsAgingCalculated.cursor(vendBalanceListParameters.custVendAgingCalculatedTmp);

        QueryBuildDataSource qbdsVendTmpAccountSum = qbdsAgingCalculated.addDataSource(tableNum(VendTmpAccountSum));
        qbdsVendTmpAccountSum.joinMode(JoinMode::NoExistsJoin);
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, AccountNum), fieldNum(VendTmpAccountSum, AccountNum));
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, CurrencyCode), fieldNum(VendTmpAccountSum, CurrencyCode));
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, TransDate), fieldNum(VendTmpAccountSum, TransDate));
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, InvoiceId), fieldNum(VendTmpAccountSum, InvoiceId));
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, Txt), fieldNum(VendTmpAccountSum, Txt));
        qbdsVendTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, Voucher), fieldNum(VendTmpAccountSum, Voucher));
        qbdsVendTmpAccountSum.cursor(vendBalanceListParameters.vendTmpAccountSum);

        q.clearAllFields();

        vendAgingCalculatedDataSourceId = qbdsAgingCalculated.uniqueId();
        custVendTransAgingDataSourceId = qbdsVendors.uniqueId();

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current context of <c>VendTmpAccountSum</c>.
    /// </summary>
    /// <returns>
    /// The <c>VendTmpAccountSum</c> table buffer.
    /// </returns>
    protected Common initTargetCursor()
    {
        VendTmpAccountSum vendTmpAccountSum = vendBalanceListParameters.vendTmpAccountSum;
        vendTmpAccountSum.skipDataMethods(true);
        return vendTmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static VendTmpAccountSumFromVendBalanceList construct()
    {
        return new VendTmpAccountSumFromVendBalanceList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendBalanceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>VendTmpAccSumFromVendBalanceList</c> class.
    /// </summary>
    /// <param name = "_vendBalanceListParameters">
    /// An instance of <c>VendBalanceListParameters</c> object.
    /// </param>
    /// <returns>
    /// The instantiated <c>VendTmpAccSumFromVendBalanceList</c> object.
    /// </returns>
    public static VendTmpAccountSumFromVendBalanceList newFromVendBalanceList(VendBalanceListParameters _vendBalanceListParameters)
    {
        VendTmpAccountSumFromVendBalanceList instance = VendTmpAccountSumFromVendBalanceList::construct();
        instance.vendBalanceListParameters = _vendBalanceListParameters;
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>