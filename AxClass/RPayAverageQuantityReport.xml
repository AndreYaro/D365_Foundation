<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageQuantityReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayAverageQuantityReport extends XMLExcelReport_RU implements BatchRetryable
{
    DialogField         reportingYearField;
    Yr                  reportingYear;
    QueryRun            queryRun;

    #define.page1('PAGE1')
    #define.pageWidth(10)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
          reportingYear
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAverageQuantity</Name>
				<Source><![CDATA[
    private int calcAverageQuantity()
    {
        RPayAverageQuantity     rPayAverageQuantity;
        int                     periodsCount;
        real                    averageQty;

        while (queryRun.next())
        {
            rPayAverageQuantity =  queryRun.get(tablenum(RPayAverageQuantity));
            averageQty          += rPayAverageQuantity.AverageQty;
            periodsCount++;
        }

        if (periodsCount)
        {
            averageQty = averageQty / periodsCount;
        }

        return any2int(decRound(averageQty, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15.0)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.updateQuery();

        this.execute(#page1);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog;

        this.updateQuery();

        dialog = super();

        dialog.addGroup("@SYS7764");
        reportingYearField = dialog.addFieldValue(extendedTypeStr(Yr), reportingYear, "@SYS32606");
        reportingYearField.control().mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + int2str(reportingYear) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #page1:
                this.fillPage1();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    private void fillPage1()
    {
        CompanyInfo             companyInfo = CompanyInfo::find();
        int                     pos;
        int                     averageQty;
        str                     averageQtyStr;
        str                     dateStr;
        OKATO_RU                inn = CompanyInfoHelper::partyINN_RU(companyInfo);
        OKATO_RU                kpp = CompanyInfoHelper::partyKPP_RU(companyInfo);
        TaxAuthorityAddress     taxAuthorityAddress;

        for (pos = 1; pos <= strlen(inn) && pos <= 12; pos++)
        {
            this.insertValueToSection('_INN' + int2str(pos), substr(inn, pos, 1));
        }

        for (pos = 1; pos <= strlen(kpp) && pos <= 9; pos++)
        {
            this.insertValueToSection('_KPP' + int2str(pos), substr(kpp, pos, 1));
        }

        taxAuthorityAddress = TaxAuthorityAddress::findByOKATO_RU(CompanyInfoHelper::partyOKATO_RU(companyInfo));
        this.insertValueToSection('IMNSName', taxAuthorityAddress.Name);

        for (pos = 1; pos <= strlen(taxAuthorityAddress.TaxAuthorityId) && pos <= 4; pos++)
        {
            this.insertValueToSection('IMNSCode' + int2str(pos), substr(taxAuthorityAddress.TaxAuthorityId, pos, 1));
        }

        this.insertValueToSection('CompanyName', companyInfo.Name);

        dateStr = date2str(mkDate(1, 1, reportingYear + 1), 123, 2, 2, 2, 2, 4, DateFlags::None);
        this.insertValueToSection('AvgQtyDay1', substr(dateStr, 1, 1));
        this.insertValueToSection('AvgQtyDay2', substr(dateStr, 2, 1));
        this.insertValueToSection('AvgQtyMth1', substr(dateStr, 4, 1));
        this.insertValueToSection('AvgQtyMth2', substr(dateStr, 5, 1));
        this.insertValueToSection('AvgQtyYr1',  substr(dateStr, 7, 1));
        this.insertValueToSection('AvgQtyYr2',  substr(dateStr, 8, 1));
        this.insertValueToSection('AvgQtyYr3',  substr(dateStr, 9, 1));
        this.insertValueToSection('AvgQtyYr4',  substr(dateStr, 10, 1));

        averageQty = this.calcAverageQuantity();

        averageQtyStr = int2str(averageQty);

        for (pos = 6; pos >= 1 && strlen(averageQtyStr) - 6 + pos > 0; pos--)
        {
            this.insertValueToSection('AvgQty' + int2str(pos), substr(averageQtyStr, strlen(averageQtyStr) - 6 + pos, 1));
        }

        this.insertValueToSection('DirectorName', OfficialsTable_RU::nameDirector());

        dateStr = date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None);
        this.insertValueToSection('ReportDay1', substr(dateStr, 1, 1));
        this.insertValueToSection('ReportDay2', substr(dateStr, 2, 1));
        this.insertValueToSection('ReportMth1', substr(dateStr, 4, 1));
        this.insertValueToSection('ReportMth2', substr(dateStr, 5, 1));
        this.insertValueToSection('ReportYr1',  substr(dateStr, 7, 1));
        this.insertValueToSection('ReportYr2',  substr(dateStr, 8, 1));
        this.insertValueToSection('ReportYr3',  substr(dateStr, 9, 1));
        this.insertValueToSection('ReportYr4',  substr(dateStr, 10, 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            reportingYear = reportingYearField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        reportingYear = year(RPayParameters::PayPeriod()) - 1;
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRun()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds = query.addDataSource(tablenum(RPayAverageQuantity));

        qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup));
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldnum(RPayAverageQuantity, PayPeriod));
        qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Sum);
        qbr = qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod));
        qbr.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#page1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayAverageQuantityReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.bodyCells(48)
        return #bodyCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version          version        = conpeek(_packedClass, 1);
        PackedQueryRun   packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                else
                {
                    this.initQueryRun();
                }

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPayAverageQuantity)), fieldNum(RPayAverageQuantity, PayPeriod))
            .value(SysQuery::range(mkDate(1, 1, reportingYear), mkDate(31, 12, reportingYear)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP839";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayAverageQuantityReport averageQuantityReport = new RPayAverageQuantityReport();

        if (averageQuantityReport.prompt())
        {
            averageQuantityReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>