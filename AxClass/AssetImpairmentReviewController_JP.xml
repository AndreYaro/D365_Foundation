<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentReviewController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>AssetImpairmentReviewRpt_JP</c> report.
/// </summary>
public class AssetImpairmentReviewController_JP extends SrsReportRunController implements BatchRetryable
{
    AssetImpairmentReviewContract_JP    contract;
    AssetImpairmentTempCarryingAmount_JP      carryingAmountConcern;
    AssetImpairmentTempTransAnalysis_JP      transactionAnalysis;
    AssetImpairmentReviewTestTmp_JP     assetImpairmentReview;
    SRSReportRunPermission              srsPermission;
    RecId                               tempCarryingAmountRecId;
    RecId                               tempTransAnalysisRecId;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>packRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the records.
    /// </summary>
    public void packRecords()
    {
        FormRun             formRun;
        FormDataSource      carryingAmountConcernDS;
        FormDataSource      transactionAnalysisDS;
        Array               recordsMarked;
        boolean             ret = false;
        int                 i;

        formRun     = this.parmArgs().caller();

        carryingAmountConcernDS = formRun.dataSource(1);
        recordsMarked = carryingAmountConcernDS.recordsMarked();

        for (i = 1; i<=recordsMarked.lastIndex(); i++)
        {
            assetImpairmentReview = carryingAmountConcernDS.cursor(recordsMarked.value(i));

            carryingAmountConcern.clear();
            carryingAmountConcern.AccDepreciation = assetImpairmentReview.AccDepreciation;
            carryingAmountConcern.AcquisitionPrice = assetImpairmentReview.AcquisitionPrice;
            carryingAmountConcern.AssetDocumentTable_JP = assetImpairmentReview.AssetDocumentTable_JP;
            carryingAmountConcern.AssetGroupId = assetImpairmentReview.AssetGroupId;
            carryingAmountConcern.AssetId = assetImpairmentReview.AssetId;
            carryingAmountConcern.AssetName = assetImpairmentReview.AssetName;
            carryingAmountConcern.AssetStatus = assetImpairmentReview.AssetStatus;
            carryingAmountConcern.BookId = assetImpairmentReview.BookId;
            carryingAmountConcern.ExpectedScrapValue = assetImpairmentReview.ExpectedScrapValue;
            carryingAmountConcern.Impairment = assetImpairmentReview.Impairment;
            carryingAmountConcern.ImpairmentAdjustment = assetImpairmentReview.ImpairmentAdjustment;
            carryingAmountConcern.NetBookValue = assetImpairmentReview.NetBookValue;
            carryingAmountConcern.RecoverableAmount = assetImpairmentReview.RecoverableAmount;
            carryingAmountConcern.RecoverableAmountRef = assetImpairmentReview.RecoverableAmountRef;
            carryingAmountConcern.UndiscountedCashFlow = assetImpairmentReview.UndiscountedCashFlow;
            carryingAmountConcern.UndiscountedCashFlowRef = assetImpairmentReview.UndiscountedCashFlowRef;
            carryingAmountConcern.insert();
        }

        transactionAnalysisDS = formRun.dataSource(2);
        recordsMarked = transactionAnalysisDS.recordsMarked();

        for (i = 1; i<=recordsMarked.lastIndex(); i++)
        {
            assetImpairmentReview = transactionAnalysisDS.cursor(recordsMarked.value(i));

            transactionAnalysis.clear();
            transactionAnalysis.AccDepreciation = assetImpairmentReview.AccDepreciation;
            transactionAnalysis.AcquisitionPrice = assetImpairmentReview.AcquisitionPrice;
            transactionAnalysis.AssetDocumentTable_JP = assetImpairmentReview.AssetDocumentTable_JP;
            transactionAnalysis.AssetGroupId = assetImpairmentReview.AssetGroupId;
            transactionAnalysis.AssetId = assetImpairmentReview.AssetId;
            transactionAnalysis.AssetName = assetImpairmentReview.AssetName;
            transactionAnalysis.AssetStatus = assetImpairmentReview.AssetStatus;
            transactionAnalysis.BookId = assetImpairmentReview.BookId;
            transactionAnalysis.ExpectedScrapValue = assetImpairmentReview.ExpectedScrapValue;
            transactionAnalysis.Impairment = assetImpairmentReview.Impairment;
            transactionAnalysis.ImpairmentAdjustment = assetImpairmentReview.ImpairmentAdjustment;
            transactionAnalysis.NetBookValue = assetImpairmentReview.NetBookValue;
            transactionAnalysis.RecoverableAmount = assetImpairmentReview.RecoverableAmount;
            transactionAnalysis.RecoverableAmountRef = assetImpairmentReview.RecoverableAmountRef;
            transactionAnalysis.UndiscountedCashFlow = assetImpairmentReview.UndiscountedCashFlow;
            transactionAnalysis.UndiscountedCashFlowRef = assetImpairmentReview.UndiscountedCashFlowRef;
            transactionAnalysis.insert();
        }

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();

        if (carryingAmountConcern)
        {
            tempCarryingAmountRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(carryingAmountConcern);
            delete_from carryingAmountConcern;
            contract.parmTempCarryingAmountRecId(tempCarryingAmountRecId);
            ret = true;
        }
        else
        {
            contract.parmTempCarryingAmountRecId(0);
        }

        if (transactionAnalysis)
        {
            tempTransAnalysisRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(transactionAnalysis);
            delete_from transactionAnalysis;
            contract.parmTempTransAnalysisRecId(tempTransAnalysisRecId);
            ret = true;
        }
        else
        {
            contract.parmTempTransAnalysisRecId(0);
        }

        CodeAccessPermission::revertAssert();

        if (!ret)
        {
            //No records have been selected.
            checkFailed("@SYS34359");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00014] ],
            funcName()
        );

        contract = this.parmReportContract().parmRdpContract();

        contract.parmAssetAccountingStandard_JP(AssetParameters::accountingStandard_JP());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        super();

        this.packRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00019] ],
            funcName()
        );

        AssetImpairmentReviewController_JP controller = new AssetImpairmentReviewController_JP();

        controller.parmReportName(ssrsReportStr(AssetImpairmentReviewRpt_JP, Report));
        controller.parmDialogCaption("@SYS4005308");
        controller.parmArgs(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>