<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrderEventHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
/// <summary>
/// This class handles the events for the <c>InventTransferOrders</c> form.
/// </summary>
public static class InventTransferOrderEventHandler_IN
{
    #inventdimdevelop
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sensitiveForPrice_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for <c>modifiedField</c> methods of fields that impact on unit price</c>.
    /// </summary>
    /// <param name="_sender">The form datasource that triggered the event.</param>
    /// <param name="_e">The <c>FormDataFieldEventArgs</c> object associated to the event.</param>
    [
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, configId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, inventBatchId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventColorId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventOwnerId_RU), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, inventSerialId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventSizeId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventStatusId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventStyleId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, LicensePlateId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, wMSLocationId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, wMSPalletId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventDim, InventVersionId), FormDataFieldEventType::Modified),
        FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventTransferLine_IN, PriceType), FormDataFieldEventType::Modified)
    ]
    public static void sensitiveForPrice_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            FormRun formRun = _sender.datasource().formRun();

            if (formRun.name() == formStr(InventTransferOrders))
            {
                FormDataSource  inventTransferTable_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferTable));
                InventTransferTable inventTransferTable = inventTransferTable_ds.cursor();

                if (inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
                {
                    FormDataSource  inventDim_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventDim));
                    FormDataSource  inventTransferLine_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine));
                    FormDataSource  InventTransferLineIN_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine_IN));

                    InventDim             inventDim = inventDim_ds.cursor();
                    InventTransferLine    inventTransferLine = inventTransferLine_ds.cursor();
                    InventTransferLine_IN inventTransferLineIN = InventTransferLineIN_ds.cursor();

                    inventTransferLineIN.recalculateStockTransferValue(inventTransferLine, InventDim);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the <c>active</c> method of the <c>InventTransferLine</c> datasource.
    /// </summary>
    /// <param name = "_inventTransferLine_ds">he form datasource that triggered the event.</param>
    /// <param name="_e">The <c>FormDataSourceEventArgs</c> object associated to the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferLine), FormDataSourceEventType::Activated)]
    public static void InventTransferLine_OnActivated(FormDataSource _inventTransferLine_ds, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _inventTransferLine_ds.formRun();

        if (formRun.name() == formStr(InventTransferOrders))
        {
            FormDataSource  inventTransferTable_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferTable));
            InventTransferTable inventTransferTable = inventTransferTable_ds.cursor();

            if (inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer && inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
            {
                FormDataSource  inventTransferLine_IN_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine_IN));
                FormDataSource  inventTransferLine_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine));

                InventTransferOrderEventHandler_IN::setInventTransferLineFieldAllowEdit(
                    inventTransferTable,
                    inventTransferLine_ds,
                    inventTransferLine_IN_ds);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferLine_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the <c>initValue</c> method of the <c>InventTransferLine</c> datasource.
    /// </summary>
    /// <param name = "_sender">The form datasource that triggered the event.</param>
    /// <param name="_e">The <c>FormDataSourceEventArgs</c> object associated to the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferLine), FormDataSourceEventType::InitValue)]
    public static void InventTransferLine_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            FormRun formRun = _sender.formRun();

            if (formRun.name() == formStr(InventTransferOrders))
            {
                FormDataSource  inventTransferTable_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferTable));
                InventTransferTable inventTransferTable = inventTransferTable_ds.cursor();

                if (inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer &&
                    inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
                {
                    InventTransferLine inventTransferLine = _sender.cursor();
                    InventTransferLine_IN inventTransferLine_IN = inventTransferLine.inventTransferLine_IN();

                    inventTransferLine_IN.initFromInventTransferTable(inventTransferTable);
                    inventTransferLine.packInventTransferLine_IN(inventTransferLine_IN);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransferType_IN_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the <c>modifyField</c> method of the <c>InventTransferTable</c> datasource.
    /// </summary>
    /// <param name = "_sender">The form datasource that triggered the event.</param>
    /// <param name="_e">The <c>FormDataFieldEventArgs</c> object associated to the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(InventTransferOrders, InventTransferTable, TransferType_IN), FormDataFieldEventType::Modified)]
    public static void TransferType_IN_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            FormRun formRun = _sender.datasource().formRun();

            if (formRun.name() == formStr(InventTransferOrders))
            {
                FormDataSource  inventTransferTable_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferTable));

                InventTransferOrderEventHandler_IN::setInventTransferTableFieldVisibility(inventTransferTable_ds);
                InventTransferOrderEventHandler_IN::setInventTransferTableFieldAllowEdit(inventTransferTable_ds);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTransferTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the <c>active</c> method of the <c>InventTransferTable</c> datasource.
    /// </summary>
    /// <param name = "_sender">The form datasource that triggered the event.</param>
    /// <param name="_e">The <c>FormDataSourceEventArgs</c> object associated to the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(InventTransferOrders, InventTransferTable), FormDataSourceEventType::Activated)]
    public static void InventTransferTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {

            FormRun formRun = _sender.formRun();

            if (formRun.name() == formStr(InventTransferOrders))
            {
                FormDataSource  inventTransferTable_ds = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferTable));

                InventTransferOrderEventHandler_IN::setInventTransferTableFieldVisibility(inventTransferTable_ds);
                InventTransferOrderEventHandler_IN::setInventTransferTableFieldAllowEdit(inventTransferTable_ds);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferTableFieldVisibility</Name>
				<Source><![CDATA[
    private static void setInventTransferTableFieldVisibility(FormDataSource _inventTransferTable_ds)
    {
        InventTransferTable inventTransferTable = _inventTransferTable_ds.cursor();

        _inventTransferTable_ds.object(fieldNum(InventTransferTable, PriceType_IN)).visible(inventTransferTable.StockTransferCostPriceHandlingImprovement_IN && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferTableFieldAllowEdit</Name>
				<Source><![CDATA[
    private static void setInventTransferTableFieldAllowEdit(FormDataSource _inventTransferTable_ds)
    {
        InventTransferTable inventTransferTable = _inventTransferTable_ds.cursor();

        _inventTransferTable_ds.object(fieldNum(InventTransferTable, PriceType_IN)).allowEdit(
            inventTransferTable.StockTransferCostPriceHandlingImprovement_IN && 
            inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer &&
            ! inventTransferTable.hasTransferJournal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferLineFieldAllowEdit</Name>
				<Source><![CDATA[
    private static void setInventTransferLineFieldAllowEdit(InventTransferTable _inventTransferTable, FormDataSource _inventTransferLine_ds, FormDataSource _inventTransferTableIN_ds)
    {
        InventTransferLine_IN inventTransferLineIN = _inventTransferTableIN_ds.cursor();
        InventTransferLine inventTransferLine = _inventTransferLine_ds.cursor();

        if (_inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
        {
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, UnitId)).allowEdit(false);

            boolean isLineShipped = inventTransferLine.QtyShipped != 0;

            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, UnitPrice)).allowEdit(!isLineShipped);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, PriceType)).allowEdit(!isLineShipped);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, NetAmount)).allowEdit(!isLineShipped);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, AssessableValueTransactionCurrency)).allowEdit(!isLineShipped);

        }
        else
        {
            //allow once for StockTransferUnitPriceFixed_IN = No, for StockTransferCostPriceHandlingImprovement_IN == yes any lines treated separately
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, UnitId)).allowEdit(true);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, PriceType)).allowEdit(true);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, UnitPrice)).allowEdit(true);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, NetAmount)).allowEdit(true);
            _inventTransferTableIN_ds.object(fieldNum(InventTransferLine_IN, AssessableValueTransactionCurrency)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>