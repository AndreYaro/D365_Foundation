<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjWorkBreakdownStructurePublishController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Service controller class for <c>ProjWorkBreakdownStructurePublish</c> class.
/// </summary>
class ProjWorkBreakdownStructurePublishController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    public void new()
    {
        super();

        this.parmDialogCaption("@ProjPlan:ProjWBSBatchDescription");
        this.parmShowDialog(true);
        this.parmShowProgressForm(false);
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        boolean validScenario = false;

        if (_args != null && _args.parm() && _args.record())
        {
            ProjPlanVersionDetail planVersionDetail = _args.record() as ProjPlanVersionDetail;

            if (planVersionDetail)
            {
                validScenario = true;

                ProjWorkBreakdownStructurePublishController controller = new ProjWorkBreakdownStructurePublishController();
                controller.parmClassName(classstr(ProjWorkBreakdownStructurePublish));
                controller.parmMethodName(methodstr(ProjWorkBreakdownStructurePublish, publishVersion));
                controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);

                ProjWBSPublishingDataContract request = controller.getBaseDataContract() as ProjWBSPublishingDataContract;

                request.parmProjectId(planVersionDetail.ProjId);
                request.parmVersionId(planVersionDetail.VersionId);
                
                controller.startOperation();

                SysGlobalCache cache = ClassFactory.globalCache();
                if (controller.isDialogCancelled())
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::Cancel);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::ScheduledBatch)
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::ScheduledBatch);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::Synchronous)
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::Synchronous);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::ReliableAsynchronous)
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::ReliableAsynchronous);
                }
                else if (controller.parmExecutionMode() == SysOperationExecutionMode::Asynchronous)
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::Asynchronous);
                }
                else
                {
                    cache.set(classStr(ProjWorkBreakdownStructurePublishController), _args.parm(), ProjWBSPublishExecutionOption::NotSpecified);
                }
            }
        }

        if (!validScenario)
        {
            throw error("@SYS335393");
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>doBatch</Name>
        <Source><![CDATA[
    /// <summary>
    /// Perform batch process.
    /// </summary>
    /// <returns><c>Batch</c> tabl buffer.</returns>
    public Batch doBatch()
    {
        Batch ret;

        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            BatchHeader batchheader = this.batchInfo().parmBatchHeader();
            batchheader.clearAllAlerts();

            batchheader.addUserAlerts(curUserId(), NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        }
    
        return super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isDialogCancelled</Name>
        <Source><![CDATA[
    /// <summary>
    /// Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    /// true if the user has cancelled further processing; otherwise false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>