<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRGiftCardRedeemedReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRGiftCardRedeemedReportDP</c> class provides data source for retail gift card redeemed report.
/// </summary>
[
SRSReportQueryAttribute (querystr(MCRGiftCardRedeemed)),
SRSReportParameterAttribute(classStr(MCRGiftCardRedeemedReportRDPContract))
]
internal final class MCRGiftCardRedeemedReportDP extends SRSReportDataProviderPreProcessTempDB
{
    private MCRRetailGiftCardRedeemedTemp tempMCRRetailGiftCardRedeemed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTempMCRRetailGiftCardRedeemedTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute("MCRRetailGiftCardRedeemedTemp")]
    public MCRRetailGiftCardRedeemedTemp getTempMCRRetailGiftCardRedeemedTable()
    {
        select tempMCRRetailGiftCardRedeemed;
        return tempMCRRetailGiftCardRedeemed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        // get the query
        Query query = this.parmQuery();

        // retrieve contract data
        MCRGiftCardRedeemedReportRDPContract contract = this.parmDataContract() as MCRGiftCardRedeemedReportRDPContract;

        // get the input params from contract
        var fromDate = contract.parmFromDate();
        var toDate = contract.parmToDate();

       // add from date and to date parameters to the query.
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tablenum(RetailGiftCardTransactions));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailGiftCardTransactions, transDate));

        // expand range to get initial dataset, once we have timezone info, we will  filter recordset based on user preferred timezone
        queryBuildRange.value(queryRange(DateTimeUtil::addDays(fromDate, -1), DateTimeUtil::addDays(toDate, 1)));

        // convert input dates to UTC format
        Timezone currentUserPreferredTimeZone = DateTimeUtil::getUserPreferredTimeZone();
        var fromDateUtc = DateTimeUtil::newDateTime(DateTimeUtil::date(fromDate), DateTimeUtil::time(fromDate), currentUserPreferredTimeZone);
        var toDateUtc = DateTimeUtil::newDateTime(DateTimeUtil::date(toDate), DateTimeUtil::time(toDate), currentUserPreferredTimeZone);
        
        // we want to check untill end of day (23:59:59) for the filter later
        toDateUtc = DateTimeUtil::time(toDate) > 0 ? toDateUtc : DateTimeUtil::addSeconds(toDateUtc, 86399);

       // set user connection to avoid blocking during data cleanup
        tempMCRRetailGiftCardRedeemed.setConnection(this.parmUserConnection());

        // run the query with modified ranges.
        QueryRun queryRun = new QueryRun(query);
        while(queryRun.next())
        {
            // convert transdate to UTC and filter using input params
            RetailGiftCardTransactions retailGiftCardTransactions = queryRun.get(tablenum(RetailGiftCardTransactions));
            RetailChannelTable retailChannelTable = queryRun.get(tablenum(RetailChannelTable));

            utcdatetime transDateUtc;
            if (retailChannelTable.ChannelType == RetailChannelType::MCRCallCenter)
            {
                var callCenterUser = xUserInfo::find(false, retailGiftCardTransactions.CreatedBy);
                var timezoneOffset = callCenterUser.recId > 0 ? callCenterUser.PreferredTimeZone : currentUserPreferredTimeZone;
                transDateUtc = DateTimeUtil::newDateTime(retailGiftCardTransactions.transDate, retailGiftCardTransactions.transTime, timezoneOffset);
            }
            else
            {
                transDateUtc = DateTimeUtil::newDateTime(retailGiftCardTransactions.transDate, retailGiftCardTransactions.transTime, RetailChannelTable::getChannelTimezone(retailGiftCardTransactions.Channel));
            }

            if (!(fromDateUtc <= transDateUtc && transDateUtc <= toDateUtc))
            {
                continue;
            }

            tempMCRRetailGiftCardRedeemed.clear();

            tempMCRRetailGiftCardRedeemed.transDate = DateTimeUtil::newDateTime(DateTimeUtil::date(transDateUtc), DateTimeUtil::time(transDateUtc));

            RetailGiftCardTable retailGiftCardTable = RetailGiftCardTable::mcrFindRecId(queryRun.get(tablenum(RetailGiftCardTable)).RecId);

            if (retailGiftCardTable.Reserved == NoYes::Yes)
            {
                retailGiftCardTable.selectForUpdate(true);
            }
            
            tempMCRRetailGiftCardRedeemed.Balance = retailGiftCardTable.balance();
            tempMCRRetailGiftCardRedeemed.amount = retailGiftCardTransactions.amount;
            tempMCRRetailGiftCardRedeemed.CardNumber = retailGiftCardTransactions.cardNumber;

            tempMCRRetailGiftCardRedeemed.TransactionId = retailGiftCardTransactions.transactionId;
            tempMCRRetailGiftCardRedeemed.MCRSalesId = retailGiftCardTransactions.MCRSalesId;

            CustTable custTableOne = queryRun.get(tablenum(CustTable), 1);
            tempMCRRetailGiftCardRedeemed.RetailCustomerName = custTableOne.name();

            CustTable custTableTwo = queryRun.get(tablenum(CustTable), 2);
            tempMCRRetailGiftCardRedeemed.CallCenterCustomerName = custTableTwo.name();

            // insert the current record.
            tempMCRRetailGiftCardRedeemed.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>