<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerTaxRegion_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(PayrollWorkerTaxRegion))]
public final class PayrollWorkerTaxRegion_AppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refreshTaxRegionsForPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax codes for all tax regions of workers that will every have been
    /// </summary>
    /// <param name="_position">
    /// The <c>HcmPositionRecId</c> that uniquely specifies the position for which to have
    /// its corresponding <c>PayrollWorkerTaxRegion</c> records' tax information refreshed.
    /// </param>
    /// <remarks>
    /// This includes future-dated assignments.
    /// </remarks>
    public static void refreshTaxRegionsForPosition(HcmPositionRecId _position)
    {
        HcmPositionWorkerAssignment positionWorkerAssignment;
        utcdatetime                 minDateTime = DateTimeUtil::minValue(),
                                    maxDateTime = DateTimeUtil::maxValue();

        // Determine list of workers to update who have ever been assigned to this position
        while select validTimeState(minDateTime, maxDateTime) Worker from positionWorkerAssignment
            group by Worker
            where positionWorkerAssignment.Position == _position
        {
            PayrollWorkerTaxRegion::refreshTaxRegionsForWorkerAtPosition(positionWorkerAssignment.Worker, _position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTaxRegionsForWorkerAtPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the tax codes for the tax regions that are specified by the indicated
    /// worker and position.
    /// </summary>
    /// <param name="_worker">
    /// The worker for whom to refresh tax information.
    /// </param>
    /// <param name="_position">
    /// The position for which to refresh tax information.
    /// </param>
    public static void refreshTaxRegionsForWorkerAtPosition(HcmWorkerRecId _worker, HcmPositionRecId _position)
    {
        PayrollPositionDetails      payrollPositionDetails;
        PayrollWorkerTaxRegion      workerTaxRegion;
        container                   taxCodeList;
        List                        masterTaxCodeList = new List(Types::String);

        // Update the payroll tax codes for the worker if tax regions
        payrollPositionDetails = PayrollPositionDetails::findByPosition(_position);
        if (payrollPositionDetails.RecId)
        {
            while select workerTaxRegion
                where workerTaxRegion.Worker == _worker
            {
                taxCodeList = PayrollSetup::refreshWorkerTaxRegionTaxesAllTime(workerTaxRegion, true);
                masterTaxCodeList.appendList(con2List(taxCodeList));
            }

            // Display any additions for the worker across all of their tax regions
            if (taxCodeList)
            {
                PayrollTaxEngineUtil::showTaxAdditionsForWorker(_worker, masterTaxCodeList);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>