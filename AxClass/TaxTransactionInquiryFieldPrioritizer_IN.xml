<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquiryFieldPrioritizer_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a field prioritizer in the list panel for tax transaction inquiry. It extends <c>SysPackable</c>.
/// </summary>
public class TaxTransactionInquiryFieldPrioritizer_IN implements SysPackable
{
    TaxTransactionInquiry_IN    taxTransactionInquiry;
    List                        sortedSelectedFieldObjects;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, sortedSelectedFieldObjects.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedList;
        boolean     ret;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedList] = _packedClass;
                sortedSelectedFieldObjects = List::create(packedList);
                ret = true;
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortedSelectedFieldObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the selected field objects as a sorted list.
    /// </summary>
    /// <returns>
    /// A list of sorted selected field objects.
    /// </returns>
    public List sortedSelectedFieldObjects()
    {
        return sortedSelectedFieldObjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldObjectsEnumerator</Name>
				<Source><![CDATA[
    public ListEnumerator getFieldObjectsEnumerator()
    {
        return sortedSelectedFieldObjects.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the elements of the list of sorted selected field objects.
    /// </summary>
    /// <returns>
    /// The element of the list of sorted selected field objects.
    /// </returns>
    public int elements()
    {
        return sortedSelectedFieldObjects.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFiledObject2Priority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change a selected field object of class TaxTransactionInquiryFieldObject_IN to a priority of class Priority.
    /// </summary>
    /// <param name = "_fieldObject">the selected field object</param>
    /// <returns>
    /// The converted priority.
    /// </returns>
    public Priority selectedFiledObject2Priority(TaxTransactionInquiryFieldObject_IN _fieldObject)
    {
        Priority        priority;
        ListEnumerator  enumerator;

        enumerator = this.getFieldObjectsEnumerator();

        while (enumerator.moveNext())
        {
            priority++;

            if (_fieldObject.equal(enumerator.current()))
            {
                return priority;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a field object to the list.
    /// </summary>
    /// <param name = "_fieldObject">the field object that will be added</param>
    /// <param name = "_position">the position where the field object will be inserted</param>
    public void addFieldObject(TaxTransactionInquiryFieldObject_IN _fieldObject,
                                                               int _position = 0)
    {
        List            originalList;
        ListEnumerator  enumerator;
        Counter         counter;
        TaxTransactionInquiryFieldObject_IN  fieldObject;

        if (prmisdefault(_position) || _position > this.selectedFiledObject2Priority(this.lastFieldObject()))
        {
            // Insert at the end
            sortedSelectedFieldObjects.addEnd(_fieldObject);
        }
        else
        {
            fieldObject = this.firstFieldObject();
            if (!fieldObject || _position <= this.selectedFiledObject2Priority(fieldObject))
            {
                // Insert at the begining
                sortedSelectedFieldObjects.addStart(_fieldObject);
            }
            else
            {
                // Insert at specific position
                originalList = List::create(sortedSelectedFieldObjects.pack());
                this.reset();

                enumerator = originalList.getEnumerator();

                while (enumerator.moveNext())
                {
                    counter++;

                    if (_position <= counter)
                    {
                        this.addFieldObject(_fieldObject);
                    }

                    this.addFieldObject(enumerator.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the field object from the list.
    /// </summary>
    /// <param name = "_fieldObject">the field object to be removed</param>
    public void removeFieldObject(TaxTransactionInquiryFieldObject_IN  _fieldObject)
    {
        ListEnumerator  enumerator;
        List            originalList;
        TaxTransactionInquiryFieldObject_IN  fieldObject;

        originalList = List::create(sortedSelectedFieldObjects.pack());
        this.reset();

        enumerator = originalList.getEnumerator();

        while (enumerator.moveNext())
        {
            fieldObject = enumerator.current();
            if (!fieldObject.equal(_fieldObject))
            {
                this.addFieldObject(fieldObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldObjecct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find and return the field object which is equal to the input field object from the list.
    /// </summary>
    /// <param name = "_fieldObjecct">the field object to be found</param>
    /// <returns>
    /// The same field object from the list.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN findFieldObjecct(TaxTransactionInquiryFieldObject_IN _fieldObjecct)
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        ListEnumerator  enumerator;

        enumerator = this.getFieldObjectsEnumerator();

        while (enumerator.moveNext())
        {
            if (_fieldObjecct.equal(enumerator.current()))
            {
                fieldObject = enumerator.current();
                break;
            }
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find and return a field object by match the priority.
    /// </summary>
    /// <param name = "_priority">the priority of the field object</param>
    /// <returns>
    /// The field object of the priority.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN findPriority(Priority _priority)
    {
        Priority        priority;
        ListEnumerator  enumerator;
        TaxTransactionInquiryFieldObject_IN  fieldObject;

        enumerator = this.getFieldObjectsEnumerator();

        while (enumerator.moveNext())
        {
            priority++;

            if (priority == _priority)
            {
                fieldObject = enumerator.current();
                break;
            }
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the list has the input field object of class TaxTransactionInquiryFieldObject_IN.
    /// </summary>
    /// <param name = "_fieldObject">the field object to be checked</param>
    /// <returns>
    /// Whether it has the field object.
    /// </returns>
    public boolean hasFieldObject(TaxTransactionInquiryFieldObject_IN _fieldObject)
    {
        boolean ret;

        if (this.findFieldObjecct(_fieldObject))
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the field object that in the first of the field objects list.
    /// </summary>
    /// <returns>
    /// The first field object.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN firstFieldObject()
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        ListEnumerator  enumerator;

        enumerator = this.getFieldObjectsEnumerator();

        if (enumerator.moveNext())
        {
            fieldObject = enumerator.current();
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the field object that in the last of the field objects list.
    /// </summary>
    /// <returns>
    /// The last field object.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN lastFieldObject()
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        ListEnumerator  enumerator;

        enumerator = this.getFieldObjectsEnumerator();

        while (enumerator.moveNext())
        {
            fieldObject = enumerator.current();
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the field object that in the next of the input field object.
    /// </summary>
    /// <param name = "_fieldObject">the current field object</param>
    /// <returns>
    /// The next field object.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN nextFieldObject(TaxTransactionInquiryFieldObject_IN _fieldObject)
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        ListEnumerator  enumerator = this.getFieldObjectsEnumerator();
        boolean         equalIsFound;

        if (!_fieldObject.equal(this.lastFieldObject()))
        {
            while (enumerator.moveNext())
            {
                if (equalIsFound)
                {
                    fieldObject = enumerator.current();
                    break;
                }

                if (_fieldObject.equal(enumerator.current()))
                {
                    equalIsFound = true;
                }
            }
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the field object that in the previous of the input field object.
    /// </summary>
    /// <param name = "_fieldObject">the current field object</param>
    /// <returns>
    /// The previous field object.
    /// </returns>
    public TaxTransactionInquiryFieldObject_IN previousFieldObject(TaxTransactionInquiryFieldObject_IN _fieldObject)
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        TaxTransactionInquiryFieldObject_IN  previousFieldObject;
        TaxTransactionInquiryFieldObject_IN  firstFieldObject;
        ListEnumerator  enumerator = this.getFieldObjectsEnumerator();

        firstFieldObject = this.firstFieldObject();

        if (firstFieldObject && !_fieldObject.equal(firstFieldObject))
        {
            while (enumerator.moveNext())
            {
                if (_fieldObject.equal(enumerator.current()))
                {
                    fieldObject = previousFieldObject;
                    break;
                }

                previousFieldObject = enumerator.current();
            }
        }

        return fieldObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionInquirySelectedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the selected fields list of the tax transaction inquiry.
    /// </summary>
    /// <param name = "_defaultFieldList">the default fields list if there is not any selected field in the list panel</param>
    public void initTaxTransactionInquirySelectedFields(List  _defaultFieldList = null)
    {
        TaxTransactionInquirySelectedFields_IN  selectedField;
        ListEnumerator                          listEnumerator;
        TableId                                 taxTransactionTableId;
        FieldId                                 selectedFieldId;

        if (sortedSelectedFieldObjects.empty() && taxTransactionInquiry)
        {
            while select selectedField order by Position asc
                where selectedField.TaxTransactionInquiry == taxTransactionInquiry.RecId
            {
                this.addFieldObject(TaxTransactionInquiryFieldObject_IN::construct(
                    selectedField.TaxTransactionTableId,
                    selectedField.SelectedFieldId));
            }
        }

        //If there is no field selected, then use the defaulted field id list
        if (sortedSelectedFieldObjects.empty() && _defaultFieldList)
        {
            listEnumerator = _defaultFieldList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                [taxTransactionTableId, selectedFieldId] = listEnumerator.current();
                this.addFieldObject(TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, selectedFieldId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionInquiryTotalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the selected total fields list of the tax transaction inquiry.
    /// </summary>
    /// <param name = "_defaultFieldList">the default total fields list if there is not any selected field in the list panel</param>
    public void initTaxTransactionInquiryTotalFields(List  _defaultFieldList = null)
    {
        TaxTransactionInquiryTotalFields_IN     totalField;
        ListEnumerator                          listEnumerator;
        TableId                                 taxTransactionTableId;
        FieldId                                 selectedFieldId;

        if (sortedSelectedFieldObjects.empty() && taxTransactionInquiry)
        {
            while select totalField order by Position asc
                where totalField.TaxTransactionInquiry == taxTransactionInquiry.RecId
            {
                this.addFieldObject(TaxTransactionInquiryFieldObject_IN::construct(
                    totalField.TaxTransactionTableId,
                    totalField.SelectedFieldId));
            }

            //If there is no field selected, then use the defaulted field id list
            if (sortedSelectedFieldObjects.empty() && _defaultFieldList)
            {
                listEnumerator = _defaultFieldList.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    [taxTransactionTableId, selectedFieldId] = listEnumerator.current();
                    this.addFieldObject(TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, selectedFieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldObjectsList</Name>
				<Source><![CDATA[
    private void initFieldObjectsList()
    {
        sortedSelectedFieldObjects = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    private void reset()
    {
        this.initFieldObjectsList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTransactionInquiryFieldPrioritizer_IN construct(TaxTransactionInquiry_IN    _taxTransactionInquiry  = null)
    {
        TaxTransactionInquiryFieldPrioritizer_IN  prioritizer = new TaxTransactionInquiryFieldPrioritizer_IN(_taxTransactionInquiry);

        return prioritizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creat a new instance of class TaxTransactionInquiryFieldPrioritizer_IN by a packed prioritizer.
    /// </summary>
    /// <param name = "_packedPrioritizer">the packed prioritizer</param>
    /// <returns>
    /// New instance of TaxTransactionInquiryFieldPrioritizer_IN.
    /// </returns>
    public static TaxTransactionInquiryFieldPrioritizer_IN create(container _packedPrioritizer)
    {
        TaxTransactionInquiryFieldPrioritizer_IN prioritizer = TaxTransactionInquiryFieldPrioritizer_IN::construct();
        prioritizer.unpack(_packedPrioritizer);

        return prioritizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a construction function which assigns the instance of table of the data source and
    /// initializes the list of the field objects.
    /// </summary>
    /// <param name = "_taxTransactionInquiry">the table instance</param>
    protected void new(TaxTransactionInquiry_IN    _taxTransactionInquiry)
    {
        taxTransactionInquiry = _taxTransactionInquiry;
        this.initFieldObjectsList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>