<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>diotDeclarationGenerator_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class diotDeclarationGenerator_MX
{
    VendInvoiceJour                     vendInvoiceJour;
    DIOTAdditionalInfoForNoVendor_MX    diotAdditionalInfo;
    DIOTDeclarationDP_MX                diotDeclarationDP;
    DIOTDeclarationConcept_MX           diotDeclarationConcept;
    DIOTDeclarationTaxCode_MX           diotDeclarationTaxCode;
    LedgerJournalTrans                  ledgerJournalTrans;
    DIOTDeclarationTmp_MX               diotDeclarationTmp;
    DIOTDeclarationTmp_MX               diotDeclarationTmpLoc;
    TaxTrans                            taxTrans;
    VendTable                           vendTable;
    Filename                            filenameSave;
    str 350                             openRecord;
    TextStreamIo                              file;
    Integer                             currentCursorPos;
    container                           returnTextLineWithPosition;
    Integer                             recLine;
    Integer                             firstColumnOrder;
    private NoYes                       absValueInGeneratedFile;
    private UserConnection              uc;

    #DIOT_MX
    #xppTexts
    #define.outFieldDelimiter('|')
    #define.inFieldDelimiter('\n')
    #define.writeMode('w')
    #define.Blank('')
    #define.padZero('0')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAmountsForAllConcepts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for Records with same Rfc or Foreign Tax Registration value and Type of operation,
    /// Values are added with have same Rfc or Foreign Tax Registration value and Type of operation
    /// </summary>
    /// <param name="_diotDeclarationTmpLoc">
    /// DIOTDeclarationTmp_MX temporary table buffer
    /// </param>
    /// <param name="_vendAccount">
    /// vendor account value  to be checked
    /// </param>
    /// <param name="_operationType">
    /// Type of operation value to be checked
    /// </param>
    /// <param name="_vendorType">
    /// Type of vendor value to be checked
    /// </param>
    /// <param name="_rfcOrForeignTaxReg">
    /// Rfc or Foreign tax registration number to be checked
    /// </param>
    /// <returns>
    /// returns Map with amounts based on the column order
    /// </returns>
    public Map checkAmountsForAllConcepts(
        DIOTDeclarationTmp_MX   _diotDeclarationTmpLoc,
        VendAccount             _vendAccount,
        String30                _operationType,
        VendorType_MX           _vendorType,
        Description             _rfcOrForeignTaxReg)
    {
        Map mapAmounts = new Map(Types::Integer, Types::Real);

        while select diotDeclarationTmpLoc
            where diotDeclarationTmpLoc.VendorOperationType == _operationType
               && diotDeclarationTmpLoc.VendorType          == _vendorType
               && ((diotDeclarationTmpLoc.RfcOrForeignTaxReg == _rfcOrForeignTaxReg && diotDeclarationTmpLoc.VendAccount == _vendAccount) || diotDeclarationTmp.VendorType == VendorType_MX::DomesticGlobal)
        {
            select diotDeclarationConcept
                where diotDeclarationConcept.ConceptId == diotDeclarationTmpLoc.ConceptId;
            mapAmounts  = this.lookUpAmounts(mapAmounts, diotDeclarationTmpLoc.Amount, diotDeclarationConcept.ColumnOrder);
        }

        return mapAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for managed and non- managed transactions for transactions that are between the from date
    ///    and to date.
    /// </summary>
    /// <param name="_streamIo">
    ///    A <c>TextStreamIo</c> object that was created by the <c>newFile</c> method.
    /// </param>
    /// <param name="_contract">
    ///    The data contract object for DIOT declaration
    /// </param>
    public void generate(
        TextStreamIo                _streamIo,
        DiotDeclarationContract_MX  _contract)
    {
        Description     rfcOrForeignTaxReg;
        VendorType_MX   vendorType;
        String30        operationType;
        VendAccount     vendAccount;
        Map             mapAmounts = new Map(Types::Integer, Types::Real);

        diotDeclarationDP  = new DIOTDeclarationDP_MX();
        diotDeclarationDP.parmDataContract(_contract);

        diotDeclarationTmp = diotDeclarationDP.processFile();

        if (DIOTDeclarationGeneratorDisposeTempTableFlight::instance().isEnabled())
        {
            this.setUserConnection(diotDeclarationTmp);
            this.setUserConnection(diotDeclarationTmpLoc);
        } 
        else 
        {
            diotDeclarationTmp.takeOwnershipOfTempDBTable(true);
            diotDeclarationTmpLoc.takeOwnershipOfTempDBTable(true);
        }

        diotDeclarationTmpLoc.linkPhysicalTableInstance(diotDeclarationTmp);

        while select diotDeclarationTmp
            order by VendorType, VendorOperationType, RfcOrForeignTaxReg, VendAccount
        {
            if (operationType         != diotDeclarationTmp.VendorOperationType
               || vendorType         != diotDeclarationTmp.VendorType
               || ((vendAccount       != diotDeclarationTmp.VendAccount || rfcOrForeignTaxReg != diotDeclarationTmp.RfcOrForeignTaxReg) && diotDeclarationTmp.VendorType != VendorType_MX::DomesticGlobal))
            {
                recLine    = 355;
                openRecord = #emptyString;
                openRecord = strrep(#space, recLine);

                returnTextLineWithPosition = this.insertRecordsIntoTextFile(openRecord,
                                                                            diotDeclarationTmp.VendorType,
                                                                            diotDeclarationTmp.VendorOperationType,
                                                                            diotDeclarationTmp.Rfc,
                                                                            diotDeclarationTmp.ForeignTaxRegistration,
                                                                            diotDeclarationTmp.VendorName,
                                                                            diotDeclarationTmp.CountryCode,
                                                                            diotDeclarationTmp.Nationality);

                mapAmounts = this.checkAmountsForAllConcepts(diotDeclarationTmpLoc,
                                                            diotDeclarationTmp.VendAccount,
                                                            diotDeclarationTmp.VendorOperationType,
                                                            diotDeclarationTmp.VendorType,
                                                            diotDeclarationTmp.RfcOrForeignTaxReg);

                openRecord       = conpeek(returnTextLineWithPosition, 1);
                currentCursorPos = conpeek(returnTextLineWithPosition, 2);

                returnTextLineWithPosition = this.insertAllAmountsRecordIntoTextFile(mapAmounts,
                                                                                     openRecord,
                                                                                     currentCursorPos);

                _streamIo.write(strRTrim(conpeek(returnTextLineWithPosition, 1)));
                firstColumnOrder = 1;
            }

            operationType      = diotDeclarationTmp.VendorOperationType;
            vendorType         = diotDeclarationTmp.VendorType;
            rfcOrForeignTaxReg = diotDeclarationTmp.RfcOrForeignTaxReg;
            vendAccount        = diotDeclarationTmp.vendAccount;
        }

        if (DIOTDeclarationGeneratorDisposeTempTableFlight::instance().isEnabled())
        {
            diotDeclarationTmp.dispose();
            diotDeclarationTmpLoc.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllAmountsRecordIntoTextFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts all amounts into the container.
    /// </summary>
    /// <param name="_amountConcepts">
    ///    A map that contains amounts based on the column orders.
    /// </param>
    /// <param name="_openRecord">
    ///    A value to which to add the amount value.
    /// </param>
    /// <param name="_currentCursorPos">
    ///    A value to add, depending on the length of the string that is added in the file.
    /// </param>
    /// <returns>
    ///    Containers that have all the amounts based on the concepts that were inserted.
    /// </returns>
    public container insertAllAmountsRecordIntoTextFile(
        Map     _amountConcepts,
        str 350 _openRecord,
        Integer _currentCursorPos)
    {
        firstColumnOrder = #minColumnOrder;

        returnTextLineWithPosition = this.insertSingleAmountsRecordIntoTextFile(_openRecord,
                                                                                _amountConcepts,
                                                                                firstColumnOrder,
                                                                                _currentCursorPos);
        firstColumnOrder = conpeek(returnTextLineWithPosition, 2);

        while (firstColumnOrder <= #maxColumnOrder)
        {
            returnTextLineWithPosition = this.insertSingleAmountsRecordIntoTextFile(conpeek(returnTextLineWithPosition, 1),
                                                                                    _amountConcepts,
                                                                                    firstColumnOrder,
                                                                                    conpeek(returnTextLineWithPosition, 3));

            firstColumnOrder = conpeek(returnTextLineWithPosition, 2);
        }

        return returnTextLineWithPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsIntoTextFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>VendorType</c>, <c>vendorOperation</c>, <c>Rfc</c>, <c>foreignTaxRegistration</c>,
    ///    <c>Name</c>, <c>DIOTCountryCode</c>, and <c>VendorNationality</c> values to the file.
    /// </summary>
    /// <param name="_openRecord">
    ///    The string to which to add the <c>VendorType</c>, <c>vendorOperation</c>, <c>Rfc</c>,
    ///    <c>ForeignTaxRegistration</c>, <c>Name</c>, <c>DIOTCountryCode</c>, and <c>VendorNationality</c>
    ///    values.
    /// </param>
    /// <param name="_vendorType">
    ///    A vendor type value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_vendorOperation">
    ///    The type of operation value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_rfc">
    ///    The RFC value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_foreignTaxRegistration">
    ///    The foreign tax registration value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_name">
    ///    The name value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_diotCountryCode">
    ///    The DIOT country code value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <param name="_vendorNationality">
    ///    The vendor nationality value to add to the <paramref name="openRecord" /> parameter.
    /// </param>
    /// <returns>
    ///    A container that has the values that were added with the string and last position.
    /// </returns>
    public container insertRecordsIntoTextFile(
        str 350                     _openRecord,
        VendorType_MX               _vendorType,
        str 30                      _vendorOperation,
        Rfc_MX                      _rfc,
        ForeignTaxRegistration_MX   _foreignTaxRegistration,
        VendName                    _name,
        DiotCountryCode_MX          _diotCountryCode,
        VendorNationality_MX        _vendorNationality)
    {
        currentCursorPos = 7;

        _openRecord = strpoke(_openRecord, this.padZeroIfSingleDigit(int2str(enum2int(_vendorType))), 1);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, 3);

        _openRecord = strpoke(_openRecord, this.padZeroIfSingleDigit(int2str(enum2int(_vendorOperation))), 4);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, 6);

        if (_vendorType != VendorType_MX::DomesticGlobal)
        {
            _openRecord = strpoke(_openRecord, _rfc, currentCursorPos);
            currentCursorPos += strlen(_rfc);
        }
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, currentCursorPos);
        currentCursorPos++;

        _openRecord = strpoke(_openRecord, _foreignTaxRegistration, currentCursorPos);
        currentCursorPos += strlen(_foreignTaxRegistration);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, currentCursorPos);
        currentCursorPos++;

        _openRecord = strpoke(_openRecord, _name, currentCursorPos);
        currentCursorPos += strlen(_name);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, currentCursorPos);
        currentCursorPos++;

        _openRecord = strpoke(_openRecord, _diotCountryCode, currentCursorPos);
        currentCursorPos += strlen(_diotCountryCode);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, currentCursorPos);
        currentCursorPos++;

        _openRecord = strpoke(_openRecord, _vendorNationality, currentCursorPos);
        currentCursorPos += strlen(_vendorNationality);
        _openRecord = strpoke(_openRecord, #outFieldDelimiter, currentCursorPos);
        currentCursorPos++;

        returnTextLineWithPosition = conins(returnTextLineWithPosition, 1, _openRecord);
        returnTextLineWithPosition = conins(returnTextLineWithPosition, 2, currentCursorPos);

        return returnTextLineWithPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSingleAmountsRecordIntoTextFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for values that exist at the key position in the specified map.
    /// </summary>
    /// <param name="_openRecord">
    ///    A string to which to add amounts.
    /// </param>
    /// <param name="_amountsBasedOnConcepts">
    ///    A map that contains amounts based on the column orders.
    /// </param>
    /// <param name="_firstColumnOrder">
    ///    A map key value to use to check whether values exist.
    /// </param>
    /// <param name="_currentCursorPos">
    ///    A value to add based on the length of the string that was added in the file.
    /// </param>
    /// <returns>
    ///    A map that has the values inserted at the position of the key.
    /// </returns>
    public container insertSingleAmountsRecordIntoTextFile(
        str 350     _openRecord,
        Map         _amountsBasedOnConcepts,
        Integer     _firstColumnOrder,
        Integer     _currentCursorPos)
    {
        Amount  amountFromMap;
        boolean existsAmounts;
        str     covertToString;

        #define.blank('')

        existsAmounts = _amountsBasedOnConcepts.exists(_firstColumnOrder);

        amountFromMap = this.lookUpAmountsInMap(_amountsBasedOnConcepts, _firstColumnOrder);
        amountFromMap = absValueInGeneratedFile 
            ? abs(amountFromMap)
            : amountFromMap;

        if (existsAmounts)
        {
            amountFromMap     = decround(amountFromMap, 0);
            covertToString    = strLTrim(int2str(any2int(amountFromMap)));
            _openRecord       = strpoke(_openRecord, covertToString, _currentCursorPos);
            _currentCursorPos = _currentCursorPos + strlen(covertToString);
        }
        else
        {
            openRecord  = strpoke(_openRecord, #blank, _currentCursorPos);
        }

        if (_firstColumnOrder <= #maxColumnOrder)
        {
            _openRecord = strpoke(_openRecord, #outFieldDelimiter, _currentCursorPos);
        }

        _firstColumnOrder++;
        _currentCursorPos++;

        returnTextLineWithPosition = conins(returnTextLineWithPosition, 1, _openRecord);
        returnTextLineWithPosition = conins(returnTextLineWithPosition, 2 , _firstColumnOrder);
        returnTextLineWithPosition = conins(returnTextLineWithPosition, 3, _currentCursorPos);

        return returnTextLineWithPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for values that exist at the key position in the map.
    /// </summary>
    /// <param name="_amountsConcepts">
    ///    The map to check whether amounts exist at a particular position.
    /// </param>
    /// <param name="_amountValue">
    ///    An amount value to check for existence. Otherwise to add to the map.
    /// </param>
    /// <param name="_key">
    ///    The key position at which to insert or get the value from the map.
    /// </param>
    /// <returns>
    ///    A map that has the values that were inserted at the position of the key.
    /// </returns>
    public Map lookUpAmounts(
        Map     _amountsConcepts,
        Amount  _amountValue,
        Integer _key)
    {
        Amount  amountFromMap;

        if (_amountsConcepts.exists(_key))
        {
            amountFromMap = _amountsConcepts.lookup(_key);
        }

        amountFromMap += _amountValue;
        _amountsConcepts.insert(_key, amountFromMap);

        return _amountsConcepts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpAmountsInMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for values that exist at the key position in the map.
    /// </summary>
    /// <param name="_amountsConcepts">
    ///    The map to check whether amounts exists at a particular position.
    /// </param>
    /// <param name="_key">
    ///    The key position to check.
    /// </param>
    /// <returns>
    ///    The amount if it already exists in the map; otherwise, zero.
    /// </returns>
    public Amount lookUpAmountsInMap(
        Map     _amountsConcepts,
        Integer _key)
    {
        Amount  amountFromMap;

        if (_amountsConcepts.exists(_key))
        {
            amountFromMap = _amountsConcepts.lookup(_key);
        }
        else
        {
            amountFromMap = 0;
        }

        return amountFromMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>padZeroIfSingleDigit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a zero if the length is equal to one; otherwise, returns the same string.
    /// </summary>
    /// <param name="_vendorOperationType">
    ///    The type of operation to pad.
    /// </param>
    /// <returns>
    ///    The string with an added zero if it is a single digit; otherwise, the same string.
    /// </returns>
    public str padZeroIfSingleDigit(str _vendorOperationType)
    {
        if (strlen(_vendorOperationType) == 1)
        {
            _vendorOperationType = #padZero + _vendorOperationType;
        }

        return _vendorOperationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new object of Text Stream IO object, checks whether the stream is ok and
    /// add inFieldDelimiter '\n' to each line written in the file
    /// </summary>
    /// <param name="_filenameSave">
    /// Name of the file and path passed from the dialog
    /// </param>
    /// <returns>
    /// returns object of the TextStreamIo Class
    /// </returns>
    public TextStreamIo newFile(Filename _filenameSave)
    {
        FileIOPermission    fileIOPermission;
        TextStreamIo        streamIo;

        fileIOPermission = new FileIOPermission(_filenameSave, #writeMode);
        fileIOPermission.assert();

        streamIo = AsciiStreamIo::constructForWrite();

        if (!streamIo || streamIo.status() != IO_Status::Ok)
        {
            throw error(strfmt("@SYS73665", _filenameSave));
        }

        streamIo.inFieldDelimiter(#inFieldDelimiter);

        return streamIo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the output file name.
    /// </summary>
    /// <remarks>
    /// The formats uses the following pattern 'DIOT_yyyy-MM.txt'
    /// </remarks>
    /// <returns>The file name formatted.</returns>
    public str formatFileName()
    {
        str yearMonth = date2Str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 321, DateDay::None, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4);
        return strFmt('DIOT_%1.txt', yearMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAbsValueInGeneratedFile</Name>
				<Source><![CDATA[
    public NoYes parmAbsValueInGeneratedFile(NoYes _absValueInGeneratedFile = absValueInGeneratedFile)
    {
        absValueInGeneratedFile = _absValueInGeneratedFile;
        return absValueInGeneratedFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    private UserConnection parmUserConnection()
    {
        if (!uc)
        {
            uc = new UserConnection();
        } 
        return uc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>