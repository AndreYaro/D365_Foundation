<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjMethod_OpenBalance_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c> InfAdjMethod_OpenBalance_MX </c>class handles the calculation of the inflation adjustment
///    for the opening balance adjustment method and returns the buffer of the temporary
///    <c>RepomoReportTmp_MX</c> table that is used for posting and reports.
/// </summary>
public class InfAdjMethod_OpenBalance_MX extends InfAdjMethod_MX
{
    container           conTotalAssets;
    container           conTotalLiablities;
    container           conDifference;
    container           conMonthlyINPC;
    container           conInflationRatio;
    container           conRepomoMonthlyAdjustment;
    Amount              repomoAmount;
    int                 diffInMonths;
    RepomoReportTmp_MX  repomoTmp;
    MainAccountNum      fromMainAccount;
    MainAccountNum      toMainAccount;

    #InflationAdjustment_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation adjustment for the opening balance adjustment method and returns the
    ///    buffer of the temporary <c>RepomoReportTmp_MX</c> table.
    /// </summary>
    /// <param name="_repomoReportTmp">
    ///    The buffer from the <c>RepomoReportTmp_MX</c> temporary table that is used to calculate the total
    ///    inflation adjustment for the opening balance adjustment method.
    /// </param>
    /// <returns>
    ///    The buffer from the <c>RepomoReportTmp_MX</c> temporary table that has the inflation adjustment
    ///    values.
    /// </returns>
    /// <remarks>
    ///    The method considers the monthly INPC and the inflation ratio to calculate the inflation adjustment
    ///    for the opening balance adjustment method.
    /// </remarks>
    public Common calculate(Common   _repomoReportTmp)
    {
        ToDate  endDate;

        endDate = fromDate - 1;

        this.getTotalByReportType(_repomoReportTmp, #Asset);
        this.getTotalByReportType(_repomoReportTmp, #Liability);
        this.getDifference();
        conMonthlyINPC = this.getMonthlyINPC(mkdate(1, mthofyr(endDate), year(endDate)), endDate, diffInMonths + 1);
        this.getInflationRatio();
        this.getMonthlyAdjustment();

        return _repomoReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the consolidated amount of assets and liabilities.
    /// </summary>
    /// <returns>
    ///    The container that has the consolidated amount of assets and liabilities.
    /// </returns>
    /// <remarks>
    ///    The consolidated amount of assets and liabilities is retrieved in a container to use for further
    ///    calculation.
    /// </remarks>
    public container getConDifference()
    {
        return conDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the difference in the total assets and total liabilities.
    /// </summary>
    private void getDifference()
    {
        int i = 1;

        for (i=1; i<=13; i++)
        {
            conDifference = conins(conDifference, i, conpeek(conTotalAssets, i) + conpeek(conTotalLiablities, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInflationRatio</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation ratio.
    /// </summary>
    private void getInflationRatio()
    {
        int  noOfMonths = 1;
        real ratio;

        while (noOfMonths <= diffInMonths + 1)
        {
            ratio = noOfMonths > 1 ?(conpeek(conMonthlyINPC, noOfMonths) - conpeek(conMonthlyINPC, noOfMonths-1))/ conpeek(conMonthlyINPC, noOfMonths-1)
                                   : 0;

            ratio = decround(ratio, 4);

            conInflationRatio = conins(conInflationRatio, noOfMonths, ratio);
            noOfMonths ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthlyAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the monthly adjustment using the inflation ratio and the difference in the assets and
    ///    liabilities.
    /// </summary>
    private void getMonthlyAdjustment()
    {
        int     noOfMonths = 1;
        Amount  totalAdjAmount;

        while (noOfMonths <= diffInMonths + 1)
        {
            totalAdjAmount = conpeek(conInflationRatio, noOfMonths) * conpeek(conDifference, noOfMonths);

            CurrencyCode currencyCode = Ledger::accountingCurrency();

            totalAdjAmount = CurrencyExchange::round(totalAdjAmount, currencyCode);
            repomoAmount += totalAdjAmount;
            conRepomoMonthlyAdjustment = conins(conRepomoMonthlyAdjustment, noOfMonths, totalAdjAmount);
            noOfMonths++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalByReportType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total of the assets and liabilities based on the report type passed.
    /// </summary>
    /// <param name="_repomoReportTmp">
    ///    The buffer from the <c>RepomoReportTmp_MX</c>temporary table, which contains all the opening
    ///    balances of the asset and liability accounts.
    /// </param>
    /// <param name="_reportType">
    ///    The asset or liability report that is used to calculate the totals.
    /// </param>
    /// <remarks>
    ///    This method considers the summation of opening balances per month for the asset and liability
    ///    accounts and inserts them into a container.
    /// </remarks>
    private void getTotalByReportType(
        RepomoReportTmp_MX _repomoReportTmp,
        String30           _reportType)
    {
        RepomoReportTmp_MX repomoReportTmp;
        container          conTotal;

        repomoReportTmp.setTmpData(_repomoReportTmp);

        select sum(BalancePrevMonth1),
               sum(BalanceMonth1),
               sum(BalanceMonth2),
               sum(BalanceMonth3),
               sum(BalanceMonth4),
               sum(BalanceMonth5),
               sum(BalanceMonth6),
               sum(BalanceMonth7),
               sum(BalanceMonth8),
               sum(BalanceMonth9),
               sum(BalanceMonth10),
               sum(BalanceMonth11),
               sum(BalanceMonth12)
            from  repomoReportTmp
            where repomoReportTmp.ReportType == _reportType;

        conTotal = conins(conTotal, 1,  repomoReportTmp.BalancePrevMonth1);
        conTotal = conins(conTotal, 2,  repomoReportTmp.BalanceMonth1);
        conTotal = conins(conTotal, 3,  repomoReportTmp.BalanceMonth2);
        conTotal = conins(conTotal, 4,  repomoReportTmp.BalanceMonth3);
        conTotal = conins(conTotal, 5,  repomoReportTmp.BalanceMonth4);
        conTotal = conins(conTotal, 6,  repomoReportTmp.BalanceMonth5);
        conTotal = conins(conTotal, 7,  repomoReportTmp.BalanceMonth6);
        conTotal = conins(conTotal, 8,  repomoReportTmp.BalanceMonth7);
        conTotal = conins(conTotal, 9,  repomoReportTmp.BalanceMonth8);
        conTotal = conins(conTotal, 10, repomoReportTmp.BalanceMonth9);
        conTotal = conins(conTotal, 11, repomoReportTmp.BalanceMonth10);
        conTotal = conins(conTotal, 12, repomoReportTmp.BalanceMonth11);
        conTotal = conins(conTotal, 13, repomoReportTmp.BalanceMonth12);

        if (_reportType == #Asset)
        {
            conTotalAssets = conTotal;
        }
        else if (_reportType == #Liability)
        {
            conTotalLiablities = conTotal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRepomoTmpBalanceFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the opening balance of accounts into a temporary table for each month.
    /// </summary>
    /// <param name="_currentMonth">
    ///    The current month indicator, which specifies the field in which to store the opening balance of the
    ///    accounts.
    /// </param>
    /// <param name="_amount">
    ///    The opening balance of the accounts.
    /// </param>
    /// <remarks>
    ///    This method is used in the <c>populateTmpTable</c> method to insert the value of the opening
    ///    balances into the respective fields in the temporary table, based on the month indicator.
    /// </remarks>
    private void initRepomoTmpBalanceFields(
        int     _currentMonth,
        Amount  _amount)
    {
        switch (_currentMonth)
        {
            case 1:
                repomoTmp.BalanceMonth1 =_amount;
                break;
            case 2:
                repomoTmp.BalanceMonth2 = _amount;
                break;
            case 3:
                repomoTmp.BalanceMonth3 = _amount;
                break;
            case 4:
                repomoTmp.BalanceMonth4 = _amount;
                break;
            case 5:
                repomoTmp.BalanceMonth5 = _amount;
                break;
            case 6:
                repomoTmp.BalanceMonth6 = _amount;
                break;
            case 7:
                repomoTmp.BalanceMonth7 = _amount;
                break;
            case 8:
                repomoTmp.BalanceMonth8 = _amount;
                break;
            case 9:
                repomoTmp.BalanceMonth9 = _amount;
                break;
            case 10:
                repomoTmp.BalanceMonth10 = _amount;
                break;
            case 11:
                repomoTmp.BalanceMonth11 = _amount;
                break;
            case 12:
                repomoTmp.BalanceMonth12 = _amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConRepomoMonthlyAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="conRepomoMonthlyAdjustment" /> parameter.
    /// </summary>
    /// <param name="_conRepomoMonthlyAdjustment">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="conRepomoMonthlyAdjustment" /> parameter.
    /// </returns>
    public container parmConRepomoMonthlyAdjustment(container _conRepomoMonthlyAdjustment = conRepomoMonthlyAdjustment)
    {
        conRepomoMonthlyAdjustment = _conRepomoMonthlyAdjustment;

        return conRepomoMonthlyAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiffInMonths</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="diffInMonths" /> parameter.
    /// </summary>
    /// <param name="_diffInMonths">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="diffInMonths" /> parameter.
    /// </returns>
    public int parmDiffInMonths(int _diffInMonths = diffInMonths)
    {
        diffInMonths = _diffInMonths;

        return diffInMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="fromMainAccount" /> parameter.
    /// </summary>
    /// <param name="_fromMainAccount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="fromMainAccount" /> parameter.
    /// </returns>
    public MainAccountNum parmFromMainAccount(MainAccountNum _fromMainAccount = fromMainAccount)
    {
        fromMainAccount = _fromMainAccount;

        return fromMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="toMainAccount" /> parameter.
    /// </summary>
    /// <param name="_toMainAccount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="toMainAccount" /> parameter.
    /// </returns>
    public MainAccountNum parmToMainAccount(MainAccountNum _toMainAccount = toMainAccount)
    {
        toMainAccount = _toMainAccount;

        return toMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>RepomoReportTmp_MX</c> temporary table for the opening balance adjustment method.
    /// </summary>
    /// <param name="_fromDate">
    ///    The start date to select the range of transactions.
    /// </param>
    /// <param name="_toDate">
    ///    The end date to select the range of transactions.
    /// </param>
    /// <returns>
    ///    The buffer from the <c>RepomoReportTmp_MX</c> temporary table that contains the inflation
    ///    adjustment values for the opening balance adjustment method.
    /// </returns>
    /// <remarks>
    ///    This method considers the main accounts by using the opening balance adjustment method and inserts
    ///    the opening balance per month. The opening balance is calculated on the start date of the fiscal
    ///    calendar setup. From then on, the transactions are added to arrive at the ending balance of each
    ///    month, which will be carried forward as the opening balance for the next month.
    /// </remarks>
    public Common populateTmpTable(
        FromDate    _fromDate,
        ToDate      _toDate)
    {
        MainAccount                         mainAccount;
        int                                 currentMonth;
        FromDate                            startDate;
        ToDate                              endDate;
        FromDate                            startOfYear;
        Amount                              transAmount[12];
        Amount                              openingBalance[12];
        Amount                              transAmountBeforeFromDate;
        Amount                              openingBalanceStartOfYear;
        CurrencyCode                        currencyCode;
        boolean                             insertedCurrencyCode = false;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        fromDate = _fromDate;
        toDate   = _toDate;

        diffInMonths = InfAdjValidation_MX::monthDifference(fromDate, toDate);
        startOfYear  = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);
        currencyCode = Ledger::accountingCurrency();

        //REPOMO calculations
        while select Type, RepomoType_MX, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::OpenBalance
               && ((!fromMainAccount || mainAccount.MainAccountId >= fromMainAccount)
               && (!toMainAccount || mainAccount.MainAccountId <= toMainAccount))
               && (mainAccount.Type == DimensionLedgerAccountType::Asset
               ||  mainAccount.Type == DimensionLedgerAccountType::Liability
               || (mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
               && (mainAccount.RepomoType_MX == RepomoType_MX::Asset
               ||  mainAccount.RepomoType_MX == RepomoType_MX::Liability)))
        {
            while select DisplayValue, RecId
                from  dimensionAttributeValueCombination
                exists join LedgerDimension from generalJournalAccountEntry
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                repomoTmp.LedgerDimension = dimensionAttributeValueCombination.RecId;
                repomoTmp.DisplayValue    = dimensionAttributeValueCombination.DisplayValue;
                repomoTmp.MainAccountName = MainAccount::getLocalizedName(mainAccount.RecId);

                startDate    = fromDate;
                endDate      = endmth(startDate);

                openingBalanceStartOfYear = 0;
                transAmountBeforeFromDate = 0;
                currentMonth = 1;

                openingBalanceStartOfYear = this.getAccountingCurrencyAmount(startOfYear, endmth(startOfYear), mainAccount.RecId, FiscalPeriodType::Opening, dimensionAttributeValueCombination.DisplayValue);

                if (startOfYear != fromDate)
                {
                    transAmountBeforeFromDate = this.getAccountingCurrencyAmount(startOfYear, fromDate - 1, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);
                }

                openingBalance[currentMonth] = openingBalanceStartOfYear + transAmountBeforeFromDate;

                while (currentMonth <= diffInMonths)
                {
                    this.initRepomoTmpBalanceFields(currentMonth, openingBalance[currentMonth]);

                    if (currentMonth == diffInMonths)
                    {
                        break;
                    }

                    transAmount [currentMonth] = this.getAccountingCurrencyAmount(startDate, endDate, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);
                    openingBalance[currentMonth + 1] = openingBalance[currentMonth] + transAmount [currentMonth];

                    startDate = endDate + 1;
                    endDate   = endmth(startDate);
                    currentMonth++;
                }

                switch (mainAccount.Type)
                {
                    case DimensionLedgerAccountType::Asset:
                        repomoTmp.ReportType = #Asset;
                        break;
                    case DimensionLedgerAccountType::Liability:
                        repomoTmp.ReportType = #Liability;
                        break;
                    case DimensionLedgerAccountType::BalanceSheet:
                        if (mainAccount.RepomoType_MX == RepomoType_MX::Asset)
                        {
                            repomoTmp.ReportType = #Asset;
                        }
                        else if (mainAccount.RepomoType_MX == RepomoType_MX::Liability)
                        {
                            repomoTmp.ReportType = #Liability;
                        }
                        break;
                }

                if (!insertedCurrencyCode)
                {
                    repomoTmp.CurrencyCode = currencyCode;
                    insertedCurrencyCode   = true;
                }

                if (repomoTmp.BalanceMonth1 ||
                    repomoTmp.BalanceMonth2 ||
                    repomoTmp.BalanceMonth3 ||
                    repomoTmp.BalanceMonth4 ||
                    repomoTmp.BalanceMonth5 ||
                    repomoTmp.BalanceMonth6 ||
                    repomoTmp.BalanceMonth7 ||
                    repomoTmp.BalanceMonth8 ||
                    repomoTmp.BalanceMonth9 ||
                    repomoTmp.BalanceMonth10 ||
                    repomoTmp.BalanceMonth11 ||
                    repomoTmp.BalanceMonth12)
                {
                    repomoTmp.insert();
                }
            }
        }

        return repomoTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>