<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLExcelReport_RetailCashCollection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>XMLExcelReport_RetailCashCollection_RU</c> used for output of cash collection report to excel.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class XMLExcelReport_RetailCashCollection_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    LedgerJournalTrans       ledgerJournalTrans;
    LedgerJournalTrans_RCash ledgerJournalTrans_RCash;

    ArrayExtend_RU      declarationArray;
    int                 declarationIdx;

    #define.TransmittalRegister             ('TransmittalRegister')
    #define.TransmittalRegisterDeclaration  ('TransmittalRegisterDecl')
    #define.InvoiceToBag                    ('InvoiceToBag')
    #define.InvoiceToBagDeclaration         ('InvoiceToBagDeclaration')
    #define.QuittanceToBag                  ('QuittanceToBag')
    #define.DeclarationHeader               ('DeclarationHeader')
    #define.DeclarationFooter               ('DeclarationFooter')

    #define.TransmittalRegisterPageNo       (1)
    #define.InvoiceToBagPageNo              (3)
    #define.QuittanceToBagPageNo            (5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashierName</Name>
				<Source><![CDATA[
    private Name cashierName()
    {
        return HcmWorker::find(ledgerJournalTrans.BankRespWorkerId_RU).getFIO_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBookMark</Name>
				<Source><![CDATA[
    #define.TransmittalRegisterPrefix   ('T_')
    #define.InvoiceToBagPrefix          ('I_')
    #define.QuittanceToBagPrefix        ('Q_')
    private MSOfficeBookMark_RU createBookMark(MSOfficeBookMark_RU _parentSheetBookmark, MSOfficeBookMark_RU _childBookmark)
    {
        MSOfficeBookMark_RU ret = _childBookmark;

        switch (_parentSheetBookmark)
        {
            case #TransmittalRegister:
            case #TransmittalRegisterDeclaration:
                ret = #TransmittalRegisterPrefix + ret;
                break;

            case #InvoiceToBag:
            case #InvoiceToBagDeclaration:
                ret = #InvoiceToBagPrefix + ret;
                break;

            case #QuittanceToBag:
                ret = #QuittanceToBagPrefix + ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeclarationArray</Name>
				<Source><![CDATA[
    private void createDeclarationArray()
    {
        RetailCashCollDeclarationJourTrans_RU cashCollDeclarationJourTrans;

        declarationArray = ArrayExtend_RU::createAndInit(Types::Container);

        while select DenominationAmount, Qty from cashCollDeclarationJourTrans
            index DeclarationIdx
            where cashCollDeclarationJourTrans.LedgerJournalTrans_RCash == ledgerJournalTrans_RCash.RefRecId
               && cashCollDeclarationJourTrans.Qty                      >  0
        {
            declarationArray.addElement([cashCollDeclarationJourTrans.DenominationAmount, cashCollDeclarationJourTrans.Qty, cashCollDeclarationJourTrans.declarationAmount()]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    #define.DeclarationWidthCol (159)

    protected void createReport()
    {
        this.initSectionMap();

        // Transmittal
        this.setCurrentWorksheetNum(#TransmittalRegisterPageNo);
        this.execute(#TransmittalRegister);

        this.setCurrentWorksheetNum(#TransmittalRegisterPageNo + 1, #DeclarationWidthCol);
        this.processDeclaration(#TransmittalRegisterDeclaration);

        // Invoice
        this.setCurrentWorksheetNum(#InvoiceToBagPageNo);
        this.execute(#InvoiceToBag);

        this.setCurrentWorksheetNum(#InvoiceToBagPageNo + 1, #DeclarationWidthCol);
        this.processDeclaration(#InvoiceToBagDeclaration);

        // Quittance
        this.setCurrentWorksheetNum(#QuittanceToBagPageNo);
        this.execute(#QuittanceToBag);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'CashCollection';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + ledgerJournalTrans_RCash.CashCollBagNum_RU + '_' + ledgerJournalTrans_RCash.CashCollStoreId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #TransmittalRegister:
            case #InvoiceToBag:
            case #QuittanceToBag:
                this.fillGeneralData(_bookmark);
                break;

            case #TransmittalRegisterDeclaration:
            case #InvoiceToBagDeclaration:
                this.fillDeclarationData(_bookmark);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeclarationData</Name>
				<Source><![CDATA[
    #define.Denomination        ('Denomination')
    #define.DeclarationQty      ('DeclarationQty')
    #define.DeclarationAmount   ('DeclarationAmount')

    private void fillDeclarationData(MSOfficeBookMark_RU _bookmark)
    {
        RetailCashDenominationAmount_RU denomination;
        RetailCashCollectionQty_RU      qty;
        Amount                          amount;
        boolean                         isValuesInserted;

        if (0 < declarationIdx && declarationIdx <= declarationArray.lastIndex())
        {
            [denomination, qty, amount] = declarationArray.value(declarationIdx);

            if (denomination)
            {
                this.insertValueToSection(this.createBookMark(_bookmark, #Denomination),        denomination);
                this.insertValueToSection(this.createBookMark(_bookmark, #DeclarationQty),      qty);
                this.insertValueToSection(this.createBookMark(_bookmark, #DeclarationAmount),   amount);

                isValuesInserted = true;
            }
        }

        if (!isValuesInserted)
        {
            this.insertValueToSection(this.createBookMark(_bookmark, #Denomination),        #blank);
            this.insertValueToSection(this.createBookMark(_bookmark, #DeclarationQty),      #blank);
            this.insertValueToSection(this.createBookMark(_bookmark, #DeclarationAmount),   #blank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGeneralData</Name>
				<Source><![CDATA[
    #define.BagNumber               ('BagNumber')
    #define.BagNumber_1             ('BagNumber_1')
    #define.OpDay                   ('Day')
    #define.OpMonth                 ('Month')
    #define.OpYear                  ('Year')
    #define.Declarant               ('Declarant')
    #define.Store                   ('Store')
    #define.Debit                   ('Debit')
    #define.Credit                  ('Credit')
    #define.Company                 ('Company')
    #define.Company_1               ('Company_1')
    #define.MaxLen_Company          (28)
    #define.INN                     ('INN')
    #define.KPP                     ('KPP')
    #define.OKATO                   ('OKATO')
    #define.BankContributor         ('BankContributor')
    #define.BankContributor_1       ('BankContributor_1')
    #define.MaxLen_BankContributor  (40)
    #define.BankContributorBIC      ('BankContributorBIC')
    #define.PayeeBankAccount        ('PayeeBankAccount')
    #define.PayeeBank               ('PayeeBank')
    #define.PayeeBank_1             ('PayeeBank_1')
    #define.MaxLen_PayeeBank        (40)
    #define.PayeeBankBIC            ('PayeeBankBIC')
    #define.Amount                  ('Amount')
    #define.AmountTxt               ('AmountTxt')
    #define.AmountTxt_1             ('AmountTxt_1')
    #define.MaxLen_AmountTxt        (60)
    #define.Penny                   ('Penny')
    #define.CashSourceCode          ('CashSourceCode')
    #define.CashSourceAmount        ('CashSourceAmount')
    #define.CashSource              ('CashSource')
    #define.CashSource_1            ('CashSource_1')
    #define.MaxLen_CashSource       (50)

    private void fillGeneralData(MSOfficeBookMark_RU _bookmark)
    {
        str                 firstPart, secondPart;
        CompanyInfo         companyInfo;
        BankAccountTable    payeeBankAccount;
        BankGroup           bankGroup;
        int                 penny;

        this.insertValueToSection(this.createBookMark(_bookmark, #BagNumber),   ledgerJournalTrans_RCash.CashCollBagNum_RU);
        this.insertValueToSection(this.createBookMark(_bookmark, #BagNumber_1), ledgerJournalTrans_RCash.CashCollBagNum_RU);

        this.insertValueToSection(this.createBookMark(_bookmark, #OpDay),   dayOfMth(ledgerJournalTrans.TransDate));
        this.insertValueToSection(this.createBookMark(_bookmark, #OpMonth), RNumDateInWordConverter::construct().date2strMonth(ledgerJournalTrans.TransDate));
        this.insertValueToSection(this.createBookMark(_bookmark, #OpYear),  year(ledgerJournalTrans.TransDate) mod 100);

        this.insertValueToSection(this.createBookMark(_bookmark, #Declarant), this.cashierName());
        this.insertValueToSection(this.createBookMark(_bookmark, #Store),     this.retailStoreName());

        this.insertValueToSection(this.createBookMark(_bookmark, #Debit),  ledgerJournalTrans_RCash.CashCollDebitAccountNum_RU);
        this.insertValueToSection(this.createBookMark(_bookmark, #Credit), ledgerJournalTrans_RCash.CashCollCreditAccountNum_RU);

        companyInfo = CompanyInfo::find();
        [firstPart, secondPart] = XMLExcelReport_RU::splitStrByLines(strLRTrim(companyInfo.name()), [#MaxLen_Company]);
        this.insertValueToSection(this.createBookMark(_bookmark, #Company),   firstPart);
        this.insertValueToSection(this.createBookMark(_bookmark, #Company_1), secondPart);
        this.insertValueToSection(this.createBookMark(_bookmark, #INN),       CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, ledgerJournalTrans.TransDate));
        this.insertValueToSection(this.createBookMark(_bookmark, #KPP),       CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, ledgerJournalTrans.TransDate));
        this.insertValueToSection(this.createBookMark(_bookmark, #OKATO),     CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, ledgerJournalTrans.TransDate));

        if (ledgerJournalTrans_RCash.CashCollBankContributor_RU)
        {
            bankGroup = BankGroup::find(ledgerJournalTrans_RCash.CashCollBankContributor_RU);
            [firstPart, secondPart] = XMLExcelReport_RU::splitStrByLines(strLRTrim(bankGroup.Name), [#MaxLen_BankContributor]);
            this.insertValueToSection(this.createBookMark(_bookmark, #BankContributor),    firstPart);
            this.insertValueToSection(this.createBookMark(_bookmark, #BankContributor_1),  secondPart);
            this.insertValueToSection(this.createBookMark(_bookmark, #BankContributorBIC), bankGroup.BankBIC_RU);
        }

        if (ledgerJournalTrans.BankSpecAccountId_RU)
        {
            payeeBankAccount = BankAccountTable::find(ledgerJournalTrans.BankSpecAccountId_RU);

            this.insertValueToSection(this.createBookMark(_bookmark, #PayeeBankAccount), payeeBankAccount.AccountNum);

            bankGroup = BankGroup::find(payeeBankAccount.BankGroupID);
            if (bankGroup)
            {
                [firstPart, secondPart] = XMLExcelReport_RU::splitStrByLines(strLRTrim(bankGroup.Name), [#MaxLen_PayeeBank]);
                this.insertValueToSection(this.createBookMark(_bookmark, #PayeeBank),    firstPart);
                this.insertValueToSection(this.createBookMark(_bookmark, #PayeeBank_1),  secondPart);
                this.insertValueToSection(this.createBookMark(_bookmark, #PayeeBankBIC), bankGroup.BankBIC_RU);
            }
        }

        [firstPart, secondPart] = XMLExcelReport_RU::splitStrByLines(
            RNumDateInWordConverter::convertNumeralsToText(ledgerJournalTrans.AmountCurCredit), [#MaxLen_AmountTxt]);
        this.insertValueToSection(this.createBookMark(_bookmark, #AmountTxt),   firstPart);
        this.insertValueToSection(this.createBookMark(_bookmark, #AmountTxt_1), secondPart);
        this.insertValueToSection(this.createBookMark(_bookmark, #Amount),      ledgerJournalTrans.AmountCurCredit);

        penny = real2int(100 * frac(ledgerJournalTrans.AmountCurCredit));
        this.insertValueToSection(this.createBookMark(_bookmark, #Penny),       penny < 10 ? strfmt('0%1', penny) : strFmt('%1', penny));

        if (ledgerJournalTrans_RCash.CashSourceCode_RU)
        {
            this.insertValueToSection(this.createBookMark(_bookmark, #CashSourceCode),   ledgerJournalTrans_RCash.CashSourceCode_RU);
            this.insertValueToSection(this.createBookMark(_bookmark, #CashSourceAmount), ledgerJournalTrans.AmountCurCredit);
        }
        if (ledgerJournalTrans_RCash.CashSourceDescription_RU)
        {
            [firstPart, secondPart] = XMLExcelReport_RU::splitStrByLines(strLRTrim(ledgerJournalTrans_RCash.CashSourceDescription_RU), [#MaxLen_CashSource]);
            this.insertValueToSection(this.createBookMark(_bookmark, #CashSource),   firstPart);
            this.insertValueToSection(this.createBookMark(_bookmark, #CashSource_1), secondPart);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class with data from <c>Args</c> object.
    /// </summary>
    /// <param name="_args">
    /// The data class should be initialized with.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If <c>Args</c> object doesn't have record set.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If <c>Args</c> record is not <c>LedgerJournalTrans_RCash</c>.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If status of the cash journal is not <c>RCashTransStatus::Confirmed</c> or <c>RCashTransStatus::Approved</c>.
    /// </exception>
    public void initFromArgs(Args _args)
    {
        if (! _args || ! _args.record())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_args.dataset())
        {
            case tableNum(LedgerJournalTrans_RCash) :
                ledgerJournalTrans_RCash = _args.record();

                if (ledgerJournalTrans_RCash.TransStatus != RCashTransStatus::Confirmed &&
                    ledgerJournalTrans_RCash.TransStatus != RCashTransStatus::Approved)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                LedgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTrans_RCash.RefRecId, false);

                this.createDeclarationArray();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#TransmittalRegister);
        this.addSection(#TransmittalRegisterDeclaration);
        this.addSection(this.createBookMark(#TransmittalRegister, #DeclarationHeader));
        this.addSection(this.createBookMark(#TransmittalRegister, #DeclarationFooter));

        this.addSection(#InvoiceToBag);
        this.addSection(#InvoiceToBagDeclaration);
        this.addSection(this.createBookMark(#InvoiceToBag, #DeclarationHeader));
        this.addSection(this.createBookMark(#InvoiceToBag, #DeclarationFooter));

        this.addSection(#QuittanceToBag);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeclaration</Name>
				<Source><![CDATA[
    #define.DeclarationLineNumber   (11)

    private void processDeclaration(MSOfficeBookMark_RU _bookmark)
    {
        int pageIdx;
        int pageNumber;
        int declarationPageMaxIdx;

        if (declarationArray.lastIndex() <= #DeclarationLineNumber)
        {
            pageNumber = 1;
        }
        else
        {
            pageNumber = (declarationArray.lastIndex() div #DeclarationLineNumber);
            if (declarationArray.lastIndex() mod #DeclarationLineNumber)
            {
                pageNumber++;
            }
        }

        declarationIdx = 1;

        for (pageIdx = 1; pageIdx <= pageNumber; pageIdx++)
        {
            this.execute(this.createBookMark(_bookmark, #DeclarationHeader));

            declarationPageMaxIdx = pageIdx * #DeclarationLineNumber;

            while (declarationIdx <= declarationPageMaxIdx)
            {
                this.execute(_bookmark);
                declarationIdx++;
            }

            this.execute(this.createBookMark(_bookmark, #DeclarationFooter));

            if (pageNumber > 1)
            {
                document.insertPageBreak(currentRow, curWorkSheetNum);
            }
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailStoreName</Name>
				<Source><![CDATA[
    private DirPartyName retailStoreName()
    {
        OMOperatingUnit     omOpUnit;
        RetailStoreTable    storeTable;
        DirPartyName        storeName;

        if (ledgerJournalTrans_RCash.CashCollStoreId_RU)
        {
            select firstonly TableId from storeTable
                where storeTable.StoreNumber == ledgerJournalTrans_RCash.CashCollStoreId_RU
            join Name from omOpUnit
                where omOpUnit.RecId == storeTable.OMOperatingUnitID;

            storeName = omOpUnit.Name;
        }

        return storeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(CashCollection_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.GeneralCells        (57)
    #define.DeclarationCells    (6)
    #define.QuittanceCells      (1)

    protected Counter totalCells()
    {
        return #GeneralCells + declarationArray.lastIndex() * #DeclarationCells + #QuittanceCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_RetailCashCollection_RU construct()
    {
        return new XMLExcelReport_RetailCashCollection_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns desription of run base operation.
    /// </summary>
    /// <returns>
    /// Desription of run base operation.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYP4880995";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        XMLExcelReport_RetailCashCollection_RU report = XMLExcelReport_RetailCashCollection_RU::construct();

        report.initFromArgs(_args);

        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'RetailCashCollection';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>