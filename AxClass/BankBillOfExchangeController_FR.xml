<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBillOfExchangeController_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankBillOfExchangeController_FR</c> class is the controller class for the
///    <c>BankBillOfExchange_FR</c> report.
/// </summary>
class BankBillOfExchangeController_FR extends SrsReportRunController implements BatchRetryable
{
    CustBillOfExchangeDocument_FR   billOfExchange;
    TmpBankBillOfExchangePrintout   tmpBankBillOfExchangePrintout;
    CustTable                       custTable;
    BankBillOfExchangeTmp_FR        bankBillOfExchangeTmp_FR;
    ReportDesignName                designName;
    AddressCity                     city;

    #define.ReportName  ('BankBillOfExchange_FR.Report')
    #Define.BlankPaper  ('BlankPaper')
    #Define.PrePrinted  ('PrePrinted')
    #Define.LineFeed    ('\n')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00004, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressBill</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Derives the postal address.
    /// </summary>
    /// <returns>
    ///    Name and postal address as a single string.
    /// </returns>
    private Addressing addressBill()
    {
        Addressing  addressing;

        addressing = LogisticsLocationEntity::findPostalAddress(custTable, LogisticsLocationRoleType::Payment).Address;

        if (!addressing)
        {
            addressing = custTable.postalAddress().Address;
        }

        return custTable.Name() + #LineFeed + addressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Derives the postal address of the company.
    /// </summary>
    /// <returns>
    ///    The company name and postal address as a single string.
    /// </returns>
    private Addressing  companyAddr()
    {
        CompanyInfo             companyInfo;
        LogisticsAddressing     addressing;
        LogisticsLocationEntity location;

        companyInfo = CompanyInfo::find();
        location = LogisticsLocationEntity::findLocation(companyInfo, LogisticsLocationRoleType::Payment, DateTimeUtil::getSystemDateTime(), false);

        if (location && location.parmLocationRecId())
        {
            addressing = companyInfo.Name() + #LineFeed + location.getPostalAddress().Address;
        }
        else
        {
            addressing = companyInfo.Name() + #LineFeed + companyInfo.postalAddress().Address;
        }

        return addressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data and insert the data into the temporary table.
    /// </summary>
    /// <returns>
    ///    The record ID that was stored in the <c>SRSTmpDataStore</c> table.
    /// </returns>
    public RecId fetch()
    {
        RecId                       tmpTableDataRecId;
        SrsReportRunPermission      permission;

        while select tmpBankBillOfExchangePrintout
        {
            custTable       = CustTable::find(tmpBankBillOfExchangePrintout.CustAccount);
            this.insertIntoTempTable();
        }

        //Storing the temp table data using SRSTmpTblMarshaller
        permission          = new SrsReportRunPermission();
        permission.assert();
        tmpTableDataRecId   = this.storeTmpTable();
        delete_from bankBillOfExchangeTmp_FR;
        CodeAccessPermission::revertAssert();

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes all the required objects here.
    /// </summary>
    /// <param name="_billOfExchange">
    ///    The object of the <c>CustBillOfExchangeDocument_FR</c> class.
    /// </param>
    public void initialize(CustBillOfExchangeDocument_FR   _billOfExchange)
    {
        tmpBankBillOfExchangePrintout   = _billOfExchange.tmpBankBillOfExchangePrintout();
        city                            = _billOfExchange.city();

        switch (CustFormletterParameters::find().PrePrintLevelInvoice)
        {
            case PrePrintLevel::BlankPaper :
                designName = #BlankPaper;
                break;
            case PrePrintLevel::SemiPrePrinted :
                designName = #PrePrinted;
                break;
            case PrePrintLevel::PrePrinted :
                designName = #PrePrinted;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data into the <c>bankBillOfExchangeTmp_FR</c> temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        bankBillOfExchangeTmp_FR.CompanyAddr                    = this.companyAddr();
        bankBillOfExchangeTmp_FR.AmountTxt                      = tmpBankBillOfExchangePrintout.AmountTxt;
        bankBillOfExchangeTmp_FR.City                           = city;
        bankBillOfExchangeTmp_FR.TransDate                      = tmpBankBillOfExchangePrintout.TransDate;
        bankBillOfExchangeTmp_FR.DueDate                        = tmpBankBillOfExchangePrintout.DueDate;
        bankBillOfExchangeTmp_FR.Amount                         = tmpBankBillOfExchangePrintout.AmountTxt;
        bankBillOfExchangeTmp_FR.Reference                      = tmpBankBillOfExchangePrintout.DocumentNum;
        bankBillOfExchangeTmp_FR.BankAccountRegNumberFirstPart  = substr(tmpBankBillOfExchangePrintout.RegistrationNum,1,5);
        bankBillOfExchangeTmp_FR.BankAccountRegNumberSecondPart = substr(tmpBankBillOfExchangePrintout.RegistrationNum,6,5);
        bankBillOfExchangeTmp_FR.BankAccountNumber              = substr(tmpBankBillOfExchangePrintout.AccountNum,1,11);
        bankBillOfExchangeTmp_FR.BankAccountCheckDigit          = substr(tmpBankBillOfExchangePrintout.AccountNum,12,2);
        bankBillOfExchangeTmp_FR.BankName                       = tmpBankBillOfExchangePrintout.BankName;
        bankBillOfExchangeTmp_FR.Siret                          = custTable.CompanyIdSiret;
        bankBillOfExchangeTmp_FR.AddressBill                    = this.addressBill();

        bankBillOfExchangeTmp_FR.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before you run report.
    /// </summary>
    protected void preRunModifyContract()
    {
        BankBillOfExchangeContract_FR    bankBillOfExchangeContract_FR;
        RecId                            recId;

        this.initialize(this.parmArgs().caller());
        recId = this.fetch();
        bankBillOfExchangeContract_FR = this.parmReportContract().parmRdpContract() as bankBillOfExchangeContract_FR;
        bankBillOfExchangeContract_FR.parmTmpTableDataRecId(recId);
        bankBillOfExchangeContract_FR.parmDesignParam(designName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the data store table where the temporary table is stored.
    /// </returns>
    public RecId storeTmpTable()
    {
        return SRSTmpTblMarshaller::SendTmpTblToDataProvider(bankBillOfExchangeTmp_FR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        BankBillOfExchangeController_FR  controller = new BankBillOfExchangeController_FR();

        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>