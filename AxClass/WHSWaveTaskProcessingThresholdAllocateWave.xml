<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTaskProcessingThresholdAllocateWave</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveTaskProcessingThresholdAllocateWave</c> class is responsible for
/// determining whether the given allocateWave wave step exceeds the threshold for
/// running the wave in task based processing.
/// </summary>
[WHSWaveTaskProcessingThresholdAttribute(methodStr(WhsPostEngineBase, allocateWave))]
internal class WHSWaveTaskProcessingThresholdAllocateWave implements WHSWaveTaskProcessingIThreshold
{
    private WHSPostEngine postEngine;
    private WHSWaveId     waveId;
    private int64         totalLoadLines;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WHSPostEngine</c> parameter.
    /// </summary>
    /// <param name = "_postEngine">The value to set.</param>
    public void initFromPostEngine(WHSPostEngine _postEngine)
    {
        postEngine = _postEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    private WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalLoadLines</Name>
				<Source><![CDATA[
    private int64 parmTotalLoadLines(int64 _totalLoadLines = totalLoadLines)
    {
        totalLoadLines = _totalLoadLines;

        return totalLoadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdExceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is responsible for determining whether
    /// the threshold for task based processing has been exceeded.
    /// </summary>
    /// <returns>
    /// true if threshold is exceeded; otherwise, false.
    /// </returns>
    public boolean thresholdExceeded()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.waveTaskProcessingThresholdInstrumentationActivities().allocateThresholdCalculation())
        {
            this.parmWaveId(postEngine.parmWaveTable().WaveId);
            this.parmTotalLoadLines(postEngine.parmWaveTable().numberOfLoadLinesToAllocate());

            if(!this.validateParameters()) 
            { 
                return false;
            }

            WHSWaveTaskProcessingThresholdParameters thresholdParams = WHSWaveTaskProcessingThresholdParameters::findOrCreateDefault();

            boolean thresholdExceeded = this.isThresholdExceeded(thresholdParams);
            
            instrumentationLogger.logInformation(strFmt("@WAX3192", instrumentationLogger.properties().ThresholdExceeded, thresholdExceeded));
            
            return thresholdExceeded;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdExceeded</Name>
				<Source><![CDATA[
    private boolean isThresholdExceeded(WHSWaveTaskProcessingThresholdParameters _thresholdParams)
    {
        return this.minimumWaveLoadLinesThresholdExceeded(_thresholdParams)
            && this.minimumGroupedPendingAllocationThresholdExceeded(_thresholdParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumGroupedPendingAllocationThresholdExceeded</Name>
				<Source><![CDATA[
    private boolean minimumGroupedPendingAllocationThresholdExceeded(WHSWaveTaskProcessingThresholdParameters _thresholdParams)
    {
        int thresholdValue = this.calculateAllocateWaveStepThresholdValue(_thresholdParams);

        return thresholdValue >= _thresholdParams.MinimumAllocateWaveGroupedPendingAllocations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumWaveLoadLinesThresholdExceeded</Name>
				<Source><![CDATA[
    private boolean minimumWaveLoadLinesThresholdExceeded(WHSWaveTaskProcessingThresholdParameters _thresholdParams)
    {
        return totalLoadLines >= _thresholdParams.MinimumWaveLoadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllocateWaveStepThresholdValue</Name>
				<Source><![CDATA[
    private int calculateAllocateWaveStepThresholdValue(WHSWaveTaskProcessingThresholdParameters _thresholdParams)
    {
        WHSLoadLine loadLine;
        WHSWaveLine waveLine;

        int groupedPendingAllocationsCount = 0;

        while select ItemId, InventDimId from loadLine
            group by ItemId, InventDimId
            where loadLine.InventQty    != loadLine.WorkCreatedQty
                &&    loadLine.LoadId   != ''
            exists join waveLine
                where waveLine.ShipmentId == loadLine.ShipmentId
                    &&    waveLine.WaveId     == waveId
        {
            if (groupedPendingAllocationsCount >= _thresholdParams.MinimumAllocateWaveGroupedPendingAllocations)
            {
                break;
            }

            groupedPendingAllocationsCount++;
        }

        return groupedPendingAllocationsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private boolean validateParameters()
    {
        if (!waveId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return waveId && totalLoadLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>