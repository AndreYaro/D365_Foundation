<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymBalanceSurveyCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the survey amount.
/// </summary>
public abstract class BankPaymBalanceSurveyCalc
{
    FromDate fromDate;
    ToDate toDate;

    TransDate reportDate;

    PaymBalanceSurveyCodeRecId surveyCodeRecId;

    RecordInsertList tradeLinesInsertList;

    LogisticsAddressCountryRegionId companyCountryRegionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPurposeCodesQuery</Name>
				<Source><![CDATA[
    private void addPurposeCodesQuery(QueryBuildDataSource _qbdsParent, TradeBLWITypeOfForm _sourceType)
    {
        QueryBuildDataSource qbdsJournalPurposeCodes;
        QueryBuildDataSource qbdsSurvey;

        qbdsJournalPurposeCodes = _qbdsParent.addDataSource(tablenum(TradeBLWIJournalPurposeCodes));
        qbdsJournalPurposeCodes.joinMode(JoinMode::InnerJoin);
        qbdsJournalPurposeCodes.fetchMode(QueryFetchMode::One2One);

        switch (_sourceType)
        {
            case TradeBLWITypeOfForm::CustInvoiceJour:
                qbdsJournalPurposeCodes.addLink(fieldNum(CustInvoiceJour, RecId), fieldNum(TradeBLWIJournalPurposeCodes, RefRecId));
                break;
            case TradeBLWITypeOfForm::ProjInvoiceJour:
                qbdsJournalPurposeCodes.addLink(fieldNum(ProjInvoiceJour, RecId), fieldNum(TradeBLWIJournalPurposeCodes, RefRecId));
                break;
            case TradeBLWITypeOfForm::CustTrans:
                qbdsJournalPurposeCodes.addLink(fieldNum(CustTrans, RecId), fieldNum(TradeBLWIJournalPurposeCodes, RefRecId));
                break;
            case TradeBLWITypeOfForm::VendInvoiceJour:
                qbdsJournalPurposeCodes.addLink(fieldNum(VendInvoiceJour, RecId), fieldNum(TradeBLWIJournalPurposeCodes, RefRecId));
                break;
            case TradeBLWITypeOfForm::VendTrans:
                qbdsJournalPurposeCodes.addLink(fieldNum(VendTrans, RecId), fieldNum(TradeBLWIJournalPurposeCodes, RefRecId));
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        qbdsJournalPurposeCodes.addRange(fieldnum(TradeBLWIJournalPurposeCodes, TypeOfForm)).value(queryValue(_sourceType));

        qbdsSurvey = qbdsJournalPurposeCodes.addDataSource(tablenum(BankPaymBalanceSurveyPaymCodes));
        qbdsSurvey.joinMode(JoinMode::ExistsJoin);
        qbdsSurvey.addLink(fieldNum(TradeBLWIJournalPurposeCodes, PurposeCode), fieldNum(BankPaymBalanceSurveyPaymCodes, BankCentralBankPurposeCode));

        if (surveyCodeRecId)
        {
            qbdsSurvey.addRange(fieldnum(BankPaymBalanceSurveyPaymCodes, BankPaymBalanceSurvey)).value(queryValue(surveyCodeRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the survey amount.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calc()
    {
        this.calcCust();
        this.calcVend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCust</Name>
				<Source><![CDATA[
    private void calcCust()
    {
        Query query;
        QueryBuildDataSource qbds;

        // Invoices
        query = this.createQuery(TradeBLWICustVend::Customer);
        qbds = query.dataSourceTable(tablenum(CustTrans)).addDataSource(tableNum(CustInvoiceJour));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(CustTrans, Invoice), fieldNum(CustInvoiceJour, InvoiceId));
        qbds.addLink(fieldNum(CustTrans, TransDate), fieldNum(CustInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(CustInvoiceJour, LedgerVoucher));
        this.addPurposeCodesQuery(qbds, TradeBLWITypeOfForm::CustInvoiceJour);
        this.processTrans(query, TradeBLWICustVend::Customer, true, false);

        // Projects
        query = this.createQuery(TradeBLWICustVend::Customer);
        qbds = query.dataSourceTable(tablenum(CustTrans)).addDataSource(tableNum(ProjInvoiceJour));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(CustTrans, Invoice), fieldNum(ProjInvoiceJour, ProjInvoiceId));
        qbds.addLink(fieldNum(CustTrans, TransDate), fieldNum(ProjInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(CustTrans, AccountNum), fieldNum(ProjInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(CustTrans, Voucher), fieldNum(ProjInvoiceJour, LedgerVoucher));
        this.addPurposeCodesQuery(qbds, TradeBLWITypeOfForm::ProjInvoiceJour);
        this.processTrans(query, TradeBLWICustVend::Customer, true, true);

        // Payments
        query = this.createQuery(TradeBLWICustVend::Customer);
        qbds = query.dataSourceTable(tablenum(CustTrans));
        qbds.addRange(fieldNum(CustTrans, TransType)).value(queryValue(LedgerTransType::Payment));
        this.addPurposeCodesQuery(query.dataSourceTable(tablenum(CustTrans)), TradeBLWITypeOfForm::CustTrans);
        qbds = query.dataSourceTable(tableNum(BankPaymBalanceSurveyPaymCodes));
        qbds.addRange(fieldnum(BankPaymBalanceSurveyPaymCodes, IncludePayment)).value(queryValue(NoYes::Yes));
        this.processTrans(query, TradeBLWICustVend::Customer, false, false);

        // Other
        query = this.createQuery(TradeBLWICustVend::Customer);
        qbds = query.dataSourceTable(tablenum(CustTrans));
        qbds.addRange(fieldNum(CustTrans, TransType)).value(SysQuery::valueNot(LedgerTransType::Payment));
        this.addPurposeCodesQuery(query.dataSourceTable(tablenum(CustTrans)), TradeBLWITypeOfForm::CustTrans);
        this.processTrans(query, TradeBLWICustVend::Customer, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The customer or vendor transaction.
    /// </param>
    /// <param name="_tradeLine">
    /// The BLWI transaction.
    /// </param>
    /// <returns>
    /// true if amount is calculated; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean calcLineAmount(CustVendTrans _custVendTrans, TradeBLWILines _tradeLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineCountryRegion</Name>
				<Source><![CDATA[
    private boolean calcLineCountryRegion(CustVendTrans _custVendTrans, TradeBLWILines _tradeLine)
    {
        AddressCountryRegionId countryRegionId;
        boolean ret = true;

        if (_custVendTrans.TableId == tableNum(CustTrans))
        {
            countryRegionId = CustTable::find(_custVendTrans.AccountNum).countryRegionId();
        }
        else
        {
            countryRegionId = VendTable::find(_custVendTrans.AccountNum).countryRegionId();
        }

        ret = (countryRegionId != companyCountryRegionId);

        if (ret)
        {
            _tradeLine.CountryRegionId = countryRegionId;
            if (_tradeLine.validateCountryRegionId())
            {
                _tradeLine.setAddressCountryRegionGroupBLWI();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVend</Name>
				<Source><![CDATA[
    private void calcVend()
    {
        Query query;
        QueryBuildDataSource qbds;

        // Invoices
        query = this.createQuery(TradeBLWICustVend::Vendor);
        qbds = query.dataSourceTable(tablenum(VendTrans)).addDataSource(tableNum(VendInvoiceJour));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(VendTrans, Invoice), fieldNum(VendInvoiceJour, InvoiceId));
        qbds.addLink(fieldNum(VendTrans, TransDate), fieldNum(VendInvoiceJour, InvoiceDate));
        qbds.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendInvoiceJour, InvoiceAccount));
        qbds.addLink(fieldNum(VendTrans, Voucher), fieldNum(VendInvoiceJour, LedgerVoucher));
        this.addPurposeCodesQuery(qbds, TradeBLWITypeOfForm::VendInvoiceJour);
        this.processTrans(query, TradeBLWICustVend::Vendor, true, false);

        // Payments
        query = this.createQuery(TradeBLWICustVend::Vendor);
        qbds = query.dataSourceTable(tablenum(VendTrans));
        qbds.addRange(fieldNum(VendTrans, TransType)).value(queryValue(LedgerTransType::Payment));
        this.addPurposeCodesQuery(query.dataSourceTable(tablenum(VendTrans)), TradeBLWITypeOfForm::VendTrans);
        qbds = query.dataSourceTable(tableNum(BankPaymBalanceSurveyPaymCodes));
        qbds.addRange(fieldnum(BankPaymBalanceSurveyPaymCodes, IncludePayment)).value(queryValue(NoYes::Yes));
        this.processTrans(query, TradeBLWICustVend::Vendor, false, false);

        // Other
        query = this.createQuery(TradeBLWICustVend::Vendor);
        qbds = query.dataSourceTable(tablenum(VendTrans));
        qbds.addRange(fieldNum(VendTrans, TransType)).value(SysQuery::valueNot(LedgerTransType::Payment));
        this.addPurposeCodesQuery(query.dataSourceTable(tablenum(VendTrans)), TradeBLWITypeOfForm::VendTrans);
        this.processTrans(query, TradeBLWICustVend::Vendor, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTransQuery</Name>
				<Source><![CDATA[
    private Query createCustTransQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildDataSource qbdsFilter;

        qbds = query.addDataSource(tableNum(CustTrans));
        qbds.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(fromDate, toDate));

        qbdsFilter = qbds.addDataSource(tableNum(TradeBLWILines));
        qbdsFilter.joinMode(JoinMode::NoExistsJoin);
        qbdsFilter.fetchMode(QueryFetchMode::One2One);
        qbdsFilter.addRange(fieldNum(TradeBLWILines, CustVend)).value(queryValue(TradeBLWICustVend::Customer));
        qbdsFilter.addLink(fieldNum(CustTrans, AccountNum), fieldNum(TradeBLWILines, AccountNum));
        qbdsFilter.addLink(fieldNum(CustTrans, TransDate), fieldNum(TradeBLWILines, TransDate));
        qbdsFilter.addLink(fieldNum(CustTrans, Voucher), fieldNum(TradeBLWILines, Voucher));
        qbdsFilter.addLink(fieldNum(CustTrans, Invoice), fieldNum(TradeBLWILines, Invoice));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for the customer or vendor transactions.
    /// </summary>
    /// <param name="_custVend">
    /// The type of source.
    /// </param>
    /// <returns>
    /// The query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query createQuery(TradeBLWICustVend _custVend)
    {
        Query query;

        switch (_custVend)
        {
            case TradeBLWICustVend::Customer:
                query = this.createCustTransQuery();
                break;

            case TradeBLWICustVend::Vendor:
                query = this.createVendTransQuery();
                break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTransQuery</Name>
				<Source><![CDATA[
    private Query createVendTransQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildDataSource qbdsFilter;

        qbds = query.addDataSource(tableNum(VendTrans));
        qbds.addRange(fieldNum(VendTrans, TransDate)).value(queryRange(fromDate, toDate));

        qbdsFilter = qbds.addDataSource(tableNum(TradeBLWILines));
        qbdsFilter.joinMode(JoinMode::NoExistsJoin);
        qbdsFilter.fetchMode(QueryFetchMode::One2One);
        qbdsFilter.addRange(fieldNum(TradeBLWILines, CustVend)).value(queryValue(TradeBLWICustVend::Vendor));
        qbdsFilter.addLink(fieldNum(VendTrans, AccountNum), fieldNum(TradeBLWILines, AccountNum));
        qbdsFilter.addLink(fieldNum(VendTrans, TransDate), fieldNum(TradeBLWILines, TransDate));
        qbdsFilter.addLink(fieldNum(VendTrans, Voucher), fieldNum(TradeBLWILines, Voucher));
        qbdsFilter.addLink(fieldNum(VendTrans, Invoice), fieldNum(TradeBLWILines, Invoice));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    private void initLine(TradeBLWILines _tradeLine, TradeBLWICustVend _custVend)
    {
        _tradeLine.clear();
        _tradeLine.CustVend = _custVend;
        _tradeLine.Included = NoYes::Yes;
        _tradeLine.AutoGenerated = NoYes::Yes;
        _tradeLine.ReportingDate = toDate;
        _tradeLine.BankPaymBalanceSurvey = surveyCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        tradeLinesInsertList = new RecordInsertList(tableNum(TradeBLWILines));

        companyCountryRegionId = CompanyInfo::find().postalAddress().CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymBalanceSurveyCodeRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymBalanceSurveyCodeRecId parmPaymBalanceSurveyCodeRecId(PaymBalanceSurveyCodeRecId _surveyCodeRecId = surveyCodeRecId)
    {
        surveyCodeRecId = _surveyCodeRecId;
        return surveyCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmReportDate(TransDate _reportDate = reportDate)
    {
        reportDate = _reportDate;
        return reportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTrans</Name>
				<Source><![CDATA[
    private void processTrans(Query _query, TradeBLWICustVend _custVend, boolean _isInvoice, boolean _isProject)
    {
        QueryRun queryRun = new QueryRun(_query);
        CustVendTrans custVendTrans;
        CustVendInvoiceJour custVendInvoiceJour;
        TradeBLWIJournalPurposeCodes journalPurposeCodes;
        TableId transTableId, invoiceTableId;
        TradeBLWILines tradeline;

        [transTableId, invoiceTableId] = this.resolveSourceTableIds(_custVend, _isInvoice, _isProject);

        while (queryRun.next())
        {
            if (queryRun.changed(transTableId))
            {
                custVendTrans = queryRun.get(transTableId);

                if (invoiceTableId)
                {
                    custVendInvoiceJour = queryRun.get(invoiceTableId);
                }

                journalPurposeCodes = queryRun.get(tableNum(TradeBLWIJournalPurposeCodes));

                this.initLine(tradeline, _custVend);

                if (this.calcLineCountryRegion(custVendTrans, tradeline) &&
                this.calcLineAmount(custVendTrans, tradeline))
                {
                    tradeline.initFromCustVendTrans(custVendTrans);
                    tradeline.initFromTradeBLWIJournalPurposeCodes(journalPurposeCodes);

                    tradeLinesInsertList.add(tradeline);
                }
            }
        }

        tradeLinesInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSourceTableIds</Name>
				<Source><![CDATA[
    private container resolveSourceTableIds(TradeBLWICustVend _custVend, boolean _isInvoice, boolean _isProject = false)
    {
        TableId transTableId, invoiceTableId;

        switch (_custVend)
        {
            case TradeBLWICustVend::Customer:
                transTableId = tableNum(CustTrans);

                if (_isInvoice)
                {
                    invoiceTableId = _isProject ? tableNum(ProjInvoiceJour) : tableNum(CustInvoiceJour);
                }
                break;

            case TradeBLWICustVend::Vendor:
                transTableId = tableNum(VendTrans);

                if (_isInvoice)
                {
                    invoiceTableId = tableNum(VendInvoiceJour);
                }
                break;
        }

        return [transTableId, invoiceTableId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the required object.
    /// </summary>
    /// <param name="_calcType">
    /// The amount calculation type.
    /// </param>
    /// <returns>
    /// The <c>BankPaymBalanceSurveyCalc</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankPaymBalanceSurveyCalc newFromParameters(BankPaymBalanceSurveyCalcType _calcType)
    {
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(BankPaymBalanceSurveyCalc),
        new BankPaymBalanceSurveyCalcAttribute(_calcType));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>