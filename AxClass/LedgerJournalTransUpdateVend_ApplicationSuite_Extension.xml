<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateVend_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalTransUpdateVend))]
public final class LedgerJournalTransUpdateVend_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    /// <param name = "_ledgerVoucher">
    /// The <c>LedgerVoucher</c> class instance.
    /// </param>
    /// <param name = "_posting">
    /// The posting type enumeration value.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name = "_originalLedgerJournalTrans">
    /// The original <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name = "_interCompany">
    /// A boolean value indicating that the posting process is updating transactions in a different
    /// company than the original logged in company; optional.
    /// </param>
    /// <param name = "_reversalsMayExist">
    /// A boolean value indicating that reverals may exist; optional.
    /// </param>
    /// <param name = "_isDueToDueFromAccount">
    /// A boolean value indicating a due to due from account; optional.
    /// </param>
    public void updateNow(
        LedgerVoucher _ledgerVoucher,
        LedgerPostingType _posting,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _interCompany,
        boolean _reversalsMayExist,
        boolean _isDueToDueFromAccount)
    {
        if (FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance()))
        {
            LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();

            if (!ledgerVoucherObject.isZeroInvoiceAlreadySet_IT())
            {
                ledgerVoucherObject.setIsZeroInvoice_IT(
                    _ledgerJournalTrans.isZeroInvoice_IT(
                        _ledgerVoucher.parmSysModuleDefault()));
            }
        }

        next updateNow(
            _ledgerVoucher,
            _posting,
            _ledgerJournalTrans,
            _originalLedgerJournalTrans,
            _interCompany,
            _reversalsMayExist,
            _isDueToDueFromAccount);

        if (FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance())
            && _ledgerJournalTrans.VendTransId)
        {
            BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(_ledgerJournalTrans);
            if (baseDocument.DocumentType != DocumentType_IT::None)
            {
                VendTrans vendTrans = VendTrans::find(_ledgerJournalTrans.VendTransId);
                BaseDocument_IT::updateRefRecords(baseDocument, vendTrans);

                VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum);
                BaseDocument_IT::updateRefRecords(baseDocument, vendInvoiceJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewVendorVoucher</Name>
				<Source><![CDATA[
    protected VendTrans postNewVendorVoucher(LedgerJournalTrans _ledgerJournalTrans,
        LedgerVoucher _ledgerVoucher,
        LedgerJournalType _originalJournalType,
        AmountCur _taxAgentVATAmount)
    {
        if (_ledgerJournalTrans.Invoice != ''
            && FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            SplitPaymentMandatoryRuleEngine::analyseAndUpdateSplitPaymMode(_ledgerJournalTrans, true);
        }

        return next postNewVendorVoucher(_ledgerJournalTrans,
            _ledgerVoucher,
            _originalJournalType,
            _taxAgentVATAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhenPost</Name>
				<Source><![CDATA[
    boolean checkWhenPost(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _checkNoSettlement,
        LedgerPostingMessageLog _ledgerPostingMessageCollection)
    {
        boolean ok = next checkWhenPost(
            _ledgerJournalTrans,
            _originalLedgerJournalTrans,
            _checkNoSettlement,
            _ledgerPostingMessageCollection);

        if (ok
            && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance())
            && VendTable::find(_ledgerJournalTrans.parmAccount()).IsPublicSector_IT == NoYes::Yes
            && BaseDocument_IT::shouldValidateBaseDocumentForLedgerJournalType(_ledgerJournalTrans.ledgerJournalTable().JournalType))
        {
            BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(_ledgerJournalTrans);

            if (baseDocument.documentType == DocumentType_IT::None
                || !baseDocument.CIPEcode
                || !baseDocument.TenderCode)
            {
                str errorMessage = strFmt("@BaseDocument_IT:PublicSectorBaseDocumentValidationError",
                    _ledgerJournalTrans.parmAccount(),
                    "@SYS23949");

                if (_ledgerPostingMessageCollection)
                {
                    ok = _ledgerPostingMessageCollection.logCheckFailed(errorMessage);
                }
                else
                {
                    ok = checkFailed(errorMessage);
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>