<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_Multi</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost_CalcProdFlow_Multi</c> class represents the work item for running backflush costing of a single production flow order,
///    split as multiple database transaction.
/// </summary>
/// <remarks>
///    For each production flow that must be backflush costed, a separate instance of this class will be
///    created to trigger it.
/// </remarks>
public class LeanCost_CalcProdFlow_Multi extends LeanCost_CalcProdFlowBase implements BatchRetryable
{
    // Helpers
    Map                                         unusedRawMaterialsQtyMap;

    // Batch tasks
    List                                        clearMaterialIssueWIPTasks;
    List                                        clearMaterialReceiptsWIPTasks;
    LeanCost_CalcProdFlow_ClearOutsourcingWIP   leanCost_CalcProdFlow_ClearOutsourcingWIP;
    LeanCost_CalcProdFlow_End                   leanCost_CalcProdFlow_End;

    BatchHeader                                 batchHeader;

    int64                                       runTimeInitLedgerVoucher;
    int64                                       runTimeCreateTasks;
    int64                                       nbItemsClearMaterialIssuesWIP;
    int64                                       nbItemsClearMaterialReceiptsWIP;

    private CostManagementInstrumentationLogger LeanCost_CalcProdFlow_Multi_Logger;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runVarianceCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the variance calculation process.
    /// </summary>
    protected void runVarianceCalculation()
    {
        const UtilElementName AllTask = 'AllTask';

        this.initLedgerVoucher();

        using (var backflushCostingActivityContext = this.getInstrumentationMultiLogger().backflushCostingActivities().createTasks(
                                                        classStr(LeanCost_CalcProdFlow_Multi),
                                                        leanProductionFlowCostingRecId,
                                                        AllTask))
        {
            this.createCalcProdFlow_ClearMaterialIssuesWIPTasks();
            this.createCalcProdFlow_ClearOutsourcingWIPTask();
            this.createCalcProdFlow_ClearMaterialReceiptsWIPTasks();
            this.createCalcProdFlow_EndTask();
        }

        if (this.isInBatch()
            && ProdParameters::find().LeanCostEnableFullBatchParallelization)
        {
            this.addTasksToBatch();
        }
        else
        {
            this.runTasks();
        }

        this.logInstrumentationMeasures();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstrumentationMultiLogger</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLogger getInstrumentationMultiLogger()
    {
        if (!LeanCost_CalcProdFlow_Multi_Logger)
        {
            LeanCost_CalcProdFlow_Multi_Logger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlow_Multi));
        }

        return LeanCost_CalcProdFlow_Multi_Logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInstrumentationMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs instrumentation measures.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void logInstrumentationMeasures()
    {
        const UtilElementName CreateTasksMeasure = 'CreateTasks';
        const UtilElementName NumberOfItemsClearMaterialIssuesWIP = 'NumberOfItemsClearMaterialIssuesWIP';
        const UtilElementName NumberOfItemsClearMaterialReceiptsWIP = 'NumberOfItemsClearMaterialReceiptsWIP';

        CostManagementInstrumentation::newInstrumentation(tableStr(LeanProductionFlowCosting), int642Str(leanProductionFlowCostingRecId))
            .addMeasureElapsedMilliseconds(methodStr(LeanCost_CalcProdFlow_Multi, initLedgerVoucher), runTimeInitLedgerVoucher)
            .addMeasureElapsedMilliseconds(CreateTasksMeasure, runTimeCreateTasks)
            .addMeasureCount(NumberOfItemsClearMaterialIssuesWIP, nbItemsClearMaterialIssuesWIP)
            .addMeasureCount(NumberOfItemsClearMaterialReceiptsWIP, nbItemsClearMaterialReceiptsWIP)
            .logMeasures();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS301730";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        clearMaterialIssueWIPTasks = new List(Types::Class);
        clearMaterialReceiptsWIPTasks = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcProdFlow_ClearOutsourcingWIPTask</Name>
				<Source><![CDATA[
    private void createCalcProdFlow_ClearOutsourcingWIPTask()
    {
        const UtilElementName ClearOutsourcingWIPTask = 'ClearOutsourcingWIPTask';

        using (var backflushCostingActivityContext = this.getInstrumentationMultiLogger().backflushCostingActivities().createTasks(
                                                        classStr(LeanCost_CalcProdFlow_Multi),
                                                        leanProductionFlowCostingRecId,
                                                        ClearOutsourcingWIPTask))
        {
            leanCost_CalcProdFlow_ClearOutsourcingWIP = LeanCost_CalcProdFlow_ClearOutsourcingWIP::construct(this.getLeanCostingFacade());
            leanCost_CalcProdFlow_ClearOutsourcingWIP.parmLeanCostingRecId(leanCosting.RecId);
            leanCost_CalcProdFlow_ClearOutsourcingWIP.parmLeanProductionFlowCostingRecId(leanProductionFlowCosting.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcProdFlow_EndTask</Name>
				<Source><![CDATA[
    private void createCalcProdFlow_EndTask()
    {
        leanCost_CalcProdFlow_End = LeanCost_CalcProdFlow_End::construct(this.getLeanCostingFacade());
        leanCost_CalcProdFlow_End.parmLeanCostingRecId(leanCosting.RecId);
        leanCost_CalcProdFlow_End.parmLeanProductionFlowCostingRecId(leanProductionFlowCosting.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcProdFlow_ClearMaterialIssuesWIPTasks</Name>
				<Source><![CDATA[
    private void createCalcProdFlow_ClearMaterialIssuesWIPTasks()
    {
        const UtilElementName ClearMaterialIssuesWIPTasks = 'ClearMaterialIssuesWIPTasks';
        const UtilElementName NumberOfItemsClearMaterialIssuesWIP = 'NumberOfItemsClearMaterialIssuesWIP';

        using (var backflushCostingActivityContext = this.getInstrumentationMultiLogger().backflushCostingActivities().createTasks(
                                                        classStr(LeanCost_CalcProdFlow_Multi),
                                                        leanProductionFlowCostingRecId,
                                                        ClearMaterialIssuesWIPTasks))
        {
            InventTrans                             inventTrans;
            InventTransOrigin                       inventTransOrigin;
            InventCostTrans                         inventCostTrans;
            PlanReference                           planReference;

            Map                                     unusedRawMaterialsQtyMapForItem;

            DimensionDefault                        planDefaultDimensions = this.getLeanCostingFacade().getDefaultDimensions(leanProductionFlowReference.RecId);

            CurrencyCode                            currencyCode = CompanyInfoHelper::standardCurrency();

            while select forceliterals ItemId from inventTrans
                group by ItemId
                where inventTrans.DateStatus      <= leanCosting.ToDate
                   && ((inventTrans.StatusIssue   == StatusIssue::Deducted
                        && inventTrans.StatusReceipt == StatusReceipt::None) ||
                       (inventTrans.StatusIssue   == StatusIssue::None
                        && inventTrans.StatusReceipt == StatusReceipt::Received))
                exists join inventTransOrigin
                    where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                       && inventTransOrigin.ReferenceCategory != InventTransType::KanbanJobProcess
                exists join inventCostTrans
                    where inventCostTrans.InventTransId    == inventTransOrigin.InventTransId
                       && inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow
                exists join planReference
                    where planReference.RecId == leanProductionFlowReference.PlanReference
                       && planReference.PlanName == inventCostTrans.TransRefId
            {
                if (unusedRawMaterialsQtyMap.exists(inventTrans.ItemId))
                {
                    unusedRawMaterialsQtyMapForItem = unusedRawMaterialsQtyMap.lookup(inventTrans.ItemId);
                }
                else
                {
                    unusedRawMaterialsQtyMapForItem = new Map(Types::Int64, Types::Real);
                }

                LeanCost_CalcProdFlow_ClearMaterialIssuesWIP leanCost_CalcProdFlowTask = LeanCost_CalcProdFlow_ClearMaterialIssuesWIP::newFromParameters(
                    leanProductionFlowCosting.RecId,
                    inventTrans.ItemId,
                    leanCosting.ToDate,
                    leanProductionFlowReference.planReference().PlanName,
                    planDefaultDimensions,
                    unusedRawMaterialsQtyMapForItem,
                    currencyCode);

                clearMaterialIssueWIPTasks.addEnd(leanCost_CalcProdFlowTask);

                nbItemsClearMaterialIssuesWIP++;
            }
            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.getInstrumentationMultiLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(NumberOfItemsClearMaterialIssuesWIP, nbItemsClearMaterialIssuesWIP));
            this.getInstrumentationMultiLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcProdFlow_ClearMaterialReceiptsWIPTasks</Name>
				<Source><![CDATA[
    private void createCalcProdFlow_ClearMaterialReceiptsWIPTasks()
    {
        const UtilElementName ClearMaterialReceiptWIPTasks = 'ClearMaterialReceiptsWIPTasks';
        const UtilElementName NumberOfItemsClearMaterialReceiptsWIP = 'NumberOfItemsClearMaterialReceiptsWIP';

        using (var backflushCostingActivityContext = this.getInstrumentationMultiLogger().backflushCostingActivities().createTasks(
                                                        classStr(LeanCost_CalcProdFlow_Multi),
                                                        leanProductionFlowCostingRecId,
                                                        ClearMaterialReceiptWIPTasks))
        {
            InventTrans                             inventTrans;
            InventTransOrigin                       inventTransOrigin;
            InventCostTrans                         inventCostTrans;
            PlanReference                           planReference;

            DimensionDefault                        planDefaultDimensions = this.getLeanCostingFacade().getDefaultDimensions(leanProductionFlowReference.RecId);

            CurrencyCode                            currencyCode = CompanyInfoHelper::standardCurrency();

            while select forceliterals ItemId from inventTrans
                group by ItemId
                where inventTrans.DateStatus      <= leanCosting.ToDate
                   && ((inventTrans.StatusIssue   == StatusIssue::Deducted
                        && inventTrans.StatusReceipt == StatusReceipt::None) ||
                       (inventTrans.StatusIssue   == StatusIssue::None
                        && inventTrans.StatusReceipt == StatusReceipt::Received))
                exists join inventTransOrigin
                    where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                       && inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobProcess
                exists join inventCostTrans
                    where inventCostTrans.InventTransId    == inventTransOrigin.InventTransId
                       && inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow
                exists join planReference
                    where planReference.RecId == leanProductionFlowReference.PlanReference
                       && planReference.PlanName == inventCostTrans.TransRefId
            {
                LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP leanCost_CalcProdFlowTask = LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP::newFromParameters(
                    leanProductionFlowCosting.RecId,
                    inventTrans.ItemId,
                    leanCosting.ToDate,
                    leanProductionFlowReference.planReference().PlanName,
                    planDefaultDimensions,
                    currencyCode);

                clearMaterialReceiptsWIPTasks.addEnd(leanCost_CalcProdFlowTask);

                nbItemsClearMaterialReceiptsWIP++;
            }

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = this.getInstrumentationMultiLogger().properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(NumberOfItemsClearMaterialReceiptsWIP, nbItemsClearMaterialReceiptsWIP));
            this.getInstrumentationMultiLogger().logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTasksToBatch</Name>
				<Source><![CDATA[
    private void addTasksToBatch()
    {
        // Initialize the batch header using the RecId that this class
        // currently holds to add the tasks to the same job
        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        if (batchHeader)
        {
            leanCost_CalcProdFlow_End.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            batchHeader.addTask(leanCost_CalcProdFlow_End, BatchConstraintType::And);

            leanCost_CalcProdFlow_ClearOutsourcingWIP.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            batchHeader.addTask(leanCost_CalcProdFlow_ClearOutsourcingWIP, BatchConstraintType::And);

            ListEnumerator taskIssuesListEnumerator = clearMaterialIssueWIPTasks.getEnumerator();
            while (taskIssuesListEnumerator.moveNext())
            {
                LeanCost_CalcProdFlow_ClearMaterialIssuesWIP leanCost_CalcProdFlowIssuesTask = taskIssuesListEnumerator.current();

                leanCost_CalcProdFlowIssuesTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
                batchHeader.addTask(leanCost_CalcProdFlowIssuesTask, BatchConstraintType::And);
                batchHeader.addDependency(leanCost_CalcProdFlow_ClearOutsourcingWIP, leanCost_CalcProdFlowIssuesTask, BatchDependencyStatus::Finished);
            }

            if (clearMaterialReceiptsWIPTasks.elements() == 0)
            {
                // Add a dependency to the End task on the ClearOutsourcingWIP one in case there are no ClearMaterialReceiptsWIP to depend on
                batchHeader.addDependency(leanCost_CalcProdFlow_End, leanCost_CalcProdFlow_ClearOutsourcingWIP, BatchDependencyStatus::Finished);
            }

            ListEnumerator taskReceiptsListEnumerator = clearMaterialReceiptsWIPTasks.getEnumerator();
            while (taskReceiptsListEnumerator.moveNext())
            {
                LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP leanCost_CalcProdFlowReceiptsTask = taskReceiptsListEnumerator.current();

                leanCost_CalcProdFlowReceiptsTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
                batchHeader.addTask(leanCost_CalcProdFlowReceiptsTask, BatchConstraintType::And);
                batchHeader.addDependency(leanCost_CalcProdFlow_End, leanCost_CalcProdFlowReceiptsTask, BatchDependencyStatus::Finished);
                batchHeader.addDependency(leanCost_CalcProdFlowReceiptsTask, leanCost_CalcProdFlow_ClearOutsourcingWIP, BatchDependencyStatus::Finished);
            }

            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerVoucher</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher()
    {
        using (var backflushCostingActivityContext = this.getInstrumentationMultiLogger().backflushCostingActivities().initLedgerVoucher(
                                                        leanProductionFlowCostingRecId, 
                                                        classStr(LeanCost_CalcProdFlow_Multi),
                                                        true))
        {
            TransactionTxt      transactionTxt = TransactionTxt::construct();

            transactionTxt.setType(LedgerTransTxt::KanbanCosting);
            transactionTxt.setDate(leanCosting.ToDate);
            transactionTxt.setVoucher(leanProductionFlowCosting.Voucher);
            transactionTxt.setKey1(leanProductionFlowCosting.displayProductionFlowName());

            if (!LedgerVoucherPostPersistable::newFromPersistedLedgerPostPersistable(leanProductionFlowCosting))
            {
                LedgerVoucherPostPersistable ledgerVoucher = LedgerVoucher::newLedgerPostPersistable(leanProductionFlowCosting,
                                                                     DetailSummary::Summary,
                                                                     SysModule::Invent,
                                                                     NumberSeq::newGetNum(ProdParameters::numRefProdCalcVoucherId()).parmNumberSequenceCode());
                ledgerVoucher.parmCustomDetailLevel(true);  // records are summed according to ledgerVoucherTransObject.parmRecId
                LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(leanProductionFlowCosting.Voucher,
                                                                                          leanCosting.ToDate,
                                                                                          SysModule::Prod,
                                                                                          LedgerTransType::Production,
                                                                                          NoYes::No);

                ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
                ledgerVoucher.addVoucher(ledgerVoucherObject);
                ledgerVoucher.parmCheckTransOnInsert(true);
                ledgerVoucher.persistState();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTasks</Name>
				<Source><![CDATA[
    private void runTasks()
    {
        boolean hasError;

        if (appl.ttsLevel() != 1)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        // Decrease the ttsLevel to 0, so that the execution is similar to running in batch
        ttscommit;

        ListEnumerator taskIssuesListEnumerator = clearMaterialIssueWIPTasks.getEnumerator();
        while (taskIssuesListEnumerator.moveNext())
        {
            LeanCost_CalcProdFlow_ClearMaterialIssuesWIP leanCost_CalcProdFlow_ClearMaterialIssuesWIP = taskIssuesListEnumerator.current();

            try
            {
                leanCost_CalcProdFlow_ClearMaterialIssuesWIP.runOperation();
            }
            catch(Exception::Error)
            {
                // Remove the last line of the infolog so the error thrown by LeanCost.run() is not repeated
                infolog.cut(infologLine(), infologLine());
                hasError = true;
            }
        }

        if (!hasError)
        {
            try
            {
                leanCost_CalcProdFlow_ClearOutsourcingWIP.runOperation();
            }
            catch(Exception::Error)
            {
                // Remove the last line of the infolog so the error thrown by LeanCost.run() is not repeated
                infolog.cut(infologLine(), infologLine());
                hasError = true;
            }
        }
        
        if (!hasError)
        {
            ListEnumerator taskReceiptsListEnumerator = clearMaterialReceiptsWIPTasks.getEnumerator();
            while (taskReceiptsListEnumerator.moveNext())
            {
                LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP leanCost_CalcProdFlow_ClearMaterialReceiptsWIP = taskReceiptsListEnumerator.current();

                try
                {
                    leanCost_CalcProdFlow_ClearMaterialReceiptsWIP.runOperation();
                }
                catch(Exception::Error)
                {
                    // Remove the last line of the infolog so the error thrown by LeanCost.run() is not repeated
                    infolog.cut(infologLine(), infologLine());
                    hasError = true;
                }
            }
        }

        if (!hasError)
        {
            leanCost_CalcProdFlow_End.runOperation();
        }
        else
        {
            // Re-throw an error so that the outer try/catch gets it
            throw error("@CostManagement:MessageError_LeanCost_Multi");
        }

        if (appl.ttsLevel() != 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWIP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the recalculation of the Work-In-Progress (WIP) balances.
    /// </summary>
    /// <remarks>
    ///    The update is skipped if this is a resumed backflush costing calculation.
    /// </remarks>
    protected void updateWIP()
    {
        if (!isResumed)
        {
            LeanWIPBalanceUpdate::updateBalances(leanProductionFlowReference, leanCosting.ToDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnusedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unused quantities from the production flow.
    /// </summary>
    protected void getUnusedQty()
    {
        LeanProductionFlowCostingUnusedQty      costingUnusedQty;
        Map                                     unusedRawMaterialsQtyMapForItem;

        RecordSortedList unusedQtyList = this.getLeanCostingFacade().getUnusedQuantities(leanProductionFlowCosting.LeanProductionFlowReference, leanCosting.ToDate);

        unusedRawMaterialsQtyMap = new Map(Types::String, Types::Class);

        boolean found = unusedQtyList.first(costingUnusedQty);

        if (isResumed && found)
        {
            this.clearUnusedQty();
        }

        while (found)
        {
            if (costingUnusedQty.UnusedQtyType != LeanCostingUnusedQtyType::Service)
            {
                costingUnusedQty.LeanProductionFlowCosting = leanProductionFlowCosting.RecId;
                costingUnusedQty.insert();

                if (costingUnusedQty.UnusedQtyType == LeanCostingUnusedQtyType::RawMaterial)
                {
                    if (unusedRawMaterialsQtyMap.exists(costingUnusedQty.ItemId))
                    {
                        unusedRawMaterialsQtyMapForItem = unusedRawMaterialsQtyMap.lookup(costingUnusedQty.ItemId);
                    }
                    else
                    {
                        unusedRawMaterialsQtyMapForItem = new Map(Types::String, Types::Real);
                        unusedRawMaterialsQtyMap.insert(costingUnusedQty.ItemId, unusedRawMaterialsQtyMapForItem);
                    }

                    unusedRawMaterialsQtyMapForItem.insert(costingUnusedQty.InventDimId, costingUnusedQty.UnusedQty);
                }
            }

            found = unusedQtyList.next(costingUnusedQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LeanCost_CalcProdFlow_Multi</c> class.
    /// </summary>
    /// <param name="_leanCostingFacade">
    /// The instance of the <c>LeanCostingFacadeBase</c> class to use.
    /// </param>
    /// <returns>
    /// The new instance of the <c>LeanCost_CalcProdFlow_Multi</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_CalcProdFlow_Multi construct(LeanCostingFacadeBase _leanCostingFacade)
    {
        LeanCost_CalcProdFlow_Multi leanCostCalcProdFlow = new LeanCost_CalcProdFlow_Multi();
        leanCostCalcProdFlow.parmLeanCostingFacade(_leanCostingFacade);
        return leanCostCalcProdFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>