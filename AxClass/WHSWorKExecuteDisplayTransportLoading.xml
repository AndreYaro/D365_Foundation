<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayTransportLoading</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayTransportLoading</c> class is used to build display screens
/// for work execution in RF device for transport loading works.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::TransportLoading)]
public class WHSWorkExecuteDisplayTransportLoading extends WHSWorkExecuteDisplay
{
    private container ret;
    // Negative steps are required during this flow to prevent ever overlapping
    // with steps that are captured in the user directed sub-flow.
    private const int ShipConfirmTransportLoad = -4;
    private const int InitiateShipConfirmation = -3;
    private const int InitiateUserDirectedStep = -2;
	private const int ScanTransportLoadIdStep  = -1;
    private const int UserDirectedSubFlowStart =  0;
    private const int UserDirectedFlowPickStep =  1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoToMenuWhenCancelling</Name>
				<Source><![CDATA[
    protected boolean mustGoToMenuWhenCancelling()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container con = _con;

        // Get the pass out of the form state container
        pass = WhsrfPassthrough::create(conPeek(con, #PassthroughInfo));

        this.prepareNextStepExecution(_buttonClicked);

        // Check if an error was displayed to the user and remove it from the container so reprocessing can be attempted.
        if (this.hasError(con))
        {
            con = conDel(con, #ControlsStart, 1);
        }

        switch (step)
        {
            case ScanTransportLoadIdStep:
                this.getTransportLoadStep();
                break;

            case InitiateShipConfirmation:
                this.getShipConfirmTransportLoadStep(con);
                break;

            case ShipConfirmTransportLoad:
                this.executeShipConfirmationTransportLoad(con, _buttonClicked);
                break;

            // Unique process step required to process the transfer from the transport loading 
            // mobile device flow to the user directed sub-flow.
            case InitiateUserDirectedStep:
                this.initiateUserDirectedSubFlow(con, _buttonClicked);
                break;

            default:
                this.executeUserDirectedSubFlow(con, _buttonClicked);
                break;
        }

        // Persist the step, mode and pass changes
        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareNextStepExecution</Name>
				<Source><![CDATA[
    private void prepareNextStepExecution(str _buttonClicked)
    {
        if (step != InitiateUserDirectedStep)
        {
            if (!pass.exists(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId))
            {
                step = ScanTransportLoadIdStep;
            }
            else if (_buttonClicked == #RFShipConfirm)
            {
                step = InitiateShipConfirmation;
            }
            else if (!WHSTransportLoad::findByTransportLoadId(pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId)).isTransportLoadEligibleForTransportLoading())
            {
                ret		= this.addErrorLabel(ret, strFmt("@WAX:ErrorTransportLoadingNoLongerEligible", pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId)), WHSRFColorText::Error);
                pass	= this.resetPassthrough(ret, false);
                step	= ScanTransportLoadIdStep;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeUserDirectedSubFlow</Name>
				<Source><![CDATA[
    private void executeUserDirectedSubFlow(container _con, str _buttonClicked)
    {
        WhsWorkExecuteDisplay workExecuteDisplay = WhsWorkExecuteDisplay::construct(WHSWorkExecuteMode::UserDirected);
        
        workExecuteDisplay.setGlobals(mode, step, userId, pass);
        ret = workExecuteDisplay.displayForm(_con, _buttonClicked);

        this.updateGlobalsFromFormStateContainerAfterUserDirectedSubFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateUserDirectedSubFlow</Name>
				<Source><![CDATA[
    private void initiateUserDirectedSubFlow(container _con, str _buttonClicked)
    {
        container	con;
        boolean		hasErrors, complete;

        [hasErrors, complete, ret, con] = this.processUserInput(_con);
        
        if (hasErrors)
        {
            ret = con;
        }
        else if (complete)
        {
            step    = UserDirectedSubFlowStart;
            ret     = this.updateModeStepPass(ret, mode, step, pass);

            this.executeUserDirectedSubFlow(ret, _buttonClicked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransportLoadStep</Name>
				<Source><![CDATA[
    private void getTransportLoadStep()
    {
        this.buildTransportLoadScan();
        step = InitiateUserDirectedStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransportLoadScan</Name>
				<Source><![CDATA[
    private void buildTransportLoadScan()
    {
        ret += [this.buildControl(#RFLabel, #Scan, "@WAX:ScanTransportLoadID", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId, "@WAX33", 1, '', extendedTypeNum(WHSTransportLoadId), '', 0)];
        
        ret = this.addOkButton(ret);
        ret = this.addCancelButton(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipConfirmTransportLoadStep</Name>
				<Source><![CDATA[
    private void getShipConfirmTransportLoadStep(container _con)
    {
        if (!WHSTransportLoad::findByTransportLoadId(pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId)).isAtleastOneWorkAssignedToTransportLoad())
        {
            ret = this.addErrorLabel(conNull(), strFmt("@WAX:Error_CannotShipConfirmTransportLoadAsNoWorkAssigned", pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId)), WHSRFColorText::Error);
            ret = this.buildGetWorkIdLicensePlateId(ret);

            // Step required to process the pick operation in the user directed sub-flow.
            step = UserDirectedFlowPickStep;
        }
		else
        {
            this.buildTransportLoadShipConfirm();
            step = ShipConfirmTransportLoad;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransportLoadShipConfirm</Name>
				<Source><![CDATA[
    private void buildTransportLoadShipConfirm()
    {
        ret = [this.buildControl(#RFText, WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId, "@WAX:WHSTransportLoadId_Label", 1, pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId), extendedTypeNum(WHSTransportLoadId), '', 0, false)];      
        ret = this.addOkButton(ret);
        ret = this.addCancelButton(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGlobalsFromFormStateContainerAfterUserDirectedSubFlow</Name>
				<Source><![CDATA[
    private void updateGlobalsFromFormStateContainerAfterUserDirectedSubFlow()
    {
        // Need to ensure the pass retains the transport load id through the sub-flow.
        // It is not possible for the user directed sub-flow to remove the transport load id from the pass.
        WHSTransportLoadId transportLoadId = pass.lookup(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId);

        pass = WhsrfPassthrough::create(conPeek(ret, #PassthroughInfo));
        pass.insert(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId, transportLoadId);

        int userDirectedMode, userDirectedSubFlowStep;
        [userDirectedMode, userDirectedSubFlowStep] = conPeek(ret, 1);

        mode = WHSWorkExecuteMode::TransportLoading;

        ret = conPoke(ret, 1, [mode, userDirectedSubFlowStep]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeShipConfirmationTransportLoad</Name>
				<Source><![CDATA[
    private void executeShipConfirmationTransportLoad(container _con, str _buttonClicked)
    {
        int startInfologLine = infologLine();

        if (this.shipConfirmTransportLoad(WHSTransportLoad::findByTransportLoadId(pass.lookupStr(WHSWorkExecuteDisplayTransportLoadingControls::TransportLoadId))))
        {
            this.addTransportLoadShipConfirmSuccessMessage();
            pass = this.resetPassthrough(ret, false);
            this.getTransportLoadStep();
        }
        else
        {
            ret = this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error);
            this.getShipConfirmTransportLoadStep(_con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirmTransportLoad</Name>
				<Source><![CDATA[
    private boolean shipConfirmTransportLoad(WHSTransportLoad _transportLoad)
    {
        boolean                     isShipConfirmed;
        WHSShipConfirmationAction   shipConfirmationAction = WHSShipConfirmationAction::newFromBuffer(_transportLoad);
        
        if (shipConfirmationAction.canShipConfirm())
        {
            shipConfirmationAction.shipConfirm(DateTimeUtil::getSystemDateTime());

            isShipConfirmed = true;
        }

        return isShipConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransportLoadShipConfirmSuccessMessage</Name>
				<Source><![CDATA[
    private void addTransportLoadShipConfirmSuccessMessage()
    {
		ret = this.addErrorLabel(conNull(), "@WAX:TransportLoadShipConfirmed", WHSRFColorText::Success);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>