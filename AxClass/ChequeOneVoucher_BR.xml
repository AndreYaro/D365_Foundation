<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeOneVoucher_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChequeOneVoucher_BR</c> class validate the cheque.
/// </summary>
public class ChequeOneVoucher_BR extends OneVoucher_BR
{
    BankChequeNum   bankChequeNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedgerJournalTransValues</Name>
				<Source><![CDATA[
        protected boolean checkLedgerJournalTransValues(LedgerJournalTrans  _ledgerJournalTrans,
                        RunbaseProgress     _progress           = null)
    {
        boolean                 ret = false;
        boolean                 isBridging;
        LedgerJournalAC         bankAccount;
        VendPaymModeTable       vendPaymModeTable;
        LedgerJournalACType     offsetAccType;

        isBridging = _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank;

        if (isBridging)
        {
            vendPaymModeTable   = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode);
            bankAccount         = vendPaymModeTable.parmPaymAccount();

            offsetAccType       = vendPaymModeTable.AccountType;
        }
        else
        {
            bankAccount         = _ledgerJournalTrans.parmOffsetAccount();
            offsetAccType       = _ledgerJournalTrans.OffsetAccountType;
        }

        ret = this.validateBankAccountIsActive(bankAccount);
        ret = ret && this.validatePaymAmountMST(_ledgerJournalTrans);
        ret = ret && this.validatePaymentStatus(_ledgerJournalTrans);
        ret = ret && this.validateOffsetAccountType(offsetAccType);
        ret = ret && this.validateCurrencyCode(_ledgerJournalTrans);
        ret = ret && this.runLedgerJournalCheckPost(_ledgerJournalTrans, _progress);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
        public boolean checkValues(RunbaseProgress _progress)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        ListEnumerator              voucherTransEnumerator;

        voucherTransEnumerator = voucherTrans.getEnumerator();

        while (voucherTransEnumerator.moveNext())
        {
            ledgerJournalTrans = voucherTransEnumerator.current();

            if (this.checkLedgerJournalTransValues(ledgerJournalTrans, _progress))
            {
                if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
                    && ledgerJournalTrans.BankChequeNum)
                {
                    throw error("@SYS18447");
                }
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ChequeOneVoucher_BR</c> class.
    /// </summary>
    /// <param name="_postingLevel">
    /// The cheque voucher grouping criteria.
    /// </param>
    public void new(Posting_BR _postingLevel)
    {
        postingLevel    = _postingLevel;
        voucherTrans    = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankChequeNum</Name>
				<Source><![CDATA[
        public BankChequeNum parmBankChequeNum(BankChequeNum _bankChequeNum = bankChequeNum)
    {
        bankChequeNum = _bankChequeNum;

        return bankChequeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherTransactions</Name>
				<Source><![CDATA[
        public void updateVoucherTransactions()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        ListEnumerator      enumerator;

        enumerator = voucherTrans.getEnumerator();

        while (enumerator.moveNext())
        {
            ledgerJournalTrans = enumerator.current();

            ledgerJournalTrans.PaymReference    = paymReference;
            ledgerJournalTrans.BankChequeNum    = bankChequeNum;
            ledgerJournalTrans.Voucher          = voucher;
            ledgerJournalTrans.PaymentStatus    = CustVendPaymStatus::Sent;

            ledgerJournalTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the payment journal line currency is equal to the bank currency.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line.
    /// </param>
    /// <returns>
    /// True if the currency is valid; otherwise, false.
    /// </returns>
    protected boolean validateCurrencyCode(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountTable    bankAccountTable;
        boolean             ret = true;

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            select firstonly AccountID from bankAccountTable index AccountIdx
                where bankAccountTable.AccountID == _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            bankAccountID = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).parmPaymAccount();

            select firstonly AccountID from bankAccountTable index AccountIdx
                where bankAccountTable.AccountID == bankAccountID;
        }

        if (ret && bankAccountTable)
        {
            ret = BankAccountTable::checkIsActive(bankAccountTable.AccountID);
        }

        if (ret)
        {
            if (bankAccountTable.CurrencyCode != _ledgerJournalTrans.CurrencyCode    &&
                !_ledgerJournalTrans.BankChequeNum)
            {
                ret = checkFailed("@SYS56397");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the offset account type is bank.
    /// </summary>
    /// <param name="_accountType">
    /// The payment journal line account type.
    /// </param>
    /// <returns>
    /// True if it the offset account type is bank, otherwise, false.
    /// </returns>
    protected boolean validateOffsetAccountType(LedgerJournalACType _accountType)
    {
        if (_accountType != LedgerJournalACType::Bank)
        {
            return checkFailed(strfmt("@SYS24990", "@SYS7439"));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>