<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntentLetterCreateService_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntentLetterCreateService_IT</c> class gets actions for intent letter creation.
/// </summary>
public class IntentLetterCreateService_IT extends SysOperationServiceBase
{
    public FromDate fromDate;
    public ToDate toDate;
    public IntentLetterPostingDate_IT letterDate;
    public IntentLetterType_IT letterType;
    public AmountMST amountMST;
    public Notes letterNotes;

    QueryRun queryRun;
    TmpVendIntentLetter_IT tmpVendData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates intent letter.
    /// </summary>
    /// <param name = "_dataContract">The data contract to be used for intent letter creation.</param>
    public void runProcessing(IntentLetterCreateDataContract_IT _dataContract)
    {
        VendTable vendTable;

        this.init(_dataContract);

        while (queryRun.next())
        {
            vendTable = queryRun.get(tableNum(VendTable));
            tmpVendData.AccountNum = vendTable.AccountNum;
            tmpVendData.Name = vendTable.name();
            tmpVendData.Currency = vendTable.Currency;
            tmpVendData.VendGroup = vendTable.VendGroup;
            tmpVendData.Create = NoYes::Yes;
            tmpVendData.insert();
        }

        Args args = new Args();
        args.caller(this);
        FormRun formRun = new MenuFunction(menuitemDisplayStr(TmpVendIntentLetter_IT), MenuItemType::Display).create(args);
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <param name = "_dataContract">The data contract to be used for intent letter creation.</param>
    public void init(IntentLetterCreateDataContract_IT _dataContract)
    {
        fromDate = _dataContract.parmFromDate();
        toDate = _dataContract.parmToDate();
        letterDate = _dataContract.parmPostingDate();
        letterType = _dataContract.parmLetterType();
        amountMST = _dataContract.parmAmountMST();
        letterNotes = _dataContract.parmLetterNotes();
        queryRun = new QueryRun(_dataContract.getQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntentLetters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intent letter creation procedures.
    /// </summary>
    /// <param name = "_tmpVendIntentLetter">A <c>TmpVendIntentLetter</c> record.</param>
    /// <param name = "_updatePurchOrders">true if purchase order needs to be updated; false otherwise.</param>
    /// <param name = "_reconfirmPurchOrders">true if purchase order needs to be confirmed; false otherwise.</param>
    /// <param name = "_partlyDelivered">true if purchase order should not be updated; false otherwise.</param>
    //This method is called from TmpVendIntentLetter form
    public void createIntentLetters(
        TmpVendIntentLetter_IT _tmpVendIntentLetter,
        boolean _updatePurchOrders,
        boolean _reconfirmPurchOrders,
        boolean _partlyDelivered)
    {
        int counter = 0;
        int numOfUpdatedPOs;
        IntentLetter_IT intentLetter;

        ttsbegin;

        while select _tmpVendIntentLetter
            where _tmpVendIntentLetter.Create == NoYes::Yes
        {
            // Intent letter cannot be created if there is one active in the same period.
            if (letterType != IntentLetterType_IT::Period
                || !IntentLetter_IT::existIntentLetterInPeriod(
                    _tmpVendIntentLetter.AccountNum,
                    fromDate,
                    toDate))
            {
                intentLetter = IntentLetter_IT::createIntentLetter(
                    _tmpVendIntentLetter.AccountNum,
                    letterType,
                    fromDate,
                    toDate,
                    amountMST,
                    letterNotes,
                    letterDate);
                numOfUpdatedPOs = 0;

                if (_updatePurchOrders)
                {
                    numOfUpdatedPOs = intentLetter.updatePurchOrders(_partlyDelivered, _reconfirmPurchOrders);

                    if (numOfUpdatedPOs)
                    {
                        info (strfmt("@ExtendedItallianLocalization:PurchOrderLinesUpdated", intentLetter.IntentLetterId, numOfUpdatedPOs));
                    }
                }

                counter++;
            }
            else
            {
                warning(strFmt("@ExtendedItallianLocalization:VendIntentLetterAlreadyExists", fromDate, toDate, _tmpVendIntentLetter.AccountNum));
            }
        }

        ttscommit;

        info(strFmt("@ExtendedItallianLocalization:IntentCreatedPercent", counter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpVendData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpVendIntentLetter_IT</c> record.
    /// </summary>
    /// <returns>The <c>TmpVendIntentLetter_IT</c> record.</returns>
    public TmpVendIntentLetter_IT tmpVendData()
    {
        return tmpVendData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>