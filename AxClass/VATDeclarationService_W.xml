<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationService_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The service of ER VAT declaration file generation.
/// </summary>
public class VATDeclarationService_W extends SysOperationServiceBase
{
    private container packedMappingParameters;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected ERModelDefinitionParamsUIActionComposite initParameters(VATDeclaraitonContract_W _contract)
    {
        const str Model = 'Model';
        const str Contract = 'Contract';

        TmpTaxReportById tmpTaxReportById = _contract.parmTmpTaxReportById();
        select tmpTaxReportById;

        if(!tmpTaxReportById)
        {
            TaxCalcVATDeclarationFieldsHelper_W taxCalcFields = TaxCalcVATDeclarationFieldsHelper_W::construct(_contract.parmQuery());
            taxCalcFields.calc();

            tmpTaxReportById = taxCalcFields.parmTmpTaxReportById();
        }

        ERModelDefinitionParamsUIActionComposite parameters = new ERModelDefinitionParamsUIActionComposite()
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(tmpTaxReportById))
            .add(new ERModelDefinitionObjectParameterAction(Model, Contract, _contract));

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process of generating VAT declaration.
    /// </summary>
    /// <param name="_contract">
    /// The instance of <c>VATDeclarationContract_W</c>.
    /// </param>
    public void generateXml(VATDeclaraitonContract_W _contract)
    {
        boolean isGTEEnabled = VATDeclarationService_W::isGTEEnabled();

        if (isGTEEnabled || TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
        {
            var stopwatch = System.Diagnostics.Stopwatch::StartNew();

            this.generateReports(_contract);

            stopwatch.Stop();

            GlobalizationInstrumentationHelper::featureRun(
                GlobalizationConstants::FeatureReferenceEUR00031,
                funcName(),
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                _contract.parmISOCodeFromTaxRegistration(),
                stopwatch.ElapsedMilliseconds,
                true);
        }
        else
        {
            
                ERFormatMappingId formatMappingId = _contract.parmFormatMapping();
                
                boolean isInBatch = Global::isRunningOnBatch();

                if (isInBatch)
                {
                    
                    const str Model = 'Model';
                    const str Contract = 'Contract';

                    ERIModelDefinitionParamsAction DBparameters = new ERModelDefinitionParamsUIActionComposite()
                        .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(_contract.parmTmpTaxReportById()))
                        .add(new ERModelDefinitionObjectParameterAction(Model, Contract, _contract));

                    ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(
                        formatMappingId,
                        '',
                        false,
                        false,
                        false,
                        isInBatch)
                        .withParameter(DBparameters)
                        .run();

                }
                else
            {

                var runner = ERObjectsFactory::createFormatMappingRunWithParametersByFormatMappingId(formatMappingId,
                ERFormatMappingTable::find(formatMappingId).Name, false);
            
                ERISysLastValueLoadable formatMappingRunSysLastValueLoadable = runner as ERISysLastValueLoadable;
                if (formatMappingRunSysLastValueLoadable)
                {
                    formatMappingRunSysLastValueLoadable.withLoadFromSysLastValue(false);
                }
            
                var parameters = runner.getRunParameters();
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoAE]))
                {
                    this.showDialogAndPackFormatMappingParameters(formatMappingId);
                    parameters.unpackModelDefinitionParameters(packedMappingParameters);
                }
                
                runner.addActionParameter(this.initParameters(_contract)).runWithParameters(parameters);
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialogAndPackFormatMappingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows dialog with ER user input parameters and packs format mapping run parameters.
    /// </summary>
    private void showDialogAndPackFormatMappingParameters(ERFormatMappingId _formatMappingId)
    {
        var runner = ERObjectsFactory::createFormatMappingRunWithParametersByFormatMappingId(_formatMappingId);
        var parameters = runner.getRunParameters();
        if (parameters.prompt())
        {
            packedMappingParameters = parameters.packModelDefinitionParameters();
        }
        else
        {
            info("@VATDeclaration_W:FormatMappingParametersNotPackedMessage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedMappingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets packed format mapping run data.
    /// </summary>
    /// <returns>
    /// Packed container with format mapping run parameters.
    /// </returns>
    public container getPackedMappingParameters()
    {
        return packedMappingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs process of generating VAT Declaration in scope of activated GTE functionality.
    /// </summary>
    /// <param name="_contract">
    /// The instance of <c>VATDeclarationContract_W</c>.
    /// </param>
    public void generateReports(VATDeclaraitonContract_W _contract)
    {
        const str modelName = 'Tax declaration model';
        const str datasourceName = 'Contract';

        ERFormatMappingId formatMappingId = _contract.parmFormatMapping();
        boolean showDialog = true;

        try
        {
            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, ERFormatMappingTable::find(formatMappingId).Name, showDialog)
                .withCreatingObjectParameter(modelName, datasourceName, _contract)
                .run();
        }
        catch(Exception::Error)
        {
            // rethrow error, so that status is reported correctly for batch tasks.
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGTEEnabled</Name>
				<Source><![CDATA[
    public static boolean isGTEEnabled()
    {
        boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK]);

        return isGTEEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>