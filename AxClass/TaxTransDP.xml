<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxTransDP</c> class provides data for the <c>TaxTrans</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(TaxTrans))
]
class TaxTransDP extends SrsReportDataProviderPreProcessTempDB
{
    TmpTaxTransReport  tmpTaxTransReport;
    TaxTrans           taxTrans;
    TaxTrans_W         taxTrans_W;
    SubledgerVoucherGeneralJournalEntry	subledgerVoucherGeneralJournalEntry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the required report data.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSet('TmpTaxTransReport')
    ]
    public TmpTaxTransReport getTaxTransTmp()
    {
        select tmpTaxTransReport;
        return tmpTaxTransReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the required data and inserts it in to the temporary table.
    /// </summary>
    public void insertTmpTable()
    {
        tmpTaxTransReport.TransDate               =   taxTrans.TransDate;
        tmpTaxTransReport.Voucher                 =   taxTrans.Voucher;
        tmpTaxTransReport.TaxCode                 =   taxTrans.TaxCode;
        tmpTaxTransReport.SourceName              =   taxTrans.sourceName();
        tmpTaxTransReport.SourceInvoiceNo         =   taxTrans.sourceInvoiceNo();
        tmpTaxTransReport.SourceCurrencyCode      =   taxTrans.SourceCurrencyCode;
        tmpTaxTransReport.TaxAmount               =   taxTrans.TaxAmount;
        tmpTaxTransReport.SourceRegulateAmountCur =   taxTrans.SourceRegulateAmountCur;
        tmpTaxTransReport.TaxInCostPriceMST       =   taxTrans.TaxInCostPriceMST;
        tmpTaxTransReport.VatDueDate_W            =   taxTrans_W.VatDueDate_W;
        tmpTaxTransReport.GeneralJournalEntry     =   subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        if (!tmpTaxTransReport.SourceName)
        {
            tmpTaxTransReport.SourceName = this.getSourceNameForConditionalTax();
        }

        TaxTrans taxTransExpense;

        select firstonly SourceTableId from taxTransExpense
            where taxTransExpense.Voucher == subledgerVoucherGeneralJournalEntry.Voucher;

        if (taxTransExpense.SourceTableId == tableNum(TrvExpTrans))
        {
            tmpTaxTransReport.Source = TaxModuleType::Expense;
        }
        else
        {
            tmpTaxTransReport.Source = taxTrans.Source;
        }

        tmpTaxTransReport.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceNameForConditionalTax</Name>
				<Source><![CDATA[
    private Name getSourceNameForConditionalTax()
    {
        Name custTableName(CustAccount _custAccount)
        {
            return DirPartyTable::findRec(CustTable::find(_custAccount).Party).Name;
        }

        Name vendTableName(VendAccount _vendAccount)
        {
            return DirPartyTable::findRec(VendTable::find(_vendAccount).Party).Name;
        }

        Name name;
        LedgerTransVoucherLink ledgerTransVoucherLink;
        LedgerTransVoucherLink originLedgerTransVoucherLink;
        VendTrans vendTrans;

        select firstonly RecId from ledgerTransVoucherLink
            where ledgerTransVoucherLink.Voucher == taxTrans.Voucher
                && ledgerTransVoucherLink.TransDate == taxTrans.TransDate
            join RecId from originLedgerTransVoucherLink
                where originLedgerTransVoucherLink.VoucherGroupId == ledgerTransVoucherLink.VoucherGroupId
                    && originLedgerTransVoucherLink.RecId != ledgerTransVoucherLink.RecId
            join RecId, AccountNum from vendTrans
                where originLedgerTransVoucherLink.Voucher == vendTrans.Voucher
                    && originLedgerTransVoucherLink.TransDate == vendTrans.TransDate;

        if (vendTrans.RecId)
        {
            name = vendTableName(vendTrans.AccountNum);
        }
        else
        {
            CustTrans custTrans;

            select firstonly RecId from ledgerTransVoucherLink
                where ledgerTransVoucherLink.Voucher == taxTrans.Voucher
                    && ledgerTransVoucherLink.TransDate == taxTrans.TransDate
                join RecId from originLedgerTransVoucherLink
                    where originLedgerTransVoucherLink.VoucherGroupId == ledgerTransVoucherLink.VoucherGroupId
                        && originLedgerTransVoucherLink.RecId != ledgerTransVoucherLink.RecId
                join RecId, AccountNum from custTrans
                    where originLedgerTransVoucherLink.Voucher == custTrans.Voucher
                        && originLedgerTransVoucherLink.TransDate == custTrans.TransDate;

            name = custTableName(custTrans.AccountNum);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                taxTrans = queryRun.get(tablenum(TaxTrans));
                taxTrans_W = queryRun.get(tablenum(TaxTrans_W));

                select firstonly GeneralJournalEntry, Voucher, VoucherDataAreaId from subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.Voucher == taxTrans.Voucher
                        && subledgerVoucherGeneralJournalEntry.AccountingDate == taxTrans.TransDate
                        && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == taxTrans.DataAreaId;

                this.insertTmpTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>