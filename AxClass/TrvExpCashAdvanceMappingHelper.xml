<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpCashAdvanceMappingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpCashAdvanceMappingHelper</c> class imeplements the methods that create records and
/// provides access to records in <c>TrvExpCashAdvanceMapping</c> table.
/// </summary>
final class TrvExpCashAdvanceMappingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAmountMST</Name>
				<Source><![CDATA[
    public static void initAmountMST(TrvExpCashAdvanceMapping _trvExpCashAdvanceMapping, TrvExpTrans _trvExpTrans)
    {
        TrvCashAdvance trvCashAdvance = TrvCashAdvance::findRecId(_trvExpCashAdvanceMapping.CashAdvanceRecId);
        AmountCur remainingCashAdvBalance = trvCashAdvance.amountMSTAvailableToAllocate();
        
        // Initialize the AmountMST and expenseLineRecId. 
        // Default to expense amount when expense amount if less than cash advance balance.
        _trvExpCashAdvanceMapping.AmountMST = _trvExpTrans.AmountMST <= remainingCashAdvBalance ? _trvExpTrans.AmountMST : remainingCashAdvBalance;
        _trvExpCashAdvanceMapping.ExpLineRecId = _trvExpTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashAdvanceMappingFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to indicate whether the mapping feature is enabled or not.
    /// </summary>
    /// <returns>
    ///     True if feature is enabled, otherwise false.
    /// </returns>
    [Hookable(false)]
    public static boolean isCashAdvanceMappingFeatureEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(TrvExpTransCashAdvMappingFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpCashAdvanceMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to insert a new record into TrvExpCashAdvanceMapping table.
    /// </summary>
    /// <param name="_expLineRecId">
    ///     The valid record Id of the expense line for which cash advance link needs to be created.
    /// </param>
    /// <param name="_cashAdvanceRecId">
    ///     The record id of the cash advance that is being consumed.
    /// </param>
    /// <param name="_amountMST">
    ///     Portion of cash advance allocated for expense line (in accounting currency)
    /// </param>
    /// <returns>
    ///     True if operation succeeds, otherwise false.
    /// </returns>
    private static boolean insertExpCashAdvanceMapping(RefRecId _expLineRecId,
                                                    RefRecId _cashAdvanceRecId,
                                                    AmountMST _amountMST)
    {
        str logMessage = strFmt("InsertExpCashAdvanceMapping: Expense Line = %1, Cash Advance = %2, Amount %3", _expLineRecId, _cashAdvanceRecId, _amountMST);
        TrvInstrumentationHelper::logExpenseOperationsInformation(logMessage, classStr(TrvExpCashAdvanceMappingHelper));
        
        TrvExpTrans trvExpTrans = TrvExpTrans::find(_expLineRecId);
        
        // if correction flight is enabled
        // remove the mapping for the parent expense line
        // to avoid both parent and child line holding the cash advance
        if(TrvExpenseHelper::isTrvCashAdvanceForItemizedLineCorrectionFlightEnabled() 
            && trvExpTrans.LineType == TrvExpLineType::ItemizedLine
            && TrvExpCashAdvanceMapping::existsExpenseLine(trvExpTrans.ParentRecId))
        {
            TrvExpCashAdvanceMappingHelper::removeMappingForExpenseLine(trvExpTrans.ParentRecId);
        }

        ttsBegin;
        TrvExpCashAdvanceMapping newMappingRecord;
        newMappingRecord.ExpLineRecId = _expLineRecId;
        newMappingRecord.CashAdvanceRecId = _cashAdvanceRecId;
        newMappingRecord.AmountMST = _amountMST;
        newMappingRecord.insert();
        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to validate input parameters.
    /// </summary>
    /// <param name="_expenseLine">
    ///     The expense line object.
    /// </param>
    /// <param name="_cashAdvance">
    ///     The cash advance object.
    /// </param>
    /// <param name="_amountMST">
    ///     Amount in accounting currency.
    /// </param>
    /// <returns>
    ///     True if validation succeeds, otherwise false.
    /// </returns>
    private static boolean validateParameters(TrvExpTrans _expenseLine,
                                              TrvCashAdvance _cashAdvance,
                                              AmountMST _amountMST)
    {
        // Validate that the specified amount is less than amount on the expense line.
        if (_amountMST > _expenseLine.AmountMST)
        {
            return checkFailed("@Expense:MappingAmountGreaterThanExpenseAmount");
        }
        
        // The cash advance should be in 'Paid' state.
        if (_cashAdvance.CashAdvanceStatus != TrvWorkflowCashAdvanceStatus::Paid)
        {
            return checkFailed(strFmt("@Expense:MappingCashAdvanceInvalidStatus", TrvWorkflowCashAdvanceStatus::Paid));
        }

        // The amount consumed should be less than original cash advance balance.
        if (_cashAdvance.BalanceMST < _amountMST)
        {
            return checkFailed("@Expense:MappingAmountGreaterThanCashAdvance");
        }

        // The amount consumed should be less than updated available cash advance balance.
        if (_cashAdvance.amountMSTAvailableToAllocate() < _amountMST)
        {
            return checkFailed("@Expense:MappingAmountUsedExceedsBalance");
        }

        // All good.        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTotalCashAdvanceUsedForExpenseMST</Name>
				<Source><![CDATA[
    public static boolean validateTotalCashAdvanceUsedForExpenseMST(TrvExpCashAdvanceMapping _trvCashAdvanceMapping,
                                                                    AmountMST _currentCashAdvanceUsed=0)
    {
        boolean ret=true;
        AmountMST netChangeInCashAdvanceUsed = _currentCashAdvanceUsed;
        if (_trvCashAdvanceMapping.ExpLineRecId)
        {
            // If there is already a mapping record, we need to trace the change in amount used.
            // For example, if cash advance used was earlier 8 and now we updated it to 4, the net difference will be -4. 
            // We need to consider this value in our total amount for validation.
            if (_trvCashAdvanceMapping.RecId)
            {
                netChangeInCashAdvanceUsed = _currentCashAdvanceUsed - TrvExpCashAdvanceMapping::findByRecId(_trvCashAdvanceMapping.RecId).AmountMST;
            }

            AmountMST totalCashAdvanceUsed = netChangeInCashAdvanceUsed + _trvCashAdvanceMapping.totalCashAdvanceUsedForExpenseMST();

            TrvExpTrans trvExpTrans = TrvExpTrans::find(_trvCashAdvanceMapping.ExpLineRecId);
            if (trvExpTrans.AmountMST < totalCashAdvanceUsed)
            {
                ret = checkFailed("@Expense:MappingTotalCashAdvanceExceedsExpenseAmount");
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCashAdvanceUsedAgainstBalance</Name>
				<Source><![CDATA[
    public static boolean validateCashAdvanceUsedAgainstBalance(TrvExpCashAdvanceMapping _trvExpCashAdvanceMapping,
                                                                AmountMST _currentCashAdvanceUsed)
    {
        boolean ret = true;
        AmountMST availableCashAdvBalance = _trvExpCashAdvanceMapping.cashAdvanceBalanceMST();

        // If a record already exists and if the record we are validating is not a new record, then we need to add old amountMST
        // back to the available cash advance balance to get the most updated cash advance balance.
        if (_trvExpCashAdvanceMapping.RecId)
        {
            availableCashAdvBalance += TrvExpCashAdvanceMapping::findByRecId(_trvExpCashAdvanceMapping.RecId).AmountMST;
        }

        // Check if cash advanced used exceeds the updated available cash advance balance.
        if (_currentCashAdvanceUsed > availableCashAdvBalance)
        {
            ret = checkFailed(strFmt("@Expense:MappingAmountUsedExceedsBalance"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateCashAdvanceMapping</Name>
				<Source><![CDATA[
    public static boolean validateDuplicateCashAdvanceMapping(TrvExpCashAdvanceMapping _trvExpCashAdvanceMapping)
    {
        boolean ret = true;
       
        // check if this is a new record and if the cash advance number has already been used for the same expense.
        if (!_trvExpCashAdvanceMapping.RecId)
        {
            TrvExpCashAdvanceMapping trvExpCashAdvanceMapping;
            select firstonly RecId from trvExpCashAdvanceMapping
                where trvExpCashAdvanceMapping.ExpLineRecId == _trvExpCashAdvanceMapping.ExpLineRecId
                && trvExpCashAdvanceMapping.CashAdvanceRecId == _trvExpCashAdvanceMapping.CashAdvanceRecId;

            if (trvExpCashAdvanceMapping.RecId != 0)
            {
                ret = checkFailed(strFmt("@Expense:DuplicateCashAdvance"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMappingForSpecificCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to validate input parameters.
    /// </summary>
    /// <param name="_expenseLine">
    ///     The expense line object.
    /// </param>
    /// <param name="_cashAdvanceNumber">
    ///     The cash advance number.
    /// </param>
    /// <param name="_amountMST">
    ///     Amount in accounting currency.
    /// </param>
    /// <returns>
    ///     True if validation succeeds, otherwise false.
    /// </returns>
    private static boolean addMappingForSpecificCashAdvance(TrvExpTrans _expenseLine,
                                                            TrvCashAdvanceNumber _cashAdvanceNumber,
                                                            AmountMST _amountMST)
    {
        boolean ret = true;

        // Validate that the Cash advance number is valid.
        TrvCashAdvance cashAdvance = TrvCashAdvance::find(_cashAdvanceNumber);
        if (cashAdvance.RecId == 0)
        {
            ret = checkFailed("@Expense:MappingCashAdvanceNotFound");
        }

        // Validate the parameters.
        ret = ret && TrvExpCashAdvanceMappingHelper::ValidateParameters(_expenseLine, cashAdvance, _amountMST);

        // If validation succeeds, insert mapping record.
        ret = ret && TrvExpCashAdvanceMappingHelper::insertExpCashAdvanceMapping(_expenseLine.RecId, cashAdvance.RecId, _amountMST);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesMappingRecordExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to find if the record already exists in TrvExpCashAdvanceMapping
    ///     table for the given expense line and cash advance.
    /// </summary>
    /// <param name="_expLineRecId">
    ///     The valid record Id of the expense line.
    /// </param>
    /// <param name="_cashAdvanceRecId">
    ///     The record id of the cash advance.
    /// </param>
    /// <returns>
    ///     True if the record already exists, otherwise false.
    /// </returns>
    private static boolean doesMappingRecordExist(RefRecId _expLineRecId,
                                                  RefRecId _cashAdvanceRecId)
    {
        TrvExpCashAdvanceMapping mappingRecord;
        select firstonly RecId from mappingRecord
                where mappingRecord.CashAdvanceRecId == _cashAdvanceRecId &&
                mappingRecord.ExpLineRecId == _expLineRecId;

        return mappingRecord.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method inserts one or more new mapping records in the table based on
    ///     specified inputs.
    ///
    ///     This method takes Expense line Record Id and Cash advance number as inputs.
    ///     The Expense Line Record Id should be a valid record Id of an existing expense
    ///     line. The Cash advance numer, if non-empty, should be a valid cash advance
    ///     number, which is paid and transferred.
    ///
    ///     If the cash advance number is empty, then the system uses existing algorithm to
    ///     consume one or more of available cash advances. One record is added in the
    ///     mapping table for each of the cash advance consumed.
    ///
    ///     The specified amount should be the amount in accounting currency. The specified
    ///     amount should be lesser than the amount on the expense line as well as remaining
    ///     balance on the cash advance.
    /// </summary>
    /// <param name="_expLineRecId">
    ///     The valid record Id of the expense line for which cash advance link needs to be created.
    /// </param>
    /// <param name="_cashAdvanceNumber">
    ///     The cash advance that is being consumed.
    /// </param>
    /// <param name="_amountMST">
    ///     Portion of cash advance allocated for expense line (in accounting currency)
    /// </param>
    /// <returns>
    ///     True if operation succeeds, otherwise false.
    /// </returns>
    [Hookable(false)]
    public static boolean createNewMapping(RefRecId _expLineRecId,
                                        TrvCashAdvanceNumber _cashAdvanceNumber,
                                        AmountMST _amountMST)
    {
        // Validate that the Expense line Record ID is valid.
        TrvExpTrans expenseLine = TrvExpTrans::find(_expLineRecId);
        if (_expLineRecId == 0 || expenseLine.RecId == 0)
        {
            return checkFailed("@Expense:MappingExpenseLineNotFound");
        }
        
        // If there is a specific cash advance, create mapping based on amount and cash advance.
        if (_cashAdvanceNumber != '')
        {
            str logMessage = strFmt("Mapping creation: Expense Line = %1 and Cash Advance: %2", _expLineRecId, _cashAdvanceNumber);
            TrvInstrumentationHelper::logExpenseOperationsInformation(logMessage, classStr(TrvExpCashAdvanceMappingHelper));
            return TrvExpCashAdvanceMappingHelper::addMappingForSpecificCashAdvance(expenseLine, _cashAdvanceNumber, _amountMST);
        }

        return TrvExpCashAdvanceMappingHelper::autoMapToCashAdvance(expenseLine);

    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMappingForExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes all mapping records for given expense line
    /// </summary>
    /// <param name = "_expenseLineRefRecId">Record identifier for an expense line.</param>
    [Hookable(false)]
    public static void removeMappingForExpenseLine(RefRecId _expenseLineRefRecId)
    {
        #OCCRetryCount

        TrvExpCashAdvanceMapping trvExpCashAdvanceMapping;

        try
        {
            if (TrvExpCashAdvanceMappingHelper::canRemoveMapping(_expenseLineRefRecId))
            {
                str logMessage = strFmt("removeMappingForExpenseLine: mapping can be removed for Expense Line = %1",_expenseLineRefRecId);
                TrvInstrumentationHelper::logExpenseOperationsInformation(logMessage, classStr(TrvExpCashAdvanceMappingHelper));

                ttsbegin;
                trvExpCashAdvanceMapping.skipDataMethods(true);
                delete_from trvExpCashAdvanceMapping
                        where trvExpCashAdvanceMapping.ExpLineRecId == _expenseLineRefRecId;
                ttscommit;

            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() <= #RetryNum)
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRemoveMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Helper method to validate if mapping lines for a expense line can be deleted.
    /// </summary>
    /// <param name="_expenseLineRecId">
    ///     The expense line record identifier.
    /// </param>
    /// <returns>
    ///     True if validation succeeds, otherwise false.
    /// </returns>
    [Hookable(false)]
    public static boolean canRemoveMapping(RefRecId _expenseLineRecId)
    {
        //Validate record identifier for expense line record is non-zero value.
        if (_expenseLineRecId == 0)
        {
            return checkFailed (strFmt("@Expense:InvalidExpenseLineRecIdAsParam", _expenseLineRecId));
        }
        
        TrvExpTrans trvExpTrans;
        TrvExpTrans trvExpTransMileage=TrvExpTrans::find(_expenseLineRecId);

        // As the Mileage calculation occurs after expense report is in Approved state, we have to make sure we handle that case while posting an expense cash advance mapping table
        // should be adjusted accordingly.
        if(!TrvExpenseHelper::isTrvRebalanceMileageCashAdavanceOnPostingFlightEnabled() && trvExpTransMileage.ApprovalStatus == TrvAppStatus::Approved && trvExpTransMileage.CostOwner==TrvCostOwner::Employee && trvExpTransMileage.ExpType==TrvExpType::Transport && trvExpTransMileage.KMOwnCar>0)
        {
            return true;
        }
        else
        {
            select RecId from trvExpTrans
            where trvExpTrans.RecId == _expenseLineRecId
            &&    trvExpTrans.ApprovalStatus == TrvAppStatus::Create;
        }

        //Validate record identifier for expense line record is non-zero value.
        if (trvExpTrans.RecId == 0)
        {
            return checkFailed("@Expense:InvalidExpenseLineStatus");
        }
               
        // All good.        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMappingForCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method inserts mapping records for the specified cash advance based on
    ///     unposted expenses which are using cash advances before the mapping feature
    ///     was enabled. This method takes the cash advance Record Id as input. The mapping
    ///     records are added based on the records in TrvAccountDistribution table.
    /// </summary>
    /// <param name="_cashAdvanceRecId">
    ///     The cash advance that is being consumed.
    /// </param>
    /// <returns>
    ///     True if operation succeeds, otherwise false.
    /// </returns>
    public static boolean populateMappingForCashAdvance(RefRecId _cashAdvanceRecId)
    {
        boolean ret = true;

        // Validate that the Cash advance record ID is valid.
        TrvCashAdvance cashAdvance = TrvCashAdvance::findRecId(_cashAdvanceRecId);
        if (_cashAdvanceRecId == 0 || cashAdvance.RecId == 0)
        {
            ret = checkFailed("@Expense:MappingCashAdvanceNotFound");
        }

        TrvAccountingDistribution trvAccountingDistribution;
        AccountingDistribution accountingDistribution;
        TrvExpTrans expenseLine;

        // Existing unposted expenses that have consumed cash advance before the feature is
        // enabled have records in TrvAccountingDistribution table. This is how expense report
        // is connected to cash advance through TrvAccountingDistribution records:
        //     TrvExpTable of expense line = RecId of expense report
        //     SourceDocumentLine in AccountingDistribution = SourceDocumentLine of expense line
        //     AccountingDistribution in TrvAccountingDistribution = RecId of AccountingDistribution
        //
        // Using the above relations, the following query is to get expense line based on
        // accounting distribution and Cash Advance Rec Id in every records in the
        // TrvAccountingDistribution for the given cash advance RecId.
        //
        while select CashAdvance, AdvanceAmountMST from trvAccountingDistribution
            where trvAccountingDistribution.CashAdvance == _cashAdvanceRecId
            join SourceDocumentLine, RecId from accountingDistribution
            where trvAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
            join RecId from expenseLine
            where accountingDistribution.SourceDocumentLine == expenseLine.SourceDocumentLine
        {
            // Here we compute the cash advance amount consumed by the expense line and
            // add record in mapping table. Before that, let's check if the record for this
            // expense line and cash advance already exists.
            if (TrvExpCashAdvanceMappingHelper::doesMappingRecordExist(expenseLine.RecId, _cashAdvanceRecId))
            {
                // Mapping record already exists, no need to do anything for this record.
                continue;
            }

            //
            // When tax is used as part of expense line or expense amount is distributed,
            // there are more than one entries created in accounting distribution table for
            // a single expense line. When that happens, there is one [parent] record and
            // multiple child records with ParentDistribution field pointing to parent
            // record. And source document line of expense line matches with the parent
            // record in accounting distribution.
            //
            // In above scenario, there is no record in TrvExpTrans with source document line
            // of child record in TrvAccountingDistribution. So, to compute the total amount
            // consumed by expense line, we have to compute the amount on the records
            // corresponding to the the child records. So, find the child records in
            // AccountingDistribution table and the corresponding cash advance amount in
            // TrvAccountingDistribution table.
            //
            AccountingDistribution accDist;
            trvAccountingDistribution trvAccDist;
            AmountMST cashAdvanceAmountMST = trvAccountingDistribution.AdvanceAmountMST;

            while select RecId from accDist
                where accDist.ParentDistribution == accountingDistribution.RecId
                join AdvanceAmountMST from trvAccDist
                where accDist.RecId == trvAccDist.AccountingDistribution
            {
                cashAdvanceAmountMST += trvAccDist.AdvanceAmountMST;
            }

            // Insert mapping record. 
            ret = TrvExpCashAdvanceMappingHelper::insertExpCashAdvanceMapping(expenseLine.RecId, _cashAdvanceRecId, cashAdvanceAmountMST);
            if (!ret)
            {
                str logMessage = strFmt("Failed to insert mapping record: Expense Line = %1, Cash Advance = %2, Amount %3", expenseLine.RecId, _cashAdvanceRecId, cashAdvanceAmountMST);
                TrvInstrumentationHelper::logExpenseOperationsError(logMessage, classStr(TrvExpCashAdvanceMappingHelper));
            }
        }
                   
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMappingForExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method inserts mapping records for the expense lines within specified expense
    ///     report based on unposted expenses which are using cash advances before the mapping
    ///     feature was enabled. This method takes the expense report as input. The mapping
    ///     records are added based on the records in TrvAccountDistribution table.
    /// </summary>
    /// <param name="_expenseReportRecId">
    ///     The expense report record Id.
    /// </param>
    /// <returns>
    ///     True if operation succeeds, otherwise false.
    /// </returns>
    public static boolean populateMappingForExpenseReport(RefRecId _expenseReportRecId)
    {
        TrvAccountingDistribution trvAccountingDistribution;
        AccountingDistribution accountingDistribution;
        TrvExpTrans expenseLine;

        // If mapping feature is not enabled, this function is no-op.
        if (!TrvExpCashAdvanceMappingHelper::isCashAdvanceMappingFeatureEnabled())
        {
            return true;
        }

        // Sanity check on input.
        TrvExpTable expenseReport = TrvExpTable::findRecId(_expenseReportRecId);
        if (_expenseReportRecId == 0 || expenseReport.RecId == 0)
        {
            str logMessage = strFmt("PopulateMappingForExpenseReport: Method called with incorrect expense report %1", _expenseReportRecId);
            TrvInstrumentationHelper::logExpenseOperationsError(logMessage, classStr(TrvExpCashAdvanceMappingHelper));
            return false;
        }
        
        //
        // Existing unposted expenses that have consumed cash advance before the feature is
        // enabled have records in TrvAccountingDistribution table. This is how expense report
        // is connected to cash advance through TrvAccountingDistribution records:
        //     TrvExpTable of expense line = RecId of expense report (input)
        //     SourceDocumentLine in AccountingDistribution = SourceDocumentLine of expense line
        //     AccountingDistribution in TrvAccountingDistribution = RecId of AccountingDistribution
        //
        // Using the above relations, the following query is to get Cash Advance Rec Id
        // from the TrvAccountingDistribution for the given Expense Report RecId. There will
        // be more than one cash advance entries as a result of this query, because expense
        // report may have multiple expense lines consuming lines or one expense line might
        // be consuming more than one cash advances. Also, note that the expense lines with
        // cash advance return category also have records in TrvAccountingDistribution and
        // hence should be covered by the below query.
        //
        while select CashAdvanceRecId from expenseLine
            where expenseLine.TrvExpTable == _expenseReportRecId
            join SourceDocumentLine from accountingDistribution
            where expenseLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
            join CashAdvance from trvAccountingDistribution
            where trvAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
        {
            // Populate mapping records for each of these cash advances.
            TrvExpCashAdvanceMappingHelper::populateMappingForCashAdvance(trvAccountingDistribution.CashAdvance);
        }
                   
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoMapToCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Maps expense line to available cash advance based on available amounts in cash advance.
    /// </summary>
    /// <param name = "_expenseLine">An expense line record.</param>
    /// <returns>true, if mapping happens; otherwise, false.</returns>
    private static boolean autoMapToCashAdvance(TrvExpTrans _expenseLine)
    {
        str logMessage = strFmt("autoMapToCashAdvance: Expense Line = %1", _expenseLine.RecId);
        TrvInstrumentationHelper::logExpenseOperationsInformation(logMessage, classStr(TrvExpCashAdvanceMappingHelper));
       
        TrvCashAdvance trvCashAdvance;
        boolean ret = false;

        while select RecId, BalanceMST, CashAdvanceNumber, PaidAmountMST from trvCashAdvance
            order by trvCashAdvance.BalanceMST desc
            where trvCashAdvance.RequestingWorker == _expenseLine.CreatingWorker
            && trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid
            && trvCashAdvance.BalanceMST > 0
        {
            // Create mapping only if amount is available to allocate, otherwise move to next available cash advance.
            if (trvCashAdvance.amountMSTAvailableToAllocate() <= 0)
            {
                continue;
            }

            AmountMST amountToMap = _expenseLine.AmountMST - _expenseLine.mappedExpeneseAmountMST();

            if (amountToMap <= 0)
            {
                break;
            }
            
            if (trvCashAdvance.amountMSTAvailableToAllocate() >= amountToMap
                && amountToMap > 0)
            {
                ret = TrvExpCashAdvanceMappingHelper::addMappingForSpecificCashAdvance(_expenseLine, trvCashAdvance.CashAdvanceNumber, amountToMap);
            }
            else
            {
                ret = TrvExpCashAdvanceMappingHelper::addMappingForSpecificCashAdvance(_expenseLine, trvCashAdvance.CashAdvanceNumber, trvCashAdvance.amountMSTAvailableToAllocate());
            }

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCashAdvance</Name>
				<Source><![CDATA[
    public static TrvCashAdvance lookupCashAdvance(FormReferenceControl _formReferenceControl, TrvExpTrans _trvExpTrans)
    {
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tablenum(TrvCashAdvance), _formReferenceControl);
        
        // Add cash advance number and updated available cash advance balance to the lookup.
        lookup.addLookupfield(fieldNum(TrvCashAdvance, CashAdvanceNumber));
        lookup.addLookupMethod(tableMethodStr(TrvCashAdvance,amountMSTAvailableToAllocate));
        lookup.setLabel(strFmt("@Expense:CashAdvanceBalanceMST", CompanyInfoHelper::standardCurrency()));
        
        // Build query for the lookup.
        Query                   query = new Query();
        QueryBuildDataSource    qbdsTrvCashAdvance;
        QueryBuildDataSource    qdbsTrvExpCashAdvMapping;

        qbdsTrvCashAdvance = query.addDataSource(tableNum(TrvCashAdvance));
        qbdsTrvCashAdvance.addSortField(fieldnum(TrvCashAdvance, RequestedDate));

        TrvHcmWorkerRecId workerRecId = _trvExpTrans.CreatingWorker;
        if (!workerRecId)
        {
            TrvExpTable trvExpTable;

            select firstonly CreatingWorker from trvExpTable
                where trvExpTable.RecId == _trvExpTrans.TrvExpTable;

            workerRecId = trvExpTable.CreatingWorker;
        }

        // Filter all the approved and paid cash advances with balance > 0 for the current worker. 
        qbdsTrvCashAdvance.addRange(fieldnum(TrvCashAdvance, RequestingWorker)).value(SysQuery::value(workerRecId));
        qbdsTrvCashAdvance.addRange(fieldnum(TrvCashAdvance, CashAdvanceStatus)).value(SysQuery::value(TrvWorkflowCashAdvanceStatus::Paid));
        qbdsTrvCashAdvance.addRange(fieldnum(TrvCashAdvance, Balance)).value('> 0');

        lookup.parmQuery(query);
        return lookup.performFormLookup() as TrvCashAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noPendingExpenseForCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if there is any expense which is not posted and can consume a cash advance.
    /// </summary>
    /// <returns>
    /// True, if there is an expense which is not posted 
    /// and can consume a cash advance; otherwise false.
    /// </returns>
    public static boolean noPendingExpenseForCashAdvance()
    {
        boolean ret = true;

        if (!TrvExpenseHelper::isTrvApplyCashAdvanceMappingFlightEnabled())
        {
            TrvAccountingDistribution trvAccountingDistribution;
            select firstonly RecId from trvAccountingDistribution
                where trvAccountingDistribution.CashAdvance != 0;

            if (trvAccountingDistribution.RecId)
            {
                ret = false;
            }
        }

        TrvExpTrans trvExpTrans;
        select firstonly RecId from trvExpTrans
                where trvExpTrans.CostOwner == TrvCostOwner::Employee
                &&    (trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger
                &&    trvExpTrans.ApprovalStatus != TrvAppStatus::Create);

        if (trvExpTrans.RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrvAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> based on expense and cash advance mapping.
    /// </summary>
    /// <param name = "_refRecId">Record identifier for expense line or expense report.</param>
    /// <param name = "_tableId">Table identifier for <c>TrvExpTrans</c> or <c>TrvExpTable</c>.</param>
    [Hookable(false)]
    public static void createTrvAccountingDistribution(RefRecId _refRecId, RefTableId _tableId)
    {
        TrvExpTable trvExpTable;

        if (_tableId == tableNum(TrvExpTable))
        {
            TrvExpCashAdvanceMappingHelper::createTrvAccountingDistributionFromExpHeader(_refRecId);
            trvExpTable = TrvExpTable::findRecId(_refRecId);
        }
        else if (_tableId == tableNum(TrvExpTrans))
        {
            TrvExpTrans trvExpTrans = TrvExpTrans::find(_refRecId);
            trvExpTable = TrvExpTable::findRecId(trvExpTrans.TrvExpTable);
            TrvExpCashAdvanceMappingHelper::createTrvAccountingDistributionFromExpLine(trvExpTrans);
        }

        TrvSubmitExpenseReportToWorkflow::updateAccountingDistributions(trvExpTable);
        TrvSubmitExpenseReportToWorkflow::updateAccountingDistributionsAllocFactor(trvExpTable);
        TrvSubmitExpenseReportToWorkflow::updateProjAccountingDistributions(trvExpTable);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrvAccountingDistributionFromExpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> based on Expense line record and Cash Advance mapping.
    /// </summary>
    /// <param name = "_trvExpTableRecId">Expense report record identifier.</param>
    private static void createTrvAccountingDistributionFromExpHeader(RefRecId _trvExpTableRecId)
    {
        TrvExpTrans trvExpTrans;

        while select trvExpTrans where trvExpTrans.TrvExpTable == _trvExpTableRecId
        {
            TrvExpCashAdvanceMappingHelper::createTrvAccountingDistributionFromExpLine(trvExpTrans);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrvAccountingDistributionFromExpLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> based on Expense and Cash Advance mapping.
    /// </summary>
    /// <param name = "_trvExpTrans">Expense record.</param>
    private static void createTrvAccountingDistributionFromExpLine(TrvExpTrans _trvExpTrans)
    {
        // Iterate through the mapping
        TrvExpCashAdvanceMapping trvCashAdvanceMapping;
        AccountingDistribution accountingDistribution;
        TrvCashAdvance trvCashAdvance;

        ttsbegin;
        while select trvCashAdvanceMapping where trvCashAdvanceMapping.ExpLineRecId == _trvExpTrans.RecId
                                           && trvCashAdvanceMapping.AmountMST > 0
        {
            TrvExpCashMappingDistribution::createTrvAccountingDistribution(trvCashAdvanceMapping);
        }

        // If there is a case where expense line is a ReturnCash line and mapping is being deleted, 
        // create TrvAccountingDistribution record based on cash advance record from expense line.
        if (_trvExpTrans.isReturnAdvanceWithoutMapping())
        {
            TrvAccountingDistribution trvAccountingDistribution;
            while select RecId, TransactionCurrencyAmount, SourceDocumentHeader, SourceDocumentLine, TransactionCurrency 
                from accountingDistribution where accountingDistribution.SourceDocumentLine == _trvExpTrans.SourceDocumentLine
               
            {
                trvCashAdvance = TrvCashAdvance::findRecId(_trvExpTrans.CashAdvanceRecId);

                trvAccountingDistribution.AccountingDistribution = accountingDistribution.RecId;
                trvAccountingDistribution.AdvanceAmountMST = ((accountingDistribution.TransactionCurrencyAmount / _trvExpTrans.AmountCurr) * _trvExpTrans.AmountMST);
                trvAccountingDistribution.AdvanceAmount = accountingDistribution.TransactionCurrencyAmount;
                trvAccountingDistribution.AdvanceCurrencyCode = trvCashAdvance.CurrencyCode;
                trvAccountingDistribution.CashAdvance = trvCashAdvance.RecId;
                trvAccountingDistribution.FullySplit = NoYes::Yes;
                trvAccountingDistribution.EqualToDistribution = NoYes::Yes;
                trvAccountingDistribution.insert();
            }

        }

        ttscommit;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>