<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EpQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[SysObsolete('The EP functionality is deprecated and should not be used.', true, 07\01\2016)]
class EpQuery
{
    Query   query;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    Query parmQuery(Query _query = query)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerSelfServiceRecord</Name>
				<Source><![CDATA[
    static boolean checkCustomerSelfServiceRecord(Common rec)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorSelfServiceRecord</Name>
				<Source><![CDATA[
    static boolean checkVendorSelfServiceRecord(Common rec)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVSSItem</Name>
				<Source><![CDATA[
    static boolean checkVSSItem(ItemId _itemId)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static EPQuery construct(Query _query)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerSelfServiceQueryFieldId</Name>
				<Source><![CDATA[
    static fieldId customerSelfServiceQueryFieldId(tableId _tableId)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeMyBusinessRelationSelfServiceQuery</Name>
				<Source><![CDATA[
    static Query makeMyBusinessRelationSelfServiceQuery(Query _query, tableId _tableId)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeMyCustomerSelfServiceQuery</Name>
				<Source><![CDATA[
static Query makeMyCustomerSelfServiceQuery(Query _query, tableId _tableId)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeMyVendorSelfServiceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Filters the query to the selected vendor account that is set on the EP vendor chooser control.
    /// </summary>
    /// <param name="_query">
    ///    The query object to modify.
    /// </param>
    /// <param name="_tableId">
    ///    The ID of the table to which to add the filter.
    /// </param>
    /// <returns>
    ///    A query that is filtered with the vendor account that is selected on the EP vendor chooser control.
    /// </returns>
    public static Query makeMyVendorSelfServiceQuery(Query _query, tableId _tableId)
    {
        QueryBuildDataSource    qBds;
        str                     queryValueStr;
        QueryBuildRange         range;
        QueryBuildRange         dataAreaRange;
        VendAccount             vendAccount;

        // get selected account from vendor account chooser control in EP
        vendAccount = VendAccountManager::getSelectedAccount();

        if (vendAccount)
        {
            queryValueStr = vendAccount;
        }
        else
        {
            queryValueStr = SysQuery::valueEmptyString();
        }

        if (_tableId == tableNum(VendUserRequest))
        {
            qBds  = _query.dataSourceTable(tableNum(UserRequest));
        }
        else
        {
            qBds  = _query.dataSourceTable(_tableId);
        }

        if (EPQuery::vendorSelfServiceQueryFieldId(_tableId))
        {
            range = qBds.addRange(EPQuery::vendorSelfServiceQueryFieldId(_tableId));
            if (_tableId == tableNum(InventTransOrigin) || _tableId == tableNum(CatVendorCatalog))
            {
                queryValueStr = queryValue(VendTable::find(queryValueStr).Party);
            }
            else if (_tableId == tableNum(VendUserRequest))
            {
                dataAreaRange = SysQuery::findOrCreateRange(qBds, fieldNum(VendUserRequest, VendorDataAreaId));
                dataAreaRange.status(RangeStatus::Hidden);
                dataAreaRange.value(queryValue(curext()));
            }

            range.value(queryValueStr);
            range.status(RangeStatus::Hidden);
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRecIdQuery</Name>
				<Source><![CDATA[
    static Query makeRecIdQuery(Query       _query,
                                tableId     _tableId,
                                recId       _recId = 0)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorSelfServiceQueryFieldId</Name>
				<Source><![CDATA[
    static fieldId vendorSelfServiceQueryFieldId(tableId _tableId)
    {
        fieldId fieldId;

        switch (_tableId)
        {
            case tableNum(VendTable)                                : fieldId = fieldNum(VendTable,AccountNum); break;
            case tableNum(InventTable)                              : fieldId = fieldNum(InventTable,PrimaryVendorId); break;
            case tableNum(VendPackingSlipJour)                      : fieldId = fieldNum(VendPackingSlipJour,OrderAccount); break;
            case tableNum(VendPurchOrderJour)                       : fieldId = fieldNum(VendPurchOrderJour,OrderAccount); break;
            case tableNum(VendInvoiceJour)                          : fieldId = fieldNum(VendInvoiceJour,OrderAccount); break;
            case tableNum(InventTransOrigin)                        : fieldId = fieldNum(InventTransOrigin,Party); break;
            case tableNum(PurchTable)                               : fieldId = fieldNum(PurchTable,OrderAccount); break;
            case tableNum(PurchRFQTable)                            : fieldId = fieldNum(PurchRFQTable,VendAccount); break;
            case tableNum(VendRequest)                              : fieldId = fieldNum(VendRequest, AccountNum); break;
            case tableNum(VendRequestCategoryExtension)             : fieldId = fieldNum(VendRequestCategoryExtension, AccountNum); break;
            case tableNum(VendUserRequest)                          : fieldId = fieldNum(VendUserRequest, VendorAccountNumber); break;
            case tableNum(VendBankAccount)                          : fieldId = fieldNum(VendBankAccount,AccountNum); break;
            case tableNum(VendPostedUnionUnpostedInvoice)           : fieldId = fieldNum(VendPostedUnionUnpostedInvoice, InvoiceAccount); break;
            case tableNum(VendInvoiceInfoTable)                     : fieldId = fieldNum(VendInvoiceInfoTable, InvoiceAccount); break;
            case tableNum(VendInvoiceInfoLine)                      : fieldId = fieldNum(VendInvoiceInfoLine, InvoiceAccount); break;
            case tableNum(CatVendorCatalog)                         : fieldId = fieldNum(CatVendorCatalog,VendorParty); break;
            case tableNum(PurchTableAllVersions)                    : fieldId = fieldNum(PurchTableAllVersions,OrderAccount); break;
        }

        return fieldId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>