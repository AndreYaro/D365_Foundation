<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostSchedulerBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates a batch job to monitor the ready to post tables for new records.
/// Spins off new batch jobs with tasks to post these records.
/// </summary>
class DemoDataPostSchedulerBatchJob extends RunBaseBatch implements BatchRetryable
{
    boolean readyForBatchRun = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether execution can run in new session or not.
    /// </summary>
    /// <returns>
    /// True if the the task can run in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel the batch run from prompt if the class is not ready; else execute in batch.
    /// </summary>
    protected void doBatch()
    {
        if (readyForBatchRun)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a batch prompt and allow the user to submit a post monitor batch job.
    /// </summary>
    /// <param name = "_args">The arguments.</param>
    public static void main(Args _args)
    {
        DemoDataPostSchedulerBatchJob schedulerBatchJob = new DemoDataPostSchedulerBatchJob();

        schedulerBatchJob.batchInfo().parmBatchExecute(NoYes::Yes);

        // Default batch to ongoing recurrence.
        SysRecurrenceData sysRecurrenceData = SysRecurrence::defaultRecurrence();
        SysRecurrence::setRecurrenceNoEnd(sysRecurrenceData);
        SysRecurrence::setRecurrenceUnit(sysRecurrenceData, SysRecurrenceUnit::Minute, DemoDataPostConstants::DefaultBatchMonitorRecurrencePeriod);
        schedulerBatchJob.batchInfo().parmBatchHeader().parmRecurrenceData(sysRecurrenceData);

        if (schedulerBatchJob.showBatchPrompt())
        {
            schedulerBatchJob.saveLast();

            // initialize captions
            str taskCaption = "@DemoDataPost:ProcessDocumentDefaultBatchCaption";

            // Override default caption if user entered a caption
            str userInputCaption = strLRTrim(schedulerBatchJob.batchInfo().parmCaption());
            str jobCaption = userInputCaption? userInputCaption : taskCaption;

            schedulerBatchJob.batchInfo().parmCaption(taskCaption);
            schedulerBatchJob.batchInfo().parmBatchHeader().parmCaption(jobCaption);

            // Indicate ready status for batch run
            schedulerBatchJob.parmReadyForBatch(NoYes::Yes);

            // Schedule batch
            schedulerBatchJob.doBatch();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadyForBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set a flag indicating whether the process is ready for batch.
    /// </summary>
    /// <param name = "_readyForBatchRun">Flag whether the process is ready for batch.</param>
    /// <returns>True if the process is ready for batch; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmReadyForBatch(boolean _readyForBatchRun = readyForBatchRun)
    {
        readyForBatchRun = _readyForBatchRun;
        return readyForBatchRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the batch processor.
    /// </summary>
    public void run()
    {
        DemoDataPostSchedulerBatchJob schedulerBatch = new DemoDataPostSchedulerBatchJob();

        schedulerBatch.batchInfo().parmBatchExecute(NoYes::Yes);

        DemoDataPostScheduler readyToPostScheduler = new DemoDataPostScheduler();
        readyToPostScheduler.monitorDemoDataPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBatchPrompt</Name>
				<Source><![CDATA[
    private boolean showBatchPrompt()
    {
        boolean promptReturnVal = this.prompt();
        boolean batchExecute = this.batchInfo().parmBatchExecute();

        boolean isDialogCanceled = !promptReturnVal && !batchExecute;

        if (isDialogCanceled)
        {
            return false;
        }

        boolean isRunInBatch = !promptReturnVal && batchExecute;
        return isRunInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDemoDataRecurringSchedulerBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the demo data default recurring batch job that monitors for documents to post.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createDemoDataRecurringSchedulerBatchJob()
    {
        DemoDataPostSchedulerBatchJob schedulerBatchJob = new DemoDataPostSchedulerBatchJob();

        SysRecurrence sysRecurrence = new SysRecurrence();

        // Build the batch header object.
        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.parmCaption("@DemoDataPost:ProcessDocumentDefaultBatchCaption");
        batchHeader.addTask(schedulerBatchJob);

        // Set recurrence data.
        SysRecurrenceData sysRecurrenceData = SysRecurrence::defaultRecurrence();
        SysRecurrence::setRecurrenceNoEnd(sysRecurrenceData);
        SysRecurrence::setRecurrenceUnit(sysRecurrenceData, SysRecurrenceUnit::Minute, DemoDataPostConstants::DefaultBatchMonitorRecurrencePeriod);
        batchHeader.parmRecurrenceData(sysRecurrenceData);

        batchHeader.save();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>