<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleReassignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleReassignment</c> class supports reassigning existing kanbans from one rule to another.
/// </summary>
public class LeanRuleReassignment
{
    Kanban          kanban;
    KanbanRule      kanbanRule;
    Common          peggingRequirement;

    Set             setReassignedKanbanRecIds;
    SetEnumerator   seReassignedKanbanRecIds;
    KanbanRefRecId  currentReassignedKanbanRecId;

    boolean         runResult;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyCTP</Name>
				<Source><![CDATA[
    private void applyCTP()
    {
        // If this is a sales line event kanban with CTP settings
        if (kanbanRule.ruleData().parmKanbanRuleEvent().SalesLineEvent == KanbanSalesLineEventType::AutomaticWithCTP)
        {
            if (peggingRequirement is SalesLine)
            {
                // Then execute CTP on it to recalculate sales delivery dates
                SalesLine salesLine = peggingRequirement as SalesLine;
                salesLine = SalesLine::findRecId(salesLine.RecId,true);
                if (salesLine.type().setConfirmedDates(SalesConfirmDatesCommandStrategy::newParameters(SalesDeliveryDateControlType::CTP)))
                {
                    salesLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanByProcessingEvents</Name>
				<Source><![CDATA[
    private boolean createKanbanByProcessingEvents()
    {
        // process the events in the parent requirement constrained to the new rule to create the new kanban(s)
        ReqEventProcessKanban reqEventProcessKanban = ReqEventProcessKanban::newStandard(peggingRequirement, true);
        reqEventProcessKanban.parmLimitToPKanbanRuleRefRecId(kanbanRule.RecId);
        reqEventProcessKanban.runOperation();

        this.applyCTP();

        // retrieve the newly created kanbans
        boolean result = this.updateSetReassignedKanbanRecIdsFromMap(reqEventProcessKanban.mapInsertedKanban());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanInNewRule</Name>
				<Source><![CDATA[
    private boolean createKanbanInNewRule()
    {
        boolean     result;

        // If the replenishment strategy of the kanban is Event,
        if (kanban.kanbanRule().ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
        {
            result = this.createKanbanByProcessingEvents();
        }
        else
        {
            // creates the kanban in the new rule (LeanRulesEngine.triggerRuleKanbanId),
            List list = LeanRulesEngine::triggerRuleParameters(
                                                 kanbanRule,
                                                 kanban.ItemId,
                                                 kanban.InventDimId,
                                                 KanbanCreate::makeListQuantities(1,kanban.QuantityOrdered),
                                                 kanban.DueDateTime,
                                                 kanban.Manual,
                                                 kanban.Express,
                                                 kanban.bomId);

            // retrieve the newly created kanbans
            result = this.updateSetReassignedKanbanRecIdsFromList(list);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentReassignedKanbanRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current result.
    /// </summary>
    /// <returns>
    /// The ID of a record in the <c>Kanban</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRefRecId currentReassignedKanbanRecId()
    {
        return currentReassignedKanbanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteKanbanFromOldRule</Name>
				<Source><![CDATA[
    private boolean deleteKanbanFromOldRule()
    {
        boolean                     kanbanDeleted = false;

        // If the replenishment strategy of the kanban is Event,
        if (kanban.kanbanRule().ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
        {
            // determine the parent requirement that needs this kanban as supply and store it
            ReqPeggingTreeNodeKanban peggingTreeNode = ReqPeggingTreeNodeKanban::newStandard(kanban);
            peggingRequirement = peggingTreeNode.parent();
        }

        // Cancels the kanban (kanban jobs may be planned)
        if (ReqEventProcessKanban::cancelKanban(kanban,false,true))
        {
            // deletes the kanban and all its jobs (and removes the card)
            kanban = Kanban::find(kanban.RecId,true);
            kanban.delete();
            kanbanDeleted = true;
        }

        return kanbanDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the result enumerator to the first result.
    /// </summary>
    /// <returns>
    ///    true if at least one result exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean first()
    {
        if (!setReassignedKanbanRecIds)
        {
            this.run();
        }

        seReassignedKanbanRecIds     = setReassignedKanbanRecIds.getEnumerator();
        boolean result               = seReassignedKanbanRecIds.moveNext();
        currentReassignedKanbanRecId = result ? any2int64(seReassignedKanbanRecIds.current()) : 0;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables of the class.
    /// </summary>
    private void init()
    {
        setReassignedKanbanRecIds    = new Set(Types::Int64);
        seReassignedKanbanRecIds     = null;
        currentReassignedKanbanRecId = 0;
        runResult                    = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the result enumerator to the next result.
    /// </summary>
    /// <returns>
    /// true if there is a next result; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean next()
    {
        boolean result;

        if (!seReassignedKanbanRecIds)
        {
            result = this.first();
        }
        else
        {
            result                       = seReassignedKanbanRecIds.moveNext();
            currentReassignedKanbanRecId = result ? any2int64(seReassignedKanbanRecIds.current()) : 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedSetReassignedKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reassigned kanbans as a packed set.
    /// </summary>
    /// <returns>
    /// A packed set of new kanban record IDs; otherwise, an empty set.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container packedSetReassignedKanbans()
    {
        if (!setReassignedKanbanRecIds)
        {
            this.run();
        }

        return setReassignedKanbanRecIds.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reassigns an existing kanban from one rule to another.
    /// </summary>
    /// <returns>
    ///    true if the rule reassignment was executed successfully; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean run()
    {
        #OCCRetryCount

        this.init();

        try
        {
            if (   LeanRuleReassignment::validateKanbanToReassign(kanban)
                && LeanRuleReassignment::validateRuleToReassign(kanban, kanbanRule))
            {
                ttsbegin;
                if (this.deleteKanbanFromOldRule())
                {
                    runResult = this.createKanbanInNewRule();
                }
                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return runResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSetReassignedKanbanRecIdsFromList</Name>
				<Source><![CDATA[
    private boolean updateSetReassignedKanbanRecIdsFromList(List _list)
    {
        boolean         result;

        if (   _list
            && _list.elements())
        {
            ListEnumerator le = _list.getEnumerator();
            while (le.moveNext())
            {
                Kanban reassignedKanban = le.current();
                if (reassignedKanban.RecId)
                {
                    setReassignedKanbanRecIds.add(reassignedKanban.RecId);
                    result = true;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSetReassignedKanbanRecIdsFromMap</Name>
				<Source><![CDATA[
    private boolean updateSetReassignedKanbanRecIdsFromMap(Map _mapInsertedKanban)
    {
        boolean         result;

        if (   _mapInsertedKanban
            && _mapInsertedKanban.elements())
        {
            MapEnumerator me = _mapInsertedKanban.getEnumerator();
            while (me.moveNext())
            {
                Set setKanban = me.currentValue();
                if (setKanban)
                {
                    SetEnumerator se = setKanban.getEnumerator();
                    while (se.moveNext())
                    {
                        KanbanRefRecId reassignedKanbanRecId = se.current();
                        if (reassignedKanbanRecId)
                        {
                            setReassignedKanbanRecIds.add(reassignedKanbanRecId);
                            result = true;
                        }
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canKanbanBeReassigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban can be reassigned to a different rule.
    /// </summary>
    /// <param name="_kanban">
    ///    The initial <c>Kanban</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the kanban can be reassigned; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canKanbanBeReassigned(Kanban _kanban)
    {
        return    _kanban
               && _kanban.Status == LeanKanbanStatus::NotAssigned
               && (   _kanban.Manual == NoYes::Yes
                   || _kanban.kanbanRule().ReplenishmentStrategy != LeanReplenishmentStrategy::Fixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRuleBeReassigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether it can reassign kanbans from a specific rule to another.
    /// </summary>
    /// <param name="_kanbanRuleOld">
    ///    The initial <c>KanbanRule</c> record buffer.
    /// </param>
    /// <param name="_kanbanRuleNew">
    ///    The target <c>KanbanRule</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the reassignment is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canRuleBeReassigned(KanbanRule _kanbanRuleOld, KanbanRule _kanbanRuleNew)
    {
        boolean                 canRuleBeReassigned = false;

        // Both rules must have the same replenishment strategy and the target rule can be triggered
        if (   _kanbanRuleOld
            && _kanbanRuleNew
            && _kanbanRuleOld.RecId                 != _kanbanRuleNew.RecId
            && _kanbanRuleOld.ReplenishmentStrategy == _kanbanRuleNew.ReplenishmentStrategy
            && _kanbanRuleNew.status().canTrigger())
        {
            // Same product relation
            LeanCoverage leanCoverageOldRule = _kanbanRuleOld.ruleData().parmLeanCoverage();
            LeanCoverage leanCoverageNewRule = _kanbanRuleNew.ruleData().parmLeanCoverage();
            if (leanCoverageOldRule.hasSameProductRelationAs(leanCoverageNewRule))
            {
                // Same production flow and version (last activity)
                recId rulePlan = _kanbanRuleOld.plan().RecId;
                if (rulePlan == _kanbanRuleNew.plan().RecId)
                {
                    // If the last activity of the kanban rule has one or multiple downstream activities
                    // in the production flow
                    // o    The alternative rule must have the same downstream activities for the last activity
                    // Else (the last activity of the kanban flow has no downstream activities in the production flow)
                    // o    Same coverage dimensions (Site, Warehouse…)
                    PlanActivity lastKanbanFlowActivityOldRule = _kanbanRuleOld.kanbanFlow().lastPlanActivity();
                    PlanActivity lastKanbanFlowActivityNewRule = _kanbanRuleNew.kanbanFlow().lastPlanActivity();
                    Set          downstreamActivitiesOldRule   = lastKanbanFlowActivityOldRule.downstreamPlanActivities(rulePlan);
                    Set          downstreamActivitiesNewRule   = lastKanbanFlowActivityNewRule.downstreamPlanActivities(rulePlan);

                    int numDifferentActivities = Set::difference(downstreamActivitiesOldRule, downstreamActivitiesNewRule).elements();
                    if (numDifferentActivities == 0)
                    {
                        int numDownstreamActivities = downstreamActivitiesOldRule.elements();
                        if (numDownstreamActivities == 0)
                        {
                            InventDim           inventDim1          = InventDim::find(leanCoverageOldRule.InventDimId,false);
                            InventDim           inventDim2          = InventDim::find(leanCoverageNewRule.InventDimId,false);
                            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(leanCoverageOldRule.ItemId);

                            if (InventDim::isInventDimEqualCovDim(inventDimGroupSetup, inventDim1, inventDim2))
                            {
                                canRuleBeReassigned = true;
                            }
                        }
                        else
                        {
                            canRuleBeReassigned = true;
                        }
                    }
                }
            }
        }

        // Special case: event rules must match in the events they cover
        if (   canRuleBeReassigned
            && _kanbanRuleNew.ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
        {
            KanbanRuleEvent kanbanRuleEventOld = _kanbanRuleOld.ruleData().parmKanbanRuleEvent();
            KanbanRuleEvent kanbanRuleEventNew = _kanbanRuleNew.ruleData().parmKanbanRuleEvent();
            canRuleBeReassigned                = kanbanRuleEventNew.coversAtLeastSameEventsAs(kanbanRuleEventOld);
        }

        return canRuleBeReassigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanRuleReassignment construct()
    {
        return new LeanRuleReassignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanban">
    /// A buffer of the <c>Kanban</c> table.
    /// </param>
    /// <param name="_kanbanRule">
    /// A buffer of the <c>KanbanRule</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>LeanRuleReassignment</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleReassignment newStandard(
        Kanban     _kanban,
        KanbanRule _kanbanRule)
    {
        LeanRuleReassignment leanRuleReassignment = LeanRuleReassignment::construct();

        leanRuleReassignment.parmKanban(_kanban);
        leanRuleReassignment.parmKanbanRule(_kanbanRule);

        return leanRuleReassignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanToReassign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether it can reassign a specific kanban to another rule.
    /// </summary>
    /// <param name="_kanban">
    ///    The initial <c>Kanban</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the kanban can be reassigned; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean validateKanbanToReassign(Kanban _kanban)
    {
        boolean ok = LeanRuleReassignment::canKanbanBeReassigned(_kanban);

        if (!ok)
        {
            if (_kanban.Status != LeanKanbanStatus::NotAssigned)
            {
                error(strFmt("@SYS331943", _kanban.KanbanId, enum2str(_kanban.Status)));
            }
            else
            {
                error(strFmt("@SYS333099", _kanban.KanbanId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRuleToReassign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether it can reassign kanbans from a specific rule to another; otherwise, an Infolog
    ///    message.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> record that belongs to the current rule.
    /// </param>
    /// <param name="_kanbanRuleNew">
    ///    The target <c>KanbanRule</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the reassignment is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean validateRuleToReassign(Kanban _kanban, KanbanRule _kanbanRuleNew)
    {
        boolean ok = LeanRuleReassignment::canRuleBeReassigned(_kanban.kanbanRule(), _kanbanRuleNew);

        if (!ok)
        {
            InventDim inventDim = _kanban.inventDim();
            error(strFmt(
                        "@FPK270030",
                        _kanbanRuleNew.RuleId,
                        _kanban.kanbanRule().RuleId,
                        _kanban.ItemId,
                        inventDim? inventDim.preFix(InventDim::dimProductDimFieldList()) : ""));
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>