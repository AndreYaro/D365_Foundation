<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationValidateWorkbench</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationValidateWorkbench</c> class contains the validation logic for shipment consolidation.
/// </summary>
internal class WHSShipConsolidationValidateWorkbench extends WHSShipConsolidationValidateBase
{
    private RecordSortedList                     validationErrors;
    private WHSShipConsolidationProposedShipment shipConsolidationProposedShipment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipments</Name>
				<Source><![CDATA[
    protected boolean validateShipments()
    {
        validationErrors = null;

        boolean ok = super();

        WHSShipmentTable shipmentTable;
        WHSLoadTable     loadTable;

        if (loadTableBase && loadTableBase.LoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed)
        {
            this.addValidationError(NoYes::Yes, '', literalStr("@WAX:Error_CannotConsolidateShipmentBecausePartialLoadShippingIsAllowed"), baseShipment.ShipmentId);
        }

        while select ShipmentId
            from tmpShipment
        exists join shipmentTable
            where shipmentTable.ShipmentId == tmpShipment.ShipmentId
        exists join loadTable
            where loadTable.LoadId          == shipmentTable.LoadId
            &&    loadTable.LoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed
        {
            this.addValidationError(NoYes::Yes, tmpShipment.ShipmentId, literalStr("@WAX:Error_CannotConsolidateShipmentBecausePartialLoadShippingIsAllowed"), tmpShipment.ShipmentId);
        }

        if (shipConsolidationValidationMode != WHSShipConsolidationValidationMode::GenerateValidationResult)
        {
            this.updateValidationErrors();

            if (shipConsolidationValidationMode == WHSShipConsolidationValidationMode::Default)
            {
                WHSShipConsolidationError                   shipConsolidationError;
                WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;

                select firstonly TableId
                    from shipConsolidationError
                    where shipConsolidationError.ProposedShipment == shipConsolidationProposedShipment.RecId
                    &&   !shipConsolidationError.ErrorOverride;
            
                if (shipConsolidationError)
                {
                    ok = checkFailed(strFmt("@WAX:Error_ProposedShipmentHasNotOverriddenErrorsAndCanNotBeCreated", shipConsolidationProposedShipment.ShipmentId));
                }

                while select TotalVolume, TotalWeight
                    from shipConsolidationProposedShipmentContent
                    where shipConsolidationProposedShipmentContent.ProposedShipment == shipConsolidationProposedShipment.RecId
                join shipmentTable
                    where shipmentTable.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId
                {
                    if (shipConsolidationProposedShipmentContent.TotalVolume != shipmentTable.displayTotalVolume())
                    {
                        ok = checkFailed(strFmt("@WAX:Error_TotalVolumeWasChangedByAnotherUserForTheShipment", shipConsolidationProposedShipmentContent.TotalVolume, shipmentTable.displayTotalVolume(), shipmentTable.ShipmentId));
                    }

                    if (shipConsolidationProposedShipmentContent.TotalWeight != shipmentTable.displayTotalWeight())
                    {
                        ok = checkFailed(strFmt("@WAX:Error_TotalWeightWasChangedByAnotherUserForTheShipment", shipConsolidationProposedShipmentContent.TotalWeight, shipmentTable.displayTotalWeight(), shipmentTable.ShipmentId));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipConsolidationProposedShipment</Name>
				<Source><![CDATA[
    private WHSShipConsolidationProposedShipment parmShipConsolidationProposedShipment(WHSShipConsolidationProposedShipment _shipConsolidationProposedShipment = shipConsolidationProposedShipment)
    {
        shipConsolidationProposedShipment = _shipConsolidationProposedShipment;

        return shipConsolidationProposedShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSShipConsolidationValidateWorkbench construct()
    {
        return new WHSShipConsolidationValidateWorkbench();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createValidationErrorList</Name>
				<Source><![CDATA[
    private RecordSortedList createValidationErrorList()
    {
        RecordSortedList ret = new RecordSortedList(tableNum(WHSShipConsolidationError));

        ret.sortOrder(fieldNum(WHSShipConsolidationError, LabelId),
                      fieldNum(WHSShipConsolidationError, ProposedShipment),
                      fieldNum(WHSShipConsolidationError, ProposedShipmentContent),
                      fieldNum(WHSShipConsolidationError, ErrorParm1),
                      fieldNum(WHSShipConsolidationError, ErrorParm2),
                      fieldNum(WHSShipConsolidationError, ErrorParm3),
                      fieldNum(WHSShipConsolidationError, ErrorParm4));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationError</Name>
				<Source><![CDATA[
    protected boolean addValidationError(
        NoYes           _errorHardStop,
        WHSShipmentId   _shipmentId,
        LabelId         _labelId,
        str             _errorParm1 = '',
        str             _errorParm2 = '',
        str             _errorParm3 = '',
        str             _errorParm4 = '')
    {
        if (!validationErrors)
        {
            validationErrors = this.createValidationErrorList();
        }

        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;

        if (_shipmentId)
        {
            select firstonly shipConsolidationProposedShipmentContent
                where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationProposedShipment.ShipConsolidationSession
                &&    shipConsolidationProposedShipmentContent.ShipmentId               == _shipmentId;

            if (!shipConsolidationProposedShipmentContent)
            {
                throw error("@SYS6144");
            }
        }

        WHSShipConsolidationError shipConsolidationError;

        shipConsolidationError.initValue();
        shipConsolidationError.LabelId                  = _labelId;
        shipConsolidationError.ErrorParm1               = _errorParm1;
        shipConsolidationError.ErrorParm2               = _errorParm2;
        shipConsolidationError.ErrorParm3               = _errorParm3;
        shipConsolidationError.ErrorParm4               = _errorParm4;
        shipConsolidationError.ErrorHardStop            = _errorHardStop;
        shipConsolidationError.ProposedShipmentContent  = shipConsolidationProposedShipmentContent.RecId;
        shipConsolidationError.ProposedShipment         = shipConsolidationProposedShipment.RecId;
        shipConsolidationError.ShipConsolidationSession = shipConsolidationProposedShipment.ShipConsolidationSession;

        validationErrors.ins(shipConsolidationError);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValidationErrors</Name>
				<Source><![CDATA[
    private void updateValidationErrors()
    {
        WHSShipConsolidationError shipConsolidationError;

        ttsbegin;

        if (validationErrors)
        {
            RecordSortedList          oldValidationErrors;

            while select forupdate shipConsolidationError
                where shipConsolidationError.ProposedShipment == shipConsolidationProposedShipment.RecId
            {
                if (validationErrors.find(shipConsolidationError.data()))
                {
                    if (!oldValidationErrors)
                    {
                        oldValidationErrors = this.createValidationErrorList();
                    }
                
                    oldValidationErrors.ins(shipConsolidationError);
                    validationErrors.ins(shipConsolidationError, true); // to update all columns like ErrorOverride
                }
                else
                {
                    shipConsolidationError.delete();
                }
            }

            if (oldValidationErrors)
            {
                boolean moreRecs = validationErrors.first(shipConsolidationError);
                RecordSortedList newValidationErrors;

                while (moreRecs)
                {
                    if (!oldValidationErrors.find(shipConsolidationError.data()))
                    {
                        if (!newValidationErrors)
                        {
                            newValidationErrors = this.createValidationErrorList();
                        }

                        newValidationErrors.ins(shipConsolidationError);
                    }

                    moreRecs = validationErrors.next(shipConsolidationError);
                }

                if (newValidationErrors)
                {
                    newValidationErrors.insertDatabase();
                }
            }
            else // oldValidationErrors == null
            {
                validationErrors.insertDatabase();
            }
        }
        else // validationErrors == null
        {
            delete_from shipConsolidationError
                where shipConsolidationError.ProposedShipment == shipConsolidationProposedShipment.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistingValidationErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record sorted list with existing validation errors.
    /// </summary>
    /// <returns>Record sorted list with existing validation errors.</returns>
    private RecordSortedList parmExistingValidationErrors()
    {
        if (!shipConsolidationProposedShipment.RecId)
        {
            return null;
        }

        RecordSortedList          oldValidationErrors = this.createValidationErrorList();
        WHSShipConsolidationError shipConsolidationError;

        while select shipConsolidationError
            where shipConsolidationError.ProposedShipment == shipConsolidationProposedShipment.RecId
        {
            oldValidationErrors.ins(shipConsolidationError);
        }

        return oldValidationErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposedShipmentContentHardStopErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a mapping between proposed shipment content records and hard stop errors.
    /// </summary>
    /// <returns>The set object with ids of proposed shipment content records which have a hard stop error.</returns>
    internal Map proposedShipmentContentHardStopErrors()
    {
        WHSShipConsolidationError shipConsolidationError;
        Map                       ret = new Map(extendedTypeId2Type(extendedTypeNum(RecId)), Types::Class);
        boolean                   moreRecs = validationErrors ? validationErrors.first(shipConsolidationError) : false;
        List                      errors;

        while (moreRecs)
        {
            if (shipConsolidationError.ErrorHardStop)
            {
                if (ret.exists(shipConsolidationError.ProposedShipmentContent))
                {
                    errors = ret.lookup(shipConsolidationError.ProposedShipmentContent);
                }
                else
                {
                    errors = new List(Types::Record);

                    ret.insert(shipConsolidationError.ProposedShipmentContent, errors);
                }

                errors.addEnd(shipConsolidationError);
            }
                                
            moreRecs = validationErrors.next(shipConsolidationError);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkbench</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>WHSShipConsolidationValidateWorkbench</c> class with given parameters.
    /// </summary>
    /// <param name="_shipConsolidationProposedShipment">
    /// Base shipment record to set to instance.
    /// </param>
    /// <param name="_shipConsolidationValidationMode">
    /// The value of the <c>WHSShipConsolidationValidationMode</c> enumeration.
    /// </param>
    /// <returns>
    /// The created instance.
    /// </returns>
    internal static WHSShipConsolidationValidateWorkbench newWorkbench(WHSShipConsolidationProposedShipment _shipConsolidationProposedShipment, WHSShipConsolidationValidationMode _shipConsolidationValidationMode)
    {
        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
        container                                   shipmentIds;

        while select ShipmentId
            from shipConsolidationProposedShipmentContent 
            where shipConsolidationProposedShipmentContent.ProposedShipment == _shipConsolidationProposedShipment.RecId
            &&    shipConsolidationProposedShipmentContent.ShipmentId       != _shipConsolidationProposedShipment.ShipmentId
        {
            shipmentIds += shipConsolidationProposedShipmentContent.ShipmentId;
        }

        WHSShipConsolidationValidateWorkbench whsConsolidateShipments = WHSShipConsolidationValidateWorkbench::construct();

        whsConsolidateShipments.parmBaseShipment(WHSShipmentTable::find(_shipConsolidationProposedShipment.ShipmentId));
        whsConsolidateShipments.parmShipments(shipmentIds);
        whsConsolidateShipments.parmShipConsolidationProposedShipment(_shipConsolidationProposedShipment);
        whsConsolidateShipments.parmShipConsolidationValidationMode(_shipConsolidationValidationMode);

        return whsConsolidateShipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkbenchMove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>WHSShipConsolidationValidateWorkbench</c> class with the given parameters.
    /// </summary>
    /// <param name="_shipConsolidationProposedShipment">
    /// Base shipment record to set to instance.
    /// </param>
    /// <param name="_shipConsolidationValidationMode">
    /// The value of the <c>WHSShipConsolidationValidationMode</c> enumeration.
    /// </param>
    /// <param name="_proposedShipmentContentIds">
    /// The shipments being moved to the proposed shipment.
    /// </param>
    /// <returns>
    /// The created instance.
    /// </returns>
    internal static WHSShipConsolidationValidateWorkbench newWorkbenchMove(WHSShipConsolidationProposedShipment _shipConsolidationProposedShipment, WHSShipConsolidationValidationMode _shipConsolidationValidationMode, Set _proposedShipmentContentIds)
    {
        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
        container                                   shipmentIds;

        if (_proposedShipmentContentIds && !_proposedShipmentContentIds.empty())
        {
            SetEnumerator setEnumerator = _proposedShipmentContentIds.getEnumerator();

            while (setEnumerator.moveNext())
            {
                shipConsolidationProposedShipmentContent = WHSShipConsolidationProposedShipmentContent::find(setEnumerator.current());

                if (shipConsolidationProposedShipmentContent.ShipmentId != _shipConsolidationProposedShipment.ShipmentId)
                {
                    shipmentIds += shipConsolidationProposedShipmentContent.ShipmentId;
                }
            }
        }

        while select ShipmentId
            from shipConsolidationProposedShipmentContent
            where shipConsolidationProposedShipmentContent.ProposedShipment == _shipConsolidationProposedShipment.RecId
            &&    shipConsolidationProposedShipmentContent.ShipmentId       != _shipConsolidationProposedShipment.ShipmentId
        {
            if (!conFind(shipmentIds, shipConsolidationProposedShipmentContent.ShipmentId))
            {
                shipmentIds += shipConsolidationProposedShipmentContent.ShipmentId;
            }
        }

        WHSShipConsolidationValidateWorkbench whsConsolidateShipments = WHSShipConsolidationValidateWorkbench::construct();

        whsConsolidateShipments.parmBaseShipment(WHSShipmentTable::find(_shipConsolidationProposedShipment.ShipmentId));
        whsConsolidateShipments.parmShipments(shipmentIds);
        whsConsolidateShipments.parmShipConsolidationProposedShipment(_shipConsolidationProposedShipment);
        whsConsolidateShipments.parmShipConsolidationValidationMode(_shipConsolidationValidationMode);

        return whsConsolidateShipments;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>