<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineType_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineType_Packing</c> class is used to validate the packing slip lines.
/// </summary>
public class VendDocumentLineType_PackingSlip extends VendDocumentLineType
{
    PurchParmLine purchParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks purchase parm line quantity.
    /// </summary>
    /// <returns>
    /// true if receive now or previous receive now are not 0; otherwise, false.
    /// </returns>
    protected boolean checkLineQty()
    {
        boolean isValid;

        isValid =    purchParmLine.ReceiveNow != 0
                  || purchParmLine.PreviousReceiveNow != 0;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>ReceiveNow</c> or <c>InventNow</c> field.
    /// </summary>
    /// <param name="_previousReceiveNow">
    /// The value of <c>ReceiveNow</c> or <c>InventNow</c> field for the previous version.
    /// </param>
    /// <param name="_receiveNow">
    /// The value of the <c>ReceiveNow</c> or <c>InventNow</c> field to be validated.
    /// </param>
    /// <param name="_orderedQty">
    /// The ordered quantity in purchasing or inventory unit of measure.
    /// </param>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkReceiveNow(Qty _previousReceiveNow, Qty _receiveNow, Qty _orderedQty)
    {
        boolean isValid = true;

        if (_receiveNow * _orderedQty < 0)
        {
            isValid = AifFault::checkFailedLogFault("@SYS323005");
        }

        if (_previousReceiveNow > 0
            && _receiveNow > _previousReceiveNow)
        {
            isValid = AifFault::checkFailedLogFault("@SYS318109");
        }

        if (_previousReceiveNow < 0
            && _receiveNow < _previousReceiveNow)
        {
            isValid = AifFault::checkFailedLogFault("@SYS323401");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRemainAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfter</c> or <c>RemainAfterInvent</c> field.
    /// </summary>
    /// <param name="_remainAfter">
    /// The value of <c>RemainAfter</c> or <c>RemainAfterInvent</c> field to be validated.
    /// </param>
    /// <param name="_receiveNow">
    /// The value of the <c>ReceiveNow</c> or <c>InventNow</c> field..
    /// </param>
    /// <param name="_orderedQty">
    /// The ordered quantity in purchasing or inventory unit of measure.
    /// </param>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkRemainAfter(Qty _remainAfter, Qty _receiveNow, Qty _orderedQty)
    {
        boolean isValid = true;

        if (_remainAfter * _orderedQty < 0)
        {
            isValid = AifFault::checkFailedLogFault("@SYS323402");
        }

        if (!_receiveNow && !_remainAfter)
        {
            isValid = AifFault::checkFailedLogFault("@SYS323403");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for fields related to derived document types.
    /// </summary>
    protected void defaultAdditionalFields()
    {
        InventBatch         inventBatch = InventBatch::find(InventDim::find(purchParmLine.InventDimId).inventBatchId, purchParmLine.ItemId);
        boolean             isShelf = InventTable::find(purchParmLine.ItemId).isShelfLifeItem();

        super();

        if (inventBatch.RecId && isShelf)
        {
            purchParmLine.PdsCountryOfOrigin1 = inventBatch.PdsCountryOfOrigin1;
            purchParmLine.PdsCountryOfOrigin2 = inventBatch.PdsCountryOfOrigin2;
            purchParmLine.PdsVendBatchDate = inventBatch.PdsVendBatchDate;
            purchParmLine.PdsUseVendBatchDate = inventBatch.PdsUseVendBatchDate;
            purchParmLine.PdsVendExpiryDate = inventBatch.PdsVendExpiryDate;
            purchParmLine.PdsUseVendBatchExp = inventBatch.PdsUseVendBatchExp;
            purchParmLine.PdsVendBatchId = inventBatch.PdsVendBatchId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the inventory quantity fields.
    /// </summary>
    /// <param name="_inventNow">
    /// The value for the <c>InventNow</c> field.
    /// </param>
    /// <remarks>
    /// It applies the variance from previous version.
    /// </remarks>
    protected void defaultInventQtys(InventQty _inventNow = naReal())
    {
        boolean isSet = purchParmLine.isFieldSet(fieldnum(PurchParmLine, RemainAfterInvent));

        super(_inventNow);

        if (!isSet && vendDocumentLineMap.InventNow)
        {
            vendDocumentLineMap.RemainAfterInvent = vendDocumentLineMap.RemainAfterInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchPrice</Name>
				<Source><![CDATA[
    protected void defaultPurchPrice()
    {
        if ((isRUCountryRegionEnabled || !VendDocumentLineTypeDefaultPurchasePriceFlight::instance().isEnabled())
            && this.purchLine().SalesPurchLine::isEGAIS_RU())
        {
            purchParmLine.PurchPrice = EGAISWaybillLine_RU::findByPurchLine(this.purchLine()).Price;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the purchase quantity fields.
    /// </summary>
    /// <param name="_receiveNow">
    /// The value for the <c>ReceiveNow</c> field.
    /// </param>
    /// <remarks>
    /// It applies the variance from previous version.
    /// </remarks>
    protected void defaultPurchQtys(PurchQty _receiveNow = naReal())
    {
        boolean isSet = purchParmLine.isFieldSet(fieldnum(VendDocumentLineMap, RemainAfter));

        super(_receiveNow);

        if (!isSet && purchParmLine.ReceiveNow)
        {
            purchParmLine.RemainAfter = purchParmLine.RemainAfter;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>InventNow</c> field.
    /// </summary>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    protected boolean validateInventNow()
    {
        boolean isValid;

        isValid = super();

        if (!this.checkReceiveNow(purchParmLine.PreviousInventNow, purchParmLine.InventNow, this.purchLine().QtyOrdered))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>ReceiveNow</c> field.
    /// </summary>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    protected boolean validateReceiveNow()
    {
        boolean isValid;

        isValid = super();

        if (!this.checkReceiveNow(purchParmLine.PreviousReceiveNow, purchParmLine.ReceiveNow, this.purchLine().PurchQty))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfter</c> field.
    /// </summary>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    protected boolean validateRemainAfter()
    {
        boolean isValid;

        isValid = super();

        if (!this.checkRemainAfter(purchParmLine.RemainAfter, purchParmLine.ReceiveNow, this.purchLine().PurchQty))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfterInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfterInvent</c> field.
    /// </summary>
    /// <returns>
    /// true is the value is correct; otherwise, false.
    /// </returns>
    protected boolean validateRemainAfterInvent()
    {
        boolean isValid;

        isValid = super();

        if (!this.checkRemainAfter(vendDocumentLineMap.RemainAfterInvent, vendDocumentLineMap.InventNow, this.purchLine().QtyOrdered))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the field values for a row of a table that are mapped to the
    /// <c>VendDocumentLineMap</c> map.
    /// </summary>
    /// <returns>
    /// true if the field values are mapped correctly; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        boolean isValid;

        isValid = super();

        if (purchParmLine.ReceiveNow * purchParmLine.LineAmount < 0)
        {
            AifFault::checkFailedLogFault("@SYS78848", #QtyAndNetAmountHaveOppositeSigns);
            return false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineMap</Name>
				<Source><![CDATA[
        public VendDocumentLineMap vendDocumentLineMap(VendDocumentLineMap _vendDocumentLineMap = vendDocumentLineMap)
    {
        if (!prmisDefault(_vendDocumentLineMap))
        {
            purchParmLine = _vendDocumentLineMap;
        }

        return super(_vendDocumentLineMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>