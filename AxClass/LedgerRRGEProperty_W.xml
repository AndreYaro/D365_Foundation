<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEProperty_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEProperty_W</c> is the base class for reports requisites.
/// </summary>
public class LedgerRRGEProperty_W
{
    LedgerRRGESectionProperties_W   property;
    List                            cellList;
    str                             cellStr;
    LedgerRRGESectionId_W           dynamicSectionId;
    LedgerRRGESectionId_W           parentSectionId;
    LedgerRRGEProperty_W            parent;
    RecId                           propertyVersionRecId;
    List                            children;
    Map                             childrenMap;
    int                             propertyNumber;
    boolean                         isContent;
    boolean                         isPropertyNumber;
    UnknownNoYes                    isXML;
    str                             path;
    UnknownNoYes                    isOptionalSection;
    LedgerRRGEProperty_W            firstChild;
    UnknownNoYes                    isOptionalChildValid;

    private const str               Semicolon	        = ';';
    private const str               PathDelemiter	    = '\\';
    private const str               Exclamation	        = '!';
    private const str               Dash	            = '-';
    private const str               Space	            = ' ';
    private const str               Quotas	            = '\'"';
    private const str               PathConst	        = 'Path';
    private const str               PropertyIdConst	    = 'PropertyId';
    private const str               IndexConst	        = 'Index';
    private const str               RestConst	        = 'Rest';
    private const str               Last	            = 'last';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W add(LedgerRRGEProperty_W _property, boolean _forceSection = false, boolean _forceAdd = false)
    {
        LedgerRRGESectionProperties_W sectionProperty = _property.property();
        LedgerRRGETemplateSections_W    parentSection;
        container                       mapKey;

        if (_forceSection && sectionProperty.SectionRefRecId != property.SectionRefRecId)
        {
            parentSection = sectionProperty.section();
            if (parentSection)
            {
                return this.addSection(parentSection, true).add(_property);
            }
        }

        setPrefix(strFmt("@LedgerRRG:LedgerRRG_UpdateRequisiteValue", sectionProperty.PropertyId, sectionProperty.Description));

        mapKey = this.mapKey(_property);

        if (childrenMap)
        {
            if (!_forceAdd && childrenMap.exists(mapKey))
            {
                return childrenMap.lookup(mapKey);
            }
        }
        else
        {
            children = new List(Types::Class);
            childrenMap = new Map(Types::Container, Types::Class);
        }

        if (!sectionProperty.Dynamic && this.isContent())
        {
            this.incPropertyNumber();
        }

        _property.parent(this);
        children.addEnd(_property);
        childrenMap.insert(mapKey, _property);

        sectionProperty.LineNum = children.elements();
        isOptionalChildValid    = UnknownNoYes::Unknown;

        return _property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCellStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addCellStr(str _cell)
    {
        LedgerRRGEPropertyCells_W   propertyCell;
        container                   cellsCon;
        LineNum                     lineNum;
        int                         i;

        if (!cellList)
        {
            cellList = new List(Types::Record);
        }

        if (_cell)
        {
            cellsCon = str2con_RU(_cell, Semicolon);
            lineNum = cellList.elements();

            for (i = 1; i <= conLen(cellsCon); i++)
            {
                lineNum++;
                propertyCell.ExcelCell  = conPeek(cellsCon, i);
                propertyCell.LineNum    = lineNum;

                if (cellStr)
                {
                    cellStr += Semicolon;
                }

                cellStr += propertyCell.ExcelCell;

                cellList.addEnd(propertyCell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W addSection(LedgerRRGETemplateSections_W _section, boolean _forceSection = false, boolean _forceAdd = false)
    {
        LedgerRRGETemplateSections_W parentSection;

        if (_forceSection && _section.ParentRecId != property.SectionRefRecId)
        {
            parentSection = _section.parent();
            if (parentSection)
            {
                return this.addSection(parentSection, true, _forceAdd).addSection(_section, false, _forceAdd);
            }
        }

        return this.add(LedgerRRGEProperty_W::makeDynamicProperty(_section.SectionId, _section.LedgerRRGETemplates_W, _section.RecId, _section.LineNum), false, _forceAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List cellList()
    {
        return cellList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str cellStr(str _cellStr = cellStr)
    {
        if (!prmisDefault(_cellStr))
        {
            cellList    = null;
            cellStr     = '';
            this.addCellStr(_cellStr);
        }

        return cellStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>children</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List children()
    {
        return children;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W copy()
    {
        LedgerRRGEProperty_W newProperty = LedgerRRGEProperty_W::construct();

        newProperty.property(property);
        newProperty.dynamicSectionId(dynamicSectionId);

        if ((!newProperty.cellList() || !newProperty.cellList().elements()) && cellStr)
        {
            newProperty.cellStr(cellStr);
        }

        return newProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicSectionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionId_W dynamicSectionId(LedgerRRGESectionId_W  _dynamicSectionId = dynamicSectionId)
    {
        dynamicSectionId = _dynamicSectionId;
        return dynamicSectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicTableLayout</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETableLayouts_W dynamicTableLayout()
    {
        LedgerRRGETableLayouts_W dyncmicTableLayout;
       

        select firstonly dyncmicTableLayout
            where dyncmicTableLayout.SectionRefRecId == property.SectionRefRecId &&
                  dyncmicTableLayout.Dynamic;

        return dyncmicTableLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excelSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEExcelSheet_W excelSheet(LedgerRRGEExcelSheet_W _excelSheet = property.ExcelSheet)
    {
        property.ExcelSheet = _excelSheet;
        return property.ExcelSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyRequisiteWithCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W findAnyRequisiteWithCells(LedgerRRGEProperty_W _requisite = this)
    {
        ListEnumerator          le;
        LedgerRRGEProperty_W    res;

        if (!_requisite)
        {
            return null;
        }

        if (_requisite.cellList())
        {
            return _requisite;
        }

        if (!_requisite.children())
        {
            return null;
        }

        le = _requisite.children().getEnumerator();
        while (le.moveNext() && !res)
        {
            res = this.findAnyRequisiteWithCells(le.current());
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W findMatchSection(LedgerRRGEProperty_W _section)
    {
        ListEnumerator          le;
        LedgerRRGEProperty_W    child;
        LedgerRRGEProperty_W    res;
       
        if (_section.property().Dynamic)
        {
            if (property.SectionRefRecId == _section.property().SectionRefRecId ||
                property.SectionRefRecId == _section.property().section().ParentRecId)
            {
                return this;
            }

            if (children)
            {
                le = children.getEnumerator();
                while (le.moveNext())
                {
                    child   = le.current();
                    res     = child.findMatchSection(_section);
                    if (res)
                    {
                        return res;
                    }
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List findProperties(LedgerRRGEPropertyId_W _path, LedgerRRGEPropertyId_W _propertyId, List _propertyList = new List(Types::Class))
    {
        LedgerRRGEProperty_W    child;
        ListEnumerator          le;

        if (_propertyId)
        {
            if (_path && subStr(_path, 1, 1) == PathDelemiter && !parent)
            {
                child = this.findPropertyByPath(subStr(_path, 2, maxInt()) + (strEndsWith(_path, PathDelemiter) ? '' : PathDelemiter) + _propertyId);
                if (child)
                {
                    _propertyList.addEnd(child);
                }
                return _propertyList;
            }

            if (!property.Dynamic && this.matchPropertyId(_propertyId, _path))
            {
                _propertyList.addEnd(this);
            }

            if (children)
            {
                le = children.getEnumerator();
                while (le.moveNext())
                {
                    child = le.current();
                    if (child)
                    {
                        _propertyList = child.findProperties(_path, _propertyId, _propertyList);
                    }
                }
            }
        }

        return _propertyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W findProperty(LedgerRRGEPropertyId_W _propertyId)
    {
        LedgerRRGEProperty_W    child;
        LedgerRRGEProperty_W    res;
        ListEnumerator          le;

        if (_propertyId)
        {
            if (property.PropertyId == _propertyId)
            {
                res = this;
            }
            else
            {
                if (children)
                {
                    le = children.getEnumerator();
                    while (!res && le.moveNext())
                    {
                        child = le.current();
                        if (child)
                        {
                            res = child.findProperty(_propertyId);
                        }
                    }
                }
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyByPath</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W findPropertyByPath(str _path)
    {
        LedgerRRGEProperty_W    child;
        ListEnumerator          le;
        str                     subPath;
        int                     pos;
        LedgerRRGEProperty_W    res;
        str                     propertyId;

        if (_path)
        {
            if (subStr(_path, 1, 1) == PathDelemiter)
            {
                _path = strDel(_path, 1, 1);
            }

            pos = strScan(_path, PathDelemiter, 1, maxInt());
            if (pos && subStr(_path, 1, pos - 1) == property.SectionId)
            {
                subPath = subStr(_path, pos + 1, maxInt());
                if (!strScan(subPath, PathDelemiter, 1, maxInt()))
                {
                    propertyId = subPath;
                }

                le = children.getEnumerator();
                while (le.moveNext() && !res)
                {
                    child = le.current();
                    if (child)
                    {
                        if (propertyId)
                        {
                            if (child.matchPropertyId(propertyId))
                            {
                                res = child;
                            }
                        }
                        else if (child.property().Dynamic)
                        {
                            res = child.findPropertyByPath(subPath);
                        }
                    }
                }
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcelValue</Name>
				<Source><![CDATA[
    private LedgerRRGEPropertyValue_W getExcelValue(ComExcelDocument_RU _excelDocument)
    {
        LedgerRRGEPropertyCells_W   propertyCells;
        LedgerRRGEPropertyValue_W   res;
        LedgerRRGEPropertyValue_W   value;
        LedgerRRGEProperties_W      fixedRequisite;
        ListEnumerator              le;
        boolean                     isValueEmpty = true;

        if (_excelDocument && _excelDocument.isDocumentValid() && cellList)
        {
            fixedRequisite = property.property();

            le = cellList.getEnumerator();
            while (le.moveNext())
            {
                propertyCells = le.current();

                setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", property.ExcelSheet + Exclamation + propertyCells.ExcelCell));
                value = _excelDocument.getValueStr(property.ExcelSheet, propertyCells.ExcelCell);

                if (value)
                {
                    if (fixedRequisite.EmptyChar)
                    {
                        switch (fixedRequisite.Alignment)
                        {
                            case SysAlignment::AlignLeft:
                                value = this.rTrim(value, fixedRequisite.EmptyChar);
                                break;

                            case SysAlignment::AlignRight:
                                value = this.lTrim(value, fixedRequisite.EmptyChar);
                                break;

                            default:
                                value = this.lrTrim(value, fixedRequisite.EmptyChar);
                        }
                    }
                    else
                    {
                        value = this.rTrim(value, Dash);
                    }
                }

                if (property.DataType == LedgerRRGEPropertyDataType_W::Conditional && value)
                {
                    value = propertyCells.ConditionalValue;
                }

                if (value)
                {
                    isValueEmpty = false;
                }

                res += ComExcelDocument_RU::removeExtremeQuotas(propertyCells.Prefix) + value + ComExcelDocument_RU::removeExtremeQuotas(propertyCells.Postfix);
            }
        }

        if (isValueEmpty)
        {
            return '';
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyValue_W getExpressionValue(str _expression)
    {
        return property.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incPropertyNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void incPropertyNumber()
    {
       
        propertyNumber++;

        if (parent)
        {
            parent.incPropertyNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChildsFromTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the list of children from template section settings.
    /// </summary>
    /// <param name="_treeDeep">
    ///    A Boolean value that indicates whether subsections should be initialized as well; optional.
    /// </param>
    /// <param name="_forceInit">
    ///    A Boolean value that indicates whether children should be reinitialized; optional.
    /// </param>
    /// <returns>
    ///    True, if the object has children.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean initChildsFromTemplate(boolean _treeDeep = false, boolean _forceInit = false)
    {
        LedgerRRGETemplateSections_W    section;
        LedgerRRGESectionProperties_W   sectionProperty;
        LedgerRRGEProperty_W            child;

        if (this.isSection() && (!children || _forceInit))
        {
            while select LedgerRRGETemplates_W, SectionId, RecId from section
                where section.ParentRecId == property.SectionRefRecId
            {
                child = this.add(LedgerRRGEProperty_W::makeDynamicProperty(section.SectionId, section.LedgerRRGETemplates_W, section.RecId));
                if (_treeDeep)
                {
                    child.initChildsFromTemplate(true, _forceInit);
                }
            }

            while select sectionProperty
                where sectionProperty.SectionRefRecId == property.SectionRefRecId
            {
                this.add(LedgerRRGEProperty_W::newFromProperty(sectionProperty));
            }
        }

        return children && children.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromProperty()
    {
        ListEnumerator                  le;
        LedgerRRGEPropertyCells_W       propertyCell;
        LedgerRRGETemplateSections_W    section = property.section();

        dynamicSectionId = property.SectionId;
        parentSectionId  = section.ParentId;
        isContent        = section.Content;
        isPropertyNumber =  property.PropertyType    == LedgerRRGESectionPropertyType_W::Const &&
                            property.property().Type == LedgerRRGEPropertyType_W::PropertyNumber;

        if (section.Optional)
        {
            isOptionalSection = UnknownNoYes::Yes;
        }

        if (property.RecId && property.isCellProperty())
        {
            cellList = LedgerRRGEPropertyCells_W::propertyCellsList(property);
            if (cellList)
            {
                le = cellList.getEnumerator();
                while (le.moveNext())
                {
                    propertyCell = le.current();
                    if (cellStr)
                    {
                        cellStr += Semicolon;
                    }

                    cellStr += propertyCell.ExcelCell;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPropertyVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromPropertyVersion(LedgerRRGEPropertyVersions_W _propertyVersion)
    {
        this.property(_propertyVersion.property());
        property.SectionId      = _propertyVersion.SectionId;
        property.PropertyId     = _propertyVersion.PropertyId;
        property.PropertyType   = _propertyVersion.PropertyType;
        property.Value          = _propertyVersion.Value;
        property.LineNum        = _propertyVersion.LineNum;
        property.Description    = _propertyVersion.Description;
        property.Dynamic        = _propertyVersion.Dynamic;
        property.ExcelSheet     = _propertyVersion.ExcelSheet;
        dynamicSectionId        = _propertyVersion.DynamicSectionId;
        parentSectionId         = _propertyVersion.ParentSectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParentFromTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parent from template section settings.
    /// </summary>
    /// <param name="_forceInit">
    ///    A Boolean value that indicates whether teh parent should be reinitialized; optional.
    /// </param>
    /// <returns>
    ///    True, if the parent was initialized.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean initParentFromTemplate(boolean _forceInit = false)
    {
        LedgerRRGETemplateSections_W parentSection;

        if (!parent || _forceInit)
        {
            parentSection = this.templateSecton();
            if (this.isSection())
            {
                parentSection = parentSection.parent();
            }

            if (parentSection)
            {
                parent = LedgerRRGEProperty_W::makeDynamicProperty(parentSection.SectionId, parentSection.LedgerRRGETemplates_W, parentSection.RecId);
                parent.initParentFromTemplate(_forceInit);
            }
        }

        return parent != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int insert(LedgerRRGEDocumentVersions_W _documentVersion)
    {
        LedgerRRGEProperty_W            child;
        ListEnumerator                  le;
        int                             insertCount;
        LedgerRRGEPropertyVersions_W    propertyVersion = this.propertyVersion();

        if (this.valid())
        {
            ttsbegin;

            propertyVersion.initFromDocumentVersion(_documentVersion);

            if (parent)
            {
                propertyVersion.ParentRefRecId = parent.propertyVersionRecId();
            }

            propertyVersion.insert();

            propertyVersionRecId = propertyVersion.RecId;

            this.insertCells(propertyVersion);

            if (children)
            {
                le = children.getEnumerator();
                while (le.moveNext())
                {
                    child = le.current();
                    if (child)
                    {
                        insertCount += child.insert(_documentVersion);
                    }
                }
            }
            else
            {
                insertCount++;
            }

            ttscommit;
        }

        return insertCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertCells(Common _record)
    {
        ListEnumerator              le;
        LedgerRRGEPropertyCells_W   propertyCell;
        RecordInsertList            recordInsertList;

        if (cellList)
        {
            ttsbegin;
            recordInsertList = new RecordInsertList(tableNum(LedgerRRGEPropertyCells_W));

            le = cellList.getEnumerator();
            while (le.moveNext())
            {
                propertyCell                    = le.current();
                propertyCell.RefTableId         = _record.TableId;
                propertyCell.PropertyRefRecId   = _record.RecId;

                recordInsertList.add(propertyCell);
            }

            recordInsertList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPropertyVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertPropertyVersion(LedgerRRGEDocumentVersions_W _documentVersion)
    {
        LedgerRRGEPropertyVersions_W propertyVersion = this.propertyVersion();

        ttsbegin;

        propertyVersion.initFromDocumentVersion(_documentVersion);

        if (parent)
        {
            propertyVersion.ParentRefRecId = parent.propertyVersionRecId();
        }

        propertyVersion.insert();

        propertyVersionRecId = propertyVersion.RecId;

        this.insertCells(propertyVersion);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPropery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertPropery()
    {
        ttsbegin;
        property.insert();
        this.insertCells(property);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isContent()
    {
        if (isContent)
        {
            return true;
        }

        if (parent)
        {
            return parent.isContent();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the value is equal to the default value of the property.
    /// </summary>
    /// <returns>
    /// true if the value is equal to the default value of the property; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isDefaultValue()
    {
        return strLRTrim(property.Value) == strLRTrim(property.DefaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptionalChildValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether not equal to default value exists at least for one child.
    /// </summary>
    /// <param name="_processParents">
    /// Specifies if the method should check parents; optional.
    /// </param>
    /// <returns>
    /// true if any not equal default value exists at least for one child; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isOptionalChildValid(boolean _processParents = true)
    {
        boolean checkChildren()
        {
            ListEnumerator                  le;
            LedgerRRGEProperty_W            child;
            LedgerRRGESectionProperties_W   childProperty;

            if (children)
            {
                le = children.getEnumerator();
                while (le.moveNext())
                {
                    child           = le.current();
                    childProperty   = child.property();

                    if (childProperty.PropertyId)
                    {
                        if (childProperty.Dynamic)
                        {
                            if (child.isOptionalChildValid(false))
                            {
                                return true;
                            }
                        }
                        else
                        {
                            if (!child.isDefaultValue())
                            {
                                return true;
                            }
                        }
                    }
                }
            }

            return false;
        }

        if (!isOptionalChildValid)
        {
            if (checkChildren())
            {
                isOptionalChildValid = UnknownNoYes::Yes;
            }
            else
            {
                if (_processParents && parent && parent.isOptionalSection())
                {
                    isOptionalChildValid = parent.isOptionalChildValid() ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
                else
                {
                    isOptionalChildValid = UnknownNoYes::No;
                }
            }
        }

        return isOptionalChildValid == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptionalSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the report section is optional.
    /// </summary>
    /// <returns>
    /// true if there are if the opional parent section exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isOptionalSection()
    {
        boolean isParentOptional;

        if (!isOptionalSection)
        {
            isParentOptional    = parent ? parent.isOptionalSection() : false;
            isOptionalSection   = isParentOptional ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isOptionalSection == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the object is template section or not.
    /// </summary>
    /// <returns>
    ///    True, if the object is template section. Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSection()
    {
        return property.Dynamic && property.SectionId == property.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isXML</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isXML()
    {
        boolean isParentXML;

        if (!isXML)
        {
            isParentXML = parent ? parent.isXML() : property.isXML();
            isXML       = isParentXML ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isXML == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LineNum lineNum(LineNum _lineNum = property.LineNum)
    {
        property.LineNum = _lineNum;
        return property.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lrTrim</Name>
				<Source><![CDATA[
    private str lrTrim(str _value, str _char)
    {
        return this.rTrim(this.lTrim(_value, _char), _char);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lTrim</Name>
				<Source><![CDATA[
    private str lTrim(str _value, str _char)
    {
        int delLen;

        if (_value && subStr(_value, 1, 1) == _char)
        {
            delLen = strNFind(_value, _char, 1, strLen(_value));
            if (delLen)
            {
                return strDel(_value, 1, delLen - 1);
            }

            return '';
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKey</Name>
				<Source><![CDATA[
    private container mapKey(LedgerRRGEProperty_W _property)
    {
        LedgerRRGESectionProperties_W sectionProperty = _property.property();

        return [_property.dynamicSectionId(), sectionProperty.PropertyId, sectionProperty.Dynamic, sectionProperty.SectionRefRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchPropertyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean matchPropertyId(LedgerRRGEPropertyId_W _propertyId, str _path = '')
    {
        if (_path && parent)
        {
            if (!strEndsWith(parent.path(), _path))
            {
                return false;
            }
        }

        return _propertyId == property.attributeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerRRGEProperty_W parent(LedgerRRGEProperty_W _parent = parent)
    {
        parent = _parent;
        return parent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentSectionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionId_W parentSectionId(LedgerRRGESectionId_W _parentSectionId = parentSectionId)
    {
        parentSectionId = _parentSectionId;

        return parentSectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>path</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str path()
    {
        if (!path)
        {
            if (parent)
            {
                path = parent.path() + property.attributeName() + PathDelemiter;
            }
            else
            {
                path = PathDelemiter + property.attributeName() + PathDelemiter;
            }
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>property</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionProperties_W property(LedgerRRGESectionProperties_W _property = property)
    {
        if (!prmisDefault(_property))
        {
            property.data(_property);
            this.initFromProperty();
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyExists</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean propertyExists(LedgerRRGEProperty_W _property)
    {
        if (childrenMap)
        {
            return childrenMap.exists(this.mapKey(_property));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int propertyNumber()
    {
        if (parent)
        {
            return parent.propertyNumber();
        }

        return propertyNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyVersions_W propertyVersion()
    {
        LedgerRRGEPropertyVersions_W propertyVersion;

        propertyVersion                     = property.propertyVersion();
        propertyVersion.DynamicSectionId    = dynamicSectionId;
        propertyVersion.ParentSectionId     = parentSectionId;

        return propertyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyVersionRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId propertyVersionRecId()
    {
        return propertyVersionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOptionalChildValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the OptionalChildValid property to Unknown for objects and all its ancestry.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void resetOptionalChildValid()
    {
        if (parent)
        {
            parent.resetOptionalChildValid();
        }

        isOptionalChildValid = UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTrim</Name>
				<Source><![CDATA[
    private str rTrim(str _value, str _char)
    {
        int delLen;
        int valueLen = strLen(_value);

        if (valueLen && subStr(_value, valueLen, 1) == _char)
        {
            delLen = strNFind(_value, _char, valueLen, -valueLen);
            if (delLen)
            {
                return strDel(_value, delLen + 1, valueLen);
            }

            return '';
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateSecton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the associated template section.
    /// </summary>
    /// <param name="_forUpdate">
    ///    True if the record should be selected for update; otherwise, false; optional.
    /// </param>
    /// <returns>
    ///    An <c>LedgerRRGETemplateSections_W</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplateSections_W templateSecton(boolean _forUpdate = false)
    {
        return LedgerRRGETemplateSections_W::findRecId(property.SectionRefRecId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertyNumbers</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updatePropertyNumbers(int _propertyNumber = propertyNumber)
    {
        LedgerRRGEProperty_W    child;
        ListEnumerator          le;

        propertyNumber = _propertyNumber;

        if (isPropertyNumber)
        {
            this.value(int2str(_propertyNumber));
        }

        if (children)
        {
            le = children.getEnumerator();
            while (le.moveNext())
            {
                child = le.current();
                if (child)
                {
                    child.updatePropertyNumbers(propertyNumber);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyValue_W updateValue(ComExcelDocument_RU _excelDocument, LedgerRRGEDocuments_W _document = null, boolean _parseValue = true, LedgerRRGEBufferEval_W  _parentEvaluator = null)
    {
        boolean isDate(str _text)
        {
            return _text == property.DefaultValue || str2Date(_text, -1) != dateNull();
        }

        setPrefix(strFmt("@SYS62814", property.PropertyId));

        switch (property.PropertyType)
        {
            case LedgerRRGESectionPropertyType_W::Cell:
                property.Value = this.getExcelValue(_excelDocument);
                break;

            case LedgerRRGESectionPropertyType_W::Const:
                property.Value = ComExcelDocument_RU::removeExtremeQuotas(LedgerRRGEBufferEvalProperty_W::evalProperty(this, _document, _parentEvaluator));
                break;

            case LedgerRRGESectionPropertyType_W::Value:
                property.Value = ComExcelDocument_RU::removeExtremeQuotas(property.Value);
                break;
        }

        if (_parseValue)
        {
            property.Value = LedgerRRGEProperties_W::replaceMacroValue(property.Value, _document);
            if (!property.Value)
            {
                property.Value = property.DefaultValue;
            }

            if (property.Value && property.DataType == LedgerRRGEPropertyDataType_W::Numeric)
            {
                property.Value = strRem(property.Value, Space);
            }

            if (property.Value &&
                ((property.DataType == LedgerRRGEPropertyDataType_W::Numeric    && !str2NumOk_RU(property.Value)) ||
                 (property.DataType == LedgerRRGEPropertyDataType_W::Date       && !isDate(property.Value))))
            {
                property.Value = '';
            }

            if (property.LedgerRRGERequisiteTypes_W)
            {
                property.Value = LedgerRRGEProperties_W::updateValueExtendedType(property.LedgerRRGERequisiteTypes_W, property.Value);
            }
        }

        if (!this.isXML())
        {
            property.Value = strUpr(property.Value);
        }

        this.resetOptionalChildValid();

        return property.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valid</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean valid()
    {
        if (!property.PropertyId)
        {
            return false;
        }

        // Section
        if (property.Dynamic)
        {
            return !this.isOptionalSection() || this.isOptionalChildValid();
        }

        if (property.OutputType == LedgerRRGEPropertyOutputType_W::Required || property.OutputType == LedgerRRGEPropertyOutputType_W::Predefined)
        {
            return !this.isOptionalSection() || (parent && parent.isOptionalChildValid());
        }

        return !this.isDefaultValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyValue_W value(LedgerRRGEPropertyValue_W _value = property.Value)
    {
        property.Value = _value;
        return property.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEProperty_W construct()
    {
        return new LedgerRRGEProperty_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDynamicProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGEProperty_W makeDynamicProperty(
        LedgerRRGESectionId_W       _sectionId,
        LedgerRRGETemplateRecId_W   _templateId,
        RefRecId                    _sectionRefRecId    = 0,
        LineNum                     _lineNum            = 0)
    {
        LedgerRRGESectionProperties_W   sectionProperty;

        sectionProperty.Dynamic                    = true;
        sectionProperty.LedgerRRGETemplates_W      = _templateId;
        sectionProperty.SectionId                  = _sectionId;
        sectionProperty.PropertyId                 = _sectionId;
        sectionProperty.Value                      = _sectionId;
        sectionProperty.DefaultValue               = _sectionId;
        sectionProperty.SectionRefRecId            = _sectionRefRecId;
        sectionProperty.LineNum                    = _lineNum;

        return LedgerRRGEProperty_W::newFromProperty(sectionProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEProperty_W newFromProperty(LedgerRRGESectionProperties_W _sectionProperty, LedgerRRGEPropertyValue_W _value = '', str _cellStr = '')
    {
        LedgerRRGEProperty_W property = LedgerRRGEProperty_W::construct();

        property.property(_sectionProperty);

        if (!prmisDefault(_value))
        {
            property.value(_value);
        }

        if (!prmisDefault(_cellStr))
        {
            property.cellStr(_cellStr);
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEProperty_W newFromVersion(LedgerRRGEPropertyVersions_W _propertyVersion, LedgerRRGEPropertyValue_W _value = '', str _cellStr = '')
    {
        LedgerRRGEProperty_W property = LedgerRRGEProperty_W::construct();

        property.initFromPropertyVersion(_propertyVersion);

        if (!prmisDefault(_value))
        {
            property.value(_value);
        }

        if (!prmisDefault(_cellStr))
        {
            property.cellStr(_cellStr);
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExtremeQuotas</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes unnecessary quotation marks.
    /// </summary>
    /// <param name="_text">
    /// The source string.
    /// </param>
    /// <returns>
    /// The processed string.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static str removeExtremeQuotas(str _text)
    {
        int l = strLen(_text);
        str quote;

        if (l > 1 && strFind(_text, Quotas, 1, l) == 1)
        {
            quote = subStr(_text, 1, 1);
            if (strFind(_text, quote, 2, l) == l)
            {
                return subStr(_text, 2,  l - 2);
            }
        }

        return _text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitPropertyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public container splitPropertyId(LedgerRRGEPropertyId_W _propertyId, boolean _parseIdx = true)
    {
        System.Text.RegularExpressions.Regex            regEx;
        System.Text.RegularExpressions.Match            regExMatch;
        System.Text.RegularExpressions.GroupCollection  matchGroups;
        System.Text.RegularExpressions.Group            matchGroup;
        str                                             idxStr;
        LedgerRRGEPropertyId_W                          path;
        LedgerRRGEPropertyId_W                          propertyId;
        LedgerRRGEPropertyId_W                          rest;
        InteropPermission                               permission;

        permission = new InteropPermission(InteropKind::ClrInterop);
        permission.assert();

        regEx = new System.Text.RegularExpressions.Regex(
            strFmt('^\\s*(?<%1>.*\\\\)\\s*(?<%2>\\w+)\\s*\\(?\\s*(?<%3>\\w+)?\\s*\\)?\\s*\\.?\\s*(?<%4>.*)?$|^\\s*(?<%2>\\w+)\\s*\\(?\\s*(?<%3>\\w+)?\\s*\\)?\\s*\\.?\\s*(?<%4>.*)?$',
                PathConst, PropertyIdConst, IndexConst, RestConst));

        regExMatch = regEx.Match(_propertyId);
        if(regExMatch.get_Success())
        {
            matchGroups = regExMatch.get_Groups();

            matchGroup  = matchGroups.get_Item(PathConst);
            path        = matchGroup.get_Value();

            matchGroup  = matchGroups.get_Item(PropertyIdConst);
            propertyId  = matchGroup.get_Value();

            matchGroup  = matchGroups.get_Item(IndexConst);
            idxStr      = matchGroup.get_Value();

            matchGroup  = matchGroups.get_Item(RestConst);
            rest        = matchGroup.get_Value();
        }

        if (_parseIdx)
        {
            return [path, propertyId, max((idxStr == Last ? maxInt() : str2int(idxStr)), 1), rest];
        }

        return [path, propertyId, idxStr, rest];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>