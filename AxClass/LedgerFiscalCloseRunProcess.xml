<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalCloseRunProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// The <c>LedgerFiscalCloseRunProcess</c> class provides a concrete implementation of the <c>LedgerFiscalCloseIRunProcess</c> interface
/// used by the Shared fiscal close feature.
/// </summary>
[ExportMetadataAttribute('LedgerFiscalCloseRunProcess', 'LedgerFiscalCloseRunProcess'), ExportAttribute('Dynamics.AX.Application.LedgerFiscalCloseIRunProcess')]
public class LedgerFiscalCloseRunProcess implements LedgerFiscalCloseIRunProcess
{
    private LedgerFiscalCloseGroup closeGroup;
    private LedgerFiscalCloseLedgerOptions ledgerOptions;
    private Voucher openingVoucher;
    private OpeningMethod methodStatus;

    private AcknowledgementDate acknowledgementDate_IT;
    private OpeningMethod methodOperations_RU;
    private LedgerVoucherTypeId_CN voucherTypeId_CN;
    private Voucher_CN voucher_CN;
    private UseTransferYearEndAccount_ES useTransferAccount_ES;

    private BatchInfo batchInfo;
    private BatchHeader batchHeader;
    private Batch currentBatch;

    private FiscalCalendarPeriod closingPeriod;
    protected LedgerTransferOpening openingTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transfer opening process is ready to run.
    /// </summary>
    /// <returns>true if the transfer opening process can be successfully run; otherwise false.</returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!openingTrans)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (PublicSectorUtils::isLedgerYearEndClosingEnabled())
        {
            isValid = checkFailed("@GeneralLedger:PublicSectorNotSupported");
        }

        isValid = isValid && openingTrans.validate();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the necessary batch parameters on the child tasks.
    /// </summary>
    /// <param name = "_currentBatch">The <c>Batch</c> record for the current process.</param>
    /// <param name = "_batchHeader">The <c>BatchHeader</c> record for the current process.</param>
    public void setBatchOptions(Batch _currentBatch, BatchHeader _batchHeader)
    {
        batchHeader = _batchHeader;
        currentBatch = _currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the process for batch execution.
    /// </summary>
    public void scheduleProcess()
    {
        if (batchHeader)
        {
            batchHeader.addRuntimeTask(openingTrans, currentBatch.RecId);
            batchHeader.save();
        }
        else
        {
            openingTrans.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCloseGroup</Name>
				<Source><![CDATA[
    public LedgerFiscalCloseGroup parmCloseGroup(LedgerFiscalCloseGroup _closeGroup = closeGroup)
    {
        closeGroup = _closeGroup;
        return closeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCloseGroupOptions</Name>
				<Source><![CDATA[
    public LedgerFiscalCloseLedgerOptions parmCloseGroupOptions(LedgerFiscalCloseLedgerOptions _ledgerOptions = ledgerOptions)
    {
        ledgerOptions = _ledgerOptions;
        return ledgerOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingPeriod</Name>
				<Source><![CDATA[
    public FiscalCalendarPeriod parmClosingPeriod(FiscalCalendarPeriod _closingPeriod = closingPeriod)
    {
        closingPeriod = _closingPeriod;
        return closingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningVoucher</Name>
				<Source><![CDATA[
    public Voucher parmOpeningVoucher(Voucher _openingVoucher = openingVoucher)
    {
        openingVoucher = _openingVoucher;
        return openingVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethodStatus</Name>
				<Source><![CDATA[
    public OpeningMethod parmMethodStatus(OpeningMethod _methodStatus = methodStatus)
    {
        methodStatus = _methodStatus;
        return methodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerTransferOpening</c> class with the provided values.
    /// </summary>
    public void initialize()
    {
        openingTrans = LedgerTransferOpening::construct(false); // isPublicSectorEnabled is always false for now

        openingTrans.parmPeriodEnd(closingPeriod.EndDate);
        openingTrans.parmPeriodname(closingPeriod.Name);
        openingTrans.parmTransferDimensions(ledgerOptions.TransferBalanceSheetDimensions);
        openingTrans.parmVoucher(openingVoucher);
        openingTrans.parmProfitLossDefaultDimensions(ledgerOptions.ProfitLossDefaultDimension);
        openingTrans.parmProfitLossCloseDimensionEnumeration(ledgerOptions.ProfitLossCloseDimension);
        openingTrans.parmTransferResultAccount(ledgerOptions.RetainedEarningsMainAccount);
        openingTrans.parmMethodStatus(methodStatus);

        openingTrans.parmAcknowledgementDate(acknowledgementDate_IT);
        openingTrans.parmMethodOperations(methodOperations_RU);
        openingTrans.parmUseTransferYearEndAccount_ES(useTransferAccount_ES);

        openingTrans.parmVoucher_CN(voucher_CN);
        if (voucherTypeId_CN)
        {
            openingTrans.parmLedgerVoucherTypeRecId_CN(LedgerVoucherType_CN::findByNaturalKey(voucherTypeId_CN).RecId);
        }

        openingTrans.parmDelayDimensionSetRebuild(true); // The tasks for recreating dimension set balances will be handled outside the opening transaction task.

        openingTrans.batchInfo().parmCaption(strFmt("@GeneralLedger:CloseFor", Ledger::find(ledgerOptions.Ledger).Name));
        openingTrans.batchInfo().parmGroupId(currentBatch.GroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcknowledgementDate</Name>
				<Source><![CDATA[
    public AcknowledgementDate parmAcknowledgementDate(AcknowledgementDate _acknowledgementDate = acknowledgementDate_IT)
    {
        acknowledgementDate_IT = _acknowledgementDate;
        return acknowledgementDate_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethodOperations</Name>
				<Source><![CDATA[
    public OpeningMethod parmMethodOperations(OpeningMethod _methodOperations = methodOperations_RU)
    {
        methodOperations_RU = _methodOperations;
        return methodOperations_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChineseVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values needed for Chinese Voucher processing.
    /// </summary>
    /// <param name = "_voucherType">The type of voucher.</param>
    /// <param name = "_voucher">The voucher number.</param>
    public void setChineseVoucher(LedgerVoucherTypeId_CN _voucherType, Voucher_CN _voucher)
    {
        voucherTypeId_CN = _voucherType;
        voucher_CN = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTransferAccount</Name>
				<Source><![CDATA[
    public NoYes parmUseTransferAccount(NoYes _useTransferAccount = useTransferAccount_ES)
    {
        useTransferAccount_ES = _useTransferAccount;
        return useTransferAccount_ES;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>