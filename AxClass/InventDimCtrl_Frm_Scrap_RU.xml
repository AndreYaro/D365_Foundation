<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Scrap_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class InventDimCtrl_Frm_Scrap_RU extends InventDimCtrl_Frm_Editable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    public NoYes mustEnableField(FieldId _dimFieldId)
    {
        return super(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkFieldAsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>NoYes</c> enumeration value that indicates whether all enabled <c>inventDim</c> fields
    ///    are mandatory.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    A field ID.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value.
    /// </returns>
    protected NoYes mustMarkFieldAsMandatory(FieldId _dimFieldId)
    {
        if (!this.mustEnableField(_dimFieldId))
        {
            return NoYes::No;
        }

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);
        return inventDimGroupFieldSetup.isMandatory() || inventDimGroupFieldSetup.isProductDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
        public NoYes mustShowGridField(FieldId _dimFieldId)
    {
        int x = fieldNum(InventDimSetupGrid, ShowGridInventTrans);

        if (_dimFieldId && x)
        {
            return InventDimSetupGrid::find(_dimFieldId).(x);
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Scrap_RU construct()
    {
        return new InventDimCtrl_Frm_Scrap_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Scrap_RU newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_Scrap_RU  inventDimCtrl = InventDimCtrl_Frm_Scrap_RU::construct();
        InventDimAxFormAdapter      adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormValidDataSources</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Scrap_RU newFromFormValidDataSources(FormRun _formRun, Set _validDataSources)
    {
        InventDimCtrl_Frm_Scrap_RU   inventDimCtrl_Frm = InventDimCtrl_Frm_Scrap_RU::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl_Frm.parmCallingElement(adapter);
        inventDimCtrl_Frm.parmValidDataSources(_validDataSources);
        inventDimCtrl_Frm.init();
        return inventDimCtrl_Frm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
