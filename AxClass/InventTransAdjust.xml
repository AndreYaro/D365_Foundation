<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTransAdjust
{
    TransDate           _date;
    Voucher             _voucher;
    boolean             checkItemPostedDate;
    Set                 setItemPostedDateValidated;
    MarkupCode              markupCode_RU;
    VendAccountMarkup_RU    vendAccountMarkup_RU;
    VendInvoiceIdMarkup_RU  vendInvoiceIdMarkup_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemPostedDate</Name>
				<Source><![CDATA[
    protected boolean checkItemPostedDate(ItemId _itemId, TransDate _transDate)
    {
        if (!setItemPostedDateValidated)
        {
            // <GEERU>
            checkItemPostedDate = InventStdCostConv::mustCheckItemPostingDate(_transDate, this.inventTransCurrency_RU());
            // </GEERU>
            setItemPostedDateValidated = new Set(new DictType(extendedTypeNum(ItemId)).baseType());
        }

        if (!checkItemPostedDate)
        {
            return true;
        }

        if (setItemPostedDateValidated.in(_itemId))
        {
            return true;
        }

        // <GEERU>
        if (!InventStdCostConv::checkItemPostingDate(_itemId, _transDate, this.inventTransCurrency_RU()))
        // </GEERU>
        {
            return false;
        }

        setItemPostedDateValidated.add(_itemId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransCurrency_RU</Name>
				<Source><![CDATA[
    protected InventTransCurrency_RU inventTransCurrency_RU()
    {
        return InventTransCurrency_RU::PrimaryCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TransDate          transDate,
             Voucher            voucher,
             boolean            onClosingDate= false)
    {
        _date   = transDate;
        _voucher= voucher;

        // <GEERU>
        if (! InventClosing::checkOpen(_date, onClosingDate, this.inventTransCurrency_RU()))
        // </GEERU>
            throw error("@SYS18447");
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupCode_RU</Name>
				<Source><![CDATA[
    public MarkupCode parmMarkupCode_RU(MarkupCode _markupCode_RU = markupCode_RU)
    {
        markupCode_RU = _markupCode_RU;
        return markupCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccountMarkup_RU</Name>
				<Source><![CDATA[
    public VendAccountMarkup_RU parmVendAccountMarkup_RU(VendAccountMarkup_RU _vendAccountMarkup_RU = vendAccountMarkup_RU)
    {
        vendAccountMarkup_RU = _vendAccountMarkup_RU;
        return vendAccountMarkup_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceIdMarkup_RU</Name>
				<Source><![CDATA[
    public VendInvoiceIdMarkup_RU parmVendInvoiceIdMarkup_RU(VendInvoiceIdMarkup_RU _vendInvoiceIdMarkup_RU = vendInvoiceIdMarkup_RU)
    {
        vendInvoiceIdMarkup_RU = _vendInvoiceIdMarkup_RU;
        return vendInvoiceIdMarkup_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow( InventTrans                 _inventTrans,
                    NoYes                       _onlyOpenQty,
                    NoYes                       _changeStdCostPrice,
                    CostAmount                  _adjustment,
                    boolean                     _useOperationsAccount    = false,
                    LedgerPostingType           _operationsPosting       = LedgerPostingType::None,
                    LedgerDimensionAccount      _operationsAccount       = 0,
                    boolean                     _useBalanceAccount       = false,
                    LedgerPostingType           _balanceSheetPosting     = LedgerPostingType::None,
                    LedgerDimensionAccount      _balanceSheetAccount     = 0,
                    boolean                     _usePostOnhandFinancial  = true,
                    LedgerVoucher               _ledgerVoucher           = null, // For adjustments of items using the standard cost inventory model.
                    InventAdjustmentSpec        _inventAdjustmentSpec    = InventAdjustmentSpec::Total)

    {
        InventSettlement    inventSettlement;

        if (!this.checkItemPostedDate(_inventTrans.ItemId, _date))
        {
            throw error("@SYS18447");
        }
        ttsbegin;

        if (_adjustment != 0 || _onlyOpenQty)
        {
            if (_inventTrans.PackingSlipReturned)
                throw error("@SYS62017");

            if (_onlyOpenQty)
            {
                if (! _inventTrans.financialOpenQty())
                    throw error("@SYS19296");

                if (_inventTrans.financialOpenQty() != _inventTrans.Qty)
                   _inventTrans.updateSplit(_inventTrans.financialOpenQty(), _inventTrans.pdsCWFinancialOpenQty());
            }

            inventSettlement.initFromInventTrans(_inventTrans,_inventTrans.dimensionFinancialDefaultDimension());
            
            this.initializeInventSettlementForUpdate(inventSettlement);
            
            inventSettlement.CostAmountAdjustment   = _adjustment;
            inventSettlement.SettleType             = _onlyOpenQty   ? InventSettleType::RemainAdjustment: InventSettleType::CompleteAdjustment;
  

            InventModelGroup inventModelGroup = InventTable::modelGroupByItemId(_inventTrans.ItemId);
            if (!_usePostOnhandFinancial || inventModelGroup.PostOnhandFinancial)
            {
                inventSettlement.OperationsPosting      = _useOperationsAccount ? _operationsPosting      : _inventTrans.postingOperations();
                inventSettlement.OperationsLedgerDimension      = _useOperationsAccount ? _operationsAccount      : _inventTrans.accountOperationsLedgerDimension();
                inventSettlement.BalanceSheetPosting    = _useBalanceAccount    ? _balanceSheetPosting    : _inventTrans.postingBalanceSheet();
                inventSettlement.BalanceSheetLedgerDimension    = _useBalanceAccount    ? _balanceSheetAccount    : _inventTrans.accountBalanceSheetLedgerDimension();
            }

            _inventTrans.CostAmountAdjustment += _adjustment;

            if (_changeStdCostPrice)
            {
                _inventTrans.CostAmountStd  = _inventTrans.costValue();
            }
            else if (inventModelGroup.StandardCost)
            {
                _inventTrans.updateStdCostAdjust(-_adjustment,_date,_voucher,_inventTrans.dimensionFinancialDefaultDimension());
            }

            if ((_inventTrans.costValue() < 0   && _inventTrans.Qty > 0)    ||
                (_inventTrans.costValue() > 0   && _inventTrans.Qty < 0)   )
            {
                if (_inventTrans.costValue() < 0 )
                    error("@SYS53174");
                else
                    error("@SYS53173");

                throw error("@SYS18738");
            }

            if (_inventTrans.DateFinancial > _date)
                throw error("@SYS18740");

            this.checkBackDatingAdjust(_inventTrans);

            inventSettlement.insert();

            InventModelType inventModelType = inventModelGroup.inventModelType();
            inventModelType.postUpdateFinancialAdjustment(_inventTrans, _voucher, _date, _adjustment);

            // Pass the adjustment amount to the invent cost framework
            inventModelType.adjustCostTrans(_inventTrans, _ledgerVoucher, _voucher, _date, _adjustment, null, _inventAdjustmentSpec);

            _inventTrans.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventSettlementForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an instance of inventory settlement for update.
    /// </summary>
    /// <param name = "_inventSettlement">Instance of inventory settlement.</param>
    protected void initializeInventSettlementForUpdate(InventSettlement _inventSettlement)
    {
        _inventSettlement.TransDate              = _date;
        _inventSettlement.Voucher                = _voucher;
        _inventSettlement.SettleModel            = InventSettleModel::Adjustment;
        // <GEERU>
        _inventSettlement.MarkupCode_RU          = markupCode_RU;
        _inventSettlement.VendAccountMarkup_RU   = vendAccountMarkup_RU;
        _inventSettlement.VendInvoiceIdMarkup_RU = vendInvoiceIdMarkup_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransAdjust construct(
        TransDate              _transDate,
        Voucher                _voucher,
        boolean                _onClosingDate       = false,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        var factoryAttr = new InventTransCurrencyFactoryAttribute(_inventTransCurrency);
        var instatiationStrategy = new SysExtensionGenericInstantiation(_transDate, _voucher, _onClosingDate);

        var instance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(InventTransAdjust),
            factoryAttr, instatiationStrategy);

        if (instance == null)
        {
            instance = new InventTransAdjust(_transDate, _voucher, _onClosingDate);
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBackDatingAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check current inventory transaction will have the same sign on qty and amount.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction will be inventory adjustment.
    /// </param>
    [Wrappable(false)]
    protected void checkBackDatingAdjust(InventTrans _inventTrans)
    {
        InventSettlement inventSettlement;

        CostAmount costAmount = _inventTrans.costValue();
        select sum(CostAmountAdjustment) from inventSettlement
            group by TransRecId
            where inventSettlement.TransRecId           == _inventTrans.RecId
               && inventSettlement.TransDate            >  _date
               && inventSettlement.CostAmountAdjustment != 0;

        if ((_inventTrans.Qty > 0 && (costAmount - CurrencyExchangeHelper::amount(inventSettlement.CostAmountAdjustment) < 0))
        ||  (_inventTrans.Qty < 0 && (costAmount - CurrencyExchangeHelper::amount(inventSettlement.CostAmountAdjustment) > 0)))
        {
           error(strFmt("@SYP4986037", _date));
           throw error("@SYS18738");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>