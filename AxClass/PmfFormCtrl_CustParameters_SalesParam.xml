<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_CustParameters_SalesParam</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process form Control for CustParameters form
/// </summary>
/// <remarks>
/// This form cotrol is for the SalesParameters child datasource on the
/// CustParameters form
/// </remarks>
class PmfFormCtrl_CustParameters_SalesParam extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called if form field is modified
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of modified field
    /// </param>
    /// <remarks>
    /// The purpose of the overriden method is to call the updateDesign method
    /// after the field is modified
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(CustParameters, DefaultValues_PdsBatchAttribAutoRes)),
                methodstr(PmfFormCtrl_CustParameters_SalesParam, mayBeBatchAttribAutoResHeader),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeBatchAttribAutoResHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate if item may have Batch attribute concerned.
    /// </summary>
    /// <returns>
    /// true,if reservation is set to Automatic and PdsBatchAttrib configKey
    /// is enabled; othwise false.
    /// </returns>
    /// <remarks>
    /// This does not specify if the batch attribute will be concerned, only if
    /// it can be.
    /// </remarks>
    public boolean mayBeBatchAttribAutoResHeader()
    {
        SalesParameters salesParameters = buffer;
        boolean         ret;

        if (#PdsBatchAttribEnabled
            && salesParameters.Reservation == ItemReservation::Automatic)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - SalesParameters
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(SalesParameters))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_CustParameters_SalesParam construct()
    {
        return new PmfFormCtrl_CustParameters_SalesParam();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_CustParameters_SalesParam</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PmfFormCtrl_CustParameters_SalesParam</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PmfFormCtrl_CustParameters_SalesParam</c> and sets the formRun variable
    /// to the vlue of the calling form.
    /// </remarks>
    public static PmfFormCtrl_CustParameters_SalesParam constructFromForm(
        FormRun _fr)
    {
        PmfFormCtrl     frmCtrl;

        frmCtrl = PmfFormCtrl_CustParameters_SalesParam::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>