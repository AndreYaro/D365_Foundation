<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchPurchReqPurchTotalsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxPurchPurchReqPurchTotalsForm extends TaxPurch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSourceLineCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set currency code for source lines.
    /// </summary>
    /// <param name = "_sourceCurrency">The currency code.</param>
    /// <param name = "_line">The source line will be set currency code.</param>
    /// <returns>
    /// The currency code.
    /// </returns>
    [Hookable(false)]
    protected Currency setSourceLineCurrency(Currency _sourceCurrency,Common _line)
    {
        if (!(_line is PurchReqLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
                
        PurchReqLine localPurchReqLine = _line as PurchReqLine;
        Currency     sourceCurrency;
        if (localPurchReqLine.CurrencyCode == _sourceCurrency.CurrencyCode)
        {
            sourceCurrency = _sourceCurrency;
        }
        else
        {
            sourceCurrencyCode = localPurchReqLine.currencyCode;
            sourceCurrency = Currency::find(sourceCurrencyCode);
        }

        return sourceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the exchange rate.
    /// </summary>
    protected void updateExchRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::current(), sourceCurrencyCode, taxDate);
        exchRate = exchangeRateHelper.getExchangeRate1();
        exchRateSecond = exchangeRateHelper.getExchangeRate2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the total tax amount.
    /// </summary>
    /// <param name = "_includeUseTax">If include the tax.</param>
    /// <returns>The total tax amount.</returns>
    public TaxAmountCur totalTaxAmount(boolean _includeUseTax = false)
    {
        TaxAmountCur totalTaxAmount;

        select sum(TaxAmount)
            from taxWorkTrans
            where taxWorkTrans.TaxOrigin     != TaxOrigin::TaxReversed
                && (_includeUseTax || taxWorkTrans.TaxDirection != TaxDirection::UseTax);

        totalTaxAmount = taxWorkTrans.TaxAmount;

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the exchange rate.
    /// </summary>
    /// <param name = "_exchRate">The exchange rate.</param>
    /// <returns>The exchange rate.</returns>
    public ExchRate parmExchRate(ExchRate _exchRate = exchRate)
    {
        ExchRate ret;

        if(prmisDefault(_exchRate))
        {
            this.updateExchRate();
            ret = exchRate;
        }
        else
        {
            ret = super(_exchRate);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>