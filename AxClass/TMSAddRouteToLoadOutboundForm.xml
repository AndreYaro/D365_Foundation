<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAddRouteToLoadOutboundForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSAddRouteToLoadOutboundForm</c> class is used to process all the business logic in <c>TMSAddRouteToLoadOutbound</c> form.
/// </summary>
class TMSAddRouteToLoadOutboundForm
{
    WHSLoadTable    loadTable;
    RecId           routeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the load to the selected route code,
    ///     unless it is already assigned to that route code.
    /// </summary>
    /// <param name="_routeCode">
    ///     Route code selected for assignment.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     If a load has already been assigned to the selected route,
    ///     throw an error and allow the user to choose another route.
    /// </exception>
    public void addRouteToLoad(TMSRouteCode _routeCode)
    {
        TMSRouteAssignment_Load routeAssignment;
        TMSRouteTable           routeTable;
        TMSRoute                route;
        TMSRouteCode            routeCode;

        route = TMSRoute::find(_routeCode);

        if (!route.hasRouteSegmentLoad(TMSValidateRouteOnDifferentLoadFlight::instance().isEnabled() ? '' : loadTable.LoadId))
        {
            if (this.validateRouteLoad(_routeCode))
            {
                routeTable = TMSRouteTable::find(routeId);

                routeAssignment = TMSRouteAssignment_Load::newStandard(
                                    routeTable,
                                    this,
                                    loadTable);

                // Validate scheduled route
                if (route.RouteSchedule != 0)
                {
                    routeCode = routeAssignment.findValidScheduledRoute(routeTable, route.RouteCode);

                    routeAssignment.updateScheduledRouteDates(routeTable, routeCode, true);

                    // Previous route selected is not available
                    if (routeCode != _routeCode)
                    {
                        route = TMSRoute::find(routeCode);
                    }
                }

                routeAssignment.assignToExistingRoute(route.RouteCode);

                if (routeAssignment.parmRouteCode())
                {
                    this.runRouteWorkbench(route);
                }
            }
            else
            {
                throw error(strFmt("@TRX2714", loadTable.LoadId));
            }
        }
        else
        {
            throw error(strFmt("@WAX5383", _routeCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTable</Name>
				<Source><![CDATA[
    public WHSLoadTable parmLoadTable(WHSLoadTable _loadTable = loadTable)
    {
        loadTable = _loadTable;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteId</Name>
				<Source><![CDATA[
    public RecId parmRouteId(RecId _routeId = routeId)
    {
        routeId = _routeId;

        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRouteWorkbench</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the <c>TMSRouteWorkbench</c> form when a route is assigned to a load.
    /// </summary>
    /// <param name="_route">
    ///     The route assigned to the load.  It is passed to the Route Workbench form.
    /// </param>
    public void runRouteWorkbench(TMSRoute _route)
    {
        Args    args = new Args();

        args.record(_route);
        new MenuFunction(formStr(TMSRouteWorkbench), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRouteLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that existing <c>WHSLoadTable</c> records connected to
    /// <c>TMSRoute</c> record have the same setup for freight payments.
    /// </summary>
    /// <param name="_routeCode">
    /// Route code selected for assignment.
    /// </param>
    /// <returns>
    /// True, if existing <c>WHSLoadTable</c> records connected to
    /// <c>TMSRoute</c> record have the same setup for freight payments, otherwise False.
    /// </returns>
    protected boolean validateRouteLoad(TMSRouteCode _routeCode)
    {
        WHSLoadTable whsLoadTable;
        boolean      ret = true;

        select firstOnly RecId from whsLoadTable
            where whsLoadTable.RouteCode == _routeCode
               && whsLoadTable.LoadPaysFreight != loadTable.LoadPaysFreight;

        if (whsLoadTable.RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>