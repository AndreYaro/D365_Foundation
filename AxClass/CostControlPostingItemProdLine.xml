<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingItemProdLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingItemProdLine extends CostControlPostingItem
{
    ProdBOM   prodBOM;
    ProdBOM   prodBom_Orig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPriceAmount</Name>
				<Source><![CDATA[
    public AmountCur costPriceAmount(Qty _qty)
    {
        AmountCur       amountCur=0;
        ProdCalcTrans   prodCalcTrans;

        // Convert the BOM quantity from BOM units to Inventory units.
        InventQty inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                    prodBOM.InventDimId,
                                                                                                    _qty,
                                                                                                    prodBOM.UnitId,
                                                                                                    prodBOM.inventTable().inventUnitId(),
                                                                                                    NoYes::Yes);

        select prodCalcTrans
            where prodCalcTrans.IdRefTableId    == prodBOM.TableId
            &&    prodCalcTrans.IdRefRecId      == prodBOM.RecId;

        if (prodCalcTrans && prodCalcTrans.consumptionSum() != 0)
        {
            amountCur=prodCalcTrans.costPriceSum()* inventQty / prodCalcTrans.consumptionSum();
        }
        else
        {
            amountCur = PriceDisc::price2Amount(prodBOM.ProjCostPrice,
                                    prodBOM.inventTable().inventTableModuleInvent().PriceUnit,
                                    0,
                                    inventQty,
                                    inventQty,
                                    0,
                                    0,
                                    '',
                                    0);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty = this.openInTotal(prodBOM), TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        this.reverseParentCommitmentIfConsumed();

        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;
        
        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        if (ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting)
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodBOM);
            projBudgetTransactionLine.parmQty(_qty);
            projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

            if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(),projBudgetTransactionLine.salesAmount()))
            {
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(costControlTransCommittedCost.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
        }
        else
        {
            if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromProdBom(prodBOM);
        // Calculating the Cost amount based on the Quantity
        AmountCur amountCur = this.costPriceAmount(_qty);
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(amountCur, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        
        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseParentCommitmentIfConsumed</Name>
				<Source><![CDATA[
    private void reverseParentCommitmentIfConsumed()
    {
        ProdTable prodTableLoc = prodBOM.prodTable();

        boolean reverseParentCommitment = false;
        
        ItemId itemId;
        
        // Need to remove parent commitment if prodTable record exists for a parent order and proj method is 'consumed'
        if (prodTableLoc && prodTableLoc.ProjId && prodTableLoc.CollectRefProdId != prodTableLoc.ProdId)
        {
            InventTable invTabLocal;

            select firstonly invTabLocal where invTabLocal.ItemId == prodBOM.BomId;

            ItemCalcType calcType = invTabLocal.inventItemType().calculationType();

            if (prodTableLoc.isProjMethodConsumed())
            {
                switch(calcType)
                {
                    case ItemCalcType::BOM:
                        itemId = prodBOM.BOMId;
                    case ItemCalcType::Item:
                        BOMVersion bomVersion;
                        select firstonly ItemId from bomVersion where bomVersion.BOMId == prodBOM.BomId;
                        itemId = bomVersion.ItemId;
                }
                reverseParentCommitment = true;
            }
        }
        
        if (reverseParentCommitment && itemId)
        {
            CostControlTransCommittedCost costControlTransCommittedCostParent;

            select forupdate costControlTransCommittedCostParent
                where costControlTransCommittedCostParent.RefId == prodTableLoc.InventRefId
                    && costControlTransCommittedCostParent.EmplItemId == itemId
                    && costControlTransCommittedCostParent.Open == NoYes::Yes;

            if (costControlTransCommittedCostParent)
            {
                // Get the prodBom object for Ref prodId that created this prod order.
                ProdBOM parentProdBOM;
                select parentProdBOM where parentProdBOM.ItemId == itemId && parentProdBOM.ProdId == prodTableLoc.InventRefId;

                this.reverseCommittedCostForBOM(parentProdBOM, NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;
        if (! movement_Orig || !CostControlTransCommittedCost::findOpenedByInventTransID(prodBOM.InventTransId))
            retActionType = ProjCommittedCostUpdateAction::Create;
        else
        {
            // dimension changes, update committed cost without reverse
            if (!DimensionDefaultFacade::areEqual(prodBom_Orig.DefaultDimension, prodBOM.DefaultDimension)
              ||prodBom_Orig.ProjCategoryId!=prodBOM.ProjCategoryId
              ||prodBom_Orig.ActivityNumber!=prodBOM.ActivityNumber)
                    retActionType = ProjCommittedCostUpdateAction::UpdateOnly;

            // qty,currency got change, should reverse the old one and recreate committed cost
            if ( this.openInTotal(prodBom_Orig) != this.openInTotal(prodBOM)
               ||(prodBom_Orig.ItemId!=prodBOM.ItemId)
               ||(prodBom_Orig.UnitId!=prodBOM.UnitId) )
                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
        }

        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (movement && movement.buffer().TableId==tableNum(ProdBOM))
        {
            prodBOM=movement.buffer();
            if (this.parmMovementOrig())
                prodBom_Orig=this.parmMovementOrig().buffer();
        }
        else
            throw error ("@SYS22828",funcName());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amount of a transaction.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction; optional.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction; optional.
    /// </param>
    /// <returns>
    ///    true if the cost and sales amounts can be reduced from the budget; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if (actionType == ProjCommittedCostUpdateAction::Create && _costAmount == 0 && _salesAmount == 0)
        {
            ret = false;
        }

        if (actionType == ProjCommittedCostUpdateAction::Post)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a forecast must be updated for the transaction.
    /// </summary>
    /// <param name="_qty">
    /// Quantity of the transaction.
    /// </param>
    /// <returns>
    /// true if the forecast must be updated; otherwise, false.
    /// </returns>
    public boolean mustUpdateForecast(Qty _qty)
    {
        boolean ret = true;

        if (actionType == ProjCommittedCostUpdateAction::Create && _qty < 0)
        {
            ret = false;
        }

        if ((actionType == ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete) && _qty < 0)
        {
            ret = false;
        }

        if (actionType == ProjCommittedCostUpdateAction::Post)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventMovement _movement)
    {
        super(_movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInTotal</Name>
				<Source><![CDATA[
    public InventQty openInTotal(ProdBOM _prodBOM)
    {
        return _prodBOM.RemainBOMPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBom</Name>
				<Source><![CDATA[
    public ProdBOM parmProdBom(ProdBOM _prodBOM=prodBOM)
    {
        prodBOM=_prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return prodBOM.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return prodBOM.RemainBOMPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        if (!super(isInvoiced))
            return false;

        return this.reverseCommittedCostForBOM(prodBOM, isInvoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCostForBOM</Name>
				<Source><![CDATA[
    private boolean reverseCommittedCostForBOM(ProdBOM _prodBOM, NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();
            ledgerDimensionDefaultAccount = this.parmLedgerDimensionDefaultAccount();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }
        ttsbegin;
        while select forupdate costControlTransCommittedCost
        where costControlTransCommittedCost.InventTransId == _prodBOM.InventTransId
        {
            if (isInvoiced)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }
            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;
                costControlTransCommittedCost.update();
                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                if (this.mustUpdateBudget() && ProjBudgetReductionHistory::existProjTransId(_prodBOM.ProjTransId))
                {
                    this.budgetUpdate(costControlTransCommittedCost.ProjId, ProjBudgetTransaction::construct(_prodBOM), ProjBudgetAdjustmentType::Increment);
                }

                if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                    this.forecastUpdate(costControlTransCommittedCost,
                                        -costControlTransCommittedCost.Qty,
                                        -costControlTransCommittedCost.Amount);
            }
            else
                costControlTransCommittedCost.update();
        }
        ttscommit;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost   updateCCTCC;
        CostControlTransCommittedCost   newOpenCCTCC;
        ProjBudgetTransactionLine       projBudgetTransactionLine;
        ProjBudgetTransaction           projBudgetTransaction;

        boolean                         setProjTransId=false;
        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByInventTransID(prodBOM.InventTransId,true);
        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = prodBOM.ProjCategoryId;
        smmActivityNumber newActivityNum = prodBOM.ActivityNumber;

        while select forupdate updateCCTCC
            where updateCCTCC.InventTransId == prodBOM.InventTransId
        {
            updateCCTCC.DefaultDimension = prodBOM.DefaultDimension;
            if (!updateCCTCC.ProjTransId)
            {
                updateCCTCC.ProjTransId=prodBOM.ProjTransId;
                setProjTransId =true; //the forecast reduction did not happen before because missing projtransid
            }
            updateCCTCC.CategoryId = prodBOM.ProjCategoryId;
            updateCCTCC.ActivityNumber = prodBOM.ActivityNumber;
            updateCCTCC.update();
        }

        Amount newAmount = this.costPriceAmount(oldOpenCCTCC.Qty);
        if ((oldOpenCCTCC.Amount==0 && newAmount!=0)
        ||  setProjTransId)
        {
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByInventTransID(prodBOM.InventTransId,true);
            if (newOpenCCTCC)
            {
                newOpenCCTCC.Amount = newAmount;
                newOpenCCTCC.AmountMst = newOpenCCTCC.Amount;
                newOpenCCTCC.update();

                if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProdBom());
                    projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                    projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                    projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    this.budgetUpdate(newOpenCCTCC.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
                }
                else
                {
                    this.forecastUpdate(newOpenCCTCC, newOpenCCTCC.Qty, newAmount);
                }
            }
        }
        else if (oldCategoryId != newCategoryId   || oldActivityNum!= newActivityNum || prodBOM.ProjSalesPrice != prodBOM.orig().ProjSalesPrice)
        {
            this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            this.budgetUpdate(oldOpenCCTCC.ProjId, ProjBudgetTransaction::construct(this.parmProdBom()), ProjBudgetAdjustmentType::Increment);
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByInventTransID(prodBOM.InventTransId,true);

            if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProdBom());
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(newOpenCCTCC.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC,
                                    newOpenCCTCC.Qty,
                                    newOpenCCTCC.Amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostProduction)
                ret=false;
            if (prodBOM.prodTableRef().isProjMethodConsumed())
                ret=false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReverse</Name>
				<Source><![CDATA[
    public boolean validateReverse()
    {
        boolean ret =true;
        if (!CostControlTransCommittedCost::findOpenedByInventTransID(prodBOM.InventTransId))
                ret=false;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>