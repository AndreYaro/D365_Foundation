<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_ProjProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   SalesCalcTax_ProjProposal extends SalesCalcTax_Proj
{
    ProjProposalEmpl                projProposalEmpl;
    ProjProposalCost                projProposalCost;
    ProjProposalItem                projProposalItem;
    ProjProposalJour                projProposalJour;
    ProjProposalOnAcc               projProposalOnAcc;
    ProjProposalRevenue             projProposalRevenue;
    TradeTotalsBase                 projProposalTotals;

    QueryRun                        querySalesTableMarkup;
    boolean                         firstMarkup;
    Map                             taxWriteCodes;

    ProjInvoiceJour projInvoiceJourOrig;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    public TaxAmountCur  calcTax(TradeTotalsBase _projProposalTotals)
    {
        projProposalTotals  = _projProposalTotals as ProjProposalTotals;
        taxProj             = new TaxProj(this);

        TaxAmountCur amountCur = taxProj.calc();
        this.tax(taxProj);

        return  -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjRevenueTransTransGroups</Name>
				<Source><![CDATA[
    private container getProjRevenueTransTransGroups(ProjTransIdBase _transId)
    {
        ProjRevenueTrans    projRevenueTrans;

        select TaxGroupId, TaxItemGroupId from projRevenueTrans
            where projRevenueTrans.TransId == _transId;

        container taxGroups = [projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId];

        return taxGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold tax
    /// </summary>
    /// <param name="_salesTotals">
    /// The sales totals
    /// </param>
    /// <returns>
    /// Returns the instance of <c>TaxAmountCur</c> class.
    /// </returns>
    public TaxAmountCur calcWithholdTax_IN(TradeTotalsBase _salesTotals)
    {
        projProposalTotals = _salesTotals as ProjProposalTotals;
        TaxWithholdCalculation_IN taxWithholdCalcProj = TaxWithholdCalcProj_IN::construct(this);
        TaxAmountCur amountCur = taxWithholdCalcProj.calculateTax();

        this.taxWithholdCalculation_IN(taxWithholdCalcProj);

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return projProposalJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return ProjInvoiceCurrency::find(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId).ExchRate;
        }
        else if (projProposalJour.exchRate)
        {
            return projProposalJour.exchRate;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            return this.exchRate_CZ();
        }

        return ExchangeRateHelper::exchRate(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate exchRate_CZ()
    {
        switch (this.transTableId())
        {
            case(tableNum(ProjProposalEmpl)):
                return this.ProjProposalEmplExchRate_CZ();

            case(tableNum(ProjProposalCost)):
                return this.ProjProposalCostExchRate_CZ();

            case(tableNum(ProjProposalItem)):
                return this.ProjProposalItemEchRate_CZ();

            case(tableNum(ProjProposalRevenue)):
                return this.ProjProposalRevenueExchRate_CZ();

            case(tableNum(ProjProposalOnAcc)):
                return this.ProjProposalOnAccExchRate_CZ();

            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return 0;
        }

        return ExchangeRateHelper::exchRateSecond(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteCode</Name>
				<Source><![CDATA[
    private TaxWriteCode getTaxWriteCode(TaxGroup taxGroup, TaxItemGroup taxItemGroup)
    {
        TaxTable            taxTable;
        TaxGroupData        taxGroupData;
        TaxOnItem           taxOnItem;
        TaxWriteCode        taxWriteCode;

        if (taxWriteCodes == null)
        {
            taxWriteCodes = new Map(Types::String, Types::String);
        }

        str key = strFmt("%1-%2", taxGroup, taxItemGroup);

        if (taxWriteCodes.exists(key))
        {
            taxWriteCode = taxWriteCodes.lookup(key);
        }
        else
        {
            select PrintCode from taxTable
                exists join taxGroupData  where
                       taxGroupData.TaxGroup  == taxGroup &&
                       taxGroupData.TaxCode   == taxTable.TaxCode
                exists join taxOnItem     where
                       taxOnItem.TaxItemGroup == taxItemGroup &&
                       taxOnItem.TaxCode      == taxTable.TaxCode;

            taxWriteCode = taxTable.PrintCode;
            taxWriteCodes.insert(key, taxWriteCode);
        }

        return  taxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    public void initCursor()
    {
        queryTransact = this.queryBuild();

        queryTransact.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    public void initCursorMarkupHeader(TableId _tableId, RecId _recId)
    {
        querySalesTableMarkup   = this.queryBuildSalesTable();
        firstMarkup             = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    public TransDate invoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupHeaderRecID</Name>
				<Source><![CDATA[
    public RecId markupHeaderRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupHeaderTableId</Name>
				<Source><![CDATA[
    public TableId markupHeaderTableId()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _source,
             SalesUpdate    _specQty)
    {
        super(_source,  _specQty);

        if (_source.TableId == tableNum(ProjProposalJour))
        {
            projProposalJour = _source;
            projInvoiceId    = projProposalJour.ProposalId;
            salesTable       = projProposalJour.salesTable();

            this.setHeaderReasonTableRefRecId(projProposalJour.ReasonTableRef);

            if (FeatureStateProvider::isFeatureEnabled(ProjCreditNoteUseOrigInvoiceDateForExchRateFlight::instance()))
            {
                projInvoiceJourOrig = projProposalJour.getOriginalProjInvoiceJour();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public Common nextLine()
    {
        Common recordProcessed;
        // <GBR>
        // </GBR>

        queryTransact.next();

        this.transItemId('');
        this.parmTransTransId('');

        initMarkupTrans     = false;

        if (queryTransact.changed(tableNum(ProjProposalEmpl)))
        {
            projProposalEmpl = queryTransact.get(tableNum(ProjProposalEmpl));
            recordProcessed = projProposalEmpl;

            projTrans = ProjTrans::newProjProposalEmpl(projProposalEmpl);

            this.transRecId(projProposalEmpl.RecId);
            this.transTableId(projProposalEmpl.TableId);
            ttsbegin;
            this.setTax(this.getTaxWriteCode(projProposalEmpl.TaxGroupId,projProposalEmpl.TaxItemGroupId));
            ttscommit;
        }
        else if (queryTransact.changed(tableNum(ProjProposalCost)))
        {
            projProposalCost = queryTransact.get(tableNum(ProjProposalCost));
            recordProcessed = projProposalCost;

            projTrans = ProjTrans::newProjProposalCost(projProposalCost);

            this.transRecId(projProposalCost.RecId);
            this.transTableId(projProposalCost.TableId);
            ttsbegin;
            this.setTax(this.getTaxWriteCode(projProposalCost.TaxGroupId,projProposalCost.TaxItemGroupId));
            ttscommit;
        }
        else if (queryTransact.changed(tableNum(ProjProposalItem)))
        {
            projProposalItem = queryTransact.get(tableNum(ProjProposalItem));
            recordProcessed = projProposalItem;

            projTrans = ProjTrans::newProjProposalItem(projProposalItem);

            this.transRecId(projProposalItem.RecId);
            this.transTableId(projProposalItem.TableId);
            this.transItemId(projProposalItem.ItemId);
            this.parmTransTransId(projProposalItem.InventTransId);
            ttsbegin;
            this.setTax(this.getTaxWriteCode(projProposalItem.TaxGroupId,projProposalItem.TaxItemGroupId));
            ttscommit;

            if (projProposalItem.ItemType == ProjItemType::SalesOrder)
            {
                salesLine = SalesLine::findInventTransId(projProposalItem.InventTransId);
                if (salesLine)
                {
                    this.initCursorMarkup(salesLine.TableId, salesLine.RecId);
                }
            }
        }
        else if (queryTransact.changed(tableNum(ProjProposalRevenue)))
        {
            projProposalRevenue = queryTransact.get(tableNum(ProjProposalRevenue));
            recordProcessed = projProposalRevenue;

            projTrans = ProjTrans::newProjProposalRevenue(projProposalRevenue);

            this.transRecId(projProposalRevenue.RecId);
            this.transTableId(projProposalRevenue.TableId);

            if (projProposalRevenue.IsReleased)
            {
                if(TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                    || ProjParameters::find().CustomerTaxOptions == ProjDefaultTaxOptions::NotSplittingTaxByRetainedAmount)
                {
                    projProposalRevenue.TaxGroupId = '';
                }
                else
                {
                    Container taxGroups = this.getProjRevenueTransTransGroups(this.projTrans().transId());
                    projProposalRevenue.TaxGroupId = conPeek(taxGroups, 1);
                    projProposalRevenue.TaxItemGroupId= conPeek(taxGroups, 2);
                }
            }
            
            ttsbegin;
            this.setTax(this.getTaxWriteCode(projProposalRevenue.TaxGroupId,projProposalRevenue.TaxItemGroupId));
            ttscommit;
        }
        else if (queryTransact.changed(tableNum(ProjProposalOnAcc)))
        {
            projProposalOnAcc = queryTransact.get(tableNum(ProjProposalOnAcc));

            recordProcessed = projProposalOnAcc;

            projTrans = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
            this.transRecId(projProposalOnAcc.RecId);
            this.transTableId(projProposalOnAcc.TableId);
            ttsbegin;
            this.setTax(this.getTaxWriteCode(projProposalOnAcc.TaxGroupId,projProposalOnAcc.TaxItemGroupId));
            ttscommit;
        }
        else
        {
            projTrans = null;
            return null;
        }

        if (recordProcessed && projTrans)
        {
            this.parmOperationAccountAndPostingType(recordProcessed, projTrans);
        }

        return recordProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationAccountAndPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the operation account and posting type.
    /// </summary>
    /// <param name = "_projProposal">The project proposal line table.</param>
    /// <param name = "_projTrans">The base class for all project transaction classes.</param>
    /// <returns>Returns the operation account and posting type.</returns>
    internal container parmOperationAccountAndPostingType(Common _projProposal, ProjTrans _projTrans)
    {
        switch (_projProposal.TableId)
        {
            case tableNum(ProjProposalEmpl) :
            case tableNum(ProjProposalRevenue) :
                this.operationAccount(_projTrans.revenueAccountLedgerDimension(_projTrans.fundingSource()));
                this.operationPosting(LedgerPostingType::ProjTurnover);
                break;

            case tableNum(ProjProposalCost) :
                projProposalCost = _projProposal;

                // Ledger posting setup for debit note revenue.
                if (BrazilParameters::isEnabled())
                {
                    ProjProposalJour projProposalJourLocal = ProjProposalJour::find(projProposalCost.ProposalId);

                    if (projProposalJourLocal.InvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        this.operationAccount(_projTrans.revenueAccLedgerDimensionDebitNote_BR(_projTrans.fundingSource()));
                        this.operationPosting(LedgerPostingType::DebitNote_BR);
                    }
                    else
                    {
                        this.operationAccount(_projTrans.revenueAccountLedgerDimension(_projTrans.fundingSource()));
                        this.operationPosting(LedgerPostingType::ProjTurnover);
                    }
                }
                else
                {
                    this.operationAccount(_projTrans.revenueAccountLedgerDimension(_projTrans.fundingSource()));
                    this.operationPosting(LedgerPostingType::ProjTurnover);
                }
                break;

            case tableNum(ProjProposalItem) :
                projProposalItem = _projProposal;

                if (projProposalItem.ItemType == ProjItemType::SalesOrder)
                {
                    this.operationAccount(projProposalItem.salesLine().accountSalesLedgerDimension());
                    this.operationPosting(projProposalItem.salesLine().postingSales());
                }
                else
                {
                    this.operationAccount(_projTrans.revenueAccountLedgerDimension(_projTrans.fundingSource()));
                    this.operationPosting(LedgerPostingType::ProjTurnover);
                }
                break;

            case tableNum(ProjProposalOnAcc) :
                projProposalOnAcc = _projProposal;

                ProjLedgerStatusOnAcc onAccLedgerStatus = ProjRevRecHelper::getOnAccLedgerStatusForProposalOnAcc(
                    _projTrans.projTable(),
                    projProposalOnAcc,
                    projProposalOnAcc.projOnAccTrans());

                if (onAccLedgerStatus == ProjLedgerStatusOnAcc::BalanceSheet)
                {
                    this.operationAccount(_projTrans.wipInvoicedOnAccountLedgerDimension(_projTrans.fundingSource()));
                    this.operationPosting(LedgerPostingType::ProjWIPInvoicedOnAccount);
                }
                else
                {
                    this.operationAccount(_projTrans.accountOnAccountLedgerDimension(_projTrans.fundingSource()));
                    this.operationPosting(LedgerPostingType::ProjOnAccount);
                }
                break;
        }

        return [this.operationAccount(), this.operationPosting()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetExchRate</Name>
				<Source><![CDATA[
    private ExchRate GetExchRate(CurrencyCode _currencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
        Ledger::current(),
        _currencyCode,
        _exchRateDate);

        return exchangeRateHelper.getExchangeRate1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalCostExchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate ProjProposalCostExchRate_CZ()
    {
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;
        ProjInvoiceCostDetail   projInvoiceCostDetailOriginal;
        ExchRate                exchRate;
        while select projProposalCost
            where projProposalCost.ProposalId == projProposalJour.ProposalId
        join SaleRefRecId from projProposalCostDetail
            where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
        join TransStatus from projCostTransSale
            where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
        {
            if (projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                select firstOnly projInvoiceCostDetailOriginal
                    where  projInvoiceCostDetailOriginal.SaleRefRecId == projCostTransSale.RecId
                        && !projInvoiceCostDetailOriginal.RefRecId;

                ProjInvoiceJour projInvoiceJourOriginal = projInvoiceCostDetailOriginal.projInvoiceCost().projInvoiceJour();

                exchRate = this.GetExchRate(projInvoiceJourOriginal.CurrencyId,projInvoiceJourOriginal.InvoiceDate);
            }
            else
            {
                exchRate = this.GetExchRate(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalEmplExchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate ProjProposalEmplExchRate_CZ()
    {
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;
        ProjInvoiceEmplDetail   projInvoiceEmplDetailOriginal;
        ExchRate                exchRate;

        while select projProposalEmpl
            where projProposalEmpl.ProposalId == projProposalJour.ProposalId
        join SaleRefRecId from projProposalEmplDetail
            where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
        join TransStatus from projEmplTransSale
            where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
        {
            if (projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                select firstOnly projInvoiceEmplDetailOriginal
                    where  projInvoiceEmplDetailOriginal.SaleRefRecId == projEmplTransSale.RecId
                        && !projInvoiceEmplDetailOriginal.RefRecId;

                ProjInvoiceJour projInvoiceJourOriginal = projInvoiceEmplDetailOriginal.projInvoiceEmpl().projInvoiceJour();

                exchRate = this.GetExchRate(projInvoiceJourOriginal.CurrencyId,projInvoiceJourOriginal.InvoiceDate);

            }
            else
            {
                exchRate = this.GetExchRate(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalItemEchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate ProjProposalItemEchRate_CZ()

    {
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        ProjInvoiceItemDetail   projInvoiceItemDetailOriginal;
        ExchRate                exchRate;
        while select projProposalItem
            where projProposalItem.ProposalId == projProposalJour.ProposalId
        join SaleRefRecId from projProposalItemDetail
            where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
        join TransStatus from projItemTransSale
            where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
        {
            if (projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                select firstOnly projInvoiceItemDetailOriginal
                    where  projInvoiceItemDetailOriginal.SaleRefRecId == projItemTransSale.RecId
                        && !projInvoiceItemDetailOriginal.RefRecId;

                ProjInvoiceJour projInvoiceJourOriginal = projInvoiceItemDetailOriginal.projInvoiceItem().projInvoiceJour();

                exchRate = this.GetExchRate(projInvoiceJourOriginal.CurrencyId,projInvoiceJourOriginal.InvoiceDate);
            }
            else
            {
                exchRate = this.GetExchRate(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalOnAccExchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate ProjProposalOnAccExchRate_CZ()
    {
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailOriginal;
        ExchRate                exchRate;

        while select projProposalOnAcc
            where projProposalOnAcc.ProposalId == projProposalJour.ProposalId
        join SaleRefRecId from projProposalOnAccDetail
            where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
        join TransStatus from projOnAccTransSale
            where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
        {
            if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                select firstOnly projInvoiceOnAccDetailOriginal
                    where  projInvoiceOnAccDetailOriginal.SaleRefRecId == projOnAccTransSale.RecId
                        && !projInvoiceOnAccDetailOriginal.RefRecId;

                ProjInvoiceJour projInvoiceJourOriginal = projInvoiceOnAccDetailOriginal.projInvoiceOnAcc().projInvoiceJour();

                exchRate = this.GetExchRate(projInvoiceJourOriginal.CurrencyId,projInvoiceJourOriginal.InvoiceDate);
            }
            else
            {
                exchRate = this.GetExchRate(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalRevenueExchRate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate of original project invoice journal when doing a credit note.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate of original project invoice journal.
    /// </returns>
    private CustExchRate ProjProposalRevenueExchRate_CZ()
    
    {
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetailOriginal;
        ExchRate                    exchRate;

        while select projProposalRevenue
            where projProposalRevenue.ProposalId == projProposalJour.ProposalId
        join SaleRefRecId from projProposalRevenueDetail
            where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
        join TransStatus from projRevenueTransSale
            where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
        {
            if (projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                select firstOnly projInvoiceRevenueDetailOriginal
                    where  projInvoiceRevenueDetailOriginal.SaleRefRecId == projRevenueTransSale.RecId
                        && !projInvoiceRevenueDetailOriginal.RefRecId;

                ProjInvoiceJour projInvoiceJourOriginal = projInvoiceRevenueDetailOriginal.projInvoiceRevenue().projInvoiceJour();

                exchRate = this.GetExchRate(projInvoiceJourOriginal.CurrencyId,projInvoiceJourOriginal.InvoiceDate);
            }
            else
            {
                exchRate = this.GetExchRate(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    public AmountCur transLineAmount()
    {        
        #ISOCountryRegionCodes

        // Base/total amount to be considered for tax calculation when tax not applied for retention amount.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH])
            || TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
            || ProjParameters::find().CustomerTaxOptions == ProjDefaultTaxOptions::NotSplittingTaxByRetainedAmount
            || ProjOnAccTrans::find(projTrans.transId()).TransactionOrigin == ProjOrigin::Deduction)
        {
            return projTrans.transTaxBaseAmount();
        }
        else
        {
            return projTrans.transTaxBaseAmount() - this.transRetainedAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRetainedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///Calculates the retained amount for the transaction.
    ///</summary>
    /// <returns>
    /// Retained amount for transaction.
    /// </returns>
    private AmountMST transRetainedAmount()
    {
        PSAProjProposalProj projProposalProj;

        select firstonly RetainedPercent from projProposalProj
            where projProposalProj.ProjProposalId == projInvoiceId
                && projProposalProj.ProjId == projTrans.projId()
                && projProposalProj.ContractLineNum == projTrans.psaContractLineNum()
                && projProposalProj.IsPreBill == NoYes::No;

        AmountMST retainedAmount = (projTrans.transTaxBaseAmount() * projProposalProj.RetainedPercent) / 100;

        return retainedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    public MarkupTrans nextMarkupLine()
    {
        MarkupTrans salesTableMarkupTrans;

        if (querySalesTableMarkup)
        {
            if (!firstMarkup)
            {
                salesTableMarkupTrans   = super();
            }
            else
            {
                firstMarkup             = false;
            }

            if (salesTableMarkupTrans)
            {
                return salesTableMarkupTrans;
            }

            SalesTable salesTableMarkup = null;

            while (querySalesTableMarkup.next())
            {
                salesTableMarkup = this.queryGetSalesTable(querySalesTableMarkup);

                if (salesTableMarkup)
                {
                    this.initCursorMarkup(salesTableMarkup.TableId, salesTableMarkup.RecId);

                    salesTableMarkupTrans = super();

                    if (salesTableMarkupTrans)
                    {
                        return salesTableMarkupTrans;
                    }
                }
            }

            return salesTableMarkupTrans;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return SalesTotalsProjProposalContract::newFromProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = projProposalJour)
    {
        projProposalJour = _projProposalJour;

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceJourOrig</Name>
				<Source><![CDATA[
    internal ProjInvoiceJour parmProjInvoiceJourOrig(ProjInvoiceJour _projInvoiceJourOrig = projInvoiceJourOrig)
    {
        projInvoiceJourOrig = _projInvoiceJourOrig;

        return projInvoiceJourOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerPostingJournal,
                     NoYes _post = NoYes::Yes)
    {
        TaxProjInvoice taxProjInvoice = new TaxProjInvoice(
            _post,
            this,
            this.tax().tmpTaxWorkTrans());

        taxProjInvoice.updateAndPost(
            LedgerPostingController::newForLedgerPostingJournal(_ledgerPostingJournal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    QueryRun  queryBuild()
    {
        QueryRun query = new QueryRun(queryStr(ProjProposalTax));

        query.query().dataSourceTable(tableNum(ProjProposalJour)).rangeField(fieldNum(ProjProposalJour,ProposalId)).value(SysQuery::value(projInvoiceId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildSalesTable()
    {
        return new QueryRun(projProposalJour.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common  queryGet(QueryRun  transact)
    {
        projProposalItem = transact.get(tableNum(ProjProposalItem));

        salesLine = SalesLine::findInventTransId(projProposalItem.InventTransId);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable queryGetSalesTable(QueryRun _queryRun)
    {
        SalesTable querySalesTable;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    public RecId recID()
    {
        return projProposalJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigMarkUp</Name>
				<Source><![CDATA[
    protected void setOrigMarkUp()
    {
        return ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    public void setTax(TaxWriteCode _taxWriteCode, AmountCur _amountCur = 0)
    {
        switch (this.transTableId())
        {
            case(tableNum(ProjProposalEmpl)):
                projProposalEmpl.TaxWriteCode       = _taxWriteCode;
                projProposalEmpl.TaxAmount          = _amountCur;
                projProposalEmpl.update();
                break;

            case(tableNum(ProjProposalCost)):
                projProposalCost.TaxWriteCode       = _taxWriteCode;
                projProposalCost.TaxAmount          = _amountCur;
                projProposalCost.update();
                break;

            case(tableNum(ProjProposalItem)):
                projProposalItem.TaxWriteCode       = _taxWriteCode;
                projProposalItem.TaxAmount          = _amountCur;
                projProposalItem.update();
                break;

            case(tableNum(MarkupTrans)):
                markupTrans.TaxWriteCode            = _taxWriteCode;
                markupTrans.TaxAmount               = _amountCur;
                markupTrans.update();
                break;

            case(tableNum(ProjProposalRevenue)):
                projProposalRevenue.TaxWriteCode    = _taxWriteCode;
                projProposalRevenue.TaxAmount       = _amountCur;
                projProposalRevenue.update();
                break;

            case(tableNum(ProjProposalOnAcc)):
                projProposalOnAcc.TaxWriteCode      = _taxWriteCode;
                projProposalOnAcc.TaxAmount         = _amountCur;
                projProposalOnAcc.update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public TableId tableId()
    {
        return projProposalJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// If certain criteria meet, gets the taxation origin from the Imported Content per Item table
    /// </summary>
    /// <returns>
    /// The taxation origin of the item in the sales line
    /// </returns>
    public FITaxationOrigin_BR taxationOrigin_BR()
    {
        ImportedContentPerItem_BR   importedContentPerItem;

        if (salesTable.SalesType != SalesType::ReturnItem)
        {
            FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecId(projProposalJour.FiscalDocumentType_BR);

            importedContentPerItem = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                              fiscalDocumentType.FiscalDocumentModel,
                                                                              FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                              FiscalDocDirection_BR::Outgoing,
                                                                              this.invoiceDate(),
                                                                              CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId,
                                                                              projProposalItem.ItemId);
        }

        if (importedContentPerItem)
        {
            return importedContentPerItem.TaxationOrigin;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation  triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return NoYes::No;
        }

        return Currency::triangulation(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container used to pass various data between methods.
    /// </summary>
    /// <returns>
    /// A container containing various data.
    /// </returns>
    public container vatRegData_W()
    {
        #ISOCountryRegionCodes

        VatDueDate_W vatDate = this.projInvoiceParmTable().VatDueDate_W;
        CzPostponeVAT postponeVAT;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        PlCustVendName custVendName;
        VATNum vatNum;
        Addressing addressing;
        DocumentDate documentDate;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            postponeVAT = this.projInvoiceParmTable().PostponeVAT && projProposalJour.creditNote_CZ();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
           taxPeriodPaymentCode = projProposalJour.TaxPeriodPaymentCode_PL;
           CustTable custTable = CustTable::find(this.projInvoiceParmTable().InvoiceAccount);
           custVendName = custTable.name();
           addressing = custTable.address();
           vatNum = custTable.VATNum;
           documentDate = this.projInvoiceParmTable().DocumentDate_W;
        }

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 postponeVAT,
                 NoYes::No];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate markupAmount for invoice proposal.
    /// </summary>
    /// <returns>
    /// markupAmount value.
    /// </returns>
    public MarkupAmount markupAmount()
    {
        AmountCur  value = 0;
        salesTotals = SalesTotals::construct(projProposalJour);

        if (projTrans)
        {
            value = projTrans.transTurnover();
        }
        else if (salesTotals)
        {
            value = salesTotals.totalOrderBalance(markupTrans.TransRecId);
        }

        return  markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTrans</Name>
				<Source><![CDATA[
    internal ProjTrans parmProjTrans(ProjTrans _projTrans = projTrans)
    {
        projTrans = _projTrans;
        return projTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>