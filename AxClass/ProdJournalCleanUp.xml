<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCleanUp extends RunBaseBatch implements BatchRetryable
{
    ProdJournalCleanUpMode      cleanUpMode;
    DialogRunbase               dialog;
    DialogField                 dialogCleanUpMode;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanUpMode
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletePostedJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes posted production journals.
    /// </summary>
    private void deletePostedJournals()
    {
        new SysDaDeleteStatement().execute(new SysDaDeleteObject(this.buildDeletePostedJournalsQuery()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeletePostedJournalsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for deleting posted production journals.
    /// </summary>
    /// <returns>A query for the deletion.</returns>
    protected SysDaQueryObject buildDeletePostedJournalsQuery()
    {
        ProdJournalTable prodJournalTable;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);

        SysDaQueryObject deleteQuery = new SysDaQueryObject(prodJournalTable);
        deleteQuery.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(prodJournalTable, fieldStr(ProdJournalTable, Posted)), new SysDaValueExpression(NoYes::Yes)));

        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes completed production journals.
    /// </summary>
    private void deleteCompletedJournals()
    {
        new SysDaDeleteStatement().execute(new SysDaDeleteObject(this.buildDeleteCompletedJournalsQuery()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for deleting completed production journal BOMs.
    /// </summary>
    /// <returns>The query object for the deletion.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalsQuery()
    {
        ProdJournalTable    prodJournalTable;
        ProdTable           prodTable;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);

        SysDaQueryObject deleteQuery = new SysDaQueryObject(prodJournalTable);
        deleteQuery = deleteQuery.joinClause(SysDaJoinKind::ExistsJoin, this.deleteCompletedJournalsProdTableJoinClause(prodTable, prodJournalTable));
        
        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedJournalsProdTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production journal join clause for deleting completed production journal BOMs.
    /// </summary>
    /// <param name = "_prodTable">A production order record.</param>
    /// <param name = "_prodJournalTable">A production journal record.</param>
    /// <returns>The query object for the join.</returns>
    protected SysDaQueryObject deleteCompletedJournalsProdTableJoinClause(ProdTable _prodTable, ProdJournalTable _prodJournalTable)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodTable);

        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaAndExpression(
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdId)), new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, ProdId))),
                        new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdStatus)), new SysDaValueExpression(ProdStatus::Completed))),
                    new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, Posted)), new SysDaValueExpression(NoYes::Yes))),
                new SysDaNotEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, ProdId)), new SysDaValueExpression(''))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedProductionJournalBOMs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes completed production journal BOMs.
    /// </summary>
    private void deleteCompletedProductionJournalBOMs()
    {
        SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();
        deleteStatement.execute(new SysDaDeleteObject(this.buildDeleteCompletedProductionJournalBOMsQuery()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedProductionJournalBOMsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for deleting completed production journal BOMs.
    /// </summary>
    /// <returns>The query object for the deletion.</returns>
    protected SysDaQueryObject buildDeleteCompletedProductionJournalBOMsQuery()
    {
        ProdJournalBOM      prodJournalBOM;
        ProdTable           prodTable;
        ProdJournalTable    prodJournalTable;

        prodJournalBOM.skipDataMethods(true);
        prodJournalBOM.skipDeleteActions(true);

        SysDaQueryObject deleteQuery = new SysDaQueryObject(prodJournalBOM);
        deleteQuery = deleteQuery.joinClause(SysDaJoinKind::ExistsJoin, this.deleteCompletedProductionJournalBOMsProdJournalTableJoinClause(prodJournalTable, prodJournalBOM))
                        .joinClause(SysDaJoinKind::ExistsJoin, this.deleteCompletedProductionJournalBOMsProdTableJoinClause(prodTable, prodJournalBOM));
        
        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedProductionJournalBOMsProdJournalTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production journal join clause for deleting completed production journal BOMs.
    /// </summary>
    /// <param name = "_prodJournalTable">A production journal record.</param>
    /// <param name = "_prodJournalBOM">A production journal BOM record.</param>
    /// <returns>The query object for the join.</returns>
    protected SysDaQueryObject deleteCompletedProductionJournalBOMsProdJournalTableJoinClause(ProdJournalTable _prodJournalTable, ProdJournalBOM _prodJournalBOM)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodJournalTable);

        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, JournalId)), new SysDaFieldExpression(_prodJournalBOM, fieldStr(ProdJournalBOM, JournalId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, Posted)), new SysDaValueExpression(NoYes::Yes))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedProductionJournalBOMsProdTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production order join clause for deleting completed production journal BOMs.
    /// </summary>
    /// <param name = "_prodTable">A production order buffer.</param>
    /// <param name = "_prodJournalBOM">A production journal BOM buffer.</param>
    /// <returns>A query object.</returns>
    protected SysDaQueryObject deleteCompletedProductionJournalBOMsProdTableJoinClause(ProdTable _prodTable, ProdJournalBOM _prodJournalBOM)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodTable);
        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdId)), new SysDaFieldExpression(_prodJournalBOM, fieldStr(ProdJournalBOM, ProdId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdStatus)), new SysDaValueExpression( ProdStatus::Completed))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedJournalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes completed production journal transactions.
    /// </summary>
    private void deleteCompletedJournalTransactions()
    {
        SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();
        deleteStatement.execute(new SysDaDeleteObject(this.buildDeleteCompletedJournalTransactionsQuery()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalTransactionsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for deletion of completed production journal transactions.
    /// </summary>
    /// <returns>A query object.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalTransactionsQuery()
    {
        ProdJournalProd     prodJournalProd;
        ProdJournalTable    prodJournalTable;
        ProdTable           prodTable;

        prodJournalProd.skipDataMethods(true);
        prodJournalProd.skipDeleteActions(true);

        SysDaQueryObject deleteQuery = new SysDaQueryObject(prodJournalTable);

        deleteQuery = deleteQuery
                        .joinClause(SysDaJoinKind::ExistsJoin, this.buildDeleteCompletedJournalTransactionsProdJournalTableJoinClause(prodJournalTable, prodJournalProd))
                        .joinClause(SysDaJoinKind::ExistsJoin, this.buildDeleteCompletedJournalTransactionsProdTableJoinClause(prodTable, prodJournalProd));

        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalTransactionsProdJournalTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production journal join clause for the deletion of completed journal transactions.
    /// </summary>
    /// <param name = "_prodJournalTable">A production journal.</param>
    /// <param name = "_prodJournalProd">A production journal transaction.</param>
    /// <returns>A query with the join clause.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalTransactionsProdJournalTableJoinClause(ProdJournalTable _prodJournalTable, ProdJournalProd _prodJournalProd)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodJournalTable);
        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, JournalId)), new SysDaFieldExpression(_prodJournalProd, fieldStr(ProdJournalProd, JournalId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, Posted)), new SysDaValueExpression(NoYes::Yes))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalTransactionsProdTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production order join clause for the deletion of completed production journals.
    /// </summary>
    /// <param name = "_prodTable">A production order.</param>
    /// <param name = "_prodJournalProd">A production journal transaction.</param>
    /// <returns>A query with the join clause.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalTransactionsProdTableJoinClause(ProdTable _prodTable, ProdJournalProd _prodJournalProd)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodTable);
        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdId)), new SysDaFieldExpression(_prodJournalProd, fieldStr(ProdJournalProd, ProdId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdStatus)), new SysDaValueExpression(ProdStatus::Completed))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedJournalRoutes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes completed production journal routes.
    /// </summary>
    private void deleteCompletedJournalRoutes()
    {
        new SysDaDeleteStatement().execute(new SysDaDeleteObject(this.buildDeleteCompletedJournalRoutes()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalRoutes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes completed production journal routes.
    /// </summary>
    /// <returns>A query object.</returns>
    private SysDaQueryObject buildDeleteCompletedJournalRoutes()
    {
        ProdJournalRoute    prodJournalRoute;
        ProdJournalTable    prodJournalTable;
        ProdTable           prodTable;

        prodJournalRoute.skipDataMethods(true);
        prodJournalRoute.skipDeleteActions(true);

        SysDaQueryObject deleteQuery = new SysDaQueryObject(prodJournalTable);

        deleteQuery = deleteQuery
            .joinClause(SysDaJoinKind::ExistsJoin, this.buildDeleteCompletedJournalRoutesProdJournalTableJoinClause(prodJournalTable, prodJournalRoute))
            .joinClause(SysDaJoinKind::ExistsJoin, this.buildDeleteCompletedJournalRoutesProdTableJoinClause(prodTable, prodJournalRoute));

        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalRoutesProdJournalTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production journal join clause for the deletion of completed journal routes.
    /// </summary>
    /// <param name = "_prodJournalTable">A production journal record.</param>
    /// <param name = "_prodJournalRoute">A production journal route.</param>
    /// <returns>A query with the join clause.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalRoutesProdJournalTableJoinClause(ProdJournalTable _prodJournalTable, ProdJournalRoute _prodJournalRoute)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodJournalTable);
        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, JournalId)), new SysDaFieldExpression(_prodJournalRoute, fieldStr(ProdJournalRoute, JournalId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodJournalTable, fieldStr(ProdJournalTable, Posted)), new SysDaValueExpression(NoYes::Yes))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteCompletedJournalRoutesProdTableJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the production order join clause for the deletion of completed journal routes.
    /// </summary>
    /// <param name = "_prodTable">A production order.</param>
    /// <param name = "_prodJournalRoute">A production journal route.</param>
    /// <returns>A query with the join clause.</returns>
    protected SysDaQueryObject buildDeleteCompletedJournalRoutesProdTableJoinClause(ProdTable _prodTable, ProdJournalRoute _prodJournalRoute)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(_prodTable);
        joinQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdId)), new SysDaFieldExpression(_prodJournalRoute, fieldStr(ProdJournalRoute, ProdId))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdStatus)), new SysDaValueExpression(ProdStatus::Completed))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournals</Name>
				<Source><![CDATA[
    protected void deleteJournals()
    {
        ProdTable           prodTable;
        ProdJournalTable    prodJournalTable;

        if (cleanUpMode == ProdJournalCleanUpMode::AllPosted)
        {
            this.deletePostedJournals();
        }
        else
        {
            prodJournalTable.skipDataMethods(true);
            prodJournalTable.skipDeleteActions(true);

            delete_from prodJournalTable
                where prodJournalTable.Posted   == NoYes::Yes   &&
                      prodJournalTable.ProdId   != ''
                notexists join prodTable
                where prodTable.ProdId          == prodJournalTable.ProdId;

            this.deleteCompletedJournals();
        }

        ProdJournalBOM prodJournalBOM;
        prodJournalBOM.skipDataMethods(true);
        prodJournalBOM.skipDeleteActions(true);
        delete_from prodJournalBOM
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalBOM.JournalId;

        this.deleteCompletedProductionJournalBOMs();

        ProdJournalProd prodJournalProd;
        prodJournalProd.skipDataMethods(true);
        prodJournalProd.skipDeleteActions(true);
        delete_from prodJournalProd
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalProd.JournalId;

        this.deleteCompletedJournalTransactions();

        ProdJournalRoute prodJournalRoute;
        prodJournalRoute.skipDataMethods(true);
        prodJournalRoute.skipDeleteActions(true);
        delete_from prodJournalRoute
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalRoute.JournalId;

        this.deleteCompletedJournalRoutes();

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where prodJournalTable.JournalType  == ProdJournalType::Picklist     &&
                  prodJournalTable.Posted       == NoYes::Yes
            notexists join prodJournalBOM
            where prodJournalBOM.JournalId == prodJournalTable.JournalId;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where prodJournalTable.JournalType  == ProdJournalType::ReportFinished  &&
                  prodJournalTable.Posted       == NoYes::Yes
            notexists join prodJournalProd
            where prodJournalProd.JournalId == prodJournalTable.JournalId;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where (prodJournalTable.JournalType == ProdJournalType::RouteCard   ||
                   prodJournalTable.JournalType == ProdJournalType::JobCard)    &&
                   prodJournalTable.Posted      == NoYes::Yes
            notexists join prodJournalRoute
            where prodJournalRoute.JournalId == prodJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogCleanUpMode = dialog.addFieldValue(enumstr(ProdJournalCleanUpMode),cleanUpMode);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        cleanUpMode = dialogCleanUpMode.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        cleanUpMode = ProdJournalCleanUpMode::AllPostedOnEndedProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.deleteJournals();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The task is run on the server.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalCleanUp construct()
    {
        return new ProdJournalCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS74933";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdJournalCleanUp  prodJournalCleanUp = ProdJournalCleanUp::newStandard();

        if (!prodJournalCleanUp.prompt())
        {
            return;
        }

        prodJournalCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static ProdJournalCleanUp newStandard()
    {
        ProdJournalCleanUp  prodJournalCleanUp = ProdJournalCleanUp::construct();

        prodJournalCleanUp.getLast();
        prodJournalCleanUp.init();

        return prodJournalCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>