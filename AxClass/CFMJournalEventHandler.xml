<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The CFMJournalEventHandler workflow event handler.
/// </summary>
public class  CFMJournalEventHandler implements WorkflowCanceledEventHandler,
    WorkflowCompletedEventHandler,
    WorkflowStartedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the business logic necessary to compensate for business logic that may have been invoked
    ///    during workflow execution.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void returned(WorkflowEventArgs _workflowEventArgs)
    {
        CFMJournalTable::setWorkflowStatus(_workflowEventArgs.parmWorkflowContext().parmRecId(), CFMJournalWorkflowStatus::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the business logic necessary to compensate for business logic that may have been invoked
    ///    during workflow execution.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
	{
        CFMJournalTable::setWorkflowStatus(_workflowEventArgs.parmWorkflowContext().parmRecId(), CFMJournalWorkflowStatus::Submitted);
	}

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the business logic necessary to compensate for business logic that may have been invoked
    ///    during workflow execution.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
	{
        CFMJournalTable::setWorkflowStatus(_workflowEventArgs.parmWorkflowContext().parmRecId(), CFMJournalWorkflowStatus::NotSubmitted);
	}

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the business logic necessary to complete the workflow instance.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
	{
        CFMJournalTable::setWorkflowStatus(_workflowEventArgs.parmWorkflowContext().parmRecId(), CFMJournalWorkflowStatus::Approved);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>