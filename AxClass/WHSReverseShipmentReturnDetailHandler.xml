<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReverseShipmentReturnDetailHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReverseShipmentReturnDetailHandler</c> class is responsible for handling the <c>WHSReturnDetail</c> and <c>WHSReturnLineDetail</c> data
/// when <c>WHSLoadTable</c> a shipment confirmation is reversed.
/// </summary>
internal final class WHSReverseShipmentReturnDetailHandler
{
    private WHSLoadId loadId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadId</Name>
				<Source><![CDATA[
    internal static WHSReverseShipmentReturnDetailHandler newFromLoadId(WHSLoadId _loadId)
    {
        WHSReverseShipmentReturnDetailHandler handler = new WHSReverseShipmentReturnDetailHandler();
        handler.loadId = _loadId;

        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetShipmentDateAndReturnUntilDate</Name>
				<Source><![CDATA[
    internal void resetShipmentDateAndReturnUntilDate()
    {
        if (loadId)
        {
        
            if (WHSUseReturnDetailConfigurationProviderFlight::instance().isEnabled())
            {
                if (WHSReturnDetailConfigurationProvider::considerReturnDetailsForDeletion())
                {
                    if(!this.hasContainer())
                    {
                        ttsbegin;
                        this.deleteReturnDetails();
                        ttscommit;
                    }
                    else
                    {
                        ttsbegin;
                        this.removeReturnUntilDate();
                        this.removeShipmentDate();
                        ttscommit;
                    }
                }
              
            }
            else
            {
                if (WHSParameters::isReturnDetailsCreationEnabled())
                {
                    if(!this.hasContainer())
                    {
                        ttsbegin;
                        this.deleteReturnDetails();
                        ttscommit;
                    }
                    else
                    {
                        ttsbegin;
                        this.removeReturnUntilDate();
                        this.removeShipmentDate();
                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasContainer</Name>
				<Source><![CDATA[
    private boolean hasContainer()
    {
        WHSContainerTable containerTable;
        WHSShipmentTable shipmentTable;
                
        select firstonly RecId from containerTable
            exists join shipmentTable
            where shipmentTable.ShipmentId == containerTable.ShipmentId
                && shipmentTable.LoadId == this.loadId;
        
        return containerTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReturnUntilDate</Name>
				<Source><![CDATA[
    private void removeReturnUntilDate()
    {
        WHSShipmentTable shipment;
        WHSReturnDetail returnDetail;
        WHSReturnLineDetail returnLineDetail;

        update_recordset returnLineDetail
            setting ReturnUntilUTCDateTime = utcDateTimeNull()
            exists join returnDetail
                where returnDetail.ReturnID == returnLineDetail.returnId
            exists join shipment
                where shipment.ShipmentId == returnDetail.ShipmentId
                    && shipment.LoadId == loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeShipmentDate</Name>
				<Source><![CDATA[
    private void removeShipmentDate()
    {
        WHSShipmentTable shipment;
        WHSReturnDetail returnDetail;

        update_recordset returnDetail
            setting ShipUTCDateTime = utcDateTimeNull()
             exists join shipment where shipment.ShipmentId == returnDetail.ShipmentId
                 && shipment.LoadId == loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReturnDetails</Name>
				<Source><![CDATA[
    private void deleteReturnDetails()
    {
        WHSReturnDetail returnDetail;
        WHSShipmentTable shipment;
        
        while select forupdate returnDetail
            exists join shipment
            where shipment.ShipmentId == returnDetail.ShipmentId 
                && shipment.LoadId == loadId
        {
            returnDetail.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>