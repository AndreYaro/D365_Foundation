<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorVisitorConfigurationReuse</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAdaptorVisitorConfigurationReuse</c> class is the adapter visitor that is used to decorate
/// the adapter data structure with configuration reuse information.
/// </summary>
class PcAdaptorVisitorConfigurationReuse extends PCAdaptorVisitor
{
    ItemId          rootItemId;

    InventSiteId    supplyInventSiteId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReuseCodeForComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a reuse code for a specified component.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An adapter component.
    /// </param>
    protected void buildReuseCodeForComponent(PCAdaptorComponent _adaptorComponent)
    {
        MapEnumerator                       attributeEnumerator;
        PCConfigurationReuseCodeBuilder     reuseCodeBuilder;
        PCAdaptorAttribute                  adaptorAttribute;

        PCContractNotNull::assertObject(_adaptorComponent, funcName());

        if (_adaptorComponent.isReuseEnabled() == PCComponentConfigurationReuseType::Yes)
        {
            attributeEnumerator     = _adaptorComponent.getAttributeEnumerator();
            reuseCodeBuilder        = _adaptorComponent.parmConfigurationReuseCodeBuilder();

            while (attributeEnumerator.moveNext())
            {
                adaptorAttribute = attributeEnumerator.currentValue();

                if (adaptorAttribute.parmIsIncludedInReuse() == NoYes::Yes)
                {
                    reuseCodeBuilder.addAttributeAssignment(adaptorAttribute.getName(), adaptorAttribute.parmParsedValue());
                }
            }

            this.includeReuseCodeForSubComponents(_adaptorComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSubComponentsSatisfyReuseCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the subcomponents satisfy the configuration reuse criteria.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An adapter component.
    /// </param>
    /// <returns>
    /// true if all the subcomponents satisfy the configuration reuse criteria; otherwise, false.
    /// </returns>
    protected boolean checkIfSubComponentsSatisfyReuseCriteria(PCAdaptorComponent _adaptorComponent)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeReuseCodeForSubComponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Includes the configuration reuse code for the subcomponents of a component.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    protected void includeReuseCodeForSubComponents(PCAdaptorComponent _adaptorComponent)
    {
        MapEnumerator                       subComponentEnumerator;
        PCAdaptorSubComponent               adaptorSubComponent;
        PCAdaptorComponent                  adaptorComponent;
        PCConfigurationReuseCodeBuilder     reuseCodeBuilder = _adaptorComponent.parmConfigurationReuseCodeBuilder();

        PCContractNotNull::assertObject(_adaptorComponent, funcName());

        subComponentEnumerator = _adaptorComponent.getSubComponentEnumerator();

        while (subComponentEnumerator.moveNext())
        {
            adaptorSubComponent = subComponentEnumerator.currentValue();
            adaptorComponent    = adaptorSubComponent.getComponent();

            // Child subcomponent and user requirements' attribute assignments will be added to their parent's attribute assignments for configuration reuse
            if ( adaptorComponent.isReuseEnabled() == PCComponentConfigurationReuseType::Yes)
            {
                reuseCodeBuilder.addSubComponentAssignment(adaptorSubComponent.getName(), adaptorComponent.getReuseValuesAsString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>PCAdaptorVisitorConfigurationReuse</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventSiteId">
    /// An inventory site ID.
    /// </param>
    public void initialize(ItemId _itemId, InventSiteId _inventSiteId)
    {
        this.parmRootItemId(_itemId);
        this.parmInventSiteId(_inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = supplyInventSiteId)
    {
        supplyInventSiteId = _inventSiteId;

        return supplyInventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootItemId</Name>
				<Source><![CDATA[
    public ItemId parmRootItemId(ItemId _itemId = rootItemId)
    {
        rootItemId = _itemId;

        return rootItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsComponentConfigurationResuable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether a component qualifies for configuration reuse.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// An adapter component.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    protected void setIsComponentConfigurationResuable(PCAdaptorComponent _adaptorComponent, ItemId _itemId)
    {
        MapEnumerator           subcomponentsEnumerator;
        PCAdaptorSubComponent   adaptorSubComponent;
        PCAdaptorComponent      childAdaptorComponent;

        // set if a new reuse entry should be created, this requires that the component and all it's children are reuse enabled
        if (_adaptorComponent.isReuseEnabled())
        {
            _adaptorComponent.parmCreateNewReuseEntry(true);

            subcomponentsEnumerator = _adaptorComponent.getSubComponentEnumerator();

            while (subcomponentsEnumerator.moveNext())
            {
                adaptorSubComponent     = subcomponentsEnumerator.currentValue();
                childAdaptorComponent   = adaptorSubComponent.getComponent();

                if (!childAdaptorComponent.parmCreateNewReuseEntry())
                {
                    _adaptorComponent.parmCreateNewReuseEntry(false);
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentEnd</Name>
				<Source><![CDATA[
    public void visitRootComponentEnd(PCAdaptorRootComponent _adaptorRootComponent)
    {
        this.buildReuseCodeForComponent(_adaptorRootComponent);

        this.setIsComponentConfigurationResuable(_adaptorRootComponent, rootItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentEnd</Name>
				<Source><![CDATA[
    public void visitSubComponentEnd(PCAdaptorSubComponent _adaptorSubComponent)
    {
        PCAdaptorComponent adaptorComponent = _adaptorSubComponent.getComponent();

        this.buildReuseCodeForComponent(adaptorComponent);

        this.setIsComponentConfigurationResuable(adaptorComponent, _adaptorSubComponent.getItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorVisitorConfigurationReuse construct()
    {
        return new PCAdaptorVisitorConfigurationReuse();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>