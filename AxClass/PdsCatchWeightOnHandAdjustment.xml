<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightOnHandAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PdsCatchWeightOnhandAdjustment</c> is used to adjust the on-hand weight of CW items.
/// </summary>
class PdsCatchWeightOnHandAdjustment
{
    InventMovement  inventMovement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>increaseQuantityIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases the on-hand quantity if needed.
    /// </summary>
    /// <param name="_inventOnHandQty">
    ///     Provides on-hand data to determine whether adjustment is needed.
    /// </param>
    /// <param name="_qty">
    ///     The additional inventory quantity of related inventory update.
    /// </param>
    /// <param name="_cwQty">
    ///     The additional catch weight quantity of related inventory update.
    /// </param>
    /// <param name="_adjustmentDimId">
    ///     The ID of inventory dimension for which to adjust the quantity.
    /// </param>
    /// <remarks>
    ///     The adjustment is done if all of the following is met:
    ///     - The additional transaction catch weight quantity is not exceeding the on hand availability.
    ///     - The additional transaction quantity is exceeding the on hand availability (including keeping the
    ///         remaining catch weight units within their minimum inventory quantities).
    /// </remarks>
    public void increaseQuantityIfNeeded(
        InventOnHandQty _inventOnHandQty,
        InventQty       _qty,
        PdsCWInventQty  _cwQty,
        InventDimId     _adjustmentDimId)
    {
        InventMov_Virtuel       movement_Virtuel;
        InventUpd_Financial     financial_Virtuel;
        NumberSeq               numberSeq;
        InventQty               minimumQtyRequiredOnHand;
        InventQty               quantityMissing;
        InventQty               physicalQty;
        PdsCWInventQty          physicalCWQty;
        PdsCWInventQty          physicalCWQtyLeftOnHand;
        LedgerVoucher           ledgerVoucher;
        LedgerVoucherObject     ledgerVoucherObject;
        ItemId                  itemId = inventMovement.itemId();
        boolean                 cwItem = PdsGlobal::pdsIsCWItem(itemId);

        if (cwItem)
        {
            physicalCWQty = _inventOnHandQty.pdsCWAvailPhysical();
            physicalQty = _inventOnHandQty.availPhysical();
            physicalCWQtyLeftOnHand = abs(physicalCWQty) - abs(_cwQty);

            if (physicalCWQtyLeftOnHand >= 0)   // Do not adjust if we try to take more CW than available
            {
                minimumQtyRequiredOnHand = PdsCatchWeight::minInventQty(itemId, physicalCWQtyLeftOnHand);
                quantityMissing = minimumQtyRequiredOnHand + abs(_qty) - abs(physicalQty);

                if (quantityMissing > 0)
                {
                    movement_Virtuel = PdsCW_InventMov_Vir_CWLoss::newParameters(
                                        itemId,
                                        _adjustmentDimId,
                                        inventMovement.transDate() ? inventMovement.transDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                        quantityMissing,
                                        0,
                                        inventMovement.defaultDimension());

                    numberSeq = NumberSeq::newGetNum(InventParameters::numRefTransferVoucherId());

                    ledgerVoucher  = LedgerVoucher::newLedgerPost(DetailSummary::Summary,SysModule::Invent,numberSeq.parmNumberSequenceCode());

                    ledgerVoucherObject = LedgerVoucherObject::newVoucher(numberSeq.num(),
                                                            movement_Virtuel.transDate(),
                                                            SysModule::Invent,
                                                            LedgerTransType::Invent);

                    ledgerVoucher.addVoucher(ledgerVoucherObject);

                    financial_Virtuel = InventUpd_Financial::newCWAutoAdjust(
                                        movement_Virtuel,
                                        ledgerVoucher);

                    financial_Virtuel.parmSkipCWAutoAdjust(true);

                    financial_Virtuel.updateNow();

                    ledgerVoucher.end();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
    protected InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;
        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PdsCatchWeightOnHandAdjustment construct()
    {
        return new PdsCatchWeightOnHandAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of <c>PdsCatchWeightOnhandAdjustment</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///     The <c>InventMovement</c> object for which the adjustment is executed.
    /// </param>
    /// <returns>
    ///     A new instance of <c>PdsCatchWeightOnhandAdjustment</c> class.
    /// </returns>
    public static PdsCatchWeightOnHandAdjustment newMovement(
        InventMovement  _inventMovement)
    {
        PdsCatchWeightOnHandAdjustment  pdsCatchWeightOnHandAdjustment = PdsCatchWeightOnHandAdjustment::construct();
        pdsCatchWeightOnHandAdjustment.parmInventMovement(_inventMovement);
        return pdsCatchWeightOnHandAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOnhandWeightWithinThresholds</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Adjusts the weight of on hand inventory if it is not within weight thresholds.
    /// </summary>
    /// <param name = "_itemId">
    ///		The Id of the item for which to adjust quantity.
    /// </param>
    /// <param name = "_adjustmentDimId">
    ///		The Id of inventory dimension for which to adjust the quantity.
    /// </param>
    /// <returns>The quantity that was adjusted. If zero is returned no adjustment was needed.</returns>    
    /// <remarks>
    ///     This method should only be used for warehouse management enabled items.
    ///     This method will increase on hand weight if it is below the minimum threshold for current on hand cwQty.
    ///     This method will decrease weight if cwQty is zero and there is remaining invent qty (weight).
    /// </remarks>
    [Hookable(false)]
    internal static WHSTransWeight adjustOnhandWeightWithinThresholds(ItemId _itemId, InventDimId _adjustmentDimId)
    {
        WHSTransWeight	quantityToAdjust;
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            ttsBegin;

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_itemId, InventDim::find(_adjustmentDimId));
            inventOnHandQty.parmInventDimId(_adjustmentDimId);

            //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
            inventOnHandQty.parmDelayAvailabilityCalculation(true);

            PdsCWInventQty	physicalCWQtyLeftOnHand = inventOnHandQty.pdsCWPhysicalInvent();

            if (physicalCWQtyLeftOnHand >= 0)   // Do not adjust if cwQty is negative
            {
                WHSTransWeight 	physicalQty	= inventOnHandQty.physicalInvent();

                // If catch weight quantity is zero then we must adjust out on hand weight.
                if (physicalCWQtyLeftOnHand == 0 && physicalQty > 0)
                {
                    quantityToAdjust = -physicalQty;
                }
                else
                {
                    // Check if current on hand weight is at least minimum weight required.
                    WHSTransWeight minimumQtyRequiredOnHand = PdsCatchWeight::minInventQty(_itemId, physicalCWQtyLeftOnHand);
                    // This check should never result in adjusting out inventory.
                    // Attempt to adjust up to the minimum weight
                    quantityToAdjust = max(0, minimumQtyRequiredOnHand - physicalQty);

                    if (!quantityToAdjust)
                    {
                        // Check the current on hand weight is over the maximum weight limit.
                        WHSTransWeight maximumQtyRequiredOnHand = PdsCatchWeight::maxInventQty(_itemId, physicalCWQtyLeftOnHand);
                        quantityToAdjust = min(0, maximumQtyRequiredOnHand - physicalQty);
                    }
                }

                if (quantityToAdjust != 0)
                {
                    InventMovement movement_Virtuel = PdsCW_InventMov_Vir_CWLoss::newParameters(
                                                        _itemId,
                                                        _adjustmentDimId,
                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                        quantityToAdjust,
                                                        0,
                                                        InventSite::changeDimension(InventTable::find(_itemId).DefaultDimension, InventDim::find(_adjustmentDimId).InventSiteId));

                    NumberSeq numberSeq = NumberSeq::newGetNum(InventParameters::numRefTransferVoucherId());

                    LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(
                                                    DetailSummary::Summary,
                                                    SysModule::Invent,
                                                    numberSeq.parmNumberSequenceCode());

                    LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(
                                                                numberSeq.num(),
                                                                movement_Virtuel.transDate(),
                                                                SysModule::Invent,
                                                                LedgerTransType::Invent);

                    ledgerVoucher.addVoucher(ledgerVoucherObject);

                    InventUpd_Financial financial_Virtuel = InventUpd_Financial::newCWAutoAdjust(movement_Virtuel, ledgerVoucher);

                    financial_Virtuel.parmSkipCWAutoAdjust(true);

                    financial_Virtuel.updateNow();

                    ledgerVoucher.end();
                }
            }

            ttsCommit;
        }

        return quantityToAdjust;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>