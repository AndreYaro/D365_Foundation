<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendConsInvoiceController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Control class for CustVendConsInvoice_JP report
/// </summary>
/// <remarks>
/// help class divide to control class and contract class
/// </remarks>
class CustVendConsInvoiceController_JP extends SrsReportRunController implements BatchRetryable
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00007] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// getCaption by _menuItemName
    /// </summary>
    /// <param name="_menuItemName">
    /// args.menuItemName()
    /// </param>
    /// <returns>
    /// CaptionName
    /// </returns>
    /// <remarks>
    /// get caption name by menuitemname
    /// </remarks>
    public str getCaption(MenuItemName _menuItemName)
    {
        if (_menuItemName == menuItemOutputStr(CustConsInvoicePaymSlipPrint_JP))
        {
            // Payment slip
            return "@GLS60561";
        }
        else
        {
            // Consolidated Invoice
            return "@GLS60235";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// getReportName by _menuItemName
    /// </summary>
    /// <param name="_menuItemName">
    /// args.menuItemName()
    /// </param>
    /// <returns>
    /// get reportName by menuitemname
    /// </returns>
    public str getReportName(MenuItemName _menuItemName)
    {
        if (_menuItemName == menuItemOutputStr(CustConsInvoicePaymSlipPrint_JP))
        {
            return ssrsReportStr(CustConsInvoicePaymSlip_JP, Report);
        }
        else
        {
            return ssrsReportStr(CustVendConsInvoice_JP, Report);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        CustVendConsInvoiceContract_JP      contract;

        if (this.parmArgs()
            && this.parmArgs().caller()
            && this.parmArgs().record()
            && (this.parmArgs().record().TableId == tablenum(CustConsInvoice_JP)
                || this.parmArgs().record().TableId == tablenum(VendConsInvoice_JP)))
        {
            if (CustVendConsInvoiceDefaultCustomerLanguage_JPFlight::instance().isEnabled()
                && this.parmArgs().record().TableId == tablenum(CustConsInvoice_JP))
            {
                CustConsInvoice_JP custConsInvoice_JP = this.parmArgs().record();
                CustTable custTable = CustTable::find(custConsInvoice_JP.CustTable);

                this.parmReportContract().parmRdlContract().parmLanguageId(custTable.languageId());
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(custTable.languageId());
            }

            contract = this.parmReportContract().parmRdpContract() as CustVendConsInvoiceContract_JP;

            contract.parmMenuItemName(this.parmArgs().menuItemName());
            contract.parmRecordId(this.parmArgs().record().RecId);
        }
        else
        {
            // Active buffer required
            throw error("@SYS79604");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendConsInvoiceController_JP  controller = new CustVendConsInvoiceController_JP();

        controller.parmArgs(_args);
        controller.parmReportName(controller.getReportName(_args.menuItemName()));
        controller.parmDialogCaption(controller.getCaption(_args.menuItemName()));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>