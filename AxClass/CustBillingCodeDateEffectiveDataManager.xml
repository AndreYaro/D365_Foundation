<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingCodeDateEffectiveDataManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustBillingCodeDateEffectiveDataManager</c> class provides the date effectivity implementation specific to the billing code feature.
/// </summary>
class CustBillingCodeDateEffectiveDataManager extends SysDateEffectiveDataManager
{
    #define.CustBillingCodeValidTimeStateUpdateMode('CustBillingCodeValidTimeStateUpdateMode')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFutureRecord</Name>
				<Source><![CDATA[
    public void addFutureRecord(recId _oldVersionId, Common _buffer)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(CustBillingCodeDateEffectiveDataManager), 'addFutureRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the cached value of the <c>CustBillingCodeValidTimeStateUpdateMode</c> macro.
    /// </summary>
    /// <returns>
    /// The cached value of the <c>CustBillingCodeValidTimeStateUpdateMode</c> macro.
    /// </returns>
    protected str cacheKey()
    {
        return #CustBillingCodeValidTimeStateUpdateMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new version of the <c>CustBillingCodeVersion</c> effective dated table record.
    /// </summary>
    /// <param name="_custBillingCodeVersionId">
    /// The record ID of the previous version of the <c>CustBillingCodeVersion</c> effective dated table record.
    /// </param>
    /// <returns>
    /// The record ID of the new version of the <c>CustBillingCodeVersion</c> effective dated record.
    /// </returns>
    public RecId createNewVersion(RecId  _custBillingCodeVersionId)
    {
        CustBillingCodeVersion  custBillingCodeVersion;

        custBillingCodeVersion = CustBillingCodeVersion::find(_custBillingCodeVersionId,true);
        custBillingCodeVersion.ValidFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custBillingCodeVersion.doInsert();

        return custBillingCodeVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireCurrentRecord</Name>
				<Source><![CDATA[
    public void expireCurrentRecord(recId _recId)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(CustBillingCodeDateEffectiveDataManager), 'expireCurrentRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data from previous version of the billing code to the new version of billing code record in all corresponding tables.
    /// </summary>
    /// <param name="_oldVersionId">
    /// The record ID of the previous version of the <c>CustBillingCodeVersion</c> effective dated table record.
    /// </param>
    /// <param name="_newVersionId">
    /// The record ID of the new version of the  <c>CustBillingCodeVersion</c> effective dated table record.
    /// </param>
    /// <param name="_buffer">
    /// The buffer of the corresponding table in which any operation has to be performed.
    /// This parameter is used to make sure that only  a single record of the corresponding table is inserted, updated, or deleted. Once that record is processed
    /// the buffer value is set to null and no other record of  the corresponding table is processed.
    /// </param>
    /// <param name="_operationToPerform">
    /// The enumeration value used for identifying the type of the operation performed in any of the corresponding table.
    /// </param>
    public void getProcessData(RefRecId _oldVersionId, RefRecId _newVersionId, Common _buffer, SysDateEffectiveOperation _operationToPerform)
    {
        this.processData(_oldVersionId, _newVersionId,_buffer, _operationToPerform);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDateEffectiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SysDateEffectiveVersion</c> maps value for the billing code version.
    /// </summary>
    /// <returns>
    /// The <c>CustBillingCodeVersion</c> table buffer.
    /// </returns>
    public SysDateEffectiveVersion getSysDateEffectiveVersion()
    {
        CustBillingCodeVersion   custBillingCodeVersion;
        return custBillingCodeVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data from previous version of the billing code to the new version of billing code record in all corresponding tables.
    /// </summary>
    /// <param name="_oldVersionId">
    /// The record ID of the previous version of the <c>CustBillingCodeVersion</c> effective dated table record.
    /// </param>
    /// <param name="_newVersionId">
    /// The record ID of the new version of the  <c>CustBillingCodeVersion</c> effective dated table record.
    /// </param>
    /// <param name="_buffer">
    /// The buffer of the corresponding table in which any operation has to be performed.
    /// This parameter is used to make sure that only  a single record of the corresponding table is inserted, updated, or deleted. Once that record is processed
    /// the buffer value is set to null and no other record of  the corresponding table is processed.
    /// </param>
    /// <param name="_operationToPerform">
    /// The enumeration value used for identifying the type of the operation performed in any of the corresponding table.
    /// </param>
    protected void processData(RecId _oldVersionId, RecId _newVersionId, Common _buffer, SysDateEffectiveOperation _operationToPerform)
    {
        CustBillingCodeRate             custBillingCodeRate;
        CustBillingCodeLedgerAccount    custBilllingCodeLedgerAccount;
        CustBillingCodeCustomField      custBillingCodeCustomField;

        ttsbegin;

        while select custBillingCodeCustomField
            where custBillingCodeCustomField.CustBillingCodeVersion == _oldVersionId
        {
            custBillingCodeCustomField.CustBillingCodeVersion = _newVersionId;
            custBillingCodeCustomField.insert();
        }

        while select custBillingCodeRate
        where custBillingCodeRate.CustBillingCodeVersion == _oldVersionId
        {
            custBillingCodeRate.CustBillingCodeVersion = _newVersionId;
            custBillingCodeRate.insert();
        }

        while select custBilllingCodeLedgerAccount
        where custBilllingCodeLedgerAccount.CustBillingCodeVersion == _oldVersionId
        {
            custBilllingCodeLedgerAccount.CustBillingCodeVersion = _newVersionId;
            custBilllingCodeLedgerAccount.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>