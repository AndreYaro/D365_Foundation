<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyProductProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.DataModel;
using System.ComponentModel.Composition;
using System.Collections;
using CrtPricingPropertyDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyDefinition;
using CrtSalesTransaction = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction;
using CrtPricingPropertyValueContext = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyValueContext;
using CrtPricingPredefinedProperty = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPredefinedProperty;
using CrtPricingPropertyLevel = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyLevel;
using CrtPricingPropertyType = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyType;

/// <summary>
/// The property provider for product, variant and product category.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.RetailPricingPropertyValueProviderBase))]
internal final class RetailPricingPropertyProductProvider extends RetailPricingPropertyValueProviderBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>IsPropertySupported</Name>
				<Source><![CDATA[
    public boolean IsPropertySupported(CrtPricingPropertyDefinition definition)
    {
        return definition.get_PropertyLevel() == CrtPricingPropertyLevel::Line
            && definition.get_PropertyType() == CrtPricingPropertyType::Predefined
            && (
                definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Category
             || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Product
             || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Variant
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    public void Resolve(CrtPricingPropertyValueContext valueContext, CrtSalesTransaction salesTransaction)
    {
        CrtPricingPropertyDefinition categoryProperty;
        CrtPricingPropertyDefinition productProperty;
        CrtPricingPropertyDefinition variantProperty;

        IEnumerator enumerator = valueContext.get_PricingProperties().GetEnumerator();

        while (enumerator.moveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (this.IsPropertySupported(crtDefinition))
            {
                if (crtDefinition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Category)
                {
                    categoryProperty = crtDefinition;
                }
                else if (crtDefinition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Product)
                {
                    productProperty = crtDefinition;
                }
                else if (crtDefinition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Variant)
                {
                    variantProperty = crtDefinition;
                }
            }
        }

        
        RetailCategoryContainmentLookup categoryLookup;
        EcoResProductCategory productCategory;
        RetailTempOrderCategory tmpOrderItemCategory;
        RetailSpecialCategoryMember variantCategory;
        InventTable inventTable;
        RetailGroupMemberLine retailGroupMemberLine;

        insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                select itemId, inventDimId, Product from mTmpOrderItem
                join inventTable
                    where inventTable.ItemId == mTmpOrderItem.ItemId
                join productCategory
                    where productCategory.Product == inventTable.Product
                join Category from categoryLookup
                    where productCategory.Category == categoryLookup.ContainedCategory;

        // Insert supplemental category - variant based.
        insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                select itemId, inventDimId, Variant from mTmpOrderItem
                    where mTmpOrderItem.Variant > 0
                join retailGroupMemberLine
                    where  retailGroupMemberLine.Variant == mTmpOrderItem.Variant
                join variantCategory
                    where retailGroupMemberLine.RecId == variantCategory.RetailGroupMember
                join Category from categoryLookup
                    where variantCategory.Category == categoryLookup.ContainedCategory;

        while select itemId, inventDimId, Product, Variant, LineNum from mTmpOrderItem
            join Product from inventTable
                where inventTable.ItemId == mTmpOrderItem.ItemId
            join Category from tmpOrderItemCategory
                where tmpOrderItemCategory.itemId == mTmpOrderItem.ItemId
        {
            valueContext.AddLineValue(categoryProperty, mTmpOrderItem.LineNum, tmpOrderItemCategory.Category);
            valueContext.AddLineValue(productProperty, mTmpOrderItem.LineNum, inventTable.Product);
            valueContext.AddLineValue(variantProperty, mTmpOrderItem.LineNum, mTmpOrderItem.Variant);
        }

        valueContext.Resolve(categoryProperty);
        valueContext.Resolve(productProperty);
        valueContext.Resolve(variantProperty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>