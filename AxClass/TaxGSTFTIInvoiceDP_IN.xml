<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTFTIInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTFTIInvoiceDP_IN</c> class provides base implementation of a data provider class for FTI and AR invoice journal reports.
/// </summary>
public class TaxGSTFTIInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    CustInvoiceJour custInvoiceJour;
    CustInvoiceTable custInvoiceTable;
    LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData()
    {
        super();
        select gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            ttsBegin;
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            }

            if (custInvoiceJour.PrintDynamicQRCode_IN == NoYes::Yes)
            {
                OnlineInvoicingHelper_IN::populateDynamicQRCodeData(
                    gstInvoiceHeaderFooterTmp,
                    custInvoiceJour,
                    gstInvoiceDPBase.parmUserConnection());
            }

            gstInvoiceHeaderFooterTmp.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        TaxEngineLedgerJournalTransHeader taxEngineLedgerJournalTransHeader;

        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;

        if (contract.parmTableId() == tableNum(CustInvoiceTable))
        {
            custInvoiceTable = CustInvoiceTable::findRecId(contract.parmRecordId());
            if (custInvoiceTable && custInvoiceTable.SourceDocumentHeader)
            {
                // Process Pro-form report
                custInvoiceJour = CustInvoiceJour::findFromSourceDocumentHeader(custInvoiceTable.SourceDocumentHeader);
                this.parmInvoiceJournal(custInvoiceTable);
            }
        }
        else if (contract.parmTableId() == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = CustInvoiceJour::findRecId(contract.parmRecordId());
            if (contract.parmledgerJournalTransRecordId())
            {
                select firstOnly taxEngineLedgerJournalTransHeader
                join ledgerJournalTrans
                    where ledgerJournalTrans.Invoice                    == custInvoiceJour.invoiceId
                        && ledgerJournalTrans.Voucher                   == custInvoiceJour.LedgerVoucher
                        && ledgerJournalTrans.AccountType               == LedgerJournalACType::Cust
                        && taxEngineLedgerJournalTransHeader.JournalNum == ledgerJournalTrans.JournalNum
                        && taxEngineLedgerJournalTransHeader.Voucher    == ledgerJournalTrans.Voucher;

                this.parmInvoiceJournal(taxEngineLedgerJournalTransHeader);

            }
            else
            {
                this.parmInvoiceJournal(custInvoiceJour);
            }
        }
        
        isProforma = custInvoiceJour.isProforma();
        printCopyOriginal = contract.parmPrintCopyOriginal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information when GTE enabled.
    /// </summary>
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        CustInvoiceTrans        custInvoiceTrans;
        FormLetterRemarks       formLetterRemarks;
        Common                  common;

        if (contract.parmledgerJournalTransRecordId())
        {
            common = ledgerJournalTrans;
        }
        else
        {
            select firstOnly custInvoiceTrans
                where custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
                    && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                    && custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                    && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

            common = custInvoiceTrans;
        }

        if (!custInvoiceJour.isProforma())
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(common);
        }
        else
        {
            CustInvoiceLine custInviceLine = CustInvoiceLine::findByParentRecId(custInvoiceTable.RecId);
            TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();
            TransTaxInformation transTaxInformation = transTaxInformationHelper.findTransTaxInformationByRecord(custInviceLine);

            taxInformation              = TaxInformation_IN::find(transTaxInformation.TaxInformation);
            partyTaxInformation         = TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation);
            logisticsLocation           = LogisticsLocation::find(transTaxInformation.CompanyLocation);
            logisticsPostalAddress      = LogisticsPostalAddress::findByLocation(transTaxInformation.CompanyLocation);
            partyLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformation.CustomerLocation);
            partylogisticsLocation      = LogisticsLocation::find(partyLogisticsPostalAddress.Location);
        }

        super();

        if (CustInvoiceCorrectShippedToAddressInFTI_INFlight::instance().isEnabled()
            && custInvoiceTrans.DeliveryPostalAddress)
        {
            LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findRecId(custInvoiceTrans.DeliveryPostalAddress);
            LogisticsLocation address = LogisticsLocation::find(postalAddress.Location);

            gstInvoiceHeaderFooterTmp.ShippedToName = address.Description;
            gstInvoiceHeaderFooterTmp.ShippedToAddress = postalAddress.Address;
            gstInvoiceHeaderFooterTmp.ShippedToState = postalAddress.State;
 
            if (LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).ISOcode == #isoIN)
            {
                gstInvoiceHeaderFooterTmp.ShippedToStateCode = LogisticsAddressState::find(postalAddress.CountryRegionId, postalAddress.State).StateCode_IN;
            }
 
            gstInvoiceHeaderFooterTmp.ShippedToGSTIN = TaxInformation_IN::findDefaultbyLocation(postalAddress.Location).getTaxRegistrationNumbersTable(TaxType_IN::GST).RegistrationNumber;
            gstInvoiceHeaderFooterTmp.ShippedToLogisticsPostalAddress = postalAddress.RecId;
        }

        gstInvoiceHeaderFooterTmp.IsDomesticSales           = NoYes::Yes;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = custInvoiceJour.InvoiceAmount;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords  = numeralsToTxt_IN(abs(custInvoiceJour.InvoiceAmount));
        gstInvoiceHeaderFooterTmp.TotalInvoiceMiscChargeValueInFigure = custInvoiceJour.SumMarkup;

        if (custInvoiceJour.creditNote())
        {
            formLetterRemarks = FormLetterRemarks::find(custInvoiceJour.LanguageId,FormTextType::CustCreditNote);
        }
        else
        {
            formLetterRemarks = FormLetterRemarks::find(custInvoiceJour.LanguageId,FormTextType::CustInvoice);
        }

        gstInvoiceHeaderFooterTmp.Declaration = formLetterRemarks.Txt;
        gstInvoiceHeaderFooterTmp.BilledToParty = custInvoiceJour.custTable_InvoiceAccount().Party;
        gstInvoiceHeaderFooterTmp.initEInvoice(custInvoiceJour);

        gstInvoiceHeaderFooterTmp.insert();
        headerRecId = gstInvoiceHeaderFooterTmp.RecId;
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        custInvoiceTrans custInvoiceTrans;
        LedgerJournalTrans ledgerJournalTransLoc;

        super(_className);

        if (chargeCode)
        {
            gstInvoiceTmp.Name  = MarkupTable::find(MarkupModuleType::Cust, chargeCode).Txt;
        }
        else
        {
            switch (lineTableId)
            {
                case tableNum(CustInvoiceTrans):
                    custInvoiceTrans = CustInvoiceTrans::findRecId(lineRecId);
                    break;

                case tableNum(CustInvoiceLine):
                    custInvoiceTrans = CustInvoiceTrans::findBySourceDocumentLine(CustInvoiceLine::find(lineRecId).SourceDocumentLine);
                    break;

                case tableNum(LedgerJournalTrans):
                    ledgerJournalTransLoc = LedgerJournalTrans::findRecId(lineRecId, false);
                    break;
            }


            if ((custInvoiceTrans || ledgerJournalTransLoc)
                && classStr(ITaxDocumentLine) == _className)
            {
                if (ledgerJournalTransLoc)
                {
                    gstInvoiceTmp.Name          = ledgerJournalTransLoc.Txt;
                    gstInvoiceTmp.LineAmount    = ledgerJournalTransLoc.AmountCurCredit ? ledgerJournalTransLoc.AmountCurCredit : ledgerJournalTransLoc.AmountCurDebit;
                }
                else
                {
                    gstInvoiceTmp.ItemId        = custInvoiceTrans.ItemId;
                    gstInvoiceTmp.Name          = custInvoiceTrans.Name;
                    gstInvoiceTmp.Unit          = custInvoiceTrans.SalesUnit;
                    gstInvoiceTmp.UnitPrice     = custInvoiceTrans.SalesPrice;
                    gstInvoiceTmp.LineAmount    = custInvoiceTrans.SalesPrice * custInvoiceTrans.Qty;
                }
            }

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceTmp.TaxableValue = gstInvoiceTmp.LineAmount;
            }
        }

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>