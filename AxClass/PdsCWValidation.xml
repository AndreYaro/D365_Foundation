<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCWValidation</c> class implements the validations between pairs of catch weight and
/// inventory quantity fields.
/// </summary>
/// <remarks>
/// This class can handle the validations only when these pairs are both present in the same record
/// buffer. The <c>itemId</c> field has to be on the same record buffer also. Other situations have to
/// be implemented individually.
/// </remarks>
public class PdsCWValidation
{
    fieldId itemFieldId;
    Common  buffer;
    Map     fieldIds;
    Map     reverseMap;
    Map     unitFieldMap;
    boolean skipValidation;

    #define.OrigId(1)
    #define.PdsId(2)
    #define.AllowEdit(3)
    #define.UnitId(4)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustQtyPair</Name>
				<Source><![CDATA[
    /// <summary>
    /// Syncs a pair of catch weight and inventory quantity fields.
    /// </summary>
    /// <param name="_fieldPair">
    /// The field pair specification.
    /// </param>
    /// <param name="_adjustCWQty">
    /// A Boolean value that indicates whether the catch weight field should be adjusted from the inventory
    /// quantity field; optional.
    /// </param>
    /// <remarks>
    /// To avoid a circular update, the update of the opposite field is only being done when the field has
    /// not been set yet.The calculations consider if a secondary unit has been specified for the regular
    /// quantity field.
    /// </remarks>
    protected void adjustQtyPair(
        PdsCWQtyFieldPair _fieldPair,
        boolean           _adjustCWQty = false)
    {
        if (_adjustCWQty)
        {
            if (buffer.(_fieldPair.parmCWFieldId()) == 0)
            {
                buffer.(_fieldPair.parmCWFieldId())
                    = PdsCatchWeight::cwQty(this.itemId(),
                            buffer.(_fieldPair.parmQtyFieldId()));
            }
        }
        else if (_fieldPair.parmUnitFieldId())
        {
            if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                || !_fieldPair.parmAllowQtyEdit())
            {
                buffer.(_fieldPair.parmQtyFieldId())
                    = this.convertInventQty(
                            buffer.(_fieldPair.parmCWFieldId()),
                            buffer.(_fieldPair.parmUnitFieldId()));
            }
        }
        else
        {
            if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                || !_fieldPair.parmAllowQtyEdit())
            {
                buffer.(_fieldPair.parmQtyFieldId())
                    = this.convertInventQty(
                            buffer.(_fieldPair.parmCWFieldId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the catch weight quantity to an inventory quantity in the specified unit.
    /// </summary>
    /// <param name="_cwQty">
    /// The catch weight quantity to be converted.
    /// </param>
    /// <param name="_unitId">
    /// The <c>InventUnitId</c> value to which to convert.
    /// </param>
    /// <returns>
    /// The <c>InventQty</c> value of the quantity in the specified unit.
    /// </returns>
    protected InventQty convertInventQty(
        PdsCWInventQty  _cwQty,
        InventUnitId    _unitId = '')
    {
        return PdsCatchWeight::inventQty(this.itemId(), _cwQty, _unitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the <c>active</c> event of a datasource.
    /// </summary>
    /// <remarks>
    /// This method is used as a placeholder for overriding classes to trigger other adjustments.
    /// </remarks>
    public void dataSourceActivePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers that one of the controlled fields changed its value.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value that identifies the field that changed the value.
    /// </param>
    /// <remarks>
    /// If one of the controlled fields changes its value, the calculations must be re-done and the
    /// parameters eventually must be reset.
    /// </remarks>
    public void fieldChanged(fieldId _fieldId)
    {
        Array               unitList;
        PdsCWQtyFieldPair   fieldPair;
        int                 i;

        switch (_fieldId)
        {
            case itemFieldId:
                this.itemChanged();
                break;
            default:
                if (PdsGlobal::pdsIsCWItem(this.itemId()))
                {
                    if (fieldIds.exists(_fieldId))
                    {
                        this.adjustQtyPair(fieldIds.lookup(_fieldId),false);
                    }
                    else if (reverseMap.exists(_fieldId))
                    {
                        this.adjustQtyPair(reverseMap.lookup(_fieldId),true);
                    }
                    else if (unitFieldMap.exists(_fieldId))
                    {
                        unitList = unitFieldMap.lookup(_fieldId);
                        for (i = 1; i <= unitList.lastIndex(); i++)
                        {
                            fieldPair = unitList.value(i);
                            if (!fieldPair.parmAllowQtyEdit())
                            {
                                this.adjustQtyPair(fieldPair,false);
                            }
                        }
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers that the <c>ItemId</c> field changed
    /// </summary>
    /// <remarks>
    /// When the item changes, the catch weight calculations must be reset and the catch weight unit field,
    /// if it is specified, must be adjusted.
    /// </remarks>
    protected void itemChanged()
    {
        MapEnumerator       iter = fieldIds.getEnumerator();
        PdsCWQtyFieldPair   fieldPair;

        if (!InventTable::find(this.itemId()).pdsCheckCWItemSetup())
        {
            throw Exception::Error;
        }
        if (PdsGlobal::pdsIsCWItem(this.itemId()))
        {
            //
            // if the new item is a catch weight item
            // we have to adjust the qty field to match
            // the new catch weight setup
            //
            while (iter.moveNext())
            {
                fieldPair = iter.currentValue();
                this.adjustQtyPair(fieldPair,
                        buffer.(fieldPair.parmCWFieldId()) == 0);
            }
        }
        else
        {
            //
            // if it is not a catch weight item, we zero
            // out the catchweight qty
            //
            while (iter.moveNext())
            {
                buffer.(iter.currentKey()) = 0.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> value from the record buffer.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c> value from the record.
    /// </returns>
    public ItemId itemId()
    {
        return buffer.(itemFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes a new instance of the PdsCWValidation class.
    /// </summary>
    protected void new()
    {
        fieldIds = new Map(Types::Integer,Types::Class);
        reverseMap = new Map(Types::Integer,Types::Class);
        unitFieldMap = new Map(Types::Integer,Types::Class);
        skipValidation = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = buffer)
    {
        if (!prmisdefault(_buffer))
        {
            buffer = _buffer;
        }

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldIds</Name>
				<Source><![CDATA[
    public Map parmFieldIds(Map _fieldIds = null)
    {
        if (!prmisdefault(_fieldIds))
        {
            fieldIds = _fieldIds;
            reverseMap = PdsCWValidation::reverseFieldMap(fieldIds);
            unitFieldMap = PdsCWValidation::createUnitFieldMap(fieldIds);
        }

        return fieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemFieldId</Name>
				<Source><![CDATA[
    public fieldId parmItemFieldId(fieldId _itemFieldId = itemFieldId)
    {
        if (!prmisdefault(_itemFieldId))
        {
            itemFieldId = _itemFieldId;
        }

        return itemFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipValidation</Name>
				<Source><![CDATA[
    public boolean parmSkipValidation(boolean _skipValidation = skipValidation)
    {
        if (!prmisdefault(_skipValidation))
        {
            skipValidation = _skipValidation;
        }

        return skipValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the relation between the quantities of the field pairs.
    /// </summary>
    /// <param name="_error">
    /// A Boolean value that indicates whether an error should be thrown if the validation fails.
    /// </param>
    /// <returns>
    /// true if the quantities between the field pairs match the catch weight restrictions; otherwise,
    /// false .
    /// </returns>
    /// <remarks>
    /// The actual validation for each pair is performed by the <c>validateFieldInternal</c> method.
    /// </remarks>
    public boolean validate(boolean _error)
    {
        boolean             ret = true;
        MapEnumerator       iter;
        PdsCatchWeightItem  cwItem;

        if (!skipValidation && PdsGlobal::pdsIsCWItem(this.itemId()))
        {
            cwItem = PdsCatchWeightItem::find(this.itemId());
            iter = fieldIds.getEnumerator();
            while (iter.moveNext())
            {
                ret = ret && this.validateFieldInternal(iter.currentValue(),
                            cwItem,_error);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the relation of the quantities for a specific field pair.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value of the catch weight field marking the field pair.
    /// </param>
    /// <param name="_error">
    /// A Boolean value that indicates whether an error should be thrown if the validation fails.
    /// </param>
    /// <returns>
    /// true if the quantities between the field pairs match the catch weight restrictions; otherwise,
    /// false .
    /// </returns>
    /// <remarks>
    /// The actual validation for each pair is performed by the <c>validateFieldInternal</c> method.
    /// </remarks>
    public boolean validateField(fieldId _fieldId, boolean _error)
    {
        boolean ret = true;

        if (!skipValidation && PdsGlobal::pdsIsCWItem(this.itemId()))
        {
            ret = this.validateFieldInternal(
                    fieldIds.lookup(_fieldId),
                    PdsCatchWeightItem::find(this.itemId()),
                    _error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation of the quantities in a pair of quantity and catch-weight quantity fields.
    /// </summary>
    /// <param name="_fieldPair">
    /// The field pair to validate.
    /// </param>
    /// <param name="_cwItem">
    /// The ID of the catch weight item.
    /// </param>
    /// <param name="_throwOnError">
    /// A Boolean value that indicates whether to throw an error if the validation fails; optional.
    /// </param>
    /// <returns>
    /// true if the values of the quantity pair are valid for the specified catch-weight item; otherwise,
    /// false.
    /// </returns>
    /// <remarks>
    /// Indicates that the signs of the quantities in the pair are the same and the inventory quantity
    /// falls into the range specified by the catch weight item record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Throws an exception, if the <c>_error</c> parameter is set and the signs between the quantities of
    /// the field pairs do not match.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// Throws an exception, if the <c>_error</c> parameter is set and the inventory quantity does not fall
    /// into the range specified by the catch weight item record.
    /// </exception>
    protected boolean validateFieldInternal(
        PdsCWQtyFieldPair   _fieldPair,
        PdsCatchWeightItem  _cwItem,
        boolean             _throwOnError = true)
    {
        ItemId                  itemId  = this.itemId();
        PdsCWInventQty          cwQty   = buffer.(_fieldPair.parmCWFieldId());
        InventQty               qty     = buffer.(_fieldPair.parmQtyFieldId());
        UnitOfMeasureSymbol     unitSymbol;
        boolean                 ret = true;

        if (!_cwItem.PdsCWUnitId || !_cwItem.PdsCWMin || !_cwItem.PdsCWMax)
        {
            throw error("@PDS1502");
        }

        if (_fieldPair.parmUnitFieldId())
        {
            unitSymbol = buffer.(_fieldPair.parmUnitFieldId());
        }
        else
        {
            unitSymbol = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        }

        if (!PDSCatchWeight::validateQty(
            itemId,
            qty,
            UnitOfMeasure::unitOfMeasureIdBySymbol(unitSymbol),
            cwQty,
            _throwOnError))
        {
            if (_throwOnError)
            {
                throw error("@SYS326740");
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a new instance of the PdsCWValidation class.
    /// </summary>
    /// <returns>CW validation class</returns>
    public static PdsCWValidation construct()
    {
        return new PdsCWValidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnitFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a field map keyed on the <c>fieldId</c> of the unit.
    /// </summary>
    /// <param name="_fieldIds">
    /// The field map ordinarily used by the catch weight validation class.
    /// </param>
    /// <returns>
    /// A field map based on the unit field.
    /// </returns>
    /// <remarks>
    /// As the map ordinarily used by the catch weight validation class is keyed on the field ID of the
    /// catch weight field, finding a pair based on the field ID of the unit field would require a scan of
    /// the map.This method creates a field map that is keyed on the field ID of the unit field from a map
    /// that is keyed on the catch weight quantity field.
    /// </remarks>
    public static Map createUnitFieldMap(Map _fieldIds)
    {
        Map                 newMap = new Map(Types::Integer,Types::Class);
        PdsCWQtyFieldPair   fieldPair;
        MapEnumerator       iter = _fieldIds.getEnumerator();
        Array               unitList;

        while (iter.moveNext())
        {
            fieldPair = iter.currentValue();
            if (fieldPair.parmUnitFieldId())
            {
                if (newMap.exists(fieldPair.parmUnitFieldId()))
                {
                    unitList = newMap.lookup(fieldPair.parmUnitFieldId());
                    unitList.value(unitList.lastIndex()+1,fieldPair);
                    unitList = null;
                }
                else
                {
                    unitList = new Array(Types::Class);
                    unitList.value(unitList.lastIndex()+1,fieldPair);
                    newMap.insert(fieldPair.parmUnitFieldId(),unitList);
                    unitList = null;
                }
            }
        }

        return newMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMapFromContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the map used by the <c>PdsCWValidation</c> class from a container type.
    /// </summary>
    /// <param name="_fieldIds">
    /// A container with the field pairs to put in the map.
    /// </param>
    /// <returns>
    /// A map usable by the <c>PdsCWValidation</c> class.
    /// </returns>
    /// <remarks>
    ///  This method is for the convenience of the developers as it is frequently easier to specify a
    ///  container structure than it is to create and fill a Map. The passed container must contain a
    ///  container for each field pair to be handled by a catch weight validation class. Each of these field
    ///  pair containers must have the field IDs of the following fields in exactly that sequence:
    ///  <list type="table">
    ///   <item>
    ///   <description>Catch Weight Quantity</description><description>A catch weight quantity
    ///   field</description>
    ///   </item>
    ///   <item>
    ///   <description>Inventory Quantity</description><description>An inventory quantity field</description>
    ///   </item>
    ///   <item>
    ///   <description>Allow Edit</description><description>A Boolean value indicating whether the edit of
    ///   the inventory quantity should be allowed; optional.</description>
    ///   </item>
    ///   <item>
    ///   <description>Unit Id</description><description>The unit in which the regular quantity field should
    ///   be maintained; optional.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static Map fieldMapFromContainers(container _fieldIds)
    {
        int         idx;
        container   fieldPair;
        Map         fieldMap = new Map(Types::Integer,Types::Class);

        for (idx = 1; idx <= conlen(_fieldIds); idx++)
        {
            fieldPair = conpeek(_fieldIds,idx);
            if (conlen(fieldPair) >= #UnitId)
            {
                fieldMap.insert(conpeek(fieldPair,#PdsId),
                        PdsCWQtyFieldPair::constructFromFieldIds(
                            conpeek(fieldPair,#PdsId),
                            conpeek(fieldPair,#OrigId),
                            conpeek(fieldPair,#UnitId),
                            conpeek(fieldPair,#AllowEdit)));
            }
            else if (conlen(fieldPair) >= #AllowEdit)
            {
                fieldMap.insert(conpeek(fieldPair,#PdsId),
                        PdsCWQtyFieldPair::constructFromFieldIds(
                            conpeek(fieldPair,#PdsId),
                            conpeek(fieldPair,#OrigId),
                            0,
                            conpeek(fieldPair,#AllowEdit)));
            }
            else
            {
                fieldMap.insert(conpeek(fieldPair,#PdsId),
                        PdsCWQtyFieldPair::constructFromFieldIds(
                            conpeek(fieldPair,#PdsId),
                            conpeek(fieldPair,#OrigId),0,true));
            }
        }

        return fieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses a typical field map.
    /// </summary>
    /// <param name="_fieldIds">
    /// A field map ordinarily used by the <c>PdsCWValidation</c> class.
    /// </param>
    /// <returns>
    /// The reversed field map.
    /// </returns>
    /// <remarks>
    /// As the map ordinarily used by the catch weight validation class is keyed on the field ID of the
    /// catch weight field, finding a pair based on the field ID of the regular quantity field would
    /// require a scan of the map.This method creates a field map that is keyed on the field ID of the
    /// regular quantity field from a map that is keyed on the catch weight quantity field.
    /// </remarks>
    public static Map reverseFieldMap(Map _fieldIds)
    {
        Map                 newMap = new Map(Types::Integer,Types::Class);
        PdsCWQtyFieldPair   fieldPair;
        MapEnumerator       iter = _fieldIds.getEnumerator();

        while (iter.moveNext())
        {
            fieldPair = iter.currentValue();
            newMap.insert(fieldPair.parmQtyFieldId(),fieldPair);
        }

        return newMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>