<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBook_AddList_Launcher_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchBook_AddList_Launcher_RU extends RunBaseBatch implements BatchRetryable
{
    Dialog                  dialog;
    SalesPurchBookRecId_RU  bookRecId;
    QueryRun                queryRun;
    NoYes                   groupByFactures;
    NoYes                   exportToXml;
    FromDate                fromDate;
    ToDate                  toDate;

    DialogField             groupByFacturesField;
    DialogField             periodCodeField;
    DialogField             fromDateField;
    DialogField             toDateField;
    DialogField             exportToXmlDlg;

    protected const int dialogPeriodCodeFieldNo = 900;
    protected const int currentVersion = 4;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (dialog)
        {
            dialog.addGroup("@GLS101395");
            groupByFacturesField = dialog.addFieldValue(enumStr(NoYes), groupByFactures, "@GLS106865");

            dialog.addGroup("@SYS23339");
            periodCodeField = new DialogField(dialog, extendedTypeStr(DateCode), dialogPeriodCodeFieldNo);
            dialog.addCtrlDialogField(periodCodeField.name());
            periodCodeField.init(dialog);

            fromDateField = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
            toDateField   = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
            exportToXmlDlg= dialog.addFieldValue(enumStr(NoYes), exportToXml, "@SYS114646");
        }
 
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_modified</Name>
				<Source><![CDATA[
    private boolean fld900_1_modified()
    {
        LedgerPeriodCode    ledgerPeriodCode;
        Object              control;
        boolean             ret;

        control = dialog.formRun().controlCallingMethod();
        ret = control.modified();

        if (ret && periodCodeField.value())
        {
            ledgerPeriodCode = LedgerPeriodCode::find(periodCodeField.value());
            fromDateField.value(ledgerPeriodCode.fromDate());
            toDateField.value(ledgerPeriodCode.toDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            groupByFactures = groupByFacturesField.value();
            fromDate        = fromDateField.value();
            toDate          = toDateField.value();
            exportToXml     = exportToXmlDlg.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                query;
        PurchBookTable_RU    purchBookTable = PurchBookTable_RU::find(bookRecId);

        fromDate = purchBookTable.getFromDate();
        toDate   = purchBookTable.getToDate();

        query  = PurchBook_AddList_Launcher_RU::createDefaultQuery(bookRecId, fromDate, toDate);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                bookRecId,
                groupByFactures,
                fromDate,
                toDate, 
                queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmBookRecId(SalesPurchBookRecId_RU _bookRecId = bookRecId)
    {
        bookRecId = _bookRecId;
        return bookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchBookAddListReportExcel_RU      purchBookPrint;
        int                                 bookCount;
        container                           bookRecIdCon;
        container                           bookRecIdConSales;
        TransDate                           periodStart;
        TransDate                           periodEnd;
        SetEnumerator                       setEnumerator;
        Set                                 setPeriods;
        Map                                 mapPeriodBooks  = new Map(Types::Container, Types::Container);
        Map                                 mapBookPeriod   = new Map(Types::Int64,    Types::Container);
        Map                                 mapPeriodSalesBooks  = new Map(Types::Container, Types::Container);
        Map                                 mapSalesBookPeriod   = new Map(Types::Int64,    Types::Container);
        container                           setPeriodsPacked;

        [setPeriodsPacked,
         bookRecIdCon,
         bookRecIdConSales] = PurchBook_AddList_Launcher_RU::initParameters(bookRecId,
                                                                        fromDate,
                                                                        toDate,
                                                                        queryRun.query(),
                                                                        mapPeriodBooks,
                                                                        mapBookPeriod,
                                                                        mapPeriodSalesBooks,
                                                                        mapSalesBookPeriod);

        setPeriods = Set::create(setPeriodsPacked);

        setEnumerator = setPeriods.getEnumerator();
        while (setEnumerator.moveNext())
        {
            [periodStart, periodEnd] = setEnumerator.current();
            purchBookPrint = PurchBookAddListReportExcel_RU::construct();
            purchBookPrint.parmFromDate(periodStart);
            purchBookPrint.parmToDate(periodEnd);
            purchBookPrint.parmStartDate(fromDate);
            purchBookPrint.parmReportDate(toDate);
            purchBookPrint.parmExportToXml(exportToXml);
            purchBookPrint.parmBookRecIdCon(bookRecIdCon);
            purchBookPrint.parmBookRecIdConSales(bookRecIdConSales);
            if (conlen(bookRecIdConSales) > 0)
            {
                purchBookPrint.parmCorrectedSalesBookRecIdCon(mapPeriodSalesBooks.lookup(setEnumerator.current()));
            }
            purchBookPrint.parmCorrectedBookRecIdCon(mapPeriodBooks.lookup(setEnumerator.current()));
            purchBookPrint.parmQueryRun(queryRun);
            purchBookPrint.parmGroupByFactures(groupByFactures);
            purchBookPrint.parmAddListNumber(SalesPurchBookDataMap_RU::getAddListNumber(periodStart,
                                                                                    periodEnd,
                                                                                    mapPeriodBooks,
                                                                                    queryRun.query(),
                                                                                    SalesPurch::Purch));
            purchBookPrint.runOperation();
            bookCount++;
        }

        if (! bookCount)
        {
            warning("@GLS101546");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer                version     = conPeek(_packedClass,1);
        container              packedQuery;
        SalesPurchBookRecId_RU bookRecIdNew;
        PurchBookTable_RU      purchBookTable = PurchBookTable_RU::find(bookRecId);

        switch (version)
        {
            case currentVersion :
                bookRecIdNew = this.parmBookRecId();

                [   version, 
                    bookRecId,
                    groupByFactures,
                    fromDate,
                    toDate, 
                    packedQuery] = _packedClass;
                
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                if (bookRecIdNew && bookRecIdNew != bookRecId)
                {
                    purchBookTable = PurchBookTable_RU::find(bookRecIdNew);
                    fromDate = purchBookTable.getFromDate();
                    toDate   = purchBookTable.getToDate();

                    this.parmBookRecId(bookRecIdNew);
                    this.initParmDefault();
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! toDate)
        {
            ret = checkFailed("@GLS105013");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Facture:AddListPrint";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchBookPeriodMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills maps with values of corrected purch book tables and corrected periods.
    /// </summary>
    /// <param name="_mapPeriodBooks">
    /// Map which holds relationships between periods and books.
    /// </param>
    /// <param name="_mapBookPeriod">
    /// Map which holds relationships between books and periods.
    /// </param>
    /// <param name="_bookRecId">
    /// Source book record id.
    /// </param>
    /// <param name="_fromDate">
    /// Start date of correction period.
    /// </param>
    /// <param name="_toDate">
    /// End date of correction period.
    /// </param>
    public static void getPurchBookPeriodMaps(Map                       _mapPeriodBooks  = new Map(Types::Container, Types::Container),
                                              Map                       _mapBookPeriod   = new Map(Types::Int64,    Types::Container),
                                              RefRecId                  _bookRecId       = 0,
                                              FromDate                  _fromDate        = dateNull(),
                                              ToDate                    _toDate          = dateNull())
    {
        TransDate                       periodStart;
        TransDate                       periodEnd;
        container                       bookRecIdPeriodCon;
        int                             bookCount, idx;
        container                       bookRecIdCon;
        PurchBookTable_RU               purchBookTable, tmpPurchBookTable;
        Map                             tmpBooksMap = new Map(Types::Int64, Types::Int64);

        void updatePeriodMaps()
        {
            _mapPeriodBooks.insert([periodStart, periodEnd], bookRecIdPeriodCon);
            for (idx = 1; idx <= conlen(bookRecIdPeriodCon); idx++)
            {
                _mapBookPeriod.insert(conpeek(bookRecIdPeriodCon, idx), [periodStart, periodEnd]);
            }
        }

        bookRecIdCon = PurchBookTable_RU::booksInPeriod(_bookRecId, _fromDate, _toDate);

        tmpPurchBookTable.setTmp();
        while select purchBookTable
        {
            buf2Buf(purchBookTable, tmpPurchBookTable);
            if (! purchBookTable.ClosingDate)
            {
                tmpPurchBookTable.ClosingDate = purchBookTable.getToDate();
            }
            tmpPurchBookTable.insert();

            tmpBooksMap.insert(tmpPurchBookTable.RecId, purchBookTable.RecId);
        }

        while select tmpPurchBookTable
            order by ClosingDate desc
            where tmpPurchBookTable.ClosingDate < _fromDate
        {
            bookCount++;
            bookRecIdPeriodCon += tmpBooksMap.lookup(tmpPurchBookTable.RecId);

            if (bookCount == 1)
            {
                periodEnd = tmpPurchBookTable.getToDate();
            }

            if (bookCount == conlen(bookRecIdCon))
            {
                periodStart = tmpPurchBookTable.getFromDate();
                updatePeriodMaps();
                bookCount = 0;
                bookRecIdPeriodCon = connull();
            }
        }

        if (bookCount > 0)
        {
            select firstonly tmpPurchBookTable order by ClosingDate;
            periodStart = tmpPurchBookTable.getFromDate();
            updatePeriodMaps();
            bookCount = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesBookIdCon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns container with sales books RecIds corresponding to the container with purchase books RecIds.
    /// </summary>
    /// <param name="_purchBookRecIdCon">
    ///    Container with purchase books RecIds.
    /// </param>
    /// <returns>
    ///    Container with sales books RecIds corresponding to the container with purchase books RecIds.
    /// </returns>
    public static container getSalesBookIdCon(container _purchBookRecIdCon)
    {
        int                     i;
        PurchBookTable_RU       purchBookTable;
        SalesBookTable_RU       salesBookTable;
        container               bookRecIdCon;

        for (i = 1; i <= conlen(_purchBookRecIdCon); i++)
        {
            purchBookTable = PurchBookTable_RU::find(conpeek(_purchBookRecIdCon, i));
            salesBookTable = purchBookTable.findSalesBook();

            if (salesBookTable.RecId)
            {
                bookRecIdCon += salesBookTable.RecId;
            }
        }
        return bookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PurchBook_AddList_Launcher_RU   purchBookLauncher;
        SalesPurchBookRecId_RU          bookRecId;
        PurchBookTable_RU               purchBookTable;

        if (! _args || ! _args.record() || _args.dataset() != tableNum(PurchBookTable_RU))
        {
           throw error(Error::missingRecord(funcName()));
        }
        purchBookTable = _args.record();
        bookRecId = purchBookTable.RecId;

        purchBookLauncher = new PurchBook_AddList_Launcher_RU();
        purchBookLauncher.parmBookRecId(bookRecId);

        purchBookLauncher.initParmDefault();
        if (purchBookLauncher.prompt())
        {
            purchBookLauncher.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultQuery</Name>
				<Source><![CDATA[
    public static Query createDefaultQuery(SalesPurchBookRecId_RU  _bookRecId,
                                       TransDate               _fromDate,
                                       TransDate               _toDate)
    {
        Query                query;
        QueryBuildDataSource qbdsPurchBookTrans;
        QueryBuildDataSource qbdsSalesBookTrans;
        QueryBuildRange      qbrBookRecId, qbrCorrectedBookRecId;
        QueryBuildRange      qbrExt;
        container            bookRecIdCon;
        container            bookRecIdConSales;

        bookRecIdCon = PurchBookTable_RU::booksInPeriod(_bookRecId, _fromDate, _toDate);

        query = new Query();
        qbdsPurchBookTrans = query.addDataSource(tableNum(PurchBookTrans_RU));
        qbrBookRecId       = qbdsPurchBookTrans.addRange(fieldNum(PurchBookTrans_RU, PurchBookTable_RU));
        qbrBookRecId.value(con2Str(bookRecIdCon));
        qbrBookRecId.status(RangeStatus::Hidden);

        bookRecIdCon += 0;
        qbrCorrectedBookRecId = qbdsPurchBookTrans.addRange(fieldNum(PurchBookTrans_RU, CorrectedPurchBookTable_RU));
        qbrCorrectedBookRecId.value(queryNotValueCon_W(bookRecIdCon));
        qbrCorrectedBookRecId.status(RangeStatus::Hidden);

        bookRecIdCon = condel(bookRecIdCon, conlen(bookRecIdCon), 1);

        qbrExt = qbdsPurchBookTrans.addRange(fieldnum(PurchBookTrans_RU, RevisionType));
        qbrExt.status(RangeStatus::Hidden);

        bookRecIdConSales = PurchBook_AddList_Launcher_RU::getSalesBookIdCon(bookRecIdCon);

        qbdsSalesBookTrans = query.addDataSource(tablenum(SalesBookTrans_RU));

        qbrBookRecId = qbdsSalesBookTrans.addRange(fieldnum(SalesBookTrans_RU, SalesBookTable_RU));

        if (conlen(bookRecIdConSales) > 0)
        {
            qbrBookRecId.value(con2Str(bookRecIdConSales));
        }
        else
        {
            qbrBookRecId.value(SysQuery::valueEmptyString());
        }

        qbrBookRecId.status(RangeStatus::Locked);

        bookRecIdConSales += 0;
        qbrCorrectedBookRecId = qbdsSalesBookTrans.addRange(fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU));
        qbrCorrectedBookRecId.value(queryNotValueCon_W(bookRecIdConSales));
        qbrCorrectedBookRecId.status(RangeStatus::Hidden);

        qbrExt = qbdsSalesBookTrans.addRange(fieldnum(SalesBookTrans_RU, RevisionType));
        qbrExt.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public static container initParameters(SalesPurchBookRecId_RU    _bookRecId,
                                       FromDate                  _fromDate,
                                       ToDate                    _toDate,
                                       Query                     _query,
                                       Map                       _mapPeriodBooks = new Map(Types::Container, Types::Container),
                                       Map                       _mapBookPeriod = new Map(Types::Int64, Types::Container),
                                       Map                       _mapPeriodSalesBooks = new Map(Types::Container, Types::Container),
                                       Map                       _mapSalesBookPeriod = new Map(Types::Int64, Types::Container))
    {
        container                           bookRecIdCon;
        container                           bookRecIdConSales;
        Query                               correctedBookQuery;
        QueryBuildDataSource                qbdsPurchBookTrans;
        QueryBuildDataSource                qbdsSalesBookTrans;
        QueryRun                            correctedBookQueryRun;
        PurchBookTrans_RU                   purchBookTrans;
        SalesBookTrans_RU                   salesBookTrans;
        TransDate                           periodStart;
        TransDate                           periodEnd;
        PurchBookTable_RU                   purchBookTable;
        SalesBookTable_RU                   salesBookTable;
        Set                                 setPeriods = new Set(Types::Container);

        PurchBook_AddList_Launcher_RU::getPurchBookPeriodMaps(
            _mapPeriodBooks,
            _mapBookPeriod,
            _bookRecId,
            _fromDate,
            _toDate);

        purchBookTable = PurchBookTable_RU::find(_bookRecId);
        salesBookTable = purchBookTable.findSalesBook();

        SalesBook_AddList_Launcher_RU::getSalesBookPeriodMaps(
            _mapPeriodSalesBooks,
            _mapSalesBookPeriod,
            salesBookTable.RecId,
            _fromDate,
            _toDate);

        bookRecIdCon = PurchBookTable_RU::booksInPeriod(_bookRecId, _fromDate, _toDate);
        correctedBookQuery = new Query(_query);
        qbdsPurchBookTrans = correctedBookQuery.dataSourceTable(tableNum(PurchBookTrans_RU));
        qbdsPurchBookTrans.addSortField(fieldNum(PurchBookTrans_RU, CorrectedPurchBookTable_RU));
        qbdsPurchBookTrans.orderMode(OrderMode::GroupBy);

        findOrCreateRange_W(qbdsPurchBookTrans, fieldNum(PurchBookTrans_RU, PurchBookTable_RU), con2Str(bookRecIdCon));

        bookRecIdCon += 0;
        findOrCreateRange_W(qbdsPurchBookTrans, fieldNum(PurchBookTrans_RU, CorrectedPurchBookTable_RU), queryNotValueCon_W(bookRecIdCon));
        bookRecIdCon = conDel(bookRecIdCon, conLen(bookRecIdCon), 1);

        bookRecIdConSales = PurchBook_AddList_Launcher_RU::getSalesBookIdCon(bookRecIdCon);

        qbdsSalesBookTrans = correctedBookQuery.dataSourceTable(tablenum(SalesBookTrans_RU));
        qbdsSalesBookTrans.addSortField(fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU));
        qbdsSalesBookTrans.orderMode(OrderMode::GroupBy);

        if (conlen(bookRecIdConSales) > 0)
        {
            findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, SalesBookTable_RU), con2Str(bookRecIdConSales));
        }
        else
        {
            findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, SalesBookTable_RU), SysQuery::valueEmptyString());
        }

        bookRecIdConSales += 0;
        findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU), queryNotValueCon_W(bookRecIdConSales));
        bookRecIdConSales = condel(bookRecIdConSales, conlen(bookRecIdConSales), 1);

        PurchBookAddListReportExcel_RU::setExtQueryRanges(correctedBookQuery);

        correctedBookQueryRun = new QueryRun(correctedBookQuery);
        while (correctedBookQueryRun.next())
        {
            if (correctedBookQueryRun.changed(tablenum(SalesBookTrans_RU)))
            {
                salesBookTrans = correctedBookQueryRun.get(tablenum(SalesBookTrans_RU));
                if (_mapSalesBookPeriod.exists(salesBookTrans.CorrectedSalesBookTable_RU))
                {
                    setPeriods.add(_mapSalesBookPeriod.lookup(salesBookTrans.CorrectedSalesBookTable_RU));
                    [periodStart, periodEnd] = _mapSalesBookPeriod.lookup(salesBookTrans.CorrectedSalesBookTable_RU);
                }
            }

            if (correctedBookQueryRun.changed(tablenum(PurchBookTrans_RU)))
            {
                purchBookTrans = correctedBookQueryRun.get(tablenum(PurchBookTrans_RU));
                if (_mapBookPeriod.exists(purchBookTrans.CorrectedPurchBookTable_RU))
                {
                    setPeriods.add(_mapBookPeriod.lookup(purchBookTrans.CorrectedPurchBookTable_RU));
                    [periodStart, periodEnd] = _mapBookPeriod.lookup(purchBookTrans.CorrectedPurchBookTable_RU);
                }
            }
        }

        return [setPeriods.pack(),
            bookRecIdCon,
            bookRecIdConSales];
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>