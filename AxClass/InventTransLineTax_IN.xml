<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransLineTax_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransLineTax_IN</c> class is the tax calculation class for the invent transfer order line.
/// </summary>
class InventTransLineTax_IN extends Tax
{
    InventTransferLine                  inventTransferLine;
    InventTransferLine_IN               inventTransferLineIN;
    Common                              source;
    boolean                             amountsInclTaxExist;
    Map                                 amountInclTax;
    Map                                 amountExclTax;
    MarkupTrans                         markupTrans;
    InventTransferLine                  inventLine;
    QueryRun                            queryTransact;
    boolean                             lineExist;
    InventTransferTable                 inventTransferTable;
    TransDate                           inventTransferTableTransDate;
    LedgerDimensionDefaultAccount       retentionAcc;
    NetAmount_IN                        retentionAmt;
    TaxAmount                           retentionTaxAmt;

    InventTransferParmTable             inventTransferParmTable;
    InventTransferParmLine              inventTransferParmLine;
    InventTransferLine                  previnventTransferLine;
    UnitPrice_IN                        unitPrice;

    #define.decimalRound(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the tax amount.
    /// </summary>
    /// <returns>
    /// Returns tax amount.
    /// </returns>
    public TaxAmount calc()
    {
        TaxAmount           taxAmount;
        InventTransferQty   qtyTransfer;

        if (!headingRecId)
            return 0;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        amountsInclTaxExist = false;
        this.initCursor();
        boolean moreLines = true;

        while (moreLines)
        {
            inventTransferLine = this.nextLine();

            inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

            if (this.lineExist())
            {
                if (inventTransferParmTable)
                {
                    qtyTransfer = inventTransferParmLine.qtyNowByUpdateType(inventTransferUpdateType);
                }
                else
                {
                    qtyTransfer = inventTransferLine.QtyTransfer;
                }

                real pricePerUnit = inventTransferLineIN.UnitPrice == 0
                               ? decround(inventTransferLineIN.NetAmount / inventTransferLine.QtyTransfer, #decimalRound)
                               : inventTransferLineIN.UnitPrice;

                AmountCur baseAmountCal = qtyTransfer * pricePerUnit;
                inventAssessableVal = baseAmountCal;
                
                AmountCur baseAmount = baseAmountCal;
                if (this.shouldNegateAmounts())
                {
                    baseAmount = baseAmount * -1;
                    qtyTransfer = qtyTransfer * -1;
                }

                AmountCur baseAmountInclTax  = 0;
                AmountCur baseAmountOriginal = baseAmount;
                tableId   inventLineTableId  = inventTransferLine.TableId;

                PriceCur pcsPrice = PriceDisc::price2Amount(pricePerUnit,
                                                             1,
                                                             0,
                                                             1,
                                                             qtyTransfer,
                                                             0,
                                                             qtyTransfer,
                                                             Ledger::accountingCurrency(),
                                                             inventTransferLineIN.NetAmount);
                this.parmInventTransferParmLine_IN(inventTransferParmLine);

                this.insertLineInInternal(baseAmount,
                                          qtyTransfer,
                                          inventTransferLine.UnitId,
                                          inventTransferLine.ItemId,
                                          pcsPrice,
                                          inventTransferParmTable ? inventTransferParmLine.DefaultDimension_IN : inventTransferLineIN.DefaultDimension,
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(this.inventAcc(inventTransferLine.ItemId), inventTransferParmTable ? inventTransferParmLine.DefaultDimension_IN : inventTransferLineIN.DefaultDimension),
                                          LedgerPostingType::InventIssue);

                if (taxCalculateLine)
                {
                    taxAmount       = this.calcTax();
                    this.saveInProcessTransaction();
                    TaxAmountCur sourceTaxAmount = this.taxPrLine(this.sourceTableId(),this.sourceRecID());
                }
            }
            else
            {
                moreLines   = false;
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(0);
                taxAmount = this.calcTax();
                this.saveTotalInProcessTransaction();
            }
        }

        TaxCalculationAdjustment taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOnPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to calculate the tax amount.
    /// </summary>
    /// <returns>
    /// Returns the tax amount.
    /// </returns>
    [Replaceable]
    public TaxAmount calcOnPost()
    {
        TaxAmount                taxAmount;
        AmountCur                baseAmount;

        if (!headingRecId)
            return 0;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        amountsInclTaxExist = false;
        this.initCursor();
        boolean moreLines = true;
        while (moreLines)
        {
            inventTransferLine = this.nextLine();
            inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

            if (this.lineExist())
            {
                InventTransferQty qtyTransfer = inventTransferParmLineLoc.qtyNowByUpdateType(inventTransferUpdateType);

                real pricePerUnit = inventTransferLineIN.UnitPrice == 0
                               ? decround(inventTransferLineIN.NetAmount / inventTransferLine.QtyTransfer, #decimalRound)
                               : inventTransferLineIN.UnitPrice;

                AmountCur baseAmountCal      = qtyTransfer * pricePerUnit;
                inventAssessableVal          = baseAmountCal;
                inventMaxRetailPrice         = pricePerUnit;
                AmountCur baseAmountInclTax  = 0;
                AmountCur baseAmountOriginal = baseAmount;
                tableId   inventLineTableId  = inventTransferLine.TableId;

                baseAmount = baseAmountCal;
                if (this.shouldNegateAmounts())
                {
                    baseAmount = baseAmount * -1;
                    qtyTransfer = qtyTransfer * -1;
                }

                PriceCur pcsPrice = PriceDisc::price2Amount(pricePerUnit,
                                                             1,
                                                             0,
                                                             1,
                                                             qtyTransfer,
                                                             0,
                                                             qtyTransfer,
                                                             Ledger::accountingCurrency(),
                                                             baseAmountCal);

                this.insertLineInInternal(baseAmount,
                                          qtyTransfer,
                                          inventTransferLine.UnitId,
                                          inventTransferLine.ItemId,
                                          pcsPrice,
                                          inventTransferParmLineLoc.DefaultDimension_IN,
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(this.inventAcc(inventTransferParmLineLoc.ItemId), inventTransferParmLineLoc.DefaultDimension_IN),
                                          LedgerPostingType::InventIssue);

                if (taxCalculateLine)
                {
                    taxAmount       = this.calcTax();
                    this.saveInProcessTransaction();
                }
            }
            else
            {
                moreLines   = false;
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(0);
                taxAmount = this.calcTax();
                this.saveTotalInProcessTransaction();
            }
        }

        TaxCalculationAdjustment taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        taxAmount = this.totalTaxAmount();
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldNegateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether base amount and qty should be negated when calculating tax.
    /// </summary>
    /// <returns>
    /// true if base amount and qty should be negated; otherwise, false.
    /// </returns>
    [Hookable]
    private boolean shouldNegateAmounts()
    {
        switch (inventTransferUpdateType)
        {
            case InventTransferUpdateType::Shipment:
            case InventTransferUpdateType::PickingList:
                return true;
            case InventTransferUpdateType::Receive:
                return false;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChargeBePostedByTax</Name>
				<Source><![CDATA[
    protected boolean canChargeBePostedByTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used get the currency code.
    /// </summary>
    /// <returns>
    /// Returns currency code.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>euroTriangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to get the euro triangulation for the specified currency code.
    /// </summary>
    /// <param name="_date">
    /// Date to find the triangulation.
    /// </param>
    /// <returns>
    /// Returns the triangulation.
    /// </returns>
    public EUROTriangulation euroTriangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return Currency::triangulation(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount origin.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    /// <returns>
    /// Returns the amount origin.
    /// </returns>
    public real getAmountOrigin(InventTransferLine _inventTransferLine)
    {
        inventTransferLineIN = _inventTransferLine.inventTransferLine_IN();

        if (mrpExclTax && (mrpExclTax < inventTransferLineIN.NetAmount) )
        {
            return mrpExclTax;
        }
        else if (accessableExclTax && (accessableExclTax < inventTransferLineIN.NetAmount))
        {
            return accessableExclTax;
        }
        else if (lineExclTax && (lineExclTax < inventTransferLineIN.NetAmount))
        {
            return lineExclTax;
        }

        return lineExclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseAmountPartition_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to get the Base amount based on ScrapQtyLine.
    /// </summary>
    /// <param name="_taxWorkTrans">
    /// TmpTaxWorkTrans table buffer.
    /// </param>
    /// <param name="_baseAmount">
    /// TaxbaseAmount table buffer.
    /// </param>
    /// <param name="_baseQty">
    /// Taxbase table buffer.
    /// </param>
    /// <returns>
    /// Returns the Base amount.
    /// </returns>
    /// <remarks>
    /// This method used to get the Base amount based on ScrapQtyLine.
    /// </remarks>

    protected TaxBase getBaseAmountPartition_IN(TmpTaxWorkTrans _taxWorkTrans, TaxBase _baseAmount, TaxBase _baseQty)
    {
        TaxBase ret;

        ret = super(_taxWorkTrans, _baseAmount, _baseQty);

        return _taxWorkTrans.IsScrapQtyLine_IN ? (_baseAmount * (inventTransferParmLineLoc.QtyScrapNow /_baseQty)) : ret ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to get the Excise tax amount.
    /// </summary>
    /// <returns>
    /// Returns the Excise tax amount.
    /// </returns>
    public real getExciseTaxAmount()
    {
        AmountCur exciseTaxAmountLoc = abs(excInvTaxAmtLoc);

        return exciseTaxAmountLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the Sales tax amount.
    /// </summary>
    /// <returns>
    /// Returns the Sales tax amount.
    /// </returns>
    public real getSalesTaxAmount()
    {
        AmountCur slsTaxAmtLoc = abs(slsInvTaxAmtLoc);

        return slsTaxAmtLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATTaxAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the VAT tax amount.
    /// </summary>
    /// <returns>
    /// Returns the VAT tax amount.
    /// </returns>
    public real getVATTaxAmt()
    {
        AmountCur vatTaxAmtLoc = abs(vatInvTaxAmtLoc);

        return vatTaxAmtLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to initialize <c>inventTransferLine</c> table.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if tax code by line is not there.
    /// </exception>
    protected void init()
    {
        headingRecId       = inventTransferTable
                             ? inventTransferTable.RecId
                             : InventTransferTable::find(inventTransferParmTable.TransferId).RecId;

        headingTableId     = tablenum(InventTransferTable);

        sourceCurrencyCode = Ledger::accountingCurrency();

        triangulation     = this.euroTriangulation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        taxDate           = inventTransferTableTransDate;
        boolean moreLines = true;

        if (inventTransferParmTable)
        {
            inventTransferUpdateType = inventTransferParmTable.UpdateType;
        }

        this.initCursor();

        while (moreLines)
        {
            inventTransferLine = this.nextLine();
            inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

            if (inventTransferLine)
            {
                this.parmInventTransferParmLine_IN(inventTransferParmLine);

                this.insertIntersection(inventTransferLineIN.TaxGroup,
                                        inventTransferLineIN.TaxItemGroup,
                                        inventTransferLine.InventTransId,
                                        inventTransferLine.ItemId,
                                        inventTransferTableTransDate);

                if (!this.checkTaxCodesByLine())
                {
                    throw error("@SYS22772");
                }
            }
            else
            {
                moreLines = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the query.
    /// </summary>
    public void  initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to insert the <c>InventTransferLine</c> table value to <c>TaxWorkTrans</c> table.
    /// </summary>
    protected void initLine()
    {
        inventTransferTable     = InventTransferTable::find(inventTransferLine.TransferId);
        headingTableId          = tablenum(InventTransferTable);
        headingRecId            = inventTransferTable.RecId;

        sourceCurrencyCode      = Ledger::accountingCurrency();

        triangulation           = this.euroTriangulation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        taxDate                 = inventTransferTableTransDate;

        this.insertIntersection(inventTransferLineIN.TaxGroup,
                               inventTransferLineIN.TaxItemGroup,
                               inventTransferLine.InventTransId,
                               inventTransferLine.ItemId,
                               inventTransferTableTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the invent account.
    /// </summary>
    /// <param name="_itemId">
    /// A unique item id to find the account.
    /// </param>
    /// <returns>
    /// Returns the account.
    /// </returns>
    public LedgerDimensionDefaultAccount inventAcc(ItemId _itemId)
    {
        InventPosting                        inventPostingAcc;
        LedgerDimensionDefaultAccount        inventLedgerAcc;

        select firstonly InventAccountType, ItemCode, LedgerDimension
            from inventPostingAcc
            where inventPostingAcc.ItemRelation == _itemId;

        if (inventPostingAcc.InventAccountType == InventAccountType::InventIssue)
        {
            if (inventPostingAcc.ItemCode == InventPostingItemCode::GroupId)
            {
                inventLedgerAcc = inventPostingAcc.LedgerDimension;
            }

            if (inventPostingAcc.ItemCode == InventPostingItemCode::Table)
            {
                inventLedgerAcc = inventPostingAcc.LedgerDimension;
            }
        }
        if (inventPostingAcc.InventAccountType == InventAccountType::InventLoss)
        {
            if (inventPostingAcc.ItemCode == InventPostingItemCode::GroupId)
            {
                inventLedgerAcc = inventPostingAcc.LedgerDimension;
            }

            if (inventPostingAcc.ItemCode == InventPostingItemCode::Table)
            {
                inventLedgerAcc = inventPostingAcc.LedgerDimension;
            }
        }
        return inventLedgerAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the tax module type.
    /// </summary>
    public void inventModuleType()
    {
        taxModuleType = TaxModuleType::StockTransfer_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to insert the data in the <c>TaxTrans</c> table.
    /// </summary>
    /// <param name="_ledgerVoucherloc">
    /// A ledger voucher object.
    /// </param>
    /// <param name="_isShip">
    /// A boolean value.
    /// </param>
    /// <param name="_inventTransferParmLineLoc">
    /// A buffer of the <c>InventTransferParmLine</c> table.
    /// </param>
    /// <param name="_stockTransferVoucherId">
    /// A transfer voucher id.
    /// </param>
    public void inventPost(LedgerVoucher            _ledgerVoucherloc,
                           boolean                  _isShip,
                           InventTransferParmLine   _inventTransferParmLineLoc = null,
                           InventTransferVoucherId  _stockTransferVoucherId = '')
    {
        TaxTrans                taxTransVATRetention;
        TaxTrans_IN             taxTransIN;

        this.setTransferStatus(_isShip);
        if (InventTransferTable::find(_inventTransferParmLineLoc.inventTransferLine().TransferId).TransferType_IN == TransferType_IN::StockTransfer)
        {
            this.parmInventTransferParmLine (_inventTransferParmLineLoc);
            this.parmInventTransferVoucherId(_stockTransferVoucherId);
        }
        taxRegulationExist = false;
        ttsBegin;
        this.saveAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucherloc));
        ttsCommit;

        if (retentionTaxAmt && this.shouldInsertTaxTrans())
        {
            retentionAmt = -retentionAmt;
            retentionTaxAmt = -retentionTaxAmt;
            InventTransferLine inventTransferLineLoc = _inventTransferParmLineLoc.inventTransferLine();
            InventTransferLine_IN inventTransferLineINLoc = inventTransferLineLoc.inventTransferLine_IN();
            TaxTable taxTable = TaxTable::find(inventTransferLineINLoc.VATRetentionCode);

            TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventTransferLineLoc);

            TaxTrans_W taxTransVATRetention_W = taxTransVATRetention.taxTrans_W();
            taxTransVATRetention.SourceTableId          = inventTransferLineLoc.TableId;
            taxTransVATRetention.SourceRecId            = inventTransferLineLoc.RecId;
            taxTransVATRetention.Source                 = TaxModuleType::StockTransfer_IN;
            taxTransVATRetention.Voucher                = voucher;
            taxTransVATRetention.TransDate              = InventTransferParmTable::find(_inventTransferParmLineLoc.ParmId, _inventTransferParmLineLoc.TransferId).TransDate;
            taxTransVATRetention.InventTransId          = _inventTransferParmLineLoc.InventTransId;
            taxTransVATRetention.TaxCode                = inventTransferLineINLoc.VATRetentionCode;
            taxTransVATRetention_W.TaxType_IN             = TaxType_IN::VAT;
            taxTransVATRetention.TaxValue               = inventTransferLineINLoc.Retention;
            taxTransVATRetention.TaxDirection           = TaxDirection::IncomingTax;
            taxTransVATRetention_W.TaxRegistrationNumberTable_IN = transTaxInformation.VATTIN;

            taxTransVATRetention.UnrealizedTax          = NoYes::No;
            taxTransVATRetention.RealizedDate           = dateNull();

            taxTransVATRetention.SourceCurrencyCode     = inventTransferLineINLoc.CurrencyCode;
            taxTransVATRetention.CurrencyCode           = taxTable.TaxCurrencyCode;
            taxTransVATRetention_W.TaxComponentTable_IN        = taxTable.TaxComponentTable_IN;
            taxTransVATRetention.TaxOrigin              = TaxOrigin::Tax;

            Currency currencySource = Currency::find(inventTransferLineINLoc.CurrencyCode);
            Currency currency = Currency::find(taxTransVATRetention.CurrencyCode);

            taxTransVATRetention.TaxBaseAmountCur       = currency.amount_Instance(retentionAmt);
            taxTransVATRetention.TaxBaseAmount          = retentionAmt;
            taxTransVATRetention.SourceBaseAmountCur    = currencySource.amount_Instance(retentionAmt);
            taxTransVATRetention.TaxAmount              = retentionTaxAmt;
            taxTransVATRetention.TaxAmountCur           = currency.amount_Instance(retentionTaxAmt);
            taxTransVATRetention.SourceTaxAmountCur     = currencySource.amount_Instance(retentionTaxAmt);
            taxTransVATRetention.packTaxTrans_W(taxTransVATRetention_W);
            taxTransVATRetention.insert();

            taxTransIN.insertStockTransferDetails(inventTransferLineLoc,
                                                taxTransVATRetention.TransDate,
                                                inventTransferLineIN.UnitPrice == 0
                                                ? decRound(inventTransferLineINLoc.NetAmount / inventTransferLineLoc.QtyTransfer, #decimalRound)
                                                : inventTransferLineINLoc.UnitPrice,
                                                _inventTransferParmLineLoc.QtyShipNow,
                                                this.parmRetentionAcc(),
                                                this.parmUnitPrice(),
                                                retentionTaxAmt,
                                                voucher,
                                                taxTransVATRetention.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an inventory transfer order should be inserted into <c>TaxTrans_IN</c>.
    /// </summary>
    /// <returns>
    /// true if the inventory transfer order should be inserted into <c>TaxTrans_IN</c>; otherwise, false.
    /// </returns>
    [Hookable]
    private boolean shouldInsertTaxTrans()
    {
        return (inventTransferUpdateType == InventTransferUpdateType::Shipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check whether line exists.
    /// </summary>
    /// <returns>
    /// Returns true if line exists.
    /// </returns>
    public boolean lineExist()
    {
        return lineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used for initialization.
    /// </summary>
    /// <param name="_orderTable">
    /// A common table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// A exception to throw.
    /// </exception>
    protected void new(Common _orderTable)
    {
        super();

        switch (_orderTable.TableId)
        {
            case tablenum(InventTransferParmTable):
                inventTransferParmTable = _orderTable;
                break;
            case tablenum(InventTransferTable):
                inventTransferTable = _orderTable;
                break;
            case tablenum(InventTransferLine):
                inventTransferLine = _orderTable;
                inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
                break;
            default :
                throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the next line.
    /// </summary>
    /// <returns>
    /// Returns the table buffer.
    /// </returns>
    public Common nextLine()
    {
        previnventTransferLine  = inventTransferLine.data();
        lineExist               = false;
        inventTransferLine      = null;

        while (queryTransact.next())
        {
            inventTransferLine = this.queryGet(queryTransact);
            if (inventTransferLine)
            {
                lineExist = true;
                break;
            }
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferParmLine</Name>
				<Source><![CDATA[
    public InventTransferParmLine parmInventTransferParmLine(InventTransferParmLine   _inventTransferParmLineLoc = inventTransferParmLineLoc)
    {
        inventTransferParmLineLoc = _inventTransferParmLineLoc;
        return inventTransferParmLineLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferTableTransDate_IN</Name>
				<Source><![CDATA[
    public TransDate parmInventTransferTableTransDate_IN(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        inventTransferTableTransDate = _transDate;

        return inventTransferTableTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferVoucherId</Name>
				<Source><![CDATA[
    public InventTransferVoucherId parmInventTransferVoucherId(InventTransferVoucherId  _stockTransferVoucherId = stockTransferVoucherId)
    {
        stockTransferVoucherId = _stockTransferVoucherId;
        return stockTransferVoucherId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetentionAcc</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmRetentionAcc(LedgerDimensionDefaultAccount _retentionAcc = retentionAcc)
    {
        retentionAcc = _retentionAcc;

        return retentionAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetentionAmount</Name>
				<Source><![CDATA[
    public NetAmount_IN parmRetentionAmount(NetAmount_IN  _retentionAmount = retentionAmt)
    {
        retentionAmt = _retentionAmount;

        return retentionAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetentionTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmount parmRetentionTaxAmount(TaxAmount  _retentionTaxAmount = retentionTaxAmt)
    {
        retentionTaxAmt = _retentionTaxAmount;

        return retentionTaxAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipReceive</Name>
				<Source><![CDATA[
    public boolean parmShipReceive(boolean _shipReceive = shipReceive)
    {
        shipReceive = _shipReceive;
        return shipReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>unitPrice</c> parameter.
    /// </summary>
    /// <param name="_unitPrice">
    /// The value to set.
    /// </param>
    /// <returns>
    ///  The value of the <c>unitPrice</c> parameter.
    /// </returns>
    public UnitPrice_IN parmUnitPrice(UnitPrice_IN  _unitPrice = unitPrice)
    {
        unitPrice = _unitPrice;

        return unitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postHandleExciseQuantityRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts handle excise quantity register.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The tax mode excise taxable information.
    /// </param>
    /// <param name="_register">
    /// The tax excise quantity register information.
    /// </param>
    /// <param name="_taxTransIN">
    /// The tax trans information.
    /// </param>
    protected void postHandleExciseQuantityRegister_IN(
        TaxModelExciseTaxable_IN        _taxModelExciseTaxable,
        TaxExciseQuantityRegister_IN    _register,
        TaxTrans_IN                     _taxTransIN)
    {
        super(_taxModelExciseTaxable, _register, _taxTransIN);

        // As current design, the posting document is InventTransferParmLine instead of InventTransferJourLine,
        // have to make code below to get the voucher id.
        // Once the stock transfer redesigned to use InventTransferJourLine as the source document,
        // the code could be clean here.
        _taxTransIN.selectForUpdate(true);
        _taxTransIN.Voucher = this.parmVoucher();
        _taxTransIN.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to initialize the query.
    /// </summary>
    /// <returns>
    /// Returns the query run object.
    /// </returns>
    public QueryRun  queryBuild()
    {
        QueryRun  query;

        if (inventTransferParmTable)
        {
            query = new QueryRun(inventTransferParmTable.queryInventTransferParmLine_IN());
        }
        else
        {
            query = new QueryRun(querystr(InventTransferLine_IN));
            query.query().dataSourceTable(tablenum(InventTransferLine)).rangeField(fieldnum(InventTransferLine, TransferId)).value(queryValue(inventTransferTable.TransferId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the query.
    /// </summary>
    /// <param name="_queryRun">
    /// A query run object.
    /// </param>
    /// <returns>
    /// Returns the query object of invent transfer line.
    /// </returns>
    public InventTransferLine queryGet(QueryRun _queryRun)
    {
        InventTransferLine queryInventTransferLine;

        if (inventTransferParmTable)
        {
            if (_queryRun.changed(tablenum(InventTransferParmLine)))
            {
                inventTransferParmLine = _queryRun.get(tablenum(InventTransferParmLine));
            }
            if (inventTransferParmLine)
            {
                queryInventTransferLine = InventTransferLine::findTransIdShip(inventTransferParmLine.InventTransId);
            }
            if (!queryInventTransferLine)
            {
                queryInventTransferLine = InventTransferLine::findTransIdTransitFrom(inventTransferParmLine.InventTransIdTransit);
            }
        }
        else
        {
            if (_queryRun.changed(tablenum(InventTransferLine)))
            {
                queryInventTransferLine = _queryRun.get(tablenum(InventTransferLine));
            }
        }

        return queryInventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadOnInventAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the load on inventort account.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    public void setLoadOnInventAcc(InventTransferLine _inventTransferLine)
    {
        if ( InventModelGroupItem::modelGroupByItemIdLegalEntity(_inventTransferLine.ItemId).inventModel != InventModel::StdCost )
        {
            inventReceiptAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransferLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferReceipt_IN));
        }
        else
        {
            inventReceiptAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransferLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::PurchStdCostPurchasePriceVariance));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the transfer status.
    /// </summary>
    /// <param name="_isShip">
    /// A boolean value.
    /// </param>
    public void setTransferStatus(boolean _isShip)
    {
        if (_isShip)
        {
            inventTransferUpdateType = InventTransferUpdateType::Shipment;
        }
        else
        {
            inventTransferUpdateType = InventTransferUpdateType::Receive;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the voucher Id.
    /// </summary>
    /// <param name="_voucherID">
    /// A voucher ID.
    /// </param>
    /// <returns>
    /// Returns the Voucher.
    /// </returns>
    public Voucher setVoucherId(Voucher _voucherID)
    {
        voucher = _voucherID;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to show the tax line.
    /// </summary>
    public void showTaxLine()
    {
        this.insertIntersection(inventTransferLineIN.TaxGroup,
                                inventTransferLineIN.TaxItemGroup,
                                inventTransferLine.InventTransId,
                                inventTransferLine.ItemId,
                                inventTransferLine.ShipDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get source recId.
    /// </summary>
    /// <returns>
    /// Returns the invent transfer line recid.
    /// </returns>
    public RecId sourceRecID()
    {
        if (inventTransferParmLineLoc)
        {
            return inventTransferParmLineLoc.RecId;
        }
        else
        {
            return inventTransferLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get source table Id.
    /// </summary>
    /// <returns>
    /// Returns the invent transfer line table Id.
    /// </returns>
    public tableId sourceTableId()
    {
        if (inventTransferParmLineLoc)
        {
            return inventTransferParmLineLoc.TableId;
        }
        else
        {
            return inventTransferLine.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a Boolean value that indicates whether the current transaction being calculated
    ///    supports sales tax adjustments.
    /// </summary>
    /// <returns>
    ///    true if the current transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used construct the <c>InventTransLineTax_IN</c> class.
    /// </summary>
    /// <param name="_orderTable">
    /// A common table buffer.
    /// </param>
    /// <param name="_inventTransferParmLineTransDate">
    /// A transaction date.
    /// </param>
    /// <param name="_inventTransferParmLine">
    /// A inventTransferParmLine buffer.
    /// </param>
    /// <returns>
    /// Returns the object of <c>InventTransLineTax_IN</c> class.
    /// </returns>
    /// <remarks>
    /// This method is used construct the <c>InventTransLineTax_IN</c> class.
    /// </remarks>

    public static InventTransLineTax_IN construct(
        Common      _orderTable,
        TransDate   _inventTransferParmLineTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InventTransferParmLine   _inventTransferParmLine = null)
    {
        InventTransLineTax_IN inventTransLineTax;

        inventTransLineTax = new InventTransLineTax_IN (_orderTable);
        inventTransLineTax.parmInventTransferTableTransDate_IN(_inventTransferParmLineTransDate);
        inventTransLineTax.parmInventTransferParmLine_IN(_inventTransferParmLine);
        inventTransLineTax.inventModuleType();

        if (_orderTable.TableId == tablenum(InventTransferLine))
        {
            inventTransLineTax.initLine();
        }
        else
        {
            inventTransLineTax.init();
        }

        return inventTransLineTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>