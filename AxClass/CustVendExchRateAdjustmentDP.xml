<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchRateAdjustmentDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendExchRateAdjustmentDP</c> class is the Report Data Provider class
/// for the <c>CustExchRateAdjustment</c> and <c>VendExchRateAdjustment</c> reports.
/// </summary>
[SRSReportParameterAttribute(classStr(CustVendExchRateAdjustmentContract))]
public class CustVendExchRateAdjustmentDP extends SrsReportDataProviderPreProcessTempDB
{
    private CustVendExchRateAdjustmentTmp custVendExchRateAdjustmentTmp;

    private TransDate consideredDate;
    private TransDate dateOfRate;
    private CreatedTransactionId transactionId;
    private ModuleCustVend module;

    private const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustVendExchRateAdjustmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>CustVendExchRateAdjustmentTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustVendExchRateAdjustmentTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(CustVendExchRateAdjustmentTmp))]
    public CustVendExchRateAdjustmentTmp getCustVendExchRateAdjustmentTmp()
    {
        select custVendExchRateAdjustmentTmp;
        return custVendExchRateAdjustmentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        CustVendExchRateAdjustmentContract contract = this.parmDataContract() as CustVendExchRateAdjustmentContract;

        transactionId = contract.parmTransactionId();
        consideredDate = contract.parmConsideredDate();
        dateOfRate = contract.parmDateOfRate();
        module = contract.parmModule();

        this.insertSubLedgerTransactionInfo();
        this.insertGeneralLedgerTransactionInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSubLedgerTransactionInfo</Name>
				<Source><![CDATA[
    private void insertSubLedgerTransactionInfo()
    {
        ExchangeRateHelper exchangeRateHelper;

        AccountNum accountNum;
        CurrencyCode currencyCode;
        AmountMST accountingExchangeAdjustment;
        AmountMSTSecondary reportingExchangeAdjustment;
        AmountCur transactionCurrencyBalanceAsOfConsideredDate;
        AmountMst accountingCurrencyBalanceAsOfConsideredDate;
        AmountMSTSecondary reportingCurrencyBalanceAsOfConsideredDate;
        AmountMST accountingCurrencyBalanceBeforeRevaluation;
        AmountMSTSecondary reportingCurrencyBalanceBeforeRevaluation;
        ExchRate accountingCurrencyExchangeRate, accountingCurrencyExchangeRateUsedForDisplay;
        ExchRate reportingCurrencyExchangeRate, reportingCurrencyExchangeRateUsedForDisplay;

        CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(module);
        LedgerRecId currentLedgerRecId = Ledger::current();
        CurrencyCode currentReportingCurrency = Ledger::reportingCurrencyByLedger(currentLedgerRecId);

        // Determine balances as of the revaluation date (including this revaluation)
        Map revaluedAccountBalances = this.findBalancesAsOfConsideredDate();
        MapEnumerator accountBalanceEnumerator = revaluedAccountBalances.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(custVendExchRateAdjustmentTmp.TableId, true, true, true, false, true, custVendExchRateAdjustmentTmp);

        while (accountBalanceEnumerator.moveNext())
        {
            // Information is reported by account number and currency, so insert records into the report's temporary table accordingly.
            [accountNum, currencyCode] = accountBalanceEnumerator.currentKey();

            [transactionCurrencyBalanceAsOfConsideredDate,
                accountingCurrencyBalanceAsOfConsideredDate,
                reportingCurrencyBalanceAsOfConsideredDate] = accountBalanceEnumerator.currentValue();

            // Sum all exchange adjustments for this account / currency combination
            select sum(AmountMST), sum(ReportingCurrencyAmount) from custVendTrans
                where custVendTrans.CreatedTransactionId == transactionId
                    && custVendTrans.CurrencyCode == currencyCode
                    && custVendTrans.AccountNum == accountNum
                    && custVendTrans.TransDate <= consideredDate;

            accountingExchangeAdjustment = custVendTrans.AmountMST;
            reportingExchangeAdjustment = custVendTrans.ReportingCurrencyAmount;

            accountingCurrencyBalanceBeforeRevaluation = accountingCurrencyBalanceAsOfConsideredDate - accountingExchangeAdjustment;
            reportingCurrencyBalanceBeforeRevaluation = reportingCurrencyBalanceAsOfConsideredDate - reportingExchangeAdjustment;

            // Determine the accounting and reporting exchange rates used during revaluation
            exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                currentLedgerRecId,
                currencyCode,
                dateOfRate);

            exchangeRateHelper.parmErrorType(AifErrorType::None);           
            accountingCurrencyExchangeRate = exchangeRateHelper.getCrossRate();
            accountingCurrencyExchangeRateUsedForDisplay = exchangeRateHelper.displayStoredExchangeRate(accountingCurrencyExchangeRate);

            if (currentReportingCurrency)
            {        
                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(currentLedgerRecId, currencyCode, dateOfRate);
                helper.parmToCurrency(Ledger::reportingCurrencyByLedger(currentLedgerRecId));
                helper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                reportingCurrencyExchangeRate = helper.getCrossRate();

                exchangeRateHelper.parmToCurrency(currentReportingCurrency);
                exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                reportingCurrencyExchangeRateUsedForDisplay = exchangeRateHelper.displayStoredExchangeRate(reportingCurrencyExchangeRate);
            }

            // Report on the information gathered
            custVendExchRateAdjustmentTmp.clear();

            custVendExchRateAdjustmentTmp.HeaderBalanceAsOf =
                strFmt("@SYS96283", date2StrUsr(consideredDate, DateFlags::FormatAll));

            switch (module)
            {
                case ModuleCustVend::Cust:
                    custVendExchRateAdjustmentTmp.CustAccountNumTrans = accountNum;
                    break;

                case ModuleCustVend::Vend:
                    custVendExchRateAdjustmentTmp.VendAccountNumTrans = accountNum;
                    break;
            }

            custVendExchRateAdjustmentTmp.AccountName = CustVendTable::findModule(module, accountNum).name();
            custVendExchRateAdjustmentTmp.CurrencyCodeTrans = currencyCode;

            custVendExchRateAdjustmentTmp.ExchangeRate = accountingCurrencyExchangeRateUsedForDisplay;
            custVendExchRateAdjustmentTmp.OldBalance = accountingCurrencyBalanceBeforeRevaluation;
            custVendExchRateAdjustmentTmp.ExchangeAdj = accountingExchangeAdjustment;

            custVendExchRateAdjustmentTmp.ExchangeRateReporting = reportingCurrencyExchangeRateUsedForDisplay;
            custVendExchRateAdjustmentTmp.OldBalanceReporting = reportingCurrencyBalanceBeforeRevaluation;
            custVendExchRateAdjustmentTmp.ExchangeAdjReporting = reportingExchangeAdjustment;

            custVendExchRateAdjustmentTmp.AmountCur = transactionCurrencyBalanceAsOfConsideredDate;
            custVendExchRateAdjustmentTmp.AmountMSTTrans = accountingCurrencyBalanceAsOfConsideredDate;
            custVendExchRateAdjustmentTmp.AmountReportingTrans = reportingCurrencyBalanceAsOfConsideredDate;

            custVendExchRateAdjustmentTmp.DateOfCreation = DateTimeUtil::getToday(GMT);

            recordInsertList.add(custVendExchRateAdjustmentTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralLedgerTransactionInfo</Name>
				<Source><![CDATA[
    private void insertGeneralLedgerTransactionInfo()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;

        RecordInsertList recordInsertList = new RecordInsertList(custVendExchRateAdjustmentTmp.TableId, true, true, true, false, true, custVendExchRateAdjustmentTmp);

        while select AccountingCurrencyAmount, ReportingCurrencyAmount, TransactionCurrencyCode from generalJournalAccountEntry
            where generalJournalAccountEntry.createdTransactionId == transactionId
                && (generalJournalAccountEntry.PostingType == LedgerPostingType::ExchRateGain
                || generalJournalAccountEntry.PostingType == LedgerPostingType::ExchRateLoss)
            join AccountingDate from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join LedgerDimensionId, MainAccount, MainAccountRecId from mainAccountLedgerDimensionView
                where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
        {
            custVendExchRateAdjustmentTmp.clear();

            custVendExchRateAdjustmentTmp.CurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;

            custVendExchRateAdjustmentTmp.TransDate = generalJournalEntry.AccountingDate;
            custVendExchRateAdjustmentTmp.AmountMST = generalJournalAccountEntry.AccountingCurrencyAmount;
            custVendExchRateAdjustmentTmp.AmountReporting = generalJournalAccountEntry.ReportingCurrencyAmount;

            custVendExchRateAdjustmentTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
            custVendExchRateAdjustmentTmp.LedgerDimension = mainAccountLedgerDimensionView.LedgerDimensionId;
            custVendExchRateAdjustmentTmp.MainAccount = mainAccountLedgerDimensionView.MainAccount;
            custVendExchRateAdjustmentTmp.AccountDescr = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);

            recordInsertList.add(custVendExchRateAdjustmentTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBalancesAsOfConsideredDate</Name>
				<Source><![CDATA[
    private Map findBalancesAsOfConsideredDate()
    {
        RecId lastProcessedRecId;
        AmountCur transactionBalance;
        AmountMst mstBalanceAfterRevaluation;
        AmountMSTSecondary reportingBalanceAfterRevaluation;

        CustVendTrans exchangeAdjustmentTrans = CustVendTrans::getEmptyTableBuffer(module);
        CustVendTrans revaluedTrans = CustVendTrans::getEmptyTableBuffer(module);
        CustVendSettlement exchangeAdjustmentSettlement = CustVendSettlement::getEmptyTableBuffer(module);
        CustVendSettlement revaluedSettlement = CustVendSettlement::getEmptyTableBuffer(module);
        Map accountBalances = new Map(Types::Container, Types::Container);

        #LocalMacro.KeyFromTable
            revaluedTrans.AccountNum,
            revaluedTrans.CurrencyCode
        #EndMacro

        // Find all subledger transactions that were revalued as part of the process. Settlement records are created
        // for each exchange adjustment, and the offsetRecId points to the transaction that was revalued. Once we
        // have this, we can calculate the balance as of the considered date (including the revaluation).
        while select OffsetRecId from exchangeAdjustmentSettlement
            group by exchangeAdjustmentSettlement.OffsetRecId
            join RecId from exchangeAdjustmentTrans
                where exchangeAdjustmentTrans.createdTransactionId == transactionId
                    && exchangeAdjustmentTrans.RecId == exchangeAdjustmentSettlement.TransRecId
        {
            // It is only necessary to process each revalued transaction once to determine the balance as of
            // the considered date. There can be many settlement records including the same transaction due to
            // the way unrealized adjustments are created and backed out during processing.
            if (lastProcessedRecId != exchangeAdjustmentSettlement.OffsetRecId)
            {
                select firstonly AmountCur, AmountMST, ReportingCurrencyAmount, AccountNum, CurrencyCode from revaluedTrans
                    where revaluedTrans.RecId == exchangeAdjustmentSettlement.OffsetRecId;

                // Summing the settlement records as of a particular date is the only way to get an accuarate
                // balance at a point in time. Looking only at the transaction records does not provide a true
                // picture due to partial settlements, different transaction and settlement dates, etc. The sum
                // calculated here includes the exchange adjustments calculated as part of the revaluation process.
                select sum(SettleAmountCur), sum(SettleAmountMst), sum(SettleAmountReporting), sum(ExchAdjustment), sum(ExchAdjustmentReporting) from revaluedSettlement
                    where revaluedSettlement.TransDate <= consideredDate
                        && revaluedSettlement.TransRecId == exchangeAdjustmentSettlement.OffsetRecId;

                // All transactions are grouped by account number and currency since that is how this information is reported. This
                // running sum is kept in a map since it can't be retrieved via one select statement.

                if (accountBalances.exists([#KeyFromTable]))
                {
                    [transactionBalance, mstBalanceAfterRevaluation, reportingBalanceAfterRevaluation] = accountBalances.lookup([#KeyFromTable]);
                }
                else
                {
                    transactionBalance = 0.0;
                    mstBalanceAfterRevaluation = 0.0;
                    reportingBalanceAfterRevaluation = 0.0;
                }

                transactionBalance += revaluedTrans.AmountCur - revaluedSettlement.SettleAmountCur;
                mstBalanceAfterRevaluation += revaluedTrans.AmountMST - (revaluedSettlement.SettleAmountMST - revaluedSettlement.ExchAdjustment);
                reportingBalanceAfterRevaluation += revaluedTrans.ReportingCurrencyAmount - (revaluedSettlement.SettleAmountReporting - revaluedSettlement.ExchAdjustmentReporting);

                accountBalances.insert([#KeyFromTable], [transactionBalance, mstBalanceAfterRevaluation, reportingBalanceAfterRevaluation]);

                lastProcessedRecId = exchangeAdjustmentSettlement.OffsetRecId;
            }
        }

        return accountBalances;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>