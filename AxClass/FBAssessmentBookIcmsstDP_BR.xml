<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBAssessmentBookIcmsstDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBAssessmentBookIcmsstDP_BR</c> class is the Report Data Provider class for the <c>FBAssessmentBookIcmsst_BR</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBAssessmentBookContract_BR))]
class FBAssessmentBookIcmsstDP_BR extends SRSReportDataProviderBase
{
    TmpFBAssessmentBook_BR tmpAssessmentBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        FBTaxAssessment_BR              taxAssessment;
        FBAssessmentBookContract_BR     contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        taxAssessment = FBTaxAssessment_BR::find(contract.parmTaxAssessmentRecId());

        query = new Query();

        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocumentView_BR));

        qbds.addGroupByField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, Direction));
        qbds.addGroupByField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, CFOP));

        qbds.addSelectionField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, AccountingAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBBookingPeriodFiscalDocumentView_BR, TaxBaseAmountOther), SelectionField::Sum);

        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, FBBookingPeriod_BR)).value(SysQuery::value(taxAssessment.FBBookingPeriod_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, FiscalSituation)).value(SysQuery::value(FBFiscalDocumentSituation_BR::Regular));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, FiscalSituation)).value(SysQuery::value(FBFiscalDocumentSituation_BR::Complementary));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, FiscalSituation)).value(SysQuery::value(FBFiscalDocumentSituation_BR::SpecialLegislation));

        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, AccountingDate)).value(SysQuery::range(taxAssessment.FromDate, taxAssessment.ToDate));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, Type)).value(SysQuery::value(TaxType_BR::ICMSST));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocumentView_BR, ThirdPartyState)).value(SysQuery::value(taxAssessment.State));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBAssessmentBook_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBAssessmentBook_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBAssessmentBook_BR))]
    public TmpFBAssessmentBook_BR getTmpAssessmentBook()
    {
        select tmpAssessmentBook;
        return tmpAssessmentBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBAssessmentBook_BR</c>
    /// </summary>
    private void insertTmpAssessmentBook()
    {
        tmpAssessmentBook.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        const str Position001 = '001';
        const str Position00202 = '00202';
        const str Position003 = '003';
        const str Position005 = '005';
        const str Position00602 = '00602';
        const str Position007 = '007';
        const str Position009 = '009';
        const str Position011 = '011';
        const str Position012 = '012';
        const str Position013 = '013';
        const str Position014 = '014';

        Query                                   query;
        QueryRun                                queryRun;

        FBBookingPeriodFiscalDocumentView_BR    bookingPeriodFiscalDocumentView;
        FBTaxAssessment_BR                      taxAssessment;
        CFOPTable_BR                            cfopTable;

        FBTaxAssessmentCalculatorIcmsSt_BR      taxAssessmentCalculatorIcmsSt;

        FBAssessmentBookContract_BR             contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        query = this.buildQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            bookingPeriodFiscalDocumentView = queryRun.get(tableNum(FBBookingPeriodFiscalDocumentView_BR));
            cfopTable                       = CFOPTable_BR::findByCFOPId(bookingPeriodFiscalDocumentView.CFOP);

            tmpAssessmentBook.Direction             = enum2int(bookingPeriodFiscalDocumentView.Direction);

            tmpAssessmentBook.CFOP                  = bookingPeriodFiscalDocumentView.CFOP;

            tmpAssessmentBook.Description           = cfopTable.Name;
            tmpAssessmentBook.ItemAmount            = bookingPeriodFiscalDocumentView.AccountingAmount;

            tmpAssessmentBook.TaxBaseAmount         = bookingPeriodFiscalDocumentView.TaxBaseAmount;
            tmpAssessmentBook.TaxAmount             = bookingPeriodFiscalDocumentView.TaxAmount;
            tmpAssessmentBook.TaxBaseAmountExempt   = bookingPeriodFiscalDocumentView.TaxBaseAmountExempt;
            tmpAssessmentBook.TaxBaseAmountOther    = bookingPeriodFiscalDocumentView.TaxBaseAmountOther;

            this.insertTmpAssessmentBook();
        }

        taxAssessment = FBTaxAssessment_BR::find(contract.parmTaxAssessmentRecId());

        taxAssessmentCalculatorIcmsSt = FBTaxAssessmentCalculator_BR::construct(taxAssessment);
        taxAssessmentCalculatorIcmsSt.calculate();

        tmpAssessmentBook.FooterPosition    = Position001;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getDebits();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00202;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getDebitsByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getDebitsByGeneralAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position003;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getCreditReversalByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getCreditReversalByGeneralAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position005;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getCredits();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getCreditsFromSalesReturn();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getTaxRefund();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00602;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getCreditsByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getCreditsByGeneralAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position007;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getDebitReversalByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += taxAssessmentCalculatorIcmsSt.getDebitReversalByGeneralAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position009;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getCreditBalanceFromPreviousPeriod();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position011;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getBalanceDue();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position012;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getDeductions();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position013;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getTaxAmountToPay();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position014;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIcmsSt.getCreditBalanceAtEndOfThePeriod();
        this.insertTmpAssessmentBook();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>