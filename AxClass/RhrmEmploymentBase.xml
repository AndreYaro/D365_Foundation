<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmEmploymentBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmEmploymentBase
{
    RHRMEmplTable               emplTable;
    boolean                     updateTbl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void cancel(RPayHistory _rPayHistory)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTblExist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean checkTblExist(RPayHistory    _rPayHistory)
    {
        boolean         ret = true;

        RPayTblTrans    rPayTblTrans;
        RHRMEmplTable   emplTableLocal;

        emplTableLocal = RHRMEmplTable::find(_rPayHistory.Number);

        if (endmth(_rPayHistory.StartDate) < RPayParameters::payPeriod())
        {
            ret = checkFailed(strFmt("@RUP2040",
                              _rPayHistory.Number,
                               emplTableLocal.name()));
        }

        if (ret)
        {
            emplTableLocal = RHRMEmplTable::find(_rPayHistory.Number);
            select firstonly rPayTblTrans
                where rPayTblTrans.EmplId     == _rPayHistory.Number &&
                      rPayTblTrans.SourceDate >= dateStartMth(_rPayHistory.StartDate);

            if (rPayTblTrans)
            {
                updateTbl = (Box::yesNo("@RUP2042",
                                        DialogButton::Yes,
                                        "@RUP6011",
                                        "@RUP971") == DialogButton::Yes);
            }
            else if (!emplTableLocal.PayEmploymentDate || emplTableLocal.PayResignedDate)
            {
                updateTbl = (Box::yesNo("@RUP2048",
                                        DialogButton::Yes,
                                        "@RUP2049",
                                        "@RUP971") == DialogButton::Yes);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormRun createForm(IdentifierName            _identifierName,
                                 RPayHistory               _rPayHistory)
    {
        Args    args;
        FormRun formRun;

        args = new Args();
        args.caller(this);
        args.record(_rPayHistory);

        formRun = new MenuFunction(_identifierName, MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistory</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayHistory createHistory()
    {
        RPayHistory                  rPayHistory;

        rPayHistory.initValue();
        rPayHistory.Number                 = emplTable.EmployeeId;
        rPayHistory.HistType               = RPayHistType::Employment;
        rPayHistory.OperationType          = this.operationType();

        return rPayHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMEmplId emplId()
    {
        return emplTable.EmployeeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMenuItemName</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected IdentifierName formMenuItemName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOrderName</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void lookupOrderName(FormStringControl   _ctrl)
    {
        SysTableLookup          sysTableLookup             = SysTableLookup::newParameters(tableNum(RHRMOrderName), _ctrl);
        Query                   query                      = new Query();
        QueryBuildDataSource    queryBuildDataSource       = query.addDataSource(tableNum(RHRMOrderName));
        QueryBuildRange         queryBuildRangeJournalType = queryBuildDataSource.addRange(fieldNum(RHRMOrderName, JournalType));
        QueryBuildRange         queryBuildRangeUserGroupId = queryBuildDataSource.addRange(fieldNum(RHRMOrderName, BlockUserGroupId));

        sysTableLookup.addLookupfield(fieldNum(RHRMOrderName, JournalNameId));
        sysTableLookup.addLookupfield(fieldNum(RHRMOrderName, Description));

        queryBuildRangeJournalType.value(queryValue(this.operationType()));
        queryBuildRangeUserGroupId.value(UserGroupList::groupsForUser());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(Common _common)
    {
        RPayHistory payHistory;

        switch (_common.TableId)
        {
            case tableNum(RHRMEmplTable):
                emplTable = _common;
                emplTable.selectForUpdate(true);
                break;

            case tableNum(RPayHistory):
                payHistory = _common;
                emplTable  = RHRMEmplTable::find(payHistory.Number, true);
                break;

            default:
                throw error(strFmt("@SYS23396", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMJournalType operationType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean prompt()
    {
        RPayHistory                  rPayHistory;
        Object                       formRun;
        IdentifierName               menuItemName;

        rPayHistory = RPayHistory::findLastSignOnMove(emplTable.EmployeeId);

        if (! rPayHistory || ! emplTable.PayEmploymentDate ||
            emplTable.PayEmploymentDate && emplTable.PayResignedDate)
            return checkFailed(strFmt("@RUP1655", emplTable.EmployeeId, emplTable.name()));

        if (isConfigurationkeyEnabled(configurationKeyNum(RHRM)))
            menuItemName = this.formMenuItemName();
        else
            menuItemName = menuitemDisplayStr(RPayEmployMoveDismiss);

        formRun = this.createForm(menuItemName, rPayHistory);

        return formRun.okPressed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void run(RPayHistory _rPayHistory)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates time sheet.
    /// </summary>
    /// <param name="_tsAffectedStartDate">
    /// The start date.
    /// </param>
    /// <param name="_tsAffectedEndDte">
    /// The end date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTimesheet(StartDate _tsAffectedStartDate, EndDate _tsAffectedEndDte)
    {
        RPayTblUpdater::updateTimesheetFromDocument(_tsAffectedStartDate, _tsAffectedEndDte, emplTable.EmployeeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean validate(RPayHistory _rPayHistory)
    {
        if (! _rPayHistory.HrmOrganizationId)
            return checkFailed(strFmt("@RUP1713",
                                      _rPayHistory.emplId(),
                                      RHRMEmplTable::emplId2Name(_rPayHistory.emplId())));
        if (! _rPayHistory.HcmTitle)
            return checkFailed(strFmt("@RUP1712",
                                      _rPayHistory.emplId(),
                                      RHRMEmplTable::emplId2Name(_rPayHistory.emplId())));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDismissOperation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkDismissOperation(RPayHistory _rPayHistory)
    {
        RPayAverageEarnEmplPeriodTable      rPayAverageEarnEmplPeriodTable;
        TransLink_RU                        transLink;

        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.EmplId               == _rPayHistory.Number    &&
                  rPayAverageEarnEmplPeriodTable.EndDate              >  _rPayHistory.StartDate &&
                  (rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation ||
                   rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::SickList ||
                   rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip)
            #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodTable);

        if (rPayAverageEarnEmplPeriodTable.RecId)
            return checkFailed(strFmt("@RUP2625", _rPayHistory.Number, RHRMEmplTable::find(_rPayHistory.Number).name()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RHRMEmploymentBase construct(RHRMJournalType _operationType,
                                               Common          _common)
    {
        switch (_operationType)
        {
            case RHRMJournalType::Receive:
                return new RHRMEmployeeEmploy(_common);
            case RHRMJournalType::Transfer:
                return new RHRMEmployeeMove(_common);
            case RHRMJournalType::Dismiss:
                return new RHRMEmployeeDismiss(_common);
        }
        throw error("@GLS106494");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>