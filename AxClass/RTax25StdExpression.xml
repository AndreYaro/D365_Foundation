<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdExpression</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25StdExpression
{
    RTax25StdExpressionTable    expressionTable;
    RTax25StdChannel            channel;
    RTax25ProfitTableRecId      profitTableRecId;
    RTax25StdSeqNum             seqNum;
    TransDate                   dateFrom;
    TransDate                   dateTo;

    RTax25StdExpressionLine     expressionLine;
    boolean                     useDocuments;
    Counter                     lineCount;
    AmountMST                   operandCashe[];
    AmountMST                   resultCashe[];
    AmountMST                   prevResult;

    RTax25StdDocuments          documents;
    boolean                     overWrite;
    boolean                     throwError;
    boolean                     useRegister;

    RTax25PeriodIterator        rTax25PeriodIterator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void calc()
    {
        this.preCalc();
        if (! useDocuments)
        {
            channel.clearData();
            channel.setDocDesc("", dateNull());
            this.calcOneLoop();
            return;
        }
        else
        {
            this.fillDocuments();
            while (documents.more())
            {
                channel.clearData();
                channel.setDocDesc(documents.docName(), documents.docDate());
                this.calcOneLoop();
                documents.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOneLoop</Name>
				<Source><![CDATA[
        private void calcOneLoop()
    {
        RTax25RegisterJournalTable  journalTable;
        RTax25StdOperandType        operandType;
        AmountMST                   operand;
        Counter                     i;

        if (useDocuments)
        {
            channel.setSignature(documents.tableId(), documents.recId(), profitTableRecId);
            channel.setTrans(documents.docVoucher(), documents.transDate());
        }
        else
        {
            if (useRegister)
            {
                select firstonly TableId, RecId from journalTable
                    where journalTable.EndDate == dateTo;
            }
            channel.setSignature(journalTable.tableId, journalTable.recId, profitTableRecId);
        }
        prevResult = 0;

        while select expressionLine
            order by LineNum
            where expressionLine.SeqNum            == seqNum
               && expressionLine.rTax25ProfitTable == profitTableRecId
        {
            setPrefix(strFmt("@GLS104233", expressionLine.SeqNum, RTax25ProfitTable::find(expressionLine.rTax25ProfitTable).ProfitId));
            i = expressionLine.LineNum;

            operandType = RTax25StdOperandType::newParameters(expressionLine.LineType);
            if (! operandType.documentBased() && ! operandType.resultBased())
            {
                operand = operandCashe[i];
            }
            else
            {
                operandType.parmExpression(this);
                operandType.parmExpressionLine(expressionLine);
                operand = operandType.operand();
            }
            if (throwError && ! operand && expressionLine.LineType != RTax25StdLineType::Constant)
            {
                warning(strFmt("@GLS104161", expressionLine.LineNum));
            }
            switch (expressionLine.Operator)
            {
                case RTax25StdOperator::None :
                    prevResult = operand;
                    break;
                case RTax25StdOperator::Plus :
                    prevResult = prevResult + operand;
                    break;
                case RTax25StdOperator::Minus :
                    prevResult = prevResult - operand;
                    break;
                case RTax25StdOperator::Multiplication :
                    prevResult = prevResult * operand;
                    break;
                case RTax25StdOperator::Division :
                    prevResult = operand ?
                                    prevResult / operand :
                                    0;
                    break;
                case RTax25StdOperator::Maximum :
                    prevResult =(prevResult < 0 && operand < 0) ?
                                    max(abs(prevResult), abs(operand)) * (-1) :
                                    max(prevResult, operand) * 1;
                    break;
                case RTax25StdOperator::Minimum :
                    prevResult = (prevResult < 0 && operand < 0) ?
                                    min(abs(prevResult), abs(operand)) * (-1) :
                                    min(prevResult, operand) * 1;
                    break;
            }
            resultCashe[i] = prevResult;
            channel.setField(expressionLine.ChannelFieldId, prevResult);
        }
        this.sendChannel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFrom</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public FromDate dateFrom()
    {
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTo</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ToDate dateTo()
    {
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>del_targetProfitId</Name>
				<Source><![CDATA[
        //use targetProfitTableRecId
    private void del_targetProfitId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>document</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RTax25StdDocuments document()
    {
        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocuments</Name>
				<Source><![CDATA[
private void fillDocuments()
    {
        RTax25LedgerRun ledgerRun;

        documents = RTax25StdDocuments::construct();

        ledgerRun = RTax25LedgerRun::newProfitTableRecId(documents,
                                                         methodStr(RTax25StdDocuments, loadDocument),
                                                         profitTableRecId);

        ledgerRun.run(dateFrom, dateTo, rTax25PeriodIterator);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
private void initParameters(RTax25StdExpressionTable _expressionTable,
                                RTax25StdChannel         _channel,
                                FromDate                 _fromDate,
                                ToDate                   _toDate,
                                RTax25PeriodIterator     _rTax25PeriodIterator)
    {
        expressionTable  = _expressionTable;
        profitTableRecId = expressionTable.rTax25ProfitTable;
        seqNum           = expressionTable.SeqNum;

        channel          = _channel;
        dateFrom         = _fromDate;
        dateTo           = _toDate;

        rTax25PeriodIterator = _rTax25PeriodIterator;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        useDocuments        = false;
        overWrite           = true;
        throwError          = true;
        documents           = RTax25StdDocuments::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverWrite</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmOverWrite(boolean _overWrite = overWrite)
    {
        overWrite = _overWrite;
        return overWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowError</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmThrowError(boolean _throwError = throwError)
    {
        throwError = _throwError;
        return throwError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalc</Name>
				<Source><![CDATA[
        private void preCalc()
    {
        RTax25StdOperandType operandType;

        lineCount = 0;
        while select expressionLine
            order by LineNum
            where expressionLine.SeqNum            == seqNum
               && expressionLine.rTax25ProfitTable == profitTableRecId
        {
            lineCount++;
            operandType = RTax25StdOperandType::newParameters(expressionLine.LineType);
            if (!operandType.documentBased())
            {
                if (!operandType.resultBased())
                {
                    operandType.parmExpression(this);
                    operandType.parmExpressionLine(expressionLine);
                    operandCashe[expressionLine.LineNum] = operandType.operand();
                    if (expressionLine.LineType == RTax25StdLineType::Register)
                    {
                        useRegister = true;
                    }
                }
            }
            else
            {
                useDocuments = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>result</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public AmountMST result(RTax25StdLineNum _idx)
    {
        return _idx > 0 ? resultCashe[_idx] : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendChannel</Name>
				<Source><![CDATA[
        private void sendChannel()
    {
        setPrefix(strFmt("@GLS104233", seqNum, RTax25ProfitTable::find(profitTableRecId).ProfitId));
        if (channel.check())
        {
            if (channel.exist())
            {
                if (overWrite)
                {
                    if (channel.clear())
                    {
                        channel.send();
                    }
                    else
                    {
                        if (throwError)
                        {
                            throw error("@SYS19437");
                        }
                        else
                        {
                            info(strFmt("@GLS107192", seqNum));
                        }
                    }
                }
            }
            else
            {
                channel.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetProfitTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a profit rec id for the current expression.
    /// </summary>
    /// <returns>
    /// The profit rec id of the expression.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25ProfitTableRecId targetProfitTableRecId()
    {
        return profitTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25StdExpression construct()
    {
        return new RTax25StdExpression();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static RTax25StdExpression newParameters(RTax25StdExpressionTable _expressionTable,
                                                    RTax25StdChannel         _channel,
                                                    FromDate                 _fromDate,
                                                    ToDate                   _toDate,
                                                    RTax25PeriodIterator     _rTax25PeriodIterator = null)
    {
        RTax25StdExpression ret = RTax25StdExpression::construct();

        ret.initParameters(_expressionTable,
                           _channel,
                           _fromDate,
                           _toDate,
                           _rTax25PeriodIterator);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU            correctedPeriodDate, tmpDate;
        RTax25StdOperandType        operandType;

        lineCount = 0;
        while select expressionLine
            order by LineNum
            where expressionLine.SeqNum            == seqNum
               && expressionLine.rTax25ProfitTable == profitTableRecId
               && (expressionLine.LineType == RTax25StdLineType::CredActivity ||
                   expressionLine.LineType == RTax25StdLineType::CredBalance  ||
                   expressionLine.LineType == RTax25StdLineType::DebActivity  ||
                   expressionLine.LineType == RTax25StdLineType::DebBalance   ||
                   expressionLine.LineType == RTax25StdLineType::Price        ||
                   expressionLine.LineType == RTax25StdLineType::Qty          ||
                   expressionLine.LineType == RTax25StdLineType::Profit       ||
                   expressionLine.LineType == RTax25StdLineType::DeferralsWritingOff)
        {
            lineCount++;

            operandType = RTax25StdOperandType::newParameters(expressionLine.LineType);
            operandType.parmExpression(this);
            operandType.parmExpressionLine(expressionLine);

            if (operandType.documentBased())
            {
                tmpDate = RTax25LedgerRun::newProfitTableRecIdCheckCorr(profitTableRecId).calcCorrectedPeriodDate(
                    _fromDateCalc,
                    _toDateCalc,
                    _toDateCorr);

                if (!correctedPeriodDate || (tmpDate && correctedPeriodDate > tmpDate))
                {
                    correctedPeriodDate = tmpDate;
                }
            }
            else
            {
                tmpDate = operandType.correctedPeriodDate(_fromDateCalc, _toDateCalc, _toDateCorr);

                if (!correctedPeriodDate || (tmpDate && correctedPeriodDate > tmpDate))
                {
                    correctedPeriodDate = tmpDate;
                }
            }
        }

        return correctedPeriodDate;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>