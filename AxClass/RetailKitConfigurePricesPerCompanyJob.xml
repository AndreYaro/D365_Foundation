<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailKitConfigurePricesPerCompanyJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailKitConfigurePricesPerCompanyJob</c> class provides batch job support for calls tocreateKitPricesPerCompany in <c>RetailKitConfigurator</c>.
/// </summary>
class RetailKitConfigurePricesPerCompanyJob Extends RunBaseBatch
{
    AmountCur totalKitPrice;
    RetailKitRecId retailKitRecId;
    CompanyId company;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        totalKitPrice
        ,retailKitRecId
        ,company
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailKitConfigureApprovalJob</c>.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailKitConfigureApprovalJob</c>.</returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of the <c>RetailKitConfigureApprovalJob</c> class.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the class.
    /// </summary>
    /// <returns>The description of the class.</returns>
    public static ClassDescription description()
    {
        return "@Retail:KitConfigurePricesPerCompanyJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailAssortmentLookupJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailAssortmentLookupJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailKitRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the assortment identifier to process. If not set, nothing is processed.
    /// </summary>
    /// <param name="_retailKitRecId">
    /// The record identifier of the assortment to process.
    /// </param>
    /// <returns>
    /// The record identifier of the assortment being processed.
    /// </returns>
    public RetailKitRecId parmRetailKitRecId(RetailKitRecId _retailKitRecId = retailKitRecId)
    {
        retailKitRecId = _retailKitRecId;;
        return retailKitRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalKitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total kit price.
    /// </summary>
    /// <param name = "_totalKitPrice">The total kit price.</param>
    /// <returns>The total kit price.</returns>
    public AmountCur parmTotalKitPrice(AmountCur _totalKitPrice = totalKitPrice)
    {
        totalKitPrice = _totalKitPrice;;
        return totalKitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the company.
    /// </summary>
    /// <param name = "_company">The company.</param>
    /// <returns>The company.</returns>
    public CompanyId parmCompany(CompanyId _company = company)
    {
        company = _company;
        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the batch job operation to approve the retail kit configuraiton.
    /// </summary>
    public void run()
    {
        RetailKit retailKit;

        ttsbegin;

        retailKit = RetailKit::find(retailKitRecId);

        if (retailKit.RecId)
        {
            RetailKitConfigurator::createKitPricesPerCompany(totalKitPrice, retailKit, company);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method which initializes the call for the other methods.
    /// </summary>
    /// <param name="_args">
    /// <c>ReailKitConfigurePricePerCompanyParamter</c> parameter object.
    /// </param>
    /// <param name="_supressDialog">
    /// Boolean value, which shows suppress dialog state.
    /// </param>
    public static void main(Args _args, boolean _supressDialog = false)
    {
        RetailKitConfigurePricesPerCompanyJob scheduler = new RetailKitConfigurePricesPerCompanyJob();
        RetailKitConfigurePricesPerCompanyParameter params;

        if (_args.parmObject())
        {
            // Get the parameters passed in thru the argument.
            params = _args.parmObject();

            scheduler.parmTotalKitPrice(params.parmTotalKitPrice());
            scheduler.parmRetailKitRecId(params.parmRetailKitRecId());
            scheduler.parmCompany(params.parmCompany());
        }

        if (!_supressDialog)
        {
            if (scheduler.prompt())
            {
                scheduler.runOperation();
            }
        }
        else
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>