<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo_OrderInvoiced</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailOENInfo_OrderInvoiced</c> generate event notification for order invoice.
/// </summary>
internal class RetailOENInfo_OrderInvoiced extends RetailOENInfo
{
    private CustInvoiceJour invoiceJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::OrderInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the invoice journal and sales order.
    /// </summary>
    /// <param name="refRecId">
    /// Record id of <c>CustInvoiceJour</c>.
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.invoiceJournal = CustInvoiceJour::findRecId(_refRecId);
        this.parmSalesOrder(SalesTable::find(invoiceJournal.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str _saleslineTableTemplate)
    {
        SalesLine       salesLine;
        CustInvoiceTrans custInvoiceTrans;
        str             result;
        Map             saleslineMap;
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;

        while select LineNum from custInvoiceTrans
                where custInvoiceTrans.SalesId == invoiceJournal.SalesId
                && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
                && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
                && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup
            join salesLine
                where salesLine.SalesId == salesOrder.SalesId
                && salesLine.InventTransId == custInvoiceTrans.InventTransId
                && salesLine.SalesQty > 0
            outer join firstOnly GiftCardGiftMessage from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            outer join firstOnly Amount, CardNumber from retailGiftCardTransactions
                where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
        {
            saleslineMap = this.createSalesLineMap(salesLine, retailGiftCardTransactions, mcrSalesLine);
            result += SysEmailMessage::stringExpand(_saleslineTableTemplate, saleslineMap);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales line quantity shipped.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line used for getting the shipped quantity.
    /// </param>
    /// <returns>
    /// The quantity shipped.
    /// </returns>
    protected SalesQty getSalesLineQtyShipped(SalesLine _salesLine)
    {
        CustInvoiceTrans custInvoiceTrans;
        select firstonly custInvoiceTrans
            where custInvoiceTrans.SalesId == _salesLine.SalesId
            && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
            && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
            && custInvoiceTrans.InventTransId == _salesLine.InventTransId
            && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup;

        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctDeliveryModeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get distinct delivery mode id.
    /// </summary>
    /// <remark>
    /// Return delivery mode id if all sales lines linked with <c>CustInvoiceJour</c> share same delivery mode id. Otherwise, return null;
    /// </remark>
    protected DlvModeId getDistinctDeliveryModeId()
    {
        DlvModeId deliveryModeId;
        SalesLine salesLine;
        CustInvoiceTrans custInvoiceTrans;

        while
            select DlvMode from salesLine
                group by salesLine.DlvMode
                join RecId from custInvoiceTrans
                where custInvoiceTrans.SalesId == invoiceJournal.SalesId
                        && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
                        && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
                        && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup
                        && salesLine.InventTransId == custInvoiceTrans.InventTransId
                        && salesLine.SalesId == custInvoiceTrans.SalesId
                        && salesLine.SalesQty > 0
        {
            if (deliveryModeId)
            {
                deliveryModeId = null;
                break;
            }
            else
            {
                deliveryModeId = salesLine.DlvMode;
            }
        }

        return deliveryModeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>