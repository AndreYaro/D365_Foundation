<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfImport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConfImport_BR</c> class is the basis of
/// the import process of files for the Configurator feature.
/// </summary>
class ConfImport_BR
{
    #ConfMacros_BR

    AsciiStreamIo                                   file;
    Array                                           fileLines;
    FileUploadTemporaryStorageResult                fileUpload;

    ConfLayoutGroupId_BR    confLayoutGroupId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromFile2Layout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterate on each line of the file being imported
    /// and process it.
    /// </summary>
    protected void fromFile2Layout()
    {
        container record;

        while (!file.status())
        {
            record = file.read();

            if (conLen(record))
            {
                this.processRecord(record);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a string containing the value of a field being imported.
    /// </summary>
    /// <param name="_layoutFields">A <c>ConfLayoutFields_BR</c> record with format information of the field.</param>
    /// <param name="_data">The string containing the field value.</param>
    /// <returns>A <c>anytype</c> value representing the parsed value.</returns>
    protected anytype getFieldValue(ConfLayoutFields_BR _layoutFields, str _data)
    {
        #ConfMacros_BR

        SysDictField    sysDictField;
        SysDictType     sysDictType;
        anytype         returnValue;

        // issue with timeOfDay type
        if (_layoutFields.Type == ConfFieldType_BR::Integer)
        {
            sysDictField = new SysDictField(tableName2id(_layoutFields.TableName),
                                            fieldName2id(tableName2id(_layoutFields.TableName),
                                                         _layoutFields.FieldName));

            sysDictType = new SysDictType(sysDictField.typeId());

            if (sysDictType.extend() == extendedTypeNum(TimeOfDay))
            {
                _layoutFields.Type = ConfFieldType_BR::Time_type;
            }
        }

        switch (_layoutFields.Type)
        {
            case ConfFieldType_BR::Date_type:
                if (!this.validateDateType(_data, _layoutFields.Format))
                {
                    throw error("@GLS1191");
                }
                returnValue = this.parseDate(_data, _layoutFields.Format);
                break;

            case ConfFieldType_BR::Integer:
                returnValue = any2int(_data);
                break;

            case ConfFieldType_BR::Real_type:
                return any2real(strReplace(_data, ',', '.'));

            case ConfFieldType_BR::String_type:
                return strRTrim(strLTrim(any2str(_data)));

            case ConfFieldType_BR::Time_type:
                returnValue = any2str(str2time(subStr(_data, 1, 2) + ':' + subStr(_data, 3, 2) + ':' + subStr(_data, 5, 2)));
                break;

            case ConfFieldType_BR::DateTime_type :
                returnValue = this.parseDateTime(_data, #DateTimeFormat);
                break;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLayoutLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses an entire line read from the import file.
    /// </summary>
    /// <param name="_record">A container with the line string read from the file.</param>
    /// <param name="_layoutLines">A <c>ConfLayoutLines_BR</c> with the layout information to parse the line string.</param>
    /// <param name="_tableId">The <c>tableId</c> value of the corresponding table (same one inside <c>ConfLayoutLines_BR</c> buffer).</param>
    /// <returns>A <c>Common</c> buffer filled with all the fields read from the import file</returns>
    protected Common getLayoutLineRecord(container _record, ConfLayoutLines_BR _layoutLines, TableId _tableId)
    {
        ConfLayoutFields_BR layoutFields;
        DictTable           dictTable       = new DictTable(_tableId);
        Common              record          = dictTable.makeRecord();
        str                 data;
        FieldId             fieldId;

        try
        {
            while select layoutFields
                where   layoutFields.LayoutGroupId  == _layoutLines.LayoutGroupId
                    &&  layoutFields.LayoutLineNum  == _layoutLines.LayoutLineNum
                    &&  layoutFields.FieldName      != ''
                    &&  layoutFields.TableName      == dictTable.name()
            {
                data    = subStr(conPeek(_record, 1), layoutFields.StartPos, layoutFields.Size);
                fieldId = dictTable.fieldName2Id(layoutFields.FieldName);

                if (fieldId)
                {
                    record.(fieldId) = this.getFieldValue(layoutFields, data);
                }
                else
                {
                    throw error(strFmt("@GLS50969", layoutFields.FieldName, dictTable.name()));
                }
            }
        }
        catch (Exception::Error)
        {
            error("@GLS60372");
            throw error(strFmt("@GLS60373", layoutFields.FieldName, layoutFields.StartPos, layoutFields.EndPosition));
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLayoutLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which layout to use on the given line string.
    /// </summary>
    /// <param name="_line">The line string read from the import file.</param>
    /// <returns>A <c>ConfLayoutLines_BR</c> buffer containing the layout information.</returns>
    /// <remarks>
    /// It uses the Register field of the layout.
    /// </remarks>
    protected ConfLayoutLines_BR getLayoutLineType(str _line)
    {
        ConfLayoutLines_BR      confLayoutLines;
        ConfLayoutFields_BR     confLayoutFields;
        str                     register;

        while select StartPos, Size, Value from confLayoutFields
            where   confLayoutFields.TableName == #Command
                &&  confLayoutFields.FieldName == #RegisterType
            join confLayoutLines
                order by LayoutLineType
                    where   confLayoutLines.LayoutGroupId == confLayoutFields.LayoutGroupId
                        &&  confLayoutLines.LayoutLineNum == confLayoutFields.LayoutLineNum
                        &&  confLayoutLines.LayoutGroupId == confLayoutGroupId
        {
            register = subStr(_line, confLayoutFields.StartPos, confLayoutFields.Size);

            if (register == confLayoutFields.Value)
            {
                return confLayoutLines;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoBR, GlobalizationConstants::FeatureReferenceBR00068] ],
            funcName()
        );

        fileLines = new Array(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the file to be imported.
    /// </summary>
    /// <returns>true if the file was opened; false, otherwise.</returns>
    protected boolean openFile()
    {
        boolean ret;

        file = AsciiStreamIo::constructForRead(fileUpload.openResult());

        if (file)
        {
            if (file.status())
            {
                throw error("@SYS52680");
            }

            file.inFieldDelimiter('\r\n');
            file.inRecordDelimiter('\r\n');
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfLayoutGroupId</Name>
				<Source><![CDATA[
    public ConfLayoutGroupId_BR parmConfLayoutGroupId(ConfLayoutGroupId_BR _confLayoutGroupId = confLayoutGroupId)
    {
        confLayoutGroupId = _confLayoutGroupId;

        return confLayoutGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileUpload</Name>
				<Source><![CDATA[
    public FileUploadTemporaryStorageResult parmFileUpload(FileUploadTemporaryStorageResult _fileUpload= fileUpload)
    {
        fileUpload = _fileUpload;

        return fileUpload;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a string containing a date.
    /// </summary>
    /// <param name="_dateString">A string containing the date.</param>
    /// <param name="_format">A string containing the format of the date.</param>
    /// <returns>A <c>date</c> value parsed.</returns>
    protected date parseDate(str _dateString, str _format)
    {
        utcdatetime dateTime;

        int dateDay;
        int dateMonth;
        int dateYear;

        boolean ok = true;

        dateYear = str2int(subStr(_dateString, strFind(_format,'YYYY', 1, strLen(_format)), 4));

        if (dateYear == 0)
        {
            dateYear = str2int(subStr(_dateString, strFind(_format,'YY', 1, strLen(_format)), 2));
        }

        if (dateYear < 1900 && dateYear > 2155)
        {
            ok = checkFailed(strFmt("@GLS60369", dateYear));
        }

        dateMonth = str2int(subStr(_dateString, strFind(_format, 'MM', 1, strLen(_format)), 2));

        if (dateMonth < 1 && dateMonth > 12)
        {
            ok = checkFailed(strFmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(subStr(_dateString, strFind(_format, 'DD', 1, strLen(_format)), 2));

        if (dateDay < 1 && dateDay > 31)
        {
            ok = checkFailed(strFmt("@GLS60371", dateDay));
        }

        if (!ok)
        {
            throw error("@GLS1191");
        }

        dateTime = DateTimeUtil::addYears   (dateTime, dateYear - 1900);
        dateTime = DateTimeUtil::addMonths  (dateTime, dateMonth - 1);
        dateTime = DateTimeUtil::addDays    (dateTime, dateDay - 1);

        return DateTimeUtil::date(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a string containing a datetime.
    /// </summary>
    /// <param name="_dateTimeString">A string containing the datetime.</param>
    /// <param name="_format">A string containing the format of the datetime.</param>
    /// <returns>A <c>utcDateTime</c> value parsed.</returns>
    protected utcdatetime parseDateTime(str _dateTimeString, str _format)
    {
        utcdatetime dateTime;

        int dateDay;
        int dateMonth;
        int dateYear;
        int dateHour;
        int dateMinute;
        int dateSecond;

        boolean ok = true;

        dateYear = str2int(subStr(_dateTimeString, strFind(_format,'YYYY',1 , 14), 4));

        if (dateYear < 1900 && dateYear > 2155)
        {
            ok = checkFailed(strFmt("@GLS60369",dateYear));
        }

        dateMonth = str2int(subStr(_dateTimeString, strFind(_format,'MM', 1, 14), 2));

        if (dateMonth < 1 && dateMonth > 12)
        {
            ok = checkFailed(strFmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(subStr(_dateTimeString, strFind(_format,'DD', 1, 14), 2));

        if (dateDay < 1 && dateDay > 31)
        {
            ok = checkFailed(strFmt("@GLS60371", dateDay));
        }

        dateHour = str2int(subStr(_dateTimeString, strFind(_format,'HH', 1, 14), 2));

        if (dateHour < 0 && dateHour > 23)
        {
            ok = checkFailed(strFmt("@GLS60639", dateHour));
        }

        dateMinute = str2int(subStr(_dateTimeString, strFind(_format, 'NN', 1, 14), 2));

        if (dateMinute < 0 && dateMinute > 59)
        {
            ok = checkFailed(strFmt("@GLS60640", dateMinute));
        }

        dateSecond = str2int(subStr(_dateTimeString, strFind(_format, 'SS', 1, 14), 2));

        if (dateSecond < 0 && dateSecond > 59)
        {
            ok = checkFailed(strFmt("@GLS60641", dateSecond));
        }

        if (!ok)
        {
            throw error("@GLS1191");
        }

        dateTime = DateTimeUtil::addYears   (dateTime, dateYear - 1900);
        dateTime = DateTimeUtil::addMonths  (dateTime, dateMonth - 1);
        dateTime = DateTimeUtil::addDays    (dateTime, dateDay - 1);
        dateTime = DateTimeUtil::addHours   (dateTime, dateHour);
        dateTime = DateTimeUtil::addMinutes (dateTime, dateMinute);
        dateTime = DateTimeUtil::addSeconds (dateTime, dateSecond);

        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLayoutSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through each field of a line.
    /// </summary>
    /// <param name="_confLayoutLines">The <c>ConfLayoutLines_BR</c> buffer containing the layout information.</param>
    /// <param name="_record">The line string read from the imported file.</param>
    /// <returns>An <c>Array</c> containing the value of fields parsed.</returns>
    protected Array processLayoutSection(ConfLayoutLines_BR _confLayoutLines, container _record)
    {
        ConfLayoutFields_BR confLayoutFields;
        TableId             oldTableId;
        TableId             tableId;
        DictTable           dictTable;
        Common              common;
        Array               array   = new Array(Types::Record);
        int                 i       = 1;

        while select TableName from confLayoutFields
            order by TableName
                where   confLayoutFields.LayoutGroupId  == _confLayoutLines.LayoutGroupId
                    &&  confLayoutFields.LayoutLineNum  == _confLayoutLines.LayoutLineNum
                    &&  confLayoutFields.TableName      != #command
        {
            tableId = tableName2id(confLayoutFields.TableName);

            if (tableId != oldTableId)
            {
                dictTable   = new DictTable(tableId);
                common      = this.getLayoutLineRecord(_record, _confLayoutLines, tableId);
                array.value(i, common);
                oldTableId  = tableId;
                i++;
            }
        }

        return array;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines how each line will be processed.
    /// </summary>
    /// <param name="_record">A container with the line string read from the imported file.</param>
    protected void processRecord(container _record)
    {
        ConfLayoutLines_BR  confLayoutLines;
        ConfLayoutType_BR   confLayoutType;
        str                 fileLine;
        int                 lastIndex;

        confLayoutType = ConfLayoutGroups_BR::find(this.parmConfLayoutGroupId()).LayoutType;

        switch (confLayoutType)
        {
            case ConfLayoutTypesChoice_BR::FixedLength:
                fileLine            = conPeek(_record, 1);
                confLayoutLines     = this.getLayoutLineType(fileLine);
                break;

            case ConfLayoutTypesChoice_BR::Delimited:
                break;
        }

        switch (confLayoutLines.LayoutLineType)
        {
            case ConfLayoutLineType_BR::Header:
               this.processLayoutSection(confLayoutLines, _record);
               break;

            case ConfLayoutLineType_BR::Detail:
                lastIndex = fileLines.lastIndex();
                lastIndex++;
                fileLines.value(lastIndex, this.processLayoutSection(confLayoutLines, _record));
                break;

            case ConfLayoutLineType_BR::Trailer:
                this.processLayoutSection(confLayoutLines, _record);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method to run the import process.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw Exception::Error;
        }

        try
        {
            ttsbegin;
            this.update();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Principal method that opens the file, parses each line and update information read.
    /// </summary>
    protected void update()
    {
        this.openFile();
        this.fromFile2Layout();
        this.updateRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method to update records read. Implemented by derived classes.
    /// </summary>
    protected void updateRecord()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the class fields.
    /// </summary>
    /// <returns>true if all class fields are valid; false, otherwise.</returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!confLayoutGroupId)
        {
            ret = checkFailed(strFmt("@SYS89866", fieldPName(ConfLayoutGroups_BR, LayoutGroupId)));
        }
        else if (!ConfLayoutGroups_BR::find(confLayoutGroupId).checkRegisterType())
        {
            ret = checkFailed(strFmt("@GLS100038", confLayoutGroupId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a string represents a date.
    /// </summary>
    /// <param name="_date">The string containing the date value to be parsed.</param>
    /// <param name="_format">The string containing the date format.</param>
    /// <returns>true if the string represents a date; false, otherwise.</returns>
    protected boolean validateDateType(str _date, str _format)
    {
        int dateDay;
        int dateMonth;
        int dateYear;
        boolean ok = true;

        dateYear = str2int(subStr(_date, strFind(_format, 'YYYY', 1, 8), 4));

        if (dateYear > 2155)
        {
            ok = checkFailed(strFmt("@GLS60369", dateYear));
        }

        dateMonth = str2int(subStr(_date, strFind(_format, 'MM', 1, 8), 2));

        if (dateMonth > 12)
        {
            ok = checkFailed(strFmt("@GLS60370", dateMonth));
        }

        dateDay = str2int(subStr(_date, strFind(_format, 'DD', 1, 8), 2));

        if (dateDay > 31)
        {
            ok = checkFailed(strFmt("@GLS60371", dateDay));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ConfImport_BR construct()
    {
        return new ConfImport_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>