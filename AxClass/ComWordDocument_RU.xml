<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ComWordDocument_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class used for data output to Microsoft Office Word
//
// How to use this class:
// 1. Create class instance, e.g.
//    doc = new RU_ComWordDocument();
// 2. Open existing document or create new one:
//    doc.open(<File_name>) or doc.newFile(<Template_file_name>);
//    If <Template_file_name> not defined, empty document is created (blank page)
// 3. Exporting data to document
//    doc.InsertValue(work_area, Exporting_value);
// 4. Document interface cleaning
//    doc.finalize();
class ComWordDocument_RU extends ComOfficeDocument_RU
{
    #RWordDocumentConstants
    #define.SelectionInf6(6)
    #define.SelectionInf12(12)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    protected void activate(boolean _bActivate = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDocumentField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearDocumentField()
    {
        COM fields, field;
        int i;

        try
        {
            if (m_comDocument)
            {
                fields =  m_comDocument.formFields();
                for (i=1; i<= fields.count(); i+=1)
                {
                    field = fields.item(i);
                    field.result('');
                }
            }
            else
            {
                info(strFmt("@GLS101749", this.getApplicationName()));
            }
        }

        catch(Exception::Error)
        {
            info(strFmt("@GLS105972", int2str(i)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filenameLookupFilter</Name>
				<Source><![CDATA[
    #define.DocDotExt("*.doc; *.dot")
    #define.AllFilesExt("*.*")
    public FilenameFilter filenameLookupFilter()
    {
        return [ "@GLS102738", #DocDotExt,
                 "@SYS27373", #AllFilesExt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findField</Name>
				<Source><![CDATA[
    #define.Office2000VersionNum(9)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected COM findField(MSOfficeBookMark_RU _bookMark)
    {
        COM fields, field, fieldTmp;
        int i;

        try
        {
            if (m_comDocument)
            {
                fields =  m_comDocument.formFields();

                if (str2int(m_comApplication.version()) >= #Office2000VersionNum) // Microsoft Office Word 2000 and later
                {
                    field = fields.item(_bookMark);
                }
                else
                {
                    for (i = 1; i <= fields.count(); i ++)
                    {
                        fieldTmp = fields.item(i);

                        if (fieldTmp.name() == _bookMark)
                        {
                            field = fieldTmp;
                            break;
                        }
                    }

                    if (! field)
                    {
                        info(strFmt("@GLS105972", _bookMark));
                    }
                }
            }
            else
            {
                info(strFmt("@GLS101749", this.getApplicationName()));
            }
        }

        catch(Exception::Error)
        {
            info(strFmt("@GLS105972", _bookMark));
        }

        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRange</Name>
				<Source><![CDATA[
    // Creates object range type named the same way as Word bookmark
    protected COM findRange(MSOfficeBookMark_RU _bookMark)
    {
        COM comRange, comBookmarks, comBookmark;

        try
        {
            if (!m_comDocument)
            {
                throw error(strFmt("@GLS101749", this.getApplicationName()));
            }

            comBookmarks =  m_comDocument.bookmarks();

            if (! comBookmarks.exists(_bookMark))
                throw error(strFmt("@GLS105972", _bookMark));

            comBookmark = comBookmarks.item(_bookMark);
            comRange    = comBookmark.range();
            comBookmark.finalize();
            comBookmarks.finalize();
        }
        catch(Exception::Error)
        {
            this.finalizeCOM(comBookmark);
            this.finalizeCOM(comBookmarks);

            throw Exception::Error;
        }

        return comRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicationName</Name>
				<Source><![CDATA[
    protected str getApplicationName()
    {
        return "@GLS101719";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookMarksName</Name>
				<Source><![CDATA[
    // Returns temporary table with bookmark names, defined in document file
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpMSOfficeBookMarks_RU getBookMarksName()
    {
        TmpMSOfficeBookMarks_RU tmpMSOfficeBookMarks;
        int                     cx, iCount = 0;
        COM                     comBookmarks, comBookmark;

        if (m_comDocument)
        {
            comBookmarks = m_comDocument.bookmarks();
            iCount       = comBookmarks.count();

            for (cx = 0; cx < iCount; cx ++)
            {
                comBookmark                   = comBookmarks.item(cx + 1);
                tmpMSOfficeBookMarks.BookMark = comBookmark.name();
                tmpMSOfficeBookMarks.insert();
            }
        }

        return tmpMSOfficeBookMarks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBottomMargin</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real getBottomMargin()
    {
        COM pageSetup;

        try
        {
            pageSetup = m_comDocument.pageSetup();
            return pageSetup.bottomMargin();
        }
        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            return -1;
        }
        finally
        {
            this.finalizeCOM(pageSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageHeight</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real getPageHeight()
    {
        COM pageSetup;

        try
        {
            pageSetup = m_comDocument.pageSetup();
            return pageSetup.pageHeight();
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            return -1;
        }
        finally
        {
            this.finalizeCOM(pageSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosEndOfTable</Name>
				<Source><![CDATA[
    #define.SelectionInf6(6)
    #define.SelectionInf12(12)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real getPosEndOfTable(MSOfficeBookMark_RU _bookmark = "")
    {
        COM        selection;
        COM        table, tables, rows, rowTable, rangeTable;
        COMVariant pos;
        int        countRows;

        try
        {
            if (_bookmark && ! this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12))  // is selection in a table?
            {
                tables     = selection.tables();
                table      = tables.item(1);
                rows       = table.rows();
                countRows  = rows.count();
                rowTable   = table.cell(countRows, 1);
                rangeTable = rowTable.range();
                pos        = rangeTable.information(#SelectionInf6);
                return pos.float();
            }
            else
            {
                throw Exception::Error;
            }
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            return -1;
        }
        finally
        {
            this.finalizeCOM(selection);
            this.finalizeCOM(tables);
            this.finalizeCOM(table);
            this.finalizeCOM(rows);
            this.finalizeCOM(rowTable);
            this.finalizeCOM(rangeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopMargin</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public real getTopMargin()
    {
        COM pageSetup;

        try
        {
            pageSetup = m_comDocument.pageSetup();
            return pageSetup.topMargin();
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            return -1;
        }
        finally
        {
            this.finalizeCOM(pageSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToBookmark</Name>
				<Source><![CDATA[
    // Moves the selection point to the location specified by _bookmark
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean goToBookmark(MSOfficeBookMark_RU _bookmark)
    {
        COM     selection;
        boolean ret = true;

        try
        {
            if (! m_comApplication)
                throw Exception::Error;
            selection =  m_comApplication.selection();
            selection.goTo(-1, 0, 0, _bookmark);
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            ret = false;
        }

        this.finalizeCOM(selection);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocFile</Name>
				<Source><![CDATA[
    // Insert a Word file, specified by _filePath, into current position in current Word file
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertDocFile(FilePath _filePath)
    {
        COM activeWindow;
        COM selection;

        try
        {
            activeWindow = m_comDocument.activeWindow();
            selection    = activeWindow.selection();
            selection.insertFile(_filePath);
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(activeWindow);
        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFieldValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean insertFieldValue(Bookmark _bookmark, anytype _anyVal)
    {
        COM field;

        try
        {
            if (m_comDocument)
            {
                field  = this.findField(_bookmark);

                if (field)
                {
                    if (! this.insertValueInField(field, _anyVal))
                    {
                        throw error(strFmt("@GLS101750", this.getApplicationName()));
                    }
                }
                else
                {
                    throw error(strFmt("@GLS101750", this.getApplicationName()));
                }
            }
            else
            {
                throw error(strFmt("@GLS101743", this.getApplicationName()));
            }

            return true;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch(Exception::Internal)
        {
            exceptionTextFallThrough();
        }

        this.finalizeCOM(field);

        error(strFmt("@GLS101579", this.getApplicationName()));

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPageBreak</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertPageBreak()
    {
        COM activeWindow;
        COM selection;

        try
        {
            activeWindow = m_comDocument.activeWindow();
            selection    = activeWindow.selection();
            selection.insertBreak(#wdPageBreak);
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(activeWindow);
        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    public void insertValue(Bookmark _bookmark, anytype _anyVal)
    {
        COM comRange,comFields;

        if (! m_comDocument)
            throw error(strFmt("@GLS101743", this.getApplicationName()));

        comRange  = this.findRange(_bookmark);
        comFields = comRange.fields();

        #StartSafeCall_RU
        if (comFields.count())
        {
            this.insertFieldValue(_bookmark, _anyVal);
        }
        else
        {
            this.insertValueInRange(comRange, _anyVal);
        }
        #EndSafeCall_RU
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueInField</Name>
				<Source><![CDATA[
    #define.MaxLength(255)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean insertValueInField(COM _field, anytype _anyVal)
    {
        COM     comRange;
        COM     comFields;
        COM     comField;
        COM     comResult;
        boolean isLongText()
        {
            Types t = typeOf(_anyVal);
            return (t == Types::String || t == Types::RString || t == Types::VarString) &&
                   strLen(_anyVal) >= #MaxLength;
        }

        try
        {
            if (!isLongText())
            {
                _field.result(_anyVal);
            }
            else
            {
                comRange = _field.range();
                comFields = comRange.fields();
                comField = comFields.item(1);
                comResult = comField.result();
                comResult.text(_anyVal);

                this.finalizeCOM(comRange);
                this.finalizeCOM(comFields);
                this.finalizeCOM(comField);
                this.finalizeCOM(comResult);
            }
            return true;
        }
        catch(Exception::Error)
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueInRange</Name>
				<Source><![CDATA[
    protected void insertValueInRange(COM _comRange, anytype _anyVal)
    {
        _comRange.text(_anyVal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        // Constants of MS Word window status
        #define.wdWINDOW_STATE_NORMAL(0)
        #define.wdWINDOW_STATE_MAXIMIZE(1)
        #define.wdWINDOW_STATE_MINIMIZE(2)

        super();

        m_iWindowStateMaximize = #wdWINDOW_STATE_MAXIMIZE;
        m_iWindowStateMinimize = #wdWINDOW_STATE_MINIMIZE;
        m_iWindowStateNormal   = #wdWINDOW_STATE_NORMAL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCom</Name>
				<Source><![CDATA[
    #define.WordProgId("Word.Application")
    protected void newCom()
    {
        m_comApplication = new COM(#WordProgId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDocument</Name>
				<Source><![CDATA[
    protected boolean newDocument(Filename _template = "")
    {
        COM         comDocuments;
        COMVariant  varTemlateName;

        try
        {
            if (m_comApplication)
            {
                this.finalizeCOM(m_comDocument);

                comDocuments  = m_comApplication.documents();
                if (_template)
                {
                    varTemlateName = new COMVariant(COMVariantInOut::In, COMVariantType::VT_BSTR);
                    varTemlateName.bStr(_template);
                    m_comDocument = comDocuments.add(varTemlateName);
                }
                else
                {
                    m_comDocument = comDocuments.add();
                }

                comDocuments.finalize();

                return (m_comDocument) ? true : false;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch(Exception::Internal)
        {
            exceptionTextFallThrough();
        }

        this.finalizeCOM(m_comDocument);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDocument</Name>
				<Source><![CDATA[
    protected boolean openDocument(Filename _filename)
    {
        COM comDocuments;

        try
        {
            if (m_comApplication)
            {
                this.finalizeCOM(m_comDocument);

                comDocuments  = m_comApplication.documents();
                m_comDocument = comDocuments.open(_filename);

                comDocuments.finalize();

                return (m_comDocument) ? true : false;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch(Exception::Internal)
        {
            exceptionTextFallThrough();
        }

        this.finalizeCOM(m_comDocument);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionInsertValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void selectionInsertValue(anytype _value)
    {
        COM selection;

        try
        {
            selection =  m_comApplication.selection();
            selection.typeText(_value);
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionRowCopy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void selectionRowCopy()
    {
        COM selection;
        COM rows;

        try
        {
            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12))
            {
                selection =  m_comApplication.selection();

                rows = selection.selectRow();
                rows.copy();
            }
            else
                throw Exception::Error;
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
        this.finalizeCOM(rows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionRowPaste</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void selectionRowPaste()
    {
        COM selection;
        COM rows;

        try
        {
            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12))
            {
                selection =  m_comApplication.selection();

                rows = selection.selectRow();
                rows.paste();
            }
            else
                throw Exception::Error;
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
        this.finalizeCOM(rows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDoc</Name>
				<Source><![CDATA[
    // Sets selection point at the end of the document ([Ctrl] + [End])
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setEndDoc()
    {
        COM activeWindow;
        COM selection;

        try
        {
            activeWindow = m_comDocument.activeWindow();
            selection    = activeWindow.selection();
            selection.endKey(#wdStory);
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(activeWindow);
        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeDoc</Name>
				<Source><![CDATA[
    // Sets selection point at the top of the document ([Ctrl] + [Home])
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setHomeDoc()
    {
        COM activeWindow;
        COM selection;

        try
        {
            activeWindow =  m_comDocument.activeWindow();
            selection    = activeWindow.selection();
            selection.homeKey(#wdStory);
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(activeWindow);
        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpPageBreakBefore</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setUpPageBreakBefore(boolean _break = true)
    {
        COM         selection;
        COM         paragraphs, paragraph;
        COMVariant  varArg = new COMVariant();

        try
        {
            selection  = m_comApplication.selection();
            paragraphs = selection.paragraphs();
            paragraph  = paragraphs.item(1);
            varArg.boolean(_break);
            paragraph.pageBreakBefore(varArg);
        }
        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(paragraph);
        this.finalizeCOM(paragraphs);
        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableAddRow</Name>
				<Source><![CDATA[
    // Adds row to the table where selection point or _bookmark is located
    // Current selection point or bookmark must be located in a table
    // Current selection is used to locate the table if _bookmark is empty
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableAddRow(MSOfficeBookMark_RU _bookmark = "")
    {
        COM selection;
        COM table, tables, rows;

        try
        {
            if (_bookmark && ! this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12))  // is selection in a table?
            {
                tables = selection.tables();
                table  = tables.item(1);
                rows   = table.rows();
                rows.add();
            }
            else
            {
                throw Exception::Error;
            }
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
        this.finalizeCOM(tables);
        this.finalizeCOM(table);
        this.finalizeCOM(rows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDeleteRow</Name>
				<Source><![CDATA[
    // Deletes row at the selection point if _bookmark not specified.
    // Otherwise, deletes row specified by _bookmark
    // Current selection point or bookmark must be located in a table
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableDeleteRow(MSOfficeBookMark_RU _bookmark = "")
    {
        COM selection;
        COM rows;

        try
        {
            if (_bookmark && !this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12)) // is selection in a table?
            {
                selection =  m_comApplication.selection();
                selection.end(selection.start()); // clear selection

                rows = selection.rows();
                rows.delete();
            }
            else
                throw Exception::Error;
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
        this.finalizeCOM(rows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableGetCell</Name>
				<Source><![CDATA[
    // Returns cell object located at the table specified by
    // current selection point or _bookmark
    // _row: row coordinate of the cell object
    // _col: column coordinate the cell object
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public COM tableGetCell (int _row, int _col, MSOfficeBookMark_RU _bookmark = "")
    {
        COM ret;
        COM selection;
        COM table, tables;

        try
        {
            if (_bookmark && !this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12)) // is selection in a table?
            {
                tables = selection.tables();
                table = tables.item(1);
                ret = table.cell(_row, _col);
                selection.finalize();
            }
            else
            {
                throw Exception::Error;
            }
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
            ret = null;
        }

        this.finalizeCOM(tables);
        this.finalizeCOM(table);
        this.finalizeCOM(selection);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableGoToCell</Name>
				<Source><![CDATA[
    // Moves selection point to specified cell
    // Current selection point or bookmark must be located in a table
    // Current selection is used to locate the table if _bookmark is empty
    // _row: row coordinate of the cell object
    // _col: column coordinate of the cell object
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableGoToCell(int _row, int _col, MSOfficeBookMark_RU _bookmark = "")
    {
        COM cell;
        COM selection;

        try
        {
            cell = this.tableGetCell(_row, _col, _bookmark);

            if (cell)
            {
                cell.select();
                selection =  m_comApplication.selection();
                selection.end(selection.start());
            }
            else
                throw Exception::Error;
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
        this.finalizeCOM(cell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableInsertRowsAbove</Name>
				<Source><![CDATA[
    // Inserts row above selection point if _bookmark not specified.
    // Current selection point or bookmark must be located in a table
    // Current selection is used if _bookmark is empty
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableInsertRowsAbove(int _num = 1, MSOfficeBookMark_RU _bookmark = "")
    {
        COM selection;

        try
        {
            if (_bookmark && ! this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12)) // is selection in a table?
            {
                selection.insertRowsBelow(_num);
            }
            else
            {
                throw Exception::Error;
            }
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableInsertRowsBelow</Name>
				<Source><![CDATA[
    // Inserts row below the selection point if _bookmark not specified.
    // Current selection point or bookmark must be located in a table
    // Current selection is used if _bookmark is empty
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableInsertRowsBelow(int _num = 1, MSOfficeBookMark_RU _bookmark = "")
    {
        COM selection;

        try
        {
            if (_bookmark && !this.goToBookmark(_bookmark))
                throw Exception::Error;

            selection =  m_comApplication.selection();

            if (selection.information(#SelectionInf12)) // is selection in a table?
            {
                selection.insertRowsBelow(_num);
            }
            else
                throw Exception::Error;
        }

        catch (Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableInsertValue</Name>
				<Source><![CDATA[
    // Inserts the specified text in the cell specified by _row, _col
    // Current selection point or bookmark must be located in a table
    // Current selection is used to if _bookmark is empty
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void tableInsertValue(int _row, int _col, anytype _value, MSOfficeBookMark_RU _bookmark = "")
    {
        COM cell;
        COM range;

        try
        {
            cell = this.tableGetCell(_row, _col, _bookmark);

            if (cell)
            {
                range = cell.range();
                range.insertBefore(_value);
            }
            else
                throw Exception::Error;
        }

        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        this.finalizeCOM(cell);
        this.finalizeCOM(range);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkFields</Name>
				<Source><![CDATA[
    // Removes all fields to allow user easily edit the output document ([Ctrl] + [Shift] + [F9])
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void unlinkFields()
    {
        COM fields;

        try
        {
            if (m_comDocument)
            {
                fields = m_comDocument.fields();
                if (fields)
                    fields.unlink();
            }
        }
        catch(Exception::Error)
        {
            checkFailed(strFmt("@SYS19306", funcName()));
        }

        if (fields)
            this.finalizeCOM(fields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>