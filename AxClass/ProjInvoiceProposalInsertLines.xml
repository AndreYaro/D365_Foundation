<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalInsertLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class processes records created using ProjInvoiceProposalCreateLines and creates invoice proposals.
/// </summary>
public class ProjInvoiceProposalInsertLines extends RunBase
{
    ProjInvoiceType                 projInvoiceType;
    Counter                         progressTotal;
    Counter                         progressCounter;
    boolean                         showMessages;
    Amount                          invoiceAmount;
    PSAContractLineNum              m_sContLineNum;
    List                            proposalIdList;
    PSATmpProjProposalTrans         tmpProjProposalTrans;
    boolean                         isValidateProjTable;
    ProjProposalJour                projProposalJour;
    ProjProposalJour                projProposalJourExtern;
    DimensionDefault                defaultDimension;
    // <GIN>
    boolean                         isCountryRegion_IN;
    #ISOcountryRegionCodes
    TransDate                       invoiceDate;
    // </GIN>

    // <GBR>
    ProjInvoiceProposalSplitPSA_BR     projInvoiceProposalSplit_BR;
    boolean                            isProjInvoiceNetPrice;
    // </GBR>
    ProjInvoiceProposalCreateLinesBase projInvoiceProposalCreateLines;

    boolean                         isCreditNoteTrans;
    boolean                         isMultipleContractLinesForProjectEnabled;
    InventQty                       invoiceQty;
    Map                             taxGroupsMap;
    private DiscAmount              discAmount;
    private PSAContractLineNum contractLineNum;
    private boolean advanceInvoicePosting;
    private boolean advanceInvoiceSettlement;
    private boolean countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
    private boolean skipRecalculateProposalTotals;

    private const str LoggerRetryExceptionMsg = '%1 retries exceeded max limit for %2 method.';

    private static ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjInvoiceProposalInsertLines));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAdvanceInvoicePosting</Name>
				<Source><![CDATA[
    public boolean parmAdvanceInvoicePosting(boolean _advanceInvoicePosting = advanceInvoicePosting)
    {
        if (!countryRegion_PL)
        {
            return false;
        }

        advanceInvoicePosting = _advanceInvoicePosting;

        return advanceInvoicePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlement</Name>
				<Source><![CDATA[
    public boolean parmAdvanceInvoiceSettlement(boolean _advanceInvoiceSettlement = advanceInvoiceSettlement)
    {
        if (!countryRegion_PL)
        {
            return false;
        }

        advanceInvoiceSettlement = _advanceInvoiceSettlement;

        return advanceInvoiceSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logException</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called to log exception.
    /// </summary>
    /// <param name = "_exception">
    /// The exception being caught
    /// </param>
    /// <param name = "_exceptionPlace">
    /// The place where the exception exists
    /// </param>
    delegate void logException(System.Exception _exception, str _exceptionPlace) {}

]]></Source>
			</Method>
			<Method>
				<Name>addProposalIdToList</Name>
				<Source><![CDATA[
    public void addProposalIdToList(ProjProposalId _proposalId)
    {
        if (_proposalId)
        {
            proposalIdList.addEnd(_proposalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates retention amount.
    /// </summary>
    public void calcRetention()
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalInsertLines, calcRetention)))
        {
            int proposalIdListCount = 0;
            int updateRetainageCallCount = 0;
            int calculateRetainageCallCount = 0;

            ListEnumerator le = proposalIdList.getEnumerator();
        
            while (le.moveNext())
            {
                proposalIdListCount++;

                if (this.isRetentionRelease(le.current()))
                {
                    updateRetainageCallCount++;
                    this.updateRetainage(le.current());
                }
                else
                {
                    calculateRetainageCallCount++;

                    ProjProposalJour projProposalJourLocal = ProjProposalJour::find(le.current());

                    invoiceAmount = 0;
                    this.calculateRetainage(projProposalJourLocal.ProposalId, projProposalJourLocal.FundingSource);
                }
            }

            activityContext.addCustomProperty('proposalIdListCount', any2Str(proposalIdListCount));
            activityContext.addCustomProperty('updateRetainageCallCount', any2Str(updateRetainageCallCount));
            activityContext.addCustomProperty('calculateRetainageCallCount', any2Str(calculateRetainageCallCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetentionBillingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates retention amount based on billing rule.
    /// </summary>
    /// <param name="_psaContractLineNum">
    /// Line number of billing rule.
    /// </param>
    /// <param name="_isCreditNote">
    /// True if credit note; otherwise false.
    /// </param>
    /// <param name="_projRevenueTransSaleRecId">
    /// Record ID of record in <c>ProjRevenueTransSales</c> table.
    /// </param>
    /// <param name="_fundingSourceRefId">
    /// Record ID of record in <c>ProjFundingSource</c> table.
    /// </param>
    /// <param name="_proposalId">
    /// Invoice proposal ID.
    /// </param>
    /// <param name="_projId">
    /// Invoice proposal line Project ID.
    /// </param>
    public void calcRetentionBillingRule(PSAContractLineNum _psaContractLineNum, boolean _isCreditNote, RecId _projRevenueTransSaleRecId, ProjFundingSourceRefId _fundingSourceRefId, ProjProposalId _proposalId, ProjId  _projId = '')
    {
        PSAContractLineItems        psaContractLineItems;
        PSAProjFundingSourceRetain  psaProjFundingSourceRetain;
        PSAProjProposalProj         projProposalProj;

        if (_psaContractLineNum && !_isCreditNote && _projId)
        {
            select ContractLineNum from psaContractLineItems
                join RetainPercent from psaProjFundingSourceRetain
                    where psaContractLineItems.ContractLineNum == psaProjFundingSourceRetain.BillingRuleId
                join forupdate projProposalProj
                    where psaProjFundingSourceRetain.BillingRuleId == projProposalProj.ContractLineNum
                        && psaProjFundingSourceRetain.ProjFundingSource == _fundingSourceRefId
                        && projProposalProj.ContractLineNum == _psaContractLineNum
                        && projProposalProj.ProjProposalId == _proposalId
                        && projProposalProj.projID == _projId;

            if (projProposalProj)
            {
                // When retention calculation is based on gross amount, total invoice amount is considered.
                if (!TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                        && ProjParameters::find().CustomerRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
                {
                    invoiceAmount = ProjProposalJour::find(_proposalId).InvoiceAmount;
                }
                else
                {
                    invoiceAmount = projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj);
                }
                projProposalProj.RetainedNow       = (invoiceAmount * psaProjFundingSourceRetain.RetainPercent) / 100;
                projProposalProj.RetainedPercent   = psaProjFundingSourceRetain.RetainPercent;
                projProposalProj.update();
            }
        }
        if (_isCreditNote)
        {
            this.retentionReversal(_projRevenueTransSaleRecId, _proposalId, _psaContractLineNum, _fundingSourceRefId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetentionProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates retention amount for a project.
    /// </summary>
    /// <param name="_proposalId">
    /// Invoice proposal ID.
    /// </param>
    /// <param name="_projId">
    /// Project ID for which retention is to be calculated.
    /// </param>
    /// <param name="_isCreditNote">
    /// True if credit note; otherwise false.
    /// </param>
    /// <param name="_projRevenueTransSaleRecId">
    /// Record ID of a record in <c>ProjRevenueTransSale</c> table.
    /// </param>
    /// <param name="_fundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    /// <param name="_invoiceId">
    /// _invoiceId for which retention to be reversed on credit notes for project Invoices.
    /// </param>
    /// <param name="_taxGroup">
    /// Tax Group Value used in the invoice proposal.
    /// </param>
    /// <param name="_taxItemGroup"  >
    /// Tax Item Group Value used in the invoice proposal.
    /// </param>
    public void calcRetentionProject(ProjProposalId _proposalId, ProjId _projId, boolean _isCreditNote, RecId _projRevenueTransSaleRecId, ProjFundingSourceRefId _fundingSourceRefId, ProjInvoiceId _invoiceId = '', ProjTaxGroup _taxGroup = '', ProjTaxItemGroup _taxItemGroup = '')
    {
        PSAProjWorkComplete             psaProjWorkComplete;
        PSAProjFundingSourceRetain      psaProjFundingSourceRetain;
        PSAProjProposalProj             projProposalProj;
        PSACustomerRetentionTermLine    psaCustomerRetentionTermLine;
        PSACustomerRetentionTermTable   psaCustomerRetentionTermTable;

        if (_proposalId && !_isCreditNote)
        {
            select RecId, Percent from psaProjWorkComplete
                order by TransDate desc
                join psaProjFundingSourceRetain
                join forupdate ProjId, RecId, InvoicedNow, ContractLineNum, ProjProposalId, InvoicedNowLeadRetainage, IsPreBill from projProposalProj
                    where psaProjFundingSourceRetain.ProjId == psaProjWorkComplete.ProjId
                        && psaProjFundingSourceRetain.ProjId == projProposalProj.ProjId
                        && psaProjFundingSourceRetain.ProjFundingSource == _fundingSourceRefId
                        && projProposalProj.ProjProposalId == _proposalId
                        && projProposalProj.ProjId == _projId
                        && projProposalProj.IsPreBill == NoYes::No;

            if (psaProjFundingSourceRetain)
            {
                select RetentionTermId, CompletePercent, RetainPercent from psaCustomerRetentionTermLine
                    order by psaCustomerRetentionTermLine.CompletePercent
                        join RecId from psaCustomerRetentionTermTable
                        where psaCustomerRetentionTermLine.RetentionTermId == psaCustomerRetentionTermTable.RetentionTermId
                            && psaCustomerRetentionTermLine.CompletePercent >= psaProjWorkComplete.Percent
                            && psaCustomerRetentionTermTable.RecId == psaProjFundingSourceRetain.CustRetentionTermId;

                if (projProposalProj)
                {
                    // When retention calculation is based on gross amount, total invoice amount is considered.
                    if (!TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                        && ProjParameters::find().CustomerRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
                    {
                        invoiceAmount = ProjProposalJour::find(_proposalId).InvoiceAmount;
                    }
                    else
                    {
                        invoiceAmount = projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj);
                    }
                    projProposalProj.RetainedNow     = CurrencyExchange::round(invoiceAmount * psaCustomerRetentionTermLine.RetainPercent / 100,
                                                                                     projProposalJour.CurrencyId);
                    projProposalProj.RetainedPercent = psaCustomerRetentionTermLine.RetainPercent;
                    projProposalProj.update();
                }
            }
        }
        if (_isCreditNote)
        {
            this.retentionReversal(_projRevenueTransSaleRecId, _proposalId, contractLineNum, _fundingSourceRefId, _projId, _invoiceId, _taxGroup, _taxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRetainage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates retention amount.
    /// </summary>
    /// <param name="_proposalId">
    /// Invoice proposal ID.
    /// </param>
    /// <param name="_fundingSource">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void calculateRetainage(ProjProposalId _proposalId, ProjFundingSourceRefId _fundingSource = 0)
    {
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;

        ProjProposalRevenue     projProposalRevenue;
        ProjProposalRevenueDetail projProposalRevenueDetail;
        ProjRevenueTransSale      projRevenueTransSale;

        ProjProposalCost        projProposalCost;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;

        ProjItemTransSale       projItemTransSale;
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        SalesLine               salesLine;

        ProjOnAccTransSale      projOnAccTransSale;
        ProjProposalOnAcc       projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTrans          projOnAccTrans;

        boolean isMarkedForCreditNote(ProjTransStatus _projTransStatus)
        {
            return (_projTransStatus == ProjTransStatus::CreditnoteProposal) ? true : false;
        }

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalInsertLines, calculateRetainage)))
        {
            int calcRetentionBillingRuleCallCount = 0;
            int calcRetentionProjectCallCount = 0;

            while select projProposalEmplDetail
            join projEmplTransSale
                where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
            join projProposalEmpl
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                   && projProposalEmpl.ProposalId == _proposalId
            {
                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !isMarkedForCreditNote(projEmplTransSale.TransStatus))
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalEmpl.psaContractLineNum, isMarkedForCreditNote(projEmplTransSale.TransStatus), projEmplTransSale.RecId, projEmplTransSale.FundingSource, _proposalId, projProposalEmpl.projEmplTrans().ProjId);
                }
                else
                {
                    // Contract line number is missing so add it for credit notes with multiple billing rules
                    if (isMarkedForCreditNote(projEmplTransSale.TransStatus))
                    {
                        this.parmContractLineNum(projProposalEmpl.PSAContractLineNum);
                    }
                
                    calcRetentionProjectCallCount++;
                    this.calcRetentionProject(projProposalEmpl.ProposalId, projProposalEmpl.projEmplTrans().ProjId, isMarkedForCreditNote(projEmplTransSale.TransStatus), projEmplTransSale.RecId, projEmplTransSale.FundingSource, this.getProjInvoiceId(projEmplTransSale.TableId, projEmplTransSale.RecId), projProposalEmpl.projInvoiceEmpl().TaxGroupId, projProposalEmpl.projInvoiceEmpl().TaxItemGroupId);
                }
            }

            while select projProposalRevenueDetail
            join projRevenueTransSale
                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
            join projProposalRevenue
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                   && projProposalRevenue.ProposalId == _proposalId
            {
                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !isMarkedForCreditNote(projRevenueTransSale.TransStatus))
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalRevenue.psaContractLineNum, isMarkedForCreditNote(projRevenueTransSale.TransStatus), projRevenueTransSale.RecId, projRevenueTransSale.FundingSource, _proposalId, projProposalRevenue.projRevenueTrans().ProjId);
                }
                else
                {
                    // Contract line number is missing so add it for credit notes with multiple billing rules
                    if (isMarkedForCreditNote(projRevenueTransSale.TransStatus))
                    {
                        this.parmContractLineNum(projProposalRevenue.PSAContractLineNum);
                    }

                    calcRetentionProjectCallCount++;
                    this.calcRetentionProject(projProposalRevenue.ProposalId, projProposalRevenue.projRevenueTrans().ProjId, isMarkedForCreditNote(projRevenueTransSale.TransStatus), projRevenueTransSale.RecId, projRevenueTransSale.FundingSource, this.getProjInvoiceId(projRevenueTransSale.TableId, projRevenueTransSale.RecId), projProposalRevenue.projRevenueTrans().TaxGroupId, projProposalRevenue.projRevenueTrans().TaxItemGroupId);
                }
            }

            while select projProposalCostDetail
            join projCostTransSale
                where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
            join projProposalCost
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                   && projProposalCost.ProposalId == _proposalId
            {
                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !isMarkedForCreditNote(projCostTransSale.TransStatus))
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalCost.psaContractLineNum, isMarkedForCreditNote(projCostTransSale.TransStatus), projCostTransSale.RecId, projCostTransSale.FundingSource, _proposalId, projProposalCost.projCostTrans().ProjId);
                }
                else
                {
                    // Contract line number is missing so add it for credit notes with multiple billing rules
                    if (isMarkedForCreditNote(projCostTransSale.TransStatus))
                    {
                        this.parmContractLineNum(projProposalCost.PSAContractLineNum);
                    }

                    calcRetentionProjectCallCount++;
                    this.calcRetentionProject(projProposalCost.ProposalId, projProposalCost.projCostTrans().ProjId, isMarkedForCreditNote(projCostTransSale.TransStatus), projCostTransSale.RecId, projCostTransSale.FundingSource, this.getProjInvoiceId(projCostTransSale.TableId, projCostTransSale.RecId), projProposalCost.projCostTrans().TaxGroupId, projProposalCost.projCostTrans().TaxItemGroupId);
                }
            }

            while select projProposalItemDetail
            join projItemTransSale
                where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
            join projProposalItem
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                   && projProposalItem.ProposalId == _proposalId
            {
                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !isMarkedForCreditNote(projItemTransSale.TransStatus))
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalItem.psaContractLineNum, isMarkedForCreditNote(projItemTransSale.TransStatus), projProposalItem.RecId, projItemTransSale.FundingSource, _proposalId, projProposalItem.projItemTrans().ProjId);
                }
                else
                {
                    ProjTransIdBase transIdRef;
                    // If <c>SalesId</c> exists set with <c>ProjTransIdRef</c> value else <c>ProjTransId</c>.
                    if (projProposalItem.SalesId)
                    {
                        transIdRef = projItemTransSale.projItemTrans().ProjTransIdRef;
                    }
                    else
                    {
                        transIdRef = projProposalItem.ProjTransId;
                    }

                    // Contract line number is missing so add it for credit notes with multiple billing rules
                    if (isMarkedForCreditNote(projItemTransSale.TransStatus))
                    {
                        this.parmContractLineNum(projProposalItem.PSAContractLineNum);
                    }

                    calcRetentionProjectCallCount++;
                    this.calcRetentionProject(projProposalItem.ProposalId, projProposalItem.projItemTrans().ProjId, isMarkedForCreditNote(projItemTransSale.TransStatus), projProposalItem.RecId, projItemTransSale.FundingSource, this.getProjInvoiceId(projItemTransSale.TableId, projItemTransSale.RecId), projProposalItem.projItemTrans().TaxGroupId, projProposalItem.projItemTrans().TaxItemGroupId);
                }
            }

            // Sales Orders
            while select ProposalId, psaContractLineNum, ProjTransId, TaxGroupId, TaxItemGroupId, RecId from projProposalItem
            join salesLine
            where salesLine.ProjTransId == projProposalItem.ProjTransId
                && projProposalItem.ProposalId == _proposalId
                && projProposalItem.ItemType   == ProjItemType::SalesOrder
            {
                projItemTransSale = ProjItemTransSale::find(ProjProposalItemDetail::find(projProposalItem.RecId).SaleRefRecId);

                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !salesLine.creditNoteLine())
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalItem.psaContractLineNum, salesLine.creditNoteLine(), projProposalItem.RecId, projItemTransSale.FundingSource, _proposalId, salesLine.ProjId);
                }
                else
                {
                    calcRetentionProjectCallCount++;
                    this.parmContractLineNum(projProposalItem.PSAContractLineNum);
                    this.calcRetentionProject(projProposalItem.ProposalId, salesLine.ProjId, salesLine.creditNoteLine(), projProposalItem.RecId, projItemTransSale.FundingSource ? projItemTransSale.FundingSource : _fundingSource, this.getProjInvoiceId(projItemTransSale.TableId, projItemTransSale.RecId), projProposalItem.TaxGroupId, projProposalItem.TaxItemGroupId);
                }
            }

            while select projProposalOnAccDetail
            join projOnAccTrans
            join projOnAccTransSale
                where projOnAccTrans.TransId == projOnAccTransSale.TransId
                   && projOnAccTrans.psaIsOnAccount == NoYes::No
                   && projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
            join projProposalOnAcc
                where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                   && projProposalOnAcc.ProposalId == _proposalId
            {
                if (ProjProposalJour::psaIsCTLNChecked(_proposalId) && !isMarkedForCreditNote(projOnAccTransSale.TransStatus))
                {
                    calcRetentionBillingRuleCallCount++;
                    this.calcRetentionBillingRule(projProposalOnAcc.psaContractLineNum, isMarkedForCreditNote(projOnAccTransSale.TransStatus), projOnAccTransSale.RecId, projOnAccTransSale.FundingSource, _proposalId, projProposalOnAcc.projOnAccTrans().ProjID);
                }
                else
                {
                    calcRetentionProjectCallCount++;
                    this.parmContractLineNum(projProposalOnAcc.psaContractLineNum);
                    this.calcRetentionProject(projProposalOnAcc.ProposalId, projProposalOnAcc.projOnAccTrans().ProjID, isMarkedForCreditNote(projOnAccTransSale.TransStatus), projOnAccTransSale.RecId, projOnAccTransSale.FundingSource, this.getProjInvoiceId(projOnAccTransSale.TableId, projOnAccTransSale.RecId), projProposalOnAcc.projOnAccTrans().TaxGroupId, projProposalOnAcc.projOnAccTrans().TaxItemGroupId);
                }
            }

            activityContext.addCustomProperty('calcRetentionBillingRuleCallCount', any2Str(calcRetentionBillingRuleCallCount));
            activityContext.addCustomProperty('calcRetentionProjectCallCount', any2Str(calcRetentionProjectCallCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrigin</Name>
				<Source><![CDATA[
    protected boolean checkOrigin(ProjRevenueTrans _projRevenueTrans)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && (_projRevenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                _projRevenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                _projRevenueTrans.TransactionOrigin == ProjOrigin::AdvancedLedgerEntry ||
                _projRevenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal))
        {
            return true;
        }
        else
        {
            if (_projRevenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                _projRevenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                _projRevenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
            {
                return true;
            }
        }

        if (_projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription)
        {
            return true;
        }

        if (_projRevenueTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal of type fee.
    /// </summary>
    /// <param name="_projId">
    /// Project ID for which journal is to be created.
    /// </param>
    /// <param name="_retainedAmount">
    /// Amount retained.
    /// </param>
    /// <param name="_fundingSource">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Line number of the billing rule.
    /// </param>
    /// <param name="_isRetained">
    /// True if retained; otherwise false.
    /// </param>
    /// <returns>
    /// record of type <c>ProjRevenueTrans</c>
    /// </returns>
    public ProjRevenueTrans createFeeJournal(ProjId _projId, AmountCur _retainedAmount, ProjFundingSourceRefId _fundingSource, PSAContractLineNum _contractLineNum = '', boolean _isRetained = false)
    {
        ProjJournalTable            projJournalTable;
        ProjJournalTrans            projJournalTrans;
        ProjJournalCheckPost        projJournalCheckPost;
        ProjRevenueTrans            projRevenueTrans;
        ProjTable                   projTable;
        PSAContractLineItems        psaContractLineItems;
        PSAContractLineItemsSetup   psaContractLineItemsSetup;
        ProjOnAccTrans              projOnAccTrans;

        #OCCRetryCount
        
        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity().invProposalInsertLinesCreateFeeJournalContext())
        {
            try
            {
                if (!ProjCategory::isMarkedCategory().CategoryId)
                {
                    throw error("@SYS50153");
                }
                ttsbegin;
                //create the fee journal
                projJournalTable.initFromProjJournalName(ProjJournalName::find(ProjParameters::find().RevenueJournalNameId));
                projJournalTable.Resource = ResourceFacade::findOrCreateByWorker(HcmWorker::userId2Worker(curUserId()));
                projJournalTable.insert();

                projJournalTrans.clear();
                projJournalTrans.initFromProjJournalTable(projJournalTable);
                projJournalTrans.Voucher       = NumberSeq::newGetVoucherFromCode(projJournalTable.getNumberSequenceTable().NumberSequence).voucher();
                projJournalTrans.ProjTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                projJournalTrans.TransDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                if (_contractLineNum)
                {
                    psaContractLineItems = PSAContractLineItems::find(_contractLineNum);
                    switch (psaContractLineItems.LineType)
                    {
                        case PSAContractLineType::Fee       :
                        case PSAContractLineType::UOD       :
                        case PSAContractLineType::Progress  :
                            projJournalTrans.ProjId = psaContractLineItems.FeeProjId;
                            break;

                        case PSAContractLineType::TAndM     :
                            projJournalTrans.ProjId = (select firstonly psaContractLineItemsSetup
                                                            where psaContractLineItemsSetup.ContractLineNum == _contractLineNum
                                                            && psaContractLineItemsSetup.ProjId).ProjId;
                            break;

                        case PSAContractLineType::LumpSum   :
                            select firstonly psaContractLineItemsSetup
                                join ProjID from projOnAccTrans
                                    where projOnAccTrans.TransId == psaContractLineItemsSetup.ProjOnAccTransId
                                    && psaContractLineItemsSetup.ContractLineNum == _contractLineNum
                                    && psaContractLineItemsSetup.ProjOnAccTransId;
                            if (psaContractLineItemsSetup)
                            {
                                projJournalTrans.ProjId = projOnAccTrans.ProjID;
                            }
                            break;
                    }
                }
                else
                {
                    projJournalTrans.ProjId    = _projId;
                }

                // the category Id must be set prior to calling initFromProject for the line property to be set correctly.
                projJournalTrans.CategoryId     = ProjCategory::isMarkedCategory().CategoryId;
                projTable                       = ProjTable::find(projJournalTrans.ProjId);
                projJournalTrans.initFromProjTable(projTable);
                projJournalTrans.SalesPrice     = _retainedAmount;
                projJournalTrans.Qty            = 1;
                projJournalTrans.Txt            = projTable.psaRetainageBillingDesc();
                projJournalTrans.CurrencyId     = ProjInvoiceTable::find(projTable.ProjInvoiceProjId).CurrencyId;
                projJournalTrans.Resource       = ResourceFacade::findOrCreateByWorker(HcmWorker::userId2Worker(curUserId()));
                projJournalTrans.setResourceCategory();
                projJournalTrans.insert();

                //update the fee journal
                ProjJournalTable::initTotal(projJournalTable);
                projJournalTable.update();

                //Post the fee journal
                projJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true,
                                                                                false,
                                                                                JournalCheckPostType::Post,
                                                                                tableNum(ProjJournalTable),
                                                                                projJournalTable.JournalId);
                projJournalCheckPost.parmIsRetainage(true);
                projJournalCheckPost.parmFundingSourceId(_fundingSource);
                projJournalCheckPost.runOperation();

                select forupdate projRevenueTrans
                    join JournalId, Voucher, TransId from projJournalTrans
                    where projJournalTrans.JournalId       == projJournalTable.JournalId
                        && projRevenueTrans.VoucherJournal == projJournalTrans.Voucher
                        && projRevenueTrans.TransId        == projJournalTrans.TransId;

                if (projRevenueTrans)
                {
                    projRevenueTrans.IsRetained = _isRetained;
                    projRevenueTrans.IsReleased = !_isRetained;
                    projRevenueTrans.psaContractLineNum = _contractLineNum;
                    projRevenueTrans.update();
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'Deadlock', 'ProjInvoiceProposalInsertLines.createFeeJournal()'));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjInvoiceProposalInsertLines.createFeeJournal()'));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjInvoiceProposalInsertLines.createFeeJournal()'));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                logger.logError(strFmt(LoggerRetryExceptionMsg, 'ExceptionError', 'ProjInvoiceProposalInsertLines.createFeeJournal()'));

                throw error("@SYS18447");
            }
        }
        
        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache value.
    /// </summary>
    /// <param name = "_cacheKey">An index entry that uniquely identifies an object in a cache.</param>
    /// <returns>The cache value.</returns>
    private boolean getCacheValue(str _cacheKey)
    {
        return SysTransactionScopeCache::get(classStr(ProjInvoiceProposalInsertLines), _cacheKey, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cache value.
    /// </summary>
    /// <param name = "_cacheKey">An index entry that uniquely identifies an object in a cache.</param>
    /// <returns>The cache value.</returns>
    private boolean setCacheValue(str _cacheKey)
    {
        return SysTransactionScopeCache::set(classStr(ProjInvoiceProposalInsertLines), _cacheKey, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    protected void doCost(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        ProjProposalCost        projProposalCost;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale       = ProjCostTransSale::find(_recId, true);
        ProjFundingSource       projFundingSource;
        ProjCostTrans           projCostTrans           = ProjCostTrans::find(projCostTransSale.TransId);

        str cacheKey = projCostTransSale.proposalId() + ':' + projCostTransSale.TransId + ':' + int2Str(projCostTransSale.FundingSource) + ':' + int2Str(SessionId());
        
        if (this.getCacheValue(cacheKey) || projCostTransSale.canBeInvoiced())
        {
            this.progressUpdate(strFmt("@SYS26810", projCostTrans.ProjId, date2StrUsr(projCostTrans.TransDate, DateFlags::FormatAll)));

            this.setProjProposalProj(_projInvoiceProjId, projCostTrans.ProjId, projCostTransSale.FundingSource, false);

            projProposalCost = ProjProposalCost::find(projCostTrans.TransId, projProposalJour.ProposalId);

            if (!projProposalCost)
            {
                projProposalCost             = ProjProposalCost::initProposaleFromTrans(projCostTrans);
                projProposalCost.ProposalId  = projProposalJour.ProposalId;
                projFundingSource            = ProjFundingSource::find(projCostTransSale.FundingSource);

                if (CustTable::isCustPublic_NO(projFundingSource.CustAccount))
                {
                    projProposalCost.eInvoiceAccountCode = projFundingSource.getEInvoiceData(projCostTrans.ProjId).EInvoiceAccountCode;
                }
                else if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
                {
                    projProposalCost.eInvoiceAccountCode    = projFundingSource.eInvoiceAccountCode;
                }

                // <GBR>
                if (BrazilParameters::isEnabled() && isProjInvoiceNetPrice)
                {
                    projProposalCost.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalCost.TaxGroupId, projProposalCost.TaxItemGroupId);
                }
                // </GBR>

                if (projProposalCost.validateWrite())
                {
                    projProposalCost.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            projProposalCostDetail = this.initProposalCostDetail(projCostTransSale, projProposalCost.RecId);

            // <GBR>
            if (BrazilParameters::isEnabled() && projProposalCost.IncludedTaxPercent_BR)
            {
                projProposalCostDetail.AmountCur = CurrencyExchangeHelper::amount(projProposalCost.qty() * projProposalCostDetail.salesPriceInclTax_BR(projProposalCost.IncludedTaxPercent_BR), projProposalJour.CurrencyId);
            }
            // </GBR>

            if (projProposalCostDetail.validateWrite())
            {
                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projProposalCostDetail.AmountCur = projProposalCostDetail.AmountCur * -1;
                }

                projProposalCostDetail.insert();

                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projCostTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
                }
                else
                {
                    projCostTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
                }

                projCostTransSale.update();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalCostDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalCostDetail</c> table record.
    /// </summary>
    /// <param name = "_projCostTransSale">
    ///     An instance of <c>ProjCostTransSale</c> table buffer.
    /// </param>
    /// <param name = "_proposalRefRecId">
    ///     Record ID of a record in <c>ProjProposalCost</c> table.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalCostDetail</c> table.
    /// </returns>
    protected ProjProposalCostDetail initProposalCostDetail(ProjCostTransSale _projCostTransSale, RefRecId  _proposalRefRecId)
    {
        ProjProposalCostDetail projProposalCostDetail = ProjProposalCostDetail::initProposaleFromTrans(_projCostTransSale);
        projProposalCostDetail.ProposalRefRecId = _proposalRefRecId;

        return projProposalCostDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    protected void doEmpl(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale       = ProjEmplTransSale::find(_recId, true);
        ProjFundingSource       projFundingSource;
        ProjEmplTrans           projEmplTrans           = ProjEmplTrans::find(projEmplTransSale.TransId);

        str cacheKey = projEmplTransSale.proposalId() + ':' + projEmplTransSale.TransId + ':' + int2Str(projEmplTransSale.FundingSource) + ':' + int2Str(SessionId());
      
        if (this.getCacheValue(cacheKey) || projEmplTransSale.canBeInvoiced())
        {
            this.progressUpdate(strFmt("@SYS26810", projEmplTrans.ProjId, date2StrUsr(projEmplTrans.TransDate, DateFlags::FormatAll)));

            this.setProjProposalProj(_projInvoiceProjId, projEmplTrans.ProjId, projEmplTransSale.FundingSource, false);

            projProposalEmpl = ProjProposalEmpl::find(projEmplTrans.TransId, projProposalJour.ProposalId);

            if (!projProposalEmpl)
            {
                projProposalEmpl            = ProjProposalEmpl::initProposaleFromTrans(projEmplTrans);
                projProposalEmpl.ProposalId = projProposalJour.ProposalId;
                projFundingSource           = ProjFundingSource::find(projEmplTransSale.FundingSource);

                if (CustTable::isCustPublic_NO(projFundingSource.CustAccount))
                {
                    projProposalEmpl.eInvoiceAccountCode    = projFundingSource.getEInvoiceData(projEmplTrans.ProjId).EInvoiceAccountCode;
                }
                else if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
                {
                    projProposalEmpl.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
                }

                // <GBR>
                if (BrazilParameters::isEnabled() && isProjInvoiceNetPrice)
                {
                    projProposalEmpl.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalEmpl.TaxGroupId, projProposalEmpl.TaxItemGroupId);
                }
                // </GBR>

                if (projProposalEmpl.validateWrite())
                {
                    projProposalEmpl.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            projProposalEmplDetail = this.initProposalEmplDetail(projEmplTransSale, projProposalEmpl.RecId);

            // <GBR>
            if (BrazilParameters::isEnabled() && projProposalEmpl.IncludedTaxPercent_BR)
            {
                projProposalEmplDetail.AmountCur    = CurrencyExchangeHelper::amount(projProposalEmpl.qty() * projProposalEmplDetail.salesPriceInclTax_BR(projProposalEmpl.IncludedTaxPercent_BR), projProposalJour.CurrencyId);
            }
            // </GBR>

            if (projProposalEmplDetail.validateWrite())
            {
                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projProposalEmplDetail.AmountCur = projProposalEmplDetail.AmountCur * -1;
                }

                projProposalEmplDetail.insert();

                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projEmplTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
                }
                else
                {
                    projEmplTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
                }

                projEmplTransSale.update();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalEmplDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalEmplDetail</c> table record.
    /// </summary>
    /// <param name = "_projEmplTransSale">
    ///     An instance of <c>ProjEmplTransSale</c> table buffer.
    /// </param>
    /// <param name = "_proposalRecId">
    ///     Record ID of a record in <c>ProjProposalEmpl</c> table.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalEmplDetail</c> table.
    /// </returns>
    protected ProjProposalEmplDetail initProposalEmplDetail(ProjEmplTransSale _projEmplTransSale, RefRecId _proposalRecId)
    {
        ProjProposalEmplDetail projProposalEmplDetail = ProjProposalEmplDetail::initProposaleFromTrans(_projEmplTransSale);
        projProposalEmplDetail.ProposalRefRecId = _proposalRecId;

        return projProposalEmplDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts data into project proposal item.
    /// </summary>
    /// <param name = "_projInvoiceProjId">
    ///     Pass Project contract ID as parameter.
    /// </param>
    /// <param name = "_recId">
    ///     Record identifier of the <c>ProjItemTransSale</c> table to be processed.
    /// </param>
    protected void doItem(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        if (_recId == 0)
        {
            return;
        }
      
        ProjItemTransSale projItemTransSale = ProjItemTransSale::find(_recId, true);
        if (!projItemTransSale)
        {
            return;
        }

        ProjItemTrans projItemTrans = ProjItemTrans::find(projItemTransSale.ProjTransId);
        if (!projItemTrans)
        {
            return;
        }

        SalesLine salesLine;
        if (projItemTrans.TransactionOrigin == ProjOrigin::SalesOrder)
        {
            salesLine = SalesLine::findInventTransId(projItemTrans.InventTransId);
        }
        
        str cacheKey = projItemTransSale.proposalId() + ':' + projItemTransSale.ProjTransId + ':' + int2Str(projItemTransSale.FundingSource) + ':' + int2Str(SessionId());
        
        if (this.getCacheValue(cacheKey) || projItemTransSale.canBeInvoiced())
        {
            this.progressUpdate(strFmt("@SYS26810", projItemTrans.ProjId, date2StrUsr(projItemTrans.TransDate, DateFlags::FormatAll)));

            this.setProjProposalProj(_projInvoiceProjId, projItemTrans.ProjId, projItemTransSale.FundingSource, false);

            ProjProposalItem projProposalItem = ProjProposalItem::find(projItemTrans.ProjTransId, projProposalJour.ProposalId);

            if (!projProposalItem)
            {
                projProposalItem = ProjProposalItem::initProposaleFromTrans(projItemTrans);
                projProposalItem.ProposalId = projProposalJour.ProposalId;
                ProjFundingSource projFundingSource = ProjFundingSource::find(projItemTransSale.FundingSource);

                if (salesLine)
                {
                    projProposalItem.SalesId = salesLine.SalesId;
                    projProposalItem.CustAccount = salesLine.CustAccount;
                    SalesQuantity salesQuantity = SalesQuantity::construct(DocumentStatus::Invoice);

                    if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        [projProposalItem.DeliverNow, projProposalItem.RemainBefore, projProposalItem.RemainAfter] = salesQuantity.qtySales(salesLine, this.getSalesLineSalesUpdate(salesLine));
                    
                        ProjProposalItem projProposalItemOpen;
                        ProjProposalJour projProposalJourOpen;

                        if (BrazilParameters::isEnabled())
                        {
                            boolean BrazilPartialSOQtyInvoiceCancellationFlightEnabled = ProjBrazilPartialSalesOrderQuantityInvoiceCancellationFlight::instance().isEnabled();

                            select sum(DeliverNow), sum(InventNow) from projProposalItemOpen
                                where
                                (
                                        (BrazilPartialSOQtyInvoiceCancellationFlightEnabled && projProposalItemOpen.InventTransId == salesLine.InventTransId && projProposalItemOpen.ProjTransId == projItemTrans.ProjTransId)
                                        ||
                                        (!BrazilPartialSOQtyInvoiceCancellationFlightEnabled && projProposalItemOpen.InventTransId == salesLine.InventTransId)
                                )
                                    exists join projProposalJourOpen
                                        where projProposalJourOpen.ProposalId == projProposalItemOpen.ProposalId &&
                                            projProposalJourOpen.LineProperty == ProjLinePropertyCode::Invoiced &&
                                            projProposalJourOpen.SalesOrderbalance > 0;
                        }
                        else
                        {
                            if (projItemTrans.ProjTransId)
                            {
                                select DeliverNow, InventNow from projProposalItemOpen
                                    where projProposalItemOpen.InventTransId == salesLine.InventTransId
                                     && projProposalItemOpen.ProjTransId == projItemTrans.ProjTransId
                                        exists join projProposalJourOpen
                                            where projProposalJourOpen.ProposalId == projProposalItemOpen.ProposalId &&
                                                projProposalJourOpen.LineProperty == ProjLinePropertyCode::Invoiced;
                            }
                            else
                            {
                                select sum(DeliverNow), sum(InventNow) from projProposalItemOpen
                                    where projProposalItemOpen.InventTransId == salesLine.InventTransId
                                        exists join projProposalJourOpen
                                            where projProposalJourOpen.ProposalId == projProposalItemOpen.ProposalId &&
                                                projProposalJourOpen.LineProperty == ProjLinePropertyCode::Invoiced;
                            }
                        }

                        // When sales order type is subscription, quantity of invoice proposal is considered for credit note.
                        if (salesLine.SalesType == SalesType::Subscription)
                        {
                            projProposalItem.DeliverNow = projProposalItemOpen.DeliverNow * -1;
                            projProposalItem.InventNow = salesLine.isStocked() ? projProposalItem.DeliverNow : 0;
                        }
                        else
                        {
                            projProposalItem.DeliverNow = projProposalItem.DeliverNow - projProposalItemOpen.DeliverNow;

                            if (projProposalItem.DeliverNow)
                            {
                                projProposalItem.InventNow = projProposalItem.DeliverNow;
                            }
                        }
                    }
                }

                if (CustTable::isCustPublic_NO(projFundingSource.CustAccount))
                {
                    projProposalItem.eInvoiceAccountCode    = projFundingSource.getEInvoiceData(projItemTrans.ProjId).EInvoiceAccountCode;
                }
                else if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
                {
                    projProposalItem.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
                }

                // <GBR>
                if (BrazilParameters::isEnabled() && isProjInvoiceNetPrice)
                {
                    projProposalItem.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalItem.TaxGroupId, projProposalItem.TaxItemGroupId);
                }
                // </GBR>

                if (projProposalItem.validateWrite())
                {
                    projProposalItem.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            ProjProposalItemDetail projProposalItemDetail = this.initProposalItemDetail(projItemTransSale, projProposalItem.RecId);

            if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                if (ProjProposalJour::isTotalDiscountIncludedInSalesOrder(projProposalJour))
                {
                    discAmount -= projItemTransSale.SalesPrice * projProposalJour.salesTable().DiscPercent / 100;
                }

                projProposalItemDetail.LineAmount = -projItemTransSale.LineAmount;
            }

            // <GBR>
            if (BrazilParameters::isEnabled() && projProposalItem.IncludedTaxPercent_BR)
            {
                projProposalItemDetail.AmountCur = CurrencyExchangeHelper::amount(projProposalItem.qty() * projProposalItemDetail.salesPriceInclTax_BR(projProposalItem.IncludedTaxPercent_BR), projProposalJour.CurrencyId);
            }
            // </GBR>

            if (projProposalItemDetail.validateWrite())
            {
                if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projProposalItemDetail.AmountCur = projProposalItemDetail.AmountCur * -1;
                }

                projProposalItemDetail.insert();

                if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projItemTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
                }
                else
                {
                    projItemTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
                }

                projItemTransSale.update();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalItemDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalItemDetail</c> table record.
    /// </summary>
    /// <param name = "_projItemTransSale">
    ///     An instance of <c>ProjItemTransSale</c> table buffer.
    /// </param>
    /// <param name = "_proposalRecId">
    ///     Record ID of a record in <c>ProjProposalItem</c> table.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalItemDetail</c> table.
    /// </returns>
    protected ProjProposalItemDetail initProposalItemDetail(ProjItemTransSale _projItemTransSale, RefRecId _proposalRecId)
    {
        ProjProposalItemDetail projProposalItemDetail = ProjProposalItemDetail::initProposaleFromTrans(_projItemTransSale);
        projProposalItemDetail.ProposalRefRecId = _proposalRecId;

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    protected void doOnAccount(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        ProjProposalOnAcc       projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale          = ProjOnAccTransSale::find(_recId, true);
        ProjFundingSource       projFundingSource;
        ProjOnAccTrans          projOnAccTrans              = ProjOnAccTrans::find(projOnAccTransSale.TransId);

        str cacheKey = projOnAccTransSale.proposalId() + ':' + projOnAccTransSale.TransId + ':' + int2Str(projOnAccTransSale.FundingSource) + ':' + int2Str(SessionId());
        
        if (this.getCacheValue(cacheKey) || projOnAccTransSale.canBeInvoiced())
        {
            this.progressUpdate(strFmt("@SYS26810", projOnAccTrans.ProjID, date2StrUsr(projOnAccTrans.TransDate, DateFlags::FormatAll)));

            this.setProjProposalProj(_projInvoiceProjId, projOnAccTrans.ProjID, projOnAccTransSale.FundingSource, projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction ? true : false);

            projProposalOnAcc = ProjProposalOnAcc::find(projOnAccTrans.TransId, projProposalJour.ProposalId);

            if (!projProposalOnAcc)
            {
                projProposalOnAcc                    = ProjProposalOnAcc::initProposaleFromTrans(projOnAccTrans);
                projProposalOnAcc.ProposalId         = projProposalJour.ProposalId;
                projFundingSource                    = ProjFundingSource::find(projOnAccTransSale.FundingSource);

                if (CustTable::isCustPublic_NO(projFundingSource.CustAccount))
                {
                    projProposalOnAcc.eInvoiceAccountCode    = projFundingSource.getEInvoiceData(projOnAccTrans.ProjId).EInvoiceAccountCode;
                }
                else if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
                {
                    projProposalOnAcc.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
                }

                if (!projProposalOnAcc.TaxGroupId)
                {
                    ProjParameters projParameters = ProjParameters::find();
                    if (projFundingSource && projParameters.TaxGroupMethod == ProjTaxGroupMethod::AccountReceivable)
                    {
                        projProposalOnAcc.TaxGroupId = CustTable::find(projFundingSource.CustAccount).TaxGroup;
                    }
                    else
                    {
                        projProposalOnAcc.TaxGroupId = ProjParameters::taxGroupInvoice(projOnAccTrans.ProjID);
                    }
                }

                // <GBR>
                if (BrazilParameters::isEnabled() && isProjInvoiceNetPrice)
                {
                    projProposalOnAcc.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalOnAcc.TaxGroupId, projProposalOnAcc.TaxItemGroupId);
                }
                // </GBR>

                if (projProposalOnAcc.validateWrite())
                {
                    projProposalOnAcc.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            projProposalOnAccDetail = this.initProposalOnAccDetail(projOnAccTransSale, projProposalOnAcc.RecId);

            if (projProposalOnAccDetail.validateWrite())
            {
                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projProposalOnAccDetail.AmountCur = projProposalOnAccDetail.AmountCur * -1;
                }

                projProposalOnAccDetail.insert();

                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projOnAccTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
                }
                else
                {
                    projOnAccTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
                }

                projOnAccTransSale.update();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalOnAccDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalOnAccDetail</c> table record.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    ///     An instance of <c>ProjOnAccTransSale</c> table buffer.
    /// </param>
    /// <param name = "_proposalRecId">
    ///     Record ID of a record in <c>ProjProposalOnAcc</c> table.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalOnAccDetail</c> table.
    /// </returns>
    protected ProjProposalOnAccDetail initProposalOnAccDetail(ProjOnAccTransSale _projOnAccTransSale, RefRecId _proposalRecId)
    {
        ProjProposalOnAccDetail projProposalOnAccDetail = ProjProposalOnAccDetail::initProposaleFromTrans(_projOnAccTransSale);
        projProposalOnAccDetail.ProposalRefRecId = _proposalRecId;

        return projProposalOnAccDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserting data into project proposal revenue.
    /// </summary>
    /// <param name = "_projInvoiceProjId">
    ///     Pass project contract id as parameter.
    /// </param>
    /// <param name = "_recId">
    ///     RecId of the <c>ProjRevenueTransSale</c> table to be processed.
    /// </param>
    protected void doRevenue(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale        = ProjRevenueTransSale::find(_recId, true);
        ProjFundingSource           projFundingSource;
        ProjRevenueTrans            projRevenueTrans            = ProjRevenueTrans::find(projRevenueTransSale.TransId);
        ProjRevenueTransSale        projRevenueTransSaleUpdate;
        ProjRevenueTrans            projRevenueTransFees;

        str cacheKey = projRevenueTransSale.proposalId() + ':' + projRevenueTransSale.TransId + ':' + int2Str(projRevenueTransSale.FundingSource) + ':' + int2Str(SessionId());
        
        if ((this.getCacheValue(cacheKey) || projRevenueTransSale.canBeInvoiced()) && this.checkOrigin(projRevenueTrans))
        {
            this.progressUpdate(strFmt("@SYS26810", projRevenueTrans.ProjId, date2StrUsr(projRevenueTrans.TransDate, DateFlags::FormatAll)));

            this.setProjProposalProj(_projInvoiceProjId, projRevenueTrans.ProjId, projRevenueTransSale.FundingSource, false);

            if (this.isRetentionTrans(projRevenueTrans))
            {
                select RecId, FundingSource from projRevenueTransSale
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId;

                projRevenueTransFees = this.createFeeJournal(projRevenueTrans.ProjId,
                                                      abs(projRevenueTrans.transTurnover()),
                                                      projRevenueTransSale.FundingSource,
                                                      projRevenueTrans.psaContractLineNum);

                update_recordset projRevenueTransSaleUpdate
                setting psaRefREcId = projRevenueTransSale.RecId
                    where projRevenueTransSaleUpdate.TransId == projRevenueTransFees.TransId;
            }

            projProposalRevenue = ProjProposalRevenue::find(projRevenueTrans.TransId, projProposalJour.ProposalId);

            if (!projProposalRevenue)
            {
                projProposalRevenue             = ProjProposalRevenue::initProposaleFromTrans(projRevenueTrans);
                projProposalRevenue.ProposalId  = projProposalJour.ProposalId;
                projFundingSource               = ProjFundingSource::find(projRevenueTransSale.FundingSource);

                if (CustTable::isCustPublic_NO(projFundingSource.CustAccount))
                {
                    projProposalRevenue.eInvoiceAccountCode    = projFundingSource.getEInvoiceData(projRevenueTrans.ProjId).EInvoiceAccountCode;
                }
                else if (CustTable::isCustDKPublic(projFundingSource.CustAccount) == NoYes::Yes && projFundingSource.eInvoiceLineSpec == NoYes::Yes)
                {
                    projProposalRevenue.eInvoiceAccountCode = projFundingSource.eInvoiceAccountCode;
                }

                // <GBR>
                if (BrazilParameters::isEnabled() && isProjInvoiceNetPrice)
                {
                    projProposalRevenue.IncludedTaxPercent_BR = Tax::getIncludedTaxPct_BR(projProposalRevenue.TaxGroupId, projProposalRevenue.TaxItemGroupId);
                }
                // </GBR>

                if (projProposalRevenue.validateWrite())
                {
                    projProposalRevenue.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            projProposalRevenueDetail = this.initProposalRevenueDetail(projRevenueTransSale, projProposalRevenue.RecId);

            // <GBR>
            if (BrazilParameters::isEnabled() && projProposalRevenue.IncludedTaxPercent_BR)
            {
                projProposalRevenueDetail.AmountCur = CurrencyExchangeHelper::amount(projProposalRevenue.qty() * projProposalRevenueDetail.salesPriceInclTax_BR(projProposalRevenue.IncludedTaxPercent_BR), projProposalJour.CurrencyId);
            }
            // </GBR>

            if (projProposalRevenueDetail.validateWrite())
            {
                if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projProposalRevenueDetail.AmountCur = projProposalRevenueDetail.AmountCur * -1;
                }

                projProposalRevenueDetail.insert();

                if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    projRevenueTransSale.TransStatus = ProjTransStatus::CreditnoteProposal;
                    isCreditNoteTrans = true;

                    if (projProposalRevenue.PSAContractLineNum)
                    {
                        if (PSAContractLineItems::find(projProposalRevenue.psaContractLineNum).LineType == PSAContractLineType::UOD)
                        {
                            invoiceQty = PSAContractLineItemsServer::computeQuantityForUOD(projProposalRevenue.psaContractLineNum, projProposalRevenue.lineAmount(), isCreditNoteTrans);
                        }
                    }
                }
                else
                {
                    projRevenueTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
                }

                projRevenueTransSale.update();
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalRevenueDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalRevenueDetail</c> table record.
    /// </summary>
    /// <param name = "_projRevenueTransSale">
    ///     An instance of <c>ProjRevenueTransSale</c> table buffer.
    /// </param>
    /// <param name = "_proposalRecId">
    ///     Record ID of a record in <c>ProjProposalRevenue</c> table.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalRevenueDetail</c> table.
    /// </returns>
    protected ProjProposalRevenueDetail initProposalRevenueDetail(ProjRevenueTransSale _projRevenueTransSale, RefRecId _proposalRecId)
    {
        ProjProposalRevenueDetail projProposalRevenueDetail = ProjProposalRevenueDetail::initProposaleFromTrans(_projRevenueTransSale);
        projProposalRevenueDetail.ProposalRefRecId = _proposalRecId;

        return projProposalRevenueDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
    protected void doSalesLine(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        #ISOCountryRegionCodes
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        SalesQuantity           salesQuantity           = SalesQuantity::construct(DocumentStatus::Invoice);
        SalesLine               salesLine               = SalesLine::findRecId(_recId);
        SalesTable              salesTable              = SalesTable::find(salesLine.SalesId);

        this.setTransDate(salesQuantity);

        str cacheKey = salesLine.projProposalId() + ':' + salesLine.ProjTransId + ':' + int2Str(salesLine.ProjFundingSource) + ':' + int2Str(SessionId());

        if (this.getCacheValue(cacheKey) || this.canSalesLineBeInvoiced(_projInvoiceProjId, salesLine))
        {
            this.progressUpdate(strFmt("@SYS26810", salesLine.ProjId, salesLine.ItemId));

            ProjFundingSource projFundingSource = ProjFundingSource::fundingSourceFromSalesLine(_projInvoiceProjId, salesLine);

            if (!projFundingSource)
            {
                select firstonly RecId from projFundingSource
                    where projFundingSource.ContractId == _projInvoiceProjId &&
                        (projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant);
            }

            this.setProjProposalProj(_projInvoiceProjId, salesLine.ProjId, projFundingSource.RecId, false);

            if (salesTable.DiscPercent)
            {
                projProposalJour.EndDisc = salesTable.DiscPercent;
                projProposalJour.update();
            }

            // <GMY>
            if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
                && salesTable.CreditNoteReasonCode
                && !projProposalJour.ReasonTableRef)
            {
                projProposalJour.ReasonTableRef = salesTable.CreditNoteReasonCode;
                projProposalJour.update();
            }
            // </GMY>

            projProposalItem = ProjProposalItem::initProposaleFromSalesLine(salesLine);

            if (CustTable::isCustPublic_NO(projProposalJour.InvoiceAccount))
            {
                projProposalItem.EInvoiceAccountCode = salesLine.EInvoiceAccountCode ? salesLine.EInvoiceAccountCode : ProjFundingSource::findCustAccount(_projInvoiceProjId).getEInvoiceData(salesLine.ProjId).EInvoiceAccountCode;
            }
            else if (CustTable::isCustDKPublic(projProposalJour.InvoiceAccount) == NoYes::Yes && ProjInvoiceTable::find(_projInvoiceProjId).eInvoiceLineSpec == NoYes::Yes)
            {
                projProposalItem.eInvoiceAccountCode = ProjInvoiceTable::find(_projInvoiceProjId).eInvoiceAccountCode;
            }

            [projProposalItem.DeliverNow, projProposalItem.RemainBefore, projProposalItem.RemainAfter] = salesQuantity.qtySales(salesLine, this.getSalesLineSalesUpdate(salesLine));
            ProjProposalItem projProposalItemOpen;
            ProjProposalJour projProposalJourOpen;
            select sum(DeliverNow), sum(InventNow) from projProposalItemOpen
                    where projProposalItemOpen.InventTransId == salesLine.InventTransId
                        exists join TableId from projProposalJourOpen
                            where projProposalJourOpen.ProposalId == projProposalItemOpen.ProposalId &&
                                (projProposalJourOpen.LineProperty == ProjLinePropertyCode::Open || projProposalJourOpen.LineProperty == ProjLinePropertyCode::Approved);

            projProposalItem.DeliverNow = projProposalItem.DeliverNow - projProposalItemOpen.DeliverNow;
            if (projProposalItem.DeliverNow)
            {
                [projProposalItem.InventNow, projProposalItem.RemainBeforeInvent, projProposalItem.RemainAfterInvent] = salesQuantity.qtyInvent(salesLine, this.getSalesLineSalesUpdate(salesLine));
                projProposalItem.InventNow = projProposalItem.InventNow - projProposalItemOpen.InventNow;
                projProposalItem.ProposalId = projProposalJour.ProposalId;

                if (projProposalItem.validateWrite())
                {
                    projProposalItem.insert();

                    projProposalItemDetail = this.initProposalItemDetailForSalesLine(salesLine, projProposalItem);

                    if (projProposalItemDetail.validateWrite())
                    {
                        projProposalItemDetail.insert();
                    }
                    else
                    {
                        // Update has been canceled.
                        throw error("@SYS18447");
                    }
                }
                else
                {
                    // Update has been canceled.
                    throw error("@SYS18447");
                }

                // Copy notes from Sales Table
                DocuRef saleTableDocuRefExists;
                select firstonly saleTableDocuRefExists where saleTableDocuRefExists.RefCompanyId  == SalesTable::find(projProposalItem.SalesId).DataAreaId &&
                                    saleTableDocuRefExists.RefTableId == tableNum(SalesTable)  &&
                                    saleTableDocuRefExists.RefRecId == SalesTable::find(projProposalItem.SalesId).RecId;

                if (saleTableDocuRefExists)
                {
                    //
                    // Check if Sales Table note(s) has already been copied. Firstonly check, but all notes are copied using Docu::copy() command.
                    // We are not doing a clone of the reference, so we can look at the Value RecId for a match.
                    //
                    DocuRef saleTableDocuRefExistsOnProposal;
                    select firstonly saleTableDocuRefExistsOnProposal where saleTableDocuRefExistsOnProposal.RefCompanyId  == SalesTable::find(projProposalItem.SalesId).DataAreaId &&
                                    saleTableDocuRefExistsOnProposal.RefTableId == tableNum(ProjProposalJour)  &&
                                    saleTableDocuRefExistsOnProposal.RefRecId == projProposalJour.RecId &&
                                    saleTableDocuRefExistsOnProposal.ValueRecId == saleTableDocuRefExists.ValueRecId;
                    if (!saleTableDocuRefExistsOnProposal)
                    {
                        Docu::copy(SalesTable::find(projProposalItem.SalesId), projProposalJour);
                    }
                }
            }
        }

        SysTransactionScopeCache::clear(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineSalesUpdate</Name>
				<Source><![CDATA[
    protected SalesUpdate getSalesLineSalesUpdate(SalesLine _salesLine)
    {
        return projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmSalesUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalItemDetailForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ProjProposalItemDetail</c> table record.
    /// </summary>
    /// <param name = "_salesLine">
    ///     An instance of <c>SalesLines</c> table buffer.
    /// </param>
    /// <param name = "_projProposalItem">
    ///     An instance of <c>ProjProposalItem</c> table buffer.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjProposalItemDetail</c> table.
    /// </returns>
    protected ProjProposalItemDetail initProposalItemDetailForSalesLine(SalesLine _salesLine, ProjProposalItem _projProposalItem)
    {
        ProjProposalItemDetail projProposalItemDetail = ProjProposalItemDetail::initProposaleFromSalesLine(_salesLine);

        if (this.isMultipleContractLinesForProjectEnabled &&
                ProjMultipleContractLinesForProjectFeatureHelper::hasFixedPriceBillingForItemTransactions(_salesLine.ProjId))
        {
            // for fixed price contract line we include sales orders as complimentary (0 amount on the invoice)
            projProposalItemDetail.SalesPrice = 0;
            projProposalItemDetail.AmountCur = 0;
        }
        else
        {
            projProposalItemDetail.LineAmount = _salesLine.calcLineAmount(_projProposalItem.DeliverNow);

            if (ProjProposalJour::isTotalDiscountIncludedInSalesOrder(projProposalJour))
            {
                DiscAmount discAmountLoc = _salesLine.calcLineAmount(_projProposalItem.DeliverNow) * projProposalJour.salesTable().DiscPercent / 100;
                discAmount += discAmountLoc;
                projProposalItemDetail.LineAmount -= discAmountLoc;
            }
        }

        projProposalItemDetail.ProposalRefRecId = _projProposalItem.RecId;

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the transaction date for <c>SalesQuantity</c> class.
    /// </summary>
    /// <param name = "_salesQuantity">
    ///     An object of <c>SalesQuantity</c> class.
    /// </param>
    protected void setTransDate(SalesQuantity _salesQuantity)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate())
        {
            _salesQuantity.parmTransDate(projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSalesLineBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales line can be invoiced.
    /// </summary>
    /// <param name = "_projInvoiceProjId">
    /// The project Id.
    /// </param>
    /// <param name = "_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// true if the sales line can be invoiced; otherwise, false.
    /// </returns>
    protected boolean canSalesLineBeInvoiced(ProjInvoiceProjId _projInvoiceProjId, SalesLine _salesLine)
    {
        return this.isQuerySalesLinePerParm(_salesLine) && _salesLine.canBeInvoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuerySalesLinePerParm</Name>
				<Source><![CDATA[
    protected boolean isQuerySalesLinePerParm(SalesLine _salesLine)
    {
        return projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmIsQuerySalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProposalIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of proposal ID's created.
    /// </summary>
    /// <returns>
    /// A list of proposal ID's created.
    /// </returns>
    public List getProposalIdList()
    {
        return proposalIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction is of type PrePayment.
    /// </summary>
    /// <param name="_trans">
    /// A record in table <c>ProjOnAccTrans</c>
    /// </param>
    /// <returns>
    /// True if the transaction is of type PrePayment; otherwise false.
    /// </returns>
    public boolean isAdvanceTrans(ProjOnAccTrans _trans)
    {
        return (_trans.TransactionOrigin == ProjOrigin::Prepayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction is of type OnAccount.
    /// </summary>
    /// <param name="_trans">
    /// A record in table <c>ProjOnAccTrans</c>
    /// </param>
    /// <returns>
    /// True if the transaction is of type OnAccount; otherwise false.
    /// </returns>
    public boolean isOnAccTrans(ProjOnAccTrans _trans)
    {
        boolean ret = false;
        ProjOnAccTrans relatedTrans;

        select firstonly RecId from relatedTrans
            where relatedTrans.RecId             == _trans.psaRefRecId &&
                    relatedTrans.TransactionOrigin == ProjOrigin::Prepayment;

        return (relatedTrans.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionRelease</Name>
				<Source><![CDATA[
    private boolean isRetentionRelease(ProjProposalId _projProposalId)
    {
        ProjRevenueTrans    projRevenueTrans;
        ProjProposalRevenue projProposalRevenue;

        select RecId from projRevenueTrans
            where projRevenueTrans.IsReleased == NoYes::Yes
            exists join projProposalRevenue
                where projProposalRevenue.TransId    == projRevenueTrans.TransId &&
                        projProposalRevenue.ProposalId == _projProposalId;

        return (projRevenueTrans ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionTrans</Name>
				<Source><![CDATA[
    private boolean isRetentionTrans(ProjRevenueTrans _projRevenueTrans)
    {
        return (_projRevenueTrans.TransactionOrigin == ProjOrigin::FeeJournal &&
                _projRevenueTrans.IsRetained        == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjInvoiceProposalCreateLinesBase _projInvoiceProposalCreateLines, boolean _isValidateProjTable)
    {
        if (!_projInvoiceProposalCreateLines)
        {
            throw error(Error::missingParameter(this));
        }

        proposalIdList                  = new List(Types::String);

        isValidateProjTable             = _isValidateProjTable;

        projInvoiceProposalCreateLines  = _projInvoiceProposalCreateLines;

        this.parmShowMessages(false);

        taxGroupsMap = new Map(Types::Container, Types::AnyType);

        super();

        // <GIN>
        isCountryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Invoice date passing as parameter.
    /// </summary>
    /// <param name="_invoiceDate">
    /// _invoiceDate as a param.
    /// </param>
    /// <returns>
    /// returns Invoice date.
    /// </returns>
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceType</Name>
				<Source><![CDATA[
    public ProjInvoiceType  parmInvoiceType(ProjInvoiceType _invoiceType = projInvoiceType)
    {
        projInvoiceType = _invoiceType;

        return projInvoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJourExtern</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJourExtern(ProjProposalJour _projProposalJour = projProposalJourExtern)
    {
        projProposalJourExtern = _projProposalJour;

        return projProposalJourExtern;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipRecalculateProposalTotals</Name>
				<Source><![CDATA[
    public boolean parmSkipRecalculateProposalTotals(boolean _skipRecalculateProposalTotals = skipRecalculateProposalTotals)
    {
        skipRecalculateProposalTotals = _skipRecalculateProposalTotals;

        return skipRecalculateProposalTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMessages</Name>
				<Source><![CDATA[
    public boolean parmShowMessages(boolean _showMessages = showMessages)
    {
        showMessages = _showMessages;

        return showMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    private void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBlockedProjIds</Name>
				<Source><![CDATA[
    private void removeBlockedProjIds()
    {
        ProjTable       projTable;
        Set             projIdBlockSet = new Set(Types::String);
        SetEnumerator   se;

        while select ProjId from tmpProjProposalTrans group by ProjId
        {
            projIdBlockSet.add(tmpProjProposalTrans.ProjId);
        }

        se = projIdBlockSet.getEnumerator();

        while (se.moveNext())
        {
            projTable = ProjTable::find(se.current());

            if (projTable.status().checkRule(ProjStatusRule::CreateInvoiceProposal))
            {
                warning(strFmt("@SYS113136", projTable.ProjId, projTable.Type, projTable.Stage()));

                delete_from tmpProjProposalTrans where tmpProjProposalTrans.ProjId == se.current();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses retention transactions.
    /// </summary>
    /// <param name="_recId">
    /// Record ID of a record in <c>ProjRevenueTransSales</c> record.
    /// </param>
    /// <param name="_proposalId">
    /// Invoice proposal ID.
    /// </param>
    /// <param name="_contractLineNum">
    /// Line number of a record in <c>PSAContractLineItems</c> table.
    /// </param>
    /// <param name="_fundingSourceRefId">
    /// Record ID of record in <c>ProjFundingSource</c> table.
    /// </param>
    /// /// <param name="_projId">
    /// Project ID.
    /// </param>
    /// <param name="_invoiceId">
    /// _invoiceId for which retention to be reversed on credit notes for project Invoices.
    /// </param>
    /// <param name="_taxGroup">
    /// _taxGroup for the record in <c>projInvoiceRevenue</c> table.
    /// </param>
    /// <param name="_taxItemGroup">
    /// _taxItemGroup for the record in <c>projInvoiceRevenue</c> table.
    /// </param>
    public void retentionReversal(RecId _recId, ProjProposalId _proposalId = '', PSAContractLineNum _contractLineNum ='', ProjFundingSourceRefId _fundingSourceRefId = 0, ProjId _projId ='', ProjInvoiceId _invoiceId = '', ProjTaxGroup _taxGroup = '', ProjTaxItemGroup _taxItemGroup = '')
    {
        ProjRevenueTrans                projRevenueTrans;
        ProjRevenueTransSale            projRevenueTransSale;
        PSAProjProposalProj             projProposalProjLoc;
        PSAProjFundingSourceRetain      psaProjFundingSourceRetain;
        ProjInvoiceRevenue              projInvoiceRevenue;
        ProjInvoiceJour                 projInvoiceJour;
        ProjRevenueTransSale            projRevenueTransSaleLoc;

        if (_recId && !_contractLineNum)
        {
            select LineAmount,TaxGroupId,TaxItemGroupId from projInvoiceRevenue
                where projInvoiceRevenue.ProjId == _projId
                    && projInvoiceRevenue.ProjInvoiceId == _invoiceId
                    && projInvoiceRevenue.TaxGroupId == _taxGroup
                    && projInvoiceRevenue.TaxItemGroupId == _taxItemGroup
            join IsReleased from projRevenueTrans
                where projRevenueTrans.TransId == projInvoiceRevenue.TransId
                    && (projRevenueTrans.IsRetained == NoYes::Yes
                    || projRevenueTrans.IsReleased == NoYes::Yes)
            join RecId from projRevenueTransSale
                where projRevenueTrans.TransId == projRevenueTransSale.TransId
                    && projRevenueTransSale.FundingSource == _fundingSourceRefId
            outer join RecId from projRevenueTransSaleLoc
                where projRevenueTransSaleLoc.PSARefREcId == projRevenueTransSale.RecId
            join forUpdate projProposalProjLoc
                where projProposalProjLoc.ProjProposalId == _proposalId
                    && projProposalProjLoc.ProjId == _projId;

            if (projProposalProjLoc)
            {
                // Don't recalculate retention if this projInvoiceRevenue has already been considered.
                if (!taxGroupsMap.exists([projInvoiceRevenue.RecId]))
                {
                    if (projRevenueTrans.IsReleased || projRevenueTransSaleLoc.RecId)
                    {
                        projProposalProjLoc.ReleasedAmount  += projInvoiceRevenue.LineAmount;
                    }
                    else
                    {
                        projProposalProjLoc.RetainedNow         += projInvoiceRevenue.LineAmount;
                        if (projProposalProjLoc.InvoicedNow)
                        {
                            // Makes sure original project invoice proposal retention percentage is applied when its credit note proposal is created.
                            if (!TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                                && ProjParameters::find().CustomerRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
                            {
                                
                                Amount invAmount = ProjProposalJour::find(_proposalId).InvoiceAmount;
                                if (invAmount)
                                {
                                    projProposalProjLoc.RetainedPercent = (projProposalProjLoc.RetainedNow / invAmount) * 100;
                                }
                            }
                            else
                            {
                                projProposalProjLoc.RetainedPercent = (projProposalProjLoc.RetainedNow / (projProposalProjLoc.InvoicedNow)) * 100;
                            }
                        }
                    }
                    taxGroupsMap.insert([projInvoiceRevenue.RecId], projInvoiceRevenue.LineAmount);
                    projProposalProjLoc.update();
                }
            }
        }
        else if (_contractLineNum)
        {
            // Makes sure original project invoice proposal retention percentage is applied when its credit note proposal is created.
            if (!TaxCalculationForFullProjectInvoiceAmountFeatureExposure::enableTaxCalculationForFullProjectInvoiceAmountFeatureForSAUDI()
                && ProjParameters::find().CustomerRetentionOptions == ProjDefaultRetentionOptions::BasedOnGrossAmount)
            {
                PSAProjProposalProj origProjProposalProj;
                ProjProposalOnAcc projProposalOnAcc;
                ProjProposalOnAcc creditNoteProjProposalOnAcc;

                select firstonly RetainedPercent from origProjProposalProj
                    where origProjProposalProj.ProjId == _projId
                        && origProjProposalProj.ContractLineNum == _contractLineNum
                    exists join projProposalOnAcc
                            where projProposalOnAcc.ProposalId == origProjProposalProj.ProjProposalId
                                && projProposalOnAcc.PSAContractLineNum == _contractLineNum
                    exists join creditNoteProjProposalOnAcc
                            where creditNoteProjProposalOnAcc.TransId == projProposalOnAcc.TransId
                                && creditNoteProjProposalOnAcc.ProposalId == _proposalId;
                    
                if (origProjProposalProj.RetainedPercent)
                {
                    select firstonly forupdate projProposalProjLoc
                        where projProposalProjLoc.ContractLineNum == _contractLineNum
                            && projProposalProjLoc.ProjProposalId == _proposalId;

                    if (projProposalProjLoc)
                    {
                        projProposalProjLoc.RetainedPercent = origProjProposalProj.RetainedPercent;
                        projProposalProjLoc.RetainedNow = (origProjProposalProj.RetainedPercent * projProposalProjLoc.InvoicedNow) / 100;
                        projProposalProjLoc.update();
                    }
                }
            }
            else
            {
                select RetainPercent from psaProjFundingSourceRetain
                where psaProjFundingSourceRetain.BillingRuleId == _contractLineNum
                    && psaProjFundingSourceRetain.ProjFundingSource == _fundingSourceRefId
                join forupdate projProposalProjLoc
                where projProposalProjLoc.ContractLineNum == _contractLineNum
                    && projProposalProjLoc.ProjProposalId == _proposalId;

                if (projProposalProjLoc)
                {
                    projProposalProjLoc.RetainedPercent = psaProjFundingSourceRetain.RetainPercent;
                    projProposalProjLoc.RetainedNow = (psaProjFundingSourceRetain.RetainPercent * projProposalProjLoc.InvoicedNow) / 100;
                    projProposalProjLoc.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the pre-run initialization, including setting up a progress bar, and fetching and preparing the proposal transactions.
    /// </summary>
    protected void initPreRun()
    {
        this.progressInit("@SYS54552", progressTotal, #AviFormLetter);

        progress.setText("@SYS26577");

        projInvoiceProposalCreateLines.updateContractLineNum();

        tmpProjProposalTrans = projInvoiceProposalCreateLines.prepareForInvoicing();

        if (countryRegion_PL)
        {
            this.parmAdvanceInvoiceSettlement(projInvoiceProposalCreateLines.parmAdvanceInvoiceSettlement());
        }

        if (isValidateProjTable)
        {
            this.removeBlockedProjIds();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a <c>PSATmpProjProposalTrans</c> query.
    /// </summary>
    /// <returns>
    ///     A query having <c>PSATmpProjProposalTrans</c> table data.
    ///</returns>
    [Wrappable(true)]
    protected final Query getTmpProjProposalTrans()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTmpProjProposalTrans = query.addDataSource(tableNum(PSATmpProjProposalTrans));
        qbdsTmpProjProposalTrans.addOrderByField(fieldNum(PSATmpProjProposalTrans, ProjInvoiceProjId));
        qbdsTmpProjProposalTrans.addOrderByField(fieldNum(PSATmpProjProposalTrans, FundingSourceRefId));
        qbdsTmpProjProposalTrans.addOrderByField(fieldNum(PSATmpProjProposalTrans, CurrencyCode));
        qbdsTmpProjProposalTrans.addOrderByField(fieldNum(PSATmpProjProposalTrans, TaxInformation_IN));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSetProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether to set up the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <param name = "_fundingSourceRefIdPrevSet">
    ///     The set used to store funding source refrence.
    /// </param>
    /// <param name = "_currencyCodePrev">
    ///     The currency code.
    /// </param>
    /// <param name = "_projInvoiceProjIdPrev">
    ///     The project invoice Id.
    /// </param>
    /// <returns>
    ///     true if <c>ProjProposalJour</c> record need to be set; otherwise, false.
    ///</returns>
    protected boolean isSetProjProposalJour(Set _fundingSourceRefIdPrevSet, CurrencyCode _currencyCodePrev, ProjInvoiceProjId _projInvoiceProjIdPrev)
    {
        RefRecId taxInformationRecid;
        boolean  isInvoiceSplit_IN = isCountryRegion_IN && ProjParameters::find().InvoiceSplit_IN;

        boolean isSetProjProposalJour = this.hasToSplitProposals(tmpProjProposalTrans) || tmpProjProposalTrans.ProjInvoiceProjId  != _projInvoiceProjIdPrev  ||
            !_fundingSourceRefIdPrevSet.in(tmpProjProposalTrans.FundingSourceRefId) ||
            tmpProjProposalTrans.CurrencyCode       != _currencyCodePrev       ||
            ((tmpProjProposalTrans.TaxInformation_IN != taxInformationRecid) && isInvoiceSplit_IN);

        return isSetProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSetProjProposalJourByContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether to set up the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <param name = "_fundingSourceRefIdPrevSet">
    ///     The set used to store funding source refrence.
    /// </param>
    /// <param name = "_contract">
    ///     The <c>ProjInvoiceProposalInsertLinesContract</c>.
    /// </param>
    /// <returns>
    ///     true if <c>ProjProposalJour</c> record need to be set; otherwise, false.
    ///</returns>
    protected boolean isSetProjProposalJourByContract(Set _fundingSourceRefIdPrevSet, ProjInvoiceProposalInsertLinesContract _contract)
    {
        boolean  isInvoiceSplit_IN = isCountryRegion_IN && ProjParameters::find().InvoiceSplit_IN;
        ProjInvoiceProjId   projInvoiceProjIdPrev;
        CurrencyCode        currencyCodePrev;

        if (_contract)
        {
            projInvoiceProjIdPrev = _contract.projInvoiceProjIdPrev;
            currencyCodePrev = _contract.currencyCodePrev;
        }

        boolean isSetProjProposalJour = this.hasToSplitProposals(tmpProjProposalTrans)
                                        || tmpProjProposalTrans.ProjInvoiceProjId  != projInvoiceProjIdPrev
                                        || !_fundingSourceRefIdPrevSet.in(tmpProjProposalTrans.FundingSourceRefId)
                                        || tmpProjProposalTrans.CurrencyCode != currencyCodePrev
                                        || (isInvoiceSplit_IN && this.hasToSplitProposals_IN(tmpProjProposalTrans, _contract));

        return isSetProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasToSplitProposals_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether it allows to split proposals.
    /// </summary>
    /// <param name = "_tmpProjProposalTrans"><c>PSATmpProjProposalTrans</c> record</param>
    /// <param name = "_contract"><c>ProjInvoiceProposalInsertLinesContract</c></param>
    /// <returns>True if need to split proposals.</returns>
    private boolean hasToSplitProposals_IN(PSATmpProjProposalTrans _tmpProjProposalTrans, ProjInvoiceProposalInsertLinesContract _contract)
    {
        TaxInformation_IN   taxInformationCurrent, taxInformationPrev;
        RefRecId            taxInformationRecId;

        if (_contract)
        {
            taxInformationRecId = _contract.taxInformationRecId;
            taxInformationPrev = TaxInformation_IN::find(taxInformationRecId);
        }
        if (_tmpProjProposalTrans)
        {
            taxInformationCurrent = TaxInformation_IN::find(_tmpProjProposalTrans.TaxInformation_IN);
        }

        return taxInformationCurrent.GSTIN != taxInformationPrev.GSTIN
                || taxInformationCurrent.IECRegistrationNumberTable != taxInformationPrev.IECRegistrationNumberTable
                || taxInformationCurrent.TAN != taxInformationPrev.TAN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousDetailsForTmpProjProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the previous details from <c>TmpProjProposalTrans</c> record.
    /// </summary>
    /// <returns>
    ///     An instance of <c>ProjInvoiceProposalInsertLinesContract</c> class.
    ///</returns>
    protected ProjInvoiceProposalInsertLinesContract getPreviousDetailsForTmpProjProposalTrans()
    {
        ProjInvoiceProposalInsertLinesContract contract = ProjInvoiceProposalInsertLinesContract::construct();

        contract.projInvoiceProjIdPrev = tmpProjProposalTrans.ProjInvoiceProjId;
        contract.fundingSourceRefIdPrev = tmpProjProposalTrans.FundingSourceRefId;
        contract.currencyCodePrev = tmpProjProposalTrans.CurrencyCode;
        contract.taxInformationRecid = tmpProjProposalTrans.TaxInformation_IN;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that performs the actual job of the class.
    /// </summary>
    public void run()
    {
        if (this.parmInvoiceType() == ProjInvoiceType::DebitNote_BR)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00076, funcName());
        }
        else if (BrazilParameters::isEnabled())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00086, funcName());
        }

        ProjFundingSourceRefId  fundingSourceRefIdPrev;
        CurrencyCode            currencyCodePrev;
        ProjInvoiceProjId       projInvoiceProjIdPrev;
        RefRecId                taxInformationRecid;
        boolean                 isInvoiceSplit_IN = isCountryRegion_IN && ProjParameters::find().InvoiceSplit_IN;
        ProjInvoiceProposalInsertLinesContract contractPrev;

        boolean                 ret;
        Set                     fundingSourceRefIdPrevSet = new Set(Types::Int64);

        isMultipleContractLinesForProjectEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
        #OCCRetryCount

        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity().invProposalInsertLinesRunContext())
        {
            int totalTransactionCount = 0;
            int nonInvoiceableTransactionCount = 0;
            int internalFundingTransactionCount = 0;
            int projCostTransSaleTransactionCount = 0;
            int projEmplTransSaleTransactionCount = 0;
            int projItemTransSaleTransactionCount = 0;
            int projOnAccTransSaleTransactionCount = 0;
            int projRevenueTransSaleTransactionCount = 0;
            int salesLineTransactionCount = 0;

            try
            {
                ttsbegin;

                this.initPreRun();

                QueryRun queryRun = new QueryRun(this.getTmpProjProposalTrans());
                queryRun.setCursor(tmpProjProposalTrans);

                while(queryRun.next())
                {
                    totalTransactionCount++;

                    tmpProjProposalTrans = queryRun.get(tableNum(PSATmpProjProposalTrans));

                    if (!this.isInvoiceableTrans(tmpProjProposalTrans.RefTableId, tmpProjProposalTrans.RefRecId))
                    {
                        nonInvoiceableTransactionCount++;
                        continue;
                    }

                    if (!ProjFundingSource::isExternalFunding(tmpProjProposalTrans.FundingSourceRefId))
                    {
                        internalFundingTransactionCount++;
                        continue;
                    }
                
                    // <GBR>
                    if (!BrazilParameters::isEnabled() || (projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmReverseMarking_BR()))
                    {
                        if (this.isSetProjProposalJourByContract(fundingSourceRefIdPrevSet, contractPrev))
                        {
                            this.parmDefaultDimension(tmpProjProposalTrans.DefaultDimension);
                            ret = this.setProjProposalJour(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.ProjId, tmpProjProposalTrans.FundingSourceRefId, tmpProjProposalTrans.CurrencyCode, tmpProjProposalTrans.TaxInformation_IN, tmpProjProposalTrans.FixedExchRate);
                            fundingSourceRefIdPrevSet.add(tmpProjProposalTrans.FundingSourceRefId);
                        }

                        contractPrev = this.getPreviousDetailsForTmpProjProposalTrans();
                  
                        projInvoiceProjIdPrev  = contractPrev.projInvoiceProjIdPrev;
                        fundingSourceRefIdPrev = contractPrev.fundingSourceRefIdPrev;
                        currencyCodePrev       = contractPrev.currencyCodePrev;
                        taxInformationRecid    = contractPrev.taxInformationRecid;
                    }
                    // </GBR>
                    else
                    {
                        this.setProjProposalJour_BR(tmpProjProposalTrans);
                        ret = true;
                    }

                    this.setProjProposalJourPost(tmpProjProposalTrans);

                    if (!ret)
                    {
                        delete_from tmpProjProposalTrans where tmpProjProposalTrans.ProjInvoiceProjId == projInvoiceProjIdPrev && tmpProjProposalTrans.FundingSourceRefId == fundingSourceRefIdPrev && tmpProjProposalTrans.CurrencyCode == currencyCodePrev;
                        continue;
                    }

                    ProjProposalJour proposalJour;
                    ProjTable projTable;
                    select RecId from projTable
                        where projTable.ProjId == tmpProjProposalTrans.ProjId &&
                              projTable.ProjInvoiceProjId  == tmpProjProposalTrans.ProjInvoiceProjId
                        exists join proposalJour
                            where proposalJour.ProjInvoiceProjId == projTable.ProjInvoiceProjId &&
                                  proposalJour.ProposalId == projProposalJour.ProposalId;

                    if (projTable.RecId)
                    {
                        switch (tmpProjProposalTrans.RefTableId)
                        {
                            case tableNum(ProjCostTransSale) :
                                projCostTransSaleTransactionCount++;
                                this.doCost(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;

                            case tableNum(ProjEmplTransSale) :
                                projEmplTransSaleTransactionCount++;
                                this.doEmpl(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;

                            case tableNum(ProjItemTransSale) :
                                projItemTransSaleTransactionCount++;
                                this.doItem(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;

                            case tableNum(ProjOnAccTransSale)  :
                                projOnAccTransSaleTransactionCount++;
                                this.doOnAccount(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;

                            case tableNum(ProjRevenueTransSale) :
                                projRevenueTransSaleTransactionCount++;
                                this.doRevenue(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;

                            case tableNum(SalesLine) :
                                salesLineTransactionCount++;
                                this.doSalesLine(tmpProjProposalTrans.ProjInvoiceProjId, tmpProjProposalTrans.RefRecId);
                                break;
                        }

                        PSAContractLineItemsServer::updateUnitsOrPercentProposal(tmpProjProposalTrans.ContractLineNum, NoYes::Yes);

                        if (ProjProposalJour::isTotalDiscountIncludedInSalesOrder(projProposalJour))
                        {
                            ttsbegin;
                            projProposalJour.selectForUpdate(true);
                            projProposalJour.DiscAmount = discAmount;
                            projProposalJour.update();
                            ttscommit;
                        }
                    }
                }

                if (!this.parmSkipRecalculateProposalTotals())
                {
                    this.updateInvoice();

                    // When an invoice proposal is generated, the system will
                    // automatically create retainage withholding records and/or retainage billing records at the project level.
                    this.calcRetention();
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'Deadlock', 'ProjInvoiceProposalInsertLines.run()'));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.logError(strFmt(LoggerRetryExceptionMsg, 'UpdateConflict', 'ProjInvoiceProposalInsertLines.run()'));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.logError(strFmt(LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ProjInvoiceProposalInsertLines.run()'));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                logger.logError(strFmt(LoggerRetryExceptionMsg, 'ExceptionError', 'ProjInvoiceProposalInsertLines.run()'));

                throw error("@SYS18447");
            }

            activityContext.addCustomProperty('totalTransactionCount', any2Str(totalTransactionCount));
            activityContext.addCustomProperty('nonInvoiceableTransactionCount', any2Str(nonInvoiceableTransactionCount));
            activityContext.addCustomProperty('internalFundingTransactionCount', any2Str(internalFundingTransactionCount));
            activityContext.addCustomProperty('projCostTransSaleTransactionCount', any2Str(projCostTransSaleTransactionCount));
            activityContext.addCustomProperty('projEmplTransSaleTransactionCount', any2Str(projEmplTransSaleTransactionCount));
            activityContext.addCustomProperty('projItemTransSaleTransactionCount', any2Str(projItemTransSaleTransactionCount));
            activityContext.addCustomProperty('projOnAccTransSaleTransactionCount', any2Str(projOnAccTransSaleTransactionCount));
            activityContext.addCustomProperty('projRevenueTransSaleTransactionCount', any2Str(projRevenueTransSaleTransactionCount));
            activityContext.addCustomProperty('salesLineTransactionCount', any2Str(salesLineTransactionCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceableTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction can be invoiced or not.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID of buffer table <c>PSATmpProjProposalTrans</c>.
    /// </param>
    /// <param name="_recId">
    /// A record in table <c>PSATmpProjProposalTrans</c>.
    /// </param>
    /// <returns>
    /// True if the transaction is invoiceable; otherwise false.
    /// </returns>
    protected boolean isInvoiceableTrans(RefTableId _tableId, RefRecId _recId)
    {
        boolean valid = true;

        switch (_tableId)
        {
            case tableNum(ProjCostTransSale) :
                ProjCostTransSale projCostTransSale = ProjCostTransSale::find(_recId);
                if (!projCostTransSale.canBeInvoiced())
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = projCostTransSale.proposalId() + ':' + projCostTransSale.TransId + ':' + int2Str(projCostTransSale.FundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;

            case tableNum(ProjEmplTransSale) :
                ProjEmplTransSale projEmplTransSale = ProjEmplTransSale::find(_recId);
                if (!projEmplTransSale.canBeInvoiced())
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = projEmplTransSale.proposalId() + ':' + projEmplTransSale.TransId + ':' + int2Str(projEmplTransSale.FundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;

            case tableNum(ProjItemTransSale) :
                ProjItemTransSale projItemTransSale = ProjItemTransSale::find(_recId);
                if (!projItemTransSale.canBeInvoiced())
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = projItemTransSale.proposalId() + ':' + projItemTransSale.ProjTransId + ':' + int2Str(projItemTransSale.FundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;

            case tableNum(ProjOnAccTransSale)  :
                ProjOnAccTransSale projOnAccTransSale = ProjOnAccTransSale::find(_recId);
                if (!ProjOnAccTransSale.canBeInvoiced())
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = ProjOnAccTransSale.proposalId() + ':' + ProjOnAccTransSale.TransId + ':' + int2Str(projOnAccTransSale.FundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;

            case tableNum(ProjRevenueTransSale) :
                ProjRevenueTransSale projRevenueTransSale = ProjRevenueTransSale::find(_recId);
                if (!projRevenueTransSale.canBeInvoiced())
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = projRevenueTransSale.proposalId() + ':' + projRevenueTransSale.TransId + ':' + int2Str(projRevenueTransSale.FundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;

            case tableNum(SalesLine) :
                SalesLine salesLine = SalesLine::findRecId(tmpProjProposalTrans.RefRecId);
                if (!this.canSalesLineBeInvoiced(tmpProjProposalTrans.ProjInvoiceProjId, salesLine))
                {
                    valid = false;
                }
                else
                {
                    str cacheKey = salesLine.projProposalId() + ':' + salesLine.ProjTransId + ':' + int2Str(salesLine.ProjFundingSource) + ':' + int2Str(SessionId());
                    this.setCacheValue(cacheKey);
                }
                break;
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasToSplitProposals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point that allows to split proposals.
    /// </summary>
    /// <param name = "_tmpProjProposalTrans">
    /// <c>PSATmpProjProposalTrans</c> table buffer.
    /// </param>
    /// <returns>false by default.</returns>
    [Replaceable]
    public boolean hasToSplitProposals(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjProposalJour</c> record with totals and fields related to E-invoice for Norway.
    /// </summary>
    protected void updateInvoice()
    {
        this.updateInvoiceTotal();

        this.updateEInvoiceData_NO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute this class's <c>updateInvoice</c> method.
    /// </summary>
    public final void executeUpdateInvoice()
    {
        this.updateInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalJourPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform additional processing after a call to setProjProposalJour.
    /// </summary>
    /// <param name = "_tmpProjProposalTrans">Table map of project transactions.</param>
    /// <remarks>
    /// Extend this method to perform additional processing after the project proposal journal has been set in the run method.
    /// </remarks>
    protected void setProjProposalJourPost(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerBlockedForProjProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the customer is blocked for project proposal.
    /// </summary>
    /// <param name = "_custAccount">The current customer account.</param>
    /// <returns>true if the customer is blocked for project proposal; otherwise, false.</returns>
    protected boolean isCustomerBlockedForProjProposal(CustAccount _custAccount)
    {
        CustVendorBlocked blocked = CustTable::blocked(_custAccount);
        return (blocked == CustVendorBlocked::All || blocked == CustVendorBlocked::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJourCreateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjProposalJourCreateParameters</c> class.
    /// </summary>
    /// <param name = "_projTable">
    /// A <c>ProjTable</c> record buffer.
    /// </param>
    /// <param name = "_projInvoiceType">
    /// A <c>ProjInvoiceType</c> value.
    /// </param>
    /// <param name = "_currencyId">
    /// A <c>CurrencyCode</c> value.
    /// </param>
    /// <param name = "_projFundingSourceRefId">
    /// A <c>ProjFundingSourceRefId</c> value.
    /// </param>
    /// <param name = "_invoiceDate">
    /// An <c>InvoiceDate</c> value.
    /// </param>
    /// <param name = "_interCompanyPosted">
    /// An <c>InterCompanyPosted</c> value.
    /// </param>
    /// <param name = "_psaInvoiceMethod">
    /// A <c>PSAInvoiceMethod</c> value.
    /// </param>
    /// <param name = "_taxPeriodPaymentCode">
    /// A <c>PlTaxPeriodPaymentCode</c> value.
    /// </param>
    /// <param name = "_defaultDimension">
    /// A <c>DimensionDefault</c> value.
    /// </param>
    /// <param name = "_exchRate">
    /// An <c>ExchRate</c> value.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalJourCreateParameters</c> instance.
    /// </returns>
    protected ProjProposalJourCreateParameters createProjProposalJourCreateParameters(
        ProjTable                 _projTable,
        ProjInvoiceType           _projInvoiceType,
        CurrencyCode              _currencyId               = '',
        ProjFundingSourceRefId    _projFundingSourceRefId   = 0,
        InvoiceDate               _invoiceDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InterCompanyPosted        _interCompanyPosted       = false,
        PSAInvoiceMethod          _psaInvoiceMethod         = PSAInvoiceMethod::Progress,
        PlTaxPeriodPaymentCode    _taxPeriodPaymentCode     = '',
        DimensionDefault          _defaultDimension         = 0,
        ExchRate                  _exchRate                 = 0)
    {
        using (ProjCustAdvancesSettleContext context = this.createProjCustAdvancesSettleContext())
        {
            return ProjProposalJourCreateParameters::construct(
                        _projInvoiceType,
                        _currencyId,
                        _projFundingSourceRefId,
                        _invoiceDate,
                        _interCompanyPosted,
                        _psaInvoiceMethod,
                        _taxPeriodPaymentCode,
                        _defaultDimension,
                        _exchRate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjCustAdvancesSettleContext</Name>
				<Source><![CDATA[
    private ProjCustAdvancesSettleContext createProjCustAdvancesSettleContext()
    {
        ProjCustAdvancesSettleContext context = new ProjCustAdvancesSettleContext();

        if (countryRegion_PL)
        {
            context.parmAdvanceInvoicePosting(advanceInvoicePosting ? NoYes::Yes : NoYes::No);
            context.parmAdvanceInvoiceSettlement(advanceInvoiceSettlement ? NoYes::Yes : NoYes::No);
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the <c>ProjProposalJour</c> record. Depending on the outcome with either update or delete the existing record.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project invoice Id.</param>
    /// <param name = "_projId">The project Id.</param>
    /// <param name = "_projFundingRefId">The project funding Id.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_taxInformationRecId">The <c>RefRecId</c> for the tax information.</param>
    /// <param name = "_exchRate">The exchange rate.</param>
    /// <returns>true if the <c>ProjProposalJour</c> record was updated; otherwise, false.</returns>
    protected boolean setProjProposalJour(ProjInvoiceProjId      _projInvoiceProjId,
                                        ProjId                 _projId,
                                        ProjFundingSourceRefId _projFundingRefId,
                                        CurrencyCode           _currencyCode,
                                        RefRecId               _taxInformationRecId = 0,
                                        ExchRate               _exchRate = 0
                                        )

    {
        ProjTable              projTableLocal       = ProjTable::find(_projId);
        boolean                ret                  = true;
        // <GIN>
        InvoiceDate            localInvoiceDate     = this.parmInvoiceDate() && TaxParameters::checkTaxParameters_IN() ? this.parmInvoiceDate() : projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate();
        // </GIN>

        if (projProposalJourExtern)
        {
            projProposalJour = projProposalJourExtern;
        }
        else
        {
            projProposalJour = ProjInvoiceTable::find(_projInvoiceProjId).createProposalJourFromParameters(
                this.createProjProposalJourCreateParameters(
                    projTableLocal,
                    projInvoiceType,
                    _currencyCode,
                    _projFundingRefId,
                    localInvoiceDate,
                    false,
                    PSAInvoiceMethod::Progress,
                    '',
                    ProjParameters::find().AllowUpdateProjectDimensionsForAccountReceivable ? this.parmDefaultDimension() : 0,
                    _exchRate));

            // <GIN>
            if (projProposalJour && isCountryRegion_IN)
            {
                ttsbegin;
                projProposalJour.selectForUpdate(true);
                projProposalJour.TaxInformation_IN = _taxInformationRecId;
                projProposalJour.update();
                ttscommit;
            }
            // </GIN>
            // <GEEU>
            if (projProposalJour                                               &&
                projInvoiceProposalCreateLines.parmProposalCreateLinesParams() &&
               !projProposalJour.ReasonTableRef                                &&
                projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmReasonRefRecID())
            {
                ttsbegin;

                projProposalJour = ProjProposalJour::findRecid(projProposalJour.RecId, true);
                projProposalJour.ReasonTableRef = projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmReasonRefRecID();
                projProposalJour.update();

                ttscommit;
            }
            // </GEEU>

            if (this.isCustomerBlockedForProjProposal(projProposalJour.InvoiceAccount))
            {
                if (this.parmShowMessages())
                {
                    info(strFmt("@SYS66078", projProposalJour.ProposalId,
                                             projProposalJour.ProjInvoiceProjId,
                                             projProposalJour.CurrencyId,
                                             projProposalJour.InvoiceAccount));
                }

                projProposalJour.delete();

                ret = false;
            }
        }

        if (ret && projProposalJour && !projProposalJour.ProjGroupId)
        {
            ttsbegin;
            projProposalJour.selectForUpdate(true);
            projProposalJour.ProjGroupId = projTableLocal.ProjGroupId;
            projProposalJour.update();
            ttscommit;
        }

        this.addProposalToList(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProposalToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the proposal to the list.
    /// </summary>
    /// <param name = "_shouldAdd">
    ///     A boolean flag to consider whether proposal to be added to the list.
    /// </param>
    protected void addProposalToList(boolean _shouldAdd)
    {
        if (_shouldAdd)
        {
            proposalIdList.addEnd(projProposalJour.ProposalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalJour_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>ProjProposalJour</c> records
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    ///     Table map of project transactions
    /// </param>

    protected void setProjProposalJour_BR(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        if (!projInvoiceProposalSplit_BR)
        {
            projInvoiceProposalSplit_BR = new ProjInvoiceProposalSplitPSA_BR(null, projInvoiceType);

            if (projProposalJourExtern.RecId)
            {
                projInvoiceProposalSplit_BR.setCurrentProjProposalJour(projProposalJourExtern);
            }
        }

        projInvoiceProposalSplit_BR.parmInvoiceDate(projInvoiceProposalCreateLines.parmProposalCreateLinesParams().parmInvoiceDate());

        projInvoiceProposalSplit_BR.parmProjInvoiceTable(ProjInvoiceTable::find(_tmpProjProposalTrans.ProjInvoiceProjId));

        isProjInvoiceNetPrice   = projInvoiceProposalSplit_BR.parmProjInvoiceTable().ProjInvoiceNetPrice_BR;

        projProposalJour = projInvoiceProposalSplit_BR.doSplit(_tmpProjProposalTrans, '', 0);

        this.addProposalToList(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalProj</Name>
				<Source><![CDATA[
    private void setProjProposalProj(ProjInvoiceProjId      _projInvoiceProjId,
                                ProjId                 _projId,
                                ProjFundingSourceRefId _projFundingRefId,
                                boolean                _isPreBillAlloc)

    {
        PSAProjProposalProj    psaProjProposalProj;

        if (!ProjProposalJour::psaIsCTLNChecked(projProposalJour.ProposalId))
        {
            select psaProjProposalProj
                where psaProjProposalProj.ProjId           == _projId
                    && psaProjProposalProj.ProjProposalId  == projProposalJour.ProposalId
                    && psaProjProposalProj.IsPreBill       == _isPreBillAlloc;
        }
        else
        {
            select psaProjProposalProj
                where  psaProjProposalProj.ProjId           == _projId
                    && psaProjProposalProj.ProjProposalId   == projProposalJour.ProposalId
                    && psaProjProposalProj.ContractLineNum  == tmpProjProposalTrans.ContractLineNum
                    && psaProjProposalProj.IsPreBill       == _isPreBillAlloc;
        }

        if (!psaProjProposalProj)
        {
            psaProjProposalProj.ProjId          = _projId;
            psaProjProposalProj.ProjProposalId  = projProposalJour.ProposalId;
            psaProjProposalProj.ContractLineNum = tmpProjProposalTrans.ContractLineNum;
            psaProjProposalProj.FundingSource   = _projFundingRefId;
            psaProjProposalProj.IsPreBill       = _isPreBillAlloc;
            psaProjProposalProj.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalTotalsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ProjProposalTotalsParameters</c>.
    /// </summary>
    /// <param name = "_projProposalJour">
    /// A <c>ProjProposalJour</c> record buffer.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjProposalTotalsParameters</c> class.
    /// </returns>
    protected ProjProposalTotalsParameters createProjProposalTotalsParameters(ProjProposalJour _projProposalJour)
    {
        return ProjProposalTotalsParameters::construct(_projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTotal</Name>
				<Source><![CDATA[
    private void updateInvoiceTotal()
    {
        #define.ProjInvoiceProposalDetail("ProjInvoiceProposalDetail")
        ListEnumerator          le          = proposalIdList.getEnumerator();
        SysInfoAction_Formrun   infoAction;
        ProjProposalJour        projProposalJourLocal;

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalInsertLines, updateInvoiceTotal)))
        {
            int invoiceProposalIdListCount = 0;

            while (le.moveNext())
            {
                invoiceProposalIdListCount++;

                projProposalJourLocal = ProjProposalJour::find(le.current(), true);

                ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
                this.createProjProposalTotalsParameters(projProposalJourLocal));

                if (projProposalJourLocal.ProposalId && this.parmShowMessages())
                {
                    infoAction = SysInfoAction_Formrun::newFormname(#ProjInvoiceProposalDetail);

                    infoAction.parmCallerBuffer(projProposalJourLocal);

                    if (projProposalJourLocal.InvoiceAmount < 0)
                    {
                        info(strFmt("@SYS91513", projProposalJourLocal.ProposalId, projProposalJourLocal.ProjInvoiceProjId, projProposalJourLocal.CurrencyId), '', infoAction);
                    }
                    else
                    {
                        // <GBR>
                        // Debit note feature info log.
                        if (BrazilParameters::isEnabled())
                        {
                            if (projProposalJourLocal.InvoiceType == ProjInvoiceType::DebitNote_BR)
                            {
                                info(strFmt("@GLS3800166", projProposalJourLocal.ProposalId, projProposalJourLocal.ProjInvoiceProjId, projProposalJourLocal.CurrencyId), '', infoAction);
                            }
                            else
                            {
                                info(strFmt("@SYS66077", projProposalJourLocal.ProposalId, projProposalJourLocal.ProjInvoiceProjId, projProposalJourLocal.CurrencyId), '', infoAction);
                            }
                        }
                        else
                        {
                            // </GBR>
                            info(strFmt("@SYS66077", projProposalJourLocal.ProposalId, projProposalJourLocal.ProjInvoiceProjId, projProposalJourLocal.CurrencyId), '', infoAction);
                            // <GBR>
                        }
                        // </GBR>
                    }
                }
            }

            activityContext.addCustomProperty('invoiceProposalIdListCount', any2Str(invoiceProposalIdListCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetainage</Name>
				<Source><![CDATA[
    private void updateRetainage(ProjProposalId _projProposalId)
    {
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        PSAProjProposalProj         projProposalProjLoc;

        select RecId, ProposalId, psaContractLineNum, IsReleased from projProposalRevenue
            where projProposalRevenue.ProposalId == _projProposalId;

        if (projProposalRevenue)
        {
            select forupdate RecId, ProjId, ProjProposalId, ContractLineNum, InvoicedNow from projProposalProjLoc
                where projProposalProjLoc.ProjProposalId == _projProposalId;

            if (projProposalProjLoc)
            {
                select sum(AmountCur) from projProposalRevenueDetail
                    join RecId from projProposalRevenue
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                            && projProposalRevenue.ProposalId == projProposalProjLoc.ProjProposalId
                            && projProposalRevenue.psaContractLineNum == projProposalProjLoc.ContractLineNum
                            && projProposalRevenue.IsReleased == NoYes::Yes;

                if (projProposalRevenueDetail)
                {
                    projProposalProjLoc.ReleasedAmount   = projProposalRevenueDetail.AmountCur;

                    projProposalProjLoc.InvoicedNow -= projProposalProjLoc.ReleasedAmount;

                    projProposalProjLoc.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProjProposalJourTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates project proposal totals.
    /// </summary>
    /// <param name = "_parameters">
    ///  A <c>ProjProposalTotalsParameters</c> object.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalJour</c> record buffer.
    /// </returns>
    protected static ProjProposalJour calculateProjProposalJourTotals(ProjProposalTotalsParameters _parameters)
    {
        ProjProposalJour projProposalProjLoc = ProjProposalJour::find(_parameters.parmProjProposalId(), true);

        ProjInvoiceProposalInsertLines::copyTaxAsOriginalInvoiceForCreditNote(projProposalProjLoc);

        ProjProposalTotals projProposalTotals = new ProjProposalTotals(projProposalProjLoc);
        projProposalTotals.calc();

        projProposalProjLoc.initFromProjProposalTotals(projProposalTotals);
        
        return projProposalProjLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxAsOriginalInvoiceForCreditNote</Name>
				<Source><![CDATA[
    private static void copyTaxAsOriginalInvoiceForCreditNote(ProjProposalJour _projProposalJour)
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(staticMethodStr(ProjInvoiceProposalInsertLines, copyTaxAsOriginalInvoiceForCreditNote)))
        {
            int copyTaxDocumentFromOriginalInvoiceCallCount = 0;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                ProjProposalEmpl projProposalEmpl;
                ProjProposalEmplDetail projProposalEmplDetail;
                ProjEmplTransSale projEmplTransSale;
                while select * from projProposalEmpl
                where projProposalEmpl.ProposalId == _projProposalJour.ProposalId
                    join projProposalEmplDetail
                        where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                    join projEmplTransSale
                        where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                            && projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            && projEmplTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes
                {
                    copyTaxDocumentFromOriginalInvoiceCallCount++;
                    projProposalEmpl.copyTaxDocumentFromOriginalInvoice();
                }

                ProjProposalOnAcc projProposalOnAcc;
                ProjProposalOnAccDetail projProposalOnAccDetail;
                ProjOnAccTransSale projOnAccTransSale;
                while select * from projProposalOnAcc
                where projProposalOnAcc.ProposalId == _projProposalJour.ProposalId
                    join projProposalOnAccDetail
                        where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                    join projOnAccTransSale
                        where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                            && projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            && projOnAccTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes
                {
                    copyTaxDocumentFromOriginalInvoiceCallCount++;
                    projProposalOnAcc.copyTaxDocumentFromOriginalInvoice();
                }

                ProjProposalCost projProposalCost;
                ProjProposalCostDetail projProposalCostDetail;
                ProjCostTransSale projCostTransSale;

                while select * from projProposalCost
                where projProposalCost.ProposalId == _projProposalJour.ProposalId
                    join projProposalCostDetail
                        where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                    join projCostTransSale
                        where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                            && projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            && projCostTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes
                {
                    copyTaxDocumentFromOriginalInvoiceCallCount++;
                    projProposalCost.copyTaxDocumentFromOriginalInvoice();
                }

                ProjProposalItem projProposalItem;
                ProjProposalItemDetail projProposalItemDetail;
                ProjItemTransSale projItemTransSale;
                while select * from projProposalItem
                where projProposalItem.ProposalId == _projProposalJour.ProposalId
                    join projProposalItemDetail
                        where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                    join projItemTransSale
                        where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                            && projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            && projItemTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes
                {
                    copyTaxDocumentFromOriginalInvoiceCallCount++;
                    projProposalItem.copyTaxDocumentFromOriginalInvoice();
                }

                ProjProposalRevenue projProposalRevenue;
                ProjProposalRevenueDetail projProposalRevenueDetail;
                ProjRevenueTransSale projRevenueTransSale;
                while select * from projProposalRevenue
                where projProposalRevenue.ProposalId == _projProposalJour.ProposalId
                    join projProposalRevenueDetail
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                    join projRevenueTransSale
                        where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                            && projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            && projRevenueTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes
                {
                    copyTaxDocumentFromOriginalInvoiceCallCount++;
                    projProposalRevenue.copyTaxDocumentFromOriginalInvoice();
                }
            }

            activityContext.addCustomProperty('copyTaxDocumentFromOriginalInvoiceCallCount', any2Str(copyTaxDocumentFromOriginalInvoiceCallCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalTotalsFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and updates totals of a project invoice proposal.
    /// </summary>
    /// <param name="_parameters">
    /// A <c>ProjProposalTotalsParameters</c> object.
    /// </param>
    public static void setProjProposalTotalsFromParameters(ProjProposalTotalsParameters _parameters)
    {
        ProjProposalTotals    projProposalTotals;
        ProjProposalJour      projProposalJour;

        PSAProjProposalProj     projProposalProj;
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjProposalOnAcc       projProposalOnAcc;

        void initAmounts()
        {
            projProposalProj.CostCostMst                = 0;
            projProposalProj.TotalCostMst               = 0;
            projProposalProj.CostRevenueMst             = 0;
            projProposalProj.TotalRevenueMst            = 0;
            projProposalProj.HourQty                    = 0;
            projProposalProj.HourCostMst                = 0;
            projProposalProj.TotalCostMst               = 0;
            projProposalProj.HourRevenueMst             = 0;
            projProposalProj.TotalRevenueMst            = 0;
            projProposalProj.RevenueRevenueMst          = 0;
            projProposalProj.TotalRevenueMst            = 0;
            projProposalProj.Invoiced                   = 0;
            projProposalProj.InvoicedCost               = 0;
            projProposalProj.InvoicedCV                 = 0;
            projProposalProj.InvoicedNowLeadRetainage   = 0;
            projProposalProj.InvoicedNow                = 0;
            projProposalProj.InvoicedNowCost            = 0;
        }

        void updatePrebill()
        {
            select firstonly RecId from projProposalOnAcc
                where projProposalOnAcc.ProposalId == projProposalProj.ProjProposalId
                    join sum(Amount) from projOnAccTransSale
                        where projOnAccTransSale.FundingSource == projProposalProj.FundingSource
                            && projOnAccTransSale.TransId == projProposalOnAcc.TransId
                    join RecId from projOnAccTrans
                        where projOnAccTrans.TransId == projProposalOnAcc.TransId
                            && projOnAccTrans.ProjID == projProposalProj.ProjId
                            && projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction;

            if (projOnAccTransSale.Amount)
            {
                projProposalProj.InvoicedNow += projOnAccTransSale.Amount;
            }
        }

        /// <summary>
        /// Calculates retained amount.
        /// </summary>
        /// <param name="_currencyId">
        /// Currency code value.
        /// </param>
        void reCalcRetainedAmount(ProjSalesCurrencyCode  _currencyId)
        {
            Amount  invoiceAmount           = projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj);
            projProposalProj.RetainedNow    = CurrencyExchangeHelper::amount(invoiceAmount * projProposalProj.RetainedPercent / 100,
                                                                             _currencyId);
        }

        /// <summary>
        /// Calculates released amount.
        /// </summary>
        void reCalcReleasedAmount()
        {
            ProjProposalRevenue         projProposalRevenue;
            ProjProposalRevenueDetail   projProposalRevenueDetail;

            select sum(AmountCur) from projProposalRevenueDetail
                join RecId, ProposalId, IsReleased, PSAContractLineNum from projProposalRevenue
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                                && projProposalRevenue.ProposalId == projProposalProj.ProjProposalId
                                && projProposalRevenue.PSAContractLineNum == projProposalProj.ContractLineNum
                                && projProposalRevenue.IsReleased == NoYes::Yes;

            if (projProposalRevenueDetail)
            {
                projProposalProj.ReleasedAmount   = projProposalRevenueDetail.AmountCur;
            }
            else if (projProposalProj.ReleasedAmount)
            {
                projProposalProj.ReleasedAmount   = 0;
            }
        }

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(staticMethodStr(ProjInvoiceProposalInsertLines, setProjProposalTotalsFromParameters)))
        {
            int projProposalProjCount = 0;

            if (_parameters.parmProjProposalId())
            {
                ttsbegin;
                projProposalJour = ProjInvoiceProposalInsertLines::calculateProjProposalJourTotals(_parameters);

                projProposalJour.calcDue();
                projProposalJour.calcCashDiscDate();
                projProposalJour.update();

                // update totals per project
                if (ProjProposalJour::psaIsCTLNChecked(projProposalJour.ProposalId))
                {
                    while select forupdate projProposalProj
                    where projProposalProj.ProjProposalId  == projProposalJour.ProposalId
                    {
                        projProposalProjCount++;

                        initAmounts();

                        if (projProposalProj.IsPreBill)
                        {
                            updatePrebill();
                        }
                        else if (projProposalProj.ContractLineNum)
                        {
                            projProposalProj = PSAProjectTotals::updateProjProposalContLine(projProposalProj.ContractLineNum, projProposalJour, projProposalProj);
                        }
                        else
                        {
                            projProposalProj = PSAProjectTotals::updateProjProposalProj(projProposalJour.InvoiceDate,ProjTable::find(projProposalProj.ProjId), projProposalJour, projProposalProj);
                        }

                        if (_parameters.parmReCalcRetainedAmount() && projProposalProj.RetainedPercent)
                        {
                            reCalcRetainedAmount(projProposalJour.CurrencyId);
                        }

                        if (_parameters.parmReCalcReleaseAmount())
                        {
                            reCalcReleasedAmount();
                        }

                        projProposalProj.update();
                    }
                }
                else
                {
                    while select forupdate projProposalProj
                    where projProposalProj.ProjProposalId  == projProposalJour.ProposalId
                    {
                        projProposalProjCount++;

                        //making the changes here to avoid overlayering issues, should be merged once we merge the layers.
                        initAmounts();

                        if (projProposalProj.IsPreBill)
                        {
                            updatePrebill();
                        }
                        else
                        {
                            projProposalProj = PSAProjectTotals::updateProjProposalProj(projProposalJour.InvoiceDate,ProjTable::find(projProposalProj.ProjId), projProposalJour, projProposalProj);
                        }

                        if (_parameters.parmReCalcRetainedAmount() && projProposalProj.RetainedPercent)
                        {
                            reCalcRetainedAmount(projProposalJour.CurrencyId);
                        }

                        if (_parameters.parmReCalcReleaseAmount())
                        {
                            reCalcReleasedAmount();
                        }

                        projProposalProj.update();
                    }
                }

                ttscommit;
            }

            activityContext.addCustomProperty('projProposalProjCount', any2Str(projProposalProjCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and updates totals of a project invoice proposal.
    /// </summary>
    /// <param name="_projProposalId">
    /// Proposal ID of the proposal for which totals are to be calculated.
    /// </param>
    /// <param name="_reCalcRetainedAmount">
    /// Decides whether to re-calculate customer retained amount on the invoice proposal.
    /// </param>
    /// <param name="_reCalcReleaseAmount">
    /// Decides whether to re-calculate customer release amount on the invoice proposal.
    /// </param>
    [SysObsolete("This method is obsolete. Use setProjProposalTotalsFromParameters instead.", false, 27\08\2018)]
    public static void setProjProposalTotals(ProjProposalId _projProposalId,
                                                    boolean        _reCalcRetainedAmount = false,
                                                    boolean        _reCalcReleaseAmount  = false)
    {
        ProjInvoiceProposalInsertLines::setProjProposalTotalsFromParameters(
            ProjProposalTotalsParameters::construct(projProposalJour::find(_projProposalId), _reCalcRetainedAmount, _reCalcReleaseAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEInvoiceData_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fields related to E-Invoice on <c>ProjProposalJour</c> table for Norway.
    /// </summary>
    private void updateEInvoiceData_NO()
    {
        #isoCountryRegionCodes

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            return;
        }

        ListEnumerator le = proposalIdList.getEnumerator();

        while (le.moveNext())
        {
            ProjProposalJour projProposalJourLocal = ProjProposalJour::find(le.current(), true);

            if (CustTable::isCustPublic_NO(projProposalJourLocal.InvoiceAccount))
            {
                projProposalJourLocal.initEInvoiceDataFromLines_NO();
                projProposalJourLocal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DimensionDefault</c> of the selected record.
    /// </summary>
    /// <param name="_defaultDimension">A <c>DimensionDefault</c> value.</param>
    /// <returns>Returns <c>DimensionDefault</c></returns>
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractLineNum</Name>
				<Source><![CDATA[
    private PSAContractLineNum parmContractLineNum(PSAContractLineNum _contractLineNum = contractLineNum)
    {
        contractLineNum = _contractLineNum;
        return contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjInvoiceId</c> of the transaction.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID of buffer table.
    /// </param>
    /// <param name="_recId">
    /// Record ID.
    /// </param>
    /// <returns>
    /// The invoice ID of the transaction.
    /// </returns>
    private ProjInvoiceId getProjInvoiceId(RefTableId _tableId, RefRecId _recId)
    {
        ProjInvoiceId projInvoiceId;
        switch (_tableId)
        {
            case tableNum(ProjEmplTransSale) :
                ProjInvoiceEmpl projInvoiceEmpl;
                ProjInvoiceEmplDetail projInvoiceEmplDetail;

                select firstonly ProjInvoiceId from projInvoiceEmpl
                    exists join projInvoiceEmplDetail
                        where projInvoiceEmpl.RecId == projInvoiceEmplDetail.InvoiceRefRecId
                            && projInvoiceEmplDetail.SaleRefRecId == _recId;
                projInvoiceId = projInvoiceEmpl.ProjInvoiceId;
                break;
            
            case tableNum(ProjCostTransSale) :
                ProjInvoiceCost projInvoiceCost;
                ProjInvoiceCostDetail projInvoiceCostDetail;

                select firstonly ProjInvoiceId from projInvoiceCost
                    exists join projInvoiceCostDetail
                        where projInvoiceCost.RecId == projInvoiceCostDetail.InvoiceRefRecId
                            && projInvoiceCostDetail.SaleRefRecId == _recId;
                projInvoiceId = projInvoiceCost.ProjInvoiceId;
                break;

            case tableNum(ProjItemTransSale) :
                ProjInvoiceItem projInvoiceItem;
                ProjInvoiceItemDetail projInvoiceItemDetail;

                select firstonly ProjInvoiceId from projInvoiceItem
                    exists join projInvoiceItemDetail
                        where projInvoiceItem.RecId == projInvoiceItemDetail.InvoiceRefRecId
                            && projInvoiceItemDetail.SaleRefRecId == _recId;
                projInvoiceId = projInvoiceItem.ProjInvoiceId;
                break;

            case tableNum(ProjOnAccTransSale)  :
                ProjInvoiceOnAcc projInvoiceOnAcc;
                ProjInvoiceOnAccDetail projInvoiceOnAccDetail;

                select firstonly ProjInvoiceId from projInvoiceOnAcc
                    exists join projInvoiceOnAccDetail
                        where projInvoiceOnAcc.RecId == projInvoiceOnAccDetail.InvoiceRefRecId
                            && projInvoiceOnAccDetail.SaleRefRecId == _recId;
                projInvoiceId = projInvoiceOnAcc.ProjInvoiceId;
                break;

            case tableNum(ProjRevenueTransSale) :
                ProjInvoiceRevenue projInvoiceRevenue;
                ProjInvoiceRevenueDetail projInvoiceRevenueDetail;

                select firstonly ProjInvoiceId from projInvoiceRevenue
                    exists join projInvoiceRevenueDetail
                        where projInvoiceRevenue.RecId == projInvoiceRevenueDetail.InvoiceRefRecId
                            && projInvoiceRevenueDetail.SaleRefRecId == _recId;
                projInvoiceId = projInvoiceRevenue.ProjInvoiceId;
                break;

            default:
                break;
        }

        return projInvoiceId;
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>