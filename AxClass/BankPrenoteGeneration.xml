<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPrenoteGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPrenoteGeneration</c> class generates customer and vendor prenotes.
/// </summary>
public class BankPrenoteGeneration extends BankPrenoteBase
{
    private DialogField dialogCust;
    private DialogField dialogVend;
    private DialogField dialogReasonCode;
    private DialogGroup dialogGroup;

    #DEFINE.dialogPrenoteFieldNo(900)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds fields to the bank prenotes dialog.
    /// </summary>
    /// <returns>
    /// A <c>DialogRunBase</c> instance.
    /// </returns>
    public Object dialog()
    {
        Set enumSet = new Set(Types::Enum);

        dialog = super();

        dialogGroup = dialog.addGroup('');
        dialogGroup.columns(2);
        dialogGroup.frameType(FormFrameType::None);

        dialogType = new DialogField(dialog, enumStr(PrenoteAccountType), #dialogPrenoteFieldNo);
        dialog.addCtrlDialogField(dialogType.name());
        dialogType.init(dialog);
        dialogType.label("@SYS111239");
        dialogType.helpText("@SYS128487");
        dialogType.value();

        enumSet.add(PrenoteAccountType::All);
        enumSet.add(PrenoteAccountType::AllCustomers);
        enumSet.add(PrenoteAccountType::AllVendors);
        enumSet.add(PrenoteAccountType::Customers);
        enumSet.add(PrenoteAccountType::Vendors);

        dialogCust = dialog.addField(extendedTypeStr(CustAccount), "@SYS24500", "@SYS128526");
        dialogCust.fieldControl().enabled(false);
        dialogCust.visible(false);

        dialogVend = dialog.addField(extendedTypeStr(VendAccount), "@SYS24500", "@SYS128526");
        dialogVend.fieldControl().enabled(false);
        dialogVend.visible(false);

        dialogEnumComboBox = DialogEnumComboBox::newParameters(null, dialogType.control().id(), enumNum(PrenoteAccountType), enumSet, dialog.form());

        this.addEffectiveEntryDateToDialog(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a <c>FormRun</c> object of the dialog on the enumeration combobox and selects an item in it.
    /// </summary>
    /// <param name="_dialog">
    /// An instance of <c>DialogRunbase</c> dialog.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(dialog);

        if (dialogEnumComboBox)
        {
            // Specify the formRun (at this point the formRun is already available)
            // This is needed to track selection in the comboBox
            dialogEnumComboBox.parmFormRun(dialog.dialogForm().formRun());

            // Select a specific entry in the comboBox, if needed
            dialogEnumComboBox.select(PrenoteAccountType::All);
            if (this.parmArgs().record())
            {
                bankAccountTable = this.parmArgs().record();
                dialogCompanyBankAccount.value(bankAccountTable.AccountID);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Empty implementation of an abstract method of the base class.
    /// </summary>
    public void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_selectionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the account field on selection of the type field.
    /// </summary>
    private void fld900_1_selectionChange()
    {
        Object control;
        boolean valueWasModified;

        control = dialog.formRun().controlCallingMethod();
        valueWasModified = control.modified();

        if (valueWasModified)
        {
            if (dialogType.value() == 0)
            {
                dialogCust.fieldControl().enabled(false);
                dialogCust.visible(false);
                dialogVend.fieldControl().enabled(false);
                dialogVend.visible(false);
            }
            else if (dialogType.value() == 1)
            {
                dialogCust.fieldControl().enabled(false);
                dialogCust.visible(true);
                dialogVend.fieldControl().enabled(false);
                dialogVend.visible(false);
            }
            else if (dialogType.value() == 2)
            {
                dialogCust.fieldControl().enabled(false);
                dialogCust.visible(false);
                dialogVend.fieldControl().enabled(false);
                dialogVend.visible(true);
            }
            else if (dialogType.value() == 3)
            {
                dialogCust.fieldControl().enabled(true);
                dialogCust.visible(true);
                dialogVend.fieldControl().enabled(false);
                dialogVend.visible(false);
            }
            else if (dialogType.value() == 4)
            {
                dialogCust.fieldControl().enabled(false);
                dialogCust.visible(false);
                dialogVend.fieldControl().enabled(true);
                dialogVend.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fields from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dialogEnumComboBox)
        {
            prenoteAccountType = dialogEnumComboBox.selection();

            if (prenoteAccountType == PrenoteAccountType::Customers)
            {
                accountNum = dialogCust.value();
            }
            else if (prenoteAccountType == PrenoteAccountType::Vendors)
            {
                accountNum = dialogVend.value();
            }
            else
            {
                accountNum = '';
            }
        }

        effectiveEntryDate = dialogEffectiveEntryDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates prenotes that qualify the selection on the dialog.
    /// </summary>
    public void run()
    {
        BankPrenoteBase preNote;

        if (prenoteAccountType == PrenoteAccountType::Vendors
            || prenoteAccountType == PrenoteAccountType::AllVendors
            || prenoteAccountType == PrenoteAccountType::All)
        {
            preNote = BankPrenoteBase::construct(PrenoteTypes::AP);
            preNote.parmPrenoteFilename(prenoteFilename);
            preNote.parmPrenoteFile(prenoteFile);
            preNote.parmCompanyBankAccount(companyBankAccount);
            preNote.parmPrenoteExportFormats(prenoteExportFormats);
            preNote.parmPrenoteAccountType(prenoteAccountType);
            preNote.parmAccountNum(accountNum);
            preNote.parmEffectiveEntryDate(effectiveEntryDate);
            preNote.parmIsSendingFileToUser(false);
            preNote.runOperation();

            prenoteFile = preNote.parmPrenoteFile();
        }

        if (prenoteAccountType == PrenoteAccountType::Customers
            || prenoteAccountType == PrenoteAccountType::AllCustomers
            || prenoteAccountType == PrenoteAccountType::All)
        {
            preNote = BankPrenoteBase::construct(PrenoteTypes::AR);
            preNote.parmPrenoteFilename(prenoteFilename);
            preNote.parmPrenoteFile(prenoteFile);
            preNote.parmCompanyBankAccount(companyBankAccount);
            preNote.parmPrenoteExportFormats(prenoteExportFormats);
            preNote.parmPrenoteAccountType(prenoteAccountType);
            preNote.parmAccountNum(accountNum);
            preNote.parmEffectiveEntryDate(effectiveEntryDate);
            preNote.parmIsSendingFileToUser(false);
            preNote.runOperation();

            prenoteFile = preNote.parmPrenoteFile();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the combination of account type and account number.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object which calls this method.
    /// </param>
    /// <returns>
    /// true if the combination of account type and account number is valid; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid;

        isValid = super(_calledFrom);

        if (!this.validateAccount())
        {
            isValid = checkFailed(strFmt("@SYS116347", "@SYS24500"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the combination of account type and account number.
    /// </summary>
    /// <returns>
    /// true if the combination of account type and account number is valid; otherwise, false.
    /// </returns>
    private boolean validateAccount()
    {
        boolean isValid = true;

        if ((prenoteAccountType == PrenoteAccountType::Customers || prenoteAccountType == PrenoteAccountType::Vendors) && accountNum == '')
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS128497";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankPrenoteGeneration bankPrenoteGeneration;

        bankPrenoteGeneration = BankPrenoteBase::construct(_args.parmEnum());
        bankPrenoteGeneration.parmArgs(_args);

        if (bankPrenoteGeneration.prompt())
        {
            bankPrenoteGeneration.runOperation();

            bankPrenoteGeneration.sendFileToUser();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>