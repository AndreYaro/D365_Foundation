<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalDocumentTaxSummarizer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///      The <c>FBFiscalDocumentTaxSummarizer_BR</c> class summarizes tax information from a fiscal document.
/// </summary>
class FBFiscalDocumentTaxSummarizer_BR
{
    FiscalDocument_BR   fiscalDocument;
    List                listOfSummaryData;
    Map                 mapOfTaxTransByLine;
    Map                 mapOfLinesByGroupingCriteria;
    private boolean     printTaxValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocTaxAmountWithNonRecoverableAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the fiscal document tax amount (including the non recoverable amount) for the specified tax type.
    /// </summary>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> representing the type of the tax.
    /// </param>
    /// <returns>
    ///     The tax amount of the specified tax type occuring in the fiscal document.
    ///     In case of direct import, the total tax amount will also include the tax non recoverable amount.
    /// </returns>
    public TaxAmount getDocTaxAmountWithNonRecoverableAmount(TaxType_BR _taxType)
    {
        MapEnumerator               me;
        List                        listOfTaxTransByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   taxTransTotalsByLine;
        TaxAmount                   taxAmount;

        me = mapOfTaxTransByLine.getEnumerator();
        while (me.moveNext())
        {
            listOfTaxTransByLine = me.currentValue();
            if (listOfTaxTransByLine is List)
            {
                le = listOfTaxTransByLine.getEnumerator();
                while (le.moveNext())
                {
                    taxTransTotalsByLine = le.current();
                    if (taxTransTotalsByLine)
                    {
                        if (taxTransTotalsByLine.parmTaxType() == _taxType)
                        {
                            taxAmount += taxTransTotalsByLine.parmTaxAmount() + taxTransTotalsByLine.parmTaxAmountOther();
                        }
                    }
                }
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether there exists at least one tax transaction of the specified type for the fiscal document.
    /// </summary>
    /// <param name="_taxType">
    ///     The enum <c>TaxType_BR</c> representing the type of the tax transaction.
    /// </param>
    /// <returns>
    ///     True of there exists at least one tax transacion of the specified type; false otherwise.
    /// </returns>
    public boolean existsTaxType(TaxType_BR _taxType)
    {
        MapEnumerator               me;
        List                        listOfTaxTransByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   taxTransTotalsByLine;

        me = mapOfTaxTransByLine.getEnumerator();
        while (me.moveNext())
        {
            listOfTaxTransByLine = me.currentValue();
            if (listOfTaxTransByLine is List)
            {
                le = listOfTaxTransByLine.getEnumerator();
                while (le.moveNext())
                {
                    taxTransTotalsByLine = le.current();
                    if (taxTransTotalsByLine)
                    {
                        if (taxTransTotalsByLine.parmTaxType() == _taxType)
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the accounting amount of the given fiscal document line.
    /// </summary>
    /// <param name="_lineBuffer">
    ///     A table buffer representing the fiscal document line.
    /// </param>
    /// <returns>
    ///     The accounting amount of the fiscal document line.
    /// </returns>
    protected LineAmount getAccountingAmount(Common _lineBuffer)
    {
        FiscalDocumentLine_BR fiscalDocumentLine = _lineBuffer;

        return fiscalDocumentLine.AccountingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the fiscal document tax amount for the specified tax type.
    /// </summary>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> representing the type of the tax.
    /// </param>
    /// <returns>
    ///     The tax amount of the specified tax type occuring in the fiscal document.
    /// </returns>
    public TaxAmount getDocumentTaxAmount(TaxType_BR _taxType)
    {
        MapEnumerator               me;
        List                        listOfTaxTransByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   taxTransTotalsByLine;
        TaxAmount                   taxAmount;

        me = mapOfTaxTransByLine.getEnumerator();
        while (me.moveNext())
        {
            listOfTaxTransByLine = me.currentValue();
            if (listOfTaxTransByLine is List)
            {
                le = listOfTaxTransByLine.getEnumerator();
                while (le.moveNext())
                {
                    taxTransTotalsByLine = le.current();
                    if (taxTransTotalsByLine)
                    {
                        if (taxTransTotalsByLine.parmTaxType() == _taxType)
                        {
                            taxAmount += taxTransTotalsByLine.parmTaxAmount();
                        }
                    }
                }
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the fiscal document tax base amount for the specified tax type.
    /// </summary>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> representing the type of the tax.
    /// </param>
    /// <returns>
    ///     The tax base amount of the specified tax type occuring in the fiscal document.
    /// </returns>
    public TaxBaseCur getDocumentTaxBaseAmount(TaxType_BR _taxType)
    {
        MapEnumerator               me;
        List                        listOfTaxTransByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   taxTransTotalsByLine;
        TaxBase                     taxBaseAmount;

        me = mapOfTaxTransByLine.getEnumerator();
        while (me.moveNext())
        {
            listOfTaxTransByLine = me.currentValue();
            if (listOfTaxTransByLine is List)
            {
                le = listOfTaxTransByLine.getEnumerator();
                while (le.moveNext())
                {
                    taxTransTotalsByLine = le.current();
                    if (taxTransTotalsByLine)
                    {
                        if (taxTransTotalsByLine.parmTaxType() == _taxType)
                        {
                            taxBaseAmount += taxTransTotalsByLine.parmTaxBaseAmount();
                        }
                    }
                }
            }
        }

        return taxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private str getKey(FITaxationOrigin_BR    _taxOrigin,
                         TaxationCode_BR        _taxationCode,
                         CFOPId_BR              _cfopId,
                         TaxValue               _taxValue,
                         TaxFiscalValue_BR      _taxFiscalValue)
    {
        // Key is formed by Origin (%1), TaxationCode (%2), CFOP (%3), Icms tax value (%4) and Icms fiscal value (%5)
        return strFmt("%1_%2_%3_%4_%5",
                       enum2int(_taxOrigin),
                       _taxationCode? _taxationCode : '0',
                       _cfopId,
                       num2str(_taxValue, 0, 2, DecimalSeparator::Dot, ThousandSeparator::None),
                       enum2int(_taxFiscalValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the summary of taxes for the fiscal document that contains ICMS in context.
    /// </summary>
    /// <returns>
    ///     A list of list of <c>FBFiscalDocumentTaxSummary_BR</c> objects representing the summary of taxes for the fiscal document in context.
    /// </returns>
    public List getListOfSummaryData()
    {
        return listOfSummaryData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransForLineByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an instance of class <c>FBTaxTransTotalsByLine_BR</c> containing the tax transaction totals for the given fiscal document line.
    /// </summary>
    /// <param name="_lineTableBuffer">
    ///     A table buffer representing the fiscal document line.
    /// </param>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> enum value representing the type of the tax that should be retrieved.
    /// </param>
    /// <returns>
    ///     An instance of <c>FBTaxTransTotalsByLine_BR</c> containing the tax transaction totals.
    /// </returns>
    public FBTaxTransTotalsByLine_BR getTaxTransForLineByType(Common _lineTableBuffer, TaxType_BR _taxType)
    {
        FiscalDocumentLine_BR       fiscalDocumentLine = _lineTableBuffer;
        List                        listOfTaxTransTotalsByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   eachTaxTransTotalsByLine, returnTaxTransTotalsByLine;

        returnTaxTransTotalsByLine = FBTaxTransTotalsByLine_BR::constructEmpty();

        listOfTaxTransTotalsByLine = mapOfTaxTransByLine.lookup(fiscalDocumentLine.RecId);

        if (listOfTaxTransTotalsByLine)
        {
            le = listOfTaxTransTotalsByLine.getEnumerator();

            while (le.moveNext())
            {
                eachTaxTransTotalsByLine = le.current();

                if (eachTaxTransTotalsByLine.parmTaxType() == _taxType)
                {
                    returnTaxTransTotalsByLine.parmTaxType              (eachTaxTransTotalsByLine.parmTaxType());
                    returnTaxTransTotalsByLine.parmTaxValue             (eachTaxTransTotalsByLine.parmTaxValue());
                    returnTaxTransTotalsByLine.parmTaxationCode         (eachTaxTransTotalsByLine.parmTaxationCode());
                    returnTaxTransTotalsByLine.parmFiscalValue          (eachTaxTransTotalsByLine.parmFiscalValue());

                    returnTaxTransTotalsByLine.parmTaxBaseAmount        (returnTaxTransTotalsByLine.parmTaxBaseAmount ()        + eachTaxTransTotalsByLine.parmTaxBaseAmount());
                    returnTaxTransTotalsByLine.parmTaxAmount            (returnTaxTransTotalsByLine.parmTaxAmount()             + eachTaxTransTotalsByLine.parmTaxAmount());
                    returnTaxTransTotalsByLine.parmTaxAmountOther       (returnTaxTransTotalsByLine.parmTaxAmountOther()        + eachTaxTransTotalsByLine.parmTaxAmountOther());
                    returnTaxTransTotalsByLine.parmTaxBaseAmountExempt  (returnTaxTransTotalsByLine.parmTaxBaseAmountExempt()   + eachTaxTransTotalsByLine.parmTaxBaseAmountExempt());
                }
            }
        }

        if (returnTaxTransTotalsByLine.parmFiscalValue() != TaxFiscalValue_BR::WithCreditDebit
            && !(printTaxValue
                && returnTaxTransTotalsByLine.parmTaxationCode() == FiscalBooksConstants_BR::TaxationCode05
                && (returnTaxTransTotalsByLine.parmTaxType() == TaxType_BR::PIS || returnTaxTransTotalsByLine.parmTaxType() == TaxType_BR::COFINS)))
        {
            returnTaxTransTotalsByLine.parmTaxValue(0);
        }

        return returnTaxTransTotalsByLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapOfTaxTransForLine</Name>
				<Source><![CDATA[
    private void initMapOfTaxTransForLine(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        RefRecId                    key = _fiscalDocumentLine.RecId;
        List                        listOfTaxTransTotalsByLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        if (mapOfTaxTransByLine.exists(key))
        {
            listOfTaxTransTotalsByLine = mapOfTaxTransByLine.lookup(key);
        }
        else
        {
            listOfTaxTransTotalsByLine = new List(Types::Class);
        }

        while select fiscalDocumentTaxTrans
            where fiscalDocumentTaxtrans.FiscalDocumentLine == key
        {
            listOfTaxTransTotalsByLine.addEnd(FBTaxTransTotalsByLine_BR::constructFromFiscalDocumentTaxTrans(fiscalDocumentTaxTrans));
        }

        mapOfTaxTransByLine.insert(key, listOfTaxTransTotalsByLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>FBFiscalDocumentTaxSummarizer_BR</c> class.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    public void new(FiscalDocument_BR _fiscalDocument)
    {
        fiscalDocument                  = _fiscalDocument;
        listOfSummaryData               = new List(Types::Class);
        mapOfLinesByGroupingCriteria    = new Map(Types::String, Types::Class);
        mapOfTaxTransByLine             = new Map(Types::Int64, Types::Class);          // FiscalDocumentLine.RecId -> List<FBTaxTransTotalsByLine_BR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryData</Name>
				<Source><![CDATA[
    private void populateSummaryData()
    {
        MapEnumerator                   me;
        TaxationCode_BR                 taxationCode;
        str                             key;
        FBFiscalDocumentTaxSummary_BR   taxSummary;
        List                            listOfFiscalDocumentLines;
        ListEnumerator                  le;
        container                       keyMembers;  // Key is formed by Origin/TaxationCode/CFOP/Icms tax value
        Common                          line;
        FBTaxTransTotalsByLine_BR       taxTransIcms, taxTransIcmsSt, taxTransIcmsDiff, taxTransIpi;
        TaxAmount                       icmsTaxAmount, icmsStTaxAmount,icmsDiffTaxAmount, ipiTaxAmount;
        TaxBaseCur                      icmsTaxBaseAmount, icmsTaxBaseAmountExempt, icmsStTaxBaseAmount, icmsDiffTaxBaseAmount,ipiTaxBaseAmount;
        LineAmount                      accountingAmount;

        me = mapOfLinesByGroupingCriteria.getEnumerator();

        while (me.moveNext())
        {
            icmsTaxAmount           = 0;
            icmsDiffTaxAmount       = 0;
            icmsStTaxAmount         = 0;
            ipiTaxAmount            = 0;
            icmsTaxBaseAmount       = 0;
            icmsTaxBaseAmountExempt = 0;
            icmsDiffTaxBaseAmount   = 0;
            icmsStTaxBaseAmount     = 0;
            ipiTaxBaseAmount        = 0;
            accountingAmount        = 0;

            key         = me.currentKey();
            keyMembers  = str2con(key, '_');

            listOfFiscalDocumentLines = me.currentValue();

            if (!listOfFiscalDocumentLines)
            {
                continue;
            }

            le = listOfFiscalDocumentLines.getEnumerator();
            while (le.moveNext())
            {
                line = le.current();

                taxTransIcms    = this.getTaxTransForLineByType(line, TaxType_BR::ICMS);
                taxTransIcmsSt  = this.getTaxTransForLineByType(line, TaxType_BR::ICMSST);
                taxTransIcmsDiff = this.getTaxTransForLineByType(line, TaxType_BR::ICMSDiff);
                taxTransIpi     = this.getTaxTransForLineByType(line, TaxType_BR::IPI);

                icmsTaxAmount               += taxTransIcms.parmTaxAmount();
                icmsTaxBaseAmount           += taxTransIcms.parmTaxBaseAmount();
                icmsTaxBaseAmountExempt     += taxTransIcms.parmTaxBaseAmountExempt();

                icmsStTaxAmount             += taxTransIcmsSt.parmTaxAmount();
                icmsStTaxBaseAmount         += taxTransIcmsSt.parmTaxBaseAmount();

                icmsDiffTaxAmount           += taxTransIcmsDiff.parmTaxAmount();
                icmsDiffTaxBaseAmount       += taxTransIcmsDiff.parmTaxBaseAmount();

                ipiTaxAmount                += taxTransIpi.parmTaxAmount();

                accountingAmount            += this.getAccountingAmount(line);
            }

            taxSummary = new FBFiscalDocumentTaxSummary_BR();

            taxationCode = strFmt("%1", conPeek(keyMembers, 2));

            taxSummary.parmICMSCST              (strFmt("%1%2", conPeek(keyMembers, 1), taxationCode == '0' ? '00' : taxationCode));
            taxSummary.parmCFOP                 (conPeek(keyMembers, 3));
            taxSummary.parmIcmsTaxValue         (str2num(conPeek(keyMembers, 4)));
            taxSummary.parmIcmsBaseAmount       (icmsTaxBaseAmount);
            taxSummary.parmIcmsAmount           (icmsTaxAmount);
            taxSummary.parmIcmsStBaseAmount     (icmsStTaxBaseAmount);
            taxSummary.parmIcmsStAmount         (icmsStTaxAmount);
            taxSummary.parmIcmsDiffBaseAmount   (icmsDiffTaxBaseAmount);
            taxSummary.parmIcmsDiffAmount       (icmsDiffTaxAmount);
            taxSummary.parmIpiAmount            (ipiTaxAmount);
            taxSummary.parmOperationAmount      (accountingAmount);
            taxSummary.parmIcmsFiscalValue      (conPeek(keyMembers, 5));

            if (taxSummary.parmIcmsFiscalValue() == TaxFiscalValue_BR::WithoutCreditDebitExempt)
            {
                taxSummary.parmIcmsBaseAmountExempt     (icmsTaxBaseAmountExempt);
                taxSummary.parmIcmsBaseReductionAmount  (0);
            }
            else
            {
                taxSummary.parmIcmsBaseAmountExempt     (0);
                taxSummary.parmIcmsBaseReductionAmount  (icmsTaxBaseAmountExempt);
            }

            listOfSummaryData.addEnd(taxSummary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>separateLinesByGroupingCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements the appropriate logic to populate the map of fiscal document lines.
    /// </summary>
    protected void separateLinesByGroupingCriteria()
    {
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FBTaxTransTotalsByLine_BR   taxTransTotalByLine;
        List                        listOfFiscalDocumentLines;
        str                         key;

        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        {
            this.initMapOfTaxTransForLine(fiscalDocumentLine);

            taxTransTotalByLine = this.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::ICMS);

            if (taxTransTotalByLine.parmTaxationCode())
            {
                key = this.getKey(fiscalDocumentLine.Origin,
                                  taxTransTotalByLine.parmTaxationCode(),
                                  fiscalDocumentLine.CFOP,
                                  taxTransTotalByLine.parmTaxValue(),
                                  taxTransTotalByLine.parmFiscalValue());

                if (mapOfLinesByGroupingCriteria.exists(key))
                {
                    listOfFiscalDocumentLines = mapOfLinesByGroupingCriteria.lookup(key);
                }
                else
                {
                    listOfFiscalDocumentLines = new List(Types::Record);
                }

                listOfFiscalDocumentLines.addEnd(fiscalDocumentLine);

                mapOfLinesByGroupingCriteria.insert(key, listOfFiscalDocumentLines);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of class <c>FBFiscalDocumentTaxSummarizer_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBFiscalDocumentTaxSummarizer_BR</c> class.
    /// </returns>
    public static FBFiscalDocumentTaxSummarizer_BR construct(FiscalDocument_BR _fiscalDocument)
    {
        FBFiscalDocumentTaxSummarizer_BR fiscalDocumentTaxSummarizer = new FBFiscalDocumentTaxSummarizer_BR(_fiscalDocument);

        fiscalDocumentTaxSummarizer.separateLinesByGroupingCriteria();
        fiscalDocumentTaxSummarizer.populateSummaryData();

        return fiscalDocumentTaxSummarizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintTaxValue</Name>
				<Source><![CDATA[
    public boolean parmPrintTaxValue(boolean _printTaxValue = printTaxValue)
    {
        printTaxValue = _printTaxValue;
        return printTaxValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>