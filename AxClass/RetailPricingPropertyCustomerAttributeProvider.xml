<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyCustomerAttributeProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using System.Collections;
using CrtPricingPropertyDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyDefinition;
using CrtSalesTransaction = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction;
using CrtPricingPropertyValueContext = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyValueContext;
using CrtPricingPropertySource = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertySource;
using CrtPricingPropertyLevel = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyLevel;
using CrtPricingPropertyType = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyType;
using CrtCommercePropertyValue = Microsoft.Dynamics.Commerce.Runtime.DataModel.CommercePropertyValue;

/// <summary>
/// The property provider for customer's attributes.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.RetailPricingPropertyValueProviderBase))]
internal final class RetailPricingPropertyCustomerAttributeProvider extends RetailPricingPropertyValueProviderBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>IsPropertySupported</Name>
				<Source><![CDATA[
    public boolean IsPropertySupported(CrtPricingPropertyDefinition definition)
    {
        return definition.get_PropertyLevel() == CrtPricingPropertyLevel::Header
            && definition.get_PropertyType() == CrtPricingPropertyType::Attribute
            && definition.get_PropertySource() == CrtPricingPropertySource::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    public void Resolve(CrtPricingPropertyValueContext valueContext, CrtSalesTransaction salesTransaction)
    {
        Map attributeRecIdMap = new Map(Types::Int64, Types::AnyType);
        
        IEnumerator enumerator = valueContext.get_PricingProperties().GetEnumerator();
        while (enumerator.moveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (this.IsPropertySupported(crtDefinition))
            {
                attributeRecIdMap.insert(crtDefinition.get_AttributeRecordId(), crtDefinition);
            }
        }

        CustomerInstanceValue customerInstanceValue;
        if (salesTransaction.get_CustomerId() != null && salesTransaction.get_CustomerId() != '')
        {
            customerInstanceValue = CustomerInstanceValue::find(salesTransaction.get_CustomerId(), curExt());
        }

        if (customerInstanceValue)
        {
            EcoResAttributeValue ecoResAttributeValue;
            EcoResValue ecoResValue;

            while select RecId, Attribute from ecoResAttributeValue
                    where ecoResAttributeValue.InstanceValue == customerInstanceValue.RecId
                // We select EcoResValue entirely to include all fields from child tables - so we don't need to outer join all child tables like RetailEcoResInstanceAttributeValuesView.
                // Ref: https://learn.microsoft.com/en-us/dynamicsax-2012/developer/selecting-data-from-a-table-inheritance-hierarchy#gg881064collapse_allen-usax60gifasterisk-reads-all-derived-fields
                join * from ecoResValue
                    where ecoResValue.RecId == ecoResAttributeValue.Value
            {
                if (!attributeRecIdMap.exists(ecoResAttributeValue.Attribute))
                {
                    continue;
                }
                CrtPricingPropertyDefinition crtDefinition = attributeRecIdMap.lookup(ecoResAttributeValue.Attribute);
                if (ecoResValue is EcoResTextValue)
                {
                    EcoResTextValue textValue = ecoResValue as EcoResTextValue;
                    valueContext.AddHeaderValue(crtDefinition, textValue.TextValue);
                }
                else if (ecoResValue is EcoResIntValue)
                {
                    EcoResIntValue intValue = ecoResValue as EcoResIntValue;
                    valueContext.AddHeaderValue(crtDefinition, intValue.IntValue);
                }
                else if (ecoResValue is EcoResBooleanValue)
                {
                    EcoResBooleanValue booleanValue = ecoResValue as EcoResBooleanValue;
                    boolean value = booleanValue.BooleanValue;

                    // No idea why type conversion doesn't work just for booleans.
                    valueContext.AddHeaderValue(crtDefinition, new CrtCommercePropertyValue(new System.Boolean().GetType(), value));
                }
                else if (ecoResValue is EcoResFloatValue)
                {
                    EcoResFloatValue floatValue = ecoResValue as EcoResFloatValue;
                    valueContext.AddHeaderValue(crtDefinition, floatValue.FloatValue);
                }
            }
        }

        enumerator = valueContext.get_PricingProperties().GetEnumerator();
        while (enumerator.moveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (this.IsPropertySupported(crtDefinition))
            {
                valueContext.Resolve(crtDefinition);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>