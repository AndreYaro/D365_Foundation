<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleDataUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LeanRuleDataUpdate extends LeanRuleData
{
    KanbanRule replacedKanbanRule;
    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack(boolean _ignoreOrig = false)
    {
        return [#CurrentVersion, classNum(LeanRuleDataUpdate), buf2Con(replacedKanbanRule), super(_ignoreOrig)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacedKanbanRule</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanRule parmReplacedKanbanRule(KanbanRule _replacedKanbanRule = replacedKanbanRule)
    {
        replacedKanbanRule = _replacedKanbanRule;

        return replacedKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedReplacedKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the user selected replaced kanban rule.
    /// </summary>
    /// <returns>
    ///    The user selected replaced kanban rule.
    /// </returns>
    public KanbanRule selectedReplacedKanbanRule()
    {
        return this.parmReplacedKanbanRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass, boolean _selectForUpdate = false)
    {
        container   ctrReplacingRule;
        container   ctrBaseClass;
        classId     classIdentificator;
        KanbanRule  localReplacedKanbanRule;

        int         version     = RunBase::getVersion(_packedClass);

        // check version
        if (version != #CurrentVersion)
        {
            return false;
        }

        // unpack the input container
        [version, classIdentificator, ctrReplacingRule, ctrBaseClass] = _packedClass;

        // unpack the replacing rule, preserving the original reference
        con2Buf(ctrReplacingRule, localReplacedKanbanRule);
        replacedKanbanRule.data(localReplacedKanbanRule);

        boolean ret = super(ctrBaseClass, _selectForUpdate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>LeanRuleDataUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanRuleDataUpdate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleDataUpdate construct()
    {
        return new LeanRuleDataUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanRuleDataUpdate</c> class.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object that holds the actual rule data.
    /// </param>
    /// <param name="_replacedRuleId">
    ///    The identifier of the rule to replace.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanRuleDataUpdate</c> class.
    /// </returns>
    /// <remarks>
    ///    This class is used only to update kanban rules by the KanbanRules form. The reason is that we must
    ///    store the user-selected replaced rule so that the update operation has this information.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleDataUpdate newStandard(LeanRuleData _leanRuleData, LeanReplenishmentRuleId _replacedRuleId)
    {
        LeanRuleDataUpdate leanRuleDataUpdate = LeanRuleDataUpdate::construct();

        leanRuleDataUpdate.initialized(_leanRuleData.initialized());
        leanRuleDataUpdate.parmInventDim(_leanRuleData.parmInventDim());
        leanRuleDataUpdate.parmKanbanFlowWrapper(_leanRuleData.parmKanbanFlowWrapper());
        leanRuleDataUpdate.parmKanbanRule(_leanRuleData.parmKanbanRule());
        leanRuleDataUpdate.parmKanbanRuleFixed(_leanRuleData.parmKanbanRuleFixed());
        leanRuleDataUpdate.parmKanbanRuleVariable(_leanRuleData.parmKanbanRuleVariable());
        leanRuleDataUpdate.parmKanbanRuleEvent(_leanRuleData.parmKanbanRuleEvent());
        leanRuleDataUpdate.parmLeanCoverage(_leanRuleData.parmLeanCoverage());
        leanRuleDataUpdate.parmLeanCoverageKanbanRule(_leanRuleData.parmLeanCoverageKanbanRule());

        // try to find and set the replaced rule as specified in the input param
        leanRuleDataUpdate.parmReplacedKanbanRule(KanbanRule::findRuleId(_replacedRuleId));

        return leanRuleDataUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
