<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRProcessCatalogRequests</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRProcessCatalogRequests</c> class prints a catalog request report
/// for each catalog request record that is being processed, and then sets the status on the record to closed.
/// </summary>
class MCRProcessCatalogRequests
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>catalogRequestExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a catalog request exists for the specified log ID and catalog description.
    /// </summary>
    /// <param name="_logId">
    /// The log ID of the catalog request to determine if it exists.
    /// </param>
    /// <param name="_mcrCatalogDesc">
    /// The catalog description of the catalog request to determine if it exists.
    /// </param>
    /// <returns>
    /// true if the catalog request exists; otherwise, false.
    /// </returns>
    protected boolean catalogRequestExists(MCRLogId _logId = "", MCRCatalogDesc _mcrCatalogDesc = "")
    {
        boolean             printReport;
        MCRCatalogRequest   mcrCatalogRequest;

        select firstOnly RecId from mcrCatalogRequest
            where mcrCatalogRequest.MCRStatus == MCRCatalogStatus::Open
                && (mcrCatalogRequest.MCRLogId == _logId
                    || _logId == "")
                && (mcrCatalogRequest.MCRCatalogDescription == _mcrCatalogDesc
                    || _mcrCatalogDesc == "");

        if (mcrCatalogRequest)
        {
            printReport = true;
        }

        return printReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCatalogRequests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the status of the catalog request to closed.
    /// </summary>
    /// <param name="_logId">
    /// The catalog Id of the catalog request to be closed.
    /// </param>
    protected void closeCatalogRequests(LogId _logId = "")
    {
        MCRCatalogRequest   mcrCatalogRequest;

        ttsBegin;
        while select forupdate mcrCatalogRequest
            where mcrCatalogRequest.MCRStatus == MCRCatalogStatus::Open
                && (mcrCatalogRequest.MCRLogId == _logId
                    || _logId == "")
        {
            mcrCatalogRequest.MCRStatus = MCRCatalogStatus::Closed;

            if (mcrCatalogRequest.validateWrite())
            {
                mcrCatalogRequest.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            // Only write an activity for a BR
            if (mcrCatalogRequest.smmBusRelAccount)
            {
                smmActivityCreate::createActivity(mcrCatalogRequest);
            }
        }
        TTSCOMMIT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        private boolean printReport(str _parm)
    {
        Args                args = new Args();
        MenuFunction        menuFunction;

        menuFunction = new MenuFunction(MenuItemActionStr(MCRCatalogRequestReport),MenuItemType::Action);
        args.parm(_parm);
        menuFunction.run(args);

        if (args.parm() == "@SYS57717")
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes specific catalog type requests.
    /// </summary>
    /// <param name="_mcrCatalogDesc">
    /// The description of a catalog.
    /// </param>
    /// <returns>
    /// true if the report is printed; otherwise, false.
    /// </returns>
    public boolean processCatalogs(MCRCatalogDesc _mcrCatalogDesc = "")
    {
        boolean             printReport;
        MCRLogId            logId;
        boolean             ret = true;
        str                 range;

        range = this.setAllLogIds(_mcrCatalogDesc);
        if (_mcrCatalogDesc != "")
        {
            logId = range;
        }
        printReport = this.catalogRequestExists(logId, _mcrCatalogDesc);

        if (printReport)
        {
            ret = this.printReport(range);
            if (ret)
            {
                this.closeCatalogRequests(logId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllLogIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the log ID on the catalog request record.
    /// </summary>
    /// <param name="_mcrCatalogDesc">
    /// The catalog description of the catalog request record in which to set the log ID.
    /// </param>
    /// <returns>
    /// The log ID or list of log ID values set on the catalog request records.
    /// </returns>
    protected str setAllLogIds(MCRCatalogDesc _mcrCatalogDesc = "")
    {
        MCRCatalogRequest   mcrCatalogRequest;
        MCRCatalogDesc      lastCatalogDesc;
        MCRLogId            logId;
        NumberSeq           numberSeq;
        str                 range;

        ttsBegin;
        while select forupdate mcrCatalogRequest
            order by MCRCatalogDescription
                where mcrCatalogRequest.MCRStatus == MCRCatalogStatus::Open
                && (mcrCatalogRequest.MCRCatalogDescription == _mcrCatalogDesc
                    || _mcrCatalogDesc == "")
        {
            if (mcrCatalogRequest.MCRCatalogDescription == lastCatalogDesc)
            {
                mcrCatalogRequest.MCRLogId = logId;
            }
            else
            {
                lastCatalogDesc = mcrCatalogRequest.MCRCatalogDescription;

                // Get the number sequence that is defined in customer parameters.
                numberSeq = NumberSeq::newGetNum(CustParameters::MCRNumRefCatalogLogId());
                logID = numberSeq.num();
                range += logId + ',';
                mcrCatalogRequest.MCRLogId = logId;
            }

            if (mcrCatalogRequest.validateWrite())
            {
                mcrCatalogRequest.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttsCommit;
        range = strDel(range, strLen(range), 1);

        return range;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>