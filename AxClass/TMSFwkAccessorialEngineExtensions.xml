<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkAccessorialEngineExtensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkAccessorialEngineExtensions</c> class provides customization-extension hooks for Microsoft.Dynamics.Ax.Tms.Bll.AccessorialEngine class.
/// </summary>
public class TMSFwkAccessorialEngineExtensions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processAccessorialFeeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies accessorial fee of particular type.
    /// </summary>
    /// <param name = "_ratingDto">Rating DTO.</param>
    /// <param name = "_ratingEntity">Rating entity.</param>
    /// <param name = "_accessorialAssignment">Accessorial assignment record.</param>
    /// <param name = "_accessorialShipData">Payload for the accessorial processing.</param>
    /// <param name = "_baseRateCurrencyCode">Base currency code.</param>
    /// <returns></returns>
    public static boolean processAccessorialFeeType(
        RatingDto                   _ratingDto,
        XElement                    _ratingEntity,
        TMSAccessorialAssignment    _accessorialAssignment,
        TMSFwkAccessorialShipData   _accessorialShipData,
        CurrencyCode                _baseRateCurrencyCode)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and applies accessorial fee of particular rate.
    /// </summary>
    /// <param name="_accessorialAssignment">Accessorial assignment record defining the accessorial charge to apply.</param>
    /// <param name="_ratingEntity">Rating entity.</param>
    /// <param name="_units">The number of units for which the charge applies.</param>
    /// <param name="_unitRate">The rate for one unit.</param>
    /// <param name="_baseRateCurrencyCode">Base currency code.</param>
    /// <param name="_reduceToMinMax">Determines whether minimum/maximum charge reduction should be applied; optional.</param>
    public static void applyCharge(
        TMSAccessorialAssignment    _accessorialAssignment,
        XElement                    _ratingEntity,
        TMSRateUnit                 _units,
        TMSRateUnitRate             _unitRate,
        CurrencyCode                _baseRateCurrencyCode,
        boolean                     _reduceToMinMax = false)
    {
        Amount charge = _units * _unitRate;

        if (_reduceToMinMax)
        {
            if (charge < _accessorialAssignment.MinimumCharge)
            {
                charge = _accessorialAssignment.MinimumCharge;
            }
            else if (charge != -1 && _accessorialAssignment.MaximumCharge < charge && _accessorialAssignment.MaximumCharge > 0)
            {
                charge = _accessorialAssignment.MaximumCharge;
            }
        }

        if (_baseRateCurrencyCode != '' && _baseRateCurrencyCode != _accessorialAssignment.CurrencyCode)
        {
            Amount convertedRate = TMSGlobal::convertCurrency(_accessorialAssignment.CurrencyCode, _baseRateCurrencyCode, charge);

            TmsXDocExtensions::AddAccessorial(
                _ratingEntity,
                _accessorialAssignment.AccessorialMasterCode,
                charge,
                _units,
                _unitRate,
                _accessorialAssignment.BillingGroupId,
                _accessorialAssignment.ExternalCode,
                _accessorialAssignment.CurrencyCode,
                _accessorialAssignment.AllowDiscount == NoYes::Yes,
                convertedRate);
        }
        else
        {
            TmsXDocExtensions::AddAccessorial(
                _ratingEntity,
                _accessorialAssignment.AccessorialMasterCode,
                charge,
                _units,
                _unitRate,
                _accessorialAssignment.BillingGroupId,
                _accessorialAssignment.ExternalCode,
                _accessorialAssignment.CurrencyCode,
                _accessorialAssignment.AllowDiscount == NoYes::Yes);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>