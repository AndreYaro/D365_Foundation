<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqInternalOrgManager_LegalEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqInternalOrgManager_LegalEntity extends PurchReqInternalOrgManager
{
    PurchReqTmpAuthorizationLegalEntity     purchReqTmpAuthorizationLegalEntity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteStaleRecords</Name>
				<Source><![CDATA[
        protected void deleteStaleRecords(HcmWorkerRecId _hcmWorkerRecId)
    {
        delete_from purchReqTmpAuthorizationLegalEntity where
            purchReqTmpAuthorizationLegalEntity.Requisitioner == _hcmWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
        public Common getData()
    {
        return purchReqTmpAuthorizationLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRequisitioner</Name>
				<Source><![CDATA[
        public void insertRequisitioner(HcmWorkerRecId _requisitioner)
    {
        Set                         buyingLegalEntitySet;
        SetEnumerator               se;

        if (!this.isRequisitionerInMemory(_requisitioner))
        {
            buyingLegalEntitySet = Set::create(PurchReqInternalOrgManager_LegalEntity::createRequisitionerList(_requisitioner));

            se = buyingLegalEntitySet.getEnumerator();

            while (se.moveNext())
            {
                purchReqTmpAuthorizationLegalEntity.Requisitioner     = _requisitioner;
                purchReqTmpAuthorizationLegalEntity.BuyingLegalEntity = se.current();
                purchReqTmpAuthorizationLegalEntity.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
        public tableId tableId()
    {
        return tableNum(PurchReqTmpAuthorizationLegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a requisitioner is valid for a buying legal entity.
    /// </summary>
    /// <param name="_requisitioner">
    /// The requisitioner.
    /// </param>
    /// <param name="_buyingLegalEntity">
    /// The buying legal entity.
    /// </param>
    /// <param name="_showError">
    /// A <c>boolean</c> indicating whether or not an error message should be shown.
    /// </param>
    /// <returns>
    /// true if the requisitioner and receiving operating unit are valid; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The requisitioner is not valid.
    /// </exception>
    public boolean validate(HcmWorkerRecId _requisitioner, RefRecId _buyingLegalEntity, boolean _showError = true)
    {
        if (!this.validateRequisitioner(_requisitioner))
        {
            throw Exception::Error;
        }

        this.insertRequisitioner(_requisitioner);

        select firstonly RecId from purchReqTmpAuthorizationLegalEntity where
            purchReqTmpAuthorizationLegalEntity.Requisitioner     == _requisitioner &&
            purchReqTmpAuthorizationLegalEntity.BuyingLegalEntity == _buyingLegalEntity;

        if (!purchReqTmpAuthorizationLegalEntity)
        {
            if (_showError)
            {
                error("@SYS311073");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequisitionerList</Name>
				<Source><![CDATA[
        public static container createRequisitionerList(HcmWorkerRecId _requisitioner)
    {
        container                           companyInfoRecIds;
        int                                 i;
        PurchReqAuthorizationLegalEntity    purchReqAuthorizationLegalEntity;
        Set                                 buyingLegalEntitySet                = new Set(Types::Int64);

        companyInfoRecIds = HcmWorkerHelper::getLegalEntityRecIds(_requisitioner);
        for (i=1; i<=conLen(companyInfoRecIds); i++)
        {
            buyingLegalEntitySet.add(conPeek(companyInfoRecIds, i));
        }

        while select BuyingLegalEntity from purchReqAuthorizationLegalEntity
                where purchReqAuthorizationLegalEntity.Requisitioner == _requisitioner
        {
            buyingLegalEntitySet.add(purchReqAuthorizationLegalEntity.BuyingLegalEntity);
        }

        return buyingLegalEntitySet.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>