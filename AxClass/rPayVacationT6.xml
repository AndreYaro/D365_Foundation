<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayVacationT6</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayVacationT6 extends XMLExcelReport_RU implements BatchRetryable
{
    RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
    CompanyInfo                     companyInfo;
    TempStr                         templateName;

    DocumentDate                    documentDate;
    DocumentNum                     documentNum;
    RHRMEmplId                      personnelServiceEmployee;
    StartDate                       startPeriodDate;
    EndDate                         endPeriodDate;
    RHRMEmplTable                   emplTable, psEmployee;
    RPayVacationType                vacationType;

    DialogField                     dialogDocumentDate;
    DialogField                     dialogDocumentNum;
    DialogField                     dialogPersonnelServiceEmployee;
    DialogField                     dialogStartPeriodDate;
    DialogField                     dialogEndPeriodDate;

    RNumDateInWordConverter         converter;
    #define.page1('page1')
    #define.page2('page2')
    #define.pageWidth(121)

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        documentDate,
        documentNum,
        personnelServiceEmployee,
        startPeriodDate,
        endPeriodDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        return max(conPeek(mapSections.lookup(_bookmark), #posSectionHeight), #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#page1);

        this.execute(#page2);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = new DialogRunbase("@SYS28952", this);

        dialogDocumentNum = dialog.addField(extendedTypeStr(DocumentNum));
        dialogDocumentNum.label("@SYS8434");
        dialogDocumentNum.value(documentNum);

        dialogDocumentDate = dialog.addField(extendedTypeStr(DocumentDate));
        dialogDocumentDate.label("@GLS106243");
        dialogDocumentDate.value(documentDate);

        dialogPersonnelServiceEmployee = dialog.addField(extendedTypeStr(RHRMEmplId));
        dialogPersonnelServiceEmployee.label("@RUP2093");
        dialogPersonnelServiceEmployee.value(personnelServiceEmployee);

        dialog.addGroup("@RUP4");
        dialogStartPeriodDate = dialog.addField(extendedTypeStr(StartDate));
        dialogStartPeriodDate.label("@SYS23633");
        dialogStartPeriodDate.value(startPeriodDate);

        dialogEndPeriodDate = dialog.addField(extendedTypeStr(EndDate));
        dialogEndPeriodDate.label("@RUP1498");
        dialogEndPeriodDate.value(endPeriodDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    #define.fileName('RPayVacationT6')
    protected Filename fileName()
    {
        return #fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + int642str(rPayAverageEarnEmplPeriodTable.RecId) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #page1:
                this.fillPage1();
                break;
            case #page2:
                this.fillPage2();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    private void fillPage1()
    {
        RPayHistory             rPayHistory, rPayHistoryPS;

        rPayHistory = RPayHistory::getHistoryLineByDate(emplTable.EmployeeId, rPayAverageEarnEmplPeriodTable.StartDate);

        this.insertValueToSection('CompanyName', CompanyInfo::find().Name);
        this.insertValueToSection('CompanyOKPO', CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), documentDate));
        this.insertValueToSection('DocumentNum',documentNum);
        this.insertValueToSection('DocumentDate', date2str(documentDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
        this.insertValueToSection('EmplName', emplTable.name());
        this.insertValueToSection('HrmOrganization1', RPayHRMOrganization::find(rPayHistory.HrmOrganizationId).Description);
        this.insertValueToSection('EmplTitle', this.positionAndCategory(rPayHistory.HcmTitle, rPayHistory.TradeCategory));
        this.insertValueToSection('EmplId1',emplTable.EmployeeId);

        if (startPeriodDate)
        {
            this.insertValueToSection('WorkDayStart',dayOfMth(startPeriodDate));
            this.insertValueToSection('WorkMonthStart',converter.date2strMonth(startPeriodDate));
            this.insertValueToSection('WorkYearStart', this.shortYear(startPeriodDate));
        }
        if (endPeriodDate)
        {
            this.insertValueToSection('WorkDayEnd',dayOfMth(endPeriodDate));
            this.insertValueToSection('WorkMonthEnd',converter.date2strMonth(endPeriodDate));
            this.insertValueToSection('WorkYearEnd', this.shortYear(endPeriodDate));
        }

        if (vacationType == RPayVacationType::Basic)
        {
            this.insertValueToSection('CalendarDayNumber_A',rPayAverageEarnEmplPeriodTable.calendarDayNumber());
            this.insertValueToSection('DayStart_A',dayOfMth(rPayAverageEarnEmplPeriodTable.StartDate));
            this.insertValueToSection('MonthStart_A',converter.date2strMonth(rPayAverageEarnEmplPeriodTable.StartDate));
            this.insertValueToSection('YearStart_A', this.shortYear((rPayAverageEarnEmplPeriodTable.StartDate)));
            this.insertValueToSection('DayEnd_A',dayOfMth(rPayAverageEarnEmplPeriodTable.EndDate));
            this.insertValueToSection('MonthEnd_A',converter.date2strMonth(rPayAverageEarnEmplPeriodTable.EndDate));
            this.insertValueToSection('YearEnd_A', this.shortYear((rPayAverageEarnEmplPeriodTable.EndDate)));
        }
        else
        {
            this.insertValueToSection('CalendarDayNumber_B1',rPayAverageEarnEmplPeriodTable.calendarDayNumber());
            this.insertValueToSection('CalendarDayNumber_B2',rPayAverageEarnEmplPeriodTable.calendarDayNumber());
            this.insertValueToSection('VacationType', enum2str(vacationType));
            this.insertValueToSection('DateStart_B', date2str(rPayAverageEarnEmplPeriodTable.StartDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
            this.insertValueToSection('DateEnd_B', date2str(rPayAverageEarnEmplPeriodTable.EndDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
        }

        this.insertValueToSection('CalendarDayNumber',rPayAverageEarnEmplPeriodTable.calendarDayNumber());
        this.insertValueToSection('DayStart',dayOfMth(rPayAverageEarnEmplPeriodTable.StartDate));
        this.insertValueToSection('MonthStart',converter.date2strMonth(rPayAverageEarnEmplPeriodTable.StartDate));
        this.insertValueToSection('YearStart', this.shortYear((rPayAverageEarnEmplPeriodTable.StartDate)));
        this.insertValueToSection('DayEnd',dayOfMth(rPayAverageEarnEmplPeriodTable.EndDate));
        this.insertValueToSection('MonthEnd',converter.date2strMonth(rPayAverageEarnEmplPeriodTable.EndDate));
        this.insertValueToSection('YearEnd', this.shortYear((rPayAverageEarnEmplPeriodTable.EndDate)));

        rPayHistoryPS = RPayHistory::getHistoryLineByDate(psEmployee.EmployeeId, documentDate);

        this.insertValueToSection('PersonnelServiceEmployeeTitle', rPayHistoryPS.positionDescription());
        this.insertValueToSection('PersonnelServiceEmployeeName', psEmployee.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage2</Name>
				<Source><![CDATA[
    private void fillPage2()
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPayAverageEarnValue    rPayAverageEarnValue;

        int                     number;
        Amount                  amountCurrent, amountTotalTrans;
        RPayDayHour             averageDayHour;
        RPayAmount              averageAmount;
        Amount                  amountFOP, amountFMP, amountFOP_F, amountFMP_F, amountTotal;
        RPayCalendarId          rPaySevenDaysCalendarId;
        RHRMPeriod              dayHour, dayHour_F;
        ReportPeriod_RU         payPeriodTest;
        RPaySheetTable          rPaySheetTable;

        amountTotalTrans = 0;
        number = 0;

        while select sum(Amount) from rPayAverageEarnTrans group by PayPeriod
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId
        {
            number++;
            this.insertValueToSection('PayYear'+int2str(number),year(rPayAverageEarnTrans.PayPeriod));
            this.insertValueToSection('PayMonth'+int2str(number),mthName(mthOfYr(rPayAverageEarnTrans.PayPeriod)));
            amountCurrent = rPayAverageEarnTrans.Amount;
            this.insertValueToSection('CalcPay'+int2str(number),num2str(amountCurrent,1,2,1,0));
            amountTotalTrans += amountCurrent;
        }
        if (amountTotalTrans)
        {
            this.insertValueToSection('CalcPay',num2str(amountTotalTrans,1,2,1,0));
        }

        [averageDayHour, averageAmount] = this.getAverage();
        if (amountCurrent)
        {
            this.insertValueToSection('Average',num2str(averageAmount,1,2,1,0));
            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            {
                this.insertValueToSection('AverageDay', averageDayHour);
            }
            else
            {
                this.insertValueToSection('AverageHour', averageDayHour);
            }
        }

        payPeriodTest = rPayAverageEarnEmplPeriodTable.PayPeriod;
        if (! payPeriodTest)
        {
            payPeriodTest = RPayParameters::payPeriod();
        }

        amountFOP      =0;
        amountFMP      =0;
        amountFOP_F    =0;
        amountFMP_F    =0;

        while select PayPeriod, PayAverageSourceType, Amount from  rPayAverageEarnValue
            where  rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
        {
            if (rPayAverageEarnValue.PayPeriod > payPeriodTest)
            {
                if (rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund)
                {
                    amountFOP_F  += rPayAverageEarnValue.Amount;
                }
                else
                {
                    amountFMP_F  += rPayAverageEarnValue.Amount;
                }
            }
            else
            {
                if (rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund)
                {
                    amountFOP  += rPayAverageEarnValue.Amount;
                }
                else
                {
                    amountFMP  += rPayAverageEarnValue.Amount;
                }
            }
        }

        rPaySevenDaysCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SevenDays).CalendarId;
        if (dateEndMth(rPayAverageEarnEmplPeriodTable.StartDate) < rPayAverageEarnEmplPeriodTable.EndDate)
        {
            dayHour     = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPaySevenDaysCalendarId,
                                                                              rPayAverageEarnEmplPeriodTable.StartDate,
                                                                              dateEndMth(rPayAverageEarnEmplPeriodTable.StartDate),
                                                                              rPayAverageEarnEmplPeriodTable.VacationTypeId);
            dayHour_F   = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPaySevenDaysCalendarId,
                                                                              dateStartMth(rPayAverageEarnEmplPeriodTable.EndDate),
                                                                              rPayAverageEarnEmplPeriodTable.EndDate,
                                                                              rPayAverageEarnEmplPeriodTable.VacationTypeId);
        }
        else
        {
            dayHour     = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPaySevenDaysCalendarId,
                                                                              rPayAverageEarnEmplPeriodTable.StartDate,
                                                                              rPayAverageEarnEmplPeriodTable.EndDate,
                                                                              rPayAverageEarnEmplPeriodTable.VacationTypeId);
        }

        if (amountFOP)
        {
            this.insertValueToSection('AmountFOP',num2str(amountFOP,1,2,1,0));
        }
        if (amountFMP)
        {
            this.insertValueToSection('AmountFMP',num2str(amountFMP,1,2,1,0));
        }

        if (amountFOP + amountFMP)
        {
            this.insertValueToSection('CurrentMonth',mthName(mthOfYr(payPeriodTest)));
            this.insertValueToSection('DayHour',int2str(dayHour));
        }

        if (amountFOP_F)
        {
            this.insertValueToSection('AmountFOP_F',num2str(amountFOP_F,1,2,1,0));
        }
        if (amountFMP_F)
        {
            this.insertValueToSection('AmountFMP_F',num2str(amountFMP_F,1,2,1,0));
        }

        if (amountFOP_F + amountFMP_F)
        {
            this.insertValueToSection('NextMonth',mthName((mthOfYr(nextMth(payPeriodTest)))));
            this.insertValueToSection('DayHour_F',int2str(dayHour_F));
        }

        amountTotal = amountFOP + amountFMP + amountFOP_F + amountFMP_F;
        this.insertValueToSection('AmountTotal',num2str(amountTotal,1,2,1,0));

        rPaySheetTable = RPaySheetTable::find(rPayAverageEarnEmplPeriodTable.SheetTableRecid);
        this.insertValueToSection('PaySheetNum', rPaySheetTable.PaySheetNum);

        if (rPaySheetTable.TransDate)
        {
            this.insertValueToSection('PaySheetDay', dayofmth(rPaySheetTable.TransDate));
            this.insertValueToSection('PaySheetMonth', RNumDateInWordConverter::construct().date2strMonth(rPaySheetTable.TransDate));
            this.insertValueToSection('PaySheetYear', this.shortYear((rPaySheetTable.TransDate)));
        }

        this.insertValueToSection('AccountantSign',OfficialsTable_RU::findAccountant().getFIO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getAverage()
    {
        RPayAmount           rPayAmount;
        RPayDayHour          rPayDayHour;
        RPayAverageEarnTrans rPayAverageEarnTrans, rPayAverageEarnTransFOT, rPayAverageEarnTransFMP;

        rPayDayHour = 0;
        rPayAmount  = 0;
        while select PayPeriod from rPayAverageEarnTrans group by PayPeriod
            where   rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                    rPayAverageEarnTrans.Amount                     > 0                                     &&
                    rPayAverageEarnTrans.rPayDayHour                > 0
        {
            select firstonly rPayAverageEarnTransFOT
                where  rPayAverageEarnTransFOT.PayPeriod                  == rPayAverageEarnTrans.PayPeriod       &&
                       rPayAverageEarnTransFOT.rPayAverageSourceType      == RPayAverageSourceType::PaymentFund   &&
                       rPayAverageEarnTransFOT.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                       rPayAverageEarnTransFOT.Amount                     >  0                                    &&
                       rPayAverageEarnTransFOT.rPayDayHour                > 0;

            select firstonly rPayAverageEarnTransFMP
                where  rPayAverageEarnTransFMP.PayPeriod                  == rPayAverageEarnTrans.PayPeriod       &&
                       rPayAverageEarnTransFMP.rPayAverageSourceType      != RPayAverageSourceType::PaymentFund   &&
                       rPayAverageEarnTransFMP.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                       rPayAverageEarnTransFMP.Amount                     > 0                                     &&
                       rPayAverageEarnTransFMP.rPayDayHour                > 0;

            if (rPayAverageEarnTransFOT && rPayAverageEarnTransFMP)
            {
                rPayAmount  +=  rPayAverageEarnTransFOT.Amount;
                rPayAmount  +=  rPayAverageEarnTransFMP.Amount;
                rPayDayHour +=  rPayAverageEarnTransFOT.rPayDayHour;
            }
            else
            {
                if (rPayAverageEarnTransFOT)
                {
                    rPayAmount  +=  rPayAverageEarnTransFOT.Amount;
                    rPayDayHour +=  rPayAverageEarnTransFOT.rPayDayHour;
                }
                else
                {
                    rPayAmount  +=  rPayAverageEarnTransFMP.Amount;
                    rPayDayHour +=  rPayAverageEarnTransFMP.rPayDayHour;
                }
            }
        }

        if (rPayDayHour)
        {
            rPayAmount = CurrencyExchangeHelper::amount(rPayAmount / rPayDayHour);
        }

        return [rPayDayHour, rPayAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        documentNum                 = dialogDocumentNum.value();
        documentDate                = dialogDocumentDate.value();
        personnelServiceEmployee    = dialogPersonnelServiceEmployee.value();
        startPeriodDate             = dialogStartPeriodDate.value();
        endPeriodDate               = dialogEndPeriodDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    private void initData()
    {
        rPayAverageEarnEmplPeriodTable  = this.parmArgs().record();
        emplTable                       = RHRMEmplTable::find(rPayAverageEarnEmplPeriodTable.EmplId);
        vacationType                    = RHRMVacationType::find(rPayAverageEarnEmplPeriodTable.VacationTypeId).PayVacationType;
        psEmployee                      = RHRMEmplTable::find(personnelServiceEmployee);
        converter                       = RNumDateInWordConverter::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#page1);
        this.addSection(#page2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionAndCategory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str positionAndCategory(HCMTitleRecId _hrmPositionId, RHRMTradeCategoryId _tradeCategory)
    {
        str ret;

        ret = RHRMTradeCategory::find(_tradeCategory).Description;
        ret = ret ? ret : _tradeCategory;

        return _hrmPositionId == 0 || ret == ""
                    ? (_hrmPositionId == 0 ? "" : HcmTitle::find(_hrmPositionId).TitleId) + ret
                    : strFmt("@SYS26868", HcmTitle::find(_hrmPositionId).TitleId , ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shortYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str shortYear(date _date)
    {
        return subStr(int2str(year(_date)), 3, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RpayVacationT6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.page1Cells(3)
        #define.page2Cells(15)

        return #page1Cells + #page2Cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayVacationT6  payVacation = new RPayVacationT6();
        payVacation.parmArgs(_args);

        if (payVacation.prompt())
        {
            payVacation.initData();
            payVacation.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>