<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPRCustVendData_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class gathers generalized customer information needed for payment request creation.
/// </summary>
[CFMPaymentRequestSourceAttribute(tableStr(CustTransOpen))]
public class CFMPRCustVendData_Cust extends CFMPRCustVendData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(CustVendTransOpen _sourceTransOpen)
    {
        #ISOCountryRegionCodes
        accountType = CFMAccountType::Cust;
        sourceType = CFMPaymentRequestSourceType::CustInvoice;
        sourceTrans = CustTrans::find(_sourceTransOpen.RefRecId);
        sourcePaymModeTable = CustPaymModeTable::find(sourceTrans.PaymMode);
        sourceInvoiceJour = CustInvoiceJour::findFromCustTransVoucher(sourceTrans.Invoice,
            sourceTrans.Voucher,
            sourceTrans.TransDate,
            sourceTrans.AccountNum);

        thirdPartyBankAccountId = sourceTrans.ThirdPartyBankAccountId;
        prepayment = sourceTrans.Prepayment;

        if (sourceInvoiceJour && sourceInvoiceJour.Payment)
        {
            requestType = this.paymentRequestTypeFromPaymTerm(PaymTerm::find(sourceInvoiceJour.Payment), prepayment);
        }

        if (!requestType)
        {
            requestType = prepayment ? CFMParameters::findInCentralizedPaymentsCompany().SupplierPrepayment : CFMParameters::findInCentralizedPaymentsCompany().IndebtednessToCustomer;

            if (!requestType)
            {
                throw error(strFmt("@CashFlowManagement:OneOrMorePaymRequestTypeMissing","@SYS336089"));
            }
        }

        RefRecId agreementHeader;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            agreementHeader = AgreementHeaderExt_RU::findByDefaultDimension(sourceTrans.DefaultDimension).AgreementHeader;
            agreementId = SalesAgreementHeader::find(agreementHeader).SalesNumberSequence;
        }

        agreementPaymentOrder = CFMAgreementPaymentOrder::findByAgreement(agreementHeader, SalesPurch::Sales);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>