<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlSZV64</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlSZV64 extends RPayPFReportCtrlSZV6
{
    Integer                     packageNum;
    FilePath                    filePath;
    int                         keyAgreementType;
    RPayReportCommandSZV64      monthFundAmountCommand;
    Range                       deductionFundInvalid;
    #RPayPFReportSZV64
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkKeyChanged</Name>
				<Source><![CDATA[
        protected boolean checkKeyChanged()
    {
        boolean ret;

        ret = super();

        emplNo = ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionCodes</Name>
				<Source><![CDATA[
        protected container deductionCodes()
    {
        container ret;

        switch (keyFund)
        {
            case pensionInsuranceFund:

                ret = [[SysQuery::valueNot(deductionFundInvalid), false]];

                if (deductionCodeExceedMax)
                {
                    ret += [[deductionCodeExceedMax, false]];
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionPctBaseCodes</Name>
				<Source><![CDATA[
        protected container deductionPctBaseCodes()
    {
        container con = connull();

        if (keyFund == pensionInsuranceFund)
        {
            if (deductionCodeExceedMax)
            {
                con = [[deductionCodeExceedMax, false]];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeniorityPeriods</Name>
				<Source><![CDATA[
        protected container getSeniorityPeriods(Set _seniorityPeriod)
    {
        container                       seniorityPeriodsCon;
        container                       specConditionsPeriods;

        seniorityPeriodsCon = super(_seniorityPeriod);

        specConditionsPeriods = this.getSpecConditionsPeriods();
        seniorityPeriodsCon = this.mergeSpecConds2Seniority(seniorityPeriodsCon, specConditionsPeriods);

        return seniorityPeriodsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        super();

        pensionExtra1fund = payTaxParameters.PensionFundExtra1;
        pensionExtra2fund = payTaxParameters.PensionFundExtra2;

        if (pensionExtra1fund)
        {
            funds += pensionExtra1fund;
        }

        if (pensionExtra2fund)
        {
            funds += pensionExtra2fund;
        }

        deductionFundInvalid = payTaxParameters.PensionFundinvalidDeduction;
        deductionCodeExceedMax = payTaxParameters.PFDeductionCodePctBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryPeriodsMap</Name>
				<Source><![CDATA[
        protected void initCategoryPeriodsMap()
    {
        categoryPeriods = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
        protected void initData()
    {
        reportData              = new RPayPFReportDataSZV64(this.parmKey());
        monthFundAmountCommand  = new RPayReportCommandSZV64(reportData, [#MonthFundAmountDS]);
        fundAmountCommand       = new RPayReportCommandSZV6(reportData, [#FundAmountDS]);
        seniorityCommand        = new RPayReportCommandSZV6(reportData, [#SeniorityDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplPeriodData</Name>
				<Source><![CDATA[
        protected void initEmplPeriodData()
    {
        super();
        keyAgreementType = conpeek(this.contractMthInfo(emplTable, keyPeriod), 1) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplSeniority</Name>
				<Source><![CDATA[
        protected void initEmplSeniority()
    {
        container                       seniorityCon;
        container                       senioritySortedCon;
        MapEnumerator                   mapEnum;
        Set                             tmpSet;

        container getSenioriryPeriod(StartDate  _periodStartDate)
        {
            int                             periodIdxLocal;
            StartDate                       periodStartDateLocal;
            EndDate                         periodEndDateLocal;
            int                             senMonths,
                                            senDays;
            container                       ret = [dateNull(), dateNull(), ''];
            container                       seniorityData;

            if (conlen(seniorityCon) > 0)
            {
                for (periodIdxLocal = 1; periodIdxLocal <= conlen(seniorityCon); periodIdxLocal++)
                {
                    seniorityData        = conpeek(seniorityCon, periodIdxLocal);
                    periodStartDateLocal = conpeek(seniorityData, 1);
                    periodEndDateLocal   = conpeek(seniorityData, 2);

                    if (periodStartDateLocal == _periodStartDate)
                    {
                        senMonths   = (periodEndDateLocal - periodStartDateLocal + 1) div #DaysInMonth;
                        senDays     = (periodEndDateLocal - periodStartDateLocal + 1) - senMonths * #MonthsInYear;
                        ret = seniorityData + [senMonths, senDays];

                        break;
                    }
                }
            }

            return ret;
        }

        void writeEmplSeniority(Set _setSeniority)
        {
            int                             senIdx;
            StartDate                       senPeriodStartDate;

            int                             senMonths,
                                            senDays;
            ArrayExtend_RU                  senStartPeriodArray = new ArrayExtend_RU(Types::Date);
            StartDate                       arrayPeriodStartDate;
            container                       seniorityData;

            seniorityCon = this.getSeniorityPeriods(_setSeniority);

            if (conlen(seniorityCon) > 0)
            {
                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    seniorityData = conpeek(seniorityCon, senIdx);
                    senPeriodStartDate = conpeek(seniorityData, 1);

                    senStartPeriodArray.addElement(senPeriodStartDate);
                }

                senStartPeriodArray = senStartPeriodArray.bubbleSorting();

                senioritySortedCon = connull();

                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    arrayPeriodStartDate = senStartPeriodArray.value(senIdx);

                    seniorityData = getSenioriryPeriod(arrayPeriodStartDate);

                    senioritySortedCon = conpoke(senioritySortedCon, conlen(senioritySortedCon) + 1,
                                                 seniorityData);
                }

                seniorityCommand.parmValue([[#SeniorityKey], senioritySortedCon]);
                seniorityCommand.insert();
            }

            return;
        }

        mapEnum = categoryPeriods.getEnumerator();

        while (mapEnum.moveNext())
        {
            [keyCategory, keyAgreementType] = mapEnum.currentKey();
            tmpSet                          = mapEnum.currentValue();
            writeEmplSeniority(tmpSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportCommand</Name>
				<Source><![CDATA[
protected void initReportCommand()
    {
        super();

        if (this.needInitMthCommand())
        {
            monthFundAmountCommand.parmValue([this.parmMthKey(), this.parmMthValue()]);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
        protected container parmKey()
    {
        return [#parmKeyReport];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyToCheck</Name>
				<Source><![CDATA[
        protected container parmKeyToCheck()
    {
        return this.parmKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMthKey</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container parmMthKey()
    {
        return [#parmKeyReport, mthofyr(keyPeriod)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMthValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container parmMthValue()
    {
        RPayAmount  insFundTotalAmount,
                    insFundBaseAmount,
                    insMaxBaseDeduct,
                    extra1FundAmount,
                    extra2FundAmount;

        switch (keyFund)
        {
            case pensionInsuranceFund:
                insFundTotalAmount  = fundTotalAmount;
                insFundBaseAmount   = fundTotalAmount - conpeek(deductAmounts, 1);

                if (keyCategory == #InsuredPersonCatEmployee ||
                    keyCategory == #TempLiveForeign ||
                    keyCategory == #TempResidenceForeign)
                {
                    insMaxBaseDeduct    = conpeek(deductAmounts, 2);
                }

                break;

            case pensionExtra1fund:
                extra1FundAmount = fundTotalAmount;
                break;
            case pensionExtra2fund:
                extra2FundAmount = fundTotalAmount;
                break;
        }

        return [insFundTotalAmount,
                 insFundBaseAmount,
                 insMaxBaseDeduct,
                 extra1FundAmount,
                 extra2FundAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
        protected container parmValue()
    {
        switch (keyFund)
        {
            case pensionInsuranceFund:
                deductionPctBase = conpeek(deductBasePctAmount, 1);
                fundAmountIns = fundAmount - deductionPctBase;
                fundAmountSto = 0;
                break;

            case pensionStorageFund:
                fundAmountSto = fundAmount;
                fundAmountIns = 0;
                break;

            default:
                fundAmountIns = 0;
                fundAmountSto = 0;
        }

        return [#parmValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
protected void runCommand()
    {
        Set tmpSet;
        fundAmountCommand.insert();

        if (this.needInitMthCommand())
        {
            monthFundAmountCommand.insert();
        }

        if (keyCategory && keyAgreementType)
        {
            if (categoryPeriods.exists([keyCategory, keyAgreementType]))
            {
                tmpSet = categoryPeriods.lookup([keyCategory, keyAgreementType]);
            }
            else
            {
                tmpSet = new Set(Types::Integer);
            }

            if (!tmpSet.in(mthOfYr(keyPeriod)))
            {
                tmpSet.add(mthOfYr(keyPeriod));
                categoryPeriods.insert([keyCategory, keyAgreementType], tmpSet);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
        protected void unpackData(container _callParameters)
    {
        container packedQuery;
        parmContract.unpack(_callParameters);

        reportStartDate      = parmContract.reportStartPeriod();
        reportEndDate        = parmContract.reportEndPeriod();
        seniorityStartPeriod = parmContract.seniorityStartPeriod();
        seniorityEndPeriod   = parmContract.seniorityEndPeriod();
        reportCorPeriodStart = parmContract.corrReportStartPeriod();
        reportCorPeriodEnd   = parmContract.corrReportEndPeriod();
        reportType           = parmContract.correctionType();
        reportYear           = year(reportEndDate);
        corrReportYear       = year(reportCorPeriodEnd);
        reportType           = parmContract.correctionType();

        if (reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            reportCalcStartDate = reportStartDate;
        }
        else
        {
            reportCalcStartDate = reportCorPeriodStart;
            reportEndDate       = reportCorPeriodEnd;
        }

        packedQuery = parmContract.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needInitMthCommand</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean needInitMthCommand()
    {
        return keyFund == pensionInsuranceFund ||
               keyFund == pensionExtra1fund ||
               keyFund == pensionExtra2fund;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>