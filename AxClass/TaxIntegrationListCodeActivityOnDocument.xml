<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationListCodeActivityOnDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationListCodeActivityOnDocument</c> class is for list code process.
/// </summary>
public class TaxIntegrationListCodeActivityOnDocument extends TaxIntegrationAbstractActivityOnDocument
{
    public const str LoggerName = 'Tax Integration - List Code';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationListCodeActivityOnDocument</c>.
    /// </summary>
    private final void new()
    {
        super(LoggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationListCodeActivityOnDocument</c>.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationListCodeActivityOnDocument</c>.</returns>
    public final static TaxIntegrationListCodeActivityOnDocument construct()
    {
        return new TaxIntegrationListCodeActivityOnDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document for list code, if the document is OK.
    /// </summary>
    /// <param name = "_document">The document.</param>
    [Replaceable]
    protected void actInternal(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationListCodeActivityOnDocument::actStatic(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document for list code.
    /// </summary>
    /// <param name = "_document">The document.</param>
    protected static void actStatic(TaxIntegrationDocumentObject _document)
    {
        DictEnum listCodeDictEnum = new DictEnum(enumNum(Listcode));
        Listcode listCodeEnum = listCodeDictEnum.symbol2Value(_document.getCalculatedListCodeName());
        container countryRegions = listCodeDictEnum.value2CountryRegionCodes(listCodeEnum);
        if (listCodeEnum == DictEnum::ConversionFailedValue
            || (countryRegions
                && !SysCountryRegionCode::isLegalEntityInCountryRegion(countryRegions)))
        {
            warning(strFmt("@EUSalesListCommon:InvalidListCode", _document.getCalculatedListCodeName()));
        }
        else if (listCodeEnum != _document.getListCode())
        {
            _document.setListCode(listCodeEnum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if this activity should be skipped for document; otherwise, false.</returns>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        return super(_document) || !TaxIntegrationListCodeActivityOnDocument::shouldProcessListCode(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessListCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if should apply the process to process list code.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    /// <returns>true if list code should be processed and set to document object, otherwise false.</returns>
    [Replaceable]
    protected static boolean shouldProcessListCode(TaxIntegrationDocumentObject _document)
    {
        if (!_document.getCalculatedListCodeName())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>