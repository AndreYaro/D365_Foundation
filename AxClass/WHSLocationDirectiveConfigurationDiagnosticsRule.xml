<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveConfigurationDiagnosticsRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationDirectiveConfigurationDiagnosticsRule</c> class is used to check whether any location directives are setup inefficiently,
/// which could lead to sub-optimal performance when creating work.
/// </summary>
/// <remarks>
/// For all work type "pick" If loc directive action has "Fixed and non-fixed locations" and fixed locations are defined, an action with "Fixed locations" must exist with a lower sequence number
/// Sales order and Transfer order Pick location directives should have more than one location directive line
/// </remarks>
[DiagnosticsRuleAttribute]
public final class WHSLocationDirectiveConfigurationDiagnosticsRule implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether any location directives are setup inefficiently.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::SCM, "@WAX:WHSLocationDirectiveConfigurationDiagnosticsRuleName", DiagnosticsRunFrequency::Monthly, "@WAX:LocationDirectiveConfigDiagRule_Description")]
    public DiagnosticsRuleValidationResult validate()
    {
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();

        this.validatePickLocationDirectiveActionFixedLocationLowerSeqNum(validationResult);
        this.validatePickLocationDirectiveActionFixedVariantLocationLowerSeqNum(validationResult);
        this.validatePickLocationDirectiveHasMoreThanOneLine(validationResult);
       
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickLocationDirectiveActionFixedLocationLowerSeqNum</Name>
				<Source><![CDATA[
    private void validatePickLocationDirectiveActionFixedLocationLowerSeqNum(DiagnosticsRuleValidationResult _validationResult)
    {
        WHSLocDirTable          locationDirective;
        WHSLocDirLine           locationDirectiveLine;
        WHSLocDirAction         locationDirectiveActionFixedLoc;
        WHSLocDirAction         locationDirectiveActionFixedAndNonFixedLoc;
        WHSInventFixedLocation  fixedLocation;
        boolean                 errorsFound;
        
        container workTransTypes = WhsWorkTransactionType::workTransTypesForOutboundShipment();

        while select crosscompany DataAreaId, InventLocationId, WorkTransType, LocDirName from locationDirective
            where locationDirective.WorkType == WHSWorkType::Pick
               && locationDirective.WorkTransType in workTransTypes
            join LocSeqNum from locationDirectiveLine
                where locationDirectiveLine.DataAreaId == locationDirective.DataAreaId
                    && locationDirectiveLine.RefRecId == locationDirective.RecId
            exists join fixedLocation
                where fixedLocation.DataAreaId == locationDirective.DataAreaId
                    && fixedLocation.InventLocationId == locationDirective.InventLocationId
                exists join locationDirectiveActionFixedAndNonFixedLoc
                    where locationDirectiveActionFixedAndNonFixedLoc.DataAreaId == locationDirectiveLine.DataAreaId
                        && locationDirectiveActionFixedAndNonFixedLoc.RefRecId == locationDirectiveLine.RecId
                        && locationDirectiveActionFixedAndNonFixedLoc.UseInventFixedLocation == WHSUseFixedLocations::Any
                notexists join locationDirectiveActionFixedLoc
                    where locationDirectiveActionFixedLoc.DataAreaId == locationDirectiveLine.DataAreaId
                        && locationDirectiveActionFixedLoc.RefRecId == locationDirectiveLine.RecId
                        && locationDirectiveActionFixedLoc.UseInventFixedLocation == WHSUseFixedLocations::ProductFixed
                        && locationDirectiveActionFixedLoc.SequenceNum < locationDirectiveActionFixedAndNonFixedLoc.SequenceNum
        {
            if (!errorsFound)
            {
                _validationResult.addValidationResult("@WAX:LocationDirectiveConfigMissFixedLocActionDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Low, "@WAX:LocationDirectiveConfigFixedLocDiagRule_Recommendation");
                errorsFound = true;
            }

            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, DataAreaId), locationDirective.DataAreaId);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, WorkTransType), enum2Str(locationDirective.WorkTransType));
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, LocDirName), locationDirective.LocDirName);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, InventLocationId), locationDirective.InventLocationId);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirLine, LocSeqNum), int2Str(locationDirectiveLine.LocSeqNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickLocationDirectiveActionFixedVariantLocationLowerSeqNum</Name>
				<Source><![CDATA[
    private void validatePickLocationDirectiveActionFixedVariantLocationLowerSeqNum(DiagnosticsRuleValidationResult _validationResult)
    {
        WHSLocDirTable                  locationDirective;
        WHSLocDirLine                   locationDirectiveLine;
        WHSLocDirAction                 locationDirectiveActionFixedLoc;
        WHSLocDirAction                 locationDirectiveActionFixedAndNonFixedLoc;
        WHSProductVariantFixedLocation  fixedLocVariant;
        boolean                         errorsFound;
        
        container workTransTypes = WhsWorkTransactionType::workTransTypesForOutboundShipment();

        while select crosscompany DataAreaId, InventLocationId, WorkTransType, LocDirName from locationDirective
            where locationDirective.WorkType == WHSWorkType::Pick
               && locationDirective.WorkTransType in workTransTypes
            join LocSeqNum from locationDirectiveLine
                where locationDirectiveLine.DataAreaId == locationDirective.DataAreaId
                    && locationDirectiveLine.RefRecId == locationDirective.RecId
            exists join fixedLocVariant
                where fixedLocVariant.DataAreaId == locationDirective.DataAreaId
                    && fixedLocVariant.InventLocationId == locationDirective.InventLocationId
                exists join locationDirectiveActionFixedAndNonFixedLoc
                    where locationDirectiveActionFixedAndNonFixedLoc.DataAreaId == locationDirectiveLine.DataAreaId
                        && locationDirectiveActionFixedAndNonFixedLoc.RefRecId == locationDirectiveLine.RecId
                        && locationDirectiveActionFixedAndNonFixedLoc.UseInventFixedLocation == WHSUseFixedLocations::Any
                notexists join locationDirectiveActionFixedLoc
                    where locationDirectiveActionFixedLoc.DataAreaId == locationDirectiveLine.DataAreaId
                        && locationDirectiveActionFixedLoc.RefRecId == locationDirectiveLine.RecId
                        && locationDirectiveActionFixedLoc.UseInventFixedLocation == WHSUseFixedLocations::ProductVariantFixed
                        && locationDirectiveActionFixedLoc.SequenceNum < locationDirectiveActionFixedAndNonFixedLoc.SequenceNum
        {
            if (!errorsFound)
            {
                _validationResult.addValidationResult("@WAX:LocationDirectiveConfigMissFixedVariantLocActionDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Low, "@WAX:LocationDirectiveConfigFixedLocDiagRule_Recommendation");
                errorsFound = true;
            }

            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, DataAreaId), locationDirective.DataAreaId);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, WorkTransType), enum2Str(locationDirective.WorkTransType));
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, LocDirName), locationDirective.LocDirName);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, InventLocationId), locationDirective.InventLocationId);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirLine, LocSeqNum), int2Str(locationDirectiveLine.LocSeqNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickLocationDirectiveHasMoreThanOneLine</Name>
				<Source><![CDATA[
    private void validatePickLocationDirectiveHasMoreThanOneLine(DiagnosticsRuleValidationResult _validationResult)
    {
        WHSLocDirTable          locationDirective;
        WHSLocDirLine           locationDirectiveLine;
        boolean                 errorsFound;
        
        container workTransTypes = WhsWorkTransactionType::workTransTypesForOutboundShipment();

        while select crosscompany DataAreaId, InventLocationId, WorkTransType, LocDirName from locationDirective
            group by DataAreaId, InventLocationId, WorkTransType, LocDirName, RecId
            where locationDirective.WorkType == WHSWorkType::Pick
               && locationDirective.WorkTransType in workTransTypes
            join count(RecId) from locationDirectiveLine
                where locationDirectiveLine.DataAreaId == locationDirective.DataAreaId
                    && locationDirectiveLine.RefRecId == locationDirective.RecId
        {
            if (locationDirectiveLine.RecId > 1)
            {
                continue;
            }

            if (!errorsFound)
            {
                _validationResult.addValidationResult("@WAX:LocationDirectiveConfigOnlyOneLineDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Low, "@WAX:LocationDirectiveConfigOnlyOneLineDiagRule_Recommendation");
                errorsFound = true;
            }

            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, DataAreaId), locationDirective.DataAreaId);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, WorkTransType), enum2Str(locationDirective.WorkTransType));
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, LocDirName), locationDirective.LocDirName);
            _validationResult.addValidationDetail(fieldPName(WHSLocDirTable, InventLocationId), locationDirective.InventLocationId);
            _validationResult.addValidationDetail("@WAX:LocationDirectiveLineCount", int642Str(locationDirectiveLine.RecId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>