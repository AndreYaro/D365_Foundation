<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRichMediaHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailRichMediaHelper</c> class is a helper for rich media.
/// </summary>
public class RetailRichMediaHelper
{
    #define.DavWWWRootSegment('DavWWWRoot/')
    #define.UncPathPrefixFormat('\\\\\%1@\%2\\DavWWWRoot\%3')
    #define.SlashChar('/')
    #define.BackslashChar('\\')
    #define.Http('http')
    #define.Https('https')
    #define.WebDavUncPathMinSegmentCount(2)
    #define.AtChar('@')
    #define.HttpDefaultPort(80)
    #define.HttpsDefaultPort(443)
    #define.DefaultPort(-1)
    #define.NetExe('net.exe')
    #define.NetworkDriveTimeoutMilliseconds(10000)
    #define.ProductNumber("ProductNumber")
    #define.CatalogName("CatalogName")
    #define.ChannelNameKey("ChannelName")
    #define.ChannelNameValue("")
    #define.CustomerNumber("CustomerNumber")
    #define.WorkerNumber("WorkerNumber")
    #define.CategoryHierarchyName('CategoryHierarchyName')
    #define.CategoryPath('CategoryPath')
    #define.LanguageId('LanguageId')

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertAbsoluteFilePathToRelativeUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert absolute file path to relative URL.
    /// </summary>
    /// <param name="_absoluteFilePath">
    /// The absolute file path.
    /// </param>
    /// <param name="_baseDirectory">
    /// The base directory.
    /// </param>
    /// <returns>
    /// The relative URL if the absolute file path is under the given base directory, otherwise empty.
    /// </returns>
    public static str convertAbsoluteFilePathToRelativeUrl(str _absoluteFilePath, str _baseDirectory)
    {
        System.String relativePath, relativeUrl;

        if (!strEndsWith(_baseDirectory, #BackSlashChar))
        {
            _baseDirectory += #BackSlashChar;
        }
        if (strStartsWith(_absoluteFilePath, _baseDirectory))
        {
            relativePath = subStr(_absoluteFilePath, strLen(_baseDirectory) + 1, strLen(_absoluteFilePath) - strLen(_baseDirectory));
            relativeUrl = relativePath.Replace(#BackSlashChar, #SlashChar);
            return System.Web.HttpUtility::UrlPathEncode(relativeUrl);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRelativeUrlToFilePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the relative URL to file path.
    /// </summary>
    /// <param name="_relativeUrl">
    /// The relative URL.
    /// </param>
    /// <returns>
    /// The file path.
    /// </returns>
    public static str convertRelativeUrlToFilePath(str _relativeUrl)
    {
        System.String decodedRelativeUrl = System.Web.HttpUtility::UrlDecode(_relativeUrl);
        return decodedRelativeUrl.Replace(#SlashChar, #BackSlashChar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWebDavUncPathToUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert WebDAV UNC path to URL.
    /// </summary>
    /// <param name="_uncPath">
    /// The UNC path.
    /// </param>
    /// <param name="_scheme">
    /// The schema.
    /// </param>
    /// <param name="_baseUrl">
    /// The base URL.
    /// </param>
    /// <returns>
    /// The relative URL if the base URL is the base of the converted URL, otherwise the absolute URL.
    /// </returns>
    public static str convertWebDavUncPathToUrl(str _uncPath, str _scheme, System.Uri _baseUrl)
    {
        System.Uri uncPath;
        System.UriBuilder uriBuilder;
        boolean isValidUri;
        System.String[] segments;
        int segmentCount;
        str secondSegment;
        str urlPath;
        int uncPathLength;
        int portBeginPosition;
        int portEndPosition;
        str portSegment;
        int portSegmentLength;
        boolean hasPort;
        System.Int32 portInt32;
        int port;
        str url;
        str baseUrl;

        // Extract port if exists
        uncPathLength = strLen(_uncPath);
        portBeginPosition = strScan(_uncPath, #AtChar, 1, uncPathLength);
        if (portBeginPosition && portBeginPosition < uncPathLength)
        {
            portEndPosition = strScan(_uncPath, #BackslashChar, portBeginPosition + 1, uncPathLength - portBeginPosition);
            if (portEndPosition)
            {
                portSegmentLength = portEndPosition - portBeginPosition - 1;
            }
            else
            {
                portSegmentLength = uncPathLength - portBeginPosition;
            }
            if (portSegmentLength > 0)
            {
                portSegment = subStr(_uncPath, portBeginPosition + 1, portSegmentLength);
                hasPort = System.Int32::TryParse(portSegment, byref portInt32);
                if (hasPort)
                {
                    port = portInt32;
                    if (portEndPosition)
                    {
                        _uncPath = subStr(_uncPath, 1, portBeginPosition - 1) + subStr(_uncPath, portEndPosition, uncPathLength - portEndPosition + 1);
                    }
                    else
                    {
                        _uncPath = subStr(_uncPath, 1, portBeginPosition - 1);
                    }
                }
            }
        }

        isValidUri = System.Uri::TryCreate(_uncPath, System.UriKind::Absolute, byRef uncPath);
        if (!isValidUri || !uncPath.get_IsUnc())
        {
            return '';
        }

        segments = uncPath.get_Segments();
        segmentCount = segments.get_Length();

        if (segmentCount < #WebDavUncPathMinSegmentCount)
        {
            return '';
        }

        // First segment is always '/'
        secondSegment = segments.get_Item(1);
        if (secondSegment != #DavWWWRootSegment)
        {
            return '';
        }

        uriBuilder = new System.UriBuilder(uncPath);
        uriBuilder.set_Scheme(_scheme);
        if (hasPort && port != RetailRichMediaHelper::getDefaultPort(_scheme))
        {
            uriBuilder.set_Port(port);
        }

        urlPath = System.String::Join('', segments, #WebDavUncPathMinSegmentCount, segmentCount - #WebDavUncPathMinSegmentCount);
        uriBuilder.set_Path(urlPath);

        url = uriBuilder.ToString();
        if (!CLRInterop::isNull(_baseUrl))
        {
            baseUrl = _baseUrl.get_AbsoluteUri();
            if (strScan(url, baseUrl, 1, 1) == 1)
            {
                url = subStr(url, strLen(baseUrl) + 1, strLen(url) - strLen(baseUrl));
                if (strScan(url, #SlashChar, 1, 1) == 1)
                {
                    url = subStr(url, strLen(#SlashChar) + 1, strLen(url) - strLen(#SlashChar));
                }
            }
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWebDavUrlToUncPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert WebDAV URL to UNC path.
    /// </summary>
    /// <param name="_url">
    /// The URL.
    /// </param>
    /// <returns>
    /// The UNC path.
    /// </returns>
    public static str convertWebDavUrlToUncPath(System.Uri _url)
    {
        System.String urlAbsolutePath;
        str host;
        int port;
        str filePath;

        host = _url.get_Host();
        port = _url.get_Port();
        urlAbsolutePath = System.Web.HttpUtility::UrlDecode(_url.get_AbsolutePath());

        filePath = urlAbsolutePath.Replace(#SlashChar, #BackslashChar);
        return strFmt(#UncPathPrefixFormat, host, port, filePath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DisconnectNetworkDrive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disconnect network drive.
    /// </summary>
    /// <param name="_driveLetter">
    /// The drive letter.
    /// </param>
    public static void DisconnectNetworkDrive(str _driveLetter)
    {
        str arguments = strFmt(@'use %1: /delete', _driveLetter);
        RetailRichMediaHelper::executeCommandLine(RetailRichMediaHelper::getNetExePath(), arguments, #NetworkDriveTimeoutMilliseconds, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeCommandLine</Name>
				<Source><![CDATA[
    private static int executeCommandLine(str _fileName, str _arguments, int _waitForExitMilliseconds, boolean _ignoreStandardError = false)
    {
        boolean isExited;
        int exitCode = -1;
        System.Exception clrException, innerClrException;
        System.Diagnostics.ProcessStartInfo processStartInfo;
        System.IO.StreamReader streamReader;
        str standardErrorMessage;

        try
        {
            using (System.Diagnostics.Process process = new System.Diagnostics.Process())
            {
                processStartInfo = process.get_StartInfo();

                processStartInfo.set_FileName(_fileName);
                processStartInfo.set_Arguments(_arguments);
                processStartInfo.set_CreateNoWindow(true);
                processStartInfo.set_UseShellExecute(false);
                if (!_ignoreStandardError)
                {
                    processStartInfo.set_RedirectStandardError(true);
                }

                process.Start();

                if (!_ignoreStandardError)
                {
                    streamReader = process.get_StandardError();
                    standardErrorMessage = streamReader.ReadToEnd();
                }

                isExited = process.WaitForExit(_waitForExitMilliseconds);
                if (isExited)
                {
                    exitCode = process.get_ExitCode();
                }
                else
                {
                    process.Kill();
                }
            }
        }
        catch (Exception::CLRError)
        {
            clrException = ClrInterop::getLastException();
            if (!CLRInterop::isNull(clrException))
            {
                eventSource.EventWriteMerchandisingGenericClrException(classStr(RetailRichMediaHelper), funcName(), 'inner type unknonw');

                innerClrException = clrException.get_InnerException();
                if (!CLRInterop::isNull(innerClrException))
                {
                    eventSource.EventWriteMerchandisingGenericClrException(classStr(RetailRichMediaHelper), funcName(), 'sub-inner type unknown');
                    error(clrException.ToString());
                    throw error(innerClrException.ToString());
                }
                else
                {
                    throw error(clrException.ToString());
                }
            }
        }

        if (exitCode && standardErrorMessage && !_ignoreStandardError)
        {
            error(standardErrorMessage);
        }

        return exitCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandUrlTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns expanded url template.
    /// </summary>
    /// <param name="_urlTemplate">
    /// url string to expand.
    /// </param>
    /// <param name="_map">
    /// url template map.
    /// </param>
    /// <returns>
    /// Expanded url template.
    /// </returns>
    public static str expandUrlTemplate(str _urlTemplate, Map _map)
    {
        str s = _urlTemplate;
        MapEnumerator mi;

        if (!_map)
        {
            return s;
        }

        mi = new MapEnumerator(_map);

        while (mi.moveNext())
        {
            s = strReplace(s, strFmt('{%1}', mi.currentKey()), mi.currentValue());
        }
        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPort</Name>
				<Source><![CDATA[
    private static int getDefaultPort(str _scheme)
    {
        switch (strLwr(_scheme))
        {
            case #Http:
                return #HttpDefaultPort;
            case #Https:
                return #HttpsDefaultPort;
            default:
                return #DefaultPort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastUnusedDriveLetter</Name>
				<Source><![CDATA[
    private static str getLastUnusedDriveLetter(str _LastLetter = 'Z')
    {
        System.String[] usedDrives = System.Environment::GetLogicalDrives();
        int usedDriveCount = usedDrives.get_Length();
        int i, intFirst, intLast, intLetter;
        System.Char char, charFirst, charLast;
        str letter, drive, usedDrive;
        boolean used;

        charFirst = System.Char::Parse('A');
        intFirst = System.Convert::ToInt32(charFirst);

        charLast = System.Char::Parse(_LastLetter);
        intLast = System.Convert::ToInt32(charLast);

        for (intLetter = intLast; intLetter >= intFirst; intLetter--)
        {
            char = System.Convert::ToChar(intLetter);
            letter = char.ToString();
            drive = letter + @':\';

            used = false;
            for (i = 0; i < usedDriveCount; i++)
            {
                usedDrive = usedDrives.GetValue(i);
                if (drive == usedDrive)
                {
                    used = true;
                    break;
                }
            }

            if (!used)
            {
                return letter;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetExePath</Name>
				<Source><![CDATA[
    private static str getNetExePath()
    {
        str systemDirectory = System.Environment::get_SystemDirectory();
        return strFmt(@"%1\%2", systemDirectory, #NetExe);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRichMediaEditFormMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the menu item name for rich media edit form.
    /// </summary>
    /// <param name="_richMediaType">
    /// The rich media type.
    /// </param>
    /// <returns>
    /// The rich media edit form.
    /// </returns>
    public static str getRichMediaEditFormMenuItemName(RetailRichMediaType _richMediaType)
    {
        switch (_richMediaType)
        {
            case RetailRichMediaType::Html:
                return menuItemDisplayStr(RetailRichTextAttributeValue);
            case RetailRichMediaType::Images:
                return menuItemDisplayStr(RetailImagesAttributeValue);
            case RetailRichMediaType::Videos:
                return menuItemDisplayStr(RetailVideosAttributeValue);
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Url template map for default attribute group.
    /// </summary>
    /// <param name="_keyValue">
    /// A key value.
    /// </param>
    /// <param name="_stringToEncode">
    /// A string to encode.
    /// </param>
    /// <returns>
    /// A map template for default attribute group.
    /// </returns>
    public static Map getUrlTemplateMap(str _keyValue, str _stringToEncode)
    {
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::initializeUrlTemplateMap();

        urlTemplateMap.insert(_keyValue, RetailRichMediaHelper::urlPathEncode(_stringToEncode));

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMapByCatalog</Name>
				<Source><![CDATA[
/// <summary>
    /// Url template map for default catalog attribute group.
    /// </summary>
    /// <param name="_catalogTranslation">
    /// A record of <c>CatalogTranslation</c> table.
    /// </param>
    /// <returns>
    /// A map template for default catalog.
    /// </returns>
    public static Map getUrlTemplateMapByCatalog(CatalogTranslation _catalogTranslation)
    {
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMap(#CatalogName, _catalogTranslation.FriendlyName);
        urlTemplateMap.insert(#ChannelNameKey, #ChannelNameValue);

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMapByCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Url template map for default product attribute group.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// A record of EcoResCategory table.
    /// </param>
    /// <returns>
    /// A map template for category hierarchy name and category path.
    /// </returns>
    public static Map getUrlTemplateMapByCategory(EcoResCategory _ecoResCategory)
    {
        EcoResCategory ecoResCategory;
        EcoResCategoryName categoryPath;
        EcoResCategoryName selectedCategory = _ecoResCategory.Name;
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::initializeUrlTemplateMap();

        urlTemplateMap.insert(#CategoryHierarchyName, RetailRichMediaHelper::urlPathEncode(EcoResCategoryHierarchy::find(_ecoResCategory.CategoryHierarchy).Name));

        //Get ascendants for selected category.
        ecoResCategory = _ecoResCategory.getAscendants();
        while (ecoResCategory)
        {
            categoryPath += RetailRichMediaHelper::urlPathEncode(ecoResCategory.Name) + #SlashChar;
            next ecoResCategory;
        }
        categoryPath += RetailRichMediaHelper::urlPathEncode(selectedCategory); // it's needed to add selected category name as well.

        urlTemplateMap.insert(#CategoryPath, categoryPath);

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMapByCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Url template map for default customer attribute group.
    /// </summary>
    /// <param name="_custTable">
    /// A record of <c>CustTable</c> table.
    /// </param>
    /// <returns>
    /// A map template for default customer.
    /// </returns>
    public static Map getUrlTemplateMapByCustomer(CustTable _custTable)
    {
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMap(#CustomerNumber, _custTable.AccountNum);

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMapByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Url template map for default product attribute group.
    /// </summary>
    /// <param name="_ecoResProduct">
    /// A record of EcoResProduct table.
    /// </param>
    /// <returns>
    /// A map template for default product.
    /// </returns>
    public static Map getUrlTemplateMapByProduct(EcoResProduct _ecoResProduct)
    {
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMap(#ProductNumber, _ecoResProduct.DisplayProductNumber);

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrlTemplateMapByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Url template map for default worker attribute group.
    /// </summary>
    /// <param name="_retailStaffTable">
    /// A record of <c>RetailStaffTable</c> table.
    /// </param>
    /// <returns>
    /// A map template for default worker.
    /// </returns>
    public static Map getUrlTemplateMapByWorker(RetailStaffTable _retailStaffTable)
    {
        Map urlTemplateMap;

        urlTemplateMap = RetailRichMediaHelper::getUrlTemplateMap(#WorkerNumber, _retailStaffTable.staffId);

        return urlTemplateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUrlTemplateMap</Name>
				<Source><![CDATA[
    private static Map initializeUrlTemplateMap()
    {
        Map map = new Map(Types::String, Types::String);

        map.insert(#LanguageId, RetailRichMediaHelper::urlPathEncode(CompanyInfo::find().LanguageId));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRelativeUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether a string is a relative URL.
    /// </summary>
    /// <param name="_s">
    /// The string.
    /// </param>
    /// <returns>
    /// True if the string is a relative URL, false otherwiseu.
    /// </returns>
    public static boolean isRelativeUrl(str _s)
    {
        System.Uri url;

        if (!System.Uri::TryCreate(_s, System.UriKind::Relative, byRef url))
        {
            return false;
        }

        if (strFind(_s, @":\#", 1, strLen(_s)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapNetworkDrive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map network drive.
    /// </summary>
    /// <param name="_url">
    /// The URL.
    /// </param>
    /// <returns>
    /// The network driver letter if mapped successfully, otherwise empty.
    /// </returns>
    public static str mapNetworkDrive(str _url)
    {
        str driveLetter;
        str arguments;
        int exitCode;
        int lines;

        driveLetter = RetailRichMediaHelper::getLastUnusedDriveLetter();
        lines = infologLine();
        if (driveLetter)
        {
            arguments = strFmt(@'use %1: "%2"', driveLetter, _url);
            exitCode = RetailRichMediaHelper::executeCommandLine(RetailRichMediaHelper::getNetExePath(), arguments, #NetworkDriveTimeoutMilliseconds);
            if (!exitCode)
            {
                return driveLetter;
            }
            else if (exitCode == 2) // net.exe use  error "System error 67 has occurred. The network name cannot be found."
            {
               infolog.clear(lines); // remove system error
               error("@REX4040258");
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>urlPathEncode</Name>
				<Source><![CDATA[
    private static str urlPathEncode(str _stringToEncode)
    {
        #define.escapeChar('^')
        System.String escapedString;
        str encodedString;

        escapedString = _stringToEncode;

        // check for special characters \/:*?"<>| for string to encode.
        escapedString = strReplace(escapedString, '\\', #escapeChar);
        escapedString = strReplace(escapedString, '/', #escapeChar);
        escapedString = strReplace(escapedString, ':', #escapeChar);
        escapedString = strReplace(escapedString, '*', #escapeChar);
        escapedString = strReplace(escapedString, '?', #escapeChar);
        escapedString = strReplace(escapedString, '"', #escapeChar);
        escapedString = strReplace(escapedString, '<', #escapeChar);
        escapedString = strReplace(escapedString, '>', #escapeChar);
        escapedString = strReplace(escapedString, '|', #escapeChar);

        encodedString = System.Web.HttpUtility::UrlPathEncode(escapedString);

        return encodedString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>