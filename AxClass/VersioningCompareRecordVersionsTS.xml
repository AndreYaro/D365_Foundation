<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareRecordVersionsTS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VersioningCompareRecordVersionsTS</c> is used to identify changes between two records from the same table.
/// </summary>
/// <remarks>
/// The class is used by the <c>VersioningCompare</c> class which will compare two versions of a document supporting the history pattern.
/// </remarks>
class VersioningCompareRecordVersionsTS extends VersioningCompareRecordVersions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChangedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds changes for a record to the list of combined changes.
    /// </summary>
    /// <param name="_changeType">
    /// A <c>VersionChangeType</c> enumeration value that specifies the <c>Modified</c>, <c>Added</c>,
    /// <c>Removed</c>, or <c>NoChange</c> value.
    /// </param>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <param name="_tableName">
    /// The name of the table where record has changed.
    /// </param>
    /// <param name="_sysDictField">
    /// A <c>SysDictField</c> field that should be checked if changes exists.
    /// </param>
    /// <param name="_arrayIdx">
    /// The array index of the field specified in the <paramref name="_fieldName" /> value.
    /// </param>
    /// <param name="_changeList">
    /// The list of changes for a given table.
    /// </param>
    /// <param name="_dictFieldGroup">
    /// A <c>DictFieldGroup</c> instance for the auto report field group.
    /// </param>
    /// <returns>
    /// The list of changes for a given table.
    /// </returns>
    protected container addChangedField(VersioningChangeType    _changeType,
                                        Common                  _origCommon,
                                        Common                  _newCommon,
                                        TableName               _tableName,
                                        SysDictField            _sysDictField,
                                        Counter                 _arrayIdx,
                                        container               _changeList,
                                        DictFieldGroup          _dictFieldGroup)
    {
        str         fieldLabel;
        FieldName   fieldName = _sysDictField.name();
        Types       fieldBaseType = _sysDictField.baseType();

        switch (fieldName)
        {
            case 'ExternalComments':
            case strFmt('ExternalComments[%1]', int2str(_arrayIdx)):
                fieldLabel = this.setDays(_origCommon, _arrayIdx) + '_ExternalComments';
                break;

            case 'Hours':
            case strFmt('Hours[%1]', int2str(_arrayIdx)):
                fieldLabel = this.setDays(_origCommon, _arrayIdx);
                break;

            case 'InternalComments':
            case strFmt('InternalComments[%1]', int2str(_arrayIdx)):
                fieldLabel = this.setDays(_origCommon, _arrayIdx) + '_InternalComments';
                break;

            default:
                fieldLabel = '';
                break;
        }

        switch (_changeType)
        {
            case VersioningChangeType::Updated:
                if (_origCommon.getFieldValue(fieldName, _arrayIdx) != _newCommon.getFieldValue(fieldName, _arrayIdx))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            this.getFieldValue(_origCommon, _sysDictField, _arrayIdx),
                                                            this.getFieldValue(_newCommon , _sysDictField, _arrayIdx),
                                                            fieldLabel);
                    }
                }
                break;

            case VersioningChangeType::Inserted:
                if ((fieldBaseType == Types::Enum || _newCommon.getFieldValue(fieldName, _arrayIdx)) && this.isFieldInAutoReportFieldGroup(tableName2id(_tableName), fieldName, _dictFieldGroup))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            0,
                                                            this.getFieldValue(_newCommon , _sysDictField, _arrayIdx),
                                                            fieldLabel);
                    }
                }
                break;

            case VersioningChangeType::Deleted:
                if ((fieldBaseType == Types::Enum || _origCommon.getFieldValue(fieldName, _arrayIdx)) && this.isFieldInAutoReportFieldGroup(tableName2id(_tableName), fieldName, _dictFieldGroup))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            this.getFieldValue(_origCommon, _sysDictField, _arrayIdx),
                                                            0,
                                                            fieldLabel);
                    }
                }
                break;
        }

        return _changeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a week day for the timesheet period of a specific record in TSTimesheetLineLog with a particular array index
    /// </summary>
    /// <param name="tsTimesheetLineLog">
    /// A <c>TSTimesheetLineLog</c> is a record of TSTimesheetLineLog
    /// </param>
    /// <param name="_arrayIdx">
    /// The array index of the field.
    /// </param>
    /// <returns>
    /// The string of the week day.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str setDays(TSTimesheetLineLog tsTimesheetLineLog, Counter _arrayIdx)
    {
        Array days;
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        select firstOnly PeriodId, PeriodFrom, PeriodTo from projPeriodTimesheetWeek where
            projPeriodTimesheetWeek.RecId == tsTimesheetLineLog.ProjPeriodTimesheetWeek;

        days = TSPeriods::getLineWeekDates(ProjPeriodTable::find(projPeriodTimesheetWeek.PeriodId).WeekStart, projPeriodTimesheetWeek.PeriodFrom, projPeriodTimesheetWeek.PeriodTo);

        return TSPeriods::getDateCaption(any2date(days.value(_arrayIdx)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static VersioningCompareRecordVersionsTS construct()
    {
        return new VersioningCompareRecordVersionsTS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>VersioningCompareRecordVersionsTS</c> class based on the table.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the table.
    /// </param>
    /// <returns>
    /// An instance of the <c>VersioningCompareRecordVersionsTS</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VersioningCompareRecordVersionsTS newTableId(tableId _tableId)
    {
        VersioningCompareRecordVersionsTS versioningCompareRecordVersionsTS;

        versioningCompareRecordVersionsTS = VersioningCompareRecordVersionsTS::construct();
        versioningCompareRecordVersionsTS.parmTableId(_tableId);

        return versioningCompareRecordVersionsTS;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>