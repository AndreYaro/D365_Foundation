<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineDataBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadLineDataBuilder</c> class can be used to build datastructures that holds information from the <c>WHSLoadLine</c> lines.
/// </summary>
public class WHSLoadLineDataBuilder
{
    Map mapLoadLinesOpenQty;
    Map mapLoadLinesOpenWorkQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillOpenQuantitiesPerDimensionMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the open quantities and the open work quantities per inventory dimensions from the load lines in the maps.
    /// </summary>
    /// <param name="_inventTransId">
    /// An <c>InventTransId</c> ID that will be used to search for load lines.
    /// </param>
    /// <param name="_onlyCheckWork">
    /// Determines if we only need to check for conflict with work created qty instead of doing full check.
    /// </param>
    public void fillOpenQuantitiesPerDimensionMaps(
        InventTransId   _inventTransId,
        boolean         _onlyCheckWork)
    {
        WHSLoadLine     whsLoadLine;

        if (mapLoadLinesOpenQty == null)
        {
            this.initMapLoadLinesOpenQty();
        }

        if (mapLoadLinesOpenWorkQty == null)
        {
            this.initMapLoadLinesOpenWorkQty();
        }

        //build structures of loadlines dimensions and open and open work quantities
        while select sum(InventQty), sum(PickedQty), sum(WorkCreatedQty) from whsLoadLine
            group by whsLoadLine.inventDimId
            where whsLoadLine.InventTransId == _inventtransId
            &&    whsLoadLine.InventQty     > whsLoadLine.PickedQty //only include open lines
        {
            InventQty openQty     = whsLoadLine.InventQty         - whsLoadLine.PickedQty;
            InventQty openWorkQty = whsLoadLine.WorkCreatedQty    - whsLoadLine.PickedQty;

            if (this.mustIncludeOpenWorkQty(openWorkQty, whsLoadLine.inventDimId, _inventTransId))
            {
                mapLoadLinesOpenWorkQty.insert(whsLoadLine.inventDimId, openWorkQty);
            }
            if (!_onlyCheckWork && this.mustIncludeOpenQty(openQty, whsLoadLine.inventDimId, _inventTransId))
            {
                mapLoadLinesOpenQty.insert(whsLoadLine.inventDimId, openQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeOpenWorkQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the open work quantity must be included.
    /// </summary>
    /// <param name = "_openWorkQty">The open work quantity.</param>
    /// <param name = "_inventDimId">The inventory dimension ID.</param>
    /// <param name = "_inventTransId">The inventory transaction the quantity is associated with.</param>
    /// <returns>true if it must be included; otherwise, false.</returns>
    protected boolean mustIncludeOpenWorkQty(InventQty _openWorkQty, InventDimId _inventDimId, InventTransId _inventTransId)
    {
        return _openWorkQty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeOpenQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the open quantity must be included.
    /// </summary>
    /// <param name = "_openQty">The open quantity.</param>
    /// <param name = "_inventDimId">The inventory dimension ID.</param>
    /// <param name = "_inventTransId">The inventory transaction the quantity is associated with.</param>
    /// <returns>true if it must be included; otherwise, false.</returns>
    protected boolean mustIncludeOpenQty(InventQty _openQty, InventDimId _inventDimId, InventTransId _inventTransId)
    {
        return _openQty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCrossDockOpportunityMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the cross dock quantity on the correct dimension and the remaining quantity from the load line in the map.
    /// </summary>
    /// <param name = "_crossDockOpportunity">
    /// The <c>WHSCrossDockOpportunity</c> record that is being processed.
    /// </param>
    /// <param name = "_supplyInventDimId">
    /// The supply dimension ID with above location dimensions.
    /// </param>
    public void fillCrossDockOpportunityMap(
        WHSCrossDockOpportunity _crossDockOpportunity,
        InventDimId             _supplyInventDimId)
    {
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_crossDockOpportunity.LoadLine);

        if (mapLoadLinesOpenQty == null)
        {
            this.initMapLoadLinesOpenQty();
        }

        if ((loadLine.InventQty - _crossDockOpportunity.CrossDockQuantity) != 0)
        {
            mapLoadLinesOpenQty.insert(loadLine.InventDimId, (loadLine.InventQty - _crossDockOpportunity.CrossDockQuantity));
        }

        mapLoadLinesOpenQty.insert(_supplyInventDimId, _crossDockOpportunity.CrossDockQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapLoadLinesOpenQty</Name>
				<Source><![CDATA[
    private void initMapLoadLinesOpenQty()
    {
        mapLoadLinesOpenQty = new Map(Types::String,Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapLoadLinesOpenWorkQty</Name>
				<Source><![CDATA[
    private void initMapLoadLinesOpenWorkQty()
    {
        mapLoadLinesOpenWorkQty = new Map(Types::String,Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapLoadLinesOpenQty</Name>
				<Source><![CDATA[
    public Map parmMapLoadLinesOpenQty(Map _mapLoadLinesOpenQty = mapLoadLinesOpenQty)
    {
        mapLoadLinesOpenQty = _mapLoadLinesOpenQty;

        return mapLoadLinesOpenQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapLoadLinesOpenWorkQty</Name>
				<Source><![CDATA[
    public Map parmMapLoadLinesOpenWorkQty(Map _mapLoadLinesOpenWorkQty = mapLoadLinesOpenWorkQty)
    {
        mapLoadLinesOpenWorkQty = _mapLoadLinesOpenWorkQty;

        return mapLoadLinesOpenWorkQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLoadLineDataBuilder construct()
    {
        return new WHSLoadLineDataBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>