<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAbstractDataRetrievalTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAbstractDataRetrievalTemplate</c> class is an abstract templete for data retrieval.
/// </summary>
public abstract class TaxIntegrationAbstractDataRetrievalTemplate
    extends TaxIntegrationAbstractTemplate
{
    private TaxIntegrationDataRetrievalContext context;
    private const str AddressObjectCacheTypeShipmentOrigin = 'org';
    private const str AddressObjectCacheTypeShipmentDestination = 'dst';

    /// <summary>
    /// The current <c>MarkupTrans</c> of the document.
    /// </summary>
    protected MarkupTrans markupTransOfDocument;
    /// <summary>
    /// The current <c>MarkupTrans</c> of the current line.
    /// </summary>
    protected MarkupTrans markupTransOfLine;

    internal protected boolean isTaxIntegrationEnabledForTaxSolutionProvider;
    internal protected boolean isTaxIntegrationDataRetrievalSetDocumentRecord;
    internal protected boolean isTaxIntegrationDataRetrievalSetLineRecord;
    internal protected boolean isTaxIntegrationISVAccrueUseTaxEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        this.context = new TaxIntegrationDataRetrievalContext();
        isTaxIntegrationDataRetrievalSetDocumentRecord = TaxIntegrationDataPersistenceSkipFetchDBFlight::instance().isEnabled()
            && classIdGet(this) == classNum(TaxIntegrationSalesTableDataRetrieval);
        isTaxIntegrationDataRetrievalSetLineRecord = isTaxIntegrationDataRetrievalSetDocumentRecord
            && this.useLineRecord();
        isTaxIntegrationEnabledForTaxSolutionProvider = TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider();
        isTaxIntegrationISVAccrueUseTaxEnabled = TaxIntegrationUtils::isTaxIntegrationAccrueUseTaxEnabled(this.document.getBusinessProcess());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets context object.
    /// </summary>
    /// <returns>The <c>TaxIntegrationDataRetrievalContext</c>.</returns>
    internal TaxIntegrationDataRetrievalContext getContext()
    {
        return this.context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected abstract TaxIntegrationLineObject constructLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUnsavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line which is not saved in databse yet.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructUnsavedLine()
    {
        // It won't be called. Please override it in subclass.
        // Throw error and do nothing.
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a charge of the document.
    /// </summary>
    /// <returns>The constructed charge of the document.</returns>
    protected TaxIntegrationLineObject constructDocumentCharge()
    {
        if (isTaxIntegrationDataRetrievalSetLineRecord)
        {
            return TaxIntegrationLineObject::constructOnDocumentWithRecord(
                this.markupTransOfDocument.data(),
                this.document);
        }
        else
        {
            return TaxIntegrationLineObject::constructOnDocument(
                this.markupTransOfDocument.TableId,
                this.markupTransOfDocument.RecId,
                this.document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a charge of the current line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <returns>The constructed charge of the current line.</returns>
    protected TaxIntegrationLineObject constructLineCharge(TaxIntegrationLineObject _line)
    {
        if (isTaxIntegrationDataRetrievalSetLineRecord)
        {
            return TaxIntegrationLineObject::constructOnLineWithRecord(
                this.markupTransOfLine.data(),
                _line);
        }
        else
        {
            return TaxIntegrationLineObject::constructOnLine(
                this.markupTransOfLine.TableId,
                this.markupTransOfLine.RecId,
                _line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        this.copyToDocumentByDefault();
        this.copyToDocumentFromHeaderTable();
        this.copyAddressToDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        this.copyToLineByDefault(_line);
        this.copyToLineFromLineTable(_line);
        this.copyQuantityAndTransactionAmountToLine(_line);
        this.copyTaxAdjustmentToLine(_line);
        this.copyAddressToLine(_line);
        this.copyToLineFromHeaderTable(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineByDefault(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxAdjustmentToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tax adjustment to line.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyTaxAdjustmentToLine(TaxIntegrationLineObject _line)
    {
        if (!TaxIntegrationAdjustment::isEnabledForTransaction(
            _line.getAncestorDocument().getLocalTableId(),
            _line.getAncestorDocument().getLocalRecId()))
        {
            return;
        }

        sign sign = _line.getAncestorDocument().getSign();

        TaxWorkRegulation taxWorkRegulation;
        TaxTable taxTable;
        while select taxWorkRegulation
                where taxWorkRegulation.HeadingTableId == _line.getLocalTableId()
                    && taxWorkRegulation.HeadingRecId == _line.getLocalRecId()
                    && taxWorkRegulation.Status != TaxAdjustmentStatus::None
            exists join taxTable
                where taxWorkRegulation.TaxCode == taxTable.TaxCode
                    && taxTable.Source == TaxMasterDataSource::TaxService
        {
            _line.setAdjustmentStatus(TaxAdjustmentStatus::Adjusted);

            if (taxWorkRegulation.Status == TaxAdjustmentStatus::Adjusted && taxWorkRegulation.TaxCode)
            {
                TaxIntegrationTaxLineObject taxAdjustedLine = TaxIntegrationTaxLineObject::construct(taxWorkRegulation.TaxCode, _line);
                taxAdjustedLine.setOverrideCalculatedTax(taxWorkRegulation.OverrideCalculatedTax);

                if (taxWorkRegulation.OverrideCalculatedTax)
                {
                    taxAdjustedLine.setSourceRegulateAmountCur(taxWorkRegulation.ActualTaxRegulationAmountCur * sign);
                }

                if (!_line.insertTaxAdjustedLine(taxAdjustedLine))
                {
                    document.setException(new System.InvalidOperationException(
                        strFmt("@TaxIntegrationException:DuplicateTaxCodesNotAllowed", taxAdjustedLine.getTaxCode(), _line.getLocalId())));

                    return;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        if (this.shouldCopyAddressToLineWithCache())
        {
            this.copyShipmentOriginAddressToLine(_line);
            this.copyShipmentDestinationAddressToLine(_line);

            this.overwriteCountryRegionType(
                _line.getShipmentOriginAddress(),
                _line.getShipmentDestinationAddress());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShipmentOriginAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies shipment origin address to line.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    private void copyShipmentOriginAddressToLine(TaxIntegrationLineObject _line)
    {
        this.copyToShipmentAddressObjectWithCache(
            _line.getShipmentOriginAddress(),
            AddressObjectCacheTypeShipmentOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShipmentDestinationAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies shipment destination address to line.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    private void copyShipmentDestinationAddressToLine(TaxIntegrationLineObject _line)
    {
        this.copyToShipmentAddressObjectWithCache(
            _line.getShipmentDestinationAddress(),
            AddressObjectCacheTypeShipmentDestination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToShipmentAddressObjectWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data to <c>TaxIntegrationAddressObject</c> from address object cache.
    /// </summary>
    /// <param name = "_addressObject">The <c>TaxIntegrationAddressObject</c> copy to.</param>
    /// <param name = "_addressObjectCacheType">The address object cache type.</param>
    private void copyToShipmentAddressObjectWithCache(TaxIntegrationAddressObject _addressObject, str _addressObjectCacheType)
    {
        TaxIntegrationAddressObject shipmentAddressObject;
        str cacheKey = (_addressObjectCacheType == AddressObjectCacheTypeShipmentOrigin) ?
            this.getShipmentOriginAddressCacheKey() :
            this.getShipmentDestinationAddressCacheKey();

        if (cacheKey)
        {
            // add cache type as prefix of the cache key to avoid conflict
            cacheKey =
                _addressObjectCacheType
                + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter
                + cacheKey
                + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter
                + curExt();
            shipmentAddressObject = context.getShipmentAddressObject(cacheKey);
        }

        if (shipmentAddressObject)
        {
            _addressObject.copyFromAddress(shipmentAddressObject);
        }
        else
        {
            LogisticsPostalAddress postalAddress = (_addressObjectCacheType == AddressObjectCacheTypeShipmentOrigin) ?
                this.getShipmentOriginAddress() :
                this.getShipmentDestinationAddress();

            this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(_addressObject, postalAddress);

            if (cacheKey)
            {
                shipmentAddressObject = TaxIntegrationAddressObject::construct();
                shipmentAddressObject.copyFromAddress(_addressObject);

                context.cacheShipmentAddressObject(cacheKey, shipmentAddressObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// Overrides this method to leverage cache.
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// Overrides this method to leverage cache.
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>
    /// The defeault implementation invokes <c>copyToLineFromHeaderTable</c> after <c>copyToLineFromLineTable</c>.
    /// which means that a property will be overwritten by this method.
    /// This is suitable for a property which presents in the header table but not in the line table,
    /// but usually not desirable for a property presents in both the header table and the line table.
    /// </remarks>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        _line.determineCalculationDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromMarkupTrans(_charge, this.markupTransOfDocument);

        LineAmount documentTransactionAmount;
        if (TaxIntegrationChargeTotalDiscountFlight::instance().isEnabled())
        {
            documentTransactionAmount = this.getDocumentTotalLineAmountForDocumentCharge();
        }
        else if (TaxIntegrationHeaderPercentChargeFlight::instance().isEnabled())
        {
            documentTransactionAmount = this.getDocumentTransactionAmountForDocumentCharge();
        }
        else
        {
            documentTransactionAmount = this.calculateDocumentTransactionAmount();
        }

        _charge.setTransactionAmount(
            this.markupTransOfDocument.signedValue(
                Markup::calcTrans(
                    this.markupTransOfDocument,
                    0,
                    documentTransactionAmount)));

        this.copyToChargeFromHeaderTable(_charge);
        this.copyToChargeFromTaxAdjustment(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        TaxIntegrationLineObject line = _charge.getParentRecord() as TaxIntegrationLineObject;

        this.copyToChargeFromLine(_charge, line);
        this.copyToChargeFromMarkupTrans(_charge, this.markupTransOfLine);
        this.copyToChargeFromTaxAdjustment(_charge);

        if (TaxIntegrationChargeTotalDiscountFlight::instance().isEnabled())
        {
            _charge.setTransactionAmount(
                this.markupTransOfLine.signedValue(
                    Markup::calcTrans(
                        this.markupTransOfLine,
                        line.getQuantity(),
                        line.getLineAmount())));
        }
        else
        {
            _charge.setTransactionAmount(
                this.markupTransOfLine.signedValue(
                    Markup::calcTrans(
                        this.markupTransOfLine,
                        line.getQuantity(),
                        line.getTransactionAmount())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the execution is transactional,
    /// which involves <c>ttsbegin</c>, <c>ttscommit</c>, and <c>ttsabort</c>.
    /// </summary>
    /// <returns>Always false.</returns>
    protected boolean isTransactional()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document by copying to the document.
    /// </summary>
    /// <returns>The document.</returns>
    protected TaxIntegrationDocumentObject processDocument()
    {
        this.copyToDocument();
        return this.document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current line object.
    /// </summary>
    /// <param name = "_line">The current line of the current document.</param>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject fillLine(TaxIntegrationLineObject _line)
    {
        _line.setLineType(TaxIntegrationLineType::NormalLine);
        this.copyToLine(_line);
        this.copyToDocumentFromLineTable(_line);
        this.addToDocumentTotalLineAmount(_line);
        this.determineTaxabilityForLine(_line);
        return _line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current line of the document, by constructing, inserting and copying to the current line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processLine()
    {
        TaxIntegrationLineObject line = this.constructLine();
        if (!document.insertLine(line))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:DuplicateLinesOnDocumentNotAllowed", line.getLocalId(), this.document.getLocalId())));
            return null;
        }

        return this.fillLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnsavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the unsaved line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processUnsavedLine()
    {
        TaxIntegrationLineObject line = this.constructUnsavedLine();
        if (!document.insertLine(line))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:DuplicateLinesOnDocumentNotAllowed", line.getLocalId(), this.document.getLocalId())));
            return null;
        }

        return this.fillLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information to the document.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    protected void copyToDocumentFromLineTable(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the document, by constructing, inserting and copying to the current charge of the document.
    /// </summary>
    /// <returns>The current charge of the document.</returns>
    protected TaxIntegrationLineObject processDocumentCharge()
    {
        TaxIntegrationLineObject charge = this.constructDocumentCharge();
        if (!document.insertCharge(charge))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:DuplicateChargesOnDocumentNotAllowed", charge.getLocalId(), this.document.getLocalId())));
            return null;
        }

        charge.setLineType(TaxIntegrationLineType::HeaderCharge);
        this.copyToDocumentCharge(charge);
        return charge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the current line, by constructing, inserting and copying to the current charge of the current line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <returns>The current charge of the current line.</returns>
    protected TaxIntegrationLineObject processLineCharge(TaxIntegrationLineObject _line)
    {
        TaxIntegrationLineObject charge = this.constructLineCharge(_line);
        if (!_line.insertCharge(charge))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:DuplicateChargesOnLineNotAllowed", charge.getLocalId(), _line.getLocalId())));
            return null;
        }

        document.insertLineCharge(charge, _line);
        charge.setLineType(TaxIntegrationLineType::LineCharge);
        this.copyToLineCharge(charge);
        return charge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromInventStorageDimMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a document object from <c>InventStorageDimMap</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_source">The source <c>InventStorageDimMap</c>.</param>
    /// <remarks>NOTE: the table of <c>_source</c> is required to be mapped to <c>InventStorageDimMap</c> to avoid exceptions.</remarks>
    protected void copyToDocumentFromInventStorageDimMap(
        TaxIntegrationDocumentObject _destination,
        InventStorageDimMap _source)
    {
        _destination.getInventory().setSite(_source.InventSiteId);
        _destination.getInventory().setWarehouse(_source.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMCRSalesLineDropShipmentToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies mcrSalesLineDropShipment to a document object.
    /// </summary>
    /// <param name = "_document">The destination <c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_salesTable">The source <c>SalesTable</c>.</param>
    protected void copyMCRSalesLineDropShipmentToDocument(TaxIntegrationDocumentObject _document, SalesTable _salesTable)
    {
        SalesLine salesLine;
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        // Take value of McrSalesLineDropShipment from line document
        // Set value to Yes if any from line is YES.
        select firstonly RecId, DropShipment, SalesLine from mcrSalesLineDropShipment
                where mcrSalesLineDropShipment.DropShipment == NoYes::Yes
            exists join salesLine
                where salesLine.SalesId == _salesTable.SalesId
                    && mcrSalesLineDropShipment.SalesLine == salesLine.RecId;

        _document.setDirectDelivery(mcrSalesLineDropShipment != null ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromShipmentAddressWithCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a document object from the shipment origin and destination <c>LogisticsPostalAddress</c>,
    /// and calculates and sets the country region type.
    /// </summary>
    /// <param name = "_originLogisticsPostalAddress">The shipment origin <c>LogisticsPostalAddress</c>.</param>
    /// <param name = "_destinationLogisticsPostalAddress">The shipment destination <c>LogisticsPostalAddress</c>.</param>
    protected void copyToDocumentFromShipmentAddressWithCountryRegionType(
        LogisticsPostalAddress _originLogisticsPostalAddress,
        LogisticsPostalAddress _destinationLogisticsPostalAddress)
    {
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            this.document.getShipmentOriginAddress(),
            _originLogisticsPostalAddress);
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            this.document.getShipmentDestinationAddress(),
            _destinationLogisticsPostalAddress);
        this.overwriteCountryRegionType(
            this.document.getShipmentOriginAddress(),
            this.document.getShipmentDestinationAddress());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromInvoiceAddressWithCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a document object from the invoice origin and destination <c>LogisticsPostalAddress</c> of the invoice,
    /// and calculates and sets the country region type of the invoice.
    /// </summary>
    /// <param name = "_originLogisticsPostalAddress">The invoice origin <c>LogisticsPostalAddress</c>.</param>
    /// <param name = "_destinationLogisticsPostalAddress">The invoice destination <c>LogisticsPostalAddress</c>.</param>
    protected void copyToDocumentFromInvoiceAddressWithCountryRegionType(
        LogisticsPostalAddress _originLogisticsPostalAddress,
        LogisticsPostalAddress _destinationLogisticsPostalAddress)
    {
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            this.document.getInvoiceOriginAddress(),
            _originLogisticsPostalAddress);
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            this.document.getInvoiceDestinationAddress(),
            _destinationLogisticsPostalAddress);
        this.overwriteCountryRegionType(
            this.document.getInvoiceOriginAddress(),
            this.document.getInvoiceDestinationAddress());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a document object from the vat num.
    /// </summary>
    /// <param name = "_vatNum">The value of vat num.</param>
    /// <param name = "_vatNumSourceType">The source type of the vat num.</param>
    /// <param name = "_vatNumRecId">The recid of the vat num.</param>
    protected void copyToDocumentFromVATNum(
        VATNumJournal _vatNum,
        TaxExemptNumberSourceType _vatNumSourceType,
        RecId _vatNumRecId)
    {
        if (_vatNum)
        {
            document.setTaxExemptNumber(_vatNum);

            if (_vatNumSourceType == TaxExemptNumberSourceType::TaxRegistration)
            {
                document.setPartyTaxIdRecIdDefault(_vatNumRecId);
                document.setPartyTaxId(_vatNum);
                document.setPartyCountryRegionId(TaxRegistration::getPartyCounteryRegionId(_vatNumRecId));
            }
            else
            {
                document.setPartyTaxIdRecIdDefault(0);
                document.setPartyTaxId('');
                document.setPartyCountryRegionId('');
            }
        }
        else
        {
            document.setTaxExemptNumber('');
            document.setPartyTaxIdRecIdDefault(0);
            document.setPartyTaxId('');
            document.setPartyCountryRegionId('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromSalesPurchJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from <c>SalesPurchJournalLine</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source">The source <c>SalesPurchJournalLine</c>.</param>
    /// <remarks>NOTE: the table of <c>_source</c> is required to be mapped to <c>SalesPurchJournalLine</c> to avoid exceptions.</remarks>
    protected void copyToLineFromSalesPurchJournalLine(
        TaxIntegrationLineObject _destination,
        SalesPurchJournalLine _source)
    {
        _destination.setItemId(_source.ItemId);
        _destination.setCategoryId(_source.CategoryId);
        if (_destination.getCategoryId())
        {
            EcoResCategory ecoRESCategory = EcoResCategory::find(_destination.getCategoryId());
            _destination.setItemCategoryName(ecoRESCategory.Name);
        }
        // no _destination.setIntrastatCommodityCode
        _destination.setUnit(_source.SalesPurchUnit);
        if (_destination.getCategoryId())
        {
            _destination.setText(_destination.getItemCategoryName());
        }
        else
        {
            _destination.setText(_destination.getItemId());
        }
        _destination.setTransactionCurrencyCode(_source.CurrencyCode);
        _destination.setInventoryTransactionId(_source.InventTransId);

        _destination.setTaxGroup(_source.TaxGroup);
        _destination.setTaxItemGroup(_source.TaxItemGroup);
        _destination.setOverrideSalesTax(_source.OverrideSalesTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from <c>InventDim</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_source">The source <c>InventDim</c>.</param>
    protected void copyToLineFromInventDim(
        TaxIntegrationLineObject _destination,
        InventDim _source)
    {
        _destination.getInventory().setSite(_source.InventSiteId);
        _destination.getInventory().setWarehouse(_source.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from <c>InventTable</c>
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_source">The source <c>InventTable</c></param>
    protected void copyToLineFromInventTable(TaxIntegrationLineObject _destination, InventTable _source)
    {
        _destination.setItemType(_source.ItemType);
        _destination.setItemGroup(_source.itemGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromShipmentAddressWithCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from the shipment origin and destination <c>LogisticsPostalAddress</c>,
    /// and calculates and sets the country region type.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_originLogisticsPostalAddress">The shipment origin <c>LogisticsPostalAddress</c>.</param>
    /// <param name = "_destinationLogisticsPostalAddress">The shipment destination <c>LogisticsPostalAddress</c>.</param>
    protected void copyToLineFromShipmentAddressWithCountryRegionType(
        TaxIntegrationLineObject _destination,
        LogisticsPostalAddress _originLogisticsPostalAddress,
        LogisticsPostalAddress _destinationLogisticsPostalAddress)
    {
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            _destination.getShipmentOriginAddress(),
            _originLogisticsPostalAddress);
        this.copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
            _destination.getShipmentDestinationAddress(),
            _destinationLogisticsPostalAddress);
        this.overwriteCountryRegionType(
            _destination.getShipmentOriginAddress(),
            _destination.getShipmentDestinationAddress());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a charge object from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source">The source <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromMarkupTrans(
        TaxIntegrationLineObject _destination,
        MarkupTrans _source)
    {
        _destination.setItemId(_source.MarkupCode);
        _destination.setText(_source.Txt);
        _destination.setTransactionCurrencyCode(_source.CurrencyCode);
        _destination.setTransactionAmount(_source.Value);
        _destination.setTaxGroup(_source.TaxGroup);
        _destination.setTaxItemGroup(_source.TaxItemGroup);
        _destination.setOverrideSalesTax(_source.OverrideSalesTax);

        MarkupTable markupTable = _source.markupTable();
        _destination.setChargeParentCurrencyCode(_source.parentCurrencyCode());
        _destination.setChargeDebitType(markupTable.CustType);
        _destination.setChargeCreditType(markupTable.VendType);
        if ((markupTable.CustType == MarkupType::LedgerAccount && markupTable.VendType == MarkupType::LedgerAccount)
            || (_source.CurrencyCode != _source.parentCurrencyCode()))
        {
            _destination.setTaxable(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToAddressFromLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to an address object from <c>LogisticsPostalAddress</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationAddressObject</c>.</param>
    /// <param name = "_source">The source <c>LogisticsPostalAddress</c>.</param>
    protected void copyToAddressFromLogisticsPostalAddress(
        TaxIntegrationAddressObject _destination,
        LogisticsPostalAddress _source)
    {
        _destination.setZipCode(_source.ZipCode);
        _destination.setCity(_source.City);
        _destination.setState(_source.State);
        _destination.setCountry(_source.CountryRegionId);
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.setStreet(_source.Street);
            _destination.setLatitude(_source.Latitude);
            _destination.setLongitude(_source.Longitude);
            this.copyExternalAddressGroupIdToAddressFromAddressValidation(_destination, _source);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExternalAddressGroupIdToAddressFromAddressValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies external address group Id from <c>LogisticsPostalAddressTaxExtension</c>
    /// </summary>
    /// <param name = "_destination">TaxIntegrationAddressObject</param>
    /// <param name = "_source">LogisticsPostalAddress</param>
    protected void copyExternalAddressGroupIdToAddressFromAddressValidation(TaxIntegrationAddressObject _destination, LogisticsPostalAddress _source)
    {
        if (TaxIntegrationAddressValidationController::instance().isAddressValidationEnabled())
        {
            LogisticsPostalAddressTaxExtension logisticsPostalAddressTaxExtension = LogisticsPostalAddressTaxExtension::findByLocation(_source.Location);
            if (logisticsPostalAddressTaxExtension)
            {
                _destination.setAddressGroupId(logisticsPostalAddressTaxExtension.AddressGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToAddressFromLogisticsPostalAddressWithCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to an address object from <c>LogisticsPostalAddress</c>,
    /// and calculates and sets the country region type.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationAddressObject</c>.</param>
    /// <param name = "_source">The source <c>LogisticsPostalAddress</c>.</param>
    protected void copyToAddressFromLogisticsPostalAddressWithCountryRegionType(
        TaxIntegrationAddressObject _destination,
        LogisticsPostalAddress _source)
    {
        this.copyToAddressFromLogisticsPostalAddress(_destination, _source);
        _destination.setCountryRegionType(IntrastatCountryRegionParameters::getCountryRegionType(_source));
    }

]]></Source>
			</Method>
			<Method>
				<Name>overwriteCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// When the country of the origin address and the country of the destination address are the same,
    /// overwrites the country region types of both the origin address and the destination address
    /// as <c>CountryRegionType::Domestic</c>.
    /// </summary>
    /// <param name = "originAddress">The origin address.</param>
    /// <param name = "destinationAddress">The destination address.</param>
    protected void overwriteCountryRegionType(TaxIntegrationAddressObject originAddress, TaxIntegrationAddressObject destinationAddress)
    {
        if (originAddress.getCountry() == destinationAddress.getCountry()) // == is case insensitive
        {
            originAddress.setCountryRegionType(CountryRegionType::Domestic);
            destinationAddress.setCountryRegionType(CountryRegionType::Domestic);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a charge object from a line object.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source">The source <c>TaxIntegrationLineObject</c>.</param>
    protected void copyToChargeFromLine(TaxIntegrationLineObject _destination, TaxIntegrationLineObject _source)
    {
        _destination.setCalculationDate(_source.getCalculationDateV2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a charge object from a document object.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    protected void copyToChargeFromHeaderTable(TaxIntegrationLineObject _destination)
    {
        _destination.setDeliveryDate(this.document.getDeliveryDate());
        _destination.determineCalculationDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tax adjustment to charge.
    /// </summary>
    /// <param name = "_charge">The current charge of the document or line.</param>
    protected void copyToChargeFromTaxAdjustment(TaxIntegrationLineObject _charge)
    {
        this.copyTaxAdjustmentToLine(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDocumentTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the document transaction amount.
    /// </summary>
    /// <returns>The document transaction amount.</returns>
    [SysObsolete('This method is deprecated, use getDocumentTransactionAmountForCharge instead.', false, 25\9\2023)]
    protected LineAmount calculateDocumentTransactionAmount()
    {
        SetEnumerator localLineEnumerator = document.getLineSet().getEnumerator();
        LineAmount documentTransactionAmount = 0;
        while (localLineEnumerator.moveNext())
        {
            TaxIntegrationLineObject line = localLineEnumerator.current();
            LineAmount transactionAmount = line.getTransactionAmount();
            documentTransactionAmount += transactionAmount;
        }
        return documentTransactionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTransactionAmountForDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document transaction amount that the charge belongs to.
    /// </summary>
    /// <returns>The document transaction amount.</returns>
    [SysObsolete("The method has been deprecated use getDocumentLineAmountForDocumentCharge instead", false, 28\2\2024)]
    protected LineAmount getDocumentTransactionAmountForDocumentCharge()
    {
        // For most transactions there is only one order,
        // Use document level TableId and RecId as key to get the transaction amount.
        // For special cases where multiple orders are processing in one batch,
        // please override this method to leverage the TransTableId and TransRecId of this.markupTransOfDocument to get the correct amount.
        return document.getContext().getDocumentTransactionAmount(
            document.getLocalTableId(),
            document.getLocalRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTotalLineAmountForDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line amount that the charge belongs to.
    /// </summary>
    /// <returns>The document line amount.</returns>
    protected LineAmount getDocumentTotalLineAmountForDocumentCharge()
    {
        // For most transactions there is only one order,
        // Use document level TableId and RecId as key to get the line amount.
        // For special cases where multiple orders are processing in one batch,
        // please override this method to leverage the TransTableId and TransRecId of this.markupTransOfDocument to get the correct amount.
        return document.getContext().getDocumentTotalLineAmount(
            document.getLocalTableId(),
            document.getLocalRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToDocumentTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the line amount to line amount cache.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <remarks>
    /// It is only used for header charge now for performance consideration.
    /// </remarks>
    internal void addToDocumentTotalLineAmount(TaxIntegrationLineObject _line)
    {
        if (TaxIntegrationChargeTotalDiscountFlight::instance().isEnabled())
        {
            document.getContext().addDocumentTotalLineAmount(
                document.getLocalTableId(),
                document.getLocalRecId(),
                _line.getLineAmount());
        }
        else
        {
            document.getContext().addDocumentTransactionAmount(
                document.getLocalTableId(),
                document.getLocalRecId(),
                _line.getTransactionAmount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxabilityForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// determines the taxability for line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    protected void determineTaxabilityForLine(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccrueUseTaxParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax integration tax service parameters AccrueUseTax.
    /// </summary>
    /// <returns>AccrueUseTax</returns>
    internal protected boolean getAccrueUseTaxParameter()
    {
        if (this.document.getTaxIntegrationSetting() is TaxIntegrationSetting_CalculationService)
        {
            TaxIntegrationSetting_CalculationService calculationServiceSetting = this.document.getTaxIntegrationSetting() as TaxIntegrationSetting_CalculationService;
            TaxIntegrationTaxServiceParameters taxIntegrationTaxServiceParameters = calculationServiceSetting.getTaxIntegrationTaxServiceParameters();

            return taxIntegrationTaxServiceParameters.AccrueUseTax;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>