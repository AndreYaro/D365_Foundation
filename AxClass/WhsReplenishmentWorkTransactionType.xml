<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsReplenishmentWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsReplenishmentWorkTransactionType</c> class handles logic specific to the replenishment work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::Replenishment)]
class WhsReplenishmentWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelWorkLineQuantity</Name>
				<Source><![CDATA[
    public void cancelWorkLineQuantity(WHSWorkLine _workLine, Qty _inventQty)
    {
        InventQty totalDemandInventQty = WHSReplenWorkLink::getDemandReplenishmentInventQty(_workLine);
        InventQty demandInventQtyWhichCouldNotBeReplenished = totalDemandInventQty - (_workLine.InventQtyWork - _inventQty);
        if (demandInventQtyWhichCouldNotBeReplenished > 0)
        {
            WHSWorkTable::cancelDemandWork(_workLine.WorkId, _workLine.LineNum, demandInventQtyWhichCouldNotBeReplenished);
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirReplenishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateReplenishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::UserDirected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    protected internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canMoveReservationFromWorkLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuerySingleOrder</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuerySingleOrder(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.buildLocationDirectiveQuery(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelatedPicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isItemRelatedPicking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        var replenishmentTemplateLine = _parameters.locationDirective.parmReplenishmentTemplateLine();
        if (replenishmentTemplateLine.RecId)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSReplenishmentTemplateLine)), fieldNum(WHSReplenishmentTemplateLine, RecId)).value(queryValue(replenishmentTemplateLine.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        ttsbegin;

        WHSWaveTable waveTable = WHSWaveTable::find(_workTable.WaveId, true);

        if (waveTable.RecId != 0)
        {
            if (!waveTable.numWorkCreated())
            {
                waveTable.delete();
            }
            else
            {
                waveTable.update();
            }
        }

        if (WHSReplenWorkLink::doesReplenishmentHaveLockedReplenWorkLinkRecords(_workTable.WorkId))
        {
            throw error (strFmt("@WAX:Error_CancelReplenishmentNotAllowedAsReplenLinkUsedByRunningWave", _workTable.WorkId));
        }

        this.zeroOutReplenishmentWorkLinksForReplenishmentWorkId(_workTable.WorkId);

        this.unblockDemandWorks(_workTable.WorkId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroOutReplenishmentWorkLinksForReplenishmentWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set inventory quantity to zero on the replenishment work links for the passed parameter.
    /// </summary>
    /// <param name = "_replenishmentWorkId">Replenishment work ID for which the replenishment work links have inventory quantity set to zero.</param>
    private void zeroOutReplenishmentWorkLinksForReplenishmentWorkId(WHSWorkId _replenishmentWorkId)
    {
        WHSReplenWorkLink replenWorkLink;

        update_recordset replenWorkLink
            setting InventQty = 0
            where replenWorkLink.ReplenWorkId == _replenishmentWorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockDemandWorks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblocks work headers that were dependent on the replenishment work that was canceled and
    /// they have no other replenishment work linked to the work.
    /// </summary>
    /// <param name="_replenWorkId">
    /// The replenishment <c>WHSWorkId</c> that was canceled.
    /// </param>
    private void unblockDemandWorks(WHSWorkId _replenWorkId)
    {
        WHSReplenWorkLink replenWorkLink;

        while select DemandWorkId from replenWorkLink
            group by DemandWorkId
            where replenWorkLink.ReplenWorkId == _replenWorkId
                && replenWorkLink.DemandWorkId != ''
        {
            this.unblockDemandWork(replenWorkLink.DemandWorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockDemandWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblocks work header for the passed work ID if it can be unblocked.
    /// </summary>
    /// <param name = "_demandWorkId">Work ID for the demand work to be unblocked.</param>
    private void unblockDemandWork(WHSWorkId _demandWorkId)
    {
        WHSWorkTable demandWork = WHSWorkTable::find(_demandWorkId, true);

        if (demandWork
            && demandWork.WorkStatus != WHSWorkStatus::Cancelled)
        {
            WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(demandWork.WorkId)
                .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::UnProcessedReplenishmentWork);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCleanUpOnLockUnlockWorkAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if work cleanUp is allowed.
    /// </summary>
    /// <returns>True, if work cleanUp on lock or unlock of work is allowed.</returns>
    public boolean isWorkCleanUpOnLockUnlockWorkAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsReplenishmentTemplateLine = _query.dataSourceTable(tableNum(WHSReplenishmentTemplateLine));

        if (WHSReplenishWorkTransTypeFilterLocDirQueryFlight::instance().isEnabled())
        {
            SysQuery::findOrCreateRange(qbdsReplenishmentTemplateLine, fieldNum(WHSReplenishmentTemplateLine, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        }
        else
        {
            SysQuery::findOrCreateRange(qbdsReplenishmentTemplateLine, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInternalMovement</Name>
				<Source><![CDATA[
    internal boolean isInternalMovement()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>