<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsPurchWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsPurchWorkTransactionType</c> class handles logic specific to the purchase orders work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::Purch)]
class WhsPurchWorkTransactionType extends WHSInboundShipmentWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider receivingOrderProvider()
    {
        return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        switch (_whsLocDirTable.LocateBy)
        {
            case WHSLocDirLocateBy::Standard:
                return queryStr(WHSLocDirPurch);

            case WHSLocDirLocateBy::ASN:
                return queryStr(WHSLocDirASN);

            case WHSLocDirLocateBy::MixedLP:
                return queryStr(WHSLocDirMixedLP);

            case WHSLocDirLocateBy::Cluster:
                return queryStr(WHSWork);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplatePurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return super(_hasTargetLicensePlate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    protected internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderLineByInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderLineByInventTransId(InventTransId _inventTransId)
    {
        return PurchLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuerySingleOrder</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuerySingleOrder(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        boolean rangesAdded = this.addRangeLicensePlate(_parameters);

        if (!rangesAdded &&
            _parameters.orderNum)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(PurchTable)), fieldNum(PurchTable, PurchId)).value(queryValue(_parameters.orderNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        boolean rangesAdded = this.addRangeLicensePlate(_parameters);

        if (!rangesAdded)
        {
            this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(PurchLine), fieldNum(PurchLine, InventTransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(PurchTableListPage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return PurchTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocDirCodeForWorkTemplateLine</Name>
				<Source><![CDATA[
    public WHSWorkTemplateErrorText validateLocDirCodeForWorkTemplateLine(WHSWorkTemplateLine _templateLine, boolean _isLastLine)
    {
        return super(_templateLine, _isLastLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderLineNumFromInventTransId</Name>
				<Source><![CDATA[
    public LineNum findOrderLineNumFromInventTransId(InventTransId _inventTransId)
    {
        return PurchLine::findInventTransId(_inventTransId).LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNum</Name>
				<Source><![CDATA[
    public AccountNum findAccountNum(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        AccountNum accountNum;

        if (_whsWorkLine.InventTransId)
        {
            accountNum = PurchLine::findInventTransId(_whsWorkLine.InventTransId).VendAccount;
        }
        else if (_whsWorkTable.OrderNum)
        {
            accountNum = PurchTable::find(_whsWorkTable.OrderNum).OrderAccount;
        }
        else
        {
            accountNum = "@WAX402";
        }

        if (!accountNum)
        {
            accountNum = this.findAccountNumFromSourceDocumentDetails(_whsWorkTable, _whsWorkLine);
        }

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNumFromSourceDocumentDetails</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal AccountNum findAccountNumFromSourceDocumentDetails(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountName</Name>
				<Source><![CDATA[
    public AccountName findAccountName(AccountNum _accountNum)
    {
        AccountName accountName;

        if (!_accountNum)
        {
            accountName = '';
        }
        else if (_accountNum != "@WAX402")
        {
            accountName = VendTable::find(_accountNum).name();
        }
        else
        {
            accountName = "@WAX402";
        }

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        PurchLine purchLine = PurchLine::findInventTransId(_whsWorkLine.InventTransId);

        if (purchLine.RecId && PdsGlobal::pdsIsCWItem(purchLine.ItemId))
        {
            return [purchLine.PdsCWQty, purchLine.PdsCWRemainInventPhysical];
        }

        return [purchLine.QtyOrdered, purchLine.RemainPurchPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress findToAddress(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return PurchTable::find(_label.OrderNum).deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkLineQuantity</Name>
				<Source><![CDATA[
    public void cancelWorkLineQuantity(WHSWorkLine _workLine, Qty _inventQty)
    {
        super(_workLine, _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void registerQuantities(
        InventTransId        _inventTransId,
        InventQty            _registerQty,
        PdsInventQty         _registerCWQty,
        InventDim            _inventDim)
    {
        WHSPurchLine::registerQuantities(_inventTransId, _registerQty, _registerCWQty, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        super(_workTable, _cancellingProductReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineTableNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected TableId getOrderLineTableNum()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>