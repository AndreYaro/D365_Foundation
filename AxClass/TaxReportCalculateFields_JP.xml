<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalculateFields_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class TaxReportCalculateFields_JP
{
    protected const RatioOfTaxableSales_JP RatioTreshold = 0.95;
    protected const Amount SalesTreshold = 500000000.0;

    protected TaxPeriod taxPeriod;
    protected FromDate fromDate;
    protected ToDate toDate;
    protected TypeOfDeclaration_JP typeOfDeclaration;
    protected boolean amendment;
    protected CalcMethod_JP calcMethod;
    protected TaxReportDataLayout_JP dataLayout;

    protected CompanyInfo companyInfo;

    #TaxReportingCodes_JP

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTaxReportSheet</Name>
				<Source><![CDATA[
    protected void calculateTaxReportSheet()
    {
        #OCCRetryCount

        this.initializeCalculation();

        try
        {
            ttsbegin;

            this.calculateTaxReportLines();

            ttscommit;
        }
        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCalculation</Name>
				<Source><![CDATA[
    protected void initializeCalculation()
    {
        companyInfo = CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxReportLines</Name>
				<Source><![CDATA[
    protected abstract void calculateTaxReportLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxValue</Name>
				<Source><![CDATA[
    protected void calculateTaxValue(TaxValue _taxValue, Map _taxTypes)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCalcTrans</Name>
				<Source><![CDATA[
    protected LedgerConsumptionTaxCalcTrans_JP getTaxCalcTrans(
        TaxValue _taxValue,
        TaxType_JP _taxType,
        TaxReportDataLayout_JP _dataLayout,
        boolean _latestVersion,
        boolean _forUpdate = false)
    {
        LedgerConsumptionTaxCalcTrans_JP taxCalcTrans;

        taxCalcTrans.selectForUpdate(_forUpdate);

        select firstonly taxCalcTrans
            where taxCalcTrans.PeriodOfTaxationFrom == fromDate
                && taxCalcTrans.PeriodOfTaxationTo == toDate
                && taxCalcTrans.SettlementPeriod == taxPeriod
                && taxCalcTrans.TypeOfDeclaration == typeOfDeclaration
                && (!_latestVersion || taxCalcTrans.Version == TaxRepVersion::Latest)
                && taxCalcTrans.TaxType == _taxType
                && taxCalcTrans.TaxValue == _taxValue
                && taxCalcTrans.DataLayout == _dataLayout;

        return taxCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportTrans</Name>
				<Source><![CDATA[
    protected LedgerConsumptionTaxReportTrans_JP getTaxReportTrans(TaxReportDataLayout_JP _dataLayout, boolean _forUpdate = false)
    {
        LedgerConsumptionTaxReportTrans_JP taxReportTrans;

        taxReportTrans.selectForUpdate(_forUpdate);

        select firstonly taxReportTrans
            where ((taxReportTrans.PeriodOfTaxationFrom == fromDate
                && taxReportTrans.PeriodOfTaxationTo == toDate)
                || (taxReportTrans.InterimFrom == fromDate
                && taxReportTrans.InterimTo == toDate))
                && taxReportTrans.TypeOfDeclaration == typeOfDeclaration
                && taxReportTrans.DataLayout == _dataLayout;

        return taxReportTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountForMainAccount</Name>
				<Source><![CDATA[
    protected TaxAmount getTaxAmountForMainAccount(MainAccountNum _accountNum, TaxValue _taxValue, TaxType_JP _taxType)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxData taxData;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        DimensionAttributeValueCombination dimAttrValueCombo;

        select sum(TaxAmount) from taxTrans
            where taxTrans.TransDate >= fromDate
                && taxTrans.TransDate <= toDate
                && taxTrans.TaxPeriod == taxPeriod
            exists join taxTable
                where taxTrans.TaxCode == taxTable.TaxCode
                    && taxTable.TaxType_JP == _taxType
            exists join taxData
                where taxData.TaxCode == taxTable.TaxCode
                    && taxData.TaxValue == _taxValue
            exists join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                    && taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
            exists join dimAttrValueCombo
                where dimAttrValueCombo.RecId == taxTransGeneralJournalAccountEntry.LedgerDimension
                    && dimAttrValueCombo.MainAccountValue == _accountNum;

        return taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNationalTaxAmount</Name>
				<Source><![CDATA[
    internal static Amount calculateNationalTaxAmount(TaxValue _taxValue, TaxType_JP _taxType, Amount _amount)
    {
        switch (real2int(_taxValue))
        {
            case 3:
                return _amount;

            case 5:
                return _amount * 4 / 5;

            case 8:
                return _taxType == TaxType_JP::Reduced ? _amount * 6.24 / 8 : _amount * 6.3 / 8;

            case 10:
                return _amount * 7.8 / 10;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trunc1000</Name>
				<Source><![CDATA[
    protected static real trunc1000(real _value)
    {
        return trunc(_value / 1000) * 1000;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>