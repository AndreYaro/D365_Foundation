<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqJobUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqJobUpdate</c> class creates or updates jobs and job data for a planned order.
/// </summary>
class ReqJobUpdate
{
    OprNum              oprNum;

    BOMCalcData         bomCalcData;

    ReqPO               reqPO;

    boolean             deleteCapacityReservations;

    boolean             scheduleAllJobs;

    Map                 jobUpdateCache;
    List                currentJobs;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllProdRouteJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all the jobs for a specified job type for a route operation in the route that is being used
    ///    in the planned order.
    /// </summary>
    /// <param name="_prodJobType">
    ///    A <c>ProdJobType</c> object that contains the job type information.
    /// </param>
    /// <param name="_reqRoute">
    ///    A <c>ReqRoute</c> record that contains the planned order route operation information.
    /// </param>
    /// <param name="_route">
    ///    A <c>Route</c> record that contains information about the route base data to use.
    /// </param>
    /// <param name="_routeOpr">
    ///    A <c>RouteOpr</c> record that contains the route operation base data.
    /// </param>
    /// <param name="_routeGroup">
    ///    A <c>RouteGroup</c> record that contains the route group settings.
    /// </param>
    /// <param name="_activityRequirementSet">
    ///    A <c>WrkCtrActivityRequirementSet</c> record that contains the activity requirement set.
    /// </param>
    protected void createAllProdRouteJobs(ProdJobType                   _prodJobType,
                                          ReqRoute                      _reqRoute,
                                          Route                         _route,
                                          RouteOpr                      _routeOpr,
                                          RouteGroup                    _routeGroup,
                                          WrkCtrActivityRequirementSet  _activityRequirementSet)
    {
        ReqRouteJob                     primaryJob;
        ReqRouteJob                     reqRouteJob;
        Integer                         x;
        boolean                         updatePrev;
        Integer                         numberOfJobsToCreatePerJobtype;

        if (!_prodJobType.activation(_routeGroup))
        {
            return;
        }

        numberOfJobsToCreatePerJobtype = _activityRequirementSet.Quantity;
        if (!this.parmScheduleAllJobs())
        {
            numberOfJobsToCreatePerJobtype = 1;
        }

        if (! _reqRoute.OprPriority)
        {
            x = 0;
            while (x < numberOfJobsToCreatePerJobtype)
            {
                x += 1;

                reqRouteJob.clear();
                reqRouteJob.CalcTimeHours    = _prodJobType.calcWrkCtrHours(bomCalcData,
                                                                            _route,
                                                                            _routeOpr,
                                                                            '',
                                                                            _route,
                                                                            _routeOpr,
                                                                            reqPO.ItemId,
                                                                            reqPO.CovInventDimId) * _activityRequirementSet.LoadPercent / 100;

                reqRouteJob.JobType          = _prodJobType.routeJobType();

                if (reqRouteJob.CalcTimeHours > 0 || (reqRouteJob.CalcTimeHours == 0 && reqRouteJob.JobType == RouteJobType::Process))
                {
                    reqRouteJob.initFromReqRoute(_reqRoute);
                    reqRouteJob.PropertyId       = _prodJobType.propertyId(_route,_routeOpr);

                    reqRouteJob.NumType          = _prodJobType.numType();
                    reqRouteJob.NumPrimary       = x;
                    reqRouteJob.NumSecondary     = 0;
                    reqRouteJob.JobControl       = _prodJobType.mustJobBeControlled(_routeGroup);

                    if (x == numberOfJobsToCreatePerJobtype)
                    {
                        reqRouteJob.Link           = _prodJobType.scheduleNextJobLink();
                        reqRouteJob.LinkType       = _reqRoute.LinkType == SchedJobLinkType::Hard ? SchedJobLinkType::Hard : _prodJobType.scheduleNextJobLinkType();
                    }
                    else
                    {
                        reqRouteJob.Link           = SchedJobLink::SS;
                        reqRouteJob.LinkType       = SchedJobLinkType::Hard;
                    }

                    if (reqRouteJob.OprPriority == RouteOprPriority::Primary)
                    {
                        this.ensurePropertyIsSet(reqRouteJob);
                    }

                    this.insertJob(reqRouteJob);

                    updatePrev    = true;
                }
            }

            if (updatePrev)
            {
                this.updatePrevLink(_prodJobType,_reqRoute);
            }
        }
        else
        {
            while select NumPrimary, CalcTimeHours from primaryJob
                where primaryJob.PlanVersion                == _reqRoute.PlanVersion                  &&
                      primaryJob.ReqPOId                    == _reqRoute.RefId           &&
                      primaryJob.OprNum                     == _reqRoute.OprNum          &&
                      primaryJob.NumType                    == _prodJobType.numType()    &&
                      primaryJob.OprPriority                == RouteOprPriority::Primary
            {
                x = 0;
                while (x < numberOfJobsToCreatePerJobtype)
                {
                    x += 1;

                    reqRouteJob.clear();
                    reqRouteJob.initFromReqRoute(_reqRoute);

                    reqRouteJob.PropertyId       = _prodJobType.propertyId(_route,_routeOpr);
                    if (reqRouteJob.CalcTimeHours > 0 || reqRouteJob.JobType == RouteJobType::Process)
                    {
                        this.ensurePropertyIsSet(reqRouteJob);
                    }

                    reqRouteJob.CalcTimeHours    = primaryJob.CalcTimeHours;

                    reqRouteJob.NumType          = _prodJobType.numType();
                    reqRouteJob.NumPrimary       = primaryJob.NumPrimary;
                    reqRouteJob.NumSecondary     = x;
                    reqRouteJob.JobType          = _prodJobType.routeJobType();
                    reqRouteJob.JobControl       = _prodJobType.mustJobBeControlled(_routeGroup);

                    reqRouteJob.Link             = SchedJobLink::None;
                    reqRouteJob.LinkType         = SchedJobLinkType::None;

                    this.insertJob(reqRouteJob);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the jobs for the planned production order.
    /// </summary>
    /// <param name="_reqRoute">
    /// The planned production order operation data.
    /// </param>
    /// <param name="_route">
    /// A <c>Route</c> record with the base data operation information.
    /// </param>
    /// <param name="_routeOpr">
    /// A <c>RouteOpr</c> record with the base data operation parameters.
    /// </param>
    /// <param name="_routeGroup">
    /// A <c>RouteGroup</c> record with the route group information.
    /// </param>
    /// <param name="_activityRequirementSet">
    /// A <c>WrkCtrActivityRequirementSet</c> with the operation activity requirement set.
    /// </param>
    public void createJobs(ReqRoute                        _reqRoute,
                           Route                           _route,
                           RouteOpr                        _routeOpr,
                           RouteGroup                      _routeGroup,
                           WrkCtrActivityRequirementSet    _activityRequirementSet)
    {
        ProdJobTypeSearch   prodJobTypeSearch = new ProdJobTypeSearch();
        ProdJobType         prodJobType;

        if (prodJobTypeSearch.first())
        do
        {
            prodJobType = prodJobTypeSearch.prodJobType();

            if (prodJobType.scheduleAllJobs())
            {
                this.createAllProdRouteJobs(prodJobType,
                                            _reqRoute,
                                            _route,
                                            _routeOpr,
                                            _routeGroup,
                                            _activityRequirementSet);
            }
            else
            {
                this.createOneProdRouteJob(prodJobType,
                                           _reqRoute,
                                           _route,
                                           _routeOpr,
                                           _routeGroup,
                                           _activityRequirementSet);
            }
        } while (prodJobTypeSearch.next());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobsFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the jobs for the given order from a list of job records that were cached.
    /// </summary>
    /// <param name="_jobs">
    /// A list of records that were cached and can be used for the job creation of the current order.
    /// </param>
    protected void createJobsFromCache(List _jobs)
    {
        RecordInsertList    jobsInsertList;
        ListEnumerator      le;
        ReqRouteJob         newReqRouteJob;

        jobsInsertList = new RecordInsertList(tablenum(ReqRouteJob), true);

        le = _jobs.getEnumerator();
        while (le.moveNext())
        {
            newReqRouteJob.data(le.current());
            newReqRouteJob.RecId = 0;
            newReqRouteJob.ReqPOId = reqPO.RefId;
            jobsInsertList.add(newReqRouteJob);
        }

        jobsInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a job of a specified type for a specific route operation.
    /// </summary>
    /// <param name="_prodJobType">
    ///    A <c>ProdJobType</c> object that contains the job type information.
    /// </param>
    /// <param name="_reqRoute">
    ///    A <c>ReqRoute</c> record that contains the planned order route operation information.
    /// </param>
    /// <param name="_route">
    ///    A <c>Route</c> record that contains information about the route base data to use.
    /// </param>
    /// <param name="_routeOpr">
    ///    A <c>RouteOpr</c> record that contains the route operation base data.
    /// </param>
    /// <param name="_routeGroup">
    ///    A <c>RouteGroup</c> record that contains the route group settings.
    /// </param>
    /// <param name="_activityRequirementSet">
    ///    A <c>WrkCtrActivityRequirementSet</c> record that contains the activity requirement set.
    /// </param>
    protected void createOneProdRouteJob(ProdJobType                    _prodJobType,
                                         ReqRoute                       _reqRoute,
                                         Route                          _route,
                                         RouteOpr                       _routeOpr,
                                         RouteGroup                     _routeGroup,
                                         WrkCtrActivityRequirementSet   _activityRequirementSet)
    {
        ReqRouteJob                     reqRouteJob;

        if (!_route.OprPriority && _prodJobType.activation(_routeGroup))
        {
            reqRouteJob.CalcTimeHours  = _prodJobType.calcWrkCtrHours(bomCalcData,
                                                                     _route,
                                                                     _routeOpr,
                                                                     '',
                                                                     _route,
                                                                     _routeOpr,
                                                                     reqPO.ItemId,
                                                                     reqPO.CovInventDimId) * _activityRequirementSet.LoadPercent / 100;

            if (reqRouteJob.CalcTimeHours > 0)
            {
                reqRouteJob.initFromReqRoute(_reqRoute);
                reqRouteJob.PropertyId     = _prodJobType.propertyId(_route,_routeOpr);
                this.ensurePropertyIsSet(reqRouteJob);

                reqRouteJob.NumType        = _prodJobType.numType();
                reqRouteJob.NumPrimary     = 1;
                reqRouteJob.NumSecondary   = 0;
                reqRouteJob.JobType        = _prodJobType.routeJobType();
                reqRouteJob.JobControl     = _prodJobType.mustJobBeControlled(_routeGroup);

                reqRouteJob.Link           = _prodJobType.scheduleNextJobLink();
                reqRouteJob.LinkType       = _reqRoute.LinkType == SchedJobLinkType::Hard ? SchedJobLinkType::Hard : _prodJobType.scheduleNextJobLinkType();

                this.updatePrevLink(_prodJobType,_reqRoute);

                this.insertJob(reqRouteJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensurePropertyIsSet</Name>
				<Source><![CDATA[
    private void ensurePropertyIsSet(ReqRouteJob _reqRouteJob)
    {
        _reqRouteJob.PropertyId = _reqRouteJob.PropertyId ? _reqRouteJob.PropertyId : InventTable::find(reqPO.ItemId).PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the job creation class.
    /// </summary>
    public void init()
    {
        if (!bomCalcData)
        {
            bomCalcData  = BOMCalcData::newInventTable(reqPO.Qty,InventTable::find(reqPO.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts one job into the database and in the local job cache.
    /// </summary>
    /// <param name="_reqRouteJob">
    /// A <c>ReqRouteJob</c> to insert in the database and in the cache.
    /// </param>
    protected void insertJob(ReqRouteJob _reqRouteJob)
    {
        _reqRouteJob.insert();

        if (currentJobs)
        {
            currentJobs.addEnd(_reqRouteJob);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.parmScheduleAllJobs(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCalcData</Name>
				<Source><![CDATA[
    BOMCalcData parmBOMCalcData(BOMCalcData _bomCalcData = bomCalcData)
    {
        bomCalcData = _bomCalcData;
        return bomCalcData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteCapacityReservations</Name>
				<Source><![CDATA[
    protected boolean parmDeleteCapacityReservations(boolean _deleteCapacityReservations = deleteCapacityReservations)
    {
        deleteCapacityReservations = _deleteCapacityReservations;
        return deleteCapacityReservations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobUpdateCache</Name>
				<Source><![CDATA[
    protected Map parmJobUpdateCache(Map _jobUpdateCache = jobUpdateCache)
    {
        jobUpdateCache = _jobUpdateCache;
        return jobUpdateCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPo</Name>
				<Source><![CDATA[
    ReqPO parmReqPo(ReqPO _reqPO = reqPO)
    {
        reqPO = _reqPO;
        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleAllJobs</Name>
				<Source><![CDATA[
    public boolean parmScheduleAllJobs(boolean _scheduleAllJobs = scheduleAllJobs)
    {
        scheduleAllJobs = _scheduleAllJobs;
        return scheduleAllJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPOCacheKey</Name>
				<Source><![CDATA[
    protected str reqPOCacheKey(ReqPO _reqPO)
    {
        return strfmt('%1#%2#%3#%4#%5', reqPO.ItemId, reqPO.ItemBomId, reqPO.ItemRouteId, reqPO.ReqDate, reqpo.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        RouteGroup                      routeGroup;

        ReqRoute                        reqRoute;
        ReqRoute                        lastReqRoute;
        Route                           route;
        RouteOpr                        routeOpr;
        WrkCtrRouteOprActivity          wrkCtrRouteOprActivity;
        wrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;
        str                             cacheKey;

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            setprefix(#PreFixField(ReqPo,RefId));

            ReqRouteJob::deletePO(reqPO.PlanVersion,reqPO.RefId,oprNum);

            if (deleteCapacityReservations)
            {
                WrkCtrCapResHandler::construct().deleteOrderReservations(
                    WrkCtrCapRefType::PlannedOrder,
                    reqPO.RefId,
                    oprNum,
                    reqPO.PlanVersion);
            }

            cacheKey = this.reqPOCacheKey(reqPO);
            if (jobUpdateCache && jobUpdateCache.exists(cacheKey))
            {
                this.createJobsFromCache(jobUpdateCache.lookup(cacheKey));
            }
            else
            {
                if (jobUpdateCache)
                {
                    currentJobs = new List(Types::Record);
                    jobUpdateCache.insert(cacheKey, currentJobs);
                }

                while select reqRoute
                    order by OprNum,OprPriority
                    where reqRoute.PlanVersion              == reqPO.PlanVersion               &&
                          reqRoute.RefId                    == reqPO.RefId                     &&
                         (reqRoute.OprNum                   == oprNum   || !oprNum)
                join routeOpr
                    where routeOpr.RecId                    == reqRoute.RouteOprRefRecId
                join route
                    where route.RecId                       == reqRoute.RouteRefRecId
                join RouteOpr from wrkCtrRouteOprActivity
                    where wrkCtrRouteOprActivity.RouteOpr   == reqRoute.RouteOprRefRecId
                join wrkCtrActivityRequirementSet
                    where wrkCtrActivityRequirementSet.Activity == wrkCtrRouteOprActivity.Activity
                join RouteGroup
                    where routeGroup.RouteGroupId           == routeOpr.RouteGroupId
                {
                    setprefix(#PreFixField(reqRoute, OprNum));

                    if (! routeGroup.checkValid())
                    {
                        throw error("@SYS18447");
                    }

                    this.createJobs(reqRoute, route, routeOpr, routeGroup, wrkCtrActivityRequirementSet);

                    lastReqRoute.data(reqRoute);
                }
            }

            this.updateFlag();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFlag</Name>
				<Source><![CDATA[
    protected void updateFlag()
    {
        if (!oprNum)
        {
            reqPO.RouteJobsUpdated = NoYes::Yes;
            reqPO.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrevLink</Name>
				<Source><![CDATA[
    void updatePrevLink(ProdJobType prodJobType,ReqRoute reqRoute)
    {
        ReqRouteJob previousJob;

        if (prodJobType.schedulePrevJobLink()       != SchedJobLink::None ||
            prodJobType.schedulePrevJobLinkType()   != SchedJobLinkType::None)
        {
            select firstonly reverse forupdate previousJob
                where previousJob.PlanVersion               == reqRoute.PlanVersion              &&
                      previousJob.ReqPOId                   == reqRoute.RefId       &&
                      previousJob.OprNum                    == reqRoute.OprNum      &&
                      previousJob.NumType                   <  prodJobType.numType();

            if (previousJob)
            {
                boolean mustRefreshCache = false;

                if (prodJobType.schedulePrevJobLink() != SchedJobLink::None
                    && previousJob.Link != prodJobType.schedulePrevJobLink())
                {
                    previousJob.Link = prodJobType.schedulePrevJobLink();
                    mustRefreshCache = true;
                }

                if (reqRoute.LinkType != SchedJobLinkType::Hard)
                {
                    if (prodJobType.schedulePrevJobLinkType() != SchedJobLinkType::None
                        && previousJob.LinkType != prodJobType.schedulePrevJobLinkType())
                    {
                        previousJob.LinkType = prodJobType.schedulePrevJobLinkType();
                        mustRefreshCache = true;
                    }
                }

                previousJob.update();

                if (mustRefreshCache)
                {
                    this.refreshJobInCurrentJobsCache(previousJob);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshJobInCurrentJobsCache</Name>
				<Source><![CDATA[
    private void refreshJobInCurrentJobsCache(ReqRouteJob _routeJob)
    {
        ListIterator iterator = new ListIterator(currentJobs);

        while (iterator.more())
        {
            ReqRouteJob currentRouteJob = iterator.value();

            if (currentRouteJob.RecId == _routeJob.RecId)
            {
                iterator.delete();
                iterator.insert(_routeJob);
                break;
            }

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean  validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqPo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqJobUpdate</c> class based on a planned production order.
    /// </summary>
    /// <param name="_reqPO">
    ///    A <c>ReqPO</c> record that contains the planned production order data.
    /// </param>
    /// <param name="_bomCalcData">
    ///    A <c>BOMCalcData</c> instance that contains BOM calculation information.
    /// </param>
    /// <param name="_deleteCapacityReservations">
    ///    A Boolean value that indicates whether to delete or not the capacity reservations for the given
    ///    planned order.
    /// </param>
    /// <param name="_jobUpdateCache">
    ///    A <c>Map</c> object that holds a cache of updated and created jobs for planned orders created
    ///    during the MRP run.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqJobUpdate</c> class.
    /// </returns>
    public static ReqJobUpdate newReqPo(ReqPO       _reqPO,
                                        BOMCalcData _bomCalcData,
                                        boolean     _deleteCapacityReservations = true,
                                        Map         _jobUpdateCache = null)
    {
        ReqJobUpdate reqJobUpdate = new ReqJobUpdate();

        reqJobUpdate.parmReqPo(_reqPO);
        reqJobUpdate.parmBOMCalcData(_bomCalcData);
        reqJobUpdate.parmDeleteCapacityReservations(_deleteCapacityReservations);
        reqJobUpdate.parmJobUpdateCache(_jobUpdateCache);

        reqJobUpdate.init();

        return reqJobUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>