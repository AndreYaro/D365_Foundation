<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkConfirmationBroker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Linq;
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

/// <summary>
/// The <c>TMSFwkConfirmationBroker</c> class confirms shipments.
/// </summary>
public class TMSFwkConfirmationBroker extends TMSFwkBaseRateBroker
{
    private TMSFwkRateShopBroker rateShopBroker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rateEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms a shipment.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_entity">Entity to confirm.</param>
    public void rateEntity(TmsTransactionFacade _transactionFacade, XElement _entity)
    {
        System.Exception ex;

        try
        {
            TMSCarrierCode carrierCode = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierCode);
            TMSCarrierServiceCode carrierServiceCode = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierServiceCode);
            TMSRouteConfigCode routeConfigCode = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::RouteConfigurationCode);
            WHSShipmentId shipmentId = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::Shipment);

            RatingDto ratingDTO = TMSFwkRatingDtoHelper::getRatingDtoForCarrier(
                _transactionFacade,
                carrierCode,
                carrierServiceCode,
                DateTimeUtil::newDateTime(dateNull(), 0));

            // must have a rating profile configured
            if (ratingDTO == null)
            {
                _entity.AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), strFmt("@TRX2631", carrierCode, carrierServiceCode)));
            }
            else
            {
                System.Object rateEngineObject = TMSFwkRatingService::retrieveRateEngine(_entity, ratingDTO);
                TMSFwkIRateEngine rateEngine = rateEngineObject;
                if (rateEngineObject != null && rateEngine.supportsConfirmation())
                {
                    _entity.RemoveNonManualRates();
                    TMSFwkRatingService::updateTotalsOnRatingEntities(_transactionFacade);

                    // route
                    if (routeConfigCode)
                    {
                        this.parmRoutingService().rateSegmentConfigurationFromSegmentElement(_transactionFacade, _entity, routeConfigCode);
                    }

                    // rate
                    this.parmRateShopBroker().rateEntity(_transactionFacade, _entity);

                    // ProNumber should not be regenrated if already set on shipment
                    // No matter with manual or automatic setup
                    if (!WHSShipmentTable::find(shipmentId).ProNum)
                    {
                        this.parmRatingService().applyNextProNumber(_transactionFacade);
                    }
                }
                else
                {
                    TMSFwkRatingService::updateTotalsOnRatingEntities(_transactionFacade);
                    XElement ratingEntity = _entity.RetrieveOrCreateRatingEntity(ratingDTO);
                    ratingEntity.Add(new XElement(ElementXmlConstants::Status, ElementXmlConstants::NotSupported));
                }
            }
        }
        catch (ex)
        {
            _transactionFacade.parmXTransaction().GenerateElementForXPath(EntityXmlConstants::RatingEntities, EntityXmlConstants::RatingEntity)
                .AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), ex.ToString()));
            TMSException::ThrowException("@TRX2581", ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRateShopBroker</Name>
				<Source><![CDATA[
    protected TMSFwkRateShopBroker parmRateShopBroker()
    {
        if (!rateShopBroker)
        {
            rateShopBroker = TMSFwkBrokerFactory::createBroker(TMSCommunicationType::RateShop);
        }

        return rateShopBroker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>