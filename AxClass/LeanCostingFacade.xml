<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCostingFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCostingFacade</c> class provides an interface between lean manufacturing on one side and lean costing and BOM calculation on the other.
/// </summary>
public class LeanCostingFacade extends LeanCostingFacadeBase
{
    #TimeConstants

    UnknownNoYes    defaultProductionFlowIsActive;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActiveProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the active production flow for a specified item, site, and date.
    /// </summary>
    /// <param name="_itemParmData">
    /// The item related criteria that are used to search for production flows.
    /// </param>
    /// <param name="_inventSiteId">
    /// A <c>InventSiteId</c> variable that is used to search production flows.
    /// </param>
    /// <param name="_date">
    /// A date that is used in the search.
    /// </param>
    /// <returns>
    /// The record ID of the active production flow; otherwise, 0.
    /// </returns>
    public RefRecId getActiveProductionFlow(
        InventItemParmData  _itemParmData,
        InventSiteId        _inventSiteId,
        TransDate           _date)
    {
        if (   !_itemParmData.parmItemId()
            || !_inventSiteId
            || !_date)
        {
            return 0;
        }

        Set productionFlowReferenceRecIdSet = this.getProductionFlows(_itemParmData,_inventSiteId,_date);
        SetEnumerator se = productionFlowReferenceRecIdSet.getEnumerator();
        int productionFlowsCount = productionFlowReferenceRecIdSet.elements();
        RefRecId defaultProductionFlowReferenceRecId = BOMDefaultProductionFlow::findDefaultProductionFlow(_itemParmData.parmItemId(),_inventSiteId).LeanProductionFlowReference;

        if (defaultProductionFlowReferenceRecId)
        {
            if (productionFlowReferenceRecIdSet.in(defaultProductionFlowReferenceRecId))
            {
                defaultProductionFlowIsActive = UnknownNoYes::Yes;
                return defaultProductionFlowReferenceRecId;
            }
            else
            {
                defaultProductionFlowIsActive = UnknownNoYes::No;
            }
        }
        else
        {
            defaultProductionFlowIsActive = UnknownNoYes::Unknown;
        }

        if (productionFlowsCount == 1)
        {
            se.moveNext();
            return se.current();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dimensions that are associated with a <c>LeanProductionFlowReference</c> record.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    The record ID of a <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <returns>
    ///    The <c>Dimension</c> values.
    /// </returns>
    public DimensionDefault getDefaultDimensions(RefRecId _leanProductionFlowReference)
    {
        PlanReference               planReference;
        LeanProductionFlowReference leanProductionFlowReference;

        if (_leanProductionFlowReference)
        {
            select firstonly DefaultDimension from planReference
                exists join leanProductionFlowReference
                    where leanProductionFlowReference.PlanReference == planReference.RecId
                       && leanProductionFlowReference.RecId         == _leanProductionFlowReference;
        }

        return planReference.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the kanban quantity for the specified production flow, item, and site.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    The record ID for the production flow that is used in the calculation.
    /// </param>
    /// <param name="_itemId">
    ///    The item that is used in the calculation.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site that is used in the calculation.
    /// </param>
    /// <returns>
    ///    The kanban quantity for the specified production flow reference, item, and site
    /// </returns>
    public InventQty getKanbanQuantity(
        RefRecId     _leanProductionFlowReference,
        ItemId       _itemId,
        InventSiteId _inventSiteId)
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;
        InventQty           result;
        TransDate           transDate    = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        TransDateTime       dateTimeFrom = DateTimeUtil::newDateTime(transDate,0);
        TransDateTime       dateTimeTo   = DateTimeUtil::newDateTime(transDate,#secondsPerDay-1);

        inventDim.InventSiteId         = _inventSiteId;
        inventDim                      = InventDim::findOrCreate(inventDim);
        inventDimParm.InventSiteIdFlag = NoYes::Yes;    //all rules for the site

        KanbanFindRules kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(
                                                                                      _leanProductionFlowReference,
                                                                                      _itemId,
                                                                                      dateTimeFrom,
                                                                                      dateTimeTo,
                                                                                      inventDim.InventDimId,
                                                                                      inventDimParm,
                                                                                      true,
                                                                                      true,
                                                                                      false);

        KanbanRule kanbanRule = kanbanFindRules.findFirstKanbanRule();

        if (kanbanRule)
        {
            result = kanbanRule.Quantity;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionFlowFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the production flow for a specified inventory transaction originator.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    A record ID of an <c>InventTransOrigin</c> table buffer.
    /// </param>
    /// <returns>
    ///    The record ID of a <c>LeanProductionFlowReference</c> record; otherwise, zero.
    /// </returns>
    public RefRecId getProductionFlowFromInventTrans(RefRecId _inventTransOrigin)
    {
        InventTransOrigin           inventTransOrigin;
        Kanban                      kanban;
        KanbanRule                  kanbanRule;
        KanbanFlow                  kanbanFlow;
        PlanPlanActivity            planPlanActivity;
        Plan                        plan;
        PlanReference               planReference;
        LeanProductionFlowReference leanProductionFlowReference;

        select firstonly RecId from leanProductionFlowReference
            exists join planReference
                where planReference.RecId == leanProductionFlowReference.PlanReference
            exists join plan
                where plan.PlanReference == planReference.RecId
            exists join planPlanActivity
                where planPlanActivity.Plan == plan.RecId
            exists join kanbanFlow
                where kanbanFlow.LastPlanPlanActivity == planPlanActivity.RecId
            exists join kanbanRule
                where kanbanRule.KanbanFlow == kanbanFlow.RecId
            exists join kanban
                where kanban.KanbanRule == kanbanRule.RecId
            exists join inventTransOrigin
                where inventTransOrigin.ReferenceId        == kanban.KanbanId
                   && inventTransOrigin.RecId              == _inventTransOrigin
                   && (inventTransOrigin.ReferenceCategory == InventTransType::KanbanEmptied
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobPickingList
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobProcess
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferIssue
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferReceipt
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobWIP);

        return leanProductionFlowReference.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionFlowFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the production flow for a specified purchase line.
    /// </summary>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> record.
    /// </param>
    /// <returns>
    ///    The record ID of a <c>LeanProductionFlowReference</c> record; otherwise, zero.
    /// </returns>
    public LeanProductionFlowReferenceRefRecId getProductionFlowFromPurchLine(PurchLine _purchLine)
    {
        return LeanProductionFlowReference::findPlanReference(_purchLine.PlanReference).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionFlows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines all production flows for a specified item, site, and date.
    /// </summary>
    /// <param name="_itemParmData">
    /// The item related criteria that are used to search for production flows.
    /// </param>
    /// <param name="_inventSiteId">
    /// A <c>InventSiteId</c> variable that is used to search for production flows.
    /// </param>
    /// <param name="_date">
    /// A date that is used to search for production flows.
    /// </param>
    /// <returns>
    /// A set of record IDs for <c>LeanProductionFlowReference</c> records.
    /// </returns>
    public Set getProductionFlows(
        InventItemParmData  _itemParmData,
        InventSiteId        _inventSiteId,
        TransDate           _date)
    {
        TransDateTime                   dateTimeFrom = DateTimeUtil::newDateTime(_date,0);
        TransDateTime                   dateTimeTo   = DateTimeUtil::newDateTime(_date,#secondsPerDay-1);
        Set                             set          = new Set(typeName2Type(extendedTypeStr(recId)));

        InventDimParm localInventDimParm = _itemParmData.parmInventDimParm();
        localInventDimParm.InventSiteIdFlag = NoYes::Yes;
        _itemParmData.parmInventDimParm(localInventDimParm);

        KanbanFindRules kanbanFindRules = KanbanFindRules::newStandard(
                                                               _itemParmData.parmItemId(),
                                                               dateTimeFrom,
                                                               dateTimeTo,
                                                               _itemParmData.parmInventDimId(),
                                                               _itemParmData.parmInventDimParm(),
                                                               false,
                                                               true,
                                                               false);

        KanbanRule kanbanRule = kanbanFindRules.first();
        while (kanbanRule)
        {
            LeanProductionFlowReference leanProductionFlowReference = kanbanRule.leanProductionFlowReference();
            set.add(leanProductionFlowReference.RecId);
            kanbanRule = kanbanFindRules.next();
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the production group that is associated with a <c>LeanProductionFlowReference</c> record.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    The record ID of a <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <returns>
    ///    The <c>ProdGroup</c> record if present; otherwise, an empty table buffer.
    /// </returns>
    public ProdGroup getProductionGroup(RefRecId _leanProductionFlowReference)
    {
        return LeanProductionFlowReference::find(_leanProductionFlowReference).prodGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourcesUsage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates production flow internal operation resource usage for an item, date, and quantity.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    A record ID for the <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_itemId">
    ///    A <c>ItemId</c> variable for which to calculate resource usage.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for which to calculate resource usage.
    /// </param>
    /// <param name="_date">
    ///    The date for which to calculate resource usage.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity for which to calculate resource usage.
    /// </param>
    /// <returns>
    ///    A map of resource IDs and usage quantities.
    /// </returns>
    public Map getResourcesUsage(
        RefRecId    _leanProductionFlowReference,
        ItemId      _itemId,
        InventDimId _inventDimId,
        TransDate   _date,
        InventQty   _inventQty)
    {
        InventDimParm                       inventDimParm;
        Map                                 mapResourceRequirements = new Map(Types::String, Types::Real); // wrkCtrId -> resource requirement in hours
        TransDateTime                       dateTimeFrom            = DateTimeUtil::newDateTime(_date,0);
        TransDateTime                       dateTimeTo              = DateTimeUtil::newDateTime(_date,#secondsPerDay-1);

        InventDim inventDim = InventDim::find(_inventDimId ? _inventDimId : InventDim::inventDimIdBlank());
        inventDimParm.initFromInventDim(inventDim);

        KanbanFindRules kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(_leanProductionFlowReference,
                                                                                              _itemId,
                                                                                              dateTimeFrom,
                                                                                              dateTimeTo,
                                                                                              inventDim.InventDimId,
                                                                                              inventDimParm,
                                                                                              true,
                                                                                              true,
                                                                                              false,
                                                                                              _inventQty);
        kanbanFindRules.parmIncludeReceiveFinished(true);
        kanbanFindRules.parmIncludeReceiveSemiFinished(false);

        KanbanRule kanbanRule = kanbanFindRules.findFirstKanbanRule();

        if (kanbanRule)
        {
            KanbanFlowResourceRequirementsFlow kanbanFlowResourceRequirements = KanbanFlowResourceRequirementsFlow::newStandard(
                                                                                                                            kanbanRule,
                                                                                                                            kanbanRule.kanbanFlow(),
                                                                                                                            _itemId,
                                                                                                                            _inventDimId,
                                                                                                                            _inventQty,
                                                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(_itemId).inventUnitId()),
                                                                                                                            true,
                                                                                                                            false
                                                                                                                            ,
                                                                                                                            true,
                                                                                                                            dateTimeFrom,
                                                                                                                            dateTimeTo
                                                                                                                            );

            mapResourceRequirements = kanbanFlowResourceRequirements.requirementsAsMapWrkCtrIdHours();
        }

        return mapResourceRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourcesUsageKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource usage of the production flow operation for a kanban job.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record for which to calculate resource consumption.
    /// </param>
    /// <param name="_date">
    /// The date for which to calculate resource usage.
    /// </param>
    /// <returns>
    /// A map of resource IDs and usage quantities.
    /// </returns>
    /// <remarks>
    /// Calculates resource consumption for the job and for all items in the picking list that are produced
    /// in the same flow. Note that only the first process job of a kanban may have a picking
    /// list.Calculations for other jobs will return only the resource usage for the job itself.
    /// </remarks>
    public Map getResourcesUsageKanbanJob(
        KanbanJob _kanbanJob,
        TransDate _date = DateTimeUtil::date(_kanbanJob.ActualStartDateTime))
    {
        Map                                 mapResourceRequirements = new Map(Types::String, Types::Real); // wrkCtrId - resource requirement in hours

        KanbanRule kanbanRule = _kanbanJob.kanbanRule();

        if (   kanbanRule
            && kanbanRule.LegalEntity == CompanyInfo::current())
        {
            KanbanFlowResourceRequirementsBase kanbanFlowResourceRequirements = KanbanFlowResourceRequirementsJob::newStandard(_kanbanJob,_date,true,false);
            mapResourceRequirements = kanbanFlowResourceRequirements.requirementsAsMapWrkCtrIdHours();
        }

        return mapResourceRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubcontractedServicesUsage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates quantities of subcontracted services usage for an item, date, and quantity.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    A record ID for the <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> variable for which to calculate service usage.
    /// </param>
    /// <param name="_inventDimId">
    ///    An <c>InventDimId</c> variable for which to calculate service usage.
    /// </param>
    /// <param name="_date">
    ///    The date for which to calculate service usage.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity for which to calculate service usage.
    /// </param>
    /// <param name="_includeProcess">
    ///     A boolean value indicating if service usage related to process activities should be included.
    /// </param>
    /// <param name="_includeTransfer">
    ///     A boolean value indicating if service usage related to transfer activities should be included.
    /// </param>
    /// <returns>
    ///    A map of service item ID - dimension combination and usage quantities.
    /// </returns>
    public Map getSubcontractedServicesUsage(
        RefRecId    _leanProductionFlowReference,
        ItemId      _itemId,
        InventDimId _inventDimId,
        TransDate   _date,
        InventQty   _inventQty,
        boolean     _includeProcess = true,
        boolean     _includeTransfer = true)
    {
        InventDimParm                   inventDimParm;
        Map                             mapServiceRequirements = new Map(Types::Container, Types::Real); // [itemId,inventDimId] -> qty
        InventQty                       requiredQuantity;
        TransDateTime                   dateTimeFrom = DateTimeUtil::newDateTime(_date,0);
        TransDateTime                   dateTimeTo   = DateTimeUtil::newDateTime(_date,#secondsPerDay-1);

        InventDim inventDim = InventDim::find(_inventDimId ? _inventDimId : InventDim::inventDimIdBlank());
        inventDimParm.initFromInventDim(inventDim);

        //note: result may include withdrawal rules, so that subcontracted transfer cost can be captured.
        KanbanFindRules kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(_leanProductionFlowReference,
                                                                                              _itemId,
                                                                                              dateTimeFrom,
                                                                                              dateTimeTo,
                                                                                              inventDim.InventDimId,
                                                                                              inventDimParm,
                                                                                              true,
                                                                                              _includeProcess,
                                                                                              _includeTransfer,
                                                                                              _inventQty);
        KanbanRule kanbanRule = kanbanFindRules.findFirstKanbanRule();

        if (kanbanRule)
        {
            KanbanFlowServiceRequirements kanbanFlowServiceRequirements = KanbanFlowServiceRequirements::newStandard(kanbanRule,
                                                                                                                     _itemId,
                                                                                                                     inventDim.InventDimId,
                                                                                                                     _inventQty);
            boolean requirementsFound = kanbanFlowServiceRequirements.first();
            while (requirementsFound)
            {
                container requiredItemIdInventDimId = kanbanFlowServiceRequirements.currentRequiredItemIdInventDimId();
                if (requiredItemIdInventDimId)
                {
                    if (mapServiceRequirements.exists(requiredItemIdInventDimId))
                    {
                        requiredQuantity = mapServiceRequirements.lookup(requiredItemIdInventDimId);
                    }
                    else
                    {
                        requiredQuantity = 0;
                    }

                    requiredQuantity += kanbanFlowServiceRequirements.currentRequiredInventQty();

                    mapServiceRequirements.insert(requiredItemIdInventDimId,requiredQuantity);
                }
                requirementsFound = kanbanFlowServiceRequirements.next();
            }
        }

        return mapServiceRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnusedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates unused production flow quantities.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    A record ID for the <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_date">
    ///    A date that is used in the calculation.
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> object of the <c>LeanProductionFlowCostingUnusedQty</c> records.
    /// </returns>
    public RecordSortedList getUnusedQuantities(
        RefRecId  _leanProductionFlowReference,
        TransDate _date)
    {
        return LeanProductionFlowUnusedQuantities::newStandard(_leanProductionFlowReference,_date).unusedQuantities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultProductionFlowActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns information about the default production flow for the product, site, and date for which the
    ///    <c>LeanCostFacadeBase.getActiveProductionFlow</c> method was last called.
    /// </summary>
    /// <returns>
    ///    A <c>UnknownNoYes::Unknown</c> enumeration value if there is no default production flow or the
    ///    <c>LeanCostFacadeBase.getActiveProductionFlow</c> method was not called. The
    ///    <c>UnknownNoYes::Yes</c> enumeration value if the default production flow is active. The
    ///    <c>UnknownNoYes::No</c> enumeration value if the default production flow is not active.
    /// </returns>
    public UnknownNoYes isDefaultProductionFlowActive()
    {
        return defaultProductionFlowIsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an item is inventory controlled in a production flow at a specified site.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    A record ID of the <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_itemParmData">
    ///    The item for which to determine the inventory control setting.
    /// </param>
    /// <param name="_parentItemParmData">
    ///    The parent item that is used in the inventory control determination.
    /// </param>
    /// <param name="_date">
    ///    The date that is used in the inventory control determination.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site that is used in the inventory control determination.
    /// </param>
    /// <param name="_bomId">
    ///    The BOM ID that is used in the inventory control determination.
    /// </param>
    /// <returns>
    ///    true if the item is inventory controlled; otherwise, false.
    /// </returns>
    public boolean isInventoryControlled(
        RefRecId            _leanProductionFlowReference,
        InventItemParmData  _itemParmData,
        InventItemParmData  _parentItemParmData,
        TransDate           _date,
        InventSiteId        _inventSiteId,
        BOMId               _bomId)
    {
        LeanItemMadeInProductionFlow leanItemMadeInProductionFlow = LeanItemMadeInProductionFlow::newLeanProductionFlowItemParentDate(
                                                                         _leanProductionFlowReference,
                                                                         _itemParmData,
                                                                         _parentItemParmData,
                                                                         _date);

        return leanItemMadeInProductionFlow.isInventoryControlledInProductionFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMadeInProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a specified item is produced in the given production flow and date.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    The record ID of a <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_itemParmData">
    ///    The item to check.
    /// </param>
    /// <param name="_parentItemParmData">
    ///    The parent item in a BOM.
    /// </param>
    /// <param name="_date">
    ///    The date to check.
    /// </param>
    /// <returns>
    ///    true if the item is made in the production flow; otherwise, false.
    /// </returns>
    public boolean isItemMadeInProductionFlow(
        RefRecId            _leanProductionFlowReference,
        InventItemParmData  _itemParmData,
        InventItemParmData  _parentItemParmData,
        TransDate _date)
    {
        return LeanItemMadeInProductionFlow::newLeanProductionFlowItemParentDate(_leanProductionFlowReference,
                                                                                 _itemParmData,
                                                                                 _parentItemParmData,
                                                                                 _date).isMadeInProductionFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the dimensions that are associated with a <c>LeanProductionFlowReference</c> record and the provided default dimension.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    ///    The record ID of a <c>LeanProductionFlowReference</c> record.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The default dimension to be used as a second priority during the merge.
    /// </param>
    /// <returns>
    ///    The <c>Dimension</c> values.
    /// </returns>
    public DimensionDefault mergeDefaultDimensions(
        RefRecId            _leanProductionFlowReference,
        DimensionDefault    _defaultDimension
        )
    {
        PlanReference               planReference;
        LeanProductionFlowReference leanProductionFlowReference;
        DimensionDefault            defaultDimension;

        if (_leanProductionFlowReference)
        {
            select firstonly planReference
                exists join leanProductionFlowReference
                    where leanProductionFlowReference.PlanReference == planReference.RecId
                       && leanProductionFlowReference.RecId         == _leanProductionFlowReference;

            defaultDimension = planReference.mergeDimension(_defaultDimension);
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LeanCostingFacade construct()
    {
        return new LeanCostingFacade();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
