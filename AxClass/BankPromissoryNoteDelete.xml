<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankPromissoryNoteDelete extends BankNegInstDelete
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDocuments</Name>
				<Source><![CDATA[
    protected void deleteDocuments()
    {
        BankPromissoryNoteTable bankPromissoryNoteTable;

        delete_from bankPromissoryNoteTable
            where bankPromissoryNoteTable.BankAccountID == accountID
                && bankPromissoryNoteTable.PromissoryNoteNum >= fromNegInstNum
                && bankPromissoryNoteTable.PromissoryNoteNum <= toNeginstNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS73954");

        dialogFromNegInstNum = dialog.addField(extendedTypeStr(BankPromissoryNoteNum), "@SYS4083");
        dialogToNegInstNum = dialog.addField(extendedTypeStr(BankPromissoryNoteNum), "@SYS8828");
        dialogFromNegInstNum.lookupButton(FormLookupButton::Never);
        dialogToNegInstNum.lookupButton(FormLookupButton::Never);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeDeleted</Name>
				<Source><![CDATA[
    protected boolean mayBeDeleted()
    {
        BankPromissoryNoteTable bankPromissoryNoteTable;

        select firstonly RecId from bankPromissoryNoteTable
            where bankPromissoryNoteTable.BankAccountID == accountID
                && bankPromissoryNoteTable.PromissoryNoteNum >= fromNegInstNum
                && bankPromissoryNoteTable.PromissoryNoteNum <= toNeginstNum
                && bankPromissoryNoteTable.DocumentStatus != BankPromissoryNoteStatus::Created;

        return bankPromissoryNoteTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocumentsDeletedOk</Name>
				<Source><![CDATA[
    protected str txtDocumentsDeletedOk()
    {
        return strfmt("@SYS74002", fromNegInstNum, toNeginstNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (ret && !this.mayBeDeleted())
        {
            ret = checkFailed(strfmt("@SYS74000", BankPromissoryNoteStatus::Created));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS74001";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankPromissoryNoteDelete noteDelete;

        switch (args.dataset())
        {
            case tablenum(BankAccountTable):
                noteDelete = BankNegInstDelete::newBankAccountTable(BankNegInst::PromissoryNote, args.record());
                noteDelete.setAccountIdInactive();
                break;

            case tablenum(BankPromissoryNoteTable):
                noteDelete = BankNegInstDelete::newBankNegInstTableMap(BankNegInst::PromissoryNote, args.record());
                break;

            default:
                throw error(Error::wrongUseOfFunction(BankPromissoryNoteDelete::description()));
        }

        if (noteDelete.prompt())
        {
            noteDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>