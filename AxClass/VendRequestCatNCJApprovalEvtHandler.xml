<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestCatNCJApprovalEvtHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendRequestCatNCJApprovalEvtHandler</c> class implements the started, completed, canceled,
///    and denied workflow approval element event interfaces that are used for the approval process.
/// </summary>
class VendRequestCatNCJApprovalEvtHandler implements WorkflowElementCompletedEventHandler,
                                                   WorkflowElementCanceledEventHandler,
                                                   WorkflowElementDeniedEventHandler,
                                                   WorkflowElementStartedEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that fired the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                VendRequestCategoryStatus::RequestCancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the approval status to
    ///    a <c>RequestApproved</c> value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // update the document status and the workflow status next
        VendRequestCategoryExtension::setWorkflowState(
            _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
            VendRequestCategoryStatus::CategoryRequestReady);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workflow state to a <c>RequestRejected</c> value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                       VendRequestCategoryStatus::RequestRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the workflow status to
    ///    a <c>RequestPendingApproval</c> value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event occurs for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                       VendRequestCategoryStatus::RequestPendingApproval);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>