<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalTransSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSJournalTransSplit</c> class is used to split an arrival journal line by creating a copy
///    and reducing the quantity.
/// </summary>
/// <remarks>
///    Special handling of sales return orders is implemented in the run method.
/// </remarks>
class WmsJournalTransSplit extends RunBase
{
    InventQty           splitQty, origQty;
    WMSJournalTrans     wmsJournalTransOrig;
    WMSJournalTableData wmsJournalTableData;

    DialogRunbase       dialog;
    DialogField         dialogSplitQty;

    PdsCWInventQty      cwSplitQty;
    PdsCWInventQty      cwOrigQty;
    DialogField         cwDialogSplitQty;

    #DEFINE.CurrentVersion(100)
    #LOCALMACRO.CurrentList
        splitQty
        , cwSplitQty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the user dialog.
    /// </summary>
    /// <returns>
    /// A dialog object.
    /// </returns>
    Object dialog()
    {
        DialogField     qty;

        DialogField     cwQtyField;
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(wmsJournalTransOrig.ItemId);

        dialog          = super();

        if (isCWItem)
        {
            cwQtyField = dialog.addFieldValue(extendedtypestr(PdsCWInventQty),
                wmsJournalTransOrig.PdsCWQty);
            cwQtyField.active(false);
        }
        else
        {
            this.cwSplitQty = 0;
        }

                                                                                // Remaining quantity
        qty = dialog.addFieldValue(extendedtypestr(InventQty), wmsJournalTransOrig.Qty, "@SYS10197", "@SYS10197");
        qty.active(false);                                                      //Split quantity

        if (isCWItem)
        {
            cwDialogSplitQty = dialog.addFieldValue(extendedtypestr(PdsCWInventQty),
                cwSplitQty, "@PDS561", "@PDS561");
            cwDialogSplitQty.registerOverrideMethod(
                methodStr(FormRealControl, modified),
                methodStr(WmsJournalTransSplit, pdsQtyModified),
                this);
        }

        dialogSplitQty = dialog.addFieldValue(extendedtypestr(InventQty), splitQty, "@SYS19602", "@SYS19602");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves values from the user dialog box.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    public boolean getFromDialog()
    {
        if (cwDialogSplitQty)
        {
            cwSplitQty = cwDialogSplitQty.value();
        }

        splitQty = dialogSplitQty.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // This method will be put into the FPK model due to the changes
        // to the #CurrentVersion and #CurrentList macros.
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWSplitQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWSplitQty(
        PdsCWInventQty _pdsCWSplitQty = cwSplitQty)
    {
        cwSplitQty = _pdsCWSplitQty;
        return cwSplitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    public InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSJournalTableData</Name>
				<Source><![CDATA[
    public WMSJournalTableData parmWMSJournalTableData(WMSJournalTableData _wmsJournalTableData = wmsJournalTableData)
    {
        wmsJournalTableData = _wmsJournalTableData;
        return wmsJournalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSJournalTrans</Name>
				<Source><![CDATA[
    WMSJournalTrans parmWMSJournalTrans(WMSJournalTrans _wmsJournalTrans = wmsJournalTransOrig)
    {
        wmsJournalTransOrig = _wmsJournalTrans;
        return wmsJournalTransOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsQtyModified</Name>
				<Source><![CDATA[
    public boolean pdsQtyModified(Object _callerControl)
    {
        if (dialogSplitQty.value() == 0.0)
        {
            dialogSplitQty.value(PdsCatchWeight::inventQty(wmsJournalTransOrig.ItemId, cwDialogSplitQty.value()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.validate())
        {
                throw error("@SYS18447");
        }

        if (WMSJournalTransSplit::serverRun(wmsJournalTransOrig, splitQty
            , cwSplitQty
            ))
        {
            wmsJournalTableData.addTotal(wmsJournalTransOrig);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        // This method will be put into the FPK model due to the changes
        // to the #CurrentVersion and #CurrentList macros.
        Integer     version      = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (! wmsJournalTransOrig)
        {
            return checkFailed("@SYS82774");
        }

        if (splitQty * wmsJournalTransOrig.Qty   < 0)
        {
            return checkFailed("@SYS19603");
        }

        if (splitQty >= wmsJournalTransOrig.Qty || splitQty <= 0)
        {
            return checkFailed("@SYS13895");
        }

        if (!PdsCatchWeight::validateInventQty(wmsJournalTransOrig.ItemId,
                splitQty, cwSplitQty))
        {
            return false;
        }

        if (!PdsCatchWeight::validateInventQty(wmsJournalTransOrig.ItemId,
                wmsJournalTransOrig.Qty - splitQty,
                wmsJournalTransOrig.PdsCWQty - cwSplitQty))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSJournalTransSplit construct()
    {
        return new WMSJournalTransSplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS10133";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSJournalTransSplit    wmsJournalTransSplit;
        Object                  callerForm;

        if (_args && _args.record())
        {
            switch (_args.dataset())
            {
                case tableNum(WMSJournalTrans) :
                    wmsJournalTransSplit = WMSJournalTransSplit::construct();
                    wmsJournalTransSplit.parmWMSJournalTrans(_args.record() as WMSJournalTrans);
                    callerForm = _args.caller();
                    if (callerForm.name() == formStr(WMSJournalTable))
                    {
                        wmsJournalTransSplit.parmWMSJournalTableData(callerForm.getWMSJournalTableData());
                    }

                    if (!wmsJournalTransSplit.prompt())
                    {
                        return;
                    }

                    wmsJournalTransSplit.runOperation();
                    callerForm.doResearch();
                    break;
                default:
                    throw error(strFmt("@SYS19306",funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverRun</Name>
				<Source><![CDATA[
    private static boolean serverRun(
        WMSJournalTrans     _wmsJournalTransOrig,
        InventQty           _splitQty,
        PdsCWInventQty      _cwSplitQty)
    {
        setprefix(WMSJournalTransSplit::description());

        try
        {
            ttsbegin;
            if (_wmsJournalTransOrig.ReturnItemNum && _wmsJournalTransOrig.InventTransType == InventTransType::Sales)
            {
                if (ReturnDispositionCode::find(_wmsJournalTransOrig.ReturnDispositionCodeId).createReplacement())
                {
                    SalesLine salesLine = SalesLine::findInventTransId(_wmsJournalTransOrig.InventTransId);
                    if (ReturnReplaceItemRef::deleteReplaceSetup(salesLine.SalesId, salesLine.LineNum))
                    {
                         //One or more Replacement orders, related to Arrival journal %1 line number %2 and return order %3, has been deleted.
                        info(strfmt("@SYS116538", _wmsJournalTransOrig.JournalId, _wmsJournalTransOrig.LineNum, _wmsJournalTransOrig.ReturnItemNum));
                    }
                }
            }

            WMSJournalTrans transOrig = WMSJournalTrans::find(_wmsJournalTransOrig.JournalId, _wmsJournalTransOrig.LineNum, true);
            transOrig.Qty = transOrig.Qty - _splitQty;

            transOrig.PdsCWQty -= _cwSplitQty;

            transOrig.update();
            
            WMSJournalTrans transSplit;
            transSplit.data(_wmsJournalTransOrig);

            if (_wmsJournalTransOrig.ReturnItemNum && _wmsJournalTransOrig.InventTransType == InventTransType::Sales)
            {
                transSplit.InventTransId = SalesLine::splitReturnLine(transOrig.InventTransId, _splitQty * -1, _cwSplitQty * -1);
                SalesLine::changeReturnOrderType(transSplit.InventTransId);
            }

            transSplit.PdsCWQty                 = _cwSplitQty;

            WmsJournalTransSplit::initializeInventoryDimensions(transSplit, transOrig);

            transSplit.Qty                      = _splitQty;
            transSplit.ReturnDispositionCodeId  = '';
            transSplit.LineNum                  = 0;
            transSplit.insert();
            ttscommit;

            return true;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                #OCCRetryCount
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions based on the location journal lines table record.
    /// </summary>
    /// <param name="_transSplit">The location journal lines table record.</param>
    /// <param name="_transOrig">The location journal lines originator table record.</param>
    protected static void initializeInventoryDimensions(WMSJournalTrans _transSplit, WMSJournalTrans _transOrig)
    {
        InventDim inventDim = _transSplit.inventDim();
        if (inventDim.InventSerialId)
        {
            inventDim.InventSerialId = '';
            _transSplit.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>