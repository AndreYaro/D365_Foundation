<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankModernReconciliationRuleUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the util class for modern bank reconciliation rules.
/// </summary>
internal final class BankModernReconciliationRuleUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateQueryOrderForBankCustInvoiceQuery</Name>
				<Source><![CDATA[
    internal static void updateQueryOrderForBankCustInvoiceQuery(QueryRun _qrInvoice, BankReconciliationMatchActionType _matchActionType)
    {
        QueryBuildDataSource qbdsInvoiceView = _qrInvoice.query().dataSourceTable(tableNum(CustInvoiceForBankReconciliationView));
        QueryBuildDataSource qbdsCustTransOpen = _qrInvoice.query().dataSourceTable(tableNum(CustTransOpen));

        if (CustParameters::find().UseSettlementPriority)
        {
            CustSettlementPriority custSettlementPriority;
            while select Attribute, Direction from custSettlementPriority
                order by Priority desc
                where custSettlementPriority.Enabled == NoYes::Yes
            {
                SortOrder sortOrder = custSettlementPriority.Direction == CustSettlementAttributeDirection::Ascending ? SortOrder::Ascending : SortOrder::Descending;
                switch (custSettlementPriority.Attribute)
                {
                    case CustSettlementPriorityAttribute::TranscationAmount:
                        if (_matchActionType == BankReconciliationMatchActionType::SettleCustInv)
                        {
                            qbdsCustTransOpen.addOrderByField(fieldNum(CustTransOpen, AmountCur), sortOrder);
                        }
                        else
                        {
                            qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, AmountCur), sortOrder);
                        }
                        break;

                    case CustSettlementPriorityAttribute::CashDiscountDate:
                        if (_matchActionType == BankReconciliationMatchActionType::SettleCustInv)
                        {
                            qbdsCustTransOpen.addOrderByField(fieldNum(CustTransOpen, SettlementPriorityCashDiscDate), sortOrder);
                        }
                        else
                        {
                            qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, CashDiscdate), sortOrder);
                        }
                        break;

                    case CustSettlementPriorityAttribute::DueDate:
                        if (_matchActionType == BankReconciliationMatchActionType::SettleCustInv)
                        {
                            qbdsCustTransOpen.addOrderByField(fieldNum(CustTransOpen, DueDate), sortOrder);
                        }
                        else
                        {
                            qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, DueDate), sortOrder);
                        }
                        break;

                    case CustSettlementPriorityAttribute::TransactionType:
                        qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, CustSettlementTransPriority), SortOrder::Descending);
                        break;

                    case CustSettlementPriorityAttribute::TransactionDate:
                        qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, TransDate), sortOrder);
                        break;

                    case CustSettlementPriorityAttribute::Voucher:
                        qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, Voucher), sortOrder);
                        break;

                    case CustSettlementPriorityAttribute::Billing:
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, CustBillingSettlementPriority), sortOrder);
                        }
                        break;

                    default:
                        break;
                }
            }
        }
        else
        {
            qbdsInvoiceView.addOrderByField(fieldNum(CustInvoiceForBankReconciliationView, TransDate), SortOrder::Ascending);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>