<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationManualWorkCompletionPerformanceTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppRuntimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

internal final class WHSInstrumentationManualWorkCompletionPerformanceTask extends WHSInstrumentationPerformanceTask
{
    private Map initialParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	public void new(str _action, Map _parameters)
    {
        initialParameters = _parameters;
        super('manualWorkCompletion', _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTaskStart</Name>
				<Source><![CDATA[
    protected void preTaskStart()
    {
        if (WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaskStart</Name>
				<Source><![CDATA[
    protected void postTaskStart() 
    {   
        if (!WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessWorkHeaders</Name>
				<Source><![CDATA[
    public static WHSInstrumentationManualWorkCompletionPerformanceTask newProcessWorkHeaders()
    {
        Map parameters = new Map(Types::String, Types::String);

        return new WHSInstrumentationManualWorkCompletionPerformanceTask('processWorkHeaders', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessWorkHeader</Name>
				<Source><![CDATA[
    public static WHSInstrumentationManualWorkCompletionPerformanceTask newProcessWorkHeader(RecId _workHeaderRecId, int64 _workLineCount)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkHeaderRecId(parameters, _workHeaderRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkLineCount(parameters, _workLineCount);

        return new WHSInstrumentationManualWorkCompletionPerformanceTask('processWorkHeader', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessWorkLine</Name>
				<Source><![CDATA[
    public static WHSInstrumentationManualWorkCompletionPerformanceTask newProcessWorkLine(RecId _workHeaderRecId, RecId _workLineRecId, boolean _isCWItem)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkHeaderRecId(parameters, _workHeaderRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkLineRecId(parameters, _workLineRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkLineCWItem(parameters, _isCWItem);

        return new WHSInstrumentationManualWorkCompletionPerformanceTask('processWorkLine', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessWorkLineSplitCommit</Name>
				<Source><![CDATA[
    public static WHSInstrumentationManualWorkCompletionPerformanceTask newProcessWorkLineSplitCommit(RecId _workHeaderRecId, RecId _workLineRecId, int64 _numberOfWorkLinesCommittedSoFar)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkHeaderRecId(parameters, _workHeaderRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkLineRecId(parameters, _workLineRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setNumberOfWorkLinesCommittedSoFar(parameters, _numberOfWorkLinesCommittedSoFar);

        return new WHSInstrumentationManualWorkCompletionPerformanceTask('processWorkLineSplitCommit', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessWorkLineLastCommit</Name>
				<Source><![CDATA[
    public static WHSInstrumentationManualWorkCompletionPerformanceTask newProcessWorkLineLastCommit(RecId _workHeaderRecId, int64 _numberOfWorkLinesCommittedSoFar)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationManualWorkCompletionPerformanceTask::setWorkHeaderRecId(parameters, _workHeaderRecId);
        WHSInstrumentationManualWorkCompletionPerformanceTask::setNumberOfWorkLinesCommittedSoFar(parameters, _numberOfWorkLinesCommittedSoFar);

        return new WHSInstrumentationManualWorkCompletionPerformanceTask('processWorkLineLastCommit', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkHeaderCount</Name>
				<Source><![CDATA[
    private static void setWorkHeaderCount(Map _parameters, int64 _workHeaderCount)
    {
        _parameters.insert('workHeaderCount', int642Str(_workHeaderCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkHeaderRecId</Name>
				<Source><![CDATA[
    private static void setWorkHeaderRecId(Map _parameters, RecId _workHeaderRecId)
    {
        _parameters.insert('workHeaderRecId', int642Str(_workHeaderRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkLineRecId</Name>
				<Source><![CDATA[
    private static void setWorkLineRecId(Map _parameters, RecId _workLineRecId)
    {
        _parameters.insert('workLineRecId', int642Str(_workLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkLineCWItem</Name>
				<Source><![CDATA[
    private static void setWorkLineCWItem(Map _parameters, boolean _isCWItem)
    {
        _parameters.insert('worklineCWItem', WHSInstrumentationPerformanceTask::booleanToString(_isCWItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkLineCount</Name>
				<Source><![CDATA[
    private static void setWorkLineCount(Map _parameters, int64 _workLineCount)
    {
        _parameters.insert('workLineCount', int642Str(_workLineCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfWorkLinesCommittedSoFar</Name>
				<Source><![CDATA[
    private static void setNumberOfWorkLinesCommittedSoFar(Map _parameters, int64 _numberOfWorkLinesCommittedSoFar)
    {
        _parameters.insert('numberOfWorkLinesCommittedSoFar', int642Str(_numberOfWorkLinesCommittedSoFar));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkLineSplitCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes information event when the database commit happens during work line completion.
    /// </summary>
    public static void logWorkLineSplitCommit(RecId _workHeaderRecId, int64 _numberOfWorkLinesCommittedSoFar, int64 _numberOfCWWorkLinesCommittedSoFar)
    {
        WHSInstrumentationLogger::createLogger(funcname()).logInformation(
            strFmt('Category: manualWorkCompletion, Action: processWorkLineSplitCommit, workHeaderRecId: %1, numberOfWorkLinesCommittedSoFar: %2, numberOfCWWorkLinesCommittedSoFar: %3', _workHeaderRecId, _numberOfWorkLinesCommittedSoFar, _numberOfCWWorkLinesCommittedSoFar));

        XppRuntimeEventSource::EventWriteInfoLogMark(
            Exception::Info,
            strFmt('Category: manualWorkCompletion, Action: processWorkLineSplitCommit, workHeaderRecId: %1, numberOfWorkLinesCommittedSoFar: %2, numberOfCWWorkLinesCommittedSoFar: %3', _workHeaderRecId, _numberOfWorkLinesCommittedSoFar, _numberOfCWWorkLinesCommittedSoFar));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkLineFinalCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes information event when the final database commit happens during work line completion.
    /// </summary>
    public static void logWorkLineFinalCommit(RecId _workHeaderRecId, int64 _numberOfWorkLinesCommittedSoFar, int64 _numberOfCWWorkLinesCommittedSoFar)
    {
        WHSInstrumentationLogger::createLogger(funcname()).logInformation(
            strFmt('Category: manualWorkCompletion, Action: processWorkLineFinalCommit, workHeaderRecId: %1, numberOfWorkLinesCommittedSoFar: %2, numberOfCWWorkLinesCommittedSoFar: %3', _workHeaderRecId, _numberOfWorkLinesCommittedSoFar, _numberOfCWWorkLinesCommittedSoFar));
    
        XppRuntimeEventSource::EventWriteInfoLogMark(
            Exception::Info,
            strFmt('Category: manualWorkCompletion, Action: processWorkLineFinalCommit, workHeaderRecId: %1, numberOfWorkLinesCommittedSoFar: %2, numberOfCWWorkLinesCommittedSoFar: %3', _workHeaderRecId, _numberOfWorkLinesCommittedSoFar, _numberOfCWWorkLinesCommittedSoFar));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>