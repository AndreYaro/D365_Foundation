<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorInvoiceLineEntityValidator_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final static class VendorInvoiceLineEntityValidator_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateTax1099BoxDetailForGAndSType</Name>
				<Source><![CDATA[
    internal static boolean validateTax1099BoxDetailForGAndSType(VendorInvoiceLineEntity _vendorInvoiceLineEntity)
    {
        return VendorInvoiceLineEntityValidator_PSN::checkTax1099GTaxYear(_vendorInvoiceLineEntity)
            && VendorInvoiceLineEntityValidator_PSN::checkTax1099GWithheldAmount(_vendorInvoiceLineEntity)
            && VendorInvoiceLineEntityValidator_PSN::checkTax1099SRelatedValues(_vendorInvoiceLineEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTax1099BoxSetToGOrSType</Name>
				<Source><![CDATA[
    internal static boolean isTax1099BoxSetToGOrSType(Tax1099Box _tax1099Box)
    {
        return isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && (isConfigurationkeyEnabled(configurationKeyNum(Tax1099G)) || isConfigurationkeyEnabled(configurationKeyNum(Tax1099S)))
            && _tax1099Box
            && (_tax1099Box == Tax1099G::unemploymentCompensation().tax1099Box
                || _tax1099Box == Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box
                || _tax1099Box == Tax1099S::grossProceeds().tax1099Box);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax1099GAndSFieldBasedOnTax1099BoxId</Name>
				<Source><![CDATA[
    internal static void setTax1099GAndSFieldBasedOnTax1099BoxId(VendorInvoiceLineEntity _vendorInvoiceLineEntity)
    {
        switch (_vendorInvoiceLineEntity.Tax1099Box)
        {
            case Tax1099G::unemploymentCompensation().tax1099Box:
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SClosingDate), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SAddressOrLegalDescription), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, IsTax1099SPropertyOrServices), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SBuyerPartOfRealEstateTaxAmount), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GTaxYear), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, IsTax1099GTradeOrBusinessIncome), FieldState::NotSet);
                break;

            case Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box:
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SClosingDate), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SAddressOrLegalDescription), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, IsTax1099SPropertyOrServices), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099SBuyerPartOfRealEstateTaxAmount), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GVendorStateId), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GVendorStateTaxId), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GStateTaxWithheldAmount), FieldState::NotSet);
                break;

            case Tax1099S::grossProceeds().tax1099Box:
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GVendorStateId), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GVendorStateTaxId), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GStateTaxWithheldAmount), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, Tax1099GTaxYear), FieldState::NotSet);
                _vendorInvoiceLineEntity.fieldState(fieldNum(VendorInvoiceLineEntity, IsTax1099GTradeOrBusinessIncome), FieldState::NotSet);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTax1099GWithheldAmount</Name>
				<Source><![CDATA[
    private static boolean checkTax1099GWithheldAmount(VendorInvoiceLineEntity _vendorInvoiceLineEntity) 
    {
        boolean isValid = true;

        if (_vendorInvoiceLineEntity.Tax1099Box == Tax1099G::unemploymentCompensation().tax1099Box
            && (abs(_vendorInvoiceLineEntity.Tax1099GStateTaxWithheldAmount) > abs(_vendorInvoiceLineEntity.Tax1099Amount)))
        {
            isValid = checkFailed("@SPS1943");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTax1099SRelatedValues</Name>
				<Source><![CDATA[
    private static boolean checkTax1099SRelatedValues(VendorInvoiceLineEntity _vendorInvoiceLineEntity)
    {
        boolean isValid = true;

        if (_vendorInvoiceLineEntity.Tax1099Box == Tax1099S::grossProceeds().tax1099Box
            && (_vendorInvoiceLineEntity.Tax1099SClosingDate == dateNull()
                || _vendorInvoiceLineEntity.Tax1099SAddressOrLegalDescription == ''))
        {
            isValid = checkFailed("@SPS3");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTax1099GTaxYear</Name>
				<Source><![CDATA[
    private static boolean checkTax1099GTaxYear(VendorInvoiceLineEntity _vendorInvoiceLineEntity)
    {
        boolean isValid = true;

        if (isValid && _vendorInvoiceLineEntity.Tax1099Box == Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box
            && (_vendorInvoiceLineEntity.Tax1099GTaxYear < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInPast))
                || _vendorInvoiceLineEntity.Tax1099GTaxYear > (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) + Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInFuture))
        {
            isValid = checkFailed(strFmt(
                "@SPS17",
                "@SPS1064",
                int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInPast),
                int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) + Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInFuture)));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>