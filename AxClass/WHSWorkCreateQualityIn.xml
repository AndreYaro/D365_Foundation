<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateQualityIn</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic for hte quality in work creation process.
/// </summary>
internal class WHSWorkCreateQualityIn extends WHSWorkCreate
{
    private WHSWorkCreateId workCreateId;
    private WHSWorkLine     workLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temp table used to create work.
    /// </summary>
    [Hookable(false)]
    public void createTempTable()
    {
        WHSWorkTable workTable = WHSWorkTable::find(workLine.WorkId);
    
        this.parmTargetLicensePlateId(workTable.TargetLicensePlateId);
        this.parmCreatedBy(workTable.LockedUser);
    
        tmpWorkLine.WorkType        = WHSWorkType::Put;
        tmpWorkLine.OriginType      = WHSOriginType::Work;
        tmpWorkLine.OriginRefId     = workLine.WorkId;
        tmpWorkLine.WorkCreateId    = workCreateId;
        tmpWorkLine.WorkTransType   = WHSWorkTransType::QualityInQualityCheck;
    
        InventSumUnionDeltaWithInventDimPhysicalQty inventSumWithDim = this.inventSumUnionDeltaWithInventDimPhysicalQty(workTable.TargetLicensePlateId);

        while (inventSumWithDim)
        {
            tmpWorkLine.ItemId                  = inventSumWithDim.ItemId;
            tmpWorkLine.InventLocationId        = workTable.InventLocationId;
            tmpWorkLine.inventDimId             = workLine.inventDimId;
            tmpWorkLine.OrderNum                = workLine.OrderNum;
            tmpWorkLine.StartLocationId         = startLocationId;
    
            this.setGlobals();
    
            InventQty inventQty = inventSumWithDim.PhysicalInvent;
    
            // Create the temp work lin record(s).
            this.createTempLine(tmpWorkLine, inventQty);

            next inventSumWithDim;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumUnionDeltaWithInventDimPhysicalQty</Name>
				<Source><![CDATA[
    private inventSumUnionDeltaWithInventDimPhysicalQty inventSumUnionDeltaWithInventDimPhysicalQty(WHSLicensePlateId _targetLicensePlateId)
    {
        InventSumUnionDeltaWithInventDimPhysicalQty inventSumWithDim;

        select sum(PhysicalInvent), ItemId from inventSumWithDim
            group by ItemId
            where inventSumWithDim.LicensePlateId == _targetLicensePlateId
                &&	  inventSumWithDim.PhysicalInvent >  0;

        return inventSumWithDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        workLine = _common;
    
        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
    
        super(workLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSWorkCreateQualityIn</c> class.
    /// </summary>
    /// <param name = "_common">The record to use during initialization.</param>
    /// <param name = "_workCreateId">The Work Create Id.</param>
    /// <returns>An instance of the <c>WHSWorkCreateQualityIn</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkCreateQualityIn newFromParms(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        return new WHSWorkCreateQualityIn(_common, _workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;
    
        return workCreateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>