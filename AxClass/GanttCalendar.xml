<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GanttCalendar</c> class loads calendar information into internal variables.
/// </summary>
/// <remarks>
///    This base class is <c>abstract</c>. Use the <c>GanttCalendarWorkCalendar</c> class to load from
///    <c>WorkCalendarDate</c> and <c>WorkCalendarDateLine</c>.
/// </remarks>
abstract class GanttCalendar
{
    Name                    calendarName;
    WorkCalendarDateLine    tmpWorkCalendarDateLine;
    boolean                 isDataLoaded;

    Set                     setLoadedRecIds;
    Set                     setLoadedDatesAllDaysOpen;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustDurationWithEfficiencyBackward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the duration of a node by taking into account the efficiency assigned to each working time
    ///    slot.
    /// </summary>
    /// <param name="_endDate">
    ///    A <c>ToDate</c> value that specifies the end date of the time interval for which to adjust the
    ///    duration.
    /// </param>
    /// <param name="_endTime">
    ///    A <c>ToTime</c> value that specifies the end time of the time interval for which to adjust the
    ///    duration.
    /// </param>
    /// <param name="_duration">
    ///    An int that indicates the time interval duration in seconds to adjust with the efficiency. This
    ///    duration is the duration as seen with 100% efficiency.
    /// </param>
    /// <returns>
    ///    An int with the duration of the job which accounts for the efficiency setup on each time interval.
    /// </returns>
    /// <remarks>
    ///    The adjustment consists of a new computation of the duration, progressing backward from the end
    ///    date and time.
    /// </remarks>
    public container adjustDurationWithEfficiencyBackward(ToDate   _endDate,
                                                          ToTime   _endTime,
                                                          int      _duration)
    {
        #timeConstants

        int                     result;
        int                     remainingTime;
        WorkCalendarDateLine    workCalendarDateLine;
        int                     initialDuration = _duration;
        ToTime                  endTime = _endTime;

        workCalendarDateLine.setTmp();
        workCalendarDateLine.setTmpData(tmpWorkCalendarDateLine);

        // get the time interval
        while select FromTime, ToTime, Effectivity from workCalendarDateLine
            order by TransDate desc, ToTime desc
            where   workCalendarDateLine.TransDate   <  _endDate    ||
                    (workCalendarDateLine.TransDate  == _endDate    &&
                     workCalendarDateLine.FromTime   <  endTime)
        {
            if (endTime > workCalendarDateLine.ToTime)
            {
                endTime = workCalendarDateLine.ToTime;
            }

            remainingTime = real2int((endTime - workCalendarDateLine.FromTime) * (workCalendarDateLine.Effectivity / 100.0));

            if (remainingTime > initialDuration)
            {
                result += real2int(initialDuration / (workCalendarDateLine.Effectivity / 100));
                initialDuration = 0;
                break;
            }
            else
            {
                result += (endTime - workCalendarDateLine.FromTime);
                initialDuration -= remainingTime;
            }

            endTime = #secondsPerDay;
        }

        return [result, initialDuration];
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDurationWithEfficiencyForward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the duration of a node by taking into account the efficiency assigned to each working time
    ///    slot.
    /// </summary>
    /// <param name="_startDate">
    ///    A <c>ToDate</c> value that specifies the start date of the time interval for which to adjust the
    ///    duration.
    /// </param>
    /// <param name="_startTime">
    ///    A <c>ToTime</c> value that specifies the start time of the time interval for which to adjust the
    ///    duration.
    /// </param>
    /// <param name="_duration">
    ///    An int that indicates the time interval duration in seconds to adjust with the efficiency. This
    ///    duration is the duration as seen with 100% efficiency.
    /// </param>
    /// <returns>
    ///    An int with the duration of the job which accounts for the efficiency setup on each time interval.
    /// </returns>
    /// <remarks>
    ///    The adjustment consists of a new computation of the duration, progressing forwards from the start
    ///    date and time.
    /// </remarks>
    public container adjustDurationWithEfficiencyForward(FromDate   _startDate,
                                                         FromTime   _startTime,
                                                         int        _duration)
    {
        int                     result = 0;
        int                     remainingTime;
        WorkCalendarDateLine    workCalendarDateLine;
        int                     initialDuration = _duration;
        FromTime                startTime = _startTime;

        workCalendarDateLine.setTmp();
        workCalendarDateLine.setTmpData(tmpWorkCalendarDateLine);

        // get the time interval
        while select FromTime, ToTime, Effectivity from workCalendarDateLine
            order by TransDate, FromTime
            where   workCalendarDateLine.TransDate      >  _startDate   ||
                    (workCalendarDateLine.TransDate     == _startDate   &&
                     workCalendarDateLine.ToTime        >  startTime)
        {
            if (startTime < workCalendarDateLine.FromTime)
            {
                startTime = workCalendarDateLine.FromTime;
            }
            remainingTime = real2int((workCalendarDateLine.ToTime - startTime) * (workCalendarDateLine.Effectivity / 100.0));

            if (remainingTime > initialDuration)
            {
                result += real2int(initialDuration / (workCalendarDateLine.Effectivity / 100));
                initialDuration = 0;
                break;
            }
            else
            {
                result += (workCalendarDateLine.ToTime - startTime);
                initialDuration -= remainingTime;
            }

            startTime = 0;
        }

        return [result, initialDuration];
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDataToCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies data from the current calendar temporary table to the <see cref="T:GanttCalendar" />.
    /// </summary>
    /// <param name="_dstGanttCalendar">
    ///    A <see cref="T:GanttCalendar" /> instance where the calendar data should be copied to.
    /// </param>
    public void copyDataToCalendar(GanttCalendar _dstGanttCalendar)
    {
        WorkCalendarDateLine dstWorkCalendarDateLine;

        dstWorkCalendarDateLine = _dstGanttCalendar.parmWorkCalendarDateLine();

        ttsbegin;

        insert_recordset dstWorkCalendarDateLine
            (PropertyId, Effectivity, ToTime, FromTime, TransDate, CalendarId)
        select
            PropertyId, Effectivity, ToTime, FromTime, TransDate, CalendarId
            from    tmpWorkCalendarDateLine;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all data stored in the temporary table of the <see cref="T:GanttCalendar" />.
    /// </summary>
    /// <remarks>
    ///    The <c>isLoaded</c> flag is reset also.
    /// </remarks>
    public void deleteAllData()
    {
        this.resetTmpBuffer();

        isDataLoaded = false;

        this.initSetLoadedRecIds();
        this.initSetLoadedDatesAllDaysOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllDaysOpenWorkIntervals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the records to insert in the calendar temporary table data for the all day open calendar.
    /// </summary>
    /// <param name="_fromDate">
    ///    A from date value specifying the start date for generating the calendar line records for the all
    ///    days open calendar.
    /// </param>
    /// <param name="_toDate">
    ///    A to date value specifying the end date for generating the calendar line records for the all days
    ///    open calendar.
    /// </param>
    /// <returns>
    ///    A container with the packed records to be used as the calendar lines of the all days open calendar.
    /// </returns>
    protected container getAllDaysOpenWorkIntervals(FromDate    _fromDate,
                                                    ToDate      _toDate)
    {
        TransDate               transDate;

        WorkCalendarDateLine    workCalendarDateLine;

        List                    listRecords = new List(Types::Record);

        transDate = _fromDate;

        while (transDate <= _toDate)
        {
            workCalendarDateLine.TransDate  = transDate;

            workCalendarDateLine.FromTime       = 0;
            workCalendarDateLine.ToTime         = GanttCalendar::time24Hours();
            workCalendarDateLine.Effectivity    = 100;

            listRecords.addEnd(workCalendarDateLine);

            transDate++;
        }

        return listRecords.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkIntervalsFromServer</Name>
				<Source><![CDATA[
    // Must be overridden
    // Returns work intervals from server
    protected container getWorkIntervalsFromServer(FromDate _fromDate,
                                                   ToDate   _toDate)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkIntervalsPerDate</Name>
				<Source><![CDATA[
    public WorkCalendarDateLine getWorkIntervalsPerDate(TransDate _transDate)
    {
        WorkCalendarDateLine tmpWorkCalendarDateLinePerDate;
        tmpWorkCalendarDateLinePerDate.setTmp();
        tmpWorkCalendarDateLinePerDate.setTmpData(tmpWorkCalendarDateLine);

        select tmpWorkCalendarDateLinePerDate
            index hint CalendarDateFromIdx
            where tmpWorkCalendarDateLinePerDate.TransDate == _transDate;

        return tmpWorkCalendarDateLinePerDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetLoadedDatesAllDaysOpen</Name>
				<Source><![CDATA[
    protected void initSetLoadedDatesAllDaysOpen()
    {
        setLoadedDatesAllDaysOpen = new Set(Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetLoadedRecIds</Name>
				<Source><![CDATA[
    protected void initSetLoadedRecIds()
    {
        setLoadedRecIds = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads data into the <see cref="T:GanttCalendar" /> temporary table.
    /// </summary>
    /// <param name="_fromDate">
    ///    A from date indicating the start time for loading calendar data.
    /// </param>
    /// <param name="_toDate">
    ///    A to date indicating the end time for loading calendar data.
    /// </param>
    public void load(FromDate   _fromDate,
                     ToDate     _toDate)
    {
        WorkCalendarDateLine    workCalendarDateLine;
        List                    listRecords;
        ListEnumerator          listEnumerator;
        container               conRecords = connull();

        GanttCalendarId         calendarNameAllDaysOpen = GanttCalendar::calendarNameAllDaysOpen();

        void insertWorkCalendarDateLine(WorkCalendarDateLine _workCalendarDateLine)
        {
            tmpWorkCalendarDateLine.data(_workCalendarDateLine);
            tmpWorkCalendarDateLine.doInsert();
        }

        if (isDataLoaded)
        {
            return;
        }

        if (this.parmCalendarName() == calendarNameAllDaysOpen)
        {
            conRecords = this.getAllDaysOpenWorkIntervals(_fromDate, _toDate);
        }
        else
        {
            conRecords = this.getWorkIntervalsFromServer(_fromDate, _toDate);
        }

        if (conRecords == connull())
        {
            return;
        }

        listRecords = List::create(conRecords);

        if (!listRecords || !listRecords.elements())
        {
            return;
        }

        listEnumerator = listRecords.getEnumerator();

        while (listEnumerator && listEnumerator.moveNext())
        {
            workCalendarDateLine.clear();
            workCalendarDateLine = listEnumerator.current();

            if (this.parmCalendarName() == calendarNameAllDaysOpen)
            {
                if (!setLoadedDatesAllDaysOpen.in(workCalendarDateLine.TransDate))
                {
                    insertWorkCalendarDateLine(workCalendarDateLine);

                    setLoadedDatesAllDaysOpen.add(workCalendarDateLine.TransDate);
                }
            }
            else
            {
                if (!setLoadedRecIds.in(workCalendarDateLine.RecId))
                {
                    insertWorkCalendarDateLine(workCalendarDateLine);

                    setLoadedRecIds.add(workCalendarDateLine.RecId);
                }
            }
        }

        isDataLoaded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initSetLoadedRecIds();
        this.initSetLoadedDatesAllDaysOpen();

        isDataLoaded = false;

        tmpWorkCalendarDateLine.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendarName</Name>
				<Source><![CDATA[
    public Name parmCalendarName(Name _calendarName = calendarName)
    {
        calendarName = _calendarName;
        return calendarName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDataLoaded</Name>
				<Source><![CDATA[
    public boolean parmIsDataLoaded(boolean _isDataLoaded = isDataLoaded)
    {
        isDataLoaded = _isDataLoaded;
        return isDataLoaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCalendarDateLine</Name>
				<Source><![CDATA[
    public WorkCalendarDateLine parmWorkCalendarDateLine(WorkCalendarDateLine _workCalendarDateLine = tmpWorkCalendarDateLine)
    {
        if (!prmisdefault(_workCalendarDateLine))
        {
            tmpWorkCalendarDateLine = _workCalendarDateLine;
        }
        return tmpWorkCalendarDateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTmpBuffer</Name>
				<Source><![CDATA[
    protected void resetTmpBuffer()
    {
        tmpWorkCalendarDateLine = null;
        tmpWorkCalendarDateLine.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarNameAllDaysOpen</Name>
				<Source><![CDATA[
    public static GanttCalendarId calendarNameAllDaysOpen()
    {
        #define.allDaysOpen('GanttAllDaysOpen')

        return #allDaysOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttCalendarType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new basic, work center, or combined calendar.
    /// </summary>
    /// <param name="_ganttCalendarType">
    ///    A <see cref="T:GanttCalendar" /> specifying which calendar type to create. The three types of
    ///    calendars that can be created are basic calendar, work center calendar, or combined calendar.
    /// </param>
    /// <returns>
    ///    A new <see cref="T:GanttCalendar" /> instance.
    /// </returns>
    /// <remarks>
    ///    The combined calendar is combines data from two or more different calendars by computing the
    ///    overlap time of the calendar time slots.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An exception thrown if the calendar type is not valid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An exception thrown if the calendar type is not valid.
    /// </exception>
    public static GanttCalendar newGanttCalendarType(GanttCalendarType _ganttCalendarType)
    {
        switch (_ganttCalendarType)
        {
            case GanttCalendarType::Basic   :
                return GanttCalendarBasic::construct();

            case GanttCalendarType::WrkCtr  :
                return GanttCalendarWrkCtr::construct();

            case GanttCalendarType::Combined  :
                return GanttCalendarCombined::construct();
        }

        throw error(strfmt("@SYS26908", _ganttCalendarType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>time24Hours</Name>
				<Source><![CDATA[
    static public int time24Hours()
    {
        return str2time('24:00:00');
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotFound</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotFound(Name _calendarName)
    {
        return strfmt("@SYS108468", _calendarName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>