<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiJobDimPhysicalPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanMultiJobDimPhysicalPick</c> class handles the opening of the picking form when it is
///    required.
/// </summary>
public class KanbanMultiJobDimPhysicalPick extends KanbanMultiJobDimPhysical
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form to open.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    public formName formName()
    {
        return formstr(InventTransPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds kanban jobs to the list of movements that require additional specification of picking
    ///    dimensions.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    protected void handleKanbanJob(KanbanJob _kanbanJob)
    {
        if (   targetKanbanJobStatus >= LeanKanbanJobStatus::Completed
            && _kanbanJob.type().mustBeInventoryControlledIssue())
        {
            InventTransOriginId inventTransOriginId = _kanbanJob.issueInventTransOriginId();
            if (this.mustAddToList(inventTransOriginId,_kanbanJob))
            {
                list.addEnd(_kanbanJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines which issue inventory transactions must be considered.
    /// </summary>
    /// <returns>
    ///    A <c>StatusIssue</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The inventory transactions with a status greater than the defined value must be considered.
    /// </remarks>
    protected StatusIssue statusIssue()
    {
        return StatusIssue::Picked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanMultiJobDimPhysicalPick</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>KanbanMultiJobDimPhysicalPick</c> clsss.
    /// </returns>
    /// <remarks>
    ///    The class is instantiated on on the tier that it is called from. The class is frequently invoked from the server side and may open
    ///    a form, but this is considered the exceptional situation. In most cases opening the form should not be required and the execution can
    ///    remain on the called from tier.
    /// </remarks>
    private static KanbanMultiJobDimPhysicalPick construct()
    {
        return new KanbanMultiJobDimPhysicalPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanMultiJobDimPhysicalPick</c> object.
    /// </summary>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> string value.
    /// </param>
    /// <param name="_targetKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiJobDimPhysicalPick</c> object.
    /// </returns>
    public static KanbanMultiJobDimPhysicalPick newStandard(
        ParmId              _parmId,
        LeanKanbanJobStatus _targetKanbanJobStatus)
    {
        KanbanMultiJobDimPhysicalPick   kanbanMultiInventTransDimPhysicalPick = KanbanMultiJobDimPhysicalPick::construct();

        kanbanMultiInventTransDimPhysicalPick.parmParmId(_parmId);
        kanbanMultiInventTransDimPhysicalPick.parmTargetKanbanJobStatus(_targetKanbanJobStatus);

        return kanbanMultiInventTransDimPhysicalPick;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
