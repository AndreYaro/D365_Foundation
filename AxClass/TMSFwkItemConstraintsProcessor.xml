<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkItemConstraintsProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml;
using System.Linq;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkItemConstraintsProcessor</c> class processes item constraints.
/// </summary>
class TMSFwkItemConstraintsProcessor extends TMSFwkConstraintsProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkItemConstraintsProcessor construct()
    {
        return new TMSFwkItemConstraintsProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipment</Name>
				<Source><![CDATA[
    public RatingDtoList processShipment(TmsTransactionFacade _tmsTransactionFacade, XElement _shippingEntity, RatingDtoList _ratingDtos)
    {
        RatingDtoList restrictedCarriers = new RatingDtoList();

        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            InventSiteId        site = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::get_InventorySiteId());
            InventLocationId    warehouse = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::get_InventLocationId());

            XElementList lines = XDocExtensions::RetrieveListMatchingNodes(
                    _shippingEntity,
                    EntityXmlConstants::ShippingEntity,
                    ElementXmlConstants::ShippingEntityType,
                    EntityTypeXmlConstants::Line);

            TMSFwkItemConstraintCriteriaDtoCollection criteriaDtoCollection = TMSFwkItemConstraintCriteriaDtoCollection::newLinesList(lines);

            RatingDto ratingDto = _ratingDtos.FirstOrDefault();
            TMSScheduledShipUTCDateTime sheduledShipDate = ratingDto.EffectiveScheduledShipDateTime;

            XElement pickup = _shippingEntity.GetAddress(AddTypeXmlConstants::Pickup);
            XElement dropoff = _shippingEntity.GetAddress(AddTypeXmlConstants::DropOff);
            str pickUpHub = pickup.GetString(AddElementXmlConstants::HubMasterCode);
            str dropOffHub = dropoff.GetString(AddElementXmlConstants::HubMasterCode);

            TMSItemConstraint itemConstraint;
            while select itemConstraint
                where (itemConstraint.EffectiveUTCDateTimeFrom <= sheduledShipDate || itemConstraint.EffectiveUTCDateTimeFrom == DateTimeUtil::minValue())
                    && (itemConstraint.EffectiveUTCDateTimeTo >= sheduledShipDate || itemConstraint.EffectiveUTCDateTimeTo == DateTimeUtil::minValue())
                    && (itemConstraint.InventSiteId == site || itemConstraint.InventSiteId == '')
                    && (itemConstraint.InventLocationId == warehouse || itemConstraint.InventLocationId == '')
                    && (itemConstraint.HubMasterCode == dropOffHub || itemConstraint.HubMasterCode == pickUpHub || itemConstraint.HubMasterCode == '')
            {
                if (this.constraintQualifiesForCriteria(itemConstraint, criteriaDtoCollection))
                {
                    this.assignItemConstraints(itemConstraint, _shippingEntity, _ratingDtos, restrictedCarriers);
                }
            }
        }

        return restrictedCarriers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignItemConstraints</Name>
				<Source><![CDATA[
    private void assignItemConstraints(TMSItemConstraint _itemConstraint, XElement _shippingEntity, RatingDtoList _ratingDtoList, RatingDtoList _restrictedCarriers)
    {
        RatingDtoListEnumerator ratingDtoEnumerator = _ratingDtoList.GetListEnumerator();

        while (ratingDtoEnumerator.MoveNext())
        {
            RatingDto currentRatingDto = ratingDtoEnumerator.Current();

            if (this.constraintQualifiesForRatingDTO(_itemConstraint, currentRatingDto))
            {
                XElement ratingEntity = _shippingEntity.RetrieveOrCreateRatingEntity(currentRatingDto).GenerateElementForXPath(ElementXmlConstants::Constraints);
                ratingEntity.AddConstraint("@TRX460", _itemConstraint.ItemConstraintCode, _itemConstraint.Name, _itemConstraint.Action);

                if (_itemConstraint.Action == TMSAction::Restrict)
                {
                    _restrictedCarriers.Add(currentRatingDto);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constraintQualifiesForCriteria</Name>
				<Source><![CDATA[
    private boolean constraintQualifiesForCriteria(TMSItemConstraint _itemConstraint, TMSFwkItemConstraintCriteriaDtoCollection _criteriaDtoCollection)
    {
        SetEnumerator criteriaDtoEnumerator = _criteriaDtoCollection.getValuesEnumerator();
        boolean result = false;

        while (criteriaDtoEnumerator.moveNext())
        {
            TMSFwkItemConstraintCriteriaDto criteriaDto = criteriaDtoEnumerator.current();

            result = (_itemConstraint.ItemId == criteriaDto.parmItemId() || _itemConstraint.ItemId == '')
                        && (_itemConstraint.FilterCode1 == criteriaDto.parmFilterCode1() || _itemConstraint.FilterCode1 == '')
                        && (_itemConstraint.FilterCode2 == criteriaDto.parmFilterCode2() || _itemConstraint.FilterCode2 == '')
                        && (_itemConstraint.FilterCode3 == criteriaDto.parmFilterCode3() || _itemConstraint.FilterCode3 == '')
                        && (_itemConstraint.FilterCode4 == criteriaDto.parmFilterCode4() || _itemConstraint.FilterCode4 == '');

            // Found, no need to search further
            if (result == true)
            {
                break;
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constraintQualifiesForRatingDTO</Name>
				<Source><![CDATA[
    private boolean constraintQualifiesForRatingDTO(TMSItemConstraint _itemConstraint, RatingDto _ratingDto)
    {
        boolean result = ((_itemConstraint.CarrierCode == _ratingDTO.CarrierCode || _itemConstraint.CarrierCode == '')
                        && (((_itemConstraint.CarrierCode == _ratingDTO.CarrierCode) && (_itemConstraint.CarrierServiceCode == _ratingDTO.CarrierServiceCode)) || _itemConstraint.CarrierServiceCode == ''))
                        && (_itemConstraint.MethodCode == _ratingDTO.MethodCode || _itemConstraint.MethodCode == '')
                        && (_itemConstraint.ModeCode == _ratingDTO.ModeCode || _itemConstraint.ModeCode == '');

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>