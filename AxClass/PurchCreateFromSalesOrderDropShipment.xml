<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCreateFromSalesOrderDropShipment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchCreateFromSalesOrderDropShipment</c> class is used to create drop shipment purchase orders based
/// on sales orders.
/// </summary>
[TradeLineDlvTypeFactoryAttribute(TradeLineDlvType::DropShip)]
class PurchCreateFromSalesOrderDropShipment
extends PurchCreateFromSalesOrder
{
    FormRun purchCreateFromSalesOrder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a <c>TmpPurchLinePrice</c> record.
    /// </summary>
    /// <param name="_tmpPurchLinePrice">
    ///    The <c>TmpPurchLinePrice</c> record to validate.
    /// </param>
    /// <param name="_firstRecord">
    ///    A Boolean value that indicates whether it is the first record to be validated.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean checkLine(TmpPurchLinePrice _tmpPurchLinePrice, boolean _firstRecord)
    {
        boolean ok = super(_tmpPurchLinePrice, _firstRecord);
        var vendTableLocal = VendTable::find(_tmpPurchLinePrice.AccountNum);

	    if (!vendTableLocal.canAutoCreatePurchOrder())
        {
            ok = checkFailed(strFmt("@SYS300244", _tmpPurchLinePrice.AccountNum));
        }
        else if (!salesTable.InterCompanyDirectDelivery && vendTableLocal.interCompanyTradingRelationActive())
        {
            ok = checkFailed("@SYS94401");
        }

        SalesLine localSalesLine   = SalesLine::findRecId(_tmpPurchLinePrice.SalesLineRefRecId);
        setPrefix(#PreFixField(localSalesLine, ItemId));

        InventDim inventDimSalesLine   = localSalesLine.inventDim();
        InventDim inventDim;
        inventDim.data(inventDimSalesLine);
        InventTable inventTable = localSalesLine.inventTable();

        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Purch, inventDim);
        inventDim = inventDim::findOrCreate(inventDim);
        if (inventTable.purchInventSiteId(inventDim.InventSiteId, inventDim.inventDimId) != inventDim.InventSiteId)
        {
            inventDim.InventSiteId  = inventTable.purchInventSiteId(inventDim.InventSiteId, inventDim.inventDimId);
        }

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        if (inventTable.purchInventLocationId(inventDim.InventLocationId,
                                              inventDim.InventDimId,
                                              inventDim.InventSiteId) != inventDim.InventLocationId)
        {
            inventDim.InventLocationId   = inventTable.purchInventLocationId(inventDim.InventLocationId,
                                                                             inventDim.InventDimId,
                                                                             inventDim.InventSiteId);

            inventDim.initFromInventLocation(inventDim.inventLocation());
        }

        if (!InventDim::isInventDimEqualConsistent(inventDimGroupSetup, inventDimSalesLine, inventDim))
        {
            ok = checkFailed("@SYS122773");
        }

        if (PurchCreateFromSalesOrderAdjustValidationFlight::instance().isEnabled())
        {
            InventLocation inventLocationLoc = _tmpPurchLinePrice.inventDim().inventLocation();

            if (inventLocationLoc.WHSEnabled)
            {
                ok = checkFailed(strFmt("@SYS4009754", inventLocationLoc.InventLocationId));
            }
        }
        else
        {
            if (inventDim.inventLocation().whsEnabled) // for WHSEnabled warehouses, direct delivery is not permitted.
            {

                ok = checkFailed(strFmt("@SYS4009754", inventDim.InventLocationId));
            }
        }

        ok = ok & PurchCreateFromSalesOrderDropShipment::checkInventTable(inventTable);

        if (localSalesLine.isPackingSlipOrInvoiceUpdated())
        {
            ok = checkFailed("@SYS4010296"); // The sales line has already processed delivery and therefore cannot be included for direct delivery. Create a new order line for the quantity that needs direct delivery.
        }

        if (localSalesLine.checkIfMarked())
        {
            ok = checkFailed("@SYS87373");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a direct delivery order can be created for the specified item
    /// </summary>
    /// <param name="_inventTable">The item record.</param>
    /// <returns>true, if a direct delivery order can be created for the specified item; otherwise, false.</returns>
    public static boolean checkInventTable(InventTable _inventTable)
    {
        // We should prevent users from creating direct delivery for items that have serial number tracking dimension field with
        // 'Active in sales process' property enabled and 'Allow blank issue' property disabled
        if (_inventTable.isActiveInSalesProcess()
            && !EcoResTrackingDimensionGroupItem::isItemAllowBlankIssue(_inventTable.DataAreaId, _inventTable.ItemId))
        {
            return checkFailed("@SYS4010059");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        purchCreateFromSalesOrder = super();

        return purchCreateFromSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets whether the purchase order being created is a drop shipment.
    /// </summary>
    /// <param name="_dropShipment">
    /// The value indicating whether the purchase order being created is a drop shipment.
    /// </param>
    /// <returns>
    /// Always return <c>true</c>.
    /// </returns>
    public boolean mcrDropShipment(boolean _dropShipment = dropShipment)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTradeLineDlvType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the inventory transactions will be created based on the operation type.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Operation type without inventory movement is not allowed for direct delivery orders.
    /// </exception>
    protected void preTradeLineDlvType_BR()
    {
        if (!salesTable.createInventTrans_BR())
        {
            throw error("@GLS64346");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeLineDlvType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the delivery type that is used in the class.
    /// </summary>
    /// <param name="_tradeLineDlvType">
    ///     The <c>TradeLineDlvType</c> record to be returned; optional.
    /// </param>
    /// <returns>
    ///    Always returns a <c>TradeLineDlvType::DropShip</c> enumeration value.
    /// </returns>
    public TradeLineDlvType tradeLineDlvType(TradeLineDlvType _tradeLineDlvType = tradeLineDlvType)
    {
        return TradeLineDlvType::DropShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use PurchCreateFromSalesOrder::newPurchCreateFromSalesOrder() instead.', false, 31\05\2017)]
    public static PurchCreateFromSalesOrderDropShipment construct()
    {
        return new PurchCreateFromSalesOrderDropShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTradeLineDlvTypeHandler_BR</Name>
				<Source><![CDATA[
    [PreHandlerFor(classStr(PurchCreateFromSalesOrderDropShipment), methodStr(PurchCreateFromSalesOrderDropShipment, tradeLineDlvType))]
    /// <summary>
    /// Calls the <c>PurchCreateFromSalesOrderDropShipment.preTradeLineDlvType_BR</c> method if Brazilian context is enabled.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event handler.
    /// </param>
    public static void preTradeLineDlvTypeHandler_BR(XppPrePostArgs _args)
    {
        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        _args.getThis().preTradeLineDlvType_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>