<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionListingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the business logic for RAssetTransactionListing report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAssetTransactionListing)),
    SRSReportParameterAttribute(classStr(RAssetSRSReportContract))
]
class rAssetTransactionListingDP extends SRSReportDataProviderBase
{
    RAssetStandardId                rAssetStandardId;
    RAssetTransactionListingTmp     rAssetTransactionListingTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRAssetTransactionListingTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///  Returns temporary table <c>RAssetTransactionListingTmp</c> for printing on ssrs report.
    ///</summary>
    ///<returns>
    ///  Temporary table <c>RAssetTransactionListingTmp</c> .
    ///</returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetTransactionListingTmp))
    ]
    public RAssetTransactionListingTmp getRAssetTransactionListingTmp()
    {
        return rAssetTransactionListingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRAssetTransactionListingTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetTransactionListingTmp</c> temporary table.
    /// </summary>
    /// <param name="_rAssetTable">
    /// Passes <c>RAssetTable</c> table object.
    /// </param>
    /// <param name="_rAssetTrans">
    /// Passes <c>RAssetTrans</c> table object.
    /// </param>
    /// <param name="_rAssetSumTrans">
    /// Holds <c>RAssetSumCalc</c> class to which value is set.
    /// </param>
    private void insertRAssetTransactionListingTmp(RAssetTable _rAssetTable, RAssetTrans _rAssetTrans, RAssetSumCalc _rAssetSumTrans )
    {
        rAssetTransactionListingTmp.clear();
        rAssetTransactionListingTmp.AssetMainGroup      = _rAssetTable.AssetGroup;
        rAssetTransactionListingTmp.AssetGroup          = RAssetStandards::find(_rAssetTable.AccountNum, rAssetStandardId).AssetGroup;
        rAssetTransactionListingTmp.AccountNum          = _rAssetTable.AccountNum;
        rAssetTransactionListingTmp.Name                = _rAssetTable.Name;
        rAssetTransactionListingTmp.Status              = _rAssetTable.Status;
        rAssetTransactionListingTmp.Location            = _rAssetTable.location();
        rAssetTransactionListingTmp.AcquisitionValue    = _rAssetSumTrans.acquisitionValue();
        rAssetTransactionListingTmp.AssetNetBookValue   = _rAssetSumTrans.netBookValue();
        rAssetTransactionListingTmp.TransDate           = _rAssetTrans.TransDate;
        rAssetTransactionListingTmp.AssetTransType      = _rAssetTrans.AssetTransType;
        rAssetTransactionListingTmp.AmountMST           = _rAssetTrans.AmountMST;
        rAssetTransactionListingTmp.AmountCur           = _rAssetTrans.AmountCur;
        rAssetTransactionListingTmp.CurrencyCode        = _rAssetTrans.CurrencyCode;
        rAssetTransactionListingTmp.Voucher             = _rAssetTrans.Voucher;
        rAssetTransactionListingTmp.Txt                 = _rAssetTrans.Txt;
        rAssetTransactionListingTmp.AssetGroupTypes     = RAssetMainGroup::find(_rAssetTable.AssetGroup).GroupType;

        rAssetTransactionListingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    [
        SysEntryPointAttribute
    ]
    public void processReport()
    {
        QueryBuildDataSource    qbs;
        Query                   query;
        QueryRun                queryRun;
        RAssetTable             rAssetTable;
        RAssetTrans             rAssetTrans;
        RAssetNetBookValue      netBookValue;
        RAssetSumCalc           rassetSumTrans;
        TransDate               rAssetTransDate;
        NoYes                   zeroBookValue;

        RAssetSRSReportContract contract = this.parmDataContract() as RAssetSRSReportContract;

        rAssetTransDate     = contract.parmRAssetTransDate();
        rAssetStandardId    = contract.parmRAssetStandardId();
        zeroBookValue       = contract.parmZeroBookValue();

        query               = this.parmQuery();
        qbs                 = query.dataSourceTable(tableNum(RAssetTrans));

        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetTrans, AssetStandardId)).value(rAssetStandardId);
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetTrans, TransDate)).value(SysQuery::range("", rAssetTransDate));
        rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod((select firstonly rAssetTable).AccountNum,
                                                             rAssetStandardId,
                                                             rAssetTransDate);

        queryRun = new QueryRun(query);

        while(queryRun.next())
        {

            rAssetTable = queryRun.get(tableNum(RAssetTable));
            rAssetTrans = queryRun.get(tableNum(RAssetTrans));

            rassetSumTrans.parmRangeAssetId(rAssetTable.AccountNum);
            netBookValue = rassetSumTrans.netBookValue();
            if( !zeroBookValue ||
              ( zeroBookValue && (netBookValue > RAssetStandardTable::find(rAssetStandardId).AssetRound)))
            {
                this.insertRAssetTransactionListingTmp(rAssetTable, rAssetTrans, rassetSumTrans);
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>