<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationTouchForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgRegistrationTouchForm</c> class supports the <c>JmgRegistrationTouch</c> form.
/// </summary>
public class JmgRegistrationTouchForm extends JmgRegistrationFormBase
{
    private str             defaultStatus;
    private JmgEmployee     employeeTable;
    private JmgJobId        moveToJobId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmMoveToJobId</Name>
				<Source><![CDATA[
    public JmgJobId parmMoveToJobId(JmgJobId _jobId = moveToJobId)
    {
        moveToJobId = _jobId;
        return moveToJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes a new instance of the <c>JmgRegistrationTouchForm</c> class.
    /// </summary>
    /// <param name="_form">
    ///  A reference to the <c>FormRun</c> object of the <c>JmgRegistrationTouchForm</c>.
    /// </param>
    /// <param name="_enableBundleInteraction">
    ///  Enable bundle to communicate via Infologs
    /// </param>
    public static JmgRegistrationTouchForm construct(FormRun _form, boolean _enableBundleInteraction = false)
    {
        JmgRegistrationTouchForm jmgRegistrationTouchForm = new JmgRegistrationTouchForm(_form, _enableBundleInteraction);
        jmgRegistrationTouchForm.form = _form;
        jmgRegistrationTouchForm.enableBundleInteraction = _enableBundleInteraction;
        jmgRegistrationTouchForm.defaultStatus = _form.form().design().caption();
        jmgRegistrationTouchForm.employeeTable = null;

        return jmgRegistrationTouchForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationStatusForCurrenEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves Registration Status for the current employee
    /// </summary>
    /// <returns>
    ///  Returns JmgRegistrationTouchStatus::BreakStarted if break is in progress;
    ///  else returns JmgRegistrationTouchStatus::IndirectActivityStarted if Indirect activity is in progress;
    ///  otherwise return JmgRegistrationTouchStatus::JobRegistration.
    /// </returns>
    public JmgRegistrationTouchStatus getRegistrationStatusForCurrenEmployee()
    {
        JmgRegistrationTouchStatus registrationTouchStatus = JmgRegistrationTouchStatus::JobRegistration;
        JmgTermReg termReg;

        select firstonly RecId, RegType, JobId
            from termReg
                order by REGDATETIME desc, RecId desc
                    where termReg.Worker  == this.worker();

        switch (termReg.RegType)
        {
            case JmgTermRegType::BrkFlowStart:
                registrationTouchStatus = JmgRegistrationTouchStatus::BreakStarted;
                break;

            case JmgTermRegType::JobStart:

                if (JmgIpcCategory::find(JmgJobTable::find(termReg.JobId).ModuleRefId))
                {
                    registrationTouchStatus = JmgRegistrationTouchStatus::IndirectActivityStarted;
                }
                break;
        }

        return registrationTouchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves Registration Status text for current user to be used as caption on the JmgRegistrationTouch form.
    /// </summary>
    /// <param name = "_status">The registration status of the selected user.</param>
    /// <returns>
    ///  Returns lable for Break if break is in progress, else return lable for indirect activity if Indirect activity is in progress,
    ///  otherwise return default status.
    /// </returns>
    public str getStatusTxt(JmgRegistrationTouchStatus _status)
    {
        if (_status == JmgRegistrationTouchStatus::BreakStarted)
        {
            return "@SCM:JmgRegistrationTouchBreakStarted";
        }
        else if (_status == JmgRegistrationTouchStatus::IndirectActivityStarted)
        {
            return "@SCM:JmgRegistrationTouchIndirectActivityStarted";
        }
        else
        {
            return defaultStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startIndirectActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Starts indirect activity on the production job.
    /// </summary>
    /// <param name="_jmgJobTable">
    ///  A <c>JmgJobTable</c> record, which refers to the job to start indirect activity for.
    /// </param>
    public void startIndirectActivity(JmgJobTable _jmgJobTable)
    {
        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgRegistrationTouchForm)).registration().startIndirectActivity())
        {
            this.jobMarked(true, _jmgJobTable, NoYes::Yes, false);
            this.beginMarkedJobs();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endIndirectActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Ends indirect activity on the production job.
    /// </summary>
    /// <param name="_jmgRegistrationSetup">
    ///  A <c>JmgRegistrationSetup</c> record, which refers to the job to stop indirect activity for.
    /// </param>
    public void endIndirectActivity(JmgRegistrationSetup _jmgRegistrationSetup)
    {
        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgRegistrationTouchForm)).registration().endIndirectActivity())
        {
            currentBundle.resetRegistrationTime();
            currentBundle.stopActiveJobs();
            currentBundle.clearActiveJobs();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartedJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the production job currently started for current worker
    /// </summary>
    /// <returns>If found a <c>JmgJobTable</c> record, otherwise empty buffer</returns>
    public JmgJobTable getStartedJob()
    {
        JmgJobTable jobTable;
        JmgTermReg termReg;

        select firstonly jobTable
            where jobTable.ReportedFinished == NoYes::No
            join termReg
            order by termReg.RecId desc
            where jobTable.JobId  == termReg.JobId
               && termReg.RegType == JmgTermRegType::JobStart
               && termReg.Worker  == employeeTable.Worker;

        return jobTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedStartQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggests start quantity for the production job, which is the remaining quantity of the job that can be started.
    /// </summary>
    /// <param name = "_jobId">Job id of the production job</param>
    /// <returns>
    /// The greater of the zero and requested quantity minus quantity already started on the selected job.
    /// </returns>
    public JmgStartedQty suggestedStartQuantity(JmgJobId _jobId)
    {
        JmgJobTable jmgJobTable = JmgJobTable::find(_jobId);
        return max(0, jmgJobTable.CalcQty - jmgJobTable.startedQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedGoodQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suggests good quantity to be report feedback progress for the production job.
    /// </summary>
    /// <param name = "_jobId">Job id of the production job</param>
    /// <returns>
    /// The lesser of the remaining quantity and the quantity already started on the selected job
    /// </returns>
    public JmgStartedQty suggestedGoodQuantity(JmgJobId _jobId)
    {
        JmgJobTable		jmgJobTable = JmgJobTable::find(_jobId);
        JmgTermJob_Prod prodJob = JmgTermJob::construct(_jobId);

        return jmgJobTable.remainingQuantity() > 0
            ? min(
                jmgJobTable.remainingQuantity(), 
                max(0, jmgJobTable.startedQuantityByWorker(this.Worker()) - jmgJobTable.goodQuantityByWorker(this.worker())),
                JmgProdParametersDim::find(prodJob.siteInventDimId()).MaxQty)
            : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusOnStartedJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Focus on the started production job
    /// </summary>
    public void focusOnStartedJob()
    {
        JmgJobTable jobTable = this.getStartedJob();

        if (jobTable)
        {
            this.focusOnJob(jobTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusOnJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves focus to the <c>JmgJobTable</c> record on the first data source of the JmgRegistrationTouch form
    /// </summary>
    /// <param name="_jmgJobTable">
    ///    A <c>JmgJobTable</c> record, which refers to the job to focus on.
    /// </param>
    /// <returns>True if the job was focused; false otherwise.</returns>
    public boolean focusOnJob(JmgJobTable _jobTable)
    {
        return form.dataSource(1).findRecord(_jobTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rereads the <c>JmgJobTable</c> record and refreshes the JmgRegistrationTourchForm form
    /// </summary>
    /// <param name = "_jobId">The JmgJobId of the job to be refreshed</param>
    public void invokeRefresh(JmgJobId _jobId)
    {
        FormDataSource  jmgTableDS = form.dataSource(1);

        if (_jobId)
        {
            this.focusOnJob(JmgJobTable::find(_jobId));
            jmgTableDS.reread();
            jmgTableDS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeExecuteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Executes query on the JmgTable data source of the JmgRegistrationTourchForm form
    /// </summary>
    public void invokeExecuteQuery()
    {
        FormDataSource  jmgTableDS = form.dataSource(1);
        jmgTableDS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if all mandatory documetns have been read by the worker.
    /// </summary>
    /// <returns>
    /// true if the worker has read the documents; otherwise, false.
    /// </returns>
    boolean preApprove()
    {
        // Find all documents marked for mandatory reading and check the document log for each of them
        docHand.updateDocs(this.worker(), form.activeJobId());
        docHand.findRequestedReading();
        return docHand.checkAllRequiredDocumentsRead();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStartJobPrerequisiteChecks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform prerequisite checks on the job before presenting  the starting dialog
    /// </summary>
    /// <param name = "_jmgJobTable">
    /// The job to to be prechecked.
    /// </param>
    public void performStartJobPrerequisiteChecks(JmgJobTable _jmgJobTable)
    {
        // Check if job marked as high priority must be started before the specified job.
        this.mandatoryCheck(_jmgJobTable);

        // Check for any mandatory documents to the worker, which must be read before working on the specified job.
        if (!this.preApprove())
        {
            Box::stop("@SCM:JmgStartJobReadMandatoryInstruction");
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgEmployee</Name>
				<Source><![CDATA[
    public JmgEmployee parmJmgEmployee(JmgEmployee _employeeTable = employeeTable)
    {
        employeeTable = _employeeTable;
        return employeeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the scanning event of a job id.
    /// </summary>
    /// <param name = "_jobId">The scanned job id.</param>
    public void scanJobId(JmgJobId _jobId)
    {
        if (_jobId)
        {
            var job = JmgJobTable::find(_jobId);

            if (!job)
            {
                Box::warning("@SCM:ScannedJobNotFound");
            }
            else if (!this.focusOnJob(job))
            {
                Box::warning("@SCM:ScannedJobOutsideFilter");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBundleJobsSupported</Name>
				<Source><![CDATA[
    protected internal boolean isBundleJobsSupported(JmgEmployee _worker)
    {
        return false; // Bundle jobs are not currently supported on device
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>