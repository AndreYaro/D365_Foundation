<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowStateMachine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowStateMachine</c> class represents a state machine that is used to validate
///    possible transitions in multi-activity kanban flows.
/// </summary>
public class KanbanFlowStateMachine
{
    Map mapTransitions;
    Map mapStates;

    KanbanFlowStateMachineStates currentState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a state to the state machine.
    /// </summary>
    /// <param name="_state">
    /// The state to be added.
    /// </param>
    /// <param name="_isInitial">
    /// A Boolean value that indicates whether this is an initial state.
    /// </param>
    /// <param name="_isFinal">
    /// A Boolean value that indicates whether this is a final state.
    /// </param>
    /// <returns>
    /// The internal identificator for the state.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanFlowStateMachineStates addState(KanbanFlowStateMachineStates _state,
                                                    boolean _isInitial,
                                                    boolean _isFinal)
    {
        KanbanFlowStateMachineStates result = KanbanFlowStateMachineStates::Invalid;

        if (!mapStates.exists(_state))
        {
            mapStates.insert(_state, [_isInitial, _isFinal]);
            result = _state;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a state transition to the state machine.
    /// </summary>
    /// <param name="_fromState">
    /// The transition source.
    /// </param>
    /// <param name="_toState">
    /// The transition destination.
    /// </param>
    /// <param name="_condition">
    /// The transition condition.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addTransition(KanbanFlowStateMachineStates _fromState,
                                 KanbanFlowStateMachineStates _toState,
                                 container _condition)
    {
        Map stateTransitions;

        if (_toState == KanbanFlowStateMachineStates::Invalid
            || (_fromState == KanbanFlowStateMachineStates::Invalid
                && !this.isInitialState(_toState)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (mapTransitions.exists(_fromState))
        {
            stateTransitions = mapTransitions.lookup(_fromState);
        }
        else
        {
            stateTransitions = new Map(Types::Container, Types::Integer);
            mapTransitions.insert(_fromState, stateTransitions);
        }

        stateTransitions.insert(_condition, _toState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a status transition.
    /// </summary>
    /// <param name="_condition">
    /// The transition condition.
    /// </param>
    /// <param name="_throwOnInvalidState">
    /// A Boolean value that indicates whether an exception is thrown if the machine falls into an invalid
    /// state.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changeState(container _condition, boolean _throwOnInvalidState = false)
    {
        currentState = this.nextState(_condition);

        if (!this.inValidState()
            && _throwOnInvalidState)
        {
            throw error("@SYS111577");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inFinalState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the machine is in a final state.
    /// </summary>
    /// <returns>
    /// true if the state is final; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean inFinalState()
    {
        return this.isFinalState(currentState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the object.
    /// </summary>
    private void init()
    {
        mapTransitions  = new Map(Types::Integer, Types::Class);
        mapStates       = new Map(Types::Enum, Types::Container);

        currentState    = KanbanFlowStateMachineStates::Invalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inValidState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the machine is in a valid state.
    /// </summary>
    /// <returns>
    /// true if the machine is in a valid state; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean inValidState()
    {
        return currentState != KanbanFlowStateMachineStates::Invalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalState</Name>
				<Source><![CDATA[
    private boolean isFinalState(KanbanFlowStateMachineStates _state)
    {
        boolean result = mapStates.exists(_state);
        boolean isInitial;

        if (result)
        {
            [isInitial, result] = mapStates.lookup(_state);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitialState</Name>
				<Source><![CDATA[
    private boolean isInitialState(KanbanFlowStateMachineStates _state)
    {
        boolean result = mapStates.exists(_state);
        boolean isFinal;

        if (result)
        {
            [result, isFinal] = mapStates.lookup(_state);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next status given the provided transition condition.
    /// </summary>
    /// <param name="_condition">
    /// The condition for the status transition.
    /// </param>
    /// <returns>
    /// The next status identificator; otherwise, -1.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlowStateMachineStates nextState(container _condition)
    {
        KanbanFlowStateMachineStates result = KanbanFlowStateMachineStates::Invalid;

        if (mapTransitions.exists(currentState))
        {
            Map stateTransitions = mapTransitions.lookup(currentState);

            if (stateTransitions.exists(_condition))
            {
                result = stateTransitions.lookup(_condition);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentState</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlowStateMachineStates parmCurrentState(KanbanFlowStateMachineStates _currentState = currentState)
    {
        currentState = _currentState;

        return currentState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowStateMachine construct()
    {
        return new KanbanFlowStateMachine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transition condition for the state machine.
    /// </summary>
    /// <param name="_kanbanType">
    /// The kanban type.
    /// </param>
    /// <param name="_activityType">
    /// The type of target activity.
    /// </param>
    /// <param name="_receivesSemifinished">
    /// The target activity receiving product type.
    /// </param>
    /// <param name="_outputsSemifinished">
    /// The target activity outputting product type.
    /// </param>
    /// <returns>
    /// A container that contains the transition condition.
    /// </returns>
    /// <remarks>
    /// The method only supports high level activities (that is Process and Transfer).
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container createCondition(LeanKanbanType _kanbanType,
                                                PlanActivityType _activityType,
                                                boolean _receivesSemifinished,
                                                boolean _outputsSemifinished)
    {
        if (_activityType != PlanActivityType::Process
            && _activityType != PlanActivityType::Transfer)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return [_kanbanType, _activityType, _receivesSemifinished, _outputsSemifinished];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConditionCrossPF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transition condition for the state machine.
    /// </summary>
    /// <param name="_kanbanType">
    /// The kanban type.
    /// </param>
    /// <param name="_activityType">
    /// The type of target activity.
    /// </param>
    /// <param name="_receivesSemifinished">
    /// The target activity receiving product type.
    /// </param>
    /// <param name="_outputsSemifinished">
    /// The target activity outputting product type.
    /// </param>
    /// <param name="_feederBridge">
    /// The feeder bridge flag of the target activity.
    /// </param>
    /// <returns>
    /// A container that contains the transition condition.
    /// </returns>
    /// <remarks>
    /// The method only supports high level activities (that is Process and Transfer).
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container createConditionCrossPF(LeanKanbanType _kanbanType,
                                                    PlanActivityType _activityType,
                                                    boolean _receivesSemifinished,
                                                    boolean _outputsSemifinished,
                                                    boolean _feederBridge)
    {
        if (_activityType != PlanActivityType::Process
            && _activityType != PlanActivityType::Transfer)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return [_kanbanType, _activityType, _receivesSemifinished, _outputsSemifinished, _feederBridge];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCrossPFKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a state machine for validating cross-production flow kanban flows.
    /// </summary>
    /// <returns>
    /// A <c>KanbanFlowStateMachine</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowStateMachine newCrossPFKanbanFlow()
    {
        KanbanFlowStateMachine  fsm = KanbanFlowStateMachine::construct();
        KanbanFlowStateMachine::initializeCrossPFKanbanFlow(fsm);
        return fsm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCrossPFKanbanFlow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void initializeCrossPFKanbanFlow(KanbanFlowStateMachine _fsm)
    {
        // State1 represents any Process activity that has PickupSemifnished = ANY, ReceiveSemifinished = False
        // State2 represents any Transfer activity that has PickupSemifnished = False, ReceiveSemifinished = False

        // add the states
        _fsm.addState(KanbanFlowStateMachineStates::State1, true, false);    // initial state
        _fsm.addState(KanbanFlowStateMachineStates::State2, false, true);    // final state

        // add state transitions
        // 1. starting transitions
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State1, KanbanFlowStateMachine::createConditionCrossPF(LeanKanbanType::Manufacturing, PlanActivityType::Process, false, false, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State1, KanbanFlowStateMachine::createConditionCrossPF(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, false, true));

        // 2. normal transitions
        _fsm.addTransition(KanbanFlowStateMachineStates::State1, KanbanFlowStateMachineStates::State2, KanbanFlowStateMachine::createConditionCrossPF(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, false, false, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::State1, KanbanFlowStateMachineStates::State2, KanbanFlowStateMachine::createConditionCrossPF(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, false, false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMultiActivityKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a state machine for validating multi-activity kanban flows.
    /// </summary>
    /// <returns>
    /// A <c>KanbanFlowStateMachine</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowStateMachine newMultiActivityKanbanFlow()
    {
        KanbanFlowStateMachine  fsm = KanbanFlowStateMachine::construct();
        KanbanFlowStateMachine::initializeMultiActivityKanbanFlow(fsm);
        return fsm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMultiActivityKanbanFlow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void initializeMultiActivityKanbanFlow(KanbanFlowStateMachine _fsm)
    {
        // State1 represents any Process activity that has PickupSemifinished = ANY, ReceiveSemifinished = True
        // State2 represents any Process activity that has PickupSemifinished = ANY, ReceiveSemifinished = False
        // State3 represents any Process activity that has PickupSemifinished = True, ReceiveSemifinished = True
        // State4 represents any Process activity that has PickupSemifinished = True, ReceiveSemifinished = True
        // State5 represents any Transfer activity that has PickupSemifinished = True, ReceiveSemifinished = True
        // State6 represents any Transfer activity that has PickupSemifinished = False, ReceiveSemifinished = False

        // add the states
        _fsm.addState(KanbanFlowStateMachineStates::State1, true, false);    // initial state
        _fsm.addState(KanbanFlowStateMachineStates::State2, true, false);    // initial state
        _fsm.addState(KanbanFlowStateMachineStates::State3, false, true);    // final state
        _fsm.addState(KanbanFlowStateMachineStates::State4, false, true);    // final state
        _fsm.addState(KanbanFlowStateMachineStates::State5, false, true);    // final state
        _fsm.addState(KanbanFlowStateMachineStates::State6, false, true);    // final state

        // add state transitions
        // 1. starting transitions
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State1, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, false, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State1, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State2, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, false, false));
        _fsm.addTransition(KanbanFlowStateMachineStates::Invalid, KanbanFlowStateMachineStates::State2, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, false));

        // 2. normal transitions
        _fsm.addTransition(KanbanFlowStateMachineStates::State2, KanbanFlowStateMachineStates::State6, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, false, false));

        _fsm.addTransition(KanbanFlowStateMachineStates::State1, KanbanFlowStateMachineStates::State3, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, false));
        _fsm.addTransition(KanbanFlowStateMachineStates::State1, KanbanFlowStateMachineStates::State4, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::State1, KanbanFlowStateMachineStates::State5, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, true, true));

        _fsm.addTransition(KanbanFlowStateMachineStates::State3, KanbanFlowStateMachineStates::State6, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, false, false));

        _fsm.addTransition(KanbanFlowStateMachineStates::State4, KanbanFlowStateMachineStates::State4, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::State4, KanbanFlowStateMachineStates::State3, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, false));
        _fsm.addTransition(KanbanFlowStateMachineStates::State4, KanbanFlowStateMachineStates::State5, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, true, true));

        _fsm.addTransition(KanbanFlowStateMachineStates::State5, KanbanFlowStateMachineStates::State5, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, true, true));
        _fsm.addTransition(KanbanFlowStateMachineStates::State5, KanbanFlowStateMachineStates::State3, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, false));
        _fsm.addTransition(KanbanFlowStateMachineStates::State5, KanbanFlowStateMachineStates::State4, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Process, true, true));

        _fsm.addTransition(KanbanFlowStateMachineStates::State6, KanbanFlowStateMachineStates::State6, KanbanFlowStateMachine::createCondition(LeanKanbanType::Manufacturing, PlanActivityType::Transfer, false, false));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
