<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanTaskLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides logging capabilities to task-based operations.
/// </summary>
class ReqDemPlanTaskLogger implements ReqDemPlanIInstrumentedTaskLogger
{
    ReqDemPlanTaskCollectionLog taskCollection;
    int                         startingInfologLine;
    ReqDemPlanTaskLog           currentTask;
    List                        loggingErrors;

    System.Text.StringBuilder   taskDetailStringBuilder;

    private static ReqDemPlanInstrumentationLogger constructorInstrumentationLogger;
    private ReqDemPlanInstrumentationLogger instrumentationLogger;
    private RecId batchJobId;
    private RecId batchTaskId;
    private ReqDemPlanTaskCode startingTaskCode = '';
    private ReqDemPlanForecastAuthorizationBundleId bundleId;
    private boolean attachedToCollection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendTaskDetailLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the given message to the detailed log information for the current task.
    /// </summary>
    /// <param name="_detailLog">
    /// The detailed logging information to log.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void appendTaskDetailLog(ReqDemPlanTaskDetailLog _detailLog)
    {
        if (!currentTask.TaskCollection)
        {
            this.loggingError("@DMP1134");
            return;
        }

        taskDetailStringBuilder.Append(strFmt('%1\n', _detailLog));
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTaskDetailLogWithTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the given message to the detailed log information for the current task and to the telemetry.
    /// </summary>
    /// <param name="_detailLog">
    /// The detailed logging information to log.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void appendTaskDetailLogWithTelemetry(ReqDemPlanTaskDetailLog _detailLog)
    {
        this.appendTaskDetailLog(_detailLog);

        instrumentationLogger.logWarning(_detailLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends a logging session, updating the run time of the task collection.
    /// </summary>
    /// <param name="_cleanupLeftoverTasks">
    /// If set to true, should mark as failed any tasks still in progress,
    /// otherwise an exception should be thrown if there is a task in progress;
    /// optional, default is true.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    public void finishLogging(boolean _cleanupLeftoverTasks = true)
    {
        if (taskCollection == null)
        {
            this.loggingError("@DMP1135");
            return;
        }

        if (currentTask.TaskCollection)
        {
            if (_cleanupLeftoverTasks)
            {
                this.taskFailed();
            }
            else
            {
                this.loggingError("@DMP1136");
                return;
            }
        }

        try
        {
            ttsBegin;
            taskCollection.EndDate = DateTimeUtil::utcNow();
            taskCollection.InfologMessages = this.getRecordedInfologContent();
            taskCollection.update();
            ttsCommit;
        }
        catch
        {
            this.loggingError("@DMP1137");
        }

        taskCollection = null;
        startingInfologLine = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the successful completion of a task.
    /// </summary>
    /// <param name="_executionLog">
    /// The execution logging information to log; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if the current task belongs to a different logging session.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void finishTask(ReqDemPlanTaskDetailLog _executionLog = '')
    {
        this.appendTaskDetailLog(_executionLog);
        this.updateCurrentTask(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordedInfologContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the recorded messages from the infolog.
    /// </summary>
    /// <returns>
    ///     A container with the the packed messages from the infolog output.
    /// </returns>
    protected container getRecordedInfologContent()
    {
        if (startingInfologLine == 0)
        {
            return conNull();
        }

        return infolog.copy(startingInfologLine, infologLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLoggingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether logging errors occurred during the lifetime of this instance.
    /// </summary>
    /// <returns>
    /// True if any logging errors occurred; otherwise, false.
    /// </returns>
    public boolean hasLoggingErrors()
    {
        return loggingErrors.elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementTaskRecordsProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the number of records processed in the current task.
    /// </summary>
    /// <param name="_newRecordsProcessed">
    /// The number of records processed; optional, defaults to 1.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if _newRecordsProcessed has a negative value.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void incrementTaskRecordsProcessed(int64 _newRecordsProcessed = 1)
    {
        if (_newRecordsProcessed < 0)
        {
            this.loggingError(Error::wrongUseOfFunction(funcName()));
            return;
        }

        if (currentTask.TaskCollection == 0 )
        {
            this.loggingError("@DMP1134");
            return;
        }

        currentTask.ProcessedRecords += _newRecordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loggingError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs an error message.
    /// </summary>
    /// <param name="_message">
    ///     The message to log as an error.
    /// </param>
    protected void loggingError(str _message)
    {
        loggingErrors.addEnd(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loggingErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of logging errors that occurred during the lifetime of this instance.
    /// </summary>
    /// <returns>
    /// The list of strings that contains logging errors that occurred during the lifetime of this instance.
    /// </returns>
    public List loggingErrors()
    {
        return loggingErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        loggingErrors = new List(Types::String);
        taskDetailStringBuilder = new System.Text.StringBuilder();

        var currentBatchTask = BatchHeader::getCurrentBatchTask();
        batchJobId = currentBatchTask.BatchJobId;
        batchTaskId = currentBatchTask.RecId;

        instrumentationLogger = constructorInstrumentationLogger ?
            constructorInstrumentationLogger :
            ReqDemPlanInstrumentationLogger::createLogger(classStr(ReqDemPlanTaskLogger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskRank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rank of the current task.
    /// </summary>
    /// <param name="_rank">
    /// The rank of the current task.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void setTaskRank(ReqDemPlanTaskRank _rank)
    {
        if (!currentTask.TaskCollection)
        {
            this.loggingError("@DMP1134");
            return;
        }

        currentTask.Rank = _rank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleId</Name>
				<Source><![CDATA[
    public void setBundleId(ReqDemPlanForecastAuthorizationBundleId _bundleId)
    {
        currentTask.BundleId = _bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a logging session.
    /// </summary>
    /// <returns>
    /// The RecId of the task collection created by this instance.
    /// </returns>
    public ReqDemPlanTaskCollectionRecId startLogging()
    {
        this.startRecordingInfolog();

        if (!attachedToCollection)
        {
            try
            {
                taskCollection.StartDate = DateTimeUtil::utcNow();
                taskCollection.insert();
            }
            catch
            {
                this.loggingError("@DMP1137");
                taskCollection = null;
            }
        }

        return taskCollection.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startRecordingInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Starts recording the messages from the infolog.
    /// </summary>
    protected void startRecordingInfolog()
    {
        startingInfologLine = infologLine();

        if (startingInfologLine == 0)
        {
            startingInfologLine = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a task with a given name.
    /// </summary>
    /// <param name="_taskName">
    /// The user-friendly and translated name of the task.
    /// </param>
    /// <param name="_taskDataAreaId">
    /// The rank of the task; optional, defaults to empty (cross-company task).
    /// </param>
    /// <remarks>
    /// The user-friendly and translated name of the task will be logged in telemetry.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if a task is currently in progress.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if a name for the task was not provided.
    /// </exception>
    public void startTask(
        ReqDemPlanTaskName _taskName,
        DataAreaId _taskDataAreaId = '')
    {
        #ReqDemPlanTask

        if (!taskCollection)
        {
            this.loggingError("@DMP1135");
            return;
        }

        if (currentTask.TaskCollection)
        {
            this.loggingError(strFmt("@DMP1138", currentTask.Name));
            return;
        }

        if (!_taskName)
        {
            throw error("@DMP1139");
        }

        try
        {
            ttsbegin;

            taskDetailStringBuilder.Clear();

            currentTask.StartDate = DateTimeUtil::utcNow();
            currentTask.TaskCode = startingTaskCode != '' ? startingTaskCode : _taskName;
            currentTask.Name = _taskName;
            currentTask.TaskDataAreaId = _taskDataAreaId;
            currentTask.Rank = #DefaultTaskRank;
            currentTask.TaskCollection = taskCollection.RecId;
            currentTask.BatchJobId = batchJobId;
            currentTask.insert();

            ttscommit;

            this.logCurrentTaskToTelemtry();
        }
        catch
        {
            this.loggingError("@DMP1137");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startMonitoredTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the task. The lifecycle of the task will be logged to telemetry.
    /// </summary>
    /// <param name = "_taskCode">Culture-agnostic code name of the task.</param>
    /// <param name = "_taskName">User-readable and translated name of the task.</param>
    /// <param name = "_taskDataAreaId">The ID of the company.</param>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if a task is currently in progress.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if a name for the task was not provided.
    /// </exception>
    public void startMonitoredTask(
        ReqDemPlanTaskCode _taskCode,
        ReqDemPlanTaskName _taskName,
        DataAreaId _taskDataAreaId = '')
    {
        try 
        {
            startingTaskCode = _taskCode;
            this.startTask(_taskName, _taskDataAreaId);
        }
        finally
        {
            startingTaskCode = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskCollectionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the RecId of the task collection currently in use by this instance.
    /// </summary>
    /// <returns>
    /// The RecId of the task collection currently in use by this instance,
    /// or zero if logging was not started.
    /// </returns>
    public ReqDemPlanTaskCollectionRecId taskCollectionRecId()
    {
        return taskCollection.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the failure of a task.
    /// Other data about the task is preserved.
    /// </summary>
    /// <param name="_failureLog">
    /// The failure logging information to log; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if the current task belongs to a different logging session.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    public void taskFailed(ReqDemPlanTaskDetailLog _failureLog = '')
    {
        this.appendTaskDetailLog(_failureLog);
        this.updateCurrentTask(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrentTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current task in the logging table.
    /// </summary>
    /// <param name="_taskFinishedOk">
    /// A NoYes value indicating whether the task finished successfully.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if a logging session has not ben started.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if no task is currently in progress.
    /// </exception>
    protected void updateCurrentTask(ReqDemPlanTaskFinishedOk _taskFinishedOk)
    {
        int taskDetailStringLength;

        if (!taskCollection)
        {
            this.loggingError("@DMP1135");
            return;
        }

        if (!currentTask.TaskCollection)
        {
            this.loggingError("@DMP1134");
            return;
        }

        try
        {
            ttsBegin;

            // Last new line character needs to be removed
            taskDetailStringLength  = taskDetailStringBuilder.get_Length();
            currentTask.DetailLog   = taskDetailStringBuilder.ToString(0, taskDetailStringLength - 1);

            currentTask.EndDate     = DateTimeUtil::utcNow();
            currentTask.FinishedOk  = _taskFinishedOk;
            currentTask.update();

            ttsCommit;

            this.logCurrentTaskToTelemtry();
        }
        catch
        {
            this.loggingError("@DMP1137");
        }

        currentTask = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>ReqDemPlanTaskLogger</c> class.
    /// </summary>
    /// <param name="_startLogging">
    ///     True if should start the message logging after constructing the class; otherwise, false.
    /// </param>
    /// <returns>
    ///     A constructed <c>ReqDemPlanTaskLogger</c> class cast as a <c>ReqDemPlanTaskLoggerInterface</c> instance.
    /// </returns>
    public static ReqDemPlanTaskLoggerInterface construct(boolean _startLogging = true)
    {
        ReqDemPlanTaskLogger logger = new ReqDemPlanTaskLogger();

        if (_startLogging)
        {
            logger.startLogging();
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAttached</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>ReqDemPlanTaskLogger</c>, use exisiting task collection..
    /// </summary>
    /// <param name="_attachTaskCollectionRecId">
    ///     A RecId of task collection the logger should use.
    /// </param>
    /// <param name="_startLogging">
    ///     True if should start the message logging after constructing the class; otherwise, false.
    /// </param>
    /// <returns>
    ///     A constructed <c>ReqDemPlanTaskLoggerInterface</c> instance.
    /// </returns>
    public static ReqDemPlanTaskLoggerInterface constructAttached(
        ReqDemPlanTaskCollectionRecId _attachTaskCollectionRecId, 
        boolean _startLogging = true)
    {
        ReqDemPlanTaskLogger logger = ReqDemPlanTaskLogger::construct(false);

        if (_startLogging)
        {
            logger.attachTaskCollection(_attachTaskCollectionRecId);
            logger.startLogging();
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInstrumentedAttached</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>ReqDemPlanTaskLogger</c> class, use exisiting task collection.
    /// </summary>
    /// <param name="_instrumentationLogger">
    ///     The logger which will log lifecycle of demand forecasting tasks to telemetry.
    /// </param>
    /// <param name="_attachTaskCollectionRecId">
    ///     A RecId of task collection the logger should use.
    /// </param>
    /// <param name="_startLogging">
    ///     True if should start the message logging after constructing the class; otherwise, false.
    /// </param>
    /// <returns>
    ///     A constructed <c>ReqDemPlanTaskLoggerInterface</c> instance.
    /// </returns>
    internal static ReqDemPlanTaskLoggerInterface constructInstrumentedAttached(
        ReqDemPlanInstrumentationLogger _instrumentationLogger,
        ReqDemPlanTaskCollectionRecId _attachTaskCollectionRecId,
        boolean _startLogging = true)
    {
        try
        {
            constructorInstrumentationLogger = _instrumentationLogger;
            return ReqDemPlanTaskLogger::constructAttached(_attachTaskCollectionRecId, _startLogging);
        }
        finally
        {
            constructorInstrumentationLogger = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInstrumented</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>ReqDemPlanTaskLogger</c> class.
    /// </summary>
    /// <param name="_instrumentationLogger">
    ///     The logger which will log lifecycle of demand forecasting tasks to telemetry.
    /// </param>
    /// <param name="_startLogging">
    ///     True if should start the message logging after constructing the class; otherwise, false.
    /// </param>
    /// <returns>
    ///     A constructed <c>ReqDemPlanTaskLogger</c> class cast as a <c>ReqDemPlanTaskLoggerInterface</c> instance.
    /// </returns>
    internal static ReqDemPlanTaskLoggerInterface constructInstrumented(
        ReqDemPlanInstrumentationLogger _instrumentationLogger,
        boolean _startLogging = true)
    {
        try 
        {
            constructorInstrumentationLogger = _instrumentationLogger;
            return ReqDemPlanTaskLogger::construct(_startLogging);
        }
        finally
        {
            constructorInstrumentationLogger = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachTaskCollection</Name>
				<Source><![CDATA[
    private void attachTaskCollection(ReqDemPlanTaskCollectionRecId _taskCollectionRecId)
    {
        attachedToCollection = true;

        try
        {
            taskCollection = ReqDemPlanTaskCollectionLog::find(_taskCollectionRecId);
        }
        catch
        {
            this.loggingError("@DMP1137");
            taskCollection = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCurrentTaskToTelemtry</Name>
				<Source><![CDATA[
    private void logCurrentTaskToTelemtry()
    {
        str bool2str(boolean _bool)
        {
            return _bool ? 'true' : 'false';
        }

        if (!instrumentationLogger)
        {
            return;
        }

        try
        {
            var dataAreaRecId = CompanyInfo::findDataArea(currentTask.TaskDataAreaId).RecId;
            var durationSeconds = max(0, DateTimeUtil::getDifference(currentTask.EndDate, currentTask.StartDate));
            var status = this.currentTaskStatus();

            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(ReqDemPlanInstrumentationActivities::LogType, ReqDemPlanInstrumentationActivities::LogTypeTask);
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskIsExecutingInBatch, bool2str(batchTaskId != 0));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskBatchJobId, int642Str(batchJobId));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskBatchTaskId, int642Str(batchTaskId));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskCollectionId, int642Str(currentTask.TaskCollection));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskId, int642Str(currentTask.RecId));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskCode, currentTask.TaskCode);
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskStatus, status);
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskStartTimeUtc, DateTimeUtil::toStr(currentTask.StartDate));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskEndTimeUtc, DateTimeUtil::toStr(currentTask.EndDate));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskDurationSeconds, int642Str(durationSeconds));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskRank, int2str(currentTask.Rank));
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskProcessedRecordsCount, int642str(currentTask.ProcessedRecords));

            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskCompanyRecId, int642Str(dataAreaRecId));

            if (status == ReqDemPlanInstrumentationActivities::TaskStatusFailed)
            {
                instrumentationLogger.logError(serializer.toString());
            }
            else
            {
                instrumentationLogger.logInformation(serializer.toString());
            }
        }
        catch
        {
            // Demand forecasting should not be affected if something goes wrong when we are trying to log telemetry
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs bundle information.
    /// </summary>
    /// <param name="_batchJobId">
    /// Batch job identificator.
    /// </param>
    public void bundleLogging(RefRecId _batchJobId)
    {
        this.logFinalInfoToTelemtry(_batchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFinalInfoToTelemtry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write information about bundles to telemetry
    /// </summary>
    /// <param name="_batchJobId">
    /// Batch job identificator.
    /// </param>
    private void logFinalInfoToTelemtry(RefRecId _batchJobId)
    {
        if (!instrumentationLogger)
        {
            return;
        }

        try
        {
            ReqDemPlanForecastAuthorizationExecutionItem authorizationExecutionItem;
            ReqDemPlanTaskLog taskLog;
            int64 bundleDurationSeconds = 0;
            int64 bundlesDurationSeconds = 0;
            int processedBundlesCount = 0;
            int processedBundleRecordsCount = 0;
            int processedBundlesRecordsCount = 0;

            processedBundleRecordsCount = 0;

            while select taskLog
                where taskLog.BatchJobId == _batchJobId
                    && taskLog.FinishedOk == NoYes::Yes
            {
                bundleDurationSeconds = DateTimeUtil::getDifference(taskLog.EndDate, taskLog.StartDate);
                bundlesDurationSeconds += bundleDurationSeconds;
                    
                processedBundleRecordsCount += taskLog.ProcessedRecords;
            }

            if (processedBundleRecordsCount != 0)
            {
                processedBundlesCount++;

                processedBundlesRecordsCount += processedBundleRecordsCount;

                SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

                serializer.setValue(ReqDemPlanInstrumentationActivities::LogType, ReqDemPlanInstrumentationActivities::LogTypeTask);

                serializer.setValue(ReqDemPlanInstrumentationActivities::TaskIsExecutingInBatch, 'true');
                serializer.setValue(ReqDemPlanInstrumentationActivities::TaskBatchJobId, int642Str(_batchJobId));
                serializer.setValue(ReqDemPlanInstrumentationActivities::TaskBundleId, guid2Str(taskLog.BundleId));
                serializer.setValue(ReqDemPlanInstrumentationActivities::BundleDurationSeconds, int642Str(bundleDurationSeconds));
                serializer.setValue(ReqDemPlanInstrumentationActivities::TaskProcessedRecordsCount, int642Str(processedBundleRecordsCount));

                instrumentationLogger.logInformation(serializer.toString());
            }
            

            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(ReqDemPlanInstrumentationActivities::LogType, ReqDemPlanInstrumentationActivities::LogTypeTask);

            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskIsExecutingInBatch, 'true');
            serializer.setValue(ReqDemPlanInstrumentationActivities::TaskBatchJobId, int642Str(_batchJobId));
            serializer.setValue(ReqDemPlanInstrumentationActivities::ProcessedBundlesCount, int2Str(processedBundlesCount));
            serializer.setValue(ReqDemPlanInstrumentationActivities::BundlesDurationSeconds, int642Str(bundlesDurationSeconds));
            serializer.setValue(ReqDemPlanInstrumentationActivities::ProcessedAllRecordsCount, int2Str(processedBundlesRecordsCount));

            instrumentationLogger.logInformation(serializer.toString());
        }
        catch
        {
            // Demand forecasting should not be affected if something goes wrong when we are trying to log telemetry
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTaskStatus</Name>
				<Source><![CDATA[
    private str currentTaskStatus()
    {
        if (currentTask.EndDate < currentTask.StartDate)
        {
            return ReqDemPlanInstrumentationActivities::TaskStatusStarted;
        }

        return currentTask.FinishedOk ?
            ReqDemPlanInstrumentationActivities::TaskStatusCompleted :
            ReqDemPlanInstrumentationActivities::TaskStatusFailed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>