<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetBatchImportBudgetLinesFromCEService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;

/// <summary>
/// <c>ProjBudgetBatchImportBudgetLinesFromCEService</c> will import the budget lines from dataverse into forecast tables for the selected project ID
/// </summary>
public final class ProjBudgetBatchImportBudgetLinesFromCEService extends SysOperationServiceBase
{
    #OCCRetryCount
    private ProjBudgetBatchImportBudgetLinesFromCEContract contract;
    private Query query;
    boolean isProjBudgetManagementBatchFeatureEnabled = ProjBudgetManagementFeatureHelper::isBatchIntegrationFeatureEnabled();
    boolean exceptionFlag;
    private static ProjOpsInstrumentationLogger logger = ProjOpsInstrumentationLogger::createLogger(classStr(ProjBudgetBatchImportBudgetLinesFromCEService));
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importBudgetLinesFromDataverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import budget lines from Dataverse for the given project.
    /// </summary>
    /// <param name = "_dataContract">Data contract class the holds the Project ID value.</param>
    public final void importBudgetLinesFromDataverse(ProjBudgetBatchImportBudgetLinesFromCEContract _dataContract)
    {
        ProjOpsBudgetingInstrumentationActivites activities = ProjOpsBudgetingInstrumentationActivites::construct(logger);
        using (SysInstrumentationActivityContext activityContext = activities.activityContext(ProjOpsBudgetingInstrumentationActivites::ProjBudgetManagementBatchIntegration))
        {
            exceptionFlag = false;
            if (!isProjBudgetManagementBatchFeatureEnabled)
            {
                throw error(strFmt("@Proj:ProjBudgetBatchFeatureNotEnabledErrorMsg"));
            }
            contract = _dataContract;
            this.initQueryFromContract();

            if (query)
            {
                QueryRun queryRun = new QueryRun(query);
                if (!queryRun)
                {
                    logger.logError(strFmt("@Proj:ProjBudgetBatchQueryExceptionMessage"));
                    throw error(strFmt("@Proj:ProjBudgetBatchQueryExceptionMessage"));
                }
            
                while (queryRun.next())
                {
                    ProjTable projTable = queryRun.get(tableNum(ProjTable));
                    activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::ProjId, any2Str(projTable.ProjId));
                    try
                    {
                        ttsbegin;
                        str projectId = projTable.ProjId;
                        Map _conditions =  new Map(Types::String, Types::String);
                        _conditions.insert(ProjBudgetDataverseConstants::STATECODE, ProjBudgetDataverseConstants::BUDGET_APPROVED_STATE_CODE);
                        _conditions.insert(ProjBudgetDataverseConstants::STATUSCODE, ProjBudgetDataverseConstants::BUDGET_APPROVED_STATUS_CODE);
                        _conditions.insert('projId', projectId);
                    
                        //Get entity collection using iOrganizational service.
                        ProjBudgetDataverseClient dataverseClient = new ProjBudgetDataverseClient();
                        ICollection entityCollection = dataverseClient.getDataverseEntityData(DataverseEntity::BudgetLine, _conditions);
                    
                        //Map entity collection to Forecast Table.
                        ProjEntityCollectionWriter writer = new ProjBudgetLineEntityCollectionWriter(entityCollection, projTable.ProjId);
                        writer.writeToDatabase(true);
                        ttscommit;
                    
                    }
                    catch (Exception::Warning)
                    {
                        logger.logWarning(strFmt("@Proj:ProjBudgetBatchGenericWarningMessage", projTable.ProjId));
                        continue;
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            this.postException(projTable);
                            logger.logError(strFmt("@Proj:ProjBudgetBatchDeadlockException", projTable.ProjId));
                            Error("@Proj:ProjBudgetBatchDeadlockException", projTable.ProjId);
                            exceptionFlag = true;
                            continue;
                        }
                        else
                        {
                            sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                            retry;
                        }
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                this.postException(projTable);
                                logger.logError(strFmt("@Proj:ProjBudgetBatchUpdateConflictError", projTable.ProjId));
                                Error("@Proj:ProjBudgetBatchUpdateConflictError", projTable.ProjId);
                                continue;
                            }
                            else
                            {
                                logger.logInformation(strFmt("Update conflict occurred for project %1. Retry count %2", projTable.ProjId, xSession::currentRetryCount()));
                                retry;
                            }
                        }
                        else
                        {
                            this.postException(projTable);
                            Error("@Proj:ProjBudgetBatchUpdateConflictError", projTable.ProjId);
                            continue;
                        }
                    
                    }
                    catch (Exception::TransientSqlConnectionError)
                    {
                        if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                        {
                            retry;
                        }
                        else
                        {
                            this.postException(projTable);
                            Error("@Proj:ProjBudgetBatchTransientSqlConnectionError", projTable.ProjId);
                            continue;
                        }
                    }
                    catch (Exception::Error)
                    {
                        this.postException(projTable);
                        Error(strFmt("@Proj:ProjBudgetBatchGenericErrorMessage", projTable.ProjId));
                        logger.logError(strFmt("@Proj:ProjBudgetBatchGenericErrorMessage", projTable.ProjId));
                        continue;
                    }
                }
            }
            else
            {
                Error("@Proj:ProjBudgetBatchQueryExceptionMessage");
            }
            //Display message in case of success or failture of batch job.
            if (exceptionFlag)
            {
                Error("@Proj:ProjBudgetBatchJobCompletedWithExceptionMsg");
            }
            else
            {
                Info(strFmt("@Proj:ProjBudgetBatchJobCompletedMessage"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryFromContract</Name>
				<Source><![CDATA[
    private void initQueryFromContract()
    {
        query = this.getQueryFromContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFromContract</Name>
				<Source><![CDATA[
    private Query getQueryFromContract()
    {
        container queryContainer = SysOperationHelper::base64Decode(contract.parmQuery());

        if (!queryContainer)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return new Query(queryContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postException</Name>
				<Source><![CDATA[
    private void postException(ProjTable _projTable)
    {
        exceptionFlag = true;
        if (this.isExecutingInBatch())
        {
            BatchJob batchJob;
            select firstonly forUpdate Status from batchJob
                where batchJob.RecId == this.getCurrentBatchTask().BatchJobId;

            if (batchJob)
            {
                ttsbegin;

                batchJob.Status = BatchStatus::Error;
                batchJob.update();
                
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>