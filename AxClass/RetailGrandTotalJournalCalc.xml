<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the calculation of amounts for journal and creates its lines.
/// </summary>
public class RetailGrandTotalJournalCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs journal calculation.
    /// </summary>
    /// <param name="_journaTable">
    /// The journal that need to be calculated.
    /// </param>
    public void calculate(RetailGrandTotalJournalTable _journaTable)
    {
        if (!_journaTable.RecId)
        {
            return;
        }

        ttsBegin;

        if (_journaTable.Annual == NoYes::Yes)
        {
            this.createAnnualBatchRelations(_journaTable);
            this.fillAnnualJournalTable(_journaTable);
            this.createAnnualJournalTrans(_journaTable);
        }
        else 
        {
            this.createBatchRelations(_journaTable);
            this.fillJournalTable(_journaTable);
            this.createJournalTrans(_journaTable);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchRelations</Name>
				<Source><![CDATA[
    private void createBatchRelations(RetailGrandTotalJournalTable _journalTable)
    {
        RetailPosBatchTable posBatchTable;
        RetailLogFiscalTransaction logFiscalTrans;
        RetailLogFiscalRegistrationLine retailLogFiscalRegistrationLine;
        RetailLog logTable;
        RetailGrandTotalJourTableBatchRelation batchRelations;
        RetailGrandTotalJourRefRecId journalRecId = _journalTable.RecId;

        insert_recordset batchRelations (GrandTotalJournalTable, PosBatchTable)
        select JournalRecId, RecId from posBatchTable
            where posBatchTable.CloseDate   >= _journalTable.FromDate
                && posBatchTable.CloseDate  <= _journalTable.ToDate
                && posBatchTable.CloseDate  >  dateNull()
                && posBatchTable.StoreId    ==_journalTable.StoreId
            exists join logTable
                where logTable.StoreId == posBatchTable.StoreId
                    && logTable.terminalId == posBatchTable.TerminalId
                    && ((posBatchTable.ClosedAtBatchId && posBatchTable.ClosedAtBatchId == logTable.BatchId)
                    || (logTable.ClosedBatchId && logTable.ClosedBatchId == posBatchTable.BatchID)
                    || logTable.BatchId == posBatchTable.BatchID)
                    && logTable.EventType == RetailAuditEventType::CloseShift
            exists join retailLogFiscalRegistrationLine
                where retailLogFiscalRegistrationLine.Channel == logTable.ChannelId
                    && retailLogFiscalRegistrationLine.Store == logTable.StoreId
                    && retailLogFiscalRegistrationLine.Terminal == logTable.terminalId
                    && retailLogFiscalRegistrationLine.RetailLogId == logTable.RetailLogId;

        // Legacy fiscal transaction table
        insert_recordset batchRelations (GrandTotalJournalTable, PosBatchTable)
        select JournalRecId, RecId from posBatchTable
            where posBatchTable.CloseDate   >= _journalTable.FromDate
                && posBatchTable.CloseDate  <= _journalTable.ToDate
                && posBatchTable.CloseDate  >  dateNull()
                && posBatchTable.StoreId    ==_journalTable.StoreId
            exists join logTable
                where logTable.StoreId == posBatchTable.StoreId
                    && logTable.terminalId == posBatchTable.TerminalId
                    && logTable.BatchId == posBatchTable.BatchID
                    && logTable.EventType == RetailAuditEventType::CloseShift
            exists join logFiscalTrans
                where logFiscalTrans.Channel == logTable.ChannelId
                    && logFiscalTrans.Store == logTable.StoreId
                    && logFiscalTrans.Terminal == logTable.terminalId
                    && logFiscalTrans.RetailLogId == logTable.RetailLogId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    private void createJournalTrans(RetailGrandTotalJournalTable _journalTable)
    {
        RetailPosBatchTable posBatchTable;
        RetailPosBatchTaxTrans posBatchTaxTrans;
        RetailGrandTotalJournalTrans grandTotalTrans;
        RetailGrandTotalJourRefRecId journalRecId = _journalTable.RecId;
        RetailGrandTotalJourTableBatchRelation batchRelations;

        insert_recordset grandTotalTrans (JournalTable, NetAmount, TaxAmount, TaxRate, TaxCode)
        select journalRecId, sum(NetAmount), sum(TaxAmount), TaxRate, TaxCode from posBatchTaxTrans
            group by TaxRate, TaxCode
            exists join posBatchTable
            where posBatchTable.BatchID     == posBatchTaxTrans.BatchID
                && posBatchTable.TerminalId == posBatchTaxTrans.TerminalId
                && posBatchTable.StoreId    == posBatchTaxTrans.StoreId
            exists join batchRelations
            where batchRelations.PosBatchTable == posBatchTable.RecId
                && batchRelations.GrandTotalJournalTable == journalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillJournalTable</Name>
				<Source><![CDATA[
    private void fillJournalTable(RetailGrandTotalJournalTable _journalTable)
    {
        RetailGrandTotalJournalTable previousJournal;
        RetailPosBatchTable posBatchTable;
        RetailGrandTotalJourTableBatchRelation batchRelations;

        select sum(ShiftSalesTotal), sum(ShiftReturnsTotal) from posBatchTable
            exists join batchRelations
            where batchRelations.PosBatchTable == posBatchTable.RecId
                && batchRelations.GrandTotalJournalTable == _journalTable.RecId;

        _journalTable.GrandTotalSales   = posBatchTable.ShiftSalesTotal;
        _journalTable.GrandTotalReturns = posBatchTable.ShiftReturnsTotal;

        previousJournal = _journalTable.findPreviousClosedJournal();

        _journalTable.CumulativeGrandTotal += previousJournal.CumulativeGrandTotal + (_journalTable.GrandTotalSales - _journalTable.GrandTotalReturns);
        _journalTable.CumulativePerpetualGrandTotal += previousJournal.CumulativePerpetualGrandTotal + (_journalTable.GrandTotalSales + _journalTable.GrandTotalReturns);

    }

]]></Source>
			</Method>
			<Method>
				<Name>createAnnualBatchRelations</Name>
				<Source><![CDATA[
    private void createAnnualBatchRelations(RetailGrandTotalJournalTable _journalTable)
    {
        RetailGrandTotalJournalTable periodicJournalTable;
        RetailGrandTotalJourTableBatchRelation batchRelations;
        RetailGrandTotalJourTableBatchRelation periodicJournalbatchRelations;
        RetailGrandTotalJourRefRecId journalRecId = _journalTable.RecId;

        insert_recordset batchRelations (GrandTotalJournalTable, PosBatchTable)
        select journalRecId, PosBatchTable from periodicJournalbatchRelations
        exists join periodicJournalTable
        where periodicJournalTable.RecId == periodicJournalbatchRelations.GrandTotalJournalTable
            && periodicJournalTable.Status == RetailGrandTotalJournalStatus::Closed
            && periodicJournalTable.FromDate >= _journalTable.FromDate
            && periodicJournalTable.ToDate <= _journalTable.ToDate
            && periodicJournalTable.StoreId == _journalTable.StoreId
            && periodicJournalTable.Annual == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAnnualJournalTrans</Name>
				<Source><![CDATA[
    private void createAnnualJournalTrans(RetailGrandTotalJournalTable _journalTable)
    {
        RetailGrandTotalJournalTable periodicJournalTable;
        RetailGrandTotalJournalTrans grandTotalTrans;
        RetailGrandTotalJournalTrans periodicGrandTotalTrans;
        RetailGrandTotalJourRefRecId journalRecId = _journalTable.RecId;

        insert_recordset grandTotalTrans (JournalTable, NetAmount, TaxAmount, TaxRate, TaxCode)
        select journalRecId, sum(NetAmount), sum(TaxAmount), TaxRate, TaxCode from periodicGrandTotalTrans
            group by TaxRate, TaxCode
        exists join periodicJournalTable
        where periodicJournalTable.RecId == periodicGrandTotalTrans.JournalTable
            && periodicJournalTable.Status == RetailGrandTotalJournalStatus::Closed
            && periodicJournalTable.FromDate >= _journalTable.FromDate
            && periodicJournalTable.ToDate <= _journalTable.ToDate
            && periodicJournalTable.StoreId == _journalTable.StoreId
            && periodicJournalTable.Annual == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAnnualJournalTable</Name>
				<Source><![CDATA[
    private void fillAnnualJournalTable(RetailGrandTotalJournalTable _journalTable) 
    {
        RetailGrandTotalJournalTable previousJournal;
        RetailGrandTotalJournalTable relatedJournals;

        select sum(GrandTotalSales), sum(GrandTotalReturns)
            from relatedJournals
            where relatedJournals.ToDate >= _journalTable.FromDate
                && relatedJournals.ToDate <= _journalTable.ToDate
                && relatedJournals.Annual == NoYes::No
                && relatedJournals.StoreId == _journalTable.StoreId
                && relatedJournals.Status == RetailGrandTotalJournalStatus::Closed;

        _journalTable.GrandTotalSales   = relatedJournals.GrandTotalSales;
        _journalTable.GrandTotalReturns = relatedJournals.GrandTotalReturns;

        previousJournal = _journalTable.findPreviousClosedJournal();

        _journalTable.CumulativeGrandTotal += previousJournal.CumulativeGrandTotal + (_journalTable.GrandTotalSales - _journalTable.GrandTotalReturns);
        _journalTable.CumulativePerpetualGrandTotal += previousJournal.CumulativePerpetualGrandTotal + (_journalTable.GrandTotalSales + _journalTable.GrandTotalReturns);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>