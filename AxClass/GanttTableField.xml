<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTableField</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttTableField
{
    SysDictField sysDictField;

    boolean      enum2Integer;

    #define.NumOfDecimals2Str(16)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseType</Name>
				<Source><![CDATA[
    public Types baseType()
    {
        return sysDictField.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumId</Name>
				<Source><![CDATA[
    public enumId enumId()
    {
        return sysDictField.enumId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    public fieldName fieldName()
    {
        return fieldid2name(this.tableId(), this.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    public anytype getFieldValue(Common _record)
    {
        return _record.(this.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueStr</Name>
				<Source><![CDATA[
    public str getFieldValueStr(Common _record)
    {
        return GanttTableField::fieldValue2Str(this, this.getFieldValue(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    public fieldId id()
    {
        return sysDictField.id();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSystem</Name>
				<Source><![CDATA[
    public boolean isSystem()
    {
        return sysDictField.isSystem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeTime</Name>
				<Source><![CDATA[
    public boolean isTypeTime()
    {
        if (this.baseType() == Types::Integer)
        {
            return isTypeTime(this.typeName());
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public str name()
    {
        return sysDictField.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sysDictField = null;
        enum2Integer = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnum2Integer</Name>
				<Source><![CDATA[
    public boolean parmEnum2Integer(boolean _enum2Integer = enum2Integer)
    {
        enum2Integer = _enum2Integer;
        return enum2Integer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysDictField</Name>
				<Source><![CDATA[
    private SysDictField parmSysDictField(SysDictField _sysDictField)
    {
        sysDictField = _sysDictField;

        return sysDictField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValue</Name>
				<Source><![CDATA[
    public void setFieldValue(Common _record, anytype _value)
    {
        if (_record.TableId != this.tableId())
        {
            throw error(strfmt("@SYS54195", funcname()));
        }

        _record.(this.id()) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueStr</Name>
				<Source><![CDATA[
    public void setFieldValueStr(Common _record, str _strValue)
    {
        DictEnum    dictEnum;
        anytype     anyValue;

        switch (this.baseType())
        {
            case Types::Guid:

                anyValue = str2guid(_strValue);
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:

                anyValue = _strValue;
                break;

            case Types::Integer:
                //need to distinguish between true integers and times
                if (this.isTypeTime())
                {
                    anyValue = str2time(_strValue);
                }
                else
                {
                    anyValue = str2int(_strValue);
                }
                break;

            case Types::Int64:

                anyValue = str2int64(_strValue);
                break;

            case Types::Real:

                anyValue = str2num(_strValue);
                break;

            case Types::Date:
                anyValue = str2date(_strValue, GanttTableField::date2StrSequence());
                break;

            case Types::UtcDateTime:

                anyValue = str2datetime(_strValue, GanttTableField::date2StrSequence());
                break;

            case Types::Enum:

                dictEnum = new DictEnum(this.enumId());
                anyValue = dictEnum.name2Value(_strValue);
                break;

            case Types::Container:
                anyValue = str2con(_strValue);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.setFieldValue(_record, anyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    private tableId tableId()
    {
        return sysDictField.tableid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeName</Name>
				<Source><![CDATA[
    private utilElementName typeName()
    {
        return sysDictField.typeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttTableField construct()
    {
        return new GanttTableField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrDay</Name>
				<Source><![CDATA[
    public static int date2StrDay()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrMonth</Name>
				<Source><![CDATA[
    public static int date2StrMonth()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrSeparator1</Name>
				<Source><![CDATA[
    public static int date2StrSeparator1()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrSeparator2</Name>
				<Source><![CDATA[
    public static int date2StrSeparator2()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrSequence</Name>
				<Source><![CDATA[
    public static int date2StrSequence()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrYear</Name>
				<Source><![CDATA[
    public static int date2StrYear()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValue2Str</Name>
				<Source><![CDATA[
    public static str fieldValue2Str(GanttTableField    _ganttTableField,
                                     anytype            _anyFieldValue)
    {
        str         strFieldValue;
        SysDictEnum sysDictEnum;

        if (!_ganttTableField)
        {
            throw error(strfmt("@SYS54195", funcname()));
        }

        switch (_ganttTableField.baseType())
        {
            case Types::Guid:

                strFieldValue = guid2str(_anyFieldValue);
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:

                strFieldValue = _anyFieldValue;
                break;

            case Types::Integer:
                //need to distinguish between true integers and times
                if (_ganttTableField.isTypeTime())
                {
                    strFieldValue = time2str(_anyFieldValue,
                                             GanttTableField::time2StrSeparator1(),
                                             GanttTableField::time2StrSeparator2());
                }
                else
                {
                    strFieldValue = int2str(_anyFieldValue);
                }
                break;

            case Types::Int64:

                strFieldValue = int642str(_anyFieldValue);
                break;

            case Types::Real:

                strFieldValue = num2Str0(_anyFieldValue,
                                         0,
                                         GanttTableField::numOfDecimals2Str());
                break;

            case Types::Date:

                strFieldValue = date2str(_anyFieldValue,
                                         GanttTableField::date2StrSequence(),
                                         GanttTableField::date2StrDay(),
                                         GanttTableField::date2StrSeparator1(),
                                         GanttTableField::date2StrMonth(),
                                         GanttTableField::date2StrSeparator2(),
                                         GanttTableField::date2StrYear(),
                                         DateFlags::None);
                break;

            case Types::UtcDateTime:

                strFieldValue = datetime2str(_anyFieldValue, DateFlags::None);
                break;

            case Types::Enum:

                if (_ganttTableField.parmEnum2Integer())
                {
                    strFieldValue = int2str(enum2int(_anyFieldValue));
                }
                else
                {
                    sysDictEnum     = new SysDictEnum(_ganttTableField.enumId());

                    strFieldValue   = sysDictEnum.value2Label(_anyFieldValue);
                }
                break;

            case Types::Container:

                strFieldValue = con2Str(_anyFieldValue);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return strFieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldData</Name>
				<Source><![CDATA[
    public static GanttTableField newFieldData(tableId _tableId,
                                               fieldId _fieldId,
                                               int     _arrayIndex = 0)
    {
        GanttTableField ganttTableField = new GanttTableField();

        ganttTableField.parmSysDictField(new SysDictField(_tableId, _fieldId, _arrayIndex));

        return ganttTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfDecimals2Str</Name>
				<Source><![CDATA[
    public static int numOfDecimals2Str()
    {
        return #NumOfDecimals2Str;
    }

]]></Source>
			</Method>
			<Method>
				<Name>time2StrSeparator1</Name>
				<Source><![CDATA[
    public static int time2StrSeparator1()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>time2StrSeparator2</Name>
				<Source><![CDATA[
    public static int time2StrSeparator2()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist(tableName    _tableName,
                                   fieldName    _fieldName)
    {
        return strfmt("@SYS33954", _fieldName, _tableName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>