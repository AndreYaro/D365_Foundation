<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OfficialsServ_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class OfficialsServ_RU
{
    NumberSeq          sessionSeq;
    OffSessionId_RU    newId;
    OffReportType_RU   reportType,
                       secondaryReportType;
    boolean            skipOfficialsInit;

    private static const str CacheScope = classStr(OfficialsServ_RU) + '_' + staticMethodStr(OfficialsServ_RU, isFeatureEnabled);

    RecordInsertList    officialsTransInsertList = new RecordInsertList(tableNum(OfficialsTrans_RU));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>flushOfficialsTransInsertList</Name>
				<Source><![CDATA[
    private void flushOfficialsTransInsertList()
    {
        officialsTransInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOfficialsTransInsertList</Name>
				<Source><![CDATA[
    private void addOfficialsTransInsertList(OfficialsTrans_RU _record)
    {
        officialsTransInsertList.add(_record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    private static container cacheKey()
    {
        return [curExt()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSessionId</Name>
				<Source><![CDATA[
    public OffSessionId_RU getNewSessionId()
    {
        sessionSeq = NumberSeq::newGetNum(CompanyInfo::numRefOffSessionId_RU());

        return sessionSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    public InventJournalType getReportType(InventJournalId _jourId)
    {
        return (select inventJournalTable
                where inventJournalTable.JournalId == _jourId).JournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryRAsset</Name>
				<Source><![CDATA[
    public void initInventoryRAsset(OffReportType_RU _reportType)
    {
        #define.memberCnt(3)

        if (! OfficialsServ_RU::isFeatureEnabled())
            return;

        ttsbegin;
        this.insertOrUpdate(OffPosition_RU::Chairman,
                            _reportType,
                            '',
                            OffTableAll_RU::All);

        this.insertOrUpdate(OffPosition_RU::Member,
                            _reportType,
                            '',
                            OffTableAll_RU::All,
                            false,
                            OffReportType_RU::General,
                            false,
                            false,
                            '',
                            #memberCnt);

        this.flushOfficialsTransInsertList();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchM4M7</Name>
				<Source><![CDATA[
    private void initPurchM4M7(VendDocumentTableMap  _table)
    {
        PurchLine   line;
        InventDim   dim;

        while select InventLocationId from dim
            group by InventLocationId
            exists join line
                where line.InventDimId == dim.InventDimId &&
                      line.PurchId     == _table.PurchId
        {
            this.insertOrUpdate(OffPosition_RU::Acceptor,
                                OffReportType_RU::PurchM4M7,
                                _table.InvoiceAccount,
                                OffTableAll_RU::Table,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                dim.InventLocationId);

            this.insertOrUpdate(OffPosition_RU::Supplier,
                                OffReportType_RU::PurchM4M7,
                                _table.InvoiceAccount,
                                OffTableAll_RU::Table,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                dim.InventLocationId);

            this.insertOrUpdate(OffPosition_RU::Chairman,
                                OffReportType_RU::PurchM4M7,
                                _table.InvoiceAccount,
                                OffTableAll_RU::Table,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                dim.InventLocationId);
        }

        this.insertOrUpdate(OffPosition_RU::Member,
                            OffReportType_RU::PurchM4M7,
                            _table.InvoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true,
                            "",
                            InventParameters::inventReceiptsListMembersNumber_RU());

        this.insertOrUpdate(OffPosition_RU::Director,
                            OffReportType_RU::PurchM4M7,
                            _table.InvoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.insertOrUpdate(OffPosition_RU::Accountant,
                            OffReportType_RU::PurchM4M7,
                            _table.InvoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRassetReport</Name>
				<Source><![CDATA[
    public void initRassetReport()
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();
        this.insertOrUpdate(OffPosition_RU::Chairman, OffReportType_RU::RAssetMB8, '', OffTableAll_RU::Table, false, OffReportType_RU::General, true, true);
        this.insertOrUpdate(OffPosition_RU::Member, OffReportType_RU::RAssetMB8, '', OffTableAll_RU::Table, false, OffReportType_RU::General, true, true, "", 3);

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRTax25Inv17</Name>
				<Source><![CDATA[
    public void initRTax25Inv17(RTax25InventoryActType  _actType)
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();
        switch (_actType)
        {
            case RTax25InventoryActType::Act:
                this.insertOrUpdate(OffPosition_RU::Chairman, OffReportType_RU::RTax25Inv17, "", OffTableAll_RU::All);
                this.insertOrUpdate(OffPosition_RU::Member,   OffReportType_RU::RTax25Inv17, "", OffTableAll_RU::All);
            break;
            case RTax25InventoryActType::Appendix:
                this.insertOrUpdate(OffPosition_RU::AccountantJ, OffReportType_RU::RTax25Inv17, "", OffTableAll_RU::All);
            break;
        }

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoice</Name>
				<Source><![CDATA[
    private void initSalesInvoice(CustInvoiceAccount    _invoiceAccount,
                                  SalesParmTable        _salesParmTable = null)
    {
        InventOwner_RU  inventOwner;
        CustAccount     consigneeAccount = _salesParmTable.SalesId ? _salesParmTable.salesTable().salesTable_RU().ConsigneeAccount_RU : '';

        if (_salesParmTable.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent &&
            _salesParmTable.InventOwnerId_RU &&
            InventOwner_RU::find(_salesParmTable.InventOwnerId_RU).AccountType == InventOwnerAccountType_RU::Vend)
        {
            inventOwner = InventOwner_RU::find(_salesParmTable.InventOwnerId_RU);
        }

        if (inventOwner)
        {
            this.insertOrUpdate(OffPosition_RU::Director,
                                OffReportType_RU::PurchInvoice,
                                inventOwner.AccountNum,
                                OffTableAll_RU::Table,
                                true,
                                OffReportType_RU::SalesInvoice,
                                true,
                                true);
            this.insertOrUpdate(OffPosition_RU::Accountant,
                                OffReportType_RU::PurchInvoice,
                                inventOwner.AccountNum,
                                OffTableAll_RU::Table,
                                true,
                                OffReportType_RU::SalesInvoice,
                                true,
                                true);
        }
        else
        {
            this.insertOrUpdate(OffPosition_RU::Director,
                                OffReportType_RU::General,
                                "",
                                OffTableAll_RU::All,
                                true,
                                OffReportType_RU::SalesInvoice,
                                true,
                                false);
            this.insertOrUpdate(OffPosition_RU::Accountant,
                                OffReportType_RU::General,
                                "",
                                OffTableAll_RU::All,
                                true,
                                OffReportType_RU::SalesInvoice,
                                true,
                                false);
        }
        this.insertOrUpdate(OffPosition_RU::Acceptor,
                            OffReportType_RU::SalesInvoice,
                            _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);
        this.insertOrUpdate(OffPosition_RU::Taker,
                            OffReportType_RU::SalesInvoice,
                            _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        if (inventOwner)
        {
            this.insertOrUpdate(OffPosition_RU::Supplier,
                                OffReportType_RU::PurchInvoice,
                                inventOwner.AccountNum,
                                OffTableAll_RU::Table,
                                true,
                                OffReportType_RU::SalesInvoice,
                                true,
                                true);
        }
        else
        {
            this.insertOrUpdate(OffPosition_RU::Supplier,
                                OffReportType_RU::SalesInvoice,
                                _invoiceAccount);
        }

        this.insertOrUpdate(OffPosition_RU::TransResp,
                            OffReportType_RU::SalesInvoice,
                            consigneeAccount ? consigneeAccount : _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.insertOrUpdate(OffPosition_RU::TransRespCust,
                            OffReportType_RU::SalesInvoice,
                            consigneeAccount ? consigneeAccount : _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.initSalesInvoice_CarrierType(_invoiceAccount, _salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoice_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates official transaction into record insert list.
    /// </summary>
    /// <param name = "_invoiceAccount">Instance of <c>CustInvoiceAccount</c> class.</param>
    /// <param name = "_salesParmTable">Cursor of <c>salesParam</c> table.</param>
    protected void initSalesInvoice_CarrierType(CustInvoiceAccount _invoiceAccount, SalesParmTable _salesParmTable)
    {
        switch (_salesParmTable.bolCarrierType_RU)
        {
            case CarrierType_W::Customer :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    OffReportType_RU::SalesInvoice,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;

            case CarrierType_W::Vendor :
                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    true,
                                    OffReportType_RU::SalesInvoice,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier,
                                    ModuleCustVend::Vend);
                break;
            case CarrierType_W::InvoiceAccount :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    OffReportType_RU::SalesInvoice,
                                    _invoiceAccount,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoiceCreditNote</Name>
				<Source><![CDATA[
    private void initSalesInvoiceCreditNote(OffReportType_RU      _reportType,
                                            CustInvoiceAccount    _invoiceAccount,
                                            SalesParmTable        _salesParmTable = null)
    {
        CustAccount consigneeAccount = _salesParmTable ? _salesParmTable.salesTable().salesTable_RU().ConsigneeAccount_RU : '';

        this.insertOrUpdate(OffPosition_RU::Director,   _reportType, _invoiceAccount);
        this.insertOrUpdate(OffPosition_RU::Accountant, _reportType, _invoiceAccount);
        this.insertOrUpdate(OffPosition_RU::Acceptor,   _reportType, _invoiceAccount);
        this.insertOrUpdate(OffPosition_RU::Taker,      _reportType, _invoiceAccount);
        this.insertOrUpdate(OffPosition_RU::Supplier, _reportType, _invoiceAccount);

        this.insertOrUpdate(OffPosition_RU::TransResp,
                            _reportType,
                            consigneeAccount ? consigneeAccount : _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.insertOrUpdate(OffPosition_RU::TransRespCust,
                            _reportType,
                            consigneeAccount ? consigneeAccount : _invoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.initSalesInvoiceCreditNote_CarrierType(
            _reportType,
            _invoiceAccount,
            _salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoiceCreditNote_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates official transaction into record insert list.
    /// </summary>
    /// <param name = "_reportType">Official report type.</param>
    /// <param name = "_invoiceAccount">Instance of <c>CustInvoiceAccount</c> class.</param>
    /// <param name = "_salesParmTable">Cursor of <c>salesParam</c> table.</param>
    protected void initSalesInvoiceCreditNote_CarrierType(
        OffReportType_RU _reportType,
        CustInvoiceAccount _invoiceAccount,
        SalesParmTable _salesParmTable = null)
    {
        switch (_salesParmTable.bolCarrierType_RU)
        {
            case CarrierType_W::Customer :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    _reportType,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;

            case CarrierType_W::Vendor :
                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    true,
                                    _reportType,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;
            case CarrierType_W::InvoiceAccount :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    _reportType,
                                    _invoiceAccount,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoiceM15</Name>
				<Source><![CDATA[
    private void initSalesInvoiceM15(OffReportType_RU      _reportType,
                                     SalesParmTable        _salesParmTable)
    {
        SalesParmLine   line;
        InventDim       dim;
        CustAccount     consigneeAccount = _salesParmTable ? _salesParmTable.salesTable().salesTable_RU().ConsigneeAccount_RU : '';

        this.insertOrUpdate(OffPosition_RU::Director,
                            OffReportType_RU::General,
                            "",
                            OffTableAll_RU::All,
                            true,
                            _reportType,
                            true,
                            false);
        this.insertOrUpdate(OffPosition_RU::Accountant,
                            OffReportType_RU::General,
                            "",
                            OffTableAll_RU::All,
                            true,
                            _reportType,
                            true,
                            false);
        this.insertOrUpdate(OffPosition_RU::Supplier,
                            _reportType,
                            _salesParmTable.InvoiceAccount);

        while select InventLocationId
        from dim
        group by InventLocationId
        exists join line
            where line.ParmId      == _salesParmTable.ParmId     &&
                  line.TableRefId  == _salesParmTable.TableRefId &&
                  line.InventDimId == dim.InventDimId
        {
            this.insertOrUpdate(OffPosition_RU::Supplier,
                                _reportType,
                                _salesParmTable.InvoiceAccount,
                                OffTableAll_RU::Table,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                dim.InventLocationId);
            this.insertOrUpdate(OffPosition_RU::Taker,
                                _reportType,
                                _salesParmTable.InvoiceAccount,
                                OffTableAll_RU::Table,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                dim.InventLocationId);
        }

        this.insertOrUpdate(OffPosition_RU::TransResp,
                            _reportType,
                            consigneeAccount ? consigneeAccount : _salesParmTable.InvoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.insertOrUpdate(OffPosition_RU::TransRespCust,
                            _reportType,
                            consigneeAccount ? consigneeAccount : _salesParmTable.InvoiceAccount,
                            OffTableAll_RU::Table,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.initSalesInvoiceM15_CarrierType(_reportType, _salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesInvoiceM15_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates official transaction into record insert list.
    /// </summary>
    /// <param name = "_reportType">Value of <c>OffReportType_RU</c> enumeration.</param>
    /// <param name = "_salesParmTable">Cursor of <c>salesParam</c> table.</param>
    protected void initSalesInvoiceM15_CarrierType(
        OffReportType_RU _reportType,
        SalesParmTable _salesParmTable)
    {
        switch (_salesParmTable.bolCarrierType_RU)
        {
            case CarrierType_W::Customer :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    _reportType,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    false,
                                    _reportType,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;

            case CarrierType_W::Vendor :
                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    _salesParmTable.bolCarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    true,
                                    _reportType,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;
            case CarrierType_W::InvoiceAccount :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    _reportType,
                                    _salesParmTable.InvoiceAccount,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableCommissionAgentReport</Name>
				<Source><![CDATA[
    public void initTableCommissionAgentReport(CustAccount _invoiceAccount,
                                               boolean     _creditNote)
    {
        newId = this.getNewSessionId();

        if (_creditNote)
        {
            this.initSalesInvoiceCreditNote(OffReportType_RU::SalesInvoiceCreditNote, _invoiceAccount);
        }
        else
        {
            this.initSalesInvoice(_invoiceAccount);
        }

        this.insertOrUpdate(OffPosition_RU::Responsible,
                            _creditNote ? OffReportType_RU::CustFactureCreditNote : OffReportType_RU::CustFacture,
                            _invoiceAccount);

        this.insertOrUpdate(OffPosition_RU::Filler,
                            OffReportType_RU::CommissionAgentReport,
                            _invoiceAccount);

        this.insertOrUpdate(OffPosition_RU::Filler,
                            OffReportType_RU::SalesInvoice,
                            _invoiceAccount);

        this.insertOrUpdate(OffPosition_RU::Filler,
                            OffReportType_RU::CustFacture,
                            _invoiceAccount);

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableCustInvoice</Name>
				<Source><![CDATA[
    public void initTableCustInvoice(CustInvoiceJour    _custInvoiceJour,
                                     boolean            _newId  = true)
    {
        boolean     creditNote;

        if (! OfficialsServ_RU::isFeatureEnabled() || _custInvoiceJour.custInvoiceJour_Officials().OffSessionId)
        {
            return;
        }

        if (CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend)
        {
            creditNote = _custInvoiceJour.creditNote();
        }
        else
        {
            creditNote = false;
        }

        if (_newId || ! newId)
        {
            newId = this.getNewSessionId();
        }

        if (creditNote)
        {
            reportType = OffReportType_RU::SalesInvoiceCreditNote;
            this.initSalesInvoiceCreditNote(reportType, _custInvoiceJour.InvoiceAccount);
        }
        else
        {
            reportType = OffReportType_RU::SalesInvoice;
            this.initSalesInvoice(_custInvoiceJour.InvoiceAccount);
        }

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableEmplAdvTable_RU</Name>
				<Source><![CDATA[
    public void initTableEmplAdvTable_RU(EmplAdvanceId_RU  _accountNum)
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();
        this.insertOrUpdate(OffPosition_RU::Director,    OffReportType_RU::AdvanceReport, _accountNum, OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Accountant,  OffReportType_RU::AdvanceReport, _accountNum, OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Cashier,     OffReportType_RU::AdvanceReport, _accountNum, OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::AccountantJ, OffReportType_RU::AdvanceReport, _accountNum, OffTableAll_RU::All);
        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFacture</Name>
				<Source><![CDATA[
    public void initTableFacture(FactureModule_RU _module,
                                 CustVendAC       _account    = "",
                                 boolean          _rebuild    = true,
                                 boolean          _creditNote = false,
                                 InventProfileType_RU   _inventProfileType = InventProfileType_RU::NotSpecified,
                                 InventOwnerId_RU       _inventOwnerId     = "")
    {
        InventOwner_RU  inventOwner;

        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        if (_rebuild)
        {
            newId = this.getNewSessionId();
        }

        if (_creditNote)
        {
            switch (_module)
            {
                case FactureModule_RU::Cust                    :
                    reportType = OffReportType_RU::CustFactureCreditNote;
                    this.insertOrUpdate(OffPosition_RU::Director,    reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Accountant,  reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, _account);
                    break;
                case FactureModule_RU::Vend                    :
                    reportType = OffReportType_RU::VendFactureCreditNote;
                    this.insertOrUpdate(OffPosition_RU::Director,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Accountant,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, _account);
                    break;
                case FactureModule_RU::Empl                    :
                case FactureModule_RU::TaxCorrectionPurch      :
                case FactureModule_RU::TaxCorrectionSales      :
                case FactureModule_RU::TaxCorrectionPurch_Cust :
                case FactureModule_RU::TaxCorrectionSales_Vend :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            switch (_module)
            {
                case FactureModule_RU::Cust                    :
                    reportType = OffReportType_RU::CustFacture;

                    if (_inventProfileType == InventProfileType_RU::CommissionPrincipalAgent &&
                        _inventOwnerId &&
                        InventOwner_RU::find(_inventOwnerId).AccountType == InventOwnerAccountType_RU::Vend)
                    {
                        inventOwner = InventOwner_RU::find(_inventOwnerId);
                    }

                    if (inventOwner)
                    {
                        this.insertOrUpdate(OffPosition_RU::Director,
                                            OffReportType_RU::VendFacture,
                                            inventOwner.AccountNum,
                                            OffTableAll_RU::Table,
                                            true,
                                            reportType,
                                            true,
                                            true);
                        this.insertOrUpdate(OffPosition_RU::Accountant,
                                            OffReportType_RU::VendFacture,
                                            inventOwner.AccountNum,
                                            OffTableAll_RU::Table,
                                            true,
                                            reportType,
                                            true,
                                            true);
                        this.insertOrUpdate(OffPosition_RU::Responsible,
                                            OffReportType_RU::VendFacture,
                                            inventOwner.AccountNum,
                                            OffTableAll_RU::Table,
                                            true,
                                            reportType,
                                            true,
                                            true);
                    }
                    else
                    {
                        this.insertOrUpdate(OffPosition_RU::Director,
                                            OffReportType_RU::General,
                                            "",
                                            OffTableAll_RU::All,
                                            true,
                                            reportType);
                        this.insertOrUpdate(OffPosition_RU::Accountant,
                                            OffReportType_RU::General,
                                            "",
                                            OffTableAll_RU::All,
                                            true,
                                            reportType);
                        this.insertOrUpdate(OffPosition_RU::Responsible, reportType, _account);
                    }
                    break;
                case FactureModule_RU::Vend                    :
                    reportType = OffReportType_RU::VendFacture;
                    this.insertOrUpdate(OffPosition_RU::Director,    reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Accountant,  reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, _account);
                    break;
                case FactureModule_RU::Empl                    :
                    reportType = OffReportType_RU::EmplAdvanceReportFacture;
                    this.insertOrUpdate(OffPosition_RU::Director,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Accountant,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, "", OffTableAll_RU::All);
                    break;
                case FactureModule_RU::TaxCorrectionPurch      :
                case FactureModule_RU::TaxCorrectionSales_Vend :
                    reportType = OffReportType_RU::TaxCorrectionFactureVend;
                    this.insertOrUpdate(OffPosition_RU::Director,    reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Accountant,  reportType, _account);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, _account);
                    break;
                case FactureModule_RU::TaxCorrectionSales      :
                case FactureModule_RU::TaxCorrectionPurch_Cust :
                    reportType = OffReportType_RU::TaxCorrectionFactureCust;
                    this.insertOrUpdate(OffPosition_RU::Director,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Accountant,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Responsible, reportType, "", OffTableAll_RU::All);
                    break;
            }
        }
        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFreeTextInvoice</Name>
				<Source><![CDATA[
    public OffReportType_RU initTableFreeTextInvoice(CustInvoiceAccount _invoiceAccount)
    {
        newId = this.getNewSessionId();

        reportType = OffReportType_RU::SalesInvoice4Paym;

        this.insertOrUpdate(OffPosition_RU::Director,
                            OffReportType_RU::General,
                            "",
                            OffTableAll_RU::All,
                            true,
                            reportType,
                            true,
                            false);

        this.insertOrUpdate(OffPosition_RU::Accountant,
                            OffReportType_RU::General,
                            "",
                            OffTableAll_RU::All,
                            true,
                            reportType,
                            true,
                            false);

        this.insertOrUpdate(OffPosition_RU::Filler,
                            reportType,
                            _invoiceAccount);

        this.insertOrUpdate(OffPosition_RU::Responsible,
                            reportType,
                            _invoiceAccount,
                            OffTableAll_RU::All,
                            false,
                            OffReportType_RU::General,
                            true,
                            true);

        this.flushOfficialsTransInsertList();

        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableInvent</Name>
				<Source><![CDATA[
    public void initTableInvent(InventJournalReportType_RU _reportType, OffSessionId_RU _newId = "")
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        if (_newId == "")
        {
            newId = this.getNewSessionId();
        }
        else
        {
            newId = _newId;
        }

        ttsbegin;

        switch (_reportType)
        {
            case InventJournalReportType_RU::Transfer :
                this.initTransferOfficials();
                break;

            case InventJournalReportType_RU::CountColl :
                this.initCountCollOfficials();
                break;

            case InventJournalReportType_RU::CountingList :
                this.initCountingListOfficials();
                break;

            case InventJournalReportType_RU::CountingListBailee :
                this.initCountingListBaileeOfficials();
                break;

            case InventJournalReportType_RU::BOMReq :
                this.initBOMReqOfficials();
                break;

            case InventJournalReportType_RU::Loss :
                this.initLossOfficials();
                break;

            case InventJournalReportType_RU::CountingListInTransit :
                this.initCountingListInTransitOfficials();
                break;
            default:
                OfficialsServ_RU::initOfficialsExt();
                break;
        }

        this.flushOfficialsTransInsertList();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablePurch</Name>
				<Source><![CDATA[
    public OffReportType_RU initTablePurch(VendDocumentTableMap  _vendInvoiceInfoTable,
                                           PurchParmUpdate       _purchParmUpdate,
                                           boolean               _newId  = true,
                                           boolean               _includeFacture = false)
    {
        PurchTotals purchTotals;
        boolean     creditNote;

        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return OffReportType_RU::General;
        }

        if (_vendInvoiceInfoTable.Ordering != DocumentStatus::Invoice4Paym_RU &&
            CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend)
        {
            purchTotals = PurchTotals::newParmTable(_vendInvoiceInfoTable,
                _purchParmUpdate.SpecQty,
                _purchParmUpdate.ParmId,
                _purchParmUpdate.SumPurchId,
                _vendInvoiceInfoTable.Ordering);

            purchTotals.calc();
            creditNote = purchTotals.purchTotalAmount() < 0;
        }
        else
        {
            creditNote = false;
        }

        if (_newId || ! newId)
        {
            newId = this.getNewSessionId();
        }

        switch (_vendInvoiceInfoTable.Ordering)
        {
            case DocumentStatus::PackingSlip :
                reportType = OffReportType_RU::PurchM4M7;
                OfficialsTrans_RU::deleteWithoutUpdate(newId);
                this.initPurchM4M7(_vendInvoiceInfoTable);
                break;

            case DocumentStatus::Invoice,
                DocumentStatus::Facture_RU,
                DocumentStatus::ApproveJournal:
                reportType = creditNote ?
                                OffReportType_RU::PurchInvoiceCreditNote :
                                OffReportType_RU::PurchInvoice;
                secondaryReportType = creditNote ?
                                OffReportType_RU::VendFactureCreditNote :
                                OffReportType_RU::VendFacture;

                // Do not re-initialize officials already set
                if (_vendInvoiceInfoTable.VendDocumentTableMap::parmOffSessionId_RU() && _vendInvoiceInfoTable.VendDocumentTableMap::parmOffReportType_RU() == reportType)
                    return reportType;

                // Clean up outdated officials
                OffReportType_RU offReportTypeVendInvoice = _vendInvoiceInfoTable.VendDocumentTableMap::parmOffReportType_RU();

                if (offReportTypeVendInvoice != OffReportType_RU::General
                    && offReportTypeVendInvoice != OffReportType_RU::CashSlip)
                {
                    OfficialsTrans_RU::deleteWithoutUpdate(newId);
                }

                if (reportType == OffReportType_RU::PurchInvoiceCreditNote)
                {
                    this.insertOrUpdate(OffPosition_RU::Director,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                    this.insertOrUpdate(OffPosition_RU::Accountant,
                                        OffReportType_RU::General,
                                        "",
                                        OffTableAll_RU::All,
                                        true,
                                        reportType);
                }
                else
                {
                    this.insertOrUpdate(OffPosition_RU::Director,   OffReportType_RU::PurchInvoice, _vendInvoiceInfoTable.InvoiceAccount);
                    this.insertOrUpdate(OffPosition_RU::Accountant, OffReportType_RU::PurchInvoice, _vendInvoiceInfoTable.InvoiceAccount);
                }
                this.insertOrUpdate(OffPosition_RU::Acceptor,   reportType, _vendInvoiceInfoTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Taker,      reportType, _vendInvoiceInfoTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Supplier,   reportType, _vendInvoiceInfoTable.InvoiceAccount);
                if (_includeFacture)
                {
                    this.insertOrUpdate(OffPosition_RU::Responsible, secondaryReportType, _vendInvoiceInfoTable.InvoiceAccount);
                }
                break;

            case DocumentStatus::Invoice4Paym_RU    :
                reportType = OffReportType_RU::PurchInvoice4Paym;
                this.insertOrUpdate(OffPosition_RU::Director,
                                    OffReportType_RU::PurchInvoice4Paym,
                                    _vendInvoiceInfoTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Accountant,
                                    OffReportType_RU::PurchInvoice4Paym,
                                    _vendInvoiceInfoTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Filler,
                                    OffReportType_RU::PurchInvoice4Paym,
                                    _vendInvoiceInfoTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Responsible,
                                    OffReportType_RU::PurchInvoice4Paym,
                                    _vendInvoiceInfoTable.InvoiceAccount,
                                    OffTableAll_RU::Table);
                break;
        }

        this.flushOfficialsTransInsertList();
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableRCash</Name>
				<Source><![CDATA[
    public void initTableRCash(RCashAccount  _accountNum)
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();
        this.insertOrUpdate(OffPosition_RU::Director,    OffReportType_RU::CashSlip, _accountNum, OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Accountant,  OffReportType_RU::CashSlip, _accountNum, OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Cashier,     OffReportType_RU::CashSlip, _accountNum, OffTableAll_RU::All);

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableRDeferrals</Name>
				<Source><![CDATA[
    public void initTableRDeferrals()
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();
        this.insertOrUpdate(OffPosition_RU::AccountantJ, OffReportType_RU::RDeferrals, '', OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Chairman,    OffReportType_RU::RDeferrals, '', OffTableAll_RU::All);
        this.insertOrUpdate(OffPosition_RU::Member,
                            OffReportType_RU::RDeferrals,
                            '',
                            OffTableAll_RU::All,
                            false,
                            OffReportType_RU::General,
                            true,
                            true,
                            "",
                            3);
        this.insertOrUpdate(OffPosition_RU::InCharge,
                            OffReportType_RU::RDeferrals,
                            '',
                            OffTableAll_RU::All,
                            false,
                            OffReportType_RU::General,
                            true,
                            true,
                            "",
                            3);
        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableRPayTaxListTable</Name>
				<Source><![CDATA[
    public void initTableRPayTaxListTable()
    {
        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }
        newId = this.getNewSessionId();
        this.insertOrUpdate(OffPosition_RU::Responsible, OffReportType_RU::RPayTaxList, '', OffTableAll_RU::All);
        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableSales</Name>
				<Source><![CDATA[
    public OffReportType_RU initTableSales(SalesParmTable               _salesParmTable,
                                           SalesParmUpdate              _salesParmUpdate,
                                           boolean                      _newId          = true,
                                           boolean                      _includeFacture = false,
                                           CustInvoicePrintoutType_RU   _printout       = CustInvoicePrintoutType_RU::TORG_12)
    {
        SalesTotals salesTotals;
        boolean     creditNote;

        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return OffReportType_RU::General;
        }

        if (_salesParmTable.Ordering != DocumentStatus::Invoice4Paym_RU &&
            CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend)
        {
            salesTotals = SalesTotals::construct(_salesParmTable.salesTable(),
                                                 _salesParmUpdate.SpecQty,
                                                 _salesParmUpdate.SumBy,
                                                 _salesParmUpdate.ParmId,
                                                 _salesParmUpdate.SumSalesId,
                                                 _salesParmTable.Ordering);
            salesTotals.calc();
            creditNote = salesTotals.totalAmount() < 0;
        }
        else
        {
            creditNote = false;
        }

        if (_newId || ! newId)
        {
            newId = this.getNewSessionId();
        }

        switch (_salesParmTable.Ordering)
        {
            case DocumentStatus::Invoice,
                 DocumentStatus::PackingSlip,
                 DocumentStatus::Facture_RU         :
                switch (_printout)
                {
                    case CustInvoicePrintoutType_RU::TORG_12 :
                        reportType = creditNote                               ?
                                     OffReportType_RU::SalesInvoiceCreditNote :
                                     OffReportType_RU::SalesInvoice;
                        break;
                    case CustInvoicePrintoutType_RU::M_15    :
                        reportType = OffReportType_RU::SalesInvoiceM15;
                        break;
                }

                secondaryReportType = creditNote ?
                                OffReportType_RU::CustFactureCreditNote :
                                OffReportType_RU::CustFacture;

                if (_salesParmTable.OffSessionId_RU && _salesParmTable.OffReportType_RU == reportType)
                    return reportType;

                if (_salesParmTable.OffReportType_RU != OffReportType_RU::General
                    && _salesParmTable.OffReportType_RU != OffReportType_RU::CashSlip)
                {
                    OfficialsTrans_RU::deleteWithoutUpdate(newId);
                }

                switch (_printout)
                {
                    case CustInvoicePrintoutType_RU::TORG_12 :
                        if (reportType == OffReportType_RU::SalesInvoiceCreditNote)
                        {
                            this.initSalesInvoiceCreditNote(reportType, _salesParmTable.InvoiceAccount, _salesParmTable);
                        }
                        else // Original sales invoice
                        {
                            this.initSalesInvoice(_salesParmTable.InvoiceAccount, _salesParmTable);
                        }
                        break;
                    case CustInvoicePrintoutType_RU::M_15    :
                        this.initSalesInvoiceM15(reportType, _salesParmTable);
                        break;
                }

                if (_includeFacture)
                {
                    InventOwner_RU  inventOwner;

                    if (_salesParmTable.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent &&
                        _salesParmTable.InventOwnerId_RU &&
                        InventOwner_RU::find(_salesParmTable.InventOwnerId_RU).AccountType == InventOwnerAccountType_RU::Vend)
                    {
                        inventOwner = InventOwner_RU::find(_salesParmTable.InventOwnerId_RU);
                    }
                    if (inventOwner)
                    {
                        this.insertOrUpdate(OffPosition_RU::Responsible,
                                            OffReportType_RU::VendFacture,
                                            inventOwner.AccountNum,
                                            OffTableAll_RU::Table,
                                            true,
                                            secondaryReportType,
                                            true,
                                            true);
                    }
                    else
                    {
                        this.insertOrUpdate(OffPosition_RU::Responsible, secondaryReportType, _salesParmTable.InvoiceAccount);
                    }
                }
                break;

            case DocumentStatus::Invoice4Paym_RU    :
                reportType = OffReportType_RU::SalesInvoice4Paym;
                this.insertOrUpdate(OffPosition_RU::Director,
                                    OffReportType_RU::General,
                                    "",
                                    OffTableAll_RU::All,
                                    true,
                                    OffReportType_RU::SalesInvoice4Paym,
                                    true,
                                    false);
                this.insertOrUpdate(OffPosition_RU::Accountant,
                                    OffReportType_RU::General,
                                    "",
                                    OffTableAll_RU::All,
                                    true,
                                    OffReportType_RU::SalesInvoice4Paym,
                                    true,
                                    false);
                this.insertOrUpdate(OffPosition_RU::Filler, OffReportType_RU::SalesInvoice4Paym, _salesParmTable.InvoiceAccount);
                this.insertOrUpdate(OffPosition_RU::Responsible,
                                    OffReportType_RU::SalesInvoice4Paym,
                                    _salesParmTable.InvoiceAccount,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true);
                break;
        }

        this.flushOfficialsTransInsertList();

        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableTransfer</Name>
				<Source><![CDATA[
    public void initTableTransfer(InventTransferParmTable _inventTransferParmTable, InventTransferTable _inventTransferTable = null)
    {
        InventTransferTable inventTransferTable;
        CustVendAC          custVendId;

        void initStandardIssueTo()
        {
            this.insertOrUpdate(OffPosition_RU::Director,
                                OffReportType_RU::General,
                                "",
                                OffTableAll_RU::All,
                                true,
                                OffReportType_RU::TransferInvoiceM15,
                                true,
                                false);
            this.insertOrUpdate(OffPosition_RU::Accountant,
                                OffReportType_RU::General,
                                "",
                                OffTableAll_RU::All,
                                true,
                                OffReportType_RU::TransferInvoiceM15,
                                true,
                                false);

            this.insertOrUpdate(OffPosition_RU::Supplier,
                                OffReportType_RU::TransferInvoiceM15,
                                inventTransferTable.partyCustTable_RU().InvoiceAccount,
                                OffTableAll_RU::All,
                                false,
                                OffReportType_RU::General,
                                true,
                                true,
                                inventTransferTable.InventLocationIdFrom);

            this.insertOrUpdate(OffPosition_RU::Acceptor,
                                OffReportType_RU::TransferInvoiceM15,
                                "",
                                OffTableAll_RU::All);

            this.insertOrUpdate(OffPosition_RU::TransResp,
                                OffReportType_RU::TransferInvoiceM15,
                                '',
                                OffTableAll_RU::All,
                                false,
                                OffReportType_RU::General,
                                true,
                                false,
                                inventTransferTable.InventLocationIdFrom);

            skipOfficialsInit = true;
            this.insertOrUpdate(OffPosition_RU::Taker,
                                OffReportType_RU::TransferInvoiceM15,
                                "",
                                OffTableAll_RU::All);
        }

        if (! OfficialsServ_RU::isFeatureEnabled() || _inventTransferParmTable.OffSessionId_RU)
        {
            return;
        }

        newId = this.getNewSessionId();

        inventTransferTable = prmisDefault(_inventTransferTable)                             ?
                              InventTransferTable::find(_inventTransferParmTable.TransferId) :
                              _inventTransferTable;

        switch (_inventTransferParmTable.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                initStandardIssueTo();
                skipOfficialsInit = false;
                custVendId = InventLocation::find(inventTransferTable.InventLocationIdTo).VendAccount;
                if (custVendId)
                {
                    this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                        OffReportType_RU::PurchInvoice,
                                        custVendId,
                                        OffTableAll_RU::Table,
                                        true,
                                        OffReportType_RU::TransferInvoiceM15,
                                        true,
                                        true,
                                        '',
                                        1,
                                        OffPosition_RU::TransRespCust,
                                        ModuleCustVend::Vend);
                }
                else
                {
                    this.insertOrUpdate(OffPosition_RU::TransResp,
                                        OffReportType_RU::TransferInvoiceM15,
                                        '',
                                        OffTableAll_RU::All,
                                        false,
                                        OffReportType_RU::General,
                                        true,
                                        false,
                                        inventTransferTable.InventLocationIdTo,
                                        1,
                                        OffPosition_RU::TransRespCust);
                }
                break;

            case InventTransferType_RU::IssueToParty:
                initStandardIssueTo();
                skipOfficialsInit = false;
                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    inventTransferTable.partyVendTable_RU().AccountNum,
                                    OffTableAll_RU::Table,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCust,
                                    ModuleCustVend::Vend);
                custVendId = inventTransferTable.partyVendTable_RU().AccountNum;
                break;

            case InventTransferType_RU::ReceiptFromParty:
                this.insertOrUpdate(OffPosition_RU::Director,
                                    OffReportType_RU::PurchInvoice,
                                    inventTransferTable.PartyAccountNum_RU,
                                    OffTableAll_RU::All,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    false);
                this.insertOrUpdate(OffPosition_RU::Accountant,
                                    OffReportType_RU::PurchInvoice,
                                    inventTransferTable.PartyAccountNum_RU,
                                    OffTableAll_RU::All,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    false);
                this.insertOrUpdate(OffPosition_RU::Supplier,
                                    OffReportType_RU::PurchInvoice,
                                    _inventTransferParmTable.PartyAccountNum_RU,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    false,
                                    '',
                                    1,
                                    OffPosition_RU::Supplier,
                                    ModuleCustVend::Vend);

                this.insertOrUpdate(OffPosition_RU::Acceptor,
                                    OffReportType_RU::TransferInvoiceM15,
                                    "",
                                    OffTableAll_RU::All);
                this.insertOrUpdate(OffPosition_RU::Taker,
                                    OffReportType_RU::TransferInvoiceM15,
                                    inventTransferTable.partyCustTable_RU().InvoiceAccount,
                                    OffTableAll_RU::Table,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    true,
                                    inventTransferTable.InventLocationIdTo);

                this.insertOrUpdate(OffPosition_RU::TransResp,
                                    OffReportType_RU::TransferInvoiceM15,
                                    '',
                                    OffTableAll_RU::All,
                                    false,
                                    OffReportType_RU::General,
                                    true,
                                    false,
                                    inventTransferTable.InventLocationIdTo,
                                    1,
                                    OffPosition_RU::TransRespCust);

                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    inventTransferTable.partyVendTable_RU().AccountNum,
                                    OffTableAll_RU::Table,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransResp,
                                    ModuleCustVend::Vend);

                 custVendId = inventTransferTable.partyVendTable_RU().AccountNum;

                break;
        }

        this.initTableTransfer_CarrierType(_inventTransferParmTable, _inventTransferTable, custVendId);
        

        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableTransfer_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes carrier part of transfer table.
    /// </summary>
    /// <param name = "_inventTransferParmTable">Cursor of <c>InventTransferParmTable</c> table.</param>
    /// <param name = "_inventTransferTable">Cursor of <c>InventTransferTable</c> table.</param>
    /// <param name = "_custVendId">Value of <c>CustVendAC</c> enumeration.</param>
    protected void initTableTransfer_CarrierType(
        InventTransferParmTable _inventTransferParmTable,
        InventTransferTable _inventTransferTable,
        CustVendAC _custVendId)
    {
        switch (_inventTransferParmTable.CarrierType_RU)
        {
            case CarrierType_W::Customer :
                this.insertOrUpdate(OffPosition_RU::TransRespCust,
                                    OffReportType_RU::SalesInvoice,
                                    _inventTransferParmTable.CarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier);
                break;

            case CarrierType_W::Vendor :
                this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                    OffReportType_RU::PurchInvoice,
                                    _inventTransferParmTable.CarrierCode_RU,
                                    OffTableAll_RU::Table,
                                    true,
                                    OffReportType_RU::TransferInvoiceM15,
                                    true,
                                    true,
                                    '',
                                    1,
                                    OffPosition_RU::TransRespCarrier,
                                    ModuleCustVend::Vend);
                break;
            case CarrierType_W::InvoiceAccount :
                if (_custVendId)
                {
                    this.insertOrUpdate(OffPosition_RU::TransRespVend,
                                        OffReportType_RU::PurchInvoice,
                                        _custVendId,
                                        OffTableAll_RU::Table,
                                        true,
                                        OffReportType_RU::TransferInvoiceM15,
                                        true,
                                        true,
                                        '',
                                        1,
                                        OffPosition_RU::TransRespCarrier,
                                        ModuleCustVend::Vend);
                }
                else
                {
                    this.insertOrUpdate(OffPosition_RU::TransResp,
                                        OffReportType_RU::TransferInvoiceM15,
                                        '',
                                        OffTableAll_RU::All,
                                        false,
                                        OffReportType_RU::General,
                                        true,
                                        false,
                                        _inventTransferTable.InventLocationIdTo,
                                        1,
                                        OffPosition_RU::TransRespCarrier);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializing references record from <c>WMSShipment</c> record.
    /// </summary>
    /// <param name="_wmsShipment">
    ///     Source <c>WMSShipment</c> record.
    /// </param>
    public void initWMSShipment(WMSShipment _wmsShipment)
    {
        SalesTable              salesTable;
        SalesParmTable          salesParmTable;
        InventTransferTable     inventTransferTable;
        InventTransferParmTable inventTransferParmTable;
        WMSOrderTrans           wmsOrderTrans;

        if (! OfficialsServ_RU::isFeatureEnabled())
        {
            return;
        }

        newId = this.getNewSessionId();

        select firstonly InventTransType, InventTransRefId, ShipmentId, ExpeditionStatus from wmsOrderTrans
            where wmsOrderTrans.ShipmentId       == _wmsShipment.ShipmentId
               && wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::Cancelled;

        switch (wmsOrderTrans.InventTransType)
        {
            case InventTransType::Sales :
                salesTable = SalesTable::find(wmsOrderTrans.InventTransRefId);
                salesParmTable.SalesId           = salesTable.SalesId;
                salesParmTable.bolCarrierType_RU = _wmsShipment.CarrierType_RU;
                salesParmTable.bolCarrierCode_RU = _wmsShipment.CarrierCode_RU;
                this.initSalesInvoice(salesTable.InvoiceAccount, salesParmTable);
                break;

            case InventTransType::TransferOrderShip :
                inventTransferTable = InventTransferTable::find(wmsOrderTrans.InventTransRefId);
                inventTransferParmTable.TransferId          = inventTransferTable.TransferId;
                inventTransferParmTable.TransferType_RU     = inventTransferTable.TransferType_RU;
                inventTransferParmTable.PartyAccountNum_RU  = inventTransferTable.PartyAccountNum_RU;
                inventTransferParmTable.CarrierType_RU      = _wmsShipment.CarrierType_RU;
                inventTransferParmTable.CarrierCode_RU      = _wmsShipment.CarrierCode_RU;
                this.initTableTransfer(inventTransferParmTable);
                break;

            default :
                inventTransferParmTable.TransferType_RU     = InventTransferType_RU::Standard;
                inventTransferParmTable.CarrierType_RU      = _wmsShipment.CarrierType_RU;
                inventTransferParmTable.CarrierCode_RU      = _wmsShipment.CarrierCode_RU;
                inventTransferTable.InventLocationIdFrom    = _wmsShipment.InventLocationId;
                inventTransferTable.InventLocationIdTo      = _wmsShipment.InventLocationId;
                this.initTableTransfer(inventTransferParmTable, inventTransferTable);
                break;
        }
        this.flushOfficialsTransInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates official transaction into record insert list.
    /// </summary>
    /// <param name = "_position">Official position type.</param>
    /// <param name = "_reportType">Official report type.</param>
    /// <param name = "_relation">Customer/vendor relation.</param>
    /// <param name = "_code">Account code.</param>
    /// <param name = "_forceType">Force other report type.</param>
    /// <param name = "_otherType">Other official report type.</param>
    /// <param name = "_updatePosition">Update position.</param>
    /// <param name = "_updateCustVend">Update cust vend relation.</param>
    /// <param name = "_inventLocation">Inventory location id.</param>
    /// <param name = "_officialsQty">The quantity of records to be inserted.</param>
    /// <param name = "_otherPosition">Other official position type.</param>
    /// <param name = "_module">The type of the module.</param>
    public void insertOrUpdate(OffPosition_RU      _position,
                                OffReportType_RU    _reportType,
                                OffCustVendRel_RU   _relation,
                                OffTableAll_RU      _code           = OffTableAll_RU::Table,
                                boolean             _forceType      = false,                    //use _otherType in officialsTrans
                                OffReportType_RU    _otherType      = OffReportType_RU::General,//used when _reportType is General
                                boolean             _updatePosition = false,
                                boolean             _updateCustVend = false,
                                InventLocationId    _inventLocation = "",
                                int                 _officialsQty   = 1,
                                OffPosition_RU      _otherPosition  = OffPosition_RU::Director,
                                ModuleCustVend      _module         = ModuleCustVend::Cust)
    {
        int counter = 1;
        OfficialsTrans_RU  officialsTrans;

        ttsbegin;

        officialsTrans.OffSessionId     = newId;
        officialsTrans.Position         = prmisDefault(_otherPosition) ? _position : _otherPosition;
        officialsTrans.Name             = "";
        officialsTrans.Title            = "";
        if (_forceType)
        {
            officialsTrans.ReportType   = _otherType;
        }
        else
        {
            officialsTrans.ReportType   = _reportType;
        }
        officialsTrans.CustVendCode     = _code;
        officialsTrans.CustVendRelation = _relation;
        officialsTrans.CustVendModule   = _module;

        officialsTrans.InvLocation      = _inventLocation;
        officialsTrans.InvRelationType  = _inventLocation ?
                                          OffInvRelationType_AllTable_RU::Table :
                                          OffInvRelationType_AllTable_RU::All;

        OfficialsTable_RU  officials;

        select officials
            order by CustVendCode asc, InvRelationType desc
            where officials.ReportType       == _reportType                             &&
                  officials.Position         == _position                               &&
                ((officials.CustVendCode     == OffTableAll_RU::Table                   &&
                  officials.CustVendRelation == _relation)                              ||
                  officials.CustVendCode     == OffTableAll_RU::All)                    &&
                ((officials.InvRelationType  == OffInvRelationType_AllTable_RU::Table   &&
                  officials.InvLocation      == _inventLocation)                        ||
                  officials.InvRelationType  == OffInvRelationType_AllTable_RU::All);

        if (! officials &&
            ((_position   == OffPosition_RU::Director                  ||
              _position   == OffPosition_RU::Accountant)               &&
             (_reportType != OffReportType_RU::PurchInvoice            &&
              _reportType != OffReportType_RU::SalesInvoiceCreditNote  &&
              _reportType != OffReportType_RU::VendFacture             &&
              _reportType != OffReportType_RU::CustFactureCreditNote   &&
              _reportType != OffReportType_RU::TaxCorrectionFactureVend)))
        {
            select firstonly officials
                where officials.ReportType == OffReportType_RU::General &&
                      officials.Position   == _position;
        }

        while (counter <= _officialsQty)
        {
            if (officials && !skipOfficialsInit)
            {
                officialsTrans.Name                 = officials.Name;
                officialsTrans.Title                = officials.Title;

                if (_updatePosition)
                {
                    officialsTrans.Position = prmisDefault(_otherPosition) ? officials.Position : _otherPosition;
                }
                if (_updateCustVend)
                {
                    officialsTrans.CustVendRelation = officials.CustVendRelation;
                    officialsTrans.CustVendCode     = officials.CustVendCode;
                }
                this.addOfficialsTransInsertList(officialsTrans);

                officialsTrans.Name     = '';
                officialsTrans.Title    = '';

                next officials;
            }
            else
            {
                this.addOfficialsTransInsertList(officialsTrans);
            }

            counter ++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newId</Name>
				<Source><![CDATA[
    public OffSessionId_RU newId(OffSessionId_RU _newId = newId)
    {
        newId = _newId;
        return newId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportType</Name>
				<Source><![CDATA[
    public OffReportType_RU parmReportType(OffReportType_RU _type = reportType)
    {
        reportType  = _type;
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryReportType</Name>
				<Source><![CDATA[
    public OffReportType_RU parmSecondaryReportType(OffReportType_RU _type = secondaryReportType)
    {
        secondaryReportType  = _type;
        return secondaryReportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFeatureEnabledCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears 'Officials feature is enabled' cache.
    /// </summary>
    public static void clearFeatureEnabledCache()
    {
        classfactory.globalObjectCache().remove(CacheScope, OfficialsServ_RU::cacheKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related officials report lines.
    /// </summary>
    /// <param name = "_officialsId">
    /// The officials session ID.
    /// </param>
    /// <param name = "_reportType">
    /// The report type.
    /// </param>
    public static void deleteRelationTrans(
        OffSessionId_RU _officialsId,
        OffReportType_RU _reportType)
    {
        OfficialsTrans_RU  officialsTrans_RU;

        officialsTrans_RU.skipDeleteMethod(true);
        delete_from officialsTrans_RU
            where officialsTrans_RU.OffSessionId    == _officialsId &&
                  officialsTrans_RU.ReportType      == _reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelationTransParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the officials report lines related to <c>PurchParmTable</c> records found by <paramref name="_parmId"/>.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID for the <c>PurchParmTable</c> record.
    /// </param>
    /// <param name="_deletePending">
    /// A boolean value, indicating if records with Pending status should be deleted.
    /// </param>
    public static void deleteRelationTransParm(ParmId _parmId, boolean _deletePending = true)
    {
        OfficialsTrans_RU   officialsTrans_RU;
        PurchParmTable      purchParmTable;

        officialsTrans_RU.skipDeleteMethod(true);
        delete_from officialsTrans_RU
        exists join purchParmTable
            where purchParmTable.ParmId             == _parmId
               && (_deletePending || purchParmTable.VendInvoiceSaveStatus != VendInvoiceSaveStatus::Pending)
               && purchParmTable.ParmJobStatus      != ParmJobStatus::Executed
               && purchParmTable.OffSessionId_RU    == officialsTrans_RU.OffSessionId
               && (purchParmTable.OffReportType_RU  == officialsTrans_RU.ReportType
                || (purchParmTable.Ordering          == DocumentStatus::Facture_RU
                 && (purchParmTable.OffReportType_RU  == OffReportType_RU::PurchInvoice
                  && officialsTrans_RU.ReportType     == OffReportType_RU::VendFacture
                  || officialsTrans_RU.ReportType     == OffReportType_RU::VendFactureCreditNote)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if Officials feature is in use
    /// </summary>
    /// <returns>
    /// True if any Officials setup is made
    /// </returns>
    /// <remarks>
    /// Value is cached. Use OfficialsServ_RU::clearFeatureEnabledCache to clear cache
    /// </remarks>
    public static boolean isFeatureEnabled()
    {
        OfficialsTable_RU       officialsTable;

        SysGlobalObjectCache    cache = classfactory.globalObjectCache();
        container               cachedValue;
        boolean                 isFeatureEnabled;

        cachedValue = cache.find(CacheScope, OfficialsServ_RU::cacheKey());
        if (cachedValue)
        {
            [ isFeatureEnabled ] = cachedValue;
        }
        else
        {
            select firstonly RecId from officialsTable;
            isFeatureEnabled = (officialsTable.RecId != 0);
            cache.insert(CacheScope, OfficialsServ_RU::cacheKey(), [ isFeatureEnabled ]);
        }

        return isFeatureEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    public static void release(Num _num)
    {
        NumberSeq::releaseNumber(CompanyInfo::numRefOffSessionId_RU().NumberSequenceId, _num);
        OfficialsTrans_RU::deleteWithoutUpdate(_num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseOffsessionId</Name>
				<Source><![CDATA[
    public static void releaseOffsessionId(OffSessionId_RU _offsessionId)
    {
        OfficialsTrans_RU officialsTrans;

        delete_from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId;

        NumberSeq::releaseNumber(CompanyInfo::numRefOffSessionId_RU().NumberSequenceId, _offsessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionClone</Name>
				<Source><![CDATA[
    // Makes a clone of session with id _sessionID and returns it's ID
    public static OffSessionId_RU sessionClone(OffSessionId_RU _sessionId)
    {
        OfficialsServ_RU officialsServ = new OfficialsServ_RU();
        OffSessionId_RU   ret = officialsServ.getNewSessionId();
        OfficialsTrans_RU officialsTrans;

        while select officialsTrans where officialsTrans.OffSessionId == _sessionId
        {
            officialsTrans.OffSessionId = ret;
            officialsServ.addOfficialsTransInsertList(officialsTrans);
        }

        officialsServ.flushOfficialsTransInsertList();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionReplace</Name>
				<Source><![CDATA[
    // Replaces _destination with _source
    static OffSessionId_RU sessionReplace(OffSessionId_RU _source, OffSessionId_RU _destination)
    {
        OffSessionId_RU ret;
        if (_source)
        {
            if (_destination)
            {
                OfficialsServ_RU::releaseOffsessionId(_destination);
            }
            ret = OfficialsServ_RU::sessionClone(_source);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has Transfer type.
    /// </summary>
    private void initTransferOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Supplier,
            OffReportType_RU::InventTORG13,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);
        this.insertOrUpdate(
            OffPosition_RU::Taker,
            OffReportType_RU::InventTORG13,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCountCollOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has CountingColl type.
    /// </summary>
    private void initCountCollOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Accountant,
            OffReportType_RU::General,
            '',
            OffTableAll_RU::All,
            true,
            OffReportType_RU::InventINV19,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV19  &&
                  officials.Position   == OffPosition_RU::InCharge;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        officialsTrans.OffSessionId = newId;
        officialsTrans.Position     = OffPosition_RU::InCharge;
        officialsTrans.Name         = '';
        officialsTrans.Title        = '';
        officialsTrans.ReportType   = OffReportType_RU::InventINV19;
        officialsTrans.CustVendCode = OffTableAll_RU::All;

        if (!counter)
        {
            this.addOfficialsTransInsertList(officialsTrans);
            this.addOfficialsTransInsertList(officialsTrans);
        }

        if (counter == 1)
        {
            this.addOfficialsTransInsertList(officialsTrans);

            officials = OfficialsTable_RU::find(OffReportType_RU::InventINV19,
                                                        OffPosition_RU::InCharge);
            if (officials)
            {
                officialsTrans.Position = officials.Position;
                officialsTrans.Name     = officials.Name;
                officialsTrans.Title    = officials.Title;
            }
            this.addOfficialsTransInsertList(officialsTrans);
        }

        if (counter >= 2)
        {
            while select Position, Name, Title from officials
                index AccountIdx
                where officials.ReportType == OffReportType_RU::InventINV19 &&
                      officials.Position   == OffPosition_RU::InCharge
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV19;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCountingListOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has CountingList type.
    /// </summary>
    private void initCountingListOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Chairman,
            OffReportType_RU::InventINV3,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV3 &&
                  officials.Position   == OffPosition_RU::InCharge;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::InCharge;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV3;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV3 &&
                      officials.Position   == OffPosition_RU::InCharge
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV3;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV3 &&
                  officials.Position   == OffPosition_RU::Member;

        counter = any2int(officials.RecId);

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::Member;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV3;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV3 &&
                      officials.Position   == OffPosition_RU::Member
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV3;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCountingListBaileeOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has CountingListBailee type.
    /// </summary>
    private void initCountingListBaileeOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Chairman,
            OffReportType_RU::InventINV5,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV5 &&
                  officials.Position   == OffPosition_RU::InCharge;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::InCharge;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV5;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV5 &&
                      officials.Position   == OffPosition_RU::InCharge
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV5;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV5 &&
                  officials.Position   == OffPosition_RU::Member;

        counter = any2int(officials.RecId);

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::Member;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV5;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV5 &&
                      officials.Position   == OffPosition_RU::Member
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV5;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMReqOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has BOMReq type.
    /// </summary>
    private void initBOMReqOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Requester,
            OffReportType_RU::InventM11,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);
        this.insertOrUpdate(
            OffPosition_RU::Manager,
            OffReportType_RU::InventM11,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);
        this.insertOrUpdate(
            OffPosition_RU::Supplier,
            OffReportType_RU::InventM11,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);
        this.insertOrUpdate(
            OffPosition_RU::Acceptor,
            OffReportType_RU::InventM11,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventM11 &&
                  officials.Position   == OffPosition_RU::InCharge;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::InCharge;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventM11;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }

        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventM11 &&
                      officials.Position   == OffPosition_RU::InCharge
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventM11;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLossOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has Loss type.
    /// </summary>
    private void initLossOfficials()
    {
        this.insertOrUpdate(
            OffPosition_RU::Director,
            OffReportType_RU::General,
            '',
            OffTableAll_RU::All,
            true,
            OffReportType_RU::InventTORG16,
            true);
        this.insertOrUpdate(OffPosition_RU::Chairman,
            OffReportType_RU::InventTORG16,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventTORG16  &&
                  officials.Position   == OffPosition_RU::Member;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        officialsTrans.OffSessionId = newId;
        officialsTrans.Position     = OffPosition_RU::Member;
        officialsTrans.Name         = '';
        officialsTrans.Title        = '';
        officialsTrans.ReportType   = OffReportType_RU::InventTORG16;
        officialsTrans.CustVendCode = OffTableAll_RU::All;

        if (counter < 2)
        {
            this.addOfficialsTransInsertList(officialsTrans);

            if (counter == 1)
            {
                officials = OfficialsTable_RU::find(OffReportType_RU::InventTORG16,
                                                            OffPosition_RU::Member);
                if (officials)
                {
                    officialsTrans.Position = officials.Position;
                    officialsTrans.Name     = officials.Name;
                    officialsTrans.Title    = officials.Title;
                }
            }
            this.addOfficialsTransInsertList(officialsTrans);
        }
        else
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventTORG16 &&
                      officials.Position   == OffPosition_RU::Member
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventTORG16;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventTORG16 &&
                  officials.Position   == OffPosition_RU::InCharge;

        counter = any2int(officials.RecId);

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::InCharge;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventTORG16;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }

        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventTORG16 &&
                      officials.Position   == OffPosition_RU::InCharge
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventTORG16;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCountingListInTransitOfficials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init officials in case of InventJournalReportType_RU has CountingListInTransit type.
    /// </summary>
    private void initCountingListInTransitOfficials()
    {
        this.insertOrUpdate(OffPosition_RU::Chairman,
            OffReportType_RU::InventINV6,
            '',
            OffTableAll_RU::All,
            false,
            OffReportType_RU::General,
            true);

        OfficialsTable_RU officials;

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV6 &&
                  officials.Position   == OffPosition_RU::Controller;

        int counter = any2int(officials.RecId);

        OfficialsTrans_RU officialsTrans;

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::Controller;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV6;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV6 &&
                      officials.Position   == OffPosition_RU::Controller
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV6;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }

        select count(RecId) from officials
            where officials.ReportType == OffReportType_RU::InventINV6 &&
                  officials.Position   == OffPosition_RU::Member;

        counter = any2int(officials.RecId);

        if (counter == 0)
        {
            officialsTrans.OffSessionId = newId;
            officialsTrans.Position     = OffPosition_RU::Member;
            officialsTrans.Name         = '';
            officialsTrans.Title        = '';
            officialsTrans.ReportType   = OffReportType_RU::InventINV6;
            officialsTrans.CustVendCode = OffTableAll_RU::All;

            this.addOfficialsTransInsertList(officialsTrans);
            this.addOfficialsTransInsertList(officialsTrans);
        }
        if (counter >= 1)
        {
            while select Position, Name, Title from officials
                where officials.ReportType == OffReportType_RU::InventINV6 &&
                      officials.Position   == OffPosition_RU::Member
            {
                officialsTrans.OffSessionId = newId;
                officialsTrans.Position     = officials.Position;
                officialsTrans.Name         = officials.Name;
                officialsTrans.Title        = officials.Title;
                officialsTrans.ReportType   = OffReportType_RU::InventINV6;
                officialsTrans.CustVendCode = OffTableAll_RU::All;

                this.addOfficialsTransInsertList(officialsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends initTableInvent method to support user extensions.
    /// </summary>
    /// <exception>
    /// Inventory journal report type is not found.
    /// </exception>
    [Replaceable]
    protected static void initOfficialsExt()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>