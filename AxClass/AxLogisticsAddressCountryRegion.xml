<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxLogisticsAddressCountryRegion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxLogisticsAddressCountryRegion extends AxApplicationBase
{
    LogisticsAddressCountryRegion logisticsAddressCountryRegion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _logisticsAddressCountryRegion = logisticsAddressCountryRegion)
    {
        if (!prmisDefault(_logisticsAddressCountryRegion))
        {
            super(_logisticsAddressCountryRegion);
            logisticsAddressCountryRegion = _logisticsAddressCountryRegion;
        }
        else
        {
            super();
        }

        return logisticsAddressCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty <c>AxLogisticsAddressCountryRegion</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>AxLogisticsAddressCountryRegion</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        LogisticsAddressCountryRegion localLogisticsAddressCountryRegion;
        return localLogisticsAddressCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsAddressCountryRegion</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegion logisticsAddressCountryRegion(LogisticsAddressCountryRegion _logisticsAddressCountryRegion = logisticsAddressCountryRegion)
    {
        if (!prmisDefault(_logisticsAddressCountryRegion))
        {
            this.setCurrentRecordFromExternal(_logisticsAddressCountryRegion);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressUseZipPlus4</Name>
				<Source><![CDATA[
    public LogisticsAddressUseZipPlus4 parmAddressUseZipPlus4(LogisticsAddressUseZipPlus4 _addressUseZipPlus4 = NoYes::No)
    {
        if (!prmisDefault(_addressUseZipPlus4))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, AddressUseZipPlus4), _addressUseZipPlus4);
        }

        return logisticsAddressCountryRegion.AddressUseZipPlus4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddrFormat</Name>
				<Source><![CDATA[
    public LogisticsAddressFormatId parmAddrFormat(LogisticsAddressFormatId _addrFormat = '')
    {
        if (!prmisDefault(_addrFormat))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, AddrFormat), _addrFormat);
        }

        return logisticsAddressCountryRegion.AddrFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBACENCode_BR</Name>
				<Source><![CDATA[
    public BacenCode_BR parmBACENCode_BR(BacenCode_BR _bacenCode_BR = '')
    {
        if (!prmisdefault(_bacenCode_BR))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, BACENCode_BR), _bACENCode_BR);
        }

        return logisticsAddressCountryRegion.BACENCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    public str parmCountryRegionId(str _countryRegionId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_countryRegionId))
        {
            dictField = new DictField(tableNum(LogisticsAddressCountryRegion),fieldNum(LogisticsAddressCountryRegion,CountryRegionId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_countryRegionId,dictField,this.mapPolicy().xMLMapCountryRegion());
                _countryRegionId = this.axLogisticsAddressCountryRegionId(_countryRegionId);
            }
            else
            {
                this.validateInboundString(_countryRegionId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressCountryRegion, CountryRegionId), _countryRegionId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountryRegionId(logisticsAddressCountryRegion.CountryRegionId);
        }
        else
        {
            return logisticsAddressCountryRegion.CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public str parmCurrencyCode(str _currencyCode = '')
    {
        DictField   dictField;
        if (!prmisDefault(_currencyCode))
        {
            dictField = new DictField(tableNum(LogisticsAddressCountryRegion),fieldNum(LogisticsAddressCountryRegion,CurrencyCode));
            this.validateInboundCurrencyString(_currencyCode,dictField);

            if (this.valueMappingInbound())
            {
                _currencyCode = this.axCurrencyCode(_currencyCode);
            }

            this.setField(fieldNum(LogisticsAddressCountryRegion, CurrencyCode), _currencyCode);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCurrencyCode(logisticsAddressCountryRegion.CurrencyCode);
        }
        else
        {
            return logisticsAddressCountryRegion.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsImmutable</Name>
				<Source><![CDATA[
    public IsImmutable parmIsImmutable(IsImmutable _isImmutable = NoYes::No)
    {
        if (!prmisDefault(_isImmutable))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, IsImmutable), _isImmutable);
        }

        return logisticsAddressCountryRegion.IsImmutable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmISOcode</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode parmISOcode(LogisticsAddressCountryRegionISOCode _isOcode = '')
    {
        if (!prmisDefault(_isOcode))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, isOcode), _isOcode);
        }

        return logisticsAddressCountryRegion.isOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRIOR_Facility_ID</Name>
				<Source><![CDATA[
    public MCRIOR_Facility_ID parmMCRIOR_Facility_ID(MCRIOR_Facility_ID _mcrior_Facility_ID = '')
    {
        if (!prmisDefault(_mcrior_Facility_ID))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, mcrior_Facility_ID), _mcrior_Facility_ID);
        }

        return logisticsAddressCountryRegion.mcrior_Facility_ID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOKSMCode_RU</Name>
				<Source><![CDATA[
    public CountryOKSMCode_RU parmOKSMCode_RU(CountryOKSMCode_RU _OKSMCode = '')
    {
        if (!prmisDefault(_OKSMCode))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, OKSMCode_RU), _OKSMCode);
        }

        return logisticsAddressCountryRegion.OKSMCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPayParentCountryRegionId</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionId parmRPayParentCountryRegionId(LogisticsAddressCountryRegionId _parentCountryRegionId = '')
    {
        if (!prmisDefault(_parentCountryRegionId))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, RPayParentCountryRegionId), _parentCountryRegionId);
        }

        return logisticsAddressCountryRegion.RPayParentCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeZone</Name>
				<Source><![CDATA[
    public Timezone parmTimeZone(Timezone _timezone = Timezone::GMTMINUS1200INTERNATIONALDATELINEWEST)
    {
        if (!prmisDefault(_timezone))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, TimeZone), _timezone);
        }

        return logisticsAddressCountryRegion.TimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxLogisticsAddressCountryRegion construct()
    {
        return new AxLogisticsAddressCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLogisticsAddressCountryRegion</Name>
				<Source><![CDATA[
    public static AxLogisticsAddressCountryRegion newLogisticsAddressCountryRegion(LogisticsAddressCountryRegion _logisticsAddressCountryRegion)
    {
        AxLogisticsAddressCountryRegion axLogisticsAddressCountryRegion = AxLogisticsAddressCountryRegion::construct();
        axLogisticsAddressCountryRegion.logisticsAddressCountryRegion(_logisticsAddressCountryRegion);

        return axLogisticsAddressCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemberOfCustomsUnion_RU</Name>
				<Source><![CDATA[
    public MemberOfCustomsUnion_RU parmMemberOfCustomsUnion_RU(MemberOfCustomsUnion_RU _memberOfCustomsUnion_RU = NoYes::No)
    {
        if (!prmisDefault(_memberOfCustomsUnion_RU))
        {
            this.setField(fieldNum(LogisticsAddressCountryRegion, MemberOfCustomsUnion_RU), _memberOfCustomsUnion_RU);
        }

        return logisticsAddressCountryRegion.MemberOfCustomsUnion_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>