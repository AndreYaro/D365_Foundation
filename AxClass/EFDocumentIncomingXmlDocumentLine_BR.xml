<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentIncomingXmlDocumentLine_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible to read an xml fiscal document and retrieves information related to a line
/// </summary>
class EFDocumentIncomingXmlDocumentLine_BR
{
    #EFDocumentXpath_BR

    EFDocReceivedXmlReader_BR           xmlReader;
    EFDocumentIncomingXmlDocLineTax_BR  xmlLineTaxParser;
    int                                 xmlLinePosition;

    private const str FiscalDocumentLineUnitPriceXPath = '/x:nfeProc/x:NFe/x:infNFe/x:det[\%1]/x:prod/x:vUnTrib';
    private const str FiscalDocumentLineQuantityXPath = '/x:nfeProc/x:NFe/x:infNFe/x:det[\%1]/x:prod/x:qTrib';
    private const str FiscalDocumentLineUnitXPath = '/x:nfeProc/x:NFe/x:infNFe/x:det[\%1]/x:prod/x:uTrib';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFiscalDocumentLineUnitPriceXPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the XML path for unit price.
    /// </summary>
    /// <returns>The XPath value for unit price of NFe XML format.</returns>
    public str getFiscalDocumentLineUnitPriceXPath()
    {
        return FiscalDocumentLineUnitPriceXPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentLineQuantityXPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the XML path for quantity.
    /// </summary>
    /// <returns>The XPath value for quantity of NFe XML format.</returns>
    public str getFiscalDocumentLineQuantityXPath()
    {
        return FiscalDocumentLineQuantityXPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentLineUnitXPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the XML path for unit.
    /// </summary>
    /// <returns>The XPath value for line unit of NFe XML format.</returns>
    public str getFiscalDocumentLineUnitXPath()
    {
        return FiscalDocumentLineUnitXPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the additional information of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Additional information from infAdProd tag
    /// </returns>
    public EFDocRecXmlLineAddInf_BR getAdditionalInformation()
    {
        str xpath = strFmt(#FiscalDocumentLineAdditionalInformationXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCfop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item Cfop of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Item Cfop of the fiscal document line
    /// </returns>
    public CFOPId_BR getCfop()
    {
        str xpath = strFmt(#FiscalDocumentLineCfopXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Description of the fiscal document line
    /// </returns>
    public ItemFreeTxt getDescription()
    {
        str xpath = strFmt(#FiscalDocumentLineDescriptionXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount amount of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Discount amount of the fiscal document line
    /// </returns>
    public DiscAmount getDiscount()
    {
        str xpath = strFmt(#FiscalDocumentLineDiscountXPath, xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFciNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item Fci number of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Item Fci Number of the fiscal document line
    /// </returns>
    public FCINumber_BR getFciNumber()
    {
        str xpath = strFmt(#FiscalDocumentLineFciNumberXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gross amount of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Gross amount of the fiscal document line
    /// </returns>
    public Amount getGrossAmount()
    {
        str xpath = strFmt(#FiscalDocumentLineGrossAmountXPath, xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item id of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Item id of the fiscal document line
    /// </returns>
    public ItemId getItemId()
    {
        str xpath = strFmt(#FiscalDocumentLineItemIdXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemTaxFiscalClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item tax fiscal classification of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Item tax fiscal classification of the fiscal document line
    /// </returns>
    public TaxFiscalClassificationName_BR getItemTaxFiscalClassification()
    {
        str xpath = strFmt(#FiscalDocumentLineTaxFiscalClassificationXPath, xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Number of the fiscal document line
    /// </returns>
    public LineNum getLineNumber()
    {
        str xpath = strFmt(#FiscalDocumentLineXPath, xmlLinePosition);
        return str2num(xmlReader.getAttributeValue(xpath, #FiscalDocumentLineNumberAttributeTag));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new instance of the parser object that can get tax information
    /// from a specific line of the received Nf-e.
    /// </summary>
    /// <returns>
    /// Taxes parser for this received XML line
    /// </returns>
    public EFDocumentIncomingXmlDocLineTax_BR getLineTaxes()
    {
        return xmlLineTaxParser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item quantity of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Quantity of the fiscal document line
    /// </returns>
    public UnitQty getQuantity()
    {
        str xpath = strFmt(this.getFiscalDocumentLineQuantityXPath(), xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupFreightAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total markup freight amount of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Total markup freight amount of the fiscal document line
    /// </returns>
    public MarkupAmount getTotalMarkupFreightAmount()
    {
        str xpath = strFmt(#FiscalDocumentLineMarkupTotalFreightAmountXPath, xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupInsuranceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total markup insurance amount of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Total markup insurance amount of the fiscal document line
    /// </returns>
    public MarkupAmount getTotalMarkupInsuranceAmount()
    {
        str xpath = strFmt(#FiscalDocumentLineMarkupTotalInsuranceAmountXPath, xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarkupOthersAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total markup others amount of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Total markup others amount of the fiscal document line
    /// </returns>
    public MarkupAmount getTotalMarkupOthersAmount()
    {
        str xpath = strFmt(#FiscalDocumentLineMarkupOtherAmountXPath, xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxable unit of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Taxable unit of the fiscal document line
    /// </returns>
    public UnitOfMeasureSymbol getUnit()
    {
        str xpath = strFmt(this.getFiscalDocumentLineUnitXPath(), xmlLinePosition);
        return xmlReader.getNodeContent(xpath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit price of the fiscal document line from the xml
    /// </summary>
    /// <returns>
    /// Unit price of the fiscal document line
    /// </returns>
    public PriceCur getUnitPrice()
    {
        str xpath = strFmt(this.getFiscalDocumentLineUnitPriceXPath(), xmlLinePosition);
        return str2num(xmlReader.getNodeContent(xpath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the current class
    /// </summary>
    /// <param name="_xmlDoc">
    /// Xml document that will be parsed to retrieve the values of the lines.
    /// </param>
    /// <param name="_xmlLinePosition">
    /// Line position inside the xml document. The xml document may contain many lines.
    /// </param>
    /// <param name="_xmlLineTaxParser">
    /// Parser used to get the line taxes from the XML
    /// </param>
    protected void new(XmlDocument _xmlDoc, int _xmlLinePosition, EFDocumentIncomingXmlDocLineTax_BR _xmlLineTaxParser)
    {
        xmlLinePosition = _xmlLinePosition;
        xmlReader = new EFDocReceivedXmlReader_BR(_xmlDoc);
        xmlLineTaxParser = _xmlLineTaxParser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the received Nf-e xml line parser object
    /// for a given line number, based on the xml document object
    /// </summary>
    /// <param name="_xmlDoc">
    /// Xml document that will be parsed to retrieve the values of the lines.
    /// </param>
    /// <param name="_xmlLinePosition">
    /// Line position inside the xml document. The xml document may contain many lines.
    /// </param>
    /// <returns>
    /// A new instance of the received Nf-e XML line parser
    /// </returns>
    public static EFDocumentIncomingXmlDocumentLine_BR construct(XmlDocument _xmlDoc, int _xmlLinePosition)
    {
        EFDocumentIncomingXmlDocLineTax_BR xmlLineTaxParser = new EFDocumentIncomingXmlDocLineTax_BR(_xmlDoc, _xmlLinePosition);
        return new EFDocumentIncomingXmlDocumentLine_BR(_xmlDoc, _xmlLinePosition, xmlLineTaxParser);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>