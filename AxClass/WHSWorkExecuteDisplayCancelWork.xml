<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayCancelWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWorkExecuteMode(WHSWorkExecuteMode::CancelWork)]
public class WHSWorkExecuteDisplayCancelWork extends WhsWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container ret;
        container con = _con;

        // Get the pass out of the form state container
        pass = WhsrfPassthrough::create(conPeek(con, #PassthroughInfo));

        // Check if an error was displayed to the user and remove it from the container if that is the case.
        if (this.hasError(con))
        {
            con = conDel(con, #ControlsStart, 1);
        }

        switch (step)
        {
            case 0: // Get work ID to be canceled
                ret	= this.buildGetWorkIdToBeCanceled(ret);
                step = 1;
                break;

            case 1: // Cancel work
                boolean hasErrors, complete;

                [hasErrors, complete, ret, con] = this.processUserInput(con);

                if (hasErrors)
                {
                    return con;
                }

                if (complete)
                {
                    UnknownNoYes	cancelWork;
                    WHSWorkId		workId		= pass.lookupStr(#WorkId);

                    if (WHSWorkTable::isWorkLinkedToActiveDemandWork(workId))
                    {
                        WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));

                        if (menuItem.CancelReplenishmentWorkWithDependentWork == NoYes::Yes)
                        {
                            cancelWork = UnknownNoYes::Yes;
                        }
                        else
                        {
                            throw error("@WAX:WHSCancelReplenishmentWorkWithDependentWorkNotAllowed");
                        }
                    }

                    using (var skipUnregistering = WHSPOCancelWorkSkipUnregisteringContext::construct())
                    {
                        boolean isWorkCanceled = WHSWorkTable::cancelWorkValidateWorkNotAssignedToActiveCluster(workId, cancelWork);

                        if (isWorkCanceled)
                        {
                            ret = this.addErrorLabel(conNull(), "@WAX:WorkHasBeenCanceled", WHSRFColorText::Success);

                            if (WHSPOCancelWorkSkipUnregisteringContext::wasUnregisteringSkipped())
                            {
                                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCancelWorkControls::CancelWorkUnregTransWarningLabel, "@SYS342305", 
                                    1, strFmt("@WAX:CancelWorkNoTransactionsToUnregisterWarning", workId), extendedTypeNum(Description), '', 0, false)];
                            }
                        }
                        else
                        {
                            ret = this.addErrorLabelFromInfolog(conNull(), infologLine(), WHSRFColorText::Error);
                        }
                    }

                    pass.remove(#WorkId);

                    ret = this.buildGetWorkIdToBeCanceled(ret);
                }
                break;

            default:
                break;
        }

        // Persist the step, mode and pass changes
        ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::CancelWork, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetWorkIdToBeCanceled</Name>
				<Source><![CDATA[
    private container buildGetWorkIdToBeCanceled(container _ret = conNull())
    {
        container ret = _ret;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCancelWorkControls::CancelWorkInstructionsLabel, "@WAX:SelectWorkIdToBeCanceled", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, '', extendedTypeNum(WHSWorkId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>