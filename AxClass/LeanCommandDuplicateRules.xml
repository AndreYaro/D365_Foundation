<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandDuplicateRules</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCommandDuplicateRules extends LeanCommandBase
{
    Plan            oldPlan;
    Plan            newPlan;
    Map             mapChangedPlanPlanActivities;
    Map             mapchangedKanbanFlowActivityRelations;
    Map             mapChangedRulesCoverage;
    Map             mapChangedFlows;
    Map             mapChangedRules;
    Map             mapChangedRulesFixed;
    Map             mapChangedRulesEvent;
    Map             mapChangedRulesVariable;
    TransDateTime   dateTimeNow;
    systemSequence  systemSequence;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateTimeNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current date and time used for the duplication.
    /// </summary>
    /// <returns>
    ///    A <c>TransDateTime</c> date time value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDateTime dateTimeNow()
    {
        if (!dateTimeNow)
        {
            dateTimeNow = DateTimeUtil::getSystemDateTime();
        }

        return dateTimeNow;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates all the flows that have source or destination elements in the changed elements map.
    /// </summary>
    /// <param name="_changedPlanPlanActivities">
    ///    The map with source and destination production flow elements that changed.
    /// </param>
    /// <returns>
    ///    The map with old record IDs mapped to new record IDs of the duplicated flows.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateKanbanFlow(Map _changedPlanPlanActivities)
    {
        Map                 result = new Map(typeName2Type(extendedTypeStr(RecId)),Types::Record);
        KanbanFlow          kanbanFlow;
        KanbanFlow          newKanbanFlow;
        PlanPlanActivity    firstPlanPlanActivity;
        PlanPlanActivity    lastPlanPlanActivity;
        PlanPlanActivity    planPlanActivity;

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanFlow));
        systemSequence.suspendRecIds(tableNum(KanbanFlow));

        while select kanbanFlow
            join RecId, Plan from firstPlanPlanActivity
                where kanbanFlow.FirstPlanPlanActivity == firstPlanPlanActivity.RecId
            join RecId, Plan from lastPlanPlanActivity
                where kanbanFlow.LastPlanPlanActivity == lastPlanPlanActivity.RecId
            exists join planPlanActivity
                where (planPlanActivity.RecId == firstPlanPlanActivity.RecId
                   ||  planPlanActivity.RecId == lastPlanPlanActivity.RecId)
                   && planPlanActivity.Plan == oldPlan.RecId
        {
            if (!result.exists(kanbanFlow.RecId))
            {
                newKanbanFlow.data(kanbanFlow);

                if (firstPlanPlanActivity.Plan == oldPlan.RecId)
                {
                    newKanbanFlow.initFromFirstPlanPlanActivity(_changedPlanPlanActivities.lookup(kanbanFlow.FirstPlanPlanActivity));
                }

                if (lastPlanPlanActivity.Plan == oldPlan.RecId)
                {
                    newKanbanFlow.initFromLastPlanPlanActivity(_changedPlanPlanActivities.lookup(kanbanFlow.LastPlanPlanActivity));
                }

                newKanbanFlow.RecId = systemSequence.reserveValues(1,tableNum(KanbanFlow));
                recordInsertList.add(newKanbanFlow);

                result.insert(kanbanFlow.RecId, newKanbanFlow);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanFlow));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanFlowActivityRelationship</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected Map duplicateKanbanFlowActivityRelationship(Map _changedFlows)
    {
        Map                                 result = new Map(typeName2Type(extendedTypeStr(RecId)),typeName2Type(extendedTypeStr(RecId)));
        KanbanFlowActivityRelationship      kanbanFlowActivityRelationship;
        KanbanFlowActivityRelationship      newKanbanFlowActivityRelationship;
        MapEnumerator                       me = _changedFlows.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanFlowActivityRelationship));
        systemSequence.suspendRecIds(tableNum(KanbanFlowActivityRelationship));

        while (me.moveNext())
        {
            KanbanFlowRefRecId kanbanFlowRecId = me.currentKey();
            while select kanbanFlowActivityRelationship
                where kanbanFlowActivityRelationship.KanbanFlow == kanbanFlowRecId
            {
                LeanProdFlowPlanActivityRelation oldLeanProdFlowPlanActivityRelation = LeanProdFlowPlanActivityRelation::find(kanbanFlowActivityRelationship.LeanProdFlowActivityRelation);

                LeanProductionFlow leanProductionFlow = LeanProductionFlow::findPlan(newPlan.RecId);
                if (!LeanProdFlowPlanActivityRelation::findPlanActivityRelationship(oldLeanProdFlowPlanActivityRelation.PlanActivityRelationship,leanProductionFlow.RecId))
                {
                    LeanProdFlowPlanActivityRelation::duplicateForNewProductionFlow(oldLeanProdFlowPlanActivityRelation.ProductionFlow, leanProductionFlow.RecId);
                }

                LeanProdFlowPlanActivityRelation newLeanProdFlowPlanActivityRelation = LeanProdFlowPlanActivityRelation::findPlanActivityRelationship(oldLeanProdFlowPlanActivityRelation.PlanActivityRelationship,
                                                                                                                                                         LeanProductionFlow::findPlan(newPlan.RecId).RecId);

                newKanbanFlowActivityRelationship.data(kanbanFlowActivityRelationship);
                KanbanFlow newKanbanFlow = _changedFlows.lookup(kanbanFlowRecId);
                newKanbanFlowActivityRelationship.KanbanFlow = newKanbanFlow.RecId;
                newKanbanFlowActivityRelationship.LeanProdFlowActivityRelation = newLeanProdFlowPlanActivityRelation.RecId;

                newKanbanFlowActivityRelationship.RecId = systemSequence.reserveValues(1,tableNum(KanbanFlowActivityRelationship));
                recordInsertList.add(newKanbanFlowActivityRelationship);

                result.insert(kanbanFlowActivityRelationship.RecId, newKanbanFlowActivityRelationship.RecId);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanFlowActivityRelationship));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateKanbanRule(Map _changedFlows)
    {
        Map                     result = new Map(typeName2Type(extendedTypeStr(RecId)),typeName2Type(extendedTypeStr(RecId)));
        KanbanRule              kanbanRule;
        KanbanRule              newKanbanRule;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        TransDateTime           now = this.dateTimeNow();
        MapEnumerator           me = _changedFlows.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanRule));
        systemSequence.suspendRecIds(tableNum(KanbanRule));

        while (me.moveNext())
        {
            KanbanFlowRefRecId kanbanFlowRecId = me.currentKey();
            // we don't want to duplicate expired rules. for inactive plans (in the future)
            // we have to duplicate all available rules
            while select forupdate kanbanRule
                where kanbanRule.KanbanFlow == kanbanFlowRecId
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanRule.RecId
                       && (oldPlan.ValidFrom >= now
                       ||  !leanCoverageKanbanRule.ValidTo
                       ||  leanCoverageKanbanRule.ValidTo >= now)
            {
                newKanbanRule.data(kanbanRule);
                newKanbanRule.RuleId = KanbanRule::numberSeqKanbanRuleId().num();
                newKanbanRule.initFromKanbanFlow(_changedFlows.lookup(kanbanFlowRecId));

                newKanbanRule.RecId = systemSequence.reserveValues(1,tableNum(KanbanRule));
                recordInsertList.add(newKanbanRule);

                kanbanRule.ReplacingKanbanRule = newKanbanRule.RecId;
                kanbanRule.update();

                result.insert(kanbanRule.RecId, newKanbanRule.RecId);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanRule));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanRuleEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateKanbanRuleEvent(Map _changedRulesVariable)
    {
        Map                     result = new Map(typeName2Type(extendedTypeStr(RecId)),typeName2Type(extendedTypeStr(RecId)));
        KanbanRuleEvent         kanbanRuleEvent;
        KanbanRuleEvent         newKanbanRuleEvent;
        KanbanRuleVariable      kanbanRuleVariable;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        TransDateTime           now = this.dateTimeNow();
        MapEnumerator           me = _changedRulesVariable.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanRuleEvent));
        systemSequence.suspendRecIds(tableNum(KanbanRuleEvent));

        while (me.moveNext())
        {
            KanbanRuleRefRecId kanbanRuleVariableRecId = me.currentKey();
            while select kanbanRuleEvent
                where kanbanRuleEvent.ParentRecId == kanbanRuleVariableRecId
                exists join kanbanRuleVariable
                    where kanbanRuleVariable.RecId == kanbanRuleEvent.ParentRecId
                        exists join leanCoverageKanbanRule
                            where leanCoverageKanbanRule.KanbanRule == kanbanRuleVariable.ParentRecId
                               && (oldPlan.ValidFrom >= now
                               || !leanCoverageKanbanRule.ValidTo
                               || leanCoverageKanbanRule.ValidTo >= now)
            {
                newKanbanRuleEvent.data(kanbanRuleEvent);
                newKanbanRuleEvent.ParentRecId = _changedRulesVariable.lookup(kanbanRuleVariableRecId);
                newKanbanRuleEvent.RecId       = systemSequence.reserveValues(1,tableNum(KanbanRuleEvent));
                recordInsertList.add(newKanbanRuleEvent);

                result.insert(kanbanRuleEvent.RecId, newKanbanRuleEvent.RecId);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanRuleEvent));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanRuleFixed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateKanbanRuleFixed(Map _changedRules)
    {
        Map                     result = new Map(typeName2Type(extendedTypeStr(RecId)),typeName2Type(extendedTypeStr(RecId)));
        KanbanRuleFixed         kanbanRuleFixed;
        KanbanRuleFixed         newKanbanRuleFixed;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        TransDateTime           now = this.dateTimeNow();
        MapEnumerator           me = _changedRules.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanRuleFixed));
        systemSequence.suspendRecIds(tableNum(KanbanRuleFixed));

        while (me.moveNext())
        {
            KanbanRuleRefRecId kanbanRuleRecId = me.currentKey();
            while select kanbanRuleFixed
                where kanbanRuleFixed.ParentRecId == kanbanRuleRecId
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanRuleFixed.ParentRecId
                       && (oldPlan.ValidFrom >= now
                       ||  !leanCoverageKanbanRule.ValidTo
                       ||  leanCoverageKanbanRule.ValidTo >= now)
            {
                newKanbanRuleFixed.data(kanbanRuleFixed);
                newKanbanRuleFixed.ParentRecId = _changedRules.lookup(kanbanRuleRecId);
                newKanbanRuleFixed.RecId       = systemSequence.reserveValues(1,tableNum(KanbanRuleFixed));
                recordInsertList.add(newKanbanRuleFixed);

                result.insert(kanbanRuleFixed.RecId, newKanbanRuleFixed.RecId);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanRuleFixed));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanbanRuleVariable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateKanbanRuleVariable(Map _changedRules)
    {
        Map                     result = new Map(typeName2Type(extendedTypeStr(RecId)),typeName2Type(extendedTypeStr(RecId)));
        KanbanRuleVariable      kanbanRuleVariable;
        KanbanRuleVariable      newKanbanRuleVariable;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        TransDateTime           now = this.dateTimeNow();
        MapEnumerator           me = _changedRules.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(KanbanRuleVariable));
        systemSequence.suspendRecIds(tableNum(KanbanRuleVariable));

        while (me.moveNext())
        {
            KanbanRuleRefRecId kanbanRuleRecId = me.currentKey();
            while select kanbanRuleVariable
                where kanbanRuleVariable.ParentRecId == kanbanRuleRecId
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanRuleVariable.ParentRecId
                       && (oldPlan.ValidFrom >= now
                       ||  !leanCoverageKanbanRule.ValidTo
                       ||  leanCoverageKanbanRule.ValidTo >= now)
            {
                newKanbanRuleVariable.data(kanbanRuleVariable);
                newKanbanRuleVariable.ParentRecId = _changedRules.lookup(kanbanRuleRecId);
                newKanbanRuleVariable.RecId       = systemSequence.reserveValues(1,tableNum(KanbanRuleVariable));
                recordInsertList.add(newKanbanRuleVariable);

                result.insert(kanbanRuleVariable.RecId, newKanbanRuleVariable.RecId);
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(KanbanRuleVariable));

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>duplicateLeanCoverageKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map duplicateLeanCoverageKanbanRule(Map _changedRules)
    {
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        LeanCoverageKanbanRule  newLeanCoverageKanbanRule;
        TransDateTime           now    = this.dateTimeNow();
        MapEnumerator           me = _changedRules.getEnumerator();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(LeanCoverageKanbanRule));
        systemSequence.suspendRecIds(tableNum(LeanCoverageKanbanRule));

        mapChangedRulesCoverage = new Map(typeName2Type(extendedTypeStr(RecId)), typeName2Type(extendedTypeStr(RecId)));

        while (me.moveNext())
        {
            KanbanRuleRefRecId kanbanRuleRecId = me.currentKey();
            while select forupdate leanCoverageKanbanRule
                where leanCoverageKanbanRule.KanbanRule == kanbanRuleRecId
                    && (oldPlan.ValidFrom >= now
                    || !leanCoverageKanbanRule.ValidTo
                    || leanCoverageKanbanRule.ValidTo >= now)
            {
                newLeanCoverageKanbanRule.data(leanCoverageKanbanRule);
                newLeanCoverageKanbanRule.KanbanRule = _changedRules.lookup(leanCoverageKanbanRule.KanbanRule);
                newLeanCoverageKanbanRule.ValidFrom = newPlan.ValidFrom;

                if (   leanCoverageKanbanRule.ValidTo
                    && leanCoverageKanbanRule.ValidTo != DateTimeUtil::maxValue())
                {
                    int64 timeDelta = DateTimeUtil::getDifference(leanCoverageKanbanRule.ValidFrom,
                                                                  leanCoverageKanbanRule.ValidTo);
                    timeDelta = timeDelta < 0 ? -timeDelta : timeDelta;

                    // calculated the offset validTo for the rule
                    newLeanCoverageKanbanRule.ValidTo = DateTimeUtil::addSeconds(newLeanCoverageKanbanRule.ValidFrom, timeDelta);
                    if (newPlan.ValidTo)
                    {
                        newLeanCoverageKanbanRule.ValidTo = min(newLeanCoverageKanbanRule.ValidTo, newPlan.ValidTo);
                    }
                }
                else
                {
                    newLeanCoverageKanbanRule.ValidTo = newPlan.ValidTo;
                }

                // we do overlapping and general date validation here, but we ignore the set of checks
                // which are executed in case the rule is part of a chain (the point is that here an update
                // of the rule's validity period happens, and that is otherwise prohibited in the complete coverage validation)
                if (!newLeanCoverageKanbanRule.validateData(LeanRuleData::newKanbanRuleRecId(newLeanCoverageKanbanRule.KanbanRule), true))
                {
                    break;
                }

                newLeanCoverageKanbanRule.RecId       = systemSequence.reserveValues(1,tableNum(LeanCoverageKanbanRule));
                recordInsertList.add(newLeanCoverageKanbanRule);

                mapChangedRulesCoverage.insert(leanCoverageKanbanRule.RecId, newLeanCoverageKanbanRule.RecId);

                // Close the previous rule validity
                if (leanCoverageKanbanRule.ValidTo > DateTimeUtil::minValue())
                {
                    leanCoverageKanbanRule.ValidTo =  DateTimeUtil::addSeconds(newLeanCoverageKanbanRule.ValidFrom, -1);
                }
                leanCoverageKanbanRule.update();
            }
        }

        recordInsertList.insertDatabase();
        systemSequence.removeRecIdSuspension(tableNum(LeanCoverageKanbanRule));

        return mapChangedRulesCoverage;
    }
]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates all kanban rules and related entities.
    /// </summary>
    /// <returns>
    ///    true if the operation was successful; otherwise, false, and an error message is displayed.
    /// </returns>
    protected boolean execute()
    {
        boolean result = true;

        if (oldPlan.legalEntity() != CompanyInfo::current())
        {
            result = checkFailed(strFmt("@SYS332728",oldPlan.VersionNum));
        }

        if (result)
        {
            ttsbegin;
            //Flows might be expensive to generate, so we are duplicating all kanban flows,
            //no matter if there are any rules to be duplicated that would use now the duplicated flows.
            //Any new future defined rules may reuse the existing duplicated kanban flows.
            mapChangedFlows                       = this.duplicateKanbanFlow(mapChangedPlanPlanActivities);

            mapchangedKanbanFlowActivityRelations = this.duplicateKanbanFlowActivityRelationship(mapChangedFlows);
            mapChangedRules = this.duplicateKanbanRule(mapChangedFlows);
            mapChangedRulesFixed = this.duplicateKanbanRuleFixed(mapChangedRules);
            mapChangedRulesVariable = this.duplicateKanbanRuleVariable(mapChangedRules);
            mapChangedRulesEvent = this.duplicateKanbanRuleEvent(mapChangedRulesVariable);
            Map mapChangedLeanCoverageKanbanRule = this.duplicateLeanCoverageKanbanRule(mapChangedRules);

            int allElementsCount = mapChangedRules.elements()
                                   + mapChangedRulesFixed.elements()
                                   + mapChangedRulesVariable.elements()
                                   + mapChangedRulesEvent.elements()
                                   + mapChangedLeanCoverageKanbanRule.elements();

            //validate result
            //valid if either none of the "rule" maps have elements or at least
            //rule, coverage and fixed or variable have one or more elements
            //every rule has either a fixed or variable record
            //every rule has a coverage record
            //a variable rule may have an event record (if not scheduled)
            result =    result
                     && (allElementsCount == 0
                     ||  allElementsCount >= 3)
                     && mapChangedRules.elements() == mapChangedRulesFixed.elements() + mapChangedRulesVariable.elements()
                     && mapChangedRules.elements() == mapChangedLeanCoverageKanbanRule.elements()
                     && mapChangedRulesEvent.elements() <= mapChangedRulesVariable.elements();

            if (!result)
            {
                throw error("@SYS309380");
            }

            ttscommit;
        }

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        systemSequence = new systemSequence();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmChangedFlows</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedFlows(Map _mapChangedFlows = mapChangedFlows)
    {
        mapChangedFlows = _mapChangedFlows;
        return mapChangedFlows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedKanbanFlowActivityRelations</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedKanbanFlowActivityRelations(Map _mapChangedKanbanFlowActivityRelations = mapChangedKanbanFlowActivityRelations)
    {
        mapChangedKanbanFlowActivityRelations = _mapChangedKanbanFlowActivityRelations;

        return mapChangedKanbanFlowActivityRelations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedPlanPlanActivities</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedPlanPlanActivities(Map _mapChangedPlanPlanActivities = mapChangedPlanPlanActivities)
    {
        mapChangedPlanPlanActivities = _mapChangedPlanPlanActivities;
        return mapChangedPlanPlanActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedRules</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedRules(Map _mapChangedRules = mapChangedRules)
    {
        mapChangedRules = _mapChangedRules;
        return mapChangedRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedRulesCoverage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedRulesCoverage(Map _mapChangedRulesCoverage = mapChangedRulesCoverage)
    {
        mapChangedRulesCoverage = _mapChangedRulesCoverage;
        return mapChangedRulesCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedRulesEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedRulesEvent(Map _mapChangedRulesEvent = mapChangedRulesEvent)
    {
        mapChangedRulesEvent = _mapChangedRulesEvent;
        return mapChangedRulesEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedRulesFixed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedRulesFixed(Map _mapChangedRulesFixed = mapChangedRulesFixed)
    {
        mapChangedRulesFixed = _mapChangedRulesFixed;
        return mapChangedRulesFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedRulesVariable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmChangedRulesVariable(Map _mapChangedRulesVariable = mapChangedRulesVariable)
    {
        mapChangedRulesVariable = _mapChangedRulesVariable;
        return mapChangedRulesVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanNew</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan parmPlanNew(Plan _newPlan = newPlan)
    {
        newPlan = _newPlan;
        return newPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanOld</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan parmPlanOld(Plan _oldPlan = oldPlan)
    {
        oldPlan = _oldPlan;
        return oldPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandDuplicateRules newStandard(
        Plan _oldPlan,
        Plan _newPlan,
        Map _changedPlanPlanActivities)
    {
        LeanCommandDuplicateRules leanCommandDuplicateRules = new LeanCommandDuplicateRules();
        leanCommandDuplicateRules.parmPlanOld(_oldPlan);
        leanCommandDuplicateRules.parmPlanNew(_newPlan);
        leanCommandDuplicateRules.parmChangedPlanPlanActivities(_changedPlanPlanActivities);

        return leanCommandDuplicateRules;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
