<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimAxFormAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimAxFormAdapter</c> class is the desktop form adapter for the <c>InventDim</c>
///    framework.
/// </summary>
/// <remarks>
///    This class adapts a desktop form to be manipulated by the <c>InventDim</c> framework.
/// </remarks>
public class InventDimAxFormAdapter implements InventDimFormInterface
{
    FormRun formObject;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>args</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>Args</c> object associated with the underlying form.
    /// </summary>
    /// <returns>
    ///    <c>An Args</c> instance.
    /// </returns>
    Args args()
    {
        return formObject.args();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data source at the specified index.
    /// </summary>
    /// <param name="dataSourceIndex">
    ///    The index of the data source.
    /// </param>
    /// <returns>
    ///    <c>A </c><see cref="T:FormDataSource" /> instance.
    /// </returns>
    FormDataSource dataSource(int dataSourceIndex)
    {
        return formObject.dataSource(dataSourceIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of data sources in the form.
    /// </summary>
    /// <returns>
    ///    The number of data sources in the form.
    /// </returns>
    int dataSourceCount()
    {
        return formObject.dataSourceCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the underlying form object.
    /// </summary>
    /// <returns>
    ///    <c>An Object</c> instance.
    /// </returns>
    /// <remarks>
    ///    Callers should use this object only to call a custom method which may be defined for a specific
    ///    form, and only after checking that the method exists by using the <c>hasMethod</c> method.
    /// </remarks>
    Object formObject()
    {
        return formObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the underlying form implements the specified method.
    /// </summary>
    /// <param name="methodName">
    ///    The name of the method.
    /// </param>
    /// <returns>
    ///    true if the underlying form implements the method; otherwise, false.
    /// </returns>
    boolean hasMethod(IdentifierName methodName)
    {
        return Global::formHasMethod(formObject, methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Locks the form.
    /// </summary>
    void lock()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the underlying form.
    /// </summary>
    /// <returns>
    ///    The name of the underlying form.
    /// </returns>
    public IdentifierName name()
    {
        return formObject.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormObject</Name>
				<Source><![CDATA[
    FormRun parmFormObject(FormRun _formObject = formObject)
    {
        formObject = _formObject;
        return formObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the size of the underlying form.
    /// </summary>
    void resetSize()
    {
        formObject.resetSize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unlocks the form.
    /// </summary>
    void unLock()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimAxFormAdapter construct()
    {
        return new InventDimAxFormAdapter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:InventDimAxFormAdapter" />.
    /// </summary>
    /// <param name="_formObject">
    ///    The underlying <c>FormRun</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <see cref="T:InventDimAxFormAdapter" />.
    /// </returns>
    public static InventDimAxFormAdapter newFromForm(FormRun _formObject)
    {
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::construct();

        adapter.parmFormObject(_formObject);
        return adapter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>