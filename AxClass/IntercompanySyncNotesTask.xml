<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanySyncNotesTask</c> class handles the synchronization of documents between intercompany orders and intercompany order lines.
/// </summary>
/// <remarks>
///    The <c>synchronizeCommon</c> method of this class must be overridden.
/// </remarks>
class IntercompanySyncNotesTask
{
    CompanyId   refCompanyId;
    tableId     refTableId;
    recId       refRecId;
    recId       fromRecId;
    recId       docuRefRecId;
    DocuRef     docuRefBeingWritten;
    boolean     isInitialSync;

    private TradeInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsInitialSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method indicates whether intercompany synchronization is called from intercompany synchronization of orders/lines, 
    /// or from actual attachment creation.
    /// </summary>
    /// <returns>
    /// true, if class is being called from intercompany synchronization of orders/lines; otherwise false.
    /// </returns>
    public boolean parmIsInitialSync(boolean _isInitialSync = isInitialSync)
    {
        if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled())
        {
            isInitialSync = _isInitialSync;
        }

        return isInitialSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove any document references for the corresponding record.
    /// </summary>
    /// <param name="_common">
    /// A referenced table to remove any document references to.
    /// </param>
    /// <param name="_fromRecId">
    /// The referenced record that is being removed.
    /// </param>
    protected void deleteDocuRef(Common _common, recId _fromRecId)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().syncNotesDeleteDocuRef(_common, _fromRecId))
        {
            DocuRef     docuRefDel;

            // It's possible the referenced table isn't the base table
            TableId baseTableId = DocuRef::GetRootTableID(_common.TableId);

            ttsbegin;
            while select forupdate docuRefDel
                  index hint RefIdx
                  where docuRefDel.RefCompanyId == _common.DataAreaId
                  &&    docuRefDel.RefTableId   == baseTableId
                  &&    docuRefDel.RefRecId     == _common.RecId
                // performance optimization based on the assumption that the matching records are always kept in sync and have the same createdDateTime
                // this is enforced in writeDocuRef method
                  &&    (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || docuRefDel.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
            {
                if (this.canDeleteDocuRef(docuRefDel))
                {
                    docuRefDel.delete(_fromRecId);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocuRefExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is any document references for the corresponding record exists.
    /// </summary>
    /// <param name="_common">
    /// A referenced table to check is any document references exists.
    /// </param>
    /// <param name="_fromRecId">
    /// The referenced record that is being removed.
    /// </param>
    /// <returns>
    /// true, if there is at least one record; otherwise false.
    /// </returns>
    protected boolean deleteDocuRefExists(Common _common, recId _fromRecId)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().syncNotesSeleteDocuRefExists(_common, _fromRecId))
        {
            boolean     ret;
            DocuRef     docuRefDel;

            // It's possible the referenced table isn't the base table
            TableId baseTableId = DocuRef::GetRootTableID(_common.TableId);

            while select forupdate docuRefDel
                  index hint RefIdx
                  where docuRefDel.RefCompanyId == _common.DataAreaId
                  &&    docuRefDel.RefTableId   == baseTableId
                  &&    docuRefDel.RefRecId     == _common.RecId
                // performance optimization based on the assumption that the matching records are always kept in sync and have the same createdDateTime
                // this is enforced in writeDocuRef method
                &&    (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || docuRefDel.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
            {
                if (this.canDeleteDocuRef(docuRefDel))
                {
                    ret = true;
                    break;
                }
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCreatedDateTimeOfDocuRefBeingWritten</Name>
				<Source><![CDATA[
    protected boolean shouldUseCreatedDateTimeOfDocuRefBeingWritten()
    {
        // this should be overwritten by child classes that react to single update events and handle it properly
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreatedDocu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method indicates whether a record of <c>DocuRef</c> table is being created or some other action is performed on it, such as delete or update.
    /// </summary>
    /// <returns>
    /// true, if docu is being created; otherwise false.
    /// </returns>
    public boolean isCreatedDocu()
    {
        return this.parmDocRefRecId() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocRefRecId</Name>
				<Source><![CDATA[
    public RecId parmDocRefRecId(RecId _docuRefRecId = docuRefRecId)
    {
        docuRefRecId = _docuRefRecId;
        return docuRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromRecId</Name>
				<Source><![CDATA[
    recId parmFromRecId(recId _fromRecId = fromRecId)
    {
        fromRecId = _fromRecId;

        return fromRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefCompanyId</Name>
				<Source><![CDATA[
    CompanyId parmRefCompanyId(CompanyId _refCompanyId = refCompanyId)
    {
        refCompanyId = _refCompanyId;

        return refCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    recId parmRefRecId(recId _refRecId = refRecId)
    {
        refRecId = _refRecId;

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    tableId parmRefTableId(tableId _refTableId = refTableId)
    {
        refTableId = _refTableId;

        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        ttsbegin;
        this.synchronizeCommon();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    protected void synchronizeCommon()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add document references for the corresponding record.
    /// </summary>
    /// <param name="_refCommon">
    /// A referenced table to add document references to.
    /// </param>
    /// <param name="_fromDocuRef">
    /// The document reference.
    /// </param>
    /// <param name="_fromRecId">
    /// The referenced record to add document references to.
    /// </param>
    /// <returns>
    /// The newly created document reference.
    /// </returns>
    protected DocuRef writeDocuRef(Common     _refCommon,
                                   DocuRef    _fromDocuRef,
                                   recId      _fromRecId)
    {
        DocuRef docuRefIC;

        docuRefIC = null;
        docuRefIC = _fromDocuRef.data();
        docuRefIC.RefCompanyId           = _refCommon.DataAreaId;
        docuRefIC.RefTableId             = _refCommon.TableId;
        docuRefIC.RefRecId               = _refCommon.RecId;
        docuRefIC.DocumentId             = newGuid();
        docuRefIC.DefaultAttachment 	 = NoYes::No;

        new OverwriteSystemfieldsPermission().assert();
        docuRefIC.overwriteSystemfields(true);
        docuRefIC.(fieldnum(DocuRef,createddatetime)) = _fromDocuRef.createdDateTime;
        docuRefIC.insert(_fromRecId);
        CodeAccessPermission::revertAssert();

        return docuRefIC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteDocuRef</Name>
				<Source><![CDATA[
    protected boolean canWriteDocuRef(DocuRef _fromDocuRef)
    {
        return this.canUpdateDocuRef(_fromDocuRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteDocuRef</Name>
				<Source><![CDATA[
    protected boolean canDeleteDocuRef(DocuRef _docuRefDel)
    {
        return this.canUpdateDocuRef(_docuRefDel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateDocuRef</Name>
				<Source><![CDATA[
    protected boolean canUpdateDocuRef(DocuRef _docuRef)
    {
        return _docuRef.docuType().TypeGroup == DocuTypeGroup::Note;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanySyncNotesTask construct()
    {
        return new IntercompanySyncNotesTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommon</Name>
				<Source><![CDATA[
    public static IntercompanySyncNotesTask newCommon(Common _common, RecId _fromRecId = 0, boolean _isCreatedDocu = false)
    {
        IntercompanySyncNotesTask   intercompanySyncNotesTask;
        DocuRef                     refDocuRef;
        CompanyId                   refCompanyId;
        TableId                     refTableId;
        RecId                       refRecId;

        switch (_common.TableId)
        {
            case(tableNum(DocuRef)):
                refDocuRef = _common;
                refCompanyId = refDocuRef.RefCompanyId;
                refRecId     = refDocuRef.RefRecId;

                // Attachments reference the base table in cases where table inheritance is used
                refTableId = DocuRef::GetLeafTableID(refDocuRef.RefTableId, refRecId);
                break;

            default:
                refCompanyId =
                               _common.company()
                               ;
                refTableId   = _common.TableId;
                refRecId     = _common.RecId;
                break;
        }

        switch (refTableId)
        {
            case(tableNum(PurchLine) ) :
                intercompanySyncNotesTask = IntercompanyPurchLineSyncNotesTask::construct();
                break;
            case(tableNum(PurchTable)) :
                intercompanySyncNotesTask = IntercompanyPurchTableSyncNotesTask::construct();
                break;
            case(tableNum(SalesLine) ) :
                intercompanySyncNotesTask = IntercompanySalesLineSyncNotesTask::construct();
                break;
            case(tableNum(SalesTable)) :
                intercompanySyncNotesTask = IntercompanySalesTableSyncNotesTask::construct();
                break;
            case(tableNum(AgreementLine)):
            case(tableNum(AgreementLineVolumeCommitment)):
            case(tableNum(AgreementLineQuantityCommitment)):
                intercompanySyncNotesTask = IntercompanyAgreementLineSyncNotesTask::construct();
                break;
            case(tableNum(SalesAgreementHeader)):
                intercompanySyncNotesTask = IntercompanySalesAgreementSyncNotesTask::construct();
                break;
            case(tableNum(PurchAgreementHeader)):
                intercompanySyncNotesTask = IntercompanyPurchAgreementSyncNotesTask::construct();
                break;
            default:
                intercompanySyncNotesTask = IntercompanySyncNotesTask::construct();
        }
        intercompanySyncNotesTask.parmFromRecId   (_fromRecId);
        intercompanySyncNotesTask.parmRefCompanyId(refCompanyId);
        intercompanySyncNotesTask.parmRefTableId  (refTableId);
        intercompanySyncNotesTask.parmRefRecId    (refRecId);

        if (_isCreatedDocu)
        {
            intercompanySyncNotesTask.parmDocRefRecId(_common.RecId);
        }

        if (_common.TableId == tableNum(DocuRef))
        {
            intercompanySyncNotesTask.docuRefBeingWritten = _common;
        }

        return intercompanySyncNotesTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnPostInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        IntercompanySyncNotesTask::synchronize(_docuRef, _interCompanyFromRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnUpdate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnPostUpdate))]
    static void DocuRefOnUpdate(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        IntercompanySyncNotesTask::synchronize(_docuRef, _interCompanyFromRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnDelete</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnPostDelete))]
    static void DocuRefOnDelete(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        IntercompanySyncNotesTask::synchronize(_docuRef, _interCompanyFromRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    public static void synchronize(Common _common, RecId _fromRecId = 0, boolean _isCreatedDocu = false)
    {
        IntercompanySyncNotesTask   intercompanySyncNotesTask;

        intercompanySyncNotesTask = IntercompanySyncNotesTask::newCommon(_common,_fromRecId, _isCreatedDocu);

        intercompanySyncNotesTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal TradeInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TradeInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }
        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>