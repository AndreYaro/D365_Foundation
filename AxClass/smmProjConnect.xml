<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmProjConnect</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmProjConnect
{
    ProjId  projId;
    boolean xferDocs;

    Common  common;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXferDocs</Name>
				<Source><![CDATA[
    public boolean parmXferDocs(boolean _xferDocs = xferDocs)
    {
        xferDocs = _xferDocs;

        return xferDocs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project field ID.
    /// </summary>
    /// <returns>
    /// The field ID
    /// </returns>
    public fieldId projFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs to create the documents.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates the status.
    /// </returns>
    public boolean run()
    {
        if (projId && this.projFieldId())
        {
            ttsbegin;

            common.selectForUpdate(true);
            common.(this.projFieldId()) = projId;
            common.update();

            this.transferDocuments();

            ttscommit;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer any associated documents.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates the status.
    /// </returns>
    private boolean transferDocuments()
    {
        DocuRef docuRef;
        DocuRef docuRefProj = null;

        if (!this.parmXferDocs())
        {
            return true;
        }

        if (projId && common)
        {
            // Retrieve the base table reference for documents
            TableId baseTableId = DocuRef::GetRootTableID(common.TableId);

            while select docuRef
                where docuRef.RefCompanyId == curext()       &&
                      docuRef.RefTableId   == baseTableId    &&
                      docuRef.RefRecId     == common.RecId
            {
                // Create another reference to the same document
                docuRefProj.initValue();
                docuRefProj.ValueRecId      = docuRef.ValueRecId;
                docuRefProj.Name            = docuRef.Name;
                docuRefProj.TypeId          = docuRef.TypeId;
                docuRefProj.Notes           = docuRef.Notes;
                docuRefProj.RefCompanyId    = docuRef.RefCompanyId;
                docuRefProj.Restriction     = docuRef.Restriction;
                docuRefProj.ContactPersonId = docuRef.ContactPersonId;
                docuRefProj.Party           = docuRef.Party;
                docuRefProj.Author          = docuRef.Author;
                docuRefProj.SmmEMailEntryID = docuRef.SmmEMailEntryID;
                docuRefProj.SmmEMailStoreID = docuRef.SmmEMailStoreID;
                docuRefProj.RefTableId      = tableNum(ProjTable);
                docuRefProj.RefRecId        = ProjTable::find(projId).RecId;
                docuRefProj.insert();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an object.
    /// </summary>
    /// <param name="_common">
    /// A common table.
    /// </param>
    /// <returns>
    /// The object that is constructed.
    /// </returns>
    public static smmProjConnect construct(Common _common)
    {
        smmProjConnect projConnect;

        switch (_common.TableId)
        {
            case tableNum(CaseDetail) :
            case tableNum(CaseDetailBase) :
                projConnect = new smmProjConnect_Case();
                break;

            default :
                projConnect = new smmProjConnect();
                break;
        }

        if (projConnect.projFieldId())
        {
            projConnect.parmCommon(_common);
            projConnect.parmProjId(_common.(projConnect.projFieldId()));
        }

        return projConnect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>