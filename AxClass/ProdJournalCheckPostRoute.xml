<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCheckPostRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCheckPostRoute extends ProdJournalCheckPost implements BatchRetryable
{
    RecordSortedList            cacheProdRoute;
    RecordSortedList            cacheProdJournalTableProd;
    WrkCtrScheduler_Prod        wrkCtrScheduler;
    ProdReportedGood            lastGoodQty;
    boolean                     burden;
    boolean                     hasPostedRAF;
    boolean                     isRouteCardPosting;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean                 ok                  = true;
        ProdJournalRoute        prodJournalRoute    = _journalTransData.journalTrans();

        setPrefix(fieldLabelValue(prodJournalRoute.TableId, fieldNum(ProdJournalRoute,ProdId), prodJournalRoute.ProdId));
        setPrefix(fieldLabelValue(prodJournalRoute.TableId, fieldNum(ProdJournalRoute,OprNum), prodJournalRoute.OprNum));

        ok = super(_journalTransData) && ok;

        ProdJobType prodJobType = this.getProdJobType(prodJournalRoute.JobType);

        if (prodJournalRoute.Cancelled)
        {
            ok = prodJobType.checkJournalWIPLedgerAccounts(prodJournalRoute) && ok;
            return ok;
        }

        ok = prodJournalRoute.checkInventSiteDimension()                    && ok;

        if (!prodJobType.checkJournalJobActivation(prodJournalRoute))
        {
            return false;
        }

        ok = prodJobType.checkJournalOprNum(prodJournalRoute)               && ok;
        ok = prodJobType.checkJournalJobId(prodJournalRoute)                && ok;
        ok = prodJobType.checkJournalCategoryQty(prodJournalRoute)          && ok;
        ok = prodJobType.checkJournalCategoryHours(prodJournalRoute)        && ok;
        ok = prodJobType.checkJournalPayrollCategoryQty(prodJournalRoute)   && ok;
        ok = prodJobType.checkJournalPayrollCategoryHours(prodJournalRoute) && ok;
        ok = prodJobType.checkJournalEmployee(prodJournalRoute)             && ok;
        ok = prodJobType.checkJournalWrkCtrId(prodJournalRoute)             && ok;
        ok = prodJobType.checkJournalOprId(prodJournalRoute)                && ok;
        ok = prodJobType.checkJournalNumOfGood(prodJournalRoute)            && ok;
        ok = prodJobType.checkJournalNumOfError(prodJournalRoute)           && ok;
        ok = prodJobType.checkJournalHours(prodJournalRoute)                && ok;
        ok = prodJobType.checkJournalWIPLedgerAccounts(prodJournalRoute)    && ok;

        if (prodJournalRoute.isProjMethodConsumed())
        {
            ProdJournalRouteProj prodJournalRouteProjHour = prodJournalRoute.prodJournalRouteProj(ProdRouteTransType::Time);
            ProdJournalRouteProj prodJournalRouteProjQty = prodJournalRoute.prodJournalRouteProj(ProdRouteTransType::Qty);

            ok = prodJobType.checkProjTrans(prodJournalRoute, prodJournalRouteProjHour) && ok;
            ok = prodJobType.checkProjTrans(prodJournalRoute, prodJournalRouteProjQty)  && ok;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the realized start date of the specified job.
    /// </summary>
    /// <param name="_jobId">
    /// The job ID of the job from which to retrieve the realized start date.
    /// </param>
    /// <returns>
    /// The start date of the specified job.
    /// </returns>
    private TransDate getStartDate(JmgJobId _jobId)
    {
        JmgTermReg jmgTermReg;

        // Find first start of the job
        select firstonly RegDateTime from jmgTermReg
            order by RegDateTime asc
            where jmgTermReg.JobId == _jobId &&
                jmgTermReg.RegType == JmgTermRegType::JobStart;

        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgTermReg.RegDateTime, DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedRAF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a report as finished journal was posted.
    /// </summary>
    /// <returns>
    /// true if a report as finished journal was posted; otherwise, false.
    /// </returns>
    public boolean hasPostedRAF()
    {
        return hasPostedRAF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCacheProdJournalTableProd</Name>
				<Source><![CDATA[
    RecordSortedList initCacheProdJournalTableProd()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(ProdJournalTable));

        recordSortedList.sortOrder(fieldNum(ProdJournalTable,JournalId));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCacheProdRoute</Name>
				<Source><![CDATA[
    RecordSortedList initCacheProdRoute()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(ProdRoute));

        recordSortedList.sortOrder(fieldNum(ProdRoute,ProdId),fieldNum(ProdRoute,OprNum));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckExistJournalRelease_RU</Name>
				<Source><![CDATA[
    public NoYes mustCheckExistJournalRelease_RU()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRealCalcProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the production calculation transaction should be updated.
    /// </summary>
    /// <returns>
    /// true if the production calculation transaction should be updated; otherwise, false.
    /// </returns>
    public boolean mustUpdateRealCalcProduction()
    {
        // Posting of Burden route card journals should cause the calculation transactions to be updated
        return burden || super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRouteCardPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets if current posting is route card posting.
    /// </summary>
    /// <param name="_isRouteCardPosting">route card posting flag</param>
    /// <returns>returns flag</returns>
    public boolean parmIsRouteCardPosting(boolean _isRouteCardPosting = isRouteCardPosting)
    {
        isRouteCardPosting = _isRouteCardPosting;
        return isRouteCardPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        wrkCtrScheduler =  WrkCtrScheduler_Prod::newCheckLockingTTSLevel(false);
        wrkCtrScheduler.parmCheckForProdLocked(false);

        hasPostedRAF = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the burden parameter that specifies where burden calculations should be performed.
    /// </summary>
    /// <param name="_burden">
    /// true to compute burden cost; otherwise, false.
    /// </param>
    public void parmBurden(boolean _burden = false)
    {
        burden = _burden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrScheduler</Name>
				<Source><![CDATA[
    public WrkCtrScheduler_Prod parmWrkCtrScheduler(WrkCtrScheduler_Prod _wrkCtrScheduler = wrkCtrScheduler)
    {
        wrkCtrScheduler = _wrkCtrScheduler;

        return wrkCtrScheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdJournalTableProd</Name>
				<Source><![CDATA[
    void postProdJournalTableProd()
    {
        ProdJournalTable    prodJournalTableProd;

        if (   cacheProdJournalTableProd
            && cacheProdJournalTableProd.len())
        {
            setPrefix("@SYS69509");

            if (cacheProdJournalTableProd.first(prodJournalTableProd))
            {
                do
                {
                    try
                    {
                        this.createQualityOrderBeforePostRAF(prodJournalTableProd.JournalId);

                        ttsbegin;

                        ProdJournalCheckPostProd prodJournalCheckPostProd = ProdJournalCheckPostProd::newPostJournal(prodJournalTableProd.JournalId, this.parmShowInfoResult());
                        prodJournalCheckPostProd.runOperation();

                        ttscommit;
                        
                        ttsbegin;

                        prodJournalCheckPostProd.createPutWork();

                        ttscommit;

                    }
                    catch (Exception::Error)
                    {
                        exceptionTextFallThrough();
                        // next journal
                    }
                }
                while (cacheProdJournalTableProd.next(prodJournalTableProd));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    void postTransLedger(
        JournalTransData    _journalTransData,
        LedgerVoucher       _ledgerVoucher)
    {
        ProdJournalRouteProj        prodJournalRouteProjHour;
        ProdJournalRouteProj        prodJournalRouteProjQty;

        ProdJournalId               prodJournalIdProd;

        ProdJournalTable            prodJournalTableBOM;
        ProdRouteTrans              prodRouteTrans;

        ProdRoute                   prodRouteSecondary;
        CostAmount                  costAmount;

        ProdJournalTable prodJournalTableRoute = journalTableData.journalTable();
        ProdJournalRoute prodJournalRoute = _journalTransData.journalTrans();

        if (prodJournalRoute.isProjMethodConsumed())
        {
            prodJournalRouteProjHour = prodJournalRoute.prodJournalRouteProj(ProdRouteTransType::Time);
            prodJournalRouteProjQty  = prodJournalRoute.prodJournalRouteProj(ProdRouteTransType::Qty);
        }

        ProdJobType prodJobType = this.getProdJobType(prodJournalRoute.JobType);

        setPrefix(fieldLabelValue(prodJournalRoute.TableId, fieldNum(ProdJournalRoute, ProdId), prodJournalRoute.ProdId));
        setPrefix(fieldLabelValue(prodJournalRoute.TableId, fieldNum(ProdJournalRoute, OprNum), prodJournalRoute.OprNum));

        ProdTable prodTable = prodJournalRoute.prodTable(true);

        super(_journalTransData, _ledgerVoucher);

        this.initProdRouteTrans(prodRouteTrans, prodJournalTableRoute, prodJournalRoute);

        ProdRoute prodRoute = prodJournalRoute.prodRoute(true);

        if (prodJournalRoute.Hours)
        {
            prodRouteTrans.initFromProdJournalRouteHour(prodJournalRoute);
            prodRouteTrans.CategoryId   = prodJournalRoute.CategoryHoursId;
            prodRouteTrans.Amount       = prodJobType.costEstimateHours(prodRoute.routeGroup()) ? prodJobType.calcAmount(prodRouteTrans) : 0;

            costAmount += this.updateCosts(prodJobType, _ledgerVoucher, prodRouteTrans, prodTable, prodJournalRoute, prodJournalRouteProjHour);
        }

        if (   prodJournalRoute.QtyGood
            || prodJournalRoute.QtyError)
        {
            prodRouteTrans.initFromProdJournalRouteQty(prodJournalRoute);
            prodRouteTrans.CategoryId   = prodJournalRoute.CategoryQtyId;
            prodRouteTrans.Amount       = prodJobType.costEstimateQty(prodRoute.routeGroup()) ? prodJobType.calcAmount(prodRouteTrans) : 0;

            costAmount += this.updateCosts(prodJobType, _ledgerVoucher, prodRouteTrans, prodTable, prodJournalRoute, prodJournalRouteProjQty);

            // Add costs from secondary operations if they have a qty catagory defined
            if (    prodJournalRoute.OprPriority == RouteOprPriority::Primary
                    && prodJournalRoute.Cancelled == NoYes::No
                    && (prodJournalRoute.QtyGood    != 0
                        ||  prodJournalRoute.QtyError   != 0))
            {
                while select prodRouteSecondary
                    where prodRouteSecondary.ProdId         == prodJournalRoute.ProdId
                          && prodRouteSecondary.OprNum      == prodJournalRoute.OprNum
                          && prodRouteSecondary.OprPriority != RouteOprPriority::Primary
                          && prodRouteSecondary.QtyCategoryId
                {
                    ProdRouteJob secondaryProdRouteJob = ProdRouteJob::findJobType(prodRouteSecondary.ProdId, prodRouteSecondary.OprNum, prodRouteSecondary.OprPriority, prodJobType.routeJobType());
                    prodRouteTrans.initFromProdRoute(prodRouteSecondary);
                    prodRouteTrans.JobId        = secondaryProdRouteJob.JobId;
                    if (secondaryProdRouteJob)
                    {
                        prodRouteTrans.initFromWrkCtrId(secondaryProdRouteJob.WrkCtrId);
                    }
                    else
                    {
                        prodRouteTrans.initFromWrkCtrId(prodRouteSecondary.getResource().WrkCtrId);
                    }
                    prodRouteTrans.CategoryId   = prodRouteSecondary.QtyCategoryId;
                    prodRouteTrans.QtyPrice     = RouteCostCategory::find(prodRouteSecondary.QtyCategoryId).costPrice(prodTable.inventDim().InventSiteId);
                    prodRouteTrans.Amount       = prodJobType.costEstimateQty(prodRouteSecondary.routeGroup()) ? prodJobType.calcAmount(prodRouteTrans) : 0;

                    costAmount += this.updateCosts(prodJobType, _ledgerVoucher, prodRouteTrans, prodTable, prodJournalRoute, prodJournalRouteProjQty, prodRouteTrans.ProjTransId);
                }
            }
        }

        // Update prodRoute

        prodRoute.OprStartedUp = NoYes::Yes;

        InventQualityManagementCreateHandler::createRouteOprReportFinishedBeforeSingle(prodRoute, prodRoute.orig().OprStartedUp);

        if (prodJournalRoute.JobType != RouteJobType::Burden)
        {
            if (   prodJournalRoute.ExecutedPct
                && prodJournalRoute.OprPriority == RouteOprPriority::Primary)
            {
                prodJobType.addRouteExecutedPct(prodRoute,prodJournalRoute.ExecutedPct);
            }

            prodRoute.doUpdate();
        }

        this.reportFinishedJob(prodJournalRoute);
        if (prodJournalRoute.OprFinished)
        {
            this.reportOperationAndJobAsFinished(prodJournalRoute, prodRoute);
        }

        if (   prodJournalRoute.ProdReportFinished
            && (prodJournalRoute.QtyError
            ||  prodJournalRoute.QtyGood))
        {
            ProdJournalCreateProd prodJournalCreate = ProdJournalCreateProd::newCheckPostRoute(prodJournalRoute,prodJournalIdProd);
            prodJournalCreate.runOperation();

            ProdJournalTable prodJournalTable = prodJournalCreate.usedProdJournalTable();

            prodJournalRoute.ProdReportFinishedJournalId = prodJournalTable.JournalId;
            prodJournalRoute.doUpdate();

            // empty buffer won't be stored into cache to post
            if (prodJournalTable.RecId)
            {
                if (!cacheProdJournalTableProd)
                {
                    cacheProdJournalTableProd = this.initCacheProdJournalTableProd();
                }
                cacheProdJournalTableProd.ins(prodJournalTable,true);
            }

            hasPostedRAF = true;
        }

        if (prodJournalRoute.ProdPickList)
        {
            if (!cacheProdJournalTableBOM)
            {
                cacheProdJournalTableBOM = this.initCacheProdJournalTableBOM();
            }

            if (!prodJournalRoute.ProdPickListJournalId)
            {
                prodJournalTableBOM = ProdJournalTable::findWaitCreateLine(prodJournalRoute.ProdId,ProdJournalType::Picklist,prodJournalRoute.OprFinished,prodJournalRoute.OprNum,true);

                if (   mapJournalDate
                    && prodJournalTableBOM.RecId)
                {
                    while (    prodJournalTableBOM.RecId
                            && mapJournalDate.exists(prodJournalTableBOM.JournalId)
                            && mapJournalDate.lookup(prodJournalTableBOM.JournalId) != prodJournalRoute.TransDate)
                    {
                        next prodJournalTableBOM;
                    }
                }

                if (!prodJournalTableBOM.RecId)
                {
                    prodJournalTableBOM.initWaitCreateLine(prodJournalTableRoute.JournalNameIdPickList,prodJournalRoute.ProdId,ProdJournalType::Picklist,prodJournalRoute.OprFinished,prodJournalRoute.OprNum);
                }

                prodJournalTableBOM.QtyGood     += prodJournalRoute.QtyGood;
                prodJournalTableBOM.QtyError    += prodJournalRoute.QtyError;
                prodJournalTableBOM.PdsCWBatchGood += prodJournalRoute.PdsCWQtyGood;
                prodJournalTableBOM.PdsCWBatchErr  += prodJournalRoute.PdsCWQtyError;

                prodJournalTableBOM.write();

                cacheProdJournalTableBOM.ins(prodJournalTableBOM,true);

                if (!mapJournalDate)
                {
                    mapJournalDate = new Map(typeOf(prodJournalTableBOM.JournalId),typeOf(prodJournalRoute.TransDate));
                }

                if (!mapJournalDate.exists(prodJournalTableBOM.JournalId))
                {
                    mapJournalDate.insert(prodJournalTableBOM.JournalId,prodJournalRoute.TransDate);
                }

                prodJournalRoute.ProdPickListJournalId = prodJournalTableBOM.JournalId;
                prodJournalRoute.doUpdate();
            }
            else
            {
                prodJournalTableBOM = ProdJournalTable::find(prodJournalRoute.ProdPickListJournalId,true);
                if (    prodJournalTableBOM.RecId
                    && !prodJournalTableBOM.Posted)
                {
                    cacheProdJournalTableBOM.ins(prodJournalTableBOM,true);
                }
            }
        }

        prodTable = ProdTable::find(prodJournalRoute.ProdId);

        if (   prodJournalRoute.OprPriority == RouteOprPriority::Primary
            && prodTable.prodParametersDim().JournalUpdateCapacity
            &&  !prodTable.ProdLocked
            && prodTable.SchedStatus
            && !burden
            )
        {
            if (!cacheProdRoute)
            {
                cacheProdRoute = this.initCacheProdRoute();
            }

            cacheProdRoute.ins(ProdRoute::find(prodJournalRoute.ProdId,prodJournalRoute.OprNum,prodJournalRoute.OprPriority),true);
        }

        costAmountPhysical  += costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportOperationAndJobAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports a specific production operation and job as finished.
    /// </summary>
    /// <param name = "_prodJournalRoute">Route card production journal lines.</param>
    /// <param name = "_prodRoute">Production route information.</param>
    protected void reportOperationAndJobAsFinished(ProdJournalRoute _prodJournalRoute, ProdRoute _prodRoute)
    {
        ProdRoute::reportOprAsFinished(_prodJournalRoute.ProdId, _prodJournalRoute.OprNum);
        ProdRouteJob::reportJobAsFinished(_prodJournalRoute.ProdId, _prodJournalRoute.OprNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefix</Name>
				<Source><![CDATA[
    str prefix()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return "@SYS28450" + ' - ' + "@SYS28452";
        }

        return "@SYS5943" + ' - ' + "@SYS28452";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFinishedJob</Name>
				<Source><![CDATA[
    void reportFinishedJob(ProdJournalRoute _prodJournalRoute)
    {
        TransDate    finishDate;

        if (_prodJournalRoute.JobId)
        {
            ProdRouteJob prodRouteJob = _prodJournalRoute.prodRouteJob(true);
            if (!prodRouteJob.checkValid())
            {
                throw error("@SYS18447");
            }

            if (prodRouteJob.JobStatus < ProdJobStatus::Started)
            {
                prodRouteJob.JobStatus = ProdJobStatus::Started;
            }

            if (JmgJobTable::find(prodRouteJob.JobId).jobStatus() == JmgJobStatus::Started)
            {
                prodRouteJob.JobStatus = ProdJobStatus::Stopped;
            }

            if (_prodJournalRoute.JobFinished )
            {
                prodRouteJob.JobStatus= ProdJobStatus::Completed;
            }

            prodRouteJob.ExecutedPct += _prodJournalRoute.ExecutedPct;

            switch (true)
            {
                case    _prodJournalRoute.TransDate < prodRouteJob.RealizedStartDate
                    || !prodRouteJob.RealizedStartDate :
                   prodRouteJob.RealizedStartDate = _prodJournalRoute.TransDate;
                   prodRouteJob.RealizedStartTime = _prodJournalRoute.FromTime;
                   break;
                case   _prodJournalRoute.TransDate == prodRouteJob.RealizedStartDate
                    && ( _prodJournalRoute.FromTime < prodRouteJob.RealizedStartTime
                    ||  !prodRouteJob.RealizedStartTime) :
                   prodRouteJob.RealizedStartTime = _prodJournalRoute.FromTime;
                   break;
            }

            if (_prodJournalRoute.JobFinished)
            {
                TransDate startDate = this.getStartDate(_prodJournalRoute.JobId);

                if (startDate)
                {
                    prodRouteJob.RealizedStartDate = startDate;
                    finishDate = _prodJournalRoute.TransDate;
                }
                else
                {
                    finishDate = (   _prodJournalRoute.ToTime   != 0
                                  && _prodJournalRoute.FromTime != 0) &&
                                     _prodJournalRoute.FromTime  > _prodJournalRoute.ToTime ?
                                  _prodJournalRoute.TransDate +1 : // We assume work is done over midnight
                                  _prodJournalRoute.TransDate;
                }

                switch (true)
                {
                    case    finishDate > prodRouteJob.RealizedEndDate
                        || !prodRouteJob.RealizedEndDate :
                         prodRouteJob.RealizedEndDate = finishDate;
                         prodRouteJob.RealizedEndTime = _prodJournalRoute.ToTime;
                         break;
                    case   finishDate == prodRouteJob.RealizedEndDate
                        && _prodJournalRoute.ToTime > prodRouteJob.RealizedEndTime:
                         prodRouteJob.RealizedEndTime = _prodJournalRoute.ToTime;
                         break;
                }
            }

            prodRouteJob.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        super();
        this.postProdJournalTableBOM(NoYes::Yes); //Route scrap must be ignored as good quantity and error quantity are specified in the route journal
        this.postProdJournalTableProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    Integer runEnd(boolean _deleteErrors = false)
    {
        wrkCtrScheduler.parmCanUpdateCompletedRoute(!isRouteCardPosting);
        this.updateProdRouteScheduling();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInit</Name>
				<Source><![CDATA[
    Integer runInit()
    {
        cacheProdRoute            = null;
        cacheProdJournalTableProd = null;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCosts</Name>
				<Source><![CDATA[
    protected AmountMST updateCosts(
        ProdJobType             _prodJobType,
        LedgerVoucher           _ledgerVoucher,
        ProdRouteTrans          _prodRouteTrans,
        ProdTable               _prodTable,
        ProdJournalRoute        _prodJournalRoute,
        ProdJournalRouteProj    _prodJournalRouteProj,
        ProjTransIdBase         _projTransId = _prodJournalRouteProj.ProjTransId)
    {
        PmfProdCoBy         coBy;

        _prodJobType.updateWIPLedger(_ledgerVoucher, _prodRouteTrans);

        _prodRouteTrans.insert();

        if (_prodJournalRoute.isProjMethodConsumed())
        {
            _prodJobType.updateProjLedger(_ledgerVoucher, _prodRouteTrans, _prodJournalRoute, _prodJournalRouteProj, _projTransId);
        }

        AmountMST costAmount = _prodRouteTrans.Amount;

        if (!inventCostProdIndirect || inventCostProdIndirect.parmVoucher() != _ledgerVoucher.lastVoucher())
        {
            inventCostProdIndirect = InventCostProdIndirect::newFromLedgerVoucher(_ledgerVoucher);
        }

        inventCostProdIndirect.calcRoute(InventCostProdIndirectData_Route::newConsumptionFromProdTable(_prodRouteTrans, _prodTable, _prodJobType));

        // Update ProdCalcTrans
        if (this.mustUpdateRealCalcProduction())
        {
            if (!ProdTableJour::isHistoricalCost(_prodTable.ProdId))
            {
                if (_prodTable.ProdStatus != ProdStatus::Completed)
                {
                    if (_prodTable.ProdType == ProdType::Process)
                    {
                        _prodJobType.updateRealConsumption(_prodTable, _prodRouteTrans, true,
                        _prodTable.pmfRemainCostAlloc());

                        while select RecId, CostAllocationPct from coBy
                          where coBy.ProdId == _prodTable.ProdId
                        &&  coBy.ProductType == PmfProductType::Co_Product
                        {
                            _prodJobType.updateRealConsumptionCoBy(_prodTable, _prodRouteTrans,
                            coBy.CostAllocationPct, coBy.RecId);
                        }
                    }
                    else
                    {
                        _prodJobType.updateRealConsumption(_prodTable, _prodRouteTrans);
                    }
                }
            }
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdRouteScheduling</Name>
				<Source><![CDATA[
    void updateProdRouteScheduling()
    {
        ProdRoute               prodRoute;

        if (this.shouldUpdateProdRouteScheduling()
            &&   cacheProdRoute
            && cacheProdRoute.len() > 0)
        {
            setPrefix("@SYS1113");

            if (cacheProdRoute.first(prodRoute))
            {
                do
                {
                    setPrefix(#prefixField(prodRoute,prodId));

                    wrkCtrScheduler.reset();

                    WrkCtrParmSchedule wrkCtrParmSchedule = WrkCtrParmSchedule::newProdRoute(prodRoute);

                    this.setProdRouteSchedulingMethod(prodRoute, wrkCtrParmSchedule);

                    wrkCtrScheduler.addWrkCtrParmSchedule(wrkCtrParmSchedule);

                    // Run scheduling engine
                    wrkCtrScheduler.run();
                } while (cacheProdRoute.next(prodRoute));
            }

            wrkCtrScheduler.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdRouteSchedulingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the scheduling method for the <c>WrkCtrParmSchedule</c> instance.
    /// </summary>
    /// <param name = "_prodRoute">The prod route.</param>
    /// <param name = "_wrkCtrParmSchedule">The <c>WrkCtrParmSchedule</c> instance.</param>
    protected void setProdRouteSchedulingMethod(ProdRoute _prodRoute, WrkCtrParmSchedule _wrkCtrParmSchedule)
    {
        if (ProdTable::find(_prodRoute.ProdId).SchedStatus == ProdSchedStatus::OperationScheduled)
        {
            _wrkCtrParmSchedule.schedMethod(SchedMethod::Rough);
        }
        else
        {
            _wrkCtrParmSchedule.schedMethod(SchedMethod::Detail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26713";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    static ProdJournalCheckPostRoute newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId)
    {
        ProdJournalCheckPostRoute journalCheckPost = new ProdJournalCheckPostRoute();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_autoBlock);
        journalCheckPost.parmShowInfoResult(_showInfoResult);
        journalCheckPost.parmJournalCheckPostType(_journalCheckPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostJournal</Name>
				<Source><![CDATA[
    static ProdJournalCheckPostRoute newPostJournal(
        ProdJournalId   _prodJournalId,
        boolean         _showInfoResult)
    {
        ProdJournalCheckPostRoute journalCheckPost = new ProdJournalCheckPostRoute();

        journalCheckPost.initNewJournalCheckPost(_prodJournalId,
                                                 _showInfoResult);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdJobType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the concrete <c>ProdJobType</c> class instance.
    /// </summary>
    /// <param name="_routeJobType">
    /// The <c>RouteJobType</c> enumeration value for which the <c>ProdJobType</c> should be found.
    /// </param>
    /// <returns>
    /// The <c>ProdJobType</c> class instance.
    /// </returns>
    protected ProdJobType getProdJobType(RouteJobType _routeJobType)
    {
        return ProdJobType::construct(_routeJobType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdJournalCheckPostRoute</c> class instance.
    /// </summary>
    /// <param name="_prodJournalId">
    /// The production journal id.
    /// </param>
    /// <param name="_showInfoResult">
    /// True if infolog should be shown; false otherwise.
    /// </param>
    protected void initNewJournalCheckPost(ProdJournalId         _prodJournalId,
                                           boolean               _showInfoResult)
    {
        this.getLast();
        this.parmAutoBlock(true);
        this.parmShowInfoResult(_showInfoResult);
        this.parmJournalCheckPostType(JournalCheckPostType::Post);
        this.parmJournalTableId(tableNum(ProdJournalTable));
        this.parmJournalId(_prodJournalId);
        this.parmVoucher('');
        this.parmThrowCheckFailed(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdRouteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdRouteTrans</c> record.
    /// </summary>
    /// <param name="_prodRouteTrans">
    /// The <c>ProdRouteTrans</c> record that will be initialized.
    /// </param>
    /// <param name="_prodJournalTableRoute">
    /// The <c>ProdJournalTable</c> record used for initialization.
    /// </param>
    /// <param name="_prodJournalRoute">
    /// The <c>ProdJournalRoute</c> record used for initialization.
    /// </param>
    protected void initProdRouteTrans(ProdRouteTrans   _prodRouteTrans,
                                      ProdJournalTable _prodJournalTableRoute,
                                      ProdJournalRoute _prodJournalRoute)
    {
        _prodRouteTrans.initFromProdJournalTable(_prodJournalTableRoute);
        _prodRouteTrans.VoucherWIP   = _prodJournalRoute.Voucher;
        _prodRouteTrans.DateWIP      = _prodJournalRoute.TransDate;
        _prodRouteTrans.initFromProdJournalRoute(_prodJournalRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>ProdCalcTrans</c> records need to be updated.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <param name="_prodRouteTrans">
    /// The <c>ProdRouteTrans</c> record.
    /// </param>
    /// <returns>
    /// True if <c>ProdCalcTrans</c> records need to be updated; false otherwise.
    /// </returns>
    protected boolean shouldUpdateProdCalcTrans(ProdTable               _prodTable,
                                                ProdRouteTrans          _prodRouteTrans)
    {
        return !ProdTableJour::isHistoricalCost(_prodTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateProdRouteScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the production route scheduling should be updated.
    /// </summary>
    /// <returns>
    /// True if production route scheduling should be updated; false otherwise.
    /// </returns>
    protected boolean shouldUpdateProdRouteScheduling()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>