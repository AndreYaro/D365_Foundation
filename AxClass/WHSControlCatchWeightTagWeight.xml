<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlCatchWeightTagWeight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlCatchWeightTagWeight</c> class is responsible for handling the catch weight tag weight controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#CatchWeightTagWeight)]
public class WHSControlCatchWeightTagWeight extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag weight control.
    /// </summary>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    public boolean process()
    {
        WHSCapturedWeight catchWeightTagWeight = WHSWorkExecuteDisplay::str2numDisplay(this.parmData());

        ItemId itemId = this.getItemIdFromSource();
        
        if (!this.validateCatchWeightEnabledItem(itemId))
        {
            return false;
        }

        catchWeightTagWeight = decRound(catchWeightTagWeight, InventTable::inventDecimals(itemId));

        if (!PDSCatchWeight::validateInventQty(itemId,
                                                catchWeightTagWeight,
                                                1,
                                                false))
        {

            return this.fail("@WAX:MobileDeviceControlValidationInvalidWeight");
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight, catchWeightTagWeight);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item ID from the source based on the work processing mode.
    /// </summary>
    /// <returns>An item ID.</returns>
    private ItemId getItemIdFromSource()
    {
        ItemId itemId;

        if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled() &&
            WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving())
        {
            WHSReceiptOrderLine inboundOrderLine = pass.receivingOrderProvider().orderLine(pass);
            itemId = inboundOrderLine.ItemId;
        }

        switch (mode)
        {
            case WHSWorkExecuteMode::LoadItemReceiving:
            case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
            case WHSWorkExecuteMode::PurchaseOrderLineReceiving:
            case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkExecuteMode::PurchaseOrderItemReceiving:
            case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
                if (!WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
                {
                    PurchLine purchLine = PurchLine::find(pass.lookup(#PONum), pass.lookupInt64(#POLineNum));
                    itemId = purchLine.ItemId;
                }
                break;

            case WHSWorkExecuteMode::TransferOrderLineReceiving:
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate:
            case WHSWorkExecuteMode::TransferOrderItemReceiving:
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate:
                InventTransferLine transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum));
                itemId = transferLine.ItemId;
                break;

            case WHSWorkExecuteMode::ReturnOrder:
            case WHSWorkExecuteMode::ReturnOrderAndLocate:
                SalesLine returnLine = controlData.findBestMatchReturnLine();
                itemId = returnLine.ItemId;
                break;

            case WHSWorkExecuteMode::AdjustmentIn:
            case WHSWorkExecuteMode::LicensePlateLoading:
            case WHSWorkExecuteMode::ReportAsFinished:
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
                itemId = pass.lookup(#ItemId);
                break;

            case WHSWorkExecuteMode::LicensePlateReceiving:
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
                WHSASNitem asnItem = WHSASNitem::findByRecId(pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId));
                itemId = asnItem.ItemId;
                break;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightEnabledItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the item is catch weight enabled.
    /// </summary>
    /// <param name = "_itemId">Item ID to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateCatchWeightEnabledItem(ItemId _itemId)
    {
        if (!_itemId)
        {
            return this.fail("@WAX758");
        }

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>