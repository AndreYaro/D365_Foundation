<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_M4</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Reimbursement slip (M-4) report to excel.
/// </summary>
[PackingSlipReportAttribute(PrintoutTypeTable_RU::PurchReimbSlipM4)]
class OxmlExcelReport_M4 extends OXMLExcelReport_PackingSlip implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    Counter                         lineNo,
                                    numOfLines;

    AmountMST                       totalBaseAmount;
    Qty                             totalQty;

    protected const str ReportHeader = 'REPORTHEADER'; 
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';
    protected const str ReportFooter = 'REPORTFOOTER';
    protected const int WidthColsM4 = 12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 12.75;

        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName),
                   document.getNamedRangeHeightWrapped('ItemId', line.ItemId),
                   MinHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, WidthColsM4);

        select count(RecId) from line
            where line.InternalId       == subHeader.InternalId     &&
                  line.InventLocationId == subHeader.InventLocationId;

        numOfLines = int642int(line.RecId);

        this.execute(ReportHeader);
        this.execute(PageHeader);

        while select line
            where line.InternalId       == subHeader.InternalId     &&
                  line.InventLocationId == subHeader.InventLocationId
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(PageHeader);
            }

            this.execute(Body);

            totalBaseAmount += line.LineAmount;
            totalQty        += line.Qty;
        }

        this.execute(ReportFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
        protected Filename fileName()
    {
        return 'ReimbSlip_M4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
        protected Filename fileNamePostfix()
    {
        return '_' + subHeader.DocumentId + '_' + header.DocumentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'M4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section of excel report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection('ItemName',           line.ItemName);
        this.insertValueToSection('ItemId',             line.ItemId);
        this.insertValueToSection('Unit',               line.CodeOKEI);
        this.insertValueToSection('UnitName',           line.Unit); // can be unit description
        this.insertValueToSection('Qty',                line.Qty);
        this.insertValueToSection('QtyAccepted',        line.Qty);
        this.insertValueToSection('Price',              line.Price);
        this.insertValueToSection('LineAmount',         line.LineAmount);
        this.insertValueToSection('VATAmount',          line.vatAmount);
        this.insertValueToSection('LineAmountWithTax',  line.LineAmountWithTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method decides which section is should be filled and calls corresponding method.
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case PageHeader:
                this.fillPageHeader();
                break;
            case Body:
                this.fillBody();
                break;
            case ReportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        str currencyLong;
        const str TwoWithSep = "\%1, \%2";
        const str OneWithSep = "\%1";

        if (header.CurrencyShortName && header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(TwoWithSep, header.CurrencyShortName, header.CurrencyShortNamePenny);
        }
        else if (header.CurrencyShortName || header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(OneWithSep, header.CurrencyShortName + header.CurrencyShortNamePenny);
        }

        this.insertValueToSection('Currency_1', currencyLong);
        this.insertValueToSection('Currency_2', currencyLong);
        this.insertValueToSection('Currency_3', currencyLong);
        this.insertValueToSection('Currency_4', currencyLong);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportFooter()
    {
        this.insertValueToSection('TotalQty',          totalQty);
        this.insertValueToSection('TotalBaseAmount',   totalBaseAmount);
        this.insertValueToSection('TotalTaxAmount',    subHeader.TotalAmtVAT);
        this.insertValueToSection('TotalAmount',       subHeader.TotalAmtWithVAT);

        this.insertValueToSection('AcceptorPosition',  subHeader.AcceptorTitle);
        this.insertValueToSection('AcceptorName',      subHeader.AcceptorName);

        this.insertValueToSection('SenderPosition',    subHeader.SupplierTitle);
        this.insertValueToSection('SenderName',        subHeader.SupplierName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        this.insertValueToSection('CompanyName',           header.CustName);
        this.insertValueToSection('DepartmentName',        "");
        this.insertValueToSection('DocumentNumber',        subHeader.DocumentId);
        this.insertValueToSection('OKPO',                  header.CustOKPO);

        this.insertValueToSection('DocumentDate',           header.InvoiceDate);
        this.insertValueToSection('InventLocation',        subHeader.InventLocationName);
        this.insertValueToSection('InvoiceAccount',        header.VendAccount);
        this.insertValueToSection('VendAccountName',       header.VendName);
        this.insertValueToSection('LedgerAccount',         this.getMainAccountNum());
        this.insertValueToSection('AnalysisCode',          this.getAnalysisCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
        protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(PageHeader);
        this.addSection(Body, true);
        this.addSection(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be created before executing section
    /// </summary>
    /// <returns>
    /// true, if new page should be created, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(Body);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(ReportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
        protected Filename templateName()
    {
        return resourceStr(M4_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int CellsBody = 10;
        const int CellsOther = 22;

        TmpSalesPurchReportLine_RU      lineLocal;

        lineLocal.setTmpData(line);
        select count(RecId) from lineLocal;

        return CellsOther + (int642int(lineLocal.RecId) * CellsBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>OXMLExcelReport_M4</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>OXMLExcelReport_M4</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_M4 construct()
    {
        return new OXMLExcelReport_M4();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>