<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSalesExplosionAutoReserveCoverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class keeps the logic for automatic reservations that get executed on sales explosion.
/// </summary>
internal final static class ReqSalesExplosionAutoReserveCoverage
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reserveCoverageForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves what is needed for the sales line based on its coverage and marks any pegged released orders to the line.
    /// </summary>
    /// <param name = "_reqPlanVersionRefRecId">The plan version based on which the coverage will be retrieved.</param>
    /// <param name = "_salesLine">The sales line for which the reservation will happen.</param>
    /// <param name = "_inventTransOriginId">The sales line inventory transactions origin.</param>
    /// <param name = "_movement">The inventory movement of the sales line.</param>
    /// <param name = "_deleteMarking">A boolean indicating if markings should be deleted.</param>
    /// <param name = "_mustSkipInventSumLogTTS">A boolean indicating if InventSumLogTTS should be skipped.</param>
    internal static void reserveCoverageForSalesLine(
        RefRecId _reqPlanVersionRefRecId,
        SalesLine _salesLine,
        InventTransOriginId _inventTransOriginId,
        InventMovement _movement,
        boolean _deleteMarking = false,
        boolean _mustSkipInventSumLogTTS = true)
    {
        ReqTrans            reqTrans;
        InventQty           reserveQty;

        while select forupdate reqTrans
            index hint RefIdx
            where reqTrans.PlanVersion              == _reqPlanVersionRefRecId
                  && reqTrans.RefType               == ReqRefType::Sales
                  && reqTrans.RefId                 == _salesLine.SalesId
                  && reqTrans.InventTransOrigin     == _inventTransOriginId
                  && (_deleteMarking || reqTrans.MarkingRefInventTransOrigin == 0)
        {
            InventTrans::updateMarkReqTransCov(reqTrans); // marking is done according to coverage + reservation according to marking
            reserveQty += reqTrans.qtyCovOnhand();
        }
        
        InventUpdateOnhandGlobal::instance().inventUpdateOnhand().parmSkipInventSumLogTTS(_mustSkipInventSumLogTTS);

        if (!_movement && _salesLine.RecId)
        {
            _movement = InventMovement::constructNoThrow(_salesLine);
        }

        if (_movement)
        {
            reserveQty -= _movement.transIdSum(true).reservPhysical(); // deduct already reserved qty.

            if (reserveQty < 0)
            {
                InventUpd_Reservation::newMovement(_movement, reserveQty, true, true).updateNow(); // reserve physical
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>