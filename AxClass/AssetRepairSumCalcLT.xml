<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRepairSumCalcLT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the main class for calculation of sum total of repair transactions for latvia.
/// </summary>
final class AssetRepairSumCalcLT
{
    FromDate            fromDate;
    ToDate              toDate;
    LTRepairAmountMST   repairAmount;
    LTRepairPercent     repairPcnt;
    AssetBookId         bookId;
    AssetId             assetId;
    AmountMST           acquisitionAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total acquisition amount taken into account for repair.
    /// </summary>
    /// <returns>
    ///    The total acquisition amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetAcquisitionPrice acquisitionAmount()
    {
        return acquisitionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method determines the percentage of repairs to the total acquisition amount for an asset.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calc()
    {
        LTAssetRepair           assetRepair;
        AssetSumCalc_Trans      assetSumCalc_Trans;

        select sum(AmountMST) from assetRepair
            where assetRepair.AssetId   == assetId  &&
                  assetRepair.BookID    == bookId   &&
                  assetRepair.TransDate >= fromDate &&
                  assetRepair.TransDate <= toDate;

        assetSumCalc_Trans = AssetSumCalc_Trans::newAssetPeriod(assetId, bookId, dateNull(), maxdate());
        assetSumCalc_Trans.calc();
        acquisitionAmount = assetSumCalc_Trans.acquisitionValue()    +
                            assetSumCalc_Trans.acquisitionAdjValue() +
                            assetSumCalc_Trans.writeUpAdjValue()     +
                            assetSumCalc_Trans.writeDownAdjValue()   +
                            assetSumCalc_Trans.revaluationValue();

        repairAmount = AssetBook::find(assetId, bookId).roundOffDepreciation(assetRepair.AmountMST);
        repairPcnt   = (acquisitionAmount                ?
                        repairAmount / acquisitionAmount :
                        0) * 100 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;
        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetBookId parmBookId(AssetBookId _bookId = bookId)
    {
        bookId = _bookId;
        return bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>repairAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total repair amount for an asset.
    /// </summary>
    /// <returns>
    ///    The total repair amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LTRepairAmountMST repairAmount()
    {
        return repairAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>repairPcnt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total repair percent for an asset.
    /// </summary>
    /// <returns>
    ///    The total repair percent.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST repairPcnt()
    {
        return repairPcnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRepairSumFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a new instance of AssetRepairSumCalcLT class and initializes the class variables.
    /// </summary>
    /// <param name="_assetId">
    ///    The asset which is repaired.
    /// </param>
    /// <param name="_bookId">
    ///    The value model which has repair transactions.
    /// </param>
    /// <param name="_fiscalYear">
    ///    The fiscal year of the repair.
    /// </param>
    /// <returns>
    ///    Instance of <c>AssetRepairSumCalcLT</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetRepairSumCalcLT newRepairSumFiscalYear(AssetId     _assetId,
                                                              AssetBookId _bookId,
                                                              TransDate   _fiscalYear)
    {
        RecId calendarId = CompanyInfoHelper::fiscalCalendarRecId();
        AssetRepairSumCalcLT sumCalc = new AssetRepairSumCalcLT();

        sumCalc.parmAssetId(_assetId);
        sumCalc.parmBookId(_bookId);
        sumCalc.parmFromDate(LedgerFiscalCalendar::findOpeningStartDateByDate(calendarId, _fiscalYear));
        sumCalc.parmToDate(LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarId, _fiscalYear));

        return sumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRepairSumPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a new instance of AssetRepairSumCalcLT class and initializes the class variables.
    /// </summary>
    /// <param name="_assetId">
    ///    The asset which is repaired.
    /// </param>
    /// <param name="_bookId">
    ///    The value model which has repair transactions.
    /// </param>
    /// <param name="_fromDate">
    ///    The date from which repair transactions need to be considered.
    /// </param>
    /// <param name="_toDate">
    ///    The date to which repair transactions need to be considered.
    /// </param>
    /// <returns>
    ///    Instance of <c>AssetRepairSumCalcLT</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetRepairSumCalcLT newRepairSumPeriod(AssetId     _assetId,
                                                          AssetBookId _bookId,
                                                          TransDate   _fromDate = dateNull(),
                                                          TransDate   _toDate   = dateNull())
    {
        AssetRepairSumCalcLT sumCalc = new AssetRepairSumCalcLT();

        sumCalc.parmAssetId(_assetId);
        sumCalc.parmBookId(_bookId);
        sumCalc.parmFromDate(_fromDate);
        sumCalc.parmToDate(_toDate);

        return sumCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
