<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSessionCacheConsolidatedWorkLinesExist</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSSessionCacheConsolidatedWorkLinesExist
{
    private const str sgocScope = classStr(WHSSessionCacheConsolidatedWorkLinesExist);
    private const container sgocIsConsolidationUsedKey = ['isConsolidationUsed'];

    private boolean registeredEventHandler = false;
    private boolean cacheWasQueried = false;
    private boolean linesExist = true; // Initialize to a safe value

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isConsolidationUsed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isConsolidationUsed()
    {
        if (!cacheWasQueried)
        {
            cacheWasQueried = true;
            linesExist = this.consolidatedWorkLinesExistInSgocOrDb();
            if (!linesExist)
            {
                // We only need to execute ttsNotifyPreCommit if there are currently no lines
                this.registerEventHandler();
            }
        }

        return linesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidatedWorkLineInserted</Name>
				<Source><![CDATA[
    internal void consolidatedWorkLineInserted()
    {
        // A race condition is possible, where another session created consolidated lines in the meantime.
        // We need to check with db to prevent it.
        this.recheckValueAndThrowForInvalidChange();
        
        this.markConsolidatedLinesExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        // Hide constructor
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    internal void flushCache()
    {
        new SysGlobalObjectCache().remove(sgocScope, sgocIsConsolidationUsedKey);
        this.cacheWasQueried = false;
        this.linesExist = true;
        this.unregisterEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidatedWorkLinesExistInSgocOrDb</Name>
				<Source><![CDATA[
    private boolean consolidatedWorkLinesExistInSgocOrDb()
    {
        boolean exist = true; // Use safe value

        // Take value from SGOC if present; otherwise, check db
        container sgocValue = new SysGlobalObjectCache().find(sgocScope, sgocIsConsolidationUsedKey);
        if (sgocValue != conNull())
        {
            [exist] = sgocValue;
        }
        else
        {
            exist = this.consolidatedWorkLinesExistInDb();
        }

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidatedWorkLinesExistInDb</Name>
				<Source><![CDATA[
    private boolean consolidatedWorkLinesExistInDb()
    {
        // This is a global cache, so we need to check for the records crosscompany
        WHSConsolidatedWorkLine consolidatedWorkLine;
        select firstonly crosscompany RecId from consolidatedWorkLine;
        
        boolean exist = consolidatedWorkLine.RecId != 0;

        // Push updated value to SGOC so it's always fresh
        new SysGlobalObjectCache().insert(sgocScope, sgocIsConsolidationUsedKey, [exist]);

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recheckValueAndThrowForInvalidChange</Name>
				<Source><![CDATA[
    private void recheckValueAndThrowForInvalidChange()
    {
        if (!cacheWasQueried || linesExist)
        {
            // If lines exist then we can't fail so there is nothing to check
            return;
        }

        // The point of this check is to see if SGOC value is not out of date so we always need to check db here
        if (!linesExist && this.consolidatedWorkLinesExistInDb())
        {
            // Set linesExist to true and update SGOC so we don't fail next time
            this.markConsolidatedLinesExist();
            new SysGlobalObjectCache().insert(sgocScope, sgocIsConsolidationUsedKey, [true]);
            throw error("@WAX:WHSConsolidatedWorkLinesExistCacheCheckFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markConsolidatedLinesExist</Name>
				<Source><![CDATA[
    private void markConsolidatedLinesExist()
    {
        cacheWasQueried = true;
        linesExist = true;
        // Lines exist so we cannot fail - no point checking onTtsPreCommit
        this.unregisterEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    private void ttsNotifyPreCommit()
    {
        // Perform last check of state in db to ensure other session didn't create any records in the meantime
        this.recheckValueAndThrowForInvalidChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandler</Name>
				<Source><![CDATA[
    private void registerEventHandler()
    {
        if (!registeredEventHandler)
        {
            registeredEventHandler = true;
            appl.onTtsNotifyPreCommit += eventhandler(this.ttsNotifyPreCommit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandler</Name>
				<Source><![CDATA[
    private void unregisterEventHandler()
    {
        if (registeredEventHandler)
        {
            registeredEventHandler = false;
            appl.onTtsNotifyPreCommit -= eventhandler(this.ttsNotifyPreCommit);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>