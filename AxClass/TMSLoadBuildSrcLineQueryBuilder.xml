<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildSrcLineQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildSrcLineQueryBuilder</c> is used as a base class for classes that can be used for building
/// queries on source lines.
/// </summary>
abstract class TMSLoadBuildSrcLineQueryBuilder extends TMSLoadBuildQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFilterCodeRange</Name>
				<Source><![CDATA[
    private void addFilterCodeRange(
        QueryBuildDataSource                _dsWHSInventTable,
        WHSFilterNum                        _filterCode,
        int                                 _filterCodeArrayIndex)
    {
        QueryBuildRange qr;

        if (_filterCode)
        {
            qr = SysQuery::findOrCreateRange(_dsWHSInventTable, fieldNum(WHSInventTable, FilterCode), 1, _filterCodeArrayIndex);

            if (!qr.value())
            {
                qr.value(queryValue(_filterCode));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterCodeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a query on the filter codes to the datasource.
    /// </summary>
    /// <param name="_dsWHSInventTable">
    /// A reference to the table to query on.
    /// </param>
    /// <param name="_loadBuildSrcLineQueryCriteria">
    /// The criteria object containing the filter code information.
    /// </param>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> withe the relevant queries populated.
    /// </returns>
    protected QueryBuildDataSource addFilterCodeRanges(
        QueryBuildDataSource                _dsWHSInventTable,
        TMSLoadBuildSrcLineQueryCriteria    _loadBuildSrcLineQueryCriteria)
    {
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode1(), 1);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode2(), 2);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode3(), 3);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode4(), 4);

        return _dsWHSInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateQueryRange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addDateQueryRange(
        QueryBuildDataSource _qbds,
        str _tableName,
        str _fieldNameConfirmed,
        str _fieldNameRequested,
        fieldid _rangeField,
        Date _dateFrom,
        Date _dateTo)
    {
        str             queryRangeValue, queryRangeExpression;
        QueryBuildRange qbr;

        //no range filtering
        if (_dateFrom == dateNull() && _dateTo == dateNull())
        {
            return;
        }

        //we have the to as open
        if (_dateTo == dateNull())
        {
            queryRangeExpression =  '(((((%2 >= %4))) || ((%2 == %6) && ((%3 >= %4)))))';
        }
        else if (_dateFrom == dateNull())//we exclude the ones where confirmed is datenull
        {
            queryRangeExpression = '(((((%2 > %6) && (%2 <= %5))) || ((%2 == %6) && ((%3 <= %5)))))';
        }
        else
        {
            queryRangeExpression = '(((((%2 >= %4) && (%2 <= %5))) || ((%2 == %6) && ((%3 >= %4) && (%3 <= %5)))))';
        }

        //we need to use findOrCreate in the below code since we follow a pattern where we dont override values that the user have specified on the query
        qbr = SysQuery::findOrCreateRange(_qbds, _rangeField);

        if (!qbr.value())
        {
            //we select based on confirmed and if confirmed is not filled we add criteria on requested.
            queryRangeValue = strFmt(
                queryRangeExpression,
                _tableName,
                _fieldNameConfirmed,
                _fieldNameRequested,
                date2StrXpp(_dateFrom),
                date2StrXpp(_dateTo),
                date2StrXpp(dateNull()));

            qbr.value(queryRangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySrcLineQueryForScheduledRouteDestinations</Name>
				<Source><![CDATA[
    private Query modifySrcLineQueryForScheduledRouteDestinations(
        Query _query,
        container _deliveryZipCodes,
        TableId _tableId)
    {
        QueryBuildDataSource logisticsPostalAddressDS;
        QueryBuildRange qr;

        logisticsPostalAddressDS = SysQuery::findOrCreateDataSource(_query, tableNum(LogisticsPostalAddress), _tableId);
        logisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
        logisticsPostalAddressDS.relations(true);

        qr = SysQuery::findOrCreateRange(logisticsPostalAddressDS, fieldNum(LogisticsPostalAddress, ZipCode));

        qr.value(con2Str(_deliveryZipCodes));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    protected void addRanges(
        TMSLoadBuildSrcLineQueryCriteria _queryCriteria,
        InventSiteId _originSiteId,
        InventLocationId _originLocationId,
        Query _queryBaseQueryCopy,
        QueryBuildDataSource _inventDimDS,
        QueryBuildDataSource _inventLocationDS,
        QueryBuildDataSource _destLogisticsPostalAddressDS,
        QueryBuildDataSource _whsInventTableDS,
        container _deliveryZipCodes,
        TableId _tableIdJoinLogisticsPostalAddress,
        TableId _tableIdJoinWHSInventTable,
        FieldId _itemFieldId)
    {
        QueryBuildRange qr;

        if (
            _originLocationId
            || _originSiteId
            || _queryCriteria.parmOriginCountry()
            || _queryCriteria.parmOriginPostalCodeFrom()
            || _queryCriteria.parmOriginPostalCodeTo())
        {
            if (_originLocationId)
            {
                qr = SysQuery::findOrCreateRange(_inventDimDS, fieldNum(InventDim, InventLocationId));

                if (!qr.value())
                {
                    qr.value(_originLocationId);
                }
            }

            if (_originSiteId)
            {
                qr = SysQuery::findOrCreateRange(_inventDimDS, fieldNum(InventDim, InventSiteId));

                if (!qr.value())
                {
                    qr.value(_originSiteId);
                }
            }

            // Query should not include from warehouse location data if a scheduled route has been selected since this should reflect all scheduled route segments.
            if (
                !_originLocationId
                && !_queryCriteria.parmScheduledRoute()
                && (_queryCriteria.parmOriginCountry()
                || _queryCriteria.parmOriginPostalCodeFrom()
                || _queryCriteria.parmOriginPostalCodeTo()))
            {
                this.addLocationDataFromWarehouse(_inventLocationDS, _queryCriteria.parmOriginCountry(), _queryCriteria.parmOriginPostalCodeFrom(), _queryCriteria.parmOriginPostalCodeTo());
            }

            // Potential load lines for a scheduledRoute route must have delivery destinations that match the route's segments
            if (_queryCriteria.parmScheduledRoute())
            {
                _queryBaseQueryCopy = this.modifySrcLineQueryForScheduledRouteDestinations(_queryBaseQueryCopy, _deliveryZipCodes, _tableIdJoinLogisticsPostalAddress);
            }
        }

        if (
            _queryCriteria.parmDestinationPostalCodeFrom()
            || _queryCriteria.parmDestinationPostalCodeTo()
            || _queryCriteria.parmDestinationCountry())
        {
            _destLogisticsPostalAddressDS = SysQuery::findOrCreateDataSource(_queryBaseQueryCopy, tableNum(LogisticsPostalAddress), _tableIdJoinLogisticsPostalAddress);
            _destLogisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
            _destLogisticsPostalAddressDS.relations(true);

            this.addLocationData(_destLogisticsPostalAddressDS, _queryCriteria.parmDestinationCountry(), _queryCriteria.parmDestinationPostalCodeFrom(), _queryCriteria.parmDestinationPostalCodeTo());
        }

        if (
            _queryCriteria.parmFilterCode1()
            || _queryCriteria.parmFilterCode2()
            || _queryCriteria.parmFilterCode3()
            || _queryCriteria.parmFilterCode4())
        {
            _whsInventTableDS = SysQuery::findOrCreateDataSource(_queryBaseQueryCopy, tableNum(WHSInventTable), _tableIdJoinWHSInventTable);

            _whsInventTableDS.joinMode(JoinMode::ExistsJoin);
            _whsInventTableDS.relations(false);
            _whsInventTableDS.addLink(_itemFieldId, fieldNum(WHSInventTable, ItemId));

            this.addFilterCodeRanges(_whsInventTableDS, _queryCriteria);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>