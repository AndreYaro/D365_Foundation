<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastManiSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class ForecastManiSales extends ForecastMani
{
    private readonly boolean isForecastManiInventoryQtyUpdateFlightEnabled = ForecastManiInventoryQtyUpdateFlight::instance().isEnabled();

    [FormObservable]
    NoYes           changeCustACId;
    [FormObservable]
    CustAccount     custACId;
    [FormObservable]
    NoYes           changeCustGroupId;
    [FormObservable]
    CustGroupId     custGroupId;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        ChangeCustACId,
        CustACId,
        ChangeCustGroupId,
        CustGroupId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    Object dialog()
    {
        Args    args = new Args(formstr(ForecastManiSales));
        args.caller(this);
        dialog = classfactory.formRunClass(args);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields(BudgetMap _forecastSales)
    {
        ForecastSales forecastSales = _forecastSales;
        super(forecastSales);

        if (administration == BudgetMani::Copying)
        {
            if (forecastSales.ProjId)
            {
                forecastSales.ProjTransId = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase()).num();
            }
        }

        forecastSales.CustGroupId = changeCustGroupId
            ? custGroupId
            : forecastSales.CustGroupId;
        forecastSales.CustAccountId = changeCustACId
            ? custACId
            : forecastSales.CustAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    void setField(BudgetMap _budget)
    {
        super(_budget);

        if (isForecastManiInventoryQtyUpdateFlightEnabled && field)
        {
            ForecastSales forecastSales = _budget as ForecastSales;

            if (forecastSales)
            {
                switch (field)
                {
                    case ForecastManiField::Qty:                
                        _budget.InventQty = forecastSales.calcQtyOrdered();
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeCustACId</Name>
				<Source><![CDATA[
    NoYes parmChangeCustACId(NoYes selection = changeCustACId)
    {
        changeCustACId = selection;

        return changeCustACId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeCustGroupId</Name>
				<Source><![CDATA[
    NoYes parmChangeCustGroupId(NoYes selection = changeCustGroupId)
    {
        changeCustGroupId = selection;

        return changeCustGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustACId</Name>
				<Source><![CDATA[
    CustAccount parmCustACId(CustAccount selection = custACId)
    {
        custACId = selection;

        return custACId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustGroupId</Name>
				<Source><![CDATA[
    CustGroupId parmCustGroupId(CustGroupId selection = custGroupId)
    {
        custGroupId = selection;

        return custGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    Query search()
    {
        Query query = new Query(querystr(ForecastManiSales));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok;
        ok = super();

        switch (administration)
        {
            case BudgetMani::Copying,BudgetMani::UpdateNow :

                if (changeCustACId && custACId)
                {
                    ok = CustTable::checkExist(custACId) && ok;
                }

                if (changeCustGroupId && custGroupId)
                {
                    ok = CustGroup::checkExist(custGroupId) && ok;
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>