<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceOnhandChangeScheduleBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceOnhandChangeScheduleBatchJob extends InventInventoryDataServiceBaseBatchJob implements ISysBatchTask, BatchRetryable
{
    private InventInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();

        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceOnhandChangeScheduleBatchJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        this.processQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceOnhandChangeScheduleBatchJob construct()
    {
        return new InventInventoryDataServiceOnhandChangeScheduleBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceBatchJobDescriptionAtp";
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForBatchExecution</Name>
				<Source><![CDATA[
    public void scheduleForBatchExecution(SysRecurrenceData _recurrenceData = InventInventoryDataServiceBaseBatchJob::getOneMinuteIntervalRecurrenceData())
    {
        super(_recurrenceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueue</Name>
				<Source><![CDATA[
    private void processQueue()
    {
        InventInventoryDataServiceOnhandChangeScheduleQueue ohcsQueue;
        InventInventoryDataServiceOnhandChangeScheduleQueue ohcsQueueCompany;
        InventInventoryDataServiceOnhandChangeScheduleQueueTemp ohcsQueueTmp;
        Inventtransorigin   inventtransorigin;
        PurchLine           purchLine;
        SalesLine           salesLine;
        InventDim           inventDim;
        TmpRecIdFilter      currentOhcs;
        TransDate           utcToday = DateTimeUtil::date(DateTimeUtil::utcNow());
        TransDate           userToday = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        boolean             newDay = false;

        ohcsQueueTmp.skipDataMethods(true);
        ohcsQueueTmp.skipDatabaseLog(true);
        ohcsQueueTmp.skipEvents(true);

        ttsbegin;
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find(true);
        if (inventoryServiceParameters.TodayDate != utcToday)
        {
            inventoryServiceParameters.TodayDate = utcToday;
            inventoryServiceParameters.doUpdate();
            newDay = true;
        }
        ttscommit;

        if (newDay)
        {
            insert_recordset currentOhcs (RefRecId)
                select Recid from ohcsQueue;
        }
        else
        {
            insert_recordset currentOhcs (RefRecId)
                select Recid from ohcsQueue
                where ohcsQueue.DateExceedsMax == NoYes::No;
        }

        while select Company from ohcsQueueCompany
            group by Company
        {
            changecompany(ohcsQueueCompany.Company)
            {
                insert_recordset ohcsQueueTmp (Company, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, Qty)
                    select Company, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, sum(Qty) from ohcsQueue
                        group by Company, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, InventSiteId, InventLocationId
                        order by InventSiteId, InventLocationId
                        where ohcsQueue.Company == ohcsQueueCompany.Company
                           && ohcsQueue.Qty != 0
                           && ohcsQueue.DateExpected >= userToday
                    exists join inventtransorigin
                        where inventtransorigin.RecId == ohcsQueue.InventTransOrigin
                    exists join currentOhcs
                        where ohcsQueue.RecId == currentOhcs.RefRecId
                    notexists join purchLine
                        where purchLine.InventTransId == inventTransOrigin.InventTransId
                            && purchLine.DeliveryType == TradeLineDlvType::DropShip
                    notexists join salesLine
                        where salesLine.InventTransId == inventTransOrigin.InventTransId
                           && salesLine.DeliveryType == TradeLineDlvType::DropShip;
            }
        }

        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostOhcsToInventoryService())
        {
            System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::OnHandChangeSchedule, true);
            this.waitForAsyncTasks(threadTasklist);
        }

        this.deleteCurrentOhcsQueue(currentOhcs);

        ttsbegin;
        InventInventoryDataServiceOnhandChangeScheduleQueueTemp::insertPostFailedRecordsIntoQueueTable();
        ttscommit;

        var allOhcsFailed = this.checkAllOhcsDataFailed();

        InventInventoryDataServiceBaseBatchJob::UpdateJobRecurrenceAndParametersIfNeeded(classStr(InventInventoryDataServiceOnhandChangeScheduleBatchJob), classNum(InventInventoryDataServiceOnhandChangeScheduleBatchJob), allOhcsFailed, logger);

        InventInventoryDataServiceOnhandChangeScheduleQueueTemp::truncate();

        if (allOhcsFailed)
        {
            throw error("@SCM:InventoryServiceBatchJobFailErrorMessageOhcs");
        }

        this.updateInitialSyncAtpStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCurrentOhcsQueue</Name>
				<Source><![CDATA[
    private void deleteCurrentOhcsQueue(TmpRecIdFilter _currentOhcs)
    {
        InventInventoryDataServiceOnhandChangeScheduleQueue ohcsQueue;

        ohcsQueue.skipDataMethods(true);
        ohcsQueue.skipDatabaseLog(true);
        ohcsQueue.skipEvents(true);

        delete_from ohcsQueue
            exists join _currentOhcs
                where ohcsQueue.RecId == _currentOhcs.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInitialSyncAtpStatus</Name>
				<Source><![CDATA[
    private void updateInitialSyncAtpStatus()
    {
        ttsbegin;
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find(true);

        if (inventoryServiceParameters.InventoryServiceAtpStatus == InventoryServiceStatus::InitialSync)
        {
            inventoryServiceParameters.InventoryServiceAtpStatus = InventoryServiceStatus::Enabled;
            inventoryServiceParameters.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllOhcsDataFailed</Name>
				<Source><![CDATA[
    private boolean checkAllOhcsDataFailed()
    {
        InventInventoryDataServiceOnhandChangeScheduleQueueTemp ohcsQueueTemp;

        select firstOnly RecId from ohcsQueueTemp
            where ohcsQueueTemp.PostFailed == false;

        if (!ohcsQueueTemp.RecId)
        {
            select firstonly ohcsQueueTemp;
            if (ohcsQueueTemp.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>