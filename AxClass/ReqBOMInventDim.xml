<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqBOMInventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqBOMInventDim</c> class determines the inventory dimension to be used by BOM line requirements.
/// </summary>
public class ReqBOMInventDim
{
    ReqPO               reqPO;
    ReqTrans            issue;
    ReqPO               reqPOSearch;
    OprNum              oprNumSearch;
    WrkCtrConsumption   wrkCtrConsumptionSearch;
    LeanLocationCache   leanLocationCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    /// <remarks>
    ///    If planned order and issue are derived directly and do not define their own route,
    ///    use the information from the parent to determine inventory dimensions.
    /// </remarks>
    protected void init()
    {
        ReqTrans    reqTransIssue = issue;
        boolean     done          = reqPOSearch.RecId != 0;
        ReqPO       reqPOParent;

        if (!done)
        {
            reqPOSearch = reqPO;

            while (!done)
            {
                done = true;

                if (   !reqPOSearch.ItemRouteId
                    && reqPOSearch.IsDerivedDirectly
                    && reqTransIssue
                    && reqTransIssue.IsDerivedDirectly)
                {
                    if (!oprNumSearch)
                    {
                        oprNumSearch = reqTransIssue.OprNum;
                    }

                    if (reqTransIssue.BOMType != BOMType::Phantom)
                    {
                        wrkCtrConsumptionSearch =    wrkCtrConsumptionSearch
                                              || reqTransIssue.refBOM().WrkCtrConsumption;
                    }

                    reqPOParent = reqTransIssue.reqPo();
                    if (reqPOParent)
                    {
                        reqPOSearch = reqPOParent;

                        if (reqPOSearch.IsDerivedDirectly)
                        {
                            reqTransIssue = reqPOSearch.reqTrans().reqTransDirectlyDerived();
                            done          = reqTransIssue.RecId == 0;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
/// <summary>
    ///    Determines the inventory dimension for a given BOM line.
    /// </summary>
    /// <param name="_reqTransBOM">
    ///    A <c>ReqTrans</c> record.
    /// </param>
    /// <param name="_inventTable">
    ///    A <c>InventTable</c> record.
    /// </param>
    /// <param name="_bom">
    ///    The <c>BOM</c> record.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object.
    /// </param>
    /// <param name="_reqCalcRecordCacheInventDim">
    ///    A <c>ReqCalcRecordCacheInventDim</c> object used to cache invententory dimension information.
    /// </param>
    /// <returns>
    ///    The <c>InventDim</c> record that represents the issue dimension for the BOM line.
    /// </returns>
    public InventDim inventDim(
        ReqTrans                    _reqTransBOM,
        InventTable                 _inventTable,
        BOM                         _bom,
        ReqSetupDim                 _setupDim,
        ReqCalcRecordCacheInventDim _reqCalcRecordCacheInventDim)
    {
        InventDim       inventDim;
        LeanRuleData    leanRuleData;
        boolean         forwardFlush;
        LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity;

        this.init();

        switch (_reqTransBOM.RefType)
        {
            case ReqRefType::PmfFormulaLine :
            case ReqRefType::BOMLine:
                inventDim = ReqTrans::getInventDim(reqPOSearch.ItemId,
                                                   reqPOSearch.inventDim(),
                                                   reqPOSearch.ItemRouteId,
                                                   this.oprNumSearch(_bom),
                                                   this.wrkCtrConsumptionSearch(_bom),
                                                   _inventTable,
                                                   _bom,
                                                   _reqCalcRecordCacheInventDim);
                break;
            case ReqRefType::PlannedKanbanLine:
                inventDim = _bom.BOMMap::inventDimFinal(reqPO.ItemId,
                                                        reqPO.inventDim(),
                                                        reqPO.ItemRouteId,
                                                        _inventTable);
                leanRuleData = _setupDim.leanRuleData(reqPO.reqDateTime(),reqPO.RefType,reqPO.Qty);
                if (leanRuleData)
                {
                    forwardFlush = _bom.ProdFlushingPrincip             == ProdFlushingPrincipBOM::Start
                                   || (_bom.ProdFlushingPrincip         == ProdFlushingPrincipBOM::Blank
                                   &&  _inventTable.ProdFlushingPrincip == ProdFlushingPrincipItem::Start);

                    leanProdFlowFindConsumptionActivity = LeanProdFlowFindConsumptionActivity::newKanbanFlow(_inventTable,
                                                                                   inventDim,
                                                                                   leanRuleData.kanbanFlow(),
                                                                                   leanRuleData.parmKanbanRule(),
                                                                                   leanRuleData.leanKanbanType()
                                                                                   ,
                                                                                   forwardFlush,
                                                                                   true,
                                                                                   null,
                                                                                   reqPO.ItemId,
                                                                                   reqPO.CovInventDimId,
                                                                                   reqPO.Qty,
                                                                                   reqPO.reqDateTime());

                    leanProdFlowFindConsumptionActivity.parmLeanLocationCache(leanLocationCache);
                    inventDim = leanProdFlowFindConsumptionActivity.inventDimFinal();
                }
                break;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>oprNumSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines operation number should be applied for a given <c>BOM</c> record.
    /// </summary>
    /// <param name="_bom">
    ///    A <c>BOM</c> table record.
    /// </param>
    /// <returns>
    ///    The operation number.
    /// </returns>
    protected OprNum oprNumSearch(BOM _bom)
    {
        return _bom.OprNum ? _bom.OprNum : oprNumSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssue</Name>
				<Source><![CDATA[
        public ReqTrans parmIssue(ReqTrans _issue = issue)
    {
        issue = _issue;
        return issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPO</Name>
				<Source><![CDATA[
        public ReqPO parmReqPO(ReqPO _reqPO = reqPO)
    {
        reqPO = _reqPO;
        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrConsumptionSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the resource consumption flag should be applied for a given <c>BOM</c> record.
    /// </summary>
    /// <param name="_bom">
    ///    A <c>BOM</c> table record.
    /// </param>
    /// <returns>
    ///    The resource consumption setting.
    /// </returns>
    protected WrkCtrConsumption wrkCtrConsumptionSearch(BOM _bom)
    {
        return    _bom.WrkCtrConsumption
               || wrkCtrConsumptionSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqBOMInventDim construct()
    {
        return new ReqBOMInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new <c>ReqBOMInventDim</c> object.
    /// </summary>
    /// <param name="_reqPO">
    ///    The <c>ReqPO</c> record used to find the inventory dimension.
    /// </param>
    /// <param name="_issue">
    ///    The <c>ReqTrans</c> record used to find the inventory dimension.
    /// </param>
    /// <returns>
    ///    A new <c>ReqBOMInventDim</c> object.
    /// </returns>
    public static ReqBOMInventDim newStandard(
        ReqPO    _reqPO,
        ReqTrans _issue)
    {
        ReqBOMInventDim     reqBOMInventDim = ReqBOMInventDim::construct();

        reqBOMInventDim.parmReqPO(_reqPO);
        reqBOMInventDim.parmIssue(_issue);

        return reqBOMInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanLocationCache</Name>
				<Source><![CDATA[
    public LeanLocationCache parmLeanLocationCache(LeanLocationCache _leanLocationCache = leanLocationCache)
    {
        leanLocationCache = _leanLocationCache;

        return leanLocationCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>