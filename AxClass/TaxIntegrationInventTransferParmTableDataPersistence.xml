<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationInventTransferParmTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationInventTransferParmTableDataPersistence</c> class persists data to <c>InventTransferParmTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(InventTransferParmTable))]
public class TaxIntegrationInventTransferParmTableDataPersistence
    extends TaxIntegrationInventTransferTableDataPersistence
{
    protected InventTransferParmTable inventTransferParmTable;

    protected InventTransferParmLine inventTransferParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordInventoryFlight::instance().isEnabled()
             && document.getLocalRecord())
        {
            inventTransferParmTable = document.getLocalRecord();
            inventTransferParmTable.selectForUpdate(true);
            return SysDaQueryObjectBuilder::from(this.inventTransferTable)
                .forUpdate()
                .where(this.inventTransferTable, fieldStr(InventTransferTable, TransferId))
                    .isEqualToLiteral(this.inventTransferParmTable.TransferId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.inventTransferParmTable)
                .forUpdate()
                .where(this.inventTransferParmTable, fieldStr(InventTransferParmTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.InventTransferTable)
                    .forUpdate()
                    .where(this.InventTransferTable, fieldStr(InventTransferTable, TransferId))
                        .isEqualTo(this.inventTransferParmTable, fieldStr(InventTransferParmTable, TransferId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)).isEqualToLiteral(this.inventTransferParmTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)).isEqualToLiteral(this.inventTransferParmTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId)).isEqualToLiteral(this.inventTransferParmLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId)).isEqualToLiteral(this.inventTransferParmLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.inventTransferParmLine.TableId, this.inventTransferParmLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObject ret = this.getLineQueryObjectWithoutError();
        if (ret)
        {
            return ret;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObjectWithoutError</Name>
				<Source><![CDATA[
    protected SysDaQueryObject getLineQueryObjectWithoutError()
    {
        switch (this.inventTransferParmTable.UpdateType)
        {
            case InventTransferUpdateType::Shipment:
                return SysDaQueryObjectBuilder::from(this.inventTransferParmLine)
                    .forUpdate()
                    .where(this.inventTransferParmLine, fieldStr(InventTransferParmLine, ParmId))
                        .isEqualToLiteral(this.inventTransferParmTable.ParmId)
                    .where(this.inventTransferParmLine, fieldStr(InventTransferParmLine, TransferId))
                        .isEqualToLiteral(this.inventTransferParmTable.TransferId)
                    .innerJoin(this.inventTransferLine)
                        .forUpdate()
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId))
                            .isEqualTo(this.inventTransferParmLine, fieldStr(InventTransferParmLine, TransferId))
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, InventTransId))
                            .isEqualTo(this.inventTransferParmLine, fieldStr(InventTransferParmLine, InventTransId))
                    .toSysDaQueryObject();

            case InventTransferUpdateType::Receive:
                return SysDaQueryObjectBuilder::from(this.inventTransferParmLine)
                    .forUpdate()
                    .where(this.inventTransferParmLine, fieldStr(InventTransferParmLine, ParmId))
                        .isEqualToLiteral(this.inventTransferParmTable.ParmId)
                    .where(this.inventTransferParmLine, fieldStr(InventTransferParmLine, TransferId))
                        .isEqualToLiteral(this.inventTransferParmTable.TransferId)
                    .innerJoin(this.inventTransferLine)
                        .forUpdate()
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId))
                            .isEqualTo(this.inventTransferParmLine, fieldStr(InventTransferParmLine, TransferId))
                        .where(this.inventTransferLine, fieldStr(InventTransferLine, InventTransIdReceive))
                            .isEqualTo(this.inventTransferParmLine, fieldStr(InventTransferParmLine, InventTransId))
                    .toSysDaQueryObject();

            default:
                return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>