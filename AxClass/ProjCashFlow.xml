<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class is the parameter class
// This class will be used to serialize the variables set on the form to be sent to the
// server via RPc
public class ProjCashFlow extends RunBase
{
    boolean             fixedPrice;
    boolean             timeMaterial;
    boolean             internalCost;
    boolean             investment;
    boolean             timeProjects;
    boolean             fixedPriceBillingMethod;
    boolean             timeMaterialBillingMethod;

    boolean             hour;
    boolean             expenses;
    boolean             fee;
    boolean             onAcc;
    boolean             item;

    TransDate           projectFromDate;
    TransDate           projectToDate;
    TransDate           paymentFromDate;
    TransDate           paymentToDate;
    TransDate           projectBreakDate;
    TransDate           paymentBreakDate;

    ProjActualBudget    actualBudgetDeviationSum;
    boolean             includedExpectedPayment;
    boolean             includedPaidPayment;

    real                daysAddedToSalesPayment;
    real                daysAddedToCostPayment;

    TransDate           minimumCostPaymentDate;
    TransDate           minimumSalesPaymentDate;

    ItemId              itemId;
    ResourceRecId       resource;
    ResourceCategoryRecId resourceCategory;
    SMASubscriptionId   subscriptionId;
    SMASubscriptionGroupId subscriptionGroupId;

    ProjCategoryId      categoryId;
    ProjCategoryGroupId categoryGroupId;

    ProjId              projId;
    boolean             projTree;
    ProjWipId           projWipId;
    ProjSortValue       sortCode;
    ProjSort            sortingId;

    ProjGroupId         projGroupId;
    ProjInvoiceProjId   projInvoiceProjId;
    CustAccount         custAccount;
    EmplItemId          emplItemId;

    boolean             sorting;
    ProjTransIdBase     transId;

    ProjSort            sorting1;
    ProjSort            sorting2;
    ProjSort            sorting3;

    ProjListStateProjType stateProjType;
    ProjShowAmount        showAmount;
    Level                 projLevel;
    boolean               skipBlankId;
    boolean               skipZero;
    ForecastModelId       forecastModelId;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
    fee,
    item,
    hour,
    expenses,
    onAcc,
    fixedPrice,
    timeMaterial,
    fixedPriceBillingMethod,
    timeMaterialBillingMethod,
    internalCost,
    investment,
    timeProjects,
    projectFromDate,
    projectToDate,
    projectBreakDate,
    paymentFromDate,
    paymentToDate,
    paymentBreakDate,
    actualBudgetDeviationSum,
    includedExpectedPayment,
    includedPaidPayment,
    daysAddedToSalesPayment,
    daysAddedToCostPayment,
    minimumCostPaymentDate,
    minimumSalesPaymentDate,
    itemId,
    resource,
    resourceCategory,
    subscriptionId,
    subscriptionGroupId,
    categoryId,
    categoryGroupId,
    projId,
    projTree,
    projWipId,
    sortCode,
    sortingId,
    projGroupId,
    projInvoiceProjId,
    custAccount,
    sorting,
    transId,
    sorting1,
    sorting2,
    sorting3,
    forecastModelId,
    stateProjType,
    showAmount
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    // Pack / serialize the class to be set to the server
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualBudget</Name>
				<Source><![CDATA[
    public ProjActualBudget parmActualBudget(ProjActualBudget _actualBudgetDeviationSum = actualBudgetDeviationSum)
    {
        actualBudgetDeviationSum = _actualBudgetDeviationSum;
        return actualBudgetDeviationSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryGroupId</Name>
				<Source><![CDATA[
    public ProjCategoryGroupId parmCategoryGroupId(ProjCategoryGroupId _categoryGroupId = categoryGroupId)
    {
        categoryGroupId  = _categoryGroupId;
        return categoryGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmCategoryId(ProjCategoryId _categoryId = categoryId)
    {
        categoryId  = _categoryId;
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount  = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDaysAddedToCostPayment</Name>
				<Source><![CDATA[
    public real parmDaysAddedToCostPayment(real _daysAddedToCostPayment = daysAddedToCostPayment)
    {
        daysAddedToCostPayment = _daysAddedToCostPayment;

        return daysAddedToCostPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDaysAddedToSalesPayment</Name>
				<Source><![CDATA[
    public real parmDaysAddedToSalesPayment(real _daysAddedToSalesPayment = daysAddedToSalesPayment)
    {
        daysAddedToSalesPayment = _daysAddedToSalesPayment;

        return daysAddedToSalesPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplItemId</Name>
				<Source><![CDATA[
    public EmplItemId parmEmplItemId(EmplItemId _emplItemId = emplItemId)
    {
        emplItemId  = _emplItemId;
        return emplItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
    public boolean parmExpenses(boolean _expenses = expenses)
    {
        expenses = _expenses;

        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFee</Name>
				<Source><![CDATA[
    public boolean parmFee(boolean _fee = fee)
    {
        fee = _fee;

        return fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;

        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPriceBillingMethod</Name>
				<Source><![CDATA[
    public boolean parmFixedPriceBillingMethod(boolean _fixedPriceBillingMethod = fixedPriceBillingMethod)
    {
        fixedPriceBillingMethod = _fixedPriceBillingMethod;
        return fixedPriceBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    public ForecastModelId parmForecastModelId (ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId  = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    public boolean parmHour(boolean _hour = hour)
    {
        hour = _hour;

        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedExpectedPayment</Name>
				<Source><![CDATA[
    public boolean parmIncludedExpectedPayment(boolean _includedExpectedPayment = includedExpectedPayment)
    {
        includedExpectedPayment = _includedExpectedPayment;

        return includedExpectedPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedPaidPayment</Name>
				<Source><![CDATA[
    public boolean parmIncludedPaidPayment(boolean _includedPaidPayment = includedPaidPayment)
    {
        includedPaidPayment = _includedPaidPayment;

        return includedPaidPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;

        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;

        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    public boolean parmItem(boolean _item = item)
    {
        item = _item;

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmitemId</Name>
				<Source><![CDATA[
    public ItemId parmitemId(ItemId _itemId = itemId)
    {
        itemId  = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumCostPaymentDate</Name>
				<Source><![CDATA[
    public TransDate parmMinimumCostPaymentDate(TransDate _minimumCostPaymentDate = minimumCostPaymentDate)
    {
        minimumCostPaymentDate = _minimumCostPaymentDate;

        if (minimumCostPaymentDate)
        {
            return minimumCostPaymentDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumSalesPaymentDate</Name>
				<Source><![CDATA[
    public TransDate parmMinimumSalesPaymentDate(TransDate _minimumSalesPaymentDate = minimumSalesPaymentDate)
    {
        minimumSalesPaymentDate = _minimumSalesPaymentDate;

        if (minimumSalesPaymentDate)
        {
            return minimumSalesPaymentDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAcc</Name>
				<Source><![CDATA[
    public boolean parmOnAcc(boolean _onAcc = onAcc)
    {
        onAcc = _onAcc;

        return onAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentBreakDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymentBreakDate(TransDate _paymentBreakDate = paymentBreakDate)
    {
        paymentBreakDate = _paymentBreakDate;

        if (paymentBreakDate)
        {
            return paymentBreakDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentFromDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymentFromDate(TransDate _paymentFromDate = paymentFromDate)
    {
        paymentFromDate = _paymentFromDate;

        if (paymentFromDate)
        {
            return paymentFromDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentToDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymentToDate(TransDate _paymentToDate = paymentToDate)
    {
        paymentToDate = _paymentToDate;

        if (paymentToDate)
        {
            return paymentToDate;
        }

        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectBreakDate</Name>
				<Source><![CDATA[
    public TransDate parmProjectBreakDate(TransDate _projectBreakDate = projectBreakDate)
    {
        projectBreakDate = _projectBreakDate;

        if (projectBreakDate)
        {
            return projectBreakDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFromDate</Name>
				<Source><![CDATA[
    public TransDate parmProjectFromDate(TransDate _projectFromDate = projectFromDate)
    {
        projectFromDate = _projectFromDate;

        if (projectFromDate)
        {
            return projectFromDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectToDate</Name>
				<Source><![CDATA[
    public TransDate parmProjectToDate(TransDate _projectToDate = projectToDate)
    {
        projectToDate = _projectToDate;

        if (projectToDate)
        {
            return projectToDate;
        }

        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjGroupId</Name>
				<Source><![CDATA[
    public ProjGroupId parmProjGroupId(ProjGroupId _projGroupId = projGroupId)
    {
        projGroupId  = _projGroupId;
        return projGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId  = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId  = _projInvoiceProjId;
        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjLevel</Name>
				<Source><![CDATA[
    public Level parmProjLevel (Level _projLevel = projLevel)
    {
        projLevel  = _projLevel;
        return projLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTree</Name>
				<Source><![CDATA[
    public boolean parmProjTree(boolean _projTree = projTree)
    {
        projTree    = _projTree;
        return projTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    public ProjWipId parmProjWIPId(ProjWipId _projWipId = projWipId)
    {
        projWipId  = _projWipId;
        return projWipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resource</c> variable.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resource</c> variable.
    /// </returns>
    public ResourceRecId parmResource(ResourceRecId _resourceRecId = resource)
    {
        resource  = _resourceRecId;
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resourceCategory</c> variable.
    /// </summary>
    /// <param name="_resourceCategoryRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resourceCategory</c> variable.
    /// </returns>
    public ResourceCategoryRecId parmResourceCategory(ResourceCategoryRecId _resourceCategoryRecId = resourceCategory)
    {
        resourceCategory  = _resourceCategoryRecId;
        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    public ProjShowAmount parmShowAmount (ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;
        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlankId</Name>
				<Source><![CDATA[
    public boolean parmSkipBlankId(boolean _skipBlankId = skipBlankId)
    {
        skipBlankId  = _skipBlankId;
        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero  = _skipZero;
        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSort1</Name>
				<Source><![CDATA[
    public ProjSort parmSort1(ProjSort _sorting1 = sorting1)
    {
        sorting1 = _sorting1;

        return sorting1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSort2</Name>
				<Source><![CDATA[
    public ProjSort parmSort2(ProjSort _sorting2 = sorting2)
    {
        sorting2 = _sorting2;

        return sorting2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSort3</Name>
				<Source><![CDATA[
    public ProjSort parmSort3(ProjSort _sorting3 = sorting3)
    {
        sorting3 = _sorting3;

        return sorting3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSorting1</Name>
				<Source><![CDATA[
    public ProjSort parmSorting1(ProjSort _sorting1 = sorting1)
    {
        sorting1  = _sorting1;
        return sorting1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSorting2</Name>
				<Source><![CDATA[
    public ProjSort parmSorting2(ProjSort _sorting2 = sorting2)
    {
        sorting2  = _sorting2;
        return sorting2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSorting3</Name>
				<Source><![CDATA[
    public ProjSort parmSorting3(ProjSort _sorting3 = sorting3)
    {
        sorting3  = _sorting3;
        return sorting3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    public ProjListStateProjType parmStateProjType (ProjListStateProjType _stateProjType = stateProjType)
    {
        stateProjType = _stateProjType;
        return stateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscriptionGroupId</Name>
				<Source><![CDATA[
    public SMASubscriptionGroupId parmSubscriptionGroupId(SMASubscriptionGroupId _subscriptionGroupId = subscriptionGroupId)
    {
        subscriptionGroupId  = _subscriptionGroupId;
        return subscriptionGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscriptionId</Name>
				<Source><![CDATA[
    public SMASubscriptionId parmSubscriptionId(SMASubscriptionId _subscriptionId = subscriptionId)
    {
        subscriptionId  = _subscriptionId;
        return subscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;

        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterialBillingMethod</Name>
				<Source><![CDATA[
    public boolean parmTimeMaterialBillingMethod(boolean _timeMaterialBillingMethod = timeMaterialBillingMethod)
    {
        timeMaterialBillingMethod = _timeMaterialBillingMethod;
        return timeMaterialBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeProject</Name>
				<Source><![CDATA[
    boolean parmTimeProject(boolean _timeProjects = timeProjects)
    {
        timeProjects = _timeProjects;
        return timeProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    // UnPack / deserialize the class to be set to the server
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS83369";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>