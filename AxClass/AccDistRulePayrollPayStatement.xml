<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRulePayrollPayStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccDistRulePayrollPayStatement</c> class controls various posting attributes that
///    are used during the distribution of a pay statement line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PayrollPayStatement), BusinessEvent_PayrollPayStatement::PayStatement, MonetaryAmount::PayrollCost),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PayrollPayStatement), BusinessEvent_PayrollPayStatement::PayStatement, MonetaryAmount::PayrollLiability)
]
public class AccDistRulePayrollPayStatement extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        ProjectAccountingDistribution projectAccountingDistribution;
        ProjectAccDistRule      projectAccDistRule = ProjectAccDistRule::newFromAccountingDistributionRule(this);
		boolean                 isProject = projectAccDistRule.parmIsProject();

        // When the pay statement line is not an Earnings, or Benefit or Tax Line with known project details, default to this posting type.
        LedgerPostingType postingType = LedgerPostingType::Payroll;

        if (isProject)
        {
            if (sourceDocumentLineItem is PayrollPayStatementEarningSourceDocLine)
            {
                // Earning will return a "fake" project reference using the PayrollPayStatementSourceDocumentLine.parmProjectId() method.
                //
                // This is because the PayrollPayStatementLine record doesn't maintain any explicit project related details.
                //
                // This interface is required to enable the project integration on the accounting distributions form
                //
                postingType = projectAccDistRule.parmLedgerPostingType();
            }

            if ((sourceDocumentLineItem is PayrollPayStatementBenefitSourceDocLine
                || sourceDocumentLineItem is PayrollPayStatementTaxSourceDocLine)
                && this.parmAccountingdistribution())
            {
                //
                // A Benefit and Tax line can only determine a "Project" ledger posting type when it has an associated Project Accounting Distribution.
                //
                // This is because the PayrollPayStatementLine record doesn't maintain any explicit project related details.
                //
                projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(this.parmAccountingdistribution().RecId);

                if (projectAccountingDistribution.RecId != 0)
                {
                    postingType = projectAccDistRule.parmLedgerPostingType();
                }
            }
        }

        return postingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        SourceDocumentLineItemIPayroll iPayroll;
        DebitCredit side = DebitCredit::Debit;

        iPayroll = sourceDocumentLineItem as SourceDocumentLineItemIPayroll;
        if (iPayroll)
        {
            // Only benefit and tax deduction lines should be a Credit
            if (iPayroll.parmEarningCode() == 0 && iPayroll.parmIsEmployerLine() == NoYes::No)
            {
                side = DebitCredit::Credit;
            }
        }

        // Flip the side for negative amounts
        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            if (side == DebitCredit::Credit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>