<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingHourJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingHourJournal extends CostControlPostingHour
{
    ProjJournalTrans projJournalTrans;
    ProjJournalTrans projJournalTrans_Orig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public smmActivityNumber activityNumber()
    {
        return projJournalTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceAmount</Name>
				<Source><![CDATA[
    public PriceCur costPriceAmount()
    {
        return CurrencyExchangeHelper::amount(projJournalTrans.Qty * projJournalTrans.CostPrice, CompanyInfoHelper::standardCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty= projJournalTrans.Qty, TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;

        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        if (ProjTable::find(projJournalTrans.ProjId).UseBudgeting)
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projJournalTrans);
            projBudgetTransactionLine.parmQty(_qty);
            projBudgetTransactionLine.parmCostAmount(costControlTransCommittedCost.AmountMst);

            if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(),projBudgetTransactionLine.salesAmount()))
            {
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(costControlTransCommittedCost.ProjId,
                    projBudgetTransaction,
                    ProjBudgetAdjustmentType::Decrement,
                    ProjParameters::find().EnableBudgetCheckOnLineSave ? false : true);
            }
        }
        else
        {
            if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
            {
                this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromProjJournalTrans(projJournalTrans);
        AmountCur amountCur = this.costPriceAmount();
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = CurrencyExchangeHelper::mstAmount(costControlTransCommittedCost.Amount, CompanyInfoHelper::standardCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        
        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;

        if (! projJournalTrans_Orig || !CostControlTransCommittedCost::findOpenedByProjTransID(projJournalTrans.TransId))
        {
            retActionType = ProjCommittedCostUpdateAction::Create;
        }
        else
        {
            // Don't change the order of the three
            // dimension changes, update committed cost without reverse

            if (!DimensionDefaultFacade::areEqual(projJournalTrans_Orig.DefaultDimension, projJournalTrans.DefaultDimension)
              ||projJournalTrans_Orig.CategoryId!=projJournalTrans.CategoryId
              ||projJournalTrans_Orig.ActivityNumber!=projJournalTrans.ActivityNumber)
            {
                    retActionType = ProjCommittedCostUpdateAction::UpdateOnly;
            }

            // qty changes, should reverse the old one and recreate committed cost
            if (projJournalTrans_Orig.Qty !=projJournalTrans.Qty
             || projJournalTrans_Orig.CostPrice != projJournalTrans.CostPrice
             || (ProjTable::find(projJournalTrans.ProjId).UseBudgeting && projJournalTrans_Orig.SalesPrice != projJournalTrans.SalesPrice))
            {
                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
            }
        }
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        projJournalTrans = buffer;
        if (projJournalTrans.orig())
        {
            projJournalTrans_Orig=projJournalTrans.orig();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction when a budget update is required.
    /// </summary>
    /// <param name="_costAmount">
    /// The cost amount of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    /// The sales amount of the transaction.
    /// </param>
    /// <returns>
    ///    true if the amounts are valid; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if (actionType == ProjCommittedCostUpdateAction::Create && (_costAmount == 0 && _salesAmount == 0))
        {
            ret = false;
        }
        if (actionType == ProjCommittedCostUpdateAction::Post)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Create
        && _qty==0)
            return false;
        if ((actionType== ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete)
        && _qty==0)
            return false;
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer,Common _childBuffer)
    {
        super(_buffer,_childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjJournalTrans</Name>
				<Source><![CDATA[
    public ProjJournalTrans parmProjJournalTrans(ProjJournalTrans _projJournalTrans=projJournalTrans)
    {
        projJournalTrans=_projJournalTrans;
        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return projJournalTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (!super(isInvoiced))
            return false;

        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();

            ledgerDimensionDefaultAccount = this.parmLedgerDimensionDefaultAccount();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }

        while select forupdate costControlTransCommittedCost
            where costControlTransCommittedCost.ProjTransId == projJournalTrans.TransId
        {
            // update the voucher/ledger information; not overwrite if partially invoice
            if (isInvoiced && !costControlTransCommittedCost.Voucher)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }
            // Clear the open
            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;

                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                if (ProjTable::find(projJournalTrans.ProjId).UseBudgeting)
                {
                    if (this.mustUpdateBudget())
                    {
                        this.budgetUpdate(projJournalTrans.ProjId,ProjBudgetTransaction::construct(projJournalTrans),ProjBudgetAdjustmentType::Increment);
                    }
                }
                else
                {
                    if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                        this.forecastUpdate(costControlTransCommittedCost,
                                            -costControlTransCommittedCost.Qty,
                                            -costControlTransCommittedCost.Amount);
                }
            }

            costControlTransCommittedCost.update();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost   updateCCTCC;
        CostControlTransCommittedCost   newOpenCCTCC;
        ProjBudgetTransactionLine       projBudgetTransactionLine;
        ProjBudgetTransaction           projBudgetTransaction;

        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);

        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = projJournalTrans.CategoryId;
        smmActivityNumber newActivityNum = this.activityNumber();

        while select forupdate updateCCTCC
            where updateCCTCC.ProjTransId == this.projTransId()
        {
            updateCCTCC.CategoryId = newCategoryId;
            updateCCTCC.ActivityNumber = newActivityNum;
            updateCCTCC.update();
        }

        Amount newAmount = this.costPriceAmount();
        if (oldOpenCCTCC.Amount==0 && newAmount!=0)
        {
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),true);
            if (newOpenCCTCC)
            {
                newOpenCCTCC.Amount = newAmount;
                newOpenCCTCC.AmountMst = newOpenCCTCC.Amount;
                newOpenCCTCC.update();

                if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProjJournalTrans());
                    projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                    projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                    projBudgetTransaction = new ProjBudgetTransaction();
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                    this.budgetUpdate(newOpenCCTCC.ProjId,projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
                }
                else
                {
                    this.forecastUpdate(newOpenCCTCC, newOpenCCTCC.Qty, newAmount);
                }
            }
        }
        else if (oldCategoryId != newCategoryId   || oldActivityNum!= newActivityNum || projJournalTrans.SalesPrice!= projJournalTrans.orig().SalesPrice)
        {
            this.budgetUpdate(oldOpenCCTCC.ProjId,ProjBudgetTransaction::construct(this.parmProjJournalTrans()),ProjBudgetAdjustmentType::Increment);
            this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId(),false);

            if (ProjTable::find(newOpenCCTCC.ProjId).UseBudgeting)
            {
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(this.parmProjJournalTrans());
                projBudgetTransactionLine.parmQty(newOpenCCTCC.Qty);
                projBudgetTransactionLine.parmCostAmount(newOpenCCTCC.AmountMst);
                projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(newOpenCCTCC.ProjId,projBudgetTransaction,ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                this.forecastUpdate(newOpenCCTCC,  newOpenCCTCC.Qty,  newOpenCCTCC.Amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostHourJournal)
            {
                ret=false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>