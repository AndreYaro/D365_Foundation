<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportPurchCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class does the tax caculation for the Purchase order.
/// The class could calculate the amount for partial order lines
/// based on a given delivery date of the order line.
/// </summary>
class BankLCImportPurchCalcTax extends PurchCalcTax_Trans
{
    BankLCSalesPurchQtyCategoryType salesPurchQtyCategory;
    TransDate                       deliveryDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract parmContract()
    {
        return BankLCImportPurchTotalsTransContract::newFromPurchTable(purchTable, deliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDate</Name>
				<Source><![CDATA[
        public TransDate parmDeliveryDate(
        TransDate _deliveryDate = deliveryDate)
    {
        deliveryDate = _deliveryDate;
        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchQtyCategory</Name>
				<Source><![CDATA[
        public BankLCSalesPurchQtyCategoryType parmSalesPurchQtyCategory(
        BankLCSalesPurchQtyCategoryType _salesPurchQtyCategory = salesPurchQtyCategory)
    {
        salesPurchQtyCategory = _salesPurchQtyCategory;
        return salesPurchQtyCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to selects the order lines based on the delivery date set by the
    ///    <c>parmDeliveryDate</c> method.
    /// </summary>
    /// <returns>
    ///    The built <c>QueryRun</c> object.
    /// </returns>
    Object queryBuild()
    {
        QueryRun             query;
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        query = super();

        if (deliveryDate != dateNull())
        {
            qbds    = SysQuery::findOrCreateDataSource(query.query(), tableNum(PurchLine));
            qbr     = SysQuery::findOrCreateRange(qbds, fieldNum(PurchLine, DeliveryDate));
            qbr.value(queryValue(deliveryDate));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxRecalculationsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax should be recalculated for the current line.
    /// </summary>
    /// <returns>
    /// true if tax recalculation should be skipped; otherwise, false.
    /// </returns>
    public boolean skipTaxRecalculationsForLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the line quantity for the current line to use for tax calculation.
    /// </summary>
    /// <returns>
    ///    The line quantity.
    /// </returns>
    PurchQty transQty()
    {
        return new BankLCImportPurchQuantity(salesPurchQtyCategory).calcPurchQty(purchLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether sub-ledger journal lines should be generated.
    /// </summary>
    /// <returns>
    ///    true if the sub-ledger journal lines should be generated; otherwise, false.
    /// </returns>
    boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>