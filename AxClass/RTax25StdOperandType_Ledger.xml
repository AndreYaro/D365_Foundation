<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType_Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25StdOperandType_Ledger extends RTax25StdOperandType
{
    TmpRTax25LedgerAccountList  ledgerAccountList;
    Set                         recIdSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLedgerAccountList</Name>
				<Source><![CDATA[
    //    DimensionCriteria           dimensionCriteriaDefault;
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLedgerAccountList()
    {
        MainAccount mainAccount;
        RefRecId    chartOfAccount = LedgerChartOfAccounts::current();
        recIdSet = new Set(typeName2Type(extendedTypeStr(RecId)));

        while select RecId, Type from mainAccount
            where mainAccount.LedgerChartOfAccounts == chartOfAccount            &&
                  ((mainAccount.MainAccountId       >= expressionLine.RefIdFrom  &&
                    mainAccount.MainAccountId       <= expressionLine.RefIdTo)   ||
                   (mainAccount.MainAccountId       == expressionLine.RefIdFrom  &&
                    expressionLine.RefIdTo          == expressionLine.RefIdTo))
        {
            this.traverseLedgerAccountInterval(mainAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
    public void lookupFrom()
    {
        controlRefIdFrom.performTypeLookup(extendedTypeNum(MainAccountNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTo</Name>
				<Source><![CDATA[
    public void lookupTo()
    {
        controlRefIdTo.performTypeLookup(extendedTypeNum(MainAccountNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
    public AmountMST operand()
    {
        AmountMST                           ret;
        LedgerBalanceMainAccountAmountsReport_RU ledgerBalance;

        NoYes                       opening;
        DebCredProposal             debCred;
        TransDate                   balanceFromDate, balanceToDate;
        RTax25PeriodIterator        periodIterator;

        switch (expressionLine.LineType)
        {
            case RTax25StdLineType::DebActivity :
                    debCred         = DebCredProposal::Debit;
                    balanceFromDate = dateFrom;
                    balanceToDate   = dateTo;
                    opening         = NoYes::No;
                    periodIterator  = rTax25PeriodIterator.clone();
                    break;
            case RTax25StdLineType::CredActivity :
                    debCred         = DebCredProposal::Credit;
                    balanceFromDate = dateFrom;
                    balanceToDate   = dateTo;
                    opening         = NoYes::No;
                    periodIterator  = rTax25PeriodIterator.clone();
                    break;
            case RTax25StdLineType::DebBalance,
                 RTax25StdLineType::CredBalance :
                    debCred         = DebCredProposal::None;
                    balanceFromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), dateFrom);
                    balanceToDate   = (dateFrom - 1) > balanceFromDate ? (dateFrom - 1) : balanceFromDate;
                    periodIterator  = RTax25PeriodFactory::createIteratorDateRange(balanceToDate, balanceToDate);
                    opening         = NoYes::Yes;
                    break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }      

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
            {
                MainAccountEventArgs args = MainAccountEventArgs::construct();
                args.parmBalanceLedgerRecId(Ledger::current());

                MainAccount::updateBalancesWithArgs(args);
            }
            else
            {
                MainAccount::updateBalances();
            }
        }

        this.fillLedgerAccountList();

        ledgerBalance = LedgerBalanceMainAccountAmountsReport_RU::construct();

        ledgerBalance.parmAccountingDateRange(balanceFromDate, balanceToDate);
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmIncludeOpeningPeriod(opening);
        ledgerBalance.parmIncludeClosingPeriod(true);
        ledgerBalance.parmIncludeClosingPeriodBySystem(true);
        ledgerBalance.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
        ledgerBalance.parmRTax25PeriodIterator(periodIterator);

        if (debCred == DebCredProposal::Credit)
        {
            ledgerBalance.parmExcludeDebits(true);
        }
        else if (debCred == DebCredProposal::Debit)
        {
            ledgerBalance.parmExcludeCredits(true);
        }

        while select MainAccountId from ledgerAccountList
        {
            ledgerBalance.calculateBalance(MainAccount::find(ledgerAccountList.MainAccountId));

            ret += ledgerBalance.getAccountingCurrencyBalance();
        }

        if (expressionLine.LineType == RTax25StdLineType::DebBalance ||
            expressionLine.LineType == RTax25StdLineType::CredBalance)
        {
    /*      AX6_300564 Debit/Credit balances is always zero in counter sequence
            ledgerBalance       = LedgerBalanceMainAccountAmounts::construct();

            ledgerBalance.parmAccountingDateRange(balanceFromDate, balanceToDate);
            ledgerBalance.parmIncludeRegularPeriod(true);
            ledgerBalance.parmIncludeOpeningPeriod(false);
            ledgerBalance.parmIncludeClosingPeriod(true);
            ledgerBalance.parmIncludeClosingPeriodBySystem(true);
            ledgerBalance.parmPostingLayer(OperationsTax::Current);

            while select ledgerAccountList
            {
                ledgerBalance.calculateBalance(MainAccount::find(ledgerAccountList.MainAccountId));

                ret -= ledgerBalance.getAccountingCurrencyBalance();
            }*/
            ret = expressionLine.LineType == RTax25StdLineType::DebBalance ?
                       ret :
                      -ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseLedgerAccountInterval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void traverseLedgerAccountInterval(MainAccount _mainAccount)
    {
        DimensionAttributeValueTotallingCriteria totallingCriteria;
        DimensionAttributeValue                  dimAttrValue;
        MainAccount                              mainAccount;
        RefRecId                                 chartOfAccount = LedgerChartOfAccounts::current();

        if (recIdSet.in(_mainAccount.RecId))
            return;
        recIdSet.add(_mainAccount.RecId);

        if (_mainAccount.transactionAccount())
        {
            ledgerAccountList.MainAccountId = _mainAccount.RecId;
            ledgerAccountList.insert();
        }

        dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
            DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount),
            _mainAccount.RecId,
            false,
            false);

        while select FromValue, ToValue from totallingCriteria
            where totallingCriteria.DimensionAttributeValue == dimAttrValue.RecId
        {
            while select mainAccount
                where mainAccount.MainAccountId >= totallingCriteria.FromValue
                   && mainAccount.MainAccountId <= totallingCriteria.ToValue
                   && mainAccount.LedgerChartOfAccounts == chartOfAccount
            {
                this.traverseLedgerAccountInterval(mainAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(true);

        controlRefIdFrom.lookupButton(FormLookupButton::Always);
        controlRefIdTo.lookupButton(FormLookupButton::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (expressionLine.RefIdFrom &&
                ! MainAccount::findByMainAccountId(expressionLine.RefIdFrom).RecId)
            {
                ret = checkFailed(strFmt("@SYS9779", expressionLine.RefIdFrom));
            }

            if (expressionLine.RefIdTo &&
                ! MainAccount::findByMainAccountId(expressionLine.RefIdTo).RecId)
            {
                ret = checkFailed(strFmt("@SYS9779", expressionLine.RefIdTo));
            }

            if (expressionLine.RefIdTo && ! expressionLine.RefIdFrom)
            {
                ret = checkFailed(strFmt("@SYS26332", "@SYS4083"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU     correctedPeriodDate, tmpDate;
        DebCredProposal      debCred;

        LedgerBalanceMainAccountAmountsReport_RU ledgerBalance;

        switch (expressionLine.LineType)
        {
            case RTax25StdLineType::DebActivity :
                    debCred         = DebCredProposal::Debit;
                    break;
            case RTax25StdLineType::CredActivity :
                    debCred         = DebCredProposal::Credit;
                    break;
            case RTax25StdLineType::DebBalance,
                 RTax25StdLineType::CredBalance :
                    debCred         = DebCredProposal::None;
                    break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.fillLedgerAccountList();

        ledgerBalance = LedgerBalanceMainAccountAmountsReport_RU::construct();

        ledgerBalance.parmAccountingDateRange(_fromDateCalc, _toDateCalc);
        ledgerBalance.parmReportingDateRange(dateNull(), _toDateCorr);
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmIncludeOpeningPeriod(false);
        ledgerBalance.parmIncludeClosingPeriod(true);
        ledgerBalance.parmIncludeClosingPeriodBySystem(true);
        ledgerBalance.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));

        if (debCred == DebCredProposal::Credit)
        {
            ledgerBalance.parmExcludeDebits(true);
        }
        else if (debCred == DebCredProposal::Debit)
        {
            ledgerBalance.parmExcludeCredits(true);
        }

        while select MainAccountId from ledgerAccountList
        {
            tmpDate = ledgerBalance.correctedPeriodDate(MainAccount::find(ledgerAccountList.MainAccountId));

            if (!correctedPeriodDate || (tmpDate && correctedPeriodDate > tmpDate))
            {
                correctedPeriodDate = tmpDate;
            }
        }

        return correctedPeriodDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>