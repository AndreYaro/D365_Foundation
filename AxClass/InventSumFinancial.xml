<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumFinancial</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumFinancial
{
    TransDate       perDate;
    ItemId          itemId;
    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;
    InventQty       qty;
    CostAmount      value;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(
        TransDate       _perDate,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        perDate             = _perDate;
        itemId              = _itemId;
        inventDimCriteria   = _inventDimCriteria;
        inventDimParm       = _inventDimParm;

        this.setValueQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        InventQty   qty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
        protected  void setValueQty()
    {
        InventTrans             inventTrans;
        InventTransPosting      inventTransPosting;
        InventDim               inventDim;
        InventSum               inventSum = InventSum::findSum(itemId,inventDimCriteria,inventDimParm,InventSumFields::Financial);

        qty    = inventSum.PostedQty;
        value  = inventSum.PostedValue;

        if (! inventDimParm.isFlagSelective())
        {
            select forceplaceholders TableId from inventTransPosting
                where inventTransPosting.ItemId                 == itemId
                  &&  inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                  &&  inventTransPosting.TransDate              >  perDate
            join sum(CostAmountPosted),sum(Qty) from inventTrans
                where inventTrans.Voucher                       == inventTransPosting.Voucher
                  &&  inventTrans.DateFinancial                 == inventTransPosting.TransDate
                  &&  inventTrans.InventTransOrigin             == inventTransPosting.InventTransOrigin
                  &&  inventTrans.PackingSlipReturned           == NoYes::No
            #inventDimExistsjoin(inventTrans.InventDimId,inventDim,InventDimCriteria,InventDimParm);
        }
        else
        if (inventDimParm.InventSerialIdFlag && inventDimCriteria.InventSerialId)
        {
            #inventDimSelect(inventDim,inventDimCriteria,inventDimParm,forcePlaceholders tableId from,serialIdIdx)
            join sum(CostAmountPosted),sum(Qty) from inventTrans
                where inventTrans.InventDimId                   == inventDim.InventDimId
            join TableId from inventTransPosting
                where inventTransPosting.ItemId                 == itemId
                  &&  inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                  &&  inventTransPosting.TransDate              >  perDate
                  &&  inventTrans.Voucher                       == inventTransPosting.Voucher
                  &&  inventTrans.DateFinancial                 == inventTransPosting.TransDate
                  &&  inventTrans.InventTransOrigin             == inventTransPosting.InventTransOrigin
                  &&  inventTrans.PackingSlipReturned           == NoYes::No;
        }
        else
        {
            select TableId from inventTransPosting
                where inventTransPosting.ItemId                 == itemId
                  &&  inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                  &&  inventTransPosting.TransDate              >  perDate
            join sum(CostAmountPosted),sum(Qty) from inventTrans
                where inventTrans.Voucher                       == inventTransPosting.Voucher
                  &&  inventTrans.DateFinancial                 == inventTransPosting.TransDate
                  &&  inventTrans.InventTransOrigin             == inventTransPosting.InventTransOrigin
                  &&  inventTrans.PackingSlipReturned           == NoYes::No
            #inventDimExistsJoin(inventTrans.InventDimId,inventDim,InventDimCriteria,InventDimParm);
        }

        qty   -= inventTrans.Qty;
        value -= inventTrans.CostAmountPosted;
        value -= InventSettlement::dateCostAmountAdjustment(perDate,itemId,inventDimCriteria,inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
        CostAmount value()
    {
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
        static InventSumFinancial newInventTable(TransDate _perDate, InventTable _inventTable)
    {
        return  new InventSumFinancialItem(_perDate,_inventTable.ItemId,null,null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSumReport</Name>
				<Source><![CDATA[
        static InventSumFinancial newSumReport(
        TransDate       _perDate,
        InventSum       _inventSum,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        return new InventSumFinancial(
            _perDate,
            _inventSum.ItemId,
            _inventDim,
            _inventDimParm);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>