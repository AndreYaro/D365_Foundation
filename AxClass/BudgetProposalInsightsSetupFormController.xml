<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProposalInsightsSetupFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetProposalInsightsSetupFormController
{
    private PowerAIInsightsStateMachineFacade stateMachineFacade;
    private FinanceInsightsInitiatorServiceITableMetadataClient tableMetadataClient;

    internal FormGroupControl TitleGroup;
    internal FormStaticTextControl Title;
    internal FormTabControl Body;
    internal FormTabPageControl TermsAcceptance;
    internal FormStaticTextControl TermsPrimaryText;
    internal FormFunctionButtonControl TermsViewFieldsUsed;
    internal FormStaticTextControl TermsDisableFeatureText;
    internal FormCheckBoxControl AcceptTermsAndConditions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        stateMachineFacade = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::BudgetProposalInsightsFeatureNameV2);
        tableMetadataClient = FinanceInsightsInitiatorServiceBudgetProposalTimeSeriesClient::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverrides</Name>
				<Source><![CDATA[
    internal void registerOverrides()
    {
        AcceptTermsAndConditions.registerOverrideMethod(methodStr(FormCheckBoxControl, modified),
            methodStr(BudgetProposalInsightsSetupFormController, AcceptTermsModified),
            this);

        TermsViewFieldsUsed.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked),
            methodStr(BudgetProposalInsightsSetupFormController, viewFieldsUsedClicked),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    internal void processEvent(PowerAIInsightsStateMachineEvent _event)
    {
        this.processPowerAIEvent(PowerAIInsightsEventNoArgs::newFromEvent(_event));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPowerAIEvent</Name>
				<Source><![CDATA[
    internal void processPowerAIEvent(PowerAIInsightsEvent _event)
    {
        stateMachineFacade.processEvent(_event);

        this.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    internal void refresh()
    {
        if (this.anyControlIsNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PowerAIInsightsStateMachineState state = stateMachineFacade.getCurrentState();

        SysPowerAIModelState powerAIModelState;

        switch (state)
        {
            case BudgetProposalInsightsStateMachineState::Disabled:
                this.setDisabledMetadata();
                break;

            case BudgetProposalInsightsStateMachineState::Enabled:
                this.setEnabledMetadata();
                break;

            case BudgetProposalInsightsStateMachineState::BatchJobQueued,
                 BudgetProposalInsightsStateMachineState::BatchJobInProgress,
                 BudgetProposalInsightsStateMachineState::BatchJobSucceeded:
                this.setInitializingMetadata(state);
                break;

            case BudgetProposalInsightsStateMachineState::BatchJobFailed,
                 BudgetProposalInsightsStateMachineState::ExternalServiceCallFailed:
                this.setFailedMetadata(state);
                break;

            case BudgetProposalInsightsStateMachineState::ExternalDataServicePolling:
                DataJobServiceState dataJobServiceState = stateMachineFacade.fetchPipelineState();
                DataJobServiceInitializeStatus initializeStatus = dataJobServiceState.parmInitializationStatus();
                
                switch (initializeStatus)
                {
                    case DataJobServiceInitializeStatus::Canceled,
                         DataJobServiceInitializeStatus::Failed:
                        this.setFailedMetadata(state);
                        break;

                    case DataJobServiceInitializeStatus::Initializing,
                         DataJobServiceInitializeStatus::Running:
                        this.setInitializingMetadata(state);
                        break;

                    case DataJobServiceInitializeStatus::Completed:
                        powerAIModelState = dataJobServiceState.parmPowerAIModelState();

                        if (powerAIModelState != null)
                        {
                            this.setPowerAIMetadata(powerAIModelState);
                        }
                        else
                        {
                            this.setUnknownStatusMetadata();
                        }
                        break;

                    case DataJobServiceInitializeStatus::None:
                        this.setUnknownStatusMetadata();
                        break;

                    default:
                        this.setUnknownStatusMetadata();
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIMetadata(SysPowerAIModelState _powerAIModelState)
    {
        switch (_powerAIModelState.parmStatus())
        {
            case SysPowerAIStatus::Scheduled, SysPowerAIStatus::Published:
                this.setPowerAISuccessMetadata(_powerAIModelState);
                break;

            case SysPowerAIStatus::InitializeFailed, SysPowerAIStatus::PublishFailed, SysPowerAIStatus::ScheduleFailed, SysPowerAIStatus::TrainingFailed:
                this.setPowerAIFailedMetadata(_powerAIModelState);
                break;

            case SysPowerAIStatus::Initializing:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeatureInitializing");
                break;

            case SysPowerAIStatus::Created, SysPowerAIStatus::TrainingDraftCreated, SysPowerAIStatus::TrainingInProgress, SysPowerAIStatus::TrainingComplete:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeatureTraining");
                break;

            case SysPowerAIStatus::PublishingDraftCreated, SysPowerAIStatus::Publishing:
                this.setPowerAIInProgressMetadata(_powerAIModelState, "@FinanceInsightsContracts:AIFeaturePublishing");
                break;

            case SysPowerAIStatus::Unknown:
                this.setUnknownStatusMetadata();
                break;

            default:
                this.setUnknownStatusMetadata();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyControlIsNull</Name>
				<Source><![CDATA[
    private boolean anyControlIsNull()
    {
        return TitleGroup == null
            || Title == null
            || Body == null
            || TermsAcceptance == null
            || TermsPrimaryText == null
            || TermsViewFieldsUsed == null
            || TermsDisableFeatureText == null
            || AcceptTermsAndConditions == null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisabledMetadata</Name>
				<Source><![CDATA[
    private void setDisabledMetadata()
    {
        TermsDisableFeatureText.visible(false);
        AcceptTermsAndConditions.value(false);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledMetadata</Name>
				<Source><![CDATA[
    private void setEnabledMetadata()
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitializingMetadata</Name>
				<Source><![CDATA[
    private void setInitializingMetadata(PowerAIInsightsStateMachineState _state)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitializingAndRestartableMetadata</Name>
				<Source><![CDATA[
    private void setInitializingAndRestartableMetadata(PowerAIInsightsStateMachineState _state)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFailedMetadata</Name>
				<Source><![CDATA[
    private void setFailedMetadata(PowerAIInsightsStateMachineState _state)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAISuccessMetadata</Name>
				<Source><![CDATA[
    private void setPowerAISuccessMetadata(SysPowerAIModelState _powerAIState)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIFailedMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIFailedMetadata(SysPowerAIModelState _powerAIState)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPowerAIInProgressMetadata</Name>
				<Source><![CDATA[
    private void setPowerAIInProgressMetadata(SysPowerAIModelState _powerAIModelState, LabelId _statusMessageLabelId)
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnknownStatusMetadata</Name>
				<Source><![CDATA[
    private void setUnknownStatusMetadata()
    {
        TermsDisableFeatureText.visible(true);
        AcceptTermsAndConditions.value(true);
        AcceptTermsAndConditions.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptTermsModified</Name>
				<Source><![CDATA[
    private boolean acceptTermsModified(FormCheckBoxControl _control)
    {
        boolean modified = true;

        int value = _control.value();

        if (value == 1)
        {
            this.processEvent(PowerAIInsightsEventConstants::AcceptedTermsClicked);
        }
        else if (value == 0)
        {
            if (Box::okCancel("@SysPowerAI:DisablingFeatureWarningBody", DialogButton::Cancel, "@SysPowerAI:UncheckAcceptTermsAndConditionsWarning") == DialogButton::Ok)
            {
                this.processEvent(PowerAIInsightsEventConstants::DisableTermsClicked);
            }
            else
            {
                modified = false;
            }
        }

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewFieldsUsedClicked</Name>
				<Source><![CDATA[
    private void viewFieldsUsedClicked(FormFunctionButtonControl _control)
    {
        Args args = new Args();
        args.parmObject(FinanceInsightsTransformationFetchTableMetadataForDisplay::fetchTableMetadata(tableMetadataClient, funcName()));
        
        _control.menufunction().run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>