<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationEstablishConnectionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CLMIntegrationEstablishConnectionController</c> class is used as entry point for establishing connection with the CLM.
/// </summary>
internal final class CLMIntegrationEstablishConnectionController
{
    private CLMIntegrationServiceInstance serviceInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(CLMIntegrationServiceInstance))
        {
            throw error(Error::missingRecord(tableId2PName(tableNum(CLMIntegrationServiceInstance))));
        }

        CLMIntegrationEstablishConnectionController::newFromServiceInstance(_args.record()).establishConnection();
        CLMIntegrationEstablishConnectionController::refreshCaller(_args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>establishConnection</Name>
				<Source><![CDATA[
    internal void establishConnection()
    {
        CLMIntegrationEstablishConnectionWizard wizard = CLMIntegrationEstablishConnectionWizard::construct();

        wizard.initDefaultValues(serviceInstance);

        if (wizard.prompt())
        {
            wizard.run();
        }

        if (wizard.closeOK())
        {
            this.preInvokeServiceOperation(wizard);
            CLMIntegrationIResponseContract responseContract = this.invokeServiceOperation(wizard);
            this.processResponse(responseContract, wizard);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInvokeServiceOperation</Name>
				<Source><![CDATA[
    private void preInvokeServiceOperation(CLMIntegrationEstablishConnectionWizard _wizard)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.createOrUpdateAADClient(_wizard);
            this.assignSecurityRoles(_wizard.parmIntegrationUserID());

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeServiceOperation</Name>
				<Source><![CDATA[
    private CLMIntegrationIResponseContract invokeServiceOperation(CLMIntegrationEstablishConnectionWizard _wizard)
    {
        CLMIntegrationIResponseContract _responseContract;

        try
        {
            CLMIntegrationServiceOperation serviceOperation =
                CLMIntegrationServiceOperation::findByBusinessOperation(CLMIntegrationBusinessOperation::InitiateConnection);

            CLMIntegrationConnectionInitiationContract contract = CLMIntegrationConnectionInitiationContract::construct();
            contract.initFromWizard(_wizard);

            _responseContract = CLMIntegrationServiceClient::getServiceOperation(serviceOperation).invoke(contract);
        }
        catch (Exception::CLRError)
        {
            error("@CLMIntegration:WizardConnectionEstablishmentFailed");

            System.Exception clrException = CLRInterop::getLastException();
            if (clrException)
            {
                error(clrException.ToString());
            }
        }
        catch
        {
            error("@CLMIntegration:WizardConnectionEstablishmentFailed");
        }

        return _responseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResponse</Name>
				<Source><![CDATA[
    private void processResponse(
        CLMIntegrationIResponseContract _responseContract,
        CLMIntegrationEstablishConnectionWizard _wizard)
    {
        if (_responseContract && _responseContract is CLMIntegrationConnectionInitiationResponseContract)
        {
            CLMIntegrationConnectionInitiationResponseContract responseContract = _responseContract as CLMIntegrationConnectionInitiationResponseContract;

            this.doProcessResponse(responseContract, _wizard);

            if (responseContract.parmStatus() == CLMIntegrationConnectionEstablishmentStatus::Success)
            {
                info("@CLMIntegration:ConnectionEstablishmentSuccessMessage");
            }
            else
            {
                setprefix("@CLMIntegration:WizardConnectionEstablishmentFailed");

                error(responseContract.parmErrorMessage());

                if (responseContract.parmErrorCallStack())
                {
                    error(responseContract.parmErrorCallStack());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcessResponse</Name>
				<Source><![CDATA[
    private void doProcessResponse(
        CLMIntegrationConnectionInitiationResponseContract _responseContract,
        CLMIntegrationEstablishConnectionWizard _wizard)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            serviceInstance.reread();
            serviceInstance.selectForUpdate(true);
            serviceInstance.EstablishmentStatus = _responseContract.parmStatus();
            serviceInstance.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateAADClient</Name>
				<Source><![CDATA[
    private void createOrUpdateAADClient(CLMIntegrationEstablishConnectionWizard _wizard)
    {
        SysAADClientTable sysAADClientTable;

        select firstonly forupdate sysAADClientTable
            where sysAADClientTable.AADClientId == _wizard.parmClientID();

        if (!sysAADClientTable)
        {
            sysAADClientTable.initValue();
            sysAADClientTable.AADClientId = _wizard.parmClientID();
        }

        sysAADClientTable.Name = serviceInstance.InstanceName;
        sysAADClientTable.UserId = _wizard.parmIntegrationUserID();
        sysAADClientTable.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSecurityRoles</Name>
				<Source><![CDATA[
    private void assignSecurityRoles(SysUserId _userId)
    {
        this.clearExistingUserRoles(_userId);
        Global::assignSecurityRoleToUser(_userId, roleStr(CLMIntegrationRole));
        Global::assignSecurityRoleToUser(_userId, roleStr(XDSDataAccessPolicyBypassRole));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistingUserRoles</Name>
				<Source><![CDATA[
    private void clearExistingUserRoles(SysUserId _userId)
    {
        #Admin

        if (_userId != #AdminUser)
        {
            SecurityUserRole userRole;

            delete_from userRole
                where userRole.User == _userId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    private static void refreshCaller(Common _caller)
    {
        if (FormDataUtil::isFormDataSource(_caller))
        {
            FormDataUtil::getFormDataSource(_caller).research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromServiceInstance</Name>
				<Source><![CDATA[
    internal static CLMIntegrationEstablishConnectionController newFromServiceInstance(CLMIntegrationServiceInstance _serviceInstance)
    {
        CLMIntegrationEstablishConnectionController establishConnection = new CLMIntegrationEstablishConnectionController();

        establishConnection.serviceInstance = _serviceInstance;

        return establishConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>