<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferShipReceiveDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider <c>InventTransferShipReceiveDP_IN</c> class
/// for <c>InventTransferReceive_IN</c> and <c>InventTransferShip_IN</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventTransfer))
]
public class InventTransferShipReceiveDP_IN extends SRSReportDataProviderBase
{
    TmpInventTransfer_IN      tmpInventTransfer;
    TaxRegistrationNumbers_IN taxRegistrationNumber;
    InventTransferId          tempTransferId;
    Counter                   currentPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the instance of table <c>InventTransferJour</c>.
    /// </summary>
    /// <param name="_inventTransferJour">
    /// Instance of table <c>InventTransferJour</c>.
    /// </param>
    /// <returns>
    /// returns instance of table <c>InventTransferJour</c>.
    /// </returns>
    public InventTransferLine getInventTransferLine(InventTransferJour _inventTransferJour)
    {
        InventTransferLine  inventTransferLine;

        select firstOnly inventTransferLine
            where inventTransferLine.TransferId == _inventTransferJour.TransferId;

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpInventTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Returns temporary table <c>TmpInventTransfer_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpInventTransfer_IN))
    ]
    public TmpInventTransfer_IN getTmpInventTransfer()
    {
        return tmpInventTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpInventTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into Temporary table <c>TmpInventTransfer_IN</c>.
    /// </summary>
    /// <param name="_inventTransferJour">
    /// Instance of table <c>InventTransferJour</c>.
    /// </param>
    /// <param name="_inventTransferJourLine">
    /// Instance of table <c>InventTransferJourLine</c>.
    /// </param>
    /// <param name="_inventDim">
    /// Instance of table <c>InventDim</c>.
    /// </param>
    /// <param name="_companyinfo">
    /// Instance of table <c>CompanyInfo</c>.
    /// </param>
    private void insertTmpInventTransfer(
        InventTransferJour     _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        InventDim              _inventDim,
        CompanyInfo            _companyinfo)
    {
        TransTaxInformation transTaxInformation;

        tmpInventTransfer.ToAddressName        = _inventTransferJour.ToAddressName;
        tmpInventTransfer.TransferId           = _inventTransferJour.TransferId;
        tmpInventTransfer.TrackingId           = _inventTransferJour.TrackingId;
        tmpInventTransfer.TransDate            = _inventTransferJour.TransDate;
        tmpInventTransfer.InventLocationIdFrom = _inventTransferJour.InventLocationIdFrom;
        tmpInventTransfer.InventLocationIdTo   = _inventTransferJour.InventLocationIdTo;

        tmpInventTransfer.DlvModeId   = _inventTransferJour.DlvModeId;
        tmpInventTransfer.DlvTermId   = _inventTransferJour.DlvTermId;
        tmpInventTransfer.VoucherId   = _inventTransferJour.VoucherId;
        tmpInventTransfer.FromAddress = _inventTransferJour.fromAddress();
        tmpInventTransfer.ToAddress   =  this.postalAddress(_inventTransferJour);

        if (_inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
        {
            tmpInventTransfer.NetAmtReceive = _inventTransferJourLine.NetAmtReceive_IN;
            tmpInventTransfer.TotalAmtRecve = _inventTransferJour.invTotalAmtRecve_IN();
        }
        else if (_inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
        {
            tmpInventTransfer.NetAmtShip = _inventTransferJourLine.NetAmtShip_IN;
            tmpInventTransfer.TotalAmtShip  = _inventTransferJour.invTotalAmtShip_IN();
        }

        tmpInventTransfer.ExciseAmt     = _inventTransferJourLine.ExciseAmt_IN;
        tmpInventTransfer.SalesTaxAmt   = _inventTransferJourLine.SalesTaxAmt_IN;
        tmpInventTransfer.VATAmt        = _inventTransferJourLine.VATAmt_IN;
        tmpInventTransfer.RetentionAmt  = _inventTransferJour.invVatRetention_IN();
        tmpInventTransfer.CurrencyCode  = _inventTransferJour.currencyInfo_IN();

        tmpInventTransfer.ItemId        = _inventTransferJourLine.ItemId;
        tmpInventTransfer.LineNum       = _inventTransferJourLine.LineNum;
        tmpInventTransfer.QtyReceived   = _inventTransferJourLine.QtyReceived;
        tmpInventTransfer.QtyShipped    = _inventTransferJourLine.QtyShipped;
        tmpInventTransfer.QtyScrapped   = _inventTransferJourLine.QtyScrapped;
        tmpInventTransfer.inventUnit    = _inventTransferJourLine.inventUnit();
        tmpInventTransfer.UnitId        = _inventTransferJourLine.UnitId;
        tmpInventTransfer.UnitPrice     = _inventTransferJourLine.UnitPrice_IN;
        tmpInventTransfer.ItemName      = _inventTransferJourLine.itemName();

        if (_inventDim.RecId)
        {
            tmpInventTransfer.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
        }

        tmpInventTransfer.Giro      = _companyinfo.Giro;
        tmpInventTransfer.RegNum    = _companyinfo.RegNum;
        tmpInventTransfer.CoRegNum  = _companyinfo.CoRegNum;
        tmpInventTransfer.VATNum    = _companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _inventTransferJour.TransDate);
        tmpInventTransfer.Phone     = _companyinfo.phone();
        tmpInventTransfer.TeleFax   = _companyinfo.teleFax();
        tmpInventTransfer.Name      = DirpartyTable::findRec(_companyinfo.RecId).Name;

        InventTransferLine inventTransferLine = this.getInventTransferLine(_inventTransferJour);

        if (_inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
        {
            transTaxInformation         = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventTransferLine, false, TransTaxInformationType_IN::InventTransferFrom);
            tmpInventTransfer.ECCNumber = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, TaxType_IN::Excise).RegistrationNumber;
        }
        else if (_inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
        {
            transTaxInformation         = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventTransferLine, false, TransTaxInformationType_IN::InventTransferTo);
            tmpInventTransfer.ECCNumber = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, TaxType_IN::Excise).RegistrationNumber;
        }

        tmpInventTransfer.TINNumber         = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, TaxType_IN::VAT).RegistrationNumber;
        tmpInventTransfer.SalesTaxRegNumber = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, TaxType_IN::SalesTax).RegistrationNumber;

        if (tempTransferId == tmpInventTransfer.TransferId)
        {
            tmpInventTransfer.CurrentPage = currentPage;
        }
        else
        {
            currentPage += 1;
            tmpInventTransfer.CurrentPage = currentPage;
            tempTransferId = tmpInventTransfer.TransferId;
        }

        tmpInventTransfer.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the address.
    /// </summary>
    /// <param name="_inventTransferJour">
    /// Instance of table <c>InventTransferJour</c>.
    /// </param>
    /// <returns>
    /// returns address.
    /// </returns>
    public LogisticsAddressing postalAddress(InventTransferJour _inventTransferJour)
    {
        LogisticsPostalAddress address;
        InventTransferTable    inventTransferTable;

        select firstOnly ToPostalAddress
            from inventTransferTable
            where inventTransferTable.TransferId == _inventTransferJour.TransferId;

        return LogisticsPostalAddress::findRecId(inventTransferTable.ToPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        boolean                first = true;
        #define.CurrentPageNum(1)

        currentPage = #CurrentPageNum;
        Query query = this.parmQuery();
        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            InventTransferJour     inventTransferJour     = qr.get(tableNum(InventTransferJour));
            InventTransferJourLine inventTransferJourLine = qr.get(tableNum(InventTransferJourLine));
            InventDim              inventDim              = qr.get(tableNum(InventDim));
            CompanyInfo            companyinfo            = qr.get(tableNum(Companyinfo));

            if (first)
            {
                tempTransferId = inventTransferJour.TransferId;
                first = false;
            }

            this.insertTmpInventTransfer(
                inventTransferJour,
                inventTransferJourLine,
                inventDim,
                companyinfo);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>