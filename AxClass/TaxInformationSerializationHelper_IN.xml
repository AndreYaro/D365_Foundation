<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInformationSerializationHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax information serialization helper class.
/// </summary>
public class TaxInformationSerializationHelper_IN
{
    #define.TinRegistrationNumberXmlNodeName('TinRegistrationNumber')
    #define.GstinRegistrationNumberXmlNodeName('GstinRegistrationNumber')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertTaxInformationFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes a <c>TaxInformation_IN</c> record from XML.
    /// </summary>
    /// <param name = "taxInformationXmlNode">The XML node.</param>
    /// <returns>The <c>TaxInformation_IN</c> record.</returns>
    public static TaxInformation_IN convertTaxInformationFromXml(XmlNode taxInformationXmlNode)
    {
        TaxInformation_IN result;
        XmlElement xmlElement;

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, RecId));
        if (xmlElement)
        {
            result.RecId = str2recId(xmlElement.text());
        }

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, IsPrimary));
        if (xmlElement)
        {
            result.IsPrimary = str2Int(xmlElement.text());
        }

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, Name));
        if (xmlElement)
        {
            result.Name = xmlElement.text();
        }

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, RegistrationLocation));
        if (xmlElement)
        {
            result.RegistrationLocation = str2recId(xmlElement.text());
        }

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, TIN));
        if (xmlElement)
        {
            result.TIN = str2recId(xmlElement.text());
        }

        xmlElement = taxInformationXmlNode.getNamedElement(fieldStr(TaxInformation_IN, GSTIN));
        if (xmlElement)
        {
            result.GSTIN = str2recId(xmlElement.text());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTaxInformationToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a <c>TaxInformation_IN</c> record into an XML document.
    /// </summary>
    /// <param name = "taxInformation">The record.</param>
    /// <param name = "xmlDoc">The XML document.</param>
    /// <param name = "xmlNodeName">The node name to create.</param>
    /// <returns>The created XML node.</returns>
    public static XmlElement convertTaxInformationToXml(TaxInformation_IN taxInformation, XmlDocument xmlDoc, str xmlNodeName)
    {
        XmlElement xmlElement;
        XmlElement xmlRoot;

        xmlRoot = xmlDoc.createElement(xmlNodeName);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, RecId));
        xmlElement.text(int642Str(taxInformation.RecId));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, IsPrimary));
        xmlElement.text(int2Str(taxInformation.IsPrimary));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, Name));
        xmlElement.text(taxInformation.Name);
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, RegistrationLocation));
        xmlElement.text(int642Str(taxInformation.RegistrationLocation));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, TIN));
        xmlElement.text(int642Str(taxInformation.TIN));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformation_IN, GSTIN));
        xmlElement.text(int642Str(taxInformation.GSTIN));
        xmlRoot.appendChild(xmlElement);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTaxRegistrationNumberFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes a <c>TaxRegistrationNumbers_IN</c> record from XML.
    /// </summary>
    /// <param name = "taxRegistrationNumberXmlNode">The XML node.</param>
    /// <returns>The <c>TaxRegistrationNumbers_IN</c> record.</returns>
    public static TaxRegistrationNumbers_IN convertTaxRegistrationNumberFromXml(XmlNode taxRegistrationNumberXmlNode)
    {
        TaxRegistrationNumbers_IN result;
        XmlElement xmlElement;

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, BusinessVerticals));
        if (xmlElement)
        {
            result.BusinessVerticals = str2Int64(xmlElement.text());
        }

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, RecId));
        if (xmlElement)
        {
            result.RecId = str2int64(xmlElement.text());
        }

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, RegistrationNumber));
        if (xmlElement)
        {
            result.RegistrationNumber = xmlElement.text();
        }

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, RegistrationType));
        if (xmlElement)
        {
            result.RegistrationType = str2int(xmlElement.text());
        }

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, TaxType));
        if (xmlElement)
        {
            result.TaxType = str2int(xmlElement.text());
        }

        xmlElement = taxRegistrationNumberXmlNode.getNamedElement(fieldStr(TaxRegistrationNumbers_IN, Type));
        if (xmlElement)
        {
            result.Type = str2int(xmlElement.text());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTaxRegistrationNumberToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a <c>TaxRegistrationNumbers_IN</c> record to XML.
    /// </summary>
    /// <param name = "taxRegistrationNumber">The record.</param>
    /// <param name = "xmlDoc">The XML document.</param>
    /// <param name = "xmlNodeName">The node name to create.</param>
    /// <returns>The created XML node.</returns>
    public static XmlElement convertTaxRegistrationNumberToXml(TaxRegistrationNumbers_IN taxRegistrationNumber, XmlDocument xmlDoc, str xmlNodeName)
    {
        XmlElement xmlRoot;
        XmlElement xmlElement;

        xmlRoot = xmlDoc.createElement(xmlNodeName);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, BusinessVerticals));
        xmlElement.text(int642Str(taxRegistrationNumber.BusinessVerticals));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, RecId));
        xmlElement.text(int642Str(taxRegistrationNumber.RecId));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, RegistrationNumber));
        xmlElement.text(taxRegistrationNumber.RegistrationNumber);
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, RegistrationType));
        xmlElement.text(int2Str(taxRegistrationNumber.RegistrationType));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, TaxType));
        xmlElement.text(int2Str(taxRegistrationNumber.TaxType));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxRegistrationNumbers_IN, Type));
        xmlElement.text(int2Str(taxRegistrationNumber.Type));
        xmlRoot.appendChild(xmlElement);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTaxInformationCustTableToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a <c>TaxInformationCustTable_IN</c> record to XML.
    /// </summary>
    /// <param name = "taxInformationCustTable">The record.</param>
    /// <param name = "xmlDoc">The XML document.</param>
    /// <param name = "xmlNodeName">The XML node name.</param>
    /// <returns>The created XML node.</returns>
    public static XmlElement convertTaxInformationCustTableToXml(TaxInformationCustTable_IN taxInformationCustTable, XmlDocument xmlDoc, str xmlNodeName)
    {
        XmlElement xmlRoot;
        XmlElement xmlElement;

        xmlRoot = xmlDoc.createElement(xmlNodeName);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, CustTable));
        xmlElement.text(taxInformationCustTable.CustTable);
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, DataAreaId));
        xmlElement.text(taxInformationCustTable.DataAreaId);
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, IsForeign));
        xmlElement.text(int642Str(taxInformationCustTable.IsForeign));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, IsPreferential));
        xmlElement.text(int642Str(taxInformationCustTable.IsPreferential));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, NatureOfAssessee));
        xmlElement.text(int642Str(taxInformationCustTable.NatureOfAssessee));
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, PANNumber));
        xmlElement.text(taxInformationCustTable.PANNumber);
        xmlRoot.appendChild(xmlElement);

        xmlElement = xmlDoc.createElement(fieldStr(TaxInformationCustTable_IN, RecId));
        xmlElement.text(int642Str(taxInformationCustTable.RecId));
        xmlRoot.appendChild(xmlElement);

        return xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes a tax information (with nested tax registration number entities) from an XML.
    /// </summary>
    /// <param name = "taxInformationXml">The XML to deserialize from.</param>
    /// <returns>The container with the deserialized tax information and tax registration number entities.</returns>
    public static container deserializeTaxInformation(str taxInformationXml)
    {
        TaxInformation_IN taxInformation;
        TaxRegistrationNumbers_IN tin;
        TaxRegistrationNumbers_IN gstin;

        XmlDocument xmlDoc;
        XmlNode taxInformationXmlNode;
        XmlNode gstinXmlNode;
        XmlNode tinXmlNode;

        xmlDoc = new XmlDocument();
        xmlDoc.loadXml(taxInformationXml);
        taxInformationXmlNode = xmlDoc.root();
        taxInformation = taxInformationXmlNode ? TaxInformationSerializationHelper_IN::convertTaxInformationFromXml(taxInformationXmlNode) : null;

        if (taxInformationXmlNode)
        {
            tinXmlNode = taxInformationXmlNode.getNamedElement(#TinRegistrationNumberXmlNodeName);
            tin = tinXmlNode ? TaxInformationSerializationHelper_IN::convertTaxRegistrationNumberFromXml(tinXmlNode) : null;

            gstinXmlNode = taxInformationXmlNode.getNamedElement(#GstinRegistrationNumberXmlNodeName);
            gstin = gstinXmlNode ? TaxInformationSerializationHelper_IN::convertTaxRegistrationNumberFromXml(gstinXmlNode) : null;
        }

        return [taxInformation, tin, gstin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInformationXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an XML-serialized collection of tax information entities for the specified registration location.
    /// </summary>
    /// <param name = "registrationLocation">The registration location.</param>
    /// <returns>The serialized collection of tax information entitities.</returns>
    /// <remarks>
    /// The primary tax information entity contains nested tax registration numbers.
    /// </remarks>
    public static XmlDocument getTaxInformationXml(RecId registrationLocation)
    {
        #define.RootNodeName('ArrayOfAddressTaxInformationIndia');
        #define.AddressTaxInformationXmlNodeName('AddressTaxInformationIndia');

        TaxInformation_IN taxInformation_IN;
        TaxRegistrationNumbers_IN taxRegistrationNumbers_IN;
        XmlElement taxInformationXmlElement;
        XmlElement taxRegistrationNumberXmlElement;

        XmlDocument xmlDoc = XmlDocument::newBlank();
        XmlElement xmlRoot = xmlDoc.createElement(#RootNodeName);
        xmlDoc.appendChild(xmlRoot);

        // Add the primary <c>TaxInformation_IN</c> record with TIN and GSTIN of type TaxRegistrationNumbers_IN.
        taxInformation_IN = TaxInformation_IN::findDefaultbyLocation(registrationLocation);

        if (taxInformation_IN)
        {
            taxInformationXmlElement = TaxInformationSerializationHelper_IN::convertTaxInformationToXml(taxInformation_IN, xmlDoc, #AddressTaxInformationXmlNodeName);
            xmlRoot.appendChild(taxInformationXmlElement);

            if (taxInformation_IN.TIN)
            {
                taxRegistrationNumbers_IN = TaxRegistrationNumbers_IN::find(taxInformation_IN.TIN);

                if (!taxRegistrationNumbers_IN)
                {
                    throw error(strFmt("@RetailTaxRegistrationId:TaxRegistrationNumberNotFound", int642Str(taxInformation_IN.TIN)));
                }

                taxRegistrationNumberXmlElement = TaxInformationSerializationHelper_IN::convertTaxRegistrationNumberToXml(
                    taxRegistrationNumbers_IN, xmlDoc, #TinRegistrationNumberXmlNodeName);

                taxInformationXmlElement.appendChild(taxRegistrationNumberXmlElement);
            }

            if (taxInformation_IN.GSTIN)
            {
                taxRegistrationNumbers_IN = TaxRegistrationNumbers_IN::find(taxInformation_IN.GSTIN);

                if (!taxRegistrationNumbers_IN)
                {
                    throw error(strFmt("@RetailTaxRegistrationId:TaxRegistrationNumberNotFound", int642Str(taxInformation_IN.GSTIN)));
                }

                taxRegistrationNumberXmlElement = TaxInformationSerializationHelper_IN::convertTaxRegistrationNumberToXml(
                    taxRegistrationNumbers_IN, xmlDoc, #GstinRegistrationNumberXmlNodeName);

                taxInformationXmlElement.appendChild(taxRegistrationNumberXmlElement);
            }
        }

        // Add non-primary <c>TaxInformation_IN</c> records.
        while select taxInformation_IN
            where taxInformation_IN.RegistrationLocation == registrationLocation &&
                taxInformation_IN.IsPrimary == NoYes::No
        {
            taxInformationXmlElement = TaxInformationSerializationHelper_IN::convertTaxInformationToXml(taxInformation_IN, xmlDoc, #AddressTaxInformationXmlNodeName);
            xmlRoot.appendChild(taxInformationXmlElement);
        }

        return xmlDoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>