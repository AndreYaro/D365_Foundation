<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementGenerateVendorInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPayStatementGenerateVendorInvoice</c> handles the logic for generating
/// vendor invoices for payroll liabilities.
/// </summary>
class PayrollPayStatementGenerateVendorInvoice extends PayrollPayStatementJournalizeBase implements BatchRetryable
{
    #ISOCountryRegionCodes
    HcmBenefitPlanLookup benefitPlanLookup;
    PayrollTaxCodeLookup taxCodeLookup;

    FormRun                 formRun;
    FormBuildComboBoxControl filterCriteriaBuildComboBoxControl;
    FormBuildStringControl  benefitPlanBuildStringControl;
    FormBuildStringControl  taxCodeBuildStringControl;
    FormBuildStringControl  vendorBuildStringControl;
    FormComboBoxControl     filterCriteriaComboBoxControl;
    FormStringControl       benefitPlanStringControl;
    FormStringControl       taxCodeStringControl;
    FormStringControl       vendorStringControl;
    boolean                 knownError;

    private const str vendorFilterCriteriaGroup = 'VendorFilterCriteriaGroup';
    private const str filterCriteriaControl = 'FilterCriteriaControl';
    private const str allInvoicesControl = 'AllInvoicesControl';
    private const str benefitPlanControl = 'BenefitPlanControl';
    private const str taxCodeControl = 'TaxCodeControl';
    private const str vendorControl = 'VendorControl';

    // Define the indices on the container used to store the fields used on invoice lines
    private const int accountingDate = 1;
    private const int ledgerDimension = 2;
    private const int vendAccountNum = 3;
    private const int taxCode = 4;
    private const int benefitPlan = 5;
    private const int payrollType = 6;
    private const int currentVersion = 1;
    private const int containerConLen = 6;

    #LOCALMACRO.CurrentList
        calledWithRecord,
        toDate,
        payCycleRecId,
        benefitPlanRecId,
        taxCodeRecId,
        vendAccount,
        callingObject
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>benefitPlanControl_lookup</Name>
				<Source><![CDATA[
    private void benefitPlanControl_lookup(FormStringControl _formStringControl)
    {
        if (!benefitPlanLookup)
        {
            benefitPlanLookup = HcmBenefitPlanLookup::newCustomOptions(false, PayrollType::Contribution, true);
        }
        benefitPlanLookup.lookupBenefitPlan(benefitPlanStringControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>benefitPlanControl_validate</Name>
				<Source><![CDATA[
    private boolean benefitPlanControl_validate(FormStringControl _formStringControl)
    {
        boolean isValid;

        isValid = benefitPlanStringControl.validate();

        if (isValid)
        {
            isValid = this.validateBenefitPlan(benefitPlanStringControl.text());
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    public DialogRunbase dialogInit(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase                   dialogRunBase;
        FormBuildGroupControl           buildGroupControl;

        dialogRunBase = super(dialog, forceOnClient);
        dialogRunBase.caption("@Payroll:GenerateVendorInvoices");

        payCycleBuildReferenceControl.helpText("@Payroll:ThePayCycleOfThePayStatementsToGenerateInvoicesFor");
        toDateBuildComboBox.helpText("@Payroll:ThePayPeriodOfThePayStatementsToGenerateInvoicesFor");

        buildGroupControl = dialogRunBase.curFormBuildGroup().addControl(FormControlType::Group, vendorFilterCriteriaGroup);
        buildGroupControl.columns(1);

        var leftBuildGroupControl = buildGroupControl.addControl(FormControlType::Group, "leftBuildGroup");

        filterCriteriaBuildComboBoxControl = leftBuildGroupControl.addControl(FormControlType::ComboBox, filterCriteriaControl);
        filterCriteriaBuildComboBoxControl.enumType(enumNum(PayrollVendorInvoiceFilterCriteria));
        filterCriteriaBuildComboBoxControl.selection(PayrollVendorInvoiceFilterCriteria::All);
        filterCriteriaBuildComboBoxControl.showLabel(true);

        // Add benefit plan lookup control
        benefitPlanBuildStringControl = leftBuildGroupControl.addControl(FormControlType::String, benefitPlanControl);
        benefitPlanBuildStringControl.showLabel(true);
        benefitPlanBuildStringControl.lookupButton(2);
        benefitPlanBuildStringControl.extendedDataType(extendedTypeNum(HcmBenefitPlanId));
        benefitPlanBuildStringControl.helpText("@Payroll:TheBenefitPlanToGenerateTheInvoiceFor");
        benefitPlanBuildStringControl.visible(false);

        // Add tax code lookup control
        taxCodeBuildStringControl = leftBuildGroupControl.addControl(FormControlType::String, taxCodeControl);
        taxCodeBuildStringControl.showLabel(true);
        taxCodeBuildStringControl.lookupButton(2);
        taxCodeBuildStringControl.extendedDataType(extendedTypeNum(PayrollTaxCodeId));
        taxCodeBuildStringControl.helpText("@Payroll:TheTaxCodeToGenerateTheInvoiceFor");
        taxCodeBuildStringControl.visible(false);

        // Add vendor table lookup control
        vendorBuildStringControl = leftBuildGroupControl.addControl(FormControlType::String, vendorControl);
        vendorBuildStringControl.showLabel(true);
        vendorBuildStringControl.extendedDataType(extendedTypeNum(VendAccount));
        vendorBuildStringControl.label("@Payroll:Vendor");
        vendorBuildStringControl.helpText("@Payroll:TheVendorToGenerateTheInvoiceFor");
        vendorBuildStringControl.visible(false);

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs additional actions to the dialog after the run event.
    /// </summary>
    /// <param name="_dialog">
    ///     The dialog object created by the class.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        formRun = _dialog.dialogForm().formRun();
        formRun.design().caption("@Payroll:GenerateVendorInvoices");

        filterCriteriaComboBoxControl = _dialog.dialogForm().formRun().control(filterCriteriaBuildComboBoxControl.id());
        benefitPlanStringControl = _dialog.dialogForm().formRun().control(benefitPlanBuildStringControl.id());
        taxCodeStringControl = _dialog.dialogForm().formRun().control(taxCodeBuildStringControl.id());
        vendorStringControl = _dialog.dialogForm().formRun().control(vendorBuildStringControl.id());

        filterCriteriaComboBoxControl.registerOverrideMethod(methodStr(FormComboBoxControl, selectionChange),
            methodStr(PayrollPayStatementGenerateVendorInvoice, filterCriteriaControl_selectionChange), this);

        benefitPlanStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, benefitPlanControl_lookup), this);
        benefitPlanStringControl.registerOverrideMethod(methodStr(FormStringControl, validate),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, benefitPlanControl_validate), this);

        taxCodeStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, taxCodeControl_lookup), this);
        taxCodeStringControl.registerOverrideMethod(methodStr(FormStringControl, validate),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, taxCodeControl_validate), this);

        vendorStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, vendorControl_lookup), this);
        vendorStringControl.registerOverrideMethod(methodStr(FormStringControl, validate),
                                                methodStr(PayrollPayStatementGenerateVendorInvoice, vendorControl_validate), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCriteriaControl_selectionChange</Name>
				<Source><![CDATA[
    private int filterCriteriaControl_selectionChange(FormComboBoxControl  _filterCriteriaControl)
    {
        taxCodeStringControl.text('');
        benefitPlanStringControl.text('');
        vendorStringControl.text('');

        int ret = _filterCriteriaControl.selection();
        switch (ret)
        {
            case PayrollVendorInvoiceFilterCriteria::All:
                benefitPlanStringControl.mandatory(false);
                taxCodeStringControl.mandatory(false);
                vendorStringControl.mandatory(false);
                benefitPlanStringControl.visible(false);
                taxCodeStringControl.visible(false);
                vendorStringControl.visible(false);
                break;
            case PayrollVendorInvoiceFilterCriteria::BenefitPlan:
                benefitPlanStringControl.mandatory(true);
                taxCodeStringControl.mandatory(false);
                vendorStringControl.mandatory(false);
                benefitPlanStringControl.visible(true);
                taxCodeStringControl.visible(false);
                vendorStringControl.visible(false);
                break;
            case PayrollVendorInvoiceFilterCriteria::TaxCode:
                benefitPlanStringControl.mandatory(false);
                taxCodeStringControl.mandatory(true);
                vendorStringControl.mandatory(false);
                benefitPlanStringControl.visible(false);
                taxCodeStringControl.visible(true);
                vendorStringControl.visible(false);
                break;
            case PayrollVendorInvoiceFilterCriteria::Vendor:
                benefitPlanStringControl.mandatory(false);
                taxCodeStringControl.mandatory(false);
                vendorStringControl.mandatory(true);
                benefitPlanStringControl.visible(false);
                taxCodeStringControl.visible(false);
                vendorStringControl.visible(true);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBenefitVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>VendAccount</c> to use for a given benefit line.
    /// </summary>
    /// <param name="_benefitPlanRecId">
    /// The <c>HcmBenefitPlan</c> of the benefit from the line.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The company the invoice is created for.
    /// </param>
    /// <param name="_benefitLine">
    /// The <c>PayrollPayStatementBenefitLine</c> to use in the search.
    /// </param>
    /// <returns>
    /// The vendor associated to the benefit line.
    /// </returns>
    /// <remarks>
    /// If a vendor is tied to the worker's enrolled benefit, then that vendor is used. Otherwise,
    /// the vendor tied to the benefit plan is used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendAccount getBenefitVendAccount(
    HcmBenefitPlanRecId             _benefitPlanRecId,
    LegalEntityRecId                _legalEntityRecId,
    PayrollPayStatementBenefitLine  _benefitLine
    )
    {
        VendAccount                         benefitVendAccount;
        PayrollPayStatement                 payStatement = _benefitLine.PayrollPayStatement();
        HcmWorkerEnrolledBenefit            workerEnrolledBenefit;
        PayrollWorkerEnrolledBenefitDetail  workerEnrolledBenefitDetail;
        PayrollBenefitPlanDefaultDimension  benefitPlanDefaultDimension;
        utcDateTime                         asOfDateTime = DateTimeUtil::newDateTime(_benefitLine.AccountingDate, timeMax());

        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, _benefitLine.Benefit, asOfDateTime);
        workerEnrolledBenefitDetail = PayrollWorkerEnrolledBenefitDetail::findByWorkerEnrolledBenefitLegalEntity(workerEnrolledBenefit.RecId, _legalEntityRecId, _benefitLine.AccountingDate);

        if (workerEnrolledBenefitDetail.RecId != 0 && workerEnrolledBenefitDetail.VendAccountNum != '')
        {
            benefitVendAccount = workerEnrolledBenefitDetail.VendAccountNum;
        }
        else
        {
            benefitPlanDefaultDimension = PayrollBenefitPlanDefaultDimension::findByBenefitPlanLegalEntity(_benefitPlanRecId, _legalEntityRecId);
            benefitVendAccount = benefitPlanDefaultDimension.VendAccountNum;
        }

        return benefitVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the ledger dimension value to use for a given invoice line.
    /// </summary>
    /// <param name="_payStatementVendorInvoiceTmp">
    /// The <c>PayrollPayStatementVendorInvoiceTmp</c> record contains all the information used to create an invoice line.
    /// </param>
    /// <returns>
    /// The calculated ledger dimension value.
    /// </returns>
    /// <remarks>
    /// If the invoice line is for a deduction, then the ledger dimension value is simply copied over. However
    /// for contribution lines, the journalizing definition is first found for that matches given line. Then the
    /// appropriate journalizing definition match account is found. Finally, the generated entry marked as the
    /// "Invoice distribution" is used to derive the ledger dimension.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the ledger dimension cannot be derived, an error is thrown.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionAccount getDistributionLedgerDimension(PayrollPayStatementVendorInvoiceTmp _payStatementVendorInvoiceTmp)
    {
        LedgerDimensionAccount ledgerDimensionAccount;
        JournalizingDefinitionId journalizingDefinitionId;
        JournalizingDefinitionManagerPayroll journalizingDefinitionManagerPayroll;
        JournalizingDefinitionMatchId matchingEntryId;
        JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;
        journalizingDefinitionEngine journalizingDefinitionEngine = journalizingDefinitionEngine::construct();
        PayrollJournalizingDefMatchPrimaryEntry journalizingDefMatchPrimaryEntry;

        if (_payStatementVendorInvoiceTmp.PayrollType == PayrollType::Deduction)
        {
            ledgerDimensionAccount = _payStatementVendorInvoiceTmp.LedgerDimension;
        }
        else
        {
            journalizingDefinitionManagerPayroll = JournalizingDefinitionManager::newJournalizingDefinitionManagerPayroll(
                _payStatementVendorInvoiceTmp.BenefitPlan,
                _payStatementVendorInvoiceTmp.TaxCode,
                0, // Earning code
                NoYes::Yes, // IsEmployer
                _payStatementVendorInvoiceTmp.AccountingDate,
                LedgerPostingType::Payroll);

            journalizingDefinitionId = journalizingDefinitionManagerPayroll.getDefaultJournalizingDefinition();

            if (!journalizingDefinitionId)
            {
                if (_payStatementVendorInvoiceTmp.BenefitPlan)
                {
                    knownError = true;
                    throw error(strFmt("@Payroll:NoVendorInvoicesWereCreatedTheGeneratedInvoiceLineDistributi",
                        HcmBenefitPlan::find(_payStatementVendorInvoiceTmp.BenefitPlan).BenefitPlanID));
                }
                else
                {
                    knownError = true;
                    throw error(strFmt("@Payroll:NoVendorInvoicesWereCreatedTheGeneratedInvoiceLineDistributi",
                        PayrollTaxCode::find(_payStatementVendorInvoiceTmp.TaxCode).Code));
                }
            }

            // Determine, if any matching Ledger account exist in the Journalizing Definition record.
            matchingEntryId = journalizingDefinitionEngine.getJournalizingDefinitionMatchId(
                _payStatementVendorInvoiceTmp.LedgerDimension,
                DebitCredit::Debit,
                journalizingDefinitionId,
                _payStatementVendorInvoiceTmp.AccountingDate);

            journalizingDefMatchPrimaryEntry = PayrollJournalizingDefMatchPrimaryEntry::findByJournalizingDefinitionMatch(matchingEntryId);

            if (journalizingDefMatchPrimaryEntry.RecId == 0)
            {
                if (_payStatementVendorInvoiceTmp.BenefitPlan)
                {
                    knownError = true;
                    throw error(strFmt("@Payroll:NoVendorInvoicesWereCreatedTheGeneratedInvoiceLineDistributi",
                        HcmBenefitPlan::find(_payStatementVendorInvoiceTmp.BenefitPlan).BenefitPlanID));
                }
                else
                {
                    knownError = true;
                    throw error(strFmt("@Payroll:NoVendorInvoicesWereCreatedTheGeneratedInvoiceLineDistributi",
                        PayrollTaxCode::find(_payStatementVendorInvoiceTmp.TaxCode).Code));
                }
            }

            journalizingDefinitionMatchDetail = JournalizingDefinitionMatchDetail::findByRecId(journalizingDefMatchPrimaryEntry.JournalizingDefinitionMatchDetail);

            ledgerDimensionAccount = LedgerDimensionDefaultingEngine::mergeSetupLedgerDimensions(journalizingDefinitionMatchDetail.LedgerDimension, _payStatementVendorInvoiceTmp.LedgerDimension);
        }

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the values set in the dialog by the user.
    /// </summary>
    /// <returns>
    ///     true if the values were retrieved successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        #ISOCountryRegionCodes
        boolean ret;
        LogisticsAddressCountryRegionId countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;

        ret = super();

        this.parmVendAccount(vendorStringControl.text());
        this.parmBenefitPlanRecId(HcmBenefitPlan::findByBenefitPlanId(benefitPlanStringControl.text()).RecId);
        this.parmTaxCodeRecId(PayrollTaxCode::findByCodeCountryRegion(taxCodeStringControl.text(), countryRegionId).RecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>IsEmployer</c> enum to the <c>PayrollType</c> enum.
    /// </summary>
    /// <param name="_isEmployer">
    /// The value of the <c>IsEmployer</c> enum.
    /// </param>
    /// <returns>
    /// The corresponding value of the <c>PayrollType</c> enum.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PayrollType getPayrollType(NoYes _isEmployer)
    {
        PayrollType type = PayrollType::Deduction;

        if (_isEmployer == NoYes::Yes)
        {
            type = PayrollType::Contribution;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayStatementLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the various ranges to the <c>PayrollPayStatementGenerateVendorInvoice</c>
    /// based on the options selected by the user on the dialog.
    /// </summary>
    /// <param name="_payStatement">
    /// The <c>PayrollPayStatement</c> to restrict the query on.
    /// </param>
    /// <returns>
    /// The fully defined query object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query getPayStatementLineQuery(PayrollPayStatement _payStatement)
    {
        Query query = new Query(queryStr(PayrollPayStatementGenerateVendorInvoice));
        QueryBuildDataSource qbdsPayStatementTaxLine;
        QueryBuildDataSource qbdsPayStatementBenefitLine;
        QueryBuildDataSource qbdsTaxCodeDefaultDimension;
        QueryBuildDataSource qbdsBenefitPlanVendorLookupView;
        QueryBuildDataSource qbdsBenefit;
        QueryBuildRange      qbrBenefitLinePayStatement;
        QueryBuildRange      qbrTaxLinePayStatement;
        QueryBuildRange      qbrTaxCodeVendAccount;
        QueryBuildRange      qbrTaxCodeVendDataAreaId;
        QueryBuildRange      qbrTaxCode;
        QueryBuildRange      qbrBenefitPlan;
        QueryBuildRange      qbrLegalEntity;
        RecId                invalidRecId = -1;

        qbdsPayStatementTaxLine = query.dataSourceTable(tableNum(PayrollPayStatementTaxLine));
        qbdsPayStatementBenefitLine = query.dataSourceTable(tableNum(PayrollPayStatementBenefitLine));
        qbdsTaxCodeDefaultDimension = query.dataSourceTable(tableNum(PayrollTaxCodeDefaultDimension));
        qbdsBenefit = query.dataSourceTable(tableNum(HcmBenefit));
        qbdsBenefitPlanVendorLookupView = query.dataSourceTable(tableNum(PayrollBenefitPlanVendorLookupView));

        qbrBenefitLinePayStatement = SysQuery::findOrCreateRange(qbdsPayStatementBenefitLine, fieldNum(PayrollPayStatementBenefitLine, PayStatement));
        qbrTaxLinePayStatement = SysQuery::findOrCreateRange(qbdsPayStatementTaxLine, fieldNum(PayrollPayStatementTaxLine, PayStatement));
        qbrTaxCodeVendAccount = SysQuery::findOrCreateRange(qbdsTaxCodeDefaultDimension, fieldNum(PayrollTaxCodeDefaultDimension, VendAccountNum));
        qbrTaxCodeVendDataAreaId = SysQuery::findOrCreateRange(qbdsTaxCodeDefaultDimension, fieldNum(PayrollTaxCodeDefaultDimension, VendDataAreaId));
        qbrTaxCode = SysQuery::findOrCreateRange(qbdsPayStatementTaxLine, fieldNum(PayrollPayStatementTaxLine, TaxCode));
        qbrBenefitPlan = SysQuery::findOrCreateRange(qbdsBenefitPlanVendorLookupView, fieldNum(PayrollBenefitPlanVendorLookupView, BenefitPlan));
        qbrLegalEntity = SysQuery::findOrCreateRange(qbdsBenefitPlanVendorLookupView, fieldNum(PayrollBenefitPlanVendorLookupView, LegalEntity));

        // Filter to the current company
        qbrLegalEntity.value(queryValue(CompanyInfo::current()));

        if (benefitPlanRecId)
        {
            // Filter to only pay statement benefit lines with the matching benefit plan
            qbrBenefitLinePayStatement.value(queryValue(_payStatement.RecId));
            qbrBenefitPlan.value(queryValue(benefitPlanRecId));

            // Filter out all pay statement tax lines
            qbrTaxLinePayStatement.value(queryValue(invalidRecId));
        }
        else if (taxCodeRecId)
        {
            // Filter to only pay statement tax lines with the matching tax code
            qbrTaxLinePayStatement.value(queryValue(_payStatement.RecId));
            qbrTaxCode.value(queryValue(taxCodeRecId));
            qbrTaxCodeVendAccount.value(SysQuery::valueNotEmptyString());
            qbrTaxCodeVendDataAreaId.value(_payStatement.dataAreaId);

            // Filter out all pay statement benefit lines
            qbrBenefitLinePayStatement.value(queryValue(invalidRecId));
        }
        else if (vendAccount)
        {
            // Filter to only pay statement lines with the matching vendor account
            qbrBenefitLinePayStatement.value(queryValue(_payStatement.RecId));
            qbrTaxLinePayStatement.value(queryValue(_payStatement.RecId));

            qbrTaxCode.value(SysQuery::valueUnlimited());
            qbrBenefitPlan.value(SysQuery::valueUnlimited());

            qbrTaxCodeVendAccount.value(vendAccount);
            qbrTaxCodeVendDataAreaId.value(_payStatement.dataAreaId);
        }
        else
        {
            // Filter to all pay statement lines with any vendor account
            qbrBenefitLinePayStatement.value(queryValue(_payStatement.RecId));
            qbrTaxLinePayStatement.value(queryValue(_payStatement.RecId));

            qbrTaxCode.value(SysQuery::valueUnlimited());
            qbrBenefitPlan.value(SysQuery::valueUnlimited());

            qbrTaxCodeVendAccount.value(SysQuery::valueNotEmptyString());
            qbrTaxCodeVendDataAreaId.value(_payStatement.dataAreaId);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a container with the set attributes defining
    /// the previous vendor invoice line.
    /// </summary>
    /// <param name="_payStatementVendorInvoiceTmp">
    /// The information used to create a vendor invoice line.
    /// </param>
    /// <returns>
    /// The populated container.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getPreviousValues(PayrollPayStatementVendorInvoiceTmp _payStatementVendorInvoiceTmp)
    {
        // Initialize the previous values container
        container previousValues = [_payStatementVendorInvoiceTmp.AccountingDate,
                                    _payStatementVendorInvoiceTmp.LedgerDimension,
                                    _payStatementVendorInvoiceTmp.VendAccountNum,
                                    _payStatementVendorInvoiceTmp.TaxCode,
                                    _payStatementVendorInvoiceTmp.BenefitPlan,
                                    _payStatementVendorInvoiceTmp.PayrollType];

        return previousValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>VendAccount</c> to use for a given tax code.
    /// </summary>
    /// <param name="_taxCodeRecId">
    /// The <c>PayrollTaxCode</c> to use in the search.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The company the invoice is created for.
    /// </param>
    /// <returns>
    /// The vendor associated to the tax code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendAccount getTaxVendAccount(PayrollTaxCodeRecId _taxCodeRecId, LegalEntityRecId _legalEntityRecId)
    {
        PayrollTaxCodeDefaultDimension taxCodeDefaultDimension;

        taxCodeDefaultDimension = PayrollTaxCodeDefaultDimension::findByPayrollTaxCodeLegalEntity(_taxCodeRecId, _legalEntityRecId);

        return taxCodeDefaultDimension.VendAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSeq</c> object for the vendor invoice number sequence
    /// defined in the Payroll parameters.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeq</c> object for the vendor invoice number sequence.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>NumberSeq</c> object could not be initialized.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NumberSeq getVendorInvoiceNumberSeq()
    {
        NumberSeq               numberSeq;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;

        numberSequenceReference = PayrollParameters::numRefVendorInvoiceNum();

        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceTable)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (numberSeq == null)
        {
            knownError = true;
            throw error("@SYS4090003");
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSameInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current line's set of attributes matches the
    /// unique attributes for a given invoice.
    /// </summary>
    /// <param name="_currentLine">
    /// The current vendor invoice line about to be created.
    /// </param>
    /// <param name="_previousValues">
    /// The set of attributes from the last vendor invoice line created.
    /// </param>
    /// <returns>
    /// true if the current line should be added to the current invoice; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isSameInvoice(PayrollPayStatementVendorInvoiceTmp _currentLine, container _previousValues)
    {
        boolean isSameInvoice = false;

        Debug::assert(conLen(_previousValues) == containerConLen);

        //
        // The previous values container hold these values:
        // 1: Accounting date
        // 2: Ledger dimension
        // 3: Vend account
        // 4: Tax code
        // 5: Benefit plan
        // 6: Payroll type
        //

        // One vendor invoice is created for all lines with the same vendor and tax code or benefit plan
        if (_currentLine.VendAccountNum == conPeek(_previousValues, vendAccountNum)
            && _currentLine.TaxCode == conPeek(_previousValues, taxCode)
            && _currentLine.BenefitPlan == conPeek(_previousValues, benefitPlan))
        {
            isSameInvoice = true;
        }

        return isSameInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSameInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current line's set of attributes matches the
    /// unique attributes for a given invoice line.
    /// </summary>
    /// <param name="_currentLine">
    /// The current vendor invoice line about to be created.
    /// </param>
    /// <param name="_previousValues">
    /// The set of attributes from the last vendor invoice line created.
    /// </param>
    /// <returns>
    /// true if the current line should be grouped into the current invoice line; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isSameInvoiceLine(PayrollPayStatementVendorInvoiceTmp _currentLine, container _previousValues)
    {
        boolean isSameInvoiceLine = false;

        Debug::assert(conLen(_previousValues) == containerConLen);

        //
        // The previous values container hold these values:
        // 1: Accounting date
        // 2: Ledger dimension
        // 3: Vend account
        // 4: Tax code
        // 5: Benefit plan
        // 6: Payroll type
        //

        if (_currentLine.AccountingDate == conPeek(_previousValues, accountingDate)
            && _currentLine.LedgerDimension == conPeek(_previousValues, ledgerDimension)
            && _currentLine.VendAccountNum == conPeek(_previousValues, vendAccountNum)
            && _currentLine.TaxCode == conPeek(_previousValues, taxCode)
            && _currentLine.BenefitPlan == conPeek(_previousValues, benefitPlan)
            && _currentLine.PayrollType == conPeek(_previousValues, payrollType))
        {
            isSameInvoiceLine = true;
        }

        return isSameInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        //
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        //
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [currentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBenefitPlanRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmBenefitPlanRecId parmBenefitPlanRecId(HcmBenefitPlanRecId _benefitPlanRecId = benefitPlanRecId)
    {
        benefitPlanRecId = _benefitPlanRecId;

        if (benefitPlanRecId)
        {
            vendAccount = '';
            taxCodeRecId = 0;
        }

        return benefitPlanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCodeRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollTaxCodeRecId parmTaxCodeRecId(PayrollTaxCodeRecId _taxCodeRecId = taxCodeRecId)
    {
        taxCodeRecId = _taxCodeRecId;

        if (taxCodeRecId)
        {
            vendAccount = '';
            benefitPlanRecId = 0;
        }

        return taxCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        if (vendAccount)
        {
            benefitPlanRecId = 0;
            taxCodeRecId = 0;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSavedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the vendor invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to be posted.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postSavedInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        // Post the saved vendor invoice
        VendInvoicePaymentAuthorizationTask::postSavedInvoice(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #AviFiles
        QueryRun payStatementLineQueryRun;
        PayrollPayStatementVendorInvoiceTmp payStatementVendorInvoiceTmp;
        PayrollPayStatementVendorInvoiceTmp createdVendorInvoiceLines;
        PayrollPayStatement payStatement;
        PayrollPayStatementBenefitLine payStatementBenefitLine;
        PayrollPayStatementTaxLine payStatementTaxLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        AccountingDistribution accountingDistribution;
        EcoResCategoryId procurementCategory;
        Counter lineCount = 0;
        boolean postingAttempted = false;
        boolean payStatementFound = false;
        boolean payStatementLineFound = false;
        LegalEntityRecId legalEntityRecId = CompanyInfo::current();
        NumberSeq vendorInvoiceNumberSeq;
        int i;
        Map vendInvoicePayStatementLineMap = new Map(Types::String, Types::Container);
        PayrollParameters payrollParameters = PayrollParameters::find();
        List vendorInvoiceMessageList = new List(Types::String);
        ListEnumerator listEnumerator;
        HcmBenefitPlanRecId localBenefitPlanRecId;
        HcmBenefitPlanRecId postingBenefitPlanRecId = 0;
        PayrollTaxCodeRecId postingTaxCodeRecId = 0;
        VendAccount benefitLineVendAccount = '';
        VendAccount postingVendAccount = '';

        try
        {
            knownError = false;

            procurementCategory = payrollParameters.ProcurementCategory;

            // Set the pay period range
            this.initPeriodCriteria();

            if (procurementCategory == 0)
            {
                knownError = true;
                throw error("@Payroll:YouCannotGenerateVendorInvoicesBecauseTheProcurementCategory");
            }

            vendorInvoiceNumberSeq = this.getVendorInvoiceNumberSeq();

            // No pay statements were selected
            if (SysQuery::countTotal(queryRun) == 0)
            {
                info("@Payroll:TheSelectionCriteriaDidNotReturnAnyResults");
                return;
            }

            ttsBegin;
            // Loop through all pay statements for the given pay period
            while (queryRun.next())
            {
                payStatement = queryRun.get(tableNum(PayrollPayStatement));

                if (payStatement.PostedStatus != PayrollPayStatementPostedStatus::Posted)
                {
                    // Only pay statements that have been posted can have vendor invoices generated
                    continue;
                }

                payStatementFound = true;
                payStatementLineQueryRun = new queryRun(this.getPayStatementLineQuery(payStatement));

                //
                // Loop through all pay statement lines with a vendor defined on either the benefit plan,
                // the worker enrolled benefit detail, or the tax code that matches the filter criteria specified on the dialog.
                //
                while (payStatementLineQueryRun.next())
                {
                    payStatementBenefitLine = payStatementLineQueryRun.get(tableNum(PayrollPayStatementBenefitLine));
                    payStatementTaxLine = payStatementLineQueryRun.get(tableNum(PayrollPayStatementTaxLine));

                    payStatementVendorInvoiceTmp.clear();

                    if (payStatementTaxLine.RecId != 0)
                    {
                        payStatementLineFound = true;

                        if (payStatementTaxLine.VendTrans != 0)
                        {
                            // Skip lines that have already had vendor invoices generated
                            continue;
                        }

                        // Process the tax line
                        accountingDistribution = payStatementLineQueryRun.get(tableNum(AccountingDistribution), 1);

                        payStatementVendorInvoiceTmp.TaxCode = payStatementTaxLine.TaxCode;
                        payStatementVendorInvoiceTmp.PayrollType = this.getPayrollType(payStatementTaxLine.IsEmployer);
                        payStatementVendorInvoiceTmp.PayStatementLine = payStatementTaxLine.RecId;
                        payStatementVendorInvoiceTmp.VendAccountNum = this.getTaxVendAccount(payStatementTaxLine.TaxCode, legalEntityRecId);
                    }
                    else if (payStatementBenefitLine.RecId != 0)
                    {
                        localBenefitPlanRecId = HcmBenefit::find(payStatementBenefitLine.Benefit).BenefitPlan;
                        benefitLineVendAccount = this.getBenefitVendAccount(localBenefitPlanRecId, LegalEntityRecId, payStatementBenefitLine);

                        if (benefitLineVendAccount == ''
                            || (vendAccount != '' && benefitLineVendAccount != vendAccount))
                        {
                            //
                            // A vendor account is not associated with the benefit line,
                            // or the specified vendor account from the dialog does not match.
                            //
                            continue;
                        }

                        payStatementLineFound = true;

                        if (payStatementBenefitLine.VendTrans != 0)
                        {
                            // Skip lines that have already had vendor invoices generated
                            continue;
                        }

                        // Process the benefit line
                        accountingDistribution = payStatementLineQueryRun.get(tableNum(AccountingDistribution), 2);

                        payStatementVendorInvoiceTmp.BenefitPlan = localBenefitPlanRecId;
                        payStatementVendorInvoiceTmp.PayrollType = this.getPayrollType(payStatementBenefitLine.IsEmployer);
                        payStatementVendorInvoiceTmp.PayStatementLine = payStatementBenefitLine.RecId;
                        payStatementVendorInvoiceTmp.VendAccountNum = benefitLineVendAccount;
                    }

                    payStatementVendorInvoiceTmp.AccountingCurrencyAmount = accountingDistribution.TransactionCurrencyAmount;
                    payStatementVendorInvoiceTmp.AccountingDate = accountingDistribution.AccountingDate;
                    payStatementVendorInvoiceTmp.LedgerDimension = accountingDistribution.LedgerDimension;
                    payStatementVendorInvoiceTmp.insert();
                    lineCount++;
                }
            }

            if (payStatementLineFound)
            {
                if (lineCount == 0)
                {
                    info("@Payroll:NoInvoicesWereGeneratedBecauseAllOfTheEligibleLineAmountsHav");
                    ttsAbort;
                    return;
                }
            }
            else
            {
                if (!payStatementFound)
                {
                    info("@Payroll:NoInvoicesWereGeneratedBecauseNoneOfTheSelectedPayStatements");
                }
                else if (benefitPlanRecId != 0  || taxCodeRecId != 0)
                {
                    info("@Payroll:NoInvoicesWereGeneratedBecauseTheSelectedTaxCodeOrBenefitPla");
                }
                else if (vendAccount != '')
                {
                    info("@Payroll:NoInvoicesWereGeneratedBecauseTheVendorIsNotSetUpForAnyOfThe");
                }
                else
                {
                    info("@Payroll:NoInvoicesWereGeneratedBecauseAllOfTheEligibleLineAmountsHav");
                }

                ttsAbort;

                return;
            }

            //
            // Up until this point, the execution will be quite fast so delay initializing
            // the progress bar until the number of vendor invoices needed to be created
            // is known.
            //
            this.progressInit("@Payroll:GenerateVendorInvoices", 4, #AviUpdate);
            progress.incCount();

            // Use the temp data to populate the vendor invoice
            List vendorInvoiceInfoList = new List(Types::Int64);
            vendorInvoiceInfoList= this.populateVendInvoice(
                                        payStatementVendorInvoiceTmp,
                                        lineCount,
                                        procurementCategory,
                                        vendorInvoiceNumberSeq,
                                        vendInvoicePayStatementLineMap,
                                        vendorInvoiceMessageList,
                                        createdVendorInvoiceLines);

            ListEnumerator vendorInvoiceInfoEnumerator = vendorInvoiceInfoList.getEnumerator();

            // Update the total to the progress bar
            progress.setTotal(vendorInvoiceInfoList.elements());
            progress.incCount();

            while (vendorInvoiceInfoEnumerator.moveNext())
            {
                 vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(vendorInvoiceInfoEnumerator.current());

                 while select createdVendorInvoiceLines
                   join vendInvoiceInfoLine
                   where createdVendorInvoiceLines.VendInvoiceInfoTableNum == vendInvoiceInfoTable.Num
                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                 {
                    postingBenefitPlanRecId = createdVendorInvoiceLines.BenefitPlan;
                    postingTaxCodeRecId = createdVendorInvoiceLines.TaxCode;
                    postingVendAccount = vendInvoiceInfoTable.InvoiceAccount;

                    // Set the desired ledger dimension value and clear out any default dimensions set from Vendor Invoice logic
                    vendInvoiceInfoLine.selectForUpdate(true);
                    vendInvoiceInfoLine.PayrollLedgerDimension = this.getDistributionLedgerDimension(createdVendorInvoiceLines);
                    vendInvoiceInfoLine.DefaultDimension = 0;
                    vendInvoiceInfoLine.update();

                    // Fully distribute the source document line
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(
                                                       vendInvoiceInfoLine,
                                                       false,
                                                       SourceDocumentLineAccountingStatus::FullyDistributed);
                 }

                // Post the vendor invoice
                postingAttempted = true;
                this.postSavedInvoice(vendInvoiceInfoTable);

                // Set the VendTrans field on the pay statement lines associated to the given vendor invoice
                this.updatePayStatementLines(vendInvoiceInfoTable, vendInvoicePayStatementLineMap.lookup(vendInvoiceInfoTable.Num));

                progress.incCount();
           }

           if (postingAttempted)
           {
              //
              // If we reach this point, the process was successful so display
              // the list of invoices created.
              //
              setPrefix(strFmt("@Payroll:Num_1PayrollVendorInvoicesWereCreated", vendorInvoiceMessageList.elements()));
              setPrefix("@Payroll:PayrollVendorInvoices");
              listEnumerator = vendorInvoiceMessageList.getEnumerator();

              while (listEnumerator.moveNext())
              {
                  info(listEnumerator.current());
              }
           }

          ttsCommit;
        }

        catch
        {
            if (postingAttempted)
            {
                if (postingBenefitPlanRecId != 0)
                {
                    error(strFmt("@Payroll:NoInvoicesWereCreatedAnErrorOccurredDuringTheAPInvoicePostin",
                        postingVendAccount, HcmBenefitPlan::find(postingBenefitPlanRecId).BenefitPlanID));
                }
                else
                {
                    error(strFmt("@Payroll:NoInvoicesWereCreatedAnErrorOccurredDuringTheAPInvoicePostin1",
                        postingVendAccount, PayrollTaxCode::find(postingTaxCodeRecId).Code));
                }
            }
            else if (!knownError)
            {
                error("@Payroll:TheVendorInvoicesWereNotCreatedBecauseAnErrorOccurred");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeControl_lookup</Name>
				<Source><![CDATA[
    private void taxCodeControl_lookup(FormStringControl _formStringControl)
    {
        LogisticsAddressCountryRegionId countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;

        if (!taxCodeLookup)
        {
            taxCodeLookup = PayrollTaxCodeLookup::newCustomOptions(countryRegionId, false, NoYes::No, true);
        }
        taxCodeLookup.lookupTaxCode(taxCodeStringControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeControl_validate</Name>
				<Source><![CDATA[
    private boolean taxCodeControl_validate(FormStringControl _formStringControl)
    {
        boolean isValid;

        isValid = taxCodeStringControl.validate();

        if (isValid)
        {
            isValid = this.validateTaxCode(taxCodeStringControl.text());
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer                         version = RunBase::getVersion(packedClass);
        container                       packedQuery;
        boolean                         calledWithRecordLast;
        str                             callingObjectLast;
        PayrollPayCycleRecId            payCycleRecIdLast;
        TransDate                       toDateLast;
        HcmBenefitPlanRecId             benefitPlanRecIdLast;
        PayrollTaxCodeRecId             taxCodeRecIdLast;
        VendAccount                     vendAccountLast;

        #LOCALMACRO.SaveLastList
            calledWithRecordLast,
            toDateLast,
            payCycleRecIdLast,
            benefitPlanRecIdLast,
            taxCodeRecIdLast,
            vendAccountLast,
            callingObjectLast
        #ENDMACRO

        switch (version)
        {
            case currentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, packedQuery] = packedClass;
                }
                else
                {
                    [version, #CurrentList, packedQuery] = packedClass;
                }

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayStatementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PayrollPayStatementLine</c> records with the <c>RecId</c>
    /// from the posted vendor invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The vendor invoice header.
    /// </param>
    /// <param name="_payStatementLines">
    /// The pay statement lines associated to the given invoice.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePayStatementLines(VendInvoiceInfoTable _vendInvoiceInfoTable, container _payStatementLines)
    {
        PayrollPayStatementLine payStatementLine;
        VendTrans vendTrans;
        int i;

        for (i = 1; i <= conLen(_payStatementLines); i++)
        {
            payStatementLine = PayrollPayStatementLine::find(conPeek(_payStatementLines, i), true);

            if (payStatementLine.VendTrans == 0)
            {
                // Find the posted vendor invoice by searching on account num, invoice number, and transaction date
                select firstOnly RecId from vendTrans
                    where vendTrans.AccountNum == _vendInvoiceInfoTable.OrderAccount
                    &&    vendTrans.Invoice == _vendInvoiceInfoTable.Num
                    &&    vendTrans.TransDate == _vendInvoiceInfoTable.TransDate;

                if (vendTrans.RecId)
                {
                    payStatementLine.VendTrans = vendTrans.RecId;
                    payStatementLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the values supplied by the user on the dialog.
    /// </summary>
    /// <param name="calledFrom">
    ///     The object that called the dialog.
    /// </param>
    /// <returns>
    ///     true if the values are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (ret)
        {
            switch (filterCriteriaComboBoxControl.selection())
            {
                case PayrollVendorInvoiceFilterCriteria::BenefitPlan:
                    if (benefitPlanStringControl.text() == '')
                    {
                        ret = checkFailed(strFmt("@SYS84753", fieldPName(HcmBenefitPlan, BenefitPlanID)));
                    }
                    break;
                case PayrollVendorInvoiceFilterCriteria::TaxCode:
                    if (taxCodeStringControl.text() == '')
                    {
                        ret = checkFailed(strFmt("@SYS84753", fieldPName(PayrollTaxCode, Code)));
                    }
                    break;
                case PayrollVendorInvoiceFilterCriteria::Vendor:
                    if (vendorStringControl.text() == '')
                    {
                        ret = checkFailed(strFmt("@SYS84753", vendorStringControl.label()));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBenefitPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a given <c>HcmBenefitPlanId</c> is setup for contributions.
    /// </summary>
    /// <param name="_benefitPlanId">
    /// The <c>HcmBenefitPlanId</c> to validate.
    /// </param>
    /// <returns>
    /// true if the benefit plan is valid; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateBenefitPlan(HcmBenefitPlanId _benefitPlanId)
    {
        boolean isValid = true;

        if (!benefitPlanLookup)
        {
            benefitPlanLookup = HcmBenefitPlanLookup::newCustomOptions(false, PayrollType::Contribution, true);
        }

        isValid = benefitPlanLookup.validateBenefitPlan(HcmBenefitPlan::findByBenefitPlanId(_benefitPlanId).RecId);

        if (!isValid)
        {
            checkFailed(strFmt("@SYS112224", _benefitPlanId, fieldPName(HcmBenefitPlan, BenefitPlanId), tablePName(HcmBenefitPlan)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a given <c>PayrollTaxCodeId</c> is setup for contributions.
    /// </summary>
    /// <param name="_taxCodeId">
    /// The <c>PayrollTaxCodeId</c> to validate.
    /// </param>
    /// <returns>
    /// true if the tax code is valid; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateTaxCode(PayrollTaxCodeId _taxCodeId)
    {
        LogisticsAddressCountryRegionId countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        boolean isValid;

        if (!taxCodeLookup)
        {
            taxCodeLookup = PayrollTaxCodeLookup::newCustomOptions(countryRegionId, false, NoYes::No, true);
        }

        isValid = taxCodeLookup.validateTaxCode(PayrollTaxCode::findByCodeCountryRegion(_taxCodeId, countryRegionId).RecId);

        if (!isValid)
        {
            checkFailed(strFmt("@SYS112224", _taxCodeId, fieldPName(PayrollTaxCode, Code), tablePName(PayrollTaxCode)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a given <c>VendAccount</c> is associated to at least one
    /// benefit plan or tax code in the current company.
    /// </summary>
    /// <param name="_vendAccount">
    /// The <c>VendAccount</c> to validate.
    /// </param>
    /// <returns>
    /// true if the vendor is valid; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateVendor(VendAccount _vendAccount)
    {
        boolean isValid = true;
        PayrollVendTableLookupView vendTableLookupView;

        // Check to see if the vendor specified exists in the view for the current company
        select firstOnly VendAccountNum from vendTableLookupView
            where vendTableLookupView.VendAccountNum == _vendAccount
            &&    vendTableLookupView.LegalEntity == CompanyInfo::current();

        if (vendTableLookupView.VendAccountNum == '')
        {
            isValid = checkFailed(strFmt("@SYS112224", _vendAccount, fieldPName(VendTable, AccountNum), tablePName(VendTable)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorControl_lookup</Name>
				<Source><![CDATA[
    private void vendorControl_lookup(FormStringControl _formStringControl)
    {
        FormRun lookupFormRun;
        Args args;

        args = new Args(formStr(PayrollVendTableLookup));

        lookupFormRun = ClassFactory::formRunClassOnClient(args);
        lookupFormRun.init();

        vendorStringControl.performFormLookup(lookupFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorControl_validate</Name>
				<Source><![CDATA[
    private boolean vendorControl_validate(FormStringControl _formStringControl)
    {
        boolean isValid;

        isValid = vendorStringControl.validate();

        if (isValid)
        {
            isValid = this.validateVendor(vendorStringControl.text());
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PayrollPayStatementGenerateVendorInvoice payStatementGenerateVendorInvoice;

        payStatementGenerateVendorInvoice = new PayrollPayStatementGenerateVendorInvoice();

        if (payStatementGenerateVendorInvoice.prompt())
        {
            // Run from menu item and may be schedulable as a batch, so don't wait for results
            payStatementGenerateVendorInvoice.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the data to create vendor invoices
    /// </summary>
    /// <param name="_payStatementVendorInvoiceTmp">
    /// A temp table with a line for every distribution being used to generate vendor invoices.
    /// </param>
    /// <param name="_lineCount">
    /// The number of lines in the temp table.
    /// </param>
    /// <param name="_procurementCategory">
    /// The procurement category defined in the Payroll parameters form.
    /// </param>
    /// <param name="_vendorInvoiceNumberSeq">
    /// The vendor invoice number sequence defined in the Payroll parameters form.
    /// </param>
    /// <param name="_vendInvoicePayStatementLineMap">
    /// A map that stores each invoice number as the key and the container of all pay statement line record IDs
    /// used to create the given invoice as the value.
    /// </param>
    /// <param name="_vendorInvoiceMessageList">
    /// A list of strings that will be displayed to the infolog upon a successful run.
    /// </param>
    /// <param name="_createdVendorInvoiceLines">
    /// A temp table with a line for every invoice line that was generated.
    /// </param>
    /// <returns>
    /// A list of Recid of <c>VendInvoiceInfoTable</c> object.
    /// </returns>
    /// <remarks>
    /// Invoices are created based on every unique benefit plan or tax code. Invoice lines are created based
    /// on grouping by the benefit plan or tax code, accounting date, ledger dimension defined on the distribution,
    /// and the type of line (Contribution or Deduction).
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List populateVendInvoice(
        PayrollPayStatementVendorInvoiceTmp _payStatementVendorInvoiceTmp,
        Counter                             _lineCount,
        EcoResCategoryId                    _procurementCategory,
        NumberSeq                           _vendorInvoiceNumberSeq,
        Map                                 _vendInvoicePayStatementLineMap,
        List                                _vendorInvoiceMessageList,
        PayrollPayStatementVendorInvoiceTmp _createdVendorInvoiceLines)
    {
        Counter                   lineNum = 0;
        AmountCur                 invoiceLineAmount = 0;
        Counter                   invoiceLineNum = 0;
        Num                       invoiceNum;
        container                 previousValues;
        container                 payStatementLines;
        boolean                   createInvoice = false;
        str                       vendorInvoiceMessage;
        VendInvoice               vendInvoice;
        VendInvoiceInfoTable      vendInvoiceInfoTable;
        VendInvoiceInfoSubTable   vendInvoiceInfoSubTable;
        LegalEntityRecId          legalEntityRecId = CompanyInfo::current();
        List                      vendorInvoiceInfoList = new List(Types::Int64);

        while select _payStatementVendorInvoiceTmp
            order by VendAccountNum, TaxCode, BenefitPlan, AccountingDate, PayrollType, LedgerDimension
        {
            lineNum++;

            if (previousValues == conNull())
            {
                // Initialize the previous values container
                previousValues = this.getPreviousValues(_payStatementVendorInvoiceTmp);

                Debug::assert(conLen(previousValues) == containerConLen);

                createInvoice = true;
            }

            if (!this.isSameInvoiceLine(_payStatementVendorInvoiceTmp, previousValues))
            {
                invoiceLineNum++;

                // Create the vendor invoice line
                this.createVendInvoiceInfoLine(
                        _createdVendorInvoiceLines,
                        previousValues,
                        vendInvoiceInfoTable.Num,
                        vendInvoiceInfoSubTable,
                        _procurementCategory,
                        invoiceLineAmount,
                        invoiceLineNum);

                if (_vendInvoicePayStatementLineMap.exists(vendInvoiceInfoTable.Num))
                {
                    payStatementLines += _vendInvoicePayStatementLineMap.lookup(vendInvoiceInfoTable.Num);
                }

                _vendInvoicePayStatementLineMap.insert(vendInvoiceInfoTable.Num, payStatementLines);
                invoiceLineAmount = 0;
                payStatementLines = conNull();
            }

            if (!this.isSameInvoice(_payStatementVendorInvoiceTmp, previousValues))
            {
                createInvoice = true;
            }

            if (createInvoice)
            {
                if (vendInvoice == null)
                {
                    // Initialize the object for creating the first vendor invoice
                    vendInvoice = new vendInvoice();
                }

                invoiceNum = _vendorInvoiceNumberSeq.num();

                if (_payStatementVendorInvoiceTmp.TaxCode != 0)
                {
                    vendorInvoiceMessage = strFmt("@GLS94298",
                        PayrollTaxCode::find(_payStatementVendorInvoiceTmp.TaxCode).Code,
                        _payStatementVendorInvoiceTmp.VendAccountNum,
                        invoiceNum);
                }
                else if (_payStatementVendorInvoiceTmp.BenefitPlan != 0)
                {
                    vendorInvoiceMessage = strFmt("@GLS94299",
                        HcmBenefitPlan::find(_payStatementVendorInvoiceTmp.BenefitPlan).BenefitPlanID,
                        _payStatementVendorInvoiceTmp.VendAccountNum,
                        invoiceNum);
                }

                _vendorInvoiceMessageList.addEnd(vendorInvoiceMessage);

                vendInvoiceInfoTable = this.createVendInvoiceInfoTable(toDate, _payStatementVendorInvoiceTmp.VendAccountNum, legalEntityRecId, invoiceNum);
                vendorInvoiceInfoList.addEnd(vendInvoiceInfoTable.RecId);
                vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(vendInvoiceInfoTable);

                invoiceLineNum = 0;
                createInvoice = false;
            }

            invoiceLineAmount += _payStatementVendorInvoiceTmp.AccountingCurrencyAmount;
            payStatementLines += _payStatementVendorInvoiceTmp.PayStatementLine;
            previousValues = this.getPreviousValues(_payStatementVendorInvoiceTmp);

            // If it is the last line, create the final vendor invoice line
            if (lineNum == _lineCount)
            {
                invoiceLineNum++;

                // Create the final vendor invoice line
                this.createVendInvoiceInfoLine(
                        _createdVendorInvoiceLines,
                        previousValues,
                        vendInvoiceInfoTable.Num,
                        vendInvoiceInfoSubTable,
                        _procurementCategory,
                        invoiceLineAmount,
                        invoiceLineNum);

                if (_vendInvoicePayStatementLineMap.exists(vendInvoiceInfoTable.Num))
                {
                    payStatementLines += _vendInvoicePayStatementLineMap.lookup(vendInvoiceInfoTable.Num);
                }

                _vendInvoicePayStatementLineMap.insert(vendInvoiceInfoTable.Num, payStatementLines);
            }
        }

        return vendorInvoiceInfoList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates vendor invoice data in the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <param name="_payStatementVendorInvoiceTmp">
    /// The temporary table used to store a list of all vendor invoice lines created.
    /// </param>
    /// <param name="_previousValues">
    /// A container storing various attributes to populate the vendor invoice line.
    /// </param>
    /// <param name="_vendInvoiceInfoTableNum">
    /// The vendor invoice number stored on the header.
    /// </param>
    /// <param name="_vendInvoice_VendInvoiceInfoSubTable">
    /// The <c>VendInvoice_VendInvoiceInfoSubTable</c> to add the new line.
    /// </param>
    /// <param name="_procurementCategoryId">
    /// The procurement category for the new line.
    /// </param>
    /// <param name="_lineAmount">
    /// The amount for the new line.
    /// </param>
    /// <param name="_lineNum">
    /// The line count on the given invoice.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createVendInvoiceInfoLine(
        PayrollPayStatementVendorInvoiceTmp _payStatementVendorInvoiceTmp,
        container                           _previousValues,
        Num                                 _vendInvoiceInfoTableNum,
        VendInvoiceInfoSubTable             _vendInvoiceInfoSubTable,
        EcoResCategoryId                    _procurementCategoryId,
        AmountCur                           _lineAmount,
        LineNum                             _lineNumber)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        InvoiceLineDescription invoiceLineDescription;
        PurchQty quantity;

        if (_lineAmount >= 0)
        {
            quantity = 1;
        }
        else
        {
            quantity = -1;
        }

        if (conPeek(_previousValues, taxCode) != 0)
        {
            // This is a tax code line
            invoiceLineDescription = strFmt(
                                         "@GLS94305",
                                         num2str(_lineNumber, 0, 0, 0, 0),
                                         date2StrUsr(conPeek(_previousValues, accountingDate), DateFlags::FormatAll),
                                         queryValue(conPeek(_previousValues, payrollType)),
                                         PayrollTaxCode::find(conPeek(_previousValues, taxCode)).Code);
        }
        else if (conPeek(_previousValues, benefitPlan) != 0)
        {
            // This is a benefit plan line
            invoiceLineDescription = strFmt(
                                         "@GLS94306",
                                         num2str(_lineNumber, 0, 0, 0, 0),
                                         date2StrUsr(conPeek(_previousValues, accountingDate), DateFlags::FormatAll),
                                         queryValue(conPeek(_previousValues, payrollType)),
                                         HcmBenefitPlan::find(conPeek(_previousValues, benefitPlan)).BenefitPlanID);
        }

        vendInvoiceInfoLine.initValue();

        vendInvoiceInfoLine.ParmId      = _vendInvoiceInfoSubTable.ParmId;
        vendInvoiceInfoLine.TableRefId  = _vendInvoiceInfoSubTable.TableRefId;
        vendInvoiceInfoLine.defaultRow();
        vendInvoiceInfoLine.ProcurementCategory = EcoResCategory::find(_procurementCategoryId).RecId;
        vendInvoiceInfoLine.LineAmount = _lineAmount;
        vendInvoiceInfoLine.ReceiveNow = quantity;
        vendInvoiceInfoLine.Description = invoiceLineDescription;
        vendInvoiceInfoLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates vendor invoice data in the <c>VendInvoiceInfoTable</c> table object
    /// </summary>
    /// <param name = "_transactionDate">
    /// The transaction date for the invoice.
    /// </param>
    /// <param name = "_vendorAccount">
    /// The vendor account used on the invoice.
    /// </param>
    /// <param name = "_companyInfoRecId">
    /// The company to create the invoice for.
    /// </param>
    /// <param name = "_invoiceNumber">
    /// The unique number associated with the invoice.
    /// </param>
    /// <returns>
    /// The fully populated <c>VendInvoiceInfoTable</c> object.
    /// </returns>
    private VendInvoiceInfoTable createVendInvoiceInfoTable(
         TransDate        _transactionDate,
         VendAccount      _vendorAccount,
         CompanyInfoRecId _companyInfoRecId,
         Num              _invoiceNumber)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.initValue();

        vendInvoiceInfoTable.Num = _invoiceNumber;
        vendInvoiceInfoTable.InvoiceAccount = _vendorAccount;
        vendInvoiceInfoTable.OrderAccount = _vendorAccount;
        vendInvoiceInfoTable.CurrencyCode = Ledger::accountingCurrency(_companyInfoRecId);
        vendInvoiceInfoTable.TransDate = _transactionDate;
        vendInvoiceInfoTable.FixedDueDate = _transactionDate;
        vendInvoiceInfoTable.DocumentDate = _transactionDate;
        vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
        vendInvoiceInfoTable.ParmJobStatus = ParmJobStatus::Waiting;
        vendInvoiceInfoTable.defaultRow();

        vendInvoiceInfoTable.RequestStatus = VendInvoiceRequestStatus::Approved;

        vendInvoiceInfoTable.insert();

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@Payroll:GenerateVendorInvoices";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>