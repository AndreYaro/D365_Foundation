<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCheckPost_Movement_OwnershipChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalCheckPost_Movement_OwnershipChange</c> class is used when checking and posting an inventory ownership change journal.
/// </summary>
[InventJournalTypeFactoryAttribute(InventJournalType::OwnershipChange)]
public class InventJournalCheckPost_Movement_OwnershipChange extends InventJournalCheckPost_Movement implements BatchRetryable
{
    Map inventTransOriginProdBomOwnershipChangeJournalTransLink = new Map(Types::Int64, Types::Integer);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the inventory ownership change journal and creates purchase orders.
    /// </summary>
    /// <param name="_journalTransList">A list of transactions to be posted.</param>
    protected void postJournal(JournalTransList _journalTransList)
    {
        super(_journalTransList);

        this.setJournalTransDataThrow(_journalTransList.journalTransData());

        this.updateProductionBOMLineLink(_journalTransList);

        this.createPurchaseOrders(_journalTransList);

        this.updateProductionBOMLineInventoryDimensions(_journalTransList);

        this.setJournalTransDataThrow(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedgerMovement</Name>
				<Source><![CDATA[
    protected InventUpd_Financial postTransLedgerMovement(
        InventJournalTrans  _inventJournalTrans,
        InventMov_Journal   _movement,
        LedgerVoucher       _ledgerVoucher)
    {
        _movement.journalPostTrans(_ledgerVoucher, null);

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase orders based on the inventory ownership change journal lines.
    /// </summary>
    /// <param name="_journalTransList">A list of posted inventory ownership change journal lines.</param>
    private void createPurchaseOrders(JournalTransList _journalTransList)
    {
        var purchAutoCreate = PurchAutoCreate_InventJournalOwnershipChange::newFromJournal(PurchCreateFromInventJournalOwnershipChange::newFromJournalLines(_journalTransList));
        purchAutoCreate.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionLinkExistsForInventJournalTrans</Name>
				<Source><![CDATA[
    private boolean productionLinkExistsForInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        if (!inventTransOriginProdBomOwnershipChangeJournalTransLink.exists(_inventJournalTrans.RecId))
        {
            inventTransOriginProdBomOwnershipChangeJournalTransLink.insert(_inventJournalTrans.RecId, InventTransOriginProdBomOwnershipChangeJournalTransLink::existByOwnershipChangeJournalLine(_inventJournalTrans.RecId));
        }

        return inventTransOriginProdBomOwnershipChangeJournalTransLink.lookup(_inventJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductionBOMLineLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates link between inventory transactions for the inventory ownership change journal line and production order BOM lines.
    /// </summary>
    /// <param name="_journalTransList">A list of posted inventory ownership change journal lines.</param>
    private void updateProductionBOMLineLink(JournalTransList _journalTransList)
    {
        _journalTransList.reset();

        while (_journalTransList.next())
        {
            InventJournalTrans inventJournalTrans = _journalTransList.item();

            if (this.productionLinkExistsForInventJournalTrans(inventJournalTrans))
            {
                InventTransOriginProdBomOwnershipChangeJournalTransLink::updateJournalInventTransOrigin(inventJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductionBOMLineInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory dimensions on inventory transactions for the production order BOM lines.
    /// </summary>
    /// <param name="_journalTransList">A list of posted inventory ownership change journal lines.</param>
    private void updateProductionBOMLineInventoryDimensions(JournalTransList _journalTransList)
    {
        _journalTransList.reset();

        while (_journalTransList.next())
        {
            InventJournalTrans inventJournalTrans = _journalTransList.item();

            if (this.productionLinkExistsForInventJournalTrans(inventJournalTrans))
            {
                inventJournalTrans.reread(); // Might have been updated earlier in the posting logic

                InventTransOriginProdBomOwnershipChangeJournalTransLink::updateDimensions(inventJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventJournalCheckPost_Movement_OwnershipChange</c> class that is used for posting or validating an inventory ownership change journal.
    /// </summary>
    /// <param name="_autoBlock">A Boolean value that indicates whether the journal should be automatically blocked during posting.</param>
    /// <param name="_showInfoResult"> A Boolean value that indicates whether any errors should be shown in the Infolog.</param>
    /// <param name="_journalCheckPostType">A <c>JournalCheckPostType</c> enumeration value that indicates whether the new instance is used for posting or validating the journal.</param>
    /// <param name="_tableId">The table ID of the journal table.</param>
    /// <param name="_journalId">The ID of the journal to validate or post.</param>
    /// <returns>A new instance of the <c>InventJournalCheckPost_Movement</c> class.</returns>
    [SysObsolete('Please use factory InventJournalCheckPost::newJournalCheckPost() instead', true, 30\09\2022)]
    public static InventJournalCheckPost_Movement_OwnershipChange newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId)
    {
        InventJournalCheckPost_Movement_OwnershipChange inventJournalCheckPost = InventJournalCheckPost::construct(InventJournalTable::find(_journalId));

        inventJournalCheckPost.initializeJournalCheckPost(_autoBlock, _showInfoResult, _journalCheckPostType, _tableId, _journalId);

        return inventJournalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowTransferErrors</Name>
				<Source><![CDATA[
    protected boolean allowTransferErrors()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>