<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25InventoryActReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25InventoryActReport extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    RTax25TmpInventoryActLine   actLine;
    RTax25InventoryActType      reportType;
    OfficialsTrans_RU           offTrans;

    RTax25InventoryDate         inventoryDate;
    DialogField                 dlgInventoryDate;
    DocumentNum                 documentNum;
    DialogField                 dlgDocumentNum;
    OffSessionId_RU             offSessionId;

    int                         lineNo;
    int                         actualNumOfDebLines;
    int                         actualNumOfCredLines;
    int                         totalLineCount;
    str                         lineName;
    str                         lineAccNum;
    Notes                       custVendInfo;

    AmountMST                   totalApprovedDebtAmount;
    AmountMST                   totalNonapprovedAmount;
    AmountMST                   totalHopelessAmount;

    //#define.ActTemplate         ("INV-17.xlsx")
    //#define.CertificateTemplate ("INV-17 Appendix.xlsx")
    #define.NameBookmark("Name")
    #define.AccCodeBookmark("AccCode")
    #define.reportHeader("REPORTHEADER")
    #define.reportFooter("REPORTFOOTER")
    #define.part1Header("PART1HEADER")
    #define.part1PageHeader("PART1PAGEHEADER")
    #define.body("BODY")
    #define.partFooter("PARTFOOTER")
    #define.part2Header("PART2HEADER")
    #define.part2PageHeader("PART2PAGEHEADER")
    #define.additionalMemberSect("ADDITIONALMEMBERSECTION")
    #define.pageHeader("PAGEHEADER")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15.6)
        real accNumHeight = 0.;
        real nameHeight;
        if (reportType == RTax25InventoryActType::Act)
        {
            accNumHeight =  document.getNamedRangeHeightWrapped(#AccCodeBookmark,    lineAccNum);
            nameHeight = document.getNamedRangeHeightWrapped(#NameBookmark,lineName);
        }
        else
        {
            nameHeight = document.getNamedRangeHeightWrapped(#NameBookmark, custVendInfo);
        }
        return max(nameHeight, accNumHeight, #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        lineNo = 0;
        curWorksheetNum = 1;
        this.initSectionMap();
        this.setCurrentWorksheetNum(curWorksheetNum, widthCols);
        this.execute(#reportHeader);
        this.totalLineCount();
        if (reportType == RTax25InventoryActType::Act)
        {
            this.formActPart(RTax25DebtType::Debit);
            document.insertPageBreak(currentRow, curWorksheetNum);
            currentHeight = 0;
            this.formActPart(RTax25DebtType::Credit);
        }
        else
        {
            this.formAppendix();
        }
        this.execute(#reportFooter);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
        ;
        dialog = Dialog::newFormnameRunbase(formstr(RTax25InventoryActPrint),this);
        dialog = this.dialogInternal(dialog);
        dialog.addGroup("@SYS12687");
        dlgInventoryDate = dialog.addFieldValue(extendedtypestr(RTax25InventoryDate), inventoryDate);
        dlgDocumentNum   = dialog.addField(extendedtypestr(DocumentNum));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return (reportType == RTax25InventoryActType::Act) ?'INV-17_' : 'INV-17 Appendix_';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// inventory number
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return "INV17";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAdditionalMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills additional members in th report footer
    /// </summary>
    private void fillAdditionalMember()
    {
        this.insertValueToSection('AdditionalMember',       offTrans.Title);
        this.insertValueToSection('AdditionalMemberName',   offTrans.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    private void fillBody()
    {
        AmountMST   totalLineAmount;
        AmountMST   approvedDebt;
        str         debtAmountCol;
        str         emptyAmountCol;

        if (reportType == RTax25InventoryActType::Act)
        {
            approvedDebt = actLine.DebtAmount - actLine.NonapprovedAmount;
            totalLineAmount = approvedDebt + actLine.NonapprovedAmount + actLine.HopelessAmount;

            this.insertValueToSection(#NameBookmark,        lineName);
            this.insertValueToSection(#AccCodeBookmark,     lineAccNum);
            this.insertValueToSection('Amount',             totalLineAmount);
            this.insertValueToSection('DebtAmount',         approvedDebt);
            this.insertValueToSection('NonapprovedAmount',  actLine.NonapprovedAmount);
            this.insertValueToSection('HopelessAmount',     actLine.HopelessAmount);
        }
        else
        {
            debtAmountCol  = (actLine.DebtType == RTax25DebtType::Debit) ? 'DebtAmountDe': 'DebtAmountCr';
            emptyAmountCol = (actLine.DebtType == RTax25DebtType::Debit) ? 'DebtAmountCr': 'DebtAmountDe';

            this.insertValueToSection('LineNo',         lineNo);
            this.insertValueToSection(#NameBookmark,    custVendInfo);
            this.insertValueToSection('Agreement',      actLine.AgreementId);
            this.insertValueToSection('DebtDate',       actLine.DebtDate);
            this.insertValueToSection(debtAmountCol,    actLine.DebtAmount + actLine.HopelessAmount);
            this.insertValueToSection(emptyAmountCol,   '');

            this.insertValueToSection('LineDocName',    actLine.DocumentName);
            this.insertValueToSection('LineDocNum',     actLine.DocumentNum);
            this.insertValueToSection('LineDocDate',    actLine.DocumentDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #reportHeader:
                this.fillReportHeader();
                break;
            case #body:
                this.fillBody();
                break;
            case #partFooter:
                this.fillPartFooter();
                break;
            case #reportFooter:
                this.fillReportFooter();
                break;
            case #additionalMemberSect:
                this.fillAdditionalMember();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPartFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills part footer section with data
    /// </summary>
    private void fillPartFooter()
    {
        this.insertValueToSection('TotalAmount',             totalApprovedDebtAmount + totalNonapprovedAmount + totalHopelessAmount);
        this.insertValueToSection('TotalDebtAmount',         totalApprovedDebtAmount);
        this.insertValueToSection('TotalNonapprovedAmount',  totalNonapprovedAmount);
        this.insertValueToSection('TotalHopelessAmount',     totalHopelessAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    private void fillReportFooter()
    {
        boolean additionalMemberRow = false;

        while select offTrans
            order by Position
            where offTrans.OffSessionId == offSessionId &&
                  offTrans.ReportType   == OffReportType_RU::RTax25Inv17
                    &&  ((reportType == RTax25InventoryActType::Act &&  offTrans.Position != OffPosition_RU::AccountantJ) ||
                        (reportType == RTax25InventoryActType::Appendix &&  offTrans.Position == OffPosition_RU::AccountantJ))
        {
            switch (offTrans.Position)
            {
                case OffPosition_RU::Chairman:
                    this.insertValueToSection('Chairman',       offTrans.Title);
                    this.insertValueToSection('ChairmanName',   offTrans.Name);
                    break;
                case OffPosition_RU::Member:
                    if (additionalMemberRow)
                    {
                         this.execute(#additionalMemberSect);
                    }
                    else
                    {
                        this.insertValueToSection('Member',     offTrans.Title);
                        this.insertValueToSection('MemberName', offTrans.Name);
                        additionalMemberRow = true;
                    }
                    break;
                case OffPosition_RU::AccountantJ:
                    this.insertValueToSection('AccountantName',  offTrans.Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        this.insertValueToSection('CompanyName',   CompanyInfo::find().name());
        this.insertValueToSection('DocumentNum',   documentNum);
        if (reportType == RTax25InventoryActType::Act)
        {
            this.insertValueToSection('CodeOKPO',      CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), inventoryDate));
            this.insertValueToSection('DocumentDate',  inventoryDate);
        }
        else
        {
            this.insertValueToSection('RptDate',       dayofmth(inventoryDate));
            this.insertValueToSection('RptMthName',    converter.date2strMonth(inventoryDate));
            this.insertValueToSection('RptYear',       year(inventoryDate));
        }
        this.insertValueToSection('Date',          dayofmth(inventoryDate));
        this.insertValueToSection('MthName',       converter.date2strMonth(inventoryDate));
        this.insertValueToSection('Year',          year(inventoryDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formActPart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form body part for Act separately for debit and credit.
    /// </summary>
    /// <param name="_debtType">
    /// Type of part (debit or credit)
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void formActPart(RTax25DebtType _debtType)
    {
        str sectPartHeader;
        str sectPageHeader;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        if (_debtType == RTax25DebtType::Debit)
        {
            sectPartHeader = #part1Header;
            sectPageHeader = #part1PageHeader;
        }
        else
        {
            sectPartHeader = #part2Header;
            sectPageHeader = #part2PageHeader;
        }

        this.execute(sectPartHeader);
        this.execute(sectPageHeader);

        while select sum(DebtAmount), sum(NonapprovedAmount), sum(HopelessAmount), maxof(LedgerDimension) from actLine
            group by ModuleType, AccountNum
            where actLine.DebtType == _debtType
            outer join MainAccount from dimAttrValueCombo group by MainAccount
            where dimAttrValueCombo.RecId == actLine.LedgerDimension

        {
            lineNo ++;
            lineName = strfmt("%1, %2", LedgerDimensionFacade::getMainAccountFromLedgerDimension(actLine.LedgerDimension).localizedName(), actLine.custVendName());
            lineAccNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(actLine.LedgerDimension);
            totalApprovedDebtAmount += actLine.DebtAmount - actLine.NonapprovedAmount;
            totalNonapprovedAmount  += actLine.NonapprovedAmount;
            totalHopelessAmount     += actLine.HopelessAmount;
            if (this.mustCreateNewPage(_debtType))
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(sectPageHeader);
            }

            this.execute(#body);
        }
        this.execute(#partFooter);
        this.resetTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formAppendix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forms body part for Appendix
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void formAppendix()
    {
        RTax25TmpInventoryActLine   offsetActLine;
        CustVendTable               custVendTable;
        offsetActLine.setTmpData(actLine);
        this.execute(#pageHeader);
        while select sum(DebtAmount), sum(HopelessAmount) from actLine
            group by DebtType, ModuleType, AccountNum, AgreementId,
                     DocumentDate, DocumentNum, DocumentName, DebtDate
        {
            lineNo ++;
            custVendTable = actLine.custvendTable();
            custVendInfo  = strfmt("%1, %2, %3", custVendTable.name(), DirParty::primaryPostalAddress(custVendTable.Party).Address, custVendTable.phone());
            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                this.execute(#pageHeader);
            }
            this.execute(#body);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        inventoryDate = dlgInventoryDate.value();
        documentNum   = dlgDocumentNum.value();
        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initOfficials()
    {
        OfficialsServ_RU officialsServ;

        officialsServ = new OfficialsServ_RU();
        officialsServ.initRTax25Inv17(this.parmReportType());
        offSessionId  = officialsServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        inventoryDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#reportHeader);
        this.addSection(#body, true);
        this.addSection(#reportFooter);
        if (reportType == RTax25InventoryActType::Act)
        {
            this.addSection(#partFooter);
            this.addSection(#part2Header);
            this.addSection(#part2PageHeader);
            this.addSection(#part1Header);
            this.addSection(#part1PageHeader);
        }
        else
        {
            this.addSection(#pageHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesCount</Name>
				<Source><![CDATA[
    private int linesCount(RTax25DebtType _debtType)
    {
        DimensionAttributeValueCombination  dimAttrValueCombo;
        int retval = (_debtType == RTax25DebtType::Debit) ? actualNumOfDebLines
                                                            : actualNumOfCredLines;
        if (retval == -1 && reportType == RTax25InventoryActType::Act)
        {
            retval = 0;
            while select count(RecId) from actLine
                group by ModuleType, AccountNum
                where actLine.DebtType == _debtType
                outer join MainAccount from dimAttrValueCombo group by MainAccount
                where dimAttrValueCombo.RecId == actLine.LedgerDimension
            {
                retval ++;
            }
            if (_debtType == RTax25DebtType::Debit)
            {
                actualNumOfDebLines = retval;
            }
            else
            {
                actualNumOfCredLines = retval;
            }
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <param name="_debtType">
    /// Type of line is being printed
    /// </param>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage(RTax25DebtType _debtType = RTax25DebtType::Debit)
    {
        real    requiredHeight;
        boolean calcFooterHeight = true;

        requiredHeight = this.getRangeHeight(#body);

        if (lineNo == this.linesCount(_debtType))
        {
            requiredHeight += conPeek(mapSections.lookup(#partFooter), #posSectionHeight);
        }
        if (lineNo == this.totalLineCount())
        {
            if (reportType == RTax25InventoryActType::Act)
                calcFooterHeight = (_debtType == RTax25DebtType::Credit);
            if (calcFooterHeight)
                requiredHeight += conPeek(mapSections.lookup(#reportFooter), #posSectionHeight);
        }
        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        actualNumOfDebLines = -1;
        actualNumOfCredLines = -1;
        totalLineCount = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsessionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    OffSessionId_RU parmOffsessionId()
    {
        return offSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RTax25InventoryActType parmReportType(RTax25InventoryActType _reportType = reportType)
    {
        ;
        reportType = _reportType;
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseOffsessionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void releaseOffsessionId()
    {
        if (this.parmOffsessionId())
            OfficialsServ_RU::releaseOffsessionId(this.parmOffsessionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// reset total ammounts
    /// </summary>

    private void resetTotals()
    {
        totalApprovedDebtAmount = 0;
        totalNonapprovedAmount = 0;
        totalHopelessAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    FileName templateName()
    {
        return (reportType == RTax25InventoryActType::Act) ? resourceStr(INV17_RU) : resourceStr(INV17Appendix_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventoryActLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void tmpInventoryActLine(RTax25TmpInventoryActLine  _actLine)
    {
        actLine.setTmpData(_actLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.otherActCells(24)
    #define.otherAppendixCells(7)
    #define.lineAppendixCells(9)
    protected Counter totalCells()
    {
        int otherCells;
        int lineCells;
        if (reportType == RTax25InventoryActType::Act)
        {
            otherCells  = #otherActCells;
            lineCells   = #otherActCells;
        }
        else
        {
            otherCells  = #otherAppendixCells;
            lineCells   = #lineAppendixCells;
        }

        return otherCells + lineCells * this.totalLineCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLineCount</Name>
				<Source><![CDATA[
    private int totalLineCount()
    {
        if (totalLineCount == -1)
        {
            if (reportType == RTax25InventoryActType::Act)
            {
                totalLineCount = this.linesCount(RTax25DebtType::Debit) + this.linesCount(RTax25DebtType::Credit);
            }
            else
            {
                totalLineCount = 0;
                while select count(RecId) from actLine
                group by DebtType, ModuleType, AccountNum, AgreementId,
                                DocumentDate, DocumentNum, DocumentName, DebtDate
                {
                    totalLineCount ++;
                }
            }
        }
        return totalLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);
        if (!documentNum)
        {
            ret = checkFailed("@GLS112775");
        }

        if (inventoryDate == dateNull())
        {
            ret = checkFailed("@GLS112774");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RTax25InventoryActReport construct(RTax25TmpInventoryActLine _actLine,
                                                     RTax25InventoryActType    _reportType)
    {
        RTax25InventoryActReport    report = new RTax25InventoryActReport();
        ;

        report.parmReportType(_reportType);
        report.tmpInventoryActLine(_actLine);
        report.initOfficials();
        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RTax25InventoryActReport    report;
        ;

        if (_args.dataset() != tablenum(RTax25TmpInventoryActLine))
        {
        throw error("@SYS18626");
        }

        report = RTax25InventoryActReport::construct(_args.record(), _args.parmEnum());
        if (report.prompt())
        {
            report.runOperation();
        }
        report.releaseOffsessionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>