<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTableType
{
    #define.Star('*')

    ProjTable           projTable;
    NoYes               createInvoiceProject;

    FormStringControl   ctrlProjId;         // Project ID
    FormStringControl   ctrlName;           // Project Name
    FormStringControl   ctrlGroupId;        // Project group
    FormStringControl   ctrlProjInvoiceId;  // Project contract ID
    FormStringControl   ctrlCustAccount;    // Customer

    private boolean enableMultipleContractLinesForProject = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeInTree</Name>
				<Source><![CDATA[
    public boolean activeInTree()
    {
        if (projTable.Header)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeInTreeRevenue</Name>
				<Source><![CDATA[
    public boolean activeInTreeRevenue()
    {
        boolean ret = false;

        if (enableMultipleContractLinesForProject)
        {
            ret = ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreated</Name>
				<Source><![CDATA[
    public boolean checkCreated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEstimated</Name>
				<Source><![CDATA[
    public boolean checkEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReportedFinished</Name>
				<Source><![CDATA[
    public boolean checkReportedFinished()
    {   
        boolean ret = this.hasNoOpenTransaction();

        if (!ret)
        {
            warning('@Proj:ProjectClosureValidation');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoOpenTransaction</Name>
				<Source><![CDATA[
    public boolean hasNoOpenTransaction()
    {
        boolean ret = true;

        // Prevent project closure if there are any unposted transactions.
        if (ProjParameters::find().PreventProjectClosure == NoYes::Yes)
        {
            if (ProjTable::hasUnPostedTransactions(projTable.ProjId))
            {
                ret = false;
            }
            else
            {
                // Check if there is any sales line order of type Item requirement is active.
                SalesLine salesLine;
                select firstOnly RecId from salesLine
                    where salesLine.SalesType == SalesType::ItemReq
                        && salesLine.ProjId == projTable.ProjId
                        && salesLine.SalesStatus == SalesStatus::Backorder;

                if (salesLine)
                {
                    ret = false;
                }
                else
                {
                    // Check if there is any active purchase order line.
                    PurchLine purchLine;
                    select firstOnly RecId from purchLine
                        where purchLine.ProjId ==  projTable.ProjId
                            && (purchLine.PurchStatus == PurchStatus::Backorder
                            || purchLine.PurchStatus == PurchStatus::Received)
                            && purchLine.IsDeleted == NoYes::No;

                    if (purchLine)
                    {
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkScheduled</Name>
				<Source><![CDATA[
    public boolean checkScheduled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartUp</Name>
				<Source><![CDATA[
    public boolean checkStartUp()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUser1</Name>
				<Source><![CDATA[
    public boolean checkUser1()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUser2</Name>
				<Source><![CDATA[
    public boolean checkUser2()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUser3</Name>
				<Source><![CDATA[
    public boolean checkUser3()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPwpSetting</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute("Call ProjTable::copyPwpSettingFromParentProject instead of calling this method. This method may be deleted in a future release.", false, 18\08\2016)]
    public void copyPwpSetting(ProjTable _subProjTable)
    {
        ProjPWPVendorRetentionSetting       srcProjPWPVendorRetentionSetting;
        ProjPWPVendorRetentionSetting       desProjPWPVendorRetentionSetting;

        while select srcProjPWPVendorRetentionSetting
            where srcProjPWPVendorRetentionSetting.ProjId ==  _subProjTable.ParentId
        {
            desProjPWPVendorRetentionSetting.data(srcProjPWPVendorRetentionSetting);
            desProjPWPVendorRetentionSetting.ProjId = _subProjTable.ProjId;
            desProjPWPVendorRetentionSetting.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormActive</Name>
				<Source><![CDATA[
    public void createFormActive(FormRun _formCreate)
    {
        ctrlProjId              = _formCreate.design().controlName('CtrlProjId');
        ctrlName                = _formCreate.design().controlName('Name');
        ctrlGroupId             = _formCreate.design().controlName('ProjTable_ProjGroupId');

        // Project Contract controls
        ctrlProjInvoiceId       = _formCreate.design().controlName('ProjInvoiceId');
        ctrlCustAccount         = _formCreate.design().controlName('CustAccount');

        ctrlProjId.mandatory(true);
        ctrlProjId.skip(false);

        ctrlName.skip(false);

        ctrlGroupId.mandatory(true);
        ctrlGroupId.skip(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlActivity</Name>
				<Source><![CDATA[
    public boolean ctrlActivity()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bank document control can be enabled for the specified document type,
    /// depending on the current project type.
    /// </summary>
    /// <param name="_exceptedDocumentType">
    /// The excepted bank document type to select.
    /// </param>
    /// <returns>
    /// true if the bank document type control can be selected to excepted document type; otherwise, false.
    /// </returns>
    public boolean ctrlBankDocumentType(BankLGDocumentType _exceptedDocumentType)
    {
        boolean ret;

        // Sets the default return value for each bank document type.
        switch (_exceptedDocumentType)
        {
            case BankLGDocumentType::None:
                ret = true;
                break;
            case BankLGDocumentType::LetterOfGuarantee:
                ret = this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlCategoryPosting</Name>
				<Source><![CDATA[
    public boolean ctrlCategoryPosting()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlControlGroup</Name>
				<Source><![CDATA[
    public boolean ctrlControlGroup()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlControlSystem</Name>
				<Source><![CDATA[
    public boolean ctrlControlSystem()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))
        {
            ret = ProjWIPTable::find(projTable.ProjId).RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlCustAccount</Name>
				<Source><![CDATA[
    public boolean ctrlCustAccount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlCustOpenTrans</Name>
				<Source><![CDATA[
    public boolean ctrlCustOpenTrans()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlExternal</Name>
				<Source><![CDATA[
    public boolean ctrlExternal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecast</Name>
				<Source><![CDATA[
    public boolean ctrlForecast()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastCost</Name>
				<Source><![CDATA[
    public boolean ctrlForecastCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastHour</Name>
				<Source><![CDATA[
    public boolean ctrlForecastHour()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastItem</Name>
				<Source><![CDATA[
    public boolean ctrlForecastItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastOnAcc</Name>
				<Source><![CDATA[
    public boolean ctrlForecastOnAcc()
    {
        boolean ret = true;

        if (this.enableMultipleContractLinesForProject && !projTable.ProjInvoiceProjId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastRevenue</Name>
				<Source><![CDATA[
    public boolean ctrlForecastRevenue()
    {
        boolean ret = true;

        if (this.enableMultipleContractLinesForProject && !projTable.ProjInvoiceProjId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastTransferFromQuotation</Name>
				<Source><![CDATA[
    public boolean ctrlForecastTransferFromQuotation()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlFunction</Name>
				<Source><![CDATA[
    public boolean ctrlFunction()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInquiry</Name>
				<Source><![CDATA[
    public boolean ctrlInquiry()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInvoice</Name>
				<Source><![CDATA[
    public boolean ctrlInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInvoices</Name>
				<Source><![CDATA[
    public boolean ctrlInvoices()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlOnAcc</Name>
				<Source><![CDATA[
    public boolean ctrlOnAcc()
    {
        return (projTable.ProjInvoiceProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPosting</Name>
				<Source><![CDATA[
    public boolean ctrlPosting()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProdOrder</Name>
				<Source><![CDATA[
    public boolean ctrlProdOrder()
    {
        if (projTable.Header)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjForecastBudgettransfer</Name>
				<Source><![CDATA[
    public boolean ctrlProjForecastBudgettransfer()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjGroup</Name>
				<Source><![CDATA[
    public boolean ctrlProjGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjItemReq</Name>
				<Source><![CDATA[
    public boolean ctrlProjItemReq()
    {
        if (projTable.Header)
        {
            return false;
        }

        if (!this.custAccount())
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjPeriodicPostingCost</Name>
				<Source><![CDATA[
    public boolean ctrlProjPeriodicPostingCost()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            (!projTable.ProjInvoiceProjId || ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjPeriodicPostingSales</Name>
				<Source><![CDATA[
    public boolean ctrlProjPeriodicPostingSales()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjSalesPriceCost</Name>
				<Source><![CDATA[
    public boolean ctrlProjSalesPriceCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjSalesPriceRevenue</Name>
				<Source><![CDATA[
    public boolean ctrlProjSalesPriceRevenue()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProjTransRevenueSubscription</Name>
				<Source><![CDATA[
    public boolean ctrlProjTransRevenueSubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProposal</Name>
				<Source><![CDATA[
    public boolean ctrlProposal()
    {
        return (projTable.ProjInvoiceProjId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPSADoInvoiceCost</Name>
				<Source><![CDATA[
    public boolean ctrlPSADoInvoiceCost()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPSAPreBill</Name>
				<Source><![CDATA[
    public boolean ctrlPSAPreBill()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPurchAgreement</Name>
				<Source><![CDATA[
    public boolean ctrlPurchAgreement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPurchOrderTable</Name>
				<Source><![CDATA[
    public boolean ctrlPurchOrderTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPurchReqTable</Name>
				<Source><![CDATA[
    public boolean ctrlPurchReqTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPurchRFQCaseTable</Name>
				<Source><![CDATA[
    public boolean ctrlPurchRFQCaseTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSalesAgreement</Name>
				<Source><![CDATA[
    public boolean ctrlSalesAgreement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSalesOrderTable</Name>
				<Source><![CDATA[
    public boolean ctrlSalesOrderTable()
    {
        boolean ret = true;

        if (this.enableMultipleContractLinesForProject)
        {
            ret = projTable.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Item);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSalesQuotationProjTable</Name>
				<Source><![CDATA[
    public boolean ctrlSalesQuotationProjTable()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlService</Name>
				<Source><![CDATA[
    public boolean ctrlService()
    {
        if (projTable.Header)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlServiceAgreement</Name>
				<Source><![CDATA[
    public boolean ctrlServiceAgreement()
    {
        if (projTable.Header)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSetup</Name>
				<Source><![CDATA[
    public boolean ctrlSetup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMAAccrueSubscription</Name>
				<Source><![CDATA[
    public boolean ctrlSMAAccrueSubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMACreateSubscription</Name>
				<Source><![CDATA[
    public boolean ctrlSMACreateSubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMAIndexSubscription</Name>
				<Source><![CDATA[
    public boolean ctrlSMAIndexSubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMASalesPriceSubscription</Name>
				<Source><![CDATA[
    public boolean ctrlSMASalesPriceSubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMAServiceOrderTransfer</Name>
				<Source><![CDATA[
    public boolean ctrlSMAServiceOrderTransfer()
    {
        return projTable.Status != ProjStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSMASubscription</Name>
				<Source><![CDATA[
    public boolean ctrlSMASubscription()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::TimeMaterial))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlStages</Name>
				<Source><![CDATA[
    public boolean ctrlStages()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSubscriptions</Name>
				<Source><![CDATA[
    public boolean ctrlSubscriptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTrans</Name>
				<Source><![CDATA[
    public boolean ctrlTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransCost</Name>
				<Source><![CDATA[
    public boolean ctrlTransCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransProjectRevenueTrans</Name>
				<Source><![CDATA[
    public boolean ctrlTransProjectRevenueTrans()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransProjTransItem</Name>
				<Source><![CDATA[
    public boolean ctrlTransProjTransItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransProjTransOnAccView</Name>
				<Source><![CDATA[
    public boolean ctrlTransProjTransOnAccView()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransPurchLine</Name>
				<Source><![CDATA[
    public boolean ctrlTransPurchLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransSalesLine</Name>
				<Source><![CDATA[
    public boolean ctrlTransSalesLine()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject &&
            ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Item))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlWizard</Name>
				<Source><![CDATA[
    public boolean ctrlWizard()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns customer account associated with the project.
    /// </summary>
    /// <returns>
    /// Customer account associated with the project.
    /// </returns>
    CustAccount custAccount()
    {
        CustAccount         custAccount;
     
        ProjParameters projParameters = ProjParameters::find();
        if (projParameters.DefaultSalesOrderCustomerAccount == ProjDefaultSalesOrderCustomerAccount::Project && 
            projTable.CustAccount != '')
        {
            custAccount = projTable.CustAccount;
        }
        else
        {
            // Customer account is only valid for customer or grant funding sources
            ProjFundingSource projFundingSource;
            select firstonly FundingType, Party, ProjGrant from projFundingSource
                where projFundingSource.ContractId == projTable.ProjInvoiceProjId &&
                    (projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant);
            switch (projFundingSource.FundingType)
            {
                case ProjFundingType::Customer:
                    custAccount = CustTable::findByPartyRecId(projFundingSource.Party).AccountNum;
                    break;

                case ProjFundingType::Grant:
                    custAccount = ProjGrant::find(projFundingSource.ProjGrant).CustAccount;
                    break;
            }
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        projTable.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the required controls, depending on the project type.
    /// </summary>
    /// <remarks>
    /// When a control is disabled, it is set to be skipped during user selection.This method also makes
    /// the control mandatory if it is applicable for that project type.
    /// </remarks>
    public void enableDisableFields()
    {
        // Reset the status of the project contract and estimate project fields.
        // Then we set their status again based on the project type.

        ctrlProjInvoiceId.enabled(true);
        ctrlProjInvoiceId.skip(false);
        ctrlProjInvoiceId.mandatory(false);

        ctrlCustAccount.enabled(true);
        ctrlCustAccount.skip(false);
        ctrlCustAccount.mandatory(false);

        switch (projTable.Type)
        {
            case ProjType::TimeMaterial:
            case ProjType::FixedPrice:
                ctrlProjInvoiceId.mandatory(true);
                break;

            case ProjType::Investment:
            case ProjType::Cost:
            case ProjType::Internal:
                ctrlProjInvoiceId.enabled(false);
                ctrlProjInvoiceId.skip(true);
                break;

            case ProjType::Time:
                ctrlProjInvoiceId.enabled(false);
                ctrlProjInvoiceId.skip(true);

                ctrlCustAccount.enabled(false);
                ctrlCustAccount.skip(true);
                break;

            case ProjType::None:                
                ctrlGroupId.mandatory(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParent</Name>
				<Source><![CDATA[
    public void initFromParent(ProjId  projId)
    {
        LogisticsLocationEntity location;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  logisticsPostalAddress;
        ProjTable               projParent = ProjTable::find(projId);

        projTable.ParentId                      = projId;
        projTable.ProjInvoiceProjId             = projParent.ProjInvoiceProjId;
        projTable.ProjGroupId                   = projParent.ProjGroupId;
        projTable.WorkerResponsible             = projParent.WorkerResponsible;
        projTable.WorkerResponsibleSales        = projParent.WorkerResponsibleSales;
        projTable.WorkerResponsibleFinancial    = projParent.WorkerResponsibleFinancial;
        projTable.Format                        = projParent.Format;
        projTable.ProjLedgerPosting             = projParent.ProjLedgerPosting;
        projTable.ProjLinePropertySearch        = projParent.ProjLinePropertySearch;
        projTable.ProjPriceGroup                = projParent.ProjPriceGroup;
        projTable.ProjBudgetManagement          = projParent.ProjBudgetManagement;
        projTable.CustAccount                   = projParent.CustAccount;

        //create location and copy address to project
        location = LogisticsLocationEntity::constructFromLocationRecId(projParent.DeliveryLocation);

        if (location && location.parmLocationRecId())
        {
            ttsbegin;
            // Create a location record
            logisticsLocation = LogisticsLocation::create(location.parmLocationDescription(),true);
            projTable.DeliveryLocation = logisticsLocation.RecId;

            // Copy Address to location record
            logisticsPostalAddress.data(location.getPostalAddress());
            logisticsPostalAddress.Location = logisticsLocation.RecId;
            logisticsPostalAddress.insert();
            ttscommit;
        }
        projTable.DlvName               = projParent.DlvName;

        projTable.Email                 = projParent.Email;

        projTable.DefaultDimension      = projParent.DefaultDimension;
        projTable.TaxGroupId            = projParent.TaxGroupId;

        projTable.StartDate             = projParent.StartDate;
        projTable.EndDate               = projParent.EndDate;

        projTable.SortingId             = projParent.SortingId;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            // Init PSA fields
            projTable.psaSchedCalendarId    = projParent.psaSchedCalendarId;
            projTable.psaSchedStartDate     = projParent.psaSchedStartDate;
            projTable.psaSchedEndDate       = projParent.psaSchedEndDate;
            projTable.psaSchedDuration      = projParent.psaSchedDuration;
        }

        projTable.wipProject            = projParent.wipProject;

        if (projTable.wipProject == "")
        {
            projTable.AssetId               = projParent.AssetId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTable</Name>
				<Source><![CDATA[
    public void initProjTable(Common _buffer = null)
    {
        ProjTable   parentProjTable;

        projTable.initValue(false);

        if (projTable.ParentId)
        {
            parentProjTable = ProjTable::find(projTable.ParentId);
            if (parentProjTable)
            {
                projTable.UseBudgeting                      = parentProjTable.UseBudgeting;
                projTable.ProjBudgetaryControlOn            = parentProjTable.ProjBudgetaryControlOn;
                projTable.UseAlternateProject               = parentProjTable.UseAlternateProject;
                projTable.AlternateBudgetProject            = parentProjTable.AlternateBudgetProject;
                projTable.ProjBudgetOverrunOption           = parentProjTable.ProjBudgetOverrunOption;
                projTable.ProjBudgetInterval                = parentProjTable.ProjBudgetInterval;
                projTable.ProjCarryForwardNegativeBudget    = parentProjTable.ProjCarryForwardNegativeBudget;
                projTable.ProjCarryForwardRemainingBudget   = parentProjTable.ProjCarryForwardRemainingBudget;
                projTable.ProjBudgetManagement              = parentProjTable.ProjBudgetManagement;

                if (this.enableMultipleContractLinesForProject)
                {
                    projTable.Status = ProjStatusTypeRule::firstStage(ProjType::None);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the specified project table buffer to <c>ProjTable</c>.
    /// </summary>
    public void insert()
    {
        projTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustAccount invoiceAccount()
    {
        if (this.enableMultipleContractLinesForProject && !projTable.ProjInvoiceProjId)
        {
            return projTable.CustAccount;
        }

        CustTable           custTable;
        ProjFundingSource   projFundingSource;

        // Invoice account is only valid for customer or grant funding sources
        select firstonly FundingType, Party, ProjGrant from projFundingSource
            where projFundingSource.ContractId == projTable.ProjInvoiceProjId &&
                (projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant);
        switch (projFundingSource.FundingType)
        {
            case ProjFundingType::Customer:
                custTable = CustTable::findByPartyRecId(projFundingSource.Party);
                break;

            case ProjFundingType::Grant:
                custTable = CustTable::find(ProjGrant::find(projFundingSource.ProjGrant).CustAccount);

            default :
        }

        return custTable.InvoiceAccount ? custTable.InvoiceAccount : custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheck</Name>
				<Source><![CDATA[
    public boolean journalCheck()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckCost</Name>
				<Source><![CDATA[
    public boolean journalCheckCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckRevenue</Name>
				<Source><![CDATA[
    public boolean journalCheckRevenue()
    {
        boolean ret = true;

        if (projTable.Header)
        {
            ret = checkFailed(strFmt("@SYS96612", projTable.ProjId));
        }
        else if (this.enableMultipleContractLinesForProject && !projTable.ProjInvoiceProjId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjTable _projTable)
    {
        projTable   = _projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreated</Name>
				<Source><![CDATA[
    public void runCreated()
    {
        ProjUpdCreated projCreated = new ProjUpdCreated(projTable);

        projCreated.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEstimated</Name>
				<Source><![CDATA[
    public void runEstimated()
    {
        ProjUpdEstimated projEstimated = new ProjUpdEstimated(projTable);

        projEstimated.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReportedFinished</Name>
				<Source><![CDATA[
    public void runReportedFinished()
    {
        ProjUpdReportedFinished projReportedFinished = new ProjUpdReportedFinished(projTable);

        projReportedFinished.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduled</Name>
				<Source><![CDATA[
    public void runScheduled()
    {
        ProjUpdScheduled projScheduled = new ProjUpdScheduled(projTable);

        projScheduled.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStartUp</Name>
				<Source><![CDATA[
    public void runStartUp()
    {
        ProjUpdStartUp projStartUp = new ProjUpdStartUp(projTable);

        projStartUp.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUser1</Name>
				<Source><![CDATA[
    public void runUser1()
    {
        ProjUpdUser1 projUser1 = new ProjUpdUser1(projTable);

        projUser1.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUser2</Name>
				<Source><![CDATA[
    public void runUser2()
    {
        ProjUpdUser2 projUser2 = new ProjUpdUser2(projTable);

        projUser2.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUser3</Name>
				<Source><![CDATA[
    public void runUser3()
    {
        ProjUpdUser3 projUser3 = new ProjUpdUser3(projTable);

        projUser3.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        projTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if (!projTable.validateDelete(true))
        {
            return false;
        }

        if (projTable.childExist())
        {
            return checkFailed("@SYS50687");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ProjId     projHier = projTable.ProjId;

        if (!ProjStatusTypeRule::checkStatus(projTable.Type, projTable.Status))
        {
            return checkFailed(strFmt("@SYS56161",projTable.Status, projTable.Type));
        }

        // Verify the project does not conflict with a subproject when ProjOps is not enabled,
        // project doesn't yet exist, and project does not have a parent.
        if (!projTable.RecId && !projTable.ParentId 
            && (!ProjExcludeValidationSubprojectProjOpsFlight::instance().isEnabled() 
                || !ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()))
        {
            while (projHier)
            {
                projHier    = subStr(projHier,1,strLen(projHier)-1);
                if (ProjTable::exist(projHier) && projHier != projTable.ParentId)
                {
                    return checkFailed (strFmt("@SYS53140",projHier));
                }
            }

            if (ProjTable::like(projTable.ProjId+'*'))
            {
                return checkFailed (strFmt("@SYS53140",ProjTable::findLike(projTable.ProjId+'*').ProjId));
            }
        }

        return projTable.validateWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetCost</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetCost()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetEmpl</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetEmpl()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetItem</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetOnAccount</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetOnAccount()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject && projTable.ProjInvoiceProjId)
        {
            ret = true;
        }
        else
        {
            ret = checkFailed(strFmt("@SYS62339", projTable.Type));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates budget write for revenue transaction
    /// </summary>
    /// <returns>
    /// true if it's valid to write budget for this project; otherwise, false.
    /// </returns>
    public boolean validateWriteBudgetRevenue()
    {
        boolean ret = false;

        if (this.enableMultipleContractLinesForProject)
        {
            if (!projTable.ProjInvoiceProjId)
            {
                return checkFailed("@Proj:FeeTransNotAllowedForProjWithoutContract");
            }
            else
            {
                PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue);
                
                if (!contractLine)
                {
                    return checkFailed("@Proj:FeeTransNotAllowedForProjWithoutContractLineForFee");
                }
                else if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::TimeMaterial)
                {
                    ret = true;
                }
                else if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice)
                {
                    if (ProjRevRecHelper::getRevProfileV2(projTable, contractLine, true).CompletePrinciple == ProjCompletePrincip::NoWIP)
                    {
                        return checkFailed("@Proj:RevenueNoWIPAccountingError");
                    }
                    else
                    {
                        ret = true;
                    }
                }
            }
        }

        if (!ret)
        {
            ret = checkFailed(strFmt("@SYS88800", projTable.Type));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteCreateJournal</Name>
				<Source><![CDATA[
    public boolean validateWriteCreateJournal()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdTable</Name>
				<Source><![CDATA[
    public boolean validateWriteProdTable()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePurchReqTable</Name>
				<Source><![CDATA[
    public boolean validateWritePurchReqTable()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePurchRFQCaseTable</Name>
				<Source><![CDATA[
    public boolean validateWritePurchRFQCaseTable()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612", projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePurchTable</Name>
				<Source><![CDATA[
    public boolean validateWritePurchTable()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612",projTable.ProjId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteSalesLine</Name>
				<Source><![CDATA[
    public boolean validateWriteSalesLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteSalesTable</Name>
				<Source><![CDATA[
    public boolean validateWriteSalesTable()
    {
        if (projTable.Header)
        {
            return checkFailed(strFmt("@SYS96612", projTable.ProjId));
        }
        if (!this.ctrlSalesOrderTable())
        {
            return checkFailed(strFmt("@SYS342107", projTable.Type));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjTableType construct(ProjTable _projTable)
    {
        ProjTableType projTableType;

        switch (_projTable.Type)
        {
            case ProjType::TimeMaterial:
                projTableType = new ProjTableType_TimeMaterial(_projTable);
                break;

            case ProjType::FixedPrice:
                projTableType = new ProjTableType_FixedPrice(_projTable);
                break;

            case ProjType::Cost:
                projTableType = new ProjTableType_Cost(_projTable);
                break;

            case ProjType::Time:
                projTableType = new ProjTableType_Time(_projTable);
                break;

            case ProjType::Investment:
                projTableType = new ProjTableType_Investment(_projTable);
                break;

            case ProjType::Internal:
                projTableType = new ProjTableType_Internal(_projTable);
                break;

            default:
                projTableType = new ProjTableType(_projTable);
                break;
        }

        return projTableType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>