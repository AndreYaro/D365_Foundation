<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreate_MultiTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCountCreate_MultiTask extends InventCountCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newCountCreate</Name>
				<Source><![CDATA[
    public static InventCountCreate_MultiTask newCountCreate(
        InventJournalId _journalId,
        TransDate       _transDate,
        InventDimParm   _inventDimParm)
    {
        InventCountCreate_MultiTask   inventCountCreate = new InventCountCreate_MultiTask();

        inventCountCreate.getLast();
        inventCountCreate.parmJournalId(_journalId);
        inventCountCreate.parmCountDate(_transDate);
        inventCountCreate.parmInventDimParm(_inventDimParm);
        return inventCountCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 15*60*1000; // 15 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxItemTaskCount</Name>
				<Source><![CDATA[
    protected int maxItemTaskCount()
    {
        return max(1, System.Environment::ProcessorCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTasks</Name>
				<Source><![CDATA[
    private List createItemTasks()
    {
        List taskList = new List(Types::Class);

        Query newQuery = new Query(queryRun.query());

        QueryBuildDataSource qbsSum  = newQuery.dataSourceTable(tableNum(InventSum));
        QueryBuildDataSource qbsDim  = newQuery.dataSourceTable(tableNum(InventDim));
        qbsSum.addGroupByAndSelectionField(fieldNum(InventSum, ItemId));
        qbsDim.removeOrderByField(fieldNum(InventDim, inventLocationId));

        QueryRun qr = new QueryRun(newQuery);
        
        int itemCount = QueryRun::getQueryRowCount(newQuery, intMax());
        
        if (itemCount == 0)
        {
            return taskList;
        }

        int numOfTasksToCreate = min(itemCount, this.maxItemTaskCount());
        int itemsCountForTask = itemCount / numOfTasksToCreate;

        InventSum inventSum;
        List itemsForTask = new List(Types::String);

        int currentTask = 1;
        int itemSetBaseLineNum = 1;
        int remainItemsForTask = (currentTask == numOfTasksToCreate) ? itemCount - itemSetBaseLineNum + 1 : itemsCountForTask;

        while (qr.next())
        {
            inventSum = qr.get(tableNum(InventSum));
            itemsForTask.addEnd(inventSum.ItemId);
            remainItemsForTask --;

            if (remainItemsForTask == 0)
            {
                taskList.addEnd(InventCountCreateItemTask::newCountCreateItemTask(this.parmJournalId(), this.parmCountDate(), this.parmInventDimParm(), itemsForTask, numOfTasksToCreate, currentTask, queryRun.query(), itemSetBaseLineNum));
                
                itemsForTask = new List(Types::String);
                itemSetBaseLineNum += itemsCountForTask;
                currentTask ++;
                remainItemsForTask = (currentTask == numOfTasksToCreate) ? itemCount - itemSetBaseLineNum + 1 : itemsCountForTask;
            }

        }   

        if (!itemsForTask.empty())
        {
            taskList.addEnd(InventCountCreateItemTask::newCountCreateItemTask(this.parmJournalId(), this.parmCountDate(), this.parmInventDimParm(), itemsForTask, numOfTasksToCreate, currentTask, queryRun.query(), itemSetBaseLineNum));
        }

        return taskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        #OCCRetryCount

        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();

        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';

                ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                resultset.next();
            }
        }

        this.allTasksSucceed(_threadTasklist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allTasksSucceed</Name>
				<Source><![CDATA[
    private void allTasksSucceed(System.Threading.Tasks.Task[] _threadTasklist)
    {
        boolean allSucceed = true;
        str errorStr = "";

        for (int i = 0; i < _threadTasklist.Get_Length(); i++)
        {
            boolean taskSucceed = false;
            System.Threading.Tasks.Task task = _threadTasklist.GetValue(i);
            AsyncTaskResult taskResult = AsyncTaskResult::getAsyncTaskResult(task);
            System.Exception exception = taskResult.getException();
            taskSucceed = (exception == null);

            if (!taskSucceed)
            {
                allSucceed = false;
                container infologCon = taskResult.getInfologData();
                container infoException, infoItem;
                str ExceptionMsg, ItemMsg;
                for(int j = 2;  j < conLen(infologCon);  j += 2)
                {
                    infoException = conPeek(infologCon, j);
                    ExceptionMsg  = conPeek(infoException, 2);

                    infoItem      = conPeek(infologCon, j + 1);
                    ItemMsg       = conPeek(infoItem, 2);
                    
                    errorStr += strFmt("%1 : %2\n", ItemMsg, ExceptionMsg);
                }
            }
        }
        
        if (!allSucceed)
        {
            throw error("@SCM:InventCountCreateMultiTaskException" + errorStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(InventCountCreate::description());
        var logger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = logger.activityContext(logger.activity('Create on-hand counting journal')))
        {
            List taskList = this.createItemTasks();

            int taskListLength = taskList.elements();
            System.Threading.Tasks.Task[] threadTasklist = new System.Threading.Tasks.Task[taskListLength]();

            int i = 0;

            ListEnumerator tasksEnumerator = taskList.getEnumerator();
            while (tasksEnumerator.moveNext())
            {
                CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

                if (asyncRunnableTask)
                {
                    threadTasklist.SetValue(asyncRunnableTask.runAsync(), i);
                    i++;
                }
            }

            this.waitForAsyncTasks(threadTasklist);

            this.updateJournalTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTable</Name>
				<Source><![CDATA[
    private void updateJournalTable()
    {
        #OCCRetryCount

        this.initJournalTableData();

        InventJournalTrans inventJournalTransCount;

        select count(RecId) from inventJournalTransCount where inventJournalTransCount.JournalId == journalId;

        journalTableData.journalTable().NumOfLines += inventJournalTransCount.RecId;

        try
        {
            ttsbegin;
            if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
            {
                journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
            }
            else
            {
                journalTableData.journalTable().update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>