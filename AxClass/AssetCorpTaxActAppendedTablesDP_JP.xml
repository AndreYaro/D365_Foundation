<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendedTablesDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendedTablesDP_JP</c> class is the data provider class for the <c>AssetCorpTaxActAppendedTables_JP</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetCorpTaxActAppendedTablesContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetCorpTaxActAppendTables_JP))
]
class AssetCorpTaxActAppendedTablesDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetCorpTaxActAppendedTablesTmp_JP assetCorpTaxActAppendedTablesTmp;
    AssetCorpTaxActAppendedHeaderTmp_JP assetCorpTaxActAppendedHeaderTmp;

    TransDate startDate;
    TransDate endDate;
    PrintDate printDate;

    AssetDepreciationMethod currentDepMethod;
    AssetDepreciationMethod extDepMethod;
    AssetSpecialDepRate_JP assetSpecialDepRate;
    AssetSpecialDepBaseRatio_JP assetSpecialDepBaseRatio;
    FiscalYearName fiscalYearName;

    AssetDepProfileChange_JP depProfileChange;
    TransDate depEndDate;
    TransDate depStartDate;
    AssetDepreciationProfile assetDepreciationProfileLocal;
    AssetSumCalc_Trans assetSumCalc;
    protected AssetSumCalc_Trans assetSumCalcCurrent;

    AssetDepEntityInquiry_PreTaxDeduction_JP assetDepEntityInquiry_PreTaxDeduction;

    AssetTable assetTable;
    AssetBook assetBook;
    protected AssetBook assetBookCurrent;
    AssetBook refAssetBook;
    protected AssetBook refAssetBookCurrent;
    AssetMajorType assetMajorType;
    AssetBookTable assetBookTable;
    AssetPropertyGroup assetPropertyGroup;
    AssetDepreciationProfile assetDepreciationProfile;
    AssetDepreciationProfile refAssetDepreciationProfileExt;
    AssetDepreciationProfile assetDepreciationProfileExt;
    AssetDepreciationProfile depreciationProfile;
    container depMethod;
    int rowCount;
    boolean isChangeOver;
    boolean isChangeOverFromODBToOSL;
    Currency currency;
    LanguageId currentUserLanguage;
    CurrencyExchangeHelper currencyExchangeHelper;

    int equallyDividedYearNum;
    RefRecId assetDepRateSchedule;

    AssetCorpTaxActAppendedTableType_JP assetReportType;
    AssetCorpTaxActAppendedTableGroupBy_JP groupBy;

    #define.DefaultAmount(0.00)
    #define.GroupNum(5)
    #define.Blank('')
    #define.Zero(0)
    #define.ParameterDate('yy.M.d')
    #define.ParameterYear('yy')
    #define.ParameterName('gg')
    #define.ParameterMonth('MM')
    #define.ParameterDay('dd')
    #define.ParameterYearName('ggy\'年\'M\'月\'')
    #define.NetAcquisitionRatePercent5(0.05)
    #define.NetAcquisitionRatePercent10(0.1)
    #define.GuaranteedAmount(1)

    #AssetDepCalculation_JP
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromAccounttingToJPY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all transaction currency amounts from the specified accounting currency amounts.
    /// </summary>
    public void amountFromAccounttingToJPY()
    {
        // 16.1-7 and 16.2-7
        assetCorpTaxActAppendedTablesTmp.AcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AcquisitionCost);

        // 16.1-8 and 16.2-8
        assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry);

        // 16.1-9 and 16.2-9
        assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost);

        // 16.1-10 and 16.2-10
        assetCorpTaxActAppendedTablesTmp.AssetBookValueAtEndOfTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AssetBookValueAtEndOfTerm);

        // 16.1-11 and 16.2-11
        assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntryEndTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntryEndTerm);

        // 16.1-12 and 16.2-12
        assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm);

        // 16.1-13 and 16.2-13
        assetCorpTaxActAppendedTablesTmp.NetBookValue = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.NetBookValue);

        // 16.1-14 and 16.2-14
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm);

        // 16.1-15 and 16.2-15
        assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm);

        // 16.1-16 and 16.2-16
        assetCorpTaxActAppendedTablesTmp.BaseTotal = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.BaseTotal);

        // 16.2-17
        assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm);

        // 16.2-18
        assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount);

        // 16.1-17
        assetCorpTaxActAppendedTablesTmp.RemainingValue = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.RemainingValue);

        // 16.1-18 and 16.2-19
        assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5);

        // 16.1-19
        assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountOSL = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountOSL);

        // 16.1-21 and 16.2-21
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld);

        // 16.1-22 and 16.2-22
        assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld);

        // 16.1-23 and 16.2-23
        assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld);

        // 16.1.24 and 16.2-24
        assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld);

        // 16.1-25
        assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountSL = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountSL);

        // 16.1.27
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew);

        // 16.1-28 and 16.2-32
        assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew);

        // 16.1-29 and 16.2-33
        assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew);

        // 16.2-26
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment);

        // 16.2-28
        assetCorpTaxActAppendedTablesTmp.GuaranteeDepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.GuaranteeDepreciationAmount);

        // 16.2-29
        assetCorpTaxActAppendedTablesTmp.AdjustedAcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AdjustedAcquisitionCost);

        // 16.2-31
        assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationAmount);

        // 16.1-30
        assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm);

        // 16.1-32
        assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit);

        // 16.1-33
        assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm);

        // 16.1-34
        assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum);

        // 16.1-35
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm);

        // 16.1-36
        assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount);

        // 16.1-37
        assetCorpTaxActAppendedTablesTmp.OverdepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.OverdepreciationAmount);

        // 16.1-38
        assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm);

        // 16.1-39
        assetCorpTaxActAppendedTablesTmp.Underdepreciation = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.Underdepreciation);

        // 16.1-40
        assetCorpTaxActAppendedTablesTmp.ReversalReduction = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.ReversalReduction);

        // 16.1-41
        assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm);

        // 16.1-42
        assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm);

        // 16.1-43
        assetCorpTaxActAppendedTablesTmp.SpecialDepreciation = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.SpecialDepreciation);

        // 16.1.44
        assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm);

        // 16.1.46
        assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTerm);

        // 16.1-47
        assetCorpTaxActAppendedTablesTmp.CarriedForwardUnderdeprectionAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTablesTmp.CarriedForwardUnderdeprectionAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A Local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        AmountCur amount;

        if (_amountMST != 0)
        {
            currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

            amount = currencyExchangeHelper.calculateAccountingToTransaction(#CurrencyJPY, _amountMST, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransAmountPerDateTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions from the <c>AssetTrans</c> table for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name="_assetTransType">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <param name="_startDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name="_endDate">
    /// The ending date for the sum.
    /// </param>
    /// <returns>
    /// A sum of the transactions from the <c>AssetTrans</c> table.
    /// </returns>
    public AmountMST assetTransAmountPerDateTransTypes(container _assetTransType, TransDate _startDate, Transdate _endDate)
    {
        return AssetTrans::amountMSTPerDateTransTypes(
            assetTable.AssetId,
            refAssetBook.BookId,
            _assetTransType,
            _startDate,
            _endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllocatedAmount</Name>
				<Source><![CDATA[
    private AssetAmount calcAllocatedAmount(FromDate _fromDate, ToDate _toDate)
    {
        container assetTransTypeCon;

        AssetAmount ret;

        if (AssetReductionEntryProfile_JP::find(refAssetBook.reductionEntryTemplateId_JP(false, #Blank)).Method == AssetReductionEntryMethod_JP::Reserve)
        {
            assetTransTypeCon = [AssetTransType::ReductionEntryReserveAllocation_JP];
        }

        if (assetDepreciationProfileExt
            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff
            && refAssetDepreciationProfileExt
            && refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            assetTransTypeCon += [AssetTransType::AdditionalDepReserveAllocation_JP, AssetTransType::SpecialDepReserveAllocation_JP];
        }

        ret =  this.assetTransAmountPerDateTransTypes(
            assetTransTypeCon,
            _fromDate,
            _toDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationAmountForReport</Name>
				<Source><![CDATA[
    private AssetAmount calcDepreciationAmountForReport(AssetBook _assetBook, TransDate _fromDate, TransDate _toDate)
    {
        AssetAmount depAmount;
        AssetAmount acceleratedDepAmount;
        AssetAmount specialDircectOffDepAmount;

        depAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(_assetBook, _fromDate, _toDate);
        acceleratedDepAmount = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(_assetBook, _fromDate, _toDate);

        if (refAssetDepreciationProfileExt
            && refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            specialDircectOffDepAmount = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                refAssetBook,
                _fromDate,
                _toDate,
                AssetTransType::ExtraordinaryDepreciation,
                0,
                true);
        }

        return depAmount + acceleratedDepAmount + specialDircectOffDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReversalReductionForEquallyDivided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calulates the reversal reduction amount for old depreciation method with the prescriptive rules.
    /// </summary>
    /// <returns>
    /// The reversal reduction amount for old depreciation method with the prescriptive rules.
    /// </returns>
    public AssetAmount calcReversalReductionForEquallyDivided()
    {
        AssetAmount reversalReduction;
        int yearcount = #Zero;
        int calyearcount = #Zero;
        int monthCount;
        AssetAmount reserveAmountPercent5;

        reserveAmountPercent5 = AssetDepCalculationHelper_JP::roundOffDepreciation(
            assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry * #NetAcquisitionRatePercent5);

        monthCount = mthOfYr(endDate) - mthOfYr(startDate) + #monthsPerYear * (year(endDate) - year(startDate)) + 1;

        if (equallyDividedYearNum > #Zero)
        {
            yearcount = year(startDate) - year(assetBook.EquallyDividedStartDate_JP) + 1;

            if (yearcount <= equallyDividedYearNum)
            {
                while (yearcount > 1)
                {
                    reversalReduction += (reserveAmountPercent5 - reversalReduction - 1) / (equallyDividedYearNum - calyearcount);
                    reversalReduction = AssetDepCalculationHelper_JP::roundOffDepreciation(reversalReduction);
                    yearcount--;
                    calyearcount++;
                }

                reversalReduction = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    ((reserveAmountPercent5 - reversalReduction - 1) / (equallyDividedYearNum - calyearcount)) * monthCount / #monthsPerYear);
            }
        }

        return reversalReduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalDepAmount</Name>
				<Source><![CDATA[
    private AssetAmount calcTotalDepAmount(AssetBook _assetBook, FromDate _fromDate, ToDate _toDate)
    {
        AssetAmount specialDepAmount;
        AssetAmount totalDepAmountOfCurrentTerm;

        totalDepAmountOfCurrentTerm = assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm;

        if (refAssetDepreciationProfileExt)
        {
            if (assetDepreciationProfileExt
                && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
            {
                // When Tax layer use DirectOff method, the totalDepAmountOfCurrentTerm need includes special depreciation amount of Current layer.
                // Note: the specail depreciation amount of Current layer for DirectOff method has included in field DepreciationAmountInCurrentTerm,
                // so only need consider Reserve method here.
                if (refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
                {
                    if (refAssetDepreciationProfileExt.Method == AssetDepreciationMethod::SpecialDepreciation_JP)
                    {
                        specialDepAmount = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                            _assetBook,
                            _fromDate,
                            _toDate);
                    }
                    else
                    {
                        specialDepAmount = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                            _assetBook,
                            _fromDate,
                            _toDate,
                            AssetTransType::AdditionalDepReserve_JP);
                    }

                    totalDepAmountOfCurrentTerm += specialDepAmount;
                }
            }
            else
            {
                // When Tax layer use Reserve method the totalDepAmountOfCurrentTerm needs exclude special depreciation amount of Current layer.
                if (refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
                {
                    specialDepAmount = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                        _assetBook,
                        _fromDate,
                        _toDate,
                        AssetTransType::ExtraordinaryDepreciation,
                        0,
                        true);
                }

                totalDepAmountOfCurrentTerm -= specialDepAmount;
            }
        }

        return totalDepAmountOfCurrentTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDepAmountForEquallyDivided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calulates the depreciation amount for old depreciation method with the prescriptive rules.
    /// </summary>
    /// <returns>
    /// The depreciation amount for old depreciation method with the prescriptive rules.
    /// </returns>
    public AssetAmount calculateDepAmountForEquallyDivided()
    {
        AssetAmount depreciationAmount = #DefaultAmount;
        int yearcount = #Zero;
        int calyearcount = #Zero;
        int monthCount;

        monthCount = mthOfYr(endDate) - mthOfYr(startDate) + #monthsPerYear * (year(endDate) - year(startDate)) + 1;

        if (equallyDividedYearNum > #Zero)
        {
            yearcount = year(startDate) - year(assetBook.EquallyDividedStartDate_JP) + 1;

            boolean isEndOfEquallyDividedYear;
            if (yearcount == equallyDividedYearNum)
            {
                isEndOfEquallyDividedYear = true;
            }

            if (yearcount <= equallyDividedYearNum)
            {
                while (yearcount > 1)
                {
                    if (AssetCorpTaxActAppendTableDepreciationAmountEqualDividedFlight_JP::instance().isEnabled())
                    {
                        depreciationAmount += (assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 - depreciationAmount) / (equallyDividedYearNum - calyearcount);
                    }
                    else
                    {
                        depreciationAmount += (assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 - depreciationAmount - 1) / (equallyDividedYearNum - calyearcount);
                    }
                    depreciationAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(depreciationAmount);
                    yearcount--;
                    calyearcount++;
                }

                if (AssetCorpTaxActAppendTableDepreciationAmountEqualDividedFlight_JP::instance().isEnabled())
                {
                    Money netBookValueRest = 0.00;
                    if (isEndOfEquallyDividedYear == true)
                    {
                        netBookValueRest = AssetBookTable::find(this.assetBook.BookId).NetBookValueRest;;
                    }

                    depreciationAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(
                        ((assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 - depreciationAmount - netBookValueRest) / (equallyDividedYearNum - calyearcount)) * monthCount / #monthsPerYear);
                }
                else
                {
                    depreciationAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(
                        ((assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 - depreciationAmount - 1) / (equallyDividedYearNum - calyearcount)) * monthCount / #monthsPerYear);
                }
            }
        }

        return depreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcceleratedDepRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accelerated depreciation rate in current fiscal year.
    /// </summary>
    /// <returns>
    /// Accelerated depreciation rate in current fiscal year.
    /// </returns>
    public AssetDepreciationRate_JP getAcceleratedDepRate()
    {
        AssetDocumentAcceleratedDepTable_JP documentAcceleratedDepTable;
        AssetDepreciationRate_JP accDepRate;
        AssetDocumentTable_JP assetDocumentTable;
        AssetDocumentEntry_JP assetDocumentEntry;

        select firstOnly documentAcceleratedDepTable
            where documentAcceleratedDepTable.ValidFrom <= startDate
                && documentAcceleratedDepTable.ValidTo >= startDate
                &&(documentAcceleratedDepTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed
                    || documentAcceleratedDepTable.Status == AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted
                    || documentAcceleratedDepTable.Status == AssetAcceleratedDepDocumentStatus_JP::Posted)
            exists join assetDocumentTable
                where assetDocumentTable.RecId == documentAcceleratedDepTable.AssetDocumentTable_JP
            exists join assetDocumentEntry
                where assetDocumentEntry.AssetDocumentTable_JP == assetDocumentTable.RecId
                    && assetDocumentEntry.assetId == assetTable.AssetId
                    && assetDocumentEntry.BookId  == assetBook.BookId;

        if (documentAcceleratedDepTable.RecId)
        {
            if (AssetAcceleratedDepCalcManager_JP::isAccDepEnabled(documentAcceleratedDepTable))
            {
                accDepRate = AssetAcceleratedDepCalcManager_JP::acceleratedDepRate(documentAcceleratedDepTable);
            }
        }

        return accDepRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedHeaderTmp_JP))
    ]
    public AssetCorpTaxActAppendedHeaderTmp_JP getAssetCorpTaxActAppendedHeaderTmp()
    {
        select assetCorpTaxActAppendedHeaderTmp;
        return assetCorpTaxActAppendedHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedTablesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedTablesTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedTablesTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedTablesTmp_JP))
    ]
    public AssetCorpTaxActAppendedTablesTmp_JP getAssetCorpTaxActAppendedTablesTmp()
    {
        select assetCorpTaxActAppendedTablesTmp;
        return assetCorpTaxActAppendedTablesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCarryForwardAmount</Name>
				<Source><![CDATA[
    public AssetAmount getCarryForwardAmount(
        AssetTransDate _date,
        container _entityTypeList,
        boolean _isOver = true)
    {
        AssetAmount carryFormardAmount;
        carryFormardAmount = assetDepEntityInquiry_PreTaxDeduction.calcOverUnderBalanceCarryForward(
            _entityTypeList,
            _date);

        return _isOver
            ? (carryFormardAmount >= 0 ? carryFormardAmount : 0)
            : (carryFormardAmount < 0 ? -carryFormardAmount : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of depreciation months in current fiscal year.
    /// </summary>
    /// <returns>
    /// Counts of depreciation months in current fiscal year.
    /// </returns>
    public int getCountOfMonths()
    {
        int countMonth = #monthsPerYear;

        if (isChangeOver)
        {
            // Gets the count of depreciation months
            countMonth = mthOfYr(depEndDate) - mthOfYr(depStartDate) + #monthsPerYear * (year(depEndDate) - year(depStartDate)) + 1;
        }
        else
        {
        	AssetTrans  assetTrans;

            // Gets the count of depreciation months, when the current year is the start year of depreciation.
            select RecId from assetTrans
                where assetTrans.AssetId == assetBook.AssetId
                    && assetTrans.BookId == assetBook.BookId
                    && assetTrans.TransType == AssetTransType::DisposalScrap
                    && assetTrans.TransDate >= startDate
                    && assetTrans.TransDate <= endDate;
            
            if (assetTrans)
            {
                // Gets the count of depreciation months.
                countMonth = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(startDate, assetBook.DisposalDate + 1);
            }
            else
            {
                // Gets the count of depreciation months, when the current year is the start year of depreciation.
                if ((assetBook.DepreciationStartDate >= startDate) && (assetBook.DepreciationStartDate <= EndDate))
                {
                    // Gets the count of depreciation months.
                    countMonth = mthOfYr(EndDate) - mthOfYr(assetBook.DepreciationStartDate) + #monthsPerYear * (year(EndDate) - year(assetBook.DepreciationStartDate)) + 1;
                }
            }
        }

        return countMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    public void getReportParameters()
    {
        FiscalCalendarYear fiscalCalendarYear;
        AssetCorpTaxActAppendedTablesContract_JP contract = this.parmDataContract();

        if (contract)
        {
            assetReportType = contract.parmAssetReportType();
            fiscalYearName = contract.parmFiscalYearName();
            fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate = fiscalCalendarYear.StartDate;
            endDate = fiscalCalendarYear.EndDate;
            printDate = contract.parmPrintDate();
            groupBy = contract.parmGroupBy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAssetInReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether print this asset in this report.
    /// </summary>
    /// <returns>
    /// True, print this asset in this reprot; False, don't print.
    /// </returns>
    public boolean includeAssetInReport()
    {
        boolean ret = false;

        if (((assetBook.AllowableLimitForAccumulatedDepType_JP == AssetLimitForAccumulatedDepType_JP::AcquisitionCost
                || assetBook.AllowableLimitForAccumulatedDepType_JP == AssetLimitForAccumulatedDepType_JP::AcquisitionCost95)
                    && assetCorpTaxActAppendedTablesTmp.BaseTotal > #Zero)
            || (assetBook.AllowableLimitForAccumulatedDepType_JP == AssetLimitForAccumulatedDepType_JP::AcquisitionCostMinus1
                && assetCorpTaxActAppendedTablesTmp.BaseTotal > #GuaranteedAmount))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedHeaderTmp_JP</c> table.
    /// </summary>
    public void initAssetCorpTaxActAppendedHeaderTmp()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        if (currentUserLanguage == #LanguageJA)
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = subStr(JapaneseDateTimeHelper::getEraName(startDate), 0, 1)
                + (str2Int(JapaneseDateTimeHelper::date2str(startDate, #parameterYear)) == 1 ?
                strFmt('%1.%2.%3', subStr(JapaneseDateTimeHelper::getYearStr(startDate), 0, 1), JapaneseDateTimeHelper::getMonthStr(startDate), JapaneseDateTimeHelper::getDayStr(startDate)) :
                JapaneseDateTimeHelper::date2str(startDate, #ParameterDate));

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate   = subStr(JapaneseDateTimeHelper::getEraName(endDate), 0, 1)
                + (str2Int(JapaneseDateTimeHelper::date2str(endDate, #parameterYear)) == 1 ?
                strFmt('%1.%2.%3', subStr(JapaneseDateTimeHelper::getYearStr(endDate), 0, 1), JapaneseDateTimeHelper::getMonthStr(endDate), JapaneseDateTimeHelper::getDayStr(endDate)) :
                JapaneseDateTimeHelper::date2str(endDate, #ParameterDate));

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = JapaneseDateTimeHelper::getEraName(startDate)
                + (str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)) == 1 ? JapaneseDateTimeHelper::getYearStr(startDate) : Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)), true, false, #GroupNum))
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterMonth)), true, false, #GroupNum)
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterDay)), true, false, #GroupNum);
        }
        else
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = date2StrUsr(startDate, DateFlags::FormatAll);

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate = date2StrUsr(endDate, DateFlags::FormatAll);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = date2StrUsr(StartDate, DateFlags::FormatAll);
        }

        //insert the value of company's name
        assetCorpTaxActAppendedHeaderTmp.Name = companyInfo.Name;

        //insert the value of company's Kana name
        assetCorpTaxActAppendedHeaderTmp.PhoneticName = companyInfo.PhoneticName;

        assetCorpTaxActAppendedHeaderTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetCorpTaxActAppendedTablesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedTablesTmp_JP</c> table.
    /// </summary>
    public void initAssetCorpTaxActAppendedTablesTmp()
    {
        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            this.insertDataWithChangeOver();
        }
        else
        {
            this.insertDataWithoutChangeOver();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the blank data.
    /// </summary>
    /// <param name="_blankColumnCount">
    /// Inserts the number of blank columns.
    /// </param>
    public void insertBlankData(int _blankColumnCount)
    {
        while (_blankColumnCount > #Zero)
        {
            assetCorpTaxActAppendedTablesTmp.clear();

            //insert the row number
            assetCorpTaxActAppendedTablesTmp.RowGroupNum    = rowCount div #GroupNum;

            //insert the colunm number
            assetCorpTaxActAppendedTablesTmp.ColunmGroupNum = rowCount mod #GroupNum;

            assetCorpTaxActAppendedTablesTmp.Insert();

            rowCount++;
            _blankColumnCount--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommonData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the common data in AssetCorpTaxActAppendedTablesTmp_JP table.
    /// </summary>
    public void insertCommonData()
    {
        assetCorpTaxActAppendedTablesTmp.SummarizeByMajorType = assetBook.SummarizeByMajorType_JP;
        assetCorpTaxActAppendedTablesTmp.MajorTypeId = assetMajorType.MajorType;

        //insert value for field 16.1-1 and 16.2-1
        assetCorpTaxActAppendedTablesTmp.MajorType = assetMajorType.Description;

        //insert value for field 16.1-2 and 16.2-2
        assetCorpTaxActAppendedTablesTmp.PropertyGroup = assetPropertyGroup.Description;

        //insert value for field 16.1-3 and 16.2-3
        assetCorpTaxActAppendedTablesTmp.AssetName = assetTable.Name ? assetTable.Name : assetTable.AssetId;

        if (currentUserLanguage == #LanguageJA)
        {
            //insert value for field 16.1-4 and 16.2-4
            assetCorpTaxActAppendedTablesTmp.AcquisitionDate = subStr(JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #ParameterName), 0, 1)
                + (str2Int(JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #parameterYear)) == 1 ?
                strFmt('%1.%2.%3', subStr(JapaneseDateTimeHelper::getYearStr(assetBook.AcquisitionDate), 0, 1), JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #parameterMonth), JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #parameterDay)) :
                JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #ParameterDate));

            //insert value for field 16.1-5 and 16.2-5
            assetCorpTaxActAppendedTablesTmp.PutInServiceDate = JapaneseDateTimeHelper::date2str(assetBook.UsedFromDate, #ParameterYearName);
        }
        else
        {
            //insert value for field 16.1-4 and 16.2-4
            assetCorpTaxActAppendedTablesTmp.AcquisitionDate = date2StrUsr(assetBook.AcquisitionDate, DateFlags::FormatAll);

            //insert value for field 16.1-5 and 16.2-5
            assetCorpTaxActAppendedTablesTmp.PutInServiceDate = int2str(mthOfYr(assetBook.UsedFromDate)) + enum2str(DateSeparator::Slash) + int2str(year(assetBook.UsedFromDate));
        }

        //insert value for field 16.1-9 and 16.2-9 7-8
        assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost = assetCorpTaxActAppendedTablesTmp.AcquisitionCost - assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry;

        //insert value for field 16.1-13 and 16.2-13 10-11-12
        assetCorpTaxActAppendedTablesTmp.NetBookValue = assetCorpTaxActAppendedTablesTmp.AssetBookValueAtEndOfTerm
            - assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntryEndTerm
            - assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm;

        if (!assetCorpTaxActAppendedTablesTmp.NetBookValue)
        {
        	AssetTrans  assetTrans;

            select AmountMST from assetTrans
                where assetTrans.AssetId == refAssetBook.AssetId
                    && assetTrans.BookId == refAssetBook.BookId
                    && assetTrans.TransType == AssetTransType::NetBookValue
                    && assetTrans.TransDate >= startDate
                    && AssetTrans.TransDate <= endDate;
            
            assetCorpTaxActAppendedTablesTmp.NetBookValue = assetTrans.AmountMST;
        }

        //insert value for field 16.1-16 and 16.2-16 (13+14+15)
        assetCorpTaxActAppendedTablesTmp.BaseTotal = assetCorpTaxActAppendedTablesTmp.NetBookValue
            + assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm
            + assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm;

        if (assetReportType == AssetCorpTaxActAppendedTableType_JP::DecliningBalance)
        {
            //insert value for field 16.2-18 (16.2-16 - 16.2-17)
            assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount = assetCorpTaxActAppendedTablesTmp.BaseTotal - assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm;
        }

        //insert the row number
        assetCorpTaxActAppendedTablesTmp.RowGroupNum = rowCount div #GroupNum;

        //insert the colunm number
        assetCorpTaxActAppendedTablesTmp.ColunmGroupNum = rowCount mod #GroupNum;

        assetCorpTaxActAppendedTablesTmp.OriginalAcquisitionCost = assetBook.AcquisitionPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is declining balance.
    /// </summary>
    public void insertDataForDepMethodDB()
    {
        //insert value for field 34 max(23,24,33)
        assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm = max(
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld,
            max(assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld,
                assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew));

        //insert value for field 35
        //Ax doesn't provide this value, it will be filled in by end user.
        assetCorpTaxActAppendedTablesTmp.SpecialMessuresConcerningTaxationArticle = #Blank;

        if (assetDepreciationProfileExt
            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            //insert value for field 36

            if (extDepMethod == AssetDepreciationMethod::SpecialDepreciation_JP)
            {
                assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * assetSpecialDepRate * assetSpecialDepBaseRatio);
            }
            else if (extDepMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
            {
                assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm * assetSpecialDepRate);
            }
        }

        //insert value for field 37
        assetCorpTaxActAppendedTablesTmp.DepreciationDepictAmountPreviousTerm = assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm;

        //insert value for field 38 (34+36+37)
        assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum = assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm
            + assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit
            + assetCorpTaxActAppendedTablesTmp.DepreciationDepictAmountPreviousTerm ;

        //insert value for field 40 (38-39) && 41 (39-38)
        if ((assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum > assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm))
        {
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount = assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum - assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm;
        }
        else
        {
            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmount = assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm - assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum;
        }

        //insert value for field 42
        assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(startDate - 1, [AssetDepEntityType_JP::OrdinaryDepreciation], true);

        //insert value for field 43
        assetCorpTaxActAppendedTablesTmp.Underdepreciation = min(
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount,
            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm);

        if (assetDepreciationProfileExt
            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            //insert value for field 46 less amount between 40-43 and 36+37
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm = min(
            (assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount - assetCorpTaxActAppendedTablesTmp.Underdepreciation),
            (assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit + assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm));

            //insert value for field 47
            assetCorpTaxActAppendedTablesTmp.SpecialDepreciation = assetDepEntityInquiry_PreTaxDeduction.calcSpecialUnderDepWillExpirInNextYear(endDate);

            //insert value for field 48 (46-47)
            assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm = assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm - assetCorpTaxActAppendedTablesTmp.SpecialDepreciation;

            //insert value for field 49
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTermDate = dateNull();

            //insert value for field 50
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTerm = assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodNDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is new declining balance.
    /// </summary>
    public void insertDataForDepMethodNDB()
    {
        AssetDepRate_JP assetDepRateNew;
        int countMonth;

        //get the new declining balance depreciation rate
        assetDepRateNew = AssetDepRate_JP::find(assetDepRateSchedule, currentDepMethod, assetCorpTaxActAppendedTablesTmp.UsefulLife);

        countMonth = this.getCountOfMonths();

        //insert value for field 25
        assetCorpTaxActAppendedTablesTmp.DepreciationRateNew = assetDepRateNew.DepreciationRate;

        //insert value for field 26 (18*25)
        assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment = AssetDepCalculationHelper_JP::roundOffDepreciation(
        assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount * assetCorpTaxActAppendedTablesTmp.DepreciationRateNew * countMonth / #monthsPerYear);

        //insert value for field 27
        assetCorpTaxActAppendedTablesTmp.GuaranteeRate = assetDepRateNew.GuaranteedDepreciationRate;

        //insert value for field 28 (9*27)
        assetCorpTaxActAppendedTablesTmp.GuaranteeDepreciationAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * assetCorpTaxActAppendedTablesTmp.GuaranteeRate);

        //26 <28 (29 30 31) 26>28 (32, 33)
        if (assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment * #monthsPerYear / countMonth < assetCorpTaxActAppendedTablesTmp.GuaranteeDepreciationAmount)
        {
            //insert value for field 29 if the (26) < (28) , the field (29) is typically equal with (18)
            assetCorpTaxActAppendedTablesTmp.AdjustedAcquisitionCost = this.getAdjustedAcquisitionCost();

            //insert value for field 30
            assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationRate = assetDepRateNew.RevisedDepreciation;

            //insert value for field 31 (29*30)
            assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(assetCorpTaxActAppendedTablesTmp.AdjustedAcquisitionCost * assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationRate) - assetBookTable.NetBookValueRest;
        }

        //insert value for field 32 max(26 31)*rate
        assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew = max(assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment, assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationAmount) * this.getAcceleratedDepRate();

        //insert value for field 33 max(26, 31) + 32)
        AssetDepPreTaxDedProcess_JP assetDepPreTaxDedProcess;
        AssetDepPreTaxDedProcessContext_JP assetDepPreTaxDedProcessContext;

        select CurrentTermTaxLayerPostedAmount from assetDepPreTaxDedProcessContext
            where assetDepPreTaxDedProcessContext.AssetId == assetTable.AssetId
            exists join assetDepPreTaxDedProcess
                where assetDepPreTaxDedProcess.RecId == assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP
                    && assetDepPreTaxDedProcess.ProcessDate >= startDate
                    && assetDepPreTaxDedProcess.ProcessDate <= endDate;
        if(assetDepPreTaxDedProcessContext)
        {
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew = assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount;
        }
        else
        {
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew = max(assetCorpTaxActAppendedTablesTmp.DepreciationAmountBeforeAdjustment, assetCorpTaxActAppendedTablesTmp.AdjustedDepreciationAmount) + assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedAcquisitionCost</Name>
				<Source><![CDATA[
    private AssetAmount getAdjustedAcquisitionCost()
    {
        AssetAmount adjustedAcquisitionCost = assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount;

        if (AssetCorpTaxActAdjustedAcquistionCostNDB250Flight::instance().isEnabled()
            && assetDepreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance250_JP)
        {
            FiscalCalendarYear currentFiscalCalendarYear = this.findFiscalCalendarYear(endDate);
            FiscalCalendarYear priorFiscalCalendarYear = this.findFiscalCalendarYear(currentFiscalCalendarYear.StartDate - 1);

            AssetSumCalc_Trans priorYearAssetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, priorFiscalCalendarYear.StartDate, priorFiscalCalendarYear.EndDate);
            AssetAmount priorYearDepreciationAmount = priorYearAssetSumCalc.depreciationValue();

            int i;
            boolean continueToSearchForNetBookValue = true;
            while (continueToSearchForNetBookValue)
            {
                priorFiscalCalendarYear = this.findFiscalCalendarYear(priorFiscalCalendarYear.StartDate - 1);
                priorYearAssetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, priorFiscalCalendarYear.StartDate, priorFiscalCalendarYear.EndDate);
                AssetAmount depreciationAmount = priorYearAssetSumCalc.depreciationValue();

                if (priorYearDepreciationAmount != depreciationAmount)
                {
                    AssetSumCalc_Trans nbvAssetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), priorFiscalCalendarYear.EndDate);
                    adjustedAcquisitionCost = nbvAssetSumCalc.netBookValue();

                    continueToSearchForNetBookValue = false;
                }
 
                i++;
                if (i > 100)
                {
                    continueToSearchForNetBookValue = false;
                }
            }
        
        }

        return adjustedAcquisitionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFiscalCalendarYear</Name>
				<Source><![CDATA[
    private FiscalCalendarYear findFiscalCalendarYear(date _date)
    {
        FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(
                AssetBookTable::find(assetBook.BookId).getFiscalCalendar(),
                _date);

        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodNSL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is new stright line.
    /// </summary>
    public void insertDataForDepMethodNSL()
    {
        AssetDepRate_JP assetDepRateNew;
        int countMonth;

        //insert value for field 25 9
        assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountSL = assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost;

        //get the new stright line depreciation rate
        assetDepRateNew = AssetDepRate_JP::find(assetDepRateSchedule, AssetDepreciationMethod::NewStraightLine_JP, assetCorpTaxActAppendedTablesTmp.UsefulLife);

        //insert value for field 26
        assetCorpTaxActAppendedTablesTmp.DepreciationRateNew = assetDepRateNew.DepreciationRate;

        //insert value for field 27
        if (AssetCorpTaxActAppendedTableFlight_JP::instance().isEnabled())
        {
            countMonth = this.getCountOfMonths();
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountSL * assetCorpTaxActAppendedTablesTmp.DepreciationRateNew * countMonth / #monthsPerYear);
        }
        else
        {
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew = this.calcDepreciationAmountForReport(assetBook, startDate, endDate);
        }

        //insert value for field 28
        assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew = AssetDepCalculationHelper_JP::roundOffDepreciation(
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew * this.getAcceleratedDepRate());

        //insert value for field 29 (27+28)
        assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew = assetCorpTaxActAppendedTablesTmp.DepreciationAmountNew + assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodODB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is old declining balance.
    /// </summary>
    public void insertDataForDepMethodODB()
    {
        AssetDepRate_JP assetDepRateOld;
        int countMonth;

        //insert value for field 19 9*5%
        assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 = AssetDepCalculationHelper_JP::roundOffDepreciation(assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * #NetAcquisitionRatePercent5);

        //16 > 19 get 20 21 22 23  16<19 24
        if (assetCorpTaxActAppendedTablesTmp.BaseTotal > assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5)
        {
            //get the old declining balance depreciation rate
            assetDepRateOld = AssetDepRate_JP::find(assetDepRateSchedule, AssetDepreciationMethod::OldDecliningBalance_JP, assetCorpTaxActAppendedTablesTmp.UsefulLife);

            countMonth =  this.getCountOfMonths();

            //insert value for field 20
            assetCorpTaxActAppendedTablesTmp.DepreciationRateOld = assetDepRateOld.DepreciationRate;

            //insert value for field 21 (18*20)
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld = assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount * assetCorpTaxActAppendedTablesTmp.DepreciationRateOld * countMonth / #monthsPerYear;

            assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld = AssetDepCalculationHelper_JP::roundOffDepreciation(assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld);

            //insert value for field 22
            assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld = assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld * this.getAcceleratedDepRate();

            //insert value for field 23 less amount between (18-19) and (21+ 22)
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld = min(
                (assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld + assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld),
                (assetCorpTaxActAppendedTablesTmp.CaculationBasisAmount - assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5));
        }
        else
        {
            //insert value for field 24 ((18) -1) / n
            assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld = AssetDepCalculationHelper_JP::roundOffDepreciation(this.calculateDepAmountForEquallyDivided());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodOSL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is old stright line.
    /// </summary>
    public void insertDataForDepMethodOSL()
    {
        AssetDepRate_JP assetDepRateOld;
        int countMonth;

        if (AssetCorpTaxActAppendTable1ProfileChange_JPFlight::instance().isEnabled()
            && isChangeOverFromODBToOSL)
        {
            FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(
                AssetBookTable::find(assetBook.BookId).getFiscalCalendar(), 
                depProfileChange.ValidFrom);

            AssetSumCalc_Trans assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(
                assetBook.AssetId, 
                assetBook.BookId, 
                fiscalCalendarYear.StartDate, 
                AssetYear::PriorYears);

            AmountMST netBookValueStartOfFiscalYear = assetSumCalc_Trans.netBookValue();
                
            AmountMST acquisitionValue = assetSumCalc_Trans.acquisitionValue() + assetSumCalc_Trans.acquisitionAdjValue();
            AmountMST acquisitionValueTenPercent = AssetDepCalculationHelper_JP::roundOffDepreciation(acquisitionValue * #NetAcquisitionRatePercent10);
            AmountMST acquisitionValueFivePercent = AssetDepCalculationHelper_JP::roundOffDepreciation(acquisitionValue * #NetAcquisitionRatePercent5);

            if (netBookValueStartOfFiscalYear > acquisitionValueTenPercent)
            {
                //insert value for field 17 (AcquisitionVaule*10%)
                assetCorpTaxActAppendedTablesTmp.RemainingValue = acquisitionValueTenPercent;
            }
            else
            {
                //insert value for field 17 (AcquisitionVaule*5%)
                assetCorpTaxActAppendedTablesTmp.RemainingValue = acquisitionValueFivePercent;
            }

            //insert value for field 18 (9*5%)
            assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 = acquisitionValueFivePercent;
        }
        else
        {
            //insert value for field 17 (9*10%)
            assetCorpTaxActAppendedTablesTmp.RemainingValue = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * #ExclusiveDepRatioForTangibleOnOSL);

            //insert value for field 18 (9*5%)
            assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5 = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * #NetAcquisitionRatePercent5);
        }

        // if 16 more than 18
        if (assetCorpTaxActAppendedTablesTmp.BaseTotal > assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5)
        {
            //insert value for field 19 (9-17)
            assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountOSL = assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost - assetCorpTaxActAppendedTablesTmp.RemainingValue;

            //get the old stright line depreciation rate
            assetDepRateOld = AssetDepRate_JP::find(assetDepRateSchedule, AssetDepreciationMethod::OldStraightLine_JP, assetCorpTaxActAppendedTablesTmp.UsefulLife);

            countMonth = this.getCountOfMonths();

            //insert value for field 20
            assetCorpTaxActAppendedTablesTmp.DepreciationRateOld = assetDepRateOld.DepreciationRate;

            //insert value for field 21 (19*20)
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTablesTmp.CaculationBasisAmountOSL * assetCorpTaxActAppendedTablesTmp.DepreciationRateOld * countMonth / #monthsPerYear);

            //insert value for field 22
            assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld * this.getAcceleratedDepRate());

            //insert value for field 23 less amount between (16-18) and (21 + 22)
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld = min(
                (assetCorpTaxActAppendedTablesTmp.BaseTotal - assetCorpTaxActAppendedTablesTmp.NetAcquisitionCostPercent5),
                (assetCorpTaxActAppendedTablesTmp.DepreciationAmountOld + assetCorpTaxActAppendedTablesTmp.AdditionalDepreciationAmountOld));
        }
        else
        {
            //insert value for field 24 ((18) -1) / n
            assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld = this.calcDepreciationAmountForReport(refAssetBook, startDate, endDate);
        }

        assetCorpTaxActAppendedTablesTmp.IsChangeOverFromODBToOSL = isChangeOverFromODBToOSL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataForDepMethodSL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method is stright line.
    /// </summary>
    public void insertDataForDepMethodSL()
    {
        //insert value for field 30 max of 23 24 29
        assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm = max(
            assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumOld ,
            max(assetCorpTaxActAppendedTablesTmp.CaculationDepreciationAmountOld ,
                assetCorpTaxActAppendedTablesTmp.CurrentOrdinaryDepreciationSumNew));

        //insert value for field 31
        assetCorpTaxActAppendedTablesTmp.SpecialMessuresConcerningTaxationArticle = #Blank;
        if (assetDepreciationProfileExt
            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            //insert value for field 32
            if (extDepMethod == AssetDepreciationMethod::SpecialDepreciation_JP)
            {
                assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * assetSpecialDepRate * assetSpecialDepBaseRatio);
            }
            else if (extDepMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
            {
                assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm * assetSpecialDepRate);
            }
        }

        //insert value for field 34 (30+32+33)
        assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum = assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm
            + assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit
            + assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm;

        //insert value for field 36 (34-35) && 37 (35-34)
        if (assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum > assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm)
        {
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount = assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum - assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm;
        }
        else
        {
            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmount = assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm - assetCorpTaxActAppendedTablesTmp.AllowableDepreciationAmountSum;
        }

        //insert value for field 39
        assetCorpTaxActAppendedTablesTmp.Underdepreciation = min(
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount,
            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm);
        if (assetDepreciationProfileExt
            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            //insert value for field 42 less amount between (36-39) and (32+33)
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm = min(
            (assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmount - assetCorpTaxActAppendedTablesTmp.Underdepreciation),
            (assetCorpTaxActAppendedTablesTmp.SpecialDepreciationLimit + assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm));

            //insert value for field 43
            assetCorpTaxActAppendedTablesTmp.SpecialDepreciation = assetDepEntityInquiry_PreTaxDeduction.calcSpecialUnderDepWillExpirInNextYear(endDate);

            //insert value for field 44 (42-43)
            assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm = assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountNextTerm - assetCorpTaxActAppendedTablesTmp.SpecialDepreciation;

            //insert value for field 45
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTermDate = dateNull();

            //insert value for field 46
            assetCorpTaxActAppendedTablesTmp.UnderdepreciationAmountCurrentTerm = assetCorpTaxActAppendedTablesTmp.NetCarriedForwardAmountToNextTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataWithChangeOver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table when the depreciation method has been changed in this fiscal year.
    /// </summary>
    public void insertDataWithChangeOver()
    {
        AssetSumCalc_Trans          assetSumCalc_AcqCost;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;
        Set                         docTypes;

        isChangeOver = false;

        if (AssetCorpTaxActAppendTable1ProfileChange_JPFlight::instance().isEnabled())
        {
            isChangeOverFromODBToOSL = false;
            assetCorpTaxActAppendedTablesTmp.IsChangeOverFromODBToOSL = isChangeOverFromODBToOSL;
        }
        depProfileChange = AssetDepProfileChange_JP::find(assetBook.TableId, assetBook.RecId, endDate);
        assetCorpTaxActAppendedTablesTmp.IsChangeOverFromODBToOSL = false;

        if (depProfileChange.RecId && depProfileChange.ValidFrom != dateNull())
        {
            while (depProfileChange.RecId  && startDate <= depProfileChange.ValidTo)
            {
                assetDepreciationProfileLocal = AssetDepreciationProfile::find(depProfileChange.DepreciationProfile);
                if (conFind(depMethod, assetDepreciationProfileLocal.Method))
                {
                    if (endDate <= depProfileChange.ValidTo)
                    {
                        depEndDate = endDate;
                    }
                    else
                    {
                        depEndDate = depProfileChange.ValidTo;
                    }

                    if (startDate >= depProfileChange.ValidFrom)
                    {
                        //get 16.1-12 and 16.2-12
                        //sum the transactions with ReductionEntryReserveAllocation_JP type.
                        assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm = this.assetTransAmountPerDateTransTypes(
                            [AssetTransType::ReductionEntryReserveAllocation_JP],
                            startDate,
                            depEndDate);

                        //get 16.1-14 and 16.2-14
                        assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm = this.calcDepreciationAmountForReport(
                            refAssetBookCurrent,
                            startDate,
                            depEndDate);
                        //insert value for field 16.1-35 and 16.2-39
                        assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm = this.calcTotalDepAmount(
                            refAssetBookCurrent,
                            startDate,
                            depEndDate);
                        //insert value for field 16.1-15 and 16.2-15
                        assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm = this.getCarryForwardAmount(
                            startDate - 1,
                            [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::OrdinaryDepreciation]);
                        if (assetDepreciationProfileExt
                            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
                        {
                            //insert value for field 16.1-33 and 16.2-17
                            assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm = this.getCarryForwardAmount(
                                startDate -1,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                                false);
                            //insert value for field 38
                            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                                startDate -1,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                                    AssetDepEntityType_JP::OrdinaryDepreciation],
                                false);
                            //insert value for field 16.1-41 and 16.2-45
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                                    AssetDepEntityType_JP::OrdinaryDepreciation],
                                true);
                            //insert value for field 16.1-47 and 16.2-51
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardUnderdeprectionAmount = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                    AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                    AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                                false);
                        }
                        else
                        {
                            //insert value for field 38
                            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                                startDate -1,
                                [AssetDepEntityType_JP::OrdinaryDepreciation],
                                false);
                            //insert value for field 16.1-41 and 16.2-45
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::OrdinaryDepreciation],
                                true);
                        }
                        //insert value for field 16.1-40 and 16.2-44
                        assetCorpTaxActAppendedTablesTmp.ReversalReduction = this.calcAllocatedAmount(startDate, depEndDate);
                        if (refAssetBook.DepreciationStartDate >= startDate)
                        {
                            depStartDate = refAssetBook.DepreciationStartDate;
                        }
                        else
                        {
                            depStartDate = startDate;
                        }

                        if (AssetCorpTaxActAppendTable1ProfileChange_JPFlight::instance().isEnabled())
                        {
                            if (endDate > depProfileChange.ValidTo
                                || (depProfileChange.ValidFrom <= endDate && depProfileChange.ValidTo == dateMax()))
                            {
                                isChangeOver = true;
                                isChangeOverFromODBToOSL = isChangeOver;
                                assetCorpTaxActAppendedTablesTmp.ChangeOverFromODBToOSLDate = date2StrUsr(depProfileChange.ValidFrom, DateFlags::FormatAll);
                            }
                        }
                        else
                        {
                            if (endDate > depProfileChange.ValidTo)
                            {
                                isChangeOver = true;
                            }
                        }
                    }
                    else
                    {
                        //get 16.1-12 and 16.2-12
                        //sum the transactions with ReductionEntryReserveAllocation_JP type.
                        assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm = this.assetTransAmountPerDateTransTypes(
                            [AssetTransType::ReductionEntryReserveAllocation_JP],
                            depProfileChange.ValidFrom,
                            depEndDate);

                        //get 16.1-14 and 16.2-14
                        //sum trans from ValidFrom to endDate
                        assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm = this.calcDepreciationAmountForReport(
                            refAssetBookCurrent,
                            depProfileChange.ValidFrom,
                            depEndDate);
                        //insert value for field 16.1-35 and 16.2-39
                        assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm = this.calcTotalDepAmount(
                            refAssetBook,
                            depProfileChange.ValidFrom,
                            depEndDate);
                        //insert value for field 16.1-15 and 16.2-15
                        assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm = this.getCarryForwardAmount(
                            depProfileChange.ValidFrom - 1,
                            [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                             AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                             AssetDepEntityType_JP::OrdinaryDepreciation]);
                        if (assetDepreciationProfileExt
                            && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
                        {
                            //insert value for field 16.1-33 and 16.2-17
                            assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm = this.getCarryForwardAmount(
                                depProfileChange.ValidFrom - 1,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                                false);
                            //insert value for field 38
                            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                                depProfileChange.ValidFrom - 1,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                                 AssetDepEntityType_JP::OrdinaryDepreciation],
                                false);
                            //insert value for field 16.1-41 and 16.2-45
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                                 AssetDepEntityType_JP::OrdinaryDepreciation],
                                true);
                            //insert value for field 16.1-47 and 16.2-51
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardUnderdeprectionAmount = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                                 AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                                 AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                                false);
                        }
                        else
                        {
                            //insert value for field 38
                            assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                                depProfileChange.ValidFrom - 1,
                                [AssetDepEntityType_JP::OrdinaryDepreciation],
                                false);
                            //insert value for field 16.1-41 and 16.2-45
                            assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                                depEndDate,
                                [AssetDepEntityType_JP::OrdinaryDepreciation],
                                true);
                        }
                        //insert value for field 16.1-40 and 16.2-44
                        assetCorpTaxActAppendedTablesTmp.ReversalReduction = this.calcAllocatedAmount(depProfileChange.ValidFrom, depEndDate);
                        depStartDate = depProfileChange.ValidFrom;
                        isChangeOver = true;

                        if (AssetCorpTaxActAppendTable1ProfileChange_JPFlight::instance().isEnabled())
                        {
                            isChangeOverFromODBToOSL = this.didAssetDepProfileChangeFromODBToOSL(depProfileChange);
                            assetCorpTaxActAppendedTablesTmp.IsChangeOverFromODBToOSL = isChangeOverFromODBToOSL;
                        }
                    }

                    //get 16.1-6 and 16.2-6
                    assetCorpTaxActAppendedTablesTmp.UsefulLife = depProfileChange.ServiceLife;

                    docTypes = new Set(Types::Container);
                    docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);

                    if (depProfileChange.ValidFrom)
                    {
                        assetSumCalc_AcqCost = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), depProfileChange.ValidFrom - 1);
                        docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
                        assetSumCalc_AcqCost.parmDocSumCalcUtil_JP(docSumCalcUtil);
                        //get 16.1-7 and 16.2-7
                        assetCorpTaxActAppendedTablesTmp.AcquisitionCost                = assetSumCalc_AcqCost.netBookValue() - assetSumCalc_AcqCost.getRetirementObligationNBV_JP();
                        //get 16.1-8 and 16.2-8
                        assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry = assetSumCalc_AcqCost.reductionEntryReserveNBV_JP();
                    }
                    else
                    {
                        //get 16.1-7 and 16.2-7
                        assetCorpTaxActAppendedTablesTmp.AcquisitionCost                = assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue() - assetSumCalc.getRetirementObligationAcquisitionValue_JP();
                        //get 16.1-8 and 16.2-8
                        assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry = assetSumCalc.reductionEntryReserveAmount_JP();
                    }

                    AssetSumCalc_Trans assetSumCalc_NBVAtEndOfTerm = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), depEndDate);
                    AssetSumCalc_Trans assetSumCalc_NBVAtEndOfTerm_Current = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBookCurrent.BookId, dateNull(), depEndDate);
                    docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
                    assetSumCalc_NBVAtEndOfTerm.parmDocSumCalcUtil_JP(docSumCalcUtil);
                    assetSumCalc_NBVAtEndOfTerm_Current.parmDocSumCalcUtil_JP(docSumCalcUtil);

                    //get 16.1-10 and 16.2-10 field 10 = Net book value at endDate
                    assetCorpTaxActAppendedTablesTmp.AssetBookValueAtEndOfTerm = assetSumCalc_NBVAtEndOfTerm_Current.netBookValue() - assetSumCalc_NBVAtEndOfTerm_Current.getRetirementObligationNBV_JP();

                    //get 16.1-11 and 16.2-11
                    assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntryEndTerm = assetSumCalc_NBVAtEndOfTerm.reductionEntryReserveNBV_JP();

                    // Gets the changed depreciaton method for this value model as the current depreciaton method.
                    currentDepMethod      = assetDepreciationProfileLocal.Method;
                    equallyDividedYearNum = assetDepreciationProfileLocal.NumOfYearsEquallyDivided_JP;
                    assetDepRateSchedule  = assetDepreciationProfileLocal.AssetDepRateSchedule_JP;

                    // Inserts value of other fields
                    this.insertCommonData();

                    if (this.includeAssetInReport())
                    {
                        this.insertDetailDataForDiffDepMethod();
                    }
                }

                depProfileChange = depProfileChange.findPrevious();
                isChangeOver     = false;

                if (AssetCorpTaxActAppendTable1ProfileChange_JPFlight::instance().isEnabled())
                {
                    isChangeOverFromODBToOSL = false;
                }
            }
        }
        else
        {
            this.insertDataWithoutChangeOver();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>didAssetDepProfileChangeFromODBToOSL</Name>
				<Source><![CDATA[
    private boolean didAssetDepProfileChangeFromODBToOSL(AssetDepProfileChange_JP _currentAssetDepProfileChange)
    {
        boolean didAssetDepProfileChangeFromODBToOSL;

        AssetDepreciationProfile assetDepProfile;
        assetDepProfile = AssetDepreciationProfile::find(_currentAssetDepProfileChange.DepreciationProfile);
        if (assetDepProfile.Method == AssetDepreciationMethod::OldStraightLine_JP)
        {
            AssetDepProfileChange_JP assetDepProfileChange = _currentAssetDepProfileChange.findPrevious();
            assetDepProfile = AssetDepreciationProfile::find(assetDepProfileChange.DepreciationProfile);
            if (assetDepProfile.Method == AssetDepreciationMethod::OldDecliningBalance_JP)
            {
                didAssetDepProfileChangeFromODBToOSL = true;
            }
        }

        return didAssetDepProfileChangeFromODBToOSL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataWithoutChangeOver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the AssetCorpTaxActAppendedTablesTmp_JP table which the depreciation method has not been changed in this fiscal year.
    /// </summary>
    public void insertDataWithoutChangeOver()
    {
        if (conFind(depMethod, assetDepreciationProfile.Method))
        {
            //get 16.1-6 and 16.2-6
            assetCorpTaxActAppendedTablesTmp.UsefulLife = assetBook.ServiceLife;

            //get 16.1-7 and 16.2-7
            assetCorpTaxActAppendedTablesTmp.AcquisitionCost = assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue() - assetSumCalc.getRetirementObligationAcquisitionValue_JP();

            //get 16.1-8 and 16.2-8
            assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntry = assetSumCalc.reductionEntryReserveAmount_JP();

            //get 16.1-10 and 16.2-10
            assetCorpTaxActAppendedTablesTmp.AssetBookValueAtEndOfTerm = assetSumCalcCurrent.netBookValue() - assetSumCalcCurrent.getRetirementObligationNBV_JP();

            //get 16.1-11 and 16.2-11
            assetCorpTaxActAppendedTablesTmp.ReserveAmountForReductionEntryEndTerm = assetSumCalc.reductionEntryReserveNBV_JP();

            //get 16.1-12 and 16.2-12
            //sum the transactions with ReductionEntryReserveAllocation_JP type.
            assetCorpTaxActAppendedTablesTmp.ReversalAmountForReductionDuringTerm = this.assetTransAmountPerDateTransTypes(
                [AssetTransType::ReductionEntryReserveAllocation_JP],
                startDate,
                endDate);

            //get 16.1-14 and 16.2-14
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountInCurrentTerm = this.calcDepreciationAmountForReport(
                refAssetBookCurrent,
                startDate,
                endDate);

            //insert value for field 16.1-35 and 16.2-39
            assetCorpTaxActAppendedTablesTmp.DepreciationAmountOfCurrentTerm = this.calcTotalDepAmount(refAssetBookCurrent, startDate, endDate);

            //insert value for field 16.1-15 and 16.2-15
            assetCorpTaxActAppendedTablesTmp.BroughtForwardAmountFromPreviousTerm = this.getCarryForwardAmount(
                startDate - 1,
                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                    AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                    AssetDepEntityType_JP::OrdinaryDepreciation]);

            if (assetDepreciationProfileExt
                && assetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
            {
                //insert value for field 16.1-33 and 16.2-17
                assetCorpTaxActAppendedTablesTmp.UnderDepreciationAmountPreviousTerm = this.getCarryForwardAmount(
                    startDate - 1,
                    [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                        AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                        AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                        AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                    false);
                //insert value for field 38
                assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                    startDate - 1,
                    [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                        AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                        AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                        AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                        AssetDepEntityType_JP::OrdinaryDepreciation],
                    true);
                //insert value for field 16.1-41 and 16.2-45
                assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                    endDate,
                    [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                        AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                        AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                        AssetDepEntityType_JP::AdditionalDepreciationWithReserve,
                        AssetDepEntityType_JP::OrdinaryDepreciation],
                    true);
                //insert value for field 16.1-47 and 16.2-51
                assetCorpTaxActAppendedTablesTmp.CarriedForwardUnderdeprectionAmount = this.getCarryForwardAmount(
                    depEndDate,
                    [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff,
                        AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff,
                        AssetDepEntityType_JP::SpecialDepreciationWithReserve,
                        AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                    false);
            }
            else
            {
                //insert value for field 38
                assetCorpTaxActAppendedTablesTmp.OverdepreciationAmountFromPreviousTerm = this.getCarryForwardAmount(
                    startDate - 1,
                    [AssetDepEntityType_JP::OrdinaryDepreciation],
                    true);
                //insert value for field 16.1-41 and 16.2-45
                assetCorpTaxActAppendedTablesTmp.CarriedForwardAmountToNextTerm = this.getCarryForwardAmount(
                    endDate,
                    [AssetDepEntityType_JP::OrdinaryDepreciation],
                    true);
            }
            //insert value for field 16.1-40 and 16.2-44
            assetCorpTaxActAppendedTablesTmp.ReversalReduction = this.calcAllocatedAmount(startDate, endDate);

            // Inserts value of other fields
            this.insertCommonData();

            if (this.includeAssetInReport())
            {
                this.insertDetailDataForDiffDepMethod();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailDataForDiffDepMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the different depreciaton method to insert detail data.
    /// </summary>
    public void insertDetailDataForDiffDepMethod()
    {
        AssetAmount netAcquisitionCostPercent5;

        netAcquisitionCostPercent5 = AssetDepCalculationHelper_JP::roundOffDepreciation(
            assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost * #NetAcquisitionRatePercent5);

        if (assetReportType == AssetCorpTaxActAppendedTableType_JP::StrightLine)
        {
            switch (currentDepMethod)
            {
                case AssetDepreciationMethod::OldStraightLine_JP:
                    // Inserts value from field 17 to field 24
                    this.insertDataForDepMethodOSL();
                    break;
                case AssetDepreciationMethod::NewStraightLine_JP:
                    // Inserts value from field 25 to field 29
                    if (assetBook.AllowableLimitForAccumulatedDepType_JP != AssetLimitForAccumulatedDepType_JP::AcquisitionCost95
                        || assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost > netAcquisitionCostPercent5)
                    {
                        this.insertDataForDepMethodNSL();
                    }
                    break;
            }

            // Inserts value from field 30 to field 47
            this.insertDataForDepMethodSL();
        }
        else if (assetReportType == AssetCorpTaxActAppendedTableType_JP::DecliningBalance)
        {
            switch (currentDepMethod)
            {
                case AssetDepreciationMethod::OldDecliningBalance_JP:
                    // Inserts value from field 19 to field 24
                    this.insertDataForDepMethodODB();
                    break;

                case AssetDepreciationMethod::NewDecliningBalance200_JP:
                case AssetDepreciationMethod::NewDecliningBalance250_JP:
                    // Inserts value from field 25 to field 33
                    if (assetBook.AllowableLimitForAccumulatedDepType_JP != AssetLimitForAccumulatedDepType_JP::AcquisitionCost95
                        || assetCorpTaxActAppendedTablesTmp.NetAcquisitionCost > netAcquisitionCostPercent5)
                    {
                        this.insertDataForDepMethodNDB();
                    }
                    break;
            }

            // Inserts value from field 34 to field 51
            this.insertDataForDepMethodDB();
        }

        if (assetCorpTaxActAppendedTablesTmp.OrdinaryDepreciationLimitOfCurrentTerm > 0)
        {
            if (currency.CurrencyCode != #CurrencyJPY)
            {
                this.amountFromAccounttingToJPY();
            }
            assetCorpTaxActAppendedTablesTmp.insert();
            rowCount ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Set docTypes;
        Query query;
        QueryRun queryRun;
        QueryBuildRange range;
        AssetTableInterval  assetTableInterval;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;

        this.getReportParameters();

        this.setUserConnection(assetCorpTaxActAppendedTablesTmp);
        this.setUserConnection(assetCorpTaxActAppendedHeaderTmp);

        // Initialize global variables, those variables are added in order to improve the performance.
        currency  = Currency::find(Ledger::find(Ledger::current()).AccountingCurrency);
        currentUserLanguage = currentUserLanguage();
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            printDate);

        rowCount = #Zero;
        query = this.parmQuery();

        AssetCorpTaxActAppendTablesHelper_JP::useAssetBookForAssetDepreciationProfileJoin(query);

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook, UsedFromDate)).value(queryRange(dateNull(), endDate));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook, Status)).value(SysQuery::valueNot(enum2str(AssetStatus::NoAcquisition)));
        range = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetDepreciationProfile)), fieldNum(AssetDepreciationProfile, Method));
        range.value(enum2str(AssetDepreciationMethod::OldStraightLine_JP)
            + ','
            + enum2str(AssetDepreciationMethod::NewStraightLine_JP)
            + ','
            + enum2str(AssetDepreciationMethod::OldDecliningBalance_JP)
            + ','
            + enum2str(AssetDepreciationMethod::NewDecliningBalance200_JP)
            + ','
            + enum2str(AssetDepreciationMethod::NewDecliningBalance250_JP));

        if (assetReportType == AssetCorpTaxActAppendedTableType_JP::StrightLine)
        {
            depMethod = [AssetDepreciationMethod::OldStraightLine_JP, AssetDepreciationMethod::NewStraightLine_JP];
        }
        else if (assetReportType == AssetCorpTaxActAppendedTableType_JP::DecliningBalance)
        {
            depMethod = [AssetDepreciationMethod::OldDecliningBalance_JP, AssetDepreciationMethod::NewDecliningBalance200_JP, AssetDepreciationMethod::NewDecliningBalance250_JP];
        }

        range = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBookTable)), fieldNum(AssetBookTable, CurrentOperationsTax));
        range.value(queryValue(enum2int(CurrentOperationsTax::Tax)));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetTable)))
            {
                assetTable                  = queryRun.get(tableNum(AssetTable));
                assetBook                   = queryRun.get(tableNum(AssetBook));
                assetBookTable              = queryRun.get(tableNum(AssetBookTable));
                assetMajorType              = queryRun.get(tableNum(assetMajorType));
                assetPropertyGroup          = queryRun.get(tableNum(AssetPropertyGroup));
                assetDepreciationProfile    = queryRun.get(tableNum(AssetDepreciationProfile));

                assetBookCurrent            = AssetBook::findOpenOrClosedAssetBookByAssetIdLayer(assetBook.AssetId, CurrentOperationsTax::Current);

                // Gets the extraordinary depreciation method and rate for this value model.
                depreciationProfile = assetBook.depreciationExtProfile();
                extDepMethod             = depreciationProfile.Method;
                assetSpecialDepRate      = depreciationProfile.SpecialDepRate_JP;
                assetSpecialDepBaseRatio = depreciationProfile.SpecialDepBaseRatio_JP;

                // Gets the depreciaton method for this value model as the current depreciaton method.
                currentDepMethod      = assetDepreciationProfile.Method;
                equallyDividedYearNum = assetDepreciationProfile.NumOfYearsEquallyDivided_JP;
                assetDepRateSchedule  = assetDepreciationProfile.AssetDepRateSchedule_JP;

                refAssetBook = null;
                if (assetBookTable.LinkedCurrentLayerAssetBookTable_JP)
                {
                    refAssetBook = AssetBook::find(assetTable.AssetId, assetBookTable.LinkedCurrentLayerAssetBookTable_JP);
                }

                if (!refAssetBook)
                {
                    // If the referenced value model isn't setup, take the related value from current value model,
                    // So assign current value model to refAssetBook variable.
                    refAssetBook = assetBook;
                }

                assetCorpTaxActAppendedTablesTmp.clear();
                if (refAssetBook)
                {
                    refAssetBookCurrent = AssetBook::findOpenOrClosedAssetBookByAssetIdLayer(refAssetBook.AssetId, CurrentOperationsTax::Current);
                    assetDepreciationProfileExt     = AssetDepreciationProfile::find(assetBook.DepreciationExtProfile);
                    refAssetDepreciationProfileExt  = AssetDepreciationProfile::find(refAssetBook.DepreciationExtProfile);
                    assetTableInterval = assetBook.AssetDepBookMap_JP::assetTableInterval(startDate);
                    assetDepEntityInquiry_PreTaxDeduction = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(
                            assetTable.AssetId,
                            assetBook.BookId,
                            assetTableInterval);
                    assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), endDate);
                    assetSumCalcCurrent = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), endDate);
                    docTypes = new Set(Types::Container);
                    docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
                    docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);
                    docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
                    assetSumCalc.parmDocSumCalcUtil_JP(docSumCalcUtil);
                    assetSumCalcCurrent.parmDocSumCalcUtil_JP(docSumCalcUtil);
                    this.initAssetCorpTaxActAppendedTablesTmp();
                }
            }
        }

        if (groupBy == AssetCorpTaxActAppendedTableGroupBy_JP::FixedAssetMajorType)
        {
            this.summarizeDataByMajorType();
            this.regenerateGroupNum();
        }

        this.insertGrandTotal();

        this.initAssetCorpTaxActAppendedHeaderTmp();

        // if the data less than 5, will insert the blank data
        if (rowCount < #GroupNum)
        {
            this.insertBlankData(#GroupNum - rowCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeDataByMajorType</Name>
				<Source><![CDATA[
    private void summarizeDataByMajorType()
    {
        AssetCorpTaxActAppendedTablesTmp_JP assetCorpTaxActAppendedTablesTmpSum;
        AssetSummarizeByMajorType_JP        summarizeByMajorTypeForSum = NoYes::No;

        this.setUserConnection(assetCorpTaxActAppendedTablesTmpSum);

        insert_recordset assetCorpTaxActAppendedTablesTmpSum (
            // Common fields
            // 16-1 fields: 7, 8, 9, 13, 16, 21, 22, 23, 24, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47
            // 16-2 fields: 7, 8, 9, 13, 16, 21, 22, 23, 24, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51
            MajorTypeId, MajorType, AcquisitionCost, ReserveAmountForReductionEntry, NetAcquisitionCost, NetBookValue, BaseTotal, DepreciationAmountOld,
            AdditionalDepreciationAmountOld, CurrentOrdinaryDepreciationSumOld, CaculationDepreciationAmountOld, AdditionalDepreciationAmountNew,
            CurrentOrdinaryDepreciationSumNew, OrdinaryDepreciationLimitOfCurrentTerm, SpecialDepreciationLimit, AllowableDepreciationAmountSum,
            DepreciationAmountOfCurrentTerm, UnderdepreciationAmount, OverdepreciationAmount, OverdepreciationAmountFromPreviousTerm, Underdepreciation,
            ReversalReduction, CarriedForwardAmountToNextTerm, UnderdepreciationAmountNextTerm, SpecialDepreciation, NetCarriedForwardAmountToNextTerm,
            CarriedForwardUnderdeprectionAmount,
            // 16-1 fields: 10, 14, 19, 25, 27
            AssetBookValueAtEndOfTerm, DepreciationAmountInCurrentTerm, CaculationBasisAmountOSL, CaculationBasisAmountSL, DepreciationAmountNew,
            // 16-2 fields: 18, 26, 28, 29, 31, 37
            CaculationBasisAmount, DepreciationAmountBeforeAdjustment, GuaranteeDepreciationAmount, AdjustedAcquisitionCost,  AdjustedDepreciationAmount,
            DepreciationDepictAmountPreviousTerm)
            select MajorTypeId, MajorType, sum(AcquisitionCost), sum(ReserveAmountForReductionEntry), sum(NetAcquisitionCost), sum(NetBookValue), sum(BaseTotal),
                sum(DepreciationAmountOld), sum(AdditionalDepreciationAmountOld), sum(CurrentOrdinaryDepreciationSumOld),
                sum(CaculationDepreciationAmountOld), sum(AdditionalDepreciationAmountNew), sum(CurrentOrdinaryDepreciationSumNew),
                sum(OrdinaryDepreciationLimitOfCurrentTerm), sum(SpecialDepreciationLimit), sum(AllowableDepreciationAmountSum),
                sum(DepreciationAmountOfCurrentTerm), sum(UnderdepreciationAmount), sum(OverdepreciationAmount), sum(OverdepreciationAmountFromPreviousTerm),
                sum(Underdepreciation), sum(ReversalReduction), sum(CarriedForwardAmountToNextTerm), sum(UnderdepreciationAmountNextTerm),
                sum(SpecialDepreciation), sum(NetCarriedForwardAmountToNextTerm), sum(CarriedForwardUnderdeprectionAmount), 
                sum(AssetBookValueAtEndOfTerm),sum(DepreciationAmountInCurrentTerm), sum(CaculationBasisAmountOSL),
                sum(CaculationBasisAmountSL), sum(DepreciationAmountNew), sum(CaculationBasisAmount), sum(DepreciationAmountBeforeAdjustment),
                sum(GuaranteeDepreciationAmount), sum(AdjustedAcquisitionCost), sum(AdjustedDepreciationAmount), sum(DepreciationDepictAmountPreviousTerm)
                from assetCorpTaxActAppendedTablesTmp
                group by MajorTypeId, MajorType
                where assetCorpTaxActAppendedTablesTmp.SummarizeByMajorType == NoYes::Yes
                    && assetCorpTaxActAppendedTablesTmp.MajorType != ''
                    && assetCorpTaxActAppendedTablesTmp.IsChangeOverFromODBToOSL != true;

        delete_from assetCorpTaxActAppendedTablesTmp
            where assetCorpTaxActAppendedTablesTmp.SummarizeByMajorType == NoYes::Yes
                && assetCorpTaxActAppendedTablesTmp.MajorType != '';

        insert_recordset assetCorpTaxActAppendedTablesTmp (MajorTypeId, MajorType, AcquisitionCost, ReserveAmountForReductionEntry, NetAcquisitionCost, NetBookValue, BaseTotal,
            DepreciationAmountOld, AdditionalDepreciationAmountOld, CurrentOrdinaryDepreciationSumOld, CaculationDepreciationAmountOld, AdditionalDepreciationAmountNew,
            CurrentOrdinaryDepreciationSumNew, OrdinaryDepreciationLimitOfCurrentTerm, SpecialDepreciationLimit, AllowableDepreciationAmountSum,
            DepreciationAmountOfCurrentTerm, UnderdepreciationAmount, OverdepreciationAmount, OverdepreciationAmountFromPreviousTerm, Underdepreciation,
            ReversalReduction, CarriedForwardAmountToNextTerm, UnderdepreciationAmountNextTerm, SpecialDepreciation, NetCarriedForwardAmountToNextTerm,
            CarriedForwardUnderdeprectionAmount, AssetBookValueAtEndOfTerm, DepreciationAmountInCurrentTerm,
            CaculationBasisAmountOSL, CaculationBasisAmountSL, DepreciationAmountNew, CaculationBasisAmount,
            DepreciationAmountBeforeAdjustment, GuaranteeDepreciationAmount, AdjustedAcquisitionCost,  AdjustedDepreciationAmount, DepreciationDepictAmountPreviousTerm)
            select MajorTypeId, MajorType, AcquisitionCost, ReserveAmountForReductionEntry, NetAcquisitionCost, NetBookValue, BaseTotal, DepreciationAmountOld,
                AdditionalDepreciationAmountOld, CurrentOrdinaryDepreciationSumOld, CaculationDepreciationAmountOld, AdditionalDepreciationAmountNew,
                CurrentOrdinaryDepreciationSumNew, OrdinaryDepreciationLimitOfCurrentTerm, SpecialDepreciationLimit, AllowableDepreciationAmountSum,
                DepreciationAmountOfCurrentTerm, UnderdepreciationAmount, OverdepreciationAmount, OverdepreciationAmountFromPreviousTerm, Underdepreciation,
                ReversalReduction, CarriedForwardAmountToNextTerm, UnderdepreciationAmountNextTerm, SpecialDepreciation, NetCarriedForwardAmountToNextTerm,
                CarriedForwardUnderdeprectionAmount, AssetBookValueAtEndOfTerm, DepreciationAmountInCurrentTerm,
                CaculationBasisAmountOSL, CaculationBasisAmountSL, DepreciationAmountNew, CaculationBasisAmount,
                DepreciationAmountBeforeAdjustment, GuaranteeDepreciationAmount, AdjustedAcquisitionCost, AdjustedDepreciationAmount, DepreciationDepictAmountPreviousTerm
                from assetCorpTaxActAppendedTablesTmpSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateGroupNum</Name>
				<Source><![CDATA[
    private void regenerateGroupNum()
    {
        rowCount = #Zero;

        ttsbegin;
        while select forupdate * from assetCorpTaxActAppendedTablesTmp
            order by MajorTypeId
        {
            assetCorpTaxActAppendedTablesTmp.RowGroupNum    = rowCount div #GroupNum;
            assetCorpTaxActAppendedTablesTmp.ColunmGroupNum = rowCount mod #GroupNum;
            assetCorpTaxActAppendedTablesTmp.update();

            rowCount++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGrandTotal</Name>
				<Source><![CDATA[
    private void insertGrandTotal()
    {
        assetCorpTaxActAppendedTablesTmp.clear();

        select sum(AcquisitionCost), sum(ReserveAmountForReductionEntry), sum(NetAcquisitionCost), sum(AssetBookValueAtEndOfTerm),
            sum(ReserveAmountForReductionEntryEndTerm), sum(ReversalAmountForReductionDuringTerm), sum(NetBookValue), sum(DepreciationAmountInCurrentTerm),
            sum(BroughtForwardAmountFromPreviousTerm), sum(BaseTotal), sum(CaculationBasisAmount), sum(CaculationBasisAmountOSL), sum(DepreciationAmountOld),
            sum(AdditionalDepreciationAmountOld), sum(CurrentOrdinaryDepreciationSumOld), sum(CaculationDepreciationAmountOld), sum(CaculationBasisAmountSL),
            sum(DepreciationAmountBeforeAdjustment), sum(GuaranteeDepreciationAmount), sum(AdjustedAcquisitionCost), sum(AdjustedDepreciationAmount),
            sum(DepreciationAmountNew), sum(AdditionalDepreciationAmountNew), sum(CurrentOrdinaryDepreciationSumNew),
            sum(OrdinaryDepreciationLimitOfCurrentTerm), sum(SpecialDepreciationLimit), sum(DepreciationDepictAmountPreviousTerm),
            sum(UnderDepreciationAmountPreviousTerm), sum(AllowableDepreciationAmountSum), sum(DepreciationAmountOfCurrentTerm),
            sum(UnderdepreciationAmount), sum(OverdepreciationAmount), sum(OverdepreciationAmountFromPreviousTerm), sum(Underdepreciation),
            sum(ReversalReduction), sum(CarriedForwardAmountToNextTerm), sum(UnderdepreciationAmountNextTerm), sum(SpecialDepreciation),
            sum(NetCarriedForwardAmountToNextTerm), sum(CarriedForwardUnderdeprectionAmount) from assetCorpTaxActAppendedTablesTmp;

        assetCorpTaxActAppendedTablesTmp.MajorType              = SysLabel::labelId2String(literalstr("@FixedAssetsIncentiveDepreciation:Report16GrandTotal"));
        assetCorpTaxActAppendedTablesTmp.RowGroupNum            = rowCount div #GroupNum;
        assetCorpTaxActAppendedTablesTmp.ColunmGroupNum         = rowCount mod #GroupNum;

        assetCorpTaxActAppendedTablesTmp.insert();

        rowCount ++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>