<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankReconciliationWorkflowEventHandler</c> class is the event handler class that is used to manage the workflow approval completed event.
/// </summary>
public class BankReconciliationWorkflowEventHandler implements WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the completed event for the workflow approval.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        if (BankReconciliationWorkfowEventFlight::instance().isEnabled())
        {
            SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::createLogger(classStr(BankReconciliationWorkflowEventHandler));

            using (SysInstrumentationActivityContext context = logger.activityContext(BankInstrumentationConstants::ActivityNameReconciliationWorkflowCompleted, BankInstrumentationConstants::BankNamespace))
            {
                RefRecId reconciliationRecId = _workflowEventArgs.parmWorkflowContext().parmRecId();

                context.addCustomProperty(BankInstrumentationConstants::CustomPropertyRecId, int642Str(reconciliationRecId));

                if (reconciliationRecId != 0 && !BankReconciliationHeader::find(reconciliationRecId))
                {
                    context.addCustomProperty(BankInstrumentationConstants::CustomPropertyWorkflowStatus, BankInstrumentationConstants::ErrorRecordNotFound);
                }

                BankReconciliationHeader::setWorkflowStatus(reconciliationRecId, BankReconciliationApprovalWFStatus::Approved);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>