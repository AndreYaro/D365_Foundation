<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingActivityBuilder_ProdReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SCTTracingActivityBuilder_ProdReportFinished extends SCTTracingActivityBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SCTTracingActivityBuilder_ProdReportFinished construct(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        return new SCTTracingActivityBuilder_ProdReportFinished(
            _activityCode,
            _orderSource,
            _activitySource,
            _productTransactionSource,
            _consumptionTransactionSource,
            _dataCollection,
            _tracingOperationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        this.activityCode = _activityCode;
        this.orderSource = _orderSource;
        this.activitySource = _activitySource;
        this.productTransactionSource = _productTransactionSource;
        this.consumptionTransactionSource = _consumptionTransactionSource;
        this.dataCollection = _dataCollection;
        this.tracingOperationType = _tracingOperationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTracingActivity</Name>
				<Source><![CDATA[
    internal static void createTracingActivity(ProdJournalTable _reportAsFinishedJournal)
    {
        ProdTable                           productionOrder = ProdTable::find(_reportAsFinishedJournal.ProdId);
        InventTransOrigin                   inventTransOrigin;
        Set                                 productTransactionSource = new Set(Types::Record);
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        while select productLotAssociation
            where productLotAssociation.ReferenceId             == _reportAsFinishedJournal.ProdId
               && productLotAssociation.ReportFinishedJournalId == _reportAsFinishedJournal.JournalId
            exists join inventTransOrigin
                where productLotAssociation.ReferenceId   == inventTransOrigin.ReferenceId
                   && productLotAssociation.InventTransId == inventTransOrigin.InventTransId
                   && productLotAssociation.ItemId        == inventTransOrigin.ItemId
        {
            productTransactionSource.add(productLotAssociation);
        }

        SCTTracingActivityHelper::createAndInsertTracingActivity(SCTTracingActivityType::Production,
                                                                 SCTTracingActivityCode::ProductionReportFinished,
                                                                 productionOrder,
                                                                 _reportAsFinishedJournal,
                                                                 productTransactionSource,
                                                                 null,
                                                                 null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivity</Name>
				<Source><![CDATA[
    protected SCTTracingActivity buildActivity()
    {
        switch (this.activityCode)
        {
            case SCTTracingActivityCode::ProductionReportFinished:
                return this.buildProductionReportFinishedActivity();

            default:
                throw error(strFmt("@SCM:SCTActivityCodeValidation_builder", this.activityCode, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTracingTransactionContractFromRecord</Name>
				<Source><![CDATA[
    protected SCTTracingTransactionContract buildTracingTransactionContractFromRecord(Common _record)
    {
        switch (_record.TableId)
        {
            case tableNum(ProdAsBuiltBOMProductLotAssociation):
                ProdAsBuiltBOMProductLotAssociation productLotAssociation = _record as ProdAsBuiltBOMProductLotAssociation;

                if (SCTCacheManager::checkTracingEnabledForItem(productLotAssociation.ItemId))
                {
                    return SCTTracingTransactionContract_ProdReportFinished::newFromProductLotAssociation(productLotAssociation);
                }
                else
                {
                    return null;
                }

            default:
                throw error(strFmt("@SCM:SCTTransactionSourceValidation", _record.TableId, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderSourceValid</Name>
				<Source><![CDATA[
    protected boolean isOrderSourceValid()
    {
        return this.orderSource.TableId == tableNum(ProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductionReportFinishedActivity</Name>
				<Source><![CDATA[
    private SCTTracingActivity buildProductionReportFinishedActivity()
    {
        if (this.activitySource.TableId != tableNum(ProdJournalTable))
        {
            throw error(strFmt("@SCM:SCTActivitySourceValidation", tableId2Name(activitySource.TableId), this.activityCode));
        }
        
        SCTTracingActivity tracingActivity;
        ProdTable productionOrder = this.orderSource as ProdTable;
        ProdJournalTable reportFinishedJournal = this.activitySource as ProdJournalTable;
        
        tracingActivity.ProductTransactions = this.buildSerializedTransactionsFromRecords(this.productTransactionSource);
        if (tracingActivity.ProductTransactions == '[]')
        {
            // If all transactions are filtered out, then return null.
            this.shouldSkip = true;
            return null;
        }

        tracingActivity.ReferenceId      = productionOrder.ProdId;
        tracingActivity.ActivityType     = enum2Symbol(enumNum(SCTTracingActivityType), SCTTracingActivityType::Production);
        tracingActivity.ActivityCode     = enum2Symbol(enumNum(SCTTracingActivityCode), SCTTracingActivityCode::ProductionReportFinished);
        tracingActivity.ActivityDateTime = DateTimeUtil::utcNow();
        tracingActivity.ActivityId       = reportFinishedJournal.JournalId;
        tracingActivity.DataCollection   = FormJsonSerializer::serializeClass(
            SCTTracingActivityDataCollection::construct(tracingActivity.ActivityId, tracingActivity.ReferenceId));

        tracingActivity.TracingOperationType = this.tracingOperationType;
        
        return tracingActivity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>