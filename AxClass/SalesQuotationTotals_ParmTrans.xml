<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTotals_ParmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationTotals_ParmTrans extends SalesQuotationTotals_Sales
{
    SalesQuotationParmTable     salesQuotationParmTable;
    SalesQuotationParmLine      salesQuotationParmLine;
    SalesQuotationLine          salesQuotationLine;

    ParmId                      parmId;
    AccountOrder                sumBy;
    QuotationIdBase             sumQuotationId;
    DocumentStatus              documentStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the weight of a category-based order line.
    /// </summary>
    /// <returns>
    /// The weight of the category-based order line.
    /// </returns>
    /// <remarks>
    /// Derived classes that supports category-based lines should override this method.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The method was not implemented in a derived class that supports category based lines.
    /// </exception>
    protected Weight categoryWeight()
    {
        return SalesQuotationLineForeignTradeCategory::findSalesQuotationLine(salesQuotationLine).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return SalesCalcTax::construct(salesQuotationTable,
                                       specQty,
                                       AccountOrder::None,
                                       parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct discPercent()
    {
        return salesQuotationParmLine.salesQuotationTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesQuotationParmLine));

        recordSortedListLine.sortOrder(fieldNum(SalesQuotationParmLine, QuotationId),
                                       fieldNum(SalesQuotationParmLine, OrigQuotationId),
                                       fieldNum(SalesQuotationParmLine, LineNum),
                                       fieldNum(SalesQuotationParmLine, SalesQuotationLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>InventDimId</c> field of the current order line.
    /// </summary>
    /// <returns>
    ///    The value of the <c>InventDimId</c> field of the current order line.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesQuotationParmLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected TradeInventTransId inventTransId()
    {
        return salesQuotationParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return salesQuotationParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        return salesQuotationLine.isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        return salesQuotationLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return salesQuotationParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount lineAmount(SalesQty salesQty, TransDate transDate)
    {
        return salesQuotationParmLine.lineAmountExclTax(transDate, tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return salesQuotationLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty _unitQty, TransDate _transDate)
    {
        DiscAmount  discAmount = 0;

        if (this.shouldCalculateLineDiscountAmount())
        {
            discAmount += salesQuotationParmLine.calcLineDiscExclTax(_transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateLineDiscountAmount</Name>
				<Source><![CDATA[
    protected boolean shouldCalculateLineDiscountAmount()
    {
        return salesQuotationLine.SalesPrice != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source, SalesUpdate _specQty, AccountOrder _sumBy, ParmId _parmId, SalesId _sumQuotationId, DocumentStatus _documentStatus)
    {
        sumBy               = _sumBy;
        parmId              = _parmId;
        sumQuotationId      = _sumQuotationId;
        documentStatus      = _documentStatus;

        switch (_source.TableId)
        {
            case tableNum(SalesQuotationTable):
                salesQuotationTable       = _source;
                break;

            case tableNum(SalesQuotationParmTable):
                salesQuotationParmTable   = _source;
                salesQuotationTable       = salesQuotationParmTable.salesQuotationTable();
                break;

            default:
                salesQuotationTable      = _source;
                salesQuotationParmTable  = SalesQuotationParmTable::find(salesQuotationTable.QuotationId, parmId);
        }

        super(salesQuotationTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesQuotationLine.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return SalesQuotationTotalsParmTransContract::newFromSalesQuotationParmTable(salesQuotationParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        return SalesQuotationQuantity::construct(documentStatus).pdsCWQtyRemainPhysical(salesQuotationLine, salesQuotationParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets catch weight quantity in catch weight units.
    /// </summary>
    /// <returns>
    /// The catch weight deliver now value.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return salesQuotationParmLine.PdsCWDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty qtyInvent()
    {
        return salesQuotationParmLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in inventory units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in inventory units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected InventQty qtyInventRemain()
    {
        return SalesQuotationQuantity::construct(documentStatus).qtyRemainInventPhysical(salesQuotationLine,
                                                                                         salesQuotationParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return salesQuotationParmLine.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in order line units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in order line units.
    /// </returns>
    /// <remarks>
    /// Derived classes that support non-inventoried lines should override this method.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The method was not implemented in a derived class that supports non-inventoried lines.
    /// </exception>
    protected InventQty qtyUnitRemain()
    {
        return SalesQuotationQuantity::construct(documentStatus).qtyRemainSalesPhysical(salesQuotationLine,
                                                                                        salesQuotationParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        return new QueryRun(salesQuotationParmTable.querySalesQuotationParmLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        return new QueryRun(salesQuotationParmTable.querySalesQuotationParmSubTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (_queryRun.changed(tableNum(SalesQuotationParmLine)))
        {
            salesQuotationParmLine = _queryRun.get(tableNum(SalesQuotationParmLine));
        }
        else
        {
            salesQuotationParmLine = null;
        }

        if (salesQuotationParmLine)
        {
            salesQuotationLine = salesQuotationParmLine.salesQuotationLine();
        }
        else
        {
            salesQuotationLine = null;
        }

        return salesQuotationParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesQuotationParmSubTable   querySalesQuotationParmSubTable;
        SalesQuotationTable          querySalesQuotationTable;

        if (_queryRun.changed(tableNum(SalesQuotationParmSubTable)))
        {
            querySalesQuotationParmSubTable = _queryRun.get(tableNum(SalesQuotationParmSubTable));
        }
        else
        {
            querySalesQuotationParmSubTable = null;
        }

        if (querySalesQuotationParmSubTable)
        {
            querySalesQuotationTable = querySalesQuotationParmSubTable.salesQuotationTable();
        }
        else
        {
            querySalesQuotationTable = null;
        }

        return querySalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitQtyInInventoryUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from order line units to inventory units.
    /// </summary>
    /// <param name="_unitQty">
    /// The order line quantity to convert.
    /// </param>
    /// <returns>
    /// The order line quantity in inventory units.
    /// </returns>
    /// <remarks>
    /// Derived classes that support non-inventoried item based lines should override this method. This
    /// method should only be called after the <c>InventTable</c> instance variable has been initialized.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The method was called from the base.
    /// </exception>
    protected InventQty unitQtyInInventoryUnits(UnitQty _unitQty)
    {
        Debug::assert(inventTable != null);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
																					 salesQuotationLine.InventDimId,
																					 _unitQty,
																					 salesQuotationLine.SalesUnit,
																					 inventTable.inventUnitId(),
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        CustQuotationJour               custQuotationJour;
        CustQuotationConfirmJour        custQuotationConfirmJour;
        CustQuotationSalesLink          custQuotationSalesLink;
        CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;

        if (salesQuotationParmTable.ParmJobStatus == ParmJobStatus::Executed)
        {
            select QuotationId, quotationDate from custQuotationSalesLink
            where custQuotationSalesLink.origQuotationId == salesQuotationTable.QuotationId;

            select firstOnly custQuotationJour
            where custQuotationJour.QuotationId     == custQuotationSalesLink.quotationId
                && custQuotationJour.QuotationDate  == custQuotationSalesLink.quotationDate;

            if (custQuotationJour)
            {
                return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custQuotationJour);
            }
            else
            {
                select QuotationConfirmId, quotationDate from custQuotationConfirmSalesLink
                where custQuotationConfirmSalesLink.origQuotationId == salesQuotationTable.QuotationId;

                select firstOnly custQuotationConfirmJour
                where custQuotationConfirmJour.QuotationConfirmId == custQuotationConfirmSalesLink.QuotationConfirmId
                    && custQuotationConfirmJour.QuotationDate == custQuotationConfirmSalesLink.quotationDate;

                if (custQuotationConfirmJour)
                {
                    return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custQuotationConfirmJour);
                }
            }
        }

        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesQuotationParmTable);
    }
    // </GTE>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>