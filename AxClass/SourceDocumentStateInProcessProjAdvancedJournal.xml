<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentStateInProcessProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentClassExtensionAttribute(tableStr(ProjAdvancedJournal))]
public class SourceDocumentStateInProcessProjAdvancedJournal extends SourceDocumentStateInProcess
{
    private boolean isEnhancedPostingEnable = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doTransition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the source document transition and retrieves the business event associated with the document transition.
    /// </summary>
    /// <returns>
    /// true if transition of source document is succeeded; otherwise, false.
    /// </returns>
    protected boolean doTransition()
    {
        boolean enableProjAdvancedJournalErrorTransferFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalErrorTransferFeature::instance());

        if (enableProjAdvancedJournalErrorTransferFeature || isEnhancedPostingEnable)
        {
            SourceDocumentLineItemList  sourceDocumentLineItemListDocumentation;

            if(targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed ||
               targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Canceled)
            {
                if (this.canDoSetBasedTransitionFromFullyDistributedToCompleted())
                {
                    if (!sourceDocumentLineItemList)
                    {
                        this.initSourceDocumentLineItemListForAccountingPolicyProjAdvancedJournal(sourceDocumentHeader.RecId);
                    }
                    sourceDocumentLineItemListDocumentation = sourceDocumentLineItemList;
                    sourceDocumentAccountingPolicy = SourceDocumentAccountingPolicy::newFromSourceDocument(sourceDocument, sourceDocumentLineItemListDocumentation);

                    this.doSetBasedTransitionToCompleted();
                }
                else
                {
                    this.doTransitionSourceDocumentLines();
                }

                this.journalizeProjAdvancedJournal();

                this.sendBusinessEventsProjAdvancedJournal();
            }
            return true;
        }

        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeProjAdvancedJournal</Name>
				<Source><![CDATA[
    private void journalizeProjAdvancedJournal()
    {
        boolean enableProjEnableAdvancedJournalErrorTransferFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalErrorTransferFeature::instance());

        //Journalize the source document
        if (sourceDocument)
        {
            SourceDocumentAccountingPolicy sourceDocumentAccountingPolicyForJournalizing = SourceDocumentAccountingPolicy::newFromSourceDocument(sourceDocument);
            SourceDocumentLineItemList sourceDocumentLineItemsForJournalizing;

            // Create accounting events and update accounting distributions
            if (enableProjEnableAdvancedJournalErrorTransferFeature || isEnhancedPostingEnable)
            {
                sourceDocumentLineItemsForJournalizing = this.parmSourceDocumentLineItemList();
                var accountingEventProcessor = ProjAdvancedJournalAccountingEventProcessor::construct(sourceDocumentLineItemsForJournalizing);
                accountingEventProcessor.projAdvancedJournalMaintainAccountingEvents(sourceDocumentLineItemsForJournalizing, sourceDocument, AccountingEventType::Original, sourceDocumentAccountingPolicyForJournalizing);
            }
            else
            {
                var accountingEventProcessor = AccountingEventProcessor::construct();
                accountingEventProcessor.maintainAccountingEvents(sourceDocument, AccountingEventType::Original, sourceDocumentAccountingPolicyForJournalizing);
            }

            // Only invoke the journalizer if accounting is required
            if (sourceDocumentAccountingPolicyForJournalizing.parmIsAccountingRequired())
            {
                Query sourceDocumentLineQuery = this.getSourceDocumentLineQuery(sourceDocumentHeader.RecId);
                Set statusesForJournalizing = Set::create(lineAccountingStatus.pack());
                statusesForJournalizing.add(SourceDocumentLineAccountingStatus::Completed);
                if (!enableProjEnableAdvancedJournalErrorTransferFeature || !isEnhancedPostingEnable)
                {
                    sourceDocumentLineItemsForJournalizing = this.getSourceDocumentLineItemListForHeader(sourceDocumentHeader.RecId, statusesForJournalizing);
                }

                sourceDocumentAccountingPolicyForJournalizing =
                    SourceDocumentAccountingPolicy::newFromSourceDocument(sourceDocument, sourceDocumentLineItemsForJournalizing, false);

                SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
                metadataCollection.SetManagedValue("SubledgerIJournalize", "DefaultJournalizer");
                SubledgerIJournalize subledgerJournalizer = SysPluginFactory::Instance("Dynamics.AX.Application", classStr(SubledgerIJournalize), metadataCollection);

                Debug::assert(subledgerJournalizer != null);

                SourceDocumentProcessorBase sourceDocumentProcessorBase = this.parmProcessor();
                if (sourceDocumentProcessorBase)
                {
                    SourceDocumentProcessorCaller sourceDocumentProcessorCaller = sourceDocumentProcessorBase.parmCaller();
                    if (sourceDocumentProcessorCaller)
                    {
                        subledgerJournalizer.parmCaller(sourceDocumentProcessorCaller);
                    }
                }
                subledgerJournalizer.parmSourceDocumentHeaderRecId(sourceDocument.parmSourceDocumentHeader().RecId);
                subledgerJournalizer.journalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineItemListForAccountingPolicyProjAdvancedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>SourceDocumentLineList</c> for use in determination of accounting policies.
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">The <c>SourceDocumentHeader record identifier.</c></param>
    /// <remarks>This method is used when we are transitioning a source document from to a completed
    /// state using set-based logic. We need to get a <c>SourceDocumentLineItem</c> object for each SourceRelationTyp
    /// that is being transitioned. They are used to get the associated <c>AccountingPolicy</c> objects which are
    /// used to determine if accounting is required for the document.
    /// </remarks>
    private void initSourceDocumentLineItemListForAccountingPolicyProjAdvancedJournal(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        SourceDocumentLine                  sourceDocumentLine;
        SourceDocumentLine                  relationTypeSourceDocumentLine;
        SourceDocumentLineItem              sourceDocumentLineItem;
               
        sourceDocumentLineItemList = SourceDocumentLineItemList::construct();

        // first get list of unique top level types of SourceDocumentLines on document
        while select SourceRelationType from relationTypeSourceDocumentLine
            group by SourceRelationType
            where relationTypeSourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId &&
            relationTypeSourceDocumentLine.ParentSourceDocumentLine == 0 &&
            relationTypeSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed
        {
            // for each releationtype get a SourceDocumentLine
            select firstonly sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId &&
                sourceDocumentLine.SourceRelationType == relationTypeSourceDocumentLine.SourceRelationType &&
                sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed;

            // create a SourceDocumentLineItem and add to list
            // this list will be used to create accounting policies needed to determine if accounting
            // is required for document
            if (sourceDocumentLine)
            {
                if (this.isEligibleSourceDocumentLine(sourceDocumentLine))
                {
                    sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
                    if (sourceDocumentLineItem)
                    {
                        sourceDocumentLineItemList.addEnd(sourceDocumentLineItem);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendBusinessEventsProjAdvancedJournal</Name>
				<Source><![CDATA[
    private void sendBusinessEventsProjAdvancedJournal()
    {
        var businessEvent = this.getBusinessEvent();
        
        if (businessEvent)
        {
            businessEvent.send();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateContainerValuesToNullForProcessedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method clears the source document state line state container field to null after processing of document
    /// </summary>
    protected void updateStateContainerValuesToNullForProcessedLine()
    {
        ttsbegin;
        SourceDocumentLine sourceDocumentLine;

        // Check if all lines corresponding to header are in completed state
        select firstonly RecId from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId
                && sourceDocumentLine.StateContainer != conNull()
                && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Completed;

        // Update stateContainer when all lines in the journal are in completed state
        if (sourceDocumentLine.RecId == 0)
        {
            sourceDocumentLine.clear();
            sourceDocumentLine.skipDataMethods(true);
            sourceDocumentLine.skipBusinessEvents(true);
            sourceDocumentLine.skipEvents(true);

            update_recordSet sourceDocumentLine
                setting StateContainer = conNull()
            where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId
                && sourceDocumentLine.StateContainer != conNull()
                && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>