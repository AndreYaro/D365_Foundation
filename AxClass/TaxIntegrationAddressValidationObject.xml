<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TaxServiceAPIContracts = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// This is a object wrapper class holds the information of LogisticsPostalAddress
/// </summary>
public class TaxIntegrationAddressValidationObject
{
    private LogisticsPostalAddress logisticsPostalAddress;
    private Map addressObjectMap;
    private TaxIntegrationAddressValidationController taxIntegrationAddressValidationController;
    private TaxLogisticsPostalAddressValidationTmp taxLogisticsPostalAddressValidationTmp;
    private LogisticsAddressCountryRegion logisticsAddressCountryRegion;
    private int validatedAddressCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LogisticsPostalAddress _logisticsPostalAddress)
    {
        this.logisticsPostalAddress = _logisticsPostalAddress;
        addressObjectMap = new Map(Types::String, Types::AnyType);
        this.taxIntegrationAddressValidationController = TaxIntegrationAddressValidationController::instance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTargetAddressObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate address object
    /// </summary>
    public void generateTargetAddressObject()
    {
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::Street, this.logisticsPostalAddress.Street);
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::City, this.logisticsPostalAddress.City);
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::CountryRegion, this.getISOCode(this.logisticsPostalAddress.CountryRegionId));
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::County, this.logisticsPostalAddress.County);
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::State, this.logisticsPostalAddress.State);
        addressObjectMap.add(TaxIntegrationAddressValidationConstants::PostalCode, this.logisticsPostalAddress.ZipCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateResultAddressObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate validate result
    /// </summary>
    /// <param name = "_validatedAddresses">validatedAddresses</param>
    public void generateResultAddressObject(TaxServiceAPIContracts.TaxCalculationISVAddressValidationResultAggregator _validatedAddresses)
    {
        CLRObject enumerator = _validatedAddresses.Value.ValidatedAddresses.getEnumerator();
        while (enumerator.moveNext())
        {
            TaxServiceAPIContracts.TaxServiceISVValidatedAddress validatedAddressResult = enumerator.get_Current();

            taxLogisticsPostalAddressValidationTmp.clear();
            taxLogisticsPostalAddressValidationTmp.Street = validatedAddressResult.Street;
            taxLogisticsPostalAddressValidationTmp.City = validatedAddressResult.City;
            taxLogisticsPostalAddressValidationTmp.County = validatedAddressResult.County;
            taxLogisticsPostalAddressValidationTmp.State = validatedAddressResult.State;
            taxLogisticsPostalAddressValidationTmp.CountryRegionId = this.getLogisticsAddressCountryRegionId(validatedAddressResult.CountryRegion);
            taxLogisticsPostalAddressValidationTmp.ZipCode = validatedAddressResult.PostalCode;
            taxLogisticsPostalAddressValidationTmp.Latitude = validatedAddressResult.Latitude;
            taxLogisticsPostalAddressValidationTmp.Longitude = validatedAddressResult.Longitude;
            taxLogisticsPostalAddressValidationTmp.AddressGroupId = validatedAddressResult.AddressGroupId;
            taxLogisticsPostalAddressValidationTmp.formatAddress();
            taxLogisticsPostalAddressValidationTmp.insert();
            this.validatedAddressCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatedAddressCount</Name>
				<Source><![CDATA[
    public int getValidatedAddressCount()
    {
        return this.validatedAddressCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatedAddressResultList</Name>
				<Source><![CDATA[
    public TaxLogisticsPostalAddressValidationTmp getValidatedAddressResultList()
    {
        return this.taxLogisticsPostalAddressValidationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxLogisticsPostalAddressValidationTmp</Name>
				<Source><![CDATA[
    public void setTaxLogisticsPostalAddressValidationTmp(TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp)
    {
        this.taxLogisticsPostalAddressValidationTmp = _taxLogisticsPostalAddressValidationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressObjectMap</Name>
				<Source><![CDATA[
    public Map getAddressObjectMap()
    {
        return addressObjectMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalLogisticsPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress getOriginalLogisticsPostalAddress()
    {
        return this.logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getISOCode</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionISOCode getISOCode(LogisticsAddressCountryRegionId _countryRegionId)
    {
        if (!this.logisticsAddressCountryRegion)
        {
            select firstonly CountryRegionId, ISOcode from logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == _countryRegionId;
        }
        return logisticsAddressCountryRegion.ISOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryRegionId</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionId getLogisticsAddressCountryRegionId(LogisticsAddressCountryRegionISOCode _ISOCode)
    {
        if (!this.logisticsAddressCountryRegion)
        {
            select firstonly CountryRegionId, ISOcode from logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.ISOcode == _ISOCode;
        }
        return logisticsAddressCountryRegion.CountryRegionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>