<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransSettleDistController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendTransSettleDistController</c> class provides support for generating distributions
///    for settlement processing of <c>CustVendTrans</c> records.
/// </summary>
/// <remarks>
///    This class extends the <c>CustVendTransSettleDistController</c> class to provide additional
///    functionality that is specific to settlement processing.
/// </remarks>
class CustVendTransSettleDistController extends CustVendTransDistributionController
{
    RefRecId    currentSpecTransId;
    boolean     isSettleByLineEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDistributionToMap</Name>
				<Source><![CDATA[
    private Map addDistributionToMap(Map _ledgerDimensionMap, LedgerDimensionAccount _ledgerDimension, real _distributionFactor)
    {
        real currentDistributionFactor;

        if (_ledgerDimensionMap.exists(_ledgerDimension))
        {
            currentDistributionFactor = _ledgerDimensionMap.lookup(_ledgerDimension);
            currentDistributionFactor += _distributionFactor;
            _ledgerDimensionMap.insert(_ledgerDimension, currentDistributionFactor);
        }
        else
        {
            _ledgerDimensionMap.insert(_ledgerDimension, _distributionFactor);
        }

        return _ledgerDimensionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccDistFactorsOfLineTypeCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the accounting distribution settlement factors of the <c>CustTransOpenLine</c> record
    /// which has the <c>CustomerInvoiceLineType::Customer</c> enumeration value.
    /// </summary>
    /// <param name="_custInvoiceLineIdRef">
    /// The <c>CustInvoiceLineIdRef</c> record.
    /// </param>
    /// <param name="_settleAmountOfOpenTransLine">
    /// The settle amount of the <c>CustTransOpenLine</c> record.
    /// </param>
    /// <param name="_totalSettleAmount">
    /// The total settle amount.
    /// </param>
    /// <param name="_ledgerDimensionMap">
    /// The ledger dimension map which holds the distribution factors.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    /// The ledger dimesion that is used to merge with the distribution factors; optional.
    /// </param>
    /// <param name="_mergeDefaultWithOriginalDimension">
    /// Identifies when the default ledger dimension should be merged with the distribution factors; optional.
    /// </param>
    protected void generateAccDistFactorsOfLineTypeCustomer(
        CustInvoiceLineIdRef    _custInvoiceLineIdRef,
        Amount                  _settleAmountOfOpenTransLine,
        Amount                  _totalSettleAmount,
        Map                     _ledgerDimensionMap,
        LedgerDimensionAccount  _defaultLedgerDimension = 0,
        boolean                 _mergeDefaultWithOriginalDimension = false)
    {
        CustTransOpenLine           custTransOpenLine;
        CustInvoiceTrans            custInvoiceTrans;
        MarkupTrans                 markupTrans;
        TaxTrans                    taxTrans;
        AccountingDistribution      accountingDistribution;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        SubledgerJournalAccountEntry                subledgerJournalAccountEntry;
        Amount                      invoiceTransLineAmount;
        Amount                      markupTransAmount;
        Amount                      settleAmountOfInvoiceTransLine;
        Amount                      settleAmountOfmarkupTrans;
        real                        distributionFactor;
        boolean                     taxSpecifyLine = TaxParameters::find().TaxSpecifyLine;
        LedgerDimensionAccount      ledgerDimensionAccount;

        select firstOnly RecId from markupTrans
            exists join custInvoiceTrans
                where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId
                &&  markupTrans.TransTableId == custInvoiceTrans.TableId
                &&  markupTrans.TransRecId == custInvoiceTrans.RecId
                &&  !markupTrans.IsDeleted;

        if (markupTrans)
        {
            select custInvoiceTrans where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId;

            if (taxSpecifyLine == NoYes::Yes)
            {
                invoiceTransLineAmount = custInvoiceTrans.LineAmount + custInvoiceTrans.TaxAmount;
            }
            else
            {
                select sum(SourceRegulateAmountCur) from taxTrans
                    where taxTrans.SourceTableId == custInvoiceTrans.TableId
                    && taxTrans.SourceRecId == custInvoiceTrans.RecId;

                invoiceTransLineAmount = custInvoiceTrans.LineAmount - taxTrans.SourceRegulateAmountCur;
            }

            select custTransOpenLine where custTransOpenLine.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId;

            if (custTransOpenLine.AmountCur)
            {
                settleAmountOfInvoiceTransLine = CurrencyExchange::round(_settleAmountOfOpenTransLine * invoiceTransLineAmount / custTransOpenLine.AmountCur, custInvoiceTrans.CurrencyCode);
            }
        }
        else
        {
            settleAmountOfInvoiceTransLine = _settleAmountOfOpenTransLine;
        }

        while select AllocationFactor from accountingDistribution
            join RecId from custInvoiceTrans
            join RecId from subledgerJournalAccountEntryDistribution
            join LedgerDimension from subledgerJournalAccountEntry
            where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId
            &&  accountingDistribution.SourceDocumentLine == custInvoiceTrans.SourceDocumentLine
            &&  subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
            &&  subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
            &&  subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
        {
            if (_totalSettleAmount != 0)
            {
                distributionFactor = settleAmountOfInvoiceTransLine / _totalSettleAmount * accountingDistribution.AllocationFactor;
            }

            ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
            if (_mergeDefaultWithOriginalDimension)
            {
                ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension,
                    subledgerJournalAccountEntry.LedgerDimension);
            }

            this.addDistributionToMap(_ledgerDimensionMap, ledgerDimensionAccount, distributionFactor);
        }

        if (settleAmountOfInvoiceTransLine != _settleAmountOfOpenTransLine)
        {
            while select RecId, SourceDocumentLine, TaxAmount, TransTableId, TransRecid, Value from markupTrans
                exists join custInvoiceTrans
                where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId
                &&  markupTrans.TransTableId == custInvoiceTrans.TableId
                &&  markupTrans.TransRecId == custInvoiceTrans.RecId
                &&  !markupTrans.IsDeleted
            {
                if (taxSpecifyLine == NoYes::Yes)
                {
                    markupTransAmount = markupTrans.Value + markupTrans.TaxAmount;
                }
                else
                {
                    select sum(SourceRegulateAmountCur) from taxTrans
                        where taxTrans.SourceTableId == markupTrans.TableId
                        && taxTrans.SourceRecId == markupTrans.RecId;

                    markupTransAmount = markupTrans.Value - taxTrans.SourceRegulateAmountCur;
                }

                settleAmountOfMarkupTrans = 0;

                if (custTransOpenLine.AmountCur)
                {
                    settleAmountOfMarkupTrans = CurrencyExchange::round(_settleAmountOfOpenTransLine * markupTransAmount / custTransOpenLine.AmountCur, custInvoiceTrans.CurrencyCode);
                }

                while select AllocationFactor from accountingDistribution
                    join RecId from subledgerJournalAccountEntryDistribution
                    join LedgerDimension from subledgerJournalAccountEntry
                    where accountingDistribution.SourceDocumentLine == markupTrans.SourceDocumentLine
                    &&  subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                    &&  subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                    &&  subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
                {
                    if (_totalSettleAmount != 0)
                    {
                        distributionFactor = settleAmountOfMarkupTrans / _totalSettleAmount * accountingDistribution.AllocationFactor;
                    }

                    ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
                    if (_mergeDefaultWithOriginalDimension)
                    {
                        ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension,
                        subledgerJournalAccountEntry.LedgerDimension);
                    }

                    this.addDistributionToMap(_ledgerDimensionMap, ledgerDimensionAccount, distributionFactor);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccountingDistributionFactors</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Generate the accounting distribution factors.
    /// </summary>
    /// <param name="_settleByLineValues">
    ///  A list that contains the invoice line references and amounts.
    /// </param>
    /// <param name="_settleByLineValuesTotal">
    ///  The total amount that is being settled.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    /// The ledger dimesion that is used to merge with the distribution factors; optional.
    /// </param>
    /// <param name="_mergeDefaultWithOriginalDimension">
    /// Identifies when the default ledger dimension should be merged with the distribution factors; optional.
    /// </param>
    /// <returns>
    /// A list of accounting distribution factors.
    /// </returns>
    protected List generateAccountingDistributionFactors(List _settleByLineValues, money _settleByLineValuesTotal,
            LedgerDimensionAccount  _defaultLedgerDimension = 0,
            boolean                 _mergeDefaultWithOriginalDimension = false)
    {
        CustInvoiceLineIdRef        custInvoiceLineIdRef;
        CustInvoiceTrans            custInvoiceTrans;
        CustInterestTrans           custInterestTrans;
        MarkupTrans                 markupTrans;
        CustTrans                   custTrans;
        AccountingDistribution      accountingDistribution;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        SubledgerJournalAccountEntry                subledgerJournalAccountEntry;
        List                        distributionFactors;
        CustVendTransDistribution   distribution;
        ListEnumerator               settleByLineValuesEnumerator;
        money                       settleByLineAmount;
        real                        distributionFactor;
        Map                         ledgerDimensionMap;
        MapEnumerator               ledgerDimensionMapEnumerator;
        LedgerDimensionAccount      ledgerDimensionAccount;

        distributionFactors = new List(Types::Class);
        settleByLineValuesEnumerator = _settleByLineValues.getEnumerator();

        ledgerDimensionMap = new Map(Types::Int64, Types::Real);

        Debug::assert(_settleByLineValuesTotal != 0);

        while (settleByLineValuesEnumerator.moveNext())
        {
            // Determine the distribution factors per distributions associated with a line.
            // The distribution factor is added to a map so that there will only be one distribution factor per ledgerDimension
            // The distribution factor is calculated as:
            //    DistributionFactor = LineSettleAmount / TotalSettleAmount * AccountingDistributionFactor
            // The LedgerDimension is retrieved from the SubledgerJournalAccountEntry record associated with the AccountingDistribution record from which
            // the factor was calculated.
            // Note the AccountingDistribution.AllocationFactor values are stored as the actual percent value {EX: .50 for 50%}

            [custInvoiceLineIdRef, settleByLineAmount] = settleByLineValuesEnumerator.current();

            switch (custInvoiceLineIdRef.EntityType)
            {
                case CustInvoiceLineType::Customer :
                    if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                    {
                        this.generateAccDistFactorsOfLineTypeCustomer(
                            custInvoiceLineIdRef,
                            settleByLineAmount,
                            _settleByLineValuesTotal,
                            ledgerDimensionMap,
                            _defaultLedgerDimension,
                            _mergeDefaultWithOriginalDimension);
                    }
                    else
                    {
                        // CustInvoiceTrans
                        while select AllocationFactor from accountingDistribution
                            join RecId from custInvoiceTrans
                            join RecId from subledgerJournalAccountEntryDistribution
                            join LedgerDimension from subledgerJournalAccountEntry
                            where custInvoiceTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId
                                && accountingDistribution.SourceDocumentLine == custInvoiceTrans.SourceDocumentLine
                                && subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                                && subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                                && subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
                        {
                            if (_settleByLineValuesTotal != 0)
                            {
                                distributionFactor = settleByLineAmount / _settleByLineValuesTotal * (accountingDistribution.AllocationFactor);
                            }

                            ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
                            if (_mergeDefaultWithOriginalDimension)
                            {
                                ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension,
                                    subledgerJournalAccountEntry.LedgerDimension);
                            }

                            ledgerDimensionMap = this.addDistributionToMap(ledgerDimensionMap, ledgerDimensionAccount, distributionFactor);
                        }
                    }
                    break;

                case CustInvoiceLineType::InterestNote :
                    // CustInterestTrans
                    // Interest trans records have no source document data so there are no AccountingDistribution.AllocationFactor values to consider in calculation
                    // of the factor. In this scenario the AccountingDistributionFactor in the calculation is 1.0 (100%)
                    select firstonly DefaultDimension from custTrans
                        join RecId from custInterestTrans
                        where custInterestTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId;

                    if (_settleByLineValuesTotal != 0)
                    {
                        distributionFactor = settleByLineAmount / _settleByLineValuesTotal;
                    }

                    ledgerDimensionAccount = custTrans.DefaultDimension;
                    if (_mergeDefaultWithOriginalDimension)
                    {
                        ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension,
                            custTrans.DefaultDimension);
                    }

                    ledgerDimensionMap = this.addDistributionToMap(ledgerDimensionMap, ledgerDimensionAccount, distributionFactor);

                    break;

                case CustInvoiceLineType::MarkupTrans :
                    // MarkupTrans
                    while select AllocationFactor from accountingDistribution
                        join RecId from markupTrans
                        join RecId from subledgerJournalAccountEntryDistribution
                        join LedgerDimension from subledgerJournalAccountEntry
                    where markupTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId
                        && accountingDistribution.SourceDocumentLine == markupTrans.SourceDocumentLine
                        && subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                        && subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        && subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
                    {
                        if (_settleByLineValuesTotal != 0)
                        {
                            distributionFactor = settleByLineAmount / _settleByLineValuesTotal * (accountingDistribution.AllocationFactor);
                        }

                        ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
                        if (_mergeDefaultWithOriginalDimension)
                        {
                            ledgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(_defaultLedgerDimension,
                                subledgerJournalAccountEntry.LedgerDimension);
                        }

                        ledgerDimensionMap = this.addDistributionToMap(ledgerDimensionMap, ledgerDimensionAccount, distributionFactor);
                    }

                    break;
            }
        }

        // convert map values into a list of distribution factors
        ledgerDimensionMapEnumerator = ledgerDimensionMap.getEnumerator();

        while (ledgerDimensionMapEnumerator.moveNext())
        {
            distribution = new CustVendTransDistribution(
                ledgerDimensionMapEnumerator.currentKey(),
                ledgerDimensionMapEnumerator.currentValue());

            distributionFactors.addEnd(distribution);
        }

        return distributionFactors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionFactors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about the distribution factors.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The <c>CustVendTrans</c> record that is associated with the distributions.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The posting type of the original distributions to consider. For example, the
    ///    <c>LedgerPostingType::CustBalance</c> enumeration value.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    ///    The <c>LedgerDimensionAccount</c> to be used when the original distributions cannot be identified
    ///    or when requested to create a single distribution.
    /// </param>
    /// <param name="_forceSingleDistribution">
    ///    Indicates whether to force the process to generate only a single distribution.
    /// </param>
    /// <param name="_mergeDefaultLedgerDimension">
    /// A Boolean value that indicates whether to merge the default ledger dimension and original distribution dimensions;
    /// optional.
    /// </param>
    /// <returns>
    ///    A <c>List</c> that contains the collection of <c>CustVendTransDistribution</c> objects that
    ///    represents the distribution factors.
    /// </returns>
    /// <remarks>
    ///    The results of this invocation are cached on the instance so that subsequent requests for the same
    ///    distribution information can reuse the previous results.
    /// </remarks>
    public List getDistributionFactors(
        CustVendTrans           _custVendTrans,
        LedgerPostingType       _ledgerPostingType,
        LedgerDimensionAccount  _defaultLedgerDimension,
        boolean                 _forceSingleDistribution,
        boolean                 _mergeDefaultLedgerDimension = false)
    {
        List        ledgerPostingTypes = new List(Types::Enum);

        ledgerPostingTypes.addEnd(_ledgerPostingType);

        return this.getDistributionFactorsForPostingTypes(_custVendTrans, ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution, _mergeDefaultLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionFactorsForPostingTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about the distribution factors.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The <c>CustVendTrans</c> record that is associated with the distributions.
    /// </param>
    /// <param name="_ledgerPostingTypes">
    ///    The posting types of the original distributions to consider. For example, the
    ///    <c>LedgerPostingType::CustBalance</c> enumeration value.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    ///    The <c>LedgerDimensionAccount</c> to be used when the original distributions cannot be identified
    ///    or when requested to create a single distribution.
    /// </param>
    /// <param name="_forceSingleDistribution">
    ///    Indicates whether to force the process to generate only a single distribution.
    /// </param>
    /// <param name="_mergeDefaultWithOriginalDimension">
    /// A Boolean value that indicates whether to merge the default ledger dimension and original distribution dimensions;
    /// optional.
    /// </param>
    /// <returns>
    ///    A <c>List</c> that contains the collection of <c>CustVendTransDistribution</c> objects that
    ///    represents the distribution factors.
    /// </returns>
    /// <remarks>
    ///    The results of this invocation are cached on the instance so that subsequent requests for the same
    ///    distribution information can reuse the previous results.
    /// </remarks>
    public List getDistributionFactorsForPostingTypes(
            CustVendTrans           _custVendTrans,
            List                    _ledgerPostingTypes,
            LedgerDimensionAccount  _defaultLedgerDimension,
            boolean                 _forceSingleDistribution,
            boolean                 _mergeDefaultWithOriginalDimension = false)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CustTransOpenLine       custTransOpenLine;
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        List                    settleByLineValues;
        List                    distributionFactors;
        money                   settleByLineValuesTotal;

        if (this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution))
        {
            // capture settle by line data, if it exists

            if (! _forceSingleDistribution &&
                this.parmIsSettleByLineEnabled() &&
                CustVendTransDistributionController::custVendTransHasSourceDocumentData(_custVendTrans))
            {
                settleByLineValues = new List(Types::Container);      // [CustInvoiceLineIdRef, AmountToSettle]

                // get the amount to be settled per invoice line
                while select CustTransOpenLine, SpecTrans, AmountToSettle from custTransMarkedOpenLine
                    join CustInvoiceLineIdRef, RecId from custTransOpenLine
                    join custInvoiceLineIdRef
                where custTransMarkedOpenLine.SpecTrans == currentSpecTransId
                    && custTransOpenLine.RecId == custTransMarkedOpenLine.CustTransOpenLine
                    && custInvoiceLineIdRef.RecId == custTransOpenLine.CustInvoiceLineIdRef
                {
                    settleByLineValues.addEnd([custInvoiceLineIdRef, custTransMarkedOpenLine.AmountToSettle]);
                    settleByLineValuesTotal += custTransMarkedOpenLine.AmountToSettle;
                }
            }

            // generate the factors

            if ((settleByLineValues != null) && (settleByLineValues.elements() > 0))
            {
                // settle by line data was discovered, calculate the factors based on the settle by line amounts
                distributionFactors = this.generateAccountingDistributionFactors(settleByLineValues, settleByLineValuesTotal, _defaultLedgerDimension, _mergeDefaultWithOriginalDimension);

                currentTransaction = _custVendTrans;
                currentLedgerPostingTypes = _ledgerPostingTypes;
                currentDefaultLedgerDimension = _defaultLedgerDimension;
                currentForceSingleDistribution = _forceSingleDistribution;

                currentLedger = Ledger::findByLegalEntity(CompanyInfo::current(_custVendTrans.company()));
            }
            else
            {
                // no settle by line data discovered, use the base class implementation to calculate the factors based on posted distribution data
                distributionFactors = super(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution);
            }

            this.parmCurrentDistributionFactors(distributionFactors);
        }

        Debug::assert(this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution) == false);
        Debug::assert(currentLedger.RecId != 0);

        return this.parmCurrentDistributionFactors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(boolean _isSettleByLineEnabled)
    {
        super();

        isSettleByLineEnabled = _isSettleByLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSettleByLineEnabled</Name>
				<Source><![CDATA[
    protected boolean parmIsSettleByLineEnabled()
    {
        return isSettleByLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecTransId</Name>
				<Source><![CDATA[
    public RefRecId parmSpecTransId(RefRecId _specTransId = currentSpecTransId)
    {
        currentSpecTransId = _specTransId;

        return currentSpecTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustVendTransSettleDistController</c> class.
    /// </summary>
    /// <param name="_isSettleByLineEnabled">
    /// boolean value indicating whether settle by line functionality is enabled.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CustVendTransSettleDistController</c> class.
    /// </returns>
    public static CustVendTransSettleDistController construct(boolean _isSettleByLineEnabled)
    {
        CustVendTransSettleDistController controller = new CustVendTransSettleDistController(_isSettleByLineEnabled);

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
