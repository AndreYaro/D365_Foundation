<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataOutput</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX data output.
/// </summary>
abstract public class RetailCDXDataOutput
{
    RetailCDXChangeRefTable2 ref2;
    RetailCDXChangeRefTable2 ref;
    RetailCDXDataSyncContext ctContext;

    str workDir;
    RetailCDXFileSize fileSize;  // not used anymore.

    int rowsAffected; // not used anymore

    System.Threading.Thread currentThread;
    System.Globalization.CultureInfo currentCulture;

    DataAreaId singleTargetLE;

    RetailCDXChangeRefTable3 deleteRef;
    container deleteRefTableFieldID;

    str deleteTargetTableName;
    TableId deleteSourceTableID;
    TableName deleteAXTableName; //AX Source table / Staging table
    Map deleteSourceTableId2subJobIdMap;  // not used anymore.
    RetailConnSubJobId retailConnSubJobId;

    container deletePKTarget;
    container deletePKTargetType;

    date lowerDate, upperDate;
    utcDateTime lowerDateTime, upperDateTime;

    private RetailCDXDownloadSubjobSourceContext subjobContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins the session for data sync.
    /// </summary>
    public void beginSession()
    {
        RetailCDXDataGroup dataGroup;
        System.Globalization.CultureInfo culture;

        str workDirBase = System.IO.Path::GetTempPath();
        str workDirName = System.IO.Path::GetRandomFileName();
        workDir = System.IO.Path::Combine(workDirBase, workDirName);

        if (!System.IO.Directory::Exists(workDir))
        {
            System.IO.Directory::CreateDirectory(workDir);
        }

        select firstOnly ForceLocale
            from dataGroup
            where dataGroup.RecId == ctContext.paramDataGroupRecID();

        currentThread = System.Threading.Thread::get_CurrentThread();
        currentCulture = currentThread.get_CurrentCulture();

        if (dataGroup.ForceLocale)
        {
            culture = new System.Globalization.CultureInfo(dataGroup.ForceLocale);
            currentThread.set_CurrentCulture(culture);
        }
        else
        {
            currentThread.set_CurrentCulture(System.Globalization.CultureInfo::get_InvariantCulture());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans the session.
    /// </summary>
    public void cleanUp()
    {
        if (System.IO.Directory::Exists(workDir))
        {
            System.IO.Directory::Delete(workDir, true);
        }

        if (currentThread && currentCulture)
        {
            currentThread.set_CurrentCulture(currentCulture);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the session.
    /// </summary>
    public void endSession()
    {
        currentThread.set_CurrentCulture(currentCulture);

        if (System.IO.Directory::Exists(workDir))
        {
            System.IO.Directory::Delete(workDir, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeleteRefTableFieldID</Name>
				<Source><![CDATA[
    private void initDeleteRefTableFieldID()
    {
        deleteRefTableFieldID = conNull();

        deleteRefTableFieldID = [
            fieldNum(RetailCDXChangeRefTable3, PK1),
            fieldNum(RetailCDXChangeRefTable3, PK2),
            fieldNum(RetailCDXChangeRefTable3, PK3),
            fieldNum(RetailCDXChangeRefTable3, PK4),
            fieldNum(RetailCDXChangeRefTable3, PK5),
            fieldNum(RetailCDXChangeRefTable3, PK6),
            fieldNum(RetailCDXChangeRefTable3, PK7),
            fieldNum(RetailCDXChangeRefTable3, PK8),
            fieldNum(RetailCDXChangeRefTable3, PK9),
            fieldNum(RetailCDXChangeRefTable3, PK10),
            fieldNum(RetailCDXChangeRefTable3, PK11),
            fieldNum(RetailCDXChangeRefTable3, PK12),
            fieldNum(RetailCDXChangeRefTable3, PK13),
            fieldNum(RetailCDXChangeRefTable3, PK14),
            fieldNum(RetailCDXChangeRefTable3, PK15)
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetTableInfoForDelete</Name>
				<Source><![CDATA[
    private void initTargetTableInfoForDelete(RetailConnSubJobId _subjobID)
    {
        RetailConnSchedulerSubjobTable subjob;

        deletePKTarget = conNull();
        deletePKTargetType = conNull();

        select firstOnly AXTableName, ChannelTableName
            from subjob
            where subjob.subJobId == _subjobID;

        deleteTargetTableName = subjob.ChannelTableName;
        deleteAXTableName = subjob.AXTableName;

        this.retailConnSubJobId = _subjobId;

        TableName tableName = subjob.AXTableName;
        TableId tid = tableName2id(tableName);

        boolean isTempTable = false;

        if (RetailConnReplicationUtilities::isTableTempDB(tableName))
        {
            isTempTable = true;
            tid = RetailConnReplicationUtilities::getTableIDFromRelation(tableName, RetailCDXConstants::RelTableRelationName);
            tableName = tableId2name(tid);
        }

        container pkAX = RetailConnReplicationUtilities::getAXPrimaryIndexColumnNames(tableName);

        // if RecId is part of PK of source table, use RECID as target table PK
        if (conFind(pkAX, 'RecId') > 0)
        {
            deletePKTarget = ['RECID'];
            deletePKTargetType = [Types::Int64];
            return;
        }

        // source table is TempDB: find out target table PK through field mapping of the TempDB table
        //   requirement (source TempDB table PK is the same as main counterpart table PK)
        // source table is regular: find out target table PK through field mapping
        if (isTempTable)
        {
            pkAX = RetailConnReplicationUtilities::getAXPrimaryIndexColumnNames(subjob.AXTableName);
        }

        for (int i = 1; i <= conLen(pkAX); ++i)
        {
            RetailConnSchedulerSubjobFieldList fieldMapping;

            FieldName fieldName = conPeek(pkAX, i);

            if (fieldName == 'DataAreaId')
            {
                deletePKTarget += 'DATAAREAID';
            }
            else
            {
                select firstOnly toFieldName from fieldMapping
                where fieldMapping.subjobId == _subjobID && fieldMapping.fromFieldName == fieldName;

                if (!fieldMapping.RecId)
                {
                    throw error(strFmt("@Retail:RetailCdxPrimaryKeyMisMatchException", fieldName, _subjobID));
                }

                deletePKTarget += fieldMapping.toFieldName;
            }

            DictField df = new DictField(tid, fieldName2id(tid, fieldName));

            Types fieldType = df.baseType();

            if (fieldType != Types::Integer
             && fieldType != Types::Int64
             && fieldType != Types::Enum
             && fieldType != Types::String
             && fieldType != Types::Real
             && fieldType != Types::Date
             && fieldType != Types::UtcDateTime
             && fieldType != Types::Guid)
            {
                // Primary key type is not supported for synchronizing deletion: %1.%2
                throw Global::error(strFmt("@REX4040011", tableName, fieldMapping.fromFieldName));
            }

            deletePKTargetType += fieldType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteSourceTableId</Name>
				<Source><![CDATA[
    private TableId getDeleteSourceTableId()
    {
        TableId tid = tableName2id(this.subjobContext.paramAXSourceTableName());
        if (this.subjobContext.paramIsAXTableTempDB())
        {
            tid = RetailConnReplicationUtilities::getTableIDFromRelation(this.subjobContext.paramAXSourceTableName(), RetailCDXConstants::RelTableRelationName);
        }

        return tid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        lowerDate = dateNull();
        upperDate = maxDate();
        lowerDateTime = DateTimeUtil::minValue();
        upperDateTime = DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataSyncContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of data sync context.
    /// </summary>
    /// <param name="_ctContext">
    /// The value <c>RetailCDXDataSyncContext</c>.
    /// </param>
    /// <returns>
    /// Current data sync context.
    /// </returns>
    public RetailCDXDataSyncContext paramDataSyncContext(RetailCDXDataSyncContext _ctContext)
    {
        ctContext = _ctContext;

        ref2 = ctContext.openChangeRefTable2();
        ref.linkPhysicalTableInstance(ref2);

        return ctContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubjobContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the subjob download source context object.
    /// </summary>
    /// <param name = "_subjobContext">The subjob download source context.</param>
    /// <returns>The subjob download source context.</returns>
    internal RetailCDXDownloadSubjobSourceContext paramSubjobContext(RetailCDXDownloadSubjobSourceContext _subjobContext = subjobContext)
    {
        subjobContext = _subjobContext;

        return subjobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSingleTargetLE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of target legal entity.
    /// </summary>
    /// <param name="_singleTargetLE">
    /// Legal entity.
    /// </param>
    /// <returns>
    /// Target legal entity.
    /// </returns>
    public DataAreaId paramSingleTargetLE(DataAreaId _singleTargetLE)
    {
        singleTargetLE = _singleTargetLE;
        return singleTargetLE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the delete operations.
    /// </summary>
    public void processDelete()
    {
        this.initDeleteRefTableFieldID();

        RetailCDXChangeRefTable3 deleteRef0 = ctContext.openChangeRefTable3();

        RetailCDXChangeRefTable3 deleteRef1;
        deleteRef1.linkPhysicalTableInstance(deleteRef0);
        deleteRef.linkPhysicalTableInstance(deleteRef0);

        deleteSourceTableID = this.getDeleteSourceTableId();
        select firstonly RecId from deleteRef1
            where deleteRef1.RefTableID == deleteSourceTableID;

        if (deleteRef1.RecId)
        {
            this.initTargetTableInfoForDelete(this.subjobContext.paramSubjobId());
            this.processDeleteSubjob();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeleteSubjob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the deletion of subjob.
    /// </summary>
    abstract protected void processDeleteSubjob()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentSessions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current sessions.
    /// </summary>
    /// <param name = "_currentSessions">The current sessions.</param>
    abstract internal void setCurrentSessions(Set _currentSessions)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the session.
    /// </summary>
    public void validate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get data package file checksum.
    /// </summary>
    /// <returns>Data package file checksum</returns> 
    [SysObsolete('Checksum is now set in the context session.', true, 12\08\2021)]
    public RetailCDXCheckSum getCheckSum()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>