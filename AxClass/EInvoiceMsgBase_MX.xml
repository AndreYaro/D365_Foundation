<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceMsgBase_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceMsgBase_MX</c> represents the message to be send by a <c>EInvoiceMsgTransport_WebService_MX</c> object.
/// </summary>
class EInvoiceMsgBase_MX
{
    EInvoiceCFDIMessageType_MX  messageType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>EInvoiceMsgBase_MX</c> object.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends a list of electronic invoices to the web service.
    /// </summary>
    /// <param name="_documentList">A <c>EInvoiceJour_MX</c> with the documents to be sent.</param>
    public void send(EInvoiceJour_MX _documentList)
    {
        setPrefix(enum2str(messageType));

        EInvoiceMsgTransport_WebService_MX  transport = this.getTransport();

        str tableName, documentId;

        while(_documentList.RecId)
        {
            EInvoiceCFDIDocumentDataContract eInvoiceCFDIDataContract = new EInvoiceCFDIDocumentDataContract();

            this.setDocumentIdAndTableNameInDataContract(_documentList.RefTableId, _documentList.RefRecId, eInvoiceCFDIDataContract);
            tableName = eInvoiceCFDIDataContract.parmTableName();
            documentId = eInvoiceCFDIDataContract.parmDocumentId();

            if (this.validateAndUpdate(_documentList))
            {
                EInvoiceCFDIInstrumentationLogger eInvoiceCFDILogger = EInvoiceCFDIInstrumentationLogger::createLogger(classStr(EInvoiceMsgBase_MX));
                using (SysInstrumentationActivityContext processEInvoiceCFDIContext = eInvoiceCFDILogger.eInvoiceCFDIActivity().processEInvoiceCFDIContext(tableName, _documentList.RefRecId, _documentList.XMLDoc))
                {
                    try
                    { 
                        EInvoiceMsgStringStream_MX returnStream = transport.send(_documentList.XMLDoc, _documentList.CFDIMessageType, _documentList.CFDIDocType);

                        EInvoiceDocState_MX state = this.getState(_documentList);
                        state.messageSent(returnStream);

                        if (returnStream)
                        {
                            eInvoiceCFDILogger.logResponseSize(processEInvoiceCFDIContext, returnStream.toString());
                        }
                    }
                    catch (Exception::CLRError)
                    {
                        info(strFmt("@MexicoCFDI:SendingXMLError", documentId, tableName));
                        throw ;
                    }
                           
                }
            }
            next _documentList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransport</Name>
				<Source><![CDATA[
    protected EInvoiceMsgTransport_WebService_MX getTransport()
    {
        return EInvoiceMsgTransport_WebService_MX::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    protected EInvoiceDocState_MX getState(EInvoiceJour_MX _eInvoiceJour)
    {
        return EInvoiceDocState_MX::construct(_eInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set CFDI message type.
    /// </summary>
    /// <param name="_messageType">A <c>EInvoiceCFDIMessageType_MX</c> message type of the documents.</param>
    /// <returns>CFDI message type</returns>
    public EInvoiceCFDIMessageType_MX parmMessageType(EInvoiceCFDIMessageType_MX _messageType = messageType)
    {
        messageType = _messageType;
        return messageType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdate</Name>
				<Source><![CDATA[
    private boolean validateAndUpdate(EInvoiceJour_MX _eInvJourForCheck)
    {
        boolean ret;

        if (_eInvJourForCheck.cfdiDocType != CFDIDocType_MX::AdvanceReverse)
        {
            ret = true;
        }
        else
        {
            if (_eInvJourForCheck.CFDIMessageType == EInvoiceCFDIMessageType_MX::Cancel
                || _eInvJourForCheck.CFDIMessageType == EInvoiceCFDIMessageType_MX::CancelRequest)
            {
                ret = true;
            }
            else
            {
                CustSettlement custSettlement;
                EInvoiceJourBaseMap_MX eInvoiceJour;

                select firstonly custSettlement
                where custSettlement.RecId == _eInvJourForCheck.RefRecId
                    && custSettlement.TableId == _eInvJourForCheck.RefTableId;

                CustTrans settledInvoiceCustTrans = CustTrans::findByCompany(custSettlement.OffsetCompany, custSettlement.OffsetRecid);

                if (settledInvoiceCustTrans)
                {
                    changecompany(settledInvoiceCustTrans.company())
                    {
                        Common custProjInvoiceJour = settledInvoiceCustTrans.custInvoiceJour_RU();

                        if (!custProjInvoiceJour)
                        {
                            custProjInvoiceJour = settledInvoiceCustTrans.projInvoiceJour_MX();
                        }

                        if (custProjInvoiceJour)
                        {
                            eInvoiceJour = EInvoiceJourBaseMap_MX::construct(custProjInvoiceJour);
                        }
                    }
                }

                if (eInvoiceJour && eInvoiceJour.eInvoiceUUID())
                {
                    CustTrans paymentCustTrans = CustTrans::findByCompany(custSettlement.TransCompany, custSettlement.TransRecId);

                    ttsbegin;
                    _eInvJourForCheck.selectForUpdate(true);
                    [_eInvJourForCheck.xmlDoc, _eInvJourForCheck.cfdiOriginalString] =
                    EPaymentPost_MX::construct().getXMLDataCon(paymentCustTrans,
                                                               CFDIDocType_MX::AdvanceReverse,
                                                               custSettlement);
                    _eInvJourForCheck.update();
                    ttscommit;

                    ret = true;
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a message object based on a given message type.
    /// </summary>
    /// <returns>An <c>EInvoiceMsgBase_MX</c> object.</returns>
    public static EInvoiceMsgBase_MX construct()
    {
        return new EInvoiceMsgBase_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentIdAndTableNameInDataContract</Name>
				<Source><![CDATA[
    private void setDocumentIdAndTableNameInDataContract(RefTableId _refTableId, RefRecId _refRecId, EInvoiceCFDIDocumentDataContract _eInvoiceCFDIDataContract)
    {
        str documentId, tableName;

        switch (_refTableId)
        {
            case tableNum(CustInvoiceJour) :
                documentId = CustInvoiceJour::findRecId(_refRecId).InvoiceId;
                tableName = tablePName(CustInvoiceJour);
                break;

            case tableNum(ProjInvoiceJour) :
                documentId = ProjInvoiceJour::findRecId(_refRecId).ProjInvoiceId;
                tableName = tablePName(ProjInvoiceJour);
                break;

            case tableNum(RetailStatementJour) :
                documentId = RetailStatementJour::findRecId(_refRecId).statementId;
                tableName = tablePName(RetailStatementJour);
                break;

            case tableNum(RetailEInvoiceAggregatedStatement_MX) :
                documentId = RetailEInvoiceAggregatedStatement_MX::findRecId(_refRecId).AggregatedStatementId;
                tableName = tablePName(RetailEInvoiceAggregatedStatement_MX);
                break;

            case tableNum(CustTrans) :
                documentId = CustTrans::find(_refRecId).Voucher;
                tableName = tablePName(CustTrans);
                break;

            case tableNum(CustSettlement) :
                documentId = CustSettlement::find(_refRecId).OffsetTransVoucher;
                tableName = tablePName(CustSettlement);
                break;

            case tableNum(CustPackingSlipJour) :
                documentId = CustPackingSlipJour::findRecId(_refRecId).PackingSlipId;
                tableName = tablePName(CustPackingSlipJour);
                break;

            case tableNum(InventTransferJour) :
                documentId = InventTransferJour::findRecId(_refRecId).TransferId;
                tableName = tablePName(InventTransferJour);
                break;

            default:
                break;
        }

        _eInvoiceCFDIDataContract.parmDocumentId(documentId);
        _eInvoiceCFDIDataContract.parmTableName(tableName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>