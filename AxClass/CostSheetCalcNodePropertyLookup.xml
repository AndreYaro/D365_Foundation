<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetCalcNodePropertyLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostSheetCalcNodePropertyLookup</c> class allows for fetching properties of indirect cost codes directly, without loading the costing sheet.
/// </summary>
class CostSheetCalcNodePropertyLookup
{
    CostSheetNodeCalculation    node;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAcctIndirectAbsorption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect absorption account of the calculation node.
    /// </summary>
    /// <returns>
    /// The indirect absorption account value.
    /// </returns>
    public LedgerDimensionDefaultAccount getAcctIndirectAbsorption()
    {
        return node.getAcctIndirectAbsorption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension of the calculation node.
    /// </summary>
    /// <returns>
    /// The default dimension value.
    /// </returns>
    public DimensionDefault getDefaultDimension()
    {
        return node.getDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the calculation node.
    /// </summary>
    /// <returns>
    /// The description string.
    /// </returns>
    public Description getDescription()
    {
        return node.getDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables in the current instance of the
    /// <c>CostSheetCalcNodePropertyLookup</c> class.
    /// </summary>
    /// <param name="_priceType">
    /// The price type that corresponds to the indirect cost code.
    /// </param>
    /// <param name="_nodeCode">
    /// The indirect cost code.
    /// </param>
    /// <remarks>
    /// The <c>CostSheetCalcNodePropertyLookup</c> class is intended to fetch properties of calculation
    /// nodes only.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The indirect cost node either does not exist or it has a non-calculation node type.
    /// </exception>
    protected void init(CostPriceType _priceType, CostSheetNodeCode _nodeCode)
    {
        CostSheetId         sheetId             = CostSheetTable::defaultCostSheetTable().SheetId;
        CostSheetNodeTable  costSheetNodeTable  = this.findNodeTable(sheetId, _priceType, _nodeCode);
        CostSheetNode       costSheetNode;

        if (costSheetNodeTable.RecId != 0)
        {
            costSheetNode = CostSheetNode::construct(costSheetNodeTable, 0, CostSheetModeStrategyNodeLookup::construct());
        }

        this.checkNode(costSheetNode, _nodeCode);

        node = costSheetNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initByNodeName</Name>
				<Source><![CDATA[
    private void initByNodeName(CostSheetNodeCode _nodeCode)
    {
        CostSheetId         sheetId             = CostSheetTable::defaultCostSheetTable().SheetId;
        CostSheetNodeTable  costSheetNodeTable  = this.findNodeTable(sheetId, CostPriceType::COGM, _nodeCode);
        CostSheetNode       costSheetNode;

        if (costSheetNodeTable.RecId == 0)
        {
            costSheetNodeTable  = this.findNodeTable(sheetId, CostPriceType::Purchase, _nodeCode);
        }

        if (costSheetNodeTable.RecId != 0)
        {
            costSheetNode = CostSheetNode::construct(costSheetNodeTable, 0, CostSheetModeStrategyNodeLookup::construct());
        }

        this.checkNode(costSheetNode, _nodeCode);

        node = costSheetNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostSheetCalcNodePropertyLookup construct()
    {
        return new CostSheetCalcNodePropertyLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CostSheetCalcNodePropertyLookup</c> class.
    /// </summary>
    /// <param name="_priceType">
    /// The price type that corresponds to the indirect cost code.
    /// </param>
    /// <param name="_nodeCode">
    /// The indirect cost code.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CostSheetCalcNodePropertyLookup</c> class.
    /// </returns>
    public static CostSheetCalcNodePropertyLookup newParameters(
        CostPriceType       _priceType,
        CostSheetNodeCode   _nodeCode)
    {
        CostSheetCalcNodePropertyLookup propertyLookup = CostSheetCalcNodePropertyLookup::construct();
        propertyLookup.init(_priceType, _nodeCode);

        return propertyLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CostSheetCalcNodePropertyLookup</c> class.
    /// </summary>
    /// <param name="_nodeCode">
    /// The indirect cost code.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CostSheetCalcNodePropertyLookup</c> class.
    /// </returns>
    public static CostSheetCalcNodePropertyLookup newByNodeName(CostSheetNodeCode _nodeCode)
    {
        CostSheetCalcNodePropertyLookup propertyLookup = CostSheetCalcNodePropertyLookup::construct();
        propertyLookup.initByNodeName(_nodeCode);

        return propertyLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodeTable</Name>
				<Source><![CDATA[
    private CostSheetNodeTable findNodeTable(CostSheetId _sheetId, CostPriceType _priceType, CostSheetNodeCode _nodeCode)
    {
        CostSheetNodeTable costSheetNodeTable;

        select firstonly costSheetNodeTable
            where costSheetNodeTable.SheetId == _sheetId
               && costSheetNodeTable.Code == _nodeCode
               && costSheetNodeTable.PriceType == _priceType;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNode</Name>
				<Source><![CDATA[
    private void checkNode(CostSheetNode _costSheetNode, CostSheetNodeCode _nodeCode)
    {
        if (_costSheetNode == null)
        {
            throw error(strFmt("@SYS24602", "@SYS122036", _nodeCode));
        }

        if (!(_costSheetNode is CostSheetNodeCalculation))
        {
            throw error("@SCM:NodeHasNonCalculationNodeType");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>