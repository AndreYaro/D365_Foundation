<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterCertificateValidationDelegate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

/// <summary>
/// <c>CashRegisterCertificateValidationDelegate_W</c> is used to process mistakes
/// of validation for self signed certififcate.
/// </summary>
public class CashRegisterCertificateValidationDelegate_W
{
    private str trustedThumbprint;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new <c>CashRegisterCertificateValidationDelegate_W</c> object.
    /// </summary>
    /// <param name="_thumbprint">
    /// Thumbprint of opponent certififcate, which is needed to indicate correct opponent.
    /// </param>
    protected void new(str _thumbprint)
    {
        trustedThumbprint = _thumbprint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverCertificateValidationCallBack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is used as callback for certificates validation as <c>System.Net.HttpWebRequest.ServerCertificateValidationCallback</c>.
    /// </summary>
    /// <returns>True if certificate is valid, otherwise false.</returns>
    public boolean serverCertificateValidationCallBack(System.Object _sender,
            System.Security.Cryptography.X509Certificates.X509Certificate _certificate,
            System.Security.Cryptography.X509Certificates.X509Chain _chain,
            System.Net.Security.SslPolicyErrors _sslPolicyErrors)
    {
        X509Certificate2 cert = new X509Certificate2(_certificate);

        boolean noErrors = true;
        // If the certificate is a valid, signed certificate, return true.
        if (_sslPolicyErrors != System.Net.Security.SslPolicyErrors::None)
        {
            noErrors = false;
            // Thumbprint of trusted certififcate isn't specified or
            // income certificate has wrong thumbprint
            if (trustedThumbprint
                && (cert.Thumbprint.Equals(trustedThumbprint, System.StringComparison::OrdinalIgnoreCase)))
            {
                // If there are errors in the certificate chain, look at each error to determine the cause.
                if ((_sslPolicyErrors & System.Net.Security.SslPolicyErrors::RemoteCertificateChainErrors) != 0)
                {
                    // If there are only untrusted root errors for self-signed certificates in the certificate chain
                    // callback will return true, because these certificates are valid
                    // for default Exchange server installations.
                    // In all other cases, return false.
                    noErrors = true;
                    if (_chain != null && _chain.ChainStatus != null)
                    {
                        System.Security.Cryptography.X509Certificates.X509ChainStatus status;
                        var chainStatuses = _chain.ChainStatus;
                
                        int statusIndex = 0;

                        while (noErrors && statusIndex < chainStatuses.get_Length())
                        {
                            status = chainStatuses.GetValue(statusIndex); 

                            // Self-signed certificates with an untrusted root are valid.
                            if (status.Status != System.Security.Cryptography.X509Certificates.X509ChainStatusFlags::UntrustedRoot 
                                && status.Status != System.Security.Cryptography.X509Certificates.X509ChainStatusFlags::NoError)
                            {
                                // If there are any other errors in the certificate chain, the certificate is invalid,
                                // so the method returns false.
                                noErrors = false;
                            }

                            statusIndex++;
                        }
                    }
                }
            }
        }
        
        return noErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new <c>CashRegisterCertificateValidationDelegate_W</c> object.
    /// </summary>
    /// <param name="_thumbprint">
    /// Thumbprint of opponent certififcate, which is needed to indicate correct opponent.
    /// </param>
    /// <returns>
    /// New <c>CashRegisterCertificateValidationDelegate_W</c>.
    /// </returns>
    public static CashRegisterCertificateValidationDelegate_W construct(str _thumbprint)
    {
        CashRegisterCertificateValidationDelegate_W certificateValidation
             = new CashRegisterCertificateValidationDelegate_W(_thumbprint);

        return certificateValidation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>