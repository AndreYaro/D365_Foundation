<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceInstrumentationActivities
{
    private const str ActivityNamePrefix = 'InventoryVisibility.';
    private InventInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(InventInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceInstrumentationActivities newFromLogger(InventInstrumentationLogger _logger)
    {
        return new InventInventoryDataServiceInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostInventSums</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostInventSums()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostInventSums');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostOnhandChangeSchedule</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostOnhandChangeSchedule()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostOnhandChangeSchedule');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAdjustment</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAdjustment()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAdjustment');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostInventJournalTransStatus</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostInventJournalTransStatus()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostInventJournalTransStatus');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_QueryOnHand</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_QueryOnHand()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'QueryOnHand');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_WaitAllInsertingFinished</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_WaitAllInsertingFinished()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'WaitAllInsertingFinished');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostDeletedInventSumToInventoryService</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostDeletedInventSumToInventoryService()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostDeletedInventSumToInventoryService');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostDeletedWHSInventReserveToInventoryService</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostDeletedWHSInventReserveToInventoryService()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostDeletedWHSInventReserveToInventoryService');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostResyncJobToInventoryService</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostResyncJobToInventoryService()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostResyncJobToInventoryService');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostOhcsToInventoryService</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostOhcsToInventoryService()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostOhcsToInventoryService');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_InsertQueueDataToTempTable</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_InsertQueueDataToTempTable(boolean _skipQueueLock, boolean _lockExistInventSum, boolean _lockExistReservation, boolean _lockExistWHS, boolean _lockExistSoftReserve)
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'InsertQueueDataToTempTable');
        activity.addCustomProperty('SkipQueueLock', any2Str(_skipQueueLock));
        activity.addCustomProperty('LockExistInventSum', any2Str(_lockExistInventSum));
        activity.addCustomProperty('LockExistReservation', any2Str(_lockExistReservation));
        activity.addCustomProperty('LockExistWHS', any2Str(_lockExistWHS));
        activity.addCustomProperty('LockExistSoftReserve', any2Str(_lockExistSoftReserve));
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_RunOnHandDiagnostic</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_RunOnHandDiagnostic(boolean _onlyCheckPreviousMismatchedData, boolean _onlyCheckWHSItems, boolean _fixData)
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'RunOnHandDiagnostic');
        activity.addCustomProperty('OnlyCheckPreviousMismatchedData', any2Str(_onlyCheckPreviousMismatchedData));
        activity.addCustomProperty('OnlyCheckWHSItems', any2Str(_onlyCheckWHSItems));
        activity.addCustomProperty('FixData', any2Str(_fixData));
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_CleanReservationIds</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_CleanReservationIds(DataAreaId _dataAreaId, TableId _sourceTableId, int _taskCount)
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'CleanReservationIds');
        activity.addCustomProperty('Company', _dataAreaId);
        activity.addCustomProperty('SourceTable', tableId2Name(_sourceTableId));
        activity.addCustomProperty('TaskCount', int642Str(_taskCount));
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_CleanReservationIdsPerThread</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_CleanReservationIdsPerThread(TableId _sourceTableId, RecId _fromRecId, RecId _toRecId)
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'CleanReservationIdsPerThread');        
        activity.addCustomProperty('SourceTable', tableId2Name(_sourceTableId));
        activity.addCustomProperty('FromRecId', int642Str(_fromRecId));
        activity.addCustomProperty('ToRecId', int642Str(_toRecId));
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostWHSInventReserves</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostWHSInventReserves()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostWHSInventReserves');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAllInventSums</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAllInventSums()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAllInventSums');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAllWHS</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAllWHS()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAllWHS');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAllSoftReserve</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAllSoftReserve()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAllSoftReserve');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAllInventJournalTransStatus</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAllInventJournalTransStatus()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAllInventJournalTransStatus');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostAllAdjustment</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostAllAdjustment()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'PostAllAdjustment');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_RunOnHandDiagnosticPerBatch</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_RunOnHandDiagnosticPerBatch()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'RunOnHandDiagnosticPerBatch');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_PostRecords</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_PostRecords(str _activityName)
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + _activityName);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostEventsInfo</Name>
				<Source><![CDATA[
    public void logPostEventsInfo(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '')
    {
        _activityContext.getActivity().addCustomProperty('FromRecId', int642Str(_fromRecId));
        _activityContext.getActivity().addCustomProperty('ToRecId', int642Str(_toRecId));
        _activityContext.getActivity().addCustomProperty('CorrelationId', _correlationId);
        _activityContext.getActivity().addCustomProperty('PostSuccessed', any2Str(_postSuccessed));
        _activityContext.getActivity().addCustomProperty('FailedRecIdsAndErrorMessages', _failedRecIdsAndErrorMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostEventsInfoV2</Name>
				<Source><![CDATA[
    public void logPostEventsInfoV2(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '',
        int                                 _successCnt = 0,
        int                                 _failCnt = 0)
    {
        _activityContext.getActivity().addCustomProperty('FromRecId', int642Str(_fromRecId));
        _activityContext.getActivity().addCustomProperty('ToRecId', int642Str(_toRecId));
        _activityContext.getActivity().addCustomProperty('CorrelationId', _correlationId);
        _activityContext.getActivity().addCustomProperty('PostSuccessed', any2Str(_postSuccessed));
        _activityContext.getActivity().addCustomProperty('FailedRecIdsAndErrorMessages', _failedRecIdsAndErrorMessages);
        _activityContext.getActivity().addCustomProperty('SuccessCnt', int2Str(_successCnt));
        _activityContext.getActivity().addCustomProperty('FailCnt', int2Str(_failCnt));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostInventSumsInfo</Name>
				<Source><![CDATA[
    public void logPostInventSumsInfo(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '')
    {
        this.logPostEventsInfo(_activityContext, _fromRecId, _toRecId, _postSuccessed, _correlationId, _failedRecIdsAndErrorMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostSoftReserveEventInfo</Name>
				<Source><![CDATA[
    public void logPostSoftReserveEventInfo(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '')
    {
        this.logPostEventsInfo(_activityContext, _fromRecId, _toRecId, _postSuccessed, _correlationId, _failedRecIdsAndErrorMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostAdjustmentEventInfo</Name>
				<Source><![CDATA[
    public void logPostAdjustmentEventInfo(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '')
    {
        this.logPostEventsInfo(_activityContext, _fromRecId, _toRecId, _postSuccessed, _correlationId, _failedRecIdsAndErrorMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostOnhandChangeScheduleEventInfo</Name>
				<Source><![CDATA[
    public void logPostOnhandChangeScheduleEventInfo(
        SysInstrumentationActivityContext   _activityContext,
        RecId                               _fromRecId,
        RecId                               _toRecId,
        NoYes                               _postSuccessed = NoYes::Yes,
        str                                 _correlationId = '',
        str                                 _failedRecIdsAndErrorMessages = '')
    {
        this.logPostEventsInfo(_activityContext, _fromRecId, _toRecId, _postSuccessed, _correlationId, _failedRecIdsAndErrorMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOnHandDiagnosticPerBatchInfo</Name>
				<Source><![CDATA[
    public void logOnHandDiagnosticPerBatchInfo(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _batchNo,
        utcdatetime                         _startTime,
        utcdatetime                         _endTime,
        int                                 _beforeCount,
        int                                 _afterCount)
    {
        _activityContext.getActivity().addCustomProperty('BatchNo', int642Str(_batchNo));
        _activityContext.getActivity().addCustomProperty('StartTime', datetime2Str(_startTime));
        _activityContext.getActivity().addCustomProperty('EndTime', datetime2Str(_endTime));
        _activityContext.getActivity().addCustomProperty('BeforeCount', int642Str(_beforeCount));
        _activityContext.getActivity().addCustomProperty('AfterCount', int642Str(_afterCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPostAllInventSumsInfo</Name>
				<Source><![CDATA[
    public void logPostAllInventSumsInfo(SysInstrumentationActivityContext _activityContext, int _taskCount)
    {
        _activityContext.addCustomProperty('TaskCount', int642Str(_taskCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext_CleanProcessedQueueData</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext getActivityContext_CleanProcessedQueueData()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + 'CleanProcessedQueueData');
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>