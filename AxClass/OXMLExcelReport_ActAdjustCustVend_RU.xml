<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_ActAdjustCustVend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Act of adjustment to excel
/// </summary>
class OXMLExcelReport_ActAdjustCustVend_RU extends OXMLExcelReport_LedgerSheet_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    CustVendTable           custVendTable;
    NoYes                   showCovenanteePart;

    Map                     mapHeaderFirstLineBuff;
    Map                     mapBodyData;

    int                     pageNo;

    #define.reportHeader('REPORTHEADER')
    #define.resume('RESUME')
    #define.officials('OFFICIALS')
    #define.pageFooter('PAGEFOOTER')

    #define.firstMergeColumnNum(firstColumnNum + 2)
    #define.documentColNum(firstColumnNum + 2)
    #define.amountDocColNum(#documentColNum + 1)
    #define.amountDebitColNum(#amountDocColNum + 1)
    #define.amountCreditColNum(#amountDebitColNum + 1)
    #define.amountDocCovenanteeColNum(#amountCreditColNum + 1)
    #define.amountDebitCovenanteeColNum(#amountDocCovenanteeColNum + 1)
    #define.amountCreditCovenanteeColNum(#amountDebitCovenanteeColNum + 1)

    #define.reportLineTypeColumnNum(firstColumnNum - 1)
    #define.partitionTypeColumnNum(#reportLineTypeColumnNum - 1)

    #define.headerType_HeaderFirstLine("HeaderFL")

    #define.bodyType_PartitionTitle("PartT")
    #define.bodyType_LargeBold("LBold")
    #define.bodyType_ItalicBold("IBold")
    #define.bodyType_CovenanteeTitle("Covenantee")
    #define.bodyType_AgreementTitle("Agreement")
    #define.bodyType_Invoice("Invoice")
    #define.bodyType_ReportFooterTotals("rfTotals")
    #define.bodyType_CovenanteeReportFooterTitle("rfTitle")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.colName(2)
        #define.minHeight(13.50)

        real ret;

        switch (_bookmark)
        {
            case #bodyType_ReportFooterTotals:
            case #bodyType_LargeBold:
            case #bodyType_ItalicBold:
            case bodyType_Bold:
            case bodyType_Default:
            case #bodyType_Invoice:
            case #bodyType_CovenanteeTitle:
            case #bodyType_AgreementTitle:
            case #bodyType_PartitionTitle:
            case #bodyType_CovenanteeReportFooterTitle:
                //name is always third element in map(zero based), even if there's merged cells
                ret = max(document.getNamedRangeHeightWrapped(strFmt('%1_%2', _bookmark, #colName), mapBodyData.lookup(#colName)),
                          #minHeight);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>choiceBodySection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Chooses report section depending on current raw data
    /// </summary>
    /// <param name="_mapBuff">
    /// current raw data
    /// </param>
    /// <returns>
    /// section bookmark
    /// </returns>
    protected  Bookmark choiceBodySection(Map _mapBuff)
    {
        RActAdjustCVReportLineType   reportLineType;
        RActAdjustCVPartitionType    partitionType;
        Bookmark                     sectionName;

        reportLineType = _mapBuff.lookup(#reportLineTypeColumnNum);
        partitionType  = _mapBuff.lookup(#partitionTypeColumnNum);

        switch (partitionType)
        {
            case RActAdjustCVPartitionType::Covenantee :

                switch (reportLineType)
                {
                    case RActAdjustCVReportLineType::Caption      :
                        sectionName = #bodyType_CovenanteeTitle;
                        break;

                    case RActAdjustCVReportLineType::ReportFooter :
                        sectionName = #bodyType_CovenanteeReportFooterTitle;
                        break;

                    case RActAdjustCVReportLineType::ReportFooterTotals :
                        sectionName = #bodyType_ReportFooterTotals;
                        break;

                    default :
                        sectionName = #bodyType_LargeBold;
                }

                break;

            case RActAdjustCVPartitionType::Agreement :

                if (reportLineType == RActAdjustCVReportLineType::Caption)
                {
                    sectionName = #bodyType_AgreementTitle;
                }
                else
                {
                    sectionName = #bodyType_ItalicBold;
                }

                break;

            default :

                switch (reportLineType)
                {
                    case RActAdjustCVReportLineType::Caption :
                        sectionName = #bodyType_PartitionTitle;
                        break;

                    case RActAdjustCVReportLineType::Invoice :
                        sectionName = #bodyType_Invoice;
                        break;

                    case RActAdjustCVReportLineType::Totals  :
                        sectionName = bodyType_Bold;
                        break;

                    default :
                        sectionName = super(_mapBuff);
                }
        }

        return sectionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    private Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCovenanteePartData</Name>
				<Source><![CDATA[
    private Map copyCovenanteePartData(Map _mapBuff, int _srsCol, int _dstCol)
    {
        TempStr  sz;

        if (!_mapBuff.exists(_srsCol))
            throw error(error::wrongUseOfFunction(funcname()));

        sz = _mapBuff.lookup(_srsCol);

        _mapBuff.insert(_dstCol, sz);

        return _mapBuff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, 13);

        this.execute(#ReportHeader);

        this.printBody();

        this.printFooter();

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSectionPageHeaderFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds header first line columns into merged columns map
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected  void  createSectionPageHeaderFirstLine()
    {
        this.addValueInMapMergeBodyColumnInfo(#headerType_HeaderFirstLine, firstColumnNum, #documentColNum);
        this.addValueInMapMergeBodyColumnInfo(#headerType_HeaderFirstLine, #amountDocColNum, #amountCreditColNum);
        this.addValueInMapMergeBodyColumnInfo(#headerType_HeaderFirstLine, #amountDocCovenanteeColNum, #amountCreditCovenanteeColNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays document title
    /// </summary>
    /// <returns>
    /// document title
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TempStr documentTitle()
    {
        #define.leftInvertedCommas('«')
        #define.rightInvertedCommas('»')

        return  #leftInvertedCommas + reportCaption + #rightInvertedCommas;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRowIntoBuff_Next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetchs next raw data into map
    /// </summary>
    /// <returns>
    /// map filled with raw data
    /// </returns>
    protected Map fetchRowIntoBuff_Next()
    {
        RLedgerSheetEngine_ActAdjustCustVend localEngine = rLedgerSheetEngine;

        RActAdjustCVPartitionType   partitionType;
        RActAdjustCVReportLineType  reportLineType;
        Map                         map;

        map = super();

        if (map)
        {
            [partitionType, reportLineType] = localEngine.getItemType(fetchedItemIdx);
            map.insert(#reportLineTypeColumnNum, any2Str(reportLineType));
            map.insert(#partitionTypeColumnNum, any2Str(partitionType));

            if (showCovenanteePart)
            {
                this.copyCovenanteePartData(map, #amountDocColNum, #amountDocCovenanteeColNum);
                this.copyCovenanteePartData(map, #amountDebitColNum, #amountCreditCovenanteeColNum);
                this.copyCovenanteePartData(map, #amountCreditColNum, #amountDebitCovenanteeColNum);
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        Filename reportTitleloc;
        #define.backslashPostfix("\\")
        #define.slashPostfix('/')
        #define.greater('>')
        #define.colon(':')
        #define.lessthan('<')
        #define.question('?')
        #define.asteric('*')
        #define.doubleinverted('"')
        #define.pipe('|')
        #define.singleinverted("'")

        ;
        reportTitleloc = this.getReportTitle();
        reportTitleloc = strRem(reportTitleloc,#backslashPostfix);
        reportTitleloc = strRem(reportTitleloc,#slashPostfix);
        reportTitleloc = strRem(reportTitleloc,#greater);
        reportTitleloc = strRem(reportTitleloc,#colon);
        reportTitleloc = strRem(reportTitleloc,#lessthan);
        reportTitleloc = strRem(reportTitleloc,#question);
        reportTitleloc = strRem(reportTitleloc,#asteric);
        reportTitleloc = strRem(reportTitleloc,#doubleinverted);
        reportTitleloc = strRem(reportTitleloc,#pipe);
        reportTitleloc = strRem(reportTitleloc,#singleinverted);

        return reportTitleloc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// Postfix for a new file
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody(Bookmark _sectionName)
    {
        Map             mergedCellsInfo;
        MapEnumerator   me = mapBodyData.getEnumerator();
        int             lastMergedCol = -1;
        Struct          struct;

        if (mapMergeBodyColumnInfo.exists(_sectionName))
        {
            mergedCellsInfo = mapMergeBodyColumnInfo.lookup(_sectionName);
        }
        else
        {
            mergedCellsInfo = new Map(Types::String, Types::Class);
        }

        while (me.moveNext())
        {
            if (mergedCellsInfo.exists(me.currentKey()))
            {
                struct = mergedCellsInfo.lookup(me.currentKey());
                lastMergedCol = struct.value(lastMergeCol);

                this.insertValueToSection(strFmt('%1_%2', _sectionName, me.currentKey()), me.currentValue());
            }
            else
            {
                if (me.currentKey() <= lastMergedCol)
                {
                    if (me.currentKey() == lastMergedCol)
                    {
                        lastMergedCol = -1;
                    }
                    continue;
                }
                else
                {
                    this.insertValueToSection(strFmt('%1_%2', _sectionName, me.currentKey()), me.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills specified report section with data
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #reportHeader:
                this.fillReportHeader();
                break;
            case #headerType_HeaderFirstLine:
                this.fillHeaderFirstLine();
                break;
            case headerType_Default:
                this.fillHeader();
                break;
            case #resume:
                this.fillResume();
                break;
            case #officials:
                this.fillOfficials();
                break;
            case #pageFooter:
                this.fillPageFooter();
                break;
            default:
                this.fillBody(_bookmark);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    private void fillHeader()
    {
        MapEnumerator   me;
        Counter         cellCounter;

        me = mapHeaderBuff.getEnumerator();

        while (me.moveNext())
        {
            cellCounter++;
            this.insertValueToSection(strFmt('%1_%2', headerType_Default, cellCounter), me.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderFirstLine</Name>
				<Source><![CDATA[
    private void fillHeaderFirstLine()
    {
        Counter         cellCounter;
        Map             mergedCellsInfo = mapMergeBodyColumnInfo.lookup(#headerType_HeaderFirstLine);
        MapEnumerator   me = mapHeaderFirstLineBuff.getEnumerator();
        int             lastMergedCol = -1;
        Struct          struct;

        while (me.moveNext())
        {
            if (mergedCellsInfo.exists(me.currentKey()))
            {
                struct = mergedCellsInfo.lookup(me.currentKey());
                lastMergedCol = struct.value(lastMergeCol);

                cellCounter++;
                this.insertValueToSection(strFmt('%1_%2', #headerType_HeaderFirstLine, cellCounter), me.currentValue());
            }
            else
            {
                if (me.currentKey() <= lastMergedCol)
                {
                    if (me.currentKey() == lastMergedCol)
                    {
                        lastMergedCol = -1;
                    }
                    continue;
                }
                else
                {
                    cellCounter++;
                    this.insertValueToSection(strFmt('%1_%2', #headerType_HeaderFirstLine, cellCounter), me.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOfficials</Name>
				<Source><![CDATA[
    private void fillOfficials()
    {
        this.insertValueToSection('DirectorPosition', "@GLS100676");
        this.insertValueToSection('DirectorCompany', CompanyInfo::find().name());
        this.insertValueToSection('DirectorName', OfficialsTable_RU::findDirector().Name);

        this.insertValueToSection('DirectorPositionCovenantee', "@GLS100676");
        this.insertValueToSection('DirectorCovenantee', custVendTable.name());

        this.insertValueToSection('AccountantPosition', "@GLS100677");
        this.insertValueToSection('AccountantCompany', CompanyInfo::find().name());
        this.insertValueToSection('AccountantName', OfficialsTable_RU::findAccountant().Name);

        this.insertValueToSection('AccountantPositionCovenantee', "@GLS100677");
        this.insertValueToSection('AccountantCovenantee', custVendTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    private void fillPageFooter()
    {
        this.insertValueToSection('FooterTitle', this.documentTitle());
        this.insertValueToSection('PageNo', strfmt("@SYS24160", pageNo));
        this.insertValueToSection('Comment', this.getComment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        DataArea dataArea;
        TempStr currencyCode = this.getTitleCurencyCode();

        if (!currencyCode)
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }

        select firstOnly Timezone from dataArea
            where dataArea.id == curext();

        this.insertValueToSection('CompanyName', this.companyName());
        this.insertValueToSection('StartDate', DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.insertValueToSection('StartTime', DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), dataArea.timeZone));
        this.insertValueToSection('ReportTitle', this.getReportTitle());
        this.insertValueToSection('TitleCurrency', currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResume</Name>
				<Source><![CDATA[
    private void fillResume()
    {
        RLedgerSheetEngine_ActAdjustCustVend    localRLedgerSheetEngine = rLedgerSheetEngine;

        this.insertValueToSection('Resume_1', localRLedgerSheetEngine.txtReportFooterResume());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComment</Name>
				<Source><![CDATA[
    private TempStr getComment()
    {
        if (rLedgerSheetEngine.getCurrencyTypeBrief() == CurrencyTypeBrief_RU::Standard)
            return strfmt("@GLS110505", CompanyInfoHelper::standardCurrency());
        else
            return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTitleCurencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns currency code with title based on <c>rledgerSheetEngine</c>
    ///    currency type.
    /// </summary>
    /// <returns>
    ///    String That represents currency code with prefix.
    /// </returns>
    protected TempStr getTitleCurencyCode()
    {
        TempStr     sz;

        switch (rLedgerSheetEngine.getCurrencyTypeBrief())
        {
            case CurrencyTypeBrief_RU::Currency :
                sz = strfmt("@GLS105044", rLedgerSheetEngine.getCurrencyCode());
                break;

            case CurrencyTypeBrief_RU::Standard :
                sz = strfmt("@GLS110621", CompanyInfoHelper::standardCurrency());
        }

        return sz;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapHeaderFirstLineBuff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits mapHeaderFirstLineBuff map by company info
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initMapHeaderFirstLineBuff()
    {
        #define.emptyStr("")
        int     cx;

        mapHeaderFirstLineBuff = new Map(Types::Integer, Types::String);

        for (cx = firstColumnNum; cx < formListControl.getColumnCount(); cx++)
            mapHeaderFirstLineBuff.insert(cx, #emptyStr);

        mapHeaderFirstLineBuff.insert(#amountDocColNum, strfmt("@GLS110502", CompanyInfo::find().name()));
        mapHeaderFirstLineBuff.insert(#amountDocCovenanteeColNum, strfmt("@GLS110502", custVendTable.name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapMergeControlInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// inits merged columns map by report columns
    /// </summary>
    protected void initMapMergeControlInfo()
    {
        super();

        this.addValueInMapMergeBodyColumnInfo(#bodyType_CovenanteeTitle, #firstMergeColumnNum, #amountCreditCovenanteeColNum);
        this.addValueInMapMergeBodyColumnInfo(#bodyType_CovenanteeTitle, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_CovenanteeReportFooterTitle, #firstMergeColumnNum, #amountCreditCovenanteeColNum);
        this.addValueInMapMergeBodyColumnInfo(#bodyType_CovenanteeReportFooterTitle, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_LargeBold, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_AgreementTitle, #firstMergeColumnNum, #amountCreditCovenanteeColNum);
        this.addValueInMapMergeBodyColumnInfo(#bodyType_AgreementTitle, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_ItalicBold, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_PartitionTitle, #firstMergeColumnNum, #amountCreditCovenanteeColNum);
        this.addValueInMapMergeBodyColumnInfo(#bodyType_PartitionTitle, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(bodyType_Bold, firstColumnNum, firstColumnNum + 1);

        this.addValueInMapMergeBodyColumnInfo(#bodyType_ReportFooterTotals, firstColumnNum, firstColumnNum + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sections map by report sections
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(#bodyType_PartitionTitle, true);
        this.addSection(#bodyType_LargeBold, true);
        this.addSection(#bodyType_ItalicBold, true);
        this.addSection(#bodyType_CovenanteeTitle, true);
        this.addSection(#bodyType_AgreementTitle, true);
        this.addSection(#bodyType_Invoice, true);
        this.addSection(#bodyType_ReportFooterTotals, true);
        this.addSection(#bodyType_CovenanteeReportFooterTitle, true);
        this.addSection(bodyType_Bold, true);
        this.addSection(bodyType_Default, true);
        this.addSection(#reportHeader);
        this.addSection(#headerType_HeaderFirstLine);
        this.addSection(headerType_Default);
        this.addSection(#resume);
        this.addSection(#officials);
        this.addSection(#pageFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be created before executing section
    /// </summary>
    /// <param name="_sectionName">
    /// name of section
    /// </param>
    /// <param name="_row">
    /// total num of raws filled
    /// </param>
    /// <returns>
    /// true, if new page should be created, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage(Bookmark _sectionName, int _row)
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(_sectionName);

        if (readLastRowIntoBuffer && (_row >= (numLastRowBuffer - 1)))
        {
            requiredHeight += conPeek(mapSections.lookup(#resume), #posSectionHeight);
            requiredHeight += conPeek(mapSections.lookup(#officials), #posSectionHeight);
            requiredHeight += conPeek(mapSections.lookup(#pageFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numLastCol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines total number of report columns
    /// </summary>
    /// <returns>
    /// total number of report columns
    /// </returns>
    #define.Value3(3)
    protected int numLastCol()
    {
        return super() + #Value3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBody</Name>
				<Source><![CDATA[
    private void printBody()
    {
        Bookmark    sectionBodyName;
        int         row;

        pageNo = 1;

        this.printPageHeader();

        if (formListControl.getCount() == 0)
        {
            info("@SYS70894");
            return;
        }

        this.fetchRowIntoBuff_Start();

        mapBodyData = this.getBuffer(row);

        while (!this.isLastRow(row))
        {
            sectionBodyName = this.choiceBodySection(mapBodyData);

            if (this.mustCreateNewPage(sectionBodyName, row))
            {
                this.execute(#pageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                pageNo++;
                currentHeight = 0;
                this.printPageHeader();
            }

            this.execute(sectionBodyName);
            row++;

            mapBodyData = this.getBuffer(row);
        }

        if (this.isLastRow(row))
        {
            sectionBodyName = this.choiceBodySection(mapBodyData);

            if (this.mustCreateNewPage(sectionBodyName, row))
            {
                this.execute(#pageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.printPageHeader();
            }

            this.execute(sectionBodyName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFooter</Name>
				<Source><![CDATA[
    private void printFooter()
    {
        this.execute(#resume);

        this.execute(#officials);

        this.execute(#pageFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void printPageHeader()
    {
        this.execute(#headerType_HeaderFirstLine);

        if (showCovenanteePart)
        {
            this.copyCovenanteePartData(mapHeaderBuff, #amountDocColNum, #amountDocCovenanteeColNum);
            this.copyCovenanteePartData(mapHeaderBuff, #amountDebitColNum, #amountDebitCovenanteeColNum);
            this.copyCovenanteePartData(mapHeaderBuff, #amountCreditColNum, #amountCreditCovenanteeColNum);
        }

        this.execute(headerType_Default);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance variables.
    /// </summary>
    /// <param name="_formListControl">
    /// RLedgerSheet form list control.
    /// </param>
    /// <param name="_rLedgerSheetEngine">
    /// <c>RLedgerSheetEngine</c> class instance.
    /// </param>
    /// <param name="_reportTitle">
    /// Report title.
    /// </param>
    /// <param name="_reportCaption">
    /// Report caption.
    /// </param>
    /// <param name="_conRepeatableColumn">
    /// Container with repeatable columns; optional.
    /// </param>
    /// <param name="_conNotPrintColumn">
    /// Containter with non-printable columns; optional.
    /// </param>
    /// <param name="_paramIntoReport">
    /// Into report object; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws exception if _formListControl parameter is not specified.
    /// </exception>
    public void setParameters(FormListControl         _formListControl,
                              RLedgerSheetEngine      _rLedgerSheetEngine,
                              TempStr                 _reportTitle           = '',
                              TempStr                 _reportCaption         = '',
                              container               _conRepeatableColumn   = [0],
                              container               _conNotPrintColumn     = connull(),
                              Object                  _paramIntoReport       = null)
    {
        RLedgerSheetEngine_ActAdjustCustVend  actAdjustCustVend = _rLedgerSheetEngine;

        if (!actAdjustCustVend)
            throw error(Error::wrongUseOfFunction(funcname()));

        showCovenanteePart = actAdjustCustVend.getShowCovenanteePart();
        custVendTable      = actAdjustCustVend.getCustVendTable();

        super(_formListControl, _rLedgerSheetEngine, actAdjustCustVend.getReportTitle(), actAdjustCustVend.getReportCaption(), [0], conNull());

        this.createSectionPageHeaderFirstLine();
        this.initMapHeaderFirstLineBuff();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of report template
    /// </summary>
    /// <returns>
    /// name of report template
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(RLedgerSheetActOfAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns aproximated number of report cells for progress bar calculation
    /// </summary>
    /// <returns>
    /// aproximated number of report cells
    /// </returns>
    #define.totalCells(1000)
    protected Counter totalCells()
    {
        return #totalCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_ActAdjustCustVend_RU construct()
    {
        return new OXMLExcelReport_ActAdjustCustVend_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'ActAdjust';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>