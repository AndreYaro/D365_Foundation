<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rhrmPersonalAccountReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rhrmPersonalAccountReport extends RunBase
{
    DialogField                 dialogEmployee;
    DialogField                 dialogFromDate;
    DialogField                 dialogToDate;
    DialogField                 dialogDocumentNum;

    TransDate                   fromDate;
    TransDate                   toDate;
    RHRMEmplId                  employee;
    DocumentNum                 docNum;

    ComExcelDocument_RU         excelDocument;
    COM                         document;
    RHRMEmplTable               emplTable;
    FilePath                    animationFile;
    FormRun                     animationForm;
    FormAnimateControl          animationControl;
    Range                       deductionRange;

    #macrolib.RHRMMSOfficeConstant

    #define.Value2(2)
    #define.Value3(3)
    #define.Value4(4)
    #define.Value5(5)
    #define.Value6(6)
    #define.Value7(7)
    #define.Value8(8)
    #define.Value9(9)

    #localmacro.tableColumnNames
        [["A", "J", "S", "AL", "BB", "BL", "CD", "CM", "CV", "DE",
            "DN", "DW", "EE", "EM", "EW", "FE", "FM"],
         ["A", "AE", "AQ", "BD", "BU", "CL", "DP", "EC", "EQ", "FJ"]]
    #endmacro

    #define.firstTableBegin(25)
    #define.secondTableBegin(32)

    #define.CurrentVersion(3)
    #localmacro.CurrentList
    employee,
    fromDate,
    toDate,
    docNum
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str animationBoxCaption()
    {
        return "@RUP1755";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str animationBoxText()
    {
        return "@RUP1809";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        deductionRange = RPayReportTuningTable::find(RPayReportName::RHrmReportT54a,1).Parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countReceiveTransferRecords</Name>
				<Source><![CDATA[
    private int64 countReceiveTransferRecords()
    {
        RPayHistory     tmpHistory;

        select count(RecId) from tmpHistory
            where tmpHistory.Number                 == employee                      &&
                 (tmpHistory.OperationType          == RHRMJournalType::Receive      ||
                  tmpHistory.OperationType          == RHRMJournalType::Transfer)    &&
                  tmpHistory.StartDate              >= fromDate                      &&
                  tmpHistory.StartDate              <= toDate                        &&
                  ! tmpHistory.TransferWithoutTermChanges;

        return tmpHistory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countVacationRecords</Name>
				<Source><![CDATA[
    private int64 countVacationRecords()
    {
        RPayVacationTable   tmpVacation;

        select count(RecId) from tmpVacation
            where tmpVacation.EmplId    == employee  &&
                  tmpVacation.StartDate >= fromDate  &&
                  tmpVacation.EndDate   <= toDate;

        return tmpVacation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = new DialogRunbase("@SYS28952", this);

        dialog.addGroup("@SYS9472");
        dialogEmployee = dialog.addField(extendedTypeStr(RHRMEmplId));
        dialogEmployee.value(employee);

        dialog.addGroup("@RUP2");
        dialogFromDate = dialog.addField(extendedTypeStr(TransDate));
        dialogFromDate.label("@RUP250");
        dialogFromDate.helpText("@SYS2168");
        dialogFromDate.value(fromDate);

        dialogToDate = dialog.addField(extendedTypeStr(TransDate));
        dialogToDate.label("@SYS53942");
        dialogToDate.helpText("@SYS14656");
        dialogToDate.value(toDate);

        dialogDocumentNum = dialog.addField(extendedTypeStr(DocumentNum));
        dialogDocumentNum.helpText("@RUP1750");
        dialogDocumentNum.value(docNum);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeductionTable</Name>
				<Source><![CDATA[
    private void fillDeductionTable(int _shift)
    {
        RPayEmplStandardDeductionTable rPayEmplStandardDeductionTable;
        RPayTrans                      rPayTrans;
        Query                          query = new Query();
        QueryBuildDataSource           qBd;
        QueryRun                       queryRun;
        int                            rowCounter = #secondTableBegin + _shift, columnCounter = 0;
        RPayAmount                     totalAmount,
                                       monthAmount;
        str                            deductPercentage;

        qBd = query.addDataSource(tableNum(RPayEmplStandardDeductionTable));
        qBd.addRange(fieldNum(RPayEmplStandardDeductionTable,EmplId)).value(employee);
        qBd.addRange(fieldNum(RPayEmplStandardDeductionTable,DeductionCode)).value(deductionRange);
        qBd.addRange(fieldNum(RPayEmplStandardDeductionTable,EndDate)).value(SysQuery::valueEmptyString());
        qBd.addRange(fieldNum(RPayEmplStandardDeductionTable,EndDate)).value(SysQuery::range(fromDate,""));
        queryRun = new QueryRun(query);
        queryRun.init();
        while (queryRun.next())
        {
            rPayEmplStandardDeductionTable = queryRun.get(tableNum(RPayEmplStandardDeductionTable));
            if (rPayEmplStandardDeductionTable.TotalSum)
            {
                totalAmount = 0;
                monthAmount = 0;
                deductPercentage = "";
                select sum(Amount) from rPayTrans
                    where rPayTrans.PayPeriod     <  fromDate                    &&
                          rPayTrans.SourceTableId == rPayEmplStandardDeductionTable.TableId &&
                          rPayTrans.SourceRecId   == rPayEmplStandardDeductionTable.RecId   &&
                          rPayTrans.Scanning      == rPayEmplStandardDeductionTable.PaySequence;
                if (rPayEmplStandardDeductionTable.TotalSum + rPayTrans.Amount <= 0 )
                {
                    continue;
                }
                totalAmount = rPayEmplStandardDeductionTable.TotalSum;
                if (rPayEmplStandardDeductionTable.DeductPercentage)
                {
                    monthAmount = CurrencyExchangeHelper::amount(totalAmount * rPayEmplStandardDeductionTable.DeductPercentage / 100);
                }
                else
                {
                    monthAmount = rPayEmplStandardDeductionTable.PeriodSum;
                }
                monthAmount = min(rPayEmplStandardDeductionTable.TotalSum - rPayTrans.Amount,monthAmount);
            }
            else
            {
                deductPercentage = strFmt("@RUP1605", rPayEmplStandardDeductionTable.DeductPercentage);
                monthAmount = rPayEmplStandardDeductionTable.PeriodSum;
            }
            if (! columnCounter && rowCounter > #secondTableBegin + _shift)
            {
                excelDocument.insertRow(rowCounter);
            }

            excelDocument.insertValue(this.tableCellName(columnCounter + 1, rowCounter, #Value2),
                                      rPayEmplStandardDeductionTable.DocumentNum + "@GLS106147" + "@GLS100829" + "@GLS106147" + date2str(rPayEmplStandardDeductionTable.DocumentDate,123,#Value2,#Value2,#Value2,#Value2,#Value2, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(columnCounter + #Value2, rowCounter, #Value2),
                                      date2str(rPayEmplStandardDeductionTable.StartDate,123,2,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(columnCounter + #Value3, rowCounter, 2),
                                      date2str(rPayEmplStandardDeductionTable.EndDate,123,2,2,2,2,#Value4, DateFlags::None));
            if (totalAmount)
            {
                excelDocument.insertValue(this.tableCellName(columnCounter + #Value4, rowCounter, 2),
                                          totalAmount);
            }
            else
            {
                excelDocument.insertValue(this.tableCellName(columnCounter + #Value4, rowCounter, 2),
                                          deductPercentage);
            }
            excelDocument.insertValue(this.tableCellName(columnCounter + #Value5, rowCounter, 2),
                                      monthAmount);

            if (! columnCounter)
            {
                columnCounter = #Value5;
            }
            else
            {
                rowCounter ++;
                columnCounter = 0;
            }
        }
        excelDocument.deleteRow(rowCounter + (columnCounter ? 1 : 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    private void fillDocument()
    {
        emplTable       = RHRMEmplTable::find(employee);

        this.fillStaticBookmarks();
        this.fillTransferVacationTable();

        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStandardDeduction</Name>
				<Source><![CDATA[
    private void fillStandardDeduction(int _shift)
    {
        RPayTaxEmplSum  taxEmplSum;

        select sum(DeductionStandardAmount) from taxEmplSum
            where taxEmplSum.EmplId    == employee &&
                  taxEmplSum.PayPeriod >= fromDate &&
                  taxEmplSum.PayPeriod <= toDate;

        excelDocument.insertValue(this.tableCellName(17, #firstTableBegin + _shift, 1), taxEmplSum.DeductionStandardAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStaticBookmarks</Name>
				<Source><![CDATA[
    private void fillStaticBookmarks()
    {
        CompanyInfo company;

        company              = CompanyInfo::find();

        excelDocument.insertValue(#CompanyName, company.Name);
        excelDocument.insertValue(#CompanyCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(company, toDate));
        excelDocument.insertValue(#DivisionName, RPayHistory::findLastSignOnMove(employee).organizationDescription());
        excelDocument.insertValue(#EmplBirthday, date2str(emplTable.personTable().hcmPersonPrivateDetails().BirthDate, 123,2,2,2,2,4, DateFlags::None));
        excelDocument.insertValue(#DialogDocumentNum, docNum);
        excelDocument.insertValue(#DialogFromDate, date2str(fromDate,123,2,2,2,2,4, DateFlags::None));
        excelDocument.insertValue(#DialogToDate, date2str(toDate,123,2,2,2,2,4, DateFlags::None));
        excelDocument.insertValue(#EmplId, employee);
        excelDocument.insertValue(#EmplName, emplTable.name());
        excelDocument.insertValue(#TradeCategory, emplTable.PersonnelCategoryId);
        excelDocument.insertValue(#PayInn, emplTable.payINN(toDate));
        excelDocument.insertValue(#PayInnPf, emplTable.payPFRINN(toDate));
        excelDocument.insertValue(#MaritalStatus, emplTable.personTable().MaritalStatusId);
        excelDocument.insertValue(#ChildrenQty, this.getChildrenQty());
        excelDocument.insertValue(#ReceiveDate, date2str(emplTable.PayEmploymentDate,123,2,2,2,2,4, DateFlags::None));
        excelDocument.insertValue(#DismissDate, date2str(emplTable.PayResignedDate,123,2,2,2,2,4, DateFlags::None));

        excelDocument.insertValue(#AccountantName, OfficialsTable_RU::nameAccountant());
        excelDocument.insertValue(#DayNumber, dayOfMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        excelDocument.insertValue(#Year, subStr(int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))), 3, 2));
        excelDocument.insertValue(#MonthName, mthName(mthOfYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransferTable</Name>
				<Source><![CDATA[
    private int fillTransferTable(boolean _addRows = false)
    {
        RPayHistory         history;
        int row = #firstTableBegin;

        if (! this.countReceiveTransferRecords())
            return 0;

        while select history
            where history.Number                 == employee                         &&
                 (history.OperationType          == RHRMJournalType::Receive         ||
                  history.OperationType          == RHRMJournalType::Transfer        ||
                  history.OperationType          == RHRMJournalType::Dismiss)        &&
                  history.StartDate              >= fromDate                         &&
                  history.StartDate              <= toDate                           &&
                  ! history.TransferWithoutTermChanges
        {
            if (_addRows)
                excelDocument.insertRow(row);

            excelDocument.insertValue(this.tableCellName(1, row, 1), date2str(history.HrmOrderDate,123,2,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(#Value2, row, 1), history.HrmOrderNum);
            if (history.OperationType != RHRMJournalType::Dismiss)
            {
                excelDocument.insertValue(this.tableCellName(#Value3, row, 1), history.organizationDescription());
                excelDocument.insertValue(this.tableCellName(#Value4, row, 1), history.titleId());
                excelDocument.insertValue(this.tableCellName(#Value5, row, 1), enum2str(history.HrmKindOfWork));
                excelDocument.insertValue(this.tableCellName(#Value6, row, 1), history.wage());
                excelDocument.insertValue(this.tableCellName(#Value7, row, 1), history.riseInWages());
                excelDocument.insertValue(this.tableCellName(#Value8, row, 1), history.riseInWages2() + history.riseInWages3());
            }

            row ++;
        }

        return row - #firstTableBegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransferVacationTable</Name>
				<Source><![CDATA[
    private void fillTransferVacationTable()
    {
        int     shift;

        if (this.countReceiveTransferRecords() > this.countVacationRecords())
        {
            shift = this.fillTransferTable(true);
            this.fillVacationTable(false);
        }
        else
        {
            shift = this.fillVacationTable(true);
            this.fillTransferTable(false);
        }

        this.fillStandardDeduction(shift);
        this.fillDeductionTable(shift);

        excelDocument.deleteRow(#firstTableBegin + shift + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVacationTable</Name>
				<Source><![CDATA[
    #define.Value11(11)
    #define.Value14(14)
    private int fillVacationTable(boolean _addRows = false)
    {
        RHRMOrderTrans  hrmOrderTrans;
        RHRMOrderTable  hrmOrderTable;
        int row = #firstTableBegin;

        if (! this.countVacationRecords())
            return 0;

        while select hrmOrderTrans
            where hrmOrderTrans.EmplId    == employee  &&
                  hrmOrderTrans.StartDate >= fromDate  &&
                  hrmOrderTrans.EndDate   <= toDate
        join TransDate, OrderNum from hrmOrderTable
            where hrmOrderTrans.OrderTableRecId == hrmOrderTable.RecId &&
                  hrmOrderTable.Posted          == NoYes::Yes          &&
                  hrmOrderTable.JournalType     == RHRMJournalType::Vacation
        {
            if (_addRows)
                excelDocument.insertRow(row);

            excelDocument.insertValue(this.tableCellName(#Value9, row, 1), hrmOrderTrans.VacationTypeId);
            excelDocument.insertValue(this.tableCellName(10, row, 1), date2str(hrmOrderTable.TransDate,123,2,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(#Value11, row, 1), hrmOrderTable.OrderNum);
            excelDocument.insertValue(this.tableCellName(12, row, 1), date2str(hrmOrderTrans.StartPeriodDate,123,0,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(13, row, 1), date2str(hrmOrderTrans.EndPeriodDate,123,0,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(#Value14, row, 1), num2str(hrmOrderTrans.calendarDayNumber(),1,0,1,0));
            excelDocument.insertValue(this.tableCellName(15, row, 1), date2str(hrmOrderTrans.StartDate,123,2,2,2,2,#Value4, DateFlags::None));
            excelDocument.insertValue(this.tableCellName(16, row, 1), date2str(hrmOrderTrans.EndDate,123,2,2,2,2,#Value4, DateFlags::None));

            row ++;
        }

        return row - #firstTableBegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildrenQty</Name>
				<Source><![CDATA[
    private Qty getChildrenQty()
    {
        RHRMVirtualNetworkFamily emplFamily;

        select count(RecId) from emplFamily
            where emplFamily.PersonnelNumber  == emplTable.personTable().PersonnelNumber &&
                  (emplFamily.Relatives       == RHRMRelationship::Daughter    ||
                   emplFamily.Relatives       == RHRMRelationship::Son);

        return any2int(emplFamily.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret = super();

        employee         = dialogEmployee.value();
        fromDate         = dialogFromDate.value();
        toDate           = dialogToDate.value();
        docNum           = dialogDocumentNum.value();

        if (! employee || ! RHRMEmplTable::find(employee))
            ret = checkFailed("@SYS67768");

        if (! fromDate || ! toDate)
            ret = checkFailed("@RUP6209");

        if (fromDate > toDate)
            ret = checkFailed(strFmt("@SYS55013", fromDate, toDate));

        if (! docNum)
            ret = checkFailed("@SYS57812");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    private boolean makeDocument()
    {
        resourceNode rn = SysResource::getResourceNode(this.name());
        str templateFile;

        rn.AOTload();
        templateFile = SysResource::saveToTempFile(rn, false);

        if (! WinAPI::fileExists(templateFile))
        {
            error(strFmt("@SYS60367", templateFile));
            return false;
        }

        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(templateFile, false))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.showAnimationBox();
        this.getLast();

        if (this.makeDocument())
        {
            this.fillDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAnimationBox</Name>
				<Source><![CDATA[
    private void showAnimationBox()
    {
        Args                  args;
        FormStaticTextControl text;

        if (WinAPI::fileExists(xInfo::directory(DirectoryType::Include) + #107avi))
        {
            animationFile = xInfo::directory(DirectoryType::Include) + #107avi;
            args = new Args(formStr(RHRMAnimationBox));
            animationForm = classfactory.formRunClass(args);
            animationForm.init();
            animationForm.design().caption(this.animationBoxCaption());
            animationControl = animationForm.design().controlName(#AnimationControl);
            animationControl.animateFile(animationFile);
            text = animationForm.design().controlName(#Text);
            text.text(this.animationBoxText());
            animationForm.run();
            animationControl.play();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableCellName</Name>
				<Source><![CDATA[
    private str tableCellName(int _column, int _row, int _table)
    {
        container oneTableColumnNames;
        oneTableColumnNames = conPeek(#tableColumnNames, _table);
        return conPeek(oneTableColumnNames, _column) + int2str(_row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMPersonalAccountReport  personalAccountReport;

        personalAccountReport = new RHRMPersonalAccountReport();

        if (personalAccountReport.prompt())
        {
            personalAccountReport.checkAndPrepareParameters();
            personalAccountReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>