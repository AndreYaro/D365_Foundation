<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransactionWorkflow</c> class is the helper class for the <c>SubmitToWorkflow</c> and
///    <c>ResubmitToWorkflow</c> classes for the budget transaction workflow.
/// </summary>
public class BudgetTransactionWorkflow
{
    BudgetTransactionHeader budgetTransactionHeader;

    workflowTypeName workflowTypeName;
    WorkflowVersionTable workflowVersionTable;
    WorkflowComment workflowComment;
    WorkflowWorkItemTable workflowWorkItemTable;

    menuItemName menuItemName;
    userId targetUser;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether budget funds are available for the budget transaction.
    /// </summary>
    public void checkBudget()
    {
        BudgetTransactionLine budgetTransactionLine;

        if (budgetTransactionHeader)
        {
            while select recId from budgetTransactionLine
                where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId &&
                    budgetTransactionLine.BudgetType == BudgetType::Expense
            {
                // Only perform budgetary control check if the budget type is Expense.
                BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToCheckBudget(budgetTransactionLine.RecId, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box for submitting a budget transaction workflow.
    /// </summary>
    /// <returns>
    /// true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog workflowSubmitDialog;
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog;
        boolean ok;

        if (this.parmMenuItemName() == menuitemactionstr(BudgetTransactionWorkflowSubmit))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowSubmitDialog.run();

            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (this.parmMenuItemName() == menuitemactionstr(BudgetTransactionWorkflowResubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                this.parmWorkflowWorkItemTable(),
                WorkflowWorkItemActionType::Resubmit,
                new MenuFunction(menuitemactionstr(BudgetTransactionWorkflowResubmit), MenuItemType::Action));

            workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowWorkItemActionDialog.run();

            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            this.parmTargetUser(workflowWorkItemActionDialog.parmTargetUser());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        // Check budget prior to confirming the workflow dialog to allow users to cancel the action.
        this.checkBudget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetTransactionWorkflow</c> class.
    /// </summary>
    /// <param name="_budgetTransactionHeader">
    /// The <c>BudgetTransactionHeader</c> record to submit.
    /// </param>
    /// <param name="_menuItemName">
    /// The menu item name of the caller.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// The <c>WorkflowVersionTable</c> record.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// The <c>WorkflowWorkItemTable</c> record.
    /// </param>
    public void initialize(
        BudgetTransactionHeader _budgetTransactionHeader,
        menuItemName _menuItemName,
        WorkflowVersionTable _workflowVersionTable,
        WorkflowWorkItemTable _workflowWorkItemTable)
    {
        this.parmBudgetTransactionHeader(_budgetTransactionHeader);
        this.parmMenuItemName(_menuItemName);

        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemTable(_workflowWorkItemTable);
        this.parmWorkflowTypeName(_workflowVersionTable.workflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetTransactionHeader</Name>
				<Source><![CDATA[
    public BudgetTransactionHeader parmBudgetTransactionHeader(BudgetTransactionHeader _budgetTransactionHeader = budgetTransactionHeader)
    {
        budgetTransactionHeader = _budgetTransactionHeader;

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetUser</Name>
				<Source><![CDATA[
    public userId parmTargetUser(userId _targetUser = targetUser)
    {
        targetUser = _targetUser;

        return targetUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTypeName</Name>
				<Source><![CDATA[
    public workflowTypeName parmWorkflowTypeName(workflowTypeName _workflowTypeName = workflowTypeName)
    {
        workflowTypeName = _workflowTypeName;

        return workflowTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemTable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the budget transaction workflow document.
    /// </summary>
    public void reSubmit()
    {
        if (this.parmWorkflowWorkItemTable() &&
            this.validateBudgetTransactionHeader())
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                this.parmWorkflowWorkItemTable(),
                this.parmWorkflowComment(),
                this.parmTargetUser(),
                WorkflowWorkItemActionType::Resubmit,
                this.parmMenuItemName());

            this.setWorkflowStatus(BudgetTransactionWorkflowStatus::Submitted);

            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status for the budget transaction.
    /// </summary>
    /// <param name="_workflowStatus">
    /// The workflow status value to set on the budget transaction.
    /// </param>
    public void setWorkflowStatus(BudgetTransactionWorkflowStatus _workflowStatus)
    {
        BudgetTransactionHeader::setWorkflowStatus(this.parmBudgetTransactionHeader().RecId, _workflowStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget transaction workflow document.
    /// </summary>
    public void submit()
    {
        if (this.parmBudgetTransactionHeader().isWorkflowAbleToSubmit() &&
            this.validateBudgetTransactionHeader())
        {
            if (this.validateWorkflowVersionTable())
            {
                Workflow::activateFromWorkflowConfigurationId(
                    this.parmWorkflowVersionTable().ConfigurationId,
                    this.parmBudgetTransactionHeader().RecId,
                    this.parmWorkflowComment(),
                    false);

                this.setWorkflowStatus(BudgetTransactionWorkflowStatus::Submitted);
            }
            else
            {
                // The referenced workflow is no longer valid.
                // Do not submit the workflow and set the status to none.
                this.setWorkflowStatus(BudgetTransactionWorkflowStatus::None);
            }

            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>FormDataSource</c> value that is associated to the <c>BudgetTransactionHeader</c> .
    /// </summary>
    public void updateFormDataSource()
    {
        FormDataSource budgetTransactionHeader_ds;

        budgetTransactionHeader_ds = FormDataUtil::getFormDataSource(this.parmBudgetTransactionHeader());

        if (budgetTransactionHeader_ds)
        {
            int cursorPosition = budgetTransactionHeader_ds.getPosition();
            budgetTransactionHeader_ds.research(true);
            budgetTransactionHeader_ds.setPosition(cursorPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget transaction header is valid by looking at the number of lines
    ///    associated to the header.
    /// </summary>
    /// <returns>
    ///    true when the budget transaction header is valid; otherwise; false.
    /// </returns>
    protected boolean validateBudgetTransactionHeader()
    {
        boolean isValid = true;

        if (this.parmBudgetTransactionHeader().numOfLines() == 0)
        {
            error("@SYS330038");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>WorkflowVersionTable</c> table reference
    /// from the <c>BudgetTransactionCode</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>WorkflowVersionTable</c> table is valid; otherwise, false.
    /// </returns>
    protected boolean validateWorkflowVersionTable()
    {
        boolean isValid = true;
        BudgetTransactionCode budgetTransactionCode;

        budgetTransactionCode = BudgetTransactionCode::find(this.parmBudgetTransactionHeader().BudgetTransactionCode);

        if (!budgetTransactionCode.WorkflowTableSequenceNumber &&
            !BudgetTransactionCode::isWorkflowTableSequenceNumberValid(budgetTransactionCode.RecId))
        {
            error(strfmt(
                "@SYS323414",
                fieldid2pname(tablenum(BudgetTransactionCode), fieldnum(BudgetTransactionCode, WorkflowTableSequenceNumber)),
                formstr(BudgetTransactionCode)));

            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BudgetTransactionWorkflow</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetTransactionWorkflow</c> class.
    /// </returns>
    public static BudgetTransactionWorkflow construct()
    {
        BudgetTransactionWorkflow budgetTransactionWorkflow;

        budgetTransactionWorkflow = new BudgetTransactionWorkflow();

        return budgetTransactionWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a budget transaction workflow document and starts the corresponding workflow.
    /// </summary>
    /// <param name="args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args args)
    {
        BudgetTransactionWorkflow budgetTransactionWorkflow;
        BudgetTransactionHeader budgetTransactionHeader;

        if (args.record() &&
            args.record().TableId == tablenum(BudgetTransactionHeader))
        {
            budgetTransactionHeader = args.record() as BudgetTransactionHeader;
        }

        if (budgetTransactionHeader &&
            (args.menuItemName() == menuitemactionstr(BudgetTransactionWorkflowSubmit) ||
            args.menuItemName() == menuitemactionstr(BudgetTransactionWorkflowSubmitTransfer) ||
            args.menuItemName() == menuitemactionstr(BudgetTransactionWorkflowResubmit)))
        {
            budgetTransactionWorkflow = BudgetTransactionWorkflow::construct();

            if (args.menuItemName() == menuitemactionstr(BudgetTransactionWorkflowSubmitTransfer))
            {
                // Do not prompt when submitting a transfer transaction.
                // Do not go to the caller to get the workflow version table.
                budgetTransactionWorkflow.initialize(
                    args.record(),
                    menuitemactionstr(BudgetTransactionWorkflowSubmit),
                    budgetTransactionHeader.getWorkflowVersionTable(),
                    null);

                budgetTransactionWorkflow.parmWorkflowComment("@SYS324014");

                budgetTransactionWorkflow.submit();
            }
            else
            {
                budgetTransactionWorkflow.initialize(
                    args.record(),
                    args.menuItemName(),
                    args.caller().getActiveWorkflowConfiguration(),
                    args.caller().getActiveWorkflowWorkItem());

                if (budgetTransactionWorkflow.dialogOk())
                {
                    if (args.menuItemName() == menuitemactionstr(BudgetTransactionWorkflowSubmit))
                    {
                        budgetTransactionWorkflow.submit();
                    }
                    else
                    {
                        budgetTransactionWorkflow.reSubmit();
                    }

                    args.caller().updateWorkflowControls();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>