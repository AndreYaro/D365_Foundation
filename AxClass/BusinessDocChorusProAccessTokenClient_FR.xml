<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProAccessTokenClient_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Net.Http.Headers;

/// <summary>
/// A client for retrieving access tokens for French Chorus Pro integration.
/// </summary>
internal final class BusinessDocChorusProAccessTokenClient_FR extends BusinessDocChorusProServiceClientBase_FR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProAccessTokenClient_FR construct()
    {
        BusinessDocChorusProParametersFactory parametersFactory = new BusinessDocChorusProParametersFactory();
        BusinessDocChorusProIParameters parameters = parametersFactory.getParameters();
        var ret = new BusinessDocChorusProAccessTokenClient_FR();
        ret.setParameters(parameters);
        ret.setEndpointURL(parameters.getWebServiceURL());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccessToken</Name>
				<Source><![CDATA[
    public str getAccessToken(boolean _forceRequest = false)
    {
        const str AccessTokenJsonProperty = 'access_token';
        const str ExpiresInJsonProperty = 'expires_in';

        str ret;
        
        if (_forceRequest || DateTimeUtil::utcNow() < DateTimeUtil::addSeconds(parameters.getAccessTokenExpirationDateTime(), REQUEST_TIMEOUT_SECONDS))
        {
            JObject response = this.requestForAccessToken();
            if (response != null)
            {
                JToken jTokenAccessToken = response.SelectToken(AccessTokenJsonProperty);
                JToken jTokenExpiresIn = response.SelectToken(ExpiresInJsonProperty);
                if (jTokenAccessToken != null && jTokenExpiresIn != null)
                {
                    str accessToken = jTokenAccessToken.ToString();
                    int64 expiresIn = str2Int64(jTokenExpiresIn.ToString());
                    
                    this.updateAccessTokenCache(accessToken, expiresIn);

                    ret = accessToken;
                }
            }
        }
        else
        {
            ret = parameters.getAccessToken();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccessTokenCache</Name>
				<Source><![CDATA[
    private void updateAccessTokenCache(str _accessToken, int64 _expiresIn)
    {
        parameters.setAccessToken(_accessToken);
        parameters.setAccessTokenExpirationDateTime(DateTimeUtil::addSeconds(DateTimeUtil::utcNow(), _expiresIn));
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestForAccessToken</Name>
				<Source><![CDATA[
    private JObject requestForAccessToken()
    {
        JObject ret;
        
        var clientId = parameters.getClientId();
        var clientSecret = parameters.getClientSecret();
        
        str urlEncodedContent;
        urlEncodedContent += 'grant_type=client_credentials';
        urlEncodedContent += '&client_id=' + clientId;
        urlEncodedContent += '&client_secret=' + clientSecret;
        urlEncodedContent += '&scope=openid';

        ret = this.requestChorusPro(
            parameters.getLoginServiceURL(),
            '/api/oauth',
            'token',
            BusinessDocumentWebHelperBase::HttpPost,
            urlEncodedContent,
            BusinessDocumentWebHelperBase::UrlEncodedContentType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    protected void addRequestHeaders(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAuthorizationHeader</Name>
				<Source><![CDATA[
    protected void addAuthorizationHeader(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>