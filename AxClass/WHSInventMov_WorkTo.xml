<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventMov_WorkTo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventMov_WorkTo</c> class is used as a data carrier when updating inbound work transactions.
/// </summary>
[InventMovementFactoryAttribute(tableStr(WHSWorkInventTrans),InventMovSubType::TransferReceipt)]
public class WHSInventMov_WorkTo extends WHSInventMov_Work
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTransOriginTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the inventory transaction originator transfer that corresponds to the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the inventory transaction originator transfer that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///  This method will return 0 if the internal <c>WHSWorkInventTrans</c> record does not have a recId since that indicates that it has not been created hence an origin transfer record will most likely not yet exists.
    /// </remarks>
    public InventTransOriginId inventTransOriginTransferId()
    {
        InventTransOriginTransfer   inventTransOriginTransfer;

        //if workInventTrans has a recId the inventTransOriginTransfer should exist, if not, we must be in the scenario where the origins are being created, hence we don't do this call since it will add overhead on te the first insert
        if (workInventTrans.RecId &&  this.transferInventTransOriginId())
        {
            select firstonly RecId from inventTransOriginTransfer
                where inventTransOriginTransfer.IssueInventTransOrigin      == this.transferInventTransOriginId()
                &&    inventTransOriginTransfer.ReceiptInventTransOrigin    == this.inventTransOriginId();
        }

        return inventTransOriginTransfer.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty  _inventQty)
    {
        // Need to preserve method to avoid breaking changes
        super(_inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && workInventTrans.RecId)
        {
            WHSInventTransOriginWorkTo::writeOriginOwnerRelationship(workInventTrans.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (workInventTrans.RecId)
        {
            WHSInventTransOriginWorkTo::deleteOwnerRelationship(workInventTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the final dimensions of the transaction.
	/// </summary>
	/// <returns>
	/// The final dimensions of the transaction.
	/// </returns>
    public InventDimId inventDimId()
    {
        return workInventTrans.InventDimIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = WHSInventTransOriginWorkTo::findInventTransOriginId(workInventTrans.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryMovement</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if movement is primary.
	/// </summary>
	/// <returns>
	/// True if the movement is primary movement.
	/// </returns>
    public boolean isPrimaryMovement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a new <c>WHSInventMov_WorkTo</c> instance with original values.
	/// </summary>
	/// <returns>
	/// New <c>WHSInventMov_WorkTo</c> instance with original values from current instance.
	/// </returns>
    public InventMovement newMovement_Orig()
    {
        if (workInventTrans.RecId)
        {
            return new WHSInventMov_WorkTo(workInventTrans.orig(), inventType);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the balance sheet posting type.
	/// </summary>
	/// <returns>
	/// The posting type.
	/// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::InventReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets final dimensions for the transaction.
	/// </summary>
	/// <param name="_dimId">
	/// Id of the dimensions to be set.
	/// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        workInventTrans.InventDimIdTo = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the direction of the transfer movements.
    /// </summary>
    /// <returns>
    ///    The direction of the transfer movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an ID of transfer counterpart inventory transaction originator that corresponds to the
    ///    movement.
    /// </summary>
    /// <returns>
    ///    The ID of a transfer counterpart inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(workInventTrans.InventTransIdFrom).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the work transaction id.
	/// </summary>
	/// <returns>
	/// The work transaction id.
	/// </returns>
    public InventTransId transId()
    {
        return workInventTrans.InventTransIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the transaction signature.
	/// </summary>
	/// <returns>
	/// The signature of the transaction.
	/// </returns>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>