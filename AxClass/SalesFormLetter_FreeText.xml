<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_FreeText</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::FreeTextInvoice)]
[SysOperationJournaledParametersAttribute(true)]
class SalesFormLetter_FreeText extends SalesFormLetter_Invoice implements BatchRetryable
{
    Map         usePrintManagementMap;  // Map to store the RecId and CustAccount of each Free Text Invoice
    container   formletterProformaPrintPacked;

    #define.currentVersion(1)
    #LOCALMACRO.ParmList
        formletterProformaPrintPacked
    #ENDMACRO

    int         screenOutputCount;
    boolean     forceToFile;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>ClassDescription</c> value.
    /// </returns>
    public ClassDescription caption()
    {
        return SalesFormLetter_FreeText::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::FreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    public container formLetterSorting(tableId    _sortingTableId,
                                       fieldId    _recIdField,
                                       tableId    _sortingSubTableId = 0)
    {
        return FormLetterSortingParameters::formLetterSorting(_sortingTableId, _recIdField, _sortingSubTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesFormLetter_FreeText</c> class.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// parm methods exist for each constructor parameter. The
    /// <c>SysOperationServiceController.initializeFromArgs</c> method can also be used to initialize a
    /// controller. If those options for initialization are used the default values can be used in the
    /// constructor.
    /// </remarks>
    void  new(
        identifierName _className = classstr(FormletterService),
        identifierName _methodName= methodstr(FormletterService, postSalesFreeTextInvoice),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);

        usePrintManagementMap = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion,#ParmList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a value which indicates whether the print destination should be forced from the screen to a PDF file.
    /// </summary>
    /// <param name="_forceToFile">
    /// A boolean value that indicates whether the print destination should be forced from the screen to a PDF file; optional.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether the print destination should be forced from the screen to a PDF file.
    /// </returns>
    /// <remarks>
    /// This method should only be called for special scenarios where it is possible to print many Free Text Invoices to the the screen.
    /// Doing so can freeze the client and this provides the ability to redirect output to PDF files.  The <c>FreeTextInvoiceController</c>
    /// class calls this to handle the scenario when printing Free Text Invoices in bulk from the list page.
    /// </remarks>
    public boolean parmForceToFile(boolean _forceToFile = forceToFile)
    {
        forceToFile = _forceToFile;
        return forceToFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterProformaPrintPacked</Name>
				<Source><![CDATA[
    public container parmFormletterProformaPrintPacked(container _formletterProformaPrintPacked = formletterProformaPrintPacked)
    {
        formletterProformaPrintPacked = _formletterProformaPrintPacked;

        return formletterProformaPrintPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScreenOutputCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of documents that have been printed to the screen.
    /// </summary>
    /// <param name="_screenOutputCount">
    /// The number of documents that have been printed to the screen; optional.
    /// </param>
    /// <returns>
    /// An integer that indicates the number of documents that have been printed to the screen.
    /// </returns>
    /// <remarks>
    /// This method should only be called for special scenarios where it is possible to print many Free Text Invoices to the the screen.
    /// Doing so can freeze the client and this provides the ability to redirect output to PDF files.  The <c>FreeTextInvoiceController</c>
    /// class calls this to handle the scenario when printing Free Text Invoices in bulk from the list page.
    /// </remarks>
    public int parmScreenOutputCount(int _screenOutputCount = screenOutputCount)
    {
        screenOutputCount = _screenOutputCount;
        return screenOutputCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for free text invoice.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::SalesFreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer  version = conpeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion :
                [version, #ParmList, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS23028";  // Free text invoice
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFreeText</Name>
				<Source><![CDATA[
    public static container getPrinterSettingsFreeText(PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        CustPostInvoiceJob custPostInvoiceJobPrint = CustPostInvoiceJob::construct();
        custPostInvoiceJobPrint.getLast();

        return custPostInvoiceJobPrint.printerSettingsFreeText(_originalCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFreeText</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormLetter::construct() instead.', false, 31\05\2017)]
    static public SalesFormLetter_FreeText newFreeText(
        identifierName _className  = classstr(FormletterService),
        identifierName _methodName = methodstr(FormletterService, postSalesFreeTextInvoice),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return SalesFormLetter::construct(DocumentStatus::FreeTextInvoice, _className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesDocumentTimezonePreference</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to retrieve the time zone preference for the free text invoice document
    /// </summary>
    /// <returns>
    /// Returns a <c>SalesDocumentTimezonePreference</c> value.
    /// </returns>
    protected SalesDocumentTimezonePreference getSalesDocumentTimezonePreference()
    {
        return CustParameters::find().FreeTextInvoiceTimezonePreference;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
