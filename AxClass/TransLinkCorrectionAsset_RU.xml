<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransLinkCorrectionAsset_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TransLinkCorrectionAsset_RU extends TransLinkCorrection_RU
{
    RAssetTrans rAssetTransSource, rAssetTransStorno, rAssetTransCorrective;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    public void createTransLink(TransDate _accountingDate)
    {
        TransLink_RU            transLink;
        FromDate                fromDate;
        ToDate                  toDate;
    
        super(_accountingDate);
    
        if (rAssetTransCorrective.TransDate > _accountingDate)
        {
            setprefix("@GLS104327" + "@GLS111192" + "@GLS102908" + rAssetTransCorrective.AccountNum);
            throw error(strfmt("@SYS91558", "@SYS67", "@GLS111794"));
        }
    
        switch (transLinkType)
        {
            case TransLinkType_RU::Storno:
                TransLink_RU::createReversal(rAssetTransCorrective.TableId, rAssetTransCorrective.StornoRecId, rAssetTransCorrective.RecId);
                rAssetTransSource = RAssetTrans::find(rAssetTransCorrective.StornoRecId);
                break;
    
            case TransLinkType_RU::Correction:
                fromDate    = LedgerFiscalCalendar::findPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), rAssetTransCorrective.TransDate);
                toDate      = rAssetTransCorrective.TransDate;
    
                select firstonly rAssetTransStorno
                    order by CreatedDateTime desc
                    where rAssetTransStorno.AccountNum      == rAssetTransCorrective.AccountNum         &&
                          rAssetTransStorno.AssetStandardId == rAssetTransCorrective.AssetStandardId    &&
                          rAssetTransStorno.TransDate       >= fromDate                                 &&
                          rAssetTransStorno.TransDate       <= toDate                                   &&
                          rAssetTransStorno.AssetTransType  == rAssetTransCorrective.AssetTransType     &&
                          rAssetTransStorno.PostingType     == rAssetTransCorrective.PostingType        &&
                          rAssetTransStorno.StornoRecId     != 0
                join rAssetTransSource
                    where rAssetTransSource.RecId           == rAssetTransStorno.StornoRecId            &&
                          rAssetTransSource.StornoRecId     == rAssetTransStorno.RecId;
    
                if (rAssetTransSource)
                {
                    transLink = TransLink_RU::findSec(rAssetTransSource.TableId, rAssetTransSource.RecId);
                    if (!transLink)
                    {
                        rAssetTransStorno = null;
                        rAssetTransSource = null;
                    }
                }
                else
                {
                    select firstonly rAssetTransSource
                        order by CreatedDateTime desc
                        where rAssetTransSource.AccountNum      == rAssetTransCorrective.AccountNum         &&
                              rAssetTransSource.AssetStandardId == rAssetTransCorrective.AssetStandardId    &&
                              rAssetTransSource.TransDate       >= fromDate                                 &&
                              rAssetTransSource.TransDate       <= toDate                                   &&
                              rAssetTransSource.AssetTransType  == rAssetTransCorrective.AssetTransType     &&
                              rAssetTransSource.PostingType     == rAssetTransCorrective.PostingType        &&
                              rAssetTransSource.StornoRecId     == 0                                        &&
                              rAssetTransSource.RecId           != rAssetTransCorrective.RecId;
    
                    if (rAssetTransSource)
                    {
                        transLink = TransLink_RU::findSec(rAssetTransSource.TableId, rAssetTransSource.RecId);
                        if (!transLink)
                        {
                            TransLink_RU::create(rAssetTransSource.TableId, rAssetTransSource.RecId, rAssetTransSource.RecId);
                        }
                    }
                }
    
                TransLink_RU::create(rAssetTransCorrective.TableId,
                                     rAssetTransSource.RecId != 0 ? rAssetTransSource.RecId : rAssetTransCorrective.RecId,
                                     rAssetTransCorrective.RecId,
                                     TransLinkType_RU::Correction);
                break;
    
            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }
    
        sourceTrans = rAssetTransSource;
        stornoTrans = rAssetTransStorno;
        this.updateTransLinkAccountingDate(rAssetTransSource.getAccountingDate(), rAssetTransStorno.getAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue(Common _correctiveTrans)
    {
        super(_correctiveTrans);
        rAssetTransCorrective = _correctiveTrans;
        transLinkType = (rAssetTransCorrective.StornoRecId != 0) ? TransLinkType_RU::Storno : transLinkType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerCorrection</Name>
				<Source><![CDATA[
    protected void postLedgerCorrection(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans              journalTrans;
        LedgerJournalTrans_RAsset       journalTrans_RAsset;
    
        while select journalTrans group by Voucher, TransDate
            where journalTrans.JournalNum == _ledgerJournalTable.JournalNum
        join CorrectedPeriod from journalTrans_RAsset group by CorrectedPeriod
            where journalTrans_RAsset.RefRecId == journalTrans.RecId
               && (journalTrans_RAsset.CorrectedPeriod
                   || (journalTrans_RAsset.ToFromRecId
                       && journalTrans_RAsset.TransType == RAssetTransType::Depreciation
                       && !journalTrans_RAsset.DepreciationBonusId))
        {
            while select rAssetTransCorrective
                where rAssetTransCorrective.Voucher   == journalTrans.Voucher
                   && ((rAssetTransCorrective.TransDate == journalTrans.TransDate                 && !journalTrans_RAsset.CorrectedPeriod) ||
                       (rAssetTransCorrective.TransDate == journalTrans_RAsset.CorrectedPeriod    && journalTrans_RAsset.CorrectedPeriod))
            {
                setprefix("@GLS104327" + "@GLS111192" + "@GLS102908" + rAssetTransCorrective.AssetStandardId);
                this.initValue(rAssetTransCorrective);
                this.createLedgerTransLink();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>