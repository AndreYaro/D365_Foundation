<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCatalogPolicyRuleExpirationDateUpdating_Handler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatCatalogPolicyRuleExpirationDateUpdating_Handler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SysPolicyRuleExpirationDateUpdating</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(SysPolicyChangeRuleExpirationDate), delegateStr(SysPolicyChangeRuleExpirationDate, SysPolicyRuleExpirationDateUpdating))]
    public static void SysPolicyRuleExpirationDateUpdating(SysPolicyRule rule, EventHandlerResult result)
    {
        CatProcureCatalogTable  procureCatalog;
        CatCatalogPolicyRule    catCatalogPolicyRule;

        // if this rule is a CatalogPolicyRule, prevent the update if the catalog is inactive.
        // This scenario occurs when user has launched the catalog policy rule form and before the user could change the date
        // another user has inactivated the catalog in the catalog management form
        if (rule is CatCatalogPolicyRule)
        {
            select Catalog, RecId  from catCatalogPolicyRule where catCatalogPolicyRule.RecId == rule.RecId join
                    PublishingStatus, Recid from procureCatalog where procureCatalog.Recid == catCatalogPolicyRule.Catalog;

            if (procureCatalog.PublishingStatus == ProcureCatalogPublishingStatus::Inactive)
            {
                error("@SYS340005");
                // no logical AND required here, since false will always "win"
                result.booleanResult(false);
            }
            else
            {
                // the result needs to take any previous result for this event into account, so the default
                // value should be a logical AND of the previous result with TRUE
                result.booleanResult(result.booleanResult() && true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>