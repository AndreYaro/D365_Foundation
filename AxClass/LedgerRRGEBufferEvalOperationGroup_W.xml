<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEBufferEvalOperationGroup_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEBufferEvalOperationGroup_W extends LedgerRRGEBufferEval_W
{
    tableId                     groupTableId;
    RecId                       groupRecId;
    LedgerRRGOperationParm_RU   curParams;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eval</Name>
				<Source><![CDATA[
    protected str eval()
    {
        LedgerRRGOperationTable_RU      operationTable;
        LedgerRRGEBufferEvalOperation_W operation;
        str                             evalResult;
        Amount                          opResult;
        Amount                          calcResult;
        boolean                         existNumericValue;
        boolean                         numericResult = true;

        void addNumericValue()
        {
            if (existNumericValue)
            {
                evalResult         += parms.amount2Str(calcResult);
                existNumericValue   = false;
                calcResult          = 0;
            }
        }

        if (! parms.scale())
            throw error("@LedgerRRG:LedgerRRG_ScaleIsNull");

        while select operationTable order by LineNum
            where operationTable.CellTableId == groupTableId &&
                  operationTable.CellRecId   == groupRecId
        {
            operation = LedgerRRGEBufferEval_W::newFromBuffer(operationTable, this);

            if (operation.isNumeric())
            {
                existNumericValue   = true;
                opResult            = operation.calc();
                switch (operationTable.Operation)
                {
                    case Operator::Plus:
                        calcResult += opResult;
                        break;

                    case Operator::Minus:
                        calcResult -= opResult;
                        break;

                    case Operator::Multiplication:
                        calcResult = calcResult * opResult;
                        break;

                    case Operator::Division:
                        if (opResult)
                        {
                            calcResult = calcResult / opResult;
                        }
                        else
                        {
                            throw error("@SYS31647");
                        }
                        break;

                    default :
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
            }
            else
            {
                addNumericValue();
                evalResult += operation.value();
                numericResult = false;
            }
        }

        if (numericResult && !calcResult)
        {
            evalResult = '';
        }
        else
        {
            addNumericValue();
        }

        return parms.fmtStr(evalResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    public void initFromBuffer(Common _buffer)
    {
        super(_buffer);

        groupTableId    = _buffer.TableId;
        groupRecId      = _buffer.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parms</Name>
				<Source><![CDATA[
    public LedgerRRGOperationParm_RU parms(LedgerRRGOperationParm_RU _parms = parms)
    {
        return super(_parms);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEBufferEvalOperationGroup_W construct()
    {
        return new LedgerRRGEBufferEvalOperationGroup_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>