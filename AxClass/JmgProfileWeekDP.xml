<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileWeekDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgWorkPlannerProfileDP</c> is the RDP class for the work schedule SSRS reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(JmgWorkPlanner_Profile))
]
public class JmgProfileWeekDP extends SRSReportDataProviderBase
{
    JmgProfileReportWeekTmp jmgProfileReportWeekTmp;
    JmgProfileSpec  jmgProfileSpecPrev;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJmgProfileReportWeekTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>JmgProfileReportWeekTmp</c> temporary table with the data and returns it.
    /// </summary>
    /// <returns>
    /// The <c>JmgProfileReportWeekTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('JmgProfileReportWeekTmp')
    ]
    public JmgProfileReportWeekTmp getJmgProfileReportWeekTmp()
    {
        select * from jmgProfileReportWeekTmp;
        return jmgProfileReportWeekTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the database.
    /// </summary>
    /// <param name="_common">
    /// The record to insert.
    /// </param>
    protected void insert(Common _common)
    {
        _common.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProfileIfNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>JmgProfileReportWeekTmp</c> table.
    /// </summary>
    private void insertProfileIfNotEmpty()
    {
        if (jmgProfileReportWeekTmp.ProfileHeader)
        {
            this.insert(jmgProfileReportWeekTmp);
            jmgProfileReportWeekTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the specified day in the <c>JmgProfileReportWeekTmp</c> record.
    /// </summary>
    /// <param name="_jmgProfileReportWeekTmp">
    ///    The <c>JmgProfileReportWeekTmp</c> record in which to mark a day.
    /// </param>
    /// <param name="_dayId">
    ///    The ID of the day to mark.
    /// </param>
    private void markDay(JmgProfileReportWeekTmp _jmgProfileReportWeekTmp, int _dayId)
    {
        str mark = "@SYS39150";

        switch (_dayId)
        {
            case 0:
                _jmgProfileReportWeekTmp.Monday = mark;
                break;
            case 1:
                _jmgProfileReportWeekTmp.Tuesday = mark;
                break;
            case 2:
                _jmgProfileReportWeekTmp.Wednsday = mark;
                break;
            case 3:
                _jmgProfileReportWeekTmp.Thursday = mark;
                break;
            case 4:
                _jmgProfileReportWeekTmp.Friday = mark;
                break;
            case 5:
                _jmgProfileReportWeekTmp.Saturday = mark;
                break;
            case 6:
                _jmgProfileReportWeekTmp.Sunday = mark;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>notEqual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the two specified <c>JmgProfileSpec</c> records are equal.
    /// </summary>
    /// <param name="_jmgProfileSpecPrev">
    ///    The first <c>JmgProfileSpec</c> record to compare.
    /// </param>
    /// <param name="_jmgProfileSpec">
    ///    The second <c>JmgProfileSpec</c> record to compare.
    /// </param>
    /// <returns>
    ///    true if the two specified <c>JmgProfileSpec</c> records are not equal; otherwise, false.
    /// </returns>
    private boolean notEqual(JmgProfileSpec _jmgProfileSpecPrev, JmgProfileSpec _jmgProfileSpec)
    {
        return _jmgProfileSpecPrev.ProfileType              != _jmgProfileSpec.ProfileType
               || _jmgProfileSpecPrev.StartTime             != _jmgProfileSpec.StartTime
               || _jmgProfileSpecPrev.EndTime               != _jmgProfileSpec.EndTime
               || _jmgProfileSpecPrev.StartDay              != _jmgProfileSpec.StartDay
               || _jmgProfileSpecPrev.EndDay                != _jmgProfileSpec.EndDay
               || _jmgProfileSpecPrev.ToleranceBefore       != _jmgProfileSpec.ToleranceBefore
               || _jmgProfileSpecPrev.ToleranceAfter        != _jmgProfileSpec.ToleranceAfter
               || _jmgProfileSpecPrev.EventCode             != _jmgProfileSpec.EventCode
               || _jmgProfileSpecPrev.SecondaryProfileType  != _jmgProfileSpec.SecondaryProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataForOneProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the internal <c>JmgProfileReportWeekTmp</c> temporary buffer with a single profile.
    /// </summary>
    /// <param name="_jmgProfileTable">
    /// The profile to populate.
    /// </param>
    protected void populateDataForOneProfile(JmgProfileTable _jmgProfileTable)
    {
        JmgProfileSpec      jmgProfileSpec;

        while select ProfileType, StartTime, EndTime, StartDay, EndDay, ToleranceBefore, ToleranceAfter, EventCode, SecondaryProfileType, DayId
            from jmgProfileSpec
            order by ProfileType, StartTime, EndTime, StartDay, EndDay, ToleranceBefore, ToleranceAfter, EventCode, SecondaryProfileType, DayId
            where jmgProfileSpec.Profile == _jmgProfileTable.Profile

        {
            this.populateDataForOneSpec(jmgProfileSpec, _jmgProfileTable);
        }

        this.insertProfileIfNotEmpty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataForOneSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the internal <c>JmgProfileReportWeekTmp</c> temporary buffer with a single profile specification line.
    /// </summary>
    /// <param name="_jmgProfileSpec">
    /// The profile specification to populate.
    /// </param>
    /// <param name="_jmgProfileTable">
    /// The profile to populate.
    /// </param>
    protected void populateDataForOneSpec(
        JmgProfileSpec      _jmgProfileSpec,
        JmgProfileTable     _jmgProfileTable)
    {
        if (this.notEqual(jmgProfileSpecPrev, _jmgProfileSpec))
        {
            this.insertProfileIfNotEmpty();
            jmgProfileReportWeekTmp.ProfileHeader       = JmgProfileWeekDP::generateProfileHeader(_jmgProfileTable.Profile, _jmgProfileTable.Description);
            jmgProfileReportWeekTmp.ProfilePayAgreement = JmgProfileWeekDP::genereatePayAgreement(_jmgProfileTable);
            jmgProfileReportWeekTmp.Type            = enum2str(JmgProfileTypeTable::find(_jmgProfileSpec.ProfileType).ProfileSpecType);
            jmgProfileReportWeekTmp.StartTime       = _jmgProfileSpec.StartTime;
            jmgProfileReportWeekTmp.EndTime         = _jmgProfileSpec.EndTime;
            jmgProfileReportWeekTmp.StartDay        = _jmgProfileSpec.StartDay;
            jmgProfileReportWeekTmp.EndDay          = _jmgProfileSpec.EndDay;
            jmgProfileReportWeekTmp.ToleranceBefore = _jmgProfileSpec.ToleranceBefore;
            jmgProfileReportWeekTmp.ToleranceAfter  = _jmgProfileSpec.ToleranceAfter;
            jmgProfileReportWeekTmp.EventCode       = _jmgProfileSpec.EventCode;
            jmgProfileReportWeekTmp.SecondaryType   = enum2str(JmgProfileTypeTable::find(_jmgProfileSpec.SecondaryProfileType).ProfileSpecType);
        }

        this.markDay(jmgProfileReportWeekTmp, _jmgProfileSpec.DayId);

        jmgProfileSpecPrev.data(_jmgProfileSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateJmgProfileReportWeekTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the internal <c>JmgProfileReportWeekTmp</c> temporary buffer.
    /// </summary>
    protected void populateJmgProfileReportWeekTmp()
    {
        JmgProfileTable jmgProfileTable;

        QueryRun queryRun = new SysQueryRun(this.parmQuery());

        while (queryRun.next())
        {
            jmgProfileTable = queryRun.get(tablenum(JmgProfileTable));

            this.populateDataForOneProfile(jmgProfileTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>JmgProfileWeek</c> report.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to the
    ///    SSRS. Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        super();
        this.populateJmgProfileReportWeekTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateProfileHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string to display as a profile header.
    /// </summary>
    /// <param name="_profileId">
    ///    The ID of the profile for which to retrieve a header.
    /// </param>
    /// <param name="_description">
    ///    The description to include in the profile header.
    /// </param>
    /// <returns>
    ///    A string to display as a profile header.
    /// </returns>
    private static str generateProfileHeader(str _profileId, str _description)
    {
        return strfmt("@SYS76766", _profileId, _description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>genereatePayAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string to display as pay agreement description.
    /// </summary>
    /// <param name="_jmgProfileTable">
    ///    The profile for which to retrieve the pay agreement description.
    /// </param>
    /// <returns>
    ///    A string to display as pay agreement description.
    /// </returns>
    private static str genereatePayAgreement(JmgProfileTable _jmgProfileTable)
    {
        if (_jmgProfileTable.PayAgreement)
        {
            return strfmt("@SYS39567", _jmgProfileTable.PayAgreement);
        }
        else
        {
            return "@SYS39568";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
