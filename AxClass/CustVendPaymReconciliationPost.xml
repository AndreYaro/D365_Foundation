<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymReconciliationPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendPaymReconciliationPost extends RunBaseBatch
{
    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    Query               query;
    RecordSortedList    createdJournals;
    RecordSortedList    transferredJournals;
    Object              callerForm;

    // Packed variables
    Name                newName;
    NoYesId             deleteEmptyJournals;
    QueryRun            queryRun;

    // Dialog fields
    DialogField         dialogFieldJournalName;
    DialogField         dialogFieldDeleteEmpty;

    Counter             progressTotal;
    Counter             progressCounter;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        newName,
        deleteEmptyJournals
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookResearch</Name>
				<Source><![CDATA[
    void bookResearch()
    {
        if (this.parmCallerForm())
        {
            callerForm.bookResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> method
    ///    returns false, this method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentStatus</Name>
				<Source><![CDATA[
    abstract boolean checkPaymentStatus(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdJournals</Name>
				<Source><![CDATA[
    RecordSortedList createdJournals(RecordSortedList _createdJournals = createdJournals)
    {
        createdJournals = _createdJournals;
        return createdJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLedgerJournalTable</Name>
				<Source><![CDATA[
    LedgerJournalTable createNewLedgerJournalTable(LedgerJournalName _ledgerJournalName = null, LedgerJournalTable _ledgerJournalTable = null)
    {
        LedgerJournalTable  newLedgerJournalTable;

        ttsbegin;

        if (!_ledgerJournalName)
        {
            select firstonly _ledgerJournalName where _ledgerJournalName.JournalType == LedgerJournalType::Payment;
        }

        newLedgerJournalTable.JournalNum = JournalTableData::newTable(newLedgerJournalTable).nextJournalId();
        newLedgerJournalTable.JournalName = _ledgerJournalName.JournalName;
        newLedgerJournalTable.Name = newName;
        newLedgerJournalTable.NumberSequenceTable = _ledgerJournalName.NumberSequenceTable;
        newLedgerJournalTable.parmOffsetAccount(_ledgerJournalName.parmOffsetAccount(), _ledgerJournalName.OffsetAccountType);
        newLedgerJournalTable.JournalType = _ledgerJournalName.JournalType;
        newLedgerJournalTable.DocumentNum = _ledgerJournalName.DocumentNum;
        newLedgerJournalTable.FixedExchRate = _ledgerJournalName.FixedExchRate;
        newLedgerJournalTable.DetailSummaryPosting = _ledgerJournalName.DetailSummary;
        newLedgerJournalTable.FixedOffsetAccount = _ledgerJournalName.FixedOffsetAccount;
        newLedgerJournalTable.CurrencyCode = _ledgerJournalName.CurrencyCode;
        newLedgerJournalTable.CurrentOperationsTax = _ledgerJournalName.CurrentOperationsTax;
        newLedgerJournalTable.DetailSummaryPosting = DetailSummary::Detail;
        newLedgerJournalTable.VoucherAllocatedAtPosting = _ledgerJournalName.VoucherAllocatedAtPosting;
        newLedgerJournalTable.setDefaultDimension(_ledgerJournalName);
        newLedgerJournalTable.Approver = _ledgerJournalTable.Approver;
        newLedgerJournalTable.GroupBlockId = _ledgerJournalTable.GroupBlockId;
        newLedgerJournalTable.LinesLimitBeforeDistribution = _ledgerJournalTable.LinesLimitBeforeDistribution;
        newLedgerJournalTable.LedgerJournalInclTax = _ledgerJournalTable.LedgerJournalInclTax;

        if (newLedgerJournalTable.CurrencyCode)
        {
            newLedgerJournalTable.ExchRate = ExchangeRateHelper::exchRate(newLedgerJournalTable.CurrencyCode);
            newLedgerJournalTable.euroTriangulation = false;
            newLedgerJournalTable.ExchrateSecondary = ExchangeRateHelper::exchRateSecond(newLedgerJournalTable.CurrencyCode);
        }

        newLedgerJournalTable.insert();
        createdJournals.ins(newLedgerJournalTable);

        ttscommit;

        return newLedgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyJournals</Name>
				<Source><![CDATA[
    void deleteEmptyJournals(RecordSortedList _transferredJournals = this.transferredJournals())
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        ledgerJournalTrans.disableCache(true);

        if (_transferredJournals.first(ledgerJournalTable))
        {
            do
            {
                while select count(RecId) from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum

                if (ledgerJournalTrans.RecId == 0)
                {
                    ledgerJournalTable.reread();
                    ledgerJournalTable.delete();
                }
            }
            while (_transferredJournals.next(ledgerJournalTable));
        }
        ledgerJournalTrans.disableCache(false);
        Dictionary::dataFlush(tableNum(LedgerJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;
        dialogFieldJournalName = dialog.addFieldValue(extendedTypeStr(Name), newName, "@SYS66089", "@SYS66090");
        dialogFieldDeleteEmpty = dialog.addFieldValue(extendedTypeStr(NoYesId), deleteEmptyJournals, "@SYS67967", "@SYS67968");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        newName             = dialogFieldJournalName.value();
        deleteEmptyJournals = dialogFieldDeleteEmpty.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    abstract LedgerJournalType journalType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePaymentsToNewJournal</Name>
				<Source><![CDATA[
    void movePaymentsToNewJournal()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalName   ledgerJournalName;
        boolean             needsNewJournal;
        LedgerJournalId     newLedgerJournalId;
        int                 transferredLines;
        boolean             newJournalProcessing;
        Set                 movedLedgerJournalTransInfo = new Set(Types::Container);
        Set                 movedSpecTransControl = new Set(Types::Container);
        Set                 movedSpecTransControlTmp;
        SpecTrans           specTrans;
        boolean             specTransControl;
        // <GEERU>
        BankPaymentOrderJour_RU     bankPaymentOrderJour;
        PaymentOrderBudgetTrans_RU  paymentOrderBudgetTrans
        // </GEERU>
        ;

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax());

        this.progressInit(strFmt("@SYS66091", newName), progressTotal, #AviFindFile);

        while (queryRun.next())
        {
            this.progressUpdate(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.Voucher);

            if (queryRun.changed(tableNum(LedgerJournalName)))
            {
                if (transferredLines > 0)
                {
                    info(strFmt("@SYS63353", newLedgerJournalId));
                    transferredLines = 0;
                }

                ledgerJournalName   = queryRun.get(tableNum(LedgerJournalName));
                needsNewJournal     = true;
            }

            if (queryRun.changed(tableNum(LedgerJournalTable)))
            {
                ledgerJournalTable = queryRun.get(tableNum(LedgerJournalTable));
                newJournalProcessing    = true;
            }

            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            if (this.checkPaymentStatus(ledgerJournalTrans) ||
                (ledgerJournalTrans.Invisible && movedLedgerJournalTransInfo.in([ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate])))
            {
                transferredLines++;

                // Create a new journal and get the journalnumber of this
                if (needsNewJournal)
                {
                    newLedgerJournalId = this.createNewLedgerJournalTable(ledgerJournalName, ledgerJournalTable).JournalNum;
                    needsNewJournal = false;
                }

                if (newJournalProcessing)
                {
                    this.transferredJournals().ins(ledgerJournalTable);
                    newJournalProcessing    = false;
                }
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    bankPaymentOrderJour    = ledgerJournalTrans.bankPaymentOrderJour_RU(true);
                    paymentOrderBudgetTrans = ledgerJournalTrans.paymentOrderBudgetTrans_RU(true);

                    if (bankPaymentOrderJour)
                    {
                        bankPaymentOrderJour.JournalNum    = newLedgerJournalId;
                        bankPaymentOrderJour.doUpdate();
                    }

                    if (paymentOrderBudgetTrans)
                    {
                        paymentOrderBudgetTrans.JournalNum = newLedgerJournalId;
                        paymentOrderBudgetTrans.doUpdate();
                    }
                }
                // </GEERU>

                // Move the transaction to the new journal
                movedLedgerJournalTransInfo.add([ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate]);
                ledgerJournalTrans.JournalNum = newLedgerJournalId;
                ledgerJournalTrans.LineNum = transferredLines;
                ledgerJournalTrans.doUpdate();

                // Move Withholding tax to the new journal
                if (TaxWithholdCustVendPaymReconciliationPost_INFlight::instance().isEnabled())
                {
                    this.moveTaxWithholdToNewJournal_IN(ledgerJournalTrans, newLedgerJournalId);
                }
            }
        }

        if (transferredLines > 0)
        {
            info(strFmt("@SYS63353", newLedgerJournalId));
        }
        else
        {
            if (this.transferredJournals().len() == 0)
            {
                error("@SYS4205");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveTaxWithholdToNewJournal_IN</Name>
				<Source><![CDATA[
    private void moveTaxWithholdToNewJournal_IN(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalId _newLedgerJournalId)
    {
        boolean taxWithholdParameterMarked = TaxWithholdParameters_IN::checkTaxParameters();
        if (taxWithholdParameterMarked)
        {
            LedgerJournalTable newLedgerJournalTable = LedgerJournalTable::find(_newLedgerJournalId);

            TaxWithholdUncommitted_IN taxWithholdUncommitted;
            update_recordset taxWithholdUncommitted
                setting HeadingRecId = newLedgerJournalTable.RecId
                    where taxWithholdUncommitted.SourceTableId  == _ledgerJournalTrans.TableId
                        && taxWithholdUncommitted.SourceRecId == _ledgerJournalTrans.RecId
                        && taxWithholdUncommitted.HeadingTableId == newLedgerJournalTable.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        createdJournals = new RecordSortedList(tableNum(LedgerJournalTable));
        createdJournals.sortOrder(fieldNum(LedgerJournalTable,RecId));

        transferredJournals = new RecordSortedList(tableNum(LedgerJournalTable));
        transferredJournals.sortOrder(fieldNum(LedgerJournalTable,RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewJournals</Name>
				<Source><![CDATA[
    abstract void postNewJournals(RecordSortedList _createdJournals = this.createdJournals())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(VendAccount _vendAccount,
                        Voucher     _voucher)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@SYS66092", _vendAccount, _voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    void queryBuild()
    {
        QueryBuildDataSource    ledgerJournalNameDS;
        QueryBuildDataSource    ledgerJournalTableDS;
        QueryBuildDataSource    ledgerJournalTransDS;
        QueryBuildRange         queryBuildRange;
        ;

        query = new Query();

        // Datasources
        ledgerJournalNameDS     = query.addDataSource(tableNum(LedgerJournalName));
        ledgerJournalTableDS    = ledgerJournalNameDS.addDataSource(tableNum(LedgerJournalTable));
        ledgerJournalTransDS    = ledgerJournalTableDS.addDataSource(tableNum(LedgerJournalTrans));

        ledgerJournalNameDS.update(true);
        ledgerJournalTableDS.update(true);
        ledgerJournalTransDS.update(true);

        // Ranges LedgerJournalName
        queryBuildRange = ledgerJournalNameDS.addRange(fieldNum(LedgerJournalName, JournalType));
        queryBuildRange.value(queryValue(enum2str(this.journalType())));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = ledgerJournalNameDS.addRange(fieldNum(LedgerJournalName, JournalName));
        ledgerJournalNameDS.addOrderByField(fieldNum(LedgerJournalName, JournalName));

        // Ranges LedgerJournalTable
        queryBuildRange = ledgerJournalTableDS.addRange(fieldNum(LedgerJournalTable, Posted));
        queryBuildRange.value(queryValue(enum2str(NoYes::No)));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = ledgerJournalTableDS.addRange(fieldNum(LedgerJournalTable, JournalNum));

        // Ranges LedgerJournalTrans
        queryBuildRange = ledgerJournalTransDS.addRange(fieldNum(LedgerJournalTrans,Voucher));

        // Links between datasources
        ledgerJournalTableDS.addLink(fieldNum(LedgerJournalName, JournalName),fieldNum(LedgerJournalTable, JournalName));
        ledgerJournalTableDS.joinMode(JoinMode::InnerJoin);

        ledgerJournalTransDS.addLink(fieldNum(LedgerJournalTable, JournalNum),fieldNum(LedgerJournalTrans, JournalNum));
        ledgerJournalTransDS.joinMode(JoinMode::InnerJoin);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcJournalBalances</Name>
				<Source><![CDATA[
    void recalcJournalBalances(RecordSortedList _transferredJournals = this.transferredJournals())
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        ;

        ledgerJournalTrans.disableCache(true);

        if (_transferredJournals.first(ledgerJournalTable))
        {
            do
            {
                // Recalculate balances on the old journal
                [ledgerJournalTable.JournalTotalDebit,
                 ledgerJournalTable.JournalTotalCredit,
                 ledgerJournalTable.JournalTotalOffsetBalance] = LedgerJournalTable::journalBalanceMST(ledgerJournalTable.JournalNum);
                 ledgerJournalTable.update();
            }
            while (_transferredJournals.next(ledgerJournalTable));
        }
        ledgerJournalTrans.disableCache(false);
        Dictionary::dataFlush(tableNum(LedgerJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
        {
            throw error("");
        }

        try
        {
            ttsbegin;
            this.movePaymentsToNewJournal();
            this.bookResearch();
            this.recalcJournalBalances(this.transferredJournals());
            if (deleteEmptyJournals)
            {
                this.deleteEmptyJournals(this.transferredJournals());
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        try
        {
            ttsbegin;
            this.postNewJournals(this.createdJournals());
            TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    abstract public TransTxt transactionLogTxt()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    abstract public TransactionLogType transactionLogType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferredJournals</Name>
				<Source><![CDATA[
    RecordSortedList transferredJournals(RecordSortedList _transferredJournals = transferredJournals)
    {
        transferredJournals = _transferredJournals;
        return transferredJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (! newName)
        {
            ret = checkFailed("@SYS63354");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymReconciliationPost construct(LedgerJournalType  _ledgerJournalType)
    {
        CustVendPaymReconciliationPost  paymReconciliationPost;

        switch (_ledgerJournalType)
        {
            case  LedgerJournalType::CustPayment :
                paymReconciliationPost = new CustPaymReconciliationPost();
                break;

            case  LedgerJournalType::Payment :
                paymReconciliationPost = new VendPaymReconciliationPost();
                break;

            case  LedgerJournalType::PayrollDisbursement :
                paymReconciliationPost = new PayrollPaymReconciliationPost();
                break;

            default :
                throw error(Error::missingRecord(funcName()));
        }

        return paymReconciliationPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS63355";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustVendPaymReconciliationPost   custVendPaymReconciliationPost;
        LedgerJournalTable               ledgerJournalTable;
        Object                           callerForm;
        ;

        if (args && args.dataset() == tableNum(LedgerJournalTable))
        {
            ledgerJournalTable = args.record();
        }
        else
        {
            throw error(strFmt("@SYS29104",classId2Name(classIdGet(custVendPaymReconciliationPost))));
        }

        if (ledgerJournalTable.RecId == 0)
        {
            return;
        }

        custVendPaymReconciliationPost = CustVendPaymReconciliationPost::construct(ledgerJournalTable.JournalType);

        callerForm = args.caller();

        if (callerForm)
        {
            custVendPaymReconciliationPost.parmCallerForm(callerForm);
        }

        if (custVendPaymReconciliationPost.prompt())
        {
            CustVendPaymReconciliationPost::runServer(ledgerJournalTable.JournalType, custVendPaymReconciliationPost.pack());
            custVendPaymReconciliationPost.bookResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    static void runServer(LedgerJournalType _ledgerJournalType, container _packedData)
    {
        CustVendPaymReconciliationPost  custVendPaymReconciliationPost = CustVendPaymReconciliationPost::construct(_ledgerJournalType);
        ;
        custVendPaymReconciliationPost.unpack(_packedData);
        custVendPaymReconciliationPost.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>