<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>UnitOfMeasureLookup</c> class provides the methods to perform lookup on the
///    <c>EcoResProduct</c> table, controls the <c>EcoResProductLookup</c> lookup form behavior, and
///    handles form events.
/// </summary>
class EcoResProductLookup
{
    boolean includeDistinctProductVariants;
    RecId   productMasterId;
    boolean includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that is used in the lookup form.
    /// </summary>
    /// <returns>
    ///    A query that is used in the lookup form.
    /// </returns>
    public Query lookupQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProduct = query.addDataSource(tableNum(EcoResProduct));

        if (!productMasterId)
        {
            if (!includeDistinctProductVariants)
            {
                if (includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled)
                {
                    EcoResProduct::queryFilterProductVariantUnitConversionEnabled(query);
                }
                else
                {
                    EcoResProduct::queryFilterOutProductVariants(query);
                }
            }
        }
        else
        {
            QueryBuildDataSource qbdsEcoResDistinctProductVariant = qbdsProduct.addDataSource(tableNum(EcoResDistinctProductVariant));
            qbdsEcoResDistinctProductVariant.relations(false);
            qbdsEcoResDistinctProductVariant.addLink(fieldNum(EcoResProduct,RecId), fieldNum(EcoResDistinctProductVariant, RecId));
            qbdsEcoResDistinctProductVariant.joinMode(JoinMode::ExistsJoin);

            qbdsEcoResDistinctProductVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(productMasterId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOnlyProductMasterWithUnitOfMeasureConversionsEnabled</Name>
				<Source><![CDATA[
    private boolean parmIncludeOnlyProductMasterWithUnitOfMeasureConversionsEnabled(boolean _includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled = includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled)
    {
        includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled = _includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled;

        return includeOnlyProductMasterWithUnitOfMeasureConversionsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDistinctProductVariants</Name>
				<Source><![CDATA[
    public boolean parmIncludeDistinctProductVariants(boolean _includeDistinctProductVariants = includeDistinctProductVariants)
    {
        includeDistinctProductVariants = _includeDistinctProductVariants;

        return includeDistinctProductVariants;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs lookup on the <c>EcoResProduct</c> table from a <c>FormReferenceControl</c> form control
    ///    bound to a product ID field.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    A <c>FormReferenceControl</c> form control bound to a product ID field.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProduct</c> table that is selected by the user.
    /// </returns>
    public EcoResProduct performLookup(FormReferenceControl _formReferenceControl)
    {
        Args args = new Args();
        args.name(formStr(EcoResProductLookup));
        args.caller(this);

        args.lookupField(fieldNum(EcoResProduct, RecId));
        args.lookupValue(int642str(_formReferenceControl.value()));

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        _formReferenceControl.performFormLookup(formRun);
        EcoResProduct ecoResProduct = formRun.selectRecordModeSelectedRecord() as EcoResProduct;

        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A <c>FormReferenceControl</c> form control bound to a product ID field.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProduct</c> table.
    /// </returns>
    /// <remarks>
    /// The function is used to resolve a product number to an <c>EcoResProduct</c> record.
    /// </remarks>
    public EcoResProduct resolveReference(FormReferenceControl _formReferenceControl)
    {
        FieldBinding fieldBinding = AbsoluteFieldBinding::construct(
            fieldStr(EcoResProduct, DisplayProductNumber), tableStr(EcoResProduct));

        EcoResProductDisplayProductNumber   productNumber = _formReferenceControl.filterValue(fieldBinding).value();
        EcoResProduct                       product = EcoResProduct::findByDisplayProductNumber(productNumber);

        //resolve to product if found and if can resolve to variant
        if (    product.RecId                 == 0
            || (!includeDistinctProductVariants && product is EcoResDistinctProductVariant))
        {
            // Assigning null to selectedRecord does not cause the kernel to receive a true null value, but rather
            // just an empty record. Return null directly so the kernel knows that the intent is to not clear the
            // selected value.
            return null;
        }

        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EcoResProductLookup construct()
    {
        return new EcoResProductLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeDistinctProductVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductLookup</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>EcoResProductLookup</c> class.
    /// </returns>
    /// <remarks>
    ///    Product variants will be excluded into the lookup by default.
    /// </remarks>
    public static EcoResProductLookup newExcludeDistinctProductVariants()
    {
        EcoResProductLookup ecoResProductLookup = EcoResProductLookup::construct();

        ecoResProductLookup.parmIncludeDistinctProductVariants(false);

        return ecoResProductLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIncludeDistinctProductVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductLookup</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>EcoResProductLookup</c> class.
    /// </returns>
    /// <remarks>
    ///    Product variants will be included into the lookup by default.
    /// </remarks>
    public static EcoResProductLookup newIncludeDistinctProductVariants()
    {
        EcoResProductLookup ecoResProductLookup = EcoResProductLookup::construct();

        ecoResProductLookup.parmIncludeDistinctProductVariants(true);

        return ecoResProductLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductMasterRecId</Name>
				<Source><![CDATA[
    public RecId parmProductMasterRecId(RecId _productMasterId = productMasterId)
    {
        productMasterId = _productMasterId;

        return productMasterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIncludeProductMasterVariantsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductLookup</c> class.
    /// </summary>
    /// <param name="_productMaster">
    ///     A reference to a <c>EcoResProductMaster</c> to use as a filter for the returned
    ///         product variants.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>EcoResProductLookup</c> class.
    /// </returns>
    /// <remarks>
    ///    Product variants will be included, but only those for the referenced Product Master.
    /// </remarks>
    public static EcoResProductLookup newIncludeProductMasterVariantsOnly(RecId _productMaster)
    {
        EcoResProductLookup ecoResProductLookup = EcoResProductLookup::construct();

        ecoResProductLookup.parmProductMasterRecId(_productMaster);

        return ecoResProductLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIncludeProductMasterWithUnitOfMeasureConversionsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductLookup</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>EcoResProductLookup</c> class.
    /// </returns>
    /// <remarks>
    ///  Product masters with enabled unit of measure conversions will be included into the lookup by default.
    /// </remarks>
    public static EcoResProductLookup newIncludeProductMasterWithUnitOfMeasureConversionsEnabled()
    {
        EcoResProductLookup ecoResProductLookup = EcoResProductLookup::construct();

        ecoResProductLookup.parmIncludeOnlyProductMasterWithUnitOfMeasureConversionsEnabled(true);

        return ecoResProductLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>