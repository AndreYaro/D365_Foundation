<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationErrorObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationErrorObject</c> class is object of error.
/// </summary>
public class TaxIntegrationErrorObject
{
    private TaxIntegrationErrorCode errorCode;
    private TaxIntegrationErrorMessage errorMessage;
    private TaxIntegrationErrorValidationType errorValidationType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>TaxIntegrationErrorObject</c>.
    /// </summary>
    /// <param name = "_errorCode">The error code.</param>
    /// <param name = "_errorMessage">The error message.</param>
    /// <returns></returns>
    public static TaxIntegrationErrorObject construct(TaxIntegrationErrorCode _errorCode, TaxIntegrationErrorMessage _errorMessage)
    {
        TaxIntegrationErrorObject errorObject = new TaxIntegrationErrorObject();
        errorObject.errorCode = _errorCode;
        errorObject.errorMessage = _errorMessage;
        errorObject.errorValidationType = TaxIntegrationErrorObject::determineErrorValidationType(_errorCode);
        return errorObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is error.
    /// </summary>
    /// <returns>True if is error; otherwise, false.</returns>
    public boolean isError()
    {
        return this.errorValidationType == TaxIntegrationErrorValidationType::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>display</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the error object.
    /// </summary>
    public void display()
    {
        switch (this.errorValidationType)
        {
            case TaxIntegrationErrorValidationType::Error:
                error(strFmt("@TaxIntegrationException:RemoteExceptionReceivedErrorCode", this.getErrorCode(), this.getErrorMessage()));
                break;
            case TaxIntegrationErrorValidationType::Warning:
                warning(strFmt("@TaxIntegrationException:RemoteExceptionReceivedErrorCode", this.getErrorCode(), this.getErrorMessage()));
                break;
            case TaxIntegrationErrorValidationType::No:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error code.
    /// </summary>
    /// <returns>The error code.</returns>
    public TaxIntegrationErrorCode getErrorCode()
    {
        return errorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error message.
    /// </summary>
    /// <returns>The error message.</returns>
    public TaxIntegrationErrorMessage getErrorMessage()
    {
        return this.errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorValidationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error validation type.
    /// </summary>
    /// <returns>The error validation type.</returns>
    public TaxIntegrationErrorValidationType getErrorValidationType()
    {
        return this.errorValidationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineErrorValidationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the error validation type based on error code.
    /// </summary>
    /// <param name = "_errorCode">The error code.</param>
    /// <returns>The error validation type.</returns>
    protected static TaxIntegrationErrorValidationType determineErrorValidationType(TaxIntegrationErrorCode _errorCode)
    {
        TaxIntegrationErrorCodeTable errorCodeTable = TaxIntegrationErrorCodeTable::find(_errorCode);
        TaxIntegrationErrorValidationType errorValidationType;

        if (errorCodeTable)
        {
            errorValidationType = errorCodeTable.ErrorValidation;
        }
        else
        {
            errorValidationType = TaxIntegrationTaxServiceParameters::find().DefaultErrorValidation;
        }
        return errorValidationType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>