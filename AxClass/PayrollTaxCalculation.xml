<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollTaxCalculation</c> class assists in the calculation of payroll taxes.
/// </summary>
public class PayrollTaxCalculation
{
    #PayrollConstants
    str                                         uniqueTaxId;

    PayrollTaxCodeType                          taxType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGNIS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the GNIS location code corresponding to the calculated tax.
    /// </summary>
    /// <returns>
    ///     The GNIS location code.
    /// </returns>
    public PayrollGNIS getGNIS()
    {
        return PayrollTaxEngineUtil::taxCalculation2TaxCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossSubjectWages</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Gross Subject Wages that applied to the calculated tax.
    /// </summary>
    /// <returns>
    ///     The Gross Subject Wages amount.
    /// </returns>
    public Amount getGrossSubjectWages()
    {
        Amount amt;

        // Round since gross-up calculations return unrounded values
        return CurrencyExchange::round(amt, PayrollSetup::currencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossWages</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Gross Wages that applied to the calculated tax.
    /// </summary>
    /// <returns>
    ///     The Gross Wages amount.
    /// </returns>
    public Amount getGrossWages()
    {
        Amount amt;
        // Round since gross-up calculations return unrounded values
        return CurrencyExchange::round(amt, PayrollSetup::currencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResidency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the residency of the worker for this calculation.
    /// </summary>
    /// <returns>
    ///     The residency enum value.
    /// </returns>
    public PayrollTaxResidency getResidency()
    {
        str                     residency;
        PayrollTaxResidency     taxResidency;

        residency = PayrollTaxEngineUtil::getTaxCodeSegment(uniqueTaxID, PayrollTaxCodeSegment::Residency);

        switch (residency)
        {
            case #RES:
                taxResidency = PayrollTaxResidency::Resident;
                break;

            case #NONRES:
                taxResidency = PayrollTaxResidency::NonResident;
                break;

            case #NA:
                taxResidency = PayrollTaxResidency::NotApplicable;
                break;
        }

        return taxResidency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchoolDistrictCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the school district code portion of the calculated tax.
    /// </summary>
    /// <returns>
    ///     The School District Code.
    /// </returns>
    public str getSchoolDistrictCode()
    {
        return PayrollTaxEngineUtil::getTaxCodeSegment(uniqueTaxID, PayrollTaxCodeSegment::TaxCodeTypeModifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the state enum for the calculated tax, with Federal being 0.
    /// </summary>
    /// <returns>
    ///     The state value.
    /// </returns>
    public PayrollUSState getState()
    {
        PayrollUSState      stateEnum;

        // The numeric code of the state segment of a tax code corresponds to a state array element
        stateEnum = str2int(PayrollTaxEngineUtil::getTaxCodeSegment(uniqueTaxId, PayrollTaxCodeSegment::State));

        return stateEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubjectWages</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Subject Wages that applied to the calculated tax.
    /// </summary>
    /// <returns>
    ///     The Subject Wages amount.
    /// </returns>
    public Amount getSubjectWages()
    {
        Amount amt;
        // Round since gross-up calculations return unrounded values
        return CurrencyExchange::round(amt, PayrollSetup::currencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the calculated tax amount.
    /// </summary>
    /// <returns>
    ///     The calculated tax amount.
    /// </returns>
    public Amount getTaxAmount()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Symmetry-specific tax code returned by the tax calculation.
    /// </summary>
    /// <returns>
    ///     The Symmetry-specific tax code.
    /// </returns>
    public PayrollTaxCodeId getTaxCode()
    {
        return PayrollTaxEngineUtil::taxCalculation2TaxCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPayType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calculation was for a wage type of Regular,
    ///     Supplemental or Combined.
    /// </summary>
    /// <returns>
    ///     The tax pay type.
    /// </returns>
    public PrlTaxPayType getTaxPayType()
    {
        PrlTaxPayType   taxPayType;
        str             steTaxPayType;

        steTaxPayType = PayrollTaxEngineUtil::getTaxCodeSegment(uniqueTaxID, PayrollTaxCodeSegment::TaxPayType);

        switch (steTaxPayType)
        {
            case #REG:
                taxPayType = PrlTaxPayType::Regular;
                break;

            case #SUP:
                taxPayType = PrlTaxPayType::Supplemental;
                break;

            case #COMB:
            default:
                taxPayType = PrlTaxPayType::Combined;
                break;
        }

        return taxPayType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnemploymentExcessWagesCurrentToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unemployment excess wages for the current pay period.
    /// </summary>
    /// <returns>
    ///     The unemployment excess wages.
    /// </returns>
    public Amount getUnemploymentExcessWagesCurrentToDate()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnemploymentRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unemployment wage rate.
    /// </summary>
    /// <returns>
    ///     The unemployment wage rate.
    /// </returns>
    public Amount getUnemploymentRate()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnemploymentWageBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unemployment wage base.
    /// </summary>
    /// <returns>
    ///     The unemployment wage base.
    /// </returns>
    public Amount getUnemploymentWageBase()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonRailroadUnemployment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not the calculation is a non-railroad calculation.
    /// </summary>
    /// <returns>
    ///     Returns true, if it is a non-railroad unemployment calculation; else, false.
    /// </returns>
    public boolean isNonRailroadUnemployment()
    {
        return (taxType == PayrollTaxCodeType::ER_FUTA || taxType == PayrollTaxCodeType::ER_SUTA);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRailroadUnemployment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not the calculation is a railroad unemployment calculation.
    /// </summary>
    /// <returns>
    ///     Returns true, if a railroad unemployment calculation; else, false.
    /// </returns>
    public boolean isRailroadUnemployment()
    {
        return (taxType == PayrollTaxCodeType::ER_RUIA);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnemployment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not the calculation is an unemployment calculation.
    /// </summary>
    /// <returns>
    ///     Returns true, if an unemployment calculation; else, false.
    /// </returns>
    public boolean isUnemployment()
    {
        return (this.isNonRailroadUnemployment() || this.isRailroadUnemployment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>Construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes internal variables of this class for an instance of a child class.
    /// </summary>
    public static PayrollTaxCalculation Construct()
    {
        return new PayrollTaxCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the tax type.
    /// </summary>
    /// <returns>
    ///     The type of the calculated tax.
    /// </returns>
    public PayrollTaxCodeType getTaxType()
    {
        return taxType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>