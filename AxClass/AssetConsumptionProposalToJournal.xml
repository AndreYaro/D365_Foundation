<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetConsumptionProposalToJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetConsumptionProposalToJournal extends RunBase
{
    QueryRun                queryRun;

    FormRun                 callerForm;
    LedgerJournalId         journalNum;

    AssetBudgetModelId      budgetModelId;
    DialogField             dlgBudgetModelId;
    // <GCN>
    LedgerVoucherTypeId_CN  voucherType_CN;
    boolean                 isChineseVoucher;
    #isoCountryRegionCodes
    // </GCN>

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        BudgetModelId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetJournal</Name>
				<Source><![CDATA[
    boolean budgetJournal()
    {
        return LedgerJournalTable::find(journalNum).journalType == LedgerJournalType::AssetBudgets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        ;

        if (this.budgetJournal())
        {
            dialog.addGroup("@SYS15436");
            dlgBudgetModelId = dialog.addField(extendedTypeStr(AssetBudgetModelId),"@SYS1966");
            dlgBudgetModelId.value(budgetModelId);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        if (this.budgetJournal())
            budgetModelId = dlgBudgetModelId.value();
        else
            budgetModelId = '';

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Args args)
    {
        Query       query;
        ;

        super();

        query = new Query();
        query.addDataSource(TableNum(TmpAssetConsumptionProposal)).addRange(fieldNum(TmpAssetConsumptionProposal, assetId));
        queryRun = new QueryRun(query);

        callerForm = args.caller();
        journalNum = args.caller().parmJournalNum();
        // <GCN>
        isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
        if (isChineseVoucher)
        {
            voucherType_CN = args.caller().parmVoucherType_CN();
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        TmpAssetConsumptionProposal tmpAssetConsumptionProposal;
        AssetJournal                assetJournal;
        // <GCN><GJP>
        AssetAllocator_CN           allocatorCN;
        boolean                     isCNorJPRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoJP]);
        // </GJP></GCN>

        queryRun.setCursor(callerForm.dataSource(1).cursor());

        assetJournal = new AssetJournal(journalNum,AssetTransTypeJournal::Depreciation);
        // <GCN><GJP>
        if (isCNorJPRegion)
        {
            allocatorCN = new AssetAllocator_CN();
        }
        // </GJP></GCN>
        // <GCN>
        if (assetJournal && isChineseVoucher)
        {
            // Set the voucher type for asset journal with the value user selected.
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
        ttsBegin;

        while (queryRun.next())
        {
            tmpAssetConsumptionProposal = queryRun.get(TableNum(TmpAssetConsumptionProposal));

            // <GCN><GJP>
            if (isCNorJPRegion && !this.budgetJournal())
            {
                allocatorCN.createTransJournal(
                    assetJournal,
                    -tmpAssetConsumptionProposal.Depreciation,
                    AssetBook::find(tmpAssetConsumptionProposal.AssetId, tmpAssetConsumptionProposal.BookId),
                    tmpAssetConsumptionProposal.TransDate,
                    budgetModelId,
                    0,
                    tmpAssetConsumptionProposal.Qty);
            }
            else
            {
            // </GCN></GJP>
                assetJournal.parmReportingCurrencyAmount(-tmpAssetConsumptionProposal.DepreciationReportingCurrency);
                assetJournal.createTrans(-tmpAssetConsumptionProposal.Depreciation,
                    AssetBook::find(tmpAssetConsumptionProposal.AssetId, tmpAssetConsumptionProposal.BookId),
                    tmpAssetConsumptionProposal.TransDate,
                    budgetModelId,
                    0,
                    tmpAssetConsumptionProposal.Qty);
            // <GCN><GJP>
            }
            // </GCN></GJP>
        }

        ttsCommit;

        callerForm.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS71096";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        AssetConsumptionProposalToJournal   proposalToJournal;

        if (!args || args.dataset() != tablenum(TmpAssetConsumptionProposal))
            throw error(strfmt("@SYS25516",AssetConsumptionProposalToJournal::description()));

        proposalToJournal = new AssetConsumptionProposalToJournal(args);

        if (proposalToJournal.prompt())
            proposalToJournal.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>