<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpWorkLineCreator_InfiniteLoopGuard_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplay_InfiniteLoopGuard_Extension</c> class guards againist infinite recursion before a stack overflow occurs.
/// </summary>
[ExtensionOf(classStr(WHSTmpWorkLineCreator))]
final internal class WHSTmpWorkLineCreator_InfiniteLoopGuard_Extension
{
    private InventQty prevRunningWorkQuantity = 0;
    private int iterationsWithoutProgress = 0;

    private const int AllowedNumberOfIterationsWithoutProgress = 100;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWorkAndTransactions</Name>
				<Source><![CDATA[
    internal void createWorkAndTransactions(WHSTmpWorkLine _tmpWorkLine, WHSInventQty _inventoryWorkQuantity)
    {
        prevRunningWorkQuantity = _inventoryWorkQuantity;
        iterationsWithoutProgress = 0;

        next createWorkAndTransactions(_tmpWorkLine, _inventoryWorkQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateAndCreateWork</Name>
				<Source><![CDATA[
    internal void allocateAndCreateWork(WHSTmpWorkLine _tmpWorkLine, WHSTmpWorkLine _locTmpWorkLine, UserConnection _conn)
    {
        next allocateAndCreateWork(_tmpWorkLine, _locTmpWorkLine, _conn);

        if (runningWorkQuantity == prevRunningWorkQuantity)
        {
            iterationsWithoutProgress++;
            if (iterationsWithoutProgress > AllowedNumberOfIterationsWithoutProgress)
            {    
                var stackTrace = new System.Diagnostics.StackTrace(false);
                str stackTraceAsString = stackTrace.ToString();

                this.createInfiniteLoopLog(strFmt('{ "stacktrace": "%1", "runningWorkQuantity": "%2", "tmpWorkLine": "%3", "locTmpWorkLine": "%4"}', stackTraceAsString, runningWorkQuantity, _tmpWorkLine.xml(), _locTmpWorkLine.xml()));
                throw error(strFmt("@WAX:WarehouseMobileDeviceInfiniteLoop", funcName()));
            }
        }
        else
        {
            prevRunningWorkQuantity = runningWorkQuantity;
            iterationsWithoutProgress = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInfiniteLoopLog</Name>
				<Source><![CDATA[
    private void createInfiniteLoopLog(str _logMessage)
    {
        UserConnection conn = new UserConnection();

        try
        {
            conn.ttsbegin();

            WHSOperationInternalErrorLog errorLog;

            errorLog.setConnection(conn);
            errorLog.ErrorType   = WHSOperationInternalErrorType::InfiniteLoop;
            errorLog.ClassName   = classStr(WHSTmpWorkLineCreator);
            errorLog.LogMsg      = _logMessage;

            errorLog.insert();

            conn.ttscommit();

            WHSWarehouseMobileDeviceTelemetryEventLogger::logMobileDeviceRequestInternalError(errorLog.ErrorType, errorLog.RecId);
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>