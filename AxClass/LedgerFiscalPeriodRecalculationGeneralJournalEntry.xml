<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalPeriodRecalculationGeneralJournalEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(classStr(LedgerFiscalPeriodRecalculation), classStr(LedgerFiscalPeriodRecalculationGeneralJournalEntry))]
[Export(identifierStr(Dynamics.AX.Application.LedgerFiscalPeriodRecalculation))]
internal final class LedgerFiscalPeriodRecalculationGeneralJournalEntry extends LedgerFiscalPeriodRecalculation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runRecalculation</Name>
				<Source><![CDATA[
    internal void runRecalculation()
    {
        if (this.calendarPeriodExist()
            && this.fiscalPeriodTypeExistsForTransactions(FiscalPeriodType::Opening)
            && this.fiscalPeriodTypeExistsForTransactions(FiscalPeriodType::Closing))
        {
            ttsbegin;

            this.updateJournalEntry();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerFiscalPeriodRecalculationClassName</Name>
				<Source><![CDATA[
    internal ClassName getLedgerFiscalPeriodRecalculationClassName()
    {
        return classStr(LedgerFiscalPeriodRecalculationGeneralJournalEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarPeriodExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the calendar periods exist for the existing transaction.
    /// </summary>
    /// <returns>
    /// true if all periods exists; otherwise, false.
    /// </returns>
    private boolean calendarPeriodExist()
    {
        LedgerRecId ledgerRecId = Ledger::current();
        FiscalCalendar fiscalCalendar = FiscalCalendar::find(Ledger::fiscalCalendar());
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        GeneralJournalEntry generalJournalEntry;
        boolean periodExist = true;

        while select AccountingDate from generalJournalEntry
            group by AccountingDate
            where generalJournalEntry.Ledger == ledgerRecId
            exists join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
            notexists join RecId from fiscalCalendarYear
                where fiscalCalendarYear.FiscalCalendar == fiscalCalendar.RecId &&
                    fiscalCalendarYear.StartDate <= generalJournalEntry.AccountingDate &&
                    fiscalCalendarYear.EndDate >= generalJournalEntry.AccountingDate
        {
            periodExist = false;
            warning(strfmt("@SYS330263", generalJournalEntry.AccountingDate, fiscalCalendar.CalendarId));
        }


        return periodExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriodTypeExistsForTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether all transactions in the existing calendar match a
    /// period in the new calendar for the period type.
    /// </summary>
    /// <param name="_fiscalPeriodType">The <c>FiscalPeriodType</c>.</param>
    /// <returns>
    /// True if the <c>GeneralJournalEntry</c> accounting date matches the related <c>FiscalCalendarPeriod</c>
    /// end date for period type transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The new period is joined by date because the foreign keys are in the process of changing.
    /// </remarks>
    private boolean fiscalPeriodTypeExistsForTransactions(FiscalPeriodType _fiscalPeriodType)
    {
        FiscalCalendarPeriod fiscalCalendarPeriodNew;
        FiscalCalendarPeriod fiscalCalendarPeriodCurrent;
        FiscalCalendarYear fiscalCalendarYear;
        FiscalCalendar currentFiscalCalendar = FiscalCalendar::find(Ledger::fiscalCalendar());
        GeneralJournalEntry generalJournalEntry;
        boolean periodsExist = true;
        ErrorMsg errorMessage;

        switch (_fiscalPeriodType)
        {
            case FiscalPeriodType::Opening:
                errorMessage = "@GeneralLedger:OpeningPeriodNotExistsForFiscalCalendar";

                break;

            case FiscalPeriodType::Closing:
                errorMessage = "@GeneralLedger:ClosingPeriodNotExistsForFiscalCalendar";

                break;

            default:
                throw error (error::wrongUseOfFunction(funcName()));
        }

        while select AccountingDate from generalJournalEntry
            group by AccountingDate
            where generalJournalEntry.Ledger == Ledger::current()
            // join to the current period because we only want to check the given period type
            exists join fiscalCalendarPeriodCurrent
                where fiscalCalendarPeriodCurrent.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriodCurrent.Type == _fiscalPeriodType
            // join to the new period by date because the foreign keys are in the process of being updated
            exists join fiscalCalendarYear
                where fiscalCalendarYear.FiscalCalendar == currentFiscalCalendar.RecId
                    && fiscalCalendarYear.StartDate <= generalJournalEntry.AccountingDate
                    && fiscalCalendarYear.EndDate >= generalJournalEntry.AccountingDate
            notexists join fiscalCalendarPeriodNew
                where fiscalCalendarPeriodNew.FiscalCalendarYear == fiscalCalendarYear.RecId
                    && fiscalCalendarPeriodNew.Type == _fiscalPeriodType
                    && fiscalCalendarPeriodNew.EndDate == generalJournalEntry.AccountingDate
        {
            periodsExist = checkFailed(strfmt(errorMessage, generalJournalEntry.AccountingDate, currentFiscalCalendar.CalendarId));
        }

        return periodsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>FiscalCalendarPeriod</c> field in <c>updateJournalEntry</c> records, depending on
    /// the fiscal calendar of the ledger.
    /// </summary>
    private void updateJournalEntry()
    {
        LedgerRecId calcLedgerRecId = Ledger::current();
        FiscalCalendarRecId calcFiscalCalendarRecId = Ledger::fiscalCalendar();

        this.updateFiscalPeriodByType(calcLedgerRecId, calcFiscalCalendarRecId, FiscalPeriodType::Operating);
        this.updateFiscalPeriodByType(calcLedgerRecId, calcFiscalCalendarRecId, FiscalPeriodType::Opening);
        this.updateFiscalPeriodByType(calcLedgerRecId, calcFiscalCalendarRecId, FiscalPeriodType::Closing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalPeriodByType</Name>
				<Source><![CDATA[
    private void updateFiscalPeriodByType(LedgerRecId _ledgerRecId, FiscalCalendarRecId _fiscalCalendarRecId, FiscalPeriodType _fiscalPeriodType)
    {
        FiscalCalendarPeriod fiscalCalendarPeriodNew;
        FiscalCalendarPeriod fiscalCalendarPeriodCurrent;
        FiscalCalendarYear fiscalCalendarYear;
        GeneralJournalEntry generalJournalEntry;

        // improve performance on recordset updates
        this.setAllSkip(generalJournalEntry);

        update_recordset generalJournalEntry
            setting FiscalCalendarPeriod = fiscalCalendarPeriodNew.RecId,
                FiscalCalendarYear = fiscalCalendarYear.RecId
            join fiscalCalendarPeriodCurrent
                where fiscalCalendarPeriodCurrent.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriodCurrent.Type == _fiscalPeriodType
            join fiscalCalendarYear
                where fiscalCalendarYear.FiscalCalendar == _fiscalCalendarRecId
                    && fiscalCalendarYear.StartDate <= generalJournalEntry.AccountingDate
                    && fiscalCalendarYear.EndDate >= generalJournalEntry.AccountingDate
            join fiscalCalendarPeriodNew
                where fiscalCalendarPeriodNew.FiscalCalendarYear == fiscalCalendarYear.RecId
                    && fiscalCalendarPeriodNew.StartDate <= generalJournalEntry.AccountingDate
                    && fiscalCalendarPeriodNew.EndDate >= generalJournalEntry.AccountingDate
                    && fiscalCalendarPeriodNew.Type == fiscalCalendarPeriodCurrent.Type
                    && generalJournalEntry.Ledger == _ledgerRecId
                    && (generalJournalEntry.FiscalCalendarPeriod != fiscalCalendarPeriodNew.RecId
                        || generalJournalEntry.FiscalCalendarYear != fiscalCalendarYear.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>