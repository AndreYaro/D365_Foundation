<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsBatchedDocumentRoutingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using Microsoft.Dynamics.AX.Framework.DocumentContract;

public final class WhsBatchedDocumentRoutingContext implements System.IDisposable
{
    private const int MaxFileLengthConversion = 1024 * 1024; 

    private static WhsBatchedDocumentRoutingContext instance;
    
    private Map batchedLabelsPerPrinter = new Map(Types::String, Types::Class);
    private boolean batchedPrint = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WhsBatchedDocumentRoutingContext construct()
    {
        if (instance)
        {
            return new WhsBatchedDocumentRoutingContext();
        }

        instance = new WhsBatchedDocumentRoutingContext();
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        if (this.isInstance())
        {
            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static WhsBatchedDocumentRoutingContext instance()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInstance</Name>
				<Source><![CDATA[
    private boolean isInstance()
    {
        return this == instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchLabel</Name>
				<Source><![CDATA[
    internal void batchLabel(Name _printerName, WHSZPL _zpl)
    {
        if (!this.isInstance())
        {
            instance.batchLabel(_printerName, _zpl);
            return;
        }

        System.Text.StringBuilder stringBuilderForPrinter;
        WHSSysCorpNetPrinters whsSysCorpNetPrinters = WHSSysCorpNetPrinters::find(_printerName);

        if (batchedLabelsPerPrinter.exists(_printerName))
        {
            stringBuilderForPrinter = batchedLabelsPerPrinter.lookup(_printerName);

            if (stringBuilderForPrinter.Length
            + SerializationHelper::ConvertStringToByteArray(_zpl, System.Text.Encoding::UTF8).Length
            > whsSysCorpNetPrinters.MaxWaveLabelFileSize * MaxFileLengthConversion)
            {
                WhsDocumentRouting::printLabelPrintCommandToPrinterWithEncoding(_printerName, new WhsLabelPrintCommand(WhsLabelPrintCommandType::ZPL, stringBuilderForPrinter.ToString()), System.Text.Encoding::UTF8);

                stringBuilderForPrinter.Clear();
            }
        }
        else
        {
            stringBuilderForPrinter = new System.Text.StringBuilder();
            batchedLabelsPerPrinter.insert(_printerName, stringBuilderForPrinter);
        }

        stringBuilderForPrinter.Append(_zpl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBatchedLabels</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void printBatchedLabels()
    {
        if (!this.isInstance())
        {
            return;
        }

        var labelsEnumerator = batchedLabelsPerPrinter.getEnumerator();
        while (labelsEnumerator.moveNext())
        {
            System.Text.StringBuilder stringBuilderForPrinter = labelsEnumerator.currentValue();
            WhsDocumentRouting::printLabelPrintCommandToPrinterWithEncoding(labelsEnumerator.currentKey(), new WhsLabelPrintCommand(WhsLabelPrintCommandType::ZPL, stringBuilderForPrinter.ToString()), System.Text.Encoding::UTF8);
        }

        batchedLabelsPerPrinter = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>