<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsPackingStructureForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsPackingStructureForm</c> class contains the business logic of the <c>whsPackingStructure</c> form.
/// </summary>
public class whsPackingStructureForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates current and parent UOM structures.
	/// </summary>
	/// <param name="_curUOMStructure">
	/// Current UOM structure to be updated.
	/// </param>
    void updateUOMStructure(WHSUOMStructure _curUOMStructure)
    {
        ttsbegin;
        _curUOMStructure.ItemId = _curUOMStructure.calcItem();

        WHSUOMStructure::initializeUOMStructure(_curUOMStructure);

        _curUOMStructure.update();

        if (_curUOMStructure.LicensePlateParent)
        {
            WHSUOMStructure uomStructure = WHSUOMStructure::find(_curUOMStructure.LicensePlateParent, _curUOMStructure.Module, _curUOMStructure.ShipmentId, true);

            this.updateUOMStructure(uomStructure);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsAsnItem_create</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens ASNItemCreate form when Create button is clicked for ASN item.
	/// </summary>
	/// <param name="_whsUOMStructurePallets">
	/// UOM structure of pallets.
	/// </param>
	/// <param name="_whsUOMStructureCases">
	/// UOM structure of cases.
	/// </param>
	/// <param name="_curUOMStructure">
	/// Current UOM structure.
	/// </param>
	/// <param name="_whsUOMStructureFlexi">
	/// Flexible UOM structure.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when pallet has packs and a case is not created for asn item.
	/// </exception>
    void whsAsnItem_create(WHSUOMStructure  _whsUOMStructurePallets,
                           WHSUOMStructure  _whsUOMStructureCases,
                           WHSUOMStructure  _curUOMStructure,
                           WHSUOMStructure  _whsUOMStructureFlexi,
                           Object           _caller)
    {
        FormRun     formRun;
        Args        args = new Args();

        if (_whsUOMStructurePallets.HasPacks && _whsUOMStructureCases.LicensePlateId == '')
        {
            throw error("@WAX1944");
        }

        if (!_whsUOMStructureFlexi)
        {
            throw error("@WAX:Error_PackingStructureASNItemWithoutContext");
        }

        _curUOMStructure = WHSUOMStructure::find(_whsUOMStructureFlexi.LicensePlateId, _whsUOMStructureFlexi.Module, _whsUOMStructureFlexi.ShipmentId, true);

        args.name(formStr(WHSASNItemCreate));
        args.record(_whsUOMStructureFlexi);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        this.updateUOMStructure(_curUOMStructure);

        FormDataUtil::getFormDataSource(_whsUOMStructurePallets).research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUOMStructureCases_create</Name>
				<Source><![CDATA[
    /// <summary>
	/// Open case creation form when Create button is clicked.
	/// </summary>
	/// <param name="_whsUOMStructure_Pallets">
	/// Pallet UOM structure of the to be created case.
	/// </param>
    /// <param name="_casesDS">The <c>FormDataSource</c> for the Cases section.</param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when pallet does not allow cases.
	/// </exception>
    void whsUOMStructureCases_create(WHSUOMStructure  _whsUOMStructure_Pallets, FormDataSource _casesDS)
    {
        if (!_whsUOMStructure_Pallets.HasPacks)
        {
            throw error("@WAX4697");
        }

        Args args = new Args();
        args.name(formStr(WHSCaseCreate));
        args.record(_whsUOMStructure_Pallets);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        // Refresh the Pallets data source, becaue the totals might have changed.
        FormDataUtil::getFormDataSource(_whsUOMStructure_Pallets).research(true);

        // Refresh the Cases data source and position to the new record.
        WHSUOMStructure newCaseRecord = formRun.dataSource().cursor() as WHSUOMStructure;

        if (_casesDS)
        {
            _casesDS.research();
            if (newCaseRecord)
            {
                _casesDS.positionToRecord(newCaseRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUOMStructurePallets_create</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens pallet creation form when Create button is clicked.
	/// </summary>
	/// <param name="_whsLoadTable">
	/// Load that contains the pallet to be created.
	/// </param>
    /// <param name="_palletsDS">
	/// Pallet UOM structure form data source.
	/// </param>
    void whsUOMStructurePallets_create(WHSLoadTable   _whsLoadTable,
                                       FormDataSource _palletsDS)
    {
        Args args = new Args();
        args.name(formStr(WHSPalletCreate));
        args.record(_whsLoadTable);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        WHSUOMStructure newPalletRecord = formRun.dataSource().cursor() as WHSUOMStructure;

        if (_palletsDS)
        {
            _palletsDS.research();
            if (newPalletRecord)
            {
                _palletsDS.positionToRecord(newPalletRecord);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>