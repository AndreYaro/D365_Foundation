<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSFormBuilderRunWithRetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSFormBuilderRunWithRetry</c> class is used for running a build form action that can be executed and retried using a <c>WHSWorkExecutionExceptionHandler</c>.
/// </summary>
internal static class WHSFormBuilderRunWithRetry
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a build form action, with any exceptions caught and retried using the specified <c>WHSWorkExecutionExceptionHandler</c>.
    /// </summary>
    /// <param name = "_action">The action to run.</param>
    /// <param name = "_exceptionHandler">The exception handler to use.</param>
    /// <param name = "_processor">The <c>WhsWorkExecuteDisplayProcessor</c> object.</param>
    /// <param name = "_userId">The ID of the current user.</param>
    /// <returns>The results of the execution.</returns>
    internal static WHSExecuteProcessEventHandlerResultValue run(
        WHSRetryableFormBuilder _action,
        WHSWorkExecutionExceptionHandler _exceptionHandler,
        WhsWorkExecuteDisplayProcessor _processor,
        UserId _userId)
    {
        System.Exception exception;
        int infologlinesStart = infologLine();
        WHSExecuteProcessEventHandlerResultValue result;
        WHSWorkExecutionExceptionHandlerResult exceptionResult;
        WHSWorkExecutionExceptionHandler exceptionHandler = _exceptionHandler;
       
        try
        {
            exceptionResult = null;

            ttsbegin;

            WHSWorkUserSessionInProgressLock::lockWorkUserSession(_userId);

            result = _action.buildForm();

            if (result.isFormContainerStoredInUserSession && !result.xmlState)
            {
                [result.formContainer, result.xmlState] = _processor.createXmlStateAndUpdateSession(result.formContainer);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            exceptionResult = exceptionHandler.handleDeadlockException();
            if (exceptionResult.doRetry)
            {
                exceptionHandler = _action.prepareForRetry(exceptionHandler);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
            {
                exceptionResult = exceptionHandler.handleTransientSqlConnectionErrorException();
                if (exceptionResult.doRetry)
                {
                    exceptionHandler = _action.prepareForRetry(exceptionHandler);
                    retry;
                }
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            exceptionResult = exceptionHandler.handleUpdateConflict();
            if (exceptionResult.doRetry)
            {
                exceptionHandler = _action.prepareForRetry(exceptionHandler);
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            exceptionResult = exceptionHandler.handleDuplicateKeyException();
            if (exceptionResult.doRetry)
            {
                exceptionHandler = _action.prepareForRetry(exceptionHandler);
                retry;
            }
        }
        catch (exception)
        {
            exceptionResult = exceptionHandler.handleSystemException(infologlinesStart, exception.Message);
        }
        catch
        {
            exceptionResult = exceptionHandler.handleException(infologlinesStart);
        }

        if (exceptionResult)
        {
            _action.onFailure();
            str xml;
            [exceptionResult.formStateContainer, xml] = _processor.createXmlStateAndUpdateSession(exceptionResult.formStateContainer);

            result = WHSExecuteProcessEventHandlerResultValue::constructFromParameters(
                exceptionResult.formStateContainer,
                xml,
                false); // isFormContainerStoredInUserSession. Interpreted as success/failure when using WhsBatchedDocumentRoutingContext in buildNextFormState().
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>