<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerAllocator</c> class performs ledger account allocation.
/// </summary>
[ExportMetadataAttribute("SubledgerIAllocatorProvider", "LedgerAllocator"), ExportAttribute("Dynamics.AX.Application.SubledgerIAllocatorProvider")]
class LedgerAllocator implements SubledgerIAllocatorProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllocationList</Name>
				<Source><![CDATA[
    public SubledgerAllocationItemList getAllocationList(SubledgerAllocationItem _subledgerAllocationItem)
    {
        LedgerAllocationItem                        allocationItem;
        List                                        allocationItemList;
        ListEnumerator                              allocationEnumerator;

        SubledgerAllocationItem                     allocatedSubledgerAllocationItem;
        SubledgerAllocationItemList                 allocatedSubledgerAllocationItemList;

        // Initialize the allocated list for return values
        allocatedSubledgerAllocationItemList = SubledgerAllocationItemList::construct();

        allocationItemList = this.getAllocationItemListFromController(_subledgerAllocationItem);

        if (!allocationItemList.empty())
        {
            allocationEnumerator = allocationItemList.getEnumerator();

            while (allocationEnumerator.moveNext())
            {
                allocationItem = allocationEnumerator.current();

                allocatedSubledgerAllocationItem = this.createAllocatedSubledgerAllocationItem(_subledgerAllocationItem, allocationItem);

                allocatedSubledgerAllocationItemList.addEnd(allocatedSubledgerAllocationItem);
            }
        }

        return allocatedSubledgerAllocationItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllocatedSubledgerAllocationItem</Name>
				<Source><![CDATA[
    private SubledgerAllocationItem createAllocatedSubledgerAllocationItem(SubledgerAllocationItem _subledgerAllocationItem, LedgerAllocationItem _ledgerAllocationItem)
    {
        SubledgerAllocationItem     allocatedSubledgerAllocationItem;
        LedgerDimensionAccount      ledgerDimension;
        RecId                       mainAccountRecId;

        mainAccountRecId = _ledgerAllocationItem.parmMainAccountId();
        ledgerDimension = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(
                                        mainAccountRecId,
                                        DimensionHierarchy::getAccountStructure(mainAccountRecId,
                                        Ledger::primaryLedger(_subledgerAllocationItem.parmLegalEntityRecId())),
                                        _ledgerAllocationItem.parmDefaultDimension());

        allocatedSubledgerAllocationItem = new SubledgerAllocationItem();

        allocatedSubledgerAllocationItem.parmLedgerDimension(ledgerDimension);

        allocatedSubledgerAllocationItem.parmTransactionCurrencyCode(_subledgerAllocationItem.parmTransactionCurrencyCode());
        allocatedSubledgerAllocationItem.parmLegalEntityRecId(_subledgerAllocationItem.parmLegalEntityRecId());

        allocatedSubledgerAllocationItem.parmTransactionCurrencyAmount(_ledgerAllocationItem.parmTransactionCurrencyAmount());
        allocatedSubledgerAllocationItem.parmAccountingCurrencyAmount(_ledgerAllocationItem.parmAccountingCurrencyAmount());
        allocatedSubledgerAllocationItem.parmReportingCurrencyAmount(_ledgerAllocationItem.parmReportingCurrencyAmount());

        return allocatedSubledgerAllocationItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationItemListFromController</Name>
				<Source><![CDATA[
    protected List getAllocationItemListFromController(SubledgerAllocationItem _subledgerAllocationItem)
    {
        LedgerAllocationController                  controller;
        LedgerAllocationItem                        baseItem;
        DimensionDefault                            defaultDimension;
        LedgerDimensionDefaultAccount               ledgerDimensionDefaultAccount;
        List allocationList;

        const percent percent = 1;
        const Qty quantity = 0;

        // LedgerAllocationController must be called in the company context for the allocation terms
        changecompany(CompanyInfo::findRecId(_subledgerAllocationItem.parmLegalEntityRecId()).DataArea)
        {
            ledgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_subledgerAllocationItem.parmLedgerDimension());

            defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_subledgerAllocationItem.parmLedgerDimension());
            baseItem = LedgerAllocationItem::constructFromLedgerDimension(ledgerDimensionDefaultAccount, defaultDimension);
            baseItem.setAmounts(_subledgerAllocationItem.parmTransactionCurrencyAmount(),
                            _subledgerAllocationItem.parmAccountingCurrencyAmount(),
                            _subledgerAllocationItem.parmReportingCurrencyAmount(),
                            quantity,
                            percent);

            controller = LedgerAllocationController::newNetDifference(_subledgerAllocationItem.parmTransactionCurrencyCode());

            allocationList = controller.allocate(baseItem);
        }

        return allocationList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>