<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBAssessmentBookISSAcquiredServiceDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBAssessmentBookISSAcquiredServiceDP_BR</c> class is the data provider class for the ISS for acquired services report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBAssessmentBookISSContract_BR))]
class FBAssessmentBookISSAcquiredServiceDP_BR extends SRSReportDataProviderBase
{
    FBAssessmentBookISSAcquiredServiceTmp_BR taxAssessmentISSReportTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        FBAssessmentBookISSContract_BR  contract = this.parmDataContract() as FBAssessmentBookISSContract_BR;

        query = new Query();

        // FBBookingPeriodFiscalDocument_BR
        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, HasIss)).value(SysQuery::value(NoYes::Yes));

        // FiscalDocument_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, AccountingDate));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, Specie));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentNumber));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyCNPJCPF));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyPostalAddress));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, DataAreaId));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, RecId));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, TotalAmount));
        qbds.addRange(fieldNum(FiscalDocument_BR, Direction)).value(SysQuery::value(FiscalDocDirection_BR::Incoming));

        // FiscalDocumentLine_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        // FiscalDocumentTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTrans_BR, Type));
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTrans_BR, TaxValue));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addRange(fieldNum(FiscalDocumentTaxTrans_BR, Type)).value(SysQuery::value(TaxType_BR::ISS));

        // LogisticsPostalAddress
        query.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
        qbds = query.dataSourceTable(tableNum(FiscalDocument_BR)).addDataSource(tableNum(LogisticsPostalAddress));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FiscalDocument_BR, ThirdPartyPostalAddress), fieldNum(LogisticsPostalAddress, RecId));
        qbds.addGroupByField(fieldNum(LogisticsPostalAddress, City));
        qbds.addGroupByField(fieldNum(LogisticsPostalAddress, State));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountRetainedByTaxValue</Name>
				<Source><![CDATA[
        private AmountMST getTaxAmountRetainedByTaxValue(FiscalDocumentRecId_BR _fiscalDocumentRecId, TaxValue _taxValue)
    {
        FiscalDocumentTaxTransView_BR   fiscalDocumentTaxTransView;
        FiscalDocumentLine_BR           fiscalDocumentLine;

        select sum(TaxAmount) from fiscalDocumentTaxTransView
            where fiscalDocumentTaxTransView.RetainedTax == NoYes::Yes
                && fiscalDocumentTaxTransView.Type == TaxType_BR::ISS
                && fiscalDocumentTaxTransView.TaxValue == _taxValue
            exists join fiscalDocumentLine
                where fiscalDocumentTaxTransView.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentLine.FiscalDocument == _fiscalDocumentRecId;

        return fiscalDocumentTaxTransView.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAssessmentISSReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FBAssessmentBookISSAcquiredServiceTmp_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>FBAssessmentBookISSAcquiredServiceTmp_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(FBAssessmentBookISSAcquiredServiceTmp_BR))]
    public FBAssessmentBookISSAcquiredServiceTmp_BR getTaxAssessmentISSReportTmp()
    {
        return taxAssessmentISSReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                           query;
        QueryRun                        queryRun;

        FiscalDocument_BR               fiscalDocument;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTrans;
        LogisticsPostalAddress          thidPartyPostalAddress;

        FBAssessmentBookISSContract_BR  contract;

        contract = this.parmDataContract() as FBAssessmentBookISSContract_BR;

        changeCompany(contract.parmFiscalEstablishmentDataArea())
        {
            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fiscalDocument          = queryRun.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine      = queryRun.get(tableNum(FiscalDocumentLine_BR));
                fiscalDocumentTaxTrans  = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
                thidPartyPostalAddress  = queryRun.get(tableNum(LogisticsPostalAddress));

                taxAssessmentISSReportTmp.clear();

                taxAssessmentISSReportTmp.AccountingDate        = fiscalDocument.AccountingDate;
                taxAssessmentISSReportTmp.FiscalDocumentSpecie  = fiscalDocument.Specie;
                taxAssessmentISSReportTmp.FiscalDocumentSeries  = fiscalDocument.FiscalDocumentSeries;
                taxAssessmentISSReportTmp.FiscalDocumentNumber  = fiscalDocument.FiscalDocumentNumber;
                taxAssessmentISSReportTmp.TotalAmount           = fiscalDocument.TotalAmount;
                taxAssessmentISSReportTmp.ThirdPartyCNPJCPF     = fiscalDocument.ThirdPartyCNPJCPF;
                taxAssessmentISSReportTmp.TaxValue              = fiscalDocumentTaxTrans.TaxValue;
                taxAssessmentISSReportTmp.Observation           = fiscalDocument.getLegalTextsAsString(DocuRestriction::Internal);
                taxAssessmentISSReportTmp.TaxBaseAmount         = fiscalDocumentTaxTrans.TaxBaseAmount;
                taxAssessmentISSReportTmp.TaxAmountRetained     = this.getTaxAmountRetainedByTaxValue(fiscalDocument.RecId, fiscalDocumentTaxTrans.TaxValue);
                taxAssessmentISSReportTmp.City                  = strFmt("%1-%2", thidPartyPostalAddress.City, thidPartyPostalAddress.State);

                taxAssessmentISSReportTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>