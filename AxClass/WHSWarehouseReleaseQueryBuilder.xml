<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseReleaseQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWarehouseReleaseQueryBuilder</c> class builds queries used to identify load lines that can be released to the warehouse.
/// </summary>
public class WHSWarehouseReleaseQueryBuilder
{
    private boolean useSalesLineDeliveryAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUseSalesLineDeliveryAddress</Name>
				<Source><![CDATA[
    public boolean parmUseSalesLineDeliveryAddress(boolean _useSalesLineDeliveryAddress = useSalesLineDeliveryAddress)
    {
        useSalesLineDeliveryAddress = _useSalesLineDeliveryAddress;
        
        return useSalesLineDeliveryAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse.
    /// </summary>
    /// <param name = "_releaseToWarehouseId">An ID used to identify the load lines.</param>
    /// <param name = "_useSalesLineDeliveryAddress">Determines if addresses from the sales lines or sales order should be used. True if the sales lines addresses should be used, false if the sales order address should be used.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    [SysObsolete('Use buildSalesOrderQueryForReleaseToWarehouseId method instead.', false, 30\06\2018)]
    public Query buildSalesOrderQuery(
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        boolean                 _useSalesLineDeliveryAddress)
    {
        this.useSalesLineDeliveryAddress = _useSalesLineDeliveryAddress;

        Query salesQuery = this.buildCommonSalesOrderQuery();
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.dataSourceTable(tableNum(WHSLoadLine));
        qbdsLoadLine.addRange(fieldNum(WHSLoadLine, ReleaseToWarehouseId)).value(queryValue(_releaseToWarehouseId));
        
        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse.
    /// </summary>
    /// <param name = "_releaseToWarehouseId">An ID used to identify the load lines.</param>
    /// <param name = "_useSalesLineDeliveryAddress">Determines if addresses from the sales lines or sales order should be used. True if the sales lines addresses should be used, false if the sales order address should be used.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    private Query buildSalesOrderQueryForPolicy(
        WHSShipConsolidationPolicyData      _shipConsolidationPolicyData,
        WHSReleaseToWarehouseId             _releaseToWarehouseId,
        boolean                             _useSalesLineDeliveryAddress)
    {
        this.useSalesLineDeliveryAddress = _useSalesLineDeliveryAddress;

        Query salesQuery = this.buildCommonSalesOrderQueryForPolicy(_shipConsolidationPolicyData);
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.dataSourceTable(tableNum(WHSLoadLine));
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, ReleaseToWarehouseId), queryValue(_releaseToWarehouseId));
        
        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransferIssueQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for transfer orders that can be released to the warehouse.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">An instance of <c>WHSShipConsolidationPolicyData</c>.</param>
    /// <param name = "_releaseToWarehouseId">An instance of <c>WHSReleaseToWarehouseId</c>.</param>
    /// <returns>A query that selects load lines for transfer orders that can be released to the warehouse.</returns>
    private Query buildTransferIssueQueryForPolicy(
        WHSShipConsolidationPolicyData      _shipConsolidationPolicyData,
        WHSReleaseToWarehouseId             _releaseToWarehouseId)
    {
        Query transferQuery = this.buildCommonTransferIssueQueryForPolicy(_shipConsolidationPolicyData);
        
        QueryBuildDataSource qbdsLoadLine = transferQuery.dataSourceTable(tableNum(WHSLoadLine));
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, ReleaseToWarehouseId), queryValue(_releaseToWarehouseId));
        
        return transferQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQueryForLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse for the specified load ID.
    /// </summary>
    /// <param name = "_loadId">A load ID used to select the load lines.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    public Query buildSalesOrderQueryForLoadId(WHSLoadId _loadId)
    {
        Query salesQuery = this.buildCommonSalesOrderQuery();
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.dataSourceTable(tableNum(WHSLoadLine));
        qbdsLoadLine.addRange(fieldNum(WHSLoadLine, LoadId)).value(queryValue(_loadId));
        
        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQueryForReleaseToWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse for the specified release to warehouse ID.
    /// </summary>
    /// <param name = "_releaseToWarehouseId">An ID used to identify the load lines.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    public Query buildSalesOrderQueryForReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId)
    {
        return this.buildSalesOrderQuery(_releaseToWarehouseId, this.useSalesLineDeliveryAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQueryForReleaseToWarehouseIdAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse for the specified release to warehouse ID.
    /// </summary>
    /// <param name = "_releaseToWarehouseId">An ID used to identify the load lines.</param>
    /// <param name = "_shipConsolidationPolicyData">An Shipment consolidation policy data object.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    public Query buildSalesOrderQueryForReleaseToWarehouseIdAndPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData, WHSReleaseToWarehouseId _releaseToWarehouseId)
    {
        return this.buildSalesOrderQueryForPolicy(_shipConsolidationPolicyData, _releaseToWarehouseId, this.useSalesLineDeliveryAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderQueryForLoadIdAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse for the specified load ID.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">An Shipment consolidation policy data object.</param>
    /// <param name = "_loadId">A load ID used to select the load lines.</param>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse.</returns>
    public Query buildSalesOrderQueryForLoadIdAndPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData, WHSLoadId _loadId)
    {
        Query salesQuery = this.buildCommonSalesOrderQueryForPolicy(_shipConsolidationPolicyData);
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.dataSourceTable(tableNum(WHSLoadLine));
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, LoadId), queryValue(_loadId));

        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransferIssueQueryForReleaseToWarehouseIdAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for transfer orders that can be released to the warehouse for the specified release to warehouse ID.
    /// </summary>
    /// <param name = "_releaseToWarehouseId">An ID used to identify the load lines.</param>
    /// <param name = "_shipConsolidationPolicyData">An Shipment consolidation policy data object.</param>
    /// <returns>A query that selects load lines for transfer orders that can be released to the warehouse.</returns>
    public Query buildTransferIssueQueryForReleaseToWarehouseIdAndPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData, WHSReleaseToWarehouseId _releaseToWarehouseId)
    {
        return this.buildTransferIssueQueryForPolicy(_shipConsolidationPolicyData, _releaseToWarehouseId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransferIssueQueryForLoadIdAndPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for transfer orders that can be released to the warehouse for the specified load ID.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">An Shipment consolidation policy data object.</param>
    /// <param name = "_loadId">A load ID used to select the load lines.</param>
    /// <returns>A query that selects load lines for transfer orders that can be released to the warehouse.</returns>
    public Query buildTransferIssueQueryForLoadIdAndPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData, WHSLoadId _loadId)
    {
        Query transferQuery = this.buildCommonTransferIssueQueryForPolicy(_shipConsolidationPolicyData);
        
        QueryBuildDataSource qbdsLoadLine = transferQuery.dataSourceTable(tableNum(WHSLoadLine));
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, LoadId), queryValue(_loadId));
        
        return transferQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCommonSalesOrderQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse.
    /// </summary>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse</returns>
    private Query buildCommonSalesOrderQuery()
    {
        Query salesQuery = new Query();

        // We include all addresses so we can inform users if lines are related to addresses that are no longer valid.
        salesQuery.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.addDataSource(tableNum(WHSLoadLine));
        qbdsLoadLine.addRange(fieldNum(WHSLoadLine, ShipmentId)).value(SysQuery::valueEmptyString());
        qbdsLoadLine.update(true);
        
        QueryBuildDataSource qbdsSalesLine = qbdsLoadLine.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.joinMode(JoinMode::InnerJoin);
        qbdsSalesLine.addLink(fieldNum(WHSLoadLine, InventTransId), fieldNum(SalesLine, InventTransId), qbdsLoadLine.name());
        qbdsSalesLine.fetchMode(QueryFetchMode::One2One);

        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, CustAccount));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DeliveryName));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, SalesId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, LineNum));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DlvMode));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, InventDimId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DlvTerm));

        QueryBuildDataSource qbdsSalesTable = qbdsSalesLine.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.joinMode(JoinMode::InnerJoin);
        qbdsSalesTable.fetchMode(QueryFetchMode::One2One);
        qbdsSalesTable.relations(true);

        QueryBuildDataSource qbdsAddress = qbdsSalesLine.addDataSource(tableNum(LogisticsPostalAddress));
        qbdsAddress.joinMode(JoinMode::InnerJoin);
        qbdsAddress.fetchMode(QueryFetchMode::One2One);

        if (useSalesLineDeliveryAddress)
        {
            qbdsAddress.addLink(fieldNum(SalesLine, DeliveryPostalAddress), fieldNum(LogisticsPostalAddress, RecId), qbdsSalesLine.name());
        }
        else
        {
            qbdsAddress.addLink(fieldNum(SalesTable, DeliveryPostalAddress), fieldNum(LogisticsPostalAddress, RecId), qbdsSalesTable.name());
        }
        
        QueryBuildDataSource qbdsInventDim = qbdsLoadLine.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.addLink(fieldNum(WHSLoadLine, InventDimId), fieldNum(InventDim, InventDimId), qbdsLoadLine.name());
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, SalesId));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, CustAccount));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, DeliveryName));

        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, Street));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, City));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, County));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, State));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, CountryRegionId));
        
        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCommonSalesOrderQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for sales orders that can be released to the warehouse.
    /// </summary>
    /// <returns>A query that selects load lines for sales orders that can be released to the warehouse</returns>
    private Query buildCommonSalesOrderQueryForPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData)
    {
        QueryRun    salesQueryRun = new QueryRun(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyQuery);
        Query       salesQuery    = salesQueryRun.query();

        // We include all addresses so we can inform users if lines are related to addresses that are no longer valid.
        salesQuery.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
        
        QueryBuildDataSource qbdsLoadLine = salesQuery.dataSourceTable(tableNum(WHSLoadLine));
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, ShipmentId), SysQuery::valueEmptyString());
        qbdsLoadLine.update(true);
        
        QueryBuildDataSource qbdsSalesLine = salesQuery.dataSourceTable(tableNum(SalesLine));
        qbdsSalesLine.fields().clearFieldList();
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, CustAccount));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DeliveryName));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, SalesId));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, LineNum));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DlvMode));
        qbdsSalesLine.addSelectionField(fieldNum(SalesLine, DlvTerm));

        if (WHSWareReleaseUseCrossDockForShipConsPoliciesFlightV3::instance().isEnabled())
        {
            qbdsSalesLine.addSelectionField(fieldNum(SalesLine, InventDimId));
        }

        QueryBuildDataSource qbdsSalesTable = salesQuery.dataSourceTable(tableNum(SalesTable));
            
        QueryBuildDataSource qbdsAddress = qbdsSalesLine.addDataSource(tableNum(LogisticsPostalAddress));
        qbdsAddress.joinMode(JoinMode::InnerJoin);
        qbdsAddress.fetchMode(QueryFetchMode::One2One);

        if (useSalesLineDeliveryAddress)
        {
            qbdsAddress.addLink(fieldNum(SalesLine, DeliveryPostalAddress), fieldNum(LogisticsPostalAddress, RecId), qbdsSalesLine.name());
        }
        else
        {
            qbdsAddress.addLink(fieldNum(SalesTable, DeliveryPostalAddress), fieldNum(LogisticsPostalAddress, RecId), qbdsSalesTable.name());
        }
        
        qbdsSalesLine.sortClear();
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, SalesId));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, CustAccount));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, DeliveryName));

        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, Street));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, City));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, County));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, State));
        qbdsAddress.addOrderByField(fieldNum(LogisticsPostalAddress, CountryRegionId));

        return salesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCommonTransferIssueQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects load lines for transfer orders that can be released to the warehouse.
    /// </summary>
    /// <returns>A query that selects load lines for transfer orders that can be released to the warehouse</returns>
    private Query buildCommonTransferIssueQueryForPolicy(WHSShipConsolidationPolicyData _shipConsolidationPolicyData)
    {
        QueryRun    transferQueryRun = new QueryRun(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyQuery);
        Query       transferQuery    = transferQueryRun.query();

        QueryBuildDataSource qbdsLoadLine = transferQuery.dataSourceTable(tableNum(WHSLoadLine));
        qbdsLoadLine.update(true);
        findOrCreateRange_W(qbdsLoadLine, fieldNum(WHSLoadLine, ShipmentId), SysQuery::valueEmptyString());

        QueryBuildDataSource qbdsTransferLine = transferQuery.dataSourceTable(tableNum(InventTransferLine));
        qbdsTransferLine.sortClear();
        qbdsTransferLine.addSortField(fieldNum(InventTransferLine, TransferId));

        return transferQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildShipmentBaseTableQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for finding shipment based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    private Query buildShipmentBaseTableQueryForPolicy(
        WHSShipConsolidationPolicyData          _shipConsolidationPolicyData,
        WHSShipmentTable                        _shipmentTable)
    {
        Query query = WHSShipConsolidationPolicyProvider::buildProcessQueryFromPolicyType(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyType);

        ListEnumerator policyFieldEnumerator = _shipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();

        while (policyFieldEnumerator.moveNext())
        {
            WHSShipConsolidationPolicyFieldData shipConsolidationPolicyFieldData = policyFieldEnumerator.current();
            WHSShipConsolidationPolicyField shipConsolidationPolicyField = shipConsolidationPolicyFieldData.getShipConsolidationPolicyField();
            TableId tableId = tableName2Id(shipConsolidationPolicyField.SourceTableName);

            findOrCreateRange_W(query.dataSourceTable(tableId), fieldName2Id(tableId, shipConsolidationPolicyField.SourceFieldName), queryValue(shipConsolidationPolicyFieldData.getFieldValue()));
        }

        if (_shipmentTable.RecId)
        {
            QueryBuildDataSource shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));

            findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, RecId), SysQuery::valueNot(_shipmentTable.RecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildShipmentTableQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for finding shipment based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    public Query buildShipmentTableQueryForPolicy(
        WHSShipConsolidationPolicyData          _shipConsolidationPolicyData,
        WHSShipmentTable                        _shipmentTable)
    {
        Query                   query = this.buildShipmentBaseTableQueryForPolicy(_shipConsolidationPolicyData, _shipmentTable);
        QueryBuildDataSource    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));

        shipmentTableDS.update(true);
        shipmentTableDS.firstOnly(true);

        if (_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyName)
        {
            findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipmentStatus), queryValue(WHSShipmentStatus::Open));
        }
        else
        {
            // The legacy consolidation behaviour
            findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipmentStatus), queryRange(WHSShipmentStatus::Open, WHSShipmentStatus::Loaded));
        }

        findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipConsolidationPolicy), queryValue(_shipConsolidationPolicyData.parmShipConsolidationPolicy().RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBaseShipmentValidateQueryForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to find shipments based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    internal Query buildBaseShipmentValidateQueryForPolicy(
        WHSShipConsolidationPolicyData          _shipConsolidationPolicyData,
        WHSShipmentTable                        _shipmentTable)
    {
        Query                   query = WHSShipConsolidationPolicyProvider::buildProcessQueryFromPolicyType(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyType);
        QueryBuildDataSource    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));

        this.fixQueryDSForSelectPolicyKeyFields(shipmentTableDS);

        shipmentTableDS.firstOnly(true);

        findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipmentId), queryValue(_shipmentTable.ShipmentId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildShipmentValidateQueryForPolicyAndTmpShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to find shipments based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    internal Query buildShipmentValidateQueryForPolicyAndTmpShipment(
        WHSShipConsolidationPolicyData          _shipConsolidationPolicyData,
        WHSShipmentTable                        _shipmentTable)
    {
        Query                   query = this.buildShipmentBaseTableQueryForPolicy(_shipConsolidationPolicyData, _shipmentTable);
        QueryBuildDataSource    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));
        QueryBuildDataSource    qbDS = shipmentTableDS.addDataSource(tableNum(WHSTmpShipmentId));

        qbDS.joinMode(JoinMode::InnerJoin);
        qbDS.fetchMode(QueryFetchMode::One2One);
        qbDS.relations(true);
        qbDS.addSelectionField(fieldNum(WHSTmpShipmentId, TableId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildShipmentWorkbenchQueryForPolicyAndTmpShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to find shipments based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    internal Query buildShipmentWorkbenchQueryForPolicyAndTmpShipment(
        WHSShipConsolidationPolicyData          _shipConsolidationPolicyData,
        WHSShipmentTable                        _shipmentTable)
    {
        Query                   query = this.buildShipmentBaseTableQueryForPolicy(_shipConsolidationPolicyData, _shipmentTable);
        QueryBuildDataSource    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));
        QueryBuildDataSource    qbDS = shipmentTableDS.addDataSource(tableNum(WHSTmpShipmentId));

        qbDS.joinMode(JoinMode::InnerJoin);
        qbDS.fetchMode(QueryFetchMode::One2One);
        qbDS.relations(true);
        qbDS.addSelectionField(fieldNum(WHSTmpShipmentId, TableId));

        findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipConsolidationPolicy), queryValue(_shipConsolidationPolicyData.parmShipConsolidationPolicy().RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixQueryDSForSelectPolicyKeyFields</Name>
				<Source><![CDATA[
    private void fixQueryDSForSelectPolicyKeyFields(QueryBuildDataSource _qbDS)
    {
        if (_qbDS.joinMode() == JoinMode::ExistsJoin)
        {
            _qbDS.joinMode(JoinMode::InnerJoin);
            _qbDS.fetchMode(QueryFetchMode::One2One);
        }

        for (int i=_qbDS.childDataSourceCount(); i>0; i--)
        {
            this.fixQueryDSForSelectPolicyKeyFields(_qbDS.childDataSourceNo(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBaseShipmentWorkbenchQueryForPolicyAndTmpShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to find shipments based on the parameters.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    internal Query buildBaseShipmentWorkbenchQueryForPolicyAndTmpShipment(WHSShipConsolidationPolicyData _shipConsolidationPolicyData)
    {
        Query                   query = WHSShipConsolidationPolicyProvider::buildProcessQueryFromPolicyType(_shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyType);
        QueryBuildDataSource    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));

        this.fixQueryDSForSelectPolicyKeyFields(shipmentTableDS);

        QueryBuildDataSource    qbDS = shipmentTableDS.addDataSource(tableNum(WHSTmpShipmentId));

        qbDS.joinMode(JoinMode::InnerJoin);
        qbDS.fetchMode(QueryFetchMode::One2One);
        qbDS.relations(true);
        qbDS.addSelectionField(fieldNum(WHSTmpShipmentId, TableId));

        ListEnumerator policyFieldEnumerator = _shipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();

        while (policyFieldEnumerator.moveNext())
        {
            WHSShipConsolidationPolicyFieldData shipConsolidationPolicyFieldData = policyFieldEnumerator.current();
            WHSShipConsolidationPolicyField     shipConsolidationPolicyField = shipConsolidationPolicyFieldData.getShipConsolidationPolicyField();
            TableId                             tableId = tableName2Id(shipConsolidationPolicyField.SourceTableName);

            query.dataSourceTable(tableId).addGroupByAndSelectionField(fieldName2Id(tableId, shipConsolidationPolicyField.SourceFieldName));
        }

        findOrCreateRange_W(shipmentTableDS, fieldNum(WHSShipmentTable, ShipConsolidationPolicy), queryValue(_shipConsolidationPolicyData.parmShipConsolidationPolicy().RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWarehouseReleaseQueryBuilder construct()
    {
        WHSWarehouseReleaseQueryBuilder warehouseReleaseQueryBuilder = new WHSWarehouseReleaseQueryBuilder();
        warehouseReleaseQueryBuilder.init();

        return warehouseReleaseQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance variables.
    /// </summary>
    protected void init()
    {
        this.useSalesLineDeliveryAddress = WhsWarehouseRelease::useSalesLineDeliveryAddress();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>