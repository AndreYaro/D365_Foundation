<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class EFDocMsgBase_BR implements IEFDocMsg_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDateTimeKey</Name>
				<Source><![CDATA[
    protected str buildDateTimeKey()
    {
        return date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 321, 2, 0, 2, 0, 4, DateFlags::None) + strrem(time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), 2, 1), '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMsgFormat</Name>
				<Source><![CDATA[
    protected IEFDocMsgFormat createMsgFormat(FiscalEstablishment_BR _fiscalEstablishment, EFDocWebService_BR _webService, FiscalDocument_BR _fiscaldocument)
    {
        return EFDocFactory_BR::construct().createMsgFormat(_fiscalEstablishment, _webService, _fiscaldocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocInquireFormat</Name>
				<Source><![CDATA[
    protected IEFDocMsgFormat getEFDocInquireFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument)
    {
        return this.createMsgFormat(_fiscalEstablishment, EFDocWebService_BR::SubmitInquire, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiveFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object reponsible for formatting the XML being received.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message.</param>
    /// <param name="_fiscalDocument">Fiscal document related to the message.</param>
    /// <returns>An object that implements <c>IEFDocMsgFormat</c> interface.</returns>
    public IEFDocMsgFormat getReceiveFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument = null)
    {
        return this.createMsgFormat(_fiscalEstablishment, this.getSendWebService(), _fiscaldocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object reponsible for formatting the XML being sent.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message.</param>
    /// <param name="_fiscalDocument">Fiscal document related to the message.</param>
    /// <returns>An object that implements <c>IEFDocMsgFormat</c> interface.</returns>
    public IEFDocMsgFormat getSendFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument = null)
    {
        return this.createMsgFormat(_fiscalEstablishment, this.getSendWebService(), _fiscaldocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendWebService</Name>
				<Source><![CDATA[
    protected abstract EFDocWebService_BR getSendWebService()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireEFDocument</Name>
				<Source><![CDATA[
    protected IEFDocMsgStream_BR inquireEFDocument(EFiscalDocument_BR _document, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        IEFDocMsgStream_BR              returnStream;
        IEFDocMsgTransport              transport;
        EFiscalDocumentList_BR          oneDocument;
        ;
        transport = EFDocFactory_BR::construct().createInquireTransport(_document.fiscalEstablishment(), this.messageType(), _document.contingencyMode(), _document.contingencyMode() == EFDocContingMode_BR::ConsumerEFDocOffline ? '65' : '');

        oneDocument = EFiscalDocumentList_BR::construct();
        oneDocument.add(_document);

        this.getEFDocInquireFormat(_document.fiscalEstablishment(), _document.fiscalDocument()).write(transport.getSendStream(), oneDocument);

        returnStream = transport.send();

        this.getEFDocInquireFormat(_document.fiscalEstablishment(), _document.fiscalDocument()).read(returnStream, _returnInfo);

        return returnStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the message which this class is responsible to handle.
    /// </summary>
    /// <returns>A value from <c>EFDocMessageType_BR</c> enumerator.</returns>
    abstract EFDocMessageType_BR messageType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>needInquireEFDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if we neet to call the inquire web service to retrieve information about this document.
    /// </summary>
    /// <param name="_returnCodeStatus">Return code status retrieved from the web service.</param>
    /// <returns><c>true</c> if an inquire is needed; <c>false</c> otherwise.</returns>
    boolean needInquireEFDoc(str _returnCodeStatus)
    {
        return EFDocReturnCodeAction_BR::construct(this.messageType(), _returnCodeStatus).needCallInquireWebService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Receives the XML message from a transport class.
    /// </summary>
    /// <param name="_document">A <c>EFiscalDocument_BR</c> instance that maps the document that originated the XML being received.</param>
    /// <param name="_transport">The transport from which to retrieve the XML.</param>
    /// <returns>An instance of <c>EFiscalDocumentReturnInfo_BR</c> object with the parsed return information.</returns>
    public EFiscalDocumentReturnInfo_BR receive(EFiscalDocument_BR _document, IEFDocMsgTransport _transport)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// It saves the XML Doc sent and accepted by the government requesting approval of Fiscal Doc (NF-e).
    /// </summary>
    /// <param name="_eFDocument">
    /// The fiscal document to be saved.
    /// </param>
    /// <param name="_sendStream">
    /// The send stream used to read message content.
    /// </param>
    /// <param name="_returnStream">
    /// The receive stream used to read message content.
    /// </param>
    /// <param name="_returnInfo">
    /// A code that indicates the XML Doc was accepted by the government
    /// </param>
    protected void saveMsg(EFDocument_BR                 _eFDocument,
                           IEFDocMsgStream_BR            _sendStream,
                           IEFDocMsgStream_BR            _returnStream,
                           EFiscalDocumentReturnInfo_BR  _returnInfo)
    {
        // Persisting the XML documents being exchanged is delegated to child classes in case they need to
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSubmissionXMLMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// It saves the submit XML request to be sent to the government for approval of Fiscal Doc (NF-e).
    /// </summary>
    /// <param name = "_eFDocument">
    /// The fiscal document to be saved
    /// </param>
    /// <param name = "_sendStream">
    /// The send stream used to read message content
    /// </param>
    protected void saveSubmissionXMLMsg(EFDocument_BR _eFDocument, IEFDocMsgStream_BR _sendStream)
    {
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends a list of electronic fiscal documents to the web service.
    /// </summary>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> with the documents to be sent.</param>
    /// <param name="_transport">A transport object, implementing <c>IEFDocMsgTransport</c> interfact</param>
    public void send(EFiscalDocumentList_BR _documentList, IEFDocMsgTransport _transport)
    {
        IEFDocMsgTransport              transport;
        EFiscalDocumentList_BR          oneDocument;
        EFiscalDocument_BR              document;
        EFDocEventHandler_BR            evtHandler;
        EFiscalDocumentReturnInfo_BR    returnInfo;

        IEFDocMsgStream_BR              sendStream;
        IEFDocMsgStream_BR              returnStream;

        setprefix(enum2str(this.messageType()));

        transport = _transport;
        evtHandler = EFDocEventHandler_BR::construct();

        while (_documentList.moveNext())
        {
            oneDocument = EFiscalDocumentList_BR::construct();
            document = _documentList.current();
            oneDocument.add(document);

            setprefix(strfmt("%1 %2 %3 %4", "@SYS57610", date2str(document.eFDocument().Date, 123, 2, 4, 2, 4, 4, DateFlags::None), "@SYS12128", document.fiscalDocument().FiscalDocumentNumber));

            sendStream = transport.getSendStream();
            this.getSendFormat(document.fiscalEstablishment(), document.fiscalDocument()).write(sendStream, oneDocument);

            if (this.needSaveSubmitXMLReqBeforeSend())
            {
                this.saveSubmissionXMLMsg(document.eFDocument(), sendStream);
            }

            returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(document.accessKey());
            returnStream = transport.send(document.accessKey());
            this.getReceiveFormat(document.fiscalEstablishment(), document.fiscalDocument()).read(returnStream, returnInfo);

            if (this.needInquireEFDoc(returnInfo.parmReturnCodeStatus()) && this.messageType() != EFDocMessageType_BR::Discard)
            {
                returnStream = this.inquireEFDocument(document, returnInfo);
            }
            this.saveMsg(document.eFDocument(), sendStream, returnStream, returnInfo);

            evtHandler.messageSent(document.eFDocument(), returnInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromMessageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a message object based on a given message type.
    /// </summary>
    /// <param name="_messageType">The type of the message to be sent or received.</param>
    /// <returns>An object implementing <c>IEFDocMsg_BR</c> interface.</returns>
    public static IEFDocMsg_BR createFromMessageType(EFDocMessageType_BR _messageType)
    {
        IEFDocMsg_BR docMsg;

        switch (_messageType)
        {
            case EFDocMessageType_BR::Cancel :
                docMsg = EFDocMsg_Cancel_BR::construct();
                break;

            case EFDocMessageType_BR::Discard :
                docMsg = EFDocMsg_Discard_BR::construct();
                break;

            case EFDocMessageType_BR::Submit :
                docMsg = EFDocMsg_Nfe_BR::construct();
                break;

            default :
                throw error(strfmt("@GLS62577", _messageType));
        }

        return docMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needSaveSubmitXMLReqBeforeSend</Name>
				<Source><![CDATA[
    private boolean needSaveSubmitXMLReqBeforeSend()
    {
        boolean saveSubmitXMLReq = false;

        System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager::AppSettings;
        const str EnableSplittedSubmissionScenariosKey = 'EnableSplittedSubmissionScenarios';

        if (appSettings && appSettings.AllKeys.Contains(EnableSplittedSubmissionScenariosKey) 
            && this.messageType() == EFDocMessageType_BR::Submit)
        {
            saveSubmitXMLReq = true;
        }
        
        return saveSubmitXMLReq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>