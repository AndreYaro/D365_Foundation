<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocLedgerJourHeadRowDataProvider_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TaxableDocLedgerJourHeadRowDataProvider))]
final class TaxableDocLedgerJourHeadRowDataProvider_IN_Extension
{
    public TaxInformationVendTable_IN  taxInfoVendTable;
    public TaxInformation_IN           vendorLocationTaxInfo;
    public TaxInformationCustTable_IN  taxInfoCustTable;
    public TaxInformation_IN           customerLocationTaxInfo;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInFields</Name>
				<Source><![CDATA[
    public void fillInFields(TaxableDocumentLineObject _lineObj)
    {
        next fillInFields(_lineObj);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            //India fields
            if (taxInfoVendTable)
            {
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsForeignParty, taxInfoVendTable.IsForeign);
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsGTAVendor, taxInfoVendTable.IsGTA);
                this.addFieldValue(_lineObj, TaxEngineModelFields::NatureOfAssesse, taxInfoVendTable.NatureOfAssessee);
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsPreferrentialParty, taxInfoVendTable.IsPreferential);
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsGSTCompositionScheme, taxInfoVendTable.GSTCompositionScheme);
            }
            else if (taxInfoCustTable)
            {
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsForeignParty, taxInfoCustTable.IsForeign);
                this.addFieldValue(_lineObj, TaxEngineModelFields::NatureOfAssesse, taxInfoCustTable.NatureOfAssessee);
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsPreferrentialParty, taxInfoCustTable.IsPreferential);
                this.addFieldValue(_lineObj, TaxEngineModelFields::CustomerType, taxInfoCustTable.CustomerType);
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsGTAVendor, NoYes::No);
            }

            if (ledgerJournalTrans)
            {
                this.addFieldValue(_lineObj, TaxEngineModelFields::ProvisionalAssessment, this.getProvisionalAssessment_IN());

                LedgerJournalTrans ledgerJournalTransLoc = ledgerJournalTrans.getPartyRelatedLine();
                if (ledgerJournalTransLoc)
                {
                    LedgerJournalTransTaxExtensionIN ledgerTransExtensionIN = ledgerJournalTransLoc.ledgerJournalTransTaxExtensionIN();
                    this.addFieldValue(_lineObj, TaxEngineModelFields::WithIGSTPayment, ledgerTransExtensionIN.WithIGSTPayment);
                    this.addFieldValue(_lineObj, TaxEngineModelFields::WouldYouClaimRefund, ledgerTransExtensionIN.WouldYouClaimRefund);
                    if (LedgerJournalTrans::isCustomerInvoice(ledgerJournalTransLoc))
                    {
                        this.addFieldValue(_lineObj, TaxEngineModelFields::IsExportOrder, TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(ledgerJournalTransLoc).CustomsExportOrder);
                    }
                }
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProvisionalAssessment_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets Provisional Assessment value.
    /// </summary>
    /// <returns>
    ///   True if transaction is customer invoice and Provisional Assessment is checked, else false.
    /// </returns>
    private NoYes getProvisionalAssessment_IN()
    {
        LedgerJournalTrans  ledgerJournalTransLoc;
        NoYes               ret = NoYes::No;

        select firstonly RecId from ledgerJournalTransLoc
            where ledgerJournalTransLoc.journalNum          == ledgerJournalTrans.JournalNum
                && ledgerJournalTransLoc.Voucher            == ledgerJournalTrans.Voucher
                && ((ledgerJournalTransLoc.AccountType          == LedgerJournalACType::Cust && ledgerJournalTransLoc.LedgerDimension) ||
                    (ledgerJournalTransLoc.OffsetAccountType    == LedgerJournalACType::Cust && ledgerJournalTransLoc.OffsetLedgerDimension))
                && ledgerJournalTransLoc.ProvisionalAssessment_IN   == NoYes::Yes;

        If (ledgerJournalTransLoc)
        {
            ret = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTables</Name>
				<Source><![CDATA[
    protected void initRelatedTables()
    {
        next initRelatedTables();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (custTable)
            {
                taxInfoCustTable = custTable.getTaxInformationCustTable_IN();
                customerLocationTaxInfo = TaxInformation_IN::findDefaultbyLocation(custTable.postalAddress().Location);
            }
            else if (vendTable)
            {
                taxInfoVendTable = vendTable.getTaxInformationVendTable_IN();
                vendorLocationTaxInfo = TaxInformation_IN::findDefaultbyLocation(vendTable.postalAddress().Location);
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>