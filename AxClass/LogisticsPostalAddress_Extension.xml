<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsPostalAddress_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of table <c>LogisticsPostalAddress</c>
/// </summary>
[ExtensionOf(tableStr(LogisticsPostalAddress))]
final class LogisticsPostalAddress_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>elementId2FieldIdExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the corresponding field ID by using the element type.
    /// </summary>
    /// <param name="_elementId">
    /// An integer of the <c>LogisticsAddressElement</c> enumeration type.
    /// </param>
    /// <param name="_countryRegionId">
    /// The <c>LogisticsAddressCountryRegionId</c> string, that identifies the Country/region to which the address is related.
    /// </param>
    /// <returns>
    /// A field ID of the corresponding element.
    /// </returns>
    /// <remarks>
    /// This extension handles Stead controls visibility on <c>LogisticsPostalAddress</c> form.
    /// </remarks>
    protected static FieldID elementId2FieldIdExtension(int _elementId, LogisticsAddressCountryRegionId _countryRegionId)
    {
        FieldID filedId = next elementId2FieldIdExtension(_elementId, _countryRegionId);
        if (filedId == 0 && _elementId == enum2int(LogisticsAddressElement::Stead_RU))
        {
            filedId = fieldNum(LogisticsPostalAddress, SteadId_RU);
        }

        return filedId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeStreet_RU_Extension</Name>
				<Source><![CDATA[
    protected server AddressStreet makeStreet_RU_Extension(LogisticsAddressElement element)
    {
        TempStr addStr;

        next makeStreet_RU_Extension(element);

        switch (element)
        {
            case LogisticsAddressElement::House_RU        :
                addStr = this.BuildingCompliment != '' ? '' : LogisticsAddressHouseNumber_RU::findRecId(this.HouseId_RU).fullName();
                break;
            case LogisticsAddressElement::Stead_RU        :
                addStr = this.BuildingCompliment != '' ? '' : LogisticsAddressSteadNumber_RU::findRecId(this.SteadId_RU).fullName();
                break;
            case LogisticsAddressElement::Flat_RU        :
                addStr = this.BuildingCompliment != '' ? '' : LogisticsAddressFlatNumber_RU::findRecId(this.FlatId_RU).fullName();
                break;
        }

        return addStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSteadId</Name>
				<Source><![CDATA[
    public RefRecId getSteadId()
    {
        next getSteadId();

        return this.SteadId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSteadId</Name>
				<Source><![CDATA[
    public RefRecId setSteadId(RefRecId _steadId)
    {
        next setSteadId(_steadId);

        this.SteadId_RU = _steadId;

        return this.SteadId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommerceChannelReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the channel referenceId for commerce customer in logisticsPostalAddress.
    /// </summary>
    /// <param name="_recId">The address record id in LogisticsPostalAddress table.</param>
    /// <param name="_channelReferenceId">The channel reference id.</param>
    [Hookable(false)]
    public static void updateCommerceChannelReferenceId(LogisticsPostalAddressRecId _recId, RetailAsyncAddressId _channelReferenceId)
    {
        if (!System.String::IsNullOrWhiteSpace(_channelReferenceId))
        {
            LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findRecId(_recId, true);

            logisticsPostalAddress.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            logisticsPostalAddress.ChannelReferenceId = _channelReferenceId;
            logisticsPostalAddress.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChannelReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locate an address record by the channel reference id.
    /// </summary>
    /// <param name = "_channelReferenceId">The channel reference identifier.</param>
    /// <param name = "_update">Specifies if the record should be set to be updatable.</param>
    /// <returns>The located address record, if any.</returns>
    [Hookable(false)]
    public static LogisticsPostalAddress findByChannelReferenceId(RetailAsyncAddressId _channelReferenceId,  boolean _update = false )
    {
        LogisticsPostalAddress logisticsAddress;

        if (_channelReferenceId)
        {
            utcdatetime currentUtcDateTime = DateTimeUtil::utcNow();
            logisticsAddress.selectForUpdate(_update);

            select firstonly logisticsAddress
                where logisticsAddress.ChannelReferenceId == _channelReferenceId &&
                      logisticsAddress.ValidFrom <= currentUtcDateTime &&
                      logisticsAddress.ValidTo >= currentUtcDateTime;
        }

        return logisticsAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>