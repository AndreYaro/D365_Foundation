<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NonSSRSPrintMgmtAdapterPromptingEventArgs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Arguments for prompting user for Non-SSRS print management extensions poarameters.
/// </summary>
class NonSSRSPrintMgmtAdapterPromptingEventArgs
{
    Set reportNames;
    boolean promptResult = true;
    NonSSRSPrintMgmtPromptExtensionParameters extensionParameters = new NonSSRSPrintMgmtPromptExtensionParameters();
    private ERDestinationAction destinationAction;
    private Map namedDestinations;
    private ERFormatsDestinations initialFormatsDestinations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates an instance of a class.
    /// </summary>
    /// <param name = "_reportNames">Set of report names to prompt.</param>
    public void new(Set _reportNames)
    {
        reportNames = _reportNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportNames</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets set of reports. Event handler should prompt for report parameters it processes, 
    ///  then remove processed report names.
    /// </summary>
    /// <param name = "_reportNames">A new value for the property.</param>
    /// <returns>Current value of the property/</returns>
    public Set parmReportNames(Set _reportNames = reportNames)
    {
        reportNames = _reportNames;
        return reportNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromptResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Result of a prompt. Extension should check whether it is true, ask user for parameters and
    ///  then set it to user choice. If it is not true, extension should skip actions.
    /// </summary>
    /// <param name = "_promptResult">A new value for the property.</param>
    /// <returns>False, if user decided to cancel operation; otherwise true.</returns>
    public boolean parmPromptResult(boolean _promptResult = promptResult)
    {
        promptResult = _promptResult;
        return promptResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets destination action. Event handler should only prompt destinations with this print management action.
    /// </summary>
    /// <param name = "_destinationAction">A new value for the property.</param>
    /// <returns>A destinstion action.</returns>
    public ERDestinationAction parmDestinationAction(ERDestinationAction _destinationAction = destinationAction)
    {
        destinationAction = _destinationAction;
        return destinationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns extensions parameters. Extension should set parameters there using it's unique key.
    /// </summary>
    /// <returns>Extensions parameters.</returns>
    public NonSSRSPrintMgmtPromptExtensionParameters getExtensionParameters()
    {
        return extensionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNamedDestinations</Name>
				<Source><![CDATA[
    public Map parmNamedDestinations(Map _namedDestinations = namedDestinations)
    {
        namedDestinations = _namedDestinations;
        return namedDestinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialFormatsDestinations</Name>
				<Source><![CDATA[
    public ERFormatsDestinations parmInitialFormatsDestinations(ERFormatsDestinations _initialFormatsDestinations = initialFormatsDestinations)
    {
        initialFormatsDestinations = _initialFormatsDestinations;
        return initialFormatsDestinations;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>