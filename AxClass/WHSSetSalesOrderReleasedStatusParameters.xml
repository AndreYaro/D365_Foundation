<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSetSalesOrderReleasedStatusParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class makes is possible to provide parameters to the <c>SalesTable</c> tables setSalesOrderReleasedStatus method.
/// </summary>
public final class WHSSetSalesOrderReleasedStatusParameters implements System.IDisposable
{
    private static WHSSetSalesOrderReleasedStatusParameters instance;
    public SalesLine	SalesLine;
    public boolean		LineInserted;
    public boolean		LineDeleted;
    public boolean		LineQtyUpdated;
    public InventQty	DeltaLineInventQty;
    public SalesId		SalesId;

    internal DataAreaId  dataAreaId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (instance)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        dataAreaId = curExt();
        instance = this;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSSetSalesOrderReleasedStatusParameters construct()
    {
        return new WHSSetSalesOrderReleasedStatusParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
	private void initFromSalesLine(SalesLine _salesLine)
    {
        this.SalesLine = _salesLine;
        this.SalesId = _salesLine.SalesId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    internal str hashKey()
    {
        return dataAreaId+';'+SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSales</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates an instance of the class that can be used when the sales order needs to be examined for status change.
    /// </summary>
    /// <returns>
    /// <param name = "_salesId">The <c>SalesId</c> Id of the sales order.</param>
    /// An instance of the class.
    /// </returns>
    public static WHSSetSalesOrderReleasedStatusParameters newSales(SalesId _salesId)
    {
        WHSSetSalesOrderReleasedStatusParameters parameters = WHSSetSalesOrderReleasedStatusParameters::construct();
        
        parameters.SalesId = _salesId;
        
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLineInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class that can be used when lines are inserted.
    /// </summary>
    /// <returns>
    /// <param name = "_salesLine">The <c>SalesLine</c> line being inserted.</param>    
    /// An instance of the class that can be used when lines are inserted.
    /// </returns>    
    public static WHSSetSalesOrderReleasedStatusParameters newLineInserted(SalesLine _salesLine)
    {
        WHSSetSalesOrderReleasedStatusParameters parameters = WHSSetSalesOrderReleasedStatusParameters::construct();
        
		parameters.LineInserted = true;
        parameters.initFromSalesLine(_salesLine);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLineDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class that can be used when lines are deleted.
    /// </summary>
    /// <returns>
    /// <param name = "_salesLine">The <c>SalesLine</c> line being deleted.</param>
    /// An instance of the class that can be used when lines are inserted.
    /// </returns>
    public static WHSSetSalesOrderReleasedStatusParameters newLineDeleted(SalesLine _salesLine)
    {
        WHSSetSalesOrderReleasedStatusParameters parameters = WHSSetSalesOrderReleasedStatusParameters::construct();

        parameters.LineDeleted = true;
        parameters.initFromSalesLine(_salesLine);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLineQuantityUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class that can be used when lines quantities are updated.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> line being inserted.</param>
    /// <param name = "_oldInventQty">The old inventory quantity.</param>
    /// <param name = "_newInventQty">The new inventory quantity.</param>
    /// <returns>An instance of the class that can be used when lines quantities are updated.</returns>
    public static WHSSetSalesOrderReleasedStatusParameters newLineQuantityUpdated(
		SalesLine _salesLine, 
		InventQty _oldInventQty,
        InventQty _newInventQty)
    {
        WHSSetSalesOrderReleasedStatusParameters parameters = WHSSetSalesOrderReleasedStatusParameters::construct();

        parameters.LineQtyUpdated = true;
        parameters.initFromSalesLine(_salesLine);
        parameters.DeltaLineInventQty = (_newInventQty - _oldInventQty);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes of the current instance of this class.
    /// </summary>
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current instance of this class.
    /// </summary>
    /// <returns>The current instance of this class. If no instance is set, null is returned.</returns>
    public static WHSSetSalesOrderReleasedStatusParameters current()
    {
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>