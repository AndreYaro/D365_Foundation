<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymProposalUIBuilder</c> class is the UI builder class for the
/// <c>CustVendPaymProposal</c>Microsoft SQL Server Reporting Services report.
/// </summary>
public class CustVendPaymProposalUIBuilder extends SrsReportDataContractUIBuilder
{
    private CustVendPaymProposalContract contract;

    private CustAccount custAccountFrom;
    private CustAccount custAccountTo;
    private VendAccount vendAccountFrom;
    private VendAccount vendAccountTo;

    private BankAccount bankAccountFrom;
    private BankAccount bankAccountTo;
    private PaymProposalReportedBy groupingBy;
    private PaymProposalReportSubTotal subTotal;
    private boolean payment;
    private boolean invoice;
    private ModuleCustVend moduleCustVend;

    private boolean coverPage;
    private DialogField dialogCustAccountFrom;
    private DialogField dialogCustAccountTo;
    private DialogField dialogVendAccountFrom;
    private DialogField dialogVendAccountTo;
    private DialogField dialogBankAccountFrom;
    private DialogField dialogBankAccountTo;
    private DialogField dialogGroupingBy;
    private DialogField dialogSubTotal;
    private DialogField dialogPayment;
    private DialogField dialogInvoice;
    private DialogField dialogCoverPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and handles the UI dialog box for the <c>CustVendPaymProposal</c> report.
    /// </summary>
    public void build()
    {
        DialogGroup dialogCust;
        DialogGroup dialogVend;
        DialogGroup dialogBank;
        DialogGroup dialogCover;

        contract = this.dataContractObject() as CustVendPaymProposalContract;

        this.getParameterSavedValues();

        dialogPayment = this.dialog().addFieldValue(enumStr(NoYes), payment,"@SYS55132");
        dialogInvoice = this.dialog().addFieldValue(enumStr(NoYes), invoice,"@SYS14204");
        dialogGroupingBy = this.dialog().addFieldValue(enumStr(PaymProposalReportedBy), groupingBy,"@SYS55014");
        dialogSubTotal = this.dialog().addFieldValue(enumStr(PaymProposalReportSubTotal), subTotal,"@SYS7470");

        switch (contract.parmModuleCustVend())
        {
            case ModuleCustVend::Cust:
                // When called from customer payment proposal.
                dialogCust = this.dialog().addGroup("@SYS177296");
                dialogCustAccountFrom = this.dialog().addFieldValue(extendedTypeStr(CustAccount), custAccountFrom,"@SYS77627");
                dialogCustAccountTo = this.dialog().addFieldValue(extendedTypeStr(CustAccount), custAccountTo,"@SYS27930");
                dialogCust.columns(2);
                break;

            case ModuleCustVend::Vend:
                // When called from vendor payment proposal.
                dialogVend = this.dialog().addGroup("@SYS14048");
                dialogVendAccountFrom = this.dialog().addFieldValue(extendedTypeStr(VendAccount), vendAccountFrom,"@SYS77627");
                dialogVendAccountTo = this.dialog().addFieldValue(extendedTypeStr(VendAccount), vendAccountTo,"@SYS27930");
                dialogVend.columns(2);
                break;

            default:
                break;
        }

        dialogBank = this.dialog().addGroup("@SYS178344");
        dialogBankAccountFrom = this.dialog().addFieldValue(extendedtypestr(CompanyBankAccountId),bankAccountFrom,"@SYS77627");
        dialogBankAccountTo = this.dialog().addFieldValue(extendedtypestr(CompanyBankAccountId),bankAccountTo,"@SYS27930");

        dialogBank.columns(2);
        dialogCover = this.dialog().addGroup("@SYS16146");
        dialogCoverPage = this.dialog().addFieldValue(enumstr(boolean), coverPage, "@SYS132171");

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            dialogCover.visible(false);
            dialogCoverPage.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>CustVendPaymProposal</c> parameter value before running the report.
    /// </summary>
    public void getFromDialog()
    {
        if (contract.parmModuleCustVend() == ModuleCustVend::Cust)
        {
            // When called from customer payment proposal.
            custAccountFrom = dialogCustAccountFrom.value();
            custAccountTo = dialogCustAccountTo.value();
        }
        else
        {
            // When called from vendor payment proposal.
            vendAccountFrom = dialogVendAccountFrom.value();
            vendAccountTo = dialogVendAccountTo.value();
        }

        bankAccountFrom = dialogBankAccountFrom.value();
        bankAccountTo = dialogBankAccountTo.value();
        groupingBy = dialogGroupingBy.value();
        subTotal = dialogSubTotal.value();
        payment = dialogPayment.value();
        invoice = dialogInvoice.value();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            coverPage = dialogCoverPage.value();
        }
        else
        {
            coverPage = false;
        }

        this.saveParameterValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterSavedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the saved parameter values.
    /// </summary>
    private void getParameterSavedValues()
    {
        moduleCustVend = contract.parmModuleCustVend();

        if (contract.parmModuleCustVend() == ModuleCustVend::Cust)
        {
            custAccountFrom = contract.parmRangeAccountNumStart();
            custAccountTo = contract.parmRangeAccountNumEnd();
        }

        if (contract.parmModuleCustVend() == ModuleCustVend::Vend)
        {
            vendAccountFrom = contract.parmRangeAccountNumStart();
            vendAccountTo = contract.parmRangeAccountNumEnd();
        }

        bankAccountFrom = contract.parmRangeCompanyBankAccountIdStart();
        bankAccountTo = contract.parmRangeCompanyBankAccountIdEnd();
        groupingBy = contract.parmGroupingBy();

        if (contract.parmSubtotal())
        {
            subTotal = contract.parmSubtotal();
        }
        else
        {
            subTotal = PaymProposalReportSubTotal::None;
        }

        payment = contract.parmPrintPaymLines();
        invoice = contract.parmPrintInvoiceLines();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            coverPage = contract.parmCoverPage();
        }
        else
        {
            coverPage = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the parameter values from the dialog box.
    /// </summary>
    private void saveParameterValues()
    {
        if (contract.parmModuleCustVend() == ModuleCustVend::Cust)
        {
            contract.parmRangeAccountNumStart(custAccountFrom);
            contract.parmRangeAccountNumEnd(custAccountTo);
        }

        if (contract.parmModuleCustVend() == ModuleCustVend::Vend)
        {
            contract.parmRangeAccountNumStart(vendAccountFrom);
            contract.parmRangeAccountNumEnd(vendAccountTo);
        }

        contract.parmRangeCompanyBankAccountIdStart(bankAccountFrom);
        contract.parmRangeCompanyBankAccountIdEnd(bankAccountTo);
        contract.parmPrintPaymLines(payment);
        contract.parmPrintInvoiceLines(invoice);
        contract.parmGroupingBy(groupingBy);
        contract.parmSubtotal(subTotal);
        contract.parmCoverPage(coverPage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>