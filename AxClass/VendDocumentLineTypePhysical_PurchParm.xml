<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineTypePhysical_PurchParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentLineTypePhysical_PurchParm</c> class is used for validation and applying default
///    values to invoice lines stored in the <c>VendInvoiceInfoLine</c> table.
/// </summary>
class VendDocumentLineTypePhysical_PurchParm extends VendDocumentLineTypePhysical
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultInventTransId</Name>
				<Source><![CDATA[
    public void defaultInventTransId()
    {
        if (!vendDocumentLineMap.isFieldSet(this.mainStrategy().fieldNum(fieldNum(VendDocumentLineMap, InventTransId), vendDocumentLineMap.TableId)))
        {
            TradeInventTransId inventTransId = this.determineDefaultInventTransId();

            if (inventTransId)
            {
                vendDocumentLineMap.InventTransId = inventTransId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    public void defaultItemId()
    {
        ItemId itemId;

        if (!vendDocumentLineMap.isFieldSet(this.mainStrategy().fieldNum(fieldNum(VendDocumentLineMap, ItemId), vendDocumentLineMap.TableId)))
        {
            itemId = this.determineDefaultItemId();
            vendDocumentLineMap.ItemId = itemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCWQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase catch weight quantities for the document line.
    /// </summary>
    /// <param name="_cwQty">
    /// The document catch weight quantity.
    /// </param>
    /// <returns>
    /// A container that contains the <c>PdwCWRemainBefore</c>, <c>PdsCWRemainAfter</c> and
    /// <c>PdsCWReceiveNow</c> values.
    /// </returns>
    public container determineDefaultCWQtys(PdsCWInventQty _cwQty = naReal())
    {
        PurchQuantity purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        return purchQuantity.pdsCWQtyInvent(defaultingStrategy.purchLine(), defaultingStrategy.purchParmUpdate().SpecQty, _cwQty, defaultingStrategy.purchParmUpdate().CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines and returns the inventory quantities for the document line.
    /// </summary>
    /// <param name="_inventQty">
    ///    The document quantity in inventory unit of measure; optional.
    /// </param>
    /// <returns>
    ///    A container with the <c>RemainBeforeInvent</c>, <c>RemainAfterInvent</c>, and <c>InventNow</c>
    ///    values.
    /// </returns>
    public container determineDefaultInventQtys(InventQty _inventQty = naReal())
    {
        PurchQuantity purchQuantity;
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        if (vendDocumentLineMap.VendDocumentLineMap::isNonPO())
        {
            return [0.0, 0.0, 0.0];
        }

        purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);

        Debug::assert(purchQuantity != null);

        return purchQuantity.qtyInvent(defaultingStrategy.purchLine(), defaultingStrategy.parmSpecQty(), _inventQty, defaultingStrategy.purchParmUpdate().CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId determineDefaultInventTransId()
    {
        if (vendDocumentLineMap.VendDocumentLineMap::isNonPO())
        {
            return '';
        }

       return this.mainStrategy().purchLine().InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultItemId</Name>
				<Source><![CDATA[
    public ItemId determineDefaultItemId()
    {
        if (vendDocumentLineMap.VendDocumentLineMap::isNonPO())
        {
            return vendDocumentLineMap.ItemId;
        }

        return this.mainStrategy().purchLine().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the purchase quantities for the document line.
    /// </summary>
    /// <param name="_purchQty">
    /// The document quantity in purchase unit of measure; optional.
    /// </param>
    /// <returns>
    /// A container that contains the <c>RemainBefore</c>, <c>RemainAfter</c>, and <c>ReceiveNow</c> values.
    /// </returns>
    public container determineDefaultPurchQtys(PurchQty _purchQty = naReal())
    {
        PurchQuantity purchQuantity;

        VendInvoiceInfoLine vendInvoiceInfoLineDirectInvoice;

        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        if (vendDocumentLineMap.VendDocumentLineMap::isNonPO())
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentLineMap.TableId == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLineDirectInvoice = vendDocumentLineMap;
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLineDirectInvoice.isDirectInvoice())
            {
                return [_purchQty, 0.0, 0.0];
            }
            else

            if (vendDocumentLineMap.ItemId != '')
            {
                return [1.0, 0.0, 0.0];
            }
            else
            {
                return [0.0, 0.0, 0.0];
            }
        }

        purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);

        Debug::assert(purchQuantity != null);

        return purchQuantity.qtyPurch(defaultingStrategy.purchLine(), defaultingStrategy.parmSpecQty(), _purchQty, defaultingStrategy.purchParmUpdate().CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the line amount, the line prices, and discounts.
    /// </summary>
    /// <remarks>
    ///    If line amount is supplied the line prices and discounts are zeroed; otherwise, the line amount is
    ///    calculated.
    /// </remarks>
    public void initPrice()
    {
        // use standard defaulting
        this.mainStrategy().defaultAmountsForLine();

        vendDocumentLineMap.setLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransIdForInvoice</Name>
				<Source><![CDATA[
    public boolean validateInventTransIdForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemIdForInvoice</Name>
				<Source><![CDATA[
    public boolean validateItemIdForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNowForInvoice</Name>
				<Source><![CDATA[
    public boolean validateReceiveNowForInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>