<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymInvoiceWithJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendPaymInvoiceWithJournal
{
    ModuleCustVend module;
    CustVendInvoiceJour custVendInvoiceJour;
    CustVendTrans custVendTrans;
    CustVendPaymModeTable paymModeTable;
    LedgerJournalTable ledgerJournalTable;
    CustVendTransOpen custVendTransOpen;
    container packedOutPaym;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
        private Query buildQuery()
    {
        Query query;
        QueryBuildDataSource qbdsLedgerJournalTrans;
        QueryBuildDataSource qbdsPaymModeTable;
        tableId paymModeTableId = paymModeTable.TableId;
        fieldId fieldIdPaymModeTablePaymMode;

        fieldIdPaymModeTablePaymMode = new DictField(paymModeTableId, fieldname2id(paymModeTableId, identifierstr(PaymMode))).id();

        query = new Query();

        query.userUpdate(false);

        // LedgerJournalTrans
        qbdsLedgerJournalTrans = query.addDataSource(tablenum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.update(true);

        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, JournalNum)).status(RangeStatus::Locked);
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, AccountType)).status(RangeStatus::Locked);
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, LedgerDimension));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, OffsetAccountType));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, OffsetLedgerDimension));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, PaymMode));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, PaymSpec));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, PaymentStatus)).status(RangeStatus::Locked);
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, BankTransType));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, BankAccountId));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, CurrencyCode));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, AmountCurDebit));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, AmountCurCredit));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, PaymId));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, DocumentNum));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, DocumentDate));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, BankCentralBankPurposeCode));
        qbdsLedgerJournalTrans.addRange(fieldnum(LedgerJournalTrans, BankRemittanceFileId));

        qbdsLedgerJournalTrans.rangeField(fieldnum(LedgerJournalTrans, PaymentStatus)).value(strfmt('%1,%2', CustVendPaymStatus::None,
                                                                                                             CustVendPaymStatus::Rejected));

        // PaymModeTable
        qbdsPaymModeTable = qbdsLedgerJournalTrans.addDataSource(paymModeTableId);
        qbdsPaymModeTable.addLink(fieldnum(LedgerJournalTrans, PaymMode), fieldIdPaymModeTablePaymMode);
        qbdsPaymModeTable.joinMode(JoinMode::InnerJoin);
        qbdsPaymModeTable.update(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private void createJournal()
    {
        ttsbegin;

        this.initializeJournal();

        ledgerJournalTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>LedgerJournalTable</c> table buffer.
    /// </summary>
    [Wrappable(true)]
    protected final void initializeJournal()
    {
        ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();

        ledgerJournalTable.initFromLedgerJournalName(LedgerJournalName::find(paymModeTable.PaymJournalNameId).JournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates payment journal. 
    /// </summary>
    [Wrappable(true)]
    protected final void createPayment()
    {
        CustVendSumUpJournal custVendSumUpJournal;

        this.custVendTransOpenBuffer();

        while select custVendTransOpen
            where custVendTransOpen.RefRecId == custVendTrans.RecId
        {
            custVendSumUpJournal = this.initializeCustVendSumUpJournal();
            custVendSumUpJournal.updateAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustVendSumUpJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CustVendSumUpJournal</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>CustVendSumUpJournal</c> class.
    /// </returns>
    [Wrappable(true)]
    protected final CustVendSumUpJournal initializeCustVendSumUpJournal()
    {
        CustVendSumUpJournal custVendSumUpJournal = new CustVendSumUpJournal(custVendTransOpen,
            ledgerJournalTable.JournalNum,
            custVendInvoiceJour.InvoiceDate,
            custVendInvoiceJour.DocumentDate);

        custVendSumUpJournal.createOffsetTrans(paymModeTable.PaymMode);
        custVendSumUpJournal.createSpecTrans(this.determineSpecTransPaymentAmount(custVendTransOpen));

        return custVendSumUpJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSpecTransPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the payment amount for creating a <c>SpecTrans</c> record.
    /// </summary>
    /// <param name = "_custVendTransOpen">
    ///     An instance of <c>CustVendTransOpen</c> map buffer.
    /// </param>
    /// <returns>
    ///     The payment amount.
    /// </returns>
    [Wrappable(true)]
    protected final AmountCur determineSpecTransPaymentAmount(CustVendTransOpen _custVendTransOpen)
    {
        return -custVendTransOpen.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpenBuffer</Name>
				<Source><![CDATA[
    private void custVendTransOpenBuffer()
    {
        CustTransOpen custTransOpen;
        VendTransOpen vendTransOpen;

        switch (module)
        {
            case ModuleCustVend::Cust:
                custVendTransOpen = custTransOpen;
                break;

            case ModuleCustVend::Vend:
                custVendTransOpen = vendTransOpen;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePayment</Name>
				<Source><![CDATA[
    private void generatePayment()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        CustVendOutPaym custVendOutPaym;

        if (paymModeTable.ExportOnInvoice)
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;

            if (ledgerJournalTrans.RecId)
            {
                custVendOutPaym = CustVendOutPaym::newCustVendPaymInvoiceWithJournal(this);

                if (! custVendOutPaym.validate())
                {
                    throw error("@SYS18447");
                }

                try
                {
                    ttsbegin;
                    custVendOutPaym.open();
                    // <GBR>
                    if (BrazilParameters::isEnabled() && VendPaymModeTable::find(paymModeTable.PaymMode).Posting_BR != Posting_BR::None)
                    {
                        custVendOutPaym.generatePaymentLines_BR(VendPaymModeTable::find(paymModeTable.PaymMode).Posting_BR);
                    }
                    else
                    {
                    // </GBR>
                    custVendOutPaym.generatePaymentLines();
                    // <GBR>
                    }
                    // </GBR>
                    ttscommit;
                    custVendOutPaym.close();
                }

                catch (Exception::Deadlock)
                {
                    retry;
                }

                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendInvoiceJour</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour parmCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour = custVendInvoiceJour)
    {
        custVendInvoiceJour = _custVendInvoiceJour;

        return custVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    public CustVendTrans parmCustVendTrans(CustVendTrans _custVendTrans = custVendTrans)
    {
        custVendTrans = _custVendTrans;

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId()
    {
        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    private ModuleCustVend parmModule(ModuleCustVend _module = module)
    {
        module = _module;

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable parmPaymModeTable(CustVendPaymModeTable _paymModeTable = paymModeTable)
    {
        paymModeTable = _paymModeTable;

        return paymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery()
    {
        return this.buildQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal()
    {
        LedgerJournalTrans ledgerJournalTrans;
        SpecTrans specTrans;
        Args args = new Args();
        boolean ok = true;

        this.custVendTransOpenBuffer();

        while select custVendTransOpen
            where custVendTransOpen.RefRecId == custVendTrans.RecId
        join PaymentStatus from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
        exists join specTrans
            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.RefCompany == custVendTransOpen.DataArea
                && specTrans.RefTableId == custVendTransOpen.TableId
                && specTrans.RefRecId == custVendTransOpen.RecId
        {
            if (!CustVendPaym::checkPaymStatus(module, paymModeTable.PaymMode, ledgerJournalTrans.PaymentStatus))
            {
                ok = checkFailed(strfmt(
                    "@SYS66070",
                    ledgerJournalTrans.Voucher,
                    ledgerJournalTrans.PaymentStatus,
                    CustVendPaymModeTable::findModule(module, ledgerJournalTrans.PaymMode).PaymStatus));
            }
        }

        if (ok)
        {
            args.record(ledgerJournalTable);
            LedgerJournalPost::main(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        setprefix("@SYS17561");

        try
        {
            if (!paymModeTable.PaymJournalNameId)
                throw error("@SYS16764");
            
            boolean isCreditNote = this.validateIsCreditNote();            

            if (!isCreditNote)
            {
                ttsbegin;
                this.createJournal();
                this.createPayment();
                ttscommit;
                this.generatePayment();
                this.postJournal();
            }
        }

        catch (Exception::Error)
        {
            info ("@SYS83591");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the net amount of invoice is a credit note.
    /// </summary>
    /// <returns>
    /// Returns true if net amount of invoice is a credit note; otherwise, false.
    /// </returns>
    private boolean validateIsCreditNote()
    {
        boolean checkCredidNote;

        if (custVendInvoiceJour.InvoiceAmount < 0 && paymModeTable.PaymOnInvoice == NoYes::Yes)
        {
            checkCredidNote = true;
            warning("@CashManagement:BillOfExchangeDebitBalanceError");
        }

        return checkCredidNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymInvoiceWithJournal construct(CustVendInvoiceJour _custVendInvoiceJour)
    {
        CustVendPaymInvoiceWithJournal custVendPaymInvoiceWithJournal;
        CustTrans custTrans;
        VendTrans vendTrans;
        CustVendPaymModeTable custVendPaymModeTable;

        custVendPaymInvoiceWithJournal = new CustVendPaymInvoiceWithJournal();

        custVendPaymInvoiceWithJournal.parmCustVendInvoiceJour(_custVendInvoiceJour);

        switch (_custVendInvoiceJour.module())
        {
            case SysModule::Cust, SysModule::Project:
                custVendPaymInvoiceWithJournal.parmModule(ModuleCustVend::Cust);
                 _custVendInvoiceJour.CustVendInvoiceJour::custVendTrans(custTrans);
                custVendPaymModeTable = CustVendPaymModeTable::findModule(ModuleCustVend::Cust, custTrans.PaymMode);
                custVendPaymInvoiceWithJournal.parmCustVendTrans(custTrans);
                break;

            case SysModule::Vend:
                custVendPaymInvoiceWithJournal.parmModule(ModuleCustVend::Vend);
                _custVendInvoiceJour.CustVendInvoiceJour::custVendTrans(vendTrans);
                custVendPaymModeTable = CustVendPaymModeTable::findModule(ModuleCustVend::Vend, vendTrans.PaymMode);
                custVendPaymInvoiceWithJournal.parmCustVendTrans(vendTrans);
                break;

            default:
                break;
        }

        custVendPaymInvoiceWithJournal.parmPaymModeTable(custVendPaymModeTable);

        return custVendPaymInvoiceWithJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptOutPaym</Name>
				<Source><![CDATA[
    static void promptOutPaym(ModuleCustVend _module,
                              PaymMode _paymMode,
                              BankAccountID _bankAccountID = '')
    {
        CustVendOutPaym custVendOutPaym;
        CustVendPaymModeTable custVendPaymModeTable;
        BankAccountID bankAccountID = _bankAccountID;

        custVendPaymModeTable = CustVendPaymModeTable::findModule(_module, _paymMode);

        if (!bankAccountID && custVendPaymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            bankAccountID = custVendPaymModeTable.parmPaymAccount();
        }

        custVendOutPaym = CustVendOutPaym::newCustVendPaymModeTable(custVendPaymModeTable);

        custVendOutPaym.parmLastValueDesignName(classId2Name(classidget(new CustVendPaymInvoiceWithJournal())));

        custVendOutPaym.getLast();

        custVendOutPaym.parmBankAccountID(bankAccountID);

        custVendOutPaym.prompt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>