<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInventoryTransactionFeatureExtensionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWarehouseInventoryTransactionFeatureExtensionValidator</c> class validates whether any extender have taken a dependency on method marked as obsolete as part of 
/// implementing the Warehouse-specific inventory transactions feature.
/// The class contains extension points such that additional methods can be added in case these need to be verified as well, 
/// and extenders with existing dependencies which should remain can opt their model out of the validation in case the dependency is by design.
/// </summary>
final public class WHSWarehouseInventoryTransactionFeatureExtensionValidator extends WHSFeatureExtensionValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildObsoletedMethodList</Name>
				<Source><![CDATA[
    [Hookable(true), Wrappable(true), Replaceable(false)]
    protected List buildObsoletedMethodList()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInitialObsoleteMethodList</Name>
				<Source><![CDATA[
    final protected void buildInitialObsoleteMethodList(List _methods)
    {
        // Those are artifacts specific to the InventTrans-based inventory stack.
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_Work));
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_WorkFrom));
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_WorkTo));
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_Container));
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_ContainerFrom));
        this.addAllMethodsFromClass(_methods, classStr(WHSInventMov_ContainerTo));
        this.addAllMethodsFromClass(_methods, classStr(InventUpd_FinancialLite));
        this.addAllMethodsFromClass(_methods, classStr(InventUpd_FinancialLiteStrategy));
        this.addAllMethodsFromClass(_methods, classStr(InventUpd_FinancialLiteStrategyWork));

        // Those methods mostly support warehouse-specific inventory transactions - i.e. depending on the work type the inventory movement will be performed using the new stack.
        // However: 1) we don't call those methods as often as we do when old stack is active; 2) when called to just change the tracking dimensions, it will do nothing in the new stack - separate method is used for that purpose.
        // For extensions use the WHSInventoryTransactionWorkController class instead.
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WHSInvent), staticMethodStr(WHSInvent, moveWorkQuantities)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WHSInvent), staticMethodStr(WHSInvent, moveWorkQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WHSInvent), staticMethodStr(WHSInvent, moveWorkTransactionQuantities)));

        // Those methods mostly support warehouse-specific inventory transactions - i.e. depending on the work type the inventory movement will be performed using the new stack.
        // However: 1) we don't call those methods anymore for the works running on the new stack.
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecutePutAwayToLocation), methodStr(WhsWorkExecutePutAwayToLocation, putAwayAllQuantityToLocation)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecutePutAwayToLocation), methodStr(WhsWorkExecutePutAwayToLocation, preparePutAwayFromInventDim)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecutePutAwayToLocation), methodStr(WhsWorkExecutePutAwayToLocation, preparePutAwayToInventDim)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecutePutAwayToLocation), methodStr(WhsWorkExecutePutAwayToLocation, calculateTotalHandlingQty)));
    
        this.buildObsoleteMethodListForTracingForm(_methods);
        this.buildObsoleteMethodListForInventDimTrackingTracingForm(_methods);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildObsoleteMethodListForInventDimTrackingTracingForm</Name>
				<Source><![CDATA[
    private void buildObsoleteMethodListForInventDimTrackingTracingForm(List _methods)
    {
        // CALLED FOR INVENTTRANS ONLY
        // With new transactions we call expandWarehouseTransactionNode
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, expandNodeServerProxy)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventDimTracking), staticMethodStr(InventDimTracking, expandNodeSearchOnServer)));
        // With new transactions we call lineTxtFromWHSInventoryTransaction
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, lineTxt)));
        // With new transactions we call createTreeNodeFromWarehouseTransaction
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, createTreeNode)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, expandNodeBackwardIssue)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, expandNodeForwardReceipt)));

        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, checkDateOrder)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, checkQuarantineOrder)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, checkTransOriginIds)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findBatchIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findBatchReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findBOMLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findKanbanJobPickingList)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findProdLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findTransIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findTransReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, findTransTransferReceipts)));
        // With new transactions we use isWarehouseTransactionChild
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, isTransChild)));
        // With new transactions we call isWarehouseTransactionInParentPath
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, isInParentPath)));

        // USED ONLY IN SOME CASES
        // called for InventTrans only, otherwise returning
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, expandNodeForwardIssue)));
        // called for InventTrans only, otherwise returning
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, expandNodeBackwardReceipt)));
        // used for InventTrans only, new transactions use initInventoryTransactionList
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTracking), methodStr(InventDimTracking, initInventTransList)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildObsoleteMethodListForTracingForm</Name>
				<Source><![CDATA[
    private void buildObsoleteMethodListForTracingForm(List _methods)
    {
        // used for InventTrans only, InventTrackingDimTracingWHSInventoryTransactionDTO is a new class that is used for the new stack
        this.addAllMethodsFromClass(_methods, classStr(InventTrackingDimTracingInventTransDTO));
        this.addAllMethodsFromClass(_methods, classStr(InventTrackingDimTracingInventTransOriginDTO));

        // NOT USED WITH NEW FEATURE
        // not used with the feature, using InventDimTrackingInventTransNode.tracingNodeKey instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingShippedSalesReportDataGen), methodStr(InventTrackingShippedSalesReportDataGen, recordKey)));
        // not used with the feature, using InventTransTrackingTransaction::tracingNodeKey instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventTrackingDimTracingRelations), staticMethodStr(InventTrackingDimTracingRelations, tracingNodeKey)));
        // not used with the feature, using InventTrackingDimTracingSearch.addInventTransAndWHSInventoryTransactionList2AsSubnodes instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, addInventTransList2AsSubnodes)));
        // not used with the feature in some places (addInventTransList2AsSubnodes), but in some called for InventTrans only (in addInventTransAndWHSInventoryTransactionList2AsSubnodes)
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, createSubNode)));
        // not used with the feature, using InventTrackingDimTracingHierarchy.createSubNodeFromNodeKey instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingHierarchy), methodStr(InventTrackingDimTracingHierarchy, createSubNode)));
        // not used with the feature, using InventTransTrackingTransaction.addTrackingNode instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingRelations), methodStr(InventTrackingDimTracingRelations, addInventTransNode)));
        // not used with the feature, using InventTrackingDimTracingFormCtrl.refreshWhenElementChanged instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingFormCtrl), methodStr(InventTrackingDimTracingFormCtrl, refreshDataSources)));
        // not used with the feature, using InventTrackingDimTracingSearch.linkSubNode instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingRelations), methodStr(InventTrackingDimTracingRelations, addBackwardRelation)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingRelations), methodStr(InventTrackingDimTracingRelations, addForwardRelation)));

        // USED ONLY IN SOME CASES
        // called fo InventTrans only, new transactions use InventTrackingDimTracingSearch.isTrackingTransactionChild instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, isTransChild)));
        // called for InventTrans only, new transactions use initInventoryTransactionList instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, initInventTransList)));
        // in InventTrackingDimTracingSearchBackward it is called for InventTrans only
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, expandReceiptTransaction)));
        // in InventTrackingDimTracingSearchForward it is called for InventTrans only
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, expandIssueTransaction)));
        // not used with the feature in some places (InventTrackingDimTracingSearch.isTransChild), called for InventTrans only in some (InventTrackingDimTracingSearch.isTrackingTransactionChild)
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, isChildWithSameInventDimId)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, checkDateOrder)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, isByProductProduction)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, checkTransOriginIds)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, isChildInProdBOM)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, checkQuarantineOrder)));

        // RETURN AND PARAMETERS TYPES CHANGES
        // This method was previously returning a Map<int, container> where container that stored two ints, now container stores one string
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingHierarchy), methodStr(InventTrackingDimTracingHierarchy, nodeRecordInfo)));
        // not used with the feature as uses the above `nodeRecordInfo` method, using InventTrackingDimTracingHierarchy.isRecordInParentPathUseNodeKey instead
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingHierarchy), methodStr(InventTrackingDimTracingHierarchy, isRecordInParentPath)));
        // This method expected a Set of of int, now it is provided with a set of str
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingHierarchy), methodStr(InventTrackingDimTracingHierarchy, exportChildNodesAsXML)));
        // This method returns container of [InventTrackingDimNodeType, [InventDimTrackingWHSInventoryTransactionNode]] or [InventTrackingDimNodeType, [InventTransOrigin, InventTrans]] (previously only the second option was possible)
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingHierarchyTree), methodStr(InventTrackingDimTracingHierarchyTree, nodeRecords)));

        // RISK OF BREAKING THE FEATURE
        // these methods allow for a lot of customization and might stop the execution of expanding transactions in a 'default' way - this means it might prevent from rendering new transactions at all
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventTrackingDimTracingSearchBackward), staticMethodStr(InventTrackingDimTracingSearchBackward, transferOrderReceiveExpandingIssueTransactionDelegateHandler)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventTrackingDimTracingSearchBackward), staticMethodStr(InventTrackingDimTracingSearchBackward, expandingReceiptTransactionDelegateHandler)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventTrackingDimTracingSearchForward), staticMethodStr(InventTrackingDimTracingSearchForward, expandReceiptTransactionDelegateHandler)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventTrackingDimTracingSearchForward), staticMethodStr(InventTrackingDimTracingSearchForward, expandIssueTransactionDelegateHandler)));

        // CALLED FOR INVENTTRANS ONLY
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventDimTrackingInventTransNode), staticMethodStr(InventDimTrackingInventTransNode, newFromInventTrans)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(InventDimTrackingInventTransNode), staticMethodStr(InventDimTrackingInventTransNode, newFromInventTransDTO)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, checkDateCriteria)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findProdLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findBOMLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findKanbanJobPickingList)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findTransIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findBatchIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findTransWHSQuarantineIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchBackward), methodStr(InventTrackingDimTracingSearchBackward, findTransWHSWorkIssues)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchForward), methodStr(InventTrackingDimTracingSearchForward, findBatchReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchForward), methodStr(InventTrackingDimTracingSearchForward, findTransReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchForward), methodStr(InventTrackingDimTracingSearchForward, findTransTransferReceiptsDTO)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchForward), methodStr(InventTrackingDimTracingSearchForward, findTransWHSQuarantineReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearchForward), methodStr(InventTrackingDimTracingSearchForward, findTransWHSWorkReceipts)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, canUseInventransAsInitialTransaction)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventTrackingDimTracingSearch), methodStr(InventTrackingDimTracingSearch, addFirstLevelInventTransNode)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTrackingInventTransNode), methodStr(InventDimTrackingInventTransNode, parmInventTransOriginDTO)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(InventDimTrackingInventTransNode), methodStr(InventDimTrackingInventTransNode, parmInventTransDTO)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildValidatedModuleSet</Name>
				<Source><![CDATA[
    [Hookable(true), Wrappable(true), Replaceable(false)]
    protected Set buildValidatedModuleSet()
    {
        Set modules = super();

        // Extensions related to the Cloud-and-Edge - the functionality is not supported now, cannot activate the new stack when CnE is enabled anyway.
        modules.add('WarehouseExecutionWorkload');
        modules.add('WarehouseExecutionWorkloadBackoffice');

        // Extensions used to test the old stack.
        modules.add('SCMTests');

        // Extensions related to validations specific to the old stack. Fine to have those extensions, they are optional.
        modules.add('AppTroubleshooting');

        // Only *FinancialLite* related extensions in WarehouseOrders are referring to obsolete methods, which should not be used with the new transaction stack enabled.
        // It is known that those extensions in WarehouseOrders module are not used for warehouse-related transactions, so it is safe to mark this module as validated.
        modules.add('WarehouseOrders');

        return modules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableWarehouseInventoryTransactionFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Warehouse-specific inventory transactions feature can be enabled.
    /// </summary>
    /// <returns>
    /// true, if the feature can be enabled; otherwise, false.
    /// </returns>
    [
        Hookable(false),
        SysObsolete('Use canEnableFeature() instead.', false, 20\06\2023)
    ]
    public boolean canEnableWarehouseInventoryTransactionFeature()
    {
        return this.canEnableFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportErrors</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean parmReportErrors(boolean _reportErrors = this.parmReportExtensionErrors())
    {
        return this.parmReportExtensionErrors(_reportErrors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllMethodsFromClass</Name>
				<Source><![CDATA[
    private void addAllMethodsFromClass(List _methods, ClassName _className)
    {
        SysDictClass classToAnalyze = SysDictClass::newName(_className);

        Set classMethods = classToAnalyze.methods(
            true,   // include instance methods
            true,   // include static methods
            false); // include inherited methods

        SetEnumerator classMethodsEnumerator = classMethods.getEnumerator();
        while (classMethodsEnumerator.moveNext())
        {
            _methods.addEnd(classMethodsEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct as an instance of the <c>WHSWarehouseInventoryTransactionFeatureExtensionValidator</c> class.
    /// </summary>
    /// <returns>
    /// The class instance.
    /// </returns>
    [Hookable(false)]
    static public WHSWarehouseInventoryTransactionFeatureExtensionValidator construct()
    {
        return new WHSWarehouseInventoryTransactionFeatureExtensionValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExtensionsAreCompatible</Name>
				<Source><![CDATA[
    [Replaceable, Wrappable]
    internal static boolean checkExtensionsAreCompatible(boolean _reportErrors, boolean _isEnableByDefault)
    {
        boolean validationResult;

        var validator = WHSWarehouseInventoryTransactionFeatureExtensionValidator::construct();
        validator.parmReportErrors(_reportErrors);

        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(validator)));

        using (var activityContext = instrumentationLogger.inventoryTransactionConfigurationActivities().validateExtensionsAreCompatible(_isEnableByDefault))
        {
            validationResult = validator.canEnableFeature();

            instrumentationLogger.inventoryTransactionConfigurationActivities().logExtensionsCompatibilityValidationResult(
                activityContext,
                validationResult);
        }

        return validationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>