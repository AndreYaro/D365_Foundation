<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotReportEngine_EmplTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotReportEngine_EmplTable extends RPayHRMPivotReportEngine implements BatchRetryable
{
    TransDate                 reportDate;

    DialogField               dfReportDate;

    #DEFINE.EmplId             ("EmplId")
    #DEFINE.EmplName           ("EmplName")
    #DEFINE.OrganizationId     ("OrganizationId")
    #DEFINE.OrganizationName   ("OrganizationName")
    #DEFINE.TitleId            ("TitleId")
    #DEFINE.TitleName          ("TitleName")
    #DEFINE.TradeCategory      ("TradeCategory")
    #DEFINE.EducationTypeId    ("EducationTypeId")
    #DEFINE.EducationTypeName  ("EducationTypeName")
    #DEFINE.BirthDate          ("BirthDate")
    #DEFINE.Nationality        ("Nationality")
    #DEFINE.Gender             ("Gender")
    #DEFINE.MaritalStatus      ("MaritalStatus")
    #DEFINE.Citizenship        ("Citizenship")
    #DEFINE.MotherTongue       ("MotherTongue")
    #DEFINE.KindOfWork         ("KindOfWork")
    #DEFINE.SortOfWork         ("SortOfWork")
    #DEFINE.PersonnelCategory  ("PersonnelCategory")
    #DEFINE.MilitaryService    ("MilitaryService")
    #DEFINE.MilitaryRankId     ("MilitaryRankId")
    #DEFINE.MilitaryRankName   ("MilitaryRankName")
    #DEFINE.MilitaryRegId      ("MilitaryRegId")
    #DEFINE.MilitaryRegName    ("MilitaryRegName")
    #DEFINE.MilitarySpeciality ("MilitarySpeciality")
    #DEFINE.MilitaryServiceAble("MilitaryServiceAble")
    #DEFINE.MilitaryConscript  ("MilitaryConscript")
    #DEFINE.MilitaryReserved   ("MilitaryReserved")
    #DEFINE.Mobilization       ("Mobilization")
    #DEFINE.MilitaryGroup      ("MilitaryGroup")
    #DEFINE.MilitaryCategory   ("MilitaryCategory")
    #DEFINE.MilitarySpecial    ("MilitarySpecial")
    #DEFINE.MilitaryTakeOff    ("MilitaryTakeOff")
    #DEFINE.PayFormType        ("PayFormType")
    #DEFINE.CalendarId         ("CalendarId")
    #DEFINE.PayMainEmplId      ("PayMainEmplId")
    #DEFINE.Qty                ("Qty")
    #DEFINE.EnumStrLen         (100)

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reportDate,
        conNameCodeFieldsSettings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    protected void buildData()
    {
        RPayHistory                  rPayHistory, employmentData;
        RHRMEmplTable                emplTable;
        RHRMPersonTable              personTable;
        RHRMPersonData               personData;
        Map                          dataMap;

        this.progressInit("@SYS60116",0, #AviTransfer);
        progress.setTotal(SysQuery::countTotal(queryRun));

        pivotTableData.rsOpen();

        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            rPayHistory = RPayHistory::getHistoryLineByDate(emplTable.EmployeeId, reportDate, true);
            employmentData = this.getEmploymentData(rPayHistory);

            personTable = emplTable.personTable();
            personData  = RHRMPersonData::findVersionOnDate(personTable.PersonnelNumber, reportDate);
            progress.setText(strFmt("@RUP1998", emplTable.name()));
            progress.incCount();

            dataMap =  new Map(Types::String, Types::Container);

            dataMap.insert(#EmplId,              [emplTable.EmployeeId]);
            dataMap.insert(#EmplName,            [emplTable.name()]);
            dataMap.insert(#Qty,                 [1]);
            dataMap.insert(#OrganizationId,      [employmentData.HrmOrganizationId]);
            dataMap.insert(#OrganizationName,    [employmentData.organizationDescription()]);
            dataMap.insert(#TitleId,             [HcmTitle::find(employmentData.HcmTitle).TitleId]);
            dataMap.insert(#TitleName,           [employmentData.positionDescription()]);
            dataMap.insert(#TradeCategory,       [employmentData.TradeCategory]);
            dataMap.insert(#EducationTypeId,     [personTable.EducationTypeId]);
            dataMap.insert(#EducationTypeName,   [RHRMEducationType::find(personTable.EducationTypeId).Description]);
            dataMap.insert(#BirthDate,           [personTable.hcmPersonPrivateDetails().BirthDate]);
            dataMap.insert(#Nationality,         [personTable.NationalityId]);
            dataMap.insert(#Gender,              [enum2str(personTable.Gender)]);
            dataMap.insert(#MaritalStatus,       [personTable.MaritalStatusId]);
            dataMap.insert(#Citizenship,         [personData.LogisticsAddressCountryRegion]);
            dataMap.insert(#MotherTongue,        [RHRMLanguageCode::find(personTable.MotherTongue).Description]);
            dataMap.insert(#KindOfWork,          [enum2str(rPayHistory.HrmKindOfWork)]);
            dataMap.insert(#SortOfWork,          [enum2str(emplTable.SortOfWork)]);
            dataMap.insert(#PersonnelCategory,   [emplTable.PersonnelCategoryId]);
            dataMap.insert(#MilitaryService,     [enum2str(personTable.MilitaryService)]);
            dataMap.insert(#MilitaryRankId,      [personTable.MilitaryRankId]);
            dataMap.insert(#MilitaryRankName,    [RHRMMilitaryRank::find(personTable.MilitaryRankId).Description]);
            dataMap.insert(#MilitaryRegId,       [personTable.MilitaryRegistrationOfficeId]);
            dataMap.insert(#MilitaryRegName,     [RHRMMilitaryRegistrationOffice::find(personTable.MilitaryRegistrationOfficeId).Description]);
            dataMap.insert(#MilitarySpeciality,  [personTable.MilitarySpeciality]);
            dataMap.insert(#MilitaryServiceAble, [enum2str(personTable.MilitaryServiceAbleBodied)]);
            dataMap.insert(#MilitaryConscript,   [enum2str(personTable.MilitaryConscript)]);
            dataMap.insert(#MilitaryReserved,    [enum2str(personTable.MilitaryReserved)]);
            dataMap.insert(#Mobilization,        [enum2str(personTable.MilitaryMobilization)]);
            dataMap.insert(#MilitaryGroup,       [personTable.MilitaryGroupId]);
            dataMap.insert(#MilitaryCategory,    [personTable.MilitaryCategoryId]);
            dataMap.insert(#MilitarySpecial,     [personTable.MilitarySpecialRegistration]);
            dataMap.insert(#MilitaryTakeOff,     [enum2str(personTable.MilitaryTakeOffRegister)]);
            dataMap.insert(#PayFormType,         [emplTable.PayFormType]);
            dataMap.insert(#CalendarId,          [emplTable.PayCalendarId]);
            dataMap.insert(#PayMainEmplId,       [emplTable.PayMainEmplId]);

            pivotTableData.insertRecord(dataMap);
        }

        pivotTableData.rsUpdateBatch();

        this.progressHide();
        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ;
        return "@RUP221";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super() as DialogRunbase;

        dialog.caption(this.caption());
        dfReportDate = dialog.addFieldValue(extendedTypeStr(TransDate), reportDate, "@GLS100733");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmploymentData</Name>
				<Source><![CDATA[
    private RPayHistory getEmploymentData(RPayHistory _payHistory)
    {
        RPayHistory payHistory;

        if (_payHistory && _payHistory.OperationType == RHRMJournalType::Dismiss)
        {
            payHistory = RPayHistory::getHistoryLineByDate(_payHistory.Number, _payHistory.StartDate - 1, true);
        }
        else
        {
            payHistory = _payHistory;
        }

        return payHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTableMetaData.updateCodeNameSettingsFromTable();
            reportDate = dfReportDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotCodeNameFields</Name>
				<Source><![CDATA[
    protected void initPivotCodeNameFields()
    {
        DictType    dictTypeCode;

        void addCodeNameField(FieldName  _codeField,
                              FieldName  _nameField,
                              FieldLabel _fieldLabel = dictTypeCode.label())
        {
            pivotTableMetaData.addCodeNameField(_codeField,_nameField,_fieldLabel);
        }

        dictTypeCode = new DictType(extendedTypeNum(RHRMEmplId));
        addCodeNameField(#EmplId, #EmplName);

        dictTypeCode = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addCodeNameField(#OrganizationId, #OrganizationName);

        dictTypeCode = new DictType(extendedTypeNum(RHRMPositionId));
        addCodeNameField(#TitleId, #TitleName);

        dictTypeCode = new DictType(extendedTypeNum(RHRMEducationTypeId));
        addCodeNameField(#EducationTypeId, #EducationTypeName);

        dictTypeCode = new DictType(extendedTypeNum(RHRMMilitaryRankId));
        addCodeNameField(#MilitaryRankId, #MilitaryRankName);

        dictTypeCode = new DictType(extendedTypeNum(RHRMMilitaryRegistrationOfficeId));
        addCodeNameField(#MilitaryRegId, #MilitaryRegName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotMetadata</Name>
				<Source><![CDATA[
    protected void initPivotMetadata()
    {
        Map      metaDataMap;
        DictType dictType;
        DictEnum dictEnum;

        void addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictType.label(),
                                    Types                        _baseType   = dictType.baseType(),
                                    int                          _stringLen  = dictType.stringLen())
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        void addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictEnum.label(),
                                    Types                        _baseType   = Types::String,
                                    int                          _stringLen  = #EnumStrLen)
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }
        ;

        metaDataMap = new Map(Types::String, Types::Container);

        dictType = new DictType(extendedTypeNum(RHRMEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EmplId);

        dictType = new DictType(extendedTypeNum(DirPartyName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EmplName);

        dictType = new DictType(extendedTypeNum(Qty));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#Qty);

        dictType = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #OrganizationId);

        dictType = new DictType(extendedTypeNum(RHRMOrganizationName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #OrganizationName);

        dictType = new DictType(extendedTypeNum(RHRMPositionId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #TitleId);

        dictType = new DictType(extendedTypeNum(CCDescription));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #TitleName);

        dictType = new DictType(extendedTypeNum(RHRMTradeCategoryId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #TradeCategory);

        dictType = new DictType(extendedTypeNum(RHRMEducationTypeId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EducationTypeId);

        dictType = new DictType(extendedTypeNum(RHRMEducationTypeName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EducationTypeName);

        dictType = new DictType(extendedTypeNum(BirthDate));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #BirthDate);

        dictType = new DictType(extendedTypeNum(RHRMNationalityId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #Nationality);

        dictEnum = new DictEnum(enumNum(RHRMGender));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #Gender);

        dictType = new DictType(extendedTypeNum(RHRMMaritalStatusId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MaritalStatus, "@RUP1306");

        dictType = new DictType(extendedTypeNum(AddressCountryRegionId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #Citizenship, "@RUP1307");

        dictType = new DictType(extendedTypeNum(RHRMLanguageCodeName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MotherTongue, "@RUP1310");

        dictEnum = new DictEnum(enumNum(RHRMKindOfWork));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #KindOfWork);

        dictEnum = new DictEnum(enumNum(RHRMSortOfWork));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #SortOfWork);

        dictType = new DictType(extendedTypeNum(RHRMPersonnelCategoryId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PersonnelCategory);

        dictEnum = new DictEnum(enumNum(RHRMMilitaryService));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryService);

        dictType = new DictType(extendedTypeNum(RHRMMilitaryRankId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryRankId);

        dictType = new DictType(extendedTypeNum(RHRMMilitaryRankName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #MilitaryRankName);

        dictType = new DictType(extendedTypeNum(RHRMMilitaryRegistrationOfficeId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryRegId);

        dictType = new DictType(extendedTypeNum(RHRMMilitaryRegistrationOfficeName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #MilitaryRegName);

        dictType = new DictType(extendedTypeNum(RHRMMilitarySpeciality));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitarySpeciality);

        dictEnum = new DictEnum(enumNum(RHRMMilitaryServiceAbleBodied));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryServiceAble);

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryConscript, "@GLS106541");

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryReserved, "@GLS106542");

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #Mobilization, "@GLS106383");

        dictType = new DictType(extendedTypeNum(RHRMMilitaryGroupId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryGroup);

        dictType = new DictType(extendedTypeNum(RHRMMilitaryCategoryId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryCategory);

        dictType = new DictType(extendedTypeNum(RHRMMilitarySpecialRegistration));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitarySpecial);

        dictEnum = new DictEnum(enumNum(RHRMMilitaryTakeOffRegister));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #MilitaryTakeOff);

        dictType = new DictType(extendedTypeNum(RPayFormType));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayFormType);

        dictType = new DictType(extendedTypeNum(RPayCalendarId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CalendarId);

        dictType = new DictType(extendedTypeNum(RHRMEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayMainEmplId, "@GLS105854");

        pivotTableMetaData.addFields(metaDataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        ;

        conNameCodeFieldsSettings = pivotTableMetaData.codeNameFields().pack();

        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                query;
        QueryBuildDataSource qbdsEmplTable;

        query = new Query();

        qbdsEmplTable = query.addDataSource(tableNum(RHRMEmplTable));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean   ret;
        Version   version     = RunBase::getVersion(_packedClass);
        container packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                pivotTableMetaData.unpackCodeNameSettings(conNameCodeFieldsSettings);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! reportDate)
            {
                ret = checkFailed("@SYS24455");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>