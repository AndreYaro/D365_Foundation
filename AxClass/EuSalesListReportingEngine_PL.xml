<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EUSalesListReportingEngine_PL</c> extends the functionality of <c>EUSalesListReportingEngine</c>
///     class to support requirements specific to Poland.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoPL)]
class EuSalesListReportingEngine_PL extends EUSalesListReportingEngineCorrections implements BatchRetryable
{
    private TaxAuthority taxAuthority;
    private NoYes printReport;

    private DialogField dialogTaxAuthority;
    private DialogField dialogPrintReport;

    #define.CurrentVersion(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogTaxAuthority = dialog.addFieldValue(extendedTypeStr(TaxAuthority), taxAuthority);
        dialogPrintReport = dialog.addFieldValue(enumStr(NoYes), printReport, "@EUSalesListCommon:Instruction");

        dialogCorrection.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();

        taxAuthority = dialogTaxAuthority.value();
        printReport = dialogPrintReport.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record ino the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;

        euSalesListReportingHeader = super();
        euSalesListReportingHeader.TaxAuthority = taxAuthority;
        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!printReport)
        {
            ret = checkFailed("@EUSalesListCommon:InstructionErrorMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList, super()];
        packed = this.appendVariableToPack(packed, classStr(EuSalesListReportingEngine_PL), varStr(taxAuthority), taxAuthority);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        container packedSuper;
        Integer version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case 1:
                return super(packedClass);

            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    taxAuthority = this.extractPackedVariable(
                        packedClass,
                        classStr(EuSalesListReportingEngine_PL),
                        varStr(taxAuthority));

                    return super(packedSuper);
                }
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>