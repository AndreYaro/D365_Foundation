<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventStdCostConvCheck
{
    List                    errorList;
    InventStdCostConvItem   inventStdCostConvItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an error message to the list of error messages.
    /// </summary>
    /// <param name="errorStr">
    ///    An error message string.
    /// </param>
    protected void addError(str errorStr)
    {
        //Adds an error message to the list
        errorList.addEnd(errorStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the list of error messages.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> object that contains error messages.
    /// </returns>
    public List errorList()
    {
        //Simply hands out the list of errors
        return errorList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(InventStdCostConvItem _inventStdCostConvItem)
    {
        inventStdCostConvItem   = _inventStdCostConvItem;

        errorList = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether errors exist.
    /// </summary>
    /// <returns>
    ///    true if no errors exist; otherwise, false.
    /// </returns>
    public abstract boolean validate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes all checks.
    /// </summary>
    /// <param name="_inventStdCostConvItem">
    ///    An <c>InventStdCostConvItem</c> record buffer that should be checked.
    /// </param>
    /// <returns>
    ///    A <c>List</c> object that contains error messages.
    /// </returns>
    /// <remarks>
    ///    If the <c>List</c> object does not contain any elements then no errors were found.
    /// </remarks>
    static public List checkAll(InventStdCostConvItem _inventStdCostConvItem)
    {
        int                         i;
        List                        errorListLocal = new List(Types::String);

        //Perform validations on all the different checktypes
        DictEnum dictEnum = new DictEnum(enumNum(InventStdCostConvCheckType));
        for (i=0;i<dictEnum.values();i++)
        {
            InventStdCostConvCheck inventStdCostConvCheck = InventStdCostConvCheck::newInventStdCostCheckType(_inventStdCostConvItem, dictEnum.index2Value(i));
            if (!inventStdCostConvCheck.validate())
            {
                errorListLocal.appendList(inventStdCostConvCheck.errorList());
            }
        }

        return errorListLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventStdCostCheckType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>inventStdCostConvCheck</c> object from the specified parameters.
    /// </summary>
    /// <param name="_inventStdCostConvItem">
    ///    An <c>InventStdCostConvItem</c> record buffer that must be checked.
    /// </param>
    /// <param name="_type">
    ///    An <c>InventStdCostConvCheckType</c> enumeration value that specifies which check to perform.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvCheck</c> object
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An object could not be instantiated.
    /// </exception>
    public static InventStdCostConvCheck newInventStdCostCheckType(InventStdCostConvItem _inventStdCostConvItem, InventStdCostConvCheckType _type)
    {
        InventStdCostConvCheck inventStdCostConvCheck;

        switch (_type)
        {
            case InventStdCostConvCheckType::StandardCost:
                inventStdCostConvCheck = InventStdCostConvCheck_StandardCost::construct(_inventStdCostConvItem);
                break;
            case InventStdCostConvCheckType::ModelGroup:
                inventStdCostConvCheck = InventStdCostConvCheck_ModelGroup::construct(_inventStdCostConvItem);
                break;
            case InventStdCostConvCheckType::Item:
                inventStdCostConvCheck = InventStdCostConvCheck_Item::construct(_inventStdCostConvItem);
                break;

            default:
                throw error("@SYS104799");
        }

        return inventStdCostConvCheck;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
