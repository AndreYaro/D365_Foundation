<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareVendPackingSlipJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningCompareVendPackingSlipJour</c> class extends the generic functionality in the <c>VersioningCompare</c> class and implements the analysis for a Vendor Packing Slip.
/// </summary>
class VersioningCompareVendPackingSlipJour extends VersioningCompare
{
    RefRecId vendPackingSlipJourRecId;
    boolean  isOldVersionArchived;
    boolean  isNewVersionArchived;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    public str getCaption()
    {
        return "@SYS333385";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the <c>PurchId</c> value from the calling record and initializes the comparison based on
    /// the records.
    /// </summary>
    /// <param name="_changeVersion">
    /// A record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    /// A second record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    /// If the record originates from a <c>FormDataSource</c> object, the current selection will be used.
    /// If the first argument does not contain a multi-selection and the second optional parameter is not
    /// specified, the current version is used to compare.
    /// </remarks>
    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        super(_changeVersion, _alternateNewVersion);

        VendPackingSlipVersion versionOld = changeVersionOld;
        vendPackingSlipJourRecId  = versionOld.VendPackingSlipJour;
        isOldVersionArchived = versionOld.isArchived();

        if (changeVersionNew)
        {
            isNewVersionArchived = changeVersionNew.isArchived();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VersioningTmpTrans</c> temporary table with the information that is specific to
    /// a vendor packing slip.
    /// </summary>
    public void loadData()
    {
        this.loadVendPackingSlipJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVendPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>VendPackingSlipJour</c> records and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <remarks>
    /// The method will also analyze the differences in the following tables:
    /// <list type="bullet">
    /// <item>
    /// <description>The <c>VendPackingSlipTrans</c> table.</description>
    /// </item>
    /// </list>
    /// </remarks>
    protected void loadVendPackingSlipJour()
    {
        VendPackingSlipJour vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipJourRecId);
        RecId vendPackingSlipJourNodeRecId = this.insertVersioningTmpTrans(vendPackingSlipJour, true, true, vendPackingSlipJour, vendPackingSlipJour, 0);

        this.loadVendPackingSlipTrans(vendPackingSlipJour, vendPackingSlipJourNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>VendPackingSlipTrans</c> records that are related to the specified
    /// <c>VendPackingSlipJour</c> record and saves the result in the <c>VersioningTmpTrans</c> temporary
    /// table.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// The <c>VendPackingSlipJour</c> record that owns the <c>VendPackingSlipTrans</c> transactions.
    /// </param>
    /// <param name="_vendPackingSlipJourNodeRecId">
    /// The <c>RecId</c> field of the record in the temporary table that holds the
    /// <c>VendPackingSlipJour</c> record.
    /// </param>
    protected void loadVendPackingSlipTrans(VendPackingSlipJour _vendPackingSlipJour, recId _vendPackingSlipJourNodeRecId)
    {
        VendPackingSlipTrans                    vendPackingSlipTrans;
        VendPackingSlipTransHistory             vendPackingSlipTransHistory;
        VendPackingSlipTrans                    vendPackingSlipTransOld;
        VendPackingSlipTrans                    vendPackingSlipTransNew;

        while select vendPackingSlipTrans
            order by LineNum
            where vendPackingSlipTrans.VendPackingSlipJour == _vendPackingSlipJour.RecId
        {
            if (isOldVersionArchived)
            {
                vendPackingSlipTransHistory = VendPackingSlipTransHistory::find(vendPackingSlipTrans.RecId, oldDateTime);
                vendPackingSlipTransOld.data(vendPackingSlipTrans.data());
                vendPackingSlipTransOld.initFromVendPackingSlipTransHistory(vendPackingSlipTransHistory);
            }
            else
            {
                vendPackingSlipTransOld = vendPackingSlipTrans;
            }

            if (isNewVersionArchived)
            {
                vendPackingSlipTransHistory = VendPackingSlipTransHistory::find(vendPackingSlipTrans.RecId, newDateTime);
                vendPackingSlipTransNew.data(vendPackingSlipTrans.data());
                vendPackingSlipTransNew.initFromVendPackingSlipTransHistory(vendPackingSlipTransHistory);
            }
            else
            {
                vendPackingSlipTransNew = vendPackingSlipTrans;
            }

            this.insertVersioningTmpTrans(vendPackingSlipTrans, true, true, vendPackingSlipTransOld, vendPackingSlipTransNew, _vendPackingSlipJourNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VersioningCompareVendPackingSlipJour construct()
    {
        return new VersioningCompareVendPackingSlipJour();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>