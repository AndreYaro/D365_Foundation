<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAResAssignAnalysisBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for calculating resource assignment availability, capacity, and utilization.
/// </summary>
abstract class PSAResAssignAnalysisBase
{
    TransDate                         m_dStartDate;
    TransDate                         m_dEndDate;
    ResourceRecId                     m_Resource;
    PSAResAssignAnalysisVersion       m_eResAssignAnalysisVersion;

    PSATmpResourceAssignmentAnalysis  m_tTmpResourceAssignmentAnalysis;

    QueryRun                          m_oSummaryQueryRun;
    Common                            m_tCommon;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    abstract void buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    abstract void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssignmentAnalysis</Name>
				<Source><![CDATA[
    abstract void insertAssignmentAnalysis()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    Common parmCommon(Common _tCommon = m_tCommon)
    {
        m_tCommon = _tCommon;

        return m_tCommon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    TransDate parmEndDate(TransDate _dEndDate = m_dEndDate)
    {
        m_dEndDate = _dEndDate;

        if (!m_dEndDate)
        {
            m_dEndDate =  maxDate();
        }

        return m_dEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResAssignAnalysisVersion</Name>
				<Source><![CDATA[
    PSAResAssignAnalysisVersion parmResAssignAnalysisVersion(PSAResAssignAnalysisVersion _eResAssignAnalysisVersion = m_eResAssignAnalysisVersion)
    {
        m_eResAssignAnalysisVersion = _eResAssignAnalysisVersion;

        return m_eResAssignAnalysisVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    ResourceRecId parmResource(ResourceRecId _resource = m_Resource)
    {
        m_Resource = _resource;

        return m_Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    TransDate parmStartDate(TransDate _dStartDate = m_dStartDate)
    {
        m_dStartDate = _dStartDate;

        if (!m_dStartDate)
        {
            m_dStartDate = datenull();
        }

        return m_dStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to sets values to global variables and calls child class methods.
    /// </summary>
    /// <param name="_dStartDate">
    ///     The start date of the resource assignment analysis.
    /// </param>
    /// <param name="_dEndDate">
    ///     The end date of the resource assignment analysis.
    /// </param>
    /// <param name="_tCommon">
    ///     Common buffer to set m_tCommon parameter.
    /// </param>
    /// <param name="_resource">
    ///     The resource's Rec Id.
    /// </param>
    void run(   Transdate                    _dStartDate                = datenull(),
                TransDate                    _dEndDate                  = datemax(),
                Common                       _tCommon                   = null,
                ResourceRecId                _resource                  = 0)
    {
        this.parmStartDate(_dStartDate);
        this.parmEndDate(_dEndDate);
        this.parmCommon(_tCommon);
        this.parmResource(_resource);

        this.buildQuery();
        this.initQuery();
        this.insertAssignmentAnalysis();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpResourceAssignmentAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to return PSATmpResourceAssignmentAnalysis table buffer.
    /// </summary>
    /// <returns>
    ///     PSATmpResourceAssignmentAnalysis table buffer.
    /// </returns>
    PSATmpResourceAssignmentAnalysis tmpResourceAssignmentAnalysis()
    {
        return m_tTmpResourceAssignmentAnalysis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to initialize a corresponding child class based on resource assignment analysis version parameter.
    /// </summary>
    /// <param name="_eResAssignAnalysisVersion">
    ///     The type of resource assignment analysis.
    /// </param>
    /// <returns>
    ///     The new instance of the class PSAResAssignAnalysisBase.
    /// </returns>
    public static PSAResAssignAnalysisBase construct(PSAResAssignAnalysisVersion  _eResAssignAnalysisVersion = PSAResAssignAnalysisVersion::Employee)
    {
        PSAResAssignAnalysisBase oResourceAssignmentAnalysis;
        boolean isPerformanceEnhancementEnabledV2 = ResUtil::isPerformanceEnhancementFeatureEnabled(true);

        switch (_eResAssignAnalysisVersion)
        {
            case PSAResAssignAnalysisVersion::Employee:
            case PSAResAssignAnalysisVersion::FinancialDimension:
                if (isPerformanceEnhancementEnabledV2)
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_EmployeeResourceV2();
                }
                else
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_EmployeeResource();
                }
                break;

            case PSAResAssignAnalysisVersion::Project:
                if (isPerformanceEnhancementEnabledV2)
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_ProjectResourceV2();
                }
                else
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_ProjectResource();
                }
                break;

            case PSAResAssignAnalysisVersion::ResourceCategory:
                if (isPerformanceEnhancementEnabledV2)
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_ResCategoryV2();
                }
                else
                {
                    oResourceAssignmentAnalysis = new PSAResAssignAnalysis_ResCategory();
                }
                break;
        }

        oResourceAssignmentAnalysis.parmResAssignAnalysisVersion(_eResAssignAnalysisVersion);

        return oResourceAssignmentAnalysis;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>