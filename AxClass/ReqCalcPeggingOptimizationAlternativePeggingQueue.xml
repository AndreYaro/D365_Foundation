<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcPeggingOptimizationAlternativePeggingQueue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcPeggingOptimizationAlternativePeggingQueue</c> class represents a coverage for a supply sorted in chronological order
/// </summary>
internal class ReqCalcPeggingOptimizationAlternativePeggingQueue
{
    private Map reqTransCoverageMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        reqTransCoverageMap = new Map(Types::String, Types::Class);     // {K, V} = {ReqTrans hashKey, Set {ReqTransCov} }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcPeggingOptimizationAlternativePeggingQueue construct()
    {
        return new ReqCalcPeggingOptimizationAlternativePeggingQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a coverage set for a supply transaction
    /// </summary>
    /// <param name="_hashKey">
    /// A hash key used for sorting
    /// </param>
    /// <returns>
    /// A <c>ReqTransCov</c> coverage set
    /// </returns>
    [Hookable(false)]
    public Set lookup(str _hashKey)
    {
        return reqTransCoverageMap.exists(_hashKey) ? reqTransCoverageMap.lookup(_hashKey) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a coverage for a supply transaction
    /// </summary>
    /// <param name="_coverage">
    /// A <c>ReqTransCov</c> coverage
    /// </param>
    /// <param name="_alternativeReceipt">
    /// A <c>ReqTrans</c> supply transaction
    /// </param>
    [Hookable(false)]
    public void add(ReqTransCov _coverage, ReqTrans _alternativeReceipt)
    {
        str hashKey = ReqCalcPeggingOptimizationAlternativePeggingQueue::reqTransDateTimeHashKey(_alternativeReceipt.futuresDateTime(), _alternativeReceipt);

        if (!reqTransCoverageMap.exists(hashKey))
        {
            reqTransCoverageMap.insert(hashKey, new Set(Types::Record));
        }

        Set coverageSet = reqTransCoverageMap.lookup(hashKey);
        coverageSet.add(_coverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a coverage for a supply transaction
    /// </summary>
    /// <param name="_hashKey">
    /// A hash key used for sorting
    /// </param>
    /// <param name="_coverage">
    /// A <c>ReqTransCov</c> coverage to delete
    /// </param>
    /// <returns>
    /// True if coverage is removed; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean remove(str _hashKey, ReqTransCov _coverage)
    {
        boolean removed;

        Set coverageSet = this.lookup(_hashKey);

        if (coverageSet != null)
        {
            removed = coverageSet.remove(_coverage);

            if (coverageSet.empty())
            {
                reqTransCoverageMap.remove(_hashKey);
            }
        }

        return removed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for a supply coverage set
    /// </summary>
    /// <returns>
    /// A <c>ReqCalcPeggingOptimizationAlternativePeggingQueueEnumerator</c> enumerator
    /// </returns>
    [Hookable(false)]
    public ReqCalcPeggingOptimizationAlternativePeggingQueueEnumerator getEnumerator()
    {
        return new ReqCalcPeggingOptimizationAlternativePeggingQueueEnumerator(reqTransCoverageMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDateTimeHashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sort key used to order supply transactions in chronological order
    /// </summary>
    /// <param name="_reqDateTime">
    /// Date and time
    /// </param>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> supply transaction
    /// </param>
    /// <returns>
    /// The hash key
    /// </returns>
    public static str reqTransDateTimeHashKey(ReqDateTime _reqDateTime, ReqTrans _reqTrans)
    {
        str hashKey = int2str(date2num(_reqDateTime.parmDate())) + '#' +
                      int2str(_reqDateTime.parmTime()) + '#' +
                      int642str(_reqTrans.RecId);

        return hashKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>