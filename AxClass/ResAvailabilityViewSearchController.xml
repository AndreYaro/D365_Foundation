<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResAvailabilityViewSearchController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// AvailabilityView search controller.
/// </summary>
public class ResAvailabilityViewSearchController
{
    private AvailabilityView availabilityViewControl;
    private str delimiters = ",;";
    private ResSearchCriteria searchCriteria;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>searchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource search criteria.
    /// </summary>
    /// <param name = "_searchCriteria">Resource search criteria.</param>
    /// <returns>Resource search criteria.</returns>
    public ResSearchCriteria searchCriteria(ResSearchCriteria _searchCriteria = searchCriteria)
    {
        searchCriteria = _searchCriteria;

        if (searchCriteria)
        {
            this.updateAvailabilityViewContext();
        }

        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the availabilityView control.
    /// </summary>
    public void refresh()
    {
        availabilityViewControl.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAvailabilityViewContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update availabilityView control context.
    /// </summary>
    protected void updateAvailabilityViewContext()
    {
        ResAvailabilityViewContext context = availabilityViewControl.controlContext();
        context.searchString(searchCriteria.getCriteriaString());
        availabilityViewControl.controlContext(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of availability view search controller.
    /// </summary>
    /// <param name = "_availabilityViewControl">AvailabilityView control.</param>
    protected void new(AvailabilityView _availabilityViewControl)
    {
        availabilityViewControl = _availabilityViewControl;

        ResAvailabilityViewContext context = availabilityViewControl.controlContext();
        searchCriteria = ResSearchCriteria::createCriteria(context.searchString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAvailabilityViewControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of availability view search controller.
    /// </summary>
    /// <param name = "_availabilityViewControl">AvailabilityView control.</param>
    /// <returns>AvailabilityView search controller.</returns>
    public static ResAvailabilityViewSearchController newFromAvailabilityViewControl(AvailabilityView _availabilityViewControl)
    {
        if (!_availabilityViewControl)
        {
            error::missingParameter(_availabilityViewControl);
        }

        return new ResAvailabilityViewSearchController(_availabilityViewControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByActivityResourceRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for resources that match the specified activity resource role.
    /// </summary>
    /// <param name = "_resourceCategory">Activity resource role.</param>
    public void searchByActivityResourceRole(ResourceCategoryRecId _resourceCategory)
    {
        if (_resourceCategory)
        {
            ResActivityResourceRoleSearchCriteria searchCriteriaItem;
            searchCriteriaItem = ResActivityResourceRoleSearchCriteria::construct();
            searchCriteriaItem.addValue(_resourceCategory);
            searchCriteria.setCriteriaItem(searchCriteriaItem);
        }
        else
        {
            searchCriteria.removeCriteriaItem(classNum(ResActivityResourceRoleSearchCriteria));
        }

        this.updateAvailabilityViewContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for resources that match specified name.
    /// </summary>
    /// <param name = "_searchName">Name to search for.</param>
    public void searchByName(str _searchName)
    {
        if (_searchName)
        {
            ResResourceNameSearchCriteria searchCriteriaItem;
            searchCriteriaItem = ResResourceNameSearchCriteria::construct();

            ListEnumerator enumerator = strSplit(_searchName, delimiters).getEnumerator();
            while (enumerator.moveNext())
            {
                searchCriteriaItem.addValue(enumerator.current());
            }

            searchCriteria.setCriteriaItem(searchCriteriaItem);
        }
        else
        {
            searchCriteria.removeCriteriaItem(classNum(ResResourceNameSearchCriteria));
        }

        this.updateAvailabilityViewContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByAnyCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for resources that match specified search string.
    /// </summary>
    /// <param name = "_anyCriteria">Search string.</param>
    public void searchByAnyCriteria(str _anyCriteria)
    {
        // handle searching of Any criteria by Name for now
        this.searchByName(_anyCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByTeamMembersOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles the availability view display mode to show all resources or only resources within current project team.
    /// </summary>
    /// <param name = "_resourceSetting">Indicates if only project team members should be shown.</param>
    public void searchByTeamMembersOnly(ResBookingResourceSetting _resourceSetting)
    {
        if (_resourceSetting != ResBookingResourceSetting::AllResources)
        {
            ResActivityTeamOnlySearchCriteria searchCriteriaItem = ResActivityTeamOnlySearchCriteria::construct();
            searchCriteriaItem.addValue(ResBookingResourceSetting::ActivityTeamOnly);
            searchCriteria.setCriteriaItem(searchCriteriaItem);
        }
        else
        {
            searchCriteria.removeCriteriaItem(classNum(ResActivityTeamOnlySearchCriteria));
        }

        this.updateAvailabilityViewContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for resources that match specified resource category.
    /// </summary>
    /// <param name = "_resourceCategory">Resource categories.</param>
    public void searchByResourceCategory(str _resourceCategory)
    {
        if (_resourceCategory)
        {
            ResResourceCategorySearchCriteria searchCriteriaItem;
            searchCriteriaItem = ResResourceCategorySearchCriteria::construct();
            searchCriteriaItem.setValues(_resourceCategory);
            searchCriteria.setCriteriaItem(searchCriteriaItem);
        }
        else
        {
            searchCriteria.removeCriteriaItem(classNum(ResResourceCategorySearchCriteria));
        }

        this.updateAvailabilityViewContext();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>