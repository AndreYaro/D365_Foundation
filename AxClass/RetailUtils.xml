<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// Retail utilities.
/// </summary>
class RetailUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>priceValidInStore</Name>
				<Source><![CDATA[
    [SysObsolete('Unused method removed in AX 2012 R3', false, 31\01\2016)]
    boolean priceValidInStore()
    {
        boolean ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemSold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the item and sets the Transaction code based on whether the item is on file or no.
    /// </summary>
    /// <param name="itemId">
    /// The current value of ItemID.
    /// </param>
    /// <param name="barcode">
    /// The current value of bar code.
    /// </param>
    /// <param name="isGiftCard">
    /// True if product is gift card, false otherwise.
    /// </param>
    /// <returns>
    /// The transaction code based on item available on file.
    /// </returns>
    /// <remarks>
    /// Checks for the bar code on the item.
    /// </remarks>
    [SysObsolete('currently this method is not being used', false, 30\06\2020)]
    public static RetailItemTransactionCode checkItemSold(ItemId itemId, ItemBarCode barcode, boolean isGiftCard = false)
    {
        return RetailUtils::checkItemSoldInSite(itemId, barcode, isGiftCard, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemSoldInSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the item with respect to given inventory site and sets the Transaction code based on whether the item is on file or no.
    /// </summary>
    /// <param name="itemId">
    /// The current value of ItemID.
    /// </param>
    /// <param name="barcode">
    /// The current value of bar code.
    /// </param>
    /// <param name="isGiftCard">
    /// True if product is gift card, false otherwise.
    /// </param>
    /// <param name="inventSiteId">
    /// inventSiteId of the item.
    /// </param>
    /// <returns>
    /// The transaction code based on item available on file.
    /// </returns>
    /// <remarks>
    /// Checks for the bar code on the item.
    /// </remarks>
    /// <exception cref="Exception::DuplicateKeyExceptionNotRecovered">
    /// If the invent dim in created duplicate value.
    /// </exception>
    public static RetailItemTransactionCode checkItemSoldInSite(ItemId itemId, ItemBarCode barcode, boolean isGiftCard = false, InventSiteId inventSiteId = '')
    {
        InventTable                 inventTable;
        InventDim                   inventDim;
        InventItemBarcode           inventItemBarcode;

        #Retail
        ;

        // Return true if product is a gift card.
        if (isGiftCard)
        {
            return RetailItemTransactionCode::ItemOnFile;
        }

        // Check if the item is missing and set TransactionCode
        // This TransactionCode value will be used in the RBOStatementItemNotOnFile report
        // to show items or barcodes that are missing in AX.
        inventTable = InventTable::find(itemId);

        if (!inventTable)
        {
            // If the item is not found in AX, then set the TransactionCode accordingly
            // This ItemBarcodeNotOnFile enum means either Item or Barcode is Not On File
            return RetailItemTransactionCode::ItemBarcodeNotOnFile;
        }

        // Standard items don't have a barcode, but we don't wanna stamp such sales as ItemBarcodeNotOnFile
        // because that would stop the posting of such sales.
        if (barcode)
        {
            // Check that the item has barcode.
            select firstonly RecId from inventItemBarcode
                where inventItemBarcode.ItemId == itemId;

            if (!inventItemBarcode.RecId)
            {
                return RetailItemTransactionCode::ItemBarcodeNotOnFile;
            }
        }
        
        if(inventSiteId != '')
        {
            inventDim.InventSiteId = inventSiteId;
        }
        else
        {
            inventDim.InventSiteId = inventTable.inventInventSiteId();
        }

        try
        {
            inventDim              = InventDim::findOrCreate(inventDim);
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #DuplicateKeyRetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }

        if (!inventTable.inventItemInventSetup(inventDim.InventDimId).checkNotStopped())
        {
            return RetailItemTransactionCode::ItemBlocked;
        }

        // Check that the item is not stopped for sales
        InventItemSalesSetup salesSetup;

        salesSetup = InventItemSalesSetup::find(itemId, inventDim.InventDimId);

        if(salesSetup.Stopped)
        {
            return RetailItemTransactionCode::ItemBlocked;
        }

        // Reaching this place implies the item is on file.
        return RetailItemTransactionCode::ItemOnFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the SHA1Hash value for the given key.
    /// </summary>
    /// <param name="hashKey">The hash key.</param>
    /// <returns>The <c>Sha1HashCode</c> value.</returns>
    [SuppressMessage("Microsoft.Cryptographic.Standard", "CA5354:SHA1CannotBeUsed", Justification = "The hash is used for data upgrade scenarios.")]
    public static Sha1HashCode hashValue(str hashKey)
    {
        if (hashKey == '')
        {
            return conNull();
        }

        Binary hash;
        using (MemoryStream keyStream = new MemoryStream())
        {
            new BinaryFormatter().Serialize(keyStream, hashKey);
            keyStream.Seek(0, SeekOrigin::Begin);

            using (var algorithm = new SHA1CryptoServiceProvider())
            {
                using (MemoryStream hashStream = new MemoryStream(algorithm.ComputeHash(keyStream)))
                {
                    hash = Binary::constructFromMemoryStream(hashStream);
                }
            }
        }

        return hash.getContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAOTTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Function to accepts a table name and returns all its field
    /// </summary>
    /// <param name="tableName">
    /// Table name for which field are to be retreived.
    /// </param>
    /// <returns>
    /// Field are arranged in a : delimited string and passed back
    /// Fields are read from AOT structure and defaults field are manually added
    /// as those are not present in the tree structure
    /// Example =  :Field1:Field2:Field3:Field4
    /// </returns>
    static str getAOTTableFields(str tableName)
    {
        TreeNode            node;
        TreeNode            childNode;
        TreeNodeIterator    nodeIt;
        FilePath            path;
        TableId             tableId;
        str fieldArr;
        Dictionary      dict = new Dictionary();
        fieldArr = '';

        if (!tableName)
        {
            return fieldArr;
        }

        // Construct the path till table fields node
        path        = @'\Data dictionary\Tables\\' + tableName + '\\Fields' ;
        node        = TreeNode::findNode(path);
        nodeIt      = node.AOTiterator();
        childNode   = nodeIt.next();

        while (childNode)
        {
            fieldArr =  fieldArr + ':' + strUpr(childNode.treeNodeName());
            childNode = nodeIt.next();
        }

        tableId = tableName2id(tableName);
        if (dict.tableObject(tableId).dataPrCompany())
        {
            //Append the default Fields
            fieldArr =  fieldArr + ':' + 'DATAAREAID';
        }

        if (dict.tableObject(tableId).dataPerPartition())
        {
            fieldArr =  fieldArr + ':' + 'PARTITION';
        }

        return fieldArr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAOTTableParentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method receives a table id and find the corresponding Base Table from AOT
    /// This method takes care of Multilevel inheritence
    /// </summary>
    /// <param name="tableid">
    /// tableid of derived table.
    /// </param>
    /// <returns>
    /// Name of parent table.
    /// </returns>
    static str getAOTTableParentName(TableId tableid)
    {
        Dictionary  dict = new Dictionary();
        TableId parentId, temp;
        str result;

        parentId = dict.tableObject(tableid).extends();

        // Loop until reached to the table for whcih Extends property is not defined
        while (parentId)
        {
            temp = dict.tableObject(parentId).extends();
            if (temp)
            {
                parentId = temp;
            }
            else
            {
                break;
            }
        }

        if (parentId)
        {
            result = tableId2name(parentId);
        }
        else
        {
            result = '';
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAOTTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Function to get the list of Tables in AOT
    /// </summary>
    /// <returns>
    /// In case the table is derived its parent i.e. base table is appended to it delimited by comma (,)
    /// Output example
    /// :Table1,Table1's Base Table : Table2 : Table3 : Table4 , Table4's Base Table
    /// </returns>
    [System.Obsolete("Treenode navigation is not supported.")]
    static str getAOTTables()
    {
        TreeNode            node;
        TreeNode            childNode;
        TreeNodeIterator    nodeIt;
        FilePath            path;
        TableId             tableId;
        Dictionary      dict = new Dictionary();
        str parentName;
        str fieldArr;

        path        = @'\Data dictionary\Tables';
        node        = TreeNode::findNode(path);
        nodeIt      = node.AOTiterator();
        childNode   = nodeIt.next();
        fieldArr ='';
        while (childNode)
        {
            tableId = tableName2id(childNode.treeNodeName());

            if ( !dict.tableObject(tableId).isTmp()  && !dict.tableObject(tableId).isMap() && !dict.tableObject(tableId).isView())
            {
                parentName = RetailUtils::getAOTTableParentName(tableId);
                if (parentName)
                {
                    //Creating formated output , refer explaination and example on header
                    fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName()) + "," + strUpr(parentName);
                }
                else
                {
                    fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName());
                }
            }
            childNode = nodeIt.next();
        }
        return fieldArr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HideControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide control and its child controls in data source level.
    /// </summary>
    /// <param name="control">
    /// The form control to be hidden.
    /// </param>
    static public void HideControl(FormControl control)
    {
        int i;

        FormTabPageControl      tabPageControl;
        FormGroupControl        groupControl;
        FormStringControl       stringControl;
        FormComboBoxControl     comboBoxControl;
        FormCheckBoxControl     checkBoxControl;
        FormDateTimeControl     dateTimeControl;
        FormIntControl          intControl;
        FormInt64Control        int64Control;
        FormListBoxControl      listBoxontrol;
        FormRealControl         realControl;
        FormRadioControl        radioControl;
        FormRichTextControl     richTextControl;
        FormStaticTextControl   staticTextControl;
        FormTimeControl         timeControl;

        FormDataSource      dataSource;
        FieldId             fieldId;
        FormDataObject      dataObject;

        switch (classIdGet(control))
        {
            // Call HideControl() recursively if the control is container
            case classNum(FormTabPageControl):
                tabPageControl = control as FormTabPageControl;
                for (i = 1; i <= tabPageControl.controlCount(); i++)
                {
                    RetailUtils::HideControl(tabPageControl.controlNum(i));
                }
                break;

            case classNum(FormGroupControl):
                groupControl = control as FormGroupControl;
                for (i = 1; i <= groupControl.controlCount(); i++)
                {
                    RetailUtils::HideControl(groupControl.controlNum(i));
                }
                break;

            case classNum(FormStringControl):
                stringControl = control as FormStringControl;
                fieldId = stringControl.dataField();
                break;

            case classNum(FormComboBoxControl):
                comboBoxControl = control as FormComboBoxControl ;
                fieldId = comboBoxControl.dataField();
                break;

            case classNum(FormCheckBoxControl):
                checkBoxControl = control as FormCheckBoxControl;
                fieldId = checkBoxControl.dataField();
                break;

            case classNum(FormDateTimeControl):
                dateTimeControl = control as FormDateTimeControl;
                fieldId = dateTimeControl.dataField();
                break;

            case classNum(FormIntControl):
                intControl = control as FormIntControl;
                fieldId = intControl.dataField();
                break;

            case classNum(FormInt64Control):
                int64Control = control as FormInt64Control;
                fieldId = int64Control.dataField();
                break;

            case classNum(FormListBoxControl):
                listBoxontrol = control as FormListBoxControl;
                fieldId = listBoxontrol.dataField();
                break;

            case classNum(FormRadioControl):
                radioControl = control as FormRadioControl;
                fieldId = radioControl.dataField();
                break;

            case classNum(FormRealControl):
                realControl = control as FormRealControl;
                fieldId = realControl.dataField();
                break;

            case classNum(FormRichTextControl):
                richTextControl = control as FormRichTextControl;
                fieldId = richTextControl.dataField();
                break;

            case classNum(FormStaticTextControl):
                staticTextControl = control as FormStaticTextControl;
                fieldId = staticTextControl.dataField();
                break;

            case classNum(FormTimeControl):
                timeControl = control as FormTimeControl;
                fieldId = timeControl.dataField();
                break;

            default:
                break;
        }

        dataSource = control.dataSourceObject();

        // Try to hide the control in data source level if both data source and data field are set
        if (dataSource && fieldId)
        {
            dataObject = dataSource.object(fieldId);

            if (dataObject)
            {
                dataObject.visible(false);
            }
        }

        control.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HidePart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide a part from FactBox pane.
    /// </summary>
    /// <param name="form">
    /// The form that the part belongs to.
    /// </param>
    /// <param name="partName">
    /// The name of the part.
    /// </param>
    static public void HidePart(FormRun form, str partName)
    {
        int i;
        PartList partList;
        FormPartReferenceControl formPart;

        partList = new PartList(form);

        // NOTE: part names were migrated with a prefix.
        partName = '__Generated_FormPart_' + partName;

        // For each part in the form
        for (i = 1; i <= partList.partCount(); i++)
        {
            formPart = partList.getPartControlById(i);

            str formPartName = formPart.name();
            // Part name matches so hide the part
            if (formPartName == partName)
            {
                formPart.visible(false);
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ItemValidInStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value true.
    /// </summary>
    /// <param name="_itemId">
    /// Identification of the Item.
    /// </param>
    /// <param name="_storeId">
    /// Identification of the store.
    /// </param>
    /// <returns>
    /// Boolean value true.
    /// </returns>
    static boolean ItemValidInStore(ItemId _itemId, RetailStoreId _storeId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Hex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the string value passed to hexadecimal.
    /// </summary>
    /// <param name="inStr">
    /// The input string to be converted.
    /// </param>
    /// <returns>
    /// The resultant string after converting.
    /// </returns>
    static str str2Hex(str inStr)
    {
        str res;
        int i,a,b;
        char c1,c2;

        for (i=1; i<=30 ;i++)
        {
            if (i <= strlen(inStr))
            {
                a = char2num(inStr,i) mod 16 + 48;
                b = char2num(inStr,i) div 16 + 48;
                if (a > 57)
                    a = a + 7;
                if (b > 57)
                    b = b + 7;
                c1 = int2str(b);
                c2 = int2str(a);

                res = res + c1 + c2;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retail configuration key result.
    /// </summary>
    /// <param name = "_eventHandler">Event handler.</param>
    [SubscribesTo(classstr(RetailDelegates), delegatestr(RetailDelegates, getOMOperatingUnitTypeRetailChannelEnumValueDelegate))]
    static void retailConfigurationKeyEnabled(EventHandlerResult _eventHandler)
    {
        _eventHandler.result(OMOperatingUnitType::RetailChannel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnvironmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets environment Id.
    /// </summary>
    /// <returns>Return environment Id</returns>
    public static str getEnvironmentId()
    {         
        str environmentId;
        
        var environment = EnvironmentFactory::GetApplicationEnvironment();

        if(!environment)
        {
            // Instance environment is Null.
            throw error("@Retail:RetailEnvironmentNull");
        }
        else if(!environment.LCS)
        {
            // Property LCS on environment instance is Null.
            throw error("@Retail:RetailLCSNull");
        }
        else if(System.String::IsNullOrEmpty(environment.LCS.LCSEnvironmentId))
        {
            // Property LCSEnvironmentId on instance environment.LCS is empty string.
            throw error("@Retail:RetailLCSEnvironmentIdNull");
        }
        else
        {
            environmentId = environment.LCS.LCSEnvironmentId;
        }
        
        return environmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tenant Id
    /// </summary>
    /// <returns>Return Tenant Id</returns>
    public static str getTenantId()
    {
        str tenantid;
            
        var environment = EnvironmentFactory::GetApplicationEnvironment();

        if(!environment)
        {
            // Instance environment is Null.
            throw error("@Retail:RetailEnvironmentNull");
        }
        else if(!environment.Aad)
        {
            // Property Aad on environment instance is Null.
            throw error("@Retail:RetailAadNull");
        }
        else if(!environment.Aad.TenantDomainGUID)
        {
            // Property TenantDomainGUID on instance environment.Aad is empty string.
            throw error("@Retail:RetailTenantDomainGUIDNull");
        }
        else
        {
            tenantid = environment.Aad.TenantDomainGUID;
        }

        return tenantid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>