<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEmployeePosLogonValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailEmployeePosLogonValidator</c> performs validation for worker logging on store via selected authentication method.
/// </summary>
public class RetailEmployeePosLogonValidator
{
    private List validationErrorMessages;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidationMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets validation messages for worker logging on selected store POS device via selected authentication method.
    /// </summary>
    /// <param name="_params">
    /// The selected parameters for validation.
    /// </param>
    /// <returns>
    /// A list of validation results, if the list is empty, the validation passed succesfully.
    /// </returns>
    public List getValidationMessages(RetailEmployeePosLogonValidatorParm _params)
    {
        validationErrorMessages = new List(Types::Class);

        //Perform employee logon validation for device, staffId, logonType
        this.validateEmployeePosLogon(_params.parmStaffId(), _params.parmStoreNumber(), _params.parmLogonType());

        return validationErrorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmployeePosLogon</Name>
				<Source><![CDATA[
    private void validateEmployeePosLogon(RetailStaffId _staffId, RetailStoreId _storeNumber, RetailEmployeeLogonValidationLogonType _logonType)
    {
        HcmWorker worker = HcmWorker::findByPersonnelNumber(_staffId);
        if (worker.RecId == 0)
        {
            // Normally won't happen.
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_WorkerNotFound", _staffId));
            validationErrorMessages.addEnd(validationResult);
            return;
        }
        
        RetailStaffTable staff = RetailStaffTable::find(_staffId);
        if (staff.RecId == 0)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_StaffNotFound", _staffId));
            validationErrorMessages.addEnd(validationResult);
            return;
        }

        RetailStoreTable store = RetailStoreTable::find(_storeNumber);
        if (store.RecId == 0)
        {
            // Normally won't happen.
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_StoreNotFound", _storeNumber));
            validationErrorMessages.addEnd(validationResult);
            return;
        }

        boolean employeeNotBlocked = this.validateEmployeeNotBlocked(staff);
        boolean storeHasEmployeeAddressbook = this.validateStoreEmployeeAddressBook(store);

        if (employeeNotBlocked && storeHasEmployeeAddressbook)
        {
            this.validateEmployeeOnStore(worker, store);
            this.validateLogonCredential(staff, _logonType);
            this.validatePosPermissions(worker);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmployeeNotBlocked</Name>
				<Source><![CDATA[
    private boolean validateEmployeeNotBlocked(RetailStaffTable _staff)
    {
        if (_staff.blocked == NoYes::Yes)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_EmployeeIsBlocked", _staff.staffId));
            validationErrorMessages.addEnd(validationResult);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoreEmployeeAddressBook</Name>
				<Source><![CDATA[
    private boolean validateStoreEmployeeAddressBook(RetailStoreTable _store)
    {
        // validate the store has address book
        RetailStoreAddressBook storeAddressBook;

        select firstonly RecId from storeAddressBook
            where storeAddressBook.StoreRecId == _store.RecId && storeAddressBook.AddressBookType == RetailAddressBookType::Employee;

        if (storeAddressBook.RecId == 0)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_StoreEmployeeAddressbookNotFound", _store.StoreNumber));
            validationErrorMessages.addEnd(validationResult);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmployeeOnStore</Name>
				<Source><![CDATA[
    private void validateEmployeeOnStore(HcmWorker _worker, RetailStoreTable _store)
    {
        // validate the worker (as an address book party) is on store's address book
        RetailStoreAddressBook storeAddressBook;
        DirAddressBookParty addressBookParty;

        select firstonly RecId from storeAddressBook
            where storeAddressBook.StoreRecId == _store.RecId
            && storeAddressBook.AddressBookType == RetailAddressBookType::Employee
        join Party, AddressBook from addressBookParty
            where storeAddressBook.AddressBook == addressBookParty.AddressBook
            && addressBookParty.Party == _worker.Person;

        if (addressBookParty.RecId == 0)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_WorkerNotOnStore", _worker.PersonnelNumber, _store.StoreNumber));
            validationErrorMessages.addEnd(validationResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLogonCredential</Name>
				<Source><![CDATA[
    private void validateLogonCredential(RetailStaffTable _staff, RetailEmployeeLogonValidationLogonType _logonType)
    {
        if (_logonType == RetailEmployeeLogonValidationLogonType::OperatorId)
        {
            // validate staff has passwordsalt
            if (!_staff.passwordSalt || !_staff.password)
            {
                var validationResult = new RetailEmployePosLogonValidationResult();
                validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_PasswordNotSet", _staff.staffId));
                validationErrorMessages.addEnd(validationResult);
            }
        }
        else if (_logonType == RetailEmployeeLogonValidationLogonType::aad)
        {
            if (!_staff.ExternalIdentitySubId)
            {
                var validationResult = new RetailEmployePosLogonValidationResult();
                validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_ExternalIdentityNotFound", _staff.staffId));
                validationErrorMessages.addEnd(validationResult);
            }
        }
        else if (_logonType == RetailEmployeeLogonValidationLogonType::ExtendedLogon)
        {
            RetailStaffCredentialTable staffCredential;

            select firstonly RecId from staffCredential where staffCredential.StaffId == _staff.staffId;

            if (staffCredential.RecId == 0)
            {
                var validationResult = new RetailEmployePosLogonValidationResult();
                validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_ExtendedCredentialNotFound", _staff.staffId));
                validationErrorMessages.addEnd(validationResult);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePosPermissions</Name>
				<Source><![CDATA[
    private void validatePosPermissions(HcmWorker  _worker)
    {
        HcmPosition position;
        HcmPositionWorkerAssignment assignment;

        utcdatetime now = DateTimeUtil::getSystemDateTime();

        select firstonly RecId from assignment
            where assignment.Worker == _worker.RecId
            && assignment.ValidFrom <= now && assignment.ValidTo >= now
        join RecId from position
            where position.RecId == assignment.Position;

        if (position.RecId == 0)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_PositionAssignmentNotFound", _worker.PersonnelNumber));
            validationErrorMessages.addEnd(validationResult);
            return;
        }

        HcmPositionDetail positionDetail;

        select firstonly RecId, Job from positionDetail where positionDetail.Position == position.RecId
            && positionDetail.ValidFrom <= now && positionDetail.ValidTo >= now;

        if (positionDetail.RecId == 0)
        {
            var validationResult = new RetailEmployePosLogonValidationResult();
            validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_PositionDetailNotFound", _worker.PersonnelNumber));
            validationErrorMessages.addEnd(validationResult);
            return;
        }

        if (!this.getWorkerPosPermissionGroupPermission(positionDetail))
        {
            if (!this.validateWorkerOverridePermission(position))
            {
                var validationResult = new RetailEmployePosLogonValidationResult();
                validationResult.parmErrorMessage(strFmt("@Retail:RetailEmployeePosLogonValidationFail_PosPermissionNotFound", _worker.PersonnelNumber));
                validationErrorMessages.addEnd(validationResult);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerPosPermissionGroupPermission</Name>
				<Source><![CDATA[
    private boolean getWorkerPosPermissionGroupPermission(HcmPositionDetail positionDetail)
    {
        HcmJob hcmJob;

        select firstonly RecId from hcmJob where hcmJob.RecId == positionDetail.Job;

        if (hcmJob.RecId == 0)
        {
            return false;
        }

        RetailJobPosPermissionGroup permissionGroup;

        select firstonly RecId, RetailPosPermissionGroup from permissionGroup where permissionGroup.Job == hcmJob.RecId;

        if (permissionGroup.RecId == 0)
        {
            return false;
        }

        RetailPosPermissionGroup positionPermissionGroup;

        select firstonly RecId from positionPermissionGroup where positionPermissionGroup.RecId == permissionGroup.RetailPosPermissionGroup;

        if (positionPermissionGroup.RecId == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkerOverridePermission</Name>
				<Source><![CDATA[
    private boolean validateWorkerOverridePermission(HcmPosition position)
    {
        RetailPositionPosPermission positionPermission;

        select firstonly RecId from positionPermission where positionPermission.Position == position.RecId;

        if (positionPermission.RecId == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>