<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleSaleOfProductTaxWithhold_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class derives LedgerPostingType and Side(Debit/Credit) parameter values for the withholding tax lines during FTI posting.
/// </summary>
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::WithholdTax_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::WithholdTax_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::WithholdTax_IN)
]
public class AccDistRuleSaleOfProductTaxWithhold_IN extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerPostingType</c> parameter during FTI posting for withholding tax.
    /// </summary>
    /// <returns>
    /// The value of the <c>LedgerPostingType</c> parameter.
    /// </returns>
    public LedgerPostingType parmLedgerPostingType()
    {
        TaxWithholdSourceDocSubLineItem_IN  taxWithholdSourceDocSubLineItem;
        if (sourceDocumentLineItem is TaxWithholdSourceDocSubLineItem_IN)
        {
            taxWithholdSourceDocSubLineItem = sourceDocumentLineItem;
            switch (taxWithholdSourceDocSubLineItem.getTaxWithholdMap().TaxWithholdType)
            {
                case TaxWithholdCodeType_IN::TDS:
                    return LedgerPostingType::TDS_IN;
                case TaxWithholdCodeType_IN::TCS:
                    return LedgerPostingType::TCS_IN;
                default:
                    break;
            }
        }
        return LedgerPostingType::TDS_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Side</c> parameter during FTI posting for withholding tax.
    /// </summary>
    /// <returns>
    /// The value of the <c>Side</c> parameter.
    /// </returns>
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Credit;

        // This method is called from \Classes\SubledgerJournalizer\loadaccountingDistributionTmp() method during posting of FTI.
        // And direction should be decided based on the sign of the TransactionCurrencyAmount.
        if (this.parmAccountingdistribution().TransactionCurrencyAmount >= 0.0)
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>