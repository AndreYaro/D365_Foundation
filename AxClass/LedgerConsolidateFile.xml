<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The consolidation file format helper.
/// </summary>
public class LedgerConsolidateFile
{
    // <GBR>
    private const str TransferOnlyTag_BR = 'TransferOnly_BR';

    NoYes                           transferOnly_BR;
    // </GBR>

    TmpLedgerConsTrans              sumTransact;
    TmpLedgerConsDimensionValueItem consolidationDimValueItem;
    TmpLedgerConsDimensionAttribute consolidationDimAttr;
    BudgetConsTmpDimensionValueItem budgetConsolidationDimensionValueItem;
    BudgetConsolidationManager      budgetConsolidationManager;
    MainAccount                     tmpMainAccount;
    Counter                         countTransact;
    CompanyId                       companyOrigin;
    List                            listTrans;
    
    private SysInstrumentationLogger logger;
    private LedgerConsolidatePerformanceMonitor monitor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    private str export(
        Filename    _filename,
        CompanyId   _companyId,
        NoYes       _companyGroupAccounts)
    {
        int                     idx;
        int                     idxMax;
        CommaTextStreamIo       commaTextIo;
        List                    budgetTransactionList;
        ListEnumerator          budgetTransactions;
        ListEnumerator          listTransactions;
        AcknowledgementDate_IT  acknowledgementDate_IT;
        str                     exportedURL;

        commaTextIo = CommaTextStreamIo::constructForWrite();

        if (!commaTextIo)
        {
            throw error ("@SYS19358");
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && transferOnly_BR)
        {
            this.writeBrazilCompanyLine_BR(commaTextIo, _companyId);
        }
        else
        {
            // </GBR>

            commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordCompany, _companyId]);

            // <GBR>
        }
        // </GBR>
        changecompany(_companyId)
        {
            using (SysInstrumentationActivityContext context = monitor.enterExportConsolidationTransactions())
            {
                ttsbegin;

                // Process dimensions outside of the process counting
                while select consolidationDimAttr
                {
                    commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordDimensions, consolidationDimAttr.Name, consolidationDimAttr.LocalRecId]);
                    consolidationDimAttr.delete();
                }

                idx = 0;
                acknowledgementDate_IT = LedgerParameters::find().AcknowledgementDate_IT;

                listTransactions = listTrans.getEnumerator();
                while (listTransactions.moveNext())
                {
                    sumTransact.data(listTransactions.current());

                    // <GBR>
                    if (BrazilParameters::isEnabled() && transferOnly_BR)
                    {
                        this.writeBrazilTransactionLine_BR(commaTextIo, sumTransact);
                    }
                    else
                    // </GBR>
                    if (!acknowledgementDate_IT)
                    {
                        commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordTrans2,
                                        sumTransact.MainAccountId + '',
                                        sumTransact.TransDate,
                                        sumTransact.PeriodCode,
                                        sumTransact.CurrencyCode,
                                        sumTransact.Crediting,
                                        sumTransact.OperationsTax,
                                        sumTransact.AmountCur,
                                        sumTransact.Qty,
                                        sumTransact.LocalRecId]);
                    }
                    else
                    {
                        commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordTrans2,
                                        sumTransact.MainAccountId + '',
                                        sumTransact.TransDate,
                                        sumTransact.AcknowledgementDate,
                                        sumTransact.PeriodCode,
                                        sumTransact.CurrencyCode,
                                        sumTransact.Crediting,
                                        sumTransact.OperationsTax,
                                        sumTransact.AmountCur,
                                        sumTransact.Qty,
                                        sumTransact.LocalRecId]);
                    }
                    idx++;
                }

                countTransact = idx;

                if (idx)
                {
                    info(strfmt("@SYS62193", idx));
                    idxMax = idx;
                    idx = 0;
                }

                // Process dimension values outside of the process counting
                while select consolidationDimValueItem
                {
                    commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordDimensionValues,
                                        consolidationDimValueItem.Value,
                                        consolidationDimValueItem.LocalConsDimensionAttribute,
                                        consolidationDimValueItem.LocalConsTrans]);
                    consolidationDimValueItem.delete();
                }

                if (budgetConsolidationManager != null)
                {
                    budgetTransactionList = budgetConsolidationManager.exportConsolidatedBudgetTransToList(LedgerConsolidateDefinitions::RecordBudget);
                    budgetTransactions = budgetTransactionList.getEnumerator();

                    while (budgetTransactions.moveNext())
                    {
                        commaTextIo.writeExp(budgetTransactions.current());
                        idx++;
                    }

                    budgetConsolidationDimensionValueItem = budgetConsolidationManager.parmBudgetConsTmpDimensionValueItem();

                    while select budgetConsolidationDimensionValueItem
                    {
                        commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordBudgetDimensionValues,
                                            budgetConsolidationDimensionValueItem.Value,
                                            budgetConsolidationDimensionValueItem.LocalConsDimensionAttribute,
                                            budgetConsolidationDimensionValueItem.LocalConsTrans]);

                        budgetConsolidationDimensionValueItem.delete();
                    }

                    if (idx)
                    {
                        info(strfmt("@SYS62194", idx));

                        idxMax = (idxMax < idx) ? idx : idxMax;

                        idx = 0;
                    }
                }

                while select tmpMainAccount where tmpMainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                {
                    commaTextIo.write([LedgerConsolidateDefinitions::RecordTable, tmpMainAccount.MainAccountId, tmpMainAccount.Name, tmpMainAccount.Type]);
                    idxMax++;
                }

                ttscommit;

                if (idxMax)
                {
                    exportedURL = File::SendFileToTempStore(commaTextIo.getStream(), _filename, classstr(FileUploadTemporaryStorageStrategy));
                }
                else
                {
                    info("@SYS62195");
                }

                monitor.exitExportConsolidationTransactions(context, countTransact);
            }
        }

        return exportedURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>import</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports the file specified in <c>Filename</c> for processing.
    /// </summary>
    /// <param name = "_filename"></param>
    public void import(Filename _filename)
    {
        CommaTextStreamIo       commaTextIo;
        FileIOPermission        fileIOPermission;
        container               trans;
        int                     type;
        int                     oldType = -1;
        MainAccountNum          tmpAccount;
        AcknowledgementDate_IT  acknowledgementDate_IT;

        System.Exception exception;

        // <GBR>
        str                     importedTransferOnlyTag_BR;
        int                     aux_BR;
        // </GBR>

        try
        {
            commaTextIo = CommaTextStreamIo::constructForRead(File::UseFileFromURL(_filename));
        }
        catch (exception)
        {
            logger.logError(exception.Message);
            throw error("@GeneralLedger:ConsolidateImportFileError");
        }

        if (!commaTextIo)
        {
            throw error (strfmt("@SYS335161",_filename));
        }

        using (SysInstrumentationActivityContext context = monitor.enterImportConsolidationTransactions())
        {
            ttsbegin;

            acknowledgementDate_IT = LedgerParameters::find().AcknowledgementDate_IT;
            while (!commaTextIo.status())
            {
                trans= commaTextIo.read();

                type = conpeek(trans,1);
                trans= condel( trans,1,1);

                if (oldType != type)
                {
                    oldType = type;
                }

                switch (type)
                {
                    case LedgerConsolidateDefinitions::RecordTable:
                        [tmpMainAccount.MainAccountId,
                        tmpMainAccount.Name,
                        tmpMainAccount.Type] = trans;

                        // Since this is an InMemory copy of MainAccount, skip the insert() actions which modify data state elsewhere
                        tmpMainAccount.doInsert();
                        break;

                    case LedgerConsolidateDefinitions::RecordTrans:
                        if (!acknowledgementDate_IT)
                        {
                            [sumTransact.MainAccountId,
                            sumTransact.TransDate,
                            sumTransact.PeriodCode,
                            sumTransact.CurrencyCode,
                            sumTransact.Crediting,
                            sumTransact.OperationsTax,
                            sumTransact.AmountCur,
                            sumTransact.LocalRecId] = trans;
                        }
                        else
                        {
                            [sumTransact.MainAccountId,
                            sumTransact.TransDate,
                            sumTransact.AcknowledgementDate,
                            sumTransact.PeriodCode,
                            sumTransact.CurrencyCode,
                            sumTransact.Crediting,
                            sumTransact.OperationsTax,
                            sumTransact.AmountCur,
                            sumTransact.LocalRecId] = trans;
                        }
                        listTrans.addEnd(sumTransact.data());
                        countTransact++;
                        break;

                    case LedgerConsolidateDefinitions::RecordTrans2:
                        // <GBR>
                        if (BrazilParameters::isEnabled() && transferOnly_BR)
                        {
                            [sumTransact.MainAccountId,
                            sumTransact.TransDate,
                            sumTransact.PeriodCode,
                            sumTransact.CurrencyCode,
                            sumTransact.Crediting,
                            sumTransact.OperationsTax,
                            sumTransact.AmountCur,
                            sumTransact.Qty,
                            sumTransact.LocalRecId,
                            sumTransact.Text_BR,
                            sumTransact.ConsolidatedVoucher_BR,
                            sumTransact.JournalCategory_BR,
                            sumTransact.DocumentDate_BR,
                            sumTransact.DocumentNumber_BR,
                            sumTransact.PostingType_BR,
                            sumTransact.IsCorrection_BR] = trans;

                            sumTransact.ConsolidatedRefRecId_BR = aux_BR;
                            aux_BR++;
                        }
                        else
                        // </GBR>
                        if (!acknowledgementDate_IT)
                        {
                            [sumTransact.MainAccountId,
                            sumTransact.TransDate,
                            sumTransact.PeriodCode,
                            sumTransact.CurrencyCode,
                            sumTransact.Crediting,
                            sumTransact.OperationsTax,
                            sumTransact.AmountCur,
                            sumTransact.Qty,
                            sumTransact.LocalRecId] = trans;
                        }
                        else
                        {
                            [sumTransact.MainAccountId,
                            sumTransact.TransDate,
                            sumTransact.AcknowledgementDate,
                            sumTransact.PeriodCode,
                            sumTransact.CurrencyCode,
                            sumTransact.Crediting,
                            sumTransact.OperationsTax,
                            sumTransact.AmountCur,
                            sumTransact.Qty,
                            sumTransact.LocalRecId] = trans;
                        }
                        listTrans.addEnd(sumTransact.data());
                        countTransact++;
                        break;

                    case LedgerConsolidateDefinitions::RecordDimensionValues:
                        [consolidationDimValueItem.Value,
                                consolidationDimValueItem.LocalConsDimensionAttribute,
                                consolidationDimValueItem.LocalConsTrans] = trans;
                        consolidationDimValueItem.insert();
                        break;

                    case LedgerConsolidateDefinitions::RecordBudget:
                        if (budgetConsolidationManager == null)
                        {
                            budgetConsolidationManager = new BudgetConsolidationManager();
                        }

                        budgetConsolidationManager.importBudgetTransaction(trans);
                        break;

                    case LedgerConsolidateDefinitions::RecordBudgetDimensionValues:
                        if (budgetConsolidationManager == null)
                        {
                            budgetConsolidationManager = new BudgetConsolidationManager();
                        }

                        budgetConsolidationManager.importBudgetConsDimensionValueItem(trans);

                        break;

                    case LedgerConsolidateDefinitions::RecordDimensions:
                        [consolidationDimAttr.Name, consolidationDimAttr.LocalRecId] = trans;
                        consolidationDimAttr.insert();
                        break;

                    case LedgerConsolidateDefinitions::RecordCompany:
                        // <GBR>
                        [companyOrigin, importedTransferOnlyTag_BR] = trans;

                        transferOnly_BR = importedTransferOnlyTag_BR == TransferOnlyTag_BR;

                        if (transferOnly_BR)
                        {
                            if (!BrazilParameters::isEnabled())
                            {
                                throw error("@GLS220848");
                            }
                        }
                        else
                        {
                            // </GBR>
                            [companyOrigin] = trans;
                            // <GBR>
                        }
                        // </GBR>
                        break;

                    default:
                        break;
                }
            }

            ttscommit;

            monitor.exitImportConsolidationTransactions(context, countTransact);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerConsolidateFile construct()
    {
        return new LedgerConsolidateFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerConsolidateFile));
        monitor = LedgerConsolidatePerformanceMonitor::construct(logger);

        tmpMainAccount.setTmp();

        listTrans = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the table objects.
    /// </summary>
    /// <returns>The packed container.</returns>
    container packTables()
    {
        List        listDimensions;
        List        listDimensionValues;
        container   packedBudgetConsolidationManager;
        Map         mapAccounts = new Map(Types::String, Types::Record);

        listDimensions = new List(Types::Record);
        while select consolidationDimAttr
        {
            listDimensions.addEnd(consolidationDimAttr.data());
        }

        listDimensionValues = new List(Types::Record);
        while select consolidationDimValueItem
        {
            listDimensionValues.addEnd(consolidationDimValueItem.data());
        }

        if (budgetConsolidationManager != null)
        {
            packedBudgetConsolidationManager = budgetConsolidationManager.pack();
        }

        while select tmpMainAccount
        {
            if (!mapAccounts.exists(tmpMainAccount.MainAccountId))
            {
                mapAccounts.insert(tmpMainAccount.MainAccountId,tmpMainAccount.data());
            }
        }

        return [listDimensions.pack(), listTrans.pack(), listDimensionValues.pack(), packedBudgetConsolidationManager, mapAccounts.pack(), companyOrigin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferOnly_BR</Name>
				<Source><![CDATA[
    protected NoYes parmTransferOnly_BR(NoYes _transferOnly_BR = transferOnly_BR)
    {
        transferOnly_BR = _transferOnly_BR;

        return transferOnly_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the table objects.
    /// </summary>
    /// <param name = "_packedTables">The packed tables.</param>
    void unpackTables(container _packedTables)
    {
        container       conDimensions, conTrans, conDimensionValues, packedBudgetConsolidationManager, conAccounts;
        List            listDimensions, listDimensionValues;
        Map             mapAccounts;
        MapIterator     mi;
        ListIterator    li;
        MainAccount     ma;

        [conDimensions, conTrans, conDimensionValues, packedBudgetConsolidationManager, conAccounts] = _packedTables;

        listDimensions = List::create(conDimensions);
        listTrans = List::create(conTrans);
        listDimensionValues = List::create(conDimensionValues);
        budgetConsolidationManager = BudgetConsolidationManager::create(packedBudgetConsolidationManager);
        mapAccounts = Map::create(conAccounts);

        li = new ListIterator(listDimensions);
        li.begin();
        while (li.more())
        {
            consolidationDimAttr.data(li.value());
            consolidationDimAttr.RecId = 0;
            consolidationDimAttr.doInsert();
            li.next();
        }

        li = new ListIterator(listDimensionValues);
        li.begin();
        while (li.more())
        {
            consolidationDimValueItem.data(li.value());
            consolidationDimValueItem.RecId = 0;
            consolidationDimValueItem.doInsert();
            li.next();
        }

        mi = new MapIterator(mapAccounts);

        mi.begin();
        while (mi.more())
        {
            ma = mi.value();
            if (ma.MainAccountId)
            {
                tmpMainAccount.data(ma);
                tmpMainAccount.RecId = 0;
                tmpMainAccount.doInsert();
            }
            mi.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeBrazilCompanyLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes into the consolidated file a specific header line for Brazilian company.
    /// </summary>
    /// <param name="_commaTextIo">
    /// The <c>CommaTextStreamIo</c> object.
    /// </param>
    /// <param name="_companyId">
    /// The company identification.
    /// </param>
    /// <returns>
    /// True if the write process is successful; otherwise, false.
    /// </returns>
    protected boolean writeBrazilCompanyLine_BR(CommaTextStreamIo _commaTextIo, CompanyId _companyId)
    {
        return _commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordCompany, _companyId, TransferOnlyTag_BR]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeBrazilTransactionLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes Brazilian specific transaction line.
    /// </summary>
    /// <param name="_commaTextIo">
    /// The <c>CommaTextStreamIo</c> object.
    /// </param>
    /// <param name="_transact">
    /// The consolidated ledger transaction to be written.
    /// </param>
    protected void writeBrazilTransactionLine_BR(CommaTextStreamIo _commaTextIo, TmpLedgerConsTrans _transact)
    {
        _commaTextIo.writeExp([LedgerConsolidateDefinitions::RecordTrans2,
                               _transact.MainAccountId + '',
                               _transact.TransDate,
                               _transact.PeriodCode,
                               _transact.CurrencyCode,
                               _transact.Crediting,
                               _transact.OperationsTax,
                               _transact.AmountCur,
                               _transact.Qty,
                               _transact.LocalRecId,
                               _transact.Text_BR,
                               _transact.ConsolidatedVoucher_BR,
                               _transact.JournalCategory_BR,
                               _transact.DocumentDate_BR,
                               _transact.DocumentNumber_BR,
                               _transact.PostingType_BR,
                               _transact.IsCorrection_BR]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the file.
    /// </summary>
    /// <param name = "_packedTables">The packed tables.</param>
    /// <param name = "_filename">The file name.</param>
    /// <param name = "_companyId">The company.</param>
    /// <param name = "_companyGroupAccounts">The company group accounts.</param>
    /// <returns>The URL containing the exported file.</returns>
    static str exportFile(
        container               _packedTables,
        Filename                _filename,
        CompanyId               _companyId,
        NoYes                   _companyGroupAccounts)
    {
        LedgerConsolidateFile ledgerConsolidateFile = new LedgerConsolidateFile();
        ledgerConsolidateFile.unpackTables(_packedTables);

        return ledgerConsolidateFile.export(_filename, _companyId, _companyGroupAccounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportTransferOnly_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the ledger consolidation transactions to the file with the transfer only identification.
    /// </summary>
    /// <param name="_packedTables">
    /// The container with the packed tables.
    /// </param>
    /// <param name="_filename">
    /// The consolidate file name.
    /// </param>
    /// <param name="_companyId">
    /// The current company indentification.
    /// </param>
    /// <param name="_companyGroupAccounts">
    /// A boolean do determine if the company accounts should be grouped or not.
    /// </param>
    /// <returns>The URL containing the exported file.</returns>
    static str exportTransferOnly_BR(
        container               _packedTables,
        Filename                _filename,
        CompanyId               _companyId,
        NoYes                   _companyGroupAccounts)
    {
        LedgerConsolidateFile ledgerConsolidateFile = new LedgerConsolidateFile();
        ledgerConsolidateFile.parmTransferOnly_BR(NoYes::Yes);
        ledgerConsolidateFile.unpackTables(_packedTables);

        return ledgerConsolidateFile.export(_filename, _companyId, _companyGroupAccounts);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>