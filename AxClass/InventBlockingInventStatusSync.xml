<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingInventStatusSync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBlockingInventStatusSync</c> synchronizes inventory blocking for a given inventory movement.
/// </summary>
public class InventBlockingInventStatusSync
{
    // parameter
    InventMovement          inventMovement;
    InventDim               fromInventDim;
    InventDim               toInventDim;
    InventQty               changeQty;
    private PdsCWQty        changeCWQty;

    boolean                 forcePhysicalUnreservation;

    // cached
    ItemId                  itemId;
    InventDimParm           inventDimParm;
    InventDim               statusLevelFromDim;
    InventDim               statusLevelToDim;
    boolean                 mustReblockQty;

    boolean                 isInventDimParmInitialized;
    boolean                 isStatusLevelFromDimInitialized;
    boolean                 isStatusLevelToDimInitialized;
    private UnknownNoYes    isCWItem;

    boolean                 returnMode;
    boolean                 runningPreSync;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availableHandlingUpdateQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the quantity available for update.
    /// </summary>
    /// <param name="_itemId">
    ///     Item ID for update.
    /// </param>
    /// <param name="_inventDimId">
    ///     <c>InventDimId</c> of the update dimensions.
    /// </param>
    /// <param name="_requestedUpdateQty">
    ///     <c>InventQty</c> requested for update.
    /// </param>
    /// <returns>
    ///     Quantity available for update in handling unit.
    /// </returns>
    private InventHandlingQty availableHandlingUpdateQty(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventHandlingQty   _requestedUpdateQty)
    {
        InventHandlingQty updateQty = _requestedUpdateQty;

        // Do not create status blocking exceeding available quantity
        if (updateQty > 0)
        {
            InventDim inventDim = InventDim::find(_inventDimId);
            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_itemId, inventDim, this.parmInventDimParm());

            updateQty = min((this.parmIsCWItem() ? inventOnHandQty.pdsCWAvailOrdered(true) : inventOnHandQty.availOrdered(true)), updateQty);
        }

        return updateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatusLevelDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the provided <c>InventDim</c> record at status level and above.
    /// </summary>
    /// <param name="_inventDim">
    ///     The original <c>InventDim</c> record.
    /// </param>
    /// <returns>
    ///     Returns a <c>InventDim</c> record at status level and above.
    /// </returns>
    protected InventDim buildStatusLevelDim(InventDim _inventDim)
    {
        InventDim localInventDim;

        if (_inventDim)
        {
            localInventDim = InventDim::find(_inventDim.InventDimId);

            localInventDim.clearNotSelectedDim(this.parmInventDimParm());
            localInventDim = InventDim::findOrCreate(localInventDim);
        }

        return localInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimHasChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the dimension set has changed.
    /// </summary>
    /// <returns>
    ///     Returns true if the dimension set has changed.
    /// </returns>
    protected boolean dimHasChanged()
    {
        return fromInventDim.InventDimId != toInventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeQty</Name>
				<Source><![CDATA[
        protected InventQty parmChangeQty(InventQty _changeQty = changeQty)
    {
        changeQty = _changeQty;

        return changeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeCWQty</Name>
				<Source><![CDATA[
    protected PdsCWQty parmChangeCWQty(PDSCWQty _changeCWQty = changeCWQty)
    {
        changeCWQty = _changeCWQty;

        return changeCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForcePhysicalUnreservation</Name>
				<Source><![CDATA[
        protected boolean parmForcePhysicalUnreservation(boolean _forcePhysicalUnreservation = forcePhysicalUnreservation)
    {
        forcePhysicalUnreservation = _forcePhysicalUnreservation;

        return forcePhysicalUnreservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventDim</Name>
				<Source><![CDATA[
        protected InventDim parmFromInventDim(InventDim _fromInventDim = fromInventDim)
    {
        fromInventDim = _fromInventDim;

        return fromInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
        protected inventDimParm parmInventDimParm()
    {
        if (!isInventDimParmInitialized)
        {
            inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmStatusAndAbove(InventTable::find(this.parmItemId()));
            isInventDimParmInitialized = true;
        }
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
        protected InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        protected ItemId parmItemId()
    {
        if (!itemId)
        {
            itemid = this.parmInventMovement().itemId();
        }
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusLevelFromDim</Name>
				<Source><![CDATA[
        protected InventDim parmStatusLevelFromDim()
    {
        if (!isStatusLevelFromDimInitialized)
        {
            statusLevelFromDim = this.buildStatusLevelDim(this.parmFromInventDim());
            isStatusLevelFromDimInitialized = true;
        }

        return statusLevelFromDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusLevelToDim</Name>
				<Source><![CDATA[
        protected InventDim parmStatusLevelToDim()
    {
        if (!isStatusLevelToDimInitialized)
        {
            statusLevelToDim = this.buildStatusLevelDim(toInventDim);
            isStatusLevelToDimInitialized = true;
        }

        return statusLevelToDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToInventDim</Name>
				<Source><![CDATA[
    protected InventDim parmToInventDim(InventDim _toInventDim = toInventDim)
    {
        toInventDim = _toInventDim;

        return toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnMode</Name>
				<Source><![CDATA[
    protected boolean parmReturnMode(boolean _returnMode = returnMode)
    {
        returnMode = _returnMode;

        return returnMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCWItem</Name>
				<Source><![CDATA[
    final private boolean parmIsCWItem()
    {
        if (isCWItem == UnknownNoYes::Unknown)
        {
            isCWItem = PdsGlobal::pdsIsCWItem(itemId) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isCWItem == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates, updates or deletes inventory blocking to reflect the newly updated <c>InventTrans</c> records.
    /// </summary>
    public void postSync()
    {
        runningPreSync = false;

        if (inventMovement.canUpdateInventStatusBlocking() && WHSInventStatus::isBlockingStatus(toInventDim.InventStatusId))
        {
            ttsbegin;

            // if quantity was forcefully unblocked, we must reblock on the new dimension set
            if (mustReblockQty)
            {
                this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelToDim().InventDimId, abs(changeQty), abs(changeCWQty));
            }
            else
            {
                if (this.dimHasChanged())
                {
                    // if the dimension set has changed, only update quantity if the change occured at status level or above
                    // or if the reserve ordered items parameter is disabled
                    if (this.statusLevelDimHasChanged()
                        || !InventParameters::find().ReserveOnOrdered)
                    {
                        this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelToDim().InventDimId, changeQty, changeCWQty);
                    }
                }
                else
                {
                     // new movement or changed quantity on existing movement
                    this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelToDim().InventDimId, changeQty, changeCWQty);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reduces or removes inventory blocking prior to <c>InventTrans</c> records being updated.
    /// </summary>
    public void preSync()
    {
        runningPreSync = true;

        if (inventMovement.canUpdateInventStatusBlocking() && WHSInventStatus::isBlockingStatus(fromInventDim.InventStatusId))
        {
            ttsbegin;

            // for issue transactions, there are certain cases where we need to physically remove blocking regardless of status level dimension changes
            if (changeQty < 0 && forcePhysicalUnreservation)
            {
                this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelFromDim().InventDimId, changeQty, changeCWQty);

                // if we forcefully unreserve transactions, we must attempt to reblock the quantity during the post synchronization.
                if (WHSInventStatus::isBlockingStatus(toInventDim.InventStatusId))
                {
                    mustReblockQty = true;
                }
            }
            else
            {
                if (this.dimHasChanged())
                {
                    // if the dimension set has changed, only reduce quantity if the change occured at status level or above
                    // or if the reserve ordered items parameter is disabled
                    if (this.statusLevelDimHasChanged()
                        || !InventParameters::find().ReserveOnOrdered)
                    {
                        this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelFromDim().InventDimId, -changeQty, -changeCWQty);
                    }
                }
                else
                {
                    // reduce quantity on existing movement
                    this.syncBlockingHandlingQuantities(this.parmItemId(), this.parmStatusLevelFromDim().InventDimId, -changeQty, -changeCWQty);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusLevelDimHasChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the dimension set has changed at the status level or above.
    /// </summary>
    /// <returns>
    ///     Returns true if the dimension set has changed at the status level or above.
    /// </returns>
    protected boolean statusLevelDimHasChanged()
    {
        return this.parmStatusLevelFromDim().InventDimId != this.parmStatusLevelToDim().InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncBlockingHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes inventory blocking for a given inventory movement.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension.
    /// </param>
    /// <param name="_qty">
    ///    The quantity.
    /// </param>
    /// <param name="_cwQty">
    ///    The catch weight quantity.
    /// </param>
    /// <remarks>
    ///    The records must already be selected for update.
    /// </remarks>
    private void syncBlockingHandlingQuantities(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _qty,
        PdsCWQty    _cwQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            this.syncBlockingHandlingQty(_itemId, _inventDimId, _qty, _cwQty);
        }
        else
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);

            this.syncBlockingHandlingQty(_itemId, _inventDimId, _qty, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncBlockingHandlingQty</Name>
				<Source><![CDATA[
    private void syncBlockingHandlingQty(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _qty,
        PdsCWQty    _cwQty)
    {
        // try to find an existing 'inventory status' blocking transaction by item and inventory dimension
        InventBlocking inventBlocking = InventBlocking::findFirstByItemDimType(_itemId, _inventDimId, InventBlockingType::InventoryStatus, true);

        InventHandlingQty handlingQty = this.availableHandlingUpdateQty(_itemId, _inventDimId, (this.parmIsCWItem() ? _cwQty : _qty));

        boolean mustUnreservePhysical = forcePhysicalUnreservation || inventMovement.mustPhysicallyUnreserveBlocking();

        if (!inventBlocking)
        {
            // create a new 'inventory status' blocking record
            inventBlocking.clear();

            inventBlocking.ItemId           = _itemId;
            inventBlocking.InventDimId      = _inventDimId;
            inventBlocking.BlockingType     = InventBlockingType::InventoryStatus;
            inventBlocking.ExpectReceipt    = NoYes::No;
            if (this.parmIsCWItem())
            {
                inventBlocking.PdsCWQty     = handlingQty;
                inventBlocking.Qty          = WhsInvent::defaultCatchWeightReserveQuantity(_itemId, handlingQty);
            }
            else
            {
                inventBlocking.Qty          = handlingQty;
            }

            if (inventBlocking.Qty > 0)
            {
                inventBlocking.insert();
            }
        }
        else
        {
            if (!runningPreSync
                && returnMode)
            {
                InventTrans issueInventTrans = InventBlocking::findIssueInventoryTransaction(inventBlocking, StatusIssue::OnOrder);

                if (this.parmIsCWItem())
                {
                    handlingQty += issueInventTrans.PdsCWQty;
                }
                else
                {
                    handlingQty += issueInventTrans.Qty;
                }
            }

            // calculate new total blocking quantity
            if (this.parmIsCWItem())
            {
                handlingQty = max(inventBlocking.PdsCWQty + handlingQty, 0);
            }
            else
            {
                handlingQty = max(inventBlocking.Qty + handlingQty, 0);
            }

            // if the new total is zero, remove the blocking; otherwise, update
            if (handlingQty > 0)
            {
                if (this.parmIsCWItem())
                {
                    inventBlocking.PdsCWQty = handlingQty;
                    inventBlocking.Qty      = WhsInvent::defaultCatchWeightReserveQuantity(_itemId, handlingQty);
                }
                else
                {
                    inventBlocking.Qty      = handlingQty;
                }

                if (mustUnreservePhysical)
                {
                    NoYes skipRereservation = inventBlocking.SkipRereservation;

                    if (returnMode
                        && !InventParameters::find().ReserveOnOrdered)
                    {
                        inventBlocking.SkipRereservation = NoYes::Yes;
                    }

                    inventBlocking.updateWithUnreservePhysicalOnly();

                    inventBlocking.SkipRereservation = skipRereservation;
                }
                else
                {
                    inventBlocking.update();
                }
            }
            else
            {
                // delete the blocking transaction if the quantity has been reduced to 0
                inventBlocking.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventBlockingInventStatusSync construct()
    {
        return new InventBlockingInventStatusSync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory movement to synchronize inventory blockings for.
    /// </param>
    /// <param name="_changeQty">
    ///    The quantity that has changed on the movement.
    /// </param>
    /// <param name="_fromInventDim">
    ///    If specified, the original inventory dimension set; otherwise the dimensions from the movement.
    /// </param>
    /// <param name="_toInventDim">
    ///    If specified, the updated inventory dimension set; otherwises the dimensions from the movement.
    /// </param>
    /// <param name="_forcePhysicalUnreservation">
    ///    If specified, the blocking quantity will be physically unreserved, regardless of status-level dimension changes.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the newStandardHandlingQuantities method. Extenders should move their logic to wrap the newStandardHandlingQty method.', false, 30\9\2019)]
    public static InventBlockingInventStatusSync newStandard(
        InventMovement  _inventMovement,
        InventQty       _changeQty                  = 0,
        InventDim       _fromInventDim              = _inventMovement.inventdim(),
        InventDim       _toInventDim                = _inventMovement.inventdim(),
        boolean         _forcePhysicalUnreservation = false)
    {
        if (!_inventMovement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _inventMovement.itemId());

        return InventBlockingInventStatusSync::newStandardHandlingQty(
            _inventMovement,
            _changeQty,
            0,
            _fromInventDim,
            _toInventDim,
            _forcePhysicalUnreservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory movement to synchronize inventory blockings for.
    /// </param>
    /// <param name="_changeQty">
    ///    The quantity that has changed on the movement.
    /// </param>
    /// <param name="_changeCWQty">
    ///    The catch weight quantity that has changed on the movement.
    /// </param>
    /// <param name="_fromInventDim">
    ///    If specified, the original inventory dimension set; otherwise the dimensions from the movement.
    /// </param>
    /// <param name="_toInventDim">
    ///    If specified, the updated inventory dimension set; otherwises the dimensions from the movement.
    /// </param>
    /// <param name="_forcePhysicalUnreservation">
    ///    If specified, the blocking quantity will be physically unreserved, regardless of status-level dimension changes.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </returns>
    [Hookable(false)]
    public static InventBlockingInventStatusSync newStandardHandlingQuantities(
        InventMovement  _inventMovement,
        InventQty       _changeQty,
        PdsCWQty        _changeCWQty,
        InventDim       _fromInventDim              = _inventMovement.inventdim(),
        InventDim       _toInventDim                = _inventMovement.inventdim(),
        boolean         _forcePhysicalUnreservation = false)
    {
        InventDim  fromInventDim = _fromInventDim;
        InventDim  toInventDim = _toInventDim;

        if (prmisDefault(_fromInventDim)
            && prmisDefault(_toInventDim))
        {
            if (WHSInventoryBlockingStatusSyncReturnOrderFlight::instance().isEnabled())
            {
                if (_inventMovement.shouldSyncInventoryBlockingStatusTransType() &&
                    _inventMovement.parmInventBlockingStatusSyncInventDim().inventDimId)
                {
                    fromInventDim = _inventMovement.parmInventBlockingStatusSyncInventDim();
                    toInventDim = _inventMovement.parmInventBlockingStatusSyncInventDim();
                }
            }
            else
            {
                InventMov_Purch purchaseMovement = _inventMovement as InventMov_Purch;
                if (purchaseMovement
                && purchaseMovement.parmInventBlockingStatusSyncInventDim().inventDimId)
                {
                    fromInventDim = purchaseMovement.parmInventBlockingStatusSyncInventDim();
                    toInventDim = purchaseMovement.parmInventBlockingStatusSyncInventDim();
                }
            }
        }

        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _inventMovement.itemId()))
        {
            return InventBlockingInventStatusSync::newStandardHandlingQty(
                _inventMovement,
                _changeQty,
                _changeCWQty,
                fromInventDim,
                toInventDim,
                _forcePhysicalUnreservation);
        }

        return InventBlockingInventStatusSync::newStandard(_inventMovement, _changeQty, fromInventDim, toInventDim, _forcePhysicalUnreservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardReturnHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory movement to synchronize inventory blockings for.
    /// </param>
    /// <param name="_changeQty">
    ///    The quantity that has changed on the movement.
    /// </param>
    /// <param name="_changeCWQty">
    ///    The catch weight quantity that has changed on the movement.
    /// </param>
    /// <param name="_fromInventDim">
    ///    If specified, the original inventory dimension set; otherwise the dimensions from the movement.
    /// </param>
    /// <param name="_toInventDim">
    ///    If specified, the updated inventory dimension set; otherwises the dimensions from the movement.
    /// </param>
    /// <param name="_forcePhysicalUnreservation">
    ///    If specified, the blocking quantity will be physically unreserved, regardless of status-level dimension changes.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </returns>
    [Hookable(false)]
    public static InventBlockingInventStatusSync newStandardReturnHandlingQuantities(
        InventMovement  _inventMovement,
        InventQty       _changeQty,
        PdsCWQty        _changeCWQty,
        InventDim       _fromInventDim              = _inventMovement.inventdim(),
        InventDim       _toInventDim                = _inventMovement.inventdim(),
        boolean         _forcePhysicalUnreservation = false)
    {
        InventBlockingInventStatusSync inventBlockingInventStatusSync = InventBlockingInventStatusSync::newStandardHandlingQuantities(_inventMovement, _changeQty, _changeCWQty, _fromInventDim, _toInventDim, _forcePhysicalUnreservation);

        inventBlockingInventStatusSync.parmReturnMode(true);

        return inventBlockingInventStatusSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory movement to synchronize inventory blockings for.
    /// </param>
    /// <param name="_changeQty">
    ///    The quantity that has changed on the movement.
    /// </param>
    /// <param name="_changeCWQty">
    ///    The catch weight quantity that has changed on the movement.
    /// </param>
    /// <param name="_fromInventDim">
    ///    If specified, the original inventory dimension set; otherwise the dimensions from the movement.
    /// </param>
    /// <param name="_toInventDim">
    ///    If specified, the updated inventory dimension set; otherwises the dimensions from the movement.
    /// </param>
    /// <param name="_forcePhysicalUnreservation">
    ///    If specified, the blocking quantity will be physically unreserved, regardless of status-level dimension changes.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBlockingInventStatusSync</c> class.
    /// </returns>
    protected static InventBlockingInventStatusSync newStandardHandlingQty(
        InventMovement  _inventMovement,
        InventQty       _changeQty,
        PdsCWQty        _changeCWQty,
        InventDim       _fromInventDim,
        InventDim       _toInventDim,
        boolean         _forcePhysicalUnreservation)
    {
        InventBlockingInventStatusSync  inventBlockingInventStatusSync = InventBlockingInventStatusSync::construct();

        if (!_inventMovement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventBlockingInventStatusSync.parmInventMovement(_inventMovement);
        inventBlockingInventStatusSync.parmChangeQty(_changeQty);
        inventBlockingInventStatusSync.parmChangeCWQty(_changeCWQty);
        inventBlockingInventStatusSync.parmFromInventDim(_fromInventDim);
        inventBlockingInventStatusSync.parmToInventDim(_toInventDim);
        inventBlockingInventStatusSync.parmForcePhysicalUnreservation(_forcePhysicalUnreservation);

        return inventBlockingInventStatusSync;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>