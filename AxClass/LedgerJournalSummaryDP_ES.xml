<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalSummaryDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalSummaryDP_ES</c> class is the report data provider class for.
/// <c>LedgerJournalizeReportSummarize</c> report.
/// </summary>
/// <remarks>
/// This is the report data provider class for the summarized journal list SSRS reports.
/// </remarks>
[
    SRSReportQuery(queryStr(LedgerJournalSummary)),
    SRSReportParameterAttribute(classStr(LedgerJournalSummaryContract_ES))
]
class LedgerJournalSummaryDP_ES extends SrsReportDataProviderPreProcessTempDB
{
    LedgerJournalSummaryTmp_ES  ledgerJournalSummaryTmp_ES;
    boolean                     closingOpeningTransactions;
    LedgerJournalizeNum         journalizeNum;
    Query                       query;

    AccountName                 accountName;
    MainAccountNum              accountNum;

    AmountMST                   accumulatedCredit;
    AmountMST                   accumulatedDebit;

    Counter                     seqNum;

    TransDate                   startTransDate;
    TransDate                   endTransDate;

    int                         iyr;
    int                         imth;
    TransDate                   constructStartDate;
    TransDate                   constructEndDate;

    LedgerJournalizeReport      ledgerJournalizeReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildRange</Name>
				<Source><![CDATA[
        private void buildRange(int _month, int _year)
    {
        constructStartDate  = mkDate(1, _month, _year);
        constructEndDate    = endmth(mkDate(1, _month, _year));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingOpeningPeriod</Name>
				<Source><![CDATA[
        private void closingOpeningPeriod(FiscalPeriodType _periodType)
    {
        MainAccount mainAccount;
        LedgerBalanceMainAccountAmounts ledgerBalance;
        QueryRun queryRun;
        moneyMST credit;
        moneyMST debit;
        boolean periodPrinted = false;

        constructStartDate = startTransDate;
        constructEndDate = endTransDate;

        ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
        ledgerBalance.parmAccountingDateRange(constructStartDate, constructEndDate);
        ledgerBalance.parmSeparateDebitsAndCredits(true);
        ledgerBalance.parmIncludeClosingPeriod(_periodType == FiscalPeriodType::Closing);
        ledgerBalance.parmIncludeClosingPeriodBySystem(_periodType == FiscalPeriodType::Closing);
        ledgerBalance.parmIncludeOpeningPeriod(_periodType == FiscalPeriodType::Opening);
        ledgerBalance.parmJournalizeJournal(journalizeNum);

        this.updateQueryRange(query, constructStartDate, constructEndDate);
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            mainAccount = queryRun.get(tableNum(MainAccount)) as MainAccount;

            ledgerBalance.calculateBalance(mainAccount);

            debit = ledgerBalance.getAccountingCurrencyDebitBalance();
            credit = ledgerBalance.getAccountingCurrencyCreditBalance();

            if (debit != 0.0 || credit != 0.0)
            {
                // capture active MainAccount data for temporary table storage
                accountName  = mainAccount.localizedName();
                accountNum   = mainAccount.MainAccountId;

                this.insertLedgerJournalSummaryTmp_ES(_periodType, debit, credit);

                periodPrinted = true;
            }
        }

        // check for cases where no data is available for the period
        if (!periodPrinted)
        {
            // create an empty data sequence entry for the period
            accountNum   = ' ';
            accountName  = ' ';
            this.insertLedgerJournalSummaryTmp_ES(_periodType, 0.0, 0.0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalSummaryTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>LedgerJournalizeReportSummarizeTmp_ES</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>LedgerJournalizeReportSummarizeTmp_ES</c> table.
    /// </returns>
    [
        SRSReportDataSet(tableStr(LedgerJournalSummaryTmp_ES))
    ]
    public LedgerJournalSummaryTmp_ES getLedgerJournalSummaryTmp_ES()
    {
        select ledgerJournalSummaryTmp_ES;
        return ledgerJournalSummaryTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalSummaryTmp_ES</Name>
				<Source><![CDATA[
        private void insertLedgerJournalSummaryTmp_ES(FiscalPeriodType _periodType, moneyMST _debit, moneyMST _credit)
    {
        // maintain a running balance to support page totals on the report
        accumulatedDebit   += _debit;
        accumulatedCredit  += _credit;

        ledgerJournalSummaryTmp_ES.AccountNum         = accountNum;
        ledgerJournalSummaryTmp_ES.AccountName        = accountName;
        ledgerJournalSummaryTmp_ES.PeriodCode         = _periodType;
        ledgerJournalSummaryTmp_ES.Debit              = _debit;
        ledgerJournalSummaryTmp_ES.Credit             = _credit;
        ledgerJournalSummaryTmp_ES.StartDate          = constructStartDate;
        ledgerJournalSummaryTmp_ES.EndDate            = constructEndDate;
        ledgerJournalSummaryTmp_ES.Sequence           = seqNum;
        ledgerJournalSummaryTmp_ES.AccumulatedDebit   = accumulatedDebit;
        ledgerJournalSummaryTmp_ES.AccumulatedCredit  = accumulatedCredit;
        ledgerJournalSummaryTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    the SSRS at runtime. The method should compute data and populate the data tables that will be
    ///    returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource ds;
        QueryBuildRange range;
        int startmnth, endmnth, startyr, endyr;

        LedgerJournalSummaryContract_ES contract  = this.parmDataContract() as LedgerJournalSummaryContract_ES;
        closingOpeningTransactions                = contract.parmTransaction();
        journalizeNum                             = contract.parmJournalizeNum();

        query  = this.parmQuery();
        ds = query.dataSourceTable(tableNum(MainAccount));
        range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, LedgerChartOfAccounts));
        range.value(SysQuery::value(LedgerChartOfAccounts::current()));

        seqNum  = 1;

        ledgerJournalizeReport  = LedgerJournalizeReport::find(journalizeNum);

        startTransDate  = ledgerJournalizeReport.getStartTransDate();
        endTransDate    = ledgerJournalizeReport.getEndTransDate();

        startmnth  = mthOfYr(startTransDate);
        startyr    = year(startTransDate);
        endmnth    = mthOfYr(endTransDate);
        endyr      = year(endTransDate);

        this.updateQuery(query);
        if (closingOpeningTransactions)
        {
            // add all Opening Period transactions
            this.closingOpeningPeriod(FiscalPeriodType::Opening);

            seqNum++;
        }

        for (iyr = startyr; iyr <= endyr; iyr++)
        {
            if (startyr  == endyr)
            {
                this.regularPeriod(startMnth, endmnth);
            }
            else
            {
                if (iyr == endyr)
                {
                    this.regularPeriod(1, endmnth);
                }
                else
                {
                    if (imth != 1)
                    {
                        this.regularPeriod(startMnth, 12);
                    }
                    else
                    {
                        this.regularPeriod(1, 12);
                    }
                }
            }
        }

        if (closingOpeningTransactions)
        {
            // add all Closing Period transactions
            this.closingOpeningPeriod(FiscalPeriodType::Closing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>regularPeriod</Name>
				<Source><![CDATA[
        private void regularPeriod(int _start, int _end)
    {
        MainAccount mainAccount;
        LedgerBalanceMainAccountAmounts ledgerBalance;
        QueryRun queryRun;
        moneyMST debit, credit;
        boolean printSeq = false;

        ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
        ledgerBalance.parmSeparateDebitsAndCredits(true);
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmJournalizeJournal(journalizeNum);

        for (imth = _start; imth <= _end; imth++)
        {
            // build the filter date range
            this.buildRange(imth, iyr);

            ledgerBalance.parmAccountingDateRange(constructStartDate, constructEndDate);

            this.updateQueryRange(query, constructStartDate, constructEndDate);
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                mainAccount  = queryRun.get(tableNum(MainAccount));

                ledgerBalance.calculateBalance(mainAccount);

                debit = ledgerBalance.getAccountingCurrencyDebitBalance();
                credit = ledgerBalance.getAccountingCurrencyCreditBalance();

                if (debit != 0.0 || credit != 0.0)
                {
                    // capture active MainAccount data for temporary table storage
                    accountName = mainAccount.localizedName();
                    accountNum = mainAccount.MainAccountId;

                    this.insertLedgerJournalSummaryTmp_ES(FiscalPeriodType::Operating, debit, credit);

                    printSeq = true;
                }
            }

            // check for cases where we have no data for the sequence
            if (!printSeq)
            {
                // create an empty data sequence entry
                accountNum   = ' ';
                accountName  = ' ';
                this.insertLedgerJournalSummaryTmp_ES(FiscalPeriodType::Operating, 0.0, 0.0);
            }

            seqNum++;

            printSeq = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
        private void updateQuery(Query _query)
    {
        QueryBuildDataSource accountEntryDS, qbds;
        QueryBuildRange qbr;

        qbds = _query.dataSourceTable(tableNum(MainAccount)).addDataSource(tableNum(DimensionAttributeValueCombination));
        qbds.relations(true);
        qbds.joinMode(joinMode::ExistsJoin);

        accountEntryDS = qbds.addDataSource(tableNum(GeneralJournalAccountEntry));
        accountEntryDS.relations(true);

        qbds = accountEntryDS.addDataSource(tableNum(GeneralJournalEntry));
        qbds.relations(true);

        qbds = accountEntryDS.addDataSource(tableNum(LedgerEntryJournalizing));
        qbds.relations(true);
        qbr = SysQuery::findOrCreateRange(qbds, fieldNum(LedgerEntryJournalizing, Journal));
        qbr.value(queryValue(journalizeNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRange</Name>
				<Source><![CDATA[
        private void updateQueryRange(Query _query, TransDate _startDate, TransDate _endDate)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;

        qbds = _query.dataSourceTable(tableNum(GeneralJournalEntry));

        qbr = findOrCreateRange_W(qbds, fieldNum(GeneralJournalEntry, AccountingDate));
        qbr.value(SysQuery::range(_startDate, _endDate));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>