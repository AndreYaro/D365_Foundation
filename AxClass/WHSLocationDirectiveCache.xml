<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>WHSLocationDirectiveCache</c> is used to access cached values for location directives.
/// </summary>
class WhsLocationDirectiveCache
{
    const str cacheScope = classStr(WHSLocationDirectiveCache);

    SysGlobalObjectCache globalObjectCache;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves value from cache.
    /// </summary>
    /// <param name="key">
    ///     Cache key to look up.
    /// </param>
    /// <returns>
    ///     Cached value if found; otherwise, conNull().
    /// </returns>
    protected container getFromCache(container key)
    {
        return globalObjectCache.find(cacheScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the specified value into cache.
    /// </summary>
    /// <param name="_key">
    ///     Cache key to use.
    /// </param>
    /// <param name="_value">
    ///     Value to insert.
    /// </param>
    protected void insertIntoCache(
        container   _key,
        container   _value)
    {
        globalObjectCache.insert(cacheScope, _key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locDirTableHasDefaultQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given location directive has a default query.
    /// </summary>
    /// <param name="_locDirTable">
    /// <c>WHSLocDirTable</c> record to check.
    /// </param>
    /// <returns>
    /// true if the location directive has a default query; otherwise, false.
    /// </returns>
    public boolean locDirTableHasDefaultQuery(WHSLocDirTable _locDirTable)
    {
        boolean result;
        const str methodKey = 'locDirTableHasDefaultQuery';
        container key = [methodKey, _locDirTable.RecId];

        if (_locDirTable.RecId)
        {
            container cachedResult = this.getFromCache(key);

            if (cachedResult == conNull())
            {
                result = _locDirTable.isDefaultQuery();
                this.insertIntoCache(key, [result]);
            }
            else
            {
                [result] = cachedResult;
            }
        }
        else
        {
            result = _locDirTable.isDefaultQuery();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        globalObjectCache = classfactory.globalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache.
    /// </summary>
    public static void clearCache()
    {
        classfactory.globalObjectCache().clear(cacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLocationDirectiveCache construct()
    {
        return new WHSLocationDirectiveCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>