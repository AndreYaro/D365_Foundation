<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalDocumentPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This class posts the consumer electronic fiscal document (model 65).
/// </summary>
public class RetailFiscalDocumentPost_BR
{
    CustInvoiceJour                 custInvoiceJour;
    RetailFiscalDocument_BR         retailFiscalDocument;
    RetailFiscalDocumentCancel_BR   retailFiscalDocumentCancel;
    private RetailFiscalDocumentContingency_BR retailFiscalDocumentContingency;

    private boolean aggregateBeforePosting;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustInvoiceJour</Name>
				<Source><![CDATA[
    internal CustInvoiceJour getCustInvoiceJour()
    {
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the retail consumer fiscal document (model 65)
    /// </summary>
    /// <param name="_retailFiscalDocumentCancel">
    /// The <c>RetailFiscalDocumentCancel_BR</c> with the canceling information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void cancel(RetailFiscalDocumentCancel_BR _retailFiscalDocumentCancel)
    {
        using(var telemetry = RetailInstrumentationSegment::construct(classStr(RetailFiscalDocumentPost_BR), funcName()))
        {
            retailFiscalDocumentCancel = _retailFiscalDocumentCancel;

            FiscalDocument_BR fiscalDocument = FiscalDocument_BR::findByAccessKey(retailFiscalDocumentCancel.AccessKey);

            if (!fiscalDocument)
            {
                throw error(strFmt("@SYP4861466", retailFiscalDocumentCancel.AccessKey));
            }

            ttsbegin;

            FiscalDocumentPost_BR::cancelFiscalDocument(
                fiscalDocument,
                custInvoiceJour.LedgerVoucher,
                DateTimeUtil::date(retailFiscalDocumentCancel.CancelAccountingDate),
                custInvoiceJour.LedgerVoucher,
                retailFiscalDocumentCancel.CancelReasonComment);

            this.updateFiscalDocumentCancelFields(fiscalDocument, _retailFiscalDocumentCancel);

            EFDocument_BR efDocument = EFDocument_BR::findByRef(fiscalDocument.RecId, true);
            this.cancelEFDocument(efDocument);
            this.cancelEFDocumentXML(EFDocumentXML_BR::findByRef(efDocument.RecId, true));

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocumentCancelFields</Name>
				<Source><![CDATA[
    private void updateFiscalDocumentCancelFields(
        FiscalDocument_BR _fiscalDocument,
        RetailFiscalDocumentCancel_BR _retailFiscalDocumentCancel)
    {
        _fiscalDocument.selectForUpdate(true);

        if (_fiscalDocument.isElectronicFiscalReceipt())
        {
            _fiscalDocument.Status  = FiscalDocumentStatus_BR::Cancelled;
        }

        _fiscalDocument.CancelAccessKey = _retailFiscalDocumentCancel.CancelAccessKey;
        _fiscalDocument.CancelTaxAuthorityInfo = _retailFiscalDocumentCancel.CancelTaxAuthorityInfo;

        _fiscalDocument.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cancel information to the electronic fiscal document.
    /// </summary>
    /// <param name="_efDocument">
    /// The <c>EFDocument_BR</c> record to be updated.
    /// </param>
    /// <remarks>
    /// The <c>EFDocument_BR</c> should be already selected for updated.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void cancelEFDocument(EFDocument_BR _efDocument)
    {
        if (_efDocument)
        {
            _efDocument.MessageType = EFDocMessageType_BR::Cancel;
            _efDocument.MessageStatus = retailFiscalDocumentCancel.MessageStatus;
            _efDocument.Date = DateTimeUtil::date(retailFiscalDocumentCancel.CancelAccountingDate);
            _efDocument.Time = DateTimeUtil::time(retailFiscalDocumentCancel.CancelAccountingDate);
            _efDocument.ProtocolNumber = retailFiscalDocumentCancel.ProtocolNumber;
            
            _efDocument.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelEFDocumentXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cancel XMLs to the electronic fiscal document.
    /// </summary>
    /// <param name="_efDocumentXml">
    /// The <c>EFDocumentXML_BR</c> record to be updated.
    /// </param>
    /// <remarks>
    /// The <c>EFDocumentXML_BR</c> should be already selected for updated.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void cancelEFDocumentXML(EFDocumentXML_BR _efDocumentXml)
    {
        _efDocumentXml.Cancel           = retailFiscalDocumentCancel.XmlRequest;
        _efDocumentXml.CancelResponse   = retailFiscalDocumentCancel.XmlResponse;

        _efDocumentXml.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscription to the delegate right after writting to a fiscal document during the post
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The parent <c>FiscalDocument_BR</c> record just written to.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fiscalDocumentWritten(FiscalDocument_BR _fiscalDocument)
    {
        EFDocument_BR efDocument = this.postEFDocument(_fiscalDocument);
        this.postEFDocumentXML(efDocument);
        this.scheduleEmail(efDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a class to post a fiscal document based on a consumer retail fiscal document (model 65) record.
    /// </summary>
    /// <returns>
    /// An instance of <c>FiscalDocumentPost_BR</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FiscalDocumentPost_BR getFiscalDocumentPost()
    {
        FiscalDocParmDataCreatorRetailFDoc_BR creator = FiscalDocParmDataCreatorRetailFDoc_BR::constructWithAggregationParameter(
            custInvoiceJour,
            retailFiscalDocument,
            aggregateBeforePosting);

        return new FiscalDocumentPost_BR(creator.createParmData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ConsumerEFDocumentPost_BR</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record generated by the Retail statement.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the aggregation before posting value.
    /// </summary>
    /// <param name = "_aggregateBeforePosting">
    /// Indicates whether to aggregate before posting or not.
    /// </param>
    /// <returns>True if the aggregation before posting is enabled otherwise false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmAggregateBeforePosting(boolean _aggregateBeforePosting = aggregateBeforePosting)
    {
        aggregateBeforePosting = _aggregateBeforePosting;

        return aggregateBeforePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the <c>EFDocument_BR</c> record.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The <c>FiscalDocument_BR</c> record that should be linked to.
    /// </param>
    /// <returns>
    /// The <c>EFDocument_BR</c> record created.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EFDocument_BR postEFDocument(FiscalDocument_BR _fiscalDocument)
    {
        EFDocument_BR efDocument;

        efDocument.AverageResponseTime      = 0;
        efDocument.ConsumerEFDocInquiryUrl  = retailFiscalDocument.ConsumerEFDocInquiryUrl;
        efDocument.ContingencyMode          = retailFiscalDocument.ContingencyMode;
        efDocument.ContingencyDateTime      = retailFiscalDocument.ContingencyDateTime;
        efDocument.ContingencyDateTimeOffset = retailFiscalDocument.ContingencyDateTimeOffset;
        efDocument.ContingencyModeRefRecID  = 0;
        efDocument.ContingencyReason        = retailFiscalDocument.ContingencyReason;
        efDocument.Date                     = DateTimeUtil::date(retailFiscalDocument.ProtocolDate);
        efDocument.Time                     = DateTimeUtil::time(retailFiscalDocument.ProtocolDate);
        efDocument.MessageStatus            = retailFiscalDocument.MessageStatus;
        efDocument.MessageType              = EFDocMessageType_BR::Submit;
        efDocument.ProtocolNumber           = retailFiscalDocument.ProtocolNumber;
        efDocument.QrcodeText               = retailFiscalDocument.QrcodeText;
        efDocument.ReceiptNumber            = retailFiscalDocument.ReceiptNumber;
        efDocument.ReturnCodeDescription    = retailFiscalDocument.ReturnCodeDescription;
        efDocument.ReturnCodeRefRecId       = retailFiscalDocument.ReturnCodeRefRecId;
        efDocument.ReturnMessage            = retailFiscalDocument.ReturnMessage;
        efDocument.RefRecId                 = _fiscalDocument.RecId;

        efDocument.insert();

        return efDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEFDocumentXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the <c>EFDocumentXML_BR</c> record.
    /// </summary>
    /// <param name="_efDocument">
    /// The <c>EFDocument_BR</c> record that should be linked to.
    /// </param>
    /// <returns>
    /// The <c>EFDocumentXML_BR</c> record created.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EFDocumentXML_BR postEFDocumentXML(EFDocument_BR _efDocument)
    {
        EFDocumentXML_BR efDocumentXML;

        efDocumentXML.Submission            = retailFiscalDocument.XmlRequest;
        efDocumentXML.SubmissionResponse    = retailFiscalDocument.XmlResponse;
        efDocumentXML.SubmitReturn          = retailFiscalDocument.XmlReturnRequest;
        efDocumentXML.SubmitReturnResponse  = retailFiscalDocument.XmlReturnResponse;
        efDocumentXML.Cancel                = '';
        efDocumentXML.CancelResponse        = '';
        efDocumentXML.EFDocRefRecId = _efDocument.RecId;

        efDocumentXML.insert();

        return efDocumentXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postThirdPartyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the retail fiscal document third party address.
    /// </summary>
    /// <returns>
    /// The newly created address recId.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LogisticsPostalAddressRecId postThirdPartyAddress()
    {
        LogisticsAddressCountryRegion   country;
        LogisticsAddressState           state;
        LogisticsAddressCity            city;
        LogisticsAddressZipCode         zipCode;
        LogisticsPostalAddressRecId     logisticsPostalAddressRecId;
        AxLogisticsLocation             axLogisticsLocation;
        AxLogisticsPostalAddress        axLogisticsPostalAddress;

        void saveZipCode()
        {
            AxLogisticsAddressZipCode axLogisticsAddressZipCode;

            axLogisticsAddressZipCode   = AxLogisticsAddressZipCode::construct();
            axLogisticsAddressZipCode.parmCountryRegionId(country.CountryRegionId);
            axLogisticsAddressZipCode.parmState(state.StateId);
            axLogisticsAddressZipCode.parmZipCode(retailFiscalDocument.ThirdPartyAddressZipCode);
            axLogisticsAddressZipCode.parmCity(city.Name);
            axLogisticsAddressZipCode.parmCityRecId(city.RecId);
            axLogisticsAddressZipCode.parmDistrictName(retailFiscalDocument.ThirdPartyAddressDistrict);
            axLogisticsAddressZipCode.validateInput(true);
            axLogisticsAddressZipCode.save();

            zipCode = axLogisticsAddressZipCode.logisticsAddressZipCode();
        }

        logisticsPostalAddressRecId = retailFiscalDocument.ThirdPartyPostalAddress;

        if (!logisticsPostalAddressRecId)
        {
            if (retailFiscalDocument.ThirdPartyAddressCountryRegionId)
            {
                country = LogisticsAddressCountryRegion::find(retailFiscalDocument.ThirdPartyAddressCountryRegionId);
            }

            if (country)
            {
                if (retailFiscalDocument.ThirdPartyAddressState)
                {
                    state = LogisticsAddressState::find(country.CountryRegionId, retailFiscalDocument.ThirdPartyAddressState);
                }

                if (retailFiscalDocument.ThirdPartyAddressCity)
                {
                    city = LogisticsAddressCity::findCity(retailFiscalDocument.ThirdPartyAddressCity, country.CountryRegionId, '', retailFiscalDocument.ThirdPartyAddressState);
                }

                if (retailFiscalDocument.ThirdPartyAddressZipCode)
                {
                    zipCode = LogisticsAddressZipCode::findZipCodeCountryRegion(retailFiscalDocument.ThirdPartyAddressZipCode, country.CountryRegionId);

                    if (!zipCode)
                    {
                        saveZipCode();
                    }
                }

                axLogisticsLocation     = AxLogisticsLocation::construct();
                axLogisticsLocation.parmIsPostalAddress(true);

                axLogisticsLocation.validateInput(true);

                axLogisticsLocation.save();

                axLogisticsPostalAddress    = AxLogisticsPostalAddress::construct();

                axLogisticsPostalAddress.parmLocation(axLogisticsLocation.logisticsLocation().RecId);
                axLogisticsPostalAddress.parmZipCode(zipCode.ZipCode);
                axLogisticsPostalAddress.parmZipCodeRecId(zipCode.RecId);
                axLogisticsPostalAddress.parmStreet(retailFiscalDocument.ThirdPartyAddressStreet);
                axLogisticsPostalAddress.parmStreetNumber(retailFiscalDocument.ThirdPartyAddressStreetNumber);
                axLogisticsPostalAddress.parmBuildingCompliment(retailFiscalDocument.ThirdPartyAddressComplement);
                axLogisticsPostalAddress.parmCountryRegionId(country.CountryRegionId);
                axLogisticsPostalAddress.parmState(state.StateId);
                axLogisticsPostalAddress.parmCity(city.Name);
                axLogisticsPostalAddress.parmCityRecId(city.RecId);
                axLogisticsPostalAddress.parmDistrictName(retailFiscalDocument.ThirdPartyAddressDistrict);

                axLogisticsPostalAddress.validateInput(true);

                axLogisticsPostalAddress.save();

                logisticsPostalAddressRecId = axLogisticsPostalAddress.addressTable().RecId;
            }
        }

        return logisticsPostalAddressRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the posting of the consumer electronic fiscal document.
    /// </summary>
    /// <param name="_retailFiscalDocument">
    /// The <c>RetailFiscalDocument_BR</c> to be used as source of information.
    /// </param>
    /// <remarks>
    /// This will handle the <c>EFDocument_BR</c> and <c>EFDocumentXML_BR</c> records.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run(RetailFiscalDocument_BR _retailFiscalDocument)
    {
        retailFiscalDocument = _retailFiscalDocument;

        if (this.registerForStatusInquiry())
        {
            return;
        }

        using(var telemetry = RetailInstrumentationSegment::construct(classStr(RetailFiscalDocumentPost_BR), funcName()))
        {
            System.Diagnostics.Stopwatch fiscalDocumentPostStopWatch = new System.Diagnostics.Stopwatch();

            retailFiscalDocument.ThirdPartyPostalAddress = this.postThirdPartyAddress();

            FiscalDocumentPost_BR fiscalDocumentPost = this.getFiscalDocumentPost();

            this.subscribe(fiscalDocumentPost);

            eventSource.WriteEventPostGeneralFiscalDocumentStart(_retailFiscalDocument.RecId, fiscalDocumentPost.getFiscalDocument().RecId, funcName());
            fiscalDocumentPostStopWatch.Start();

            ttsbegin;

            fiscalDocumentPost.run();

            ttscommit;

            fiscalDocumentPostStopWatch.Stop();
            eventSource.WriteEventPostGeneralFiscalDocumentFinished(_retailFiscalDocument.RecId, fiscalDocumentPost.getFiscalDocument().RecId, funcName(), fiscalDocumentPostStopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send email to recipients of <c>EFDocument_BR</c> record,
    /// according to DanfePrintFormat.
    /// </summary>
    /// <param name="_efDocument">
    /// The <c>EFDocument_BR</c> record that should be linked to.
    /// </param>
    /// <returns>
    /// The <c>EFDocEmailHistory_BR</c> record created.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EFDocEmailHistory_BR scheduleEmail(EFDocument_BR _efDocument)
    {
        EFDocEmailHistory_BR emailHistory;

        if (retailFiscalDocument.DanfePrintFormat == DanfePrintFormat_BR::EmailConsumerEfd)
        {
            emailHistory.EFDocEmailStatus_BR = EFDocEmailStatus_BR::Waiting;
            emailHistory.EFDocument_BR = _efDocument.RecId;
            emailHistory.insert();
        }

        return emailHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to the fiscal document post delegates.
    /// </summary>
    /// <param name="_fiscalDocumentPost">
    /// The <c>FiscalDocumentPost_BR</c> object that will be used for posting the fiscal document.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void subscribe(FiscalDocumentPost_BR _fiscalDocumentPost)
    {
        _fiscalDocumentPost.fiscalDocumentWritten += eventhandler(this.fiscalDocumentWritten);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerForStatusInquiry</Name>
				<Source><![CDATA[
    private boolean registerForStatusInquiry()
    {
        boolean shouldRetailEFDocToBeInquired;

        if (retailFiscalDocument.Status == FiscalDocumentStatus_BR::Created &&
            retailFiscalDocument.MessageStatus == EFDocMessageStatus_BR::Sent)
        {
            if (!RetailEFDocumentToBeInquired_BR::exist(retailFiscalDocument.RecId, RetailEFDocumentToBeInquiredStatus_BR::Unknown))
            {
                RetailEFDocumentToBeInquired_BR retailEFDocumentToBeInquired;
                retailEFDocumentToBeInquired.Status = RetailEFDocumentToBeInquiredStatus_BR::Unknown;
                retailEFDocumentToBeInquired.RetailFiscalDocument_BR = retailFiscalDocument.RecId;
                retailEFDocumentToBeInquired.insert();
            }
            shouldRetailEFDocToBeInquired = true;
        }

        return shouldRetailEFDocToBeInquired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>