<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLinePotencyPriceCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLinePotencyPriceCache</c> class builds and caches sales order line potency pricing details.
/// </summary>
class SalesLinePotencyPriceCache
{
    #define.CalculatedId_Idx(1)
    #define.CalculatedLineAmount_Idx(2)
    #define.CalculatedUnitPrice_Idx(3)

    //cache whether the item price is potency enabled
    Map itemPotencyPricingEnabled;
    Map pdsPricingCalculatedCache;

    SalesId salesId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates does the record exist in the cache.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    /// A referenced <c>RecId</c>.
    /// </param>
    /// <returns>
    /// true if record exists in the cache; otherwise, false.
    /// </returns>
    public boolean exists(SalesLineRefRecId _salesLineRefRecId)
    {
        this.fillPotencyCacheIfUninitialized();

        return pdsPricingCalculatedCache.exists(_salesLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPotencyCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the cache with calculated pricing information in the current sales order.
    /// </summary>
    /// <remarks>
    ///     In regards to sales order lines, this class is typically referenced on a line by line basis. Thus, relevant information may not be available for the sales grid using this
    ///     strategy. Therefore, the cache is filled in one shot by examining the sales order as a whole.
    /// </remarks>
    public void fillPotencyCache()
    {
        itemPotencyPricingEnabled = new Map(Types::String, Types::Integer);

        if (#PDSPotencyEnabled)
        {
            pdsPricingCalculatedCache = Map::create(SalesLinePotencyPriceCache::buildPotencyCache(salesId));
        }
        else
        {
            pdsPricingCalculatedCache = new Map(extendedTypeId2Type(extendedTypeNum(SalesLineRefRecId)), Types::Container);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPotencyCacheIfUninitialized</Name>
				<Source><![CDATA[
    private void fillPotencyCacheIfUninitialized()
    {
        if (pdsPricingCalculatedCache == null)
        {
            this.fillPotencyCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveLineCalculatedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the adjusted net amount for the specified sales line.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    ///     Record ID of a sales line record to get the adjusted net amount from.
    /// </param>
    /// <returns>
    ///     The adjusted net amount.
    /// </returns>
    public PDSCalculatedLineAmount getActiveLineCalculatedAmount(SalesLineRefRecId _salesLineRefRecId)
    {
        PDSCalculatedLineAmount pdsPricingCalculatedLineAmount;

        if (this.exists(_salesLineRefRecId))
        {
            pdsPricingCalculatedLineAmount = conPeek(pdsPricingCalculatedCache.lookup(_salesLineRefRecId), #CalculatedLineAmount_Idx);
        }

        return pdsPricingCalculatedLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveLineCalculatedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the adjusted unit price if this is an advanced pricing order.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    ///     Record ID of a sales line record to get the adjusted unit price from.
    /// </param>
    /// <returns>
    ///     The adjusted unit price.
    /// </returns>
    public PDSCalculatedUnitPrice getActiveLineCalculatedUnitPrice(SalesLineRefRecId _salesLineRefRecId)
    {
        PDSCalculatedUnitPrice  pdsPricingCalculatedUnitPrice;

        if (this.exists(_salesLineRefRecId))
        {
            pdsPricingCalculatedUnitPrice = conPeek(pdsPricingCalculatedCache.lookup(_salesLineRefRecId), #CalculatedUnitPrice_Idx);
        }

        return pdsPricingCalculatedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveLineCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the calculation ID if this is an advanced pricing order.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    ///     Record ID of a sales line record to get the calculation ID from.
    /// </param>
    /// <returns>
    ///     The calculation ID.
    /// </returns>
    public PDSCalculationId getActiveLineCalculationId(SalesLineRefRecId _salesLineRefRecId)
    {
        PDSCalculationId pdsPricingCalculatedPriceId;

        if (this.exists(_salesLineRefRecId))
        {
            pdsPricingCalculatedPriceId = conPeek(pdsPricingCalculatedCache.lookup(_salesLineRefRecId), #CalculatedId_Idx);
        }

        return pdsPricingCalculatedPriceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemPotencyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether the specified item is potency enabled.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item selected.
    /// </param>
    /// <returns>
    ///     true if the item is potency-enabled; otherwise, false.
    /// </returns>
    protected boolean isItemPotencyEnabled(ItemId _itemId)
    {
        boolean enabled = false;

        if (_itemId)
        {
            this.fillPotencyCacheIfUninitialized();

            if (itemPotencyPricingEnabled.exists(_itemId))
            {
                enabled = itemPotencyPricingEnabled.lookup(_itemId);
            }
            else
            {
                enabled = (InventTable::find(_itemId).pdsBaseAttributeId != '');
                itemPotencyPricingEnabled.insert(_itemId, enabled);
            }
        }
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    protected SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatePotencyPricingCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recalculate the potency cached values of the selected sales line.
    /// </summary>
    /// <param name="_salesLineRefRecId">
    ///     Record ID of the sales line currently selected.
    /// </param>
    /// <param name="_itemId">
    ///     Item ID as found on the sales line record specified by <paramref name="_salesLineRefRecId"/>.
    /// </param>
    public void recalculatePotencyPricingCache(SalesLineRefRecId _salesLineRefRecId, ItemId _itemId)
    {
        if (this.shouldCalculatePotencyPricing(_itemId))
        {
            //passing the recId as the buffer is fetched on the client
            pdsPricingCalculatedCache.insert(_salesLineRefRecId, SalesLine::getSalesLinePotencyPricingDetails(_salesLineRefRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculatePotencyPricing</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified item ID should have potency pricing information calculated.
    /// </summary>
    /// <param name="_itemId">
    ///     Item ID to determine whether potency pricing information should be calculated.
    /// </param>
    /// <returns>
    ///     true if the item is potency-pricing enabled; otherwise, false.
    /// </returns>
    protected boolean shouldCalculatePotencyPricing(ItemId _itemId)
    {
        return (#PDSPotencyEnabled && _itemId && this.isItemPotencyEnabled(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPotencyCache</Name>
				<Source><![CDATA[
    private static container buildPotencyCache(SalesId _salesId)
    {
        PDSSalesLinePricingCalculation  salesPricingCalculation;
        SalesLine                       salesLine;
        InventTable                     inventTable;

        // The container will be in the format: [pdsPricingCalculatedId, pdsPricingCalculatedLineAmount, pdsPricingCalculatedUnitPrice]
        Map pdsPricingCalculatedCache = new Map(extendedTypeId2Type(extendedTypeNum(SalesLineRefRecId)), Types::Container);

        while select RecId from salesLine
            where salesLine.SalesId == _salesId
        exists join inventTable
            where inventTable.ItemId == salesLine.ItemId &&
                    inventTable.pdsBaseAttributeId != ''
        exists join salesPricingCalculation
            where salesPricingCalculation.SalesLine == salesLine.RecId
        {
            pdsPricingCalculatedCache.insert(salesLine.RecId, SalesLine::getSalesLinePotencyPricingDetails(salesLine.RecId));
        }

        return pdsPricingCalculatedCache.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the <c>SalesLinePotencyPriceCache</c> instance based on a sales order ID.
    /// </summary>
    /// <param name="_salesId">
    /// A sales order ID.
    /// </param>
    /// <returns>
    /// An initialized <c>SalesLinePotencyPriceCache</c> class instance.
    /// </returns>
    /// <remarks>
    /// Lazy cache population approach is used unless the method is constructed on a server tier.
    /// </remarks>
    public static SalesLinePotencyPriceCache newFromSalesId(SalesId _salesId)
    {
        SalesLinePotencyPriceCache potencyPriceCache = new SalesLinePotencyPriceCache();
        potencyPriceCache.parmSalesId(_salesId);

        potencyPriceCache.fillPotencyCache();

        return potencyPriceCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
