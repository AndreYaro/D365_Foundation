<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrganization_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(RetailInternalOrganization))]
internal final class RetailInternalOrganization_ApplicationSuite_Extension
{
    private SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(formStr(RetailInternalOrganization));

    private AppCopilotSummaryControlBuilder copilotSummaryControlBuilder;
    private AsyncTaskResult copilotChannelOverviewResult;
    private AsyncTaskResult copilotConfigurationRisksSummariesResult;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        if (FeatureStateProvider::isFeatureEnabled(RetailMerchandisingCopilotSummaryFeature::instance()) &&
            SysDataverseUtility::IsDataverseLinked())
        {
            this.initializeCopilotSummaryControl();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelOverviewCacheKey</Name>
				<Source><![CDATA[
    internal container getChannelOverviewCacheKey()
    {
        return RetailMerchandisingCopilotCapiProvider::getChannelOverviewCacheKey(omInternalOrganization.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationRisksSummariesCacheKey</Name>
				<Source><![CDATA[
    internal container getConfigurationRisksSummariesCacheKey()
    {
        return RetailMerchandisingCopilotCapiProvider::getConfigurationRisksSummariesCacheKey(omInternalOrganization.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCopilotSummaryControl</Name>
				<Source><![CDATA[
    private void initializeCopilotSummaryControl()
    {
        AppCopilotSummaryControlContract copilotSummaryControlContract = AppCopilotSummaryControlContract::construct(this, SummaryGeneratingGroup);
        copilotSummaryControlContract.parmTermsLink('http://aka.ms/Merchandising_FAQ');
        copilotSummaryControlContract.parmTermsLabelId(literalStr("@AppCopilotSummaryControl:LearnMore"));

        copilotSummaryControlBuilder = AppCopilotSummaryControlBuilder::newFromContract(copilotSummaryControlContract);
        this.addCopilotSummaryTopics();

        summaryController = AppCopilotSummaryController::newFromBuilder(copilotSummaryControlBuilder, UserLicenseType::Commerce);
        summaryController.registerGetRecordKeyInTelemetryCallback(formMethodStr(RetailInternalOrganization, getRecordKeyInTelemetry));
        summaryController.registerSummaryGenerator(
            RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicGroupName,
            formMethodStr(RetailInternalOrganization, getChannelOverviewParameters),
            classNum(RetailMerchandisingCopilotCapiProvider),
            staticMethodStr(RetailMerchandisingCopilotCapiProvider, getChannelOverview),
            formMethodStr(RetailInternalOrganization, updateCopilotChannelOverviewCallback),
            true, // Is cache enabled?
            formMethodStr(RetailInternalOrganization, getChannelOverviewCacheKey),
            staticMethodStr(RetailMerchandisingCopilotCapiProvider, validateSummaryResult),
            AppCopilotCache::DefaultApiAvailableCacheExpirationTimeInTicks_15Min);
        summaryController.registerSummaryGenerator(
            RetailMerchandisingCopilotSummaryConstants::ConfigurationRisksTopicGroupName,
            formMethodStr(RetailInternalOrganization, getConfigurationRisksParameters),
            classNum(RetailMerchandisingCopilotCapiProvider),
            staticMethodStr(RetailMerchandisingCopilotCapiProvider, getConfigurationRisksSummaries),
            formMethodStr(RetailInternalOrganization, updateCopilotConfigurationRisksCallback),
            true, // Is cache enabled?
            formMethodStr(RetailInternalOrganization, getConfigurationRisksSummariesCacheKey),
            staticMethodStr(RetailMerchandisingCopilotCapiProvider, validateSummaryResult),
            AppCopilotCache::NotSupportLanguageCacheExpirationTimeInTicks_24H);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCopilotSummaryTopics</Name>
				<Source><![CDATA[
    private void addCopilotSummaryTopics()
    {
        // Channel overview.
        copilotSummaryControlBuilder.addTopic('ChannelOverviewTopic', "@Retail:MerchandisingCopilotChannelOverviewSectionHeader");

        // Product risks summary.
        AppCopilotSummaryControlTopicActions productRisksTopActions = AppCopilotSummaryControlTopicActions::construct(RetailMerchandisingCopilotSummaryConstants::ProductRisksTopicName);
        AppCopilotSummaryControlAction reviewProductRisksAction = AppCopilotSummaryControlAction::construct(
                'ReviewProductRisksAction',
                literalStr("@Retail:MerchandisingCopilotReviewAllConfigurationRisksLabel"),
                this,
                formMethodStr(RetailInternalOrganization, productRisksTopicActionClicked));

        productRisksTopActions.addTopicAction(reviewProductRisksAction);
        copilotSummaryControlBuilder.addTopic(RetailMerchandisingCopilotSummaryConstants::ProductRisksTopicName, "@Retail:MerchandisingCopilotProductRisksSummarySectionHeader", productRisksTopActions);

        // Catalog risks summary.
        AppCopilotSummaryControlTopicActions catalogRisksActions = AppCopilotSummaryControlTopicActions::construct(RetailMerchandisingCopilotSummaryConstants::CatalogRisksTopicName);
        AppCopilotSummaryControlAction reviewCatalogRisksAction = AppCopilotSummaryControlAction::construct(
                'ReviewCatalogRisksAction',
                literalStr("@Retail:MerchandisingCopilotReviewAllConfigurationRisksLabel"),
                this,
                formMethodStr(RetailInternalOrganization, catalogRisksTopicActionClicked));

        catalogRisksActions.addTopicAction(reviewCatalogRisksAction);
        copilotSummaryControlBuilder.addTopic(RetailMerchandisingCopilotSummaryConstants::CatalogRisksTopicName, "@Retail:MerchandisingCopilotCatalogRisksSummarySectionHeader", catalogRisksActions);

        // Category risks summary.
        AppCopilotSummaryControlTopicActions categoryRisksActions = AppCopilotSummaryControlTopicActions::construct(RetailMerchandisingCopilotSummaryConstants::CategoryRisksTopicName);
        AppCopilotSummaryControlAction reviewCategoryRisksAction = AppCopilotSummaryControlAction::construct(
                'ReviewCategoryRisksAction',
                literalStr("@Retail:MerchandisingCopilotReviewAllConfigurationRisksLabel"),
                this,
                formMethodStr(RetailInternalOrganization, categoryRisksTopicActionClicked));

        categoryRisksActions.addTopicAction(reviewCategoryRisksAction);
        copilotSummaryControlBuilder.addTopic(RetailMerchandisingCopilotSummaryConstants::CategoryRisksTopicName, "@Retail:MerchandisingCopilotCategoryRisksSummarySectionHeader", categoryRisksActions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productRisksTopicActionClicked</Name>
				<Source><![CDATA[
    private void productRisksTopicActionClicked(FormButtonControl _formControl)
    {
        this.showValidationResultsByEntity(RetailCommerceValidatorTestStage::Products);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryRisksTopicActionClicked</Name>
				<Source><![CDATA[
    private void categoryRisksTopicActionClicked(FormButtonControl _formControl)
    {
        this.showValidationResultsByEntity(RetailCommerceValidatorTestStage::CommerceCategories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogRisksTopicActionClicked</Name>
				<Source><![CDATA[
    private void catalogRisksTopicActionClicked(FormButtonControl _formControl)
    {
        this.showValidationResultsByEntity(RetailCommerceValidatorTestStage::CommerceCatalogs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showValidationResultsByEntity</Name>
				<Source><![CDATA[
    private void showValidationResultsByEntity(RetailCommerceValidatorTestStage _entityType)
    {
        RetailCommerceValidator validator = RetailCommerceValidator::findLastCompletedValidation(omInternalOrganization.RecId);

        Args validationResultFormArgs = new Args();
        validationResultFormArgs.record(validator);
        validationResultFormArgs.caller(this);
        validationResultFormArgs.parmEnumType(enumNum(RetailCommerceValidatorTestStage));
        validationResultFormArgs.parmEnum(_entityType);

        new MenuFunction(menuItemDisplayStr(RetailCommerceValidatorResultsWorkSpace), MenuItemType::Display).run(validationResultFormArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordKeyInTelemetry</Name>
				<Source><![CDATA[
    private RecId getRecordKeyInTelemetry()
    {
        return omInternalOrganization.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelOverviewParameters</Name>
				<Source><![CDATA[
    private container getChannelOverviewParameters()
    {
        return [omInternalOrganization, summaryController.parmUniqueCorrelationId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationRisksParameters</Name>
				<Source><![CDATA[
    private container getConfigurationRisksParameters()
    {
        return [omInternalOrganization, summaryController.parmUniqueCorrelationId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopilotChannelOverviewCallback</Name>
				<Source><![CDATA[
    private void updateCopilotChannelOverviewCallback(AsyncTaskResult _result)
    {
        this.updateCopilotSummary(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicGroupName, _result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopilotConfigurationRisksCallback</Name>
				<Source><![CDATA[
    private void updateCopilotConfigurationRisksCallback(AsyncTaskResult _result)
    {
        this.updateCopilotSummary(RetailMerchandisingCopilotSummaryConstants::ConfigurationRisksTopicGroupName, _result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopilotSummary</Name>
				<Source><![CDATA[
    private void updateCopilotSummary(str _topicGroupName, AsyncTaskResult _result)
    {
        if (this.isClosed())
        {
            return;
        }

        using (SysInstrumentationActivityContext activityContext = logger.activityContext(formMethodStr(RetailInternalOrganization, updateCopilotSummary), formStr(RetailInternalOrganization))
            .addCustomProperty('TopicGroupName', _topicGroupName)
            .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
            .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
            .addCustomProperty('UniqueCorrelationId', guid2Str(summaryController.parmUniqueCorrelationId())))
        {
            System.Exception exception;
            boolean isUpdateTopicSuccessful = false, isTopicUpdated = false;

            try
            {
                if (_topicGroupName != RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicGroupName &&
                    _topicGroupName != RetailMerchandisingCopilotSummaryConstants::ConfigurationRisksTopicGroupName)
                {
                    logger.logError(strFmt('Unknown topic group name: %1', _topicGroupName));
                    return;
                }

                AppCopilotSummaryResultContract resultContract = summaryController.getSummaryResult(_result, true);

                if (!resultContract)
                {
                    logger.logError('Result contract is null.');
                    return;
                }

                container resultContainer = resultContract.getSummaryResult();

                if (conLen(resultContainer) < 1)
                {
                    logger.logError('There is no element in result container.');
                    return;
                }

                str resultStr = conPeek(resultContainer, 1);
                if (resultStr == RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode)
                {
                    this.updateCopilotControlTopic(_topicGroupName, "@AppCopilotSummaryControl:LanguageNotSupport");
                    logger.logInformation(strFmt('Merchandising copilot result returned language not supported for %1', currentUserLanguage()));
                }
                else if (resultStr == RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize)
                {
                    this.updateCopilotControlTopic(_topicGroupName, "@AppCopilotSummaryControl:NoDataToSummarize");
                    logger.logInformation('No data to summarize');
                }
                else if (resultStr == '' || resultStr == RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode)
                {
                    this.updateCopilotControlTopic(_topicGroupName, "@AppCopilotSummaryControl:AISummaryUnavailable");
                    logger.logInformation('Merchandising copilot summary is unavailable.');
                }
                else
                {
                    this.updateCopilotControlTopic(_topicGroupName, resultStr);
                    isUpdateTopicSuccessful = true;
                }

                isTopicUpdated = true;
            }
            catch (exception)
            {
                activityContext.setException(exception);
                logger.logException(exception, strFmt('Update topic failed for form %1. Exception %2', formStr(RetailInternalOrganization), exception.Message));
            }
            finally
            {
                if (!isTopicUpdated)
                {
                    this.updateCopilotControlTopic(_topicGroupName, "@AppCopilotSummaryControl:AISummaryUnavailable");
                }
            }

            RetailCommerceValidator lastCompletedValidation = RetailCommerceValidator::findLastCompletedValidation(omInternalOrganization.RecId);
            copilotSummaryControlBuilder.setLastGeneratedDateTime(lastCompletedValidation.LastCompletedDateTime);

            // Hide the loader and display content.
            copilotSummaryControlBuilder.displayTopicContent();

            activityContext.addCustomProperty('UpdateTopicSuccess', int2Str(isUpdateTopicSuccessful));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopilotControlTopic</Name>
				<Source><![CDATA[
    private void updateCopilotControlTopic(str _topicGroupName, str _content)
    {
        if (_topicGroupName == RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicGroupName)
        {
            this.updateChannelOverviewTopic(_content);
        }
        else if (_topicGroupName == RetailMerchandisingCopilotSummaryConstants::ConfigurationRisksTopicGroupName)
        {
            this.updateConfigurationRisksTopics(_content);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannelOverviewTopic</Name>
				<Source><![CDATA[
    private void updateChannelOverviewTopic(str _content)
    {
        copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicName, _content);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfigurationRisksTopics</Name>
				<Source><![CDATA[
    private void updateConfigurationRisksTopics(str _content)
    {
        if (_content == "@AppCopilotSummaryControl:NoDataToSummarize" ||
            _content == "@AppCopilotSummaryControl:AISummaryUnavailable" ||
            _content == "@AppCopilotSummaryControl:LanguageNotSupport")
        {
            copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::ProductRisksTopicName, _content);
            copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::CategoryRisksTopicName, _content);
            copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::CatalogRisksTopicName, _content);

            return;
        }

        // Parse CAPI response since the risks summaries were stored in JSON format.
        RetailMerchandisingConfigurationRisksSummariesContract risksSummaries = FormJsonSerializer::deserializeObject(
            classNum(RetailMerchandisingConfigurationRisksSummariesContract),
            _content);

        copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::ProductRisksTopicName, risksSummaries.parmProductRisksSummary());
        copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::CategoryRisksTopicName, risksSummaries.parmCategoryRisksSummary());
        copilotSummaryControlBuilder.updateTopicContent(RetailMerchandisingCopilotSummaryConstants::CatalogRisksTopicName, risksSummaries.parmCatalogRisksSummary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisplayCopilotSummaryContent</Name>
				<Source><![CDATA[
    private boolean canDisplayCopilotSummaryContent()
    {
        return copilotSummaryControlBuilder.isTopicContentSet(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewTopicName)
            && copilotSummaryControlBuilder.isTopicContentSet(RetailMerchandisingCopilotSummaryConstants::ProductRisksTopicName)
            && copilotSummaryControlBuilder.isTopicContentSet(RetailMerchandisingCopilotSummaryConstants::CategoryRisksTopicName)
            && copilotSummaryControlBuilder.isTopicContentSet(RetailMerchandisingCopilotSummaryConstants::CatalogRisksTopicName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>