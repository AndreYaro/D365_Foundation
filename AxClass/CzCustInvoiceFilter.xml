<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustInvoiceFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CzCustInvoiceFilter extends CzCustVendTransOpenFilter
{
    CustInvoiceTable custInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findFilterStr</Name>
				<Source><![CDATA[
        protected void findFilterStr()
    {
        CustTrans                       custTrans;
        CustTransOpen                   custTransOpen;
        CzCustAdvanceInvoiceLink        custAdvanceInvoiceLink;
        CzCustAdvanceInvoiceTable       custAdvanceInvoiceTable;

        // Prepayments linked to advanced invoice
        while select crosscompany custAdvanceInvoiceLink
            where custAdvanceInvoiceLink.InvoiceCompany == curext()
        {
            select firstonly custAdvanceInvoiceTable
                where custAdvanceInvoiceTable.RecId               == custAdvanceInvoiceLink.AdvanceInvoiceRecId
                   && custAdvanceInvoiceTable.FreeInvoiceRefRecId == custInvoiceTable.RecId;

            if (custAdvanceInvoiceTable)
            {
                changecompany(custAdvanceInvoiceLink.PaymentCompany)
                {
                    custTransOpen = null;
                    custTrans = null;
                    while select custTransOpen
                        exists join custTrans
                        where custTransOpen.RefRecId  == custTrans.RecId
                           && custTrans.Voucher       == custAdvanceInvoiceLink.Voucher
                           && custTrans.TransDate     == custAdvanceInvoiceLink.TransDate
                    {
                        filterStr += (filterStr ? ',' : '') + int642str(custTransOpen.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTable</Name>
				<Source><![CDATA[
        private CustInvoiceTable parmCustInvoiceTable(CustInvoiceTable _custInvoiceTable = custInvoiceTable)
    {
    ;
        custInvoiceTable = _custInvoiceTable;
        custVendAccount  = custInvoiceTable.InvoiceAccount;
        skipPrompt       = true;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object calledFrom = null)
    {
        if (!custInvoiceTable)
            return checkFailed("@GLS111743");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static CzCustInvoiceFilter construct()
    {
        return new CzCustInvoiceFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@GLS111741";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
        public static CzCustInvoiceFilter newFromCommon(Common _record)
    {
        CzCustInvoiceFilter custInvoiceFilter = CzCustInvoiceFilter::construct();
    ;
        if (_record.TableId == tablenum(CustInvoiceTable))
        {
            custInvoiceFilter.parmCustInvoiceTable(_record);
        }

        return custInvoiceFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>