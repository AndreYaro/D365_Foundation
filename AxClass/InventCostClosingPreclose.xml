<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingPreclose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostClosingPreclose extends InventCostClosing implements BatchRetryable
{
    Integer                 dummy;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        dummy
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closingDialogLabel</Name>
				<Source><![CDATA[
    protected str closingDialogLabel()
    {
        return "@SYP4881269";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostListRecordSet</Name>
				<Source><![CDATA[
    protected void createInventCostListRecordSet()
    {
        InventCostList              inventCostList;
        InventTable                 inventTable;
        InventTransOriginTransfer   inventTransOriginTransfer;
        InventModelGroupItem        inventModelGroupItem;
        InventModelGroup            inventModelGroup;
        Voucher                     voucherNumber = inventClosing.Voucher;

        insert_recordset inventCostList
            (ItemId, Voucher)
            select  ItemId, voucherNumber
                from inventTable
                exists join inventTransOriginTransfer
                where inventTransOriginTransfer.Product == inventTable.product
                   && inventTransOriginTransfer.NonFinancialTransfInventClosingRecId == 0
                exists join inventModelGroupItem
                exists join inventModelGroup
                where   inventTable.DataAreaId == inventModelGroupItem.ItemDataAreaId &&
                        inventTable.ItemId == inventModelGroupItem.ItemId &&
                        inventModelGroupItem.ModelGroupDataAreaId == inventModelGroup.DataAreaId &&
                        inventModelGroupItem.ModelGroupId == inventModelGroup.ModelGroupId &&
                        (   inventModelGroup.InventModel >= InventModel::FIFO &&
                            inventModelGroup.InventModel <= InventModel::AverageCostDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when no <c>SysLastValue</c> record is found by using the <c>SysLastValue.GetLast</c> method.
    /// </summary>
    public void initParmDefault()
    {
        specification       = InventAdjustmentSpec::Total;
        updateLedger        = NoYes::No;
        prodJournal         = NoYes::No;
        cancelRecalculation = NoYes::No;
        runRecalculation    = NoYes::No;

        maxIterations       = 100;
        minTransferValue    = 1;
        adjustmentType      = InventAdjustmentType::PreClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProdWIPCalculation_RU</Name>
				<Source><![CDATA[
    protected void runProdWIPCalculation_RU()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAdvanced</Name>
				<Source><![CDATA[
    protected boolean showAdvanced()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCancelRecalculation</Name>
				<Source><![CDATA[
    protected boolean showCancelRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRunRecalculation</Name>
				<Source><![CDATA[
    protected boolean showRunRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSpecification</Name>
				<Source><![CDATA[
    protected boolean showSpecification()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateHelp</Name>
				<Source><![CDATA[
    protected str transDateHelp()
    {
        return "@SYP4881261";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateLabel</Name>
				<Source><![CDATA[
    protected str transDateLabel()
    {
        return "@SYP4881270";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventCostClosingPreclose construct()
    {
        return new InventCostClosingPreclose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    static ClassDescription description()
    {
        return "@SYP4881271";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventCostClosingPreclose preClosing = InventCostClosingPreclose::newParameters();

        if (! preClosing.prompt())
        {
            return;
        }

        preClosing.runOperation();

        if (args && args.caller() && args.dataset() == tableNum(InventClosing))
        {
            InventClosing inventClosing = args.record();

            if (FormDataUtil::getFormDataSource(inventClosing))
            {
                FormDataSource fd = FormDataUtil::getFormDataSource(inventClosing);
                fd.research(true);
                InventClosingLog::showLog(inventClosing.TransDate,inventClosing.Voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventCostClosingPreclose</c> class with the specified parameters.
    /// </summary>
    /// <param name="_dateClose">
    /// The date of the inventory closing; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostClosingPreclose</c> class.
    /// </returns>
    public static InventCostClosingPreclose newParameters(
        TransDate              _dateClose       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        InventCostClosingPreclose preClosing = InventCostClosingPreclose::construct();

        preClosing.getLast();
        preClosing.parmAdjustmentType(InventAdjustmentType::PreClose);
        preClosing.parmTransDate(_dateClose);
        preClosing.initTransDate(false);

        return preClosing;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
