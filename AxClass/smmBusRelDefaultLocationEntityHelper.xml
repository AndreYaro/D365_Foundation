<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmBusRelDefaultLocationEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmBusRelDefaultLocationEntityHelper</c> class contains helper methods in handling default locations.
/// </summary>
internal class smmBusRelDefaultLocationEntityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preInsertUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coordinates saving between party and address entity datasources for smmBusRel default address roles.
    /// </summary>
    /// <param name = "_entityCtx"><c>DataEntityRuntimeContext</c> for the data entity in which the operation should be performed.</param>
    /// <param name = "_dataSourceCtxParty"><c>DataEntityDataSourceRuntimeContext</c> for the <c>DirPartyBaseEntity</c> datasource.</param>
    /// <param name = "_addressDataSourceName"><c>LogisticsPostalAddressBaseEntity</c> data source.</param>
    /// <param name = "_resolveDuplicateAddressAsCorrection">An enum value indicating whether to resolve duplicate addresses as a correction on insert.</param>
    public void preInsertUpdate(
        DataEntityRuntimeContext           _entityCtx,
        DataEntityDataSourceRuntimeContext _dataSourceCtxParty,
        DataSourceName                     _addressDataSourceName,
        NoYes                              _resolveDuplicateAddressAsCorrection = NoYes::No)
    {
        if (_dataSourceCtxParty.getBuffer().TableId == tableNum(DirPartyBaseEntity))
        {
            LogisticsLocationRecId locationRecId = LogisticsPostalAddressBaseEntity::saveAddress(_entityCtx, _addressDataSourceName, _resolveDuplicateAddressAsCorrection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coordinates saving between party and address entity datasources for smmBusRel default address roles.
    /// </summary>
    /// <param name = "_entityCtx"><c>DataEntityRuntimeContext</c> for the data entity in which the operation should be performed.</param>
    /// <param name = "_dataSourceCtxParty"><c>DataEntityDataSourceRuntimeContext</c> for the <c>DirPartyBaseEntity</c> datasource.</param>
    /// <param name = "_addressDataSourceName"><c>LogisticsPostalAddressBaseEntity</c> data source.</param>
    /// <param name = "_roleType">Default <c>LogisticsLocationRoleType</c> of the address for the customer.</param>
    /// <param name = "_importedLocationId"><c>LogisticsLocationId</c> being imported from the source.</param>
    /// <param name = "_isLocationOwner">A boolean indicating that the party is the owner of the specified address location.</param>
    public void postInsertUpdate(
        DataEntityRuntimeContext           _entityCtx,
        DataEntityDataSourceRuntimeContext _dataSourceCtxParty,
        DataSourceName                     _addressDataSourceName,
        LogisticsLocationRoleType          _roleType,
        LogisticsLocationId                _importedLocationId,
        boolean                            _isLocationOwner = true)
    {
        if (_dataSourceCtxParty.getBuffer().TableId == tableNum(DirPartyBaseEntity))
        {
            DataEntityDataSourceRuntimeContext addressContext = _entityCtx.getRuntimeContextByName(_addressDataSourceName);
            LogisticsPostalAddressBaseEntity postalAddressEntity = addressContext.getBuffer();
            var locationRecId = postalAddressEntity.LocationRecId;

            if (!locationRecId)
            {
                if (_importedLocationId)
                {
                    LogisticsLocation location = LogisticsLocation::findByLocationId(_importedLocationId);
                    locationRecId = Location.RecId;
                }
            }

            if (locationRecId)
            {
                DirPartyBaseEntityMap partyBaseEntityMap = this.getMap(_dataSourceCtxParty);
                DirPartyLocation dpl = DirPartyLocation::findByPartyLocation(partyBaseEntityMap.RecId, locationRecId);
                if (!dpl)
                {
                    dpl = DirPartyLocation::create(partyBaseEntityMap.RecId, locationRecId, true, false, _isLocationOwner);
                }
                
                this.addRole(partyBaseEntityMap, dpl.RecId, _roleType);
                
                this.syncDataSource(_entityCtx, addressContext, locationRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMap</Name>
				<Source><![CDATA[
    private DirPartyBaseEntityMap getMap(DataEntityDataSourceRuntimeContext _dataSourceContext)
    {
        return _dataSourceContext.getBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRole</Name>
				<Source><![CDATA[
    private void addRole(DirPartyBaseEntityMap _partyBaseEntityMap, DirPartyLocationRecId _partyLocationRecId, LogisticsLocationRoleType _roleType)
    {
        container addressRoleList = [LogisticsLocationRole::findBytype(_roleType).RecId];
        DirPartyLocationRole::createPartyLocationRoles(_partyLocationRecId, addressRoleList, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDataSource</Name>
				<Source><![CDATA[
    private void syncDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _addressContext, LogisticsLocationRecId _addressLocation)
    {
        LogisticsPostalAddressBaseEntity addressEntity;

        select firstonly addressEntity where addressEntity.LocationRecId == _addressLocation;
            _entityCtx.getEntityRecord().fromViewDataSource(_addressContext.id(), addressEntity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>