<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCConfigurationLoader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for loading the values of a configuration.
/// </summary>
public class pcConfigurationLoader
{
    Map subcomponentInstanceToParentInstance;
    Map componentInstanceToSolverName;
    Map componentInstanceToXPath;

    List attributeXPathsAndValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a value to the collection of loaded values.
    /// </summary>
    /// <param name="_componentInstance">
    /// The owning component instance.
    /// </param>
    /// <param name="_solverName">
    /// The solver name of the owning attribute.
    /// </param>
    /// <param name="_solverValue">
    /// The solver value.
    /// </param>
    protected void addValue(PCComponentInstance _componentInstance, PCSolverName _solverName, str _solverValue)
    {
        str componentXPath = this.getComponentXPath(_componentInstance.RecId);
        str attributeXPath;

        if (componentXPath != '')
        {
            attributeXPath = componentXPath + '/' + _solverName;
        }
        else
        {
            attributeXPath = _solverName;
        }

        attributeXPathsAndValues.addEnd([attributeXPath, _solverValue]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentXPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the XPath for the component.
    /// </summary>
    /// <param name="_componentInstance">
    /// The component instance.
    /// </param>
    /// <returns>
    /// An XPath.
    /// </returns>
    protected str getComponentXPath(RecId _componentInstance)
    {
        str xPath;
        str parentXPath;

        if (subcomponentInstanceToParentInstance.exists(_componentInstance))
        {
            if (componentInstanceToXPath.exists(_componentInstance))// check cache for results
            {
                return componentInstanceToXPath.lookup(_componentInstance);
            }

            parentXPath = this.getComponentXPath(subcomponentInstanceToParentInstance.lookup(_componentInstance));

            if (componentInstanceToSolverName.exists(_componentInstance))// the root has no entry
            {
                xPath = componentInstanceToSolverName.lookup(_componentInstance);
            }

            if (parentXPath != '')
            {
                xPath = parentXPath + '/' + xPath;
            }

            componentInstanceToXPath.insert(_componentInstance, xPath);
        }

        return xPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values of the configuration to be loaded.
    /// </summary>
    /// <returns>
    /// A collection of configuration values.
    /// </returns>
    public str getValues()
    {
        str attributeXPath;
        str attributeValue;

        ListEnumerator le = attributeXPathsAndValues.getEnumerator();

        PCXmlWriter xmlWriter = PCXmlWriter::construct();

        #define.Assignments('Assignments')
        #define.Assignment('Assignment')
        #define.AssignmentValue('value')
        #define.AssignmentXPath('xPath')

        xmlWriter.writeStartElement(#Assignments);

        while (le.moveNext())
        {
            [attributeXPath, attributeValue] = le.current();

            xmlWriter.writeStartElement(#Assignment);
            xmlWriter.writeAttributeString(#AssignmentXPath, attributeXPath);
            xmlWriter.writeAttributeString(#AssignmentValue, attributeValue);
            xmlWriter.writeEndElement();
        }
        xmlWriter.writeEndElement();

        return xmlWriter.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the configuration values.
    /// </summary>
    /// <param name="_productConfiguration">
    /// The product configuration.
    /// </param>
    /// <returns>
    /// A collection of configuration values.
    /// </returns>
    public ListEnumerator load(PCProductConfiguration _productConfiguration)
    {
        this.loadParentChildRelations(_productConfiguration);

        this.loadValues(_productConfiguration);

        return attributeXPathsAndValues.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadParentChildRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the parent child relations of the configuration.
    /// </summary>
    /// <param name="_productConfiguration">
    /// The product configuration.
    /// </param>
    protected void loadParentChildRelations(PCProductConfiguration _productConfiguration)
    {
        PCSubComponent                  subcomponent;
        PCComponentInstance             componentInstance;
        PCComponentInstanceSubComponent subcomponentInstance;

        while select SolverName from subcomponent
            join    subcomponentInstance
            where   subcomponentInstance.SubComponent == subcomponent.RecId
            exists join componentInstance
            where   componentInstance.RecId                 == subcomponentInstance.ParentComponentInstance
            &&      componentInstance.ProductConfiguration  == _productConfiguration.RecId
        {
            subcomponentInstanceToParentInstance.insert(subcomponentInstance.ChildComponentInstance, subcomponentInstance.ParentComponentInstance);
            componentInstanceToSolverName.insert(subcomponentInstance.ChildComponentInstance, subcomponent.SolverName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the configuration values into memory.
    /// </summary>
    /// <param name="_productConfiguration">
    /// The product configuration.
    /// </param>
    protected void loadValues(PCProductConfiguration _productConfiguration)
    {
        EcoResValue                 value;
        EcoResAttributeValue        attributeValue;
        EcoResAttribute             attribute;
        PCSolverVariable            solverVariable;
        PCComponentInstance         componentInstance;
        PCComponentInstanceValue    componentInstanceValue;

        while select value
            join TableId from attributeValue
            where attributeValue.Value == value.RecId
            join TableId from attribute
            where attribute.RecId == attributeValue.Attribute
            join Name from solverVariable
            where solverVariable.Attribute == attribute.RecId
            join TableId from componentInstanceValue
            where   componentInstanceValue.RecId == attributeValue.InstanceValue
            join componentInstance
            where   componentInstance.RecId                 == componentInstanceValue.ComponentInstance
            &&      componentInstance.ProductConfiguration  == _productConfiguration.RecId
        {
            this.addValue(componentInstance, solverVariable.Name, value.pcGetStringValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        subcomponentInstanceToParentInstance    = new Map(Types::Int64, Types::Int64);
        componentInstanceToSolverName           = new Map(Types::Int64, Types::String);
        componentInstanceToXPath                = new Map(Types::Int64, Types::String);
        attributeXPathsAndValues                = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCConfigurationLoader construct()
    {
        return new PCConfigurationLoader();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>