<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyMarkup_CustInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyMarkup_CustInvoiceJour extends InterCompanyMarkup
{
    CustInvoiceJour custInvoiceJour;
    PurchTable      purchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    void copyFrom(boolean _insert = false)
    {
        MarkupTrans     markupTransRef;
        boolean         isICPOVirtualCharge;

        changecompany(markupTrans.company())
        {
            custInvoiceJour = CustInvoiceJour::findRecId(markupTrans.TransRecId);

            if (custInvoiceJour.InterCompanyCompanyId)
            {
                setprefix(strfmt("@SYS93821", TradeInterCompany::curCompanyName()));

                changecompany(custInvoiceJour.InterCompanyCompanyId)
                {
                    setprefix(strfmt("@SYS93821", TradeInterCompany::curCompanyName()));

                    ttsBegin;
                    markupTransRef = this.setMarkupTransSource();

                    if (_insert
                        && markupTransRef
                        && markupTransRef.TransTableId == tablenum(PurchTable))
                    {
                        purchTable = PurchTable::findRecId(markupTransRef.TransRecId);
                    }
                    else
                    {
                        purchTable = PurchTable::find(custInvoiceJour.InterCompanyPurchId);
                    }

                    if (purchTable.RecId)
                    {
                        if (markupTransRef)
                        {
                            // If the original charge on the ICPO is not a virtual charge, we should update the charge
                            // instead of inserting a new one since the only field that changes is IntercompanyInvoiceId.
                            isICPOVirtualCharge = markupTransRef.Keep == NoYes::Yes;
                            if (_insert && isICPOVirtualCharge)
                            {
                                markupTransRef = null;
                            }
                        }

                        this.parmMarkupAmount(markupTrans.signedValue(markupTrans.CalculatedAmount));
                        markupTransRef = this.writeMarkupTrans(markupTransRef,purchTable,true,markupTrans,custInvoiceJour.InvoiceId);
                    }

                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap fromInterCompanyTradingValueMap()
    {
        return custInvoiceJour.interCompanyTradingValueMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupUseValue</Name>
				<Source><![CDATA[
    boolean markupUseValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap toInterCompanyTradingValueMap()
    {
        return purchTable.interCompanyTradingValueMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    protected boolean isInclTax()
    {
        boolean ret = false;
        ret = custInvoiceJour.InclTax == NoYes::Yes;
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>