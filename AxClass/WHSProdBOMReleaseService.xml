<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProdBOMReleaseService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the service class that builds a container of produciton orders and releases them to the warehouse.
/// </summary>
public class WHSProdBOMReleaseService extends SysOperationServiceBase
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseProductionOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calls the sandbox helper to release production orders to the warehouse.
    /// </summary>
    /// <param name = "_contract">Holds the parameters used to determine which production orders and lines to release to the warehouse.</param>
    public void releaseProductionOrders(WHSProdBOMReleaseContract _contract)
    {
        container inputParameters = [this.finalProductionOrderReleaseQuery(_contract.parmQuery(), _contract.parmRereleaseProdOrder()).pack()];

        SysOperationSandbox::callStaticMethod(classIdGet(this),
                                                staticMethodStr(WHSProdBOMReleaseService, releaseProductionOrdersSandboxHelper),
                                                inputParameters,
                                                "@WAX:Dialog_ReleaseProdOrder_Label");
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductionOrdersSandboxHelper</Name>
				<Source><![CDATA[
    ///// <summary>
    /// This method iterates through the query to release production orders to the warehouse.
    /// </summary>
    /// <param name = "_inputParameters">Holds the parameters used to determine which production orders and lines to release to the warehouse.</param>
    public static void releaseProductionOrdersSandboxHelper(container _inputParameters)
    {
        container                        packedReleaseQuery = conPeek(_inputParameters, 1);
        Query                            releaseQuery       = new Query(packedReleaseQuery);
        WHSProdBOMReleaseQueryEnumerator enumerator         = WHSProdBOMReleaseQueryEnumerator::newFromQuery(releaseQuery);

        while (enumerator.nextProdOrder())
        {            
            ProdTable   prodTable   = enumerator.currentProdTable();
            Query       prodIdQuery = new Query(packedReleaseQuery);
            prodIdQuery.dataSourceTable(tableNum(ProdTable)).addRange(fieldNum(ProdTable, ProdId)).value(prodTable.ProdId);

            WHSProdBOMReleaseQueryEnumerator prodIdEnumerator = WHSProdBOMReleaseQueryEnumerator::newFromQuery(prodIdQuery);
            prodIdEnumerator.parmProdOrderLoopProdId(prodTable.ProdId);

            ProdWHSRelease::newFromEnumerator(prodIdEnumerator).whsReleaseSingleOrder(prodTable, false, true);
        }

        // Signal that the operation completed gracefully
        info("@SYS9265");
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalProductionOrderReleaseQuery</Name>
				<Source><![CDATA[
    private Query finalProductionOrderReleaseQuery(Query _query, NoYes _rereleaseProdOrder)
    {
        Query                   query       = _query;
        QueryBuildDataSource    dsProdBOM   = query.dataSourceTable(tableNum(ProdBOM));

        if (_rereleaseProdOrder)
        {
            QueryBuildDataSource dsInventTransOrigin = dsProdBOM.addDataSource(tableNum(InventTransOrigin));
            dsInventTransOrigin.joinMode(JoinMode::ExistsJoin);
            dsInventTransOrigin.addLink(fieldNum(ProdBOM, InventTransId), fieldNum(InventTransOrigin, InventTransId));
            
            QueryBuildDataSource dsInventTrans = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
            dsInventTrans.joinMode(JoinMode::ExistsJoin);
            dsInventTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));
            dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt('>=%1', enum2int(StatusIssue::ReservPhysical)));
            
            QueryBuildDataSource dsInventDim = dsInventTrans.addDataSource(tableNum(InventDim));
            dsInventDim.joinMode(JoinMode::ExistsJoin);
            dsInventDim.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));
            dsInventDim.addRange(fieldNum(InventDim, WMSLocationId)).value(queryValue(''));
        }
        else
        {
            QueryBuildDataSource dsProdBOMsToRelease = dsProdBOM.addDataSource(tableNum(WHSProdBOMsToReleaseV2));
            dsProdBOMsToRelease.joinMode(JoinMode::ExistsJoin);
            dsProdBOMsToRelease.addLink(fieldNum(ProdBOM, InventTransId), fieldNum(WHSProdBOMsToReleaseV2, InventTransId));
        }        

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>