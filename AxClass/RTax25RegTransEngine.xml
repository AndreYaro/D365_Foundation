<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegTransEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.BufferSize(26)
#define.dateColumnLength(70)
#define.stringColumnLength(120)
#define.intColumnLength(70)
#define.int64ColumnLength(90)
#define.realColumnLength(90)
#define.anyTypeColumnLength(100)
#define.lineNumberColumnLength(65)
#define.intStringLength(10)
#define.int64StringLength(16)
#define.realStringLength(16)
#define.listControlName("Fields")
#define.SpaceConst(" ")
class rTax25RegTransEngine
{
    FormRun                    formRun;
    Form                       form;
    RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
    RTax25RegType              rTax25RegType;
    RTax25RegisterType         rTax25RegisterType;
    container                  regFieldType,
                               regFieldLabel,
                               regFieldDescription,
                               regFieldBaseType;
    FormListControl            listControl;
    NotesLine                  columnHelpText[];
    FormDataSource             formDataSource;
    QueryRun                   queryRun;
    TmpSysQuery                tmpSysQuery;
    RTax25RegisterTrans        cursor;
    int                        currentIdx;
    Set                        hidedFields;
    boolean                    filtered;
    RTax25RegCalcController    rTax25RegCalcController;
    RTax25BufferSize           bufferSize;

#MACROLIB.RegisterReports_RU
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addLine(RTax25RegisterTrans _rTax25RegisterTrans,
                        TmpSysQuery         _tmpSysQuery)
    {
        RTax25RegisterTrans rTax25RegisterTrans;
        ;
        ttsbegin;
        if (RTax25RegisterTrans::exist(_rTax25RegisterTrans.JournalNum,
                                       _rTax25RegisterTrans.RegisterId,
                                       _rTax25RegisterTrans.PeriodType,
                                       _rTax25RegisterTrans.PeriodNum,
                                       _rTax25RegisterTrans.FiscalYear,
                                       _rTax25RegisterTrans.LineNumber))
        {
            if (Box::yesNo("@GLS104004",DialogButton::Yes,"@GLS104005","@GLS104006") == DialogButton::No)
            {
                ttsabort;
                return;
            }
            this.renumbering(_rTax25RegisterTrans.LineNumber);
        }
        rTax25RegisterTrans.clear();
        buf2Buf(_rTax25RegisterTrans, rTax25RegisterTrans);
        rTax25RegisterTrans.RegisterValues = this.sysQuery2con(_tmpSysQuery);
        rTax25RegisterTrans.ManualInput    = NoYes::Yes;
        rTax25RegisterTrans.insert();
        this.updateTotals(rTax25RegisterTrans);
        ttscommit;

        this.updateListControl(rTax25RegisterTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifiedParentRegisters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canModifiedParentRegisters()
    {
        return rTax25RegCalcController.canModifiedParentRegisters(rTax25RegisterJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMatchCondition</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkMatchCondition(RTax25RegisterTrans _rTax25RegisterTrans)
    {
        ;
        if (filtered && _rTax25RegisterTrans.BlockType != ReportBlockType::Body)
            return false;
        while select tmpSysQuery where tmpSysQuery.RangeValue != ""
        {
            if (! inRange(tmpSysQuery.RangeValue,conPeek(_rTax25RegisterTrans.RegisterValues,tmpSysQuery.Field_Id)))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteFilter()
    {
        QueryRun             qR;
        QueryBuildDataSource qBd;

        qR = formDataSource.queryRun();
        qBd = qR.query().dataSourceTable(tableNum(RTax25RegisterTrans));
        qBd.clearRanges();
        tmpSysQuery.setTmpData(this.tmpSysQueryInit(false));
        listControl.deleteAll();
        filtered = false;
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMarkedLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteMarkedLine()
    {
        int                 idx;
        FormListItem        formListItem;
        RTax25RegisterTrans rTax25RegisterTrans;
        ;
        if ( Box::yesNo("@GLS103899",DialogButton::No,"@SYS866") == DialogButton::Yes)
        {
            idx = listControl.getNextItem(FormListNext::Selected );
            while (idx != -1)
            {
                formListItem = listControl.getItem(idx);
                formDataSource.positionToRecordByValue(fieldNum(RTax25RegisterTrans,RecId),formListItem.data());
                rTax25RegisterTrans = formDataSource.cursor().data();
                if (rTax25RegisterTrans.BlockType == ReportBlockType::Body)
                {
                    ttsbegin;
                    this.deleteRegisterLine(rTax25RegisterTrans);
                    formDataSource.delete();
                    this.deleteTotals(rTax25RegisterTrans.LineNumber);
                    this.updateTotals(null,rTax25RegisterTrans);
                    ttscommit;
                }
                idx = listControl.getNextItem( FormListNext::Selected, idx );
            }
            this.updateListControl(formDataSource.cursor().data());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRegisterLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteRegisterLine(RTax25RegisterTrans _rTax25RegisterTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean deleteTotals(RTax25RegisterLineNumber _lineNumber)
    {
        boolean                  ret = false;
        RTax25RegisterTrans      rTax25RegisterTrans,
                                 rTax25RegisterTransHeader;
        RTax25RegisterLineNumber lineNumberHeader;
        select firstonly forupdate rTax25RegisterTrans order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        &&
                  rTax25RegisterTrans.LineNumber          <  _lineNumber;

        if (! rTax25RegisterTrans.RecId)
        {
            return ret;
        }
        rTax25RegisterTransHeader =  rTax25RegisterTrans.data();
        select firstonly forupdate rTax25RegisterTrans
            order by LineNumber
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.LineNumber          >  rTax25RegisterTransHeader.LineNumber;
        if (rTax25RegisterTrans.BlockType == ReportBlockType::Footer)
        {
            lineNumberHeader = rTax25RegisterTransHeader.LineNumber;
            rTax25RegisterTransHeader.doDelete();
            rTax25RegisterTrans.doDelete();
            ret = true;
            this.deleteTotals(lineNumberHeader);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFormUpdateDesign</Name>
				<Source><![CDATA[
    #define.buttonOk("CommandOk")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void editFormUpdateDesign(FormRun _editForm)
    {
        FormDataSource      editDataSource;
        RTax25RegisterTrans rTax25RegisterTrans;
        Object              profitObj;
        FormControl         formControl;

        editDataSource =  _editForm.dataSource(tableStr(RTax25RegisterTrans));
        rTax25RegisterTrans = editDataSource.cursor();
        editDataSource.allowEdit(rTax25RegisterTrans.BlockType == ReportBlockType::Body);
        profitObj = editDataSource.object(fieldNum(RTax25RegisterTrans, rTax25ProfitTable));
        profitObj.allowEdit(true);
        editDataSource =  _editForm.dataSource(tableStr(TmpSysQuery));
        editDataSource.allowEdit(rTax25RegisterTrans.BlockType == ReportBlockType::Body);
        formControl = _editForm.design().controlName(#buttonOk);
        formControl.enabled(rTax25RegisterTrans.BlockType == ReportBlockType::Body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean fetchNextRows()
    {
        int                 i;
        RTax25RegisterTrans rTax25RegisterTrans;
        boolean             findCursor;
        int                 idx;
        ;
        while (queryRun.next())
        {
            rTax25RegisterTrans = queryRun.get(tableNum(RTax25RegisterTrans));
            if (this.checkMatchCondition(rTax25RegisterTrans))
            {
                idx = this.insertRowIntoList(rTax25RegisterTrans);
                if (cursor.RecId && rTax25RegisterTrans.RecId == cursor.RecId)
                {
                    currentIdx = idx;
                    findCursor = true;
                    select cursor where cursor.RecId == 0;
                }
                i++;
                if (i >= bufferSize)
                {
                    if (findCursor || ! cursor.RecId )
                    {
                        break;
                    }
                    else
                    {
                        i = 0;
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filter</Name>
				<Source><![CDATA[
    #define.DataSourceNum(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void filter()
    {
        Args                 args = new Args();
        Object               queryForm;
        FormDataSource       rangeDataSource;
        QueryRun             qR;
        QueryBuildDataSource qBd;
        QueryBuildRange      qBr;
        ;
        args.name(formStr(RTax25RegisterQueryForm));
        qR = formDataSource.queryRun();
        qBd = qR.query().dataSourceTable(tableNum(RTax25RegisterTrans));
        qBr = qBd.findRange(fieldNum(RTax25RegisterTrans,JournalNum));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans,JournalNum));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);
        qBr = qBd.findRange(fieldNum(RTax25RegisterTrans,PeriodNum));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans,PeriodNum));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);
           qBr = qBd.findRange(fieldNum(RTax25RegisterTrans,PeriodType));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans,PeriodType));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);
        qBr = qBd.findRange(fieldNum(RTax25RegisterTrans,FiscalYear));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans,FiscalYear));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);
        qBr = qBd.findRange(fieldNum(RTax25RegisterTrans,RegisterId));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans,RegisterId));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);
        qBr = qBd.findRange(fieldNum(RTax25RegisterTrans, BlockFieldNum));
        if (! qBr)
        {
            qBr = qBd.addRange(fieldNum(RTax25RegisterTrans, BlockFieldNum));
        }
        qBr.value("");
        qBr.status(RangeStatus::Hidden);

        args.caller(qR);

        queryForm = classfactory.formRunClass(args);
        queryForm.init();
        rangeDataSource = queryForm.dataSource(#DataSourceNum);
        queryForm.run();
        queryForm.rTax25RegTransEngine(this);
        select firstonly tmpSysQuery where tmpSysQuery.RecId > 0;
        if (tmpSysQuery.RecId)
        {
            rangeDataSource.cursor().setTmpData(tmpSysQuery);
        }
        else
        {
            rangeDataSource.cursor().setTmpData(this.tmpSysQueryInit(false));
        }
        rangeDataSource.research();

        if (queryForm.closedOk())
        {
            filtered = true;
            listControl.deleteAll();
            tmpSysQuery.setTmpData(rangeDataSource.cursor());
            this.init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filtered</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean filtered(boolean _filtered = filtered)
    {
        filtered = _filtered;
        return filtered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormRun formRun(FormRun _formRun)
    {
        ;
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnHelpText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NotesLine getColumnHelpText(Column _idx)
    {
        return columnHelpText[_idx];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayString</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getDisplayString(ExtendedTypeId _id,
                                anytype        _value,
                                boolean         _edit = false,
                                ReportBlockType _type = ReportBlockType::Body)
    {
        str                     resultString;
        SysDictType_RU          dictType = new SysDictType_RU(_id);

        switch (typeOf(_value))
        {
            case Types::Integer:
                if (_edit)
                {
                    resultString = int2str(_value);
                }
                else
                {
                    resultString = strFmt("@GLS106745",_value);
                    resultString = strRFix(resultString, #intStringLength);
                }
                break;
            case Types::Int64:
                if (_edit)
                {
                    resultString = int642str(_value);
                }
                else
                {
                    resultString = strFmt("@GLS106745",_value);
                    resultString = strRFix(resultString, #int64StringLength);
                }
                break;
            case Types::Real:
                if (_edit)
                {
                    resultString = num2str(_value, -1, dictType.noOfDecimals(), 1, 0);
                }
                else
                {
                    if (_value || dictType.showZero())
                    {
                        resultString = strFmt("@GLS106745", _value);
                    }
                    resultString = strRFix(resultString, #realStringLength);
                }
                break;
            case Types::Date:
                if (_edit)
                {
                    resultString = strFmt("@GLS106745", _value);
                }
                else
                {
                    resultString = date2str(_value, 123, 2, 2, 2, 2, 4, DateFlags::None);
                }
                break;
            case Types::String,
                 Types::RString,
                 Types::VarString:
                if (_edit)
                {
                    resultString = _value;
                }
                else
                {
                    resultString = strLFix(_value, dictType.stringLen());
                }
                break;
            default :
                resultString = strFmt("@GLS106745", _value);
        }
        return resultString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTrans getJournalTrans()
    {
        return rTax25RegisterJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegFieldBaseType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getRegFieldBaseType()
    {
        return regFieldBaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Struct getSectionType(RecId _recId)
    {
        RTax25RegisterTrans     rTax25RegisterTrans;
        Struct                  tmpStruct;
        ;

        rTax25RegisterTrans = RTax25RegisterTrans::findRecId(_recId);

        tmpStruct = new Struct(Types::String, #blockType, Types::String, #lineDescription);

        switch (rTax25RegisterTrans.BlockType)
        {
            case ReportBlockType::Header:
                tmpStruct.value(#blockType, #HeaderLineType);
                tmpStruct.value(#lineDescription, rTax25RegisterTrans.LineDescription);
            break;
            case ReportBlockType::Footer:
                tmpStruct.value(#blockType, #FooterLineType);
                tmpStruct.value(#lineDescription, rTax25RegisterTrans.LineDescription);
            break;
            default:
                tmpStruct.value(#blockType, #BodyLineType);
            break;
        }

        return tmpStruct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean init()
    {
        Query          query;
        FormListItem   item;
        Object         profitObj;

        formRun.design().caption(RTax25RegisterTable::registerName(rTax25RegType.registerId()));
        listControl    = formRun.design().controlName(#listControlName);
        formDataSource = formRun.dataSource(1);
        query          = formDataSource.queryRun().query();
        queryRun       = new QueryRun(query);
        queryRun.reset();
        this.initListView();
        this.fetchNextRows();
        listControl.setFocus();
        formDataSource.research();
        item = listControl.getItem(currentIdx);
        if (item)
        {
            item.stateFocus(true);
            item.stateSelected(true);
            listControl.setItem(item);
        }
        profitObj = formDataSource.object(fieldNum(RTax25RegisterTrans, rTax25ProfitTable));
        profitObj.allowEdit(rTax25RegType.registerType() != RTax25RegisterType::Deferrals);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    #define.ColNum(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initListView()
    {
        FormListColumn  listColumn;
        int             i;
        Types           type;
        int             columnLength;
        ;
        if (listControl.getColumnCount())
        {
            return;
        }
        regFieldType        = rTax25RegType.fieldType();
        regFieldLabel       = rTax25RegType.fieldLabel();
        regFieldDescription = rTax25RegType.fieldDescription();

        listColumn = new FormListColumn("@GLS103859", 0, #lineNumberColumnLength);
        listControl.addColumn(1,listColumn);
        for ( i = 1; i <= conLen(regFieldBaseType); i++)
        {
            if (! hidedFields.in(i))
            {
                type = conPeek(regFieldBaseType,i);
                switch (type)
                {
                    case Types::Date:
                        columnLength = #dateColumnLength;
                        break;
                    case Types::Integer:
                        columnLength = #intColumnLength;
                        break;
                    case Types::Int64:
                        columnLength = #int64ColumnLength;
                        break;
                    case Types::Real:
                        columnLength = #realColumnLength;
                        break;
                    case Types::String,
                         Types::RString,
                         Types::VarString:
                        columnLength = #stringColumnLength;
                        break;
                    default:
                        columnLength = #anyTypeColumnLength;
                }
                listColumn = new FormListColumn(conPeek(regFieldLabel ,i), #ColNum, columnLength);
                listControl.addColumn(listControl.getColumnCount()+1,listColumn);
                columnHelpText[i] = conPeek(regFieldDescription, i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRowIntoList</Name>
				<Source><![CDATA[
    #define.ImageNum1(1)
    #define.ImageNum2(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int insertRowIntoList(RTax25RegisterTrans _rTax25RegisterTrans)
    {
        int          i,
                     columnNumber;
        int          idx;
        FormListItem formListItem;
        ;
        switch (_rTax25RegisterTrans.BlockType)
        {
            case ReportBlockType::Header:
                i = #ImageNum1;
            break;
            case ReportBlockType::Footer:
                i = #ImageNum2;
            break;
            default:
                i = 0;
            break;
        }
        formListItem = new FormListItem(this.getDisplayString(extendedTypeNum(Integer),
                                                              _rTax25RegisterTrans.LineNumber,
                                                              false,
                                                              _rTax25RegisterTrans.BlockType),i);
        formListItem.idx(listControl.getCount() + 1);
        formListItem.data(int642str(_rTax25RegisterTrans.RecId));
        idx = listControl.addItem(formListItem);
        if (_rTax25RegisterTrans.BlockType != ReportBlockType::Header)
        {
            for (i = 1; i <= conLen(regFieldType); i++ )
            {
                if (! hidedFields.in(i))
                {
                    formListItem = new FormListItem(this.getDisplayString(conPeek(regFieldType,i),
                                                    conPeek(_rTax25RegisterTrans.RegisterValues, rTax25RegType.displayField(i)),
                                                    false,
                                                    _rTax25RegisterTrans.BlockType));
                    columnNumber++;
                    formListItem.subItem(columnNumber);
                    formListItem.idx(idx);
                    listControl.setItem(formListItem);
                }
            }
        }
        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormListControl listControl()
    {
        return listControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUp</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookUp(Object _formControl,
                       int    _regFieldNum)
    {
        _formControl.performTypeLookup(conPeek(regFieldType, _regFieldNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValidate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormLookupButton lookupValidate(int _regFieldNum)
    {
        SysDictType  dictType;
        ;
        if (conPeek(regFieldBaseType,_regFieldNum) == Types::Date ||
            conPeek(regFieldBaseType,_regFieldNum) == Types::Enum)
            return FormLookupButton::Always;

        dictType = new SysDictType(conPeek(regFieldType,_regFieldNum));
        return dictType.relationObject() ?
                  FormLookupButton::Always :
                  FormLookupButton::Never;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        ;
        form = new Form(formStr(RTax25RegisterTrans),true);
        rTax25RegisterJournalTrans = _rTax25RegisterJournalTrans;
        rTax25RegisterType  = RTax25RegisterTable::registerId2Type(_rTax25RegisterJournalTrans.RegisterId);
        rTax25RegType       = RTax25RegType::construct(rTax25RegisterType, _rTax25RegisterJournalTrans.AssessedTaxRegisterType, false);
        rTax25RegType.parmUseDisplayOrder(true);
        regFieldType        = rTax25RegType.fieldType();
        regFieldLabel       = rTax25RegType.fieldLabel();
        regFieldDescription = rTax25RegType.fieldDescription();
        regFieldBaseType    = rTax25RegType.fieldBaseType();
        hidedFields         = RTax25RegisterHideSetup::hidedFields(_rTax25RegisterJournalTrans);
        bufferSize = RTax25Parameters::find().BufferSize;
        rTax25RegCalcController = new RTax25RegCalcController();
        rTax25RegCalcController.rTax25RegisterJournalTable(rTax25RegisterJournalTrans.registerJournalTable());
        bufferSize = bufferSize > #bufferSize ? bufferSize : #BufferSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void refreshLine(RTax25RegisterTrans _rTax25RegisterTrans,
                            TmpSysQuery         _tmpSysQuery)
    {
        RTax25RegisterTrans rTax25RegisterTrans;
        int                 idx,
                            i,
                            columnNumber;
        boolean             totalsUpdated;
        ;
        ttsbegin;

        rTax25RegisterTrans = RTax25RegisterTrans::findRecId(formDataSource.cursor().RecId, true);
        rTax25RegisterTrans.RegisterValues    = this.sysQuery2con(_tmpSysQuery);
        rTax25RegisterTrans.Corrected         = NoYes::Yes;
        rTax25RegisterTrans.LineDescription   = _rTax25RegisterTrans.LineDescription;
        rTax25RegisterTrans.rTax25ProfitTable = _rTax25RegisterTrans.rTax25ProfitTable;
        rTax25RegisterTrans.update();
        totalsUpdated = this.updateTotals(rTax25RegisterTrans,_rTax25RegisterTrans);

        ttscommit;
        if (totalsUpdated)
        {
            this.updateListControl(rTax25RegisterTrans);
        }
        else
        {
            idx = listControl.getNextItem(FormListNext::Focused );
            for (i=1 ; i <= conLen(regFieldType) ; i++)
            {
                if (! hidedFields.in(i))
                {
                    columnNumber++;
                    listControl.setText(idx,this.getDisplayString(conPeek(regFieldType,i),
                                                                  conPeek(rTax25RegisterTrans.RegisterValues,i),
                                                                  false,
                                                                  rTax25RegisterTrans.BlockType),columnNumber);
                }
            }
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerFieldValidate</Name>
				<Source><![CDATA[
    #define.DateFormat(123)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean registerFieldValidate(TmpSysQuery _tmpSysQuery)
    {
        Types valueType;
        Range fieldValue;
        ;
        if (! _tmpSysQuery.RangeValue)
        {
             _tmpSysQuery.RangeValue = this.setDefaultFieldValue(_tmpSysQuery.Field_Id);
            return true;
        }
        valueType = conPeek(regFieldBaseType,_tmpSysQuery.Field_Id);
        switch (valueType)
        {
            case Types::Integer:
                fieldValue = this.getDisplayString(conPeek(regFieldType,_tmpSysQuery.Field_Id),
                                                   str2int(strRem(_tmpSysQuery.RangeValue,#SpaceConst)),
                                                   true);
                break;
            case Types::Int64:
                fieldValue = this.getDisplayString(conPeek(regFieldType,_tmpSysQuery.Field_Id),
                                                   str2int64(strRem(_tmpSysQuery.RangeValue,#SpaceConst)),
                                                   true);
                break;
            case Types::Real:
                fieldValue = this.getDisplayString(conPeek(regFieldType,_tmpSysQuery.Field_Id),
                                                   str2num(strRem(_tmpSysQuery.RangeValue,#SpaceConst)),
                                                   true);
                break;
            case Types::Date:
                fieldValue = this.getDisplayString(conPeek(regFieldType,_tmpSysQuery.Field_Id),
                                                   str2Date(_tmpSysQuery.RangeValue,#DateFormat),
                                                   true);
                break;
            default:
                fieldValue = _tmpSysQuery.RangeValue;
        }
        if (! fieldValue)
        {
            return checkFailed(strFmt("@GLS104047",valueType));
        }
        _tmpSysQuery.RangeValue = fieldValue;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumbering</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void renumbering(int _lineNumber)
    {
        RTax25RegisterTrans rTax25RegisterTrans;
        while select forupdate rTax25RegisterTrans
            order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.LineNumber          >= _lineNumber
        {
            rTax25RegisterTrans.LineNumber = rTax25RegisterTrans.LineNumber + 1;
            rTax25RegisterTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25RegType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegType rTax25RegType()
    {
        return rTax25RegType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        Args args = new Args();

        args.object(form);
        args.caller(this);
        args.record(rTax25RegisterJournalTrans);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        this.init();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFieldValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Range setDefaultFieldValue(int _fieldNum)
    {
        Types       valueType;
        Range       ret;
        ;
        valueType = conPeek(regFieldBaseType,_fieldNum);
        switch (valueType)
        {
            case Types::Integer, Types::Int64:
                ret = this.getDisplayString(conPeek(regFieldType,_fieldNum),0,true);
                break;
            case Types::Real:
                ret = this.getDisplayString(conPeek(regFieldType,_fieldNum),0.00,true);
                break;
            default:
                ret = "";
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLevel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showLevel(RTax25RegisterGroupDeprShow _deprShow)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysQuery2con</Name>
				<Source><![CDATA[
    #define.DateFormat(123)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container sysQuery2con(TmpSysQuery _tmpSysQuery)
    {
        container registerValues;
        Types     valueType;

        while select _tmpSysQuery  order by Item
        {
            valueType = conPeek(regFieldBaseType,_tmpSysQuery.Field_Id);
            switch (valueType)
            {
                case Types::Integer:
                    registerValues += str2int(strRem(_tmpSysQuery.RangeValue,#SpaceConst));
                    break;
                case Types::Int64:
                    registerValues += str2int64(strRem(_tmpSysQuery.RangeValue,#SpaceConst));
                    break;
                case Types::Real:
                    registerValues += str2num(strRem(_tmpSysQuery.RangeValue,#SpaceConst));
                    break;
                case Types::Date:
                    registerValues += str2Date(_tmpSysQuery.RangeValue,#DateFormat);
                    break;
                default:
                    registerValues += _tmpSysQuery.RangeValue;
            }
        }
        return registerValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpSysQueryInit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpSysQuery tmpSysQueryInit(boolean _initDefaultValue = true)
    {
        TmpSysQuery sysQuery;
        int         i;

        for (i = 1 ; i <= conLen(regFieldBaseType) ; i++)
        {
            sysQuery.clear();
            sysQuery.Table_Id        = tableNum(RTax25RegisterTrans);
            sysQuery.Field_Id        = i;
            sysQuery.ExtendedFieldId = NoYes::Yes;
            sysQuery.RangeStatus     = (hidedFields.in(i) ? RangeStatus::Hidden : RangeStatus::Open);
            sysQuery.Tablelabel      = conPeek(regFieldLabel,i);
            sysQuery.FieldLabel      = conPeek(regFieldDescription,i);
            sysQuery.Item            = rTax25RegType.displayField(i);
            if (_initDefaultValue)
            {
                sysQuery.RangeValue  = this.setDefaultFieldValue(i);
            }
            sysQuery.doInsert();
        }
        return sysQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateListControl(RTax25RegisterTrans _cursor)
    {
        cursor = _cursor;
        listControl.deleteAll();
        this.init();
        rTax25RegisterJournalTrans.Status = RTax25RegisterStatus::NotCalculated;
        rTax25RegCalcController.updateParentRegisterStatus(rTax25RegisterJournalTrans);
        rTax25RegisterJournalTrans.Status = RTax25RegisterStatus::Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean updateTotals(RTax25RegisterTrans mainTrans,
                                   RTax25RegisterTrans origTrans = null)
    {
        RTax25RegisterTrans rTax25RegisterTrans;
        container           totalFields,
                            registerValues;
        int                 openHeader = 0;
        int                 i;
        boolean             ret = false;
        anytype             anyZero = 0;
        ;
        if (! mainTrans && ! origTrans)
        {
            return ret;
        }
        select firstonly RecId, RegisterValues from rTax25RegisterTrans
            order by LineNumber desc
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        &&
                  rTax25RegisterTrans.LineNumber          <  (mainTrans ? mainTrans.LineNumber : origTrans.LineNumber);
        if (! rTax25RegisterTrans.RecId)
        {
            return ret;
        }
        totalFields = rTax25RegisterTrans.RegisterValues;
        while select forupdate rTax25RegisterTrans
            order by LineNumber
            where rTax25RegisterTrans.JournalNum          == rTax25RegisterJournalTrans.JournalNum          &&
                  rTax25RegisterTrans.RegisterId          == rTax25RegisterJournalTrans.RegisterId          &&
                  rTax25RegisterTrans.PeriodType          == rTax25RegisterJournalTrans.PeriodType          &&
                  rTax25RegisterTrans.PeriodNum           == rTax25RegisterJournalTrans.PeriodNum           &&
                  rTax25RegisterTrans.FiscalYear          == rTax25RegisterJournalTrans.FiscalYear          &&
                 (rTax25RegisterTrans.BlockType           == ReportBlockType::Header                        ||
                  rTax25RegisterTrans.BlockType           == ReportBlockType::Footer)                       &&
                  rTax25RegisterTrans.LineNumber          >  (mainTrans ? mainTrans.LineNumber : origTrans.LineNumber)
        {
            if (rTax25RegisterTrans.BlockType == ReportBlockType::Footer)
            {
                if (! openHeader)
                {
                    for (i = 1; i <= conLen(totalFields) ; i++)
                    {
                        if (conPeek(totalFields,i) &&
                           ( ! origTrans || ! mainTrans ||
                            conPeek(origTrans.RegisterValues,i) != conPeek(mainTrans.RegisterValues,i)))
                        {
                            registerValues += conPeek(rTax25RegisterTrans.RegisterValues,i) -
                                                     (origTrans ? conPeek(origTrans.RegisterValues,i) : anyZero) +
                                                     (mainTrans ? conPeek(mainTrans.RegisterValues,i) : anyZero);
                            ret = true;
                        }
                        else
                        {
                            registerValues += conPeek(rTax25RegisterTrans.RegisterValues,i);
                        }
                    }
                    rTax25RegisterTrans.RegisterValues = registerValues;
                    rTax25RegisterTrans.doUpdate();
                }
                if (openHeader)
                {
                    openHeader --;
                }
            }
            else
            {
                 openHeader++;
            }
            registerValues = conNull();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegTransEngine construct(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        RTax25RegisterType rTax25RegisterType = RTax25RegisterTable::registerId2Type(_rTax25RegisterJournalTrans.RegisterId);
        ;

        if (_rTax25RegisterJournalTrans.RegisterJournalType == RTax25RegisterJournalType::Asset_RU)
            return new RTax25RegTransEngine_Assessed(_rTax25RegisterJournalTrans);

        switch (rTax25RegisterType)
        {
            case RTax25RegisterType::PaymentConsumption,
                 RTax25RegisterType::PaymentReceipt,
                 RTax25RegisterType::NonInventReceipt  :
                return new RTax25RegTransEngine_Ledger(_rTax25RegisterJournalTrans);

            case RTax25RegisterType::DebtDebitInventory:
            case RTax25RegisterType::DebtDebitInventoryRAP:

            case RTax25RegisterType::DebtCreditInventory:

            case RTax25RegisterType::AssetsCost,
                 RTax25RegisterType::AssetsDisposal,
                 RTax25RegisterType::TangibleAssetInfo,
                 RTax25RegisterType::TangibleDepreciation,
                 RTax25RegisterType::TangibleGroupDepreciation,
                 RTax25RegisterType::IntangibleAssetInfo,
                 RTax25RegisterType::IntangibleDepreciation,
                 RTax25RegisterType::IntangibleGroupDepreciation,
                 RTax25RegisterType::AssetDeprBonusRecovery:
                return new RTax25RegTransEngine_Assets(_rTax25RegisterJournalTrans);

            case RTax25RegisterType::TaxRemainGoods:
                return new RTax25RegTransEngine_TaxRemainGoods(_rTax25RegisterJournalTrans);

            default:
                return RTax25RegTransEngine::constructDefault(_rTax25RegisterJournalTrans);
        }
        return new  RTax25RegTransEngine(_rTax25RegisterJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_rTax25RegisterJournalTrans">A register journal transaction table cursor.</param>
    /// <returns>An instance of a class <c>RTax25RegTransEngine</c>.</returns>
    protected static RTax25RegTransEngine constructDefault(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        return new RTax25RegTransEngine(_rTax25RegisterJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                     common = _args.record();
        RTax25RegTransEngine       rTax25RegTransEngine;
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        FormDataSource             formDataSource;
        ;

        if (common.TableId != tableNum(RTax25RegisterJournalTrans))
        {
            return;
        }
        rTax25RegTransEngine = RTax25RegTransEngine::construct(common);
        rTax25RegTransEngine.run();
        formDataSource = FormDataUtil::getFormDataSource(common);
        rTax25RegisterJournalTrans = common.data();
        if (formDataSource)
        {
            formDataSource.research();
            formDataSource.positionToRecord(rTax25RegisterJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRegisterJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegTransEngine newRegisterJournalTrans(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans,
                                                               FormRun                    _formRun)
    {
        RTax25RegTransEngine       rTax25RegTransEngine;
        FormListControl            formListControl;
        ;
        if (_formRun.name() != formStr(RTax25RegisterTrans))
        {
            throw error("@GLS104275");
        }
        rTax25RegTransEngine = RTax25RegTransEngine::construct(_rTax25RegisterJournalTrans);
        rTax25RegTransEngine.formRun(_formRun);
        formListControl    = _formRun.design().controlName(#listControlName);
        formListControl.deleteAll();
        while (formListControl.getColumnCount())
        {
            formListControl.deleteColumn(formListControl.getColumnCount() - 1);
        }
        return rTax25RegTransEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>