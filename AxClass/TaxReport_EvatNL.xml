<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport_EvatNL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReport_EvatNL extends RunBase
{
    private TaxTurnOverTable_NL  taxTurnOverTable_NL;
    private TaxPeriod taxPeriod;
    private FromDate fromDate;
    private ToDate toDate;
    private TaxReportPeriod taxReportPeriod;
    private DialogField dialogTaxPeriod;
    private DialogField dialogFromDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATNum</Name>
				<Source><![CDATA[
    private boolean checkVATNum(VATNum _vatNum)
    {
        setPrefix("@SYS96807");
        return TaxEvatParameters_NL::checkVat(_vatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    private TaxTurnOverTable_NL insertHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        Session     session     = new Session();
        NumberSeq   idSequence  = NumberSeq::newGetNum(TaxEvatParameters_NL::numRefTaxTurnOverId(), true);
        boolean     canInsert   = true;
        int declarationPeriodId = TaxDeclarationPeriod_NL::code(taxPeriod, fromDate);
        var taxEvatParameters_NL = TaxEvatParameters_NL::find();

        taxTurnOverTable_NL.StartDate = fromDate;
        taxTurnOverTable_NL.EndDate = toDate;

        taxTurnOverTable_NL.ContactPersonId       = taxEvatParameters_NL.ContactId;
        taxTurnOverTable_NL.ContactPersonName     = taxEvatParameters_NL.ContactName;
        taxTurnOverTable_NL.ContactPersonType     = taxEvatParameters_NL.ContactPersonType;
        taxTurnOverTable_NL.ContactPersonPhone    = taxEvatParameters_NL.ContactPhone;
        taxTurnOverTable_NL.ContactPersonInitials = taxEvatParameters_NL.ContactInitials;
        taxTurnOverTable_NL.ContactPersonPrefix   = taxEvatParameters_NL.ContactPrefix;
        taxTurnOverTable_NL.MessageID             = strfmt('OB-%1%2%3',
                                                    date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 3, 0, 0, 0, 0, 2,DateFlags::None),
                                                    num2Str0(declarationPeriodId, 2),
                                                    substr(strkeep(time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),0,0),'1234567890'),2,4));
        taxTurnOverTable_NL.TurnOverID = idSequence.num();
        idSequence.used();
        taxTurnOverTable_NL.TaxStatus = TaxEvatStatus::Created;

        if (TaxEvatParameters_NL::find().PartOfFiscalGroup)
        {
            taxTurnOverTable_NL.FiscalGroup = TaxEvatParameters_NL::find().FiscalGroup;
        }
        taxTurnOverTable_NL.VatNum = companyInfo.CoRegNum;
        taxTurnOverTable_NL.CurrencyCode = Ledger::accountingCurrency(companyInfo.RecId);

        taxTurnOverTable_NL.insert();

        return taxTurnOverTable_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTurnOverLine_NL</Name>
				<Source><![CDATA[
    private boolean insertTaxTurnOverLine_NL(TaxReportField _taxReportField, TaxAmount _taxAmount)
    {
        boolean             ret = true;
        TaxTurnOverLine_NL  taxTurnOverLine_NL;
        RefRecId            taxReportCollectionRecId;

        if (taxTurnOverTable_NL && _taxReportField)
        {
            taxReportCollectionRecId = TaxReportCollection::findByReportFieldLayout(_taxReportField, TaxReportLayout::Netherlands).RecId;
            if (taxReportCollectionRecId)
            {
                taxTurnOverLine_NL.TaxTurnOverTable_NL = taxTurnOverTable_NL.RecId;
                taxTurnOverLine_NL.TaxReportCollection = taxReportCollectionRecId;
                taxTurnOverLine_NL.Amount              = _taxAmount;
                taxTurnOverLine_NL.insert();
            }
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLines</Name>
				<Source><![CDATA[
    private void insertLines()
    {
        var tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate, toDate, taxPeriod, TaxRepVersion::Original);
        var amounts = TaxReportAmounts_NL::initFromTmpTaxReportById(tmpTaxReportById);

        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base1a,   amounts.base1a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount1a, amounts.amount1a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base1b,   amounts.base1b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount1b, amounts.amount1b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base1c,   amounts.base1c);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount1c, amounts.amount1c);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base1d,   amounts.base1d);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount1d, amounts.amount1d);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base1e,   amounts.base1e);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base2a,   amounts.base2a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount2a, amounts.amount2a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base3a,   amounts.base3a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base3b,   amounts.base3b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base3c,   amounts.base3c);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base4a,   amounts.base4a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount4a, amounts.amount4a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_base4b,   amounts.base4b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount4b, amounts.amount4b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5a, amounts.amount5a);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5b, amounts.amount5b);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5c, amounts.amount5c);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5d, amounts.amount5d);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5e, amounts.amount5e);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5f, amounts.amount5f);
        this.insertTaxTurnOverLine_NL(TaxReportAmounts_NL::code_amount5g, amounts.amount5g);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;
        taxTurnOverTable_NL = this.insertHeader();
        this.insertLines();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        setPrefix("@SYS96701");

        ret = ret & this.initDates();
        if (!ret)
        {
            return ret;
        }

        if (TaxTurnOverTable_NL::existPendingForPeriod(fromDate, toDate))
        {
            ret = checkFailed("@SYS96809");
        }

        if (!TaxDeclarationPeriod_NL::isValidPeriod(taxPeriod, fromDate))
        {
            ret = checkFailed("@SYS24993");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether declaration can be created.
    /// </summary>
    /// <returns>
    /// true if the declaration can be created; otherwise, false.
    /// </returns>
    public boolean validateCanRun()
    {
        boolean ret = true;

        setPrefix("@SYS96701");

        if (TaxEvatParameters_NL::find().ContactId == '')
        {
            ret = checkFailed("@SYS96835");
        }

        ret = ret & this.checkVATNum(CompanyInfo::find().CoRegNum);
        ret = ret & TaxEvatParameters_NL::checkCurrency(Ledger::accountingCurrency());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDates</Name>
				<Source><![CDATA[
    private boolean initDates()
    {
        taxReportPeriod  = TaxReportPeriod::find(taxPeriod, fromDate);
        if (taxReportPeriod)
        {
            fromDate    = taxReportPeriod.FromDate;
            toDate      = taxReportPeriod.ToDate;
            return true;
        }
        else
        {
            return checkFailed("@SYS24993");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS96701", this);
        dialogTaxPeriod = dialog.addFieldValue(extendedTypeStr(TaxPeriod), taxPeriod);
        dialogFromDate  = dialog.addField(extendedTypeStr(TaxPeriodDate), "@SYS5209", "@SYS12292");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        taxPeriod         = dialogTaxPeriod.value();
        fromDate          = dialogFromDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args _args)
    {
        TaxReport_EvatNL taxReport_EvatNL = new TaxReport_EvatNL();
        var dataSource = FormDataUtil::getFormDataSource(_args.record()) as FormObjectSet;

        if (!taxReport_EvatNL.validateCanRun())
        {
            return;
        }

        if (taxReport_EvatNL.prompt())
        {
            taxReport_EvatNL.runOperation();

            if (dataSource)
            {
                dataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>