<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucherTaxWithhold</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVoucherTaxWithhold extends CustVoucher
{
    TaxWithholdTrans taxWithholdTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTaxWithholdTrans</Name>
				<Source><![CDATA[
        public void setTaxWithholdTrans(TaxWithholdTrans _taxWithholdTrans)
    {
        taxWithholdTrans = _taxWithholdTrans;

        if (BrazilParameters::isEnabled())
        {
            taxWithholdType = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode).TaxWithholdType_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTaxWithhold</Name>
				<Source><![CDATA[
public void settleTaxWithhold(CustTrans _custTrans, TransDate _lastTransDate)
    {
        CustTrans custTransInvoice;
        CustSettlement custSettlement;
        CustTransOpen custTransOpen;
        recId settlementGroup;
        RecId custTransOpenRecId;

        Debug::assert(curext() == _custTrans.company());

        ttsbegin;

        custTransInvoice = CustTrans::find(taxWithholdTrans.CustTransInvoiceId, true);

        // Settlement of the withholding tax paymment
        _custTrans.SettleAmountMST = _custTrans.AmountMST;
        _custTrans.SettleAmountCur = _custTrans.AmountCur;
        _custTrans.SettleAmountReporting = _custTrans.ReportingCurrencyAmount;

        _custTrans.LastSettleDate = _lastTransDate;
        _custTrans.LastSettleVoucher = taxWithholdTrans.VoucherInvoice;
        _custTrans.LastSettleAccountNum = custTransInvoice.AccountNum;
        _custTrans.LastSettleCompany = custTransInvoice.DataAreaId;

        _custTrans.Closed = CustVendTransData::construct(_custTrans).maxSettlementDate(custTransInvoice.TransDate);
        _custTrans.OffsetRecid = taxWithholdTrans.CustTransInvoiceId;
        _custTrans.update();

        custSettlement.initFromCustTrans(_custTrans);
        custSettlement.CanBeReversed = NoYes::Yes;
        custSettlement.SettlementVoucher = _custTrans.Voucher;
        custSettlement.insert();

        // update the settlement group
        settlementGroup = custSettlement.RecId;
        custSettlement.SettlementGroup = settlementGroup;
        custSettlement.update();

        // Delete the CustTransOpen related to the WHT
        delete_from custTransOpen
            where custTransOpen.RefRecId == _custTrans.RecId;

        // Settlement of the invoice for the withholding tax amount

        custTransInvoice.SettleAmountMST -= _custTrans.SettleAmountMST;
        custTransInvoice.SettleAmountCur -= _custTrans.SettleAmountCur;
        custTransInvoice.SettleAmountReporting -= _custTrans.SettleAmountReporting;

        custTransInvoice.LastSettleDate = _lastTransDate;
        custTransInvoice.LastSettleVoucher = _custTrans.Voucher;
        custTransInvoice.LastSettleAccountNum = _custTrans.AccountNum;
        custTransInvoice.LastSettleCompany = _custTrans.DataAreaId;

        custTransInvoice.OffsetRecid = _custTrans.RecId;
        custTransInvoice.update();

        custSettlement.initFromCustTrans(custTransInvoice);
        custSettlement.SettleAmountMST = - _custTrans.SettleAmountMST;
        custSettlement.SettleAmountCur = - _custTrans.SettleAmountCur;
        custSettlement.SettleAmountReporting = - _custTrans.SettleAmountReporting;
        custSettlement.CanBeReversed = NoYes::Yes;
        custSettlement.SettlementGroup = settlementGroup;
        custSettlement.SettlementVoucher = _custTrans.Voucher;
        custSettlement.DueDate = custTransInvoice.DueDate;
        custSettlement.insert();
        if (BrazilParameters::isEnabled())
        {
            custTransOpen = CustTransOpen::find(taxWithholdTrans.CustVendTransOpenRecId_BR, true);
        }
        else
        {
            custTransOpen = CustTransOpen::findRefId(taxWithholdTrans.CustTransInvoiceId, true);
        }
        custTransOpen.AmountMST += _custTrans.SettleAmountMST;
        custTransOpen.AmountCur += _custTrans.SettleAmountCur;
        custTransOpen.ReportingCurrencyAmount += _custTrans.SettleAmountReporting;
        custTransOpen.update();

        // <GBR>
        // When WHT amount is equal to the total amount to settle, the payment amount will be 0, so we need to delete the CustTransOpen related to the invoice payment
        if (BrazilParameters::isEnabled() && (!custTransOpen.AmountCur || !custTransOpen.AmountMST))
        {
            custTransOpenRecId = custTransOpen.RecId;

            delete_from custTransOpen
                where custTransOpen.RecId == custTransOpenRecId;
        }
        // </GBR>

        ttscommit;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>