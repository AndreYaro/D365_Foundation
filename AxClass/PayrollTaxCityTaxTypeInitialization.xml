<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxCityTaxTypeInitialization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for initializing all the City payroll tax type information
/// </summary>
internal static class PayrollTaxCityTaxTypeInitialization
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setCity</Name>
				<Source><![CDATA[
    public static void setCity(
        PayrollPayStatement     _payStatement,
        RecId                   _currentLegalEntity,
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResident,
        str                     _residentTaxLocation,
        PayrollWorkerTaxCode    _workerTaxCode,
        PayrollMethodModifier   _method)
    {
        #PayrollConstants

        new InteropPermission(InteropKind::ClrInterop).assert();

        // Fill in county portion of GNIS code becase this does not come as part of the GNIS for these tax codes
        PayrollGNIS locationCodeWithCounty = PayrollTaxCityTaxTypeInitialization::getGNISWithCounty(_locationCode, _isResident, _residentTaxLocation);

        PayrollTaxEngineTaxCode cityTaxEngineTaxCode =
            PayrollTaxEngineTaxCode::findByPayrollTaxCode(_workerTaxCode.PayrollTaxCode);

        PayrollTaxEngineTaxCodeForSymmetry citySymmetryTaxCode =
            PayrollTaxEngineTaxCodeForSymmetry::find(cityTaxEngineTaxCode.RecId);

        PayrollTaxCityTaxTypeInitialization::setCityParameters(
            _workerTaxCode,
            _currentLegalEntity,
            _payStatement.PaymentDate);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCityParameters</Name>
				<Source><![CDATA[
    private static void setCityParameters(
        PayrollWorkerTaxCode    _workerTaxCode,
        RecId                   _currentLegalEntity,
        PayrollPaymDate         _paymentDate)
    {
        #PayrollConstants

        PayrollTaxCodeParameter             taxCodeParameter;
        PayrollTaxEngineTaxCodeForSymmetry  taxEngineSymmetryTaxCode;
        PayrollTaxCodeParameterDuration     taxCodeParameterDuration;

        while select validTimeState(_paymentDate) taxCodeParameter
            where taxCodeParameter.Name != #EXEMPT
                join RecId, Code from taxEngineSymmetryTaxCode
                    where taxCodeParameter.TaxEngineTaxCode == taxEngineSymmetryTaxCode.RecId
                    && taxEngineSymmetryTaxCode.PayrollTaxCode == _workerTaxCode.PayrollTaxCode
                join RecId from taxCodeParameterDuration
                    where taxCodeParameter.RecId == taxCodeParameterDuration.TaxCodeParameter
        {
            PayrollWorkerTaxCodeParameterValue workerTaxCodeParameterValue = PayrollWorkerTaxCodeParameterValue::findByWorkerTaxCodeParameter(
                                        _workerTaxCode.RecId, taxCodeParameter.RecId, _currentLegalEntity, _paymentDate);

            if (!workerTaxCodeParameterValue.RecId || workerTaxCodeParameterValue.Value == "")
            {
                throw error(strFmt("@Payroll:CityMiscellaneousParameterHasNotBeenSpecified", taxCodeParameter.Description, _workerTaxCode.Worker));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGNISWithCounty</Name>
				<Source><![CDATA[
    private static PayrollGNIS getGNISWithCounty(PayrollGNIS _locationCode, boolean _isResident, str _residentTaxLocation)
    {
        #PayrollConstants

        // If the worker is a city resident, use the resident tax location to get the correct county
        if (_isResident)
        {
            return _residentTaxLocation;
        }
        else
        {
            PayrollTaxRegionForSymmetry taxRegionForSymmetry;

            //
            // This method is passed a location code that does not contain a county segment because the tax engine does not return it
            // as part of the applicable tax codes list which drives these tax calls; so we must find the actual GNIS code in our data
            // by doing a select where GNIS like '36-*-975772' (for example) in our tax region table.
            //
            PayrollGNIS locationCodeWithCountyWildcard = PayrollTaxEngineUtil::getTaxCodeSegment(_locationCode, PayrollTaxCodeSegment::State)
                + #DASH + '*' + #DASH + PayrollTaxEngineUtil::getTaxCodeSegment(_locationCode, PayrollTaxCodeSegment::City);

            select firstonly GNIS from taxRegionForSymmetry where taxRegionForSymmetry.GNIS like locationCodeWithCountyWildcard;

            return taxRegionForSymmetry.GNIS;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJurisdictionData</Name>
				<Source><![CDATA[
    private static void setJurisdictionData(
        PayrollTaxCodeId _taxCode,
        PayrollGNIS _locationCode,
        boolean _isExempt,
        boolean _isResident,
        boolean _autoAdjust = true,
        boolean _hasNonResCertificate = false)
    {
      
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>