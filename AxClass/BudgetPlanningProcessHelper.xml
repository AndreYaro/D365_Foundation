<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcessHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningProcessHelper</c> class provides helper methods for a budget planning process.
/// </summary>
public class BudgetPlanningProcessHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcessCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget cycle start date for the <c>BudgetCycle</c> field on the
    /// <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <returns>
    /// The start date of the budget planning process budget cycle, if a valid <c>BudgetPlanningProcessRecId</c> has been passed; otherwise, throws an exception.
    /// </returns>
    public static FiscalPeriodStart getProcessCycleStartDate(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetCycleRecId     budgetCycleRecId;
        FiscalPeriodStart    cycleStartDate;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanningProcessHelper, getProcessCycleStartDate),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }

        budgetCycleRecId     = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).BudgetCycle;
        cycleStartDate       = BudgetCycle::find(budgetCycleRecId).getStartDate();

        return cycleStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessCycleEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget cycle end date for the <c>BudgetCycle</c> field on the
    /// <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <returns>
    /// The end date of the budget planning process budget cycle, if a valid <c>BudgetPlanningProcessRecId</c> has been passed; otherwise, throws an exception.
    /// </returns>
    public static FiscalPeriodEnd getProcessCycleEndDate(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetCycleRecId    budgetCycleRecId;
        FiscalPeriodEnd     cycleEndDate;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanningProcessHelper, getProcessCycleStartDate),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }

        budgetCycleRecId    = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).BudgetCycle;
        cycleEndDate        = BudgetCycle::find(budgetCycleRecId).getEndDate();

        return cycleEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a given <c>BudgetPlanningProcess</c> record ID.
    /// </summary>
    /// <param name = "_budgetPlanningProcessRecId"> The <c>BudgetPlanningProcess</c> record ID. </param>
    /// <returns> true, if the process is valid; otherwise, false. </returns>
    public static boolean validateProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        boolean isValid = _budgetPlanningProcessRecId != 0;

        if (isValid)
        {
            BudgetPlanningProcess budgetPlanningProcess = BudgetPlanningProcess::find(_budgetPlanningProcessRecId);

            if (budgetPlanningProcess.ApprovalProcessState != BudgetPlanningApprovalProcessState::InProcess)
            {
                isValid = false;
                warning(strFmt("@Budget:BudgetPlanning_Validation_ActiveProcess", BudgetPlanningProcessTranslation::getLocalizedName(_budgetPlanningProcessRecId)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>