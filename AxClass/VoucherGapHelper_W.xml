<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VoucherGapHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VoucherGapHelper_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVoucherListAsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks omissions in the Voucher numbers of general journal entries list ordered by voucher number.
    /// </summary>
    /// <param name = "_dateFrom">
    /// Time period start date for query on GeneralJournalView_FR.
    /// </param>
    /// <param name = "_dateTo">
    /// Time period end date for query on GeneralJournalView_FR.
    /// </param>
    /// <returns>
    /// A string of vouchers separated by ";" ordered by name.
    /// </returns>
    public static str getVoucherListAsStr(TransDate _dateFrom, TransDate _dateTo)
    {
        Map omissionsMap = new Map(Types::String, Types::Int64);
        System.Text.StringBuilder stringBuilderVouchers = new System.Text.StringBuilder();

        if (FeatureStateProvider::isFeatureEnabled(NumberSeqMissingVoucherFECFeature::instance()))
        {
            NumberSeqMissingVoucherFECTmp numberSeqMissingVoucherList = NumberSeqMissingVoucherFECListCreator::determineNumberSequencesForVouchers();

            select firstonly RecId from numberSeqMissingVoucherList;

            if (!numberSeqMissingVoucherList)
            {
                throw error("@FECDataExport:NumberSeqOmissionsVouchersError");
            }

            while select numberSeqMissingVoucherList
                group by Format, StartNumberSeq, EndNumberSeq
                order by Format
            {
                GeneralJournalView_FR generalJournalView;
                while select generalJournalEntrySubledgerVoucher from generalJournalView
                    group by generalJournalEntrySubledgerVoucher
                    order by generalJournalEntrySubledgerVoucher
                        where (generalJournalView.generalJournalEntryAccountingDate >= _dateFrom
                            && generalJournalView.generalJournalEntryAccountingDate <= _dateTo
                            && generalJournalView.GeneralJournalEntryLedger == Ledger::current()
                            && (generalJournalView.GeneralJournalAccountEntryAccountingCurrencyAmount != 0
                                || generalJournalView.GeneralJournalAccountEntryReportingCurrencyAmount != 0))
                            && generalJournalView.generalJournalEntrySubledgerVoucher >= numberSeqMissingVoucherList.StartNumberSeq
                            && generalJournalView.generalJournalEntrySubledgerVoucher <= numberSeqMissingVoucherList.EndNumberSeq
                            && generalJournalView.generalJournalEntrySubledgerVoucher like strReplace(numberSeqMissingVoucherList.Format, '#', '?')
                {
                    str series;
                    str number;
                    [series, number] = VoucherGapHelper_W::parseSeriesNumberAccordingFormat(
                    generalJournalView.generalJournalEntrySubledgerVoucher,
                    numberSeqMissingVoucherList.Format);

                    VoucherGapHelper_W::generateOmissions(
                        omissionsMap,
                        series,
                        numberSeqMissingVoucherList.Format,
                        number,
                        stringBuilderVouchers);
                }
            }

        }
        else
        {
            GeneralJournalView_FR generalJournalView;
            while select generalJournalEntrySubledgerVoucher from generalJournalView
                group by generalJournalEntrySubledgerVoucher
                order by generalJournalEntrySubledgerVoucher
                    where (generalJournalView.generalJournalEntryAccountingDate >= _dateFrom
                        && generalJournalView.generalJournalEntryAccountingDate <= _dateTo
                        && generalJournalView.GeneralJournalEntryLedger == Ledger::current()
                        && (generalJournalView.GeneralJournalAccountEntryAccountingCurrencyAmount != 0
                            || generalJournalView.GeneralJournalAccountEntryReportingCurrencyAmount != 0))
            {
                str series;
                str number;
                [series, number] = VoucherGapHelper_W::parseSeriesNumber(generalJournalView.generalJournalEntrySubledgerVoucher);

                VoucherGapHelper_W::generateOmissions(
                    omissionsMap,
                    series,
                    '',
                    number,
                    stringBuilderVouchers);
            }
        }

        return stringBuilderVouchers.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOmissions</Name>
				<Source><![CDATA[
    private static void generateOmissions(
        Map _omissionsMap,
        str _series,
        str _format,
        str _number,
        System.Text.StringBuilder _stringBuilderVouchers)
    {
        str key = _format == '' ? _series : _format;
        int64 currentNumber = str2Int64(_number);
        if (_omissionsMap.exists(key))
        {
            int64 maxNumber = _omissionsMap.lookup(key);
            int numberLen = strLen(_number);
            for (int64 i = maxNumber + 1; i < currentNumber; i++)
            {
                _stringBuilderVouchers.Append(strFmt(
                        '%1%2%3;',
                        _series,
                        strRep('0', numberLen - strLen(int642Str(i))),
                        i));
            }
        }

        _omissionsMap.insert(key, currentNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSeriesNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Separates series and number parts from voucher.
    /// </summary>
    /// <param name = "_voucher">A voucher number</param>
    /// <param name = "_missingVoucherSet">A set in which need to look for missing vouchers</param>
    /// <returns>A countainer with two string values: series and number. </returns>
    private static container parseSeriesNumber(Voucher _voucher) 
    {
        str series = strRem(_voucher, '0123456789');
        str number = strRem(_voucher, series);

        return [series , number];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSeriesNumberAccordingFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Separates series and number parts from voucher according the given format.
    /// </summary>
    /// <param name = "_voucher">A voucher number</param>
    /// <param name = "_format">Number sequence format</param>
    /// <returns>A countainer with two string values: series and number. </returns>
    private static container parseSeriesNumberAccordingFormat(Voucher _voucher, NumberSequenceFormat _format)
    {
        str series = strRem(_format, '#');
        str number = subStr(_voucher, strLen(series) + 1, strLen(_voucher));

        return [series , number];
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchVoucher</Name>
				<Source><![CDATA[
    private static boolean matchVoucher(Voucher _voucher, NumberSequenceFormat _format)
    {
        int lenFormat = strLen(_format);

        if (lenFormat != strLen(_voucher))
        {
            return false;
        }

        for (int i = 1; i <= lenFormat; i++)
        {
            str curElementFormat = subStr(_format, i, 1);
            str curElementVoucher = subStr(_voucher, i, 1);

            if (curElementFormat == '#')
            {
                if (strLen(strRem(curElementVoucher, '0123456789')))
                {
                    return false;
                }
            }
            else if (curElementFormat != curElementVoucher)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>