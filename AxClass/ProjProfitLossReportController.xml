<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjProfitLossReportController</Name>
  <SourceCode>
    <Declaration><![CDATA[
class ProjProfitLossReportController extends ProjectReportsController implements BatchRetryable
{
    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>getDateOrMax</Name>
        <Source><![CDATA[
        private TransDate getDateOrMax(TransDate _date)
    {
        if (_date)
        {
            return _date;
        }

        return dateMax();
    }

]]></Source>
      </Method>
      <Method>
        <Name>getDateOrMin</Name>
        <Source><![CDATA[
        private TransDate getDateOrMin(TransDate _date)
    {
        if (_date)
        {
            return _date;
        }

        return dateNull();
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunValidate</Name>
        <Source><![CDATA[
        protected container preRunValidate()
    {
        Query       queryReport;
        int         recordCount;

        ProjListProjProfitLossProjContract contract;
        ProjOptionTM            timeMaterial;
        ProjOptionFixedPrice    fixedPrice;
        ProjOptionInvestment    investment;
        ProjOptionInternal      internalCost;
        boolean                 skipZero;
        ProjListColumnData      actualVsBudget;
        TransDate               projFromDate;
        TransDate               projToDate;

        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeEmptyString;
        QueryBuildDataSource dsProjectTrans;

        container   validateResult = super();

        contract = this.parmReportContract().parmRdpContract() as ProjListProjProfitLossProjContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        skipZero = contract.parmSkipZero();

        actualVsBudget = contract.parmActualVsBudget();
        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();

        queryReport = new Query(this.getFirstQuery());

        queryDataSource     = queryReport.dataSourceTable(tableNum(ProjTable));

        if (!enableProjMultipleContractLinesForProjectFeature)
        {
            if (timeMaterial)
            {
                queryDataSource.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                queryDataSource.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                queryDataSource.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                queryDataSource.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Cost));
                queryDataSource.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Internal));
            }

            if (! (timeMaterial || fixedPrice || investment || internalCost))
            {
                rangeEmptyString = queryDataSource.addRange(fieldNum(ProjTable,Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (skipZero)
        {
            if (actualVsBudget == ProjListColumnData::Actual)
            {
                dsProjectTrans = queryDataSource.addDataSource((tableNum(ProjTransPosting)));
                dsProjectTrans.joinMode(JoinMode::ExistsJoin);
                dsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransPosting, ProjId));
                dsProjectTrans.addRange(fieldNum(ProjTransPosting, ProjTransDate)).value(queryValue(this.getDateOrMin(projFromDate)) + '..' + queryValue(this.getDateOrMax(projToDate)));
            }
            else
            {
                dsProjectTrans = queryDataSource.addDataSource((tableNum(ProjTransBudget)));
                dsProjectTrans.joinMode(JoinMode::ExistsJoin);
                dsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransBudget, ProjId));
                dsProjectTrans.addRange(fieldNum(ProjTransBudget, ProjTransDate)).value(queryValue(this.getDateOrMin(projFromDate)) + '..' + queryValue(this.getDateOrMax(projToDate)));
            }
        }

        return validateResult;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
        public static void main(Args _args)
    {
        ProjProfitLossReportController controller = new ProjProfitLossReportController();

        controller.parmArgs(_args);
        controller.parmReportName(controller.setReportName());
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>