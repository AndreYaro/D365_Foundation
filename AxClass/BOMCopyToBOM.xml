<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCopyToBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomCopyToBOM extends BOMCopyTo
{
    BOMId           toBOMId;
    InventSiteId    toSiteId;

    // 2-directional mapping between copied BOM lines
    Map fromBomToBomMap;
    Map toBomFromBomMap;

    BOMCopyType     bomCopyType;

    Set             set;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineOffset</Name>
				<Source><![CDATA[
    LineNum calcLineOffset()
    {
        return BOM::lastLineNum(toBOMId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    public void copyTo(
        BOMCopyFrom         copyFrom,
        BOMSearchBase       search,
        BOMMap              _toBOM,
        boolean             copyRef = false)
    {
        InventDim           fromInventDim;
        InventDim           inventDim;

        BOMConfigRule       fromRule;
        BOMConfigRule       toRule;
        BOMConfigRoute      bomConfigRoute;

        BOMMap              fromBom = search.bom();
        BOM                 toBOM = _toBOM as BOM;

        container pack()
        {
            return [toBOM.ItemId,toBOM.ConfigGroupId];
        }

        // This will also copy the inventDimId
        toBOM.initFromBOM(fromBom);
        inventDim = toBOM.inventDim();
        copyFrom.initToBom(toBOM,inventDim);
        toBOM.bomId = toBOMId;

        // Use the from storage dimensions
        fromInventDim = fromBom.inventDim();
        if (!inventDim.InventLocationId || !inventDim.InventSiteId)
        {
            inventDim.InventSiteId      = fromInventDim.InventSiteId;
            inventDim.InventLocationId  = fromInventDim.InventLocationId;
        }

        // If the to site is different then warehouse is cleared and the site set
        if (fromInventDim.InventSiteId != toSiteId)
        {
            inventDim.InventSiteId      = toSiteId;
            inventDim.InventLocationId  = '';
        }

        if (toBOM.ConfigGroupId)
        {
            inventDim.ConfigId = '';
        }

        toBOM.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

        super(copyFrom,search,toBOM);

        this.copySteps(fromBom, toBOM, tablestr(PmfBOMStep));

        // If rule already copied
        if (set.in(pack()))
        {
            return;
        }

        // Use from BOMId
        fromRule  = BOMConfigRule::search(copyFrom.bomId(),toBOM.ConfigGroupId,toBOM.ItemId);
        while (fromRule)
        {
            toRule.data(fromRule);
            toRule.bomId = toBOMId;
            toRule.insert();

            next fromRule;
        }
        set.add(pack());

        // If configRoute exists for the From BOM, but not for the To BOm

        if (BOMConfigRoute::exist(fromBom.bomId,toBOM.ConfigGroupId) &&
            ! BOMConfigRoute::exist(toBOMId,toBOM.ConfigGroupId))
        {
            bomConfigRoute.data(BOMConfigRoute::find(fromBom.bomId,toBOM.ConfigGroupId));
            bomConfigRoute.bomId = toBOMId;
            bomConfigRoute.insert();
        }

        if (this.isToFormula())
        {
            toBomFromBomMap.insert(toBOM.RecId, fromBom.RecId);
            fromBomToBomMap.insert(fromBom.RecId, toBOM.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOM</Name>
				<Source><![CDATA[
    BOMMap defaultBOM()
    {
        BOM bom;

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to delete the 'to' bom
    /// </summary>
    void delete()
    {
        BOMSearch search;

        ttsbegin;

        search  = BOMSearch_BOMCopyType::newBOMCopyDelete(toBOMId,bomCopyType);

        while (search.next())
        {
            if (! search.bom().validateDelete())
            {
                throw error("@SYS18722");
            }
            search.bom().delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        BOMId           _toId,
        OprNum          _oprOffset,
        InventSiteId    _siteId
        )
    {
        toBOMId     = _toId;
        toSiteId    = _siteId;

        super(_oprOffset);

        set = new Set(Types::Container);

        toBomFromBomMap = new Map(Types::Int64, Types::Int64);
        fromBomToBomMap = new Map(Types::Int64, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCopy</Name>
				<Source><![CDATA[
    public void postCopy(BOMId _fromBOMId = '')
    {
        if (this.isToFormula())
        {
            this.copyCompensationPrinciples();
        }

        this.copyNomenclature(_fromBOMId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isToFormula</Name>
				<Source><![CDATA[
    private boolean isToFormula()
    {
        return #PDSPotencyEnabled && BOMTable::find(toBOMId).PmfBOMFormula ==PmfBOMFormula::Formula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCompensationPrinciples</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies compensation principles after Formula was copied.
    /// </summary>
    private void copyCompensationPrinciples()
    {
        BOM toBom;

        while select toBom
            where toBom.BOMId == toBOMId
                && toBom.pdsIngredientType == PDSIngredientTypeEnum::Compensating
        {
            if (toBomFromBomMap.exists(toBom.RecId)) // formula lines might have been added, and formula line without source might exist
            {
                BOMRefRecId fromBomRecId = toBomFromBomMap.lookup(toBom.RecId);
                BOM fromBom = BOM::findRecId(fromBomRecId);
                if (fromBom)
                {
                    BOMRefRecId toActiveIngredient = this.resolveActiveIngredientBom(fromBom);
                    toBom.pdsCopyPrinciple(fromBom, toActiveIngredient);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveActiveIngredientBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves active ingredient BOM line in the "to" BOM based on "from" BOM line and its active ingredient.
    /// To BOM > From BOM > From Active ingredient > To Active ingredient
    /// </summary>
    /// <param name = "_fromCompensatingBomLine">Oringinal BOM line</param>
    /// <returns>To active ingredient BOM rec id</returns>
    private BOMRefRecId resolveActiveIngredientBom(BOM _fromCompensatingBomLine)
    {
        BOMRefRecId destinationBomRecId;
        PDSCompensationPrinciple sourcePrinciple = PDSCompensationPrinciple::find(_fromCompensatingBomLine.RecId);

        if (sourcePrinciple && sourcePrinciple.ActiveRefRecId)
        {
            destinationBomRecId = fromBomToBomMap.lookup(sourcePrinciple.ActiveRefRecId);
        }

        return destinationBomRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    static BOMCopyToBOM newBOMRouteCopy(
        BOMRouteCopyJob bomRouteCopy,
        OprNum          oprOffset
        )
    {
        BOMCopyToBOM   bomCopyToBOM;
        BOMId          toBomId = bomRouteCopy.parmToBOMId();

        bomCopyToBOM = new BOMCopyToBOM(
            toBomId,
            oprOffset,
            BOMTable::find(toBomId).SiteId);

        return bomCopyToBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyNomenclature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies nomenclature.
    /// </summary>
    /// <param name = "_fromBOMId">A BOM ID.</param>
    protected void copyNomenclature(BOMId _fromBOMId)
    {
        if (!_fromBOMId)
        {
            return;
        }

        EcoResBOMDimBasedConfigurationNomenclature bomNomenclatureFrom;

        while select bomNomenclatureFrom
            where bomNomenclatureFrom.BOMId == _fromBOMId
            &&    bomNomenclatureFrom.DimBasedConfigurationNomenclature != 0
        {
            if (!EcoResBOMDimBasedConfigurationNomenclature::findByBOMId(toBOMId, bomNomenclatureFrom.NomenclatureRole))
            {
                ttsbegin;

                EcoResDimBasedConfigurationNomenclature nomenclatureFrom = EcoResDimBasedConfigurationNomenclature::find(bomNomenclatureFrom.DimBasedConfigurationNomenclature);
                if (nomenclatureFrom)
                {
                    EcoResDimBasedConfigurationNomenclature nomenclatureTo = nomenclatureFrom.duplicate(toBOMId);

                    EcoResBOMDimBasedConfigurationNomenclature bomNomenclatureTo;
                    bomNomenclatureTo.data(bomNomenclatureFrom);
                    bomNomenclatureTo.BOMId = toBOMId;
                    bomNomenclatureTo.DimBasedConfigurationNomenclature = nomenclatureTo.recId;
                    bomNomenclatureTo.insert();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>