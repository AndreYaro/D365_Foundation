<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkBaseRateBroker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Linq;
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

/// <summary>
/// The <c>TMSFwkBaseRateBroker</c> class is an abstract rating broker.
/// </summary>
public abstract class TMSFwkBaseRateBroker implements TMSFwkIBroker
{
    private TMSFwkRatingService ratingService;
    private TMSFwkRoutingService routingService;
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rateEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rates an entity.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_entity">Entity to rate.</param>
    public abstract void rateEntity(TmsTransactionFacade _transactionFacade, XElement _entity)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates rates for a transaction.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    public void execute(TmsTransactionFacade _transactionFacade)
    {
        System.Exception ex;

        try
        {
            using (var activityContext = this.instrumentationLogger().brokerActivities().calculateBaseRate(_transactionFacade.parmCommunicationType()))
            {
                var routes = new XElementList(_transactionFacade.parmXTransaction().RetrieveRoutes());
                if (routes.Count == 0)
                {
                    XElement shipment = TMSFwkBaseRateBroker::getFirstElementTypeShipment(_transactionFacade);
                    XElement route = null;

                    if (shipment.GetString(ElementXmlConstants::RouteConfigurationCode))
                    {
                        route = this.parmRoutingService().createRoute(_transactionFacade, shipment);
                    }

                    shipment.CreateRatingRoute(route);
                }

                routes = new XElementList(_transactionFacade.parmXTransaction().RetrieveRoutes());
                if (routes.Count != 0)
                {
                    // Get all the routes
                    XElementListEnumerator allRoutes = new XElementList(_transactionFacade.parmXTransaction().Descendants(EntityXmlConstants::ShippingEntity))
                        .WhereMatchingStringElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Route)
                        .GetListEnumerator();

                    while (allRoutes.MoveNext())
                    {
                        XElement route = allRoutes.Current();

                        // Get all the segments
                        XElementListEnumerator shipments = new XElementList(route.Descendants(EntityXmlConstants::ShippingEntity))
                            .WhereMatchingStringElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Ship)
                            .GetListEnumerator();

                        while (shipments.MoveNext())
                        {
                            XElement shipment = shipments.Current();

                            // Only rate if there are no errors
                            str errorCode;
                            XElement error = new XElementList(shipment.Parent.Descendants(ElementXmlConstants::Error)).FirstOrDefault();
                            if (error != null)
                            {
                                errorCode = error.GetString(ElementXmlConstants::ErrorCode);
                            }
                            if (!errorCode)
                            {
                                this.rateEntity(_transactionFacade, shipment);
                            }

                            // Don't want to include charge override on CONFIRMATION (thus leave here)
                            TMSFwkChargeOverrideService::processChargeOverride(_transactionFacade, shipment);
                        }
                    }
                }
            }
        }
        catch (ex)
        {
            _transactionFacade.parmXTransaction().GenerateElementForXPath(EntityXmlConstants::RatingEntities, EntityXmlConstants::RatingEntity)
                .AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), ex.ToString()));
            TMSException::ThrowException("@TRX2580", ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRatingService</Name>
				<Source><![CDATA[
    protected TMSFwkRatingService parmRatingService()
    {
        if (ratingService == null)
        {
            ratingService = TMSFwkRatingService::construct();
        }

        return ratingService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoutingService</Name>
				<Source><![CDATA[
    protected TMSFwkRoutingService parmRoutingService()
    {
        if (routingService == null)
        {
            routingService = TMSFwkRoutingService::construct();
        }

        return routingService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstElementTypeShipment</Name>
				<Source><![CDATA[
    private static XElement getFirstElementTypeShipment(TmsTransactionFacade _transactionFacade)
    {
        XElement shipment = new XElementList(_transactionFacade.parmRequest().Descendants(EntityXmlConstants::ShippingEntity))
            .WhereMatchingStringElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Ship)
            .FirstOrDefault();

        return shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>