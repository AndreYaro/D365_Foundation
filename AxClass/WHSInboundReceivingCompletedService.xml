<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundReceivingCompletedService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSInboundReceivingCompletedService extends WHSInboundReceivingCompletedServiceBase
{
    private boolean acceptQuantityExceptions;
    private Map packingSlipExistsForShipment = new Map(Types::String, Types::Enum);
    private boolean mustValidateOverUnderDeliveryOfLoadLine = true;

    private WHSInstrumentationLogger logger;

    private WHSInboundLoadFromLoadCreator inboundLoadFromLoadCreator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCompleteReceiving</Name>
				<Source><![CDATA[
    private boolean canCompleteReceiving()
    {
        return loadTable.validateCanCompleteReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptQuantityExceptions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmAcceptQuantityExceptions(boolean _acceptQuantityExceptions = acceptQuantityExceptions)
    {
        acceptQuantityExceptions = _acceptQuantityExceptions;
        return acceptQuantityExceptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptConfirm</Name>
				<Source><![CDATA[
    internal void receiptConfirm(WHSInboundReceivingCompletedContract _contract)
    {
        if (!_contract)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
        
        this.parmAcceptQuantityExceptions(_contract.parmAcceptQuantityExceptions());

        using (var _ = this.logger().inboundLoadReceivingCompleted().receiptConfirm())
        {
            QueryRun queryRun = new QueryRun(_contract.parmQuery());

            while (queryRun.next())
            {
                WHSLoadTable currentLoadTable = queryRun.get(tableNum(WHSLoadTable));

                this.setNewLoad(currentLoadTable);

                this.tryReceiptConfirmLoad(currentLoadTable.LoadId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryReceiptConfirmLoad</Name>
				<Source><![CDATA[
    private void tryReceiptConfirmLoad(WHSLoadId _loadId)
    {
        Microsoft.Dynamics.Ax.Xpp.XppException xppException;

        try
        {
            this.receiptConfirmLoad(_loadId);
        }
        catch (xppException)
        {
            if (this.mustRetryByException(xppException))
            {
                retry;
            }

            this.handleUnrecoverableException();
        }
        catch
        {
            this.handleUnrecoverableException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptConfirmLoads</Name>
				<Source><![CDATA[
    internal static void receiptConfirmLoads(ListEnumerator _loadIds, boolean _acceptQuantityExceptions = false)
    {
        while (_loadIds.moveNext())
        {
            WHSLoadId loadId = _loadIds.current();
            WHSInboundReceivingCompletedService::receiptConfirmSingleLoad(loadId, _acceptQuantityExceptions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptConfirmSingleLoad</Name>
				<Source><![CDATA[
    internal static void receiptConfirmSingleLoad(WHSLoadId _loadId, boolean _acceptQuantityExceptions = false)
    {
        WHSInboundReceivingCompletedService registrationCompletedService = WHSInboundReceivingCompletedService::construct();
        registrationCompletedService.parmAcceptQuantityExceptions(_acceptQuantityExceptions);
        registrationCompletedService.receiptConfirmLoad(_loadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptConfirmLoad</Name>
				<Source><![CDATA[
    private void receiptConfirmLoad(WHSLoadId _loadId)
    {
        setPrefix(strFmt("@WAX:ConfirmingReceivingCompletedOfLoad", _loadId));

        using (var activityContext = this.logger().inboundLoadReceivingCompleted().receiptConfirmLoad())
        {
            this.setNewLoadById(_loadId);

            this.logger().logRecordInformation(loadTable);
        
            if (!this.canCompleteReceiving())
            {
                return;
            }

            this.ensureLoadShipConfirmed(_loadId);
            this.validateReadyToProcessLoadLines();

            ttsbegin;

            if (!this.processLoadLinesForReceiptConfirmation())
            {
                throw error("@WAX:UpdateCancelled");
            }

            this.updateLoadForReceiptConfirmation();
            this.updateShipmentsForReceiptConfirmation();

            this.onReceivingCompleted(_loadId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReadyToProcessLoadLines</Name>
				<Source><![CDATA[
    private void validateReadyToProcessLoadLines()
    {
        this.validateReceivingCompletedPackingSlipId();

        if (WHSInboundReceivingCompletedOpenASNFlight::instance().isEnabled())
        {
            this.validateNoOpenASNAssociatedWithCurrentLoad();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoOpenASNAssociatedWithCurrentLoad</Name>
				<Source><![CDATA[
    private void validateNoOpenASNAssociatedWithCurrentLoad()
    {
        WHSUOMStructure uomStructure;
        WHSUOMStructureReceipt uomStructureReceipt;

        select firstonly RecId from uomStructure
            where uomStructure.LoadId == loadTable.LoadId
            notexists join uomStructureReceipt
                where uomStructureReceipt.UOMStructure == uomStructure.RecId
                   && uomStructureReceipt.CreatedWorkId != '';
        
        if (uomStructure.RecId != 0)
        {
            throw error(strFmt("@WAX:WHSInboundReceivingCompleted_OpenASNAssociatedWithLoadError", loadTable.LoadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReceivingCompleted</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void onReceivingCompleted(WHSLoadId _loadId)
    {
        // For extensibility purposes
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLoadShipConfirmed</Name>
				<Source><![CDATA[
    private void ensureLoadShipConfirmed(WHSLoadId _loadId)
    {
        if (!TMSAppointment::isAppointmentComplete(_loadId))
        {
            throw error(strFmt("@TRX2715", _loadId));
        }

        if (TMSRoute::find(loadTable.RouteCode).RouteStatus != TMSRouteStatus::Confirmed)
        {
            boolean isLoadShipConfirmed = WhsPostPackingSlip::construct().shipConfirm(_loadId);

            if (!isLoadShipConfirmed)
            {
                // we can't confirm receiving completed for load without shipment confirmation
                throw error(strFmt("@WAX:ReceivingCompletedLoadNotShipConfirmed_Error", _loadId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceivingCompletedPackingSlipId</Name>
				<Source><![CDATA[
    private void validateReceivingCompletedPackingSlipId()
    {
        WHSParameters whsParametes = WHSParameters::find();
        if (whsParametes.CaptureReceivingCompletedPackingSlip == WHSCaptureReceivingCompletedPackingSlip::Always)
        {
            WHSShipmentTable shipmentTable;
            select firstonly shipmentTable
            where shipmentTable.LoadId == loadTable.LoadId
                && (shipmentTable.ReceivingCompletedPackingSlipId == ''
                    || shipmentTable.ReceivingCompletedDocumentDate == dateNull());

            if (shipmentTable.RecId)
            {
                throw error(strFmt("@WAX:ReceivingCompletedPackingSlipInfoMissing", shipmentTable.ShipmentId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoadLinesForReceiptConfirmation</Name>
				<Source><![CDATA[
    private boolean processLoadLinesForReceiptConfirmation()
    {
        using (var activityContext = this.logger().inboundLoadReceivingCompleted().receiptConfirmLoad())
        {
            if (WHSInboundReceivingCompletedLoadLineProcessingRefactoringFlight::instance().isEnabled())
            {
                return WHSInboundReceivingCompletedLoadLineProcessor::initFromDeliveryPolicy(loadTable, acceptQuantityExceptions).processLoadLinesForReceiptConfirmation();
            }
            else
            {
                WHSLoadLine loadLine;

                while select forupdate loadLine
                    where loadLine.LoadId == loadTable.LoadId
                {
                    InventQty receivedInventQuantityForLoadLine = loadLine.receivedInventoryQuantity();

                    boolean validLine = this.processLoadLineForReceiptConfirmation(loadLine, receivedInventQuantityForLoadLine);
                    if (!validLine)
                    {
                        return false;
                    }
                }

                if (loadTable.ReceivingCompletedDeliveryPolicy == WHSReceivingCompletedLoadDeliveryPolicy::AdjustAndCreateNewLoadForRemaining
                    && inboundLoadFromLoadCreator)
                {
                    return inboundLoadFromLoadCreator.tryInsertNewLoadLines();
                }
                
                return true;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPolicy</Name>
				<Source><![CDATA[
    private boolean applyPolicy(
        WHSLoadLine _loadLine,
        InventQty _receivedInventQuantityForLoadLine,
        boolean _quantityExceptionOccured)
    {
        switch (loadTable.ReceivingCompletedDeliveryPolicy)
        {
            case WHSReceivingCompletedLoadDeliveryPolicy::MustMatchReceivedQty:
            {
                if (_quantityExceptionOccured)
                {
                    return false; // due to policy we can't proceed
                }

                // MustMatch policy only covers quantity exceptions, by default if there is no quantity exception we adjust the quantities
                this.adjustLoadLineQuantity(_loadLine, _receivedInventQuantityForLoadLine);
                return true;
            }
                
            case WHSReceivingCompletedLoadDeliveryPolicy::AdjustToReceivedQty:
            {
                this.adjustLoadLineQuantity(_loadLine, _receivedInventQuantityForLoadLine);
                return true;
            }

            case WHSReceivingCompletedLoadDeliveryPolicy::AdjustAndCreateNewLoadForRemaining:
            {
                this.adjustLoadLineQtyAndCreateNewLoadLineForRemaining(_loadLine, _receivedInventQuantityForLoadLine);
                return true;
            }

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineQtyAndCreateNewLoadLineForRemaining</Name>
				<Source><![CDATA[
    private void adjustLoadLineQtyAndCreateNewLoadLineForRemaining(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        Qty origQty = _loadLine.Qty;
        InventQty origInventQty = _loadLine.InventQty;
        
        this.adjustLoadLineQuantity(_loadLine, _receivedInventQuantityForLoadLine);

        Qty newQty = origQty - _loadLine.Qty;
        InventQty newInventQty = origInventQty - _loadLine.InventQty;

        boolean newLoadShouldBeCreatedForUnderReceivedQtyRemainder = newQty > 0 && newInventQty > 0;
        
        if (newLoadShouldBeCreatedForUnderReceivedQtyRemainder)
        {
            if (!inboundLoadFromLoadCreator)
            {
                inboundLoadFromLoadCreator = WHSInboundLoadFromLoadCreator::constructFromOrigLoad(loadTable);
            }

            inboundLoadFromLoadCreator.addNewLoadLineWithNewQuantitiesFromOrigLoadLine(_loadLine, newQty, newInventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineQuantity</Name>
				<Source><![CDATA[
    private void adjustLoadLineQuantity(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        if (this.mustCreateReceivingWorkExceptionForQtyException(_loadLine))
        {
            this.createReceivingWorkExceptionLogEntry(_loadLine, _receivedInventQuantityForLoadLine);
        }

        this.adjustLoadLineQuantityToReceivedQuantity(_loadLine, _receivedInventQuantityForLoadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoadLineForReceiptConfirmation</Name>
				<Source><![CDATA[
    private boolean processLoadLineForReceiptConfirmation(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        if (_receivedInventQuantityForLoadLine == _loadLine.InventQty)
        {
            return true;
        }
        
        if (!_loadLine.InventQty)
        {
            // Line with InventQty = 0 should not exist, but checking just in case
            // This would be infinite overdelivery, so rejecting
            return checkFailed(strFmt("@WAX1687", _loadLine.LoadId, _loadLine.ItemId));
        }
        
        str quantityExceptionMessage = this.validateUnderOverDeliveryOfLoadLine(_loadLine, _receivedInventQuantityForLoadLine);
        boolean isQuantityException = quantityExceptionMessage != '';
        if (isQuantityException)
        {
            if (acceptQuantityExceptions)
            {
                return this.applyPolicy(_loadLine, _receivedInventQuantityForLoadLine, isQuantityException)
                    ? true
                    : checkFailed(quantityExceptionMessage);
            }
            else
            {
                return checkFailed(quantityExceptionMessage);
            }
        }
        else
        {
            return this.applyPolicy(_loadLine, _receivedInventQuantityForLoadLine, isQuantityException);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingStructureExistsForShipment</Name>
				<Source><![CDATA[
    private boolean packingStructureExistsForShipment(WHSLoadLine _loadLine)
    {
        if (!packingSlipExistsForShipment.exists(_loadLine.ShipmentId))
        {
            packingSlipExistsForShipment.insert(_loadLine.ShipmentId, this.determinePackingStructureExistsForShipment(_loadLine));
        }

        return packingSlipExistsForShipment.lookup(_loadLine.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePackingStructureExistsForShipment</Name>
				<Source><![CDATA[
    private boolean determinePackingStructureExistsForShipment(WHSLoadLine _loadLine)
    {
        return _loadLine.ShipmentId &&
            (select firstonly RecId from WHSUOMStructure
                where WHSUOMStructure.ShipmentId == _loadLine.ShipmentId
                   && WHSUOMStructure.Module == WHSShipmentTable::moduleByInventTransType(_loadLine.InventTransType)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateReceivingWorkExceptionForQtyException</Name>
				<Source><![CDATA[
    private boolean mustCreateReceivingWorkExceptionForQtyException(WHSLoadLine _loadLine)
    {
        return this.packingStructureExistsForShipment(_loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceivingWorkExceptionLogEntry</Name>
				<Source><![CDATA[
    private void createReceivingWorkExceptionLogEntry(WHSLoadLine _loadLine, InventQty _actualReceiptQty)
    {
        WHSWorkExceptionLog log = this.initializeReceivingWorkExceptionLogEntry(_loadLine, _actualReceiptQty);
        log.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReceivingWorkExceptionLogEntry</Name>
				<Source><![CDATA[
    private WHSWorkExceptionLog initializeReceivingWorkExceptionLogEntry(WHSLoadLine _loadLine, InventQty _actualReceiptQty)
    {
        WHSReceiptOrderLine receiptOrderLine = _loadLine.getOrderCommonFromLoadLine() as WHSReceiptOrderLine;
        InventDim           inventDim = _loadLine.inventDim();
        WHSWorkExceptionLog log;

        log.ShipmentId          = _loadLine.ShipmentId;
        log.LoadId              = _loadLine.LoadId;
        log.InventLocationId    = inventDim.InventLocationId;
        log.WorkExceptionCode   = WHSParameters::find().asnMissingItemCode;
        log.ExceptionType       = WHSExceptionType::Receiving;
        log.OrderNum            = _loadLine.OrderNum;
        log.OrderLineNum        = receiptOrderLine.LineNumber;
        log.WorkTransType       = receiptOrderLine.workTransType();
        log.Message             = strFmt("@WAX:Log_LoadLineQtyDifferentFromTotalASNWorkCreatedQty", _loadLine.InventQty, _actualReceiptQty);
        
        return log;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnderOverDeliveryOfLoadLine</Name>
				<Source><![CDATA[
    private str validateUnderOverDeliveryOfLoadLine(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        str ret = '';

        real result = ((_receivedInventQuantityForLoadLine - _loadLine.InventQty) / _loadLine.InventQty) * 100;

        if (result < 0 && abs(result) > _loadLine.UnderDeliveryPct)
        {
            ret = strFmt("@WAX1686", _loadLine.LoadId, _loadLine.ItemId);
        }

        if (result > 0 && result > _loadLine.OverDeliveryPct)
        {
            ret = strFmt("@WAX1687", _loadLine.LoadId, _loadLine.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineQuantityToReceivedQuantity</Name>
				<Source><![CDATA[
    private void adjustLoadLineQuantityToReceivedQuantity(WHSLoadLine _loadLine, InventHandlingQty _receivedInventHandlingQtyForLoadLine)
    {
        UnitIDBase fromUnit = WHSCatchWeightHelper::inventHandlingUnitId(_loadLine.ItemId);
        Qty receivedQtyForLoadLineInLoadUOM = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_loadLine.ItemId,
                                                                                                                    _loadLine.InventDimId,
                                                                                                                    _receivedInventHandlingQtyForLoadLine,
                                                                                                                    fromUnit,
                                                                                                                    _loadLine.uom,
                                                                                                                    NoYes::No,
                                                                                                                    NoYes::No);
        _loadLine.InventQty = _receivedInventHandlingQtyForLoadLine;
        _loadLine.Qty = receivedQtyForLoadLineInLoadUOM;

        _loadLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadForReceiptConfirmation</Name>
				<Source><![CDATA[
    private void updateLoadForReceiptConfirmation()
    {
        loadTable.reread();
        if (this.mustUpdateLoadStatusToReceived())
        {
            loadTable.LoadStatus = WHSLoadStatus::Received;
        }

        if (this.mustSetReadyForProductReceiptProcessing() && loadTable.ProductReceiptProcessingStatus != WHSProductReceiptProcessingStatus::Processed)
        {
            loadTable.ProductReceiptProcessingStatus = WHSProductReceiptProcessingStatus::ReadyForProcessing;
        }

        loadTable.LoadReceivingCompletedUTCDateTime = DateTimeUtil::utcNow();
        loadTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentsForReceiptConfirmation</Name>
				<Source><![CDATA[
    private void updateShipmentsForReceiptConfirmation()
    {
        if (this.mustUpdateLoadStatusToReceived())
        {
            WHSShipmentTable shipmentInLoad;

            update_recordset shipmentInLoad
                setting ShipmentStatus = WHSShipmentStatus::Received
                  where shipmentInLoad.LoadId == loadTable.LoadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRetryByException</Name>
				<Source><![CDATA[
    internal boolean mustRetryByException(Microsoft.Dynamics.Ax.Xpp.XppException _xppException)
    {
        #OCCRetryCount

        switch (true)
        {
            case _xppException is Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError:
                return ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum);

            case _xppException is Microsoft.Dynamics.Ax.Xpp.DeadlockException:
            case _xppException is Microsoft.Dynamics.Ax.Xpp.UpdateConflictException:
            case _xppException is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException:
                return xSession::currentRetryCount() < #RetryNum;
            
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUnrecoverableException</Name>
				<Source><![CDATA[
    public void handleUnrecoverableException()
    {
        // Continue with posting even though the current journal failed
        exceptionTextFallThrough();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSInboundReceivingCompletedService));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSInboundReceivingCompletedService construct()
    {
        return new WHSInboundReceivingCompletedService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>