<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterComponent</c> class writes session XML for a component.
/// </summary>
public class PcXmlSessionWriterComponent
{
    private PCInstrumentationLogger logger;

    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAttributeBindingsCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set that contains record IDs of the attributes that have a binding for the component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <returns>
    /// A collection of attribute bindings for the given component.
    /// </returns>
    protected PCXmlSessionComponentAttributeBindings createAttributeBindingsCollection(PCClass _component)
    {
        PCXmlSessionComponentAttributeBindings  xmlSessionComponentAttributeBindings = PCXmlSessionComponentAttributeBindings::construct();

        xmlSessionComponentAttributeBindings.initialize(_component);

        return xmlSessionComponentAttributeBindings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttributeDefaultValuesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map containing attribute default values for the component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <param name="_componentInstance">
    /// A component instance.
    /// </param>
    /// <returns>
    /// A map.
    /// </returns>
    protected Map createAttributeDefaultValuesMap(PCClass _component, PCComponentInstance _componentInstance)
    {
        EcoResAttributeDefaultValue defaultValue;
        EcoResCategoryAttribute     categoryAttribute;

        Map             attributeDefaultValuesMap = new Map(Types::Int64, Types::String);
        EcoResTextValue textValue;

        // if it is a re-configuration session, defaults should not be loaded
        if (_componentInstance.RecId != 0)
        {
            return attributeDefaultValuesMap;
        }

        while select TextValue from textValue
            join TableId from defaultValue
                where defaultValue.Value == textValue.RecId
                join RecId from categoryAttribute
                    where   categoryAttribute.Attribute == defaultValue.Attribute
                    &&      categoryAttribute.Category  == _component.RecId
        {
            attributeDefaultValuesMap.insert(categoryAttribute.RecId, textValue.TextValue);
        }

        return attributeDefaultValuesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttributeModifiersMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map that contains the attribute modifiers for a component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <returns>
    /// A map that contains the attribute modifiers for a component.
    /// </returns>
    protected Map createAttributeModifiersMap(PCClass _component)
    {
        Map                         attributeValuesMap = new Map(Types::Int64, Types::Container);
        EcoResCategoryAttribute     categoryAttribute;
        EcoResComponentControl      modifier;
        List                        modifiers;

        while select modifier
            order by    modifier.Modifier
            join RecId from categoryAttribute
            where categoryAttribute.RecId       == modifier.CategoryAttribute
            &&    categoryAttribute.Category    == _component.RecId
        {
            if (attributeValuesMap.exists(categoryAttribute.RecId))
            {
                modifiers = List::create(attributeValuesMap.lookup(categoryAttribute.RecId));
                attributeValuesMap.remove(categoryAttribute.RecId);
            }
            else
            {
                modifiers = new List(Types::Record);
            }
            modifiers.addEnd(modifier);
            attributeValuesMap.insert(categoryAttribute.RecId, modifiers.pack());
        }

        return attributeValuesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttributeValuesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map that contains the attribute values for a component.
    /// </summary>
    /// <param name="_component">
    /// A component record for which to generate the XML.
    /// </param>
    /// <param name="_componentInstance">
    /// A component instance.
    /// </param>
    /// <returns>
    /// A map that contains the attribute values for a component.
    /// </returns>
    protected Map createAttributeValuesMap(PCClass _component, PCComponentInstance _componentInstance)
    {
        Map                         attributeValuesMap = new Map(Types::Int64, Types::Record);
        EcoResCategoryAttribute     categoryAttribute;

        EcoResAttributeValue                        attributeValue;
        PCComponentInstanceValue                    instanceValue;

        while select RecId from instanceValue
            where instanceValue.ComponentInstance == _componentInstance.RecId
                join firstonly   attributeValue
                    where attributeValue.InstanceValue == instanceValue.RecId
                        join RecId from categoryAttribute
                            where categoryAttribute.Attribute == attributeValue.Attribute &&
                                  categoryAttribute.Category  == _component.RecId
        {
            attributeValuesMap.insert(categoryAttribute.RecId, attributeValue);
        }

        return attributeValuesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTableConstraintMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map containing table constraint relations for the component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <param name="_subComponentPath">
    /// The path to the current sub-component as a list of <c>PCSubComponent</c> records.
    /// </param>
    /// <returns>
    /// A map.
    /// </returns>
    protected Map createTableConstraintMap(PCClass _component
    , StackBase _subComponentPath
    )
    {
        return PCTableConstraintRelationFacade::getDBTableConstraintRelationSubComponent(_component, _subComponentPath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = PCInstrumentationLogger::createLogger(classStr(PCXmlSessionWriterComponent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes ending XML tags for the component and finishes the writing of any sub components.
    /// </summary>
    /// <param name="_componentTreeWriter">
    /// A component tree writer.
    /// </param>
    /// <param name="_subComponentTreeWriter">
    /// An XML writer that is used to write tree reference for any sub components.
    /// </param>
    /// <param name="_subComponentTypeWriter">
    /// An XML writer that is used to write types for any sub components.
    /// </param>
    protected void writeEnd(PCXmlWriter _componentTreeWriter, PCXmlWriter _subComponentTreeWriter, PCXmlWriter _subComponentTypeWriter)
    {
        //first the component declaration, then the sub-component links
        _componentTreeWriter.writeRaw(_subComponentTypeWriter.writeToString());
        _componentTreeWriter.writeRaw(_subComponentTreeWriter.writeToString());

        _componentTreeWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML representation of a component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <param name="_assignedComponentID">
    /// The name assigned to the component in the generated XML.
    /// </param>
    /// <param name="_attributeTypeWriter">
    /// The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_componentInstance">
    /// The configuration instance to pick up existing values from.
    /// </param>
    /// <param name="_modelUIControl">
    /// The UI definition of the product configuration model.
    /// </param>
    /// <param name="_componentControl">
    /// The UI definition used to sort the attribute groups and attributes of each component.
    /// </param>
    /// <param name="_parsedTypes">
    /// The set containing string values with the names of the attribute types parsed.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection containing the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map containing integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <param name="_subComponentPath">
    /// The path to the current sub-component as a list of <c>PCSubComponent</c> records.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    /// A runtime instance ID manager.
    /// </param>
    /// <param name="_priceMethod">
    /// The method used to calculate the unit price, defaults to cost; optional.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    /// <remarks>
    /// A stack for keeping track of the path of a subcomponent has been added, as well as a manager class to issue runtime instance IDs.
    /// </remarks>
    public void write(  PCClass                             _component,
                        str                                 _assignedComponentID,
                        PCXmlWriter                         _attributeTypeWriter,
                        PCXmlWriter                         _componentTreeWriter,
                        PCComponentInstance                 _componentInstance,
                        PCConfigurationControl              _modelUIControl,
                        PCComponentControl                  _componentControl,
                        Set                                 _parsedTypes,
                        PCXmlSessionDatabaseRelationTypes   _parsedSystemTableConstraintTypes,
                        Map                                 _parsedIntegerDomains,
                        LanguageId                          _sessionLanguage,
                        StackBase                           _subComponentPath,
                        PCRuntimeInstanceIdManager          _runtimeInstanceIdManager,
                        PCPriceMethod                       _priceMethod = PCPriceMethod::Cost,
                        PCRuntimePriceModelInstance         _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct()
                        )
    {
        using (var activityContext = logger.preRuntime().generateComponentXml())
        {
            #PCTableConstraint
            EcoResCategoryAttribute                 categoryAttribute;
            PCComponentConstraint                   componentConstraint;
            PCExpressionConstraint                  expressionConstraint;
            PCTableConstraint                       tableConstraint;
            PCSubComponent                          subComponent;
            PCComponentControl                      componentControl_subComponent;
            PCComponentAttributeGroup               componentAttributeGroup;
            PCComponentAttributeGroupCategoryAttr   attributeGroup;
            PCComponentControlSubComponent          subComponentControl;
            PCCalculation                           calculation;
            PCClassPriceCalculation                 classPriceCalculation;
            PCPriceBasePrice                        priceBasePrice;
            PCPriceExpressionRule                   priceExpressionRule;
            PCPriceExpressionValue                  priceExpressionValue;
            PCPriceModelCurrency                    priceModelCurrency;
            PCXmlWriter                             subComponentTypeWriter      = PCXmlWriter::construct();
            PCXmlWriter                             subComponentTreeWriter      = PCXmlWriter::construct();
            Set                                     subComponentTypeNames       = new Set(Types::String);
            Map                                     tableConstraintRelationMap  = this.createTableConstraintMap(_component, _subComponentPath);
            Map                                     attributeDefaultValuesMap   = this.createAttributeDefaultValuesMap(_component, _componentInstance);
            Map                                     attributeValuesMap          = this.createAttributeValuesMap(_component, _componentInstance);
            Map                                     attributeModifiersMap       = this.createAttributeModifiersMap(_component);
            PCXmlSessionComponentAttributeBindings  xmlSessionAttributeBindings = this.createAttributeBindingsCollection(_component);

            PCXmlSessionWriterBOMRoute              xmlSessionWriterBOMRoute                = PCXmlSessionWriterBOMRoute::construct();
            PCXmlSessionWriterComponentAttribute    xmlSessionWriterComponentAttribute      = PCXmlSessionWriterComponentAttribute::construct();
            PCXmlSessionWriterCompAttributeGroup    xmlSessionWriterComponentAttributeGroup = PCXmlSessionWriterCompAttributeGroup::construct();
            PCXmlSessionWriterSubComponent          xmlSessionWriterSubComponent            = PCXmlSessionWriterSubComponent::construct();
            PCXmlSessionWriterCalculation           xmlSessionWriterCalculation             = PCXmlSessionWriterCalculation::construct();
            PCXmlSessionWriterPriceElement          xmlSessionWriterPriceElement            = PCXmlSessionWriterPriceElement::construct();

            PCSolverVariable        solverVariable;
            EcoResAttributeType     domain;
            EcoResAttribute         attribute;
            str                     functionName = funcName();
            CurrencyCode            currency;
            RefRecId                priceModel;

            PCContractNotNull::assertObject(_attributeTypeWriter, functionName);
            PCContractNotNull::assertObject(_componentTreeWriter, functionName);
            PCContractNotNull::assertObject(_parsedTypes, functionName);
            PCContractNotNull::assertObject(_parsedIntegerDomains, functionName);

            this.writeStart(_component, _assignedComponentID, _componentTreeWriter, _runtimeInstanceIdManager);

            //Ungrouped Attributes
            while   select categoryAttribute
        where   categoryAttribute.Category == _component.RecId
        join    RecId from attribute
        where   attribute.RecId == categoryAttribute.Attribute
        join    domain
        where   domain.RecId == attribute.AttributeType
        join    Name from solverVariable
        where   solverVariable.Attribute == categoryAttribute.Attribute
        notexists join attributeGroup
        where   attributeGroup.CategoryAttribute == categoryAttribute.RecId
        join    RecId from componentAttributeGroup
        where   componentAttributeGroup.ComponentControl == _componentControl.RecId
        &&      attributeGroup.ComponentAttributeGroup == componentAttributeGroup.RecId
            {
                xmlSessionWriterComponentAttribute.write(categoryAttribute,
                _attributeTypeWriter,
                _componentTreeWriter,
                _parsedTypes,
                _parsedSystemTableConstraintTypes,
                _parsedIntegerDomains,
                domain,
                solverVariable,
                _sessionLanguage,
                tableConstraintRelationMap,
                attributeDefaultValuesMap,
                attributeValuesMap,
                attributeModifiersMap,
                xmlSessionAttributeBindings
                ,_runtimeInstanceIdManager
                );
            }

            //grouped attributes
            while select componentAttributeGroup
        order by componentAttributeGroup.uiOrder
        where componentAttributeGroup.ComponentControl == _componentControl.RecId
            {
                xmlSessionWriterComponentAttributeGroup.write(componentAttributeGroup,
                _attributeTypeWriter,
                _componentTreeWriter,
                _component,
                _parsedTypes,
                _parsedSystemTableConstraintTypes,
                _parsedIntegerDomains,
                _sessionLanguage,
                tableConstraintRelationMap,
                attributeDefaultValuesMap,
                attributeValuesMap,
                attributeModifiersMap,
                xmlSessionAttributeBindings
                ,_runtimeInstanceIdManager
                );
            }

            //  expression constraint should preceed table constraints to satisfy the XML schema specification in the .NET control.
            while select expressionConstraint
            join Name from componentConstraint
            where   componentConstraint.ComponentClass  == _component.RecId  &&
                    componentConstraint.Constraint      == expressionConstraint.RecId
            {
                _componentTreeWriter.writeStartElement(#constraintElement);
                _componentTreeWriter.writeAttributeString(#constraintIdAttribute, componentConstraint.Name);
                expressionConstraint.toXML(_componentTreeWriter);
                _componentTreeWriter.writeEndElement();
            }

            while select tableConstraint
            join Name from componentConstraint
            where   componentConstraint.ComponentClass  == _component.RecId  &&
                    componentConstraint.Constraint      == tableConstraint.RecId
            {
                _componentTreeWriter.writeStartElement(#TableConstraint);
                _componentTreeWriter.writeAttributeString(#tableConstraintName, componentConstraint.Name);
                tableConstraint.toXML(_componentTreeWriter);
                _componentTreeWriter.writeEndElement();
            }

            while select calculation
            where calculation.ComponentClass == _component.RecId
            {
                xmlSessionWriterCalculation.write(calculation, _componentTreeWriter);
            }

            if (_priceMethod == PCPriceMethod::Attribute)
            {
                using (var priceActivityContext =  logger.preRuntime().generatePriceExpressionsXml())
                {

                    currency    = _runtimePriceModelInstance.parmPriceModelCurrency();
                    priceModel  = _runtimePriceModelInstance.parmPriceModel();

                    priceModelCurrency = PCPriceModelCurrency::findByPriceModelAndCurrency(priceModel, currency);

                    select firstOnly PriceExpression from priceExpressionValue
                where priceExpressionValue.PriceModelCurrency == priceModelCurrency.RecId
                    join priceBasePrice
                    where priceBasePrice.RecId == priceExpressionValue.PriceElement
                        join TableId from classPriceCalculation
                            where classPriceCalculation.RecId == priceBasePrice.ClassPriceCalculation
                            && classPriceCalculation.PriceModel == priceModel
                            && classPriceCalculation.ComponentClass == _component.RecId;

                    if (priceBasePrice)
                    {
                        xmlSessionWriterPriceElement.write(priceBasePrice, priceExpressionValue.PriceExpression, _componentTreeWriter);
                    }

                    while select PriceExpression from priceExpressionValue
                where priceExpressionValue.PriceModelCurrency == priceModelCurrency.RecId
                    join priceExpressionRule
                    where priceExpressionRule.RecId == priceExpressionValue.PriceElement
                        join TableId from classPriceCalculation
                            where classPriceCalculation.RecId == priceExpressionRule.ClassPriceCalculation
                            && classPriceCalculation.PriceModel == priceModel
                            && classPriceCalculation.ComponentClass == _component.RecId
                    {
                        xmlSessionWriterPriceElement.write(priceExpressionRule, priceExpressionValue.PriceExpression, _componentTreeWriter);
                    }
                }
            }

            // write xml for bom and routes and their conditions
            xmlSessionWriterBOMRoute.write(_component.RecId, _componentTreeWriter);

            //ungrouped subcomponents
            while select subComponent
                where subComponent.ParentComponentClass == _component.RecId
                notexists join componentControl_subComponent
                    where componentControl_subComponent.ConfigurationControl == _modelUIControl.RecId
                join subComponentControl
                    where subComponentControl.ComponentControl == componentControl_subComponent.RecId
                        && subComponentControl.SubComponent == subComponent.RecId
                        && subComponentControl.ParentComponentControl == _componentControl.RecId
            {
                xmlSessionWriterSubComponent.write(
                                            subComponent,
                                            _attributeTypeWriter,
                                            subComponentTypeWriter,
                                            subComponentTreeWriter,
                                            _componentInstance,
                                            _modelUIControl,
                                            // Empty component control is expected for the ungrouped subcomponents
                                            componentControl_subComponent,
                                            _parsedTypes,
                                            _parsedSystemTableConstraintTypes,
                                            _parsedIntegerDomains,
                                            subComponentTypeNames,
                                            _sessionLanguage,
                                            _subComponentPath,
                                            _runtimeInstanceIdManager,
                                            _priceMethod,
                                            _runtimePriceModelInstance);
            }

            //ordered subcomponents
            while select subComponent
                where subComponent.ParentComponentClass == _component.RecId
                join RecId, uiOrder from componentControl_subComponent
                    order by uiOrder asc
                    where componentControl_subComponent.ConfigurationControl == _modelUIControl.RecId
                join RecId from subComponentControl
                    where subComponentControl.ComponentControl == componentControl_subComponent.RecId
                        && subComponentControl.SubComponent == subComponent.RecId
                        && subComponentControl.ParentComponentControl == _componentControl.RecId
            {
                xmlSessionWriterSubComponent.write(
                                            subComponent,
                                            _attributeTypeWriter,
                                            subComponentTypeWriter,
                                            subComponentTreeWriter,
                                            _componentInstance,
                                            _modelUIControl,
                                            componentControl_subComponent,
                                            _parsedTypes,
                                            _parsedSystemTableConstraintTypes,
                                            _parsedIntegerDomains,
                                            subComponentTypeNames,
                                            _sessionLanguage,
                                            _subComponentPath,
                                            _runtimeInstanceIdManager,
                                            _priceMethod,
                                            _runtimePriceModelInstance);
            }

            this.writeEnd(_componentTreeWriter, subComponentTreeWriter, subComponentTypeWriter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the starting XML tags for the component.
    /// </summary>
    /// <param name="_component">
    /// The component record for which to generate the XML.
    /// </param>
    /// <param name="_assignedComponentID">
    /// The name assigned to the component in the generated XML.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    /// A runtime instance ID manager.
    /// </param>
    protected void writeStart(  PCClass                     _component,
                                str                         _assignedComponentID,
                                PCXmlWriter                 _componentTreeWriter,
                                PCRuntimeInstanceIdManager  _runtimeInstanceIdManager
                                )
    {
        _componentTreeWriter.writeStartElement(#componentElement);
        _componentTreeWriter.writeAttributeString(#nameAttribute, _assignedComponentID);

        // write the unique identifier for the component definition to XML
        _componentTreeWriter.writeAttributeString(#componentId, int642str(_component.RecId));
        _componentTreeWriter.writeAttributeString(#instanceId, int2str(_runtimeInstanceIdManager.getNextId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterComponent construct()
    {
        return new PCXmlSessionWriterComponent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>