<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEncumbranceReconciliationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerEncumbranceReconciliationContract</c> class serves as a data contract for the <c>LedgerEncumbranceReconciliation</c> report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(LedgerEncumbranceReconciliationUIBuilder))
]
public class LedgerEncumbranceReconciliationContract implements SysOperationValidatable
{
    boolean                     includeEncumbranceBalance;
    boolean                     includePreEncumbranceBalance;
    boolean                     includeDetails;
    boolean                     differencesOnly;
    FiscalYearName              fiscalYearName;
    Name                        dimensionAttributeName;
    FromDate                    fromDate;
    ToDate                      toDate;
    ReconciliationPeriodType    reconciliationPeriodType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDifferencesOnly</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('DifferencesOnly'),
        SysOperationLabelAttribute(literalStr("@SYS57830")),
        SysOperationHelpTextAttribute(literalStr("@SYS328295"))
    ]
    public boolean parmDifferencesOnly(boolean _differencesOnly = differencesOnly)
    {
        differencesOnly = _differencesOnly;
        return differencesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttributeName</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('DimensionAttributeName'),
        SysOperationLabelAttribute(literalStr("@SYS14926")),
        SysOperationHelpTextAttribute(literalStr("@SYS328293"))
    ]
    public Name parmDimensionAttributeName(Name _dimensionAttributeName = dimensionAttributeName)
    {
        dimensionAttributeName = _dimensionAttributeName;
        return dimensionAttributeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalYearName</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('FiscalYearName'),
        SysOperationLabelAttribute(literalStr("@SYS13292")),
        SysOperationHelpTextAttribute(literalStr("@SYS328292"))
    ]
    public FiscalYearName parmFiscalYearName(FiscalYearName _fiscalYearName = fiscalYearName)
    {
        fiscalYearName = _fiscalYearName;
        return fiscalYearName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalStr("@SYS329084")),
        SysOperationHelpTextAttribute(literalStr("@SYS329085"))
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDetails</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('IncludeDetails'),
        SysOperationLabelAttribute(literalStr("@SYS316360")),
        SysOperationHelpTextAttribute(literalStr("@SYS328294"))
    ]
    public boolean parmIncludeDetails(boolean _includeDetails = includeDetails)
    {
        includeDetails = _includeDetails;
        return includeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeEncumbranceBalance</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('IncludeEncumbranceBalance'),
        SysOperationLabelAttribute(literalStr("@SYS328288")),
        SysOperationHelpTextAttribute(literalStr("@SYS328289"))
    ]
    public boolean parmIncludeEncumbranceBalance(boolean _includeEncumbranceBalance = includeEncumbranceBalance)
    {
        includeEncumbranceBalance = _includeEncumbranceBalance;
        return includeEncumbranceBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePreEncumbranceBalance</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('IncludePreEncumbranceBalance'),
        SysOperationLabelAttribute(literalStr("@SYS328290")),
        SysOperationHelpTextAttribute(literalStr("@SYS328291"))
    ]
    public boolean parmIncludePreEncumbranceBalance(boolean _includePreEncumbranceBalance = includePreEncumbranceBalance)
    {
        includePreEncumbranceBalance = _includePreEncumbranceBalance;
        return includePreEncumbranceBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconciliationPeriodType</Name>
				<Source><![CDATA[
        [DataMemberAttribute('ReconciliationPeriodType')]
    public ReconciliationPeriodType parmReconciliationPeriodType(ReconciliationPeriodType _reconciliationPeriodType = reconciliationPeriodType)
    {
        reconciliationPeriodType = _reconciliationPeriodType;
        return reconciliationPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalStr("@SYS329086")),
        SysOperationHelpTextAttribute(literalStr("@SYS329087"))
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data contract values.
    /// </summary>
    /// <returns>
    /// true if all the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean             isValid = true;
        LegalEntity         legalEntity;
        FiscalCalendarYear  fiscalCalendarYear;

        if (reconciliationPeriodType == ReconciliationPeriodType::FiscalYear)
        {
            legalEntity         = CompanyInfo::findDataArea(curext()).RecId;
            fiscalCalendarYear  = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(legalEntity), fiscalYearName);

            if (!fiscalCalendarYear)
            {
                isValid = checkFailed(strFmt("@SYS329212", "@SYS13292"));
            }
        }
        else if (reconciliationPeriodType == ReconciliationPeriodType::DateRange)
        {
            if (fromDate == dateNull() || toDate == dateNull() || fromDate > toDate)
            {
                isValid = checkFailed("@SYS329088");
            }
        }

        if (dimensionAttributeName == "" || !DimensionAttribute::findByName(dimensionAttributeName))
        {
            isValid = checkFailed(strFmt("@SYS326112", "@SYS14926"));
        }

        if (!includeEncumbranceBalance && !includePreEncumbranceBalance)
        {
            isValid = checkFailed("@SYS319154");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerEncumbranceReconciliationContract construct()
    {
        return new LedgerEncumbranceReconciliationContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>