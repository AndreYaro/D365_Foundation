<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceSpecDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceSpecDP</c> class is the report data provider class for the <c>VendInvoiceSpec</c>
/// report.
/// </summary>
[SRSReportQueryAttribute(querystr(VendInvoiceSpec)), SRSReportParameterAttribute(classstr(VendInvoiceSpecContract))]
public class VendInvoiceSpecDP extends SRSReportDataProviderBase
{
    VendInvoiceSpecTmp vendInvoiceSpecTmp;
    Boolean newPage;
    Boolean printDimensions;
    DefaultDimensionView defaultDimensionView;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendInvoiceSpecTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>VendInvoiceSpecTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>VendInvoiceSpecTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendInvoiceSpecTmp))]
    public VendInvoiceSpecTmp getVendInvoiceSpecTmp()
    {
        select vendInvoiceSpecTmp;
        return vendInvoiceSpecTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>VendInvoiceSpecTmp</c> temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The table ID to use when you insert the records.
    /// </param>
    /// <param name="_taxSpec">
    /// A <c>TaxSpec</c> object.
    /// </param>
    private void insertIntoTempTable(Common _cursor, TaxSpec _taxSpec = null)
    {
        VendInvoiceJour vendInvoiceJour;        
        VendInvoiceTrans vendInvoiceTrans;
        TaxTrans taxTrans;
        TaxSpec taxSpec = _taxSpec;

        if (defaultDimensionView)
        {
            vendInvoiceSpecTmp.DisplayValue = defaultDimensionView.DisplayValue;
            vendInvoiceSpecTmp.ReportColumnName = defaultDimensionView.ReportColumnName;
            vendInvoiceSpecTmp.DimensionDescription = defaultDimensionView.dimensionDiscription();
            vendInvoiceSpecTmp.DefaultDimensionName = defaultDimensionView.Name;
            vendInvoiceSpecTmp.DimensionAttributeId = defaultDimensionView.DimensionAttributeId;
        }

        switch (_cursor.TableId)
        {
            case tablenum(vendInvoiceJour):
                vendInvoiceJour = _cursor as VendInvoiceJour;
                vendInvoiceSpecTmp.InvoiceAccount = vendInvoiceJour.InvoiceAccount;
                vendInvoiceSpecTmp.OrderAccount = vendInvoiceJour.OrderAccount;
                vendInvoiceSpecTmp.PurchId = vendInvoiceJour.PurchId;
                vendInvoiceSpecTmp.InvoiceId = vendInvoiceJour.InvoiceId;
                vendInvoiceSpecTmp.InvoiceDate = vendInvoiceJour.InvoiceDate;
                vendInvoiceSpecTmp.DueDate = vendInvoiceJour.DueDate;
                vendInvoiceSpecTmp.InvoiceAccountName = vendInvoiceJour.vendTable_InvoiceAccount().Name();
                vendInvoiceSpecTmp.OrderAccountName = vendInvoiceJour.vendTable_OrderAccount().Name();
                vendInvoiceSpecTmp.PurchName = vendInvoiceJour.purchTable().PurchName;
                vendInvoiceSpecTmp.ItemBuyerGroupId = vendInvoiceJour.ItemBuyerGroupId;
                vendInvoiceSpecTmp.DocumentNum = vendInvoiceJour.DocumentNum;
                vendInvoiceSpecTmp.DocumentDate = vendInvoiceJour.DocumentDate;
                vendInvoiceSpecTmp.CurrencyCode = vendInvoiceJour.CurrencyCode;
                vendInvoiceSpecTmp.ExchRate = vendInvoiceJour.ExchRate;
                vendInvoiceSpecTmp.SalesBalance = vendInvoiceJour.SalesBalance;
                vendInvoiceSpecTmp.EndDisc = vendInvoiceJour.EndDisc;
                vendInvoiceSpecTmp.SumMarkup = vendInvoiceJour.SumMarkup;
                vendInvoiceSpecTmp.SumTax = vendInvoiceJour.SumTax;
                vendInvoiceSpecTmp.InvoiceRoundOff = vendInvoiceJour.InvoiceRoundOff;
                vendInvoiceSpecTmp.InvoiceAmount = vendInvoiceJour.InvoiceAmount;
                vendInvoiceSpecTmp.VendInvJourRecId = vendInvoiceJour.RecId;
                break;

            case tablenum(vendInvoiceTrans):
                vendInvoiceTrans = _cursor as VendInvoiceTrans;
                vendInvoiceSpecTmp.ItemId = vendInvoiceTrans.ItemId;
                vendInvoiceSpecTmp.Name = vendInvoiceTrans.Name;
                vendInvoiceSpecTmp.Qty = vendInvoiceTrans.Qty;
                vendInvoiceSpecTmp.PurchPrice = vendInvoiceTrans.PurchPrice;
                vendInvoiceSpecTmp.GrossAmount = vendInvoiceTrans.grossAmount();
                vendInvoiceSpecTmp.DiscAmount = vendInvoiceTrans.DiscAmount;
                vendInvoiceSpecTmp.LineAmountInclTax = vendInvoiceTrans.lineAmountInclTax();
                vendInvoiceSpecTmp.TaxWriteCode = vendInvoiceTrans.TaxWriteCode;
                vendInvoiceSpecTmp.VendInvTransRecId = vendInvoiceTrans.RecId;
                break;
                
            case tablenum(TaxTrans):
                taxTrans = _cursor as TaxTrans;
                vendInvoiceSpecTmp.TaxCode = taxSpec.taxCode();
                vendInvoiceSpecTmp.TaxBaseQty = taxSpec.taxBaseQty();
                vendInvoiceSpecTmp.TaxBaseAmount = -taxSpec.taxBaseAmount();
                vendInvoiceSpecTmp.TaxAmount = -taxSpec.taxAmount();
                vendInvoiceSpecTmp.PrintCode = taxSpec.taxWriteCode();
                break;
        }

        vendInvoiceSpecTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// Microsoft SQL Server Reporting Services at runtime. The method should compute data and populate the
    /// data tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        QueryRun queryRunVendInvoiceTrans;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        TaxSpec taxSpec;
        TaxTrans taxTrans;
        boolean blInsert;

        VendInvoiceSpecContract contract = this.parmDataContract() as VendInvoiceSpecContract;
        newPage = contract.parmNewPage();
        printDimensions = contract.parmPrintDimensions();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            vendInvoiceJour = queryRun.get(tablenum(VendInvoiceJour));
            defaultDimensionView = queryRun.get(tablenum(DefaultDimensionView));

            if (vendInvoiceJour)
            {
                vendInvoiceSpecTmp.clear();
                ledgerJournalVoucherChanged.clear();
                this.insertIntoTempTable(vendInvoiceJour);
                queryRunVendInvoiceTrans = new TradeLoopTrans(vendInvoiceJour, tablenum(VendInvoiceTrans)).buildQueryRun();

                while (queryRunVendInvoiceTrans.next())
                {
                    vendInvoiceTrans = queryRunVendInvoiceTrans.get(tablenum(VendInvoiceTrans));
                    blInsert = true;
                    this.insertIntoTempTable(vendInvoiceTrans);
                }

                if (!vendInvoiceJour.PurchId)
                {
                    select firstOnly ToVoucher, ToDate from ledgerJournalVoucherChanged
                        where ledgerJournalVoucherChanged.FromVoucher == vendinvoicejour.ledgervoucher &&
                              ledgerJournalVoucherChanged.FromDate == vendinvoicejour.InvoiceDate;
                }

                taxSpec = TaxSpec::construct(ledgerJournalVoucherChanged.ToVoucher ? ledgerJournalVoucherChanged.ToVoucher : vendInvoiceJour.LedgerVoucher,
                                             ledgerJournalVoucherChanged.ToDate ? ledgerJournalVoucherChanged.ToDate : vendInvoiceJour.InvoiceDate, vendInvoiceJour.RecId);

                taxSpec.parmLanguageId(vendInvoiceJour.LanguageId);

                while (taxSpec.parmTaxSpec())
                {
                    blInsert = true;
                    this.insertIntoTempTable(taxTrans,taxSpec);
                }

                if (!blInsert)
                {
                    this.insertIntoTempTable(defaultDimensionView);
                }

                blInsert = false;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>