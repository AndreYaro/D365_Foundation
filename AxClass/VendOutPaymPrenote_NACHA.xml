<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymPrenote_NACHA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendOutPaym_NACHA</c> class generates pre-notes in NACHA format.
/// </summary>
class VendOutPaymPrenote_NACHA extends VendOutPaym_NACHA
{
    List journalList;
    NACHAFormats fileNACHAFormat;
    CompanyBankAccountId companyBankAccountId;

    #define.strPrenote("Prenote")
    #define.bankTransType("07")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the batch control and Automated Clearing House (ACH) control records, and prints the control
    ///    report or payment advice, or both.
    /// </summary>
    /// <remarks>
    ///    This is called at the end of the Electronic Funds Transfer (EFT) output file creation to write the
    ///    batch control and ACH control records, and to print the control report or payment advice, or both.
    /// </remarks>
    public void close()
    {
        file.writeExp(this.createBatchControlRecord());

        if (#DebugNACHA)
        {
            this.addBatchControlFieldPositions();
        }

        file.writeExp(this.createACH_ControlRecord());

        if (#DebugNACHA)
        {
            this.addACHControlFieldPositions();
        }

        this.createFillerRecordsToBlockTheFile();

        if (printControlReport)
        {
            this.printControlReport();
        }

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendPaymModeSpec</c> object that has the payment specification of CCD, CTX, and PPD.
    /// </summary>
    /// <param name="_paymMode">
    /// The payment method.
    /// </param>
    /// <param name="_paymSpec">
    /// The payment specification.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustVendPaymModeSpec</c> class.
    /// </returns>
    public CustVendPaymModeSpec findPaymModeSpec(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        VendPaymModeSpec vendPaymModeSpec;

        vendPaymModeSpec.PaymMode = #strPrenote;

        switch (this.parmFileNACHAFormat())
        {
            case NACHAFormats::CCD:
                vendPaymModeSpec.ClassId = classnum(VendOutPaymRecord_NACHA_CCD);
                vendPaymModeSpec.Specification = enum2str(NACHAFormats::CCD);
                vendPaymModeSpec.Name = enum2str(NACHAFormats::CCD);
                break;
            case NACHAFormats::CTX:
                vendPaymModeSpec.ClassId = classnum(VendOutPaymRecord_NACHA_CTX);
                vendPaymModeSpec.Specification = enum2str(NACHAFormats::CTX);
                vendPaymModeSpec.Name = enum2str(NACHAFormats::CTX);
               break;
            case NACHAFormats::PPD:
                vendPaymModeSpec.ClassId = classnum(VendOutPaymRecord_NACHA_PPD);
                vendPaymModeSpec.Specification = enum2str(NACHAFormats::PPD);
                vendPaymModeSpec.Name = enum2str(NACHAFormats::PPD);
                break;
        }

        return vendPaymModeSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>VendPaymModeTable</c> object that uses a NACHA export format.
    /// </summary>
    /// <param name="_paymMode">
    ///    The name of the method of payment.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for updating.
    /// </param>
    /// <returns>
    ///    The <c>CustVendPaymModeTable</c> table.
    /// </returns>
    public CustVendPaymModeTable findPaymModeTable(PaymMode _paymMode, boolean _forupdate = false)
    {
        VendPaymModeTable vendPaymModeTable;

        vendPaymModeTable.Name = #strPrenote;
        vendPaymModeTable.PaymMode = #strPrenote;
        vendPaymModeTable.parmPaymAccount(this.parmCompanyBankAccountId(), LedgerJournalACType::Bank);
        vendPaymModeTable.ClassId = classnum(VendOutPaymPrenote_NACHA);
        vendPaymModeTable.BankTransType = #bankTransType;
        vendPaymModeTable.TypeOfDraft = TypeOfDraft::NoDraft;

        return vendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates payment lines for pre-note generation by using a <c>BankPrenoteJournalList</c> object.
    /// </summary>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        VendOutPaymRecord vendOutPaymRecord;

        List valueList = this.parmJournalList();
        BankPrenoteJournalList prenoteJournalList;

        setprefix("@SYS128497");
        ListEnumerator valueListEnumerator = valueList.getEnumerator();
        int failedCount = 0;

        while (valueListEnumerator.moveNext())
        {
            prenoteJournalList = valueListEnumerator.current();
            ledgerJournalTrans = this.setLedgerJournalTrans(prenoteJournalList);

            vendOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                 ledgerJournalTrans.PaymSpec,
                                                                 this,
                                                                 this.vendPaym(ledgerJournalTrans));
            vendOutPaymRecord.parmFile(file);
            vendOutPaymRecord.parmIsPrenote(true);

            setprefix(strfmt("@SYS128879",
                             ledgerJournalTrans.TransDate,
                             ledgerJournalTrans.parmAccount()));

            if (vendOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
            {
                vendOutPaymRecord.output();
                outPaymRecordList.addEnd(vendOutPaymRecord);

                VendBankAccount vendBankAccount = vendOutPaymRecord.getVendBankAccount();
                VendPrenote VendPrenote;
                vendPrenote.BankAccountId = this.parmBankAccountID();
                vendPrenote.VendAccount = vendBankAccount.VendAccount;
                vendPrenote.VendAccountId = vendBankAccount.AccountID;
                vendPrenote.PrenoteApprovedDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), bankAccountTable.PrenoteResponseDays);
                vendPrenote.insert();
            }
            else
            {
                failedCount ++;
            }
        }
        if (failedCount == valueList.elements())
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction code used in the output file.
    /// </summary>
    /// <param name="_vendBankAccount">
    /// The bank account type, which is either the <c>BankAccountType::CheckingAccount</c> or
    /// <c>BankAccountType::SavingsAccount</c> enumeration value.
    /// </param>
    /// <returns>
    /// If the bank account is neither the <c>BankAccountType::CheckingAccount</c> nor the
    /// <c>BankAccountType::SavingsAccount</c> value, the transaction code uses the code for checking
    /// accounts. The transaction code of Accounts Payable Checking for prenote is 23.The transaction code of Accounts
    /// Payable Savings for prenote is 33.
    /// </returns>
    public int getTransactionCode(VendBankAccount _vendBankAccount)
    {
        int transactionCode;

        switch (_vendBankAccount.BankAccountType)
        {
            case BankAccountType::CheckingAccount:
                transactionCode = PaymentPrenoteNACHATransactionCode::CheckingCredit;
                break;

            case BankAccountType::SavingsAccount:
                transactionCode = PaymentPrenoteNACHATransactionCode::SavingCredit;
                break;

            default:
                transactionCode = PaymentPrenoteNACHATransactionCode::CheckingCredit;
                break;
        }

        return transactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the format that is displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format that is displayed in the user interface.
    /// </returns>
    /// <remarks>
    /// This method must return the name of the format that is displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. They can serve as
    /// parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the specified file for pre-notes.
    /// </summary>
    /// <remarks>
    ///    This method opens a file that is in append mode or it creates a new file.
    /// </remarks>
    public void open()
    {
        sequenceNumber = 0;

        // Open file for text-output
        if (file != null && file.getStream().Length > 0)
        {
            file = this.openExistingFile(file.getStream(), this.codepage(), StreamType::AsciiIo);
        }
        else
        {
            file = this.openFile(this.codepage());
        }

        if (!file || file.status() != IO_Status::Ok)
        {
            // Error opening the file
            throw error(strfmt("@SYS73665", filename));
        }

        file.writeExp(this.createACH_HeaderRecord());

        if (#DebugNACHA)
        {
            this.addACHHeaderFieldPositions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmCompanyBankAccountId(CompanyBankAccountId _companyBankAccountId = companyBankAccountId)
    {
        companyBankAccountId = _companyBankAccountId;

        return companyBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNACHAFormat</Name>
				<Source><![CDATA[
    public NACHAFormats parmFileNACHAFormat(NACHAFormats _fileNACHAFormat = fileNACHAFormat)
    {
        fileNACHAFormat = _fileNACHAFormat;

        return fileNACHAFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalList</Name>
				<Source><![CDATA[
    public List parmJournalList(List _journalList = journalList)
    {
        journalList = _journalList;

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the file name.
    /// </summary>
    /// <param name="_filename">
    ///    The new name of the file.
    /// </param>
    public void setFileName(Filename _filename)
    {
        filename = _filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFile</Name>
				<Source><![CDATA[
    private void setFile(StreamIo _file)
    {
        file = _file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets values in the <c>LedgerJournalTrans</c> object that will be used for pre-note generation.
    /// </summary>
    /// <param name="_prenoteJournalList">
    ///    A <c>BankPrenoteJournalList</c> object that is used to set values in the <c>LedgerJournalTrans</c>
    ///    object.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTrans</c> object.
    /// </returns>
    public LedgerJournalTrans setLedgerJournalTrans(BankPrenoteJournalList _prenoteJournalList)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.Company = CompanyInfo::find().company();
        ledgerJournalTrans.parmAccount(_prenoteJournalList.parmAccountNum(), LedgerJournalACType::Vend);
        ledgerJournalTrans.LineNum = _prenoteJournalList.parmLineNum();
        ledgerJournalTrans.Txt = #strPrenote;
        ledgerJournalTrans.AmountCurCredit = 0;
        ledgerJournalTrans.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        ledgerJournalTrans.PaymMode = #strPrenote;
        ledgerJournalTrans.PaymSpec = enum2str(this.parmFileNACHAFormat());
        ledgerJournalTrans.parmOffsetAccount(this.parmCompanyBankAccountId(), LedgerJournalACType::Bank);
        ledgerJournalTrans.BankAccountId = this.parmCompanyBankAccountId();
        ledgerJournalTrans.CustVendBankAccountId = _prenoteJournalList.parmBankAccountId();
        ledgerJournalTrans.ExchRate = 0;
        ledgerJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog box, and it must be called in the <c>run</c> method. The method must only contain code that
    /// adds warnings to the Infolog. A throw is not enabled within this method. The method returns errors
    /// by using the <c>Global::CheckFailed</c> method. Export formats that are designed to handle only one
    /// method of payment per payment media must call the <c>checkUniquePaymMode</c> method. The default
    /// value of the <paramref name="_calledFrom" /> parameter is null.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        DimensionAttributeValue dimAttrValue;
        DimensionAttributeLevelValue dimAttrLevelValue;
        DimensionAttributeValueGroup dimAttrValueGroup;
        DimensionAttributeValueGroupCombination dimAttrValueGroupCombo;

        boolean ret = super();

        // From the DimensionAttributeValueCombination get to the DimensionAttributeValue for the MainAccount and determine if it IsSuspended or not
        select firstonly RecId from dimAttrValueGroupCombo
            where dimAttrValueGroupCombo.DimensionAttributeValueCombination == bankAccountTable.LedgerDimension
                && dimAttrValueGroupCombo.Ordinal == 1
            join RecId from dimAttrValueGroup
                where dimAttrValueGroup.RecId == dimAttrValueGroupCombo.DimensionAttributeValueGroup
            join RecId from dimAttrLevelValue
                where dimAttrLevelValue.DimensionAttributeValueGroup == dimAttrValueGroup.RecId
            join IsSuspended from dimAttrValue
                where dimAttrValue.RecId == dimAttrLevelValue.DimensionAttributeValue
                    && dimAttrValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        if (ret && dimAttrValue.IsSuspended == NoYes::Yes)
        {
            info(strfmt("@SYS128880",bankAccountTable.AccountID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bypasses existing file validation.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean validateFileExist()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrenote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bypasses existing file validation.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>

    public boolean validatePrenote()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>VendPaym</c> object for pre-note generation.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> buffer that will be used to set a <c>VendPaym</c> object.
    /// </param>
    /// <returns>
    ///    A <c>VendPaym</c> object.
    /// </returns>
    public VendPaym vendPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaym vendPaym;
        LedgerJournalTrans ledgerJournalTrans;
        BankAccountTable bankAcctTable;
        VendTable vendTable;
        VendBankAccount vendBankAccount;
        LogisticsPostalAddress postalAddress;

        ledgerJournalTrans = _ledgerJournalTrans;

        bankAcctTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());

        if (!bankAcctTable && ledgerJournalTrans.BankAccountId)
        {
            bankAcctTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }

        vendTable = VendTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
        vendBankAccount = VendBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);

        vendPaym = new VendPaym();

        vendPaym.ledgerJournalTrans(ledgerJournalTrans);
        vendPaym.bankAccountTable(bankAcctTable);
        vendPaym.custVendTable(vendTable);
        vendPaym.bankAccountMap(vendBankAccount);

        vendPaym.messageToSendersBank(vendBankAccount.MsgToBank);
        vendPaym.paymAmountInForeignCurrency(ledgerJournalTrans.amount());
        vendPaym.paymAmountInSendersCurrency(CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));
        vendPaym.paymCurrencyCode(Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        vendPaym.paymDate(ledgerJournalTrans.TransDate);
        vendPaym.documentDate(ledgerJournalTrans.DocumentDate);
        vendPaym.paymExchangeRate(vendBankAccount.ExchRate);
        vendPaym.paymExchangeRateReference(vendBankAccount.ExchRateRef);
        vendPaym.paymId(ledgerJournalTrans.PaymId);
        vendPaym.paymNote(ledgerJournalTrans.PaymentNotes);
        vendPaym.paymPurposeCode(ledgerJournalTrans.BankCentralBankPurposeCode ?
                                                     ledgerJournalTrans.BankCentralBankPurposeCode :
                                                     vendTable.BankCentralBankPurposeCode);
        vendPaym.paymPurposeText(ledgerJournalTrans.BankCentralBankPurposeText ?
                                                     ledgerJournalTrans.BankCentralBankPurposeText :
                                                     vendTable.BankCentralBankPurposeText);
        vendPaym.paymReference(ledgerJournalTrans.PaymReference);
        vendPaym.recieversBankTextCode(vendBankAccount.VendPaymentTextCode);
        vendPaym.recieversBankAccount(vendBankAccount.AccountNum);
        vendPaym.recieversBankAccountId(vendBankAccount.AccountID);
        vendPaym.recieversBankIban(vendBankAccount.BankIBAN);
        vendPaym.recieversBankName(vendBankAccount.Name);
        vendPaym.recieversBankCodeType(vendBankAccount.BankCodeType);
        vendPaym.recieversBankRegistrationNumber(vendBankAccount.RegistrationNum);
        postalAddress = vendTable.postalAddress();
        vendPaym.recieversCompanyAddress(postalAddress.Address);
        vendPaym.recieversCompanyAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.recieversCompanyAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.recieversCompanyAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.recieversCountryRegionId(postalAddress.CountryRegionId);
        vendPaym.recieversZipCode(postalAddress.ZipCode);
        vendPaym.recieversCountryRegionISOCode(LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);

        vendPaym.recieversBankAddress(postalAddress.Address);
        vendPaym.recieversBankAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.recieversBankAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.recieversBankAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.recieversCompanyName(vendTable.name());
        vendPaym.recieversIdentificationOfSender(vendTable.YourAccountNum);
        vendPaym.recieversSwiftAddress(vendBankAccount.swiftNo);
        vendPaym.sendersBankAccount(bankAcctTable.AccountNum);
        vendPaym.sendersBankRegistrationNumber(bankAcctTable.RegistrationNum);
        vendPaym.sendersBankName(bankAcctTable.Name);
        vendPaym.sendersBankCurrencyCode(Currency::currencyCodeISO(bankAcctTable.CurrencyCode));
        vendPaym.sendersBankMultiCurrency(bankAcctTable.BankMultiCurrency);
        postalAddress = CompanyInfo::find().postalAddress();
        vendPaym.sendersCompanyAddress(postalAddress.Address);
        vendPaym.sendersCompanyAddress1(vendPaym.textLine(postalAddress.Address,1));
        vendPaym.sendersCompanyAddress2(vendPaym.textLine(postalAddress.Address,2));
        vendPaym.sendersCompanyAddress3(vendPaym.textLine(postalAddress.Address,3));
        vendPaym.sendersCompanyName(CompanyInfo::find().name());
        vendPaym.sendersInvoiceNumber();
        vendPaym.sendersIdentificationOfReciever(vendTable.AccountNum);
        vendPaym.sendersBanksIdentificationOfSender(bankAcctTable.CompanyPaymId);
        vendPaym.feeContractAccount(bankAcctTable.FeeContractAccount);
        vendPaym.dateOfImportOfGoods(ledgerJournalTrans.ImportDate);

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendSumForPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>VendOutPaymPrenote_NACHA</c> class based on the method of payment
    ///    specified.
    /// </summary>
    /// <param name="_sumForPaym">
    ///    A <c>CustVendSumForPaym</c> object.
    /// </param>
    /// <param name = "_file">
    ///    A <c>StreamIo</c> to be used to append to a file; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendOutPaymPrenote_NACHA</c> object.
    /// </returns>
    public static VendOutPaymPrenote_NACHA newCustVendSumForPaym(CustVendSumForPaym _sumForPaym, StreamIo _file = null)
    {
        CustVendPaymModeTable custVendPaymModeTable = _sumForPaym.paymModeTable();
        CustVendPaymModeClassId classId = custVendPaymModeTable.ClassId;

        if (!classId)
        {
            throw error("@SYS82371");
        }

        VendOutPaymPrenote_NACHA vendOutPaymPrenote_NACHA = CustVendOutPaym::construct(classId);

        vendOutPaymPrenote_NACHA.parmBankAccountID(_sumForPaym.parmBankAccountID());

        if (_file != null)
        {
            vendOutPaymPrenote_NACHA.setFile(_file);
        }

        return vendOutPaymPrenote_NACHA;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>