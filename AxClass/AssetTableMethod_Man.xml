<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Man</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableMethod_Man extends AssetTableMethod
{
    AssetAmount totalAmountDep;
    private boolean isDepreciationCalcuationDone;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    AssetAmount calc()
    {
        AssetAmount assetAmount;
        AssetDepreciationProfileSpec assetDepreciationProfileSpec;
        int i;
        AssetTransDate orgPeriodEnd;
        AssetTransDate startOfPeriod;

        assetDepreciationProfileSpec = AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile, currentInterval);

        this.setAmountToDepreciate();

        orgPeriodEnd = periodEnd;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        this.calcRestPeriod(startOfPeriod);

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods ++;
        }
        else
        {
            for (i = 1; i <= prevPeriods; i++)
            {
                assetDepreciationProfileSpec = AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile, i);
                assetAmount += amountToDepreciate * (assetDepreciationProfileSpec.Percentage / 100);
                if (i == 1)
                {
                    assetAmount = assetBook.roundDepreciationAmount(
                        assetAmount * restPeriod,
                        isReportingCurrencyDepreciation);
                }
            }

            assetDepreciationProfileSpec = AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile, currentInterval);
            assetAmount += amountToDepreciate * (assetDepreciationProfileSpec.Percentage / 100);
            if (currentInterval == 1)
            {
                assetAmount = assetBook.roundDepreciationAmount(
                    assetAmount * restPeriod,
                    isReportingCurrencyDepreciation);
            }

            assetAmount = assetBook.roundDepreciationAmount(
                    assetAmount * this.revaluationFactor(),
                    isReportingCurrencyDepreciation);

            prevPeriods = 0;
            calculatePrevPeriods = false;

            if (assetDepreciationProfileSpec.Percentage != 0)
            {
                assetAmount = this.correctForMinDepreciation(assetAmount);
            }
        }

        periodEnd++;
        periodstart = periodEnd;
        periodEnd   = deprInterval.endPeriod(periodstart);

        [isDepreciationCalcuationDone, assetAmount] = this.validateDepreciationAmountWithCalculatedPeriodsAmounts(assetAmount, isDepreciationCalcuationDone);

        assetAmount = assetBook.roundDepreciationAmount(
            assetAmount,
            isReportingCurrencyDepreciation);

        totalAmountDep += assetAmount;
               
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        TransDate depStartDate;
        int MonthsInYear = 12;

        // <Remark> Calculate the rest period based on either days or months </Remark>
        if (assetDepreciationProfile.Method == AssetDepreciationMethod::Manual
            && assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar
            && assetDepreciationProfile.Accrual == AssetAccrual::Yearly
            && assetDepreciationProfile.CalculationBase == AssetDepreciationCalculationBase::Months)
        {
            depStartDate = this.calcStartDate(periodstart);
            restPeriod = (MonthsInYear - mthofyr(depStartDate) + 1) / MonthsInYear;
        }
        else if (periodEnd && periodstart && _startOfPeriod)
        {
            restPeriod = ((periodEnd - periodstart + 1) / (periodEnd - _startOfPeriod + 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the asset's starting depreciation date for posting purposes.
    /// </summary>
    /// <param name = "_startDate">The base start date.</param>
    /// <returns>
    /// The starting depreciation date.
    /// </returns>
    protected AssetDepreciationStartDate calcStartDate(AssetDepreciationStartDate _startDate)
    {
        int MonthOfYearFebruary = 2;
        int MiddleOfMonthFebruary = 14;
        int MiddleOfMonth = 15;

        AssetDepreciationStartDate startDate;
        AssetDepreciationStartDate prevDate;
        int cutOffDay = MiddleOfMonth;

        // <Remark> The month of February uses a cut off day for mid-month of 14. </Remark>
        if (mthofyr(_startDate) == MonthOfYearFebruary)
        {
            cutOffDay = MiddleOfMonthFebruary;
        }

        startDate = mkdate(1, mthofyr(_startDate), year(_startDate));
        //
        //  <Remark> If the start date is  after the 15th of the month then the
        //  "depreciation run date" will be the 1st day of the next month. </Remark>
        //
        if (dayofmth(_startDate) > cutOffDay)
        {
            prevDate = startDate;
            startDate = dateMthFwd(startDate, 1);

            if (year(prevDate) != year(startDate))
            {
                periodstart   = startDate;
                periodEnd   = deprInterval.endPeriod(startDate);
            }
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableeMethod</c> class.
    /// </summary>
    void init()
    {
        AssetTransDate startOfPeriod;

        super();

        this.setAmountToDepreciate();

        AssetTransDate transactionDate; 
        if (assetBook.LastDepreciationDate)
        {
            transactionDate = assetBook.LastDepreciationDate + 1;
            transactionDate = this.getDepreciationTransDateWithSplit(transactionDate, assetBook);
        } 
        else
        {
            transactionDate = assetBook.DepreciationStartDate;
        }
        
        prevDepAmount = this.prvDepreciationAmount(transactionDate, true);

        totalAmountDep = prevDepAmount;

        currentInterval = deprInterval.interval(assetBook.DepreciationStartDate, periodEnd);

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        this.calcRestPeriod(startOfPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    boolean next()
    {
        AssetDepreciationProfileSpec depreciationProfileSpec;

        if (isDepreciationCalcuationDone)
        {
            return false;
        }

        if (parmRunDate <= baseDate) return false;

        currentInterval++;

        if (! AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile,currentInterval))
        {
            //
            // <Remark> If the intervals do not fully depreciate the asset, then use the last interval
            // to create depreciation proposals untill the asset is fully depreciated. </Remark>
            //

            if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true 
                && assetBook.getAcquisitionAmountSign() * (amountToDepreciate - totalAmountDep) > 0))
            {
                while (currentInterval > 0)
                {
                    currentInterval--;
                    depreciationProfileSpec = AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile, currentInterval);

                    if (depreciationProfileSpec) break;
                }

                if (!currentInterval || !depreciationProfileSpec.Percentage) return false;
            }
            else
            {
                return false;
            }
        }

        this.setDepDate();

        //
        //  This prevents depreciations with invalid dates from
        //  being handled.
        //
        if (!depreciationDate || depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart) return false;

        if (assetDepreciationProfile.AssetEndDependOnServiceLife == true && currentInterval > assetBook.LifeTime) return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    private AssetAmount prvDepreciationAmount(
        AssetTransDate _assetTransDate,
        boolean _fixedDate = false)
    {
        AssetTransDate depYearStart;
        AssetAmount prvDepreciationAmount;

        if (!_fixedDate)
        {
            depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        else
        {
            depYearStart = _assetTransDate;
        }

        if (isReportingCurrencyDepreciation)
        {
            prvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation) +
                                        AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj));
        }
        else
        {
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation) +
                                        AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj));
        }
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationAmountWithCalculatedPeriodsAmounts</Name>
				<Source><![CDATA[
    private container validateDepreciationAmountWithCalculatedPeriodsAmounts(AssetAmount _periodAmount, boolean _isCalculationFinished)
    {
        AssetAmount returnAmount = _periodAmount;
        boolean isCalculationFinished = _isCalculationFinished;

        // Verify if the remaining amount needs to be in one transaction if this is the last period to calculate depreciation
        if (assetDepreciationProfile.AssetEndDependOnServiceLife == true && currentInterval >= assetBook.LifeTime)
        {
            isCalculationFinished = true;
            returnAmount = amountToDepreciate - totalAmountDep;
        }

        // Verify if the depreciation amount does not exceed remaining amount to depreciate.
        if (!prevPeriods
            && !_isCalculationFinished
            && (assetBook.getAcquisitionAmountSign() * amountToDepreciate 
                <= assetBook.getAcquisitionAmountSign() * (prevDepAmount + returnAmount + prevDepAmountExternal)))
        {
            isCalculationFinished = true;
            returnAmount = amountToDepreciate - prevDepAmount - prevDepAmountExternal;
        }

        return [isCalculationFinished, returnAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationTransDateWithSplit</Name>
				<Source><![CDATA[
    private TransDate getDepreciationTransDateWithSplit(TransDate _originalTransactionDate, AssetBook _assetBook)
    {
        TransDate transactionDate = _originalTransactionDate;

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetBook.AssetId, _assetBook.BookId);
        select firstOnly TransDate from assetTransTmp
            where assetTransTmp.BookId == _assetBook.BookId
                && assetTransTmp.AssetId == _assetBook.AssetId
                && assetTransTmp.Txt == "@SYS67430"
                && (assetTransTmp.TransType == AssetTransType::DepreciationAdj
                || assetTransTmp.TransType == AssetTransType::Depreciation);
        
        if (assetTransTmp.TransDate > _assetBook.LastDepreciationDate)
        {
            // The actual split date needs to be increased by 1 as the date 
            // will be decreased in prvDepreciationAmount() method where is decreased by 1.
            transactionDate = assetTransTmp.TransDate + 1;
        }

        return transactionDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>