<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePost_CustPackingSlip_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the posting of the CFDI document for the packing slips.
/// </summary>
public class EInvoicePost_CustPackingSlip_MX extends EInvoicePost_MX
{
    CustPackingSlipJour custPackingSlipJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createElectronicInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice record that is based on the original invoice.
    /// </summary>
    public void createElectronicInvoiceJour()
    {
        SalesParmTable salesParmTable = parmTable;

        if (salesParmTable && salesParmTable.UseCartaPorte_MX == NoYes::Yes)
        {
            eInvoiceJour.TransCardIncluded = NoYes::Yes;
            SalesTable salesTable = custPackingSlipJour.salesTable();
            TransportationDocument transDocument = TransportationDocument::find(salesTable.TransportationDocument);

            this.initEInvoiceJourFromTransDocument_MX(transDocument);

            eInvoiceJour.IdCCP_MX = this.getIdCCPForCartaPorteV3();
            eInvoiceJour.CustomsRegime_MX = this.getCustomsRegime_MX();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    protected void createElectronicInvoiceTrans()
    {
        CustPackingSlipTrans localCustPackingSlipTrans;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(EInvoiceTrans_MX));

        while select localCustPackingSlipTrans
            where localCustPackingSlipTrans.SalesId        == custPackingSlipJour.SalesId
                && localCustPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                && localCustPackingSlipTrans.DeliveryDate  == custPackingSlipJour.DeliveryDate
        {
            eInvoiceTrans.RefTableId = localCustPackingSlipTrans.TableId;
            eInvoiceTrans.RefRecId   = localCustPackingSlipTrans.RecId;

            SalesLine salesLine = localCustPackingSlipTrans.salesLine();
            if (salesLine)
            {
                eInvoiceTrans.CustomsDocNumber = salesLine.CustomsDocNumber_MX;
                eInvoiceTrans.CustomsDocDate   = salesLine.CustomsDocDate_MX;
                eInvoiceTrans.CustomsName      = salesLine.CustomsName_MX;
                eInvoiceTrans.PropertyNumber   = salesLine.PropertyNumber_MX;
                eInvoiceTrans.ProductCode      = salesLine.satProductCode_MX;
                eInvoiceTrans.uomCode          = salesLine.satUnitCode_MX;
                eInvoiceTrans.TariffFraction   = salesLine.SATTariffFraction_MX;
                eInvoiceTrans.CustomUOMCode    = salesLine.SATCustomUnitOfMeasure_MX;
                eInvoiceTrans.BrandCode        = salesLine.inventTable().BrandCodeId_MX;
                eInvoiceTrans.CustomsQty       = salesLine.SATCustomsQty_MX;

                if (eInvoiceJour.TransCardIncluded == NoYes::Yes)
                {
                    if (salesLine.inventTable().HMIMIndicator == NoYes::Yes)
                    {
                        HMIMItemMaterial itemMaterial;

                        select firstonly RegCode, PackingGroupCode from itemMaterial
                            where itemMaterial.ItemId == salesLine.ItemId;

                        eInvoiceTrans.IsHazardous = NoYes::Yes;
                        eInvoiceTrans.HazardousMaterialType = itemMaterial.RegCode;
                        eInvoiceTrans.ContainerType = itemMaterial.PackingGroupCode;
                    }
                    else
                    {
                        eInvoiceTrans.IsHazardous = NoYes::No;
                    }

                    eInvoiceTrans.CustomsMaterialType_MX = salesLine.CustomsMaterialType_MX;
                    eInvoiceTrans.CustomsDocumentType_MX = salesLine.CustomsDocumentType_MX;
                    eInvoiceTrans.MaterialDescription_MX = salesLine.MaterialDescription_MX;
                    eInvoiceTrans.IdentifierCustomsDocument_MX = salesLine.IdentifierCustomsDocument_MX;
                    
                }
            }
            eInvoiceTrans.RefEInvoiceJourRecId = eInvoiceJour.RecId;
            recordInsertList.add(eInvoiceTrans);
        }
    
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice journal.
    /// </summary>
    /// <returns>
    /// The original invoice journal.
    /// </returns>
    protected Common invoiceJour()
    {
        return custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the certificate number.
    /// </summary>
    /// <returns>
    /// The certificate number.
    /// </returns>
    protected CertificateNumber_MX getCertificateNumber()
    {
        return custPackingSlipJour.salesTable().CertificateNumber_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    protected CurrencyCode getCurrencyCode()
    {
        return custPackingSlipJour.salesTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal address.
    /// </summary>
    /// <returns>
    /// The fiscal address.
    /// </returns>
    protected LogisticsAddressCountryRegionId getFiscalAddress()
    {
        return custPackingSlipJour.salesTable().FiscalAddress_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the packing slip is for foreign customer.
    /// </summary>
    /// <returns>
    /// true if the packing slip is for foreign customer; false otherwise.
    /// </returns>
    protected ForeignTrade_MX getForeignTrade()
    {
        return custPackingSlipJour.salesTable().ForeignTrade_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the packing slip is for temporary export.
    /// </summary>
    /// <returns>
    /// true if the packing slip is for temporary export; otherwise, false.
    /// </returns>
    protected CFDITemporaryExport_MX getTemporaryExport()
    {
        return custPackingSlipJour.salesTable().CFDITemporaryExport_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the foreign tax registration number.
    /// </summary>
    /// <returns>
    /// Foreign tax registration number.
    /// </returns>
    protected numRegIdTrib_MX getForeignTaxRegistration()
    {
        return custPackingSlipJour.salesTable().custTable_InvoiceAccount().ForeignTaxRegistration_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the INCOTERM code.
    /// </summary>
    /// <returns>
    /// The INCOTERM code.
    /// </returns>
    protected SATIncoterm_MX getIncotermCode()
    {
        return custPackingSlipJour.salesTable().SATIncotermCode_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    public Date getInvoiceDate()
    {
        return custPackingSlipJour.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// The invoice ID of the <c>CustPackingSlipJour</c> record.
    /// </returns>
    public InvoiceId getInvoiceId()
    {
        return custPackingSlipJour.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    public RefRecId getInvoiceJourRecId()
    {
        return custPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    public RefTableId getInvoiceJourTableId()
    {
        return custPackingSlipJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    protected NumRegIdTrib_MX getNumRegIdTrib()
    {
        return custPackingSlipJour.salesTable().NumRegIdTrib_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShippingReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the shipping reason.
    /// </summary>
    /// <returns>
    /// The shipping reason.
    /// </returns>
    protected EInvoiceExtCodeId_MX getShippingReason()
    {
        return custPackingSlipJour.salesTable().SATShippingReason_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the document has the source certificate.
    /// </summary>
    /// <returns>
    /// true, if the document has the source certificate; false otherwise.
    /// </returns>
    protected SourceCertificate_MX getSourceCertificate()
    {
        return custPackingSlipJour.salesTable().SourceCertificate_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustPackingSlipJour _custPackingSlipJour)
    {
        super();

        custPackingSlipJour = _custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    protected RefRecId getInvoiceNumberSeq()
    {
        NumberSequenceReference numberSequenceReference = SalesParameters::numRefPackingSlipId();
        RefRecId numberSeqId;

        if (custPackingSlipJour.NumberSequenceGroup)
        {
            NumberSequenceDatatype numberDatatype = NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype);
            RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

            numberSeqId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, custPackingSlipJour.NumberSequenceGroup).NumberSequenceId;

            if (!numberSeqId && !custPackingSlipJour.SalesId)
            {
                numberSeqId = NumberSequenceReference::findNaturalKey(numberDatatype.RecId, scopeId).NumberSequenceId;
            }
        }

        if (!numberSeqId)
        {
            numberSeqId = numberSequenceReference.NumberSequenceId;
        }

        return numberSeqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicingName</Name>
				<Source><![CDATA[
    protected SATRegistrationName_MX getInvoicingName()
    {
        SATRegistrationName_MX regName = CustTable::find(custPackingSlipJour.OrderAccount).SATRegistrationName_MX;
        return regName ? regName : custPackingSlipJour.InvoicingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    protected ExchRate getExchRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPaymMethod()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    public CustPaymMode getPaymMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPurpose()
    {
        return EInvoiceCFDIParameters_MX::find().CFDIVersion >= EInvoiceCFDIVersion_MX::V4 ? 'S01' : 'P01';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    protected InvoiceAmountMST getTotalAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
    protected void initFromInvoiceJour()
    {
        super();
        eInvoiceJour.CFDIDocType = CFDIDocType_MX::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsRegime_MX</Name>
				<Source><![CDATA[
    protected CustomsRegime_MX getCustomsRegime_MX()
    {
        return custPackingSlipJour.salesTable().CustomsRegime_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        const str ShippingReasonThirdParty = '05';
        const str ShippingReasonBilledGoods = '01';

        EInvoiceCFDIReference_MX reference = EInvoiceCFDIReference_MX::findByEInvoice(eInvoiceJour.RecId);
        boolean ret = super();

        if (this.getShippingReason() == ShippingReasonThirdParty)
        {
            if (!this.getNumRegIdTrib())
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(SalesTable, NumRegIdTrib_MX)));
            }

            if (!this.getFiscalAddress())
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(SalesTable, FiscalAddress_MX)));
            }
        }

        if (this.getShippingReason() == ShippingReasonBilledGoods)
        {
            if ((reference.ReferenceType != EInvoiceCFDIReferenceType_MX::GoodsTransfer) || !reference.CFDIUUID)
            {
                ret = checkFailed("@MexicoCFDI:ShippingReasonError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForeignTrade</Name>
				<Source><![CDATA[
    protected boolean validateForeignTrade(InvoiceAmountMST _totalAmount)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCartaPorte</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the document has a transportation note.
    /// </summary>
    /// <returns>
    /// true if the document has a transportation note; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean getCartaPorte()
    {
        return invoiceJourMapping.isCartaPorteUsed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>