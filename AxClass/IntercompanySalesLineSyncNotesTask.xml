<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySalesLineSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanySalesLineSyncNotesTask</c> class handles the transfer of documents when it is
///    called from a <c>SalesLine</c> record.
/// </summary>
class IntercompanySalesLineSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                PurchLine   purchLine;
                DocuRef     fromDocuRef;
                SalesLine   salesLine             = SalesLine::findRecId(refRecId);
                CompanyId   interCompanyCompanyId = salesLine.salesTable().InterCompanyCompanyId;

                if (interCompanyCompanyId
                    && salesLine.InterCompanyInventTransId)
                {
                    boolean     docuRefExists;

                    //
                    //  Delete all notes on associated purchline & salesline in other company
                    //
                    // No need to delete all notes in order to improve performance if new notes are created
                    if (!this.isCreatedDocu())
                    {
                        changecompany(interCompanyCompanyId)
                        {
                            setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                            purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId);

                            if (purchLine.RecId
                                && purchLine.RecId != fromRecId)
                            {
                                if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled() && this.parmIsInitialSync())
                                {
                                    docuRefExists = this.deleteDocuRefExists(purchLine, salesLine.RecId);
                                }
                                else
                                {
                                    this.deleteDocuRef(purchLine, salesLine.RecId);
                                }
                            }
                        }
                    }

                    if ((!docuRefExists && this.parmIsInitialSync())
                        || !TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled()
                        || !this.parmIsInitialSync())
                    {
                        //
                        //  Create all notes on associated purchline & salesline in other company
                        //
                        while select fromDocuRef
                        where fromDocuRef.RefCompanyId == salesLine.DataAreaId
                            && fromDocuRef.RefTableId   == salesLine.TableId
                            && fromDocuRef.RefRecId     == salesLine.RecId
                            // Only process new created notes if new notes are created
                            && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                            && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                        {
                            if (this.canWriteDocuRef(fromDocuRef))
                            {
                                changecompany(interCompanyCompanyId)
                                {
                                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                                    purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId);

                                    if (purchLine.RecId
                                    && purchLine.RecId != fromRecId)
                                    {
                                        this.writeDocuRef(purchLine,fromDocuRef,salesLine.RecId);
                                    }
                                }
                            }
                        }
                    }
                }

                if (salesLine.InventRefTransId)
                {
                    purchLine = null;
                    boolean docuRefExists;

                    //
                    //  Delete all notes on associated purchline in same company
                    //

                    purchLine = PurchLine::findInventTransId(salesLine.InventRefTransId);

                    if (purchLine.RecId
                        && purchLine.RecId != fromRecId
                        && purchLine.purchTable().InterCompanyOrder)
                    {
                        if (!this.isCreatedDocu())
                        {
                            if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled() && this.parmIsInitialSync())
                            {
                                docuRefExists = this.deleteDocuRefExists(purchLine, salesLine.RecId);
                            }
                            else
                            {
                                this.deleteDocuRef(purchLine,salesLine.RecId);
                            }
                        }

                        if ((!docuRefExists && this.parmIsInitialSync())
                            || !TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled()
                            || !this.parmIsInitialSync())
                        {
                            //
                            //  Create all notes on associated purchline in same company
                            //
                            while select fromDocuRef
                            where fromDocuRef.RefCompanyId == salesLine.DataAreaId
                                && fromDocuRef.RefTableId   == salesLine.TableId
                                && fromDocuRef.RefRecId     == salesLine.RecId
                                // Only process new created notes if new notes are created
                                && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                                && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                            {
                                if (this.canWriteDocuRef(fromDocuRef))
                                {
                                    this.writeDocuRef(purchLine,fromDocuRef,salesLine.RecId);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanySalesLineSyncNotesTask construct()
    {
        return new IntercompanySalesLineSyncNotesTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCreatedDateTimeOfDocuRefBeingWritten</Name>
				<Source><![CDATA[
    protected boolean shouldUseCreatedDateTimeOfDocuRefBeingWritten()
    {
        return docuRefBeingWritten.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>