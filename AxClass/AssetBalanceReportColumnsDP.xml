<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalanceReportColumnsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Declares variables and tables.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetBalanceReportColumns)),
    SRSReportParameterAttribute(classstr(AssetBalanceReportColumnsContract))
]
public class AssetBalanceReportColumnsDP extends SRSReportDataProviderPreProcessTempDb
{
    FromDate fromDate;
    ToDate toDate;
    AssetBookId assetBookId;
    AssetBalance_DerogatoryDecrease_FR derogatoryDecrease;
    AssetBalance_DerogatoryIncrease_FR derogatoryIncrease;
    AssetId assetId;
    AssetBalance_AcquisitionStartPeriod acquisitionStartPeriod;
    AssetBalance_AcquisitionEndPeriod acquisitionEndPeriod;
    AssetBalance_AcquisitionReceiptRepYear acquisitionReceiptRepYear;
    AssetBalance_DepreciationStartPeriod depreciationStartPeriod;
    AssetBalance_DepreciationRepYear depreciationRepYear;
    AssetBalance_DepreciationVoidedRepYear depreciationVoidedRepYear;
    AssetBalance_DepreciationEndPeriod depreciationEndPeriod;
    AssetBalance_AdjStartPeriod adjStartPeriod;
    AssetBalance_AdjWriteUpRepYear adjWriteUpRepYear;
    AssetBalance_AdjWriteDownRepYear adjWriteDownRepYear;
    AssetBalance_AdjRevaluationRepYear adjRevaluationRepYear;
    AssetBalance_AdjVoidedRepYear adjVoidedRepYear;
    AssetBalance_AdjEndPeriod adjEndPeriod;
    AssetBalance_BalanceStartPeriod balanceStartPeriod;
    AssetBalance_BalanceStartPeriod balanceEndPeriod;
    AssetBalance_DepreciationRepYear bonusDepreciationRepYear;
    AssetBalance_DerogatoryEndPeriod_FR derogatoryEndPeriod;
    AssetBalance_DerogatoryStartPeriod_FR derogatoryStartPeriod;
    AssetBalance_AcquisitionIssueRepYear acquisitionIssueRepYear;
    AssetGroupId assetGroupId;
    AssetGroupId lastAssetGroupId;
    boolean blAdded;
    AssetSumCalcType assetSumCalcType;

    AssetBalanceReportColumnsTmp assetBalanceReportColumnsTmp;
    RecordInsertList tmpTableRecordList;

    private boolean isBookParameterUsed;
    private boolean isGroupParameterUsed;
    private boolean isNumberParameterUsed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>AssetBalanceReportColumnsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TempAssetBalanceReportColumns</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBalanceReportColumnsTmp))
    ]
    public AssetBalanceReportColumnsTmp getAssetBalanceReportColumnsTmp()
    {
        select assetBalanceReportColumnsTmp;
        return assetBalanceReportColumnsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the details of Fixed Asset Note into the <c>AssetBalanceReportColumnsTmp</c> temporary
    /// table.
    /// </summary>
    /// <param name = "_tmpTableRecordList">
    ///  An existing RecordInsertList, which is used to store <c>AssetBalanceReportColumnsTmp</c> records for bulk insert.
    /// </param>
    private void insertAssetBalanceReportColumnsTmp(RecordInsertList _tmpTableRecordList)
    {
        #ISOCountryRegionCodes

        assetBalanceReportColumnsTmp.AssetGroup = assetGroupId;
        assetBalanceReportColumnsTmp.AcquisitionStartPeriod = acquisitionStartPeriod;
        assetBalanceReportColumnsTmp.AcquisitionEndPeriod = acquisitionEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear = acquisitionReceiptRepYear;
        assetBalanceReportColumnsTmp.DepreciationStartPeriod = depreciationStartPeriod;
        assetBalanceReportColumnsTmp.DepreciationRepYear = depreciationRepYear;
        assetBalanceReportColumnsTmp.DepreciationVoidedRepYear = depreciationVoidedRepYear;
        assetBalanceReportColumnsTmp.DepreciationEndPeriod = depreciationEndPeriod;
        assetBalanceReportColumnsTmp.AdjStartPeriod = adjStartPeriod;
        assetBalanceReportColumnsTmp.AdjWriteUpRepYear = adjWriteUpRepYear;
        assetBalanceReportColumnsTmp.AdjWriteDownRepYear = adjWriteDownRepYear;
        assetBalanceReportColumnsTmp.AdjRevaluationRepYear = adjRevaluationRepYear;
        assetBalanceReportColumnsTmp.AdjVoidedRepYear = adjVoidedRepYear;
        assetBalanceReportColumnsTmp.AdjEndPeriod = adjEndPeriod;
        assetBalanceReportColumnsTmp.BalanceEndPeriod = balanceEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionIssueRepYear = acquisitionIssueRepYear;
        assetBalanceReportColumnsTmp.BalanceStartPeriod = balanceStartPeriod;
        assetBalanceReportColumnsTmp.BonusDepreciationRepYear = bonusDepreciationRepYear;
        assetBalanceReportColumnsTmp.IsTotal = NoYes::No;
        assetBalanceReportColumnsTmp.AssetId = assetId;
        assetBalanceReportColumnsTmp.AssetBookId = assetBookId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            assetBalanceReportColumnsTmp.DerogatoryEndPeriod = derogatoryEndPeriod;
            assetBalanceReportColumnsTmp.DerogatoryDecrease = derogatoryDecrease;
            assetBalanceReportColumnsTmp.DerogatoryIncrease = derogatoryIncrease;
            assetBalanceReportColumnsTmp.DerogatoryStartPeriod = derogatoryStartPeriod;
        }
        _tmpTableRecordList.add(assetBalanceReportColumnsTmp);

        assetId = '';
        balanceEndPeriod = 0.0;
        acquisitionIssueRepYear = 0.0;
        acquisitionStartPeriod = 0.0;
        acquisitionEndPeriod = 0.0;
        acquisitionReceiptRepYear = 0.0;
        depreciationStartPeriod = 0.0;
        depreciationRepYear = 0.0;
        depreciationVoidedRepYear = 0.0;
        depreciationEndPeriod = 0.0;
        adjStartPeriod = 0.0;
        adjWriteUpRepYear = 0.0;
        adjWriteDownRepYear = 0.0;
        adjRevaluationRepYear = 0.0;
        adjVoidedRepYear = 0.0;
        adjEndPeriod = 0.0;
        balanceStartPeriod = 0.0;
        bonusDepreciationRepYear = 0.0;
        depreciationEndPeriod = 0.0;
        derogatoryDecrease = 0.0;
        derogatoryIncrease = 0.0;
        derogatoryStartPeriod = 0.0;
        derogatoryEndPeriod = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalanceReportTotalColumns</Name>
				<Source><![CDATA[
    private void insertAssetBalanceReportTotalColumns()
    {
        #ISOCountryRegionCodes

        assetBalanceReportColumnsTmp.clear();
        assetBalanceReportColumnsTmp.AssetGroup = assetGroupId;
        assetBalanceReportColumnsTmp.AcquisitionStartPeriod = acquisitionStartPeriod;
        assetBalanceReportColumnsTmp.AcquisitionEndPeriod = acquisitionEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear = acquisitionReceiptRepYear;
        assetBalanceReportColumnsTmp.DepreciationStartPeriod = depreciationStartPeriod;
        assetBalanceReportColumnsTmp.DepreciationRepYear = depreciationRepYear;
        assetBalanceReportColumnsTmp.DepreciationVoidedRepYear = depreciationVoidedRepYear;
        assetBalanceReportColumnsTmp.DepreciationEndPeriod = depreciationEndPeriod;
        assetBalanceReportColumnsTmp.AdjStartPeriod = adjStartPeriod;
        assetBalanceReportColumnsTmp.AdjWriteUpRepYear = adjWriteUpRepYear;
        assetBalanceReportColumnsTmp.AdjWriteDownRepYear = adjWriteDownRepYear;
        assetBalanceReportColumnsTmp.AdjRevaluationRepYear = adjRevaluationRepYear;
        assetBalanceReportColumnsTmp.AdjVoidedRepYear = adjVoidedRepYear;
        assetBalanceReportColumnsTmp.AdjEndPeriod = adjEndPeriod;
        assetBalanceReportColumnsTmp.BalanceEndPeriod = balanceEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionIssueRepYear = acquisitionIssueRepYear;
        assetBalanceReportColumnsTmp.BalanceStartPeriod = balanceStartPeriod;
        assetBalanceReportColumnsTmp.BonusDepreciationRepYear = bonusDepreciationRepYear;
        assetBalanceReportColumnsTmp.IsTotal = NoYes::Yes;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            assetBalanceReportColumnsTmp.DerogatoryEndPeriod = derogatoryEndPeriod;
            assetBalanceReportColumnsTmp.DerogatoryDecrease = derogatoryDecrease;
            assetBalanceReportColumnsTmp.DerogatoryIncrease = derogatoryIncrease;
            assetBalanceReportColumnsTmp.DerogatoryStartPeriod = derogatoryStartPeriod;
        }

        assetBalanceReportColumnsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDefaultTransactionOnly</Name>
				<Source><![CDATA[
    public boolean parmUseDefaultTransactionOnly(boolean _useDefaultTransOnly = useDefaultTransOnly)
    {
        useDefaultTransOnly = true;
        return useDefaultTransOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic for Fixed Asset Note which is used to populate a temporary table.
    /// </summary>
    public void processReport()
    {
        this.initProcessReport();

        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
        {
            int startTime = activityContext.getElapsedMilliseconds();

            activityContext.addCustomProperty(AssetInstrumentationConstants::FromDate, this.getTelemetryDate(fromDate));
            activityContext.addCustomProperty(AssetInstrumentationConstants::ToDate, this.getTelemetryDate(toDate));
            activityContext.addCustomProperty(AssetInstrumentationConstants::FromToDateDifference, int2Str(toDate - fromDate));
            activityContext.addCustomProperty(AssetInstrumentationConstants::IsBookParameterUsed, any2Str(this.isBookParameterUsed));
            activityContext.addCustomProperty(AssetInstrumentationConstants::IsGroupParameterUsed, any2Str(this.isGroupParameterUsed));
            activityContext.addCustomProperty(AssetInstrumentationConstants::IsNumberParameterUsed, any2Str(this.isNumberParameterUsed));

            AssetCalcReport balanceReport = new AssetCalcReport(fromDate, toDate);

            // Sum all chosen assets into groups.
            Query query;
            QueryRun queryRun;
            AssetBook assetBook;
            query = this.buildProcessReportQuery();
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                assetBook = queryRun.get(tablenum(AssetBook));
                balanceReport.calcAssetByCurrency(assetBook, assetSumCalcType);
                this.totals(assetBook, balanceReport, tmpTableRecordList);
            }

            if (blAdded)
            {
                this.insertAssetBalanceReportColumnsTmp(tmpTableRecordList);
            }

            tmpTableRecordList.insertDatabase();

            select  AssetId , sum(AcquisitionStartPeriod),
                    sum(AcquisitionEndPeriod),
                    sum(AcquisitionsReceiptRepYear),
                    sum(DepreciationStartPeriod),
                    sum(DepreciationRepYear),
                    sum(DepreciationVoidedRepYear),
                    sum(DepreciationEndPeriod),
                    sum(AdjStartPeriod),
                    sum(AdjWriteUpRepYear),
                    sum(AdjWriteDownRepYear),
                    sum(AdjRevaluationRepYear),
                    sum(AdjVoidedRepYear),
                    sum(AdjEndPeriod),
                    sum(BalanceEndPeriod),
                    sum(AcquisitionIssueRepYear),
                    sum(BalanceStartPeriod),
                    sum(BonusDepreciationRepYear),
                    sum(DerogatoryEndPeriod),
                    sum(DerogatoryDecrease),
                    sum(DerogatoryIncrease),
                    sum(DerogatoryStartPeriod) from  assetBalanceReportColumnsTmp;

            balanceEndPeriod = assetBalanceReportColumnsTmp.BalanceEndPeriod;
            acquisitionIssueRepYear = assetBalanceReportColumnsTmp.AcquisitionIssueRepYear;
            acquisitionStartPeriod = assetBalanceReportColumnsTmp.AcquisitionStartPeriod;
            acquisitionEndPeriod = assetBalanceReportColumnsTmp.AcquisitionEndPeriod;
            acquisitionReceiptRepYear = assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear;
            depreciationStartPeriod = assetBalanceReportColumnsTmp.DepreciationStartPeriod;
            depreciationRepYear = assetBalanceReportColumnsTmp.DepreciationRepYear;
            depreciationVoidedRepYear = assetBalanceReportColumnsTmp.DepreciationVoidedRepYear;
            depreciationEndPeriod = assetBalanceReportColumnsTmp.DepreciationEndPeriod;
            adjStartPeriod = assetBalanceReportColumnsTmp.AdjStartPeriod ;
            adjWriteUpRepYear = assetBalanceReportColumnsTmp.AdjWriteUpRepYear;
            adjWriteDownRepYear = assetBalanceReportColumnsTmp.AdjWriteDownRepYear;
            adjRevaluationRepYear = assetBalanceReportColumnsTmp.AdjRevaluationRepYear;
            adjVoidedRepYear = assetBalanceReportColumnsTmp.AdjVoidedRepYear;
            adjEndPeriod = assetBalanceReportColumnsTmp.AdjEndPeriod;
            balanceStartPeriod = assetBalanceReportColumnsTmp.BalanceStartPeriod;
            bonusDepreciationRepYear = assetBalanceReportColumnsTmp.BonusDepreciationRepYear;
            derogatoryDecrease = assetBalanceReportColumnsTmp.DerogatoryDecrease;
            derogatoryIncrease = assetBalanceReportColumnsTmp.DerogatoryIncrease;
            derogatoryStartPeriod = assetBalanceReportColumnsTmp.DerogatoryStartPeriod;
            derogatoryEndPeriod = assetBalanceReportColumnsTmp.DerogatoryEndPeriod;
            assetGroupId = "@SYS809";

            this.insertAssetBalanceReportTotalColumns();

            activityContext.addCustomProperty(AssetInstrumentationConstants::ProcessReport, int2Str(activityContext.getElapsedMilliseconds() - startTime));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProcessReportQuery</Name>
				<Source><![CDATA[
    private Query buildProcessReportQuery()
    {
        Query query = new Query(this.parmQuery());

        QueryBuildDataSource qbdsAssetBook = query.dataSourceTable(tablenum(AssetBook));

        SysQuery::findOrCreateRange(qbdsAssetBook, fieldnum(AssetBook, BookId)).value(assetBookId);

        if (AssetBalanceReportColumnsDPFromToFlight::instance().isEnabled())
        {
            QueryBuildRange qbrAcquisitionDate = SysQuery::findOrCreateRange(qbdsAssetBook, fieldnum(AssetBook, AcquisitionDate));
            qbrAcquisitionDate.value(SysQuery::range(Global::dateNull(), this.toDate));

            QueryBuildRange qbrDisposalDate = SysQuery::findOrCreateRange(qbdsAssetBook, fieldnum(AssetBook, DisposalDate));
            qbrDisposalDate.value(strFmt(
                ' ((%1.%2 == %3) || (%1.%2 >= %4)) ', 
                qbdsAssetBook.name(), 
                qbrDisposalDate.name(),
                date2StrXpp(dateNull()),
                date2StrXpp(this.fromDate)));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTelemetryDate</Name>
				<Source><![CDATA[
    private str getTelemetryDate(TransDate _transDate)
    {
        return date2str(_transDate, 321, 2, 0, 2, 0, 4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessReport</Name>
				<Source><![CDATA[
    private void initProcessReport()
    {
        AssetBalanceReportColumnsContract contract = this.parmDataContract() as AssetBalanceReportColumnsContract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        assetBookId = contract.parmAssetBookId();
        tmpTableRecordList = new RecordInsertList(tableNum(AssetBalanceReportColumnsTmp), true, true, true, false, true, assetBalanceReportColumnsTmp);

        if (contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting)
        {
            assetSumCalcType = AssetSumCalcType::MST;
        }
        else if (contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
        {
            assetSumCalcType = AssetSumCalcType::Reporting;
        }

        if (assetBookId)
        {
            this.isBookParameterUsed = true;
        }

        Query query = new Query(this.parmQuery());
        QueryBuildDataSource qbdsAssetTable = query.dataSourceTable(tableName2Id('AssetTable'));
            
        QueryBuildRange qbrAssetGroup = qbdsAssetTable.rangeField(fieldNum(AssetTable, AssetGroup));
        if (qbrAssetGroup.value())
        {
            this.isGroupParameterUsed = true;
        }

        QueryBuildRange qbrAssetId = qbdsAssetTable.rangeField(fieldNum(AssetTable, AssetId));
        if (qbrAssetId.value())
        {
            this.isNumberParameterUsed = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        var logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AssetBalanceReportColumnsDP));
        var activity = SysInstrumentationActivity::construct(AssetInstrumentationConstants::AssetBalanceReportColumnsDPRun, AssetInstrumentationConstants::InstrumentationNameSpace);
        
        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the details of Fixed Asset Note.
    /// </summary>
    /// <param name="_assetBook">
    ///    The value to use to get the assert book details.
    /// </param>
    /// <param name="_balanceReport">
    ///    The object to use.
    /// </param>
    private void totals(AssetBook _assetBook, AssetCalcReport  _balanceReport, RecordInsertList _tmpTableRecordList)
    {
        #ISOCountryRegionCodes

        _balanceReport.calcAssetByCurrency(_assetBook, assetSumCalcType);
        assetGroupId = _assetBook.AssetGroup;
        assetBookId = _assetBook.BookId;
        assetId = _assetBook.AssetId;
        acquisitionStartPeriod = acquisitionStartPeriod + _balanceReport.columnAcquisitionStartPeriod();
        acquisitionEndPeriod = acquisitionEndPeriod +  _balanceReport.columnAcquisitionEndPeriod();
        acquisitionReceiptRepYear = acquisitionReceiptRepYear + _balanceReport.columnAcquisitionReceiptRepYear();
        depreciationStartPeriod = depreciationStartPeriod + _balanceReport.columnDepreciationStartPeriod();
        depreciationRepYear = depreciationRepYear + _balanceReport.columnDepreciationRepYear();
        depreciationVoidedRepYear = depreciationVoidedRepYear + _balanceReport.columnDepreciationVoidedRepYear();
        depreciationEndPeriod = depreciationEndPeriod + _balanceReport.columnDepreciationEndPeriod();
        adjStartPeriod = adjStartPeriod + _balanceReport.columnAdjStartPeriod();
        adjWriteUpRepYear = adjWriteUpRepYear + _balanceReport.columnAdjWriteUpRepYear();
        adjWriteDownRepYear = adjWriteDownRepYear + _balanceReport.columnAdjWriteDownRepYear();
        adjRevaluationRepYear = adjRevaluationRepYear + _balanceReport.columnAdjRevaluationRepYear();
        adjVoidedRepYear = adjVoidedRepYear + _balanceReport.columnAdjVoidedRepYear();
        adjEndPeriod = adjEndPeriod + _balanceReport.columnAdjEndPeriod();
        balanceStartPeriod = balanceStartPeriod + _balanceReport.balanceStartPeriod();
        balanceEndPeriod = balanceEndPeriod + _balanceReport.balanceEndPeriod();
        acquisitionIssueRepYear = acquisitionIssueRepYear + _balanceReport.columnAcquisitionIssueRepYear();
        bonusDepreciationRepYear = bonusDepreciationRepYear + _balanceReport.columnBonusDepreciationRepYear();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            derogatoryEndPeriod = derogatoryEndPeriod + _balanceReport.columnDerogatoryEndPeriod();
            derogatoryDecrease = derogatoryDecrease + _balanceReport.columnDerogatoryDecrease();
            derogatoryIncrease = derogatoryIncrease + _balanceReport.columnDerogatoryIncrease();
            derogatoryStartPeriod = derogatoryStartPeriod + _balanceReport.columnDerogatoryStartPeriod();
        }
        this.insertAssetBalanceReportColumnsTmp(_tmpTableRecordList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>