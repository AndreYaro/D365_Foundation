<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisDataProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class that is responsible for processing budget analysis data.
/// </summary>
public class BudgetAnalysisDataProcessor
{
    BudgetAnalysisRequest                       request;
    DimensionFocusNameTmp                       dimensionFocusNameTmp;
    BudgetAnalysisDimensionSummaryTmp           summaryTempTable, budgetAnalysisDimensionSummaryTmp;
    BudgetAnalysisDimensionSummaryTmp           totalsTempTable;
    BudgetAnalysisDimensionSummaryTmp           carryForwardTempTable;
    BudgetAnalysisDimensionDetailTmp            detailTempTable;
    BudgetAnalysisDimensionDetailTmp            carryForwardDetailTempTable;
    BudgetAnalysisCarryFowardTrackingTmp        budgetAnalysisCarryFowardTrackingTmp;
    BudgetAnalysisColumns                       budgetAnalysisColumns;
    SysOperationProgress                        progress;
    int                                         currentStep;
    int                                         totalSteps;
    boolean                                     showReferenceDocument;
    boolean                                     showTransactonNumber;
    BudgetAnalysisTransactionDataSource         budgetAnalysisTransactionDataSource;

    const str RelievedBudgetSourceTrackingDataSourceName = "RelievedBudgetSourceTracking";
    const str RelievingBudgetSourceTrackingDataSourceName = "RelievingBudgetSourceTracking";

    protected boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetSourceTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget source tracking tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_addReferenceDocumentField">
    /// A boolean value to indicate whether or not to add relieving source tracking field.
    /// </param>
    /// <param name="_forCarryForwardBudgetSource">
    /// A boolean value to indicate whether or not to add carry forward.
    /// </param>
    /// <param name="_forPreEncumbrance">
    /// A boolean value to indicate whether to add encumbrance field or pre-encumbrance field.
    /// </param>
    /// <param name="_addBudgetSourceField">
    /// A boolean value to indicate whether or not to add budget source field.
    /// </param>
    /// <param name="_forActuals">
    /// A boolean value to indicate whether to add fields related to actuals.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An exception occured if this method invokes.
    /// </exception>
    protected void addBudgetSourceTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _addReferenceDocumentField,
        boolean             _forCarryForwardBudgetSource,
        boolean             _forPreEncumbrance,
        boolean             _addBudgetSourceField,
        boolean             _forActuals = false)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, addBudgetSourceTransactionFieldMapping)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forCarryForward">
    /// A boolean value to indicate whether or not to add carry forward field.
    /// </param>
    /// <param name="_forRevisedBudget">
    /// A boolean value to indicate whether to add fields related to revised budget.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An exception occured if this method invokes.
    /// </exception>
    protected void addBudgetTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forCarryForward,
        boolean             _forRevisedBudget = false)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, addBudgetTransactionFieldMapping)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forRevenue">
    /// A boolean value to indicate whether add field related to revenue.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An exception occured if this method invokes.
    /// </exception>
    protected void addGeneralJournalTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forRevenue)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, addGeneralJournalTransactionFieldMapping)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAnalysisQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the object of <c>BudgetAnalysisQuery</c>.
    /// </summary>
    /// <returns>
    /// The object of <c>BudgetAnalysisQuery</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occurred if this method invokes.
    /// </exception>
    protected BudgetAnalysisQuery constructAnalysisQuery()
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, createFieldsMappingWithBaseFields)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseBudgetQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for budget.
    /// </summary>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>.
    /// </returns>
    protected BudgetAnalysisQuery createBaseBudgetQuery()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.constructAnalysisQuery();
    
        budgetAnalysisQuery.addBudgetDimensionReferenceSource();
        budgetAnalysisQuery.addBudgetTransactionSource();
        budgetAnalysisQuery.applyDimensionHierarchyFilter(request.parmDimensionHierarchyId());
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseBudgetSourceTrackingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for budget source tracking related tables.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value that indicates whether or not to add budget source field in selection list.
    /// </param>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createBaseBudgetSourceTrackingQuery(boolean _addBudgetSourceField = false)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.constructAnalysisQuery();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.addBudgetDimensionReferenceSource();
        }
        else
        {
            budgetAnalysisQuery.addLedgerDimensionReferenceSource();
        }
        budgetAnalysisQuery.addBudgetTrackingDataSource(_addBudgetSourceField);
        budgetAnalysisQuery.applyDimensionHierarchyFilter(request.parmDimensionHierarchyId());
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseGeneralJournalActualsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for general journal related tables.
    /// </summary>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createBaseGeneralJournalActualsQuery()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.constructAnalysisQuery();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.addGeneralLedgerDimensionReferenceSource();
        }
        else
        {
            budgetAnalysisQuery.addLedgerDimensionReferenceSource();
        }
        
        budgetAnalysisQuery.addGeneralJournalDataSource();
        budgetAnalysisQuery.addDimensionAttributeFilterSource();
        budgetAnalysisQuery.applyDimensionHierarchyFilter(request.parmDimensionHierarchyId());
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldsMappingWithBaseFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields that are used in all the queries.
    /// </summary>
    /// <param name="_analysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <returns>
    /// A <c>Map</c> that contains field mappings.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occurred if this method invokes.
    /// </exception>
    protected Map createFieldsMappingWithBaseFields(BudgetAnalysisQuery _analysisQuery)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, createFieldsMappingWithBaseFields)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelievingBudgetSourceTrackingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for relieving source tracking tables.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value that indicates whether or not to add budget source field in selection list.
    /// </param>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createRelievingBudgetSourceTrackingQuery(boolean _addBudgetSourceField = false)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.constructAnalysisQuery();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.addBudgetDimensionReferenceSource();
        }
        else
        {
            budgetAnalysisQuery.addLedgerDimensionReferenceSource();
        }
        budgetAnalysisQuery.addRelievingBudgetTrackingDataSource(_addBudgetSourceField);
        budgetAnalysisQuery.applyDimensionHierarchyFilter(request.parmDimensionHierarchyId());
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDetailRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the carry forward records.
    /// </summary>
    /// <param name="_forCarryForward">
    /// A boolean value to indicate whether or not to filter carry forward records.
    /// </param>
    protected void filterDetailRecords(boolean _forCarryForward)
    {
        if (_forCarryForward)
        {
            insert_recordset detailTempTable (LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId)
                select LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId from carryForwardDetailTempTable
                    exists join budgetAnalysisCarryFowardTrackingTmp
                    where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardDetailTempTable.TransactionRecId;
        }
        else
        {
            insert_recordset detailTempTable (LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId)
                select LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId from carryForwardDetailTempTable
                    notExists join budgetAnalysisCarryFowardTrackingTmp
                    where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardDetailTempTable.TransactionRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDetailRecordsForActuals</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts transactions in <c>BudgetAnalysisDimensionDetailTmp</c> based on carryforward flag
    /// </summary>
    /// <param name="_forCarryForward">
    /// A boolean value to indicate whether or not to filter carry forward records.
    /// if _forCarryForward is false, then insert all the transactions which are not from carryforward document and 
    ///     also insert those transactions where document is carryforward but misc. charges/other lines added to document (e.g. invoice document)
    ///     which were not part of carryforward process.
    /// if _forCarryForward is true, then it will insert all the carryforward document transactions but also exclude all the
    ///     transaction which were added as misc charges/other in invoice document.
    /// </param>
    protected void filterDetailRecordsForActuals(boolean _forCarryForward = false)
    {
        if (_forCarryForward)
        {
            this.insertCarryForwardDocuments(true);
        }
        else
        {
            this.insertNonCarryForwardDocuments();
            this.insertCarryForwardDocuments(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNonCarryForwardDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert transactions from non carry forward document.
    /// </summary>
    private void insertNonCarryForwardDocuments()
    {
        insert_recordset detailTempTable (LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId)
                select LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId from carryForwardDetailTempTable
                    notExists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardDetailTempTable.TransactionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCarryForwardDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert transactions from carry forward document. 
    /// </summary>
    /// <param name = "_isCarryForward">
    /// if true, insert carry forward transactions from carryforward document.
    /// </param>
    private void insertCarryForwardDocuments(boolean _isCarryForward = false)
    {
        insert_recordset detailTempTable (LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId)
            select LedgerDimension, Amount, DocumentNumber, TransactionNumber, TransactionDate, ReferenceSourceTracking, TransactionRecId from carryForwardDetailTempTable
                exists join budgetAnalysisCarryFowardTrackingTmp
                    where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardDetailTempTable.TransactionRecId
                        && carryForwardDetailTempTable.IsCarryForward == _isCarryForward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field name for transaction amount field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field.
    /// </param>
    /// <returns>
    /// The name of the field.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occurred if this method invokes.
    /// </exception>
    protected FieldName getAmountFieldName(FieldName _fieldName)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, getAmountFieldName)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempTableToInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the temporary table to be used to insert the records.
    /// </summary>
    /// <param name="_inCarryForwardTable">
    /// A boolean value that indicates whether or not to insert records in carry forward table.
    /// </param>
    /// <returns>
    /// A buffer temporary table to be used to insert the records.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occured if this method invokes.
    /// </exception>
    protected Common getTempTableToInsert(boolean _inCarryForwardTable)
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, getTempTableToInsert)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data source of transaction data.
    /// </summary>
    /// <returns>
    /// An enum value of type <c>BudgetAnalysisTransactionDataSource</c>.
    /// </returns>
    public BudgetAnalysisTransactionDataSource getTransactionDataSource()
    {
        return BudgetAnalysisTransactionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProgressBar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the progress bar.
    /// </summary>
    /// <param name="_totalSteps">
    /// Total number of steps.
    /// </param>
    /// <param name="_stepTitle">
    /// The title of current step.
    /// </param>
    protected void initializeProgressBar(
        int _totalSteps,
        str _stepTitle)
    {
        totalSteps = _totalSteps;
        currentStep++;
    
        progress.setCaption("@SYP4886860");
        progress.setText(strFmt("@SYP4886861", 1, _totalSteps, _stepTitle));
        progress.setTotal(_totalSteps);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private void insertRecord(
        boolean _inCarryForwardTable,
        Map     _fieldMappings,
        Query   _query)
    {
        Common tempTableForInsert = this.getTempTableToInsert(_inCarryForwardTable);
        Query::insert_recordset(tempTableForInsert, _fieldMappings, _query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        progress = new SysOperationProgress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBudgetAnalysisSummaryTotals</Name>
				<Source><![CDATA[
    protected void populateBudgetAnalysisSummaryTotals()
    {
        select firstOnly RecId from summaryTempTable;
    
        if (summaryTempTable.RecId)
        {
            insert_recordset totalsTempTable (Budget, Encumbrance, PreEncumbrance, Actuals, CarryForwardEncumbrance, CarryForwardPreEncumbrance,          CarryForwardActuals,        CarryForwardBudget, RevisedEstimates)
                select firstOnly sum(Budget), sum(Encumbrance), sum(PreEncumbrance), sum(Actuals), sum(CarryForwardEncumbrance),   sum(CarryForwardPreEncumbrance),     sum(CarryForwardActuals), sum(CarryForwardBudget), sum(RevisedEstimates)
                    from budgetAnalysisDimensionSummaryTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCarryForwardTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates budget source tracking IDs for carry-forward documents.
    /// </summary>
    protected void populateCarryForwardTempTable()
    {
        BudgetSourceTracking                budgetSourceTracking,
                                            budgetSourceTrackingRelieving,
                                            budgetSourceTrackingRelieved,
                                            budgetSourceTrackingRelieved2,
                                            budgetSourceTrackingRelieved3,
                                            budgetSourceTrackingCarryForward;
    
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail,
                                            budgetSourceTrackingDetailRelieved,
                                            budgetSourceTrackingDetailRelieved2,
                                            budgetSourceTrackingDetailRelieved3,
                                            budgetSourceTrackingDetailCarryForward;
    
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail,
                                            budgetSourceTrackingRelievingDetail2,
                                            budgetSourceTrackingRelievingDetail3;
    
        delete_from budgetAnalysisCarryFowardTrackingTmp;
    
        // Add budget sources with carry-forward records
        insert_recordset budgetAnalysisCarryFowardTrackingTmp
            (BudgetSource)
    
            select BudgetSource
            from budgetSourceTracking
            where
                budgetSourceTracking.TrackingDate >= request.parmFromDate() &&
                budgetSourceTracking.TrackingDate <= request.parmToDate()
    
            exists join budgetSourceTrackingDetail
                where
                    budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId &&
                    budgetSourceTrackingDetail.IsCarryForward == NoYes::Yes;
    
        // Add relieved detail records.
        insert_recordset budgetAnalysisCarryFowardTrackingTmp
            (BudgetSource)
    
            select BudgetSource
            from budgetSourceTrackingRelieving
            where
                budgetSourceTrackingRelieving.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingRelieving.TrackingDate <= request.parmToDate()
    
            join budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTrackingRelieving.RecId
    
            join budgetSourceTrackingDetailRelieved
            where budgetSourceTrackingDetailRelieved.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
    
            join budgetSourceTrackingRelieved
            where budgetSourceTrackingDetailRelieved.BudgetSourceTracking == budgetSourceTrackingRelieved.RecId
    
            join budgetSourceTrackingCarryForward
            where
                budgetSourceTrackingCarryForward.BudgetSource == budgetSourceTrackingRelieved.BudgetSource &&
                budgetSourceTrackingCarryForward.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingCarryForward.TrackingDate <= request.parmToDate()
    
            exists join budgetSourceTrackingDetailCarryForward
            where
                budgetSourceTrackingDetailCarryForward.BudgetSourceTracking == budgetSourceTrackingCarryForward.RecId &&
                budgetSourceTrackingDetailCarryForward.IsCarryForward == NoYes::Yes;
    
        // Add relieved detail records.
        insert_recordset budgetAnalysisCarryFowardTrackingTmp
            (BudgetSource)
    
            select BudgetSource
            from budgetSourceTrackingRelieving
            where
                budgetSourceTrackingRelieving.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingRelieving.TrackingDate <= request.parmToDate()
    
        join budgetSourceTrackingRelievingDetail
            where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTrackingRelieving.RecId
    
            join budgetSourceTrackingDetailRelieved
            where budgetSourceTrackingDetailRelieved.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
    
        join budgetSourceTrackingRelieved
            where budgetSourceTrackingDetailRelieved.BudgetSourceTracking == budgetSourceTrackingRelieved.RecId
    
    
        join budgetSourceTrackingRelievingDetail2
            where budgetSourceTrackingRelievingDetail2.RelievingBudgetSourceTracking == budgetSourceTrackingRelieved.RecId
    
            join budgetSourceTrackingDetailRelieved2
            where budgetSourceTrackingDetailRelieved2.RecId == budgetSourceTrackingRelievingDetail2.RelievedBudgetSourceTrackingDetail
    
        join budgetSourceTrackingRelieved2
            where budgetSourceTrackingDetailRelieved2.BudgetSourceTracking == budgetSourceTrackingRelieved2.RecId
    
            join budgetSourceTrackingCarryForward
            where
                budgetSourceTrackingCarryForward.BudgetSource == budgetSourceTrackingRelieved2.BudgetSource &&
                budgetSourceTrackingCarryForward.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingCarryForward.TrackingDate <= request.parmToDate()
    
            exists join budgetSourceTrackingDetailCarryForward
            where
                budgetSourceTrackingDetailCarryForward.BudgetSourceTracking == budgetSourceTrackingCarryForward.RecId &&
                budgetSourceTrackingDetailCarryForward.IsCarryForward == NoYes::Yes;
    
        // Add upstream relieved detail records.
        insert_recordset budgetAnalysisCarryFowardTrackingTmp
            (BudgetSource)
    
            select BudgetSource
            from budgetSourceTrackingRelieving
            where
                budgetSourceTrackingRelieving.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingRelieving.TrackingDate <= request.parmToDate()
    
        join budgetSourceTrackingRelievingDetail
            where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTrackingRelieving.RecId
    
            join budgetSourceTrackingDetailRelieved
            where budgetSourceTrackingDetailRelieved.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
    
        join budgetSourceTrackingRelieved
            where budgetSourceTrackingDetailRelieved.BudgetSourceTracking == budgetSourceTrackingRelieved.RecId
    
        join budgetSourceTrackingRelievingDetail2
            where budgetSourceTrackingRelievingDetail2.RelievingBudgetSourceTracking == budgetSourceTrackingRelieved.RecId
    
            join budgetSourceTrackingDetailRelieved2
            where budgetSourceTrackingDetailRelieved2.RecId == budgetSourceTrackingRelievingDetail2.RelievedBudgetSourceTrackingDetail
    
        join budgetSourceTrackingRelieved2
            where budgetSourceTrackingDetailRelieved2.BudgetSourceTracking == budgetSourceTrackingRelieved2.RecId
    
        join budgetSourceTrackingRelievingDetail3
            where budgetSourceTrackingRelievingDetail3.RelievingBudgetSourceTracking == budgetSourceTrackingRelieved2.RecId
    
            join budgetSourceTrackingDetailRelieved3
            where budgetSourceTrackingDetailRelieved3.RecId == budgetSourceTrackingRelievingDetail3.RelievedBudgetSourceTrackingDetail
    
        join budgetSourceTrackingRelieved3
            where budgetSourceTrackingDetailRelieved3.BudgetSourceTracking == budgetSourceTrackingRelieved3.RecId
    
            join budgetSourceTrackingCarryForward
            where
                budgetSourceTrackingCarryForward.BudgetSource == budgetSourceTrackingRelieved3.BudgetSource &&
                budgetSourceTrackingCarryForward.TrackingDate >= request.parmFromDate() &&
                budgetSourceTrackingCarryForward.TrackingDate <= request.parmToDate()
    
            exists join budgetSourceTrackingDetailCarryForward
            where
                budgetSourceTrackingDetailCarryForward.BudgetSourceTracking == budgetSourceTrackingCarryForward.RecId &&
                budgetSourceTrackingDetailCarryForward.IsCarryForward == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>DimensionFocusNameTmp</c> with individual dimensions in ledger dimension account.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The record Id of financial dimension set to be used.
    /// </param>
    /// <returns>
    /// The <c>DimensionFocusNameTmp</c> table buffer.
    /// </returns>
    public DimensionFocusNameTmp populateDimensionNames(DimensionHierarchyId  _dimensionHierarchyId)
    {
        Name dimensionFocusName = DimensionHierarchy::find(_dimensionHierarchyId).Name;
        Query query;
    
        delete_from dimensionFocusNameTmp;
    
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset dimensionFocusNameTmp (LedgerDimension)
                select ReportingDimension from summaryTempTable
                    group by ReportingDimension;
        }
        else
        {
            insert_recordset dimensionFocusNameTmp (LedgerDimension)
                select FocusLedgerDimension from summaryTempTable
                    group by FocusLedgerDimension;
        }

        dimensionFocusNameTmp.generateFocusValueFromColumns(DimensionFocusNameTmp::getDimensionValueColumnPrefix(), dimensionFocusName, new Connection());
        
        UserConnection userConnection;
        try
        {
            userConnection = new UserConnection();
            DimensionFocusNameTmp::generateFocusDescriptions(dimensionFocusNameTmp, dimensionFocusName, userConnection);
        }
        finally
        {
            userConnection.finalize();
        }

        return dimensionFocusNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// The base method to retrieve the data for budget analysis summary form.
    /// The implementation of this method is in derived classes.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// An exception will be thrown if this method is called.
    /// </exception>
    public void process()
    {
        throw error(error::wrongUseOfFunction(methodStr(BudgetAnalysisDataProcessor, process)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActualExpenditures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to actual expenditures.
    /// </summary>
    protected void processActualExpenditures()
    {
        this.processGeneralJournalActuals(DimensionLedgerAccountType::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActualRevenues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to actual revenues.
    /// </summary>
    protected void processActualRevenues()
    {
        this.processGeneralJournalActuals(DimensionLedgerAccountType::Revenue);
    
        // Revenue is saved as negative so we need to switch the sign to show them as positive
        this.switchSign(
            this.getTempTableToInsert(false).getPhysicalTableName(),
            this.getAmountFieldName(fieldStr(BudgetAnalysisDimensionSummaryTmp, Encumbrance)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActuals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to actuals.
    /// </summary>
    protected void processActuals()
    {
        this.processGeneralJournalActuals(DimensionLedgerAccountType::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActualsWithCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to actual expenditures including carry-forward records.
    /// </summary>
    protected void processActualsWithCarryForward()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseBudgetSourceTrackingQuery(true);
        Map                 fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, BudgetControlCategory::ActualExpenditure);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, false, false, false, true, true);
    
        this.insertRecord(true, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to budget.
    /// </summary>
    /// <param name="_budgetType">
    /// An enum value of type <c>BudgetType</c>.
    /// </param>
    /// <param name="_budgetAnalysisBudgetType">
    /// An enum value of type <c>BudgetAnalysisBudgetType</c>.
    /// </param>
    /// <param name="_forCarryForward">
    /// A boolean value that indicates whether or not to process carry-forward records.
    /// </param>
    protected void processBudget(
        BudgetType               _budgetType,
        BudgetAnalysisBudgetType _budgetAnalysisBudgetType,
        boolean                  _forCarryForward)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseBudgetQuery();
        Map                 fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetTransactionUserParameters(request, _budgetType);
        budgetAnalysisQuery.applyBudgetTransBudgetTransactionType(_budgetAnalysisBudgetType);
    
        this.addBudgetTransactionFieldMapping(
            fieldMapping,
            budgetAnalysisQuery,
            _forCarryForward,
            _budgetAnalysisBudgetType != BudgetAnalysisBudgetType::OriginalBudget);
    
        this.insertRecord(false, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetLessCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to budget excluding carry-forward budget.
    /// </summary>
    protected void processBudgetLessCarryForward()
    {
        this.processBudget(BudgetType::Expense, BudgetAnalysisBudgetType::RevisedBudgetLessCarryForward, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCarryForwardBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to carry-forward budget.
    /// </summary>
    protected void processCarryForwardBudget()
    {
        this.processBudget(BudgetType::Expense, BudgetAnalysisBudgetType::CarryForwardOnlyBudget, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to encumbrance.
    /// </summary>
    /// <param name="_budgetControlCategory">
    /// An enum value of type <c>BudgetControlCategory</c> to be used as the filter.
    /// </param>
    protected void processEncumbrance(BudgetControlCategory _budgetControlCategory)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseBudgetSourceTrackingQuery(false);
        Map                 fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
       
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, _budgetControlCategory);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, false, false, _budgetControlCategory == BudgetControlCategory::PreEncumbrance, false);
    
        this.insertRecord(false, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
        
        budgetAnalysisQuery = this.createRelievingBudgetSourceTrackingQuery(false);
        fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, _budgetControlCategory);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, true, false, _budgetControlCategory == BudgetControlCategory::PreEncumbrance, false);
    
        this.insertRecord(false, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEncumbranceWithCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to encumbrance including carry-forward.
    /// </summary>
    protected void processEncumbranceWithCarryForward()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseBudgetSourceTrackingQuery(true);
        Map                 fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, BudgetControlCategory::Encumbrance);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, false, true, false, true);
        this.insertRecord(true, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    
        budgetAnalysisQuery = this.createRelievingBudgetSourceTrackingQuery(true);
        fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, BudgetControlCategory::Encumbrance);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, true, true, false, true);
        this.insertRecord(true, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPreEncumbranceWithCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the details related to encumbrance posting type of pre-encumbrance including carry-forward.
    /// </summary>
    protected void processPreEncumbranceWithCarryForward()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseBudgetSourceTrackingQuery(true);
        Map fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, BudgetControlCategory::PreEncumbrance);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, false, true, true, true);
        this.insertRecord(true, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    
        budgetAnalysisQuery = this.createRelievingBudgetSourceTrackingQuery(true);
        fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyBudgetSourceTrackingUserParameters(request, BudgetControlCategory::PreEncumbrance);
    
        this.addBudgetSourceTransactionFieldMapping(fieldMapping, budgetAnalysisQuery, true, true, true, true);
        this.insertRecord(true, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGeneralJournalActuals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to general journal actuals.
    /// </summary>
    /// <param name="_dimensionLedgerAccountType">
    /// An enum value of type <c>DimensionLedgerAccountType</c>.
    /// </param>
    protected void processGeneralJournalActuals(DimensionLedgerAccountType _dimensionLedgerAccountType)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = this.createBaseGeneralJournalActualsQuery();
        Map                 fieldMapping = this.createFieldsMappingWithBaseFields(budgetAnalysisQuery);
    
        budgetAnalysisQuery.applyGeneralJournalUserParameterRange(request, _dimensionLedgerAccountType);
    
        this.addGeneralJournalTransactionFieldMapping(
            fieldMapping,
            budgetAnalysisQuery,
            _dimensionLedgerAccountType == DimensionLedgerAccountType::Revenue);
    
        this.insertRecord(false, fieldMapping, budgetAnalysisQuery.parmAnalysisQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOriginalBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to original budget.
    /// </summary>
    protected void processOriginalBudget()
    {
        this.processBudget(BudgetType::Expense, BudgetAnalysisBudgetType::OriginalBudget, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOriginalEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to original revenue estimates.
    /// </summary>
    protected void processOriginalEstimates()
    {
        this.processBudget(BudgetType::Revenue, BudgetAnalysisBudgetType::OriginalBudget, false);

        // Revenue is saved as negative so we need to switch the sign to show them as positive
        this.switchSign(this.getTempTableToInsert(false).getPhysicalTableName(), this.getAmountFieldName(fieldStr(BudgetAnalysisDimensionSummaryTmp, Budget)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRevisedBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to revised budget.
    /// </summary>
    protected void processRevisedBudget()
    {
        this.processBudget(BudgetType::Expense, BudgetAnalysisBudgetType::RevisedBudget, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRevisedEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the records related to revised revenue estimates.
    /// </summary>
    protected void processRevisedEstimates()
    {
        this.processBudget(BudgetType::Revenue, BudgetAnalysisBudgetType::RevisedBudget, false);
        this.switchSign(this.getTempTableToInsert(false).getPhysicalTableName(), this.getAmountFieldName(fieldStr(BudgetAnalysisDimensionSummaryTmp, RevisedEstimates)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all the temporary tables.
    /// </summary>
    protected void resetTempTables()
    {
        delete_from summaryTempTable;
        delete_from budgetAnalysisDimensionSummaryTmp;
        delete_from totalsTempTable;
        delete_from carryForwardtempTable;
        delete_from detailTempTable;
        delete_from carryForwardDetailTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDetailTempTable</Name>
				<Source><![CDATA[
    protected void setDetailTempTable(BudgetAnalysisDimensionDetailTmp _budgetAnalysisDimensionDetailTemp)
    {
        detailTempTable.linkPhysicalTableInstance(_budgetAnalysisDimensionDetailTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionFocusNameTempTable</Name>
				<Source><![CDATA[
    protected void setDimensionFocusNameTempTable(DimensionFocusNameTmp _dimenisonFocusNameTmp)
    {
        dimensionFocusNameTmp.linkPhysicalTableInstance(_dimenisonFocusNameTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequest</Name>
				<Source><![CDATA[
    protected void setRequest(BudgetAnalysisRequest _request)
    {
        request = _request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryTempTable</Name>
				<Source><![CDATA[
    protected void setSummaryTempTable(BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTemp)
    {
        budgetAnalysisDimensionSummaryTmp.linkPhysicalTableInstance(_budgetAnalysisDimensionSummaryTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalsTempTable</Name>
				<Source><![CDATA[
    protected void setTotalsTempTable(BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTemp)
    {
        totalsTempTable.linkPhysicalTableInstance(_budgetAnalysisDimensionSummaryTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTempTable</Name>
				<Source><![CDATA[
    protected void setTransTempTable(BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTemp)
    {
        budgetAnalysisDimensionSummaryTmp.linkPhysicalTableInstance(_budgetAnalysisDimensionSummaryTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the progress on the progress bar.
    /// </summary>
    /// <param name="_stepTitle">
    /// The title of the current step.
    /// </param>
    protected void showProgress(str _stepTitle)
    {
        currentStep++;
        progress.setCount(currentStep);
        progress.setText(strFmt("@SYP4886861", currentStep, totalSteps, _stepTitle));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReferenceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not to show the reference document column.
    /// </summary>
    /// <returns>
    /// A boolean value that indicates whether or not to show reference document column.
    /// </returns>
    public boolean showReferenceDocument()
    {
        return showReferenceDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not to show the transaction number column.
    /// </summary>
    /// <returns>
    /// A boolean value that indicates whether to show transaction number column.
    /// </returns>
    public boolean showTransactionNumber()
    {
        return showTransactonNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitCarryForwardTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits the carry-forward amounts into different columns.
    /// </summary>
    protected void splitCarryForwardTransactions()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset summaryTempTable
                (ReportingDimension, DisplayValue, CarryForwardEncumbrance, CarryForwardPreEncumbrance)
                select ReportingDimension, DisplayValue, Encumbrance, PreEncumbrance
                    from carryForwardTempTable
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (ReportingDimension, DisplayValue, CarryforwardActuals)
                select ReportingDimension, DisplayValue, Actuals
                    from carryForwardTempTable
                where carryForwardTempTable.IsCarryForward == NoYes::Yes
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (ReportingDimension, DisplayValue, Actuals)
                select ReportingDimension, DisplayValue, Actuals
                    from carryForwardTempTable
                where carryForwardTempTable.IsCarryForward == NoYes::No
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (ReportingDimension, DisplayValue, Encumbrance, PreEncumbrance, Actuals)
                select ReportingDimension, DisplayValue, Encumbrance, PreEncumbrance, Actuals
                    from carryForwardTempTable
                    notexists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;
        }
        else
        {
            insert_recordset summaryTempTable
                (FocusLedgerDimension, DisplayValue, CarryForwardEncumbrance, CarryForwardPreEncumbrance)
                select FocusLedgerDimension, DisplayValue, Encumbrance, PreEncumbrance
                    from carryForwardTempTable
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (FocusLedgerDimension, DisplayValue, CarryforwardActuals)
                select FocusLedgerDimension, DisplayValue, Actuals
                    from carryForwardTempTable
                where carryForwardTempTable.IsCarryForward == NoYes::Yes
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (FocusLedgerDimension, DisplayValue, Actuals)
                select FocusLedgerDimension, DisplayValue, Actuals
                    from carryForwardTempTable
                where carryForwardTempTable.IsCarryForward == NoYes::No
                    exists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;

            insert_recordset summaryTempTable
                (FocusLedgerDimension, DisplayValue, Encumbrance, PreEncumbrance, Actuals)
                select FocusLedgerDimension, DisplayValue, Encumbrance, PreEncumbrance, Actuals
                    from carryForwardTempTable
                    notexists join budgetAnalysisCarryFowardTrackingTmp
                        where budgetAnalysisCarryFowardTrackingTmp.BudgetSource == carryForwardTempTable.BudgetSource;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the transactions based on focus ledger dimension.
    /// </summary>
    protected void summarizeTransactions()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp (
                ReportingDimension,
                Budget,
                Encumbrance,
                PreEncumbrance,
                Actuals,
                CarryForwardEncumbrance, 
                CarryForwardPreEncumbrance,
                CarryForwardActuals,
                CarryForwardBudget,
                RevisedEstimates)
            select ReportingDimension,
                sum(Budget),
                sum(Encumbrance),
                sum(PreEncumbrance),
                sum(Actuals),
                sum(CarryForwardEncumbrance),
                sum(CarryForwardPreEncumbrance),
                sum(CarryForwardActuals),
                sum(CarryForwardBudget),
                sum(RevisedEstimates) 
            from summaryTempTable
                group by ReportingDimension;
        }
        else
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp
                      (FocusLedgerDimension, Budget,        Encumbrance,        PreEncumbrance,         Actuals,        CarryForwardEncumbrance,        CarryForwardPreEncumbrance, CarryForwardActuals,        CarryForwardBudget,         RevisedEstimates)
                select FocusLedgerDimension, sum(Budget),   sum(Encumbrance),   sum(PreEncumbrance),    sum(Actuals),   sum(CarryForwardEncumbrance),   sum(CarryForwardPreEncumbrance), sum(CarryForwardActuals),   sum(CarryForwardBudget),    sum(RevisedEstimates) from summaryTempTable
                group by FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchSign</Name>
				<Source><![CDATA[
    private void switchSign(
        TableName   _tableName,
        FieldName   _fieldName)
    {
        UserConnection  userConnection = new UserConnection();
        str             sql;
        Statement       statement;
    
        sql = strFmt('UPDATE %1\n', _tableName);

        sql += strFmt('SET %1 = -1 * %1', _fieldName);
    
        statement = userConnection.createStatement();
        new SqlStatementExecutePermission(sql).assert();
    
        statement.executeUpdate(sql);
    
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionFocusReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the dimension focus framework to updated the ledger dimension references.
    /// </summary>
    protected void updateDimensionFocusReferences()
    {    
        if (isLedgerBalanceFeatureEnabled)
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            DimensionHierarchy dimensionHierarchy = DimensionHierarchy::find(request.parmDimensionHierarchyId());
            BudgetDimensionFocusUpdateBalance::updateBudgetBalance(dimensionHierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetAnalysisDataProcessor construct(BudgetAnalysisRequest _request)
    {
        BudgetAnalysisDataProcessor processor;
    
        switch (_request.parmRequestType())
        {
            case BudgetAnalysisRequestType::Details:
                processor = BudgetAnalysisDataProcessor::constructForDetail(
                    _request.pack(),
                    _request.parmDetailsTempTable());
                break;
    
            case BudgetAnalysisRequestType::Summary:
                processor = BudgetAnalysisDataProcessor::constructForSummary(
                    _request.pack(),
                    _request.parmSummaryTempTable(),
                    _request.parmTotalsTempTable(),
                    _request.parmDimensionFocusNameTmp());
                break;
        }
    
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForDetail</Name>
				<Source><![CDATA[
    private static BudgetAnalysisDataProcessor constructForDetail(
        container                           _budgetAnalysisRequestContainer,
        BudgetAnalysisDimensionDetailTmp   _detailsTempTable)
    {
        BudgetAnalysisDetailDataProcessor budgetAnalysisDataProcessor = new BudgetAnalysisDetailDataProcessor();
        BudgetAnalysisRequest             request                     = BudgetAnalysisRequest::construct();
    
        request.unpack(_budgetAnalysisRequestContainer);
    
        budgetAnalysisDataProcessor.setRequest(request);
        budgetAnalysisDataProcessor.setDetailTempTable(_detailsTempTable);
    
        return budgetAnalysisDataProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSummary</Name>
				<Source><![CDATA[
    private static BudgetAnalysisDataProcessor constructForSummary(
        container                          _budgetAnalysisParameterContainer,
        BudgetAnalysisDimensionSummaryTmp _summaryTempTable,
        BudgetAnalysisDimensionSummaryTmp _totalsTempTable,
        DimensionFocusNameTmp              _dimensionFocuseNameTmp)
    {
        BudgetAnalysisDataProcessor budgetAnalysisDataProcessor = new BudgetAnalysisSummaryDataProcessor();
        BudgetAnalysisRequest       request                     = BudgetAnalysisRequest::construct();
    
        request.unpack(_budgetAnalysisParameterContainer);
    
        budgetAnalysisDataProcessor.setRequest(request);
        budgetAnalysisDataProcessor.setTotalsTempTable(_totalsTempTable);
        budgetAnalysisDataProcessor.setSummaryTempTable(_summaryTempTable);
        budgetAnalysisDataProcessor.setDimensionFocusNameTempTable(_dimensionFocuseNameTmp);
    
        return budgetAnalysisDataProcessor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>