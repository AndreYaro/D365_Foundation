<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyJournalChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventConsistencyJournalChecker
{
    CheckFix    checkFix;
    Counter     totalNumberOfUpdatedRecords;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    /// <returns>
    /// Container includes inconsistent journal and updated record
    /// </returns>
    public container run()
    {
        Counter             inconsistencyRecords;
        Counter             correctedRecords;
        
        [inconsistencyRecords, correctedRecords] = this.inventJournalTransMissingJournalTable(inconsistencyRecords, correctedRecords);
        [inconsistencyRecords, correctedRecords] = this.postedInvetCountingJournalBlockCounting(inconsistencyRecords, correctedRecords);

        this.increaseTotalNumOfUpdatedRecords(correctedRecords);

        return [inconsistencyRecords, totalNumberOfUpdatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTransMissingJournalTable</Name>
				<Source><![CDATA[
    private container inventJournalTransMissingJournalTable(Counter inconsistencyRecords, Counter correctedRecords)
    {
        RecordInsertList    journalTableList = new RecordInsertList(tableNum(InventJournalTable), true, true, true, true, true);
        InventJournalTable  inventJournalTable;
        InventJournalTrans  inventJournalTrans;

        while select JournalId, JournalType, count(Recid) from inventJournalTrans
            group by JournalId, JournalType
            notexists join inventJournalTable
            where inventJournalTable.JournalId == inventJournalTrans.JournalId
        {
            checkFailed(strFmt("@SCM:JournalCheckWarning", inventJournalTrans.JournalId));
            inconsistencyRecords++;

            if (checkFix == CheckFix::Fix)
            {
                inventJournalTable.JournalId = inventJournalTrans.JournalId;
                inventJournalTable.JournalType = inventJournalTrans.JournalType;
                inventJournaltable.Description = "@SCM:InventJournalTableCreatedAutomaticallyByConsistencyCheck";
                inventJournalTable.NumOfLines = inventJournalTrans.RecId;
                journalTableList.add(inventJournalTable);
                correctedRecords++;
            }
        }

        #OCCRetryCount
        try
        {
            ttsBegin;
            journalTableList.insertDatabase();
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return [inconsistencyRecords, correctedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedInvetCountingJournalBlockCounting</Name>
				<Source><![CDATA[
    private container postedInvetCountingJournalBlockCounting(Counter inconsistencyRecords, Counter correctedRecords)
    {
        InventJournalTable                  inventJournalTable;
        InventItemLocationCountingStatus    inventItemLocationCountingStatus;

        #OCCRetryCount
        try
        {
            while select forupdate inventItemLocationCountingStatus
                where inventItemLocationCountingStatus.CountingStarted == NoYes::Yes
                exists join inventJournalTable
                where inventJournalTable.JournalId == inventItemLocationCountingStatus.CountingJournalId
                    && inventJournalTable.Posted == NoYes::Yes
                    && inventJournalTable.JournalType == InventJournalType::Count
            {
                if (checkFix == CheckFix::Fix)
                {
                    ttsbegin;
                    inventItemLocationCountingStatus.doDelete();
                    ttscommit;
                    correctedRecords++;
                }
                checkFailed(strFmt("@SCM:JournalCheckPostedCntJournalBlockCountingWarning", 
                    inventItemLocationCountingStatus.countingjournalid, 
                    inventItemLocationCountingStatus.ItemId));
                inconsistencyRecords++;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return [inconsistencyRecords, correctedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckFix</Name>
				<Source><![CDATA[
    public CheckFix parmCheckFix(CheckFix _checkFix = checkFix)
    {
        checkFix = _checkFix;
        return checkFix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseTotalNumOfUpdatedRecords</Name>
				<Source><![CDATA[
    private void increaseTotalNumOfUpdatedRecords(Counter _addCount)
    {
        totalNumberOfUpdatedRecords += _addCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventConsistencyJournalChecker construct()
    {
        return new InventConsistencyJournalChecker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventConsistencyJournalChecker</c> class based on the parameters.
    /// </summary>
    /// <param name="_checkFix">
    /// The values determines if data should be corrected or not.
    /// </param>
    /// <returns>
    /// A new instance of the <c>JournalChecker</c> class.
    /// </returns>
    public static InventConsistencyJournalChecker newFromParameters(CheckFix _checkFix)
    {
        InventConsistencyJournalChecker checker = InventConsistencyJournalChecker::construct();
        checker.parmCheckFix(_checkFix);
        return checker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>