<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceMainAccountAmounts_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerBalanceMainAccountAmounts))]
public final class LedgerBalanceMainAccountAmounts_ApplicationSuite_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalanceSim_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the simulation balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    ///    The main account.
    /// </param>
    /// <remarks>
    ///    The main account can have a direct or indirect balance. Use the <c>getAccountingCurrencyBalance
    ///    </c>method and the <c>getTmpData </c>method to access the results.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The main account is null.
    /// </exception>
    public void calculateBalanceSim_IT(MainAccount _mainAccount)
    {
        
        DimensionHierarchy dimHierFocus;

        if (_mainAccount == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (useGeneralJournal)
        {
            dimHierFocus = null;
        }
        else
        {
            dimHierFocus = DimensionHierarchy::getMainAccountFocus();
        }

        if (dimHierFocus == null)
        {
            LedgerBalanceQueryGeneralJournalSim_IT generalJournalBalanceQuerySim = LedgerBalanceQueryGeneralJournalSim_IT::construct();
            generalJournalBalanceQuerySim.setBaseQuery(generalJournalBaseQuery);
            balanceQuery = generalJournalBalanceQuerySim;
        }
        else
        {
            balanceQuery = LedgerBalanceQueryDimensionFocusSim_IT::construct();
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                balanceQuery = LedgerBalanceQueryGeneralLedgerBalanceSim_IT::construct();
            }
            else
            {
                balanceQuery = LedgerBalanceQueryDimensionFocusSim_IT::construct();
            }
        }

        balanceQuery.setLedgerRecId(ledgerRecId);
        balanceQuery.setAccountingDateRange(startAccountingDate, endAccountingDate);
        balanceQuery.setExcludeValues(excludeDebits, excludeCredits, separateDebitsAndCredits);
        balanceQuery.setIncludeValues(includeRegularPeriod, includeOpeningPeriod, includeClosingPeriod, includeClosingPeriodBySystem);
        balanceQuery.setPostingLayer(postingLayer);
        balanceQuery.setSimulationJournalGroupId_IT(simulationJournalGroupId_IT);

        balanceQuery.calculateForMainAccount(_mainAccount);

        accountingCurrencyDebitBalance = balanceQuery.getAccountingCurrencyDebitBalance();
        accountingCurrencyCreditBalance = balanceQuery.getAccountingCurrencyCreditBalance();
        reportingCurrencyBalance = balanceQuery.getReportingCurrencyBalance();
        quantityBalance = balanceQuery.getQuantityBalance();
        tmpAccountSum = balanceQuery.getTmpData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>