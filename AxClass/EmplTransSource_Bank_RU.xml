<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplTransSource_Bank_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplTransSource_Bank_RU extends EmplTransSource_RU
{
    BankAccountTrans    bankAccountTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillSourceData</Name>
				<Source><![CDATA[
    protected void fillSourceData()
    {
        TaxTrans taxTrans;

        select sum(SourceTaxAmountCur),
               sum(SourceBaseAmountCur),
               sum(TaxBaseAmount),
               sum(TaxAmount)
        from taxTrans
        where taxTrans.Voucher          == bankAccountTrans.Voucher    &&
              taxTrans.TransDate        == bankAccountTrans.TransDate  &&
              taxTrans.TaxDirection     != TaxDirection::UseTax &&
              taxTrans.TaxOrigin        != TaxOrigin::Transfer;

        sourceAmountCur        = taxTrans.SourceBaseAmountCur;
        sourceAmountMST        = taxTrans.TaxBaseAmount;
        sourceTaxAmountCur     = taxTrans.SourceTaxAmountCur;
        sourceTaxAmountMST     = taxTrans.TaxAmount;

        sourceAmountCur        = sourceAmountCur ? sourceAmountCur + sourceTaxAmountCur : bankAccountTrans.AmountCur;
        sourceAmountMST        = sourceAmountMST ? sourceAmountMST + sourceTaxAmountMST : bankAccountTrans.AmountMST;
        sourceCurrencyCode     = bankAccountTrans.CurrencyCode;
        sourceDefaultDimension = bankAccountTrans.DefaultDimension;
        sourceName             = "@SYS7439";
        sourceNum              = bankAccountTrans.AccountId;
        sourceTableId          = tableNum(BankAccountTrans);
        sourceRecId            = bankAccountTrans.RecId;
        sourceTransDate        = bankAccountTrans.TransDate;
        sourceDescription      = bankAccountTrans.Txt;
        sourceType             = EmplTransSourceType_RU::Bank;
        sourceTaxGroup         = taxTrans.TaxGroup;
        sourceTaxItemGroup     = taxTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRecord</Name>
				<Source><![CDATA[
    protected void findSourceRecord()
    {
        if (emplTrans.RefTableId == tableNum(BankAccountTrans))
        {
            select firstonly bankAccountTrans
                where bankAccountTrans.RecId   == emplTrans.RefRecId;
        }

        if (! bankAccountTrans)
        {
            select firstonly bankAccountTrans
                where bankAccountTrans.Voucher   == emplTrans.Voucher   &&
                      bankAccountTrans.TransDate == emplTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOutputNames</Name>
				<Source><![CDATA[
    protected void initOutputNames()
    {
        ;
        formName       = formStr(BankAccountTrans);
        itemOutputName = menuitemOutputStr(BankAccountStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or create the ledger dimension for banc account.
    /// </summary>
    /// <returns>
    ///    The ledger dimension account.
    /// </returns>
    public LedgerDimensionAccount ledgerDimension()
    {
        return bankAccountTrans.LedgerDimension ?
               bankAccountTrans.LedgerDimension :
               LedgerDimensionFacade::serviceCreateLedgerDimension(BankAccountTable::findLedgerDimension(bankAccountTrans.AccountId), sourceDefaultDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>