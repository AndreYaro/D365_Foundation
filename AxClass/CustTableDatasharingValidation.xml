<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableDataSharingValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Implements data sharing validation for <c>CustTable</c>.
/// </summary>
[ExportMetadataAttribute(classStr(SysDataSharingTableValidation), 'CUSTTABLE'), ExportAttribute('Dynamics.AX.DataSharing.SysDataSharingTableValidation')]
public class CustTableDataSharingValidation extends SysDataSharingTableValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tableAdded</Name>
				<Source><![CDATA[
    public void tableAdded(SysDataSharingPolicyRecId _policy, TableId _tableId)
    {
        if (_tableId == tableNum(CustTable))
        {
            if (this.detectMultipleCustomerWithSameParty() > 0)
            {
                warning ("@AccountsReceivable:Table_Warning_PartyInUseForMultipleAccounts");
            }

            SysDataSharingTableField tableField;
            SysDataSharingRule rule;

            if (!this.companiesInPolicyHaveSameAccountingCurrency(_policy))
            {
                delete_from tableField 
                    exists join rule
                    where rule.DataSharingPolicy == _policy
                           && rule.SharedTableName == tableId2Name(_tableId)
                           && tableField.DataSharingPolicy == _policy
                           && tableField.DataSharingRule == rule.RecId
                           && tableField.TableName == tableId2Name(_tableId)
                           && tableField.FieldName == fieldId2Name(_tableId, fieldNum(CustTable, CreditMax));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldAdding</Name>
				<Source><![CDATA[
    public boolean tableFieldAdding(SysDataSharingPolicyRecId _policy, TableId _tableId, FieldId _fieldId)
    {
        if (_tableId == tableNum(CustTable) 
            && _fieldId == fieldNum(CustTable, CreditMax))
        {
            return this.companiesInPolicyHaveSameAccountingCurrency(_policy);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_onValidatedDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CustTable), DataEventType::ValidatedDelete)]
    public static void CustTable_onValidatedDelete(Common sender, DataEventArgs e)
    {
        ValidateEventArgs args = e as ValidateEventArgs;

        boolean retValue = args.parmValidateResult();
        
        CustTable custTable = sender as CustTable;

        retValue = CustTableDataSharingValidation::validateDeleteForDataSharing(custTable) && retValue;

        args.parmValidateResult(retValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysDataSharing_canActivate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysDataSharing), staticDelegateStr(SysDataSharing, canActivate))]
    public static void SysDataSharing_canActivate(SysDataSharingPolicyRecId _policyRecId, EventHandlerRejectResult _result)
    {
        if (!CustTableDataSharingValidationCanActivateFlight::instance().isEnabled()
            || SysDataSharingTableValidation::existPolicyWithTableName(_policyRecId, tableId2Name(tableNum(CustTable))))
        {
            CustTableDataSharingValidation validation = new CustTableDataSharingValidation();

            if (validation.detectMultipleCustomerWithSameParty() > 0)
            {
                error ("@AccountsReceivable:Table_Warning_PartyInUseForMultipleAccounts");
                _result.reject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the customer is not used on a sales order, as an invoice account on
    /// another customer, or on a posted customer transaction.
    /// </summary>
    /// <param name = "_custTable">The <c>CustTable</c> record being deleted.</param>
    /// <returns>true if the customer can be deleted; otherwise, false.</returns>
    public static boolean validateDeleteForDataSharing(CustTable _custTable)
    {
        boolean ret = CustTableDataSharingValidation::validateDeleteForDataSharingCustTable(_custTable);
        ret = CustTableDataSharingValidation::validateDeleteForDataSharingSalesTable(_custTable) && ret;
        ret = CustTableDataSharingValidation::validateDeleteForDataSharingCustTrans(_custTable) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectMultipleCustomerWithSameParty</Name>
				<Source><![CDATA[
    private int64 detectMultipleCustomerWithSameParty()
    {
        // This query detects situations where Customers have the same party in multiple companies with different AccountNums.  
        // Due to an AK on CustTable with Party, this situation will fail data sharing with an ugly error when the data copy runs.  
        // This is used to throw a nicer, human readable error.
        str sql = strFmt(@"
            SELECT COUNT(C.ACCOUNTNUM) FROM SYSDATASHARINGPOLICY P 
            JOIN SYSDATASHARINGORGANIZATION O ON O.DATASHARINGPOLICY = P.RECID
            JOIN SYSDATASHARINGRULE R ON R.DATASHARINGPOLICY = P.RECID AND R.SHAREDTABLENAME = '%1'
            JOIN CUSTTABLE C ON C.DATAAREAID = O.DATASHARINGCOMPANY
            WHERE C.PARTY IN
            (
                SELECT C2.PARTY FROM CUSTTABLE C2 WHERE C2.DATAAREAID IN
                (
                    SELECT O2.DATASHARINGCOMPANY FROM SYSDATASHARINGPOLICY P2 
                    JOIN SYSDATASHARINGORGANIZATION O2 ON O2.DATASHARINGPOLICY = P2.RECID
                    WHERE P2.RECID = P.RECID
                )
                AND C2.ACCOUNTNUM <> C.ACCOUNTNUM
            )", strUpr(tableId2Name(tableNum(CustTable))));

        ResultSet set = this.executeSqlStatement(sql);

        set.next();

        return set.getInt64(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companiesInPolicyHaveSameAccountingCurrency</Name>
				<Source><![CDATA[
    private boolean companiesInPolicyHaveSameAccountingCurrency(SysDataSharingPolicyRecId _policy)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganization organization;
        Ledger ledger;
        CurrencyCode accountingCurrency;

        while select RecId from policy
                where policy.RecId == _policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join AccountingCurrency from ledger
            group by ledger.AccountingCurrency
                where ledger.Name == organization.DataSharingCompany
        {
            if (accountingCurrency == '')
            {
                accountingCurrency = ledger.AccountingCurrency;
            }

            if (ledger.AccountingCurrency != accountingCurrency)
            {
                return checkFailed(strFmt("@AccountsReceivable:Table_Error_DataSharingCreditLimitCantBeShared", fieldId2Name(tableNum(CustTable), fieldNum(CustTable, CreditMax)), tableId2Name(tableNum(CustTable))));
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingCustTable</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingCustTable(CustTable _custTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganization organization;
        SysDataSharingRule rule;
        CustTable custTable;

        select firstonly crosscompany RecId from policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join RecId from rule
                where rule.DataSharingPolicy == policy.RecId
                   && rule.SharedTableName == tableId2Name(_custTable.TableId)
            join RecId from custTable
                where custTable.DataAreaId == organization.DataSharingCompany
                   && custTable.InvoiceAccount == _custTable.AccountNum;

        boolean ret = true;
        if (custTable.RecId)
        {
            ret = checkFailed("@SYS67133");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingSalesTable</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingSalesTable(CustTable _custTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganization organization;
        SysDataSharingRule rule;
        SalesTable salesTable;

        select firstonly crosscompany RecId from policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join RecId from rule
                where rule.DataSharingPolicy == policy.RecId
                   && rule.SharedTableName == tableId2Name(_custTable.TableId)
            join RecId from salesTable
                where salesTable.DataAreaId == organization.DataSharingCompany
                   && salesTable.InvoiceAccount == _custTable.AccountNum;
        
        boolean ret = true;
        if (salesTable.RecId)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(SalesTable)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingCustTrans</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingCustTrans(CustTable _custTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganization organization;
        SysDataSharingRule rule;
        CustTrans custTrans;

        select firstonly crosscompany RecId from policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join RecId from rule
                where rule.DataSharingPolicy == policy.RecId
                   && rule.SharedTableName == tableId2Name(_custTable.TableId)
            join RecId from custTrans
                where custTrans.DataAreaId == organization.DataSharingCompany
                   && custTrans.AccountNum == _custTable.AccountNum;
        
        boolean ret = true;
        if (custTrans.RecId)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(CustTrans)));
        }

        select firstonly crosscompany RecId from policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join RecId from rule
                where rule.DataSharingPolicy == policy.RecId
                   && rule.SharedTableName == tableId2Name(_custTable.TableId)
            join RecId from custTrans
                where custTrans.DataAreaId == organization.DataSharingCompany
                   && custTrans.OrderAccount == _custTable.AccountNum;

        if (custTrans.RecId)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(CustTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the specified SQL statement text.
    /// </summary>
    /// <param name="_sqlStatementText">
    ///    The SQL statement text to execute.
    /// </param>
    /// <returns>
    ///    true if the execution was successful; otherwise, false.
    /// </returns>
    private ResultSet executeSqlStatement(str _sqlStatementText)
    {
        ResultSet returnValue;

        str sqlStatementText;

        SqlStatementExecutePermission permission;
        Statement statement;

        sqlStatementText = strLRTrim(_sqlStatementText);

        if (sqlStatementText)
        {
            permission = new SqlStatementExecutePermission(sqlStatementText);

            // Open the code access permission scope.
            permission.assert();

            Connection connection = new Connection();

            statement = connection.createStatement();

            returnValue = statement.executeQueryWithParameters(sqlStatementText, SqlParams::create());

            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();

            Statement.close();
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>