<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourExportSalesVATIn</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceJourExportSalesVATIn</c> class is responsible for domestic VAT-In calculation for export sales.
/// </summary>
/// <remarks>
/// The <c>CustInvoiceJourExportSalesVATIn</c> class extends the <c>CustInvoiceJourExportSalesVAT</c> class.
/// </remarks>
public class CustInvoiceJourExportSalesVATIn extends CustInvoiceJourExportSalesVAT
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportSalesDomesticTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record by using the specified journal number
    /// and voucher number.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <returns>
    /// A <c>ExportSalesInvoiceDomesticTaxVoucher</c> record with the specified journal number and voucher.
    /// </returns>
    protected ExportSalesInvoiceDomesticTaxVoucher createExportSalesDomesticTaxVoucher(LedgerJournalId _journalNum, Voucher _voucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        exportSalesInvoiceDomesticTaxVoucher = super(_journalNum, _voucher);

        exportSalesInvoiceDomesticTaxVoucher.insert();

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLinesForExportSalesVAT</Name>
				<Source><![CDATA[
    protected boolean createJournalLinesForExportSalesVAT(LedgerJournalTable _ledgerJournalTable, Voucher _voucher)
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        CustInvoiceTrans                        custInvoiceTrans;
        ExportSalesInvoiceLineDomesticTaxGroup  exportSalesInvoiceLineDomesticSalesTaxGroup;
        TmpTaxWorkTrans                         taxWorkTrans;
        TaxBaseCur                              taxBaseAmountExcludingTax;
        LineNum                                 lineNum;
        boolean                                 areLinesCreated;

        lineNum = LedgerJournalTrans::lastLineNum(_ledgerJournalTable.JournalNum);

        while select DomesticSalesTaxGroup from exportSalesInvoiceLineDomesticSalesTaxGroup
                where exportSalesInvoiceLineDomesticSalesTaxGroup.ExportSalesInvoice == exportSalesInvoice.RecId
            join TaxItemGroup, LineAmount, CurrencyCode from custInvoiceTrans
                where custInvoiceTrans.RecId == exportSalesInvoiceLineDomesticSalesTaxGroup.CustInvoiceTrans
        {
            taxWorkTrans = Tax::calcTaxAmountPerVatCode_PL(
                exportSalesInvoiceLineDomesticSalesTaxGroup.DomesticSalesTaxGroup,
                custInvoiceTrans.TaxItemGroup,
                postingDate,
                custInvoiceJour.CurrencyCode,
                custInvoiceTrans.LineAmount,
                TaxModuleType::Sales);

            if (taxWorkTrans.SourceTaxAmountCur)
            {
                taxBaseAmountExcludingTax = Tax::baseAmountExclTax(
                    exportSalesInvoiceLineDomesticSalesTaxGroup.DomesticSalesTaxGroup,
                    custInvoiceTrans.TaxItemGroup,
                    postingDate,
                    custInvoiceTrans.CurrencyCode,
                    custInvoiceTrans.LineAmount,
                    TaxModuleType::Sales);

                ledgerJournalTrans = this.initializeLedgerJournalTrans(_ledgerJournalTable.JournalNum, _voucher, taxWorkTrans.TaxCode);

                if (taxWorkTrans.SourceTaxAmountCur > 0)
                {
                    ledgerJournalTrans.AmountCurCredit = abs(custInvoiceTrans.LineAmount - taxBaseAmountExcludingTax);
                    ledgerJournalTrans.AmountCurDebit = 0;
                }
                else
                {
                    ledgerJournalTrans.AmountCurDebit = abs(custInvoiceTrans.LineAmount - taxBaseAmountExcludingTax);
                    ledgerJournalTrans.AmountCurCredit = 0;
                }

                ledgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurCredit, ledgerJournalTrans.CurrencyCode);
                ledgerJournalTrans.AmountCurDebit  = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurDebit, ledgerJournalTrans.CurrencyCode);

                if (ledgerJournalTrans.AmountCurCredit || ledgerJournalTrans.AmountCurDebit)
                {
                    lineNum++;
                    ledgerJournalTrans.LineNum = lineNum;
                    ledgerJournalTrans.insert();
                    areLinesCreated = true;
                }
            }
        }

        if (areLinesCreated)
        {
            info(strfmt("@GLS110219", _ledgerJournalTable.JournalNum));
        }

        return areLinesCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>LedgerJournalTrans</c> record by using the specified journal number, voucher, and
    /// tax code.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> record with the specified journal number, voucher, and tax code.
    /// </returns>
    /// <remarks>
    /// This method initializes a <c>LedgerJournalTrans</c> record. It does not insert the record to the
    /// <c>LedgerJournalTrans</c> table.
    /// </remarks>
    protected LedgerJournalTrans initializeLedgerJournalTrans(LedgerJournalId _journalNum, Voucher _voucher, TaxCode _taxCode)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans = super(_journalNum, _voucher, _taxCode);

        ledgerJournalTrans.CustVendName_PL  = custInvoiceJour.invoiceName();
        ledgerJournalTrans.Addressing_PL    = custInvoiceJour.invoiceAccountAddress();
        CustTable custTable = custInvoiceJour.custTable_InvoiceAccount();

        if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
        {
            custTable.copyPrimaryRegistrationNumberToVATMap(ledgerJournalTrans, custInvoiceJour.InvoiceDate);
        }
        else
        {
            ledgerJournalTrans.VATNumJournal = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custInvoiceJour.InvoiceDate);
        }

        ledgerJournalTrans.VatDueDate_W     = ledgerJournalTrans.TransDate;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CustInvoiceJourExportSalesVATIn</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CustInvoiceJourExportSalesVATIn</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustInvoiceJourExportSalesVATIn construct()
    {
        CustInvoiceJourExportSalesVATIn custInvoiceJourExportSalesVATIn;

        custInvoiceJourExportSalesVATIn = new CustInvoiceJourExportSalesVATIn();

        return custInvoiceJourExportSalesVATIn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>