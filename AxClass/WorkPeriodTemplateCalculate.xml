<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkPeriodTemplateCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WorkPeriodTemplateCalculate</c> class calculates periods for a period template.
/// </summary>
/// <remarks>
///    The storage of the periods must be handled by another class that implements the
///    <c>WorkPeriodTemplateCalculable</c> interface.The first period will have a <c>dateNull</c> from
///    date. The last period will have a <c>maxDate</c> to date.
/// </remarks>
public abstract class WorkPeriodTemplateCalculate
{
    #TimeConstants
    TransDate           todayDate;
    WorkPeriodTemplate  workPeriodTemplate;
    boolean             skipPeriodDescriptions;

    //internal variables
    Set                 setWorkDays;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNumOfWorkDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of regular work days between two given dates.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The number of work days between the given dates according to the work time template.
    /// </returns>
    public int calcNumOfWorkDays(
        TransDate   _fromDate,
        TransDate   _toDate)
    {
        TransDate   transDate;
        int         workDays;

        if (   _fromDate >  _toDate
            || _fromDate == dateNull()
            || _toDate   == dateNull()
            || _toDate   == dateMax())
        {
            return 0;
        }

        for (transDate=_fromDate; transDate <= _toDate; transDate++)
        {
            if (this.isWorkDay(transDate))
            {
                workDays++;
            }
        }

        return workDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates periods from a specified period template.
    /// </summary>
    /// <param name="_caller">
    /// An object which implements the <c>WorkPeriodTemplateCalculable</c> interface.
    /// </param>
    public abstract void calcPeriods(WorkPeriodTemplateCalculable _caller)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object.
    /// </summary>
    public void init()
    {
        this.initSetWorkDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetWorkDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the week day number in the <c>setWorkDays</c> set if the week day is open.
    /// </summary>
    protected void initSetWorkDays()
    {
        setWorkDays = workPeriodTemplate.setWorkDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a given date is a work day.
    /// </summary>
    /// <param name="_transDate">
    /// A date to investigate.
    /// </param>
    /// <returns>
    /// true if the date is a work day; otherwise, false.
    /// </returns>
    protected boolean isWorkDay(TransDate _transDate)
    {
        return setWorkDays.in(dayofwk(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWorkPeriodTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the next <c>WorkPeriodTemplateLine</c> record.
    /// </summary>
    /// <param name="_workPeriodTemplateLine">
    /// The <c>WorkPeriodTemplateLine</c> record that comes before the record to read.
    /// </param>
    /// <returns>
    /// A <c>WorkPeriodTemplateLine</c> record; otherwise, an empty table buffer.
    /// </returns>
    protected WorkPeriodTemplateLine nextWorkPeriodTemplateLine(WorkPeriodTemplateLine _workPeriodTemplateLine)
    {
        WorkPeriodTemplateLine  workPeriodTemplateLine;

        select firstonly workPeriodTemplateLine
            order by LineNumber
            where   workPeriodTemplateLine.PeriodTemplate == workPeriodTemplate.RecId
                &&  workPeriodTemplateLine.LineNumber      > _workPeriodTemplateLine.LineNumber;

        return workPeriodTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPeriodDescriptions</Name>
				<Source><![CDATA[
        public boolean parmSkipPeriodDescriptions(boolean _skipPeriodDescriptions = skipPeriodDescriptions)
    {
        skipPeriodDescriptions = _skipPeriodDescriptions;

        return skipPeriodDescriptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodayDate</Name>
				<Source><![CDATA[
        public TransDate parmTodayDate(TransDate _todayDate = todayDate)
    {
        todayDate = _todayDate;
        return todayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplate</Name>
				<Source><![CDATA[
        public WorkPeriodTemplate parmWorkPeriodTemplate(WorkPeriodTemplate _workPeriodTemplate = workPeriodTemplate)
    {
        workPeriodTemplate = _workPeriodTemplate;
        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if periods can be calculated.
    /// </summary>
    /// <returns>
    ///    true if the specified parameters are fine; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (!workPeriodTemplate.RecId)
        {
            return false;
        }

        if (!setWorkDays)
        {
            return checkFailed(strfmt("@SYS23669",funcname()));
        }

        if (setWorkDays.elements() == 0)
        {
            return checkFailed(strfmt("@SYS131368",workPeriodTemplate.WorkTimeId));
        }

        if (   workPeriodTemplate.FixedDayStart != WeekDays::None
            && !setWorkDays.in(workPeriodTemplate.FixedDayStart))
        {
            return checkFailed("@SYS329418");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WorkPeriodCalculate</c> class.
    /// </summary>
    /// <param name="_refRecId">
    /// An integer that contains a period template record ID.
    /// </param>
    /// <param name="_todayDate">
    /// The date of today.
    /// </param>
    /// <param name="_direction">
    /// A <c>ForwardBackward</c> enumeration value that defines the direction in which to calculate periods.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WorkPeriodCalculate</c> class.
    /// </returns>
    public static WorkPeriodTemplateCalculate newStandard(
        WorkPeriodTemplateRecId _refRecId,
        TransDate               _todayDate,
        ForwardBackward         _direction)
    {
        WorkPeriodTemplateCalculate workPeriodTemplateCalculate;

        switch (_direction)
        {
            case ForwardBackward::Forward:
                workPeriodTemplateCalculate = WorkPeriodTemplateCalculateForward::newStandard(_refRecId,_todayDate);
                break;
            case ForwardBackward::Backward:
                workPeriodTemplateCalculate = WorkPeriodTemplateCalculateBackward::newStandard(_refRecId,_todayDate);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return workPeriodTemplateCalculate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>