<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountRenameProcess_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerAccountRenameProcess_RU extends RunBase
{
    Query                   query;
    QueryBuildDataSource    qbds;
    QueryRun                queryRun;

    Object                  caller;

    boolean                 dummy;
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dummy
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockAccount</Name>
				<Source><![CDATA[
    private void blockAccount(LedgerAccountRenameTable_RU _renameAccountTable)
    {
        DimensionAttributeValue  dimAttrValue;

        _renameAccountTable.ProcessStatus   =   LedgerAccountRenameStatus_RU::Blocked;
        _renameAccountTable.update();
        dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount),
                                                                                      MainAccount::findByMainAccountId(_renameAccountTable.FromAccount).RecId,
                                                                                      true, true);

        dimAttrValue.IsBlockedForManualEntry = NoYes::Yes;
        dimAttrValue.IsSuspended             = NoYes::Yes;
        dimAttrValue.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicatePrevent</Name>
				<Source><![CDATA[
    private boolean checkDuplicatePrevent()
    {
        LedgerAccountRenameTable_RU renameTable, renameTableLike;

        select firstonly RecId, FromAccount, ToAccount from renameTable
            where renameTable.ToAccount       != renameTable.FromAccount &&
                  renameTable.ToAccount
        exists join renameTableLike
            where renameTableLike.RecId       != renameTable.RecId       &&
                  renameTableLike.FromAccount == renameTable.ToAccount   &&
                  ! renameTableLike.ToAccount;

        if (renameTable.RecId)
            return checkFailed(strFmt("@GLS103644",
                               renameTable.FromAccount,
                               renameTable.ToAccount));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateRecord</Name>
				<Source><![CDATA[
    private boolean checkDuplicateRecord()
    {
        LedgerAccountRenameTable_RU renameTable, renameTableSame;

        select firstonly RecId from renameTable
            where renameTable.ToAccount
        exists join renameTableSame
            where renameTableSame.ToAccount == renameTable.ToAccount &&
                  renameTableSame.RecId     != renameTable.RecId;

        if (renameTable.RecId)
            return checkFailed("@GLS103637");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        query = new Query();

        super();

        qbds = query.addDataSource(tableNum(LedgerAccountRenameTable_RU));
        qbds.update(true);
        qbds.addRange(fieldNum(LedgerAccountRenameTable_RU, ProcessStatus)).value(queryValue(LedgerAccountRenameStatus_RU::None));
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean                     ret;
        LedgerAccountRenameTable_RU renameTable;
        MainAccount                 mainAccount;
        LedgerChartOfAccountsRecId  chartOfAccounts = (select firstonly ChartOfAccounts from ledgerAccountRenameTable_RU).ChartOfAccounts ;

        ret = super();

        if (ret && ! Box::confirm(strFmt("@SYS4082000", LedgerAccountRenameTable_RU::affectedCompanies())))
        {
            ret = checkFailed("@GLS101992");
        }

        if (ret)
        {
            if ((select firstonly RecId from ledgerAccountRenameTable_RU
                     where ledgerAccountRenameTable_RU.ToAccount    == '' &&
                           ledgerAccountRenameTable_RU.BlockAccount == NoYes::No).RecId)
            {
                ret = checkFailed(strFmt("@GLS103654", "@GLS103642"));
            }

            ret = ret && this.checkDuplicateRecord();

            select firstonly RecId, FromAccount from renameTable
                where renameTable.FromAccount != renameTable.ToAccount &&
                      renameTable.ToAccount                            &&
                      renameTable.BlockAccount;

            if (renameTable.RecId)
            {
                ret = checkFailed(strFmt("@GLS103643", renameTable.FromAccount));
            }

            ret = ret && this.checkDuplicatePrevent();
        }

        select firstonly RecId, MainAccountId
            from mainAccount
                where mainAccount.LedgerChartOfAccounts == chartOfAccounts
            notexists join renameTable
                where renameTable.FromAccount == mainAccount.MainAccountId ||
                      renameTable.ToAccount   == mainAccount.MainAccountId;

        if (mainAccount.RecId)
        {
            ret = checkFailed(strFmt("@GLS103652", mainAccount.MainAccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameAccount</Name>
				<Source><![CDATA[
    private void renameAccount(LedgerAccountRenameTable_RU _renameTable,
                               NoYes                       _temporary       = NoYes::No,
                               NoYes                       _fromTempAccount = NoYes::No)
    {
        MainAccount     mainAccount;
        MainAccountNum  accountNumBefore;

        if (_fromTempAccount == NoYes::Yes)
        {
            mainAccount = MainAccount::findByMainAccountId(_renameTable.TempAccount, true, _renameTable.ChartOfAccounts);
        }
        else
        {
            mainAccount = MainAccount::findByMainAccountId(_renameTable.FromAccount, true, _renameTable.ChartOfAccounts);
        }

        if (! mainAccount)
            throw error("@GLS103636");

        accountNumBefore = mainAccount.MainAccountId;

        mainAccount.MainAccountId = _temporary ? _renameTable.TempAccount : _renameTable.ToAccount;
        mainAccount.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.Value2(2)
    public void run()
    {
        LedgerAccountRenameTable_RU accountRename;

        ttsbegin;

        this.progressInit("@GLS103628", SysQuery::countTotal(queryRun) * 2, #AviUpdate, 0);
        while (queryRun.next())
        {
            progress.incCount();
            accountRename = LedgerAccountRenameTable_RU::find(queryRun.get(tableNum(LedgerAccountRenameTable_RU)).RecId, true);
            progress.setText(strFmt("@SYS26921", accountRename.FromAccount));

            if (! accountRename.ToAccount ||
                accountRename.ToAccount == accountRename.FromAccount)
            {
                if (accountRename.BlockAccount)
                {
                    this.blockAccount(accountRename);
                }
            }
            else if (LedgerAccountRenameTable_RU::findFromAccount(accountRename.ToAccount))
            {
                accountRename.TempAccount   = int642str(MainAccount::findByMainAccountId(accountRename.FromAccount).RecId);

                accountRename.ProcessStatus = LedgerAccountRenameStatus_RU::InProgress;
                this.renameAccount(accountRename, NoYes::Yes);
                accountRename.update();
            }
            else
            {
                accountRename.ProcessStatus = LedgerAccountRenameStatus_RU::Processed;
                this.renameAccount(accountRename);
                accountRename.update();
            }
        }

        query   = queryRun.query();
        qbds    = query.dataSourceTable(tableNum(LedgerAccountRenameTable_RU));

        qbds.clearRange(fieldNum(LedgerAccountRenameTable_RU, ProcessStatus));
        qbds.addRange(fieldNum(LedgerAccountRenameTable_RU, ProcessStatus)).value(queryValue(LedgerAccountRenameStatus_RU::InProgress));

        queryRun.reset();
        progress.setTotal(progress.getTotal() / #Value2 + SysQuery::countTotal(queryRun));
        while (queryRun.next())
        {
            progress.incCount();
            accountRename = LedgerAccountRenameTable_RU::find(queryRun.get(tableNum(LedgerAccountRenameTable_RU)).RecId, true);
            progress.setText(strFmt("@SYS26921", accountRename.FromAccount));

            accountRename.ProcessStatus = LedgerAccountRenameStatus_RU::Processed;
            this.renameAccount(accountRename, NoYes::No, NoYes::Yes);
            accountRename.update();

            progress.incCount();
        }

        ttscommit;

        caller.refreshFormDatesoure();

        progress.kill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerForm</Name>
				<Source><![CDATA[
    private void setCallerForm(Args _args)
    {
        caller  =   _args.caller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS103628";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerAccountRenameProcess_RU  ledgerProcess;

        if (!_args || _args.dataset() != tableNum(LedgerAccountRenameTable_RU))
            throw error("@SYS59121");

        ledgerProcess = new LedgerAccountRenameProcess_RU();

        ledgerProcess.setCallerForm(_args);

        if (ledgerProcess.prompt())
        {
            ledgerProcess.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>