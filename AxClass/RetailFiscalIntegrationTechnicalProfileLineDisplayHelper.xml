<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalIntegrationTechnicalProfileLineDisplayHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFiscalIntegrationTechnicalProfileLineDisplayHelper</c> class helps display dynamic properties for technical profile line.
/// </summary>
public class RetailFiscalIntegrationTechnicalProfileLineDisplayHelper
{
    private FormGroupControl fiscalConnectorGroup, fiscalDeviceGroup, fiscalSettingsGroup;
    private RetailFiscalIntegrationConfigurationHelper configHelper;
    private RetailFunctionalityProfileFiscalIntegrationTechnicalProfileLine retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine;
    private RetailHardwareProfileFiscalIntegrationTechnicalProfileLine retailHardwareProfileFiscalIntegrationTechnicalProfileLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs RetailFiscalIntegartionTechnicalProfileLineDisplayHelper.
    /// </summary>
    /// <param name = "_fiscalConnectorGroup">Form control display fiscal connector.</param>
    /// <param name = "_fiscalDeviceGroup">Form control display fiscal device.</param>
    /// <param name = "_fiscalSettingsGroup">Form control display fiscal settings.</param>
    /// <param name = "_retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine">Reatil fiscal integartion technical profile line table.</param>
    public void new(FormGroupControl _fiscalConnectorGroup, FormGroupControl _fiscalDeviceGroup, FormGroupControl _fiscalSettingsGroup, common _retailFiscalIntegrationTechnicalProfileLine)
    {
        fiscalConnectorGroup = _fiscalConnectorGroup;
        fiscalDeviceGroup = _fiscalDeviceGroup;
        fiscalSettingsGroup = _fiscalSettingsGroup;
        if (_retailFiscalIntegrationTechnicalProfileLine is retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine)
        {
            retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine = _retailFiscalIntegrationTechnicalProfileLine;
        }
        else if (_retailFiscalIntegrationTechnicalProfileLine is RetailHardwareProfileFiscalIntegrationTechnicalProfileLine)
        {
            retailHardwareProfileFiscalIntegrationTechnicalProfileLine = _retailFiscalIntegrationTechnicalProfileLine;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        configHelper = new RetailFiscalIntegrationConfigurationHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFiscalTechnicalProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays fiscal technical properties.
    /// </summary>
    public void displayFiscalTechnicalProperties()
    {
        RetailFiscalIntegrationTechnicalProfile fiscalTechnicalProfile = this.getFiscalTechnicalProfile();

        boolean shouldDisplayPropertyGroup = fiscalTechnicalProfile.ProfileId != null;

        this.clearFiscalTechnicalDynamicControls();

        if (shouldDisplayPropertyGroup)
        {
            this.addGeneralGroup(fiscalTechnicalProfile);
            this.addDeviceGroup(fiscalTechnicalProfile);
            this.addSettingGroup(fiscalTechnicalProfile);
        }

        // Dynamics groups
        fiscalDeviceGroup.visible(shouldDisplayPropertyGroup);
        fiscalConnectorGroup.visible(shouldDisplayPropertyGroup);
        fiscalSettingsGroup.visible(shouldDisplayPropertyGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalTechnicalProfile</Name>
				<Source><![CDATA[
    private RetailFiscalIntegrationTechnicalProfile getFiscalTechnicalProfile()
    {
        RetailFiscalIntegrationTechnicalProfile fiscalTechnicalProfile;
        if (retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine.FiscalTechnicalProfileId)
        {
            fiscalTechnicalProfile = RetailFiscalIntegrationTechnicalProfile::findProfileId(retailFunctionalityProfileFiscalIntegrationTechnicalProfileLine.FiscalTechnicalProfileId);
        }
        else if (retailHardwareProfileFiscalIntegrationTechnicalProfileLine.FiscalTechnicalProfileId)
        {
            fiscalTechnicalProfile = RetailFiscalIntegrationTechnicalProfile::findProfileId(retailHardwareProfileFiscalIntegrationTechnicalProfileLine.FiscalTechnicalProfileId);
        }

        return fiscalTechnicalProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFiscalTechnicalDynamicControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears fiscal technical dynamic controls.
    /// </summary>
    public void clearFiscalTechnicalDynamicControls()
    {
        //Removes all dynamic controls in fiscalDeviceGroup.
        while (fiscalDeviceGroup.controlCount() > 0)
        {
            fiscalDeviceGroup.formRun().design().removeControl(fiscalDeviceGroup.controlNum(1).id());
        }

        //Removes all dynamic controls in fiscalConnectorGroup.
        while (fiscalConnectorGroup.controlCount() > 0)
        {
            fiscalConnectorGroup.formRun().design().removeControl(fiscalConnectorGroup.controlNum(1).id());
        }

        //Removes all dynamic controls in fiscalSettingsGroup.
        while (fiscalSettingsGroup.controlCount() > 0)
        {
            fiscalSettingsGroup.formRun().design().removeControl(fiscalSettingsGroup.controlNum(1).id());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralGroup</Name>
				<Source><![CDATA[
    private void addGeneralGroup(RetailFiscalIntegrationTechnicalProfile _fiscalTechnicalProfile)
    {
        RetailFiscalIntegrationConnectorTable connectorTable = RetailFiscalIntegrationConnectorTable::findByName(_fiscalTechnicalProfile.ConnectorName);

        if (connectorTable)
        {
            XMLNodeList generalNodeList = configHelper.getFiscalIntegrationPropertyNodeListByNameSpace(connectorTable.Manifest, RetailFiscalIntegrationConnectorContants::ConnectorGeneralInfo);

            configHelper.getFiscalIntegrationProperties(generalNodeList);
            configHelper.setParentControl(fiscalConnectorGroup);
            configHelper.displayPropertyValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSettingGroup</Name>
				<Source><![CDATA[
    private void addSettingGroup(RetailFiscalIntegrationTechnicalProfile _fiscalTechnicalProfile)
    {
        XMLNodeList settingNodeList = configHelper.getFiscalIntegrationPropertyNodeListByNameSpace(_fiscalTechnicalProfile.TechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorSettingsInfo);

        configHelper.getFiscalIntegrationProperties(settingNodeList);
        configHelper.setParentControl(fiscalSettingsGroup);
        configHelper.displayPropertyValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeviceGroup</Name>
				<Source><![CDATA[
    private void addDeviceGroup(RetailFiscalIntegrationTechnicalProfile _fiscalTechnicalProfile)
    {
        XMLNodeList connectorNodeList = configHelper.getFiscalIntegrationPropertyNodeListByNameSpace(_fiscalTechnicalProfile.TechnicalProfileProperties, RetailFiscalIntegrationConnectorContants::ConnectorConnectionInfo);

        configHelper.getFiscalIntegrationProperties(connectorNodeList);
        configHelper.setParentControl(fiscalDeviceGroup);
        configHelper.displayPropertyValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTechnicalProfilesAvailableAtRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query containing the retail fiscal technical profiles that are available at the register level, 
    /// e.g. in the retail functionality profile form on the 'Fiscal services' fast tab.
    /// </summary>
    /// <returns>
    /// The query with the available fiscal technical profiles.
    /// </returns>
    internal static Query getTechnicalProfilesAvailableAtRegister()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RetailFiscalIntegrationTechnicalProfile));
        queryBuildDataSource.addRange(fieldNum(RetailFiscalIntegrationTechnicalProfile, ConnectorType)).value(
            strFmt('(%1.%2 == %3) || (%1.%2 == %4) || ((%1.%2 == %5) && (%1.%6 == %7))',
                /* 1 */ queryBuildDataSource.name(),
                /* 2 */ fieldStr(RetailFiscalIntegrationTechnicalProfile, ConnectorType),
                /* 3 */ enum2int(RetailFiscalIntegrationConnectorType::Internal),
                /* 4 */ enum2int(RetailFiscalIntegrationConnectorType::External),
                /* 5 */ enum2int(RetailFiscalIntegrationConnectorType::Local),
                /* 6 */ fieldStr(RetailFiscalIntegrationTechnicalProfile, ConnectorLocation),
                /* 7 */ enum2int(RetailFiscalIntegrationConnectorLocation::Register)));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>