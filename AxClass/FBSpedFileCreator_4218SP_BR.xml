<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_4218SP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the CAT 42/18 file for SP state.
/// </summary>
internal class FBSpedFileCreator_4218SP_BR extends FBSpedFileCreatorBase_BR
{
    protected FiscalEstablishment_BR fiscalEstablishment;
    protected FBSpedFiscal4218FileType_BR spedFileType;
    protected CAT4218SPVersion_BR spedVersion;
    protected Set itemSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FBBookingPeriod_BR _fbBookingPeriod,
        FBFile_BR _fbFile,
        FBSpedFiscal4218FileType_BR _spedFileType,
        CAT4218SPVersion_BR _spedVersion)
    {
        super();

        fiscalEstablishment = _fbBookingPeriod.fiscalEstablishment();
        spedFileType = _spedFileType;
        fbBookingPeriod = _fbBookingPeriod;
        spedVersion = _spedVersion;

        fbFile = _fbFile;
        spedFile = new FBSpedFile_BR();
        spedFile.parmSkipOpeningRecords(true);
        itemSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNewCreator</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FBSpedFileCreator_4218SP_BR</c>.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    ///     The booking period to be used by the class in order to determine which data should be selected to be exported to the file.
    /// </param>
    /// <param name="_fbFile">
    ///     An instance of <c>FBFile_BR</c> representing the disk file where the data should be written to.
    /// </param>
    /// <param name="_spedFileType">
    ///     A <c>FBSpedFiscal4218FileType_BR</c> enum element.
    /// </param>
    /// <param name="_spedVersion">
    ///     The version of report.
    /// </param>
    /// <returns>
    ///     The new instance of <c>FBSpedFileCreator_4218SP_BR</c>.
    /// </returns>
    public server static FBSpedFileCreator_4218SP_BR constructNewCreator(FBBookingPeriod_BR _fbBookingPeriod,
        FBFile_BR _fbFile, 
        FBSpedFiscal4218FileType_BR _spedFileType, 
        CAT4218SPVersion_BR _spedVersion)
    {
        return new FBSpedFileCreator_4218SP_BR(_fbBookingPeriod, _fbFile, _spedFileType, _spedVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalCodeForFiscalDocument</Name>
				<Source><![CDATA[
    private str 1 getLegalCodeForFiscalDocument(
        boolean _finalUser,
        str _taxationCode,
        SalesPurchCFOPId_BR _cfop)
    {
        if (_finalUser && _taxationCode == FiscalBooksConstants_BR::TaxationCode60)
        {
            return '1';
        }

        if (_taxationCode == FiscalBooksConstants_BR::TaxationCode90)
        {
            return '2';
        }
        else if(_taxationCode == FiscalBooksConstants_BR::TaxationCode30)
        {
            return '3';
        }

        if (subStr(_cfop, 1, 1) != '5' && _taxationCode == FiscalBooksConstants_BR::TaxationCode60)
        {
            return '4';
        }

        return '0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSTaxRate</Name>
				<Source><![CDATA[
    private TaxValue getICMSTaxRate(ItemId _itemId)
    {
        TaxValue ret = 0;
        TaxItemGroup taxItemGroupId = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch).TaxItemGroupId;

        if (!taxItemGroupId)
        {
            taxItemGroupId = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales).TaxItemGroupId;
        }

        if (taxItemGroupId)
        {
            TaxOnItem taxOnItem;
            TaxTable taxTable;

            select firstOnly taxTable
                where taxTable.TaxType_BR == TaxType_BR::ICMS
                exists join taxOnItem
                    where taxOnItem.TaxCode == taxTable.TaxCode
                        && taxOnItem.TaxItemGroup == taxItemGroupId;

            ret = taxTable.showTaxValue();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records for the report.
    /// </summary>
    protected void populateFileContent()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10003, funcName());

        this.createRecord0000();

        this.createRecord1050();

        SetEnumerator itemSetEnum = itemSet.getEnumerator();

        while (itemSetEnum.moveNext())
        {
            this.createRecord1100(itemSetEnum.current());
        }

        this.createRecord0150(null, fiscalEstablishment);
        this.createRecord0200(null, fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record 0000 for the report.
    /// </summary>
    protected void createRecord0000()
    {
        FBSpedRecord_BR spedRecord;
        LogisticsPostalAddress fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        spedRecord = FBSpedRecord_BR::constructEmpty('0000'); //REG
        spedRecord.parmIsCAT4218(true);

        spedRecord.addFieldString                   (date2str(fbBookingPeriod.periodTo(),
            23,
            DateDay::None,
            DateSeparator::None,
            DateMonth::Digits2,
            DateSeparator::None,
            DateYear::Digits4,
            DateFlags::None)); //PERIOD
        spedRecord.addFieldString                   (fiscalEstablishment.Name); //NOME
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14); //CNPJ
        spedRecord.addFieldString                   (this.keepNumbers(fiscalEstablishment.IENum_BR)); //IE
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7); //COD_NUM
        spedRecord.addFieldString                   (enum2str(spedVersion)); //COD_VER
        spedRecord.addFieldNumericFilledWithZeros   (spedFileType, 2); //COD_FIN

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0150 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0150(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        #ISOCountryRegionCodes

        BacenCode_BR brazilianCountryCode = LogisticsAddressCountryRegion::find(SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoBR)).BACENCode_BR;

        if (FBSpedFile4218SPFEIn0150_BRFlight::instance().isEnabled() && 
            _fiscalEstablishment.postalAddress().State == FiscalBooksConstants_BR::StateSP &&
            !FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(
                spedFileParty,
                _fiscalEstablishment.RecId,
                FBThirdPartyType_BR::FiscalEstablishment,
                _fiscalEstablishment.FiscalEstablishmentId))
        {
            spedFileParty.insertFiscalEstablishment(_fiscalEstablishment.RecId);
        }

        while select spedFileParty
            where spedFileParty.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findRecId(spedFileParty.LogisticsPostalAddress);

            FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('0150');                        // REG
            spedRecord.parmIsCAT4218(true);

            BacenCode_BR countryCode = LogisticsAddressCountryRegion::find(logisticsPostalAddress.CountryRegionId).BACENCode_BR;

            spedRecord.addFieldString                   (spedFileParty.code(), 60);     // COD_PART
            spedRecord.addFieldString                   (spedFileParty.Name, 100);      // NOME
            spedRecord.addFieldString                   (countryCode, 5);               // COD_PAIS
            spedRecord.addFieldString                   (spedFileParty.CNPJ, 14);   // CNPJ
            spedRecord.addFieldString                   (spedFileParty.CPF, 11);    // CPF
            spedRecord.addFieldString                   (spedFileParty.IENum == 'ISENTO' ? '' : IEValidation_BR::removeFormattingSP(spedFileParty.IENum), 14);  // IE
            spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(logisticsPostalAddress), 7);  // COD_MUN

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0200</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 0200 record.
    /// </summary>
    /// <param name="_parentRecord">
    /// A <c>FBSpedRecord_BR</c> object parent.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> table record.
    /// </param>
    protected void createRecord0200(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        while select spedFileItem
            where spedFileItem.FiscalEstablishmentRecId == _fiscalEstablishment.RecId
        {
            InventTable inventTable = InventTable::find(spedFileItem.ItemId);
            TaxValue itemTaxValue = this.getICMSTaxRate(spedFileItem.ItemId);

            FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('0200');  // REG
            spedRecord.parmIsCAT4218(true);

            spedRecord.addFieldString                   (spedFileItem.ItemId);                                                  // COD_ITEM
            spedRecord.addFieldString                   (strLRTrim(inventTable.NameAlias));                                     // DESCR_ITEM
            spedRecord.addFieldString                   (InventItemBarcode::findShowForItem(inventTable.ItemId).ItemBarCode);   // COD_BARRA
            spedRecord.addFieldString                   (FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol,inventTable.inventTableModuleInvent().UnitId)); // UNID_INV

            if (!(inventTable.InventProductType_BR == FiscalBooksConstants_BR::InventProductType07 ||
                inventTable.InventProductType_BR == FiscalBooksConstants_BR::InventProductType08 ||
                inventTable.InventProductType_BR == FiscalBooksConstants_BR::InventProductType09 ||
                inventTable.InventProductType_BR == FiscalBooksConstants_BR::InventProductType10 ||
                inventTable.InventProductType_BR == FiscalBooksConstants_BR::InventProductType99))
            {
                spedRecord.addFieldString               (this.keepNumbers(inventTable.TaxFiscalClassification_BR));             // COD_NCM
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                                     // COD_NCM
            }

            if (itemTaxValue)
            {
                spedRecord.addFieldNumeric(itemTaxValue, 2);                                                                    // ALIQ_ICMS
            }
            else
            {
                spedRecord.addFieldEmpty();                                                                                     // ALIQ_ICMS
            }

            spedRecord.addFieldString(this.keepNumbers(TaxSubstitutionCodeTable_BR::getTaxSubstitutionCode(inventTable.ItemId, inventTable.TaxFiscalClassification_BR)), 7); // CEST

            if (_parentRecord)
            {
                this.addChildRecord(_parentRecord, spedRecord);
            }
            else
            {
                this.addRecord(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        throw Error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1050</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 1050 record.
    /// </summary>
    protected void createRecord1050()
    {
        InventTable inventTable;
        FBICMSSTInventoryBalance_BR fBTaxAssessmentInventoryBalance_BRPrev;
        FBICMSSTInventoryBalance_BR fBTaxAssessmentInventoryBalance_BRCur;
        RecId prevBookingPeriodId = fbBookingPeriod.getPreviousBookingPeriod().RecId;

        while select sum(Quantity), sum(ICMSSTTaxAmount), sum(ICMSTaxAmount) from fBTaxAssessmentInventoryBalance_BRCur
            where fBTaxAssessmentInventoryBalance_BRCur.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fBTaxAssessmentInventoryBalance_BRCur.CurrentPeriod == NoYes::Yes
        join sum(Quantity), sum(ICMSSTTaxAmount), sum(ICMSTaxAmount) from fBTaxAssessmentInventoryBalance_BRPrev
            where fBTaxAssessmentInventoryBalance_BRPrev.FBBookingPeriod_BR == prevBookingPeriodId
                && fBTaxAssessmentInventoryBalance_BRPrev.ItemId == fBTaxAssessmentInventoryBalance_BRCur.ItemId
                && fBTaxAssessmentInventoryBalance_BRPrev.NextPeriod == NoYes::Yes
        join ItemId from inventTable
            group by ItemId
            where inventTable.ItemId == fBTaxAssessmentInventoryBalance_BRCur.ItemId
        {
            FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('1050'); //REG
            spedRecord.parmIsCAT4218(true);

            spedRecord.addFieldString(inventTable.ItemId); //CODE_ITEM
            spedRecord.addFieldNumeric(fBTaxAssessmentInventoryBalance_BRPrev.Quantity, 3); //QTD_INI
            spedRecord.addFieldNumeric(fBTaxAssessmentInventoryBalance_BRPrev.ICMSSTTaxAmount
                + fBTaxAssessmentInventoryBalance_BRPrev.ICMSTaxAmount, 2); //ICMS_TOT_INI
            spedRecord.addFieldNumeric(fBTaxAssessmentInventoryBalance_BRCur.Quantity, 3); //QTD_FIM
            spedRecord.addFieldNumeric(fBTaxAssessmentInventoryBalance_BRCur.ICMSSTTaxAmount
                + fBTaxAssessmentInventoryBalance_BRCur.ICMSTaxAmount, 2); //ICMS_TOT_FIM

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventTable.ItemId))
            {
                spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
            }

            this.addRecord(spedRecord);

            itemSet.add(inventTable.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 1100 record.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>ItemId</c> for ranges.
    /// </param>
    private void createRecord1100(ItemId _itemId)
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS;
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST;
        FiscalDocumentLine_BR documentline;
        FiscalDocument_BR document;
        FBBookingPeriodFiscalDocument_BR bookingPeriodFiscalDocument;
        FiscalDocumentTaxTrans_BR taxTransICMS;
        FiscalDocumentTaxTrans_BR taxTransICMSST;
        FBBookingPeriodPresumedIncDocuments_BR fBTaxAssessmentPresumedIncDocuments_BR;
        str 1 legalCode;
        AmountMST outgoingAmount = 0;

        while select TaxAmountICMS, TaxAmountICMSST from fBTaxAssessmentPresumedIncDocuments_BR
        join LineNum, CFOP, Quantity from documentLine
            where documentLine.RecId == fBTaxAssessmentPresumedIncDocuments_BR.FiscalDocumentLine_BR
                && documentLine.ItemId == _itemId
        join AccountingDate, AccessKey, FiscalDocumentAccountNum, FiscalDocumentAccountType,
            FiscalEstablishmentPostalAddress, DeliveryLogisticsPostalAddress, FinalUser, Direction from document
            order by document.AccountingDate
            where document.RecId == documentline.FiscalDocument
        exists join bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FiscalDocument_BR == document.RecId
                && bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            this.writeRecord1100(_itemId,
            document,
            documentline,
            abs(fBTaxAssessmentPresumedIncDocuments_BR.TaxAmountICMS + fBTaxAssessmentPresumedIncDocuments_BR.TaxAmountICMSST),
            0);
        }

        while select AccountingDate, AccessKey, FiscalDocumentAccountNum, FiscalDocumentAccountType,
        FiscalEstablishmentPostalAddress, DeliveryLogisticsPostalAddress, FinalUser, Direction from document
            order by document.AccountingDate
            where document.Direction == FiscalDocDirection_BR::Outgoing
        join LineNum, CFOP, Quantity from documentLine
            where documentline.FiscalDocument == document.RecId
                && documentLine.ItemId == _itemId
        join TaxationCode, TaxAmountOther, TaxBaseAmountExempt, TaxValue from taxTransICMS
            where taxTransICMS.FiscalDocumentLine == documentline.RecId
                && taxTransICMS.Type == TaxType_BR::ICMS
        join SPEDPresumedTaxAmount from fiscalDocumentTaxTransPresumedICMS
            where fiscalDocumentTaxTransPresumedICMS.FiscalDocumentTaxTrans_BR == taxTransICMS.RecId
        join TaxationCode, TaxAmountOther, TaxBaseAmountExempt, TaxValue from taxTransICMSST
            where taxTransICMSST.FiscalDocumentLine == documentline.RecId
                && taxTransICMSST.Type == TaxType_BR::ICMSST
        join SPEDPresumedTaxAmount from fiscalDocumentTaxTransPresumedICMSST
            where fiscalDocumentTaxTransPresumedICMSST.FiscalDocumentTaxTrans_BR == taxTransICMSST.RecId
        exists join bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FiscalDocument_BR == document.RecId
                && bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            legalCode = this.getLegalCodeForFiscalDocument(document.FinalUser, taxTransICMSST.TaxationCode, documentline.CFOP);

            if (legalCode == '1' || legalCode == '3')
            {
                outgoingAmount = taxTransICMS.TaxAmountOther + taxTransICMSST.TaxAmountOther
                + (taxTransICMS.TaxBaseAmountExempt * taxTransICMS.TaxValue / 100)
                + (taxTransICMSST.TaxBaseAmountExempt * taxTransICMSST.TaxValue / 100);
            }
            else
            {
                outgoingAmount = fiscalDocumentTaxTransPresumedICMS.SPEDPresumedTaxAmount
                + fiscalDocumentTaxTransPresumedICMSST.SPEDPresumedTaxAmount;
            }

            this.writeRecord1100(_itemId,
                document,
                documentline,
                0,
                abs(outgoingAmount),
                legalCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecord1100</Name>
				<Source><![CDATA[
    private void writeRecord1100(ItemId _itemId,
        FiscalDocument_BR _document,
        FiscalDocumentLine_BR _documentLine,
        Amount _icmsTotAmount,
        Amount _vlConfrAmount,
        str 1 _legalCode = '')
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('1100'); //REG
        spedRecord.parmIsCAT4218(true);
        spedRecord.addFieldString(_document.AccessKey); //CHV_DOCe
        spedRecord.addFieldDate(_document.AccountingDate); //DATA
        spedRecord.addFieldNumeric(_documentLine.LineNum, 0); //NUM_ITEM

        CustVendTable custVendTable;
        FBThirdPartyType_BR partyType;

        if (_document.Direction == FiscalDocDirection_BR::Outgoing)
        {
            custVendTable = CustTable::find(_document.FiscalDocumentAccountNum);
            partyType = FBThirdPartyType_BR::Customer;

            spedRecord.addFieldNumeric(1); //IND_OPER
        }
        else
        {
            custVendTable = VendTable::find(_document.FiscalDocumentAccountNum);
            partyType = FBThirdPartyType_BR::Vendor;

            spedRecord.addFieldNumeric(0); //IND_OPER
        }

        spedRecord.addFieldString(_itemId); //CODE_ITEM
        spedRecord.addFieldString(this.keepNumbers(_documentline.CFOP)); //CFOP
        spedRecord.addFieldNumeric(abs(_documentline.Quantity), 3); //QTD

        spedRecord.addFieldNumeric(_icmsTotAmount, 2); //ICMS_TOT
        spedRecord.addFieldNumeric(_vlConfrAmount, 2); //VL_CONFR

        spedRecord.addFieldString(_legalCode); //COD_LEGAL

        if (!FBSpedFilePartyTmp_BR::existsForAccountTypeAndNum(spedFileParty,
        fiscalEstablishment.RecId, partyType, _document.FiscalDocumentAccountNum))
        {
            spedFileParty.insertFromCustVendTable(custVendTable, fiscalEstablishment.FiscalEstablishmentId, partyType);
        }

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>