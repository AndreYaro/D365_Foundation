<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRequisitionRuleExpressionSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvRequisitionRuleExpressionSetup</c> class is used for policy expressions on the travel
/// requisition line.
/// </summary>
[
ExpressionCurrencyFieldMapAttribute(methodstr(TrvRequisitionRuleExpressionSetup, parmTotalAmount), methodstr(TrvRequisitionRuleExpressionSetup, parmAccountingCurrencyCode)),
ExpressionCurrencyFieldMapAttribute(methodstr(TrvRequisitionRuleExpressionSetup, parmAmountForDayPerCategory), methodstr(TrvRequisitionRuleExpressionSetup, parmAccountingCurrencyCode)),
ExpressionCurrencyLEAttribute(tableStr(TrvRequisitionExpressionBuilderView), fieldStr(TrvRequisitionExpressionBuilderView, LegalEntity)),
ExpressionCurrExchRateDateAttribute(tableStr(TrvRequisitionExpressionBuilderView), fieldStr(TrvRequisitionExpressionBuilderView, EstimatedDate))
]
class TrvRequisitionRuleExpressionSetup extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(TrvRequisitionRuleExpressionSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the accounting currency code from the ledger that is associated with the legal entity of
    /// the record.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The accounting currency code from the ledger that is associated with the legal entity of the record.
    /// </returns>
    [ExpressionFieldHideAttribute]
    public CurrencyCode parmAccountingCurrencyCode(
            CompanyId _companyId,
            tableId   _tableId,
            RecId     _recId)
    {
        TrvRequisitionLine  trvRequisitionLine = TrvRequisitionLine::find(_recId);

        return Ledger::accountingCurrency(trvRequisitionLine.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountForDayPerCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total expense amount for the date and the category in the ledger accounting currency.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total expense amount for the date and the category for the specified travel requisition.
    /// </returns>
    public TrvAmountForDayPerCategory parmAmountForDayPerCategory(
            CompanyId _companyId,
            tableId   _tableId,
            RecId     _recId)
    {
        TrvRequisitionLine trvRequisitionLine;
        TrvRequisitionLine currTrvRequisitionLine;

        currTrvRequisitionLine = TrvRequisitionLine::find(_recId);

        if (currTrvRequisitionLine)
        {
            select sum(AccountingCurrencyAmount) from trvRequisitionLine where
                trvRequisitionLine.TrvRequisitionTable  == currTrvRequisitionLine.TrvRequisitionTable &&
                trvRequisitionLine.Category             == currTrvRequisitionLine.Category &&
                trvRequisitionLine.EstimatedDate        == currTrvRequisitionLine.EstimatedDate;
        }

        return trvRequisitionLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total estimate for the travel requisition in the ledger accounting currency.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total estimated amount for the travel requisition.
    /// </returns>
    public TrvTotalExpenseAmount parmTotalAmount(
            CompanyId _companyId,
            tableId   _tableId,
            RecId     _recId)
    {
        TrvRequisitionLine      trvRequisitionLine;
        TrvRequisitionTable     trvRequisitionTable;

        select RecId from trvRequisitionTable
            join TrvRequisitionTable from trvRequisitionLine
                where trvRequisitionTable.RecId == trvRequisitionLine.TrvRequisitionTable
                   && trvRequisitionLine.RecId == _recId;

        return trvRequisitionTable.totalEstimate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>