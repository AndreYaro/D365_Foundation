<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesNotInvoicedDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesNotInvoicedDP</c> class is a support class for the <c>JmgAttendance</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(SalesNotInvoiced)),
    SRSReportParameterAttribute(classStr(InventDimViewContract))
]
public class SalesNotInvoicedDP extends SRSReportDataProviderBase
{
    SalesNotInvoicedTmp     tmpTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromEcoResCategory</Name>
				<Source><![CDATA[
        private void getFromEcoResCategory(SalesLine    _salesLine)
    {
        EcoResCategory  ecoResCategory  = EcoResCategory::find(_salesLine.SalesCategory);
        tmpTable.SalesCategory_Name     = ecoResCategory.Name;
        tmpTable.EcoResRecId            = ecoResCategory.RecId;
        tmpTable.InstanceRelationType   = ecoResCategory.InstanceRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromInventDim</Name>
				<Source><![CDATA[
        private void getFromInventDim(InventDim _inventDim)
    {
        #define.dimContainerStart(1)
        #define.dimContainerEnd(3)
        InventDimViewContract   contract = this.parmDataContract();
        InventDimParm   inventDimParm = contract.parmInventDimParm();
        List            invDimList = inventDimParm.selectedDimFields();
        container dimCon = conDel(invDimList.pack(),#dimContainerStart,#dimContainerEnd);

        tmpTable.InventDimStr               = InventDim::dimReportStrAll(_inventDim,dimCon,infolog.language());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromSalesLine</Name>
				<Source><![CDATA[
        private void getFromSalesLine(SalesLine    _salesLine)
    {
        RoundOff         roundOffAmount = Currency::roundingPrecisionAdjusted(_salesLine.CurrencyCode);
        tmpTable.ItemId                 = _salesLine.ItemId;
        tmpTable.RemainSalesFinancial   = _salesLine.RemainSalesFinancial;
        tmpTable.RemainSalesPhysical    = _salesLine.RemainSalesPhysical;
        tmpTable.SalesQty               = _salesLine.SalesQty;
        tmpTable.Name                   = _salesLine.Name;
        tmpTable.SalesCategory          = _salesLine.SalesCategory;
        tmpTable.DeliveredInTotal       = _salesLine.deliveredInTotal();
        tmpTable.InvoicedInTotal        = _salesLine.invoicedInTotal();
        tmpTable.LineAmountExclTax      = _salesLine.lineAmountExclTax();
        tmpTable.DecimalPrecision       = numOfDec(roundOffAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromSalesTable</Name>
				<Source><![CDATA[
        private void getFromSalesTable(SalesTable _salesTable)
    {
        tmpTable.CustAccount            = _salesTable.CustAccount;
        tmpTable.SalesId                = _salesTable.SalesId;
        tmpTable.SalesName              = _salesTable.SalesName;
        tmpTable.LastPackingSlipDate    = _salesTable.lastPackingSlipDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesNotInvoicedTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to query the temporary table and returns the data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesNotInvoicedTmp))]
    public SalesNotInvoicedTmp getSalesNotInvoicedTmp()
    {
        select tmpTable;
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>SalesNotInvoiced</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun         = new SysQueryRun(this.parmQuery());

        while (queryRun.next())
        {
            SalesTable salesTable = queryRun.get(tableNum(SalesTable));
            SalesLine  salesLine  = queryRun.get(tableNum(SalesLine));
            InventDim  inventDim  = queryRun.get(tableNum(InventDim));

            tmpTable.clear();

            this.getFromSalesTable(salesTable);
            this.getFromSalesLine(salesLine);
            this.getFromEcoResCategory(salesLine);
            this.getFromInventDim(inventDim);

            tmpTable.doInsert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
