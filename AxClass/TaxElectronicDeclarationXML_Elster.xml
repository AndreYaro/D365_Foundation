<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxElectronicDeclarationXML_Elster</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Elster interface is out of support since 01.01.2019', true, 01\01\2021)]
public class TaxElectronicDeclarationXML_Elster extends TaxElectronicDeclarationXML
{
    private const str DefaultEncoding = 'ISO-8859-15';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxElectronicDeclarationXML_Elster construct()
    {
        return new TaxElectronicDeclarationXML_Elster();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bool2str</Name>
				<Source><![CDATA[
    private static str bool2str(boolean _value)
    {
        return _value ? 'true' : 'false';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConfiguration</Name>
				<Source><![CDATA[
    protected str createConfiguration(TaxElectronicDeclaration _taxElectronicDeclaration)
    {
        TaxElectronicDeclarationSetup taxElectronicDeclarationSetup = TaxElectronicDeclarationSetup::find();
        TaxElectronicCertificatesTable taxElectronicCertificatesTable = TaxElectronicCertificatesTable::findByUserId(curUserId());

        System.Xml.XmlDocument configurationXmlDocument = new System.Xml.XmlDocument();
        System.Xml.XmlDeclaration xmlDeclaration = configurationXmlDocument.CreateXmlDeclaration('1.0', DefaultEncoding, null);
        configurationXmlDocument.InsertBefore(xmlDeclaration, configurationXmlDocument.DocumentElement);

        System.Xml.XmlElement elsterTransferElement = configurationXmlDocument.CreateElement('ElsterTransfer');
        configurationXmlDocument.AppendChild(elsterTransferElement);

        System.Xml.XmlElement configurationElement = configurationXmlDocument.CreateElement('Configuration');
        elsterTransferElement.AppendChild(configurationElement);
  
        System.Xml.XmlElement proxyElement = configurationXmlDocument.CreateElement('Proxy');
        proxyElement.InnerText = TaxElectronicDeclarationXML_Elster::bool2str(taxElectronicDeclarationSetup.ProxyServer);
        configurationElement.AppendChild(proxyElement);
  
        System.Xml.XmlElement proxyAddressElement = configurationXmlDocument.CreateElement('ProxyAddress');
        proxyAddressElement.InnerText = taxElectronicDeclarationSetup.ProxyServer ? taxElectronicDeclarationSetup.proxyAddress() : '';
        configurationElement.AppendChild(proxyAddressElement);
  
        System.Xml.XmlElement proxyAuthentElement = configurationXmlDocument.CreateElement('ProxyAuthent');
        proxyAuthentElement.InnerText = TaxElectronicDeclarationXML_Elster::bool2str(taxElectronicDeclarationSetup.ProxyServer && taxElectronicDeclarationSetup.ProxyServerAuthenticationRequired);
        configurationElement.AppendChild(proxyAuthentElement);
  
        System.Xml.XmlElement proxyUserElement = configurationXmlDocument.CreateElement('ProxyUser');
        proxyUserElement.InnerText = user;
        configurationElement.AppendChild(proxyUserElement);
  
        System.Xml.XmlElement proxyPassElement = configurationXmlDocument.CreateElement('ProxyPass');
        proxyPassElement.InnerText = password;
        configurationElement.AppendChild(proxyPassElement);
  
        System.Xml.XmlElement certificateTypeElement = configurationXmlDocument.CreateElement('CertificateType');
        certificateTypeElement.InnerText = int2Str(enum2int(taxElectronicCertificatesTable.CertificateType));
        configurationElement.AppendChild(certificateTypeElement);
  
        System.Xml.XmlElement certReferenceElement = configurationXmlDocument.CreateElement('CertReference');
        certReferenceElement.InnerText = !SystemParameters::find().UseAdvCertificateStore ? taxElectronicCertificatesTable.CertificateReference : '';
        configurationElement.AppendChild(certReferenceElement);
  
        System.Xml.XmlElement httpServerListElement = configurationXmlDocument.CreateElement('HTTPServerList');
        configurationElement.AppendChild(httpServerListElement);
        
        TaxElectronicHTTPServerTable::initDefaultValues();

        TaxElectronicHTTPServerTable taxElectronicHTTPServerTable;
        while select taxElectronicHTTPServerTable
        {
            System.Xml.XmlElement httpServerElement = configurationXmlDocument.CreateElement('HTTPServer');
            httpServerElement.InnerText = taxElectronicHTTPServerTable.URL;
            httpServerListElement.AppendChild(httpServerElement);
        }

        System.Xml.XmlDocumentFragment taxElectronicDocumentFragment = configurationXmlDocument.CreateDocumentFragment();
        taxElectronicDocumentFragment.InnerXml = _taxElectronicDeclaration.TaxElectronicDocument;
        elsterTransferElement.AppendChild(taxElectronicDocumentFragment);

        return configurationXmlDocument.OuterXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transmitXML</Name>
				<Source><![CDATA[
    [Replaceable]
    protected TaxElectronicDeclarationTrans transmitXML(TaxElectronicDeclaration _taxElectronicDeclaration, TaxElectronicDeclarationTrans _taxElectronicDeclarationTrans)
    {
        return _taxElectronicDeclarationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>webServicesEndOfSupportDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ELSTER web services end of support date.
    /// </summary>
    /// <returns>
    /// ELSTER web services end of support date.
    /// </returns>
    public static TransDate webServicesEndOfSupportDate()
    {
        return mkDate(1, 1, 2019);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferHeaderVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the version of the <c>TransferHeader</c> element in the XML document.
    /// </summary>
    /// <param name = "_args">XML document to get version of the <c>TransferHeader</c> element from.</param>
    /// <returns>
    /// The version of the <c>TransferHeader</c> element in the XML document.
    /// </returns>
    public static str getTransferHeaderVersion(XML _xml)
    {
        XmlDocument xmlDoc = XmlDocument::newXml(_xml);
        XmlElement xmlElement = xmlDoc ? xmlDoc.root() : null;
        xmlElement = xmlElement ? xmlElement.getNamedElement('TransferHeader') : null;
        str transferHeaderVersion = xmlElement ? xmlElement.getAttribute('version') : '';

        return transferHeaderVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyWebServicesEndOfSupportDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares ELSTER web services end of support date with the current date and asks the user if he wants to proceed in case support has expired.
    /// </summary>
    /// <returns>
    /// true, if the current date is less than web services expiration date or if user confirms that he wants to proceed; otherwise, false.
    /// </returns>
    public static boolean verifyWebServicesEndOfSupportDate()
    {
        TransDate endOfSupportDate = TaxElectronicDeclarationXML_Elster::webServicesEndOfSupportDate();
        boolean ret = true;
        #ISOCountryRegionCodes

        if (   SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE])
            && DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) >= endOfSupportDate
            && Box::yesNo(strFmt("@TaxElectronicDeclaration:ElsterWebServicesAreNotSupported", endOfSupportDate), DialogButton::No) == DialogButton::No)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    protected XML generateXML(TaxElectronicDeclaration _taxElectronicDeclaration, TaxReportInitializeDE _taxReportInitialize)
    {
        XML ret = super(_taxElectronicDeclaration, _taxReportInitialize);

        if (TaxElectronicDeclarationXML_Elster::getTransferHeaderVersion(ret) == '11')
        {
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(ret);

            if (xmlDocument.FirstChild.NodeType != System.Xml.XmlNodeType::XmlDeclaration)
            {
                xmlDocument.insertBefore(xmlDocument.createXmlDeclaration('1.0', DefaultEncoding, ''), xmlDocument.DocumentElement);
                ret = xmlDocument.InnerXml;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>