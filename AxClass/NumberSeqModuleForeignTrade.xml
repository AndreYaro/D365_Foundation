<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleForeignTrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberSeqModuleForeignTrade extends NumberSeqApplicationModule
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();
        ;
        /* Setup Intrastat numbers */

        datatype.parmDatatypeId(extendedtypenum(IntrastatDispatchId));
        datatype.parmReferenceHelp(literalstr("@SYS53850"));
        datatype.parmReferenceLabel(literalstr("@SYS6530"));
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup EU-Saleslist numbers */

        datatype.parmDatatypeId(extendedtypenum(ListDispatchId));
        datatype.parmReferenceHelp(literalstr("@SYS53853"));
        datatype.parmReferenceLabel(literalstr("@SYS17928"));
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        datatype.parmDatatypeId(extendedtypenum(RCListDispatchId_UK));
        datatype.parmReferenceHelp(literalstr("@SYS118807"));
        datatype.parmReferenceLabel(literalstr("@SYS118786"));
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup Intrastat archive and EU Sales List XML id for Belgium*/
        if (IntrastatReportingArchiveToggle::isBECountryRegionORIntrastatReportingArchiveEnabled())
        {
            datatype.parmDatatypeId(extendedtypenum(IntrastatArchiveID));
            datatype.parmReferenceHelp(literalstr("@SYS93312"));
            datatype.parmReferenceLabel(literalstr("@SYS93301"));
            datatype.parmWizardfetchAheadQty(10);
            datatype.parmWizardHighest(999999);
            datatype.parmSortField(1);
            datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
            this.create(datatype);
        }

        if (EUSalesListByTaxId_BEToggle::isBECountryRegionORMultipleTaxIdEUSalesListEnabled())
        {
            datatype.parmDatatypeId(extendedtypenum(EUSalesListXMLId_BE));
            datatype.parmReferenceHelp(literalstr("@SYS125568"));
            datatype.parmWizardfetchAheadQty(10);
            datatype.parmWizardHighest(999999);
            datatype.parmSortField(1);
            datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
            this.create(datatype);
        }

        // Poland or Multiple Tax Id: Intrastat XML File number used when exporting intrastat to file.
        if (IntrastatReportingByTaxIdToggle::isPLCountryRegionORMultipleTaxIdIntrastatEnabled())
        {
            datatype.parmDatatypeId(extendedtypenum(PlIntrastatXMLFileNum));
            datatype.parmReferenceLabel(literalstr("@GLS110622"));
            datatype.parmReferenceHelp(literalstr("@GLS110278"));
            datatype.parmWizardfetchAheadQty(10);
            datatype.parmWizardIsManual(NoYes::No);
            datatype.parmWizardIsChangeDownAllowed(NoYes::No);
            datatype.parmWizardIsChangeUpAllowed(NoYes::No);
            datatype.parmSortField(2);
            datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
            this.create(datatype);
        }

        // Italy: Black List Report ID
        datatype.parmDatatypeId(extendedTypeNum(BlackListReportId_IT));
        datatype.parmReferenceLabel(literalStr("@SYS343713"));
        datatype.parmReferenceHelp(literalStr("@SYS343562"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(1);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::ForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleForeignTrade), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>