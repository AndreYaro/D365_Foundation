<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPlaceholder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportPlaceholder_IT</c> class holds the incomplete data (placeholders) before
/// sending them to ASCII file in Italian Spesometro format.
/// </summary>
class TaxReportPlaceholder_IT
{
    int     fileNumber;
    str     lineA,
            lineB,
            lineE,
            lineZ;
    List    reportLines;

    Map     placeholders;

    // Line types
    public const str LineTypeA_Prolog = 'A';
    public const str LineTypeB_Header ='B';
    public const str LineTypeC_Aggregated = 'C';
    public const str LineTypeD_Analytical = 'D';
    public const str LineTypeE_Footer = 'E';
    public const str LineTypeZ_Epilog = 'Z';

    // Positional fields
    public const int FieldPos_FileNumCurrent = 522;
    public const int FieldPos_FileNumMax = 526;

    // Line A, position 21 (Field 4. Declarer type)
    public const str DeclarerType_SameLegalEntity = '01';
    public const str DeclarerType_CAF = '10';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a line to the the report placeholder structure.
    /// </summary>
    /// <param name="_lineType">
    /// The line type.
    /// </param>
    /// <param name="_line">
    /// The report line, that may contain unfilled positional placeholders.
    /// </param>
    public void addLine(
        str 1   _lineType,
        str     _line)
    {
        switch (_lineType)
        {
            case TaxReportPlaceholder_IT::LineTypeA_Prolog :
                this.parmLineA(_line);
                break;

            case TaxReportPlaceholder_IT::LineTypeB_Header :
                this.parmLineB(_line);
                break;

            case TaxReportPlaceholder_IT::LineTypeE_Footer :
                this.parmLineE(_line);
                break;

            case TaxReportPlaceholder_IT::LineTypeZ_Epilog :
                this.parmLineZ(_line);
                break;

            default  :
                this.parmReportLines().addEnd(_line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a placeholder to the report structure.
    /// </summary>
    /// <param name="_lineType">
    /// The line type.
    /// </param>
    /// <param name="_position">
    /// The start position of the placeholder.
    /// </param>
    /// <remarks>
    /// The placeholder is uniquely identified by the line type and the start position.
    /// </remarks>
    public void addPlaceholder(
        str 1   _lineType,
        int     _position)
    {
        Set linePlaceholders;

        if (!placeholders)
        {
            placeholders = new Map(Types::String, Types::Class);
        }

        if (placeholders.exists(_lineType))
        {
            linePlaceholders = placeholders.lookup(_lineType);
        }
        else
        {
            linePlaceholders = new Set(Types::Integer);
            placeholders.insert(_lineType, linePlaceholders);
        }

        linePlaceholders.add(_position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlaceholderFileNumCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the placeholder for the file number to the report structure.
    /// </summary>
    public void addPlaceholderFileNumCurrent()
    {
        this.addPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumCurrent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlaceholderFileNumMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the placeholder for the last file number to the report structure.
    /// </summary>
    public void addPlaceholderFileNumMax()
    {
        this.addPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumMax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the existence of the placeholder in the report structure.
    /// </summary>
    /// <param name="_lineType">
    /// The line type.
    /// </param>
    /// <param name="_position">
    /// The start position of the placeholder.
    /// </param>
    /// <returns>
    /// true, if the placeholder exists; false otherwise.
    /// </returns>
    public boolean existsPlaceholder(
        str 1   _lineType,
        int     _position)
    {
        Set linePlaceholders;

        if (!placeholders || !placeholders.exists(_lineType))
        {
            return false;
        }

        linePlaceholders = placeholders.lookup(_lineType);

        return linePlaceholders.in(_position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the placeholder with the actual value.
    /// </summary>
    /// <param name="_lineType">
    /// The line type.
    /// </param>
    /// <param name="_position">
    /// The start position of the placeholder.
    /// </param>
    /// <param name="_value">
    /// The value of the positional field to be inserted instead of the placeholder.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Placeholder does not exists.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The line type is not supported.
    /// </exception>
    public void fillPlaceholder(
        str 1   _lineType,
        int     _position,
        str     _value)
    {
        if (!this.existsPlaceholder(_lineType, _position))
            throw error(error::wrongUseOfFunction(funcname()));

        this.removePlaceholder(_lineType, _position);

        switch (_lineType)
        {
            case TaxReportPlaceholder_IT::LineTypeA_Prolog :
                this.parmLineA(strpoke(this.parmLineA(), _value, _position));
                break;

            case TaxReportPlaceholder_IT::LineTypeB_Header :
                this.parmLineB(strpoke(this.parmLineB(), _value, _position));
                break;

            case TaxReportPlaceholder_IT::LineTypeE_Footer :
                this.parmLineE(strpoke(this.parmLineE(), _value, _position));
                break;

            case TaxReportPlaceholder_IT::LineTypeZ_Epilog :
                this.parmLineZ(strpoke(this.parmLineZ(), _value, _position));
                break;

            default  :
                throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPlaceholderFileNumCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the placeholder for the file number with the actual value.
    /// </summary>
    /// <param name="_value">
    /// The current file number.
    /// </param>
    public void fillPlaceholderFileNumCurrent(
        str _value)
    {
        if (this.existsPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumCurrent))
        {
            this.fillPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumCurrent, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPlaceholderFileNumMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the placeholder for the last file number with the actual value.
    /// </summary>
    /// <param name="_value">
    /// The last file number.
    /// </param>
    public void fillPlaceholderFileNumMax(
        str _value)
    {
        if (this.existsPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumMax))
        {
            this.fillPlaceholder(TaxReportPlaceholder_IT::LineTypeA_Prolog, TaxReportPlaceholder_IT::FieldPos_FileNumMax, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllLinesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list containing all the report lines in the natural order.
    /// </summary>
    /// <returns>
    /// The list with all the report lines that should be inserted into the particular file.
    /// </returns>
    public List getAllLinesList()
    {
        List            allLines        = new List(Types::String);
        ListEnumerator  linesEnumerator = this.parmReportLines().getEnumerator();

        void add(str _line)
        {
            if (_line)
            {
                allLines.addEnd(_line);
            }
        }

        add(this.parmLineA());
        add(this.parmLineB());

        while (linesEnumerator.moveNext())
        {
            add(linesEnumerator.current());
        }

        add(this.parmLineE());
        add(this.parmLineZ());

        return allLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNumber</Name>
				<Source><![CDATA[
        public int parmFileNumber(int _fileNumber = fileNumber)
    {
        fileNumber = _fileNumber;
        return fileNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineA</Name>
				<Source><![CDATA[
        public str parmLineA(str _line = lineA)
    {
        lineA = _line;
        return lineA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineB</Name>
				<Source><![CDATA[
        public str parmLineB(str _line = lineB)
    {
        lineB = _line;
        return lineB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineE</Name>
				<Source><![CDATA[
        public str parmLineE(str _line = lineE)
    {
        lineE = _line;
        return lineE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineZ</Name>
				<Source><![CDATA[
        public str parmLineZ(str _line = lineZ)
    {
        lineZ = _line;
        return lineZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the list of report lines that do require filling the placeholders.
    /// </summary>
    /// <param name="_reportLines">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The list of report lines, if the lines exist; an empty list otherwise.
    /// </returns>
    public List parmReportLines(List _reportLines = reportLines)
    {
        reportLines = _reportLines;

        if (!reportLines)
        {
            reportLines = new List(Types::String);
        }

        return reportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the placeholder from the report structure.
    /// </summary>
    /// <param name="_lineType">
    /// The line type.
    /// </param>
    /// <param name="_position">
    /// The start position of the placeholder.
    /// </param>
    protected void removePlaceholder(
        str 1   _lineType,
        int     _position)
    {
        Set linePlaceholders;

        if (!placeholders || !placeholders.exists(_lineType))
        {
            return;
        }

        linePlaceholders = placeholders.lookup(_lineType);

        linePlaceholders.remove(_position);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>