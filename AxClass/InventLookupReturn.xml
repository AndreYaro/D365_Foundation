<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLookupReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventLookupReturn extends InventLookup
{
    boolean hideInventSerialId;
    boolean hideQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmHideInventSerialId</Name>
				<Source><![CDATA[
    public boolean parmHideInventSerialId(boolean _hideInventSerialId = hideInventSerialId)
    {
        hideInventSerialId = _hideInventSerialId;
        return hideInventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHideQty</Name>
				<Source><![CDATA[
    public boolean parmHideQty(boolean _hideQty = hideQty)
    {
        hideQty = _hideQty;
        
        return hideQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesReturnMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an <c>InventDim</c> table buffer is joined to a record that represents a sales
    ///    return record.
    /// </summary>
    /// <param name="_inventDim">
    ///    A buffer of the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A buffer of the <c>SalesLine</c> table of <c>ReturnItem</c> type.
    /// </returns>
    public static SalesLine initSalesReturnMode(InventDim _inventDim)
    {
        SalesLine           returnLine;
        FormDataSource      parentDataSource = formGetParentDatasource(FormDataUtil::getFormDataSource(_inventDim));
        
        if (parentDataSource)
        {
            switch(parentDataSource.table())
            {
                //The product arrival journal scenario.
                case tableNum(WMSJournalTrans) :
                    WMSJournalTrans wmsJournalTrans = parentDataSource.cursor();
                    if (wmsJournalTrans.IsReturnOrder
                        && wmsJournalTrans.InventTransType == InventTransType::Sales)
                    {
                        returnLine = SalesLine::findInventTransId(wmsJournalTrans.InventTransId);
                    }
                    break;
                
                //The procduct registration sceneario  -  the 'little' regristration form.
                case tableNum(TmpInventTransWMS) :
                    TmpInventTransWMS tmpInventTransWMS = parentDataSource.cursor();
                    if (tmpInventTransWMS.ReferenceCategory == InventTransType::Sales
                        && tmpInventTransWMS.InventQty > 0)
                    {
                        returnLine = SalesLine::findInventTransId(InventTransOrigin::find(tmpInventTransWMS.InventTransOrigin).InventTransId);
                    }
                    break;
                
                // The return form scenario and the sales order form scenario, making a referrences credit note..
                case tableNum(SalesLine) :
                    returnLine = parentDataSource.cursor();
                    break;
                
                default : break;
            }
        }
        
        return returnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventBatchIdReturn</Name>
				<Source><![CDATA[
    public static void lookupInventBatchIdReturn(InventTransId  _transId,
                                                 ItemId         _itemId,
                                                 FormControl    _formControl,
                                                 InventSerialId _inventSerialId,
                                                 InventBatchId  _inventBatchId,
                                                 StatusIssue    _statusIssue = StatusIssue::Sold,
                                                 StatusReceipt  _statusReceipt = StatusReceipt::None,
                                                 boolean        _hideQty = true)
        
    {
        Query                   query = InventLookupReturn::queryLookupInventBatchIdReturn(_transId, _itemId, _inventSerialId, _inventBatchId, _statusIssue, _statusReceipt);
        
        InventLookupReturn inventLookup = new InventLookupReturn(_formControl, query, formStr(InventSerialBatchIdLookupReturn));
        inventLookup.parmHideInventSerialId(true);
        inventLookup.parmHideQty(_hideQty);
        
        inventLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventGTDReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select GTD number.
    /// </summary>
    /// <param name="_transId">
    /// The lot ID for which the GTD number will be displayed.
    /// </param>
    /// <param name="_itemId">
    /// The Item ID for which the GTD number will be displayed.
    /// </param>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_inventGTDId">
    /// The current value of GTD number.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_hideQty">
    /// A Boolean value that indicates whether to hide quantity column from the list; optional.
    /// </param>
    public static void lookupInventGTDReturn(InventTransId      _transId,
                                             ItemId             _itemId,
                                             FormControl        _formControl,
                                             InventGTDId_RU     _inventGTDId,
                                             StatusIssue        _statusIssue = StatusIssue::Sold,
                                             StatusReceipt      _statusReceipt = StatusReceipt::None,
                                             boolean            _hideQty = true)
        
    {
        Query                   query = InventLookupReturn::queryLookupInventGTDIdReturn(_transId, _itemId, _inventGTDId, _statusIssue, _statusReceipt);
        
        InventLookupReturn inventLookup = new InventLookupReturn(_formControl, query, formStr(InventGTDIdLookupReturn));
        
        inventLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventOwnerReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select inventory owner.
    /// </summary>
    /// <param name="_transId">
    /// The lot ID for which the inventory owner will be displayed.
    /// </param>
    /// <param name="_itemId">
    /// The Item ID for which the inventory owner will be displayed.
    /// </param>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_inventOwnerId">
    /// The current value of inventory owner.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_hideQty">
    /// A Boolean value that indicates whether to hide quantity column from the list; optional.
    /// </param>
    public static void lookupInventOwnerReturn(InventTransId      _transId,
                                               ItemId             _itemId,
                                               FormControl        _formControl,
                                               InventOwnerId_RU   _inventOwnerId,
                                               StatusIssue        _statusIssue = StatusIssue::Sold,
                                               StatusReceipt      _statusReceipt = StatusReceipt::None,
                                               boolean            _hideQty = true)
        
    {
        Query                   query = InventLookupReturn::queryLookupInventOwnerIdReturn(_transId, _itemId, _inventOwnerId, _statusIssue, _statusReceipt);
        
        InventLookupReturn inventLookup = new InventLookupReturn(_formControl, query, formStr(InventOwnerIdLookupReturn));
        
        inventLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventSerialReturn</Name>
				<Source><![CDATA[
    public static void lookupInventSerialReturn(
        InventTransId       _transId,
        ItemId              _itemId,
        FormControl         _formControl,
        InventSerialId      _inventSerialId,
        InventBatchId       _inventBatchId,
        StatusIssue         _statusIssue = StatusIssue::Sold,
        StatusReceipt       _statusReceipt = StatusReceipt::None,
        boolean             _hideQty = true)
    {
        Query               query = InventLookupReturn::queryLookupInventSerialReturn(_transId, _itemId, _inventSerialId, _inventBatchId, _statusIssue, _statusReceipt);
        
        InventLookupReturn inventLookup = new InventLookupReturn(_formControl, query, formStr(InventSerialBatchIdLookupReturn));
        inventLookup.parmHideInventSerialId(false);
        inventLookup.parmHideQty(_hideQty);
        
        inventLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLookupInventBatchIdReturn</Name>
				<Source><![CDATA[
    public static Query queryLookupInventBatchIdReturn(
            InventTransId       _transId,
            ItemId              _itemId,
            InventSerialId      _inventSerialId,
            InventBatchId       _inventBatchId,
            StatusIssue         _statusIssue,
            StatusReceipt       _statusReceipt)
    {
        Query                   query = new Query();
        
        QueryBuildDataSource qbdsDim = query.addDataSource(tableNum(InventDim));
        
        QueryBuildDataSource qbdsInventTrans = qbdsDim.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.relations(true);
        
        QueryBuildDataSource qbdsInventTransOrigin = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        
        // set up selection fields
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventDimId), SelectionField::Min);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventBatchId));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ItemId));
        
        // set grouping
        qbdsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ItemId));
        qbdsDim.addGroupByField(fieldNum(InventDim, InventBatchId));
        
        // set sorting
        qbdsDim.addSortField(fieldNum(InventDim, InventBatchId));
        qbdsDim.addSortField(fieldNum(InventDim, InventSerialId));
        
        // set up ranges
        QueryBuildRange queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId));
        queryBuildRange.value(queryValue(_transId));
        
        queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId));
        queryBuildRange.value(queryValue(_itemId));
        
        if (_statusIssue != StatusIssue::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue));
            queryBuildRange.value(queryValue(_statusIssue));
        }
        if (_statusReceipt != StatusReceipt::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.value(queryValue(_statusReceipt));
        }
        
        if (_inventSerialId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventSerialId));
            queryBuildRange.value(queryValue(_inventSerialId));
        }
        
        if (_inventBatchId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventBatchId));
            queryBuildRange.value(queryValue(_inventBatchId));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLookupInventGTDIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query for the GTD number lookup.
    /// </summary>
    /// <param name="_transId">
    /// The lot ID for which the GTD number will be displayed.
    /// </param>
    /// <param name="_itemId">
    /// The Item ID for which the GTD number will be displayed.
    /// </param>
    /// <param name="_inventGTDId">
    /// The current value of the GTD number.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value to search for on the lot ID to display to.
    /// </param>
    /// <returns>
    /// Query for the GTD number lookup.
    /// </returns>
    public static Query queryLookupInventGTDIdReturn(InventTransId       _transId,
                                                     ItemId              _itemId,
                                                     InventGTDId_RU      _inventGTDId,
                                                     StatusIssue         _statusIssue,
                                                     StatusReceipt       _statusReceipt)
    {
        Query                   query = new Query();
        
        QueryBuildDataSource qbdsDim = query.addDataSource(tableNum(InventDim));
        
        QueryBuildDataSource qbdsInventTrans = qbdsDim.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.relations(true);
        
        QueryBuildDataSource qbdsInventTransOrigin = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        
        // set up selection fields
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventDimId), SelectionField::Min);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventGtdId_RU));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ItemId));
        
        // set grouping
        qbdsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ItemId));
        qbdsDim.addGroupByField(fieldNum(InventDim, InventGtdId_RU));
        
        // set sorting
        qbdsDim.addSortField(fieldNum(InventDim, InventGtdId_RU));
        
        // set up ranges
        QueryBuildRange queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId));
        queryBuildRange.value(queryValue(_transId));
        
        queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId));
        queryBuildRange.value(queryValue(_itemId));
        
        if (_statusIssue != StatusIssue::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue));
            queryBuildRange.value(queryValue(_statusIssue));
        }
        if (_statusReceipt != StatusReceipt::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.value(queryValue(_statusReceipt));
        }
        
        if (_inventGTDId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventGtdId_RU));
            queryBuildRange.value(queryValue(_inventGTDId));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLookupInventOwnerIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns query for the inventory owner lookup.
    /// </summary>
    /// <param name="_transId">
    ///    The lot ID for which the inventory owner will be displayed.
    /// </param>
    /// <param name="_itemId">
    ///     The Item ID for which the inventory owner will be displayed.
    /// </param>
    /// <param name="_inventOwnerId">
    ///    The current value of the inventory owner.
    /// </param>
    /// <param name="_statusIssue">
    ///    The <c>StatusIssue</c> value to search for on the lot ID to display to.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> value to search for on the lot ID to display to.
    /// </param>
    /// <returns>
    ///     Query for the inventory owner lookup.
    /// </returns>
    public static Query queryLookupInventOwnerIdReturn(
            InventTransId       _transId,
            ItemId              _itemId,
            InventOwnerId_RU    _inventOwnerId,
            StatusIssue         _statusIssue,
            StatusReceipt       _statusReceipt)
    {
        Query                   query = new Query();
        
        QueryBuildDataSource qbdsDim = query.addDataSource(tableNum(InventDim));
        
        QueryBuildDataSource qbdsInventTrans = qbdsDim.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.relations(true);
        
        QueryBuildDataSource qbdsInventTransOrigin = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        
        // set up selection fields
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventDimId), SelectionField::Min);
        qbdsDim.addSelectionField(fieldNum(InventDim, InventOwnerId_RU));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ItemId));
        
        // set grouping
        qbdsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ItemId));
        qbdsDim.addGroupByField(fieldNum(InventDim, InventOwnerId_RU));
        
        // set sorting
        qbdsDim.addSortField(fieldNum(InventDim, InventOwnerId_RU));
        
        // set up ranges
        QueryBuildRange queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId));
        queryBuildRange.value(queryValue(_transId));
        
        queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId));
        queryBuildRange.value(queryValue(_itemId));
        
        if (_statusIssue != StatusIssue::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue));
            queryBuildRange.value(queryValue(_statusIssue));
        }
        if (_statusReceipt != StatusReceipt::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.value(queryValue(_statusReceipt));
        }
        
        if (_inventOwnerId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventOwnerId_RU));
            queryBuildRange.value(queryValue(_inventOwnerId));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLookupInventSerialReturn</Name>
				<Source><![CDATA[
    public static Query queryLookupInventSerialReturn(
            InventTransId       _transId,
            ItemId              _itemId,
            InventSerialId      _inventSerialId,
            InventBatchId       _inventBatchId,
            StatusIssue         _statusIssue,
            StatusReceipt       _statusReceipt)
    {
        Query                   query = new Query();
        
        QueryBuildDataSource qbdsDim = query.addDataSource(tableNum(InventDim));
        
        QueryBuildDataSource qbdsInventTrans = qbdsDim.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.relations(true);
        
        QueryBuildDataSource qbdsInventTransOrigin = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        
        // set grouping
        qbdsInventTrans.addGroupByField(fieldNum(InventTrans, InventDimId));
        qbdsInventTransOrigin.addGroupByField(fieldNum(InventTransOrigin, ItemId));
        qbdsDim.addGroupByField(fieldNum(InventDim, InventSerialId));
        qbdsDim.addGroupByField(fieldNum(InventDim, InventBatchId));
        
        // set sorting
        qbdsDim.addSortField(fieldNum(InventDim, InventSerialId));
        qbdsDim.addSortField(fieldNum(InventDim, InventBatchId));
        
        // add ranges
        QueryBuildRange queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId));
        queryBuildRange.value(queryValue(_transId));
        
        queryBuildRange = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId));
        queryBuildRange.value(queryValue(_itemId));
        
        if (_statusIssue != StatusIssue::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue));
            queryBuildRange.value(queryValue(_statusIssue));
        }
        if (_statusReceipt != StatusReceipt::None)
        {
            queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.value(queryValue(_statusReceipt));
        }
        
        if (_inventSerialId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventSerialId));
            queryBuildRange.value(queryValue(_inventSerialId));
        }
        
        if (_inventBatchId)
        {
            queryBuildRange = qbdsDim.addRange(fieldNum(InventDim, InventBatchId));
            queryBuildRange.value(queryValue(_inventBatchId));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventBatchIdReturn</Name>
				<Source><![CDATA[
    public static boolean validateInventBatchIdReturn(
        InventSerialId  _inventSerialId,
        InventBatchId   _inventBatchId,
        InventTransId   _transId,
        ItemId          _itemId)
    {
        boolean res = !_inventBatchId || InventLookupReturn::validateInventSerialBatchIdReturn(_inventSerialId, _inventBatchId, _transId, _itemId);
        
        if (!res)
        {
            checkFailed(strFmt("@SYS331507", _inventBatchId));
        }
        
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTDIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates is the entered GTD number match the GTD number on the referenced invoice line.
    /// </summary>
    /// <param name="_inventGTDId">
    /// The GTD number to validate.
    /// </param>
    /// <param name="_transId">
    /// The lot ID for which the GTD number will be validated.
    /// </param>
    /// <param name="_itemId">
    /// The Item ID for which the GTD number will be validated.
    /// </param>
    /// <returns>
    /// true if the entered GTD number passes validation; otherwise, false.
    /// </returns>
    public static boolean validateInventGTDIdReturn(InventGTDId_RU _inventGTDId, InventTransId _transId, ItemId _itemId)
    {
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        CustInvoiceTrans    invoiceTrans;
        boolean             res = true;
        
        boolean isProductStocked = InventLookupReturn::isProductStocked(_transId, _itemId);
        if (isProductStocked)
        {
            select firstonly  RecId from inventDim
                join TableId from inventTrans
                    where inventDim.InventDimId                 == inventTrans.InventDimId
                       && (inventDim.InventGtdId_RU             == _inventGTDId            || !_inventGTDId)
                       && inventTrans.StatusReceipt             == StatusReceipt::None
                       && inventTrans.StatusIssue               == StatusIssue::Sold
                    join TableId from inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                           && inventTransOrigin.InventTransId   == _transId
                           && inventTransOrigin.ItemId          == _itemId;
        }
        else
        {
            select firstonly  RecId from inventDim
                where (inventDim.InventGtdId_RU       == _inventGTDId          || !_inventGTDId)
                join TableId from invoiceTrans
                    where invoiceTrans.InventTransId    == _transId
                       && invoiceTrans.InventDimId      == inventDim.InventDimId;
        }
        
        if (! inventDim.RecId)
        {
            res = checkFailed(strFmt("@GLS221818", _inventGTDId));
        }
        
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwnerIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates is the entered inventory owner match the inventory owner(s) on the referenced invoice line.
    /// </summary>
    /// <param name="_inventOwnerId">
    ///    The inventory owner to validate.
    /// </param>
    /// <param name="_transId">
    ///    The lot ID for which the inventory owner will be validated.
    /// </param>
    /// <param name="_itemId">
    ///     The Item ID for which the inventory owner will be validated.
    /// </param>
    /// <returns>
    ///    true if the entered inventory owner passes validation; otherwise, false.
    /// </returns>
    public static boolean validateInventOwnerIdReturn(InventOwnerId_RU _inventOwnerId, InventTransId _transId, ItemId _itemId)
    {
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        CustInvoiceTrans    invoiceTrans;
        boolean             res = true;
        
        boolean isProductStocked = InventLookupReturn::isProductStocked(_transId, _itemId);
        if (isProductStocked)
        {
            select firstonly  RecId from inventDim
                join TableId from inventTrans
                    where inventDim.InventDimId                 == inventTrans.InventDimId
                       && (inventDim.InventOwnerId_RU           == _inventOwnerId          || !_inventOwnerId)
                       && inventTrans.StatusReceipt             == StatusReceipt::None
                       && inventTrans.StatusIssue               == StatusIssue::Sold
                    join TableId from inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                           && inventTransOrigin.InventTransId   == _transId
                           && inventTransOrigin.ItemId          == _itemId;
        }
        else
        {
            select firstonly  RecId from inventDim
                where (inventDim.InventOwnerId_RU       == _inventOwnerId          || !_inventOwnerId)
                join TableId from invoiceTrans
                    where invoiceTrans.InventTransId    == _transId
                       && invoiceTrans.InventDimId      == inventDim.InventDimId;
        }
        
        if (! inventDim.RecId)
        {
            res = checkFailed(strFmt("@GLS221819", _inventOwnerId));
        }
        
        return res;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that batch or serial number is referenced from inventory transactions.
    /// </summary>
    /// <param name="_inventSerialId">
    /// The serial number to validate.
    /// </param>
    /// <param name="_inventBatchId">
    /// The batch number to validate.
    /// </param>
    /// <param name="_transId">
    /// The inventory transaction ID to validate.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to validate.
    /// </param>
    /// <returns>
    /// true if the batch or serial number is referenced; otherwise, false.
    /// </returns>
    public static boolean validateInventSerialBatchIdReturn(
            InventSerialId  _inventSerialId,
            InventBatchId   _inventBatchId,
            InventTransId   _transId,
            ItemId          _itemId)
    {
        return  InventLookupReturn::validateInventSerialBatchIdReturnWithBlank(_inventSerialId, _inventBatchid, _transId, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchIdReturnWithBlank</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean validateInventSerialBatchIdReturnWithBlank(
            InventSerialId  _inventSerialId,
            InventBatchId   _inventBatchId,
            InventTransId   _transId,
            ItemId          _itemId,
            boolean         _forceBlankSerialId = false)
    {
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        CustInvoiceTrans    invoiceTrans;
        
        boolean isProductStocked = InventLookupReturn::isProductStocked(_transId, _itemId);
        if (isProductStocked)
        {
            select firstonly  RecId from inventDim
                join TableId from inventTrans
                    where inventDim.InventDimId                 == inventTrans.InventDimId
                       && (inventDim.InventSerialId             == _inventSerialId          || !(_inventSerialId || _forceBlankSerialId))
                       && (inventDim.InventBatchId              == _inventBatchId           || !_inventBatchId)
                       && inventTrans.StatusReceipt             == StatusReceipt::None
                       && inventTrans.StatusIssue               == StatusIssue::Sold
                    join TableId from inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                           && inventTransOrigin.InventTransId   == _transId
                           && inventTransOrigin.ItemId          == _itemId;
        }
        else
        {
            select firstonly  RecId from inventDim
                where (inventDim.InventSerialId         == _inventSerialId          || !(_inventSerialId || _forceBlankSerialId))
                   && (inventDim.InventBatchId          == _inventBatchId           || !_inventBatchId)
                join TableId from invoiceTrans
                    where invoiceTrans.InventTransId    == _transId
                       && invoiceTrans.InventDimId      == inventDim.InventDimId;
        }
        
        return inventDim.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialIdReturn</Name>
				<Source><![CDATA[
    public static boolean validateInventSerialIdReturn(
        InventSerialId  _inventSerialId,
        InventBatchId   _inventBatchId,
        InventTransId   _transId,
        ItemId          _itemId)
    {
        boolean res = false;
        
        res = !_inventSerialId || InventLookupReturn::validateInventSerialBatchIdReturn(_inventSerialId, _inventBatchId, _transId, _itemId);
        
        if (!res)
        {
            checkFailed(strFmt("@SYS331506", _inventSerialId));
        }
        
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductStocked</Name>
				<Source><![CDATA[
    private static boolean isProductStocked(InventTransId _transId, ItemId _itemId)
    {
        boolean isStockedProduct;
       
        SalesLine salesLine = SalesLine::findInventTransId(_transId);
        
        if (salesLine.RecId)
        {
            isStockedProduct = salesLine.isStocked();
        }
        else if (_itemId)
        {
            isStockedProduct = InventTable::find(_itemId).isStocked();
        }

        return isStockedProduct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>