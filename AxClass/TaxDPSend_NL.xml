<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDPSend_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Reflection;
/// <summary>
/// This class sends requests to Digipoort web service.
/// </summary>
class TaxDPSend_NL
{
    private const str digipoortAssemblyName = 'Microsoft.Dynamics.Digipoortservices';
    private const str digipoortClassName = 'Microsoft.Dynamics.Digipoort.DigipoortServices';
    TaxTurnOverTable_NL         taxTurnOverTable;
    Filename                    filename;
    TaxEvatParameters_NL        taxEvatParameters;
    TaxIntraCommTable_NL        taxIntraCommTable;
    TaxDeclarationType          taxDeclarationType;
    Num                         returnedErrorId;
    VATNum                      vatNum;
    System.Byte[]               declarationData;
    private boolean             isCalledFromEM;
    private TaxDPContract_NL    taxDPContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssembly</Name>
				<Source><![CDATA[
    private Assembly getAssembly()
    {
        Assembly digiAssembly = null;

        try
        {
            digiAssembly = Assembly::Load(digipoortAssemblyName);
        }
        catch (Exception::CLRError)
        {
            error(strFmt("@SYS4003114", digipoortAssemblyName));
        }

        return digiAssembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDigipoortServices</Name>
				<Source><![CDATA[
    private boolean checkDigipoortServices()
    {
        boolean returnValue = false;
        Assembly assembly = this.getAssembly();

        if (assembly)
        {
            System.Type type = Assembly.GetType(digipoortClassName);
            if (type && type.GetProperty('Version') != null)
            {
                str returnedvalue = type.GetProperty('Version').GetValue(null).ToString();
                returnValue = returnedvalue >= '1.0.2';
            }
        }
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>declarationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the declaration code for the current declaration type.
    /// </summary>
    /// <returns>
    /// The declaration code.
    /// </returns>
    protected str declarationCode()
    {
        str res;

        switch (taxDeclarationType)
        {
            case TaxDeclarationType::VAT:
                const str OBDeclarationCode = 'Omzetbelasting';
                res = OBDeclarationCode;
                break;

            case TaxDeclarationType::ICL:
                const str ICPDeclarationCode = 'ICP';
                res = ICPDeclarationCode;
                break;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends requests to the Digipoort web service.
    /// </summary>
    /// <param name="_request">
    /// The request parameter.
    /// </param>
    /// <param name="_endpoint">
    /// The request endpoint.
    /// </param>
    /// <param name="_authCertificate">
    /// The authentication certificate.
    /// </param>
    /// <param name="_caCertificate">
    /// The CA certificate.
    /// </param>
    /// <param name="_timeout">
    /// The timeout for the operation.
    /// </param>
    /// <returns>
    /// The response from Digipoort web service.
    /// </returns>
    protected Microsoft.Dynamics.Digipoort.AanleverService.aanleverResponse deliver(
        Microsoft.Dynamics.Digipoort.AanleverService.aanleverRequest _request,
        str                                       _endpoint,
        X509Certificate2                          _authCertificate,
        X509Certificate2                          _caCertificate,
        TaxBapiTimeOut                            _timeout)
    {
        System.Reflection.MethodInfo m = this.getAssembly().GetType(digipoortClassName).GetMethod('Deliver_v2');
        System.Object[] argType = new System.Object[5]();
        argType.SetValue(_request, 0);
        argType.SetValue(_endpoint, 1);
        argType.SetValue(_authCertificate, 2);
        argType.SetValue(_caCertificate, 3);
        argType.SetValue(_timeout, 4);
        Microsoft.Dynamics.Digipoort.AanleverService.aanleverResponse response = m.Invoke(null, argType);
        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilename</Name>
				<Source><![CDATA[
    public Filename parmFilename (Filename _filename = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnedErrorId</Name>
				<Source><![CDATA[
    public Num parmReturnedErrorId(Num _returnedErrorId = returnedErrorId)
    {
        returnedErrorId = _ReturnedErrorId;

        return returnedErrorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeclarationData</Name>
				<Source><![CDATA[
    System.Byte[] parmDeclarationData(System.Byte[] _data = declarationData)
    {
        declarationData = _data;

        return declarationData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationType</Name>
				<Source><![CDATA[
    public TaxDeclarationType parmTaxDeclarationType(TaxDeclarationType _taxDeclarationType = taxDeclarationType)
    {
        taxDeclarationType = _taxDeclarationType;

        return taxDeclarationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATNum</Name>
				<Source><![CDATA[
    public VATNum parmVATNum(VATNum _vatNum = vatNum)
    {
        vatNum = _vatNum;

        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends requests to Digipoort web service.
    /// </summary>
    /// <exception cref="Exception::Internal">
    /// An internal error.
    /// </exception>
    /// <exception cref="Exception::CLRError">
    /// Any CLRError.
    /// </exception>
    public void run()
    {
        var request = new Microsoft.Dynamics.Digipoort.AanleverService.aanleverRequest();
        var identity = new Microsoft.Dynamics.Digipoort.AanleverService.identiteitType();
        var content = new Microsoft.Dynamics.Digipoort.AanleverService.berichtInhoudType();

        str                         errorCode;
        str                         errorDescription;
        str                         strError;
        str                         statuscode;
        str                         statusDescription;
        str                         statusdetails;
        UTCDateTime                 statusDateTime;

        System.Exception            exc;
        System.Exception            innerExc;
        System.String               clrExcMessage;
        TaxReturnedError_NL         taxReturnedError;
        RecId                       errorId;
        RequestId_NL                requestId;

        taxEvatParameters = TaxEvatParameters_NL::find();

        try
        {
            identity.set_nummer(vatNum);
            const str identityType = 'Fi';
            identity.set_type(identityType);

            const str mimeType = 'application/xml';
            content.set_mimeType(mimeType);

            content.set_bestandsnaam(filename);

            content.set_inhoud(declarationData);

            request.set_berichtsoort(this.declarationCode());

            request.set_aanleverkenmerk(returnedErrorId);

            request.set_identiteitBelanghebbende(identity);

            const str businessRole = 'Bedrijf';
            request.set_rolBelanghebbende(businessRole);

            request.set_berichtInhoud(content);

            X509Certificate2 certAuth;
            X509Certificate2 certCA;

            if (SystemParameters::find().UseAdvCertificateStore)
            {
                certAuth = KeyVaultCertificateHelper::getDigitalCertificate(taxEvatParameters.KeyVaultCertificateAuth);
                certCA = KeyVaultCertificateHelper::getDigitalCertificate(taxEvatParameters.KeyVaultCertificateCA);
            }
            else
            {
                certAuth = DigitalCertificateManager::getDigitalCertificate(taxEvatParameters.CertificateAuth);
                certCA = DigitalCertificateManager::getDigitalCertificate(taxEvatParameters.CertificateCA);
            }
            
            request.set_autorisatieAdres(taxEvatParameters.AuthorizationAddress);
            
            if (!this.checkDigipoortServices())
            {
                error("@GL_DigipoortLibrary:GL_DigipoortLibrary_MessageError");
                return;
            }
            var response = this.deliver(
                request,
                taxEvatParameters.SubmitServiceURL,
                certAuth,
                certCA,
                taxEvatParameters.ServiceTimeOut);

            var errorInfo = response.get_statusFoutcode();
            errorCode = errorInfo.get_foutcode();

            ttsbegin;

            if (errorCode)
            {
                errorDescription = TaxDPSend_NL::getAnyTypeForCLRObject(errorInfo.get_foutbeschrijving());

                if (!isCalledFromEM)
                {
                    error(strFmt("@SYS72198", errorCode));
                    error(errorDescription);
                }

                this.updateStatus(TaxEvatStatus::Errors);

                statuscode         = TaxDPSend_NL::getAnyTypeForCLRObject(response.get_statuscode());
                statusDateTime     = TaxDPSend_NL::getAnyTypeForCLRObject(response.get_tijdstempelStatus(), Types::UtcDateTime);
                statusDescription  = TaxDPSend_NL::getAnyTypeForCLRObject(response.get_statusomschrijving());
                statusdetails      = TaxDPSend_NL::getAnyTypeForCLRObject(response.get_statusdetails());

                errorId = TaxEvatError_NL::findByCode(errorCode).RecId;

                taxReturnedError.DeclarationType    = taxDeclarationType;
                taxReturnedError.ReturnedErrorId    = returnedErrorId;
                taxReturnedError.TaxEvatError_NL    = errorId;
                taxReturnedError.ErrorDescription   = errorId ? errorDescription : errorCode + ' ' + errorDescription;
                taxReturnedError.StatusCode         = statuscode;
                taxReturnedError.StatusDateTime     = statusDateTime;
                taxReturnedError.StatusDescription  = statusDescription;
                taxReturnedError.StatusDetails      = statusdetails;

                if (isCalledFromEM)
                {
                    this.getTaxDPContract().getTaxReturnedErrorList().addEnd(taxReturnedError);
                }
                else
                {
                    taxReturnedError.insert();
                }
            }
            else
            {
                requestId = TaxDPSend_NL::getAnyTypeForCLRObject(response.get_kenmerk());

                if (requestId)
                {
                    this.updateStatus(TaxEvatStatus::Sent, requestId);
                }
            }

            ttscommit;
        }
        catch (Exception::Internal)
        {
            exc = CLRInterop::getLastException();

            if (exc)
            {
                clrExcMessage = exc.get_Message();
                strError = CLRInterop::getAnyTypeForObject(clrExcMessage);

                throw error(strError);
            }
        }
        catch (Exception::CLRError)
        {
            exc = CLRInterop::getLastException();

            if (exc)
            {
                clrExcMessage = exc.get_Message();
                innerExc = exc.get_InnerException();

                while (innerExc != null)
                {
                    clrExcMessage = innerExc.get_Message();
                    innerExc = innerExc.get_InnerException();
                }

                strError = CLRInterop::getAnyTypeForObject(clrExcMessage);

                throw error(strError);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntraCommTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the taxIntraCommTable table variable.
    /// </summary>
    /// <param name="_taxIntraCommTable">
    /// The <c>TaxIntraCommTable_NL</c> table variable.
    /// </param>
    /// <returns>
    /// The taxIntraCommTable table variable.
    /// </returns>
    public TaxIntraCommTable_NL taxIntraCommTable(TaxIntraCommTable_NL _taxIntraCommTable = taxIntraCommTable)
    {
        taxIntraCommTable = _taxIntraCommTable;
        return taxIntraCommTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTurnOverTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the taxTurnOverTable table variable.
    /// </summary>
    /// <param name="_taxTurnOverTable">
    /// The <c>TaxTurnOverTable_NL</c> table variable.
    /// </param>
    /// <returns>
    /// The taxTurnOverTable table variable.
    /// </returns>
    public TaxTurnOverTable_NL taxTurnOverTable(TaxTurnOverTable_NL _taxTurnOverTable = taxTurnOverTable)
    {
        taxTurnOverTable = _taxTurnOverTable;
        return taxTurnOverTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>TaxStatus</c> and sets <c>RequestId</c> for the processed table.
    /// </summary>
    /// <param name="_taxEvatStatus">
    /// The <c>TaxStatus</c> to set.
    /// </param>
    /// <param name="_requestId">
    /// The <c>RequestId_NL</c> to set; optional.
    /// </param>
    protected void updateStatus(TaxEvatStatus _taxEvatStatus, RequestId_NL _requestId = '')
    {
        if (isCalledFromEM)
        {
            this.getTaxDPContract().parmTaxEvatStatus(_taxEvatStatus);
            this.getTaxDPContract().parmRequestId(_requestId);
        }
        else
        {
            FormObjectSet dataSource;

            switch (taxDeclarationType)
            {
                case TaxDeclarationType::VAT:
                    taxTurnOverTable.TaxStatus = _taxEvatStatus;
                    if (!prmIsDefault(_requestId))
                    {
                        taxTurnOverTable.RequestId = _requestId;
                    }
                    taxTurnOverTable.update();
                    dataSource = FormDataUtil::getFormDataSource(taxTurnOverTable);
                    break;

                case TaxDeclarationType::ICL:
                    taxIntraCommTable.TaxStatus = _taxEvatStatus;
                    if (!prmIsDefault(_requestId))
                    {
                        taxIntraCommTable.RequestId = _requestId;
                    }
                    taxIntraCommTable.update();
                    dataSource = FormDataUtil::getFormDataSource(taxIntraCommTable);
                    break;
            }

            if (dataSource)
            {
                dataSource.research(true); //update data diplayed on form
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxDPSend_NL construct()
    {
        return new TaxDPSend_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnyTypeForCLRObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the object is Null then returns default value or the value for not Null objects.
    /// </summary>
    /// <param name="_clrObject">
    /// The object containing the value.
    /// </param>
    /// <param name="_type">
    /// The type of the object.
    /// </param>
    /// <returns>
    /// The value of the object for not Null objects; otherwise, the default value for the type of the object.
    /// </returns>
    public static anytype getAnyTypeForCLRObject(CLRObject _clrObject, Types _type = Types::String)
    {
        UTCDateTime utcDateTimeDefault;

        if (CLRInterop::isNull(_clrObject))
        {
            switch (_type)
            {
                case Types::String :
                    return '';

                case Types::UtcDateTime :
                    return utcDateTimeDefault;

                default :
                    return null;
            }
        }
        else
        {
            return CLRInterop::getAnyTypeForObject(_clrObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends VAT data to Digipoort.
    /// </summary>
    /// <param name = "_taxTurnOverTable_NL">A <c>TaxTurnOverTable_NL</c> record.</param>
    /// <param name = "_declarationData">The declaration data.</param>
    static public void sendVAT(TaxTurnOverTable_NL _taxTurnOverTable_NL, System.Byte[] _declarationData)
    {
        var taxDPSend = TaxDPSend_NL::construct();

        taxDPSend.taxTurnOverTable(_taxTurnOverTable_NL);
        #File
        taxDPSend.parmFilename(_taxTurnOverTable_NL.MessageID + #xml);
        taxDPSend.parmVATNum(taxDPSend.taxTurnOverTable().VatNum);
        taxDPSend.parmTaxDeclarationType(TaxDeclarationType::VAT);
        taxDPSend.parmReturnedErrorId(taxDPSend.taxTurnOverTable().TurnOverID);
        taxDPSend.parmDeclarationData(_declarationData);

        taxDPSend.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendICP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends ICP data to Digipoort.
    /// </summary>
    /// <param name = "_taxIntraCommTable_NL">A <c>TaxIntraCommTable_NL</c> record.</param>
    /// <param name = "_declarationData">The declaration data.</param>
    static public void sendICP(TaxIntraCommTable_NL _taxIntraCommTable_NL, System.Byte[] _declarationData)
    {
        var taxDPSend = TaxDPSend_NL::construct();
        VATNum vatNum = TaxVATNumTable::stripVATNumSimple(_taxIntraCommTable_NL.VatNum);

        taxDPSend.taxIntraCommTable(_taxIntraCommTable_NL);
        taxDPSend.parmFilename(taxDPSend.taxIntraCommTable().FileName);
        taxDPSend.parmVATNum(vatNum);
        taxDPSend.parmTaxDeclarationType(TaxDeclarationType::ICL);
        taxDPSend.parmReturnedErrorId(taxDPSend.taxIntraCommTable().IntraCommId);
        taxDPSend.parmDeclarationData(_declarationData);

        taxDPSend.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromEM</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromEM(boolean _isCalledFromEM = isCalledFromEM)
    {
        isCalledFromEM = _isCalledFromEM;
        return isCalledFromEM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDPContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of <c>TaxDPContract_NL</c> object.
    /// </summary>
    /// <returns>The instance of <c>TaxDPContract_NL</c> object.</returns>
    public TaxDPContract_NL getTaxDPContract()
    {
        if (!taxDPContract)
        {
            taxDPContract = new TaxDPContract_NL();
        }

        return taxDPContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>