<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmLeadUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class opens the the dialog window whenever the lead status gets updated
public class SmmLeadUpdate extends RunBase
{
    smmLeadTable                    smmLeadTable;
    smmQuotationReasonId            reasonId;
    DialogField                     dialogReasonId;
    smmLeadStatus                   toLeadStatus;
    boolean                         hideDialog;
    boolean                         fromEp;
    // 0: dont delete, 1: delete records, 2: cancel
    int                             deleteRecords;
    smmProcessInstance              smmProcessInstance;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEntity</Name>
				<Source><![CDATA[
    void createEntity(smmEntityToCreate _entityCreate , Object  _caller)
    {
        // from Create Customer function button
        if (_entityCreate == smmEntityToCreate::Customer)
        {
            // Check license
            if (!smmLicense::custTableInsert())
            {
                // Not allowed to store data in Customer table
                throw error("@SYS80669");
            }

            smmUtility::openMenuItemForm(menuitemDisplayStr(CustomerquickCreate), smmLeadTable, _caller);
        }
        else if (_entityCreate == smmEntityToCreate::Opportunity)
        {
            smmUtility::openMenuItemForm(menuitemDisplayStr(smmOpportunityTable), smmLeadTable, _caller, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    // Change the label text depending on the status change
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (toLeadStatus == smmLeadStatus::Qualified)
        {
            // Reason qualified
            // HELP: The reason lead was qualified.
            dialogReasonId  = dialog.addFieldValue(extendedTypeStr(smmQuotationReasonId), reasonId, "@SYS105102","@SYS105103");
        }
        else if (toLeadStatus == smmLeadStatus::NotQualified)
        {
            // Reason disqualified
            // The reason lead was disqualified.
            dialogReasonId  = dialog.addFieldValue(extendedTypeStr(smmQuotationReasonId), reasonId, "@SYS105162","@SYS105163");
        }
        else if (toLeadStatus == smmLeadStatus::OnHold)
        {
            // Reason on-hold
            // The reason lead was postponed.
            dialogReasonId  = dialog.addFieldValue(extendedTypeStr(smmQuotationReasonId), reasonId, "@SYS105174","@SYS105175");
        }
        else if (toLeadStatus == smmLeadStatus::Open)
        {
            // Reason reactivation
            // The reason lead was reactivated.
            dialogReasonId  = dialog.addFieldValue(extendedTypeStr(smmQuotationReasonId), reasonId, "@SYS330324","@SYS330325");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    // Reason Id to be entered
    boolean getFromDialog()
    {
        reasonId = dialogReasonId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void  new()
    {
        super();

        // Set Flag
        fromEp = false;
        deleteRecords = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeadTable</Name>
				<Source><![CDATA[
    smmLeadTable parmLeadTable(smmLeadTable  _smmLeadTable = smmLeadTable)
    {
        smmLeadTable = _smmLeadTable;
        return smmLeadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonId</Name>
				<Source><![CDATA[
    str parmReasonId(str  _reasonId = reasonId)
    {
        reasonId = _reasonId;
        return reasonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    boolean parmShowDialog(boolean _showDialog = !hideDialog)
    {
        hideDialog = !_showDialog;
        return !hideDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToLeadStatus</Name>
				<Source><![CDATA[
    smmLeadStatus parmToLeadStatus(smmLeadStatus _leadStatus = toLeadStatus)
    {
        toLeadStatus = _leadStatus;

        return toLeadStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    // Update the table with the Reason Id specified
    // Update the new status
    void run()
    {
        SmmLeadDate clearDate;

        ttsbegin;
        smmLeadTable.ReasonId       = reasonId;
        smmLeadTable.Status         = toLeadStatus;
        smmLeadTable.ClosedByWorker = 0;
        smmLeadTable.DateClose      = clearDate;

        SmmLeadUpdate::updateBaseOnLeadStatus(smmLeadTable, smmProcessInstance);

        if (smmLeadTable.validateWrite(true))
        {
            smmLeadTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseOnLeadStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SmmLeadTable</c> based on the <c>SmmLeadStatus</c>.
    /// </summary>
    /// <param name = "_smmLeadTable">The <c>SmmLeadTable</c> record to be updated.</param>
    /// <param name = "_smmProcessInstance">The related <c>SmmProcessInstance</c> record.</param>
    protected static void updateBaseOnLeadStatus(SmmLeadTable _smmLeadTable, SmmProcessInstance _smmProcessInstance)
    {
        switch (_smmLeadTable.Status)
        {
            case SmmLeadStatus::NotQualified :
            case SmmLeadStatus::Qualified :
                SmmLeadUpdate::setClosingDateAndWorkerFields(_smmLeadTable);
                SmmLeadUpdate::deleteProcessInstance(_smmLeadTable, _smmProcessInstance);
                break;
            case SmmLeadStatus::Open :
                SmmLeadUpdate::reactivateStatus(_smmLeadTable, SmmLeadStatus::Open);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProcessInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related <c>SmmProcessInstance</c> record.
    /// </summary>
    /// <param name = "_smmLeadTable">The <c>SmmLeadTable</c> record.</param>
    /// <param name = "_smmProcessInstance">The related <c>SmmProcessInstance</c> record to be deleted.</param>
    protected static void deleteProcessInstance(SmmLeadTable _smmLeadTable, SmmProcessInstance _smmProcessInstance)
    {
        if (_smmLeadTable.ProcessName && _smmLeadTable.Status == SmmLeadStatus::NotQualified)
        {
            if (!_smmProcessInstance)
            {
                _smmProcessInstance = SmmProcessInstance::construct(_smmLeadTable);
            }

            _smmProcessInstance.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClosingDateAndWorkerFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the closing date and worker fields for the specified <c>SmmLeadTable</c> record.
    /// </summary>
    /// <param name = "_smmLeadTable">The <c>SmmLeadTable</c> record to be updated.</param>
    protected static void setClosingDateAndWorkerFields(SmmLeadTable _smmLeadTable)
    {
        _smmLeadTable.DateClose      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        _smmLeadTable.ClosedByWorker = SmmUtility::getCurrentContactWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeleteRecords</Name>
				<Source><![CDATA[
    void setDeleteRecords(int value)
    {
        deleteRecords = value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromEp</Name>
				<Source><![CDATA[
    void setFromEp(boolean value)
    {
        fromEp = value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        ret = super();

        if (reasonId && (select count(RecId) from smmQuotationReasonGroup where smmQuotationReasonGroup.ReasonId == reasonId).RecId == 0)
        {
            ret = checkFailed(strFmt("@SYS31784",reasonId,fieldId2pname(tableNum(smmLeadTable),
                    fieldNum(smmLeadTable,ReasonId)),tableId2pname(tableNum(smmQuotationReasonGroup))));
        }

        if (ret)
        {
            // Validate process
            ret = this.validateProcessCompleted();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessCompleted</Name>
				<Source><![CDATA[
    private boolean validateProcessCompleted()
    {
        boolean             ret = true;
        DialogButton        answer;

        if (smmLeadTable.ProcessName)
        {
            smmProcessInstance = smmProcessInstance::construct(smmLeadTable);

            switch (toLeadStatus)
            {
                case smmLeadStatus::NotQualified :
                    // Ask if open activities wants to be deleted
                    // Do you want to remove all open activities?
                    // Do not do this for EP as the answer is chosen yes from pop up
                    if (fromEp == false)
                    {
                        answer = Box::yesNoCancel("@SYS109839", DialogButton::Cancel);

                        if (answer == DialogButton::Cancel)
                        {
                            return checkFailed("@SYS25904"); //Update has been canceled.
                        }
                    }
                    // Else if we are coming from EP we have the value already from the user
                    else
                    {
                        // 0: dont delete, 1: delete records
                        answer = (deleteRecords == 1)? DialogButton::Yes : DialogButton::No;
                    }
                    smmProcessInstance.parmRemoveOpenActivities(answer == DialogButton::Yes);
                    smmProcessInstance.parmRemoveActivitiesOnly(true);
                    break;
                case smmLeadStatus::Qualified :
                    // Make sure all exit criteria has been validated
                    ret = smmProcessInstance.changeStage(smmProcessInstance.getLastStage().ElementNumber, true);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static smmLeadUpdate construct()
    {
        return  new smmLeadUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription  description()
    {
        // Update Status
        return "@SYS80055";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // Called from the Lead form when changing the lead status
    static void main(Args args)
    {
        if (!args)
        {
            throw error("@SYS25407");
        }

        SmmLeadUpdate smmLeadUpdate = SmmLeadUpdate::construct();

        // Check for the parameters
        if (args.parmEnumType() && args.parmEnumType() == enumNum(SmmLeadStatus))
        {
            smmLeadUpdate.parmToLeadStatus(args.parmEnum());
        }

        SmmLeadTable smmLeadTable;

        if (args.record() && args.record().TableId == tableNum(SmmLeadTable))
        {
            smmLeadTable = args.record();
            smmLeadTable.selectForUpdate(true);
            smmLeadUpdate.parmLeadTable(smmLeadTable);
        }
        else
        {
            // Incorrect parameter for the function %1
            throw error(strFmt("@SYS54195",funcName()));
        }

        SmmLeadUpdate::runOperationAndCreateEntities(smmLeadUpdate, smmLeadTable, args.caller());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAndCreateEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes runOperation() and creates entities if applicable.
    /// </summary>
    /// <param name = "_smmLeadUpdate">The <c>SmmLeadUpdate</c> instance.</param>
    /// <param name = "_smmLeadTable">The <c>SmmLeadTable</c> record.</param>
    /// <param name = "_caller">The <c>Args</c> caller record.</param>
    protected static void runOperationAndCreateEntities(SmmLeadUpdate _smmLeadUpdate, SmmLeadTable _smmLeadTable, Object _caller)
    {
        if (SmmLeadUpdate::showLeadUpdateDialog(_smmLeadUpdate))
        {
            _smmLeadUpdate.runOperation();

            if (SmmLeadUpdate::isLeadStatusQualified(_smmLeadUpdate.parmToLeadStatus()))
            {
                SmmLeadUpdate::createEntities(_smmLeadUpdate, _smmLeadTable, _caller);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLeadStatusQualified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>SmmLeadStatus</c> is Qualified.
    /// </summary>
    /// <param name = "_smmLeadStatus">The <c>SmmLeadStatus</c>.</param>
    /// <returns>
    /// true if the <c>SmmLeadStatus</c> is Qualified; otherwise, false.
    /// </returns>
    protected static boolean isLeadStatusQualified(SmmLeadStatus _smmLeadStatus)
    {
        return _smmLeadStatus == SmmLeadStatus::Qualified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates entities if AutoCreate is set for customers and/or opportunities.
    /// </summary>
    /// <param name = "_smmLeadUpdate">The <c>SmmLeadUpdate</c> instance.</param>
    /// <param name = "_smmLeadTable">The <c>SmmLeadTable</c> record.</param>
    /// <param name = "_caller">The <c>Args</c> caller record.</param>
    protected static void createEntities(SmmLeadUpdate _smmLeadUpdate, SmmLeadTable _smmLeadTable, Object _caller)
    {
        if (SmmParametersTable::find().AutoCreateCustomer &&
            !DirPartyTableHelper::isCustomer(_smmLeadTable.Party))
        {
            _smmLeadUpdate.createEntity(SmmEntityToCreate::Customer, _caller);
        }

        if (SmmParametersTable::find().AutoCreateOpportunity)
        {
            _smmLeadUpdate.createEntity(SmmEntityToCreate::Opportunity, _caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLeadUpdateDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows dialog by calling prompt() only if showDialog was specified.
    /// </summary>
    /// <param name = "_smmLeadUpdate">The <c>SmmLeadUpdate</c> instance.</param>
    /// <returns>true if dialog was shown and acknowledged, or if showDialog was set to false; otherwise, false.</returns>
    protected static boolean showLeadUpdateDialog(SmmLeadUpdate _smmLeadUpdate)
    {
        return (!_smmLeadUpdate.parmShowDialog() || _smmLeadUpdate.prompt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reactivateStatus</Name>
				<Source><![CDATA[
    // Called from the Lead form when status is changed to Reactivate
    // No reason Id is necessary to enter when reactivating a lead
    static void reactivateStatus(smmLeadTable _smmLeadTable,smmLeadStatus _toSmmLeadStatus)
    {
        smmLeadDate clearDate;

        ttsbegin;

        _smmLeadTable.selectForUpdate();
        _smmLeadTable.ReasonId          = '';
        _smmLeadTable.Status            = _toSmmLeadStatus;
        _smmLeadTable.ClosedByWorker    = 0;
        _smmLeadTable.DateClose         = clearDate;
        _smmLeadTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>