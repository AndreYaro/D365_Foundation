<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerShowDebCredRecord_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// adapter of Show Debit Creidit function
/// </summary>

class LedgerShowDebCredRecord_CN
{
    Common record;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Accounting Currency Amount
    /// </summary>
    /// <returns>
    /// Accounting Currency Amount
    /// </returns>
    protected AmountCur accountingCurrencyAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Accounting Currency Credit Amount
    /// </summary>
    /// <returns>
    /// Accounting Currency Credit Amount
    /// </returns>
    public AmountCur accountingCurrencyCreditAmount()
    {
        return this.getAmountByCrediting(this.accountingCurrencyAmount(), NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Accounting Currency Debit Amount
    /// </summary>
    /// <returns>
    /// Accounting Currency Debit Amount
    /// </returns>
    public AmountCur accountingCurrencyDebitAmount()
    {
        return this.getAmountByCrediting(this.accountingCurrencyAmount(), NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountByCrediting</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the debit or credit amount
    /// </summary>
    /// <param name="_amount">
    /// the actual amount
    /// </param>
    /// <param name="_credit">
    /// is debit or credit
    /// </param>
    /// <returns>
    /// the debit or credit amount
    /// </returns>

    protected AmountCur getAmountByCrediting(AmountCur _amount, NoYes _credit)
    {
        AmountCur amountCur = 0;

        if (this.isCrediting() == _credit)
        {
            if (_credit)
            {
                amountCur = _amount * (-1);
            }
            else
            {
                amountCur = _amount;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCrediting</Name>
				<Source><![CDATA[
    /// <summary>
    /// whether current record is crediting
    /// </summary>
    /// <returns>
    /// whether current record is crediting
    /// </returns>
    protected NoYes isCrediting()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord</Name>
				<Source><![CDATA[
    public Common parmRecord(Common _record = record)
    {
        record = _record;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Transaction Currency Amount
    /// </summary>
    /// <returns>
    /// Transaction Currency Amount
    /// </returns>
    protected AmountCur transactionCurrencyAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Transasction Currency Credit Amount
    /// </summary>
    /// <returns>
    /// Transasction Currency Credit Amount
    /// </returns>
    public AmountCur transactionCurrencyCreditAmount()
    {
        return this.getAmountByCrediting(this.transactionCurrencyAmount(), NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Transasction Currency Debit Amount
    /// </summary>
    /// <returns>
    /// Transasction Currency Debit Amount
    /// </returns>
    public AmountCur transactionCurrencyDebitAmount()
    {
        return this.getAmountByCrediting(this.transactionCurrencyAmount(), NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the new instance of the <c>LedgerShowDebCredRecord_CN</c> class.
    /// </summary>
    /// <param name="_table">
    /// The table id.
    /// </param>
    /// <returns>
    /// The instance of the <c>LedgerShowDebCredRecord_CN</c> class.
    /// </returns>
    public static LedgerShowDebCredRecord_CN construct(tableid _table)
    {
        LedgerShowDebCredRecord_CN              ledgerShowDebCredRecord;
        LedgerShowDebCred_CreditingColumn_CN    ledgerShowDebCred_CreditingColumn;
        LedgerShowDebCred_DualAmountColumn_CN   ledgerShowDebCred_DualAmountColumn;
        LedgerShowDebCred_CorrectColumn_JP      ledgerShowDebCred_CorrectColumn;

        switch (_table)
        {
            case tablenum(GeneralJournalAccountEntry):
                ledgerShowDebCred_CreditingColumn = new LedgerShowDebCred_CreditingColumn_CN();
                ledgerShowDebCred_CreditingColumn.parmAmountFields(
                    fieldnum(GeneralJournalAccountEntry, TransactionCurrencyAmount),
                    fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
                ledgerShowDebCred_CreditingColumn.parmCreditField(
                    fieldnum(GeneralJournalAccountEntry, IsCredit),
                    NoYes::Yes);
                ledgerShowDebCredRecord = ledgerShowDebCred_CreditingColumn;
                break;

            case tablenum(LedgerCov):
                ledgerShowDebCred_CreditingColumn = new LedgerShowDebCred_CreditingColumn_CN();
                ledgerShowDebCred_CreditingColumn.parmAmountFields(
                    fieldnum(LedgerCov, AmountCur),
                    fieldnum(LedgerCov, AmountMST));
                ledgerShowDebCred_CreditingColumn.parmCreditField(
                    fieldnum(LedgerCov, Crediting),
                    NoYes::Yes);
                ledgerShowDebCredRecord = ledgerShowDebCred_CreditingColumn;
                break;

            case tablenum(BudgetTransactionLine):
                ledgerShowDebCred_CreditingColumn = new LedgerShowDebCred_CreditingColumn_CN();
                ledgerShowDebCred_CreditingColumn.parmAmountFields(
                    fieldnum(BudgetTransactionLine, TransactionCurrencyAmount),
                    fieldnum(BudgetTransactionLine, AccountingCurrencyAmount));
                ledgerShowDebCred_CreditingColumn.parmCreditField(
                    fieldnum(BudgetTransactionLine, BudgetType),
                    BudgetType::Revenue);
                ledgerShowDebCredRecord = ledgerShowDebCred_CreditingColumn;
                break;

            case tablenum(TmpLedgerPaymentControl):
                ledgerShowDebCred_DualAmountColumn = new LedgerShowDebCred_DualAmountColumn_CN();
                ledgerShowDebCred_DualAmountColumn.parmAmountFields(
                    fieldnum(TmpLedgerPaymentControl, AmountCurCredit_CN),
                    fieldnum(TmpLedgerPaymentControl, AmountCurDebit_CN),
                    fieldnum(TmpLedgerPaymentControl, AmountMSTCredit_CN),
                    fieldnum(TmpLedgerPaymentControl, AmountMSTDebit_CN));
                ledgerShowDebCredRecord = ledgerShowDebCred_DualAmountColumn;
                break;

            case tablenum(TmpLedgerPaymentControlCur):
                ledgerShowDebCred_DualAmountColumn = new LedgerShowDebCred_DualAmountColumn_CN();
                ledgerShowDebCred_DualAmountColumn.parmAmountFields(
                    fieldnum(TmpLedgerPaymentControlCur, AmountCurCredit_CN),
                    fieldnum(TmpLedgerPaymentControlCur, AmountCurDebit_CN),
                    fieldnum(TmpLedgerPaymentControlCur, AmountMSTCredit_CN),
                    fieldnum(TmpLedgerPaymentControlCur, AmountMSTDebit_CN));
                ledgerShowDebCredRecord = ledgerShowDebCred_DualAmountColumn;
                break;
            case tablenum(LedgerJournalTrans):
                ledgerShowDebCred_DualAmountColumn = new LedgerShowDebCred_DualAmountColumn_CN();
                ledgerShowDebCred_DualAmountColumn.parmAmountFields(
                    fieldnum(LedgerJournalTrans, AmountCurCredit),
                    fieldnum(LedgerJournalTrans, AmountCurDebit),
                    0,
                    0);
                ledgerShowDebCredRecord = ledgerShowDebCred_DualAmountColumn;
                break;

            case tableNum(VendTrans):
            case tableNum(CustTrans):
                ledgerShowDebCred_CorrectColumn = new LedgerShowDebCred_CorrectColumn_JP();
                ledgerShowDebCred_CorrectColumn.parmAmountFields(fieldNum(CustVendTrans, AmountCur));
                ledgerShowDebCred_CorrectColumn.parmCorrectField(fieldNum(CustVendTrans, Correct));
                ledgerShowDebCredRecord = ledgerShowDebCred_CorrectColumn;
                break;

            default:
                break;
        }
        return ledgerShowDebCredRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// construct instance from record
    /// </summary>
    /// <param name="_record">
    /// the current record
    /// </param>
    /// <returns>
    /// a new instance
    /// </returns>

    public static LedgerShowDebCredRecord_CN constructFromRecord(Common _record)
    {
        LedgerShowDebCredRecord_CN ledgerShowDebCredRecord;

        ledgerShowDebCredRecord = LedgerShowDebCredRecord_CN::construct(_record.TableId);
        ledgerShowDebCredRecord.parmRecord(_record);

        return ledgerShowDebCredRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>