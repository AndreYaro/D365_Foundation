<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendLedgerReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendLedgerReconciliationDP</c> class handles all the business logic to display data on the
/// <c>VendLedgerReconciliation</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[SRSReportParameterAttribute(classstr(VendLedgerReconciliationContract))]
public class VendLedgerReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    VendLedgerReconciliationTmp vendLedgerReconciliationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data that is to be displayed from the <c>VendLedgerReconciliationTmp</c> table.
    /// </summary>
    /// <returns>
    /// A <c>VendLedgerReconciliationTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendLedgerReconciliationTmp))]
    public VendLedgerReconciliationTmp getVendLedgerReconciliationTmp()
    {
        select vendLedgerReconciliationTmp;
        return vendLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initService</Name>
				<Source><![CDATA[
    private void initService(VendReport_LedgerReconciliation vendReport_LedgerReconciliation, VendLedgerReconciliationContract contract)
    {
        vendReport_LedgerReconciliation.parmFromDate(contract.parmFromDate());
        vendReport_LedgerReconciliation.parmToDate(contract.parmToDate());
        vendReport_LedgerReconciliation.parmFromVoucher(contract.parmFromVoucher());
        vendReport_LedgerReconciliation.parmToVoucher(contract.parmToVoucher());
        vendReport_LedgerReconciliation.parmIncludeDetails(contract.parmIncludeDetails());
        vendReport_LedgerReconciliation.parmFromPostingProfile(contract.parmFromPostingProfile());
        vendReport_LedgerReconciliation.parmToPostingProfile(contract.parmToPostingProfile());
        vendReport_LedgerReconciliation.parmShowDifferencesOnly(contract.parmShowDifferencesOnly());
        vendReport_LedgerReconciliation.parmCurrencySelection(contract.parmCurrencySelection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>VendLedgerReconciliation</c> SSRS report.
    /// </summary>
    public void processReport()
    {
        VendReport_LedgerReconciliation vendReport_LedgerReconciliation;
        VendLedgerReconciliationContract contract;

        contract = this.parmDataContract() as VendLedgerReconciliationContract;

        vendReport_LedgerReconciliation = new VendReport_LedgerReconciliation(vendLedgerReconciliationTmp);
        this.initService(vendReport_LedgerReconciliation, contract);

        vendLedgerReconciliationTmp = vendReport_LedgerReconciliation.processVendLedgerReconciliation(this.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>