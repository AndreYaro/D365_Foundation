<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountPerformanceImprovementFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

[FeatureMetadataConfigurationKey(configurationKeyStr(Retail))]
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
internal final class RetailDiscountPerformanceImprovementFeature implements IFeatureMetadata, IFeatureLifecycle, IFeaturePrerequisites, IFeatureMetadataEnablementNotifiable
{
    private static RetailDiscountPerformanceImprovementFeature instance;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new RetailDiscountPerformanceImprovementFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static RetailDiscountPerformanceImprovementFeature instance()
    {
        return RetailDiscountPerformanceImprovementFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@RetailPricing:RetailDiscountPerformanceImprovementFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@RetailPricing:RetailDiscountPerformanceImprovementFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://aka.ms/Publish_discounts";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        ttsbegin;
        // Everytime the feature is enabled, we marked the flag and flip it back when the batch jobs completes.
        RetailPricingSharedParameters parameters = RetailPricingSharedParameters::find(true);
        parameters.ProcessingLookupTables = true;
        parameters.update();
        ttscommit;

        if (RetailConfigurationParameters::getNumberOfParallelDiscountPublishTasks() == 1 && RetailRunDiscountPublishTasksForAllDiscountsFlight::instance().isEnabled())
        {
            RetailPeriodicDiscountPublishController controller = new RetailPeriodicDiscountPublishController();
            RetailPeriodicDiscountPublishContract dataContract = controller.getDataContractObject();
            dataContract.parmIsFullPublish(true);
            controller.runOperation();
        }
        else
        {
            Args args = new Args();
            RetailPeriodicDiscountPublishController::main(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    void onDisabled()
    {
        // We leave everything in flattened tables as it is because we will fully publish them again when the feature is enabled.
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return "@RetailPricing:RetailDiscountPerformanceImprovementFeatureDisableMessage";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>