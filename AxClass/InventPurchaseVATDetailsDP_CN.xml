<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPurchaseVATDetailsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
///<summary>
/// The <c>PurchaseVATDetailsReportDP_CN</c> class provides data for the <c>PurchaseVATDetailsReport_CN</c>
/// SQL Server Reporting Services (SSRS) report
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>PurchaseVATDetailsReport_CN</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InventPurchaseVATDetailsContract_CN))
]
public class InventPurchaseVATDetailsDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    InventPurchaseVATDetailsTmp_CN  inventPurchaseVATDetailsTmp_CN;

    FromDate            fromDate;
    ToDate              toDate;
    VendAccount         vendAccount;
    VendInvoiceId       invoiceId;
    TaxCode             salesTaxCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventPurchaseVATDetailsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PurchaseVATDetailsTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PurchaseVATDetailsTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventPurchaseVATDetailsTmp_CN))
    ]
    public InventPurchaseVATDetailsTmp_CN getInventPurchaseVATDetailsTmp_CN()
    {
        select InventPurchaseVATDetailsTmp_CN;
        return InventPurchaseVATDetailsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventPurchaseVATDetailsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data achieved from query and inserts the results into the InventPurchaseVATDetailsTmp_CN table.
    /// </summary>
    private void initInventPurchaseVATDetailsTmp_CN()
    {
        //Get basic information through query.
        Query query = new Query();

        QueryBuildDataSource taxTransDS = query.addDataSource(tableNum(TaxTrans));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxBaseAmount));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxAmount));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxCode));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxValue));
        taxTransDS.addRange(fieldNum(TaxTrans, TaxCode)).value(salesTaxCode);

        QueryBuildDataSource vendInvoiceTransDS = taxTransDS.addDataSource(tableNum(VendInvoiceTrans));
        vendInvoiceTransDS.addSelectionField(fieldNum(VendInvoiceTrans, InvoiceDate));
        vendInvoiceTransDS.addSelectionField(fieldNum(VendInvoiceTrans, InvoiceId));
        vendInvoiceTransDS.addSelectionField(fieldNum(VendInvoiceTrans, Qty));
        vendInvoiceTransDS.addSelectionField(fieldNum(VendInvoiceTrans, ItemId));
        vendInvoiceTransDS.joinMode(JoinMode::InnerJoin);
        vendInvoiceTransDS.addLink(fieldNum(TaxTrans, SourceTableId), fieldNum(VendInvoiceTrans, TableId));
        vendInvoiceTransDS.addLink(fieldNum(TaxTrans, SourceRecId), fieldNum(VendInvoiceTrans, RecId));
        vendInvoiceTransDS.addRange(fieldNum(VendInvoiceTrans, InvoiceDate)).value(queryRange(fromDate, toDate));
        vendInvoiceTransDS.addRange(fieldNum(VendInvoiceTrans, InvoiceId)).value(invoiceId);

        QueryBuildDataSource vendInvoiceJourDS = vendInvoiceTransDS.addDataSource(tableNum(VendInvoiceJour));
        vendInvoiceJourDS.fetchMode(QueryFetchMode::One2One);
        vendInvoiceJourDS.addSelectionField(fieldNum(VendInvoiceJour, OrderAccount));
        vendInvoiceJourDS.addSelectionField(fieldNum(VendInvoiceJour, InvoiceAccount));
        vendInvoiceJourDS.joinMode(JoinMode::InnerJoin);
        vendInvoiceJourDS.addRange(fieldNum(VendInvoiceJour, OrderAccount)).value(vendAccount);
        vendInvoiceJourDS.relations(true);

        QueryBuildDataSource inventDimDS = vendInvoiceTransDS.addDataSource(tableNum(InventDim));
        inventDimDS.fetchMode(QueryFetchMode::One2One);
        inventDimDS.addSelectionField(fieldNum(InventDim, InventLocationId));
        inventDimDS.addLink(fieldNum(VendInvoiceTrans, InventDimId), fieldNum(InventDim, inventDimId));
        inventDimDS.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource inventTableDS = vendInvoiceTransDS.addDataSource(tableNum(InventTable));
        inventTableDS.addSelectionField(fieldNum(InventTable, ItemId));
        inventTableDS.addSelectionField(fieldNum(InventTable, Product));
        inventTableDS.fetchMode(QueryFetchMode::One2One);
        inventTableDS.joinMode(JoinMode::OuterJoin);
        inventTableDS.addLink(fieldNum(VendInvoiceTrans, ItemId), fieldNum(InventTable, ItemId));

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            TaxTrans         taxTransLocal         = queryRun.get(tableNum(TaxTrans));
            VendInvoiceTrans vendInvoiceTransLocal = queryRun.get(tableNum(VendInvoiceTrans));
            VendInvoiceJour  vendInvoiceJourLocal  = queryRun.get(tableNum(VendInvoiceJour));
            InventDim        inventDimLocal        = queryRun.get(tableNum(InventDim));
            InventTable      inventTableLocal      = queryRun.get(tableNum(InventTable));

            inventPurchaseVATDetailsTmp_CN.clear();

            inventPurchaseVATDetailsTmp_CN.Date             = vendInvoiceTransLocal.InvoiceDate;
            inventPurchaseVATDetailsTmp_CN.VendAccount      = vendInvoiceJourLocal.InvoiceAccount ? vendInvoiceJourLocal.InvoiceAccount : vendInvoiceJourLocal.OrderAccount;
            inventPurchaseVATDetailsTmp_CN.InvoiceId        = vendInvoiceTransLocal.InvoiceId;
            inventPurchaseVATDetailsTmp_CN.Warehouse        = inventDimLocal.InventLocationId;
            inventPurchaseVATDetailsTmp_CN.Quantity         = abs(vendInvoiceTransLocal.Qty);
            inventPurchaseVATDetailsTmp_CN.Value            = abs(taxTransLocal.TaxValue);
            inventPurchaseVATDetailsTmp_CN.SalesTaxAmount   = abs(taxTransLocal.TaxAmount);
            inventPurchaseVATDetailsTmp_CN.Origin           = abs(taxTransLocal.TaxAmount) + abs(taxTransLocal.TaxBaseAmount);
            inventPurchaseVATDetailsTmp_CN.Price            = inventPurchaseVATDetailsTmp_CN.Origin / inventPurchaseVATDetailsTmp_CN.Quantity;
            inventPurchaseVATDetailsTmp_CN.TaxCode          = taxTransLocal.TaxCode;
            inventPurchaseVATDetailsTmp_CN.StartDate        = fromDate;
            inventPurchaseVATDetailsTmp_CN.EndDate          = toDate;
            inventPurchaseVATDetailsTmp_CN.ProductName      = inventTableLocal.itemName();
            inventPurchaseVATDetailsTmp_CN.Name             = inventTableLocal.itemGroup().Name;

            inventPurchaseVATDetailsTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be callled by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00105, funcName());

        InventPurchaseVATDetailsContract_CN contract = this.parmDataContract() as InventPurchaseVATDetailsContract_CN;
        fromDate            = contract.parmPeriodContract().parmFromDate();
        toDate              = contract.parmPeriodContract().parmToDate();
        vendAccount         = contract.parmVendAccount();
        invoiceId           = contract.parmInvoiceId();
        salesTaxCode        = contract.parmSalesTaxCode();

        if (!fromDate)
        {
            fromDate = InventSRSHelper_CN::getCurrentPeriodDate();
        }

        if (!toDate)
        {
            toDate = InventSRSHelper_CN::getCurrentPeriodDate(false);
        }

        this.initInventPurchaseVATDetailsTmp_CN();

        select firstOnly recId from inventPurchaseVATDetailsTmp_CN;
        if (!inventPurchaseVATDetailsTmp_CN.RecId)
        {
            inventPurchaseVATDetailsTmp_CN.clear();
            inventPurchaseVATDetailsTmp_CN.StartDate    = fromDate;
            inventPurchaseVATDetailsTmp_CN.EndDate      = toDate;
            inventPurchaseVATDetailsTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>