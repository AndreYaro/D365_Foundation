<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate_Deny</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_Deny</c> class manages the update of deductions for the deny type.
/// </summary>
class TamDeductionUpdate_Deny extends TAMDeductionUpdate
{
    TmpTAMDeductionParmDeny tmpDeductionParmDeny;
    CustTrans               custTransDeny;
    LedgerJournalId         ledgerJournalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertedLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// A <c>LedgerJournalTable</c> record inserted event handler delegate.
    /// </summary>
    /// <param name = "_ledgerJournalTable">A ledger journal table record.</param>
    /// <remarks>Subscribers are responsible for persisting changes in case if any modifications to the record are done.</remarks>
    delegate void insertedLedgerJournal(LedgerJournalTable _ledgerJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// A <c>LedgerJournalTrans</c> record inserted event handler delegate.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">A ledger journal trans record.</param>
    /// <remarks>Subscribers are responsible for persisting changes in case if any modifications to the record are done.</remarks>
    delegate void insertedLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TmpTAMDeductionParmDeny _tmpDeductionParmDeny)
    {
        super(_tmpDeductionParmDeny);
        tmpDeductionParmDeny.setTmpData(_tmpDeductionParmDeny);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary buffer that specifies the denial.
    /// </summary>
    /// <returns>
    /// The temporary buffer that specifies the denial.
    /// </returns>
    protected Common parmBuffer()
    {
        return tmpDeductionParmDeny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTransDeny</Name>
				<Source><![CDATA[
    public CustTrans parmCustTransDeny()
    {
        return custTransDeny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form string of the deny form.
    /// </summary>
    /// <returns>
    /// The form string of the deny form.
    /// </returns>
    protected str parmFormString()
    {
        return formStr(TAMDeductionParmDeny);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::Deny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles the customer transactions, given a list of <c>LedgerJournalTrans</c> records that just posted,
    /// created by that posting with the transactions specified for denial.
    /// </summary>
    /// <param name="_listLedgerJournalTrans">
    /// The list of <c>LedgerJournalTrans</c> records to use to settle the customer transactions.
    /// </param>
    private void settle(RecordSortedList _listLedgerJournalTrans)
    {
        CustTable                 custTable;
        CustTrans                 custTrans;
        CustTrans                 custTransDenial;
        CustSettlement            custSettlement;
        TAMDeduction              tamDeduction;
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans        ledgerJournalTransParent;
        AccountNum                accountNum;
        boolean                   loop;
        CustSettlementRefRecId    firstCustSettlementRecId;
        SpecTransExecutionContext context;

        loop = _listLedgerJournalTrans.first(ledgerJournalTrans);
        while (loop)
        {
            // Retrieve customer if customer account changed (or first record)
            if (!accountNum
                || accountNum != ledgerJournalTrans.parmAccount())
            {
                custTable = CustTable::find(ledgerJournalTrans.parmAccount());
                if (!custTable)
                {
                    throw error(strFmt("@SYS16734", ledgerJournalTrans.parmAccount()));
                }
                accountNum = ledgerJournalTrans.parmAccount();
            }

            tamDeduction = TAMDeduction::find(mapLJTransLineNumToDeductionId.lookup(ledgerJournalTrans.LineNum));
            ledgerJournalTransParent = tamDeduction.ledgerJournalTrans();
            // Reread to get CustTransId value because CustTransId assigned during posting
            ledgerJournalTrans.reread();

            custTrans = CustTrans::find(ledgerJournalTransParent.CustTransId);

            if (!custTrans)
            {
                throw Exception::Error;
            }

            custTransDenial = CustTrans::find(ledgerJournalTrans.CustTransId);

            if (!custTransDenial)
            {
                throw Exception::Error;
            }
            custTransDeny = custTransDenial;

            ttsbegin;
            if(TAMDeductionUpdate_DenyDeductionSettleFlight::instance().isEnabled())
            {
                context = SpecTransExecutionContext::newFromSource(custTable);
                // Settle transactions
                CustTrans::settleTransaction(context, CustTransSettleTransactionParameters::construct());

            }
            else
            {
                custSettlement.clear();
                custSettlement.AccountNum             = custTrans.AccountNum;
                custSettlement.OffsetTransVoucher     = custTrans.Voucher;
                custSettlement.TransDate              = max(custTrans.TransDate, custTrans.LastSettleDate);
                custSettlement.DueDate                = custTrans.TransDate;
                custSettlement.TransRecId             = custTransDenial.RecId;
                custSettlement.TransCompany           = custTransDenial.DataAreaId;
                custSettlement.SettleAmountMST        = custTrans.AmountMST;
                custSettlement.SettleAmountCur        = custTrans.AmountCur;
                custSettlement.OffsetRecid            = custTrans.RecId;
                custSettlement.OffsetCompany          = custTrans.DataAreaId;
                custSettlement.OffsetAccountNum       = custTrans.AccountNum;
                custSettlement.SettlementVoucher      = custTrans.Voucher;
                custSettlement.insert();
            
            
                if(!firstCustSettlementRecId)
                {
                    firstCustSettlementRecId = custSettlement.RecId;
                }
                // Replace the SettlementGroup with the RecId after the record is inserted
                custSettlement.selectForUpdate(true);
                // use the RecId of the first record as the settlement group.
                custSettlement.SettlementGroup = firstCustSettlementRecId;
                custSettlement.update();
            }
            ttscommit;

            // Advance to next LedgerJournalTrans record
            loop = _listLedgerJournalTrans.next(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        #OCCRetryCount
        LedgerJournalTable ledgerJournalTable;
        this.initLedgerJournalTable(ledgerJournalTable);

        // Store LedgerJournalTrans in a list.  Purpose is to initialize outside TTS
        // and insert all records at once inside TTS
        RecordSortedList listLedgerJournalTrans = this.ledgerJournalTransList();

        try
        {
            ttsbegin;
            ledgerJournalTable = this.insertJournalAndLines(ledgerJournalTable,
                                                            listLedgerJournalTrans);
                        
            this.insertedLedgerJournal(ledgerJournalTable);
            ledgerJournalId = ledgerJournalTable.JournalNum;
            listLedgerJournalTrans = this.onInsertedLedgerJournalTrans(listLedgerJournalTrans);

            LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
            this.initLedgerJournalCheckPost(ledgerJournalCheckPost);

            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            this.settle(listLedgerJournalTrans);

            this.updateDeductionsAfterPost(ledgerJournalTable.JournalNum);
            this.insertDeductionUpdateHistory(listLedgerJournalTrans);
            this.updateHistoryTableWithCustTransReference(custTransDeny);

            ttscommit;
            this.parmUpdateOccurred(true);
        }
        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of <c>RecordSortedList</c> filled with instances of <c>LedgerJournalTrans</c>, it is supposed to be inserted in the database within transaction afterwards.
    /// </summary>
    /// <returns>A sorted list of <c>LedgerJournalTrans</c> instances.</returns>
    protected RecordSortedList ledgerJournalTransList()
    {
        RecordSortedList listLedgerJournalTrans = this.initEmptyLedgerJournalTransRecordSortedList();

        LedgerJournalTrans ledgerJournalTrans;
        while select tmpDeductionParmDeny
        {
            TAMDeduction deduction = TAMDeduction::find(tmpDeductionParmDeny.DeductionID);
            // Initialize LedgerJournalTrans and add to list
            // Always deny full remaining amount
            this.initLedgerJournalTrans(ledgerJournalTrans,
                                        deduction,
                                        deduction.RemainAmountCur);
            listLedgerJournalTrans.ins(ledgerJournalTrans);
        }

        return listLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes properties of ledger journal check post instance.
    /// </summary>
    /// <param name = "_ledgerJournalCheckPost">Ledger journal check post instance.</param>
    protected void initLedgerJournalCheckPost(LedgerJournalCheckPost _ledgerJournalCheckPost)
    {
        _ledgerJournalCheckPost.parmBeQuiet(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsertedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls <c>insertedLedgerJournalTrans</c> event handler delegate for each of the records in the passed sorted list. 
    /// This is needed due to a behavior of a <c>RecordSortedList</c> on editing each records in a loop, user has to reread entries in order to get recent changes in another loop on the same list.
    /// </summary>
    /// <param name = "_listLedgerJournalTrans">A sorted list of <c>LedgerJournalTrans</c> instances.</param>
    /// <returns>A sorted list of <c>LedgerJournalTrans</c> instances, newly constructed after calling <c>insertedLedgerJournalTrans</c> event handler delegate for each of the records.</returns>
    private RecordSortedList onInsertedLedgerJournalTrans(RecordSortedList _listLedgerJournalTrans)
    {
        RecordSortedList listLedgerJournalTransUpdated = this.initEmptyLedgerJournalTransRecordSortedList();

        LedgerJournalTrans ledgerJournalTransRecord;

        boolean loop = _listLedgerJournalTrans.first(ledgerJournalTransRecord);
        while (loop)
        {
            this.insertedLedgerJournalTrans(ledgerJournalTransRecord);
            listLedgerJournalTransUpdated.ins(ledgerJournalTransRecord);
            loop = _listLedgerJournalTrans.next(ledgerJournalTransRecord);
        }

        return listLedgerJournalTransUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmptyLedgerJournalTransRecordSortedList</Name>
				<Source><![CDATA[
    private RecordSortedList initEmptyLedgerJournalTransRecordSortedList()
    {
        RecordSortedList listLedgerJournalTrans = new RecordSortedList(tableNum(LedgerJournalTrans));

        listLedgerJournalTrans.sortOrder(fieldNum(LedgerJournalTrans, LineNum));

        return listLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionsAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionsAfterPost(LedgerJournalId _ledgerJournalId)
    {
        TAMDeduction     deduction;

        // For each denied deduction
        while select tmpDeductionParmDeny
        {
            deduction = TAMDeduction::find(tmpDeductionParmDeny.DeductionID,
                                           true);

            ttsbegin;

            this.updateDeductionAfterPost(deduction, _ledgerJournalId);

            if (deduction.validateWrite())
            {
                deduction.update();
            }
            else
            {
                throw Exception::Error;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionAfterPost(TAMDeduction _deduction, LedgerJournalId _ledgerJournalId)
    {
        _deduction.tamDeductionDenyReason    = tmpDeductionParmDeny.DeductionDenyReason;
        _deduction.DenyJournalID             = _ledgerJournalId;
        _deduction.DenyAmountCur             = _deduction.RemainAmountCur;
        _deduction.RemainAmountCur           = 0;
        _deduction.tamDeductionStatus        = TAMDeductionStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        TAMDeduction    deduction;
        boolean         ret;
        ret = true;

        setPrefix("@MCR27632");

        while select tmpDeductionParmDeny
        {
            deduction = TAMDeduction::find(tmpDeductionParmDeny.DeductionID);

            if (!tmpDeductionParmDeny.DeductionDenyReason)
            {
                ret = checkFailed(strFmt("@MCR27610",
                                  tmpDeductionParmDeny.DeductionID));
            }
            switch (deduction.tamDeductionStatus)
            {
                case TAMDeductionStatus::Created:
                case TAMDeductionStatus::Closed:
                    ret = checkFailed(strFmt("@MCR27609",
                                             deduction.tamDeductionID,
                                             deduction.tamDeductionStatus,
                                             TAMDeductionStatus::Open));
                    break;
                case TAMDeductionStatus::Open:
                    break;
                default:
                    throw error(strFmt("@MCR10766",
                                       funcName()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a deny update object given temporary records that specify
    /// what to match.
    /// </summary>
    /// <param name="_tmpDeductionParmDeny">
    /// The temporary records used to build the match.
    /// </param>
    /// <returns>
    /// The initialized deduction update deny update.
    /// </returns>
    public static TAMDeductionUpdate_Deny construct(TmpTAMDeductionParmDeny _tmpDeductionParmDeny)
    {
        TAMDeductionUpdate_Deny tamDeductionUpdate_Deny;

        tamDeductionUpdate_Deny = new TAMDeductionUpdate_Deny(_tmpDeductionParmDeny);

        return tamDeductionUpdate_Deny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistoryTableWithCustTransReference</Name>
				<Source><![CDATA[
    public void updateHistoryTableWithCustTransReference(CustTrans custTransOrigin)
    {
        TAMDeductionUpdateHistory TAMDeductionUpdateHistory; 

        ttsbegin;

        select  forupdate TAMDeductionUpdateHistory
            where TAMDeductionUpdateHistory.LedgerJournalId == ledgerJournalId;

        TAMDeductionUpdateHistory.CustTransRecId = custTransOrigin.RecId;
        TAMDeductionUpdateHistory.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>