<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgMultiEmployee</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgMultiEmployee</c> class enables a worker for time registration.
/// </summary>
public class JmgMultiEmployee extends RunBaseBatch implements BatchRetryable
{
    Dialog                  dialog;
    DialogField             dfActive;
    DialogField             dfActDate;
    DialogField             dfCalcGrp;
    DialogField             dfApprGrp;
    DialogField             dfStdProf;
    DialogField             dfProfGrp;
    DialogField             dfNewBundle;
    DialogField             dfCategory;
    DialogField             dfUseTimeCard;
    DialogField             dfConfig;

    DialogField             dfStdPayAgr;
    DialogField             dfPayPeriod;
    DialogField             dfFlexAllowed;
    DialogField             dfFlexGrpID;

    DialogField             dfPromptForAction;
    DialogField             dfDefaultCalculationGroup;

    Args                    args;

    NoYes                   active;
    JmgDate                 actDate;
    JmgGroupCalcId          calcGrp;
    JmgGroupApproveId       apprGrp;
    JmgProfileId            profileId;
    JmgProfileGroupId       proGrpId;
    NoYes                   newBundle;
    ProjCategoryId          catId;
    NoYes                   timecard;
    JmgRegistrationSetupId  config;

    JmgPayAgreement         payAgr;
    ProjPeriodId            payPeriod;
    NoYes                   flexAllowed;
    JmgFlexGroupId          flexGrpId;

    JmgGroupCalcId          defaultCalculationGroup;
    NoYes                   promptForAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogGroup temp;
        DialogGroup uberGroup;

        dialog = super();

        temp = dialog.addGroup("@SYS2186");
        temp.columns(2);

        dfActive            = dialog.addField(enumstr(NoYes));
        dfActive.value(1);
        dfActive.label("@SYS24676");
        dfActive.helpText("@SYS38645");
        dfActDate           = dialog.addField(extendedtypestr(JmgDate));
        dfActDate.label("@SYS54971");
        dfActDate.helpText("@SYS38652");
        dfCalcGrp           = dialog.addField(extendedtypestr(JmgGroupCalcId));
        dfCalcGrp.control().mandatory(true);
        dfDefaultCalculationGroup = dialog.addField(extendedtypestr(JmgGroupCalcId), "@SYS322112");
        dfDefaultCalculationGroup.control().mandatory(true);
        dfApprGrp           = dialog.addField(extendedtypestr(JmgGroupApproveId));
        dfApprGrp.control().mandatory(true);
        dfStdProf           = dialog.addField(extendedtypestr(JmgProfileId));
        dfStdProf.label("@SYS38567");
        dfStdProf.helpText("@SYS38654");
        dfStdProf.control().mandatory(true);
        dfProfGrp           = dialog.addField(extendedtypestr(JmgProfileGroupId));
        dfProfGrp.control().mandatory(true);
        dfNewBundle         = dialog.addField(enumstr(NoYes));
        dfNewBundle.value(1);
        dfNewBundle.label("@SYS38509");//Stop Jobs
        dfNewBundle.helpText("@SYS38649");
        dfCategory          = dialog.addField(extendedtypestr(ProjCategoryId));
        dfUseTimeCard       = dialog.addField(enumstr(NoYes));
        dfUseTimeCard.value(0);
        dfUseTimeCard.label("@SYS39872");
        dfUseTimeCard.helpText("@SYS39873");
        dfConfig            = dialog.addField(extendedtypestr(JmgRegistrationSetupId));
        dfPromptForAction   = dialog.addField(enumstr(NoYes), "@SYS304383", "@SYS304384");

        uberGroup = dialog.addGroup();
        uberGroup.frameType(FormFrameType::None);
        uberGroup.columns(2);

        temp = dialog.addGroup("@SYS2694",uberGroup);
        temp.columns(1);

        dfStdPayAgr         = dialog.addField(extendedtypestr(JmgPayAgreement));
        dfPayPeriod         = dialog.addField(extendedtypestr(ProjPeriodId));

        temp = dialog.addGroup("@SYS38566",uberGroup);
        temp.columns(1);

        dfFlexAllowed       = dialog.addField(enumstr(NoYes));
        dfFlexAllowed.label("@SYS38505");
        dfFlexAllowed.helpText("@SYS38648");
        dfFlexGrpID         = dialog.addField(extendedtypestr(JmgFlexGroupId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values that are entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            //Mandatory: CalcGroup, ApproveGroup, Profile Group, Standard profile, Default calculation group
            active = dfActive.value();
            actDate = dfActDate.value();
            calcGrp = dfCalcGrp.value();
            if (!calcGrp)
                ret = checkFailed(strfmt("@SYS84753","@SYS38603"));
            apprGrp = dfApprGrp.value();
            if (!apprGrp)
                ret = checkFailed(strfmt("@SYS84753","@SYS38602"));
            profileId = dfStdProf.value();
            if (!profileId)
                ret = checkFailed(strfmt("@SYS84753","@SYS38567"));
            proGrpId = dfProfGrp.value();
            if (!proGrpId)
                ret = checkFailed(strfmt("@SYS84753","@SYS38522"));
            newBundle = dfNewBundle.value();
            catId = dfCategory.value();
            timecard = dfUseTimeCard.value();
            config = dfConfig.value();
            payAgr = dfStdPayAgr.value();
            payPeriod = dfPayPeriod.value();
            flexAllowed = dfFlexAllowed.value();
            flexGrpId = dfFlexGrpID.value();
            promptForAction = dfPromptForAction.value();
            defaultCalculationGroup = dfDefaultCalculationGroup.value();
            if (!defaultCalculationGroup)
                ret = checkFailed(strfmt("@SYS84753","@SYS322112"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    Args parmArgs(Args _args = null)
    {
        if (_args)
        {
            args = _args;
        }
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        JmgEmployee             empl;
        HcmWorker               hcmWorker;
        FormRun                 caller;
        FormDataSource          myData;
        int                     workerCount = 0;
        FormObjectSet           callerDataSource;

        caller = args.caller();

        if (caller.name() != formstr(HcmWorker)
            && caller.name() != formstr(HcmWorkerV2))
        {
            return;
        }

        myData = caller.dataSource(tablestr(HcmWorker));

        hcmWorker = myData.getFirst(1);

        if (!hcmWorker)
        {
            hcmWorker = args.record();
        }
        ttsbegin;
        while (hcmWorker)
        {
            if (!JmgEmployee::find(hcmWorker.RecId))
            {
                empl.initValue();
                empl.Worker                     = hcmWorker.RecId;
                empl.CalculateGroupId           = calcGrp;
                empl.Active                     = active;
                empl.ApproveGroupId             = apprGrp;
                empl.FlexProfile                = flexAllowed;
                empl.StopJobs                   = newBundle;
                empl.PayAgreement               = payAgr;
                empl.ProfileGroupId             = proGrpId;
                empl.ActiveFrom                 = actDate;
                empl.DefaultProfileId           = profileId;
                empl.ProjCategoryId             = catId;
                empl.ProjPeriodId               = payPeriod;
                empl.FlexGroup                  = flexGrpId;
                empl.UseTimecard                = timecard;
                empl.RegistrationSetupId        = config;
                empl.DefaultCalculateGroupId    = defaultCalculationGroup;
                empl.PromptForAction            = promptForAction;
                empl.insert();
                workerCount++;
            }
            else
            {
                info(strfmt("@SYS112265", hcmWorker.PersonnelNumber));
            }
            callerDataSource = FormDataUtil::getFormDataSource(hcmWorker);
            hcmWorker = myData.getNext();
        }
        ttscommit;
        if (callerDataSource)
        {
            callerDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS122887";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgMultiEmployee    multiEmpl;
        FormRun             myCaller;
        multiEmpl = new JmgMultiEmployee();

        myCaller = args.caller();

        if (myCaller.name() != formstr(HcmWorker)
            && myCaller.name() != formstr(HcmWorkerV2))
        {
            return;
        }

        multiEmpl.parmArgs(args);

        if (multiEmpl.prompt())
        {
            multiEmpl.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>