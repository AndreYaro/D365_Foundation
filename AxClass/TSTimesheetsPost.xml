<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetsPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TSTimesheetsPost</c> class journalizes the timesheet source documents.
/// </summary>
public class TsTimesheetsPost
{

    TSTimesheetTable        tsTimesheetTable;
    NumberSequenceCode      voucherSeriesCode;
    Voucher                 voucherNumber;

    // Dummy ProjJournalTrans record
    ProjJournalTrans        projJournalTrans;
    private static ProjOpsInstrumentationLogger logger = ProjOpsInstrumentationLogger::createLogger(classStr(TsTimesheetsPost));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>TSTimesheetsPost</c> class.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record that is posted to the ledger.
    /// </param>
    public void new(TSTimesheetTable _tsTimesheetTable)
    {
        tsTimesheetTable = _tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the <c>TSTimesheetTable</c> record.
    /// </summary>
    /// <returns>
    /// true if the <c>TSTimesheetTable</c> record is posted; otherwise, false.
    /// </returns>
    protected boolean postSourceDocument()
    {
        ProjOpsBudgetingInstrumentationActivites activities = ProjOpsBudgetingInstrumentationActivites::construct(logger);
        using (SysInstrumentationActivityContext activityContext = activities.instrumentTimesheet(ProjOpsBudgetingInstrumentationActivites::PostSourceDoc, this.tsTimesheetTable))
        {
                    
            NumberSeq numberSeq;
            #OCCRetryCount

            setPrefix(strFmt("@Timesheet:Timesheet_Posting", tsTimesheetTable.TimesheetNbr));

            TSTimesheetInstrumentationLogger postingLogger = TSTimesheetInstrumentationLogger::createLogger(classStr(TSTimesheetsPost));
            TSTimesheetInstrumentationActivities postingActivities = TSTimesheetInstrumentationActivities::construct(postingLogger);
            TSTimesheetInstrumentationLoggerProperties properties = postingLogger.properties();
                
            using (var postingBatchContext = postingActivities.postTimesheetDocument())
            {
                if (!TSTimesheetsPost::validatePost(tsTimesheetTable))
                {
                    postingLogger.logWarning('Timesheet posting validation failed');
                    return false;
                }

                try
                {
                    ttsbegin;
                    TSTimesheetsPost::processTimesheetsResourceRateCost(tsTimesheetTable);

                    voucherSeriesCode = ProjParameters::numRefTimesheetVoucher().numberSequenceTable().NumberSequence;
                    numberSeq = NumberSeq::newGetVoucherFromCode(voucherSeriesCode, NumberSeqScopeFactory::createDataAreaScope(), true);
                    voucherNumber = numberSeq.voucher();
                    postingLogger.logInformation(strFmt('Voucher number generated, voucher: %1 from voucher code: %2', voucherNumber, voucherSeriesCode));

                    this.updateTimesheetTransVoucher();

                    numberSeq.used();
                    SourceDocumentProcessorFacade::submitSourceDocumentImplementation(tsTimesheetTable, false, SourceDocumentAccountingStatus::Completed);

                    // Process no/never ledger transactions
                    TSTimesheetsPost::processNoNeverLedgerTrx(tsTimesheetTable, voucherSeriesCode);

                    // Process Indirect Cost Component postings
                    TSTimesheetsPost::processIndirectComponentTrans(tsTimesheetTable);

                    TSTimesheetsPost::processIntercompanyLines(tsTimesheetTable);

                    // Process worker period posting details
                    TSTimesheetsPost::processWorkerPeriod(tsTimesheetTable);

                    this.updateTimesheetStatus();

                    DataAreaId currentDataAreaId = curext();
                    TSTimesheetLine tsTimesheetLine;
                    while select ProjectDataAreaId from tsTimesheetLine
						group by ProjectDataAreaId
							where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
								&& tsTimesheetLine.ProjectDataAreaId != currentDataAreaId
                    {
                        changecompany(tsTimesheetLine.ProjectDataAreaId)
                        {
                            TransactionLog::create(TransactionLogType::Timesheet, strFmt("%1, %2", tsTimesheetTable.TimesheetNbr, tsTimesheetTable.resourceName()));
                        }
                    }

                    TransactionLog::create(TransactionLogType::Timesheet, strFmt("%1, %2", tsTimesheetTable.TimesheetNbr, tsTimesheetTable.resourceName()));
                    info(strFmt("@SYS328581", tsTimesheetTable.TimesheetNbr, voucherNumber));
                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    NumberSeq::release(voucherSeriesCode, voucherNumber, NumberSeqScopeFactory::createDataAreaScope());

                    var currentRetryCount = xSession::currentRetryCount();

                    if (currentRetryCount < #RetryNum)
                    {
                        TsTimesheetsPost::delayRetry(currentRetryCount);
                        retry;
                    }

                    postingLogger.logError(strFmt('Unable to recover from deadlock after %1 retries', currentRetryCount));
                    throw Exception::Deadlock;
                }
                catch (Exception::UpdateConflict)
                {
                    var currentRetryCount = xSession::currentRetryCount();

                    if (currentRetryCount < #RetryNum)
                    {
                        TSTimesheetsPost::delayRetry(currentRetryCount);
                        retry;
                    }

                    postingLogger.logError(strFmt('Unable to recover from deadlock after %1 retries', currentRetryCount));
                    throw Exception::UpdateConflictNotRecovered;
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    NumberSeq::release(voucherSeriesCode, voucherNumber, NumberSeqScopeFactory::createDataAreaScope());

                    if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        postingLogger.logError(strFmt('Unable to recover from TransientSqlConnectionError after %1 retries',  xSession::currentRetryCount()));
                        throw Exception::TransientSqlConnectionError;
                    }
                }
                catch
                {
                    NumberSeq::release(voucherSeriesCode, voucherNumber, NumberSeqScopeFactory::createDataAreaScope());
                }
            }

            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the approval status of the document.
    /// </summary>
    protected void updateTimesheetStatus()
    {
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetTrans tsTrans;

        tsTimesheetTable.selectForUpdate(true);
        tsTimesheetTable.ApprovalStatus = TSAppStatus::Ledger;
        tsTimesheetTable.doUpdate();

        tsTimesheetLine.skipDataMethods(true);
        tsTrans.skipDataMethods(true);

        update_recordset tsTimesheetLine setting ApprovalStatus = TSAppStatus::Ledger
            where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr;

        update_recordset tsTrans setting ApprovalStatus = TSAppStatus::Ledger
            where tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetTransVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the voucher of the related <c>TSTimesheetTrans</c> record.
    /// </summary>
    protected void updateTimesheetTransVoucher()
    {
        TSTimesheetTrans tsTrans;

        tsTrans.skipDataMethods(true);

        update_recordset tsTrans setting Voucher = voucherNumber
            where tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDummyProjJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ProjJournalTrans</c> record that will be used in indirect cost component posting value.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <param name="_tsTimesheetTrans">
    /// A <c>TSTimesheetTrans</c> record.
    /// </param>
    /// <returns>
    /// A <c>ProjJournalTrans</c> record.
    /// </returns>
    public static ProjJournalTrans createDummyProjJournalTrans(TSTimesheetLine _tsTimesheetLine, TSTimesheetTrans _tsTimesheetTrans)
    {
        ProjJournalTrans projJournalTrans;

        if (_tsTimesheetLine.ProjectDataAreaId == curext())
        {
            projJournalTrans.ProjId = _tsTimesheetLine.ProjId;
        }

        projJournalTrans.ActivityNumber = _tsTimesheetLine.ActivityNumber;
        projJournalTrans.CategoryId     = _tsTimesheetLine.CategoryId;
        projJournalTrans.CostPrice      = _tsTimesheetTrans.CostPrice;
        projJournalTrans.TransId        = _tsTimesheetTrans.TransId;
        projJournalTrans.ProjTransDate  = _tsTimesheetTrans.ProjTransDate;
        projJournalTrans.Resource       = _tsTimesheetLine.Resource;
        projJournalTrans.setResourceCategory();
        projJournalTrans.CurrencyId     = _tsTimesheetLine.CurrencyCode;
        projJournalTrans.DefaultDimension= _tsTimesheetLine.DefaultDimension;

        projJournalTrans.Qty             = _tsTimesheetTrans.Hours;
        projJournalTrans.LinePropertyId  = _tsTimesheetLine.LinePropertyId;
        projJournalTrans.TransDate       = _tsTimesheetTrans.TransDate;
        projJournalTrans.TaxGroupId      = _tsTimesheetLine.TaxGroupId;
        projJournalTrans.TaxItemGroupId  = _tsTimesheetLine.TaxItemGroup;
        projJournalTrans.psaIndirectComponentGroup = _tsTimesheetTrans.psaIndirectComponentGroup;
        projJournalTrans.SalesPrice      = _tsTimesheetTrans.SalesPrice;
        projJournalTrans.Txt             = _tsTimesheetTrans.ExtComment;

        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource formDataSource;
        TSTimesheetTable timesheet;

        if (_args.dataset() && _args.dataset() != tableNum(TSTimesheetTable))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        formDataSource = FormDataUtil::getFormDataSource(_args.record());
        timesheet = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor();

        TSTimesheetInstrumentationLogger postingLogger = TSTimesheetInstrumentationLogger::createLogger('TSTimesheetPostManual');
        TSTimesheetInstrumentationActivities postingActivities = TSTimesheetInstrumentationActivities::construct(postingLogger);
        TSTimesheetInstrumentationLoggerProperties properties = postingLogger.properties();

        using (var manualTimesheetPostContext = postingActivities.postTimesheets())
        {
            int countProcessedTimesheets = 0;

            while (timesheet)
            {
                TSTimesheetsPost::post(timesheet);
                countProcessedTimesheets++;
                timesheet = formDataSource.getNext();
            }

            postingActivities.addCustomProperty(manualTimesheetPostContext, 
                                                properties.documentCount(TSTimesheetInstrumentationLoggerProperties::CountTimesheetsProcessed,
                                                                          countProcessedTimesheets)
                                               );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a <c>TSTimesheetTable</c> record.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// The <c>TSTimesheetTable</c> record.
    /// </param>
    public static void post(TSTimesheetTable _tsTimesheetTable)
    {
        ProjOpsBudgetingInstrumentationActivites activities = ProjOpsBudgetingInstrumentationActivites::construct(logger);
        using (SysInstrumentationActivityContext activityContext = activities.instrumentTimesheet(ProjOpsBudgetingInstrumentationActivites::PostTS, _tsTimesheetTable))
        {
			TSTimesheetsPost tsTimesheetsPost = new TSTimesheetsPost(_tsTimesheetTable);
			activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::SourceDocumentPostedProperty, any2Str(tsTimesheetsPost.postSourceDocument()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndirectCostComponentLedgerUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger updates for indirect cost components.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <param name="_tsTimesheetTrans">
    /// A <c>TSTimesheetTrans</c> record.
    /// </param>
    /// <param name="_voucherSeriesCode">
    /// A <c>NumberSequenceCode</c> value that specifies the voucher series code that is used to post hour
    /// journals.
    /// </param>
    /// <param name="_isIntercompany">
    /// A Boolean value that indicates whether the transaction is intercompany; optional.
    /// </param>
    /// <param name="_dueToCompany">
    /// The record ID of the lending legal entity; optional.
    /// </param>
    public static void postIndirectCostComponentLedgerUpdates(TSTimesheetLine _tsTimesheetLine,
                                                       TSTimesheetTrans _tsTimesheetTrans,
                                                       NumberSequenceCode _voucherSeriesCode,
                                                       boolean _isIntercompany = false,
                                                       RefRecId _dueToCompany = CompanyInfo::current())
    {
        ProjPost                                projPost;
        PSAProjPostEmplIndirectJournal          psaProjPostEmplIndirectJournal;
        LedgerVoucher                           ledgerVoucher;
        LedgerVoucherObject                     ledgerVoucherObject;
        ProjJournalTrans    projJournalTrans =  TSTimesheetsPost::createDummyProjJournalTrans(_tsTimesheetLine, _tsTimesheetTrans);
        AccountingDistribution                  accountingDistribution;
        ProjParameters projParameters        =  ProjParameters::find();
        AccountingDate                          accountingDate;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Project, _voucherSeriesCode);

        // If the accounting date can be updated to next open fiscal period
        if (projParameters.AllowDateCorrection)
        {
            // If accounting date is updateable and the fiscal period of the current transaction is closed,
            // the accounting distribution record of timesheet transaction is already updated with next open fiscal period date in the SourceDocumentLineState class
            select firstonly AccountingDate from accountingDistribution
                      where accountingDistribution.SourceDocumentLine == _tsTimesheetTrans.SourceDocumentLine;

            accountingDate =  accountingDistribution.AccountingDate;
        }
        else
        {
            accountingDate = _tsTimesheetTrans.ProjTransDate;
        }

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(NumberSeq::newGetVoucherFromCode(_voucherSeriesCode, NumberSeqScopeFactory::createDataAreaScope(), true).voucher(),
                                                accountingDate,
                                                SysModule::Project,
                                                LedgerTransType::Project,
                                                NoYes::No);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (projJournalTrans.psaIndirectComponentGroup && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projPost = ProjPost::psaNewCreateProjIndirectCostAndRevenue(projJournalTrans, ledgerVoucher);

            if (_isIntercompany)
            {
                psaProjPostEmplIndirectJournal = projPost as PSAProjPostEmplIndirectJournal;
                psaProjPostEmplIndirectJournal.setIntercompany();
            }

            //use this funding source to split indirect costs
            projPost.createFundingAllocationListBasedOnTrx(ProjTransType::Hour);

            projPost.postTrans();

            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNoNeverLedgerTrx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project ledger updates for no or never ledger transactions.
    /// </summary>
    /// <param name="_tsTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <param name="_tsTimesheetTrans">
    /// A <c>TSTimesheetTrans</c> record.
    /// </param>
    /// <param name="_voucherSeriesCode">
    /// A <c>NumberSequenceCode</c> value that specifies the voucher series code that is used to post hour
    /// journals.
    /// </param>
    public static void postNoNeverLedgerTrx(TSTimesheetLine _tsTimesheetLine,
                                            TSTimesheetTrans _tsTimesheetTrans,
                                            NumberSequenceCode _voucherSeriesCode)
    {
        ProjJournalTrans projJournalTrans = TSTimesheetsPost::createDummyProjJournalTrans(_tsTimesheetLine, _tsTimesheetTrans);
        
        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Project, _voucherSeriesCode);
        AccountingDate  accountingDate = TSTimesheetsPost::getAccountingDate(_tsTimesheetTrans);
        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(NumberSeq::newGetVoucherFromCode(_voucherSeriesCode, NumberSeqScopeFactory::createDataAreaScope(), true).voucher(),
                                                accountingDate,
                                                SysModule::Project,
                                                LedgerTransType::Project,
                                                NoYes::No);

        ledgerVoucher.addVoucher(ledgerVoucherObject);
        ProjPost projPost = ProjPost::newCreateProjTransAndLedger(projJournalTrans, ledgerVoucher);
        projPost.parmLedgerOrigin(ProjOrigin::Timesheet);
        projPost.postTrans();

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns accounting date based on the condition.
    /// </summary>
    /// <param name = "_tsTimesheetTrans">
    /// A <c>TSTimesheetTrans</c> record.
    /// </param>
    /// <returns>
    /// Return accounting date.
    /// </returns>
    protected static TransDate getAccountingDate(TSTimesheetTrans _tsTimesheetTrans)
    {
        ProjParameters projParameters = ProjParameters::find();
        AccountingDate accountingDate;

        // If the accounting date can be updated to next open fiscal period
        if (projParameters.AllowDateCorrection)
        {
            AccountingDistribution accountingDistribution;

            // If accounting date is updateable and the fiscal period of the current transaction is closed,
            // the accounting distribution record of timesheet transaction is already updated with next open fiscal period date in the SourceDocumentLineState class
            select firstonly AccountingDate from accountingDistribution
                      where accountingDistribution.SourceDocumentLine == _tsTimesheetTrans.SourceDocumentLine;

            accountingDate = accountingDistribution.AccountingDate;
        }
        else
        {
            accountingDate = _tsTimesheetTrans.ProjTransDate;
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkerPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes posting details on the worker period of the current timesheet transaction.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    public static void processWorkerPeriod(TsTimesheetTable _tsTimesheetTable)
    {
        ProjPeriodEmpl          projPeriodEmpl;

        // If the worker of the timesheet has a period code setup then update the period status
        if (ResourceSetup::find(_tsTimesheetTable.Resource).Period)
        {
            // Get the worker period of the timesheet submitted worker.
            projPeriodEmpl = ProjPeriodEmpl::find(_tsTimesheetTable.Resource, _tsTimesheetTable.PeriodFrom);

            if (projPeriodEmpl.periodTo() == _tsTimesheetTable.PeriodTo)
            {
                // Set the worker period record to posted on the current date, which is when this transaction is being posted
                ProjPeriodEmpl::setPosted(_tsTimesheetTable.Resource, projPeriodEmpl.PeriodFrom, DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectComponentGroupId</Name>
				<Source><![CDATA[
    protected static PSAIndirectComponentGroupId getIndirectComponentGroupId(TSTimesheetLine _tsTimesheetLine, TSTimesheetTrans _tsTimesheetTrans)
    {
        PSAComponentGroupAssignment psaComponentGroupAssignment = PSAComponentGroupAssignment::findAssignment(
										'',
                                        _tsTimesheetLine.Resource,
                                        _tsTimesheetLine.CategoryId,
                                        _tsTimesheetTrans.TransDate);

        return psaComponentGroupAssignment.IndirectComponentGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIndirectComponentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all <c>TSTimesheetTrans</c> records that have indirect cost components.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    public static void processIndirectComponentTrans(TSTimesheetTable _tsTimesheetTable)
    {
        TSTimesheetLine     tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans    tsTimesheetTrans;
        NumberSequenceCode  voucherSeriesCode;

        while select forupdate tsTimesheetTrans
            where tsTimesheetTrans.Voucher   != ''
            join RecId from tsTimesheetLineWeek
                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
            join tsTimesheetLine
                where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId &&
                      tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr &&
                      (tsTimesheetTrans.psaIndirectComponentGroup != '' ||
                       tsTimesheetLine.ProjectDataAreaId != curext())
        {

            if (tsTimesheetTrans.psaIndirectComponentGroup)
            {
                voucherSeriesCode = ProjParameters::numRefProjJournalId().numberSequenceTable().NumberSequence;
                TSTimesheetsPost::postIndirectCostComponentLedgerUpdates(tsTimesheetLine,
                                                                         tsTimesheetTrans,
                                                                         voucherSeriesCode,
                                                                         tsTimesheetLine.ProjectDataAreaId != curext());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIntercompanyLines</Name>
				<Source><![CDATA[
    private static void processIntercompanyLines(TSTimesheetTable _timesheet)
    {
        TSTimesheetLine                         tsTimesheetLine;
        TSTimesheetLineWeek                     tsTimesheetLineWeek;
        TSTimesheetTrans                        tsTimesheetTrans;
        ProjectRevenueHeader                    projectRevenueHeader;
        ProjectRevenueLine                      projectRevenueLine;
        ProjIntercompanyParameters              intercompanyParams;
        AccountingDistribution                  accountingDistribution;

        ttsbegin;
        while select tsTimesheetTrans
            join tsTimesheetLineWeek
            where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
            join tsTimesheetLine
            where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                && tsTimesheetLine.TimesheetNbr == _timesheet.TimesheetNbr
                && tsTimesheetLine.ProjectDataAreaId != curext()
            exists join intercompanyParams
            where intercompanyParams.BorrowingLegalEntity == tsTimesheetLine.ProjectDataAreaId
                && intercompanyParams.wipRevenue == true
        {
            ProjIntercompanyInvoiceOrigTimesheet timesheet = ProjIntercompanyInvoiceOrigTimesheet::construct(tsTimesheetTrans, tsTimesheetLineWeek, tsTimesheetLine);

            if (timesheet.getAmountCur() != 0)
            {
                select firstonly forupdate projectRevenueHeader
                     where projectRevenueHeader.ReferenceSourceDocumentHeader == _timesheet.SourceDocumentHeader;
                
                projectRevenueHeader.ReferenceSourceDocumentHeader = _timesheet.SourceDocumentHeader;
                projectRevenueHeader.IsIntercompany = true;
                projectRevenueHeader.write();

                select firstonly AccountingDate from accountingDistribution
                    where accountingDistribution.SourceDocumentHeader == _timesheet.SourceDocumentHeader
                        && accountingDistribution.SourceDocumentLine ==  tsTimesheetTrans.SourceDocumentLine;

                projectRevenueLine.clear();
                projectRevenueLine.ProjectRevenueHeader         = projectRevenueHeader.RecId;
                projectRevenueLine.RefTableId                   = tsTimesheetTrans.TableId;
                projectRevenueLine.RefRecId                     = tsTimesheetTrans.RecId;
                projectRevenueLine.Currency                     = Currency::find(timesheet.getCurrencyCode()).RecId;
                projectRevenueLine.AccountingLegalEntity        = CompanyInfo::current();
                projectRevenueLine.TransactionCurrencyAmount    = timesheet.getAmountCur();
                projectRevenueLine.AccountingDate               = accountingDistribution.AccountingDate;
                projectRevenueLine.insert();
            }
        }

        if (projectRevenueHeader.RecId != 0)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentImplementation(projectRevenueHeader, false, SourceDocumentAccountingStatus::Completed);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNoNeverLedgerTrx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all <c>TSTimesheetTrans</c> records that are marked as no or never ledger.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    /// <param name="_voucherSeriesCode">
    /// A <c>NumberSequenceCode</c> value that specifies the voucher series code that is used to post hour
    /// journals.
    /// </param>
    public static void processNoNeverLedgerTrx(TSTimesheetTable _tsTimesheetTable, NumberSequenceCode _voucherSeriesCode)
    {
        TSTimesheetLine     tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans    tsTimesheetTrans;
        ProjTable           projTable;
        ProjLedgerStatus    emplTransCost;

        while select tsTimesheetTrans join RecId from tsTimesheetLineWeek
            where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
              join tsTimesheetLine
                where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId &&
                        tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
              join projTable
                where projTable.ProjId == tsTimesheetLine.ProjId &&
                      projTable.DataAreaId == tsTimesheetLine.ProjectDataAreaId              
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
                && !projTable.ProjInvoiceProjId)
            {
                emplTransCost =  ProjLedgerStatus::Operations;
            }
            else
            {
                emplTransCost =  ProjRevRecHelper::getEmplLedgerStatus(projTable);
            }

            if (emplTransCost == ProjLedgerStatus::Never || emplTransCost == ProjLedgerStatus::None)
            {
                // delete commitments manually for Never/No Ledger since they will not be deleted on journalization
                ProjectCommitmentFacade::deleteProjectCommitments(tsTimesheetTrans.SourceDocumentLine);
                ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine, ProjFundingLimitTrackingAction::Release);
                TSTimesheetsPost::postNoNeverLedgerTrx(tsTimesheetLine, tsTimesheetTrans, _voucherSeriesCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the source document for posting errors.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    /// <returns>
    /// true if the document can be posted; otherwise, false.
    /// </returns>
    public static boolean validatePost(TSTimesheetTable _tsTimesheetTable)
    {
        boolean retVal = _tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved && _tsTimesheetTable.checkProjId();
        if (retVal)
        {
            // transition the lines to fully distributed, if this is not possible the line is not ready to be submitted
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_tsTimesheetTable, SourceDocumentLineAccountingStatus::FullyDistributed);
                   
            TSTimesheetLine tsTimesheetLine;
            ProjTable projTable;
            TSTimesheetLineWeek tsTimesheetLineWeek;
            TsTimesheetTrans TSTimesheetTrans;

            while select tsTimesheetTrans
                join tsTimesheetLineWeek
                    where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                        join tsTimesheetLine
                            where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                                && tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
                                    join projTable
                                        where projTable.ProjId == tsTimesheetLine.ProjId
                                            && projTable.DataAreaId == tsTimesheetLine.ProjectDataAreaId
            {
                ProjLedgerStatus emplTransCost = ProjRevRecHelper::getEmplLedgerStatus(projTable);
                if (emplTransCost != ProjLedgerStatus::Never && emplTransCost != ProjLedgerStatus::None)
                {
                    SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(TSTimesheetTrans.SourceDocumentLine);
                    retVal = retVal && SourceDocumentProvider::areSourceDocLineAccDistAccountValid(sourceDocumentLine, true, true);
                    
                    if (!retVal)
                    {
                        break;
                    }
                }
            }
        }
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTimesheetsResourceRateCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies cost based on ELR.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>tsTimesheetTable</c> instance.
    /// </param>
    protected static void processTimesheetsResourceRateCost(TSTimesheetTable _tsTimesheetTable)
    {
        TSTimesheetTrans                tsTimesheetTrans;
        TSTimesheetLineWeek             tsTimesheetLineWeek;
        TSTimesheetLine                 tsTimesheetLine;
        AmountCur                       newCostPerHour;
        AmountCur                       elrCostPerHourSetup;
        CurrencyCode                    currencyCode = CompanyInfoHelper::standardCurrency();

        elrCostPerHourSetup = ProjHourCostPrice::findResourceRate(_tsTimesheetTable.Resource, _tsTimesheetTable.PeriodFrom).CostPrice;

        if (elrCostPerHourSetup == 0)
        {
            return;
        }

        // hours from timesheet
        select sum(Hours) from tsTimesheetTrans
            exists join tsTimesheetLine where
                tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr &&
                tsTimesheetLine.Resource == _tsTimesheetTable.Resource
            exists join tsTimesheetLineWeek where
                tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId &&
                tsTimesheetLineWeek.TimesheetNbr == _tsTimesheetTable.TimesheetNbr &&
                tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId;

        newCostPerHour = ProjElr::newCostPerHour(
                                    _tsTimesheetTable.PeriodFrom,
                                    _tsTimesheetTable.PeriodTo,
                                    _tsTimesheetTable.Resource,
                                    tsTimesheetTrans.Hours);

        // Update timesheet rows based on new cost
        while select forupdate tsTimesheetTrans
            where tsTimesheetTrans.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
            join RecId from tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            join LinePropertyId, ProjId, CategoryId, CurrencyCode from tsTimesheetLine
                where tsTimesheetLine.RecId == tsTimesheetLineWeek.tsTimesheetLine
        {
            tsTimesheetTrans.CostPrice  = newCostPerHour;

            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                                        tsTimesheetLine.ProjId,
                                        _tsTimesheetTable.Resource,
                                        tsTimesheetLine.CategoryId,
                                        tsTimesheetLine.LinePropertyId,
                                        newCostPerHour,
                                        tsTimesheetLine.CurrencyCode ? tsTimesheetLine.CurrencyCode : currencyCode,
                                        _tsTimesheetTable.PeriodFrom,
                                        '',
                                        '',
                                        '');
            
            AmountCur  newSalePerHour;
            boolean    priceFound;

            [newSalePerHour, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false, false);

            if (priceFound)
            {
                tsTimesheetTrans.SalesPrice = newSalePerHour;
            }

            if (tsTimesheetLine.LinePropertyId)
            {
                tsTimesheetTrans.CostPrice = CurrencyExchangeHelper::price(tsTimesheetTrans.CostPrice * (1 + ProjLineProperty::find(tsTimesheetLine.LinePropertyId).CostMarkup / 100));
            }

            tsTimesheetTrans.update();
        }
        SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_tsTimesheetTable, SourceDocumentLineAccountingStatus::FullyDistributed);

        // Adjust existing rows in the system based on new cost
        ProjElr::adjustHourTrans(
                        _tsTimesheetTable.PeriodFrom,
                        _tsTimesheetTable.PeriodTo,
                        _tsTimesheetTable.Resource,
                        newCostPerHour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyOnGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the quantity of the general journal account entry
    /// with the timesheet total hours.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// A <c>TSTimesheetTable</c> record.
    /// </param>
    [SysObsolete('This method is made obselete as this code is shifted to insertedGeneralJournalAccountEntry method in TimeSheetSubledgerTransferCommandExtension Class.', false, 30\06\2020)]
    public static void updateQtyOnGeneralJournalAccountEntry(TsTimesheetTable  _tsTimesheetTable)
    {
        if (_tsTimesheetTable)
        {
            ttsBegin;

            GeneralJournalAccountEntry      generalJournalAccountEntry;
            SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
            SubledgerJournalEntry           subledgerJournalEntry;
            AccountingEvent                 accountingEvent;

            update_recordSet generalJournalAccountEntry
                setting Quantity = _tsTimesheetTable.totalHours()
                join subledgerJournalAccountEntry
                    where  subledgerJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                exists join subledgerJournalEntry
                    where  subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                exists join accountingEvent
                    where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId &&
                            accountingEvent.SourceDocumentHeader == _tsTimesheetTable.SourceDocumentHeader;
            ttsCommit;
        }

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayRetry</Name>
				<Source><![CDATA[
    public static void delayRetry(int _retryCount)
    {
        var delay = 5000 * power(2, min(_retryCount, 5));
        sleep(min(60 * 1000, delay));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>