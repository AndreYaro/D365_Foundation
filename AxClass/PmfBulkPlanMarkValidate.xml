<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBulkPlanMarkValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfBulkPlanMarkValidate</c> class collects the planned orders for bulk and pack items to be firmed.
/// </summary>
class PmfBulkPlanMarkValidate extends ReqTransPoMark
{
    ReqTrans                    reqTrans;
    Map                         bulkItems;
    Map                         packItems;
    TmpPmfConsolidatedOrder     tmpConsOrd;
    TmpPmfConsolidatedBulk      tmpConsBulk;
    TmpPmfConsolidatedPack      tmpConsPack;
    container                   orders;

    NumberSeq                   numberSeqConsOrderId;

    boolean                     dlvDateForBOMFlightIsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class can be executed in batch mode.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PRO2460";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForBulkOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only bulk orders are selected.
    /// </summary>
    /// <returns>
    /// true if the selection contains only bulk orders; otherwise, false.
    /// </returns>
    protected boolean checkForBulkOnly()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqIssue;
        ReqTrans    reqPlanBatchOrder;
        ReqPO       reqPOBatchOrder;
        BOMVersion  bomVersion;

        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            if (reqTrans.Direction == InventDirection::Receipt
                && reqTrans.RefType == ReqRefType::PmfPlannedProdBatch
                && PmfBulkItemConv::isBulkorPack(reqTrans.ItemId))
            {
                if (packItems.exists(reqTrans.RecId))
                {
                    return false;
                }

                select firstOnly RecId
                    from reqTransCov
                    where reqTransCov.ReceiptRecId == reqTrans.RecId
                exists join reqIssue
                    where reqIssue.RecId    == reqTransCov.IssueRecId
                       && reqIssue.RefType  != ReqRefType::PmfFormulaLine;
                if (reqTransCov)
                {
                    return false;
                }

                while select IssueRecId
                    from reqTransCov
                    where reqTransCov.ReceiptRecId == reqTrans.RecId
                    join RefId, PlanVersion
                        from reqIssue
                        where reqIssue.RecId == reqTransCov.IssueRecId
                {
                    if (dlvDateForBOMFlightIsEnabled)
                    {
                        select firstonly RecId, ItemId, ItemBomId, ReqDate, Qty, CovQty
                            from reqPlanBatchOrder
                            where  reqPlanBatchOrder.RefId          == reqIssue.RefId
                                && reqPlanBatchOrder.PlanVersion    == reqIssue.PlanVersion
                                && reqPlanBatchOrder.RefType        == ReqRefType::PmfPlannedProdBatch
                        join reqPOBatchOrder
                            where  reqPOBatchOrder.RefId                      == reqPlanBatchOrder.RefId
                                && reqPOBatchOrder.RefType                    == reqPlanBatchOrder.RefType
                                && reqPOBatchOrder.PlanVersion                == reqPlanBatchOrder.PlanVersion;
                    }
                    else
                    {
                        select firstonly RecId, ItemId, ItemBomId, ReqDate, Qty, CovQty
                            from reqPlanBatchOrder
                            where  reqPlanBatchOrder.RefId          == reqIssue.RefId
                                && reqPlanBatchOrder.PlanVersion    == reqIssue.PlanVersion
                                && reqPlanBatchOrder.RefType        == ReqRefType::PmfPlannedProdBatch;
                    }

                    if (reqPlanBatchOrder.RecId)
                    {
                        TransDate bomDate = dlvDateForBOMFlightIsEnabled ? reqPOBatchOrder.getBOMDate() : reqPlanBatchOrder.ReqDate;

                        bomVersion = BOMVersion::findApproved(
                            reqPlanBatchOrder.ItemId,
                            reqPlanBatchOrder.ItemBomId,
                            true,
                            bomDate,
                            bomDate,
                            reqPlanBatchOrder.Qty);
                        if (bomVersion.PmfBulkParent == reqTrans.ItemId)
                        {
                            bulkItems.insert(reqTrans.RecId, reqTrans.CovQty);
                            packItems.insert(
                                reqPlanBatchOrder.RecId,
                                reqPlanBatchOrder.CovQty);
                        }
                    }
                }
            }
            else
            {
                return false;
            }
            mi.next();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForExactMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the bulk and pack order selection is complete.
    /// </summary>
    /// <returns>
    /// true if the bulk and pack order selection is complete; otherwise, false.
    /// </returns>
    protected boolean checkForExactMatch()
    {
        container allOrders;
        container bulk, pack;
        int i,j,pos;

        allOrders = connull();
        for (i=1;i<=conlen(orders); i++)
        {
            [bulk, pack] = conpeek(orders,i);
            for (j=1;j<=conlen(bulk); j++)
            {
                allOrders=conins(allOrders,conlen(allOrders)+1,conpeek(bulk,j));
            }
            for (j=1;j<=conlen(pack); j++)
            {
                allOrders=conins(allOrders,conlen(allOrders)+1,conpeek(pack,j));
            }
        }
        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            pos = confind(allOrders,reqTrans.RecId);
            if (!pos)
            {
                return false;
            }
            else
            {
                allOrders = condel(allOrders,pos,1);
            }
            mi.next();
        }
        if (conlen(allOrders) > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForPackOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only pack orders are selected.
    /// </summary>
    /// <returns>
    /// true if the selection contains only pack orders; otherwise, false.
    /// </returns>
    protected boolean checkForPackOnly()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqIssue;
        BOMVersion  bomVersion;

        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            if (reqTrans.Direction == InventDirection::Receipt
                && reqTrans.RefType   == ReqRefType::PmfPlannedProdBatch
                && PmfBulkItemConv::isBulkorPack(reqTrans.ItemId))
            {
                TransDate bomDate = dlvDateForBOMFlightIsEnabled ? reqTrans.reqPo().getBOMDate() : reqTrans.ReqDate;

                bomVersion = BOMVersion::findApproved(
                    reqTrans.ItemId,
                    reqTrans.ItemBomId,
                    true,
                    bomDate,
                    bomDate,
                    reqTrans.Qty);
                if (!bomVersion || !bomVersion.PmfBulkParent)
                {
                    return false;
                }

                if (bulkItems.exists(reqTrans.RecId))
                {
                    return false;
                }
                while select IssueRecId
                    from reqTransCov
                    where reqTransCov.ReceiptRecId == reqTrans.RecId
                    join RefType
                        from reqIssue
                        where reqIssue.RecId == reqTransCov.IssueRecId
                {
                    if (reqIssue.RefType == ReqRefType::PmfFormulaLine)
                    {
                        return false;
                    }
                    else
                    {
                        //We're a receipt but not issued as formula line
                        if (reqIssue.RefType == ReqRefType::ProdLine)
                        {
                            return false;
                        }
                        else
                        {
                            packItems.insert(reqTrans.RecId, reqTrans.CovQty);
                        }
                    }
                }
            }
            else
            {
                return false;
            }
            mi.next();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges consolidated orders if they contain common planned orders.
    /// </summary>
    protected void combineOrders()
    {
        container   bulk1,bulk2, pack1,pack2;
        int         i,k;

        boolean isOverlap(container _con1, container _con2, boolean _isBulk)
        {
            int j,l;
            RecId    recId1;
            ReqTrans bulkTrans1, bulkTrans2;

            if (!_isBulk)
            {
                for (j=1;j<=conlen(_con1); j++)
                {
                    recId1 = conpeek(_con1,j);
                    if (confind(_con2,recId1))
                    {
                        return true;
                    }
                }
                return false;
            }
            else
            {
                for (j=1;j<=conlen(_con1); j++)
                {
                    recId1 = conpeek(_con1,j);
                    bulkTrans1 = ReqTrans::findRecId(recId1);
                    for (l=1;l<=conlen(_con2);l++)
                    {
                        bulkTrans2 = ReqTrans::findRecId(conpeek(_con2,l));
                        if (bulkTrans1.ItemId == bulkTrans2.ItemId
                            && bulkTrans1.CovInventDimId
                                == bulkTrans2.CovInventDimId)
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
        }

        i = 1;
        while (i<=conlen(orders)-1)
        {
            [bulk1,pack1] = conpeek(orders,i);
            [bulk2,pack2] = conpeek(orders,i+1);
            if (isOverLap(pack1,pack2,false) || isOverLap(bulk1,bulk2,true))
            {
                for (k=1; k<=conlen(pack2);k++)
                {
                    if (!confind(pack1,conpeek(pack2,k)))
                    {
                        pack1 = conins(pack1,conlen(pack1)+1,conpeek(pack2,k));
                    }
                }
                for (k=1; k<=conlen(bulk2);k++)
                {
                    if (!confind(bulk1,conpeek(bulk2,k)))
                    {
                        bulk1 = conins(bulk1,conlen(bulk1)+1,conpeek(bulk2,k));
                    }
                }

                // Remove the two duplicates
                orders = conDel(orders, i, 1);
                orders = conDel(orders, i, 1);

                // Insert the merged order
                orders = conins(orders,i,[bulk1,pack1]);

                // Continue to compare the merged order with the next
            }
            else
            {
                // Next comparison
                i++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consOrdIdNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PmfConsOrdId</c> number sequence for the <c>PmfConsOrd</c> record to be created.
    /// </summary>
    /// <returns>
    /// An initialized <c>PmfConsOrdId</c> number.
    /// </returns>
    private Num consOrdIdNum()
    {
        numberSeqConsOrderId = ProdTable::pmfNumberSeqConsOrdId();

        return numberSeqConsOrderId.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpConsBulk</Name>
				<Source><![CDATA[
    private void createTmpConsBulk(PmfConsOrdId _consOrdId)
    {
        InventTable inventTable = InventTable::find(reqTrans.ItemId);
        InventItemInventSetup inventItemInventSetup = InventItemInventSetup::findApplyOverride(inventTable.ItemId, reqTrans.CovInventDimId);
        ReqPO reqPO = reqTrans.reqPo();
        BOMVersion bomVersion = this.getBOMVersion(reqTrans, reqPO);

        tmpConsBulk.clear();
        tmpConsBulk.ConsOrdId       = _consOrdId;
        tmpConsBulk.ItemId          = reqTrans.ItemId;
        tmpConsBulk.ItemName        = inventTable.itemName();
        tmpConsBulk.RefId           = reqTrans.RefId;
        tmpConsBulk.Qty             = reqTrans.Qty;
        tmpConsBulk.MakeQty         = reqTrans.Qty;
        tmpConsBulk.CovQty          = reqTrans.CovQty ;
        tmpConsBulk.bomUnitId       = inventTable.bomUnitId;
        tmpConsBulk.CovInventDimId  = reqTrans.CovInventDimId;
        tmpConsBulk.StandardQty     = inventItemInventSetup.StandardQty;
        tmpConsBulk.LowestQty       = inventItemInventSetup.LowestQty;
        tmpConsBulk.HighestQty      = inventItemInventSetup.HighestQty;
        tmpConsBulk.MultipleQty     = bomVersion.PmfFormulaMultiple;
        tmpConsBulk.ItemBomId       = reqTrans.ItemBomId;
        tmpConsBulk.ItemRouteId     = reqTrans.ItemRouteId;
        tmpConsBulk.ReqPOStatus     = reqPO.ReqPOStatus;
        tmpConsBulk.ReqDateOrder    = reqPO.ReqDateOrder;
        tmpConsBulk.ReqTimeOrder    = reqPO.ReqTimeOrder;
        tmpConsBulk.ReqDateDlv      = reqPO.ReqDateDlv;
        tmpConsBulk.ReqTime         = reqPO.ReqTime;
        tmpConsBulk.ReqTransRecId   = reqTrans.RecId;
        tmpConsBulk.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpConsPack</Name>
				<Source><![CDATA[
    private void createTmpConsPack(PmfConsOrdId _consOrdId)
    {
        InventTable             inventTable = InventTable::find(reqTrans.ItemId);
        InventItemInventSetup   inventItemInventSetup = inventTable.inventItemInventSetup(reqTrans.CovInventDimId);
        ReqPO                   reqPO = reqTrans.reqPo();
        BOMVersion              bomVersion = this.getBOMVersion(reqTrans, reqPO);

        tmpConsPack.clear();
        tmpConsPack.ConsOrdId       = _consOrdId;
        tmpConsPack.ItemId          = reqTrans.ItemId;
        tmpConsPack.ItemName        = inventTable.itemName();
        tmpConsPack.RefId           = reqTrans.RefId;
        tmpConsPack.Qty             = reqTrans.Qty;
        tmpConsPack.MakeQty         = reqTrans.Qty;
        tmpConsPack.bomUnitId       = InventTable.BOMUnitId;
        tmpConsPack.ExtQtyUnitId    = this.getConsPackExtQtyUnitId(bomVersion);
        tmpConsPack.CovQty          = this.getConsPackCovQty(inventTable, bomVersion);
        tmpConsPack.CovInventDimId  = reqTrans.CovInventDimId;
        tmpConsPack.StandardQty     = inventItemInventSetup.StandardQty;
        tmpConsPack.LowestQty       = inventItemInventSetup.LowestQty;
        tmpConsPack.HighestQty      = inventItemInventSetup.HighestQty;
        tmpConsPack.MultipleQty     = bomVersion.PmfFormulaMultiple;
        tmpConsPack.ItemBomId       = reqTrans.ItemBomId;
        tmpConsPack.ItemRouteId     = reqTrans.ItemRouteId;
        tmpConsPack.ReqPOStatus     = reqPO.ReqPOStatus;
        tmpConsPack.ReqDateOrder    = reqPO.ReqDateOrder;
        tmpConsPack.ReqTimeOrder    = reqPO.ReqTimeOrder;
        tmpConsPack.ReqDateDlv      = reqPO.ReqDateDlv;
        tmpConsPack.ReqTime         = reqPO.ReqTime;
        tmpConsPack.ExtQty          = tmpConsPack.CovQty;
        tmpConsPack.ReqTransRecId   = reqTrans.RecId;
        tmpConsPack.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsPackExtQtyUnitId</Name>
				<Source><![CDATA[
    protected str getConsPackExtQtyUnitId(BOMVersion _bomVersion)
    {
        BOM bomBulkItem = this.getBomBulkItem(_bomVersion);

        return bomBulkItem.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsPackCovQty</Name>
				<Source><![CDATA[
    protected Qty getConsPackCovQty(InventTable _inventTable, BOMVersion _bomVersion)
    {
        BOM bomBulkItem = this.getBomBulkItem(_bomVersion);

        BOMCalcConsumption bomCalcConsumption = BOMCalcConsumption::construct(
                    BOMFormula::Formula0,
                    BOMCalcData::newInventTable(reqTrans.Qty, _inventTable),
                    _bomVersion.PmfYieldPct,
                    true);

        return bomCalcConsumption.calcConsumption(bomBulkItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBomBulkItem</Name>
				<Source><![CDATA[
    protected BOM getBomBulkItem(BOMVersion _bomVersion)
    {
        BOM bomBulkItem;

        select firstonly bomBulkItem
                    where  bomBulkItem.bomId    == _bomVersion.bomId
                        && bomBulkItem.ItemId   == _bomVersion.PmfBulkParent;

        return bomBulkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the consolidated orders.
    /// </summary>
    private void createConsOrders()
    {
        ReqDateOrder            reqDateOrder  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ReqTimeOrder            reqTimeOrder;
        ReqDateDlv              reqDateDlv    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ReqTime                 reqTime;
        Qty                     bulkQty, packQty;
        container               bulk,pack;
        ItemId                  bulkItemId;
        PmfConsOrdId            consOrdId;

        for (int i = 1; i <= conlen(orders); i++)
        {
            consOrdId = this.consOrdIdNum();
            bulkItemId = '';
            bulkQty = 0;
            reqDateOrder = dateMax();
            reqDateDlv  = dateNull();
            [bulk, pack] = conpeek(orders,i);
            for (int j = 1; j <= conlen(bulk); j++)
            {
                reqTrans = ReqTrans::findRecId(conpeek(bulk,j));

                if (bulkItemId && bulkItemId != reqTrans.ItemId)
                {
                    throw error("@PRO2470");
                }

                this.createTmpConsBulk(consOrdId);
                if (tmpConsBulk.ReqDateOrder < reqDateOrder)
                {
                    reqDateOrder = tmpConsBulk.ReqDateOrder;
                    reqTimeOrder = tmpConsBulk.ReqTimeOrder;
                }

                if (reqDateOrder == tmpConsBulk.ReqDateOrder
                    && tmpConsBulk.ReqTimeOrder < reqTimeOrder )
                {
                    reqTimeOrder = tmpConsBulk.ReqTimeOrder;
                }

                if (tmpConsBulk.ReqDateDlv > reqDateDlv)
                {
                    reqDateDlv = tmpConsBulk.ReqDateDlv;
                    reqTime    = tmpConsBulk.ReqTime;
                }

                if (tmpConsBulk.ReqDateDlv  == reqDateDlv
                    && tmpConsBulk.ReqTime > reqTime )
                {
                    reqTime = tmpConsBulk.ReqTime;
                }

                bulkQty += tmpConsBulk.Qty;
                bulkItemId = tmpConsBulk.ItemId;
            }

            for (int j = 1; j <= conlen(pack); j++)
            {
                reqTrans = ReqTrans::findRecId(conpeek(pack,j));
                this.createTmpConsPack(consOrdId);
                
                if (tmpConsPack.ReqDateOrder < reqDateOrder)
                {
                    reqDateOrder = tmpConsPack.ReqDateOrder;
                    reqTimeOrder = tmpConsPack.ReqTimeOrder;
                }

                if (reqDateOrder == tmpConsPack.ReqDateOrder
                    && tmpConsPack.ReqTimeOrder < reqTimeOrder )
                {
                    reqTimeOrder = tmpConsPack.ReqTimeOrder;
                }

                if (tmpConsPack.ReqDateDlv > reqDateDlv)
                {
                    reqDateDlv = tmpConsPack.ReqDateDlv;
                    reqTime    = tmpConsPack.ReqTime;
                }

                if (tmpConsPack.ReqDateDlv  == reqDateDlv
                    && tmpConsPack.ReqTime > reqTime )
                {
                    reqTime = tmpConsPack.ReqTime;
                }

                packQty += tmpConsPack.CovQty;
            }

            tmpConsOrd.clear();
            if (conlen(bulk) == 0)
            {
                reqTrans = ReqTrans::findRecId(conpeek(pack,1));
                ReqPO reqPO = reqTrans.reqPo();
                TransDate bomDate = dlvDateForBOMFlightIsEnabled ? reqPO.getBOMDate() : reqPO.ReqDate;
                BOMVersion bomVersion = BOMVersion::findApproved(
                                            reqTrans.ItemId,
                                            reqTrans.ItemBomId,
                                            true,
                                            bomDate,
                                            bomDate,
                                            reqTrans.Qty);
                BOM bomBulkItem;
                select firstonly bomBulkItem
                    where  bomBulkItem.bomId    == bomVersion.bomId
                        && bomBulkItem.ItemId   == bomVersion.PmfBulkParent;
                tmpConsOrd.ItemName     = bomBulkItem.itemName();
                tmpConsOrd.ConsQty      = packQty;
                tmpConsOrd.bomUnitId    = bomBulkItem.inventTable().inventUnitId();
            }
            else
            {
                InventTable inventTable = InventTable::find(bulkItemId);
                tmpConsOrd.ItemName     = inventTable.itemName();
                tmpConsOrd.ConsQty      = bulkQty;
                tmpConsOrd.bomUnitId    = inventTable.bomUnitId;
            }
            tmpConsOrd.ConsOrdId    = consOrdId;
            tmpConsOrd.ReqDateOrder = reqDateOrder;
            tmpConsOrd.ReqTimeOrder = reqTimeOrder;
            tmpConsOrd.ReqDateDlv   = reqDateDlv;
            tmpConsOrd.ReqTime      = reqTime;
            tmpConsOrd.ReqPOStatus  = ReqPOStatus::Unadministered;
            tmpConsOrd.insert();
        }

        this.showConsForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the container for consolidated orders if only pack orders are selected.
    /// </summary>
    private void createPackOnly()
    {
        container pack;

        orders = connull();
        pack = connull();

        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            pack = conins(pack,conlen(pack)+1,reqTrans.RecId);
            mi.next();
        }
        orders = conins(orders,1,[connull(),pack]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBulkOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the container for the consolidated orders based on the bulk orders.
    /// </summary>
    protected void getBulkOrders()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqIssue;
        ReqTrans    reqPlanBatchOrder;

        orders = connull();
        container bulk = connull();
        container pack = connull();
        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            if (reqTrans.Direction == InventDirection::Receipt
                && reqTrans.RefType == ReqRefType::PmfPlannedProdBatch
                && PmfBulkItemConv::isBulkorPack(reqTrans.ItemId))
            {
                while select TableId from reqIssue
                    where reqIssue.RefType == ReqRefType::PmfFormulaLine
                    join RecId, ItemId, ItemBomId, ReqDate, Qty, RefId, RefType, PlanVersion from reqPlanBatchOrder
                        where reqPlanBatchOrder.RefId          == reqIssue.RefId
                           && reqPlanBatchOrder.PlanVersion    == reqIssue.PlanVersion
                           && reqPlanBatchOrder.RefType        == ReqRefType::PmfPlannedProdBatch
                        exists join reqTransCov
                            where reqTransCov.ReceiptRecId     == reqTrans.RecId
                               && reqTransCov.IssueRecId       == reqIssue.RecId
                {
                    TransDate bomDate = dlvDateForBOMFlightIsEnabled ? reqPlanBatchOrder.reqPo().getBOMDate() : reqPlanBatchOrder.ReqDate;

                    BOMVersion bomVersion = BOMVersion::findApproved(
                        reqPlanBatchOrder.ItemId,
                        reqPlanBatchOrder.ItemBomId,
                        true,
                        bomDate,
                        bomDate,
                        reqPlanBatchOrder.Qty);

                    if (bomVersion.PmfBulkParent == reqTrans.ItemId)
                    {
                        if (conlen(bulk) == 0)
                        {
                            bulk = conins(bulk,1,reqTrans.RecId);
                        }
                        pack = conins(pack,conlen(pack)+1, reqPlanBatchOrder.RecId);
                    }
                }
                if (conlen(pack) > 0)
                {
                    orders = conins(orders,conlen(orders)+1,[bulk,pack]);
                    pack = connull();
                    bulk = connull();
                }
            }
            mi.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        dlvDateForBOMFlightIsEnabled = ReqTransPoMarkFirmUseDlvDateForBOMVersionFlight::instance().isEnabled();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqConsOrderIdAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the unused continuous <c>PmfConsOrdId</c> number sequence.
    /// </summary>
    public void numberSeqConsOrderIdAbort()
    {
        if (numberSeqConsOrderId && NumberSequenceTable::findByNaturalKey(numberSeqConsOrderId.parmNumberSequenceCode()).Continuous)
        {
            numberSeqConsOrderId.abort();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapReqPODeleted</Name>
				<Source><![CDATA[
    public Map parmMapReqPODeleted(Map _map = mapReqPoDeleted)
    {
        mapReqPoDeleted = _map;
        return mapReqPoDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsBulk</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedBulk parmTmpConsBulk(TmpPmfConsolidatedBulk _tmpConsBulk = tmpConsBulk)
    {
        tmpConsBulk = _tmpConsBulk;
        return tmpConsBulk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsOrd</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedOrder parmTmpConsOrd(TmpPmfConsolidatedOrder _tmpConsOrd = tmpConsOrd)
    {
        tmpConsOrd = _tmpConsOrd;
        return tmpConsOrd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsPack</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedPack parmTmpConsPack(TmpPmfConsolidatedPack _tmpConsPack = tmpConsPack)
    {
        tmpConsPack = _tmpConsPack;
        return tmpConsPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackBulkOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the bulk and pack orders container for consolidated orders if only pack orders are selected.
    /// </summary>
    private void createPackBulkOrders()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqTransIssue;
        reqTrans    reqTransReceipt;        
        Map         plannedOrderToBomVersion;
        Set         bulkRecordId = new Set(Types::Int64);
    
        orders = connull();
        container bulk = connull();
    
        var mi = new MapIterator(mapReqTransMark);
        mi.begin();
        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());
            container pack = [reqTrans.RecId];
    
            while select ItemId, RefType from reqTransReceipt
                exists join reqTransCov
                where reqTransCov.ReceiptRecId == reqTransReceipt.RecId
                exists join reqTransIssue
                where reqTransIssue.RecId       == reqTransCov.IssueRecId
                   && reqTransIssue.RefType     == ReqRefType::PmfFormulaLine
                   && reqTransIssue.RefId       == reqTrans.RefId
                   && reqTransIssue.PlanVersion == reqTrans.PlanVersion
            {
                if (reqTransReceipt.isPlannedOrder())
                {
                    if (!plannedOrderToBomVersion)
                    {
                        plannedOrderToBomVersion = new Map(Types::String, Types::Record);
                    }

                    // The same bulk planned order can be belong to multiple packed planned orders, so
                    // only add it into container one time to avoid duplicate processing
                    if (bulkRecordId.in(reqTransReceipt.RecId))
                    {
                        continue;
                    }
    
                    var key = reqTrans.ItemId + '#' + reqTrans.ItemBomId + '#' + int2str(date2num(reqTrans.ReqDate))
                      + '#' + num2str(reqTrans.Qty, 0, 16, 1, 0);
    
                    BOMVersion  bomVersion;
                    if (plannedOrderToBomVersion.exists(key))
                    {
                        bomVersion = plannedOrderToBomVersion.lookup(key);
                    }
                    else
                    {
                        TransDate bomDate = dlvDateForBOMFlightIsEnabled ? reqTrans.reqPo().getBOMDate() : reqTrans.ReqDate;

                        bomVersion = BOMVersion::findApproved(
                            reqTrans.ItemId,
                            reqTrans.ItemBomId,
                            true,
                            bomDate,
                            bomDate,
                            reqTrans.Qty);
    
                        plannedOrderToBomVersion.insert(key, bomVersion);
                    }
    
                    if (bomVersion.PmfBulkParent == reqTransReceipt.ItemId)
                    {
                        bulkRecordId.add(reqTransReceipt.RecId);
                        bulk += [reqTransReceipt.RecId];
                    }
                }
            }
    
            orders += [[bulk, pack]];
            bulk = connull();
            bulkRecordId = new Set(Types::Int64);
    
            mi.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMVersion</Name>
				<Source><![CDATA[
    public BOMVersion getBOMVersion(ReqTrans _reqTrans, ReqPO _reqPO)
    {
        TransDate  bomDate = dlvDateForBOMFlightIsEnabled ? _reqPO.getBOMDate() : _reqPO.ReqDate;
        BOMVersion bomVersion = BOMVersion::findApproved(_reqTrans.ItemId, _reqTrans.ItemBomId, NoYes::Yes, bomDate, bomDate, _reqTrans.Qty);

        if (_reqPO.RefType == ReqRefType::PmfPlannedProdBatch
            && InventTable::find(_reqPO.ItemId).isFormulaAllowed())
        {
            if (!bomVersion.RecId)
            {
                throw error("@PRO2682");
            }
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the selected orders and shows the form to firm the orders.
    /// </summary>
    public void run()
    {
    
        super();
        bulkItems = new Map(Types::Int64, Types::Real);
        packItems = new Map(Types::Int64, Types::Real);
    
        if (this.checkForBulkOnly())
        {
            if (Box::yesNo("@PRO2467",DialogButton::Yes)== DialogButton::Yes)
            {
                this.selectOrders();
                this.createConsOrders();
            }
            return;
        }
    
        if (this.checkForPackOnly())
        {
            if (this.checkPacksHaveBulkOrders() && Box::yesNo("@SCMPlanning:DialogConsolidateAllPlannedOrders", DialogButton::Yes) == DialogButton::Yes)
            {
                this.createPackBulkOrders();
                this.combineOrders();
            }
            else
            {
                this.createPackOnly();
            }
            this.createConsOrders();
            return;
        }
    
        this.selectOrders();
    
        if (this.checkForExactMatch())
        {
            this.createConsOrders();
            return;
        }
    
        //if we got here - incorrect match
        if (Box::yesNo("@PRO2469",DialogButton::Yes)== DialogButton::Yes)
        {
            this.createConsOrders();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the consolidated orders and merges the associated orders together.
    /// </summary>
    private void selectOrders()
    {
        orders = connull();
        this.getBulkOrders();
        this.combineOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showConsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the <c>PmfBulkPlanConsolidate</c> form.
    /// </summary>
    /// <returns>
    /// true if the user did perform the firm operation on the form; otherwise, false.
    /// </returns>
    protected boolean showConsForm()
    {
        Args args;
        FormRun formRun;

        args = new Args();
        args.name(formstr(PmfBulkPlanConsolidate));
        args.caller(this);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        return formRun.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the standard dialog should be shown.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    public boolean showDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfBulkPlanMarkValidate construct()
    {
        return new PmfBulkPlanMarkValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PmfBulkPlanMarkValidate validateMarked  = PmfBulkPlanMarkValidate::construct();

        validateMarked.getLast();
        validateMarked.initFromArgs(_Args);

        if (! validateMarked.countMarkedElements())
        {
            return;
        }

        if (!validateMarked.prompt())
        {
            return;
        }

        validateMarked.runOperation();

        if (validateMarked.parmMapReqPODeleted())
        {
            validateMarked.removeDeletedFromMark();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPacksHaveBulkOrders</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether all the selected pack orders have related planned bulk orders.
	/// </summary>
	/// <returns>
	/// true if the all the selected pack orders have its planned bulk orders; otherwise, false.
	/// </returns>
	protected boolean checkPacksHaveBulkOrders()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqTransIssue;
        reqTrans    reqTransReceipt;

        var mi = new MapIterator(mapReqTransMark);
        mi.begin();

        while (mi.more())
        {
            reqTrans = mapReqTransMark.lookup(mi.key());

            select firstOnly RecId from reqTransReceipt
                exists join reqTransCov
					where reqTransCov.ReceiptRecId == reqTransReceipt.RecId
                exists join reqTransIssue
					where reqTransIssue.RecId			== reqTransCov.IssueRecId
						&& reqTransIssue.RefType		== ReqRefType::PmfFormulaLine
						&& reqTransIssue.RefId			== reqTrans.RefId
						&& reqTransIssue.PlanVersion	== reqTrans.PlanVersion;

            if (!reqTransReceipt.RecId)
            {
				return false;
            }

            mi.next();

        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>