<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceSupplyForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceSupplyForecast</c> is used to generate budget plan data from supply forecast.
/// </summary>
public class BudgetPlanGenerateServiceSupplyForecast extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractSupplyForecast budgetPlanGenerateContractSupplyForecast;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanGenerateServiceSupplyForecast</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateServiceSupplyForecast</c> class.
    /// </returns>
    public static BudgetPlanGenerateServiceSupplyForecast construct()
    {
        return new BudgetPlanGenerateServiceSupplyForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>BudgetPlanGenerateContractSupplyForecast</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractSupplyForecast _contract)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceSupplyForecast));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceSupplyForecastContext = budgetPlanLogger.budgetPlanGeneration().supplyForecastContext())
        {
            this.parmBudgetPlanGenerateContract(_contract);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractSupplyForecast = _budgetPlanGenerateContract as BudgetPlanGenerateContractSupplyForecast;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        boolean isValidQuery;
        ForecastPurch forecastPurch;

        Query userDefinedQuery = this.createQuery();

        try
        {
            ttsbegin;

            BudgetPlanHeader budgetPlanHeader    = this.createOrUpdateBudgetPlanHeader();
            QueryRun         userDefinedQueryRun = new QueryRun(userDefinedQuery);

            while (userDefinedQueryRun.next())
            {
                isValidQuery = true;

                forecastPurch = userDefinedQueryRun.get(tableNum(ForecastPurch)) as ForecastPurch;

                this.createOrUpdateBudgetPlanLineForPurchase(
                    budgetPlanHeader.RecId,
                    forecastPurch);
            }

            if (isValidQuery)
            {
                this.bulkInsertOrUpdateBudgetPlanLines();
            }

            if (!isValidQuery || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= BudgetPlanningConstants::MaxRetryCount)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@Budget:BudgetPlanning_Validation_ErrorOccurredDuringUpdate");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBudgetPlanLineForPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the record in the <c>BudgetPlanLine</c> table for the purchase amount.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c> table.</param>
    /// <param name = "_forecastSaPurch">The buffer of the <c>ForecastPurch</c> table.</param>
    protected void createOrUpdateBudgetPlanLineForPurchase(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, ForecastPurch _forecastPurch)
    {
        LedgerDimensionDefaultAccount   receiptLedgerDimension = _forecastPurch.accountReceiptLedgerDimension();
        InventTable                     inventTable            = _forecastPurch.inventTable();;

        if (inventTable && inventTable.modelGroup().PostOnhandFinancial)
        {
            receiptLedgerDimension = _forecastPurch.accountReceiptLedgerDimension();
            this.validateDefaultAccount(receiptLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchReceipt));
        }
        else
        {
            receiptLedgerDimension = _forecastPurch.accountConsumptionLedgerDimension();
            this.validateDefaultAccount(receiptLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchConsump));
        }

        if (receiptLedgerDimension)
        {
            BudgetPlanCurrencyAmount budgetPlanLineAmount;
            BudgetPlanCurrencyAmount grossAmount    = _forecastPurch.grossAmount();
            Amount                   discountAmount = -(grossAmount - _forecastPurch.Amount);

            // Creates the budget plan line for the discount
            if (discountAmount)
            {
                this.createOrUpdateBudgetPlanLineForDiscount(
                    _budgetPlanHeaderRecId,
                    _forecastPurch,
                    discountAmount);

                budgetPlanLineAmount = grossAmount;
            }
            else
            {
                budgetPlanLineAmount = _forecastPurch.Amount;
            }

            // Creates the budget plan line for the purchase amount
            if (budgetPlanLineAmount)
            {
                this.createOrUpdateBudgetPlanLine(
                    this.setBudgetPlanLineDataGenerationTmpForSupplyForecast(
                        _budgetPlanHeaderRecId,
                        _forecastPurch,
                        receiptLedgerDimension,
                        budgetPlanLineAmount,
                        _forecastPurch.Currency));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBudgetPlanLineForDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the record in the <c>BudgetPlanLine</c> table for the discount amount.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c> table.</param>
    /// <param name = "_forecastPurch">The buffer of the <c>ForecastPurch</c> table.</param>
    /// <param name = "_discountAmount">The value for the discount amount.</param>
    protected void createOrUpdateBudgetPlanLineForDiscount(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, ForecastPurch _forecastPurch, BudgetPlanCurrencyAmount _discountAmount)
    {
        LedgerDimensionDefaultAccount discountLedgerDimension = _forecastPurch.accountDiscLedgerDimension();

        if (_discountAmount)
        {
            if (discountLedgerDimension)
            {
                // Creates the budget plan line for the discount amount
                this.createOrUpdateBudgetPlanLine(
                    this.setBudgetPlanLineDataGenerationTmpForSupplyForecast(
                        _budgetPlanHeaderRecId,
                        _forecastPurch,
                        discountLedgerDimension,
                        _discountAmount,
                        _forecastPurch.Currency));
            }
            else
            {
                this.validateDefaultAccount(discountLedgerDimension, InventPosting::accountType2LedgerPostingType(InventAccountType::PurchDisc));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmpForSupplyForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values on a new <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_forecastPurch">
    /// The buffer of the <c>ForecastPurch</c> table.
    /// </param>
    /// <param name="_defaultAccount">
    /// The ledger dimension default account reference to be processed for inclusion in the budget ledger dimension.
    /// </param>
    /// <param name="_amount">
    /// The amount to be set on the <c>BudgetPlanLine</c> table record.
    /// </param>
    /// <param name="_currency">
    /// The currency to be set on the <c>BudgetPlanLine</c> table record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The creation process encountered an error and was not completed.
    /// </exception>
    /// <returns>
    /// The <c>BudgetPlanLineDataGenerationTmp</c> buffer with supply forecast values.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmpForSupplyForecast(
        BudgetPlanHeaderRecId         _budgetPlanHeaderRecId,
        ForecastPurch                 _forecastPurch,
        LedgerDimensionDefaultAccount _defaultAccount,
        BudgetPlanCurrencyAmount      _amount,
        CurrencyCode                  _currency)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;

        budgetPlanLineDataGenerationTmp = this.setBudgetPlanLineDataGenerationTmp(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmp.EffectiveDate   = _forecastPurch.StartDate;
        budgetPlanLineDataGenerationTmp.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimensionForType(
                                                                                        LedgerDimensionType::BudgetPlanning,
                                                                                        _defaultAccount,
                                                                                        _forecastPurch.DefaultDimension);

        budgetPlanLineDataGenerationTmp.BudgetClass     = BudgetClass::Expense;
        budgetPlanLineDataGenerationTmp.ForecastModelId = _forecastPurch.ModelId;
        budgetPlanLineDataGenerationTmp.TransactionCurrencyCode   = _currency;
        budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(_amount, budgetPlanLineDataGenerationTmp.TransactionCurrencyCode);
        budgetPlanLineDataGenerationTmp.EstimateType              = BudgetPlanEstimateType::Monetary;

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query query;

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractSupplyForecast.parmQueryBudgetPlanGenerateSupplyForecast()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchingBudgetPlanLine</Name>
				<Source><![CDATA[
    protected void deleteAllMatchingBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        BudgetPlanLine budgetPlanLine;

        delete_from budgetPlanLine
            where budgetPlanLine.BudgetPlanHeader       == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLine.BudgetPlanScenario    == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLine.LedgerDimension       == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLine.EffectiveDate         == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLine.BudgetClass           == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLine.ForecastModelId       == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInTmpTable</Name>
				<Source><![CDATA[
    protected void findRecordInTmpTable(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        select firstonly forupdate budgetPlanLineDataGenerationTmpBulkInsert
            where budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader    == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension    == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate      == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass        == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLineDataGenerationTmpBulkInsert.ForecastModelId    == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>