<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsProdPickWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsProdPickWorkTransactionType</c> class handles logic specific to the production picking work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::ProdPick)]
class WhsProdPickWorkTransactionType extends WhsWorkTransactionType
{
    private boolean allowProdOverPick;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAllowProdOverpick</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmAllowProdOverpick(boolean _allowProdOverPick = allowProdOverPick)
    {
        allowProdOverPick = _allowProdOverPick;
        return allowProdOverPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLPWithTargetLPForNoStopWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustUpdateLPWithTargetLPForNoStopWorkLine(WHSWorkLine _workLine)
    {
        return WHSWorkLine::isPutBefore(_workLine.WorkId, _workLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransHandlingQuantities</Name>
				<Source><![CDATA[
    protected void adjustOrderTransHandlingQuantities(
        WHSWorkLine         _workLine,
        InventHandlingQty   _inventDiffHandlingQty,
        InventHandlingQty   _workLineInventHandlingQty)
    {
        if (!this.parmAllowProdOverpick())
        {
            if (WHSProductionRawMaterialOverpickingFlight::instance().isEnabled()
                && !WhsWorkExecute::isWorkLineStagingPick(_workLine.whsWorkTable(), _workLine))
            {
                this.adjustProdBomQty(_workLine, _inventDiffHandlingQty, _workLineInventHandlingQty);
            }
            else
            {
                super(_workLine, _inventDiffHandlingQty, _workLineInventHandlingQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransQty</Name>
				<Source><![CDATA[
    public void adjustOrderTransQty(
        WHSWorkLine      _workLine,
        InventQty        _inventDiffQty,
        InventQty        _workLineInventQty)
    {
        if (!this.parmAllowProdOverpick())
        {
            if (WHSProductionRawMaterialOverpickingFlight::instance().isEnabled())
            {
                WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);
                this.adjustOrderTransHandlingQuantities(_workLine, _inventDiffQty, _workLineInventQty);
            }
            else
            {
                super(_workLine, _inventDiffQty, _workLineInventQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustProdBomQty</Name>
				<Source><![CDATA[
    protected void adjustProdBomQty(
        WHSWorkLine         _workLine,
        InventHandlingQty   _inventDiffQty,
        InventHandlingQty   _workLineInventQty)
    {
        ProdJournalBOM prodJournalBOM;

        if (_inventDiffQty <= 0)
        {
            return;
        }

        WHSInventTable whsInventTable = WHSInventTable::find(_workLine.ItemId);

        if (WMSLocation::find(_workLine.WMSLocationId, _workLine.whsWorkTable().InventLocationId).whsLocationIsLPControlled()?
            whsInventTable.AllowMaterialOverPick        == WHSAllowMaterialOverPick::OrderPicking :
            whsInventTable.AllowMaterialOverPickNonLP   == WHSAllowMaterialOverPickNonLP::OrderPicking)
        {
            ProdBOM prodBOM = ProdBOM::findTransId(_workLine.InventTransId, true);
       
            if (prodBOM.RecId)
            {
                boolean isCWItem = PdsGlobal::pdsIsCWItem(prodBOM.ItemId);
                InventHandlingQty estimatedInventCalcQty = isCWItem? prodBOM.PdsCWInventCalc : prodBOM.QtyInventCalc;
                InventHandlingQty openPickedInventQty = this.calcOpenAndPickedQty(_workLine);
                InventHandlingQty overpickedInventQty = openPickedInventQty + _inventDiffQty - estimatedInventCalcQty;

                if (overpickedInventQty > 0)
                {
                    if (isCWItem)
                    {
                        InventHandlingUnitId inventHandlingUnit = WHSCatchWeightHelper::inventHandlingUnitId(prodBOM.ItemId);
                        UnitQty remainBOMPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                prodBOM.InventDimId,
                                                                                prodBOM.PdsCWRemainPhysical + overpickedInventQty,
                                                                                inventHandlingUnit,
                                                                                prodBOM.UnitId,
                                                                                NoYes::Yes);
                        InventQty remainInventPhysical;

                        if (prodBOM.UnitId != prodBOM.displayInventUnitId())
                        {
                            remainInventPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                prodBOM.InventDimId,
                                                                                prodBOM.PdsCWRemainPhysical + overpickedInventQty,
                                                                                inventHandlingUnit,
                                                                                prodBOM.displayInventUnitId(),
                                                                                NoYes::Yes);
                        }
                        else
                        {
                            remainInventPhysical = remainBOMPhysical;
                        }

                        prodJournalBOM.addProdBOMRemain(prodBOM, remainInventPhysical, remainBOMPhysical, prodBOM.PdsCWRemainPhysical + overpickedInventQty);
                    }
                    else
                    {
                        UnitQty remainBOMPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                prodBOM.InventDimId,
                                                                                prodBOM.RemainInventPhysical+overpickedInventQty,
                                                                                prodBOM.displayInventUnitId(),
                                                                                prodBOM.UnitId,
                                                                                NoYes::Yes);

                        prodJournalBOM.addProdBOMRemain(prodBOM, prodBOM.RemainInventPhysical+overpickedInventQty, remainBOMPhysical, 0);
                    }
                }

                WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(_workLine.InventTransId, true);

                if (prodBOMPool)
                {
                    WHSProdBOMPool::adjustWavedHandlingQty(_workLine.InventTransId, _inventDiffQty);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the validateShippingOverpick method. Extenders should move their logic to wrap or override the validateShippingOverpickHandlingQuantity method.', false, 13\6\2023)]
    public boolean validateShippingOverpickQty(WHSWorkLine _workLine, InventQty _overpickInventQty)
    {
        if (WHSProductionRawMaterialOverpickingFlight::instance().isEnabled())
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);

            return this.validateShippingOverpickHandlingQuantity(_workLine, _overpickInventQty);
        }
        else
        {
            return super(_workLine, _overpickInventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a shipping overpick is possible from the handling quantity.
    /// </summary>
    /// <param name = "_workLine">The work line to be checked.</param>
    /// <param name = "_overpickInventHandlingQty">The quantity in the handling unit that is being overpicked.</param>
    /// <returns>
    /// true if the handling quantity is within an acceptable range; otherwise, an exception is thrown.
    /// </returns>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the validateShippingOverpick method.
    /// </remarks>
    protected boolean validateShippingOverpickHandlingQuantity(
        WHSWorkLine         _workLine,
        InventHandlingQty   _overpickInventHandlingQty)
    {
        boolean ret = true;

        if (WHSProductionRawMaterialOverpickingFlight::instance().isEnabled())
        {
            if (_overpickInventHandlingQty < 0) //short pick
            {
                ret = checkFailed(strFmt("@WAX:CannotShortpickViaOverpickFunction"));
            }
            else
            {
                ProdBOM prodBOM = ProdBOM::findTransId(_workLine.InventTransId);

                if (prodBOM.MaterialOverpickPercentage || WhsValidateShippingOverpickHandlingQuantityFlight::instance().isEnabled())
                {
                    InventQty estimatedInventCalcQty = PdsGlobal::pdsIsCWItem(prodBOM.ItemId)? prodBOM.PdsCWInventCalc : prodBOM.QtyInventCalc;
                    InventQty openPickedInventQty = this.calcOpenAndPickedQty(_workLine);

                    if (openPickedInventQty + _overpickInventHandlingQty > estimatedInventCalcQty) //overpick > estimated
                    {
                        Percent subOverPct = (openPickedInventQty + _overpickInventHandlingQty - estimatedInventCalcQty) / estimatedInventCalcQty * 100;

                        if (subOverPct > prodBOM.MaterialOverpickPercentage)
                        {
                            ret = checkFailed(strFmt("@WAX:MaterialOverpickPercentageExceeded", subOverPct, prodBOM.MaterialOverpickPercentage));
                        }
                    }
                }
            }
        }
        else
        {
            ret = super(_workLine, _overpickInventHandlingQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOpenAndPickedQty</Name>
				<Source><![CDATA[
    private InventHandlingQty calcOpenAndPickedQty(WHSWorkLine _workLine)
    {
        ProdBOM prodBOM = ProdBOM::findTransId(_workLine.InventTransId);

        InventDimParm inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(prodBOM.inventTable());
        InventHandlingQty openWorkQty;

        if (WHSProdOverpickingUseTransactionsInventDimForOpenQtyFlight::instance().isEnabled())
        {
            InventTrans inventTransLocal;
            InventTransOrigin inventTransOriginLocal;
            InventDim inventDimLocal;

            while select inventDimLocal
                exists join inventTransLocal
                    where inventTransLocal.inventDimId == inventDimLocal.inventDimId
                join inventTransOriginLocal
                    where inventTransOriginLocal.RecId == inventTransLocal.InventTransOrigin
                        && inventTransOriginLocal.InventTransId == _workLine.InventTransId
            {
                openWorkQty += WHSPool::calculateOpenWorkHandlingQty(prodBOM.InventTransId, inventDimLocal, inventDimParm);
            }
        }
        else
        {
            openWorkQty = WHSPool::calculateOpenWorkHandlingQty(prodBOM.InventTransId, prodBOM.inventDim(), inventDimParm);
        }

        WMSLocationId wmsLocationId = WHSWorkCreateWaveProd::getLocationByWorkCenter(prodBom.InventTransId, prodBom.ProdId, prodBom.OprNum);

        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventDim inventDim;

        select sum(Qty), sum(PdsCWQty) from inventTrans
            where (inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                ||    inventTrans.StatusIssue       == StatusIssue::Picked)
                &&    inventTrans.StatusReceipt     == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId == _workLine.InventTransId
            exists join inventDim
                where inventDim.inventDimId == inventTrans.inventDimId
                && inventDim.wMSLocationId == wmsLocationId;
        
        InventHandlingQty posTransQty = PdsGlobal::pdsIsCWItem(prodBOM.ItemId) ? -inventTrans.PdsCWQty : -inventTrans.Qty;
        
        return posTransQty + openWorkQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberAssignmentEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isSerialNumberAssignmentEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeLPWithChildrenPrevented</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWholeLPWithChildrenPrevented()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelatedPicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isItemRelatedPicking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkSplittingAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWorkSplittingAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::RawMaterialPicking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirProdPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateProdPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(ProdBOM), fieldNum(ProdBOM, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(ProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return ProdTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderLineNumFromInventTransId</Name>
				<Source><![CDATA[
    public LineNum findOrderLineNumFromInventTransId(InventTransId _inventTransId)
    {
        return ProdBOM::findTransId(_inventTransId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        ProdBOM prodBOM = ProdBOM::findTransId(_whsWorkLine.InventTransId);

        if (prodBOM.RecId && PdsGlobal::pdsIsCWItem(prodBOM.ItemId))
        {
            return [prodBOM.PdsCWQty, prodBOM.PdsCWRemainPhysical];
        }

        return [prodBOM.bomQty, prodBOM.RemainBOMPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        WHSWaveTable::resetWhenWorkIsRemoved(_workTable.WaveId);
        WHSContainerTable::deleteRelatedToWorkContainersCreatedByContainerization(_workTable.WorkId);
        WhsProdPickWorkTransactionType::cancelLoadLinesForWork(_workTable.WorkId, this.parmDecrementLoadLineWorkCreatedQty());
        WHSWorkTable::updateWorkStatusToCancelledForOriginWork(_workTable.WorkId);
        this.cancelReplenishmentWork(_workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ajust the container lines for the workline.
    /// </summary>
    /// <param name = "_workLine">The workline to cancel.</param>
    /// <param name = "_inventQty">The quantity to cancel.</param>
    [Hookable(false)]
    internal void adjustContainerLine(WHSWorkLine _workLine, InventQty _inventQty)
    {
        // we do not support containerization although when trying to cancel a work header we are trying to delete the container created via containerization.
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelLoadLinesForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels load lines for a work.
    /// </summary>
    /// <param name = "_workId">The id of the work.</param>
    /// <param name = "_decrementLoadLineWorkCreatedQty">true if load lines work created quantity is being decremented, otherwise, false.</param>
    static public void cancelLoadLinesForWork(WHSWorkId _workId, boolean _decrementLoadLineWorkCreatedQty = true)
    {
        WHSWorkLine firstPutLine = WHSWorkTable::getFirstPutWorkLine(_workId);
        WHSWorkLine workLIne;

        // Can't select loadLine or ProdBOMPool record in query.
        // If it hits same record twice because it's related to two or more workLines then the data will be out of date and update conflict will occur.
        while select InventQtyWork, InventTransId from workLine
            where workLine.WorkId        == _workId
               && workLine.WorkStatus    != WHSWorkStatus::Cancelled
               && workLine.LineNum       <  firstPutLine.LineNum
        {
       
            WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(workLine.InventTransId, true);

            if (prodBOMPool)
            {
                WHSProdBOMPool::adjustWavedHandlingQty(workLine.InventTransId, -workLine.InventQtyWork);
            }
            else
            {
                WHSKanbanJobPickingListPool::reduceWavedQty(workLine.InventTransId, workLine.InventQtyWork);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsProdBOM = _query.dataSourceTable(tableNum(ProdBOM));
        QueryBuildDataSource qbdsInventDim = qbdsProdBOM.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverPickSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOverPickSupported()
    {
        return WHSProductionRawMaterialOverpickingFlight::instance().isEnabled()? true : super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>