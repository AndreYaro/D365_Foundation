<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnSCMonMessageUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Sets the parameters on the update of the message.
/// </summary>
class RetailConnSCMonMessageUpdate extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the monitoring utilities of the message and the error text for the incoming or outgoing messages.
    /// </summary>
    /// <param name="_args">
    /// Holds the message data.
    /// </param>
    public static void main(Args _args)
    {
        RetailConnSCMonMessages msg;
        RetailConnSCMonIncomingMessages incmsg;
        RetailConnSCMonOutgoingMessages outmsg;

        RetailConnSCMonitoringUtilities scmon;
        InteropPermission permission;
        boolean ret;

        if (!_args || !_args.dataset() || !_args.record())
        {
            return;
        }

        switch (_args.dataset())
        {
        case tablenum(RetailConnSCMonMessages):
            msg = _args.record();
            if (msg.UnionAllBranchId == 1)  // IncomingMessages
            {
                select incmsg
                index hint IncomingMessagesIdx
                where incmsg.PackageNo == msg.PackageNo &&
                    incmsg.ServiceName == msg.ServiceName &&
                    incmsg.MessageGUID == msg.MessageGUID;
            }
            else  // OutgoingMessage
            {
                select outmsg
                index hint OutgoingMessagesIdx
                where outmsg.PackageNo == msg.PackageNo &&
                    outmsg.ServiceName == msg.ServiceName &&
                    outmsg.ConnectString == msg.ConnectString &&
                    outmsg.MessageGUID == msg.MessageGUID;
            }
            break;

        case tablenum(RetailConnSCMonIncomingMessages):
            incmsg = _args.record();
            break;

        case tablenum(RetailConnSCMonOutgoingMessages):
            outmsg = _args.record();
            break;
        }

        permission = new InteropPermission(InteropKind::ComInterop);
        permission.assert();

        scmon = new RetailConnSCMonitoringUtilities();

        if (incmsg)
        {
            ret = scmon.setIncomingMessageFinError(incmsg);

            if (!ret)
            {
                error(strfmt("@RET645", incmsg.PackageNo, incmsg.ServiceName, incmsg.MessageGUID));
            }
        }
        else if (outmsg)
        {
            ret = scmon.setOutgoingMessageFinError(outmsg);

            if (!ret)
            {
                error(strfmt("@RET646", outmsg.PackageNo, outmsg.ServiceName, outmsg.DestServiceName, outmsg.MessageGUID));
            }
        }

        CodeAccessPermission::revertAssert();

        info("@RET649");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>