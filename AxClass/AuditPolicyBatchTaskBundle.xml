<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>AuditPolicyBatchTaskBundle</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>AuditPolicyBatchTaskBundle</c> class is used to bundle the task for the audit policy
///    execution.
/// </summary>
public class AuditPolicyBatchTaskBundle extends BatchTaskBundle implements BatchRetryable
{
    int64 maxNumberOfTasks;
    int64 totalNumberLines;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>addTask</Name>
        <Source><![CDATA[
    /// <summary>
    /// Adds a task to the bundle.
    /// </summary>
    /// <param name="_task">
    /// The task to add to the bundle.
    /// </param>
    public void addTask(RunBaseBatch _task)
    {
        super(_task);
        totalNumberLines++;
    }

]]></Source>
      </Method>
      <Method>
        <Name>getSupportedTasksList</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets a list of the batch tasks that are supported by this bundle.
    /// </summary>
    /// <returns>
    /// A list of class IDs that correspond to the set of supported batch tasks.
    /// </returns>
    public container getSupportedTasksList()
    {
        return [classnum(AuditPolicyExecutionTask)];
    }

]]></Source>
      </Method>
      <Method>
        <Name>isFull</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates whether the bundle is full.
    /// </summary>
    /// <returns>
    /// true if the bundle is full; otherwise, false.
    /// </returns>
    public boolean isFull()
    {
        if (totalNumberLines >= maxNumberOfTasks)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>isTaskLargerThanMyBaseCapacity</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified task is larger than the base capacity of a bundle.
    /// </summary>
    /// <param name="_task">
    /// The task to compare with the bundle capacity.
    /// </param>
    /// <returns>
    /// true if the task is larger than the bundle base capacity; otherwise, false.
    /// </returns>
    public boolean isTaskLargerThanMyBaseCapacity(RunBaseBatch _task)
    {
        if (totalNumberLines + 1 > maxNumberOfTasks)
        {
            // The individual task is larger than any individual bundle.
            return true;
        }
        else
        {
            // The individual task would fit into an empty bundle.
            return false;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmMaxNumberOfTasks</Name>
        <Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public int64 parmMaxNumberOfTasks(int64 _maxNumberOfTasks = maxNumberOfTasks)
    {
        maxNumberOfTasks = _maxNumberOfTasks;
        return _maxNumberOfTasks;
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AuditPolicyBatchTaskBundle</c> class.
    /// </summary>
    /// <param name="_maxNumberOfTasks">
    /// An integer value that determines maximum number of task.
    /// </param>
    /// <returns>
    /// An instance of the <c>AuditPolicyBatchTaskBundle</c> class
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AuditPolicyBatchTaskBundle construct(int64 _maxNumberOfTasks)
    {
        AuditPolicyBatchTaskBundle auditPolicyBatchTaskBundle;

        auditPolicyBatchTaskBundle = new AuditPolicyBatchTaskBundle();
        auditPolicyBatchTaskBundle.parmMaxNumberOfTasks(_maxNumberOfTasks);
        return auditPolicyBatchTaskBundle;
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>