<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_Daily</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEngine_Daily extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCashRegister_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if cash register terminal need to be updated.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean enableCashRegister_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default values for the transaction
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>_ledgerJournalTrans</c> table buffer that stores ledgerTransaction to which default vales needs to initilize
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    /// The <c>_ledgerJournalTrans_Asset</c> table buffer for Asset transaction.
    /// </param>
    /// <remarks>
    /// This method is used to initialize the <c>TransactionType</c> filed value.
    /// </remarks>
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        _ledgerJournalTrans.TransactionType = LedgerTransType::GeneralJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalEngine_Daily</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerJournalEngine_Daily</c> object.</returns>
    public static LedgerJournalEngine_Daily construct(FormRun _formRun = null)
    {
        return new LedgerJournalEngine_Daily(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FormRun _formRun = null)
    {
        super(_formRun);

        // <GCN>
        if (LedgerParameters::isChineseVoucher_CN())
        {
            if (_formRun && _formRun.name() == formstr(LedgerJournalTransDaily_CN))
            {
                isSimpleMethod = NoYes::Yes;
            }
            else if (_formRun && formHasMethod(_formRun.args().caller(), identifierstr(isSimpleMethod_CN)))
            {
                isSimpleMethod = _formRun.args().caller().isSimpleMethod_CN();
            }
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment fee for a ledger line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger line being edited.
    /// </param>
    /// <param name="_custVendPaymJournalFee">
    /// The payment fee definition to use when calculating the fee.
    /// </param>
    public void updatePaymentFee(LedgerJournalTrans     _ledgerJournalTrans,
                                 CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        if (!_ledgerJournalTrans.amount())
        {
            return;
        }

        if (FormDataUtil::getFormDataSource(_ledgerJournalTrans))
        {
            this.dataSourceWrite(_ledgerJournalTrans);
        }

        this.calcPaymentFee(_ledgerJournalTrans);

        if (FormDataUtil::getFormDataSource(_custVendPaymJournalFee))
        {
            FormDataUtil::getFormDataSource(_custVendPaymJournalFee).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization from the vendor.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_tax1099Detail">The <c>Tax1099BoxDetail</c> record.</param>
    public void initFromVendTable(LedgerJournalTrans _ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        if (isConfigurationkeyEnabled(configurationkeynum(PublicSector)))
        {
            super(_ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(_ledgerJournalTrans);
        }

        // Only default the offset account when there is not a fixed offset account
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            if (vendTable.OffsetLedgerDimension != 0)
            {
                _ledgerJournalTrans.OffsetAccountType = vendTable.OffsetAccountType;

                if (vendTable.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    // need to merge the default ledger dimension from the VendTable with the appropiate dimensions
                    _ledgerJournalTrans.parmOffsetLedgerDimension(
                        _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(
                        vendTable.OffsetLedgerDimension,
                         _ledgerJournalTrans.getOffsetCompany()));

                    this.performFinTagDefaulting(_ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
                }
                else
                {
                    _ledgerJournalTrans.OffsetLedgerDimension = vendTable.OffsetLedgerDimension;
                }
            }
        }
        
        _ledgerJournalTrans.TaxWithholdGroup = vendTable.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts <c>LedgerJournalTrans</c> and optionally <c>LedgerJournalTrans_Project</c> fields in
    ///    response to a change in the <c>LedgerJournalTrans</c><c>OffsetAccount</c> value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project">
    ///    The <c>LedgerJournalTrans_Project</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    ///    The <c>LedgerJournalTrans_Asset</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset">
    /// The optional <c>LedgerJournalTrans_RAsset</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals">
    /// The optional <c>LedgerJournalTrans_RDeferrals</c> table record being modified.
    /// </param>
    /// <remarks>
    ///    This method should be called from the <c>modified</c> method in the <c>OffsetAccount</c> field of
    ///    the <c>LedgerJournalTrans</c> form data source. If there is no <c>LedgerJournalTrans_Project</c> or
    ///    <c>LedgerJournalTrans_Asset</c> data source on the form, null may be passed in.
    /// </remarks>
    public void offsetAccountModified(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null
        ,LedgerJournalTrans_RAsset     _ledgerJournalTrans_RAsset     = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null
        )
    {
        LedgerJournalTransExtensionTH    ledgerJournalTransExtensionTH;
        CustTable                        custTableForOffset;
        VendTable                        vendTableForOffset;

        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals);

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchParamMarked())
        {
            if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Vend && _ledgerJournalTrans.AccountType != LedgerJournalACType::Cust)
            {
                if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                {
                    vendTableForOffset              = this.findOffsetVendTable(_ledgerJournalTrans);
                    ledgerJournalTransExtensionTH   = _ledgerJournalTrans.ledgerJournalTransExtensionTH();
                    ledgerJournalTransExtensionTH.updateTaxBranchFromCustVendTable(vendTableForOffset);
                    _ledgerJournalTrans.packExtensionTable(ledgerJournalTransExtensionTH);
                }
                else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                {
                    custTableForOffset              = this.findOffsetCustTable(_ledgerJournalTrans);
                    ledgerJournalTransExtensionTH   = _ledgerJournalTrans.ledgerJournalTransExtensionTH();
                    ledgerJournalTransExtensionTH.updateTaxBranchFromCustVendTable(custTableForOffset);
                    _ledgerJournalTrans.packExtensionTable(ledgerJournalTransExtensionTH);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyModified</Name>
				<Source><![CDATA[
    public void companyModified(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset)
    {
        super(_ledgerJournalTrans, _ledgerJournalTrans_Asset);

        // When the company if modified, call currencyModified to update exchange rates on the modified journal transaction
        this.currencyModified(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>