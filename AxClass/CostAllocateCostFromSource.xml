<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocateCostFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostAllocateCostFromSource</c> class allocates cost from a <c>CostEntrySource</c> using the entries on
/// the parent event as a basis for the allocation.
/// </summary>
public class CostAllocateCostFromSource extends CostPostingRule
{
    CostMagnitude       magnitudeToAllocate;
    CostEntrySource     source;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmMagnitudeToAllocate</Name>
				<Source><![CDATA[
    public CostMagnitude parmMagnitudeToAllocate(CostMagnitude _magnitudeToAllocate = magnitudeToAllocate)
    {
        magnitudeToAllocate = _magnitudeToAllocate;

        return magnitudeToAllocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    public CostEntrySource parmSource(CostEntrySource _source = source)
    {
        source = _source;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(CostEventBase _event)
    {
        CostEntryBase               basis, entry;
        CostMagnitude               totalBasis, allocatedBasis, allocatedMagnitude, magnitude;
        Map                         costEntryMap = new Map(Types::Class, Types::Class);

        if (magnitudeToAllocate)
        {
            CostEventBase parentEvent = _event.parmParentEvent();
            CostEntryEnumerator basisEnumerator = parentEvent.getEntries();
            while (basisEnumerator.moveNext())
            {
                totalBasis += basisEnumerator.current().parmMagnitude();
            }
            if (totalBasis)
            {
                basisEnumerator.reset();
                while (basisEnumerator.moveNext())
                {
                    basis = basisEnumerator.current();
                    magnitude = CurrencyExchangeHelper::amount(magnitudeToAllocate - allocatedMagnitude - (totalBasis - allocatedBasis - basis.parmMagnitude()) / totalBasis * magnitudeToAllocate);
                    allocatedMagnitude += magnitude;
                    allocatedBasis += basis.parmMagnitude();
                    CostProductCostDescriptor descriptor = CostProductCostDescriptor::newFromDescriptor(basis.parmDescriptor(), source);
                    if (costEntryMap.exists(descriptor))
                    {
                        entry = costEntryMap.lookup(descriptor);
                        entry.parmMagnitude(entry.parmMagnitude() + magnitude);
                    }
                    else
                    {
                        entry = CostEntry::newCostEntry(_event, descriptor, magnitude);
                    }
                    costEntryMap.insert(descriptor, entry);
                }

                Enumerator costEntryMapEnumerator = costEntryMap.valueSet().getEnumerator();
                while (costEntryMapEnumerator.moveNext())
                {
                    _event.addEntry(costEntryMapEnumerator.current());
                }
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostAllocateCostFromSource construct()
    {
        return new CostAllocateCostFromSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSourceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// rates an instance of the <c>CostAllocateCostFromSource</c> class.
    /// </summary>
    /// <param name="_source">
    /// An instance of the <c>CostEntrySource</c> class.
    /// </param>
    /// <param name="_magnitude">
    /// The <c>CostMagnitude</c> to allocate.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostAllocateCostFromSource</c> class.
    /// </returns>
    public static CostAllocateCostFromSource newSourceAmount(CostEntrySource _source, CostMagnitude _magnitude)
    {
        CostAllocateCostFromSource  rule = CostAllocateCostFromSource::construct();

        rule.parmSource(_source);
        rule.parmMagnitudeToAllocate(_magnitude);

        return rule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
