<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashReport_ExcelBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class rCashReport_ExcelBase extends RunBaseBatch
{
    ComExcelDocument_RU document;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    protected void insertValue(Bookmark _cell, anytype _anyVal)
    {
        document.insertValue(_cell, _anyVal);
        this.parmProgress().incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    private boolean makeDocument()
    {
        str templateName = TemplateProvider_RU::getFor(this).get(this.templateName());

        if (!System.IO.File::Exists(templateName))
            return checkFailed(strfmt("@GLS116468", templateName));

        document = new ComExcelDocument_RU();

        return document.newFile(templateName, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #AviFiles
        this.progressInit("@GLS101318", this.totalCells(), #AviTransfer);

        if (this.makeDocument())
        {
            this.insertData();

            try
            {
                document.visible(true);
            }
            catch (Exception::Error)
            {
                const int safeCallRetryCount = 4;

                if (xSession::currentRetryCount() >= safeCallRetryCount)
                {
                    throw Exception::Error;
                }
                else
                {
                    const str safeCallNotifyMethod = 'notify';
                    const int safeCallTimeOut = 250;

                    infolog.clear(0);

                    infolog.addTimeOut(infolog, safeCallNotifyMethod, safeCallTimeOut);
                    infolog.wait();

                    retry;
                }
            }
        }

        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int cellCount = 10;
        return cellCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>