<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReturnSalesOrderRefund_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRReturnSalesOrderRefund_Adj</c> is an abstract child class of the <c>MCRReturnSalesOrderRefund</c> class
/// and it handles the sales order return refund adjustment logic.
/// </summary>
class McrReturnSalesOrderRefund_Adj extends MCRReturnSalesOrderRefund
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustExchangeCredit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reduces the credit applied to
    ///     the exchange order if there is a decrease in the refund credit on the return.
    /// </summary>
    /// <param name="_custPaymTotals_Return">
    /// The customer payment totals of the return.
    /// </param>
    protected void adjustExchangeCredit(MCRCustPaymTotals _custPaymTotals_Return)
    {
        SalesTable              salesTableExchange;
        MCRCustPaymTotals        custPaymTotals_Exch;
        AmountCur               onAcctPaymTotal_Exch;
        AmountCur               onAcctPaymTotal_Return;

        MCRCustPaymTable         custPaymTable_OA_Exch;
        boolean                 adjustExchangeOrder;
        MCRHoldCodeTrans         holdCodeTrans;

        // need to check if the decrease in the refund credit should
        // cause the credit applied to the exchange order to also be
        // reduced.
        if (salesTableRefundedTo.ReturnReplacementId
            && salesTableRefundedTo.mcrReturnSalesTable().ApplyCreditToExchange)
        {
            adjustExchangeOrder = true;
            salesTableExchange = SalesTable::find(salesTableRefundedTo.ReturnReplacementId);

            // dont adjust if past shipping or canceled
            if (salesTableExchange.SalesStatus != SalesStatus::Backorder)
            {
                adjustExchangeOrder = false;
            }

            // don't worry about adjusting the exchange payment if the customer
            // allows on account, otherwise it may need adjusting
            if (MCRCustTable::findByCustAccount(salesTableRefundedTo.InvoiceAccount).AllowOnAccount)
            {
                adjustExchangeOrder = false;
            }
        }

        if (adjustExchangeOrder)
        {
            custPaymTotals_Exch = MCRCustPaymTotals::construct(salesTableExchange.TableId,
                                                                salesTableExchange.RecId);

            onAcctPaymTotal_Exch = custPaymTotals_Exch.getTotalPaymAmount_OnAccount();
            onAcctPaymTotal_Return = _custPaymTotals_Return.getTotalPaymAmount_OnAccount();

            // if not enough return credit to cover exchange any more.
            if (onAcctPaymTotal_Exch > abs(onAcctPaymTotal_Return))
            {
                // need to reduce return credit applied to the return (reduce the
                // exchange on acct pay method amount) and put the exchange on
                // hold
                select forupdate custPaymTable_OA_Exch
                    where  custPaymTable_OA_Exch.RefTableId    == salesTableExchange.TableId
                        && custPaymTable_OA_Exch.RefRecId      == salesTableExchange.RecId
                        && custPaymTable_OA_Exch.CustPaymType  == MCRCustPaymType::OnAccount;

                ttsbegin;

                // If on account payment exists and it has not been fully posted
                // then adust it
                if (custPaymTable_OA_Exch &&
                   custPaymTable_OA_Exch.Amount != custPaymTable_OA_Exch.PostedAmount)
                {
                    if (abs(onAcctPaymTotal_Return) < abs(custPaymTable_OA_Exch.PostedAmount))
                    {
                        custPaymTable_OA_Exch.Amount = custPaymTable_OA_Exch.PostedAmount;
                    }
                    else
                    {
                        custPaymTable_OA_Exch.Amount = abs(onAcctPaymTotal_Return);
                    }

                    if (custPaymTable_OA_Exch.validateWrite())
                    {
                        custPaymTable_OA_Exch.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }

                    custPaymTotals_Exch.processPayments(MCRProcessPaymAction::PostOnlyPrepays);

                    // check if an exchange balance hold already exists and if not put it on
                    // hold.
                    if (!MCRHoldCodeTrans::isOrderOnExchBalanceHold(salesTableExchange.SalesId))
                    {
                        holdCodeTrans.insertExchangePaymBalanceHold(salesTableExchange.SalesId);
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustReturnCredit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the return credit when disposition code with a
    ///     miscellaneous charge has caused the sales total to change.
    /// </summary>
    void adjustReturnCredit()
    {
        MCRCustPaymTotals       custPaymTotals;
        AmountCur               refundPaymTotal;
        MCRSalesOrderTotals     salesOrderTotals;
        AmountCur               currentOrderAmt;
        boolean                 refundDecreased;

        custPaymTotals = MCRCustPaymTotals::construct(salesTableRefundedTo.TableId,
                                                      salesTableRefundedTo.RecId);

        refundPaymTotal = custPaymTotals.getTotalPaymAmount();

        salesOrderTotals = new MCRSalesOrderTotals(salesTableRefundedTo);
        currentOrderAmt   = salesOrderTotals.getTotalOrder();

        if (refundPaymTotal == currentOrderAmt)
        {
            return;
        }

        if (refundPaymTotal > currentOrderAmt)
        {
            this.increaseRefund(currentOrderAmt);
        }
        else
        {
            this.reduceRefund(refundPaymTotal);
            refundDecreased = true;
        }

        salesTableRefundedTo.reread();
        salesTableRefundedTo.updateBackStatus();

        if (refundDecreased)
        {
            this.adjustExchangeCredit(custPaymTotals);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPreviousRefundAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines what amounts were previously refunded
    ///     for a given sales order and to which payment methods
    ///     and then loads the results in a temporary <c>CustPaymTable</c> buffer.
    /// </summary>
    /// <returns>
    /// A  <c>CustPaymTable</c> table buffer containing the previously refunded amounts and payment methods.
    /// </returns>
    protected MCRCustPaymTable calcPreviousRefundAmounts()
    {
        MCRCustPaymTable        custPaymTable;
        SalesTable              returnSalesTable;
        MCRReturnSalesTable     mcrReturnSalesTable;
        // Make it a temp table
        mcrCustPaymTableTmp.setTmp();

        // Loop over all returns for the from sales order.
        while select SalesId from returnSalesTable
            join custPaymTable // Load payment records for each return into the temp MCRCustPaymTable.
            where custPaymTable.RefTableId == returnSalesTable.TableId
               && custPaymTable.RefRecId == returnSalesTable.RecId
            exists join mcrReturnSalesTable
            where mcrReturnSalesTable.SalesTable == returnSalesTable.RecId
                && mcrReturnSalesTable.OriginalSalesId == salesTableRefundedFrom.SalesId
        {
            // Check if already created refund for this pay method.
            select forupdate mcrCustPaymTableTmp
                where mcrCustPaymTableTmp.TenderTypeId == custPaymTable.TenderTypeId
                    && mcrCustPaymTableTmp.CardTypeId == custPaymTable.CardTypeId
                    && mcrCustPaymTableTmp.PaymInfoRecId == custPaymTable.PaymInfoRecId
                    && mcrCustPaymTableTmp.PaymInfoTableId == custPaymTable.PaymInfoTableId;

            ttsbegin;
            // If it already existsadd the amount & update the temp table.
            if (mcrCustPaymTableTmp)
            {
                mcrCustPaymTableTmp.Amount += custPaymTable.Amount;
                if (mcrCustPaymTableTmp.validateWrite())
                {
                    mcrCustPaymTableTmp.update();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
            else
            {
                mcrCustPaymTableTmp.data(custPaymTable);

                if (mcrCustPaymTableTmp.validateWrite())
                {
                    mcrCustPaymTableTmp.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
            ttscommit;
        }
        return mcrCustPaymTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustPaymTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a refund payment record.
    /// </summary>
    /// <param name="_amount">
    /// The amount to create the refund for.
    /// </param>
    /// <param name="_mcrCustPaymType">
    /// The payment type of the refund.
    /// </param>
    /// <param name="_mcrAdvanceCredit">
    /// Indicates the refund is an advance credit.
    /// </param>
    /// <param name="_mcrCustPaymTableRefundFrom">
    /// The payment record used as a template when creating the new payment record.
    /// </param>
    /// <param name="_mcrCustPaymTableRefundTo">
    /// The refund payment to set.
    /// </param>
    void createCustPaymTable(AmountCur          _amount,
                            MCRCustPaymType     _mcrCustPaymType,
                            MCRAdvanceCredit    _mcrAdvanceCredit,
                            MCRCustPaymTable    _mcrCustPaymTableRefundFrom,
                            MCRCustPaymTable    _mcrCustPaymTableRefundTo)
    {
        MCRCustPaymTable     mcrCustPaymTable;
        // if payment method is already being refunded to
        // add the new amount and update the record otherwise,
        // create a new payment record.
        select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTableRefundedTo.TableId &&
                  mcrCustPaymTable.RefRecId == salesTableRefundedTo.RecId &&
                  mcrCustPaymTable.TenderTypeId == _mcrCustPaymTableRefundFrom.TenderTypeId &&
                  mcrCustPaymTable.PaymInfoRecId == _mcrCustPaymTableRefundFrom.PaymInfoRecId &&
                  mcrCustPaymTable.PaymInfoTableId == _mcrCustPaymTableRefundFrom.PaymInfoTableId &&
                  mcrCustPaymTable.CardTypeId == _mcrCustPaymTableRefundFrom.CardTypeId;

        ttsbegin;
        if (mcrCustPaymTable)
        {
            mcrCustPaymTable.Amount += _amount;
            if (mcrCustPaymTable.validateWrite())
            {
                mcrCustPaymTable.update();

                if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::RefundCheck)
                {
                    MCRRCSettlementTable refundCheckSettlementTable = MCRRCSettlementTable::findByCustPaymRecID(mcrCustPaymTable.RecId, true);

                    if (refundCheckSettlementTable)
                    {
                        refundCheckSettlementTable.MCRSettlementAmount -= _amount;
                        refundCheckSettlementTable.update();
                    }
                }
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        else
        {
            _mcrCustPaymTableRefundTo.Amount = _amount;
            // Use the invoice account instead the cust account
            _mcrCustPaymTableRefundTo.CustAccount = salesTableRefundedTo.InvoiceAccount;
            _mcrCustPaymTableRefundTo.RefRecId = salesTableRefundedTo.RecId;
            _mcrCustPaymTableRefundTo.RefTableId = salesTableRefundedTo.TableId;
            _mcrCustPaymTableRefundTo.PaymInfoRecId = _mcrCustPaymTableRefundFrom.PaymInfoRecId;
            _mcrCustPaymTableRefundTo.PaymInfoTableId = _mcrCustPaymTableRefundFrom.PaymInfoTableId;
            _mcrCustPaymTableRefundTo.CardTypeId = _mcrCustPaymTableRefundFrom.CardTypeId;
            _mcrCustPaymTableRefundTo.TenderTypeId = _mcrCustPaymTableRefundFrom.TenderTypeId;
            _mcrCustPaymTableRefundTo.CustPaymType = _mcrCustPaymType;
            _mcrCustPaymTableRefundTo.Channel = _mcrCustPaymTableRefundFrom.Channel;

            if (_mcrAdvanceCredit
                && _mcrCustPaymTableRefundTo.function() != RetailTenderFunction::Customer)
            {
                _mcrCustPaymTableRefundTo.IsPrepay = NoYes::Yes;
            }

            _mcrCustPaymTableRefundTo.initFromRefTrans();

            // Call validate write before inserting the record into the
            // cust paym table to ensure that the record is valid.
            if (_mcrCustPaymTableRefundTo.validateWrite())
            {
                _mcrCustPaymTableRefundTo.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefund</Name>
				<Source><![CDATA[
    void createRefund(AmountCur _refundAmount)
    {
        MCRCustPaymTotals        custPaymTotals;

        super(_refundAmount);

        custPaymTotals = MCRCustPaymTotals::construct(salesTableRefundedTo.TableId, salesTableRefundedTo.RecId);
        custPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the return credit when disposition code with a
    ///     miscellaneous charge has caused the sales total to decrease.
    /// </summary>
    /// <param name="_refundAmount">
    /// The amount to refund.
    /// </param>
    void increaseRefund(AmountCur _refundAmount)
    {
        this.createRefund(_refundAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceRefund</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the return credit when disposition code with a
    ///     miscellaneous charge has caused the sales total to increase.
    /// </summary>
    /// <param name="_refundPaymTotal">
    /// The total refund amount.
    /// </param>
    void reduceRefund(AmountCur _refundPaymTotal)
    {
        MCRPaymentAdjustments paymentAdjustments;

        paymentAdjustments = MCRPaymentAdjustments::construct(_refundPaymTotal, salesTableRefundedTo);

        paymentAdjustments.processPaymentAdjustments();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>