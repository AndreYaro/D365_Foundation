<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProductionAndShopFloorJobIdNumberSeqHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProductionAndShopFloorJobIdNumberSeqHelper</c> class is responsible for production and shopfloor job identification number sequence.
/// </summary>
public final class ProductionAndShopFloorJobIdNumberSeqHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGiveOverlappingNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if number sequence generating job IDs for the Production module, the Manufacturing execution module, and the Time and attendance module
    /// result in job identifications that overlap across number sequences.
    /// </summary>
    /// <returns>true if job identifications overlap across number sequences; otherwise, false.</returns>
    [Hookable(false)]
    public final static boolean canGiveOverlappingNumbers()
    {
        NumberSequenceReference manufacturingExecutionParameters = JmgParameters::numRefIpcActivityId();
        NumberSequenceReference productionParameters = ProdParameters::numRefProdJobId();

        boolean areJobIdsOverlap = ProductionAndShopFloorJobIdNumberSeqHelper::checkCanGiveOverlappingNumbers(manufacturingExecutionParameters, productionParameters);

        if (areJobIdsOverlap)
        {
            var logInformationSerializer = new SysInstrumentationEventDataJsonSerializer();
            
            logInformationSerializer.setValue('AreJobIdsOverlapAcrossNumberSequences', enum2Str(areJobIdsOverlap));
            logInformationSerializer.setValue('ManExecutionParameterNumberSequenceReference', int642Str(manufacturingExecutionParameters.RecId));
            logInformationSerializer.setValue('ProdParameterNumberSequenceReference', int642Str(productionParameters.RecId));
            logInformationSerializer.setValue('DataArea', int642str(CompanyInfo::findDataArea(curext()).RecId));

            SysInstrumentationLoggerFactory::CreateLogger(classStr(ProductionAndShopFloorJobIdNumberSeqHelper))
                            .logInformation(logInformationSerializer.toString());
        }

        return areJobIdsOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJobIdNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the given number sequence reference is valid for production and shopfloor job identification number sequence.
    /// </summary>
    /// <param name = "_numSeqReference">Number sequence reference to be validated as production and shopfloor job identification.</param>
    /// <returns>
    /// true if the given number sequence reference is valid for production and shopfloor job identification number sequence; otherwise, false.</returns>
    [Hookable(false)]
    internal final static boolean isValidJobIdNumberSequence(NumberSequenceReference _numSeqReference)
    {
        boolean isValid = true;
            
        NumberSequenceDatatype numberSequenceDatatype = NumberSequenceDatatype::find(_numSeqReference.NumberSequenceDatatype);

        switch(numberSequenceDatatype.DatatypeId)
        {
            case extendedTypeNum(ProdJobId):
                isValid = !ProductionAndShopFloorJobIdNumberSeqHelper::checkCanGiveOverlappingNumbers(_numSeqReference, JmgParameters::numRefIpcActivityId());
                break;

            case extendedTypeNum(JmgJobId):
                isValid = !ProductionAndShopFloorJobIdNumberSeqHelper::checkCanGiveOverlappingNumbers(_numSeqReference, ProdParameters::numRefProdJobId());
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureProductionAndShopFloorJobIdNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures production and shopfloor job Id number sequence reference is created in case
    /// it was not done as part of the partition initialization.
    /// </summary>
    [Hookable(false)]
    internal final static void ensureProductionAndShopFloorJobIdNumberSequence()
    {
        NumberSeqReference::findReference(extendedTypeNum(ProductionAndShopFloorJobId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNumberSequenceDatatype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove number sequence data type from the number sequence query.
    /// </summary>
    /// <param name = "_qr">The number sequence query.</param>
    /// <param name = "_datatypeId">The number sequence data type Id.</param>
    [Hookable(false)]
    internal final static void removeNumberSequenceDatatype(QueryRun _qr, ExtendedTypeId _datatypeId)
    {
        QueryBuildDataSource qbds = _qr.query().dataSourceTable(tableNum(NumberSequenceDatatype));
        SysQuery::findOrCreateRange(qbds, fieldNum(NumberSequenceDatatype, DatatypeId)).value(strFmt('!%1', _datatypeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanGiveOverlappingNumbers</Name>
				<Source><![CDATA[
    private final static boolean checkCanGiveOverlappingNumbers(NumberSequenceReference _firstNumSeqReference, NumberSequenceReference _secondNumSeqReference)
    {
        const NumberSequence64Range NumSeqRange = 0;

        if (_firstNumSeqReference.NumberSequenceId == _secondNumSeqReference.NumberSequenceId)
        {
            return false;
        }
        
        NumberSequenceFormat firstNumSeqFormat = _firstNumSeqReference.numberSequenceTable().Format;
        NumberSequenceFormat secondNumSeqFormat = _secondNumSeqReference.numberSequenceTable().Format;

        return NumberSeq::numInsertFormatV2(NumSeqRange, firstNumSeqFormat) == NumberSeq::numInsertFormatV2(NumSeqRange, secondNumSeqFormat);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>