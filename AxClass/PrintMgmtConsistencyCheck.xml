<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtConsistencyCheck</c> class performs consistency checks for print management tables.
/// </summary>
class PrintMgmtConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDocumentReferences</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the records referenced by print management actually exist.
    /// </summary>
    /// <remarks>
    ///    If the records don't exist they will be removed from the print management tables if the
    ///    <c>CheckFix</c> enumeration value is set to <c>CheckFix::Fix</c>.
    /// </remarks>
    private void checkDocumentReferences()
    {
        #Admin
        PrintMgmtDocInstance printMgmtDocInstance, printMgmtDocInstanceBad;
        Query query;
        QueryBuildDataSource qbdsPrintMgmtDocInstance;
        QueryBuildDataSource qbdsRelatedTable;
        QueryRun queryRun;
        ;

        // Group print management references by linked table so that
        // verification query is created only once for each of unique linked table / recId combinations.
        while select ReferencedTableId, ReferencedRecId
            from printMgmtDocInstance
            group by ReferencedTableId, ReferencedRecId
        {
            if (printMgmtDocInstance.ReferencedTableId != 0)
            {
                // Find orphaned print management references among the references linked to current table.
                // Following SQL query is used to do this:

                // select * from PrintMgmtDocInstance (updlock) where
                //     PrintMgmtDocInstance.ReferencedTableId = <table id> and
                //     not exists (select * from <table> where <table>.RecId = PrintMgmtDocInstance.ReferencedRecId)

                query = new Query();
                qbdsPrintMgmtDocInstance = query.addDataSource(tablenum(PrintMgmtDocInstance));
                qbdsPrintMgmtDocInstance.addRange(fieldnum(PrintMgmtDocInstance, ReferencedTableId)).value(SysQuery::value(printMgmtDocInstance.ReferencedTableId));

                qbdsRelatedTable = qbdsPrintMgmtDocInstance.addDataSource(printMgmtDocInstance.ReferencedTableId);
                qbdsRelatedTable.addLink(fieldnum(PrintMgmtDocInstance, ReferencedRecId), fieldnum(Common, RecId));
                qbdsRelatedTable.joinMode(JoinMode::NoExistsJoin);

                if (this.checkFix() == CheckFix::Fix)
                {
                    // Lock records if we may want to delete them.
                    qbdsPrintMgmtDocInstance.update(true);
                    ttsbegin;
                }
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    printMgmtDocInstanceBad = queryRun.get(tablenum(PrintMgmtDocInstance));
                    warning(strfmt("@SYS110317", printMgmtDocInstance.ReferencedTableId, printMgmtDocInstanceBad.RecId));

                    if (this.checkFix() == CheckFix::Fix)
                    {
                        // Delete orphaned document reference.
                        printMgmtDocInstanceBad.delete();
                        this.updateCorrected(2); // this.kernelCheckTable() also finds and counts this error
                    }
                }
                if (this.checkFix() == CheckFix::Fix)
                {
                    ttscommit;
                }
            }
        }
        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateDefaultSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that duplicate default print management settings do not exist.
    /// </summary>
    /// <remarks>
    ///    If duplicate default print management settings exist they will be removed from the print management
    ///    tables if the <c>CheckFix</c> enumeration value is set to <c>CheckFix::Fix</c>.
    /// </remarks>
    private void checkDuplicateDefaultSettings()
    {
        PrintMgmtSettings printMgmtSettings;
        RecId previousParentId;
        ;

        while select forupdate ParentId
            from printMgmtSettings
            order by printMgmtSettings.ParentId
            where (printMgmtSettings.Description == '')
        {
            if (previousParentId == printMgmtSettings.ParentId)
            {
                warning("@SYS110599");

                // We have a duplicate instance so remove it
                if (this.checkFix() == CheckFix::Fix)
                {
                    ttsbegin;
                    printMgmtSettings.delete();
                    this.updateCorrected();
                    ttscommit;
                }
            }

            previousParentId = printMgmtSettings.ParentId;
        }

         this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvalidConditionalSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that conditional print management settings have an associated query.
    /// </summary>
    /// <remarks>
    ///    If conditional print management settings do not have an associated query, they will be removed from
    ///    the print management tables if the <c>CheckFix</c> enumeration value is set to <c>CheckFix::Fix</c>.
    /// </remarks>
    private void checkInvalidConditionalSettings()
    {
        PrintMgmtSettings printMgmtSettings;
        ;

        // Ensure that queries exist for settings that have names
        while select forupdate QueryPacked
            from printMgmtSettings
            where (printMgmtSettings.Description != '')
        {
            if (printMgmtSettings.QueryPacked == connull())
            {
                warning("@SYS110600");

                if (this.checkFix() == CheckFix::Fix)
                {
                    ttsbegin;
                    // Delete invalid settings.
                    printMgmtSettings.delete();
                    this.updateCorrected();
                    ttscommit;
                }
            }
        }

         this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the consistency check on the print management tables.
    /// </summary>
    /// <remarks>
    ///    This is started by the consistency check framework.
    /// </remarks>
    public void run()
    {
        this.kernelCheckTable(tablenum(PrintMgmtDocInstance));
        // The following two checks have been intentionally left out:
        // 1) PrintMgmtSettings has a required field (Description) which is blank for
        // the default settings so kernelCheckTable() will always find a problem.
        // 2) PrintMgmtIdentificationText was left out due to lack of value in the check.
        // this.kernelCheckTable(tablenum(PrintMgmtSettings));
        // this.kernelCheckTable(tablenum(PrintMgmtIdentificationText));

        this.checkDocumentReferences();
        this.checkInvalidConditionalSettings();
        this.checkDuplicateDefaultSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the description that appears on the consistency check form.
    /// </summary>
    /// <returns>
    ///    The description that appears on the consistency check form.
    /// </returns>
    static ClassDescription description()
    {
        return "@SYS54502";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the help text that appears on the consistency check form.
    /// </summary>
    /// <returns>
    ///    The help text that appears on the consistency check form.
    /// </returns>
    static HelpTxt helpText()
    {
        return "@SYS110316";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();
        info.parmRetriesOnFailure(1);
        return info;
    }
    
]]></Source>
			</Method>            
		</Methods>
	</SourceCode>
</AxClass>