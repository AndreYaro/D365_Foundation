<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceTrackingSummaryUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetSourceTrackingSummaryUpdate</c> is responsible for performing bulk updates
/// to the <c>BudgetSourceTrackingSummary</c> table.
/// </summary>
internal final class BudgetSourceTrackingSummaryUpdate
{
    private BudgetSourceTrackingSummaryRebuildTmp trackingSummaryDetailsToRebuild;
    private BudgetControlInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetSourceTrackingSummaryUpdate construct(BudgetSourceTrackingSummaryRebuildTmp _trackingSummaryDetailsToRebuild)
    {
        BudgetSourceTrackingSummaryUpdate summaryUpdate = new BudgetSourceTrackingSummaryUpdate();
        summaryUpdate.trackingSummaryDetailsToRebuild = _trackingSummaryDetailsToRebuild;

        return summaryUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSummaryBalances</Name>
				<Source><![CDATA[
    internal static void rebuildSummaryBalances(BudgetSourceTrackingSummaryRebuildTmp _trackingSummaryDetailsToRebuild)
    {
        var summaryUpdate = BudgetSourceTrackingSummaryUpdate::construct(_trackingSummaryDetailsToRebuild);
        summaryUpdate.reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reprocessSummaryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the budget control summary balance reprocessing.
    /// </summary>
    internal void reprocessSummaryBalance()
    {
        BudgetSourceTrackingSummary trackingSummary;
        BudgetSourceDetailSummaryView detailSummaryView;

        ttsbegin;

        trackingSummary.skipDataMethods(true);
        trackingSummary.skipDeleteActions(true);

        delete_from trackingSummary
            exists join trackingSummaryDetailsToRebuild
                where trackingSummaryDetailsToRebuild.TrackingDate == trackingSummary.TrackingDate
                    && trackingSummaryDetailsToRebuild.Category == trackingSummary.Category
                    && trackingSummaryDetailsToRebuild.BudgetModelId == trackingSummary.BudgetModelId
                    && trackingSummaryDetailsToRebuild.BudgetModelSubModelId == trackingSummary.BudgetModelSubModelId
                    && trackingSummaryDetailsToRebuild.BudgetModelType == trackingSummary.BudgetModelType
                    && trackingSummaryDetailsToRebuild.BudgetModelDataAreaId == trackingSummary.BudgetModelDataAreaId
                    && trackingSummaryDetailsToRebuild.BudgetControlLedgerDimension == trackingSummary.BudgetControlLedgerDimension
                    && trackingSummaryDetailsToRebuild.PrimaryLedger == trackingSummary.PrimaryLedger;

        insert_recordset trackingSummary (
                    TrackingDate
                    , Category
                    , BudgetModelId
                    , BudgetModelSubModelId
                    , BudgetModelType
                    , BudgetModelDataAreaId
                    , PrimaryLedger
                    , BudgetControlLedgerDimension
                    , IsDraft
                    , IsCarryForward
                    , IsSimulation
                    , IntegratorType
                    , AccountingCurrencyAmount
                )
            select TrackingDate
                    , Category
                    , BudgetModelId
                    , BudgetModelSubModelId
                    , BudgetModelType
                    , BudgetModelDataAreaId
                    , PrimaryLedger
                    , BudgetControlLedgerDimension
                    , IsDraft
                    , IsCarryForward
                    , IsSimulation
                    , IntegratorType
                    , AccountingCurrencyAmount from detailSummaryView
            exists join trackingSummaryDetailsToRebuild
                where trackingSummaryDetailsToRebuild.TrackingDate == detailSummaryView.TrackingDate
                    && trackingSummaryDetailsToRebuild.Category == detailSummaryView.Category
                    && trackingSummaryDetailsToRebuild.BudgetModelId == detailSummaryView.BudgetModelId
                    && trackingSummaryDetailsToRebuild.BudgetModelSubModelId == detailSummaryView.BudgetModelSubModelId
                    && trackingSummaryDetailsToRebuild.BudgetModelType == detailSummaryView.BudgetModelType
                    && trackingSummaryDetailsToRebuild.BudgetModelDataAreaId == detailSummaryView.BudgetModelDataAreaId
                    && trackingSummaryDetailsToRebuild.BudgetControlLedgerDimension == detailSummaryView.BudgetControlLedgerDimension
                    && trackingSummaryDetailsToRebuild.PrimaryLedger == detailSummaryView.PrimaryLedger;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSummaryBalancesWithRebuildSummaryTmp</Name>
				<Source><![CDATA[
    internal static void rebuildSummaryBalancesWithRebuildSummaryTmp(BudgetControlRebuildSummaryTmp _budgetControlRebuildSummaryTmp, BudgetControlInstrumentationLogger _logger = null)
    {
        BudgetSourceTrackingSummaryUpdate summaryUpdate = new BudgetSourceTrackingSummaryUpdate();
        if (!_logger)
        {
            summaryUpdate.logger = _logger;
        }

        using (var activityContext = summaryUpdate.getLogger().dataMaintenance().rebuildSummaryBalance())
        {
            summaryUpdate.reprocessSummaryBalanceWithRebuildSummaryTmp(_budgetControlRebuildSummaryTmp, activityContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogger</Name>
				<Source><![CDATA[
    private BudgetControlInstrumentationLogger getLogger()
    {
        if (!this.logger)
        {
            this.logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlBudgetSourceRemover));
        }

        return this.logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBucketizedCountOfImpactedRecords</Name>
				<Source><![CDATA[
    private void logBucketizedCountOfImpactedRecords(SysInstrumentationActivityContext _context, int _count, str _rebuildType)
    {
        if (this.logger && _context && _count)
        {
            this.getLogger().logBucketizedCountWithTableNameType(_context, _count, tableStr(BudgetSourceTrackingSummary), _rebuildType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reprocessSummaryBalanceWithRebuildSummaryTmp</Name>
				<Source><![CDATA[
    private void reprocessSummaryBalanceWithRebuildSummaryTmp(BudgetControlRebuildSummaryTmp _budgetControlRebuildSummaryTmp, SysInstrumentationActivityContext _context = null)
    {
        BudgetSourceTrackingSummary trackingSummary;
        BudgetSourceDetailSummaryView detailSummaryView;

        BudgetControlDetailSummaryRebuildCheckView budgetControlDetailSummaryRebuildCheckView;
        BudgetControlTrackingSummaryRebuildCheckView budgetControlTrackingSummaryRebuildCheckView;

        EnumId enumId = enumNum(BudgetControlSummaryUpdateType);

        ttsbegin;

        trackingSummary.skipDataMethods(true);
        trackingSummary.skipDeleteActions(true);

        delete_from trackingSummary
            exists join _budgetControlRebuildSummaryTmp
                where _budgetControlRebuildSummaryTmp.TrackingSummaryRecId == trackingSummary.RecId
                    && _budgetControlRebuildSummaryTmp.SummaryUpdateType == BudgetControlSummaryUpdateType::Delete;

        this.logBucketizedCountOfImpactedRecords(_context, trackingSummary.RowCount(), enum2Symbol(enumId, BudgetControlSummaryUpdateType::Delete));

        update_recordset trackingSummary
            setting AccountingCurrencyAmount = _budgetControlRebuildSummaryTmp.AccountingCurrencyAmount
            join _budgetControlRebuildSummaryTmp
                where _budgetControlRebuildSummaryTmp.TrackingSummaryRecId == trackingSummary.RecId
                    && _budgetControlRebuildSummaryTmp.SummaryUpdateType == BudgetControlSummaryUpdateType::Update;

        this.logBucketizedCountOfImpactedRecords(_context, trackingSummary.RowCount(), enum2Symbol(enumId, BudgetControlSummaryUpdateType::Update));

        insert_recordset trackingSummary (
                    TrackingDate
                    , Category
                    , BudgetModelId
                    , BudgetModelSubModelId
                    , BudgetModelType
                    , BudgetModelDataAreaId
                    , PrimaryLedger
                    , BudgetControlLedgerDimension
                    , IsDraft
                    , IsCarryForward
                    , IsSimulation
                    , IntegratorType
                    , AccountingCurrencyAmount)
            select TrackingDate
                    , Category
                    , BudgetModelId
                    , BudgetModelSubModelId
                    , BudgetModelType
                    , BudgetModelDataAreaId
                    , PrimaryLedger
                    , BudgetControlLedgerDimension
                    , IsDraft
                    , IsCarryForward
                    , IsSimulation
                    , IntegratorType
                    , AccountingCurrencyAmount
            from _budgetControlRebuildSummaryTmp
                where _budgetControlRebuildSummaryTmp.TrackingSummaryRecId == 0
                        && _budgetControlRebuildSummaryTmp.SummaryUpdateType == BudgetControlSummaryUpdateType::Insert;

        this.logBucketizedCountOfImpactedRecords(_context, trackingSummary.RowCount(), enum2Symbol(enumId, BudgetControlSummaryUpdateType::Insert));

        ttscommit;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>