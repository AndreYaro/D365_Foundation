<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValuesConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductAttributeValuesConsistencyCheck</c> class checks for and fixes inconsistencies in the product attribute values.
/// It detects value records that are referenced by multiple product attribute values, and separates the references by cloning the values.
/// </summary>
internal final class EcoResProductAttributeValuesConsistencyCheck extends SysConsistencyCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean doUpdate = this.checkFix() == CheckFix::Fix;
        int numFixed = this.updateEcoResValueReferences(doUpdate);

        if (doUpdate)
        {
            this.updateCorrected(numFixed);
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:Description_EcoResProductAttributeValuesConsistencyCheck";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@SCM:HelpText_EcoResProductAttributeValuesConsistencyCheck";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(EcoResCategoryConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEcoResValueReferences</Name>
				<Source><![CDATA[
    private int updateEcoResValueReferences(boolean _doUpdate)
    {
        int numFixed = 0;

        ListEnumerator attributeValueRecIdListSharingValuesEnumerator = this.getProductAttributeValueRecIdListSharingValues().getEnumerator();

        while (attributeValueRecIdListSharingValuesEnumerator.moveNext())
        {
            EcoResAttributeValue ecoResAttributeValue = EcoResAttributeValue::find(attributeValueRecIdListSharingValuesEnumerator.current(), _doUpdate);

            if (ecoResAttributeValue)
            {
                if (!_doUpdate)
                {
                    this.reportInconsistentValueReference(ecoResAttributeValue);
                }
                else if (this.fixAttributeValueReference(ecoResAttributeValue))
                {
                    numFixed++;
                }
            }
        }

        return numFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductAttributeValueRecIdListSharingValues</Name>
				<Source><![CDATA[
    private List getProductAttributeValueRecIdListSharingValues()
    {
        List attributeValueRecIdListSharingValues = new List(Types::Int64);
        EcoResProductAttributeValue attributeValueRecord;
        EcoResProductAttributeValue otherAttributeValueRecord;

        while select RecId from attributeValueRecord
            exists join otherAttributeValueRecord
            where attributeValueRecord.Value == otherAttributeValueRecord.Value
                && attributeValueRecord.RecId != otherAttributeValueRecord.RecId
        {
            attributeValueRecIdListSharingValues.addEnd(attributeValueRecord.RecId);
        }

        return attributeValueRecIdListSharingValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportInconsistentValueReference</Name>
				<Source><![CDATA[
    private void reportInconsistentValueReference(EcoResAttributeValue _ecoResAttributeValue)
    {
        EcoResAttribute attribute = EcoResAttribute::find(_ecoResAttributeValue.Attribute);
        EcoResProduct product = EcoResProduct::find(EcoResProductInstanceValue::find(_ecoResAttributeValue.InstanceValue).Product);

        warning(strFmt("@SCM:Warning_EcoResProductAttributeValuesConsistencyCheck_Check", attribute.Name, product.DisplayProductNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixAttributeValueReference</Name>
				<Source><![CDATA[
    private boolean fixAttributeValueReference(EcoResAttributeValue _ecoResAttributeValue)
    {
        EcoResValue ecoResValue = EcoResValue::find(_ecoResAttributeValue.Value);
        
        if (ecoResValue)
        {
            RefRecId oldValueRecordRecId = _ecoResAttributeValue.Value;

            ttsbegin;
            _ecoResAttributeValue.Value = ecoResValue.pcDuplicate();
            _ecoResAttributeValue.update();
            ttscommit;

            warning(strFmt("@SCM:Warning_EcoResProductAttributeValuesConsistencyCheck_Fix", oldValueRecordRecId, _ecoResAttributeValue.RecId));

            return true;
        }
        else
        {
            warning(strFmt("@SCM:Warning_EcoResProductAttributeValuesConsistencyCheck_Fix_MissingEcoResValue", _ecoResAttributeValue.Value, _ecoResAttributeValue.RecId));
            
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>