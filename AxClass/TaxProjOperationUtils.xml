<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxProjOperationUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This util class handles any tax operations with project operation transaction.
/// </summary>
public final class TaxProjOperationUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOriginalActualIdForReversing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original actual guid for reversing transaction.
    /// </summary>
    /// <param name = "_actualId">The actual id.</param>
    /// <returns>The original actual guid.</returns>
    internal static guid getOriginalActualIdForReversing(guid _actualId)
    {
        return ProjCDSTransactionRelationshipImport::findOpposingTransactionId(
            _actualId,
            ProjCDSConstants::TransactionRoleString_STR_Reversing,
            ProjCDSConstants::TransactionRoleString_Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalActualIdForReplacing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original actual guid for replacing transaction.
    /// </summary>
    /// <param name = "_actualId">The actual id.</param>
    /// <returns>The original actual guid.</returns>
    internal static guid getOriginalActualIdForReplacing(guid _actualId)
    {
        return ProjCDSTransactionRelationshipImport::findOpposingTransactionId(
            _actualId,
            ProjCDSConstants::TransactionRoleString_Replacing,
            ProjCDSConstants::TransactionRoleString_Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the project integration journal line is credit note.
    /// </summary>
    /// <param name = "_line">The <c>ProjAdvancedJournalLine</c> record.</param>
    /// <returns>true if the project integration journal line is credit note; otherwise, false.</returns>
    internal static boolean isCreditNote(ProjAdvancedJournalLine _line)
    {
        ProjCDSActualsImport actualsImport = ProjCDSActualsImport::findByAdvancedJournalLine(_line.RecId);
        guid actualIdOrig = TaxProjOperationUtils::getOriginalActualIdForReversing(actualsImport.ActualId);

        return actualIdOrig ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original <c>ProjAdvancedJournalLine</c> related to the current record.
    /// </summary>
    /// <param name = "_line">The <c>ProjAdvancedJournalLine</c> record.</param>
    /// <returns>The <c>ProjAdvancedJournalLine</c> record.</returns>
    internal static ProjAdvancedJournalLine getOrigProjAdvancedJournalLine(ProjAdvancedJournalLine _line)
    {
        ProjAdvancedJournalLine origProjAdvancedJournalLine;

        ProjCDSActualsImport actualsImport = ProjCDSActualsImport::findByAdvancedJournalLine(_line.RecId);
        guid actualIdOrig = TaxProjOperationUtils::getOriginalActualIdForReversing(actualsImport.ActualId);

        if (actualIdOrig)
        {
            ProjCDSActualsImport projCDSActualsImportOrig = ProjCDSActualsImport::findByActualId(actualIdOrig);
            origProjAdvancedJournalLine = ProjAdvancedJournalLine::find(projCDSActualsImportOrig.ProjAdvancedJournalLine);
        }

        return origProjAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recomputes taxes and resets distributions when tax information has been changed and
    /// tax uncommitted records already exist for the provided project advanced journal line.
    /// </summary>
    /// <param name="_projAdvancedJournalLine"> The project advanced journal line record.</param>
    /// <returns>true if it recalculates tax; false otherwise.</returns>
    internal static boolean recalculateTax(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        boolean ret = false;

        if (TaxUncommitted::existByDocumentLineId(tableNum(ProjAdvancedJournalLine), _projAdvancedJournalLine.RecId))
        {
            TaxUncommitted::deleteForDocumentLine(tableNum(ProjAdvancedJournalLine), _projAdvancedJournalLine.RecId);

            if (!Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
            {
                ProjAdvancedJournalLineTaxDocument projAdvancedJournalLineTaxDocument = ProjAdvancedJournalLineTaxDocument::construct(_projAdvancedJournalLine);
                projAdvancedJournalLineTaxDocument.calcTax(true);
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>