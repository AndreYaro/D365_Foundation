<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInferiorDisposalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInferiorDisposalPost extends RunBaseBatch implements BatchRetryable
{
    QueryRun                    queryRun;
    RAssetInferiorDisposalTable assetInferiorDisposalTable;
    Counter                     progressCounter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanClose</Name>
				<Source><![CDATA[
    protected boolean checkCanClose()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    protected boolean checkCanCreate(RAssetInferiorDisposalTrans _disposalTrans)
    {
        RAssetStatusType   rAssetStatusType;
        ;

        rAssetStatusType = RAssetStatusType::construct(RAssetTable::find(_disposalTrans.AccountNum));

        if (! rAssetStatusType.allowDisposal())
            return false;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable createJournalTable()
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable.JournalName         = assetInferiorDisposalTable.JournalName;
        ledgerJournalTable.JournalType         = LedgerJournalType::Assets_RU;

        ledgerJournalTable.insert();

        assetInferiorDisposalTable.LedgerJournalNum = ledgerJournalTable.JournalNum;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    protected void createJournalTrans(RAssetInferiorDisposalTrans _assetInferiorDisposalTrans,
                                      LedgerJournalTable          _ledgerJournalTable)
    {
        RAssetProposal            rAssetProposal;
        RAssetTable               rAssetTable     = RAssetTable::find(_assetInferiorDisposalTrans.AccountNum, true);
        RAssetStandards           rAssetStandards;
        boolean                   notExist = true;
        ;

        rAssetProposal = RAssetProposal::construct(RAssetTransType::Disposal);

        while select rAssetStandards
            where rAssetStandards.AssetId == rAssetTable.AccountNum
        {
            if (this.existPostingProfile(rAssetStandards.postingProfile(assetInferiorDisposalTable.TransDate),
                                         rAssetStandards.AssetStandardId,
                                         rAssetStandards.AssetGroup,
                                         rAssetStandards.AssetId))
            {
                rAssetProposal.initParameters(_ledgerJournalTable.JournalNum,
                                              assetInferiorDisposalTable.TransDate,
                                              rAssetStandards);

                rAssetProposal.createJournalLines(rAssetStandards.AssetStandardId, false);
                notExist = false;
            }
        }

        if (notExist)
        {
            rAssetTable.Status = RAssetStatus::Disposed;
            rAssetTable.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116747");

        dialog.addText("@GLS116747" + '?');

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    protected void displayProgress(RAssetId _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPostingProfile</Name>
				<Source><![CDATA[
    protected boolean existPostingProfile(RAssetPostingProfile _postingProfile,
                                          RAssetStandardId     _assetStandardId,
                                          RAssetGroupId        _assetGroup,
                                          RAssetId             _assetId)
    {
        if ((select firstonly rassetDisposalParameters
                 where rassetDisposalParameters.SoldScrap       == RAssetDisposalType::Disposal          &&
                       rassetDisposalParameters.PostingProfile  == _postingProfile                       &&
                       (rassetDisposalParameters.AssetCode      == RAssetTableGroupAllStandard::All      ||
                        (rassetDisposalParameters.AssetCode     == RAssetTableGroupAllStandard::Standard &&
                         rassetDisposalParameters.AssetRelation == _assetStandardId)                     ||
                        (rassetDisposalParameters.AssetCode     == RAssetTableGroupAllStandard::GroupId  &&
                         rassetDisposalParameters.AssetRelation == _assetGroup)                          ||
                        (rassetDisposalParameters.AssetCode     == RAssetTableGroupAllStandard::Table    &&
                         rassetDisposalParameters.AssetRelation == _assetId))).RecId == 0)
            return false;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetInferiorDisposalTable _assetInferiorDisposalTable)
    {
        assetInferiorDisposalTable = _assetInferiorDisposalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        if ((select DisposalTableRecId from rAssetInferiorDisposalTrans
                where rAssetInferiorDisposalTrans.DisposalTableRecId == assetInferiorDisposalTable.RecId).RecId == 0)
            return checkFailed("@SYS27671");

        if (LedgerJournalTable::find(assetInferiorDisposalTable.LedgerJournalNum))
            return checkFailed(strFmt("@SYS25365", assetInferiorDisposalTable.JournalId));

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Query                       query           = new Query();
        QueryBuildDataSource        queryDataSource = query.addDataSource(tableNum(RAssetInferiorDisposalTrans));
        RAssetInferiorDisposalTrans assetInferiorDisposalTrans;
        LedgerJournalTable          ledgerJournalTable;
        Counter                     progressTotal;

        #macrolib.AviFiles

        queryDataSource.addRange(fieldNum(RAssetInferiorDisposalTrans, DisposalTableRecId)).value(queryValue(assetInferiorDisposalTable.RecId));

        queryRun          = new QueryRun(query);
        progressTotal     = SysQuery::countTotal(queryRun);

        if (! this.checkCanClose())
        {
            error("@GLS101992");
            return;
        }

        ttsbegin;

        assetInferiorDisposalTable.selectForUpdate(true);
        assetInferiorDisposalTable.Posted = NoYes::Yes;

        ledgerJournalTable = this.createJournalTable();

        if (! ledgerJournalTable)
            throw Exception::Error;

        this.progressInit("@GLS116566", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        queryRun.reset();
        while (queryRun.next())
        {
            assetInferiorDisposalTrans = queryRun.get(tableNum(RAssetInferiorDisposalTrans));
            this.displayProgress(assetInferiorDisposalTrans.AccountNum);

            if (this.checkCanCreate(assetInferiorDisposalTrans))
                this.createJournalTrans(assetInferiorDisposalTrans, ledgerJournalTable);
        }

        if ((select firstonly RecId from ledgerJournalTrans
                 where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum &&
                       ledgerJournalTrans.TransDate  == assetInferiorDisposalTable.TransDate).RecId)
        {
            info("@GLS220504");
        }
        else
        {
            ledgerJournalTable.delete();
            assetInferiorDisposalTable.LedgerJournalNum = "";
        }

        assetInferiorDisposalTable.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetInferiorDisposalPost  assetInferiorDisposalPost;
        RAssetInferiorDisposalTable disposalTable = _args.record();
        ;

        if (disposalTable.DisposalCondition == RAssetDisposalCondition::DepreciationGroup)
        {
            assetInferiorDisposalPost = new RAssetDisposalPost_DeprGroup();
        }
        else
        {
            assetInferiorDisposalPost = new RAssetInferiorDisposalPost();
        }

        assetInferiorDisposalPost.initValue(disposalTable);

        if (assetInferiorDisposalPost.prompt())
        {
            assetInferiorDisposalPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>