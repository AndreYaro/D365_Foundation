<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAEFormController_Vacation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The average earning form controller (vacation).
/// </summary>
class RPayAEFormController_Vacation extends RPayAEFormController
{
    FormRealControl      controlRpayDayHourValue,
                         controlPayAverageValue;
    FormComboBoxControl  rPayWeekDurationControl;
    #define.controlRpayDayHourValue("RpayAverageEarnValue_PayDayHour")
    #define.controlPayAverageValue("RpayAverageEarnValue_AverageRate")
    #define.rPayWeekDurationControl("RpayWeekDuration")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun(FormRun _formRun = formRun)
    {
        super(_formRun);

        rPayAverageEarnValue_ds = formRun.dataSource(tableStr(RPayAverageEarnValue));
        controlRpayDayHourValue = formRun.design().controlName(#controlRpayDayHourValue);
        controlPayAverageValue  = formRun.design().controlName(#controlPayAverageValue);
        rPayWeekDurationControl = formRun.design().controlName(#rPayWeekDurationControl);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    public void updateFormDesign()
    {
        DictTable      dictTable = new DictTable(tableNum(RPayAverageEarnEmplPeriodTable));
        FormDataObject formDataObject;
        FieldId        fieldId;

        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable = this.getRPayAverageEarnEmplPeriodTable();
        boolean        allowEdit = ! (rPayAverageEarnEmplPeriodTable.Included || rPayAverageEarnEmplPeriodTable.PrevVacationStartDate);
        ;
        super();

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
        {
            controlRpayDayHourValue.label("@RUP355");
            controlRpayDayHourValue.helpText("@RUP516");
            controlPayAverageValue.label("@RUP471");
            controlPayAverageValue.helpText("@RUP474");
        }
        else
        {
            controlRpayDayHourValue.label("@GLS105378");
            controlRpayDayHourValue.helpText("@RUP515");
            controlPayAverageValue.label("@RUP472");
            controlPayAverageValue.helpText("@RUP476");
        }

        rPayAverageEarnTrans_Ds.allowEdit(allowEdit);
        rPayAverageEarnTrans_Ds.allowCreate(allowEdit);
        rPayAverageEarnTrans_Ds.allowDelete(allowEdit);

        rPayAverageEarnValue_ds.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);
        rPayAverageEarnValue_ds.allowCreate(! rPayAverageEarnEmplPeriodTable.Included);
        rPayAverageEarnValue_ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included);

        rPayAverageEarnEmplPeriodTable_Ds.allowDelete(! rPayAverageEarnEmplPeriodTable.Included);
        rPayWeekDurationControl.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);

        for (fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            formDataObject = rPayAverageEarnEmplPeriodTable_Ds.object(fieldId);
            if (formDataObject)
            {
                switch (fieldId)
                {
                    case fieldNum(RPayAverageEarnEmplPeriodTable,Included),
                         fieldNum(RPayAverageEarnEmplPeriodTable,SumOnHand),
                         fieldNum(RPayAverageEarnEmplPeriodTable,SumOnHandBlocked):
                        if ((rPayAverageEarnEmplPeriodTable.PayPeriod                                &&
                            rPayAverageEarnEmplPeriodTable.PayPeriod < RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId)) ||
                            rPayAverageEarnEmplPeriodTable.SheetTableRecid ||
                            rPayAverageEarnEmplPeriodTable.isSourceVacation())
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(true);
                        }
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable,NonAppearanceTimeGroupCode),
                         fieldNum(RPayAverageEarnEmplPeriodTable,ActuallyTimeGroupCode):
                        if (! allowEdit)
                        {
                            formDataObject.allowEdit(false);
                        }
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable,EndDate):
                        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation)
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);
                        }
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable,StartDate),
                         fieldNum(RPayAverageEarnEmplPeriodTable,DayNumber):
                        formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);
                        break;
                    case fieldNum(RPayAverageEarnEmplPeriodTable,PrevVacationStartDate):
                        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation)
                        {
                            formDataObject.allowEdit(false);
                        }
                        else
                        {
                            formDataObject.allowEdit(! rPayAverageEarnEmplPeriodTable.Included);
                        }
                        break;
                    default:
                        formDataObject.allowEdit(allowEdit);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>