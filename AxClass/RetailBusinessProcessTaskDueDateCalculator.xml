<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessProcessTaskDueDateCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// this class for calculating task due date which ignores the calendar
/// </summary>
public class RetailBusinessProcessTaskDueDateCalculator implements BusinessProcessITaskDueDateCalculator
{
    private BusinessProcessDueDateOffsetDays minimumOffsetDays;
    private BusinessProcessDueDateOffsetDays maximumOffsetDays;
    private BusinessProcessTemplateHeaderRecId templateHeaderRecId;
    private BusinessProcessTargetDate targetDate;
    private boolean initialized;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailBusinessProcessTaskDueDateCalculator construct(BusinessProcessTemplateHeader _templateHeader)
    {
        if (!_templateHeader)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        RetailBusinessProcessTaskDueDateCalculator taskDueDateCalculator = new RetailBusinessProcessTaskDueDateCalculator();
        taskDueDateCalculator.templateHeaderRecId = _templateHeader.RecId;
        return taskDueDateCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForTargetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the task due date calculator for the given target date.
    /// </summary>
    /// <param name = "_targetDate">The target date.</param>
    public void initializeForTargetDate(BusinessProcessTargetDate _targetDate)
    {
        if (!initialized)
        {
            targetDate = _targetDate;
            minimumOffsetDays = this.findMinimumDueDateOffsetDaysForTemplate(templateHeaderRecId);
            maximumOffsetDays = this.findMaximumDueDateOffsetDaysForTemplate(templateHeaderRecId);
            initialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumDueDateOffsetDays</Name>
				<Source><![CDATA[
    public BusinessProcessDueDateOffsetDays getMinimumDueDateOffsetDays()
    {
        return minimumOffsetDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumDueDateOffsetDays</Name>
				<Source><![CDATA[
    public BusinessProcessDueDateOffsetDays getMaximumDueDateOffsetDays()
    {
        return maximumOffsetDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the due date time of a task.
    /// </summary>
    /// <param name = "_dueDateOffsetDays">The number of days to offset the task from the target date.</param>
    /// <returns>The due date time of the task.</returns>
    public BusinessProcessTaskDueDate determineDueDate(BusinessProcessDueDateOffsetDays _dueDateOffsetDays)
    {
        return targetDate + _dueDateOffsetDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMinimumDueDateOffsetDaysForTemplate</Name>
				<Source><![CDATA[
    private BusinessProcessDueDateOffsetDays findMinimumDueDateOffsetDaysForTemplate(BusinessProcessTemplateHeaderRecId _templateHeaderRecId)
    {
        BusinessProcessTemplateTask templateTask;

        select minof(DueDateOffsetDays) from templateTask
            where templateTask.TemplateHeader == _templateHeaderRecId;

        return templateTask.DueDateOffsetDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMaximumDueDateOffsetDaysForTemplate</Name>
				<Source><![CDATA[
    private BusinessProcessDueDateOffsetDays findMaximumDueDateOffsetDaysForTemplate(BusinessProcessTemplateHeaderRecId _templateHeaderRecId)
    {
        BusinessProcessTemplateTask templateTask;

        select maxof(DueDateOffsetDays) from templateTask
            where templateTask.TemplateHeader == _templateHeaderRecId;

        return templateTask.DueDateOffsetDays;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>