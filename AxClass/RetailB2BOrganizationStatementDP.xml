<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailB2BOrganizationStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classStr(RetailB2BOrganizationStatementContract))]
public class RetailB2BOrganizationStatementDP extends SRSReportDataProviderPreProcessTempDB
{
    RetailB2BOrganizationStatementTmp b2bCustAccountStatementTmp;
    RetailB2BOrganizationStatementHierarchyNodeTmp selectedHierarchyNodes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getB2BCustAccountStatementTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tablestr(RetailB2BOrganizationStatementTmp))]
    public RetailB2BOrganizationStatementTmp getB2BCustAccountStatementTmp()
    {
        select b2bCustAccountStatementTmp;
        return b2bCustAccountStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process report data.
    /// </summary>
    public void processReport()
    {
        RetailB2BOrganizationStatementContract contract;
        CustHierarchyNode custHierarchyNode;
        CustTable custTable;
        RetailCustTable retailCustTable;
        DirPersonName dirPersonName;

        contract = this.parmDataContract() as RetailB2BOrganizationStatementContract;

        while select custTable where custTable.RecId == contract.parmCustomerRecId()
            join retailCustTable where retailCustTable.AccountNum == custTable.AccountNum
            join custHierarchyNode where custHierarchyNode.RecId == retailCustTable.B2BCustomerHierarchyNode
        {
            selectedHierarchyNodes.NodeRecId = custHierarchyNode.RecId;
            selectedHierarchyNodes.Party = custHierarchyNode.Party;
            selectedHierarchyNodes.insert();
            this.loadChildNodes(custHierarchyNode.RecId);
        }

        delete_from b2bCustAccountStatementTmp;

        while select AccountNum, Currency, PaymTermId from custTable
            join Party from selectedHierarchyNodes where selectedHierarchyNodes.Party == custTable.Party
            join FirstName, LastName from dirPersonName where custTable.Party == dirPersonName.Person
        {
            b2bCustAccountStatementTmp.AccountNumber = custTable.AccountNum;
            b2bCustAccountStatementTmp.PaymentTxt = PaymTerm::txt(custTable.PaymTermId, custTable.languageId());
            b2bCustAccountStatementTmp.Currency = custTable.Currency;
            b2bCustAccountStatementTmp.FirstName = dirPersonName.FirstName;
            b2bCustAccountStatementTmp.LastName = dirPersonName.LastName;
            b2bCustAccountStatementTmp.StartingBalance = custTable.balanceCurPerDate(contract.parmFromDate(), custTable.Currency);
            b2bCustAccountStatementTmp.EndingBalance = custTable.balanceCurPerDate(contract.parmToDate(), custTable.Currency);
            b2bCustAccountStatementTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadChildNodes</Name>
				<Source><![CDATA[
    private void loadChildNodes(RecId nodeId)
    {
        CustHierarchyNode custHierarchyNode;

        while select custHierarchyNode where custHierarchyNode.ParentNode == nodeId
        {
            selectedHierarchyNodes.NodeRecId = custHierarchyNode.RecId;
            selectedHierarchyNodes.Party = custHierarchyNode.Party;
            selectedHierarchyNodes.insert();

            this.loadChildNodes(custHierarchyNode.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>