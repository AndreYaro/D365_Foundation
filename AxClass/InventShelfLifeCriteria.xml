<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventShelfLifeCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventShelfLifeCriteria</c> class represents a set of filters that can be used
/// to filter on hand based on shelf life parameters.
/// </summary>
class InventShelfLifeCriteria extends InventOnHandSingleDimensionCriteria
{
    InventBatchExpDate  minAllowedExpiryDate;
    PdsBestBeforeDate   minAllowedBestBeforeDate;

    boolean             selectExpired;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLessThanDateAndNotNullRange</Name>
				<Source><![CDATA[
        private void addLessThanDateAndNotNullRange(QueryBuildDataSource _dsInventBatch, FieldId _fieldId, date _upperLimitDate)
    {
        FieldName fieldName = fieldId2name(tableNum(InventBatch), _fieldId);
        str expiryFilter = strFmt('(%1.%2 < %3) && (%1.%2 != %4)', _dsInventBatch.name(), fieldName, date2StrXpp(_upperLimitDate), date2StrXpp(dateNull()));

        _dsInventBatch.addRange(_fieldId).value(expiryFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>affectedDimension</Name>
				<Source><![CDATA[
        public FieldId affectedDimension()
    {
        return fieldNum(InventDim, InventBatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
        protected boolean calcMustBeApplied()
    {
        return this.parmMinAllowedBestBeforeDate() || this.parmMinAllowedExpiryDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
        protected void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        QueryBuildDataSource    dsInventBatch;

        if (minAllowedExpiryDate && minAllowedBestBeforeDate)
        {
            // Current implementation does not support filtering on both expiry and best before dates
            throw error(error::wrongUseOfFunction(funcName()));
        }

        JoinMode joinMode = selectExpired ? JoinMode::ExistsJoin : JoinMode::NoExistsJoin;

        if (minAllowedExpiryDate)
        {
            dsInventBatch = _onHandQuery.joinInventBatch(joinMode);
            this.addLessThanDateAndNotNullRange(dsInventBatch, fieldNum(InventBatch, ExpDate), minAllowedExpiryDate);
        }
        else if (minAllowedBestBeforeDate)
        {
            dsInventBatch = _onHandQuery.joinInventBatch(joinMode);
            this.addLessThanDateAndNotNullRange(dsInventBatch, fieldNum(InventBatch, PdsBestBeforeDate), minAllowedBestBeforeDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class invent shelf life criteria from the InventMovement record.
    /// </summary>
    /// <param name = "_movement">An inventory movement record.</param>
     protected void initializeFromMovement(InventMovement _movement)
    {
        minAllowedExpiryDate = _movement.minAllowedExpiryDate();
        minAllowedBestBeforeDate = _movement.minAllowedBestBeforeDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinAllowedBestBeforeDate</Name>
				<Source><![CDATA[
        public PdsBestBeforeDate parmMinAllowedBestBeforeDate(PdsBestBeforeDate _minAllowedBestBeforeDate = minAllowedBestBeforeDate)
    {
        minAllowedBestBeforeDate = _minAllowedBestBeforeDate;
        return minAllowedBestBeforeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinAllowedExpiryDate</Name>
				<Source><![CDATA[
        public InventBatchExpDate parmMinAllowedExpiryDate(InventBatchExpDate _minAllowedExpiryDate = minAllowedExpiryDate)
    {
        minAllowedExpiryDate = _minAllowedExpiryDate;
        return minAllowedExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectExpired</Name>
				<Source><![CDATA[
        public boolean parmSelectExpired(boolean _selectExpired = selectExpired)
    {
        selectExpired = _selectExpired;

        return selectExpired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventShelfLifeCriteria construct()
    {
        return new InventShelfLifeCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventShelfLifeCriteria</c> class
    /// that represents the shelf life requirements of the specified movement.
    /// </summary>
    /// <param name="_movement">
    /// Inventory movement.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventShelfLifeCriteria</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the inventory movement is not specified.
    /// </exception>
    public static InventShelfLifeCriteria newFromMovement(InventMovement _movement)
    {
        if (!_movement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventShelfLifeCriteria expiryCriteria = InventShelfLifeCriteria::construct();
        expiryCriteria.initializeFromMovement(_movement);

        return expiryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventShelfLifeCriteria</c> class
    /// that represents the shelf life requirements of the item and expiration date.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_expiryCheckDate">
    /// The date to check for batch expiration. The constructor adjusts the date appropriately if the item is
    /// setup for expiration based on best before date.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventShelfLifeCriteria</c> class.
    /// </returns>
    public static InventShelfLifeCriteria newItemExpiry(ItemId _itemId, TransDate _expiryCheckDate)
    {
        InventTable             inventTable = InventTable::find(_itemId);

        InventShelfLifeCriteria expiryCriteria = InventShelfLifeCriteria::construct();

        if (inventTable.isShelfLifeItem())
        {
            if (inventTable.modelGroup().PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
            {
                expiryCriteria.parmMinAllowedBestBeforeDate(_expiryCheckDate + 1);
            }
            else
            {
                expiryCriteria.parmMinAllowedExpiryDate(_expiryCheckDate);
            }
        }

        return expiryCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>