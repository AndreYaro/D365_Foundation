<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankAccountStatementDP</c> class handles the business logic for a
///    <c>BankAccountStatement</c>report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(BankAccountStatement)),
    SRSReportParameterAttribute(classstr(BankAccountStatementContract))
]
class BankAccountStatementDP extends SrsReportDataProviderPreProcessTempDB
{
    AmountCur currentBalance;
    TransDate fromDate;
    TransDate toDate;
    CompanyBankAccount bankAccount;
    BankAccountStatementTmp bankAccountStatementTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateOpeningBalanceForBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the opening balance from fromDate.
    /// </summary>
    /// <returns>
    ///    The opening balance.
    /// </returns>
    private AmountCur calculateOpeningBalanceForBankAccount()
    {
        BankAccountTrans bankAccountTrans;

        select sum(AmountCur), sum(AmountCorrect) from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccount
                && bankAccountTrans.TransDate < fromDate;

        return bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankAccountStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the records to the <c>BankAccountStatementTmp</c> table.
    /// </summary>
    private void createBankAccountStatementTmp()
    {
        BankAccountTable bankAccountTable;
        BankAccountTrans bankAccountTrans;

        insert_recordset bankAccountStatementTmp
        (
            FromDate,
            ToDate,
            CurrentBalance,
            BankTransType,
            TransDate,
            Voucher,
            DepositNum,
            PaymReference,
            PaymentMode,
            AmountCur,
            AmountCorrect,
            AmountMST,
            AmountMSTSecond,
            AccountID,
            Name,
            CurrencyCode
        )
        select
            fromDate,
            toDate,
            currentBalance,
            BankTransType,
            TransDate,
            Voucher,
            DepositNum,
            PaymReference,
            PaymentMode,
            AmountCur,
            AmountCorrect,
            AmountMST,
            AmountReportingCurrency
        from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccount
                && bankAccountTrans.TransDate >= fromDate
                && bankAccountTrans.TransDate <= toDate
        join
            AccountID,
            Name,
            CurrencyCode
        from bankAccountTable
            where bankAccountTable.AccountID == bankAccount;

        select count(RecId) from bankAccountStatementTmp;

        if (bankAccountStatementTmp.RecId == 0)
        {
            bankAccountTable = BankAccountTable::find(bankAccount);
            bankAccountStatementTmp.AccountID = bankAccountTable.AccountID;
            bankAccountStatementTmp.Name = bankAccountTable.Name;
            bankAccountStatementTmp.CurrencyCode = bankAccountTable.CurrencyCode;
            bankAccountStatementTmp.CurrentBalance = currentBalance;
            bankAccountStatementTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the temporary table for SQL Server Reporting Services reports.
    /// </summary>
    /// <returns>
    ///    The <c>BankAccountStatementTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tablestr(BankAccountStatementTmp))]
    public BankAccountStatementTmp getBankAccountStatementTmp()
    {
        select bankAccountStatementTmp;

        return bankAccountStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic that is used to populate a <c>BankAccountStatementTmp</c> temporary
    ///    table.
    /// </summary>
    public void processReport()
    {
        BankAccountStatementContract contract = this.parmDataContract() as BankAccountStatementContract;

        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate() ? contract.parmToDate() : dateMax();

        bankAccount = contract.parmBankAccount();

        currentBalance = this.calculateOpeningBalanceForBankAccount();

        this.createBankAccountStatementTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>