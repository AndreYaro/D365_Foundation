<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollPayStatementTotals</c> class calculates the various totals for a pay statement.
/// </summary>
public class PayrollPayStatementTotals
{
    PayrollPayStatementTotals   payStatementTotals;
    Map                         w2LabelMap;
    Set                         w2LabelSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcExternalReportingBenefitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total reported benefits for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the W2 box label.
    /// </param>
    /// <returns>
    ///     A totals amount for a W2 box and label combination for a worker.
    /// </returns>
    private Amount calcExternalReportingBenefitTotal(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel
    )
    {
        PayrollPayStatement                 payStatement;
        PayrollPayStatementBenefitLine      payStatementBenefitLine;
        HcmBenefit                          benefit;
        HcmBenefitPlan                      benefitPlan;
        PayrollBenefitExternalReporting     benefitExternalReporting;

        if (_w2BoxNumber == PayrollW2BoxNumber::OneZero || _w2BoxNumber == PayrollW2BoxNumber::OneOne)
        {
            // Boxes 10 and 14 do not include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                    where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                    && payStatementBenefitLine.IsEmployer == NoYes::No
                exists join benefit
                    where benefit.RecId == payStatementBenefitLine.Benefit
                exists join benefitPlan
                    where benefitPlan.RecId == benefit.BenefitPlan
                exists join benefitExternalReporting
                    where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                       && benefitExternalReporting.w2BoxNumber  == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId        == payStatementBenefitLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }
        else if (_w2BoxNumber == PayrollW2BoxNumber::OneTwo || _w2BoxNumber == PayrollW2BoxNumber::OneFour)
        {
            // Boxes 11 and 12 include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                    where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                    && payStatementBenefitLine.IsEmployer == NoYes::No
                exists join benefit
                    where benefit.RecId == payStatementBenefitLine.Benefit
                exists join benefitPlan
                    where benefitPlan.RecId == benefit.BenefitPlan
                exists join benefitExternalReporting
                    where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                       && benefitExternalReporting.w2BoxNumber  == _w2BoxNumber
                       && benefitExternalReporting.w2BoxLabel   == _w2BoxLabel
                exists join payStatement
                    where payStatement.RecId        == payStatementBenefitLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }

        return payStatementBenefitLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExternalReportingEarningTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total reported earnings for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the W2 box label.
    /// </param>
    /// <returns>
    ///     A totals amount for a W2 box and label combination for a worker.
    /// </returns>
    private Amount calcExternalReportingEarningTotal(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel
    )
    {
        PayrollPayStatement                 payStatement;
        PayrollPayStatementEarningLine      payStatementEarningLine;
        PayrollEarningExternalReporting     earningExternalReporting;

        if (_w2BoxNumber == PayrollW2BoxNumber::OneZero || _w2BoxNumber == PayrollW2BoxNumber::OneOne)
        {
            // Boxes 10 and 11 do not include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                       && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                exists join earningExternalReporting
                    where earningExternalReporting.EarningCode  == payStatementEarningLine.EarningCode
                       && earningExternalReporting.w2BoxNumber  == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId        == payStatementEarningLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }
        else if (_w2BoxNumber == PayrollW2BoxNumber::OneTwo || _w2BoxNumber == PayrollW2BoxNumber::OneFour)
        {
            // Boxes 12 and 14 include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                       && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                exists join earningExternalReporting
                    where earningExternalReporting.EarningCode  == payStatementEarningLine.EarningCode
                       && earningExternalReporting.w2BoxNumber  == _w2BoxNumber
                       && earningExternalReporting.w2BoxLabel   == _w2BoxLabel
                exists join payStatement
                    where payStatement.RecId        == payStatementEarningLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }

        return payStatementEarningLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExternalReportingTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total reported taxes for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the W2 box label.
    /// </param>
    /// <returns>
    ///     A totals amount for a W2 box and label combination for a worker.
    /// </returns>
    private Amount calcExternalReportingTaxTotal(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel
    )
    {
        PayrollPayStatement                 payStatement;
        PayrollPayStatementTaxLine          payStatementTaxLine;
        PayrollTaxExternalReporting         taxExternalReporting;

        if (_w2BoxNumber == PayrollW2BoxNumber::OneZero || _w2BoxNumber == PayrollW2BoxNumber::OneOne)
        {
            // Boxes 10 and 14 do not include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.IsEmployer == NoYes::No
                exists join taxExternalReporting
                    where taxExternalReporting.PayrollTaxCode  == payStatementTaxLine.TaxCode
                       && taxExternalReporting.w2BoxNumber     == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId         == payStatementTaxLine.PayStatement
                       && payStatement.Worker        == _workerRecId
                       && payStatement.PaymentDate   >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }
        else if (_w2BoxNumber == PayrollW2BoxNumber::OneTwo || _w2BoxNumber == PayrollW2BoxNumber::OneFour)
        {
            // Boxes 11 and 12 include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.IsEmployer == NoYes::No
                exists join taxExternalReporting
                    where taxExternalReporting.PayrollTaxCode  == payStatementTaxLine.TaxCode
                       && taxExternalReporting.w2BoxNumber     == _w2BoxNumber
                       && taxExternalReporting.w2BoxLabel      == _w2BoxLabel
                exists join payStatement
                    where payStatement.RecId         == payStatementTaxLine.PayStatement
                       && payStatement.Worker        == _workerRecId
                       && payStatement.PaymentDate   >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }

        return payStatementTaxLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtReportingBenefitContributionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total reported benefit contributions for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the contribution W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the contribution W2 box label.
    /// </param>
    /// <returns>
    ///     A contribution amount for a W2 box and label combination for a worker.
    /// </returns>
    private Amount calcExtReportingBenefitContributionTotal(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel
    )
    {
        PayrollPayStatement                 payStatement;
        PayrollPayStatementBenefitLine      payStatementBenefitLine;
        HcmBenefit                          benefit;
        HcmBenefitPlan                      benefitPlan;
        PayrollBenefitExternalReporting     benefitExternalReporting;

        if (_w2BoxNumber == PayrollW2BoxNumber::OneZero || _w2BoxNumber == PayrollW2BoxNumber::OneOne)
        {
            // Boxes 10 and 14 do not include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                    where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                    && payStatementBenefitLine.IsEmployer == NoYes::Yes
                exists join benefit
                    where benefit.RecId == payStatementBenefitLine.Benefit
                exists join benefitPlan
                    where benefitPlan.RecId == benefit.BenefitPlan
                exists join benefitExternalReporting
                    where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                       && benefitExternalReporting.w2BoxNumberContribution  == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId        == payStatementBenefitLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }
        else if (_w2BoxNumber == PayrollW2BoxNumber::OneTwo || _w2BoxNumber == PayrollW2BoxNumber::OneFour)
        {
            // Boxes 11 and 12 include a range on the box label
            select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                    where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                    && payStatementBenefitLine.IsEmployer == NoYes::Yes
                exists join benefit
                    where benefit.RecId == payStatementBenefitLine.Benefit
                exists join benefitPlan
                    where benefitPlan.RecId == benefit.BenefitPlan
                exists join benefitExternalReporting
                    where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                       && benefitExternalReporting.w2BoxNumberContribution  == _w2BoxNumber
                       && benefitExternalReporting.w2BoxLabelContribution   == _w2BoxLabel
                exists join payStatement
                    where payStatement.RecId        == payStatementBenefitLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No;
        }

        return payStatementBenefitLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtReportingTotalsByW2BoxNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the all the various reporting totals for a worker over the specified period by box number.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the contribution W2 box number.
    /// </param>
    /// <returns>
    ///     A map containing all the external reporting totals.
    /// </returns>
    public Map calcExtReportingTotalsByW2BoxNum(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber)
    {
        PayrollPayStatement                 payStatement;
        PayrollPayStatementBenefitLine      payStatementBenefitLine;
        PayrollPayStatementEarningLine      payStatementEarningLine;
        PayrollPayStatementTaxLine          payStatementTaxLine;
        PayrollTaxExternalReporting         taxExternalReporting;
        PayrollBenefitExternalReporting     benefitExternalReporting;
        PayrollEarningExternalReporting     earningExternalReporting;
        PayrollFormW2BoxReportingAdjustment payrollFormW2BoxReportingAdjustment;
        HcmBenefit                          benefit;
        HcmBenefitPlan                      benefitPlan;

        w2LabelSet = new Set(Types::String);
        w2LabelMap  = new Map(Types::String, Types::Real);

        // Benefits
        while select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                   && payStatementBenefitLine.IsEmployer == NoYes::No
            join RecId from benefit
                where benefit.RecId == payStatementBenefitLine.Benefit
            join RecId from benefitPlan
                where benefitPlan.RecId == benefit.BenefitPlan
            join w2BoxLabel from benefitExternalReporting
            group by benefitExternalReporting.w2BoxLabel
                where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                    && benefitExternalReporting.w2BoxNumber  == _w2BoxNumber
            exists join payStatement
                where payStatement.RecId        == payStatementBenefitLine.PayStatement
                    && payStatement.Worker       == _workerRecId
                    && payStatement.PaymentDate  >= _startDate
                    && payStatement.PaymentDate  <= _endDate
                    && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                    && payStatement.IsReversed    == NoYes::No

        {
            if (benefitExternalReporting.w2BoxLabel != "")
            {
                this.checkAndAddW2Label(benefitExternalReporting.w2BoxLabel, payStatementBenefitLine.AccountingCurrencyAmount);
            }
        }

        // Contributions
        while select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementBenefitLine
                where payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                   && payStatementBenefitLine.IsEmployer == NoYes::Yes
            join RecId from benefit
                where benefit.RecId == payStatementBenefitLine.Benefit
            join RecId from benefitPlan
                where benefitPlan.RecId == benefit.BenefitPlan
            join w2BoxLabelContribution from benefitExternalReporting
            group by benefitExternalReporting.w2BoxLabelContribution
                where benefitExternalReporting.BenefitPlan  == benefitPlan.RecId
                    && benefitExternalReporting.w2BoxNumberContribution  == _w2BoxNumber
            exists join payStatement
                where payStatement.RecId        == payStatementBenefitLine.PayStatement
                    && payStatement.Worker       == _workerRecId
                    && payStatement.PaymentDate  >= _startDate
                    && payStatement.PaymentDate  <= _endDate
                    && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                    && payStatement.IsReversed    == NoYes::No
        {
            if (benefitExternalReporting.w2BoxLabelContribution != "")
            {
                this.checkAndAddW2Label(benefitExternalReporting.w2BoxLabelContribution, payStatementBenefitLine.AccountingCurrencyAmount);
            }
        }

        // Earnings
        while select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                       && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                join w2BoxLabel from earningExternalReporting
                group by earningExternalReporting.w2BoxLabel
                    where earningExternalReporting.EarningCode  == payStatementEarningLine.EarningCode
                       && earningExternalReporting.w2BoxNumber  == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId        == payStatementEarningLine.PayStatement
                       && payStatement.Worker       == _workerRecId
                       && payStatement.PaymentDate  >= _startDate
                       && payStatement.PaymentDate  <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No
        {
            if (earningExternalReporting.w2BoxLabel != "")
            {
                this.checkAndAddW2Label(earningExternalReporting.w2BoxLabel, payStatementEarningLine.AccountingCurrencyAmount);
            }
        }

        // Tax
        while select validTimeState(_endDate) sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.IsEmployer == NoYes::No
                join w2BoxLabel from taxExternalReporting
                group by taxExternalReporting.w2BoxLabel
                    where taxExternalReporting.PayrollTaxCode  == payStatementTaxLine.TaxCode
                       && taxExternalReporting.w2BoxNumber     == _w2BoxNumber
                exists join payStatement
                    where payStatement.RecId         == payStatementTaxLine.PayStatement
                       && payStatement.Worker        == _workerRecId
                       && payStatement.PaymentDate   >= _startDate
                       && payStatement.PaymentDate   <= _endDate
                       && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                       && payStatement.IsReversed    == NoYes::No
        {
            if (taxExternalReporting.w2BoxLabel != "")
            {
                this.checkAndAddW2Label(taxExternalReporting.w2BoxLabel, payStatementTaxLine.AccountingCurrencyAmount);
            }
        }

        // Adjustments
        while select w2BoxLabel, sum(Amount) from payrollFormW2BoxReportingAdjustment
                    group by payrollFormW2BoxReportingAdjustment.w2BoxLabel
                    where payrollFormW2BoxReportingAdjustment.w2BoxNumber  == _w2BoxNumber
                       && payrollFormW2BoxReportingAdjustment.Worker       == _workerRecId
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  >= _startDate
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  <= _endDate
        {
            if (payrollFormW2BoxReportingAdjustment.w2BoxLabel != "")
            {
                this.checkAndAddW2Label(payrollFormW2BoxReportingAdjustment.w2BoxLabel, payrollFormW2BoxReportingAdjustment.Amount);
            }
        }

        return w2LabelMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFormW2BoxReportingAdjustmentTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total of Form W2 Box reporting adjustments for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the contribution W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the contribution W2 box label.
    /// </param>
    /// <returns>
    ///     An adjustment amount for a W2 box and label combination for a worker.
    /// </returns>
    private Amount calcFormW2BoxReportingAdjustmentTotal(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel
    )
    {
        PayrollFormW2BoxReportingAdjustment payrollFormW2BoxReportingAdjustment;

        if (_w2BoxNumber == PayrollW2BoxNumber::OneZero || _w2BoxNumber == PayrollW2BoxNumber::OneOne)
        {
            select sum(Amount) from payrollFormW2BoxReportingAdjustment
                    where payrollFormW2BoxReportingAdjustment.w2BoxNumber  == _w2BoxNumber
                       && payrollFormW2BoxReportingAdjustment.Worker       == _workerRecId
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  >= _startDate
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  <= _endDate;
        }
        else if (_w2BoxNumber == PayrollW2BoxNumber::OneTwo || _w2BoxNumber == PayrollW2BoxNumber::OneFour)
        {
            select sum(Amount) from payrollFormW2BoxReportingAdjustment
                    where payrollFormW2BoxReportingAdjustment.w2BoxNumber  == _w2BoxNumber
                       && payrollFormW2BoxReportingAdjustment.w2BoxLabel   == _w2BoxLabel
                       && payrollFormW2BoxReportingAdjustment.Worker       == _workerRecId
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  >= _startDate
                       && payrollFormW2BoxReportingAdjustment.ReportingDate  <= _endDate;
        }

        return payrollFormW2BoxReportingAdjustment.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the specified period excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the payment's start date.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the payment's end date.
    /// </param>
    /// <returns>
    ///     The total taxes withheld for the specified period.
    /// </returns>
    public Amount calcTaxCodeTotalForDateRange(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate)
    {
        PayrollPayStatement             payStatement;
        PayrollPayStatementTaxLine      payStatementTaxLine;

        select sum(AccountingCurrencyAmount) from payStatementTaxLine
            where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
            && payStatementTaxLine.TaxCode == _taxCodeRecId
            && payStatementTaxLine.PayStatement != _payStatementRecId
                exists join RecId from payStatement
                    where payStatement.RecId == payStatementTaxLine.PayStatement
                    && payStatement.PaymentDate >= _startDate
                    && payStatement.PaymentDate <= _endDate
                    && payStatement.Worker      == _workerRecId;

        return payStatementTaxLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the specified period excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_payPeriodRecId">
    ///     Specifies the payment period date.
    /// </param>
    /// <returns>
    ///     The total taxes withheld for the specified period.
    /// </returns>
    internal static PayrollStatementAccountingCurrencyAmount calcTaxCodeTotalForPayPeriod(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollPayPeriodRecId       _payPeriodRecId)
    {
        PayrollPayStatement             payStatement;
        PayrollPayStatementTaxLine      payStatementTaxLine;

        select sum(AccountingCurrencyAmount) from payStatementTaxLine
            where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
            && payStatementTaxLine.TaxCode == _taxCodeRecId
            && payStatementTaxLine.PayStatement != _payStatementRecId
                exists join RecId from payStatement
                    where payStatement.RecId == payStatementTaxLine.PayStatement
                    && payStatement.PayPeriod == _payPeriodRecId
                    && payStatement.Worker == _workerRecId;

        return payStatementTaxLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage total of the worker for the specified period and
    ///     location (and optionally earning code) excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax method.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the payment's start date.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the payment's end date.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total (optional)
    /// </param>
    /// <returns>
    ///     The wage totals for the worker for the specified period.
    /// </returns>
    public Amount calcWageTotalForDateRange(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _startDate,
        date                        _endDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0,
        PayrollEarningCodeRecId     _earningCodeRecId = 0)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatement             payStatement;
        PayrollPayStatementEarningLine  payStatementEarningLine;

        if (_earningCodeRecId)
        {
            //
            // Sum only for the specified earning code on the pay statement
            //

            // If location is specified, filter to that location
            if (_workerTaxRegionRecId)
            {
                // Sum up the additive regular earnings for the current employee, excluding the
                // current payment
                select sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.WorkerTaxRegion == _workerTaxRegionRecId
                        && payStatementEarningLine.EarningCode == _earningCodeRecId
                        && payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                        && payStatementEarningLine.PayStatement != _payStatementRecId
                        && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                            exists join RecId from earningCode
                                where earningCode.RecId == payStatementEarningLine.EarningCode
                                    && earningCode.TaxMethod == _taxMethod
                                    && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
                            exists join RecId from payStatement
                                where payStatement.RecId == payStatementEarningLine.PayStatement
                                    && payStatement.Worker == _workerRecId
                                    && payStatement.PaymentDate >= _startDate
                                    && payStatement.PaymentDate <= _endDate;
            }
            // Sum across all locations (federal)
            else
            {
                // Sum up the additive regular earnings for the current employee, excluding the
                // current payment
                select sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                        && payStatementEarningLine.EarningCode == _earningCodeRecId
                        && payStatementEarningLine.PayStatement != _payStatementRecId
                        && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                            exists join RecId from earningCode
                                where earningCode.RecId == payStatementEarningLine.EarningCode
                                    && earningCode.TaxMethod == _taxMethod
                                    && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
                            exists join RecId from payStatement
                                where payStatement.RecId == payStatementEarningLine.PayStatement
                                    && payStatement.Worker == _workerRecId
                                    && payStatement.PaymentDate >= _startDate
                                    && payStatement.PaymentDate <= _endDate;
            }
        }
        else
        {
            //
            // Sum across all earnings on the pay statement
            //

            // If location is specified, filter to that location
            if (_workerTaxRegionRecId)
            {
                // Sum up the additive regular earnings for the current employee, excluding the
                // current payment
                select sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.WorkerTaxRegion == _workerTaxRegionRecId
                        && payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                        && payStatementEarningLine.PayStatement != _payStatementRecId
                        && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                            exists join RecId from earningCode
                                where earningCode.RecId == payStatementEarningLine.EarningCode
                                    && earningCode.TaxMethod == _taxMethod
                                    && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
                            exists join RecId from payStatement
                                where payStatement.RecId == payStatementEarningLine.PayStatement
                                    && payStatement.Worker == _workerRecId
                                    && payStatement.PaymentDate >= _startDate
                                    && payStatement.PaymentDate <= _endDate;
            }
            // Sum across all locations (federal)
            else
            {
                // Sum up the additive regular earnings for the current employee, excluding the
                // current payment
                select sum(AccountingCurrencyAmount) from payStatementEarningLine
                    where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
                        && payStatementEarningLine.PayStatement != _payStatementRecId
                        && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                            exists join RecId from earningCode
                                where earningCode.RecId == payStatementEarningLine.EarningCode
                                    && earningCode.TaxMethod == _taxMethod
                                    && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
                            exists join RecId from payStatement
                                where payStatement.RecId == payStatementEarningLine.PayStatement
                                    && payStatement.Worker == _workerRecId
                                    && payStatement.PaymentDate >= _startDate
                                    && payStatement.PaymentDate <= _endDate;
            }
        }

        return payStatementEarningLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalRUIAForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the federal railroad wages for the specified date range
    ///     for the worker, excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for whom to calculate railroad
    ///     unemployment wages.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start of the date range by which to query.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end of the date range by which to query.
    /// </param>
    /// <returns>
    ///     The federal railroad unemployment wages for the worker for the
    ///     specified date range, excluding the current pay statement.
    /// </returns>
    public Amount calcWageTotalRUIAForDateRange(
        PayrollPayStatementRecId _payStatementRecId,
        HcmWorkerRecId _workerRecId,
        date _startDate,
        date _endDate)  
    {
        PayrollTaxCode taxCode;
        PayrollUSTaxTransactionHistory taxHistory;
        
        // Calculate the worker's railroad unemployment wages for the specified date range
        select sum(GrossWages) from taxHistory
            where taxHistory.PayStatement != _payStatementRecId
            && taxHistory.Worker == _workerRecId
            && taxHistory.TransDate >= _startDate
            && taxHistory.TransDate <= _endDate
            exists join RecId, Type from taxCode
                where taxCode.RecId == taxHistory.TaxCode
                && taxCode.Type == PayrollTaxCodeType::ER_RUIA;
        
        return taxHistory.GrossWages;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGTLWageTotalForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the GTL wage total of the worker for the specified period, either regular or supplemental.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for the GTL earning lines to sum.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies whether regular or supplemental earnings are being totaled.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the payment's start date.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the payment's end date.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region (optional).
    /// </param>
    /// <returns>
    ///     The GTL wage total.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, GTL earnings are returned.
    ///     If worker tax region is not specified, the earnings are returned across all locations.
    /// </remarks>
    public Amount calcGTLWageTotalForDateRange(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _startDate,
        date                        _endDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)

    {
        PayrollEarningCode              earningCode;
        PayrollPayStatement             payStatement;
        PayrollPayStatementEarningLine  earningLineGtl;
        Amount                          gtlWageTotal = 0.0;

        // If location is specified, filter to that location
        if (_workerTaxRegionRecId)
        {
            // Sum up the GTL earnings for the worker for the specified date range and the specific tax region
            select sum(AccountingCurrencyAmount) from earningLineGtl
                where earningLineGtl.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLineGtl.IsMarkedForRemoval == NoYes::No
                && earningLineGtl.PayStatement != _payStatementRecId
                && earningLineGtl.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    exists join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineGtl.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType == PayrollFringeBenefitType::GroupTermLife
                    exists join RecId from payStatement
                        where payStatement.RecId == earningLineGtl.PayStatement
                        && payStatement.Worker == _workerRecId
                        && payStatement.PaymentDate >= _startDate
                        && payStatement.PaymentDate <= _endDate;

            gtlWageTotal = earningLineGtl.AccountingCurrencyAmount;
        }
        else
        {
            // Sum up the GTL earnings for the worker for the specified date range across all tax regions (Federal)
            select sum(AccountingCurrencyAmount) from earningLineGtl
                where earningLineGtl.IsMarkedForRemoval == NoYes::No
                && earningLineGtl.PayStatement != _payStatementRecId
                && earningLineGtl.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineGtl.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType == PayrollFringeBenefitType::GroupTermLife
                    exists join RecId from payStatement
                        where payStatement.RecId == earningLineGtl.PayStatement
                        && payStatement.Worker == _workerRecId
                        && payStatement.PaymentDate >= _startDate
                        && payStatement.PaymentDate <= _endDate;

            gtlWageTotal = earningLineGtl.AccountingCurrencyAmount;
        }

        return gtlWageTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForDateRangeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the specified period, payment status and IsReversed flag, excluding the current pay.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the range's start date.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the range's end date.
    /// </param>
    /// <param name="_paymentStatus">
    ///     Specifies the payment status that pay statements must have to be included in the total
    /// </param>
    /// <param name="_isReversed">
    ///     Specifies the reversed status that pay statements must have to be included in the total
    /// </param>
    /// <returns>
    ///     The total taxes withheld for the specified period.
    /// </returns>
    public Amount calcTaxCodeTotalForDateRangeStatus(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollPaymentStatus        _paymentStatus,
        boolean                     _isReversed)
    {
        PayrollPayStatement             payStatement;
        PayrollPayStatementTaxLine      payStatementTaxLine;

        if (_taxCodeRecId == 0 || _workerRecId == 0)
        {
            return 0;
        }

        select sum(AccountingCurrencyAmount) from payStatementTaxLine
        where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
        && payStatementTaxLine.TaxCode == _taxCodeRecId
        && payStatementTaxLine.PayStatement != _payStatementRecId
            exists join RecId from payStatement
                where payStatement.RecId == payStatementTaxLine.PayStatement
                && payStatement.PaymentDate >= _startDate
                && payStatement.PaymentDate <= _endDate
                && payStatement.Worker      == _workerRecId
                && payStatement.PaymentStatus == _paymentStatus
                && payStatement.IsReversed == _isReversed;

        return payStatementTaxLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddW2Label</Name>
				<Source><![CDATA[
    private void checkAndAddW2Label(PayrollW2BoxLabel _w2Label, Amount _totalAmount)
    {
        Amount amount = 0;

        if (!w2LabelSet.in(_w2Label))
        {
            w2LabelSet.add(_w2Label);
            w2LabelMap.insert(_w2Label, _totalAmount);
        }
        else
        {
            amount = w2LabelMap.lookup(_w2Label);
            amount = amount + _totalAmount;
            w2LabelMap.insert(_w2Label, amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBenefitTotalForCurrentPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the benefit total of the worker for the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement.
    /// </param>
    /// <param name="_hcmBenefitRecId">
    ///     Specifies the benefit record ID.
    /// </param>
    /// <param name="_isEmployer">
    ///     Specifies whether it is an employer benefit or not.
    /// </param>
    /// <returns>
    ///     The benefit totals for the current payment.
    /// </returns>
    public static Amount calcBenefitTotalForCurrentPayment(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmBenefitRecId             _hcmBenefitRecId,
        boolean                     _isEmployer)
    {
        PayrollPayStatementBenefitLine  payStatementBenefitLine;

        select sum(AccountingCurrencyAmount) from payStatementBenefitLine
            where payStatementBenefitLine.PayStatement == _payStatementRecId
            && payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
            && payStatementBenefitLine.Benefit == _hcmBenefitRecId
            && payStatementBenefitLine.IsEmployer == _isEmployer;

        return payStatementBenefitLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBenefitTotalForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the benefit total of the worker for the payment's year
    ///     excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_hcmBenefitRecId">
    ///     Specifies the benefit record ID.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_isEmployer">
    ///     Specifies whether it is an employer benefit or not.
    /// </param>
    /// <returns>
    ///     The benefit totals for the current year.
    /// </returns>
    public static Amount calcBenefitTotalForCurrentYear(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmBenefitRecId             _hcmBenefitRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _paymentDate,
        boolean                     _isEmployer)
    {
        PayrollPayStatement             payStatement;
        PayrollPayStatementBenefitLine  payStatementBenefitLine;

        select sum(AccountingCurrencyAmount) from payStatementBenefitLine
            where payStatementBenefitLine.PayStatement != _payStatementRecId
            && payStatementBenefitLine.IsMarkedForRemoval == NoYes::No
            && payStatementBenefitLine.Benefit == _hcmBenefitRecId
            && payStatementBenefitLine.IsEmployer == _isEmployer
                join RecId from payStatement
                    where payStatement.RecId == payStatementBenefitLine.PayStatement
                    && payStatement.PaymentDate >= DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate)
                    && payStatement.PaymentDate <= DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate)
                    && payStatement.Worker      == _workerRecId;

        return payStatementBenefitLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExternalReportingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the W2 box total for a worker over the specified period.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the total is calculated.
    /// </param>
    /// <param name="_startDate">
    ///     Specifies the start date of the reporting period.
    /// </param>
    /// <param name="_endDate">
    ///     Specifies the end date of the reporting period.
    /// </param>
    /// <param name="_w2BoxNumber">
    ///     Specifies the W2 box number.
    /// </param>
    /// <param name="_w2BoxLabel">
    ///     Specifies the W2 box label.
    /// </param>
    /// <returns>
    ///     A totals amount for a W2 box and label combination for a worker.
    /// </returns>
    public static Amount calcExternalReportingTotals(
        HcmWorkerRecId              _workerRecId,
        date                        _startDate,
        date                        _endDate,
        PayrollW2BoxNumber          _w2BoxNumber,
        PayrollW2BoxLabel           _w2BoxLabel = ''
    )
    {
        Amount                      benefitReportingTotal;
        Amount                      taxReportingTotal;
        Amount                      earningReportingTotal;
        Amount                      benefitContributionTotal;
        Amount                      adjustments;
        PayrollPayStatementTotals   payStatementTotals = new PayrollPayStatementTotals();

        benefitReportingTotal = payStatementTotals.calcExternalReportingBenefitTotal(_workerRecId,
                                                                                     _startDate,
                                                                                     _endDate,
                                                                                     _w2BoxNumber,
                                                                                     _w2BoxLabel);

        benefitContributionTotal = payStatementTotals.calcExtReportingBenefitContributionTotal(_workerRecId,
                                                                                               _startDate,
                                                                                               _endDate,
                                                                                               _w2BoxNumber,
                                                                                               _w2BoxLabel);

        adjustments = payStatementTotals.calcFormW2BoxReportingAdjustmentTotal(_workerRecId,
                                                                               _startDate,
                                                                               _endDate,
                                                                               _w2BoxNumber,
                                                                               _w2BoxLabel);

        taxReportingTotal = payStatementTotals.calcExternalReportingTaxTotal(_workerRecId,
                                                                             _startDate,
                                                                             _endDate,
                                                                             _w2BoxNumber,
                                                                             _w2BoxLabel);

        earningReportingTotal = payStatementTotals.calcExternalReportingEarningTotal(_workerRecId,
                                                                                     _startDate,
                                                                                     _endDate,
                                                                                     _w2BoxNumber,
                                                                                     _w2BoxLabel);

        return (benefitReportingTotal + taxReportingTotal + earningReportingTotal + benefitContributionTotal + adjustments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGtlWageTotalForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage totals for the payment, both regular and supplemental,
    ///     for GTL earning codes.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The wage total.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, GTL earnings are returned.
    ///     If worker tax region is not specified, the earnings are returned across all locations.
    /// </remarks>
    public static container calcGtlWageTotalForPayment(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxMethod            _taxMethod,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatementEarningLine  earningLineGtl;

        // If location is specified, filter to that location
        if (_workerTaxRegionRecId)
        {
            // Sum up the GTL earnings for the current payment for a specific tax region
            select sum(AccountingCurrencyAmount) from earningLineGtl
                where earningLineGtl.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLineGtl.IsMarkedForRemoval == NoYes::No
                && earningLineGtl.PayStatement == _payStatementRecId
                && earningLineGtl.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineGtl.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType == PayrollFringeBenefitType::GroupTermLife;

            return [earningLineGtl.AccountingCurrencyAmount];
        }
        else
        {
            // Sum up the GTL earnings for the current payment across all tax regions (Federal)
            select sum(AccountingCurrencyAmount) from earningLineGtl
                where earningLineGtl.IsMarkedForRemoval == NoYes::No
                && earningLineGtl.PayStatement == _payStatementRecId
                && earningLineGtl.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineGtl.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType == PayrollFringeBenefitType::GroupTermLife;

            return [earningLineGtl.AccountingCurrencyAmount];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProductiveWageTotalForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage totals for the payment, both regular and supplemental,
    ///     broken  out by productive basis
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The wage totals.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, the productive and non-productive earnings (wages and hours) are returned.
    ///     If worker tax region is not specified, the earnings (wages and hours) are returned for all locations.
    /// </remarks>
    public static container calcProductiveWageTotalForPayment(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxMethod            _taxMethod,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatementEarningLine  earningLineProd,
                                        earningLineNonProd;
        Amount                          locationProductiveWages,
                                        locationNonProductiveWages;
        PayrollEarningQuantity          locationNonProductiveHours,
                                        locationProductiveHours;

        // If location is specified, filter to that location
        if (_workerTaxRegionRecId && _taxMethod != PayrollTaxMethod::Exempt)
        {
            // Sum up the productive earnings for the current payment
            while select sum(AccountingCurrencyAmount), sum(Quantity) from earningLineProd
                group by earningCode.QuantityUnit
                where earningLineProd.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLineProd.IsMarkedForRemoval == NoYes::No
                && earningLineProd.PayStatement == _payStatementRecId
                && earningLineProd.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineProd.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.IsProductive == NoYes::Yes
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
            {
                locationProductiveWages += earningLineProd.AccountingCurrencyAmount;
                if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
                {
                    locationProductiveHours += earningLineProd.Quantity;
                }
            }

            // Sum up the non-productive earnings for the current payment
            while select sum(AccountingCurrencyAmount), sum(Quantity) from earningLineNonProd
                group by earningCode.QuantityUnit
                where earningLineNonProd.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLineNonProd.IsMarkedForRemoval == NoYes::No
                && earningLineNonProd.PayStatement == _payStatementRecId
                && earningLineNonProd.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLineNonProd.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.IsProductive == NoYes::No
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
            {
                locationNonProductiveWages += earningLineNonProd.AccountingCurrencyAmount;
                if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
                {
                    locationNonProductiveHours += earningLineNonProd.Quantity;
                }
            }

            return [locationProductiveWages, locationProductiveHours, locationNonProductiveWages, locationNonProductiveHours];
        }

        return [0, 0, 0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForCurrentMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the payment's month excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <returns>
    ///     The taxes withheld for the current month.
    /// </returns>
    public static Amount calcTaxCodeTotalForCurrentMonth(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _paymentDate)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcTaxCodeTotalForDateRange(_payStatementRecId, _taxCodeRecId, _workerRecId,
                    dateStartMth(_paymentDate), dateEndMth(_paymentDate));

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForCurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the specified pay period excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_payPeriodRecId">
    ///     Specifies the payment date.
    /// </param>
    /// <returns>
    ///     The taxes withheld for the current period.
    /// </returns>
    public static Amount calcTaxCodeTotalForCurrentPeriod(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollPayPeriodRecId       _payPeriodRecId)
    {
        Amount                      amt;
        PayrollPayPeriod            payrollPayPeriod;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        payrollPayPeriod = PayrollPayPeriod::find(_payPeriodRecId);

        amt = payStatementTotals.calcTaxCodeTotalForDateRange(_payStatementRecId, _taxCodeRecId, _workerRecId,
                    payrollPayPeriod.PeriodStartDate, payrollPayPeriod.PeriodEndDate);

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForCurrentQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total taxes withheld, excluding the current payment, for the specified 
    ///     worker tax code combination across the payment's quarter.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <returns>
    ///     The taxes withheld for the given worker across the current quarter.
    /// </returns>
    internal static Amount calcTaxCodeTotalForCurrentQuarter(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollPeriodStart          _payPeriodStartDate)
    {
        date firstDateInQuarter = dateStartQtr(_payPeriodStartDate);
        date lastDateInQuarter = dateEndMth(_payPeriodStartDate);

        PayrollPayStatementTotals payStatementTotals = new PayrollPayStatementTotals();

        Amount totalTaxesWithheldForWorkerTaxCodeThisQuarter = payStatementTotals.calcTaxCodeTotalForDateRange(_payStatementRecId, _taxCodeRecId, _workerRecId, firstDateInQuarter, lastDateInQuarter);

        return totalTaxesWithheldForWorkerTaxCodeThisQuarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxCodeTotalForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the taxes withheld for the specified tax code for the worker
    ///     for the payment's month excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_taxCodeRecId">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for which the taxes withheld are calculated.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <returns>
    ///     The taxes withheld for the current year.
    /// </returns>
    public static Amount calcTaxCodeTotalForCurrentYear(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxCodeRecId         _taxCodeRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _paymentDate)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcTaxCodeTotalForDateRange(_payStatementRecId, _taxCodeRecId, _workerRecId,
                    DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate), DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate));

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForCurrentMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage total of the worker for the payment's month and
    ///     location (and optionally by earning code) excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specfies the worker for which the wages are calculated.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax method.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total (optional)
    /// </param>
    /// <returns>
    ///     The wage totals for the worker for the current month.
    /// </returns>
    public static Amount calcWageTotalForCurrentMonth(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0,
        PayrollEarningCodeRecId     _earningCodeRecId = 0)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcWageTotalForDateRange(_payStatementRecId, _workerRecId,
                _taxMethod, dateStartMth(_paymentDate), dateEndMth(_paymentDate), _workerTaxRegionRecId, _earningCodeRecId);

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForCurrentQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage total of the worker for the payment's quarter and
    ///     location (and optionally earning code) excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specfies the worker for which the wages are calculated.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax method.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total (optional)
    /// </param>
    /// <returns>
    ///     The wage totals for the worker for the current quarter.
    /// </returns>
    public static Amount calcWageTotalForCurrentQuarter(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0,
        PayrollEarningCodeRecId     _earningCodeRecId = 0)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcWageTotalForDateRange(_payStatementRecId, _workerRecId,
                _taxMethod, dateStartQtr(_paymentDate), dateEndQtr(_paymentDate), _workerTaxRegionRecId, _earningCodeRecId);

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage total of the worker for the payment's year and
    ///     location (and optionally earning code) excluding the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specfies the worker for which the wages are calculated.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax method.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total (optional)
    /// </param>
    /// <returns>
    ///     The wage totals for the worker for the current year.
    /// </returns>
    public static Amount calcWageTotalForCurrentYear(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0,
        PayrollEarningCodeRecId     _earningCodeRecId = 0)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcWageTotalForDateRange(_payStatementRecId, _workerRecId,
                _taxMethod, DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate), DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate), _workerTaxRegionRecId, _earningCodeRecId);

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage totals for the payment, both regular and supplemental
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement from which to total.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The wage totals.
    /// </returns>
    /// <remarks>
    ///     If worker tax region is not specified, the earnings (wages and hours) are returned for all locations.
    /// </remarks>
    public static container calcWageTotalForPayment(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxMethod            _taxMethod,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatementEarningLine  earningLine,
                                        grossEarningLine;
        Amount                          locationWagesRegular,
                                        locationWagesSupplemental,
                                        locationHoursRegular,
                                        locationHoursSupplemental,
                                        grossWagesRegularPositive,
                                        grossWagesSupplementalPositive,
                                        grossHoursRegularPositive,
                                        grossHoursSupplementalPositive,
                                        grossWagesRegularNegative,
                                        grossWagesSupplementalNegative,
                                        grossHoursRegularNegative,
                                        grossHoursSupplementalNegative,
                                        accountingCurrencyAmount;
        PayrollEarningQuantity          quantity;

        // If location is specified, filter to that location
        if (_workerTaxRegionRecId)
        {
            // Sum up the earnings for the current payment regardless of its ProductiveBasis
            // Implementation Note: doing as a separate select sum rather than adding the previous
            // two sums for performance reasons since combined is used much more often than split out
            while select sum(AccountingCurrencyAmount), sum(Quantity) from earningLine
                group by earningCode.QuantityUnit
                where earningLine.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLine.IsMarkedForRemoval == NoYes::No
                && earningLine.PayStatement == _payStatementRecId
                && earningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLine.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
            {
                accountingCurrencyAmount += earningLine.AccountingCurrencyAmount;
                if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
                {
                    quantity += earningLine.Quantity;
                }
            }

            if (_taxMethod == PayrollTaxMethod::Regular)
            {
                locationWagesRegular = accountingCurrencyAmount;
                locationHoursRegular = quantity;

                return [locationWagesRegular, locationHoursRegular];
            }
            else if (_taxMethod == PayrollTaxMethod::Supplemental)
            {
                locationWagesSupplemental = accountingCurrencyAmount;
                locationHoursSupplemental = quantity;

                return [locationWagesSupplemental, locationHoursSupplemental];
            }
            else
            {
                return [0, 0];
            }
        }
        // Sum across all locations (federal)
        else
        {
            // Sum up the additive regular earnings for the current payment for positive earning lines
            while select sum(AccountingCurrencyAmount), sum(Quantity) from grossEarningLine
                group by earningCode.QuantityUnit
                where grossEarningLine.IsMarkedForRemoval == NoYes::No
                && grossEarningLine.PayStatement == _payStatementRecId
                && grossEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                && grossEarningLine.AccountingCurrencyAmount > 0
                    join QuantityUnit from earningCode
                        where earningCode.RecId == grossEarningLine.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
            {
                accountingCurrencyAmount += grossEarningLine.AccountingCurrencyAmount;
                if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
                {
                    quantity += grossEarningLine.Quantity;
                }
            }

            if (_taxMethod == PayrollTaxMethod::Regular)
            {
                grossWagesRegularPositive = accountingCurrencyAmount;
                grossHoursRegularPositive = quantity;
            }
            else if (_taxMethod == PayrollTaxMethod::Supplemental)
            {
                grossWagesSupplementalPositive = accountingCurrencyAmount;
                grossHoursSupplementalPositive = quantity;
            }

            // Reset the amounts
            accountingCurrencyAmount = 0;
            quantity = 0;

            // Sum up the additive regular earnings for the current payment for negative earning lines
            while select sum(AccountingCurrencyAmount), sum(Quantity) from grossEarningLine
                group by earningCode.QuantityUnit
                where grossEarningLine.IsMarkedForRemoval == NoYes::No
                && grossEarningLine.PayStatement == _payStatementRecId
                && grossEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                && grossEarningLine.AccountingCurrencyAmount < 0
                    join QuantityUnit from earningCode
                        where earningCode.RecId == grossEarningLine.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
            {
                accountingCurrencyAmount += grossEarningLine.AccountingCurrencyAmount;
                if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
                {
                    quantity += grossEarningLine.Quantity;
                }
            }

            if (_taxMethod == PayrollTaxMethod::Regular)
            {
                grossWagesRegularNegative = accountingCurrencyAmount;
                grossHoursRegularNegative = quantity;

                return [grossWagesRegularPositive, grossHoursRegularPositive, grossWagesRegularNegative, grossHoursRegularNegative];
            }
            else if (_taxMethod == PayrollTaxMethod::Supplemental)
            {
                grossWagesSupplementalNegative = accountingCurrencyAmount;
                grossHoursSupplementalNegative = quantity;

                return [grossWagesSupplementalPositive, grossHoursSupplementalPositive, grossWagesSupplementalNegative, grossHoursSupplementalNegative];
            }
            else
            {
                return [0, 0, 0, 0];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalUnemploymentForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the federal or state year-to-date unemployment wages
    ///     for the worker, excluding the earnings for the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for whom to calculate year-to-date unemployment wages.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_sutaState">
    ///     Optionally specifies a state to filter the unemployment wages to.
    /// </param>
    /// <returns>
    ///     The federal year-to-date unemployment wages for the worker.
    /// </returns>
    /// <remarks>
    ///     The exempt and GTL earnings are excluded, and both regular and
    ///     supplemental earnings are included.
    /// </remarks>
    public static Amount calcWageTotalUnemploymentForCurrentYear(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        date                        _paymentDate,
        LogisticsAddressStateId     _sutaState = '')
    {
        PayrollTaxCode                  taxCode;
        PayrollUSTaxTransactionHistory  taxHistory;
        DictEnum                        stateEnum = new DictEnum(enumNum(PayrollUSState));
        PayrollUSState                  payrollUSState;

        if (_sutaState)
        {
            // Convert the state to the enum stored in the tax history table for comparison purposes
            payrollUSState = stateEnum.symbol2Value(_sutaState);

            // Calculate the worker's state unemployment wages for the current year and SUTA state
            select sum(GrossWages) from taxHistory
                where taxHistory.PayStatement != _payStatementRecId
                &&    taxHistory.Worker == _workerRecId
                &&    taxHistory.TaxationState == payrollUSState
                &&    taxHistory.TransDate >= DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate)
                &&    taxHistory.TransDate <= DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate)
                exists join RecId, Type from taxCode
                    where taxCode.RecId == taxHistory.TaxCode
                    &&    taxCode.Type == PayrollTaxCodeType::ER_SUTA;
        }
        else
        {
            // Calculate the worker's federal unemployment wages for the current year
            select sum(GrossWages) from taxHistory
                where taxHistory.PayStatement != _payStatementRecId
                &&    taxHistory.Worker == _workerRecId
                &&    taxHistory.TransDate >= DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate)
                &&    taxHistory.TransDate <= DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate)
                exists join RecId, Type from taxCode
                    where taxCode.RecId == taxHistory.TaxCode
                    &&    taxCode.Type == PayrollTaxCodeType::ER_FUTA;
        }

        return taxHistory.GrossWages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalUnemploymentForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the unemployment wage totals for the payment
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement.
    /// </param>
    /// <returns>
    ///     A container containing the AccountingCurrencyAmount and Quantity
    ///     unemployment wage totals for the payment.
    /// </returns>
    public static container calcWageTotalUnemploymentForPayment(PayrollPayStatementRecId _payStatementRecId)
    {
        #PayrollConstants
        PayrollPayStatementEarningLine  payStatementEarningLine;
        PayrollEarningCode              earningCode;
        PayrollEarningQuantity          quantity;
        Amount                          accountingCurrencyAmount;

        // Calculate unemployment taxables wages and hours for the payment (excludes any General Term Life imputed earnings).
        while select sum(AccountingCurrencyAmount), sum(Quantity) from payStatementEarningLine
            group by earningCode.QuantityUnit
            where payStatementEarningLine.IsMarkedForRemoval == NoYes::No
            && payStatementEarningLine.PayStatement == _payStatementRecId
            && payStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                join QuantityUnit from earningCode
                    where earningCode.RecId == payStatementEarningLine.EarningCode
                    && earningCode.TaxMethod != PayrollTaxMethod::Exempt
                    && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife
        {
            accountingCurrencyAmount += payStatementEarningLine.AccountingCurrencyAmount;
            if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
            {
                quantity += payStatementEarningLine.Quantity;
            }
        }

        return [accountingCurrencyAmount, quantity];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForPymtEarningCodeFederal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage totals for the specified payment's earning code by tax method
    ///     across all worker tax region (Federal level).
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement from which to total.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total.
    /// </param>
    /// <returns>
    ///     The positive wages and hours and the negative wages and hours for the
    ///     pay statement in a container.
    /// </returns>
    /// <remarks>
    ///     The earnings are returned for all locations, broken out by positive
    ///     and negative wages and hours.
    /// </remarks>
    public static container calcWageTotalForPymtEarningCodeFederal(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxMethod            _taxMethod,
        PayrollEarningCodeRecId     _earningCodeRecId)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatementEarningLine  grossEarningLine;
        Amount                          grossWagesPositive,
                                        grossHoursPositive,
                                        grossWagesNegative,
                                        grossHoursNegative,
                                        accountingCurrencyAmount;
        PayrollEarningQuantity          quantity;

        // Sum up the additive earnings for the specified earning code for the current payment's positive earning lines
        select sum(AccountingCurrencyAmount), sum(Quantity) from grossEarningLine
            group by earningCode.QuantityUnit
                 where grossEarningLine.IsMarkedForRemoval == NoYes::No
                 && grossEarningLine.EarningCode == _earningCodeRecId
                 && grossEarningLine.PayStatement == _payStatementRecId
                 && grossEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                 && grossEarningLine.AccountingCurrencyAmount > 0
                     join QuantityUnit from earningCode
                         where earningCode.RecId == grossEarningLine.EarningCode
                         && earningCode.TaxMethod == _taxMethod
                         && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife;

        accountingCurrencyAmount += grossEarningLine.AccountingCurrencyAmount;
        if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
        {
            quantity += grossEarningLine.Quantity;
        }

        grossWagesPositive = accountingCurrencyAmount;
        grossHoursPositive = quantity;

        // Reset the amounts
        accountingCurrencyAmount = 0;
        quantity = 0;

        // Sum up the additive earnings for the specified earning code for the current payment's negative earning lines
        select sum(AccountingCurrencyAmount), sum(Quantity) from grossEarningLine
            group by earningCode.QuantityUnit
                where grossEarningLine.IsMarkedForRemoval == NoYes::No
                && grossEarningLine.EarningCode == _earningCodeRecId
                && grossEarningLine.PayStatement == _payStatementRecId
                && grossEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                && grossEarningLine.AccountingCurrencyAmount < 0
                    join QuantityUnit from earningCode
                        where earningCode.RecId == grossEarningLine.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife;

        accountingCurrencyAmount += grossEarningLine.AccountingCurrencyAmount;
        if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
        {
            quantity += grossEarningLine.Quantity;
        }

        grossWagesNegative = accountingCurrencyAmount;
        grossHoursNegative = quantity;

        return [grossWagesPositive, grossHoursPositive, grossWagesNegative, grossHoursNegative];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalForPymtEarningCodeTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the wage totals for the specified payment's earning code by tax method
    ///     and worker tax region.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement from which to total.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies the tax code.
    /// </param>
    /// <param name="_earningCodeRecId">
    ///     Specifies the earning code by which to total.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The wages and hours for the pay statement in a container.
    /// </returns>
    public static container calcWageTotalForPymtEarningCodeTaxRegion(
        PayrollPayStatementRecId    _payStatementRecId,
        PayrollTaxMethod            _taxMethod,
        PayrollEarningCodeRecId     _earningCodeRecId,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId)
    {
        PayrollEarningCode              earningCode;
        PayrollPayStatementEarningLine  earningLine;
        Amount                          accountingCurrencyAmount;
        PayrollEarningQuantity          quantity;

        // Sum up the earnings for the current payment regardless of its ProductiveBasis.
        select sum(AccountingCurrencyAmount), sum(Quantity) from earningLine
            group by earningCode.QuantityUnit
                where earningLine.WorkerTaxRegion == _workerTaxRegionRecId
                && earningLine.EarningCode == _earningCodeRecId
                && earningLine.IsMarkedForRemoval == NoYes::No
                && earningLine.PayStatement == _payStatementRecId
                && earningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
                    join QuantityUnit from earningCode
                        where earningCode.RecId == earningLine.EarningCode
                        && earningCode.TaxMethod == _taxMethod
                        && earningCode.FringeBenefitType != PayrollFringeBenefitType::GroupTermLife;

        accountingCurrencyAmount += earningLine.AccountingCurrencyAmount;
        if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
        {
            quantity += earningLine.Quantity;
        }

        return [accountingCurrencyAmount, quantity];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGtlWageTotalForCurrentMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the GTL wage total of the worker for the payment's month, either regular or supplemental.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for the GTL earning lines to sum.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies whether regular or supplemental earnings are being totaled.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date for which to base the "current month" upon.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The GTL wage total.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, GTL earnings are returned.
    ///     If worker tax region is not specified, the earnings are returned across all locations.
    /// </remarks>
    public static Amount calcGtlWageTotalForCurrentMonth(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
            Amount                      amt;
            PayrollPayStatementTotals   payStatementTotals;
            payStatementTotals = new PayrollPayStatementTotals();

            amt = payStatementTotals.calcGTLWageTotalForDateRange(_payStatementRecId, _workerRecId,
                    _taxMethod, dateStartMth(_paymentDate), dateEndMth(_paymentDate), _workerTaxRegionRecId);

            return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGtlWageTotalForCurrentQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the GTL wage total of the worker for the payment's quarter, either regular or supplemental.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for the GTL earning lines to sum.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies whether regular or supplemental earnings are being totaled.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date for which to base the "current quarter" upon.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The GTL wage total.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, GTL earnings are returned.
    ///     If worker tax region is not specified, the earnings are returned across all locations.
    /// </remarks>
    public static Amount calcGtlWageTotalForCurrentQuarter(
       PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
            Amount                      amt;
            PayrollPayStatementTotals   payStatementTotals;
            payStatementTotals = new PayrollPayStatementTotals();

            amt = payStatementTotals.calcGTLWageTotalForDateRange(_payStatementRecId, _workerRecId,
                    _taxMethod, dateStartQtr(_paymentDate), dateEndQtr(_paymentDate), _workerTaxRegionRecId);

            return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGtlWageTotalForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the current year's GTL wage total for the worker, either regular or supplemental.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for the GTL earning lines to sum.
    /// </param>
    /// <param name="_taxMethod">
    ///     Specifies whether regular or supplemental earnings are being totaled.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date for which to base the "current year" upon.
    /// </param>
    /// <param name="_workerTaxRegionRecId">
    ///     Specifies the worker tax region.
    /// </param>
    /// <returns>
    ///     The GTL wage total.
    /// </returns>
    /// <remarks>
    ///     Given a worker tax region, GTL earnings are returned.
    ///     If worker tax region is not specified, the earnings are returned across all locations.
    /// </remarks>
    public static Amount calcGtlWageTotalForCurrentYear(
        PayrollPayStatementRecId    _payStatementRecId,
        HcmWorkerRecId              _workerRecId,
        PayrollTaxMethod            _taxMethod,
        date                        _paymentDate,
        PayrollWorkerTaxRegionRecId _workerTaxRegionRecId = 0)
    {
        Amount                      amt;
        PayrollPayStatementTotals   payStatementTotals;
        payStatementTotals = new PayrollPayStatementTotals();

        amt = payStatementTotals.calcGTLWageTotalForDateRange(_payStatementRecId, _workerRecId,
                _taxMethod, DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate),
                DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate), _workerTaxRegionRecId);

        return amt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalPriorSutaForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the prior state year-to-date unemployment subject wages
    ///     for the worker, excluding the wages for the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for whom to calculate year-to-date unemployment wages.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date.
    /// </param>
    /// <param name="_currentSutaState">
    ///     Specifies the current state which is excluded from the unemployment wages total.
    /// </param>
    /// <returns>
    ///     The prior state year-to-date unemployment wages for the worker.
    /// </returns>
    /// <remarks>
    ///     The exempt and GTL earnings are excluded, and both regular and
    ///     supplemental earnings are included.
    /// </remarks>
    public static Amount calcWageTotalPriorSutaForCurrentYear(
        PayrollPayStatementRecId _payStatementRecId,
        HcmWorkerRecId _workerRecId,
        date _paymentDate,
        LogisticsAddressStateId _currentSutaState)
    {
        PayrollTaxCode taxCode;
        PayrollUSTaxTransactionHistory taxHistory;
        DictEnum stateEnum = new DictEnum(enumNum(PayrollUSState));
        PayrollUSState currentSutaState;

        // Convert the state to the enum stored in the tax history table for comparison purposes
        currentSutaState = stateEnum.symbol2Value(_currentSutaState);

        // Calculate the worker's prior state unemployment wages for the current year
        select sum(SubjectWages) from taxHistory
            where taxHistory.PayStatement != _payStatementRecId
                && taxHistory.Worker == _workerRecId
                && taxHistory.TaxationState != currentSutaState
                && taxHistory.TransDate >= DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _paymentDate)
                && taxHistory.TransDate <= DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _paymentDate)
            exists join RecId, Type from taxCode
                where taxCode.RecId == taxHistory.TaxCode
                    && taxCode.Type == PayrollTaxCodeType::ER_SUTA;

        return taxHistory.SubjectWages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalRUIAForCurrentMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the federal railroad month-to-date unemployment wages
    ///     for the worker, excluding the earnings for the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for whom to calculate month-to-date railroad
    ///     unemployment wages.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date used to determine the month range by
    ///     which to query.
    /// </param>
    /// <returns>
    ///     The federal month-to-date railroad unemployment wages for the worker.
    /// </returns>
    public static Amount calcWageTotalRUIAForCurrentMonth(
        PayrollPayStatementRecId _payStatementRecId,
        HcmWorkerRecId _workerRecId,
        date _paymentDate)
    {
        PayrollPayStatementTotals payStatementTotals = new PayrollPayStatementTotals();
        return payStatementTotals.calcWageTotalRUIAForDateRange(_payStatementRecId, _workerRecId, dateStartMth(_paymentDate), dateEndMth(_paymentDate));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWageTotalRUIAForCurrentYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the federal railroad year-to-date unemployment wages
    ///     for the worker, excluding the earnings for the current payment.
    /// </summary>
    /// <param name="_payStatementRecId">
    ///     Specifies the Pay statement to exclude.
    /// </param>
    /// <param name="_workerRecId">
    ///     Specifies the worker for whom to calculate year-to-date railroad
    ///     unemployment wages.
    /// </param>
    /// <param name="_paymentDate">
    ///     Specifies the payment date used to determine the month range by
    ///     which to query.
    /// </param>
    /// <returns>
    ///     The federal year-to-date railroad unemployment wages for the worker.
    /// </returns>
    public static Amount calcWageTotalRUIAForCurrentYear(
        PayrollPayStatementRecId _payStatementRecId,
        HcmWorkerRecId _workerRecId,
        date _paymentDate)
    {
        PayrollPayStatementTotals payStatementTotals = new PayrollPayStatementTotals();      
        return payStatementTotals.calcWageTotalRUIAForDateRange(_payStatementRecId, _workerRecId, dateStartYr(_paymentDate), dateEndYr(_paymentDate));       
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPayStatementContainEarningsForTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a given pay statement contains earnings for a given tax region.
    /// </summary>
    /// <param name = "_payStatementRecId">The pay statement.</param>
    /// <param name = "_workerTaxRegionRecId">The tax region where earnings may have occurred.</param>
    /// <returns>true if the given pay statements contains any earnings for the given tax region; otherwise, false.</returns>
    internal static boolean doesPayStatementContainEarningsForTaxRegion(PayrollPayStatementRecId _payStatementRecId, PayrollWorkerTaxRegionRecId _workerTaxRegionRecId)
    {
        return PayrollPayStatementTotals::doesPayStatementContainRegularEarningsForTaxRegion(_payStatementRecId, _workerTaxRegionRecId)
            || PayrollPayStatementTotals::doesPayStatementContainSupplementalEarningsForTaxRegion(_payStatementRecId, _workerTaxRegionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPayStatementContainRegularEarningsForTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a given pay statement contains regular earnings for a given tax region.
    /// </summary>
    /// <param name = "_payStatementRecId">The pay statement.</param>
    /// <param name = "_workerTaxRegionRecId">The tax region where earnings may have occurred.</param>
    /// <returns>true if the given pay statements contains regular earnings for the given tax region; otherwise, false.</returns>
    internal static boolean doesPayStatementContainRegularEarningsForTaxRegion(PayrollPayStatementRecId _payStatementRecId, PayrollWorkerTaxRegionRecId _workerTaxRegionRecId)
    {
        container regularEarningsInTaxRegionThisPeriod =
            PayrollPayStatementTotals::calcWageTotalForPayment(_payStatementRecId, PayrollTaxMethod::Regular, _workerTaxRegionRecId);

        return conPeek(regularEarningsInTaxRegionThisPeriod, 0) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesPayStatementContainSupplementalEarningsForTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a given pay statement contains supplemental earnings for a given tax region.
    /// </summary>
    /// <param name = "_payStatementRecId">The pay statement.</param>
    /// <param name = "_workerTaxRegionRecId">The tax region where earnings may have occurred.</param>
    /// <returns>true if the given pay statements contains supplemental earnings for the given tax region; otherwise, false.</returns>
    internal static boolean doesPayStatementContainSupplementalEarningsForTaxRegion(PayrollPayStatementRecId _payStatementRecId, PayrollWorkerTaxRegionRecId _workerTaxRegionRecId)
    {
        container supplementalEarningsInTaxRegionThisPeriod =
            PayrollPayStatementTotals::calcWageTotalForPayment(_payStatementRecId, PayrollTaxMethod::Supplemental, _workerTaxRegionRecId);
        
        return conPeek(supplementalEarningsInTaxRegionThisPeriod, 0) > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>