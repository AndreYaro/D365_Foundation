<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelTaxable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The interface of the document line supporting the Indian Tax.
/// </summary>
public interface TaxModelTaxable_IN extends TaxModelTaxable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur getAssessableValueTransactionCurrency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxTypeAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the transaction document has the given <c>TaxType_IN</c> <c>TaxCode</c>
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// True, if it has.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isTaxTypeAttached(TaxType_IN _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isForeignTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line in accounting currency.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getAssessableValueAccountingCurrency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineExtensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension map <c>TaxModelDocLineExtensionIN</c> of the documentLineMap.
    /// </summary>
    /// <returns>
    /// The extension map.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelDocLineExtensionIN getDocumentLineExtensionMap()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getPartyTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The party <c>RecId</c> of the tax registration
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getPartyTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInfomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TransTaxInformation</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TransTaxInformation</c>
    /// </returns>
    public TransTaxInformation getTransTaxInfomation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    public LogisticsAddressStateId getConsumptionStateId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxInformation_IN</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getTaxInfomationTable()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>