<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransGlobalInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransGlobalInitializer</c> class initializes country specific data in the <c>TaxTrans</c> table buffer
/// and its table extensions based on source table information linked to the current <c>TaxTrans</c> table buffer.
/// </summary>
internal class TaxTransGlobalInitializer
{
    private TaxTransGlobalInitializerDataCache initializerDataCache;
    private TaxTrans taxTransToInit;
    private TaxMap taxTransSource;
    private boolean isDataCacheInitializedForReasonData;
    private boolean isTransactionReversal;
    private boolean isPostUpdateMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTaxTransSource</Name>
				<Source><![CDATA[
    public TaxMap parmTaxTransSource(TaxMap _taxTransSource = taxTransSource)
    {
        taxTransSource = _taxTransSource;

        return taxTransSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTransactionReversal</Name>
				<Source><![CDATA[
    internal boolean parmIsTransactionReversal(boolean _isTransactionReversal = isTransactionReversal)
    {
        isTransactionReversal = _isTransactionReversal;
        return isTransactionReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withPostUpdateMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets a flag to insert/update <c>TaxTrans_Reporting</c> record by this <c>TaxTransGlobalInitializer</c>.
    /// </summary>
    /// <returns>This.</returns>
    internal TaxTransGlobalInitializer withPostUpdateMode()
    {
        if (!taxTransToInit.RecId)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
        isPostUpdateMode = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(TaxTrans _taxTransToInit)
    {
        taxTransToInit = _taxTransToInit;

        initializerDataCache = TaxTransGlobalInitializerDataCache::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of this class.
    /// </summary>
    /// <param name = "_taxTransToInit">The <c>TaxTrans</c> buffer to be initialized.</param>
    /// <returns>The instance of this class.</returns>
    public static TaxTransGlobalInitializer construct(TaxTrans _taxTransToInit)
    {
        return new TaxTransGlobalInitializer(_taxTransToInit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxTrans</c> buffer.
    /// </summary>
    /// <returns>The initialized <c>TaxTrans</c> buffer.</returns>
    public TaxTrans initializeTaxTrans()
    {
        this.initReasonData();
        this.initTaxTrans_Reporting();

        return taxTransToInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransFromSourceTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxTrans</c> buffer from the source <c>TaxTrans</c> or <c>TmpTaxWorkTrans</c>.
    /// </summary>
    /// <returns>The initialized <c>TaxTrans</c> buffer.</returns>
    public TaxTrans initTaxTransFromSourceTaxTrans()
    {
        if (!taxTransSource)
        {
            error(strFmt("@SYS19306", funcName()));
            return taxTransToInit;
        }

        if (taxTransSource.Reason || taxTransSource.ReasonComment)
        {
            taxTransToInit.Reason = taxTransSource.Reason;
            taxTransToInit.ReasonComment = taxTransSource.ReasonComment;
        }
        else if (taxTransToInit.SourceTableId != taxTransSource.SourceTableId
            || taxTransToInit.SourceRecId != taxTransSource.SourceRecId)
        {
            this.initReasonData();
        }

        this.initTaxTrans_Reporting();

        return taxTransToInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReasonData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxTrans</c> buffer with financial reason data.
    /// </summary>
    private void initReasonData()
    {
        if (!taxTransToInit.SourceTableId
            || !taxTransToInit.SourceRecId
            || taxTransToInit.Reason
            || taxTransToInit.ReasonComment)
        {
            return;
        }

        this.initDataCacheForReasonData();

        ReasonTableRef reasonTable = this.getReasonTableRefForSourceTable();

        if (reasonTable)
        {
            taxTransToInit.Reason = reasonTable.Reason;
            taxTransToInit.ReasonComment = reasonTable.ReasonComment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans_Reporting</Name>
				<Source><![CDATA[
    private void initTaxTrans_Reporting()
    {
        TaxTrans_Reporting taxTrans_Reporting = taxTransToInit.taxTrans_Reporting();

        this.initTaxTrans_ReportingIsCreditNote(taxTrans_Reporting);
        this.initTaxTrans_ReportingIsTransactionReversal(taxTrans_Reporting);
        this.initTaxTrans_ReportingIsReversedOnSameDate(taxTrans_Reporting);

        initializerDataCache.parmSourceLineTableId(taxTransToInit.SourceTableId);
        initializerDataCache.parmSourceLineTableRecId(taxTransToInit.SourceRecId);

        switch(initializerDataCache.parmSourceLineTableId())
        {
            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = initializerDataCache.getSourceLineTable() as LedgerJournalTrans;
                
                taxTrans_Reporting.LedgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;
                if (!taxTrans_Reporting.VendTrans)
                {
                    taxTrans_Reporting.VendTrans = ledgerJournalTrans.VendTransId;
                }
                break;

            case tableNum(VendTrans):
                if (!taxTrans_Reporting.VendTrans)
                {
                    taxTrans_Reporting.VendTrans = taxTransToInit.SourceRecId;
                }
                break;
        }

        if (!taxTrans_Reporting.VendTrans)
        {
            taxTrans_Reporting.VendTrans = VendTrans::findVoucherDate(taxTransToInit.Voucher, taxTransToInit.TransDate).RecId;
        }

        this.write(taxTrans_Reporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    private void write(TaxTrans_Reporting _taxTrans_Reporting)
    {
        if (isPostUpdateMode)
        {
            _taxTrans_Reporting.write();
        }
        else
        {
            taxTransToInit.packTaxTrans_Reporting(_taxTrans_Reporting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans_ReportingIsCreditNote</Name>
				<Source><![CDATA[
    internal void initTaxTrans_ReportingIsCreditNote(TaxTrans_Reporting _taxTrans_Reporting)
    {
        if (!isDataCacheInitializedForReasonData)
        {
            this.initDataCacheForReasonData();
        }

        _taxTrans_Reporting.IsOriginalDocumentCreditNote = UnknownNoYes::Unknown;
        _taxTrans_Reporting.IsTaxTransCreditNote = TaxTransReportingHelper::isTaxTransCreditNote(taxTransToInit);

        switch (initializerDataCache.parmSourceLineTableId())
        {
            case tableNum(LedgerJournalTrans):
                if (!this.setIsOriginalDocumentCreditNoteByCustInvoiceJour(_taxTrans_Reporting, taxTransToInit.Voucher, taxTransToInit.TransDate)
                    && !this.setIsOriginalDocumentCreditNoteByVendInvoiceJour(_taxTrans_Reporting, taxTransToInit.Voucher, taxTransToInit.TransDate))
                {
                    // in case of changing Voucher in Ledger Journal Approval
                    LedgerJournalTrans ledgerJournalTrans = initializerDataCache.getSourceLineTable() as LedgerJournalTrans;
                    if (ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Approval)
                    {
                        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
                        select firstonly FromDate, FromVoucher from ledgerJournalVoucherChanged
                            where ledgerJournalVoucherChanged.JournalNum == ledgerJournalTrans.JournalNum
                                && ledgerJournalVoucherChanged.ToVoucher == ledgerJournalTrans.Voucher
                                && ledgerJournalVoucherChanged.ToDate == ledgerJournalTrans.TransDate;
                        if (ledgerJournalVoucherChanged.RecId)
                        {
                            this.setIsOriginalDocumentCreditNoteByVendInvoiceJour(_taxTrans_Reporting, ledgerJournalVoucherChanged.FromVoucher, ledgerJournalVoucherChanged.FromDate);
                        }
                    }
                }
                break;

            case tableNum(CustInvoiceLine):
            case tableNum(CustInvoiceTrans):
            case tableNum(CustInvoiceJour):
                this.setIsOriginalDocumentCreditNoteByCustInvoiceJour(_taxTrans_Reporting, taxTransToInit.Voucher, taxTransToInit.TransDate);
                break;

            case tableNum(VendInvoiceInfoLine):
            case tableNum(VendInvoiceTrans):
                this.setIsOriginalDocumentCreditNoteByVendInvoiceJour(_taxTrans_Reporting, taxTransToInit.Voucher, taxTransToInit.TransDate);
                break;

            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceRevenue):
            case tableNum(ProjInvoiceOnAcc):
                if (initializerDataCache.parmHeadingTableId() == tableNum(ProjInvoiceJour))
                {
                    ProjInvoiceJour projInvoiceJour = initializerDataCache.getSourceHeaderTable() as ProjInvoiceJour;
                    _taxTrans_Reporting.IsOriginalDocumentCreditNote = projInvoiceJour.isCreditNote_CZ() ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
                break;

            default:
                break;
        }

        if (_taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Unknown)
        {
            _taxTrans_Reporting.IsOriginalDocumentCreditNote = _taxTrans_Reporting.IsTaxTransCreditNote;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsOriginalDocumentCreditNoteByCustInvoiceJour</Name>
				<Source><![CDATA[
    private boolean setIsOriginalDocumentCreditNoteByCustInvoiceJour(TaxTrans_Reporting _taxTrans_Reporting, Voucher _voucher, TransDate _transDate)
    {
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromTaxTrans(_voucher, _transDate);
        if (custInvoiceJour)
        {
            _taxTrans_Reporting.IsOriginalDocumentCreditNote = custInvoiceJour.creditNote() ? UnknownNoYes::Yes : UnknownNoYes::No;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsOriginalDocumentCreditNoteByVendInvoiceJour</Name>
				<Source><![CDATA[
    private boolean setIsOriginalDocumentCreditNoteByVendInvoiceJour(TaxTrans_Reporting _taxTrans_Reporting, Voucher _voucher, TransDate _transDate)
    {
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(_voucher, _transDate);
        if (vendInvoiceJour)
        {
            _taxTrans_Reporting.IsOriginalDocumentCreditNote = TaxTransGlobalInitializer::isVendInvoiceJourCreditNote(vendInvoiceJour)
                ? UnknownNoYes::Yes
                : UnknownNoYes::No;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataCacheForReasonData</Name>
				<Source><![CDATA[
    private void initDataCacheForReasonData()
    {
        if (!initializerDataCache)
        {
            initializerDataCache = TaxTransGlobalInitializerDataCache::construct();
        }

        initializerDataCache.parmHeadingTableId(taxTransToInit.HeadingTableId);

        switch (taxTransToInit.SourceTableId)
        {
            case tableNum(LedgerJournalTrans):
            case tableNum(CustInvoiceJour):
            case tableNum(VendInvoiceJour):
            case tableNum(InventTransferLine):
            case tableNum(InventTransferJourLine):
            case tableNum(CustTrans):
            case tableNum(VendTrans):
            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceRevenue):
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjProposalItem):
            case tableNum(ProjProposalEmpl):
            case tableNum(ProjProposalCost):
            case tableNum(ProjProposalRevenue):
            case tableNum(ProjProposalOnAcc):
            case tableNum(PurchLine):
            case tableNum(SalesLine):
            case tableNum(CustInvoiceTrans):
            case tableNum(VendInvoiceTrans):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(CustInvoiceLine):
                initializerDataCache.parmSourceLineTableId(taxTransToInit.SourceTableId);
                initializerDataCache.parmSourceLineTableRecId(taxTransToInit.SourceRecId);

                break;
            case tableNum(MarkupTrans):
                MarkupTrans markupTrans;
                select firstonly TransTableId, TransRecId from markupTrans
                    where markupTrans.RecId == taxTransToInit.SourceRecId;

                switch (markupTrans.TransTableId)
                {
                    case tableNum(VendInvoiceInfoLine):
                    case tableNum(CustInvoiceTrans):
                    case tableNum(CustInvoiceJour):
                        initializerDataCache.parmSourceLineTableId(markupTrans.TransTableId);
                        initializerDataCache.parmSourceLineTableRecId(markupTrans.TransRecId);

                        break;
                }

                break;
        }

        isDataCacheInitializedForReasonData = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonTableRefForSourceTable</Name>
				<Source><![CDATA[
    private ReasonTableRef getReasonTableRefForSourceTable()
    {
        ReasonTableRef reasonTable;

        if (!initializerDataCache || !initializerDataCache.parmSourceLineTableId() || !initializerDataCache.parmSourceLineTableRecId())
        {
            return reasonTable;
        }

        ReasonTableRefRecId reasonRecId;

        switch (initializerDataCache.parmSourceLineTableId())
        {
            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = initializerDataCache.getSourceLineTable() as LedgerJournalTrans;
                reasonRecId = ledgerJournalTrans.ReasonRefRecID;

                break;
            case tableNum(CustInvoiceJour):
                initializerDataCache.parmHeadingTableId(tableNum(CustInvoiceJour));
                CustInvoiceJour custInvoiceJour = initializerDataCache.getSourceHeaderTable() as CustInvoiceJour;
                reasonRecId = custInvoiceJour.ReasonTableRef;

                break;
            case tableNum(VendInvoiceJour):
                initializerDataCache.parmHeadingTableId(tableNum(VendInvoiceJour));
                VendInvoiceJour_W vendInvoiceJour_W = initializerDataCache.getSourceHeaderTable() as VendInvoiceJour_W;
                reasonRecId = vendInvoiceJour_W.ReasonTableRef;

                break;
            case tableNum(InventTransferLine):
            case tableNum(InventTransferJourLine):
                if (initializerDataCache.parmHeadingTableId() == tableNum(InventTransferTable))
                {
                    InventTransferTable inventTransferTable = initializerDataCache.getSourceHeaderTable() as InventTransferTable;
                    reasonRecId = inventTransferTable.ReasonTableRef;
                }

                break;
            case tableNum(CustTrans):
                CustTrans custTransBySourceRecId = initializerDataCache.getSourceLineTable() as CustTrans;
                reasonRecId = custTransBySourceRecId.ReasonRefRecId;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(CustInvoiceJour))
                {
                    CustInvoiceJour custInvoiceJourBySourceTrans = initializerDataCache.getSourceHeaderTable() as CustInvoiceJour;
                    reasonRecId = custInvoiceJourBySourceTrans.ReasonTableRef;
                }

                break;
            case tableNum(VendTrans):
                VendTrans vendTransBySourceRecId = initializerDataCache.getSourceLineTable() as VendTrans;
                reasonRecId = vendTransBySourceRecId.ReasonRefRecId;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(VendInvoiceJour))
                {
                    VendInvoiceJour_W vendInvoiceJourWBySourceTrans = initializerDataCache.getSourceHeaderTable() as VendInvoiceJour_W;
                    reasonRecId = vendInvoiceJourWBySourceTrans.ReasonTableRef;
                }

                break;
            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceRevenue):
            case tableNum(ProjInvoiceOnAcc):
                if (initializerDataCache.parmHeadingTableId() == tableNum(ProjInvoiceJour))
                {
                    ProjInvoiceJour projInvoiceJour = initializerDataCache.getSourceHeaderTable() as ProjInvoiceJour;
                    reasonRecId = projInvoiceJour.ReasonTableRef;
                }

                break;
            case tableNum(ProjProposalItem):
            case tableNum(ProjProposalEmpl):
            case tableNum(ProjProposalCost):
            case tableNum(ProjProposalRevenue):
            case tableNum(ProjProposalOnAcc):
                if (initializerDataCache.parmHeadingTableId() == tableNum(ProjProposalJour))
                {
                    ProjProposalJour projProposalJour = initializerDataCache.getSourceHeaderTable() as ProjProposalJour;
                    reasonRecId = projProposalJour.ReasonTableRef;
                }

                break;
            case tableNum(SalesLine):
                SalesLine salesLineBySourceRecId = initializerDataCache.getSourceLineTable() as SalesLine;
                reasonRecId = salesLineBySourceRecId.CreditNoteReasonCode;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(SalesTable))
                {
                    SalesTable salesTableBySourceSalesId = initializerDataCache.getSourceHeaderTable() as SalesTable;
                    reasonRecId = salesTableBySourceSalesId.CreditNoteReasonCode;
                }

                break;
            case tableNum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTransBySourceRecId = initializerDataCache.getSourceLineTable() as CustInvoiceTrans;
                reasonRecId = custInvoiceTransBySourceRecId.ReasonRefRecId;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(SalesTable))
                {
                    SalesTable salesTableBySourceSalesId = initializerDataCache.getSourceHeaderTable() as SalesTable;
                    reasonRecId = salesTableBySourceSalesId.CreditNoteReasonCode;
                }

                break;
            case tableNum(PurchLine):
                if (initializerDataCache.parmHeadingTableId() == tableNum(PurchTable))
                {
                    PurchTable purchTable = initializerDataCache.getSourceHeaderTable() as PurchTable;
                    reasonRecId = purchTable.ReasonTableRef;
                }

                break;
            case tableNum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTransBySourceRecId = initializerDataCache.getSourceLineTable() as VendInvoiceTrans;
                reasonRecId = vendInvoiceTransBySourceRecId.ReasonTableRef;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(PurchTable))
                {
                    PurchTable purchTable = initializerDataCache.getSourceHeaderTable() as PurchTable;
                    reasonRecId = purchTable.ReasonTableRef;
                }

                break;
            case tableNum(VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLineBySourceRecId = initializerDataCache.getSourceLineTable() as VendInvoiceInfoLine;
                reasonRecId = vendInvoiceInfoLineBySourceRecId.ReasonTableRef;

                if (!reasonRecId && !vendInvoiceInfoLineBySourceRecId.isNonPO())
                {
                    initializerDataCache.parmHeadingTableId(tableNum(PurchTable));

                    PurchTable purchTable = initializerDataCache.getSourceHeaderTable() as PurchTable;
                    reasonRecId = purchTable.ReasonTableRef;
                }

                break;
            case tableNum(CustInvoiceLine):
                CustInvoiceLine custInvoiceLineBySourceRecId = initializerDataCache.getSourceLineTable() as CustInvoiceLine;
                reasonRecId = custInvoiceLineBySourceRecId.ReasonRefRecId;

                if (!reasonRecId && initializerDataCache.parmHeadingTableId() == tableNum(CustInvoiceTable))
                {
                    CustInvoiceTable custInvoiceTableBySourceLine = initializerDataCache.getSourceHeaderTable() as CustInvoiceTable;
                    reasonRecId = custInvoiceTableBySourceLine.CorrectionReasonCode;
                }

                break;
        }

        reasonTable = ReasonTableRef::find(reasonRecId);

        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendInvoiceJourCreditNote</Name>
				<Source><![CDATA[
    internal static boolean isVendInvoiceJourCreditNote(VendInvoiceJour _vendInvoiceJour)
    {
        const str Key = 'IsVendInvoiceJourCreditNote';
        RecId vendInvoiceJourRecId;
        boolean isVendInvoiceJourCreditNote;

        if (appl.globalCache().isSet(classStr(TaxTransGlobalInitializer), Key))
        {
            [vendInvoiceJourRecId, isVendInvoiceJourCreditNote] = appl.globalCache().get(classStr(TaxTransGlobalInitializer), Key);
            if (vendInvoiceJourRecId == _vendInvoiceJour.RecId)
            {
                return isVendInvoiceJourCreditNote;
            }
        }

        isVendInvoiceJourCreditNote = _vendInvoiceJour.creditNote();
        appl.globalCache().set(classStr(TaxTransGlobalInitializer), Key, [_vendInvoiceJour.RecId, isVendInvoiceJourCreditNote]);

        return isVendInvoiceJourCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans_ReportingIsTransactionReversal</Name>
				<Source><![CDATA[
    internal void initTaxTrans_ReportingIsTransactionReversal(TaxTrans_Reporting _taxTrans_Reporting)
    {
        if (!TaxTransGlobalInitializerTransactionReversalFlight::instance().isEnabled())
        {
            return;
        }

        _taxTrans_Reporting.IsTransactionReversal = UnknownNoYes::No;

        if (taxTransToInit.TaxOrigin == TaxOrigin::TaxReversed)
        {
            if (isTransactionReversal)
            {
                _taxTrans_Reporting.IsTransactionReversal = UnknownNoYes::Yes;
            }
            else
            {
                TransactionReversalTrans transactionReversalTransReversed = TransactionReversalTrans::findTransactionReversalTrans(
                    taxTransToInit.TableId, taxTransToInit.RecId);

                if (transactionReversalTransReversed)
                {
                    CustVendInvoiceJour custVendInvoiceJourReversed = taxTransToInit.getInvoiceJour_EE();

                    if (custVendInvoiceJourReversed.TableId == tableNum(VendInvoiceJour))
                    {
                        TaxTrans taxTransOrig;
                        TransactionReversalTrans transactionReversalTransOrig;

                        select firstonly taxTransOrig
                            where taxTransOrig.TaxOrigin == TaxOrigin::Tax
                        exists join transactionReversalTransOrig
                            where transactionReversalTransOrig.RefRecId == taxTransOrig.RecId
                                && transactionReversalTransOrig.TraceNum == transactionReversalTransReversed.TraceNum
                                && transactionReversalTransOrig.RefTableId == transactionReversalTransReversed.RefTableId;

                        if (taxTransOrig)
                        {
                            CustVendInvoiceJour custVendInvoiceJourOrig = taxTransOrig.getInvoiceJour_EE();

                            if (custVendInvoiceJourOrig.TableId == tableNum(VendInvoiceJour))
                            {
                                _taxTrans_Reporting.IsTransactionReversal = UnknownNoYes::Yes;
                                TransactionReversal_Vend::createCustVendCreditInvoicingJour(custVendInvoiceJourReversed, custVendInvoiceJourOrig);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans_ReportingIsReversedOnSameDate</Name>
				<Source><![CDATA[
    internal RefRecId initTaxTrans_ReportingIsReversedOnSameDate(TaxTrans_Reporting _taxTrans_Reporting)
    {
        RefRecId ret;

        if (!TaxTransGlobalInitializerTransactionReverseOnSameDateFlight::instance().isEnabled()
            || _taxTrans_Reporting.IsReversedOnSameDate != UnknownNoYes::Unknown)
        {
            return ret;
        }

        _taxTrans_Reporting.IsReversedOnSameDate = UnknownNoYes::No;

        if (taxTransToInit.TaxOrigin == TaxOrigin::TaxReversed
            && (taxTransToInit.TaxBaseAmountCur != 0. || taxTransToInit.TaxAmountCur != 0.))
        {
            TransactionReversalTrans reversalTrans = TransactionReversalTrans::findTransactionReversalTrans(taxTransToInit.TableId, taxTransToInit.RecId);

            if (reversalTrans.TraceNum)
            {
                TaxTrans taxTransOpposite;
                TransactionReversalTrans reversalOpposite;
                TaxTrans_Reporting taxTrans_ReportingOpposite;

                select firstonly taxTrans_ReportingOpposite
                    where taxTrans_ReportingOpposite.IsReversedOnSameDate != UnknownNoYes::Yes
                exists join taxTransOpposite
                    where taxTransOpposite.RecId == taxTrans_ReportingOpposite.TaxTrans
                        && taxTransOpposite.TransDate == taxTransToInit.TransDate
                        && taxTransOpposite.TaxCode == taxTransToInit.TaxCode
                        && ((taxTransToInit.TaxBaseAmountCur != 0. && taxTransOpposite.TaxBaseAmountCur == -taxTransToInit.TaxBaseAmountCur)
                        ||  (taxTransToInit.TaxAmountCur != 0. && taxTransOpposite.TaxAmountCur == -taxTransToInit.TaxAmountCur))
                exists join reversalOpposite
                    where reversalOpposite.RefRecId == taxTransOpposite.RecId
                        && reversalOpposite.RefTableId == taxTransOpposite.TableId
                        && reversalOpposite.TraceNum == reversalTrans.TraceNum;

                if (taxTrans_ReportingOpposite.RecId)
                {
                    taxTrans_ReportingOpposite.selectForUpdate(true);
                    taxTrans_ReportingOpposite.skipDataMethods(true);
                    taxTrans_ReportingOpposite.IsReversedOnSameDate = UnknownNoYes::Yes;
                    taxTrans_ReportingOpposite.update();
                    ret = taxTrans_ReportingOpposite.RecId;

                    _taxTrans_Reporting.IsReversedOnSameDate = UnknownNoYes::Yes;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>