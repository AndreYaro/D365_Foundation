<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNumberSeqExtParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the class that provides number sequence extension parameters.
/// </summary>
public final class WHSNumberSeqExtParameters
{
    private static WHSNumberSeqExtParameters    emptyNumberSeqExtParameters;
    private Map                                 parameters;
    private boolean                             isEmpty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parameterInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a parameter was initialized.
    /// </summary>
    /// <param name="_parameterName">A parameter name.</param>
    /// <returns>
    /// True if a parameter was initialized; otherwise, false.
    /// </returns>
    private boolean parameterInitialized(str _parameterName)
    {
        return parameters.exists(_parameterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a parameter was initialized.
    /// </summary>
    /// <param name="_parameterName">A parameter name.</param>
    /// <returns>
    /// True if a parameter was initialized; otherwise, false.
    /// </returns>
    private void checkParameter(str _parameterName)
    {
        if (!this.parameterInitialized(_parameterName))
        {
            throw error(strFmt("@WAX:TheNumberSequenceExtensionParameterIsNotInitialized", _parameterName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value of a parameter.
    /// </summary>
    /// <param name="_parameterName">A parameter name.</param>
    /// <param name="_defaultValue">
    /// The parameter of type <c>anytype</c>.
    /// </param>
    /// <returns>
    /// A value of a parameter.
    /// </returns>
    private anytype getParameterValue(str _parameterName, anytype _defaultValue)
    {
        if (!this.parameterInitialized(extendedTypeStr(WHSLicensePlatePackType)))
        {
            return _defaultValue;
        }

        return parameters.lookup(_parameterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlatePackType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value of the <c>License plate packing type</c> parameter.
    /// </summary>
    /// <param name="_defaultValue">A default value which will be returned if the parameter doesn't exist.</param>
    /// <returns>
    /// A value of the <c>License plate packing type</c> parameter.
    /// </returns>
    [Hookable(false)]
    internal WHSLicensePlatePackType getLicensePlatePackType(anytype _defaultValue = nullValueBaseType(extendedTypeId2Type(extendedTypeNum(WHSLicensePlatePackType))))
    {
        return this.getParameterValue(extendedTypeStr(WHSLicensePlatePackType), _defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new value of a parameter.
    /// </summary>
    /// <param name="_parameterName">A parameter name.</param>
    /// <param name="_parameterValue">A parameter value.</param>
    /// <returns>
    /// A current instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </returns>
    private WHSNumberSeqExtParameters setParameterValue(str _parameterName, anytype _parameterValue)
    {
        if (isEmpty)
        {
            throw error("@WAX:NumberSeqExtEmptyParametersModifyValidationWarning");
        }

        parameters.insert(_parameterName, _parameterValue);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlatePackType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new value of the <c>License plate packing type</c> parameter.
    /// </summary>
    /// <param name="_licensePlatePackType">A License plate packing type.</param>
    /// <returns>
    /// A current instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </returns>
    [Hookable(false)]
    internal WHSNumberSeqExtParameters setLicensePlatePackType(WHSLicensePlatePackType _licensePlatePackType)
    {
        return this.setParameterValue(extendedTypeStr(WHSLicensePlatePackType), _licensePlatePackType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </summary>
    private void new()
    {
        parameters = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </returns>
    private static client WHSNumberSeqExtParameters construct()
    {
        return new WHSNumberSeqExtParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicensePlatePackType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </summary>
    /// <param name="_licensePlatePackType">A License plate packing type.</param>
    /// <returns>
    /// A new instance of the <c>WHSNumberSeqExtParameters</c> class.
    /// </returns>
    [Hookable(false)]
    public static server WHSNumberSeqExtParameters newFromLicensePlatePackType(WHSLicensePlatePackType _licensePlatePackType)
    {
        WHSNumberSeqExtParameters numberSeqExtParameters = WHSNumberSeqExtParameters::construct();

        numberSeqExtParameters.setLicensePlatePackType(_licensePlatePackType);

        return numberSeqExtParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns empty parameters.
    /// </summary>
    /// <returns>
    /// Empty parameters.
    /// </returns>
    [Hookable(false)]
    public static server WHSNumberSeqExtParameters emptyParameters()
    {
        if (!emptyNumberSeqExtParameters)
        {
            emptyNumberSeqExtParameters = WHSNumberSeqExtParameters::construct();

            emptyNumberSeqExtParameters.isEmpty = true;
        }

        return emptyNumberSeqExtParameters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>