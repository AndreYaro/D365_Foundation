<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceXMLDecoratorFactoryCycleCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceXMLDecoratorFactoryCycleCount</c> class is responsible for instantiating a
/// <c>WHSMobileAppServiceXMLDecorator</c> class used for cycle counting.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::CycleCounting),
    WHSWorkExecuteMode(WHSWorkExecuteMode::CycleCountGrouping),
    WHSWorkExecuteMode(WHSWorkExecuteMode::SystemDirected),
    WHSWorkExecuteMode(WHSWorkExecuteMode::UserDirected),
    WHSWorkExecuteMode(WHSWorkExecuteMode::SpotCycleCounting)]
    public class WHSMobileAppServiceXMLDecoratorFactoryCycleCount implements WHSIMobileAppServiceXMLDecoratorFactory
{
    #WHSRF

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDecorator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>WHSMobileAppServiceXMLDecoratorCycleCountGrouping</c> class,
    /// if the cycle counting process is in the appropriate step.
    /// </summary>
    /// <param name = "_con">
    /// Contains information about the context that may be required for instantiating
    /// the <c>WHSMobileAppServiceXMLDecoratorCycleCount</c> class.
    /// </param>
    /// <returns>
    /// The <c>WHSMobileAppServiceXMLDecorator</c> class.
    /// </returns>
    public WHSMobileAppServiceXMLDecorator getDecorator(container _con)
    {
        if (this.isFilterScreen(_con))
        {
            return new WHSMobileAppServiceXMLDecoratorCycleCount();
        }
        
        return new WHSMobileAppServiceXMLDecoratorFactoryDefault().getDecorator(_con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterScreen</Name>
				<Source><![CDATA[
    private boolean isFilterScreen(container _con)
    {
        WhsrfPassthrough pass = WhsrfPassthrough::create(conPeek(_con, 2));

        boolean isFilterScreen;

        if (this.canCheckProductAndTrackingDimensions(_con, pass)
			&& this.trackingDimensionsHaveValue(pass)
			&& this.productDimensionsHaveValue(pass))
        {
            if (WHSLocationProfile::findByWarehouseAndLocation(pass.lookupStr(#InventLocationId), pass.lookupStr(#WMSLocationId)).LPControlled)
            {
                isFilterScreen = pass.hasValue(#LicensePlateId);
            }
            else
            {
                isFilterScreen = true;
            }
        }

        return isFilterScreen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionsHaveValue</Name>
				<Source><![CDATA[
    protected boolean trackingDimensionsHaveValue(WhsrfPassthrough _pass)
    {
        boolean		   trackingDimensionsHaveValue = true;
        ListEnumerator le						   = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_pass.lookupStr(#ItemId))
																													 .trackingDimensionGroup())
																													 .activeFields()
																													 .getEnumerator();

        while (le.moveNext())
        {            
            switch (le.current())
            {
                case fieldNum(InventDim, InventSerialId):
                    trackingDimensionsHaveValue = _pass.hasValue(#SerialId);
                    break;

                case fieldNum(InventDim, InventBatchId):
                    trackingDimensionsHaveValue = _pass.hasValue(#BatchId);
                    break;
            }

            if (!trackingDimensionsHaveValue)
            {
                return trackingDimensionsHaveValue;
            }
        }

        return trackingDimensionsHaveValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsHaveValue</Name>
				<Source><![CDATA[
    protected boolean productDimensionsHaveValue(WhsrfPassthrough _pass)
    {
        boolean		   productDimensionsHaveValue = true;
		ListEnumerator le						  = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_pass.lookupStr(#ItemId))
																													.productDimensionGroup())
																													.activeFields()
																													.getEnumerator();

        while (le.moveNext())
        {            
            switch (le.current())
            {
                case fieldNum(InventDim, InventStyleId):
                    productDimensionsHaveValue = _pass.hasValue(#StyleId);
                    break;

                case fieldNum(InventDim, InventVersionId):
                    productDimensionsHaveValue = _pass.hasValue(#VersionId);
                    break;

                case fieldNum(InventDim, InventSizeId):
                    productDimensionsHaveValue = _pass.hasValue(#SizeId);
                    break;

                case fieldNum(InventDim, InventColorId):
                    productDimensionsHaveValue = _pass.hasValue(#ColorId);
                    break;

                case fieldNum(InventDim, configId):
                    productDimensionsHaveValue = _pass.hasValue(#ConfigId);
                    break;
            }

            if (!productDimensionsHaveValue)
            {
                return productDimensionsHaveValue;
            }
        }

        return productDimensionsHaveValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckProductAndTrackingDimensions</Name>
				<Source><![CDATA[
	protected boolean canCheckProductAndTrackingDimensions(container _con, WhsrfPassthrough _pass)
    {
        const int InputStep3 = 3;

        if (conPeek(conPeek(_con, #StateInfo), #StateInfoStep) != InputStep3
            && !_pass.exists(#RFAddLP)
            && !_pass.exists(#BatchId)
            && !_pass.exists(#SerialId)
            && !_pass.exists(#SizeId)
            && !_pass.exists(#ColorId)
            && !_pass.exists(#StyleId)
            && !_pass.exists(#VersionId)
            && !_pass.exists(#ConfigId)
            && WHSWorkTable::find(_pass.lookupStr(#WorkId)).WorkTransType != WHSWorkTransType::CycleCount)
        {
			return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
