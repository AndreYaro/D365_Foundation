<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionJourController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionJourController</c> class is the controller class for the
/// <c>CustCollectionJour</c> Microsoft SQL Server Reporting Services report.
/// </summary>
public class CustCollectionJourController extends GiroPrintMgmtFormLetterController implements
    BatchRetryable,
    ERIDocumentAttachmentController,
    ERIDestinationAwareController
{
    PaymentStub giroType;
    CustCollectionJourContract contract;
    ERDocumentAttachmentContract erDocumentAttachmentContract;
    private CBDDestinationsController cbdDestinationsController = CBDDestinationsController::tryCreateInstance();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmERDocumentAttachmentContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ERDocumentAttachmentContract parmERDocumentAttachmentContract(ERDocumentAttachmentContract _erDocumentAttachmentContract = erDocumentAttachmentContract)
    {
        erDocumentAttachmentContract = _erDocumentAttachmentContract;
        return erDocumentAttachmentContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroType</Name>
				<Source><![CDATA[
    public PaymentStub getGiroType()
    {
        return giroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::CustCollectionLetter);
        formLetterReport.parmPrintType(PrintCopyOriginal::OriginalPrint);
        formLetterReport.parmReportRun().parmCheckScreenOutput(true);

        contract = this.parmReportContract().parmRdpContract() as CustCollectionJourContract;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    ///    The <c>outReports</c> method loops over print management settings and calls this method for each
    ///    print management setting loaded.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The print management object has not been initialized.
    /// </exception>
    public void outputReport()
    {
        contract.parmPrintType(
            formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy ? "@SYS108914" : "@SYS108913");

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        CustCollectionLetterJour selectedRec = this.parmArgs() ? this.parmArgs().record() : null;
        QueryBuildDataSource ds;

        CustBillingClassification custBillingClassification;
        List billingClassificationList;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            contract = this.parmReportContract().parmRdpContract() as CustCollectionJourContract;
        }

        if (query)
        {
            ds = query.dataSourceTable(tableNum(CustCollectionLetterJour));

            if (selectedRec)
            {
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, CollectionLetterNum)).value(selectedRec.CollectionLetterNum);
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, AccountNum)).value(selectedRec.AccountNum);
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, Status)).value(enum2str(selectedRec.Status));
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, CollectionLetterCode)).value(enum2str(selectedRec.CollectionLetterCode));
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, JournalPrinted)).value(enum2str(selectedRec.JournalPrinted));

                if (selectedRec.CustBillingClassification && CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification()))
                {
                    custBillingClassification = CustBillingClassification::find(selectedRec.CustBillingClassification);
                    if (custBillingClassification)
                    {
                        billingClassificationList = new List(Types::String);
                        billingClassificationList.addEnd(custBillingClassification.BillingClassification);
                        contract.parmBillingClassification(billingClassificationList);
                    }
                }

                if (cbdDestinationsController)
                {
                    contract.parmHideSSRSDestination(cbdDestinationsController.getHideSSRSDestinationTab());
                }
            }
            else
            {
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, CollectionLetterNum)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, AccountNum)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, Status)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, CollectionLetterCode)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, JournalPrinted)).value("");
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        QueryRun queryRun = new QueryRun(this.getFirstQuery());

        formLetterReport.parmDefaultCopyPrintJobSettings(this.getReportContract().parmPrintSettings());
        formLetterReport.parmDefaultOriginalPrintJobSettings(this.getReportContract().parmPrintSettings());

        formLetterReport.parmUsePrintMgmtDestinations(contract.parmUsePrintManagement());

        if (CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification()))
        {
            contract = this.parmReportContract().parmRdpContract() as CustCollectionJourContract;

            if (contract.parmBillingClassification() || contract.parmInclTransWithNoBillingClass())
            {
                CustBillingClassificationReportManager::setBillingClassificationRanges(queryRun.query().dataSourceTable(tableNum(CustCollectionLetterJour)),
                                                                                    contract.parmBillingClassification(),
                                                                                    contract.parmInclTransWithNoBillingClass(),
                                                                                    fieldNum(CustCollectionLetterJour, CustBillingClassification));
            }
        }

        boolean isEncounteredException = false;

        while (queryRun.next() && !this.parmCancelRun())
        {
            try
            {
                if (queryRun.changed(tableNum(CustCollectionLetterJour)))
                {
                    CustCollectionLetterJour custCollectionLetterJour = queryRun.get(tableNum(CustCollectionLetterJour));

                    giroType = custCollectionLetterJour.GiroType;

                    CustTable custTable = CustTable::find(custCollectionLetterJour.AccountNum);

                    formLetterReport.loadPrintSettings(custCollectionLetterJour, custTable, custCollectionLetterJour.LanguageId, custCollectionLetterJour.CollectionLetterNum);

                    if (cbdDestinationsController && !contract.parmUsePrintManagement())
                    {
                        cbdDestinationsController.setERDestinationsInPrintSettings(formLetterReport.parmReportRun());
                    }

                    this.parmReportContract().parmRdlContract().parmLanguageId(custCollectionLetterJour.LanguageId);
                    this.parmReportContract().parmRdlContract().parmLabelLanguageId(custCollectionLetterJour.LanguageId);

                    // <GCN>
                    #ISOCountryRegionCodes

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && CustParameters::find().TaxIntegrationSystem_CN)
                    {
                        if (formLetterReport.moveNextPrintSetting())
                        {
                            PrintMgmtPrintSettingDetail printSettingDetail = formLetterReport.getCurrentPrintSetting();
                            this.parmReportName(ssrsReportStr(CustCollectionJour, Report_CN));
                            printSettingDetail.parmReportFormatName(this.parmReportName());
                            formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
                        }
                    }
                    // </GCN>

                    contract.parmRecordId(custCollectionLetterJour.RecId);

                    this.showJournalPrinterInfoLog(custCollectionLetterJour, custCollectionLetterJour.JournalPrinted);

                    this.outputReports();

                    DocumentAttachment documentAttachment = DocumentAttachment::construct(PrintMgmtDocumentType::CustCollectionLetter);
                    documentAttachment.parmJournal(custCollectionLetterJour);
                    documentAttachment.parmInnerReportDataContract(reportContract);
                    documentAttachment.parmPrintCopyOriginal(formLetterReport.parmPrintType());
                    documentAttachment.parmERContract(erDocumentAttachmentContract);
                    documentAttachment.run();
                }
            }
            catch (Exception::Error)
            {
                isEncounteredException = true;
                error(strFmt("@AccountsReceivable:CustCollectionNotePrintError", (queryRun.get(tableNum(CustCollectionLetterJour)) as CustCollectionLetterJour).CollectionLetterNum));
            }
        }

        if (isEncounteredException)
        {
            //This error has been thrown just to fail the batch after processing all the collection letter notes and
            //later on this error message is overwritten by the framework generic message.
            throw Error('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournalPrinterInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows an infolog if the journal is already printed.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    /// <c>CustCollectionLetterJour</c> table buffer.
    /// </param>
    /// <param name = "_showInfoLog">
    /// Boolean value indicating whether the infolog should be displayed.
    /// </param>
    protected void showJournalPrinterInfoLog(CustCollectionLetterJour _custCollectionLetterJour, boolean _showInfoLog)
    {
        if (_showInfoLog)
        {
            info(strFmt("@SYS68056", _custCollectionLetterJour.CollectionLetterNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the fields that are included in the first enable index of a table on the data source of the
    /// report query.
    /// </summary>
    /// <param name="id">
    /// The ID of the table for which the index fields are to be hidden on the <c>CustInterestNote</c>
    /// report dialog box.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean showIndexFields(TableId id)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static CustCollectionJourController construct()
    {
        return new CustCollectionJourController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        CustCollectionJourController controller = CustCollectionJourController::construct();

        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustCollectionLetter).getDefaultReportFormat());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataContractInfoObjectsInternal</Name>
				<Source><![CDATA[
    protected Map getDataContractInfoObjectsInternal()
    {
        if (!dataContractInfoObjects)
        {
            super();

            if (cbdDestinationsController)
            {
                if (!formLetterReport)
                {
                    this.initFormLetterReport();
                }

                cbdDestinationsController.setHierarchyType(formLetterReport.parmReportRun().parmHierarchyType());
                cbdDestinationsController.setNodeType(formLetterReport.parmReportRun().parmNodeType());
                cbdDestinationsController.setDocumentType(formLetterReport.parmReportRun().parmDocType());
                cbdDestinationsController.setUseAllAvailablePrintSettingDetails(
                    !this.parmArgs()
                    || !this.parmArgs().record()
                    || this.parmArgs().record().TableId != tableNum(CustCollectionLetterJour));

                cbdDestinationsController.initERFormatDestinations(this.applyQueryRange(new Query(this.getFirstQuery().pack())), dataContractInfoObjects);
            }
        }

        return dataContractInfoObjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyQueryRange</Name>
				<Source><![CDATA[
    private Query applyQueryRange(Query _query)
    {
        CustCollectionLetterJour selectedRec = this.parmArgs() ? this.parmArgs().record() : null;

        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(CustCollectionLetterJour));
        Range collectionLetterNumRange;
        Range accountNumRange;
        Range statusRange;
        Range collectionLetterCodeRange;
        Range journalPrintedRange;

        if (selectedRec)
        {
            collectionLetterNumRange = selectedRec.CollectionLetterNum;
            accountNumRange = selectedRec.AccountNum;
            statusRange = enum2str(selectedRec.Status);
            collectionLetterCodeRange = enum2str(selectedRec.CollectionLetterCode);
            journalPrintedRange = enum2str(selectedRec.JournalPrinted);
        }

        SysQuery::findOrCreateRange(qbds, fieldNum(CustCollectionLetterJour, CollectionLetterNum)).value(collectionLetterNumRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustCollectionLetterJour, AccountNum)).value(accountNumRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustCollectionLetterJour, Status)).value(statusRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustCollectionLetterJour, CollectionLetterCode)).value(collectionLetterCodeRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustCollectionLetterJour, JournalPrinted)).value(journalPrintedRange);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDestinationTab</Name>
				<Source><![CDATA[
    public boolean showDestinationTab(boolean _showDestinationTab = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisplayFormatNameOnDestinationTab</Name>
				<Source><![CDATA[
    public boolean shouldDisplayFormatNameOnDestinationTab()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>