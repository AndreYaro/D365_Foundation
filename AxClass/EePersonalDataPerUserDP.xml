<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EePersonalDataPerUserDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Data provider for the <c>EePersonalDataPerUser</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(EePersonalDataPerUser)),
    SRSReportParameterAttribute(classstr(EePersonalDataPerUserContract))
]
public class EePersonalDataPerUserDP extends SRSReportDataProviderBase
{
    EEPersonalDataPerUserTmp    personalDataPerUserTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEE00012, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldAndValueData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a table record to determine the names of the fields and their associated values.
    /// </summary>
    /// <param name="_table">
    /// The table record to process.
    /// </param>
    /// <remarks>
    /// Field and value information is pumped in to the temp table instance.
    /// Fields with empty values are ignored.
    /// </remarks>
    private void generateFieldAndValueData(Common _table)
    {
        TableId tableId = _table.TableId;
        str tableName;
        str fieldName;
        str fieldValue;

        DictTable dictTable;
        SysDictField dictField, extDictField;
        int i, j;
        fieldId fieldId, extFieldId;

        tableName = tableid2pname(tableId);

        dictTable = new DictTable(tableId);
        for (i = 1; i <= dictTable.fieldCnt(TableScope::IncludeBaseTables); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i, TableScope::IncludeBaseTables);
            dictField = new SysDictField(tableId, fieldId);
            for (j = 1; j <= dictField.arraySize(); j++)
            {
                extFieldId = fieldId2Ext(fieldId, j);
                extDictField = new SysDictField(tableId, extFieldId);
                if (_table.(extFieldId) != dictField.nullValue())
                {
                    fieldName = fieldid2pname(tableId, extFieldId);
                    fieldValue = _table.(extFieldId);

                    this.insertTempData(tableName, fieldName, fieldValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEEPersonalDataPerUserTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records drom the <c>EEPersonalDataPerUserTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The values from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(EEPersonalDataPerUserTmp))
    ]
    public EEPersonalDataPerUserTmp getEEPersonalDataPerUserTmp()
    {
        select personalDataPerUserTmp;
        return personalDataPerUserTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempData</Name>
				<Source><![CDATA[
        private void insertTempData(str _tableName, str _fieldName, str _fieldValue)
    {
        personalDataPerUserTmp.Table = _tableName;
        personalDataPerUserTmp.Field = _fieldName;
        personalDataPerUserTmp.Value = _fieldValue;

        personalDataPerUserTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun                        queryRun;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        Query                           query = new Query(this.parmQuery());

        EePersonalDataPerUserContract   contract = this.parmDataContract() as EePersonalDataPerUserContract;
        DirPersonRecId                  personId = contract.parmPersonId();
        int                             i;

        // some tables involved may contain date effective data, set the valid date and datetime ranges for the query
        // to include all data records, not just the "current" date effective records
        query.validTimeStateDateRange(dateNull(), maxDate());
        query.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());

        // add a range to the query to include only data associated with the selected Person
        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(DirPerson));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(DirPerson, RecId));
        queryBuildRange.value(SysQuery::value(personId));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            // the joins in the query are set with Fetch mode = 1:n
            // this combined with the use of queryRun.changed ensures that each record in the overall join is only processed once
            for (i = 1; i <= query.dataSourceCount(); i++)
            {
                if (queryRun.changed(query.dataSourceNo(i).table()))
                {
                    this.generateFieldAndValueData(queryRun.getNo(i));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>