<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPostProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxPostProjAdvancedJournal</c> class is the tax calculation and posting class for project advanced journal lines.
/// </summary>
class TaxPostProjAdvancedJournal extends TaxPost
{
    ProjAdvancedJournalLineTaxDocument projAdvancedJournalLineTaxDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes _post, Object _initializationClass, TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        super();

        projAdvancedJournalLineTaxDocument = _initializationClass as ProjAdvancedJournalLineTaxDocument;

        if (projAdvancedJournalLineTaxDocument == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWorkTrans         = _tmpTaxWorkTrans;

        taxModuleType        = TaxModuleType::Project;

        ProjAdvancedJournalLine projAdvancedJournalLine = projAdvancedJournalLineTaxDocument.parmProjAdvancedJournalLine();

        headingTableId       = projAdvancedJournalLine.TableId;
        headingRecId         = projAdvancedJournalLine.RecId;
        origHeadingTableId   = projAdvancedJournalLine.TableId;
        origHeadingRecId     = projAdvancedJournalLine.RecId;

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
            {
                throw error("@SYS18447");
            }

            taxDate             = projAdvancedJournalLine.AccountingDate;
            sourceCurrencyCode  = projAdvancedJournalLine.CostCurrency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    protected Object getInitializationClass()
    {
        return projAdvancedJournalLineTaxDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public TableId sourceTableId()
    {
        return tableNum(ProjAdvancedJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RecId sourceRecId()
    {
        ProjAdvancedJournalLine projAdvancedJournalLine = projAdvancedJournalLineTaxDocument.parmProjAdvancedJournalLine();
        return projAdvancedJournalLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount       taxAmount;

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);

            this.postTaxToISV();
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current transaction to post supports the <c>SubLedgerDistributions</c> or
    /// <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    /// support them. As the individual transaction support the sub-ledger, they must override this method, and return true.
    /// </summary>
    /// <returns>
    /// true if the current transaction to post supports the <c>SubLedgerDistributions</c> or the
    /// <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        boolean ret;
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            ret = true;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxToISV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts tax to ISV for all unique tax documents.
    /// </summary>
    private void postTaxToISV()
    {
        TaxIntegrationBusinessProcess businessProcess =
            TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(headingTableId, headingRecId);

        if (TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::PostTax)
            && TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(businessProcess) == TaxSolutionProviderType::ISV)
        {
            TaxIntegrationCalculationInputPersisted packedTaxCalculationInput;

            // Since the posted journal table is the same as the document heading table and they are both <c>ProjAdvancedJournalLine</c>,
            // here updates the posted journal table id and rec id with the document heading table id and rec id.
            // By the way, the <c>HeadingTableId</c> field of <c>TaxTrans</c> is <c>ProjAdvancedJournalLine</c> as well.
            update_recordset packedTaxCalculationInput
                setting JournalTableId = headingTableId,
                    JournalRecId = headingRecId
                where packedTaxCalculationInput.HeadingTableId == headingTableId
                    && packedTaxCalculationInput.HeadingRecId == headingRecId;

            TaxIntegrationFacade::postTaxToISV(headingTableId, headingRecId, taxModuleType);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>