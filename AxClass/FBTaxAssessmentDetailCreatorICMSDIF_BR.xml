<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreatorICMSDIF_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the ICMS-DIF tax assessment details
/// </summary>
class FBTaxAssessmentDetailCreatorICMSDIF_BR extends FBTaxAssessmentDetailCreator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS-DIFF assessment detail for all fiscal documents.
    /// </summary>
    public void createAllAssessmentDetails()
    {
        // It there is no tax assessment for the period, there is no reason to calculate details for the fiscal documents in that period, so exit.
        if (!fbTaxAssessment)
        {
            return;
        }

        ttsbegin;

        this.bookPostedTaxAdjustments();

        this.createDetailsForFiscalDocuments();

        if (mustCreatePaymentsByDocument)
        {
            FBTaxAssessmentPaymentCreator_BR::createFromFiscalDocuments(fbTaxAssessment, DateTimeUtil::getToday(bookingPeriod.fiscalEstablishment().getTimezone())).run();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailsForFiscalDocuments</Name>
				<Source><![CDATA[
    private void createDetailsForFiscalDocuments()
    {
        FiscalDocument_BR                           fiscalDocument;
        FiscalDocumentLine_BR                       fiscalDocumentLine;
        FiscalDocumentTaxTransOutgoingICMSDif_BR    fiscalDocumentTaxTransOutgoingICMSDif;
        FiscalDocumentTaxTrans_BR                   fiscalDocumentTaxTrans;
        LogisticsPostalAddress                      logisticsPostalAddress;
        FiscalDocumentTaxTransPovertyFund_BR        fiscalDocumentTaxTransPovertyFund;
        FBBookingPeriodFiscalDocument_BR            bookingPeriodFiscalDocument;
        FBTaxTrans_BR                               existingFbTaxTrans;
        FBTaxTrans_BR                               fbTaxTrans;
        FBTaxTransPovertyFund_BR                    fbTaxTransPovertyFund;
        boolean                                     isTaxAssessmentForFEState;
        EffectiveDateTime                           fromDate = DateTimeUtil::minValue(), toDate = DateTimeUtil::maxValue();

        while select validTimeState(fromDate, toDate) CFOP from fiscalDocumentLine
            join RecId, FiscalDocumentLine, Type, TaxAmount, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, TaxationOrigin, TaxationCode, FiscalValue
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine        == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type                     == TaxType_BR::ICMSDiff
            join FiscalDocumentTaxTrans, ICMSDifIssuerTaxAmount, ICMSDifRecipientTaxAmount from fiscalDocumentTaxTransOutgoingICMSDif
                where fiscalDocumentTaxTransOutgoingICMSDif.FiscalDocumentTaxTrans == fiscalDocumentTaxTrans.RecId
            join RecId, Voucher, AccountingDate, FiscalEstablishment, DataAreaId, ThirdPartyPostalAddress, Direction,
                 FiscalEstablishmentPostalAddress, Accesskey, ThirdPartyName, FiscalDocumentDate, Model
                from fiscalDocument
                where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                    && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
                    && fiscalDocument.RecId          == fiscalDocumentLine.FiscalDocument
            join RecId from bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.fbBookingPeriod_BR    == fbTaxAssessment.fbBookingPeriod_BR
                    && bookingPeriodFiscalDocument.FiscalDocument_BR    == fiscalDocumentLine.FiscalDocument
                    && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
             outer join TaxPovertyFundAmount from fiscalDocumentTaxTransPovertyFund
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
             exists join logisticsPostalAddress
                where (logisticsPostalAddress.RecId  == fiscalDocument.ThirdPartyPostalAddress
                        || logisticsPostalAddress.RecId  == fiscalDocument.FiscalEstablishmentPostalAddress)
                    && logisticsPostalAddress.State  == fbTaxAssessment.State
             notexists join existingFbTaxTrans
                where existingFbTaxTrans.FiscalDocumentTaxTrans_BR  == fiscalDocumentTaxTrans.RecId
                    &&  existingFbTaxTrans.FBTaxAssessment_BR       == fbTaxAssessment.RecId
        {
            isTaxAssessmentForFEState = fbTaxAssessment.State == fbTaxAssessment.bookingPeriod().fiscalEstablishment().postalAddress().State;

            fbTaxTrans.TaxType                      = TaxType_BR::ICMSDiff;
            fbTaxTrans.Classification               = fiscalDocument.Model == FiscalBooksConstants_BR::FiscalDocModel_63 ? FBTaxAssessmentClassification_BR::Informative : FBTaxAssessmentDetailCreatorIcms_BR::getTaxAssessmentClassification(fiscalDocument.Direction, fiscalDocumentLine.cfop, fiscalDocumentTaxTrans.FiscalValue);
            fbTaxTrans.FBTaxAssessment_BR           = fbTaxAssessment.RecId;
            fbTaxTrans.FiscalDocument_BR            = fiscalDocument.RecId;
            fbTaxTrans.FiscalEstablishmentId        = fiscalDocument.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea  = fiscalDocument.dataAreaId;
            fbTaxTrans.CFOP                         = fiscalDocumentLine.cfop;

            fbTaxTrans.FiscalDocumentTaxTrans_BR    = fiscalDocumentTaxTrans.RecId;
            fbTaxTrans.TaxationCode                 = strFmt('%1%2', enum2int(fiscalDocumentTaxTrans.TaxationOrigin), fiscalDocumentTaxTrans.TaxationCode);

            if (isTaxAssessmentForFEState)
            {
                fbTaxTrans.TaxAmount                = fiscalDocumentTaxTransOutgoingICMSDif.ICMSDifIssuerTaxAmount;
            }
            else
            {
                fbTaxTrans.TaxAmount                = fiscalDocumentTaxTransOutgoingICMSDif.ICMSDifRecipientTaxAmount
                                                    + fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
            }

            fbTaxTrans.TaxBaseAmount                = fiscalDocumentTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt          = fiscalDocumentTaxTrans.TaxBaseAmountExempt;
            fbTaxTrans.TaxBaseAmountOther           = fiscalDocumentTaxTrans.TaxBaseAmountOther;

            fbTaxTrans.Voucher                      = fiscalDocument.Voucher;
            fbTaxTrans.VoucherDataArea              = fiscalDocument.dataAreaId;
            fbTaxTrans.VoucherTransDate             = fiscalDocument.AccountingDate;

            fbTaxTrans.insert();

            if (fiscalDocumentTaxTransPovertyFund
                && !isTaxAssessmentForFEState
                && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                fbTaxTransPovertyFund.FBTaxTrans_BR = fbTaxTrans.RecId;
                fbTaxTransPovertyFund.TaxAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
                fbTaxTransPovertyFund.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceAmountPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the credit balance amount from previous period.
    /// </summary>
    /// <param name="_creditBalanceAmountPreviousPeriod">
    /// The credit balance amount from previous period.
    /// </param>
    /// <param name="_creditBalanceAmountPreviousPeriodPovertyFund">
    /// The credit balance amount related to poverty fund from previous period.
    /// </param>
    public void updateCreditBalanceAmountPreviousPeriod(AmountMST _creditBalanceAmountPreviousPeriod, AmountMST _creditBalanceAmountPreviousPeriodPovertyFund = 0)
    {
        this.updateTaxTransCreditBalFromPrevPeriod(_creditBalanceAmountPreviousPeriod + _creditBalanceAmountPreviousPeriodPovertyFund);
        this.updateCreditBalancePrevPeriodPovertyFund(_creditBalanceAmountPreviousPeriodPovertyFund);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the credit balance amount from previous period if exists previous tax assessment.
    /// </summary>
    public void updateCreditBalanceFromPreviousPeriod()
    {
        FBTaxAssessment_BR previousTaxAssessment = fbTaxAssessment.previousTaxAssessment();

        if (previousTaxAssessment)
        {
            FBTaxAssessmentCalculatorICMSDif_BR taxAssessmentCalculator = previousTaxAssessment.getCalculator() as FBTaxAssessmentCalculatorICMSDif_BR;
            taxAssessmentCalculator.calculate();

            this.updateTaxTransCreditBalFromPrevPeriod(taxAssessmentCalculator.getCreditBalanceAtEndOfThePeriod());
            this.updateCreditBalancePrevPeriodPovertyFund(taxAssessmentCalculator.getCreditBalancePovertyFund());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalancePrevPeriodPovertyFund</Name>
				<Source><![CDATA[
    private void updateCreditBalancePrevPeriodPovertyFund(AmountMST _creditBalanceAmountPreviousPeriod)
    {
        FBTaxTrans_BR fbTaxTrans;

        ttsBegin;

        select firstonly RecId from fbTaxTrans
            where fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod
                && fbTaxTrans.FBTaxAssessment_BR == fbTaxAssessment.RecId;

        FBTaxTrans_BR::insertOrUpdatePovertyFund(fbTaxTrans, _creditBalanceAmountPreviousPeriod);

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>