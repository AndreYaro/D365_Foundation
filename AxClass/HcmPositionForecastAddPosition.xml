<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastAddPosition</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastAddPosition</c> class creates a forecast position records from
/// selected existing positions.
/// </summary>
/// <remarks>
/// Each forecast position must have a backing position record. Once the record is created the details
/// of the position and forecast position are completed detached. The deletion of a forecast position
/// will not delete the backing position; however the if you delete the backing position record the
/// forecast position record will be deleted.
/// </remarks>
class HcmPositionForecastAddPosition
{
    int                                         numberOfRecordsCreated;
    utcdatetime                                 asOfDate;
    container                                   selectedPositionReferences;
    HcmPositionRecId                            currentPositionReference;
    HcmPositionForecastRecId                    currentPositionForecastReference;
    HcmPositionId                               currentPositionId;
    HcmPositionDuration                         currentPositionDuration;
    BudgetPlanningProcessRecId                  budgetPlanningProcessRecId;
    BudgetPlanScenarioRecId                     budgetPlanScenarioRecId;
    HcmPositionDetail                           currentpositionDetail;
    HcmPositionForecastScenario                 currentHcmPositionForecastScenario;
    HcmForecastScenario                         currentHcmForecastScenario;
    boolean                                     newForecastPositionCreated;
    boolean                                     newForecastPositionScenarioCreated;
    HcmBudgetPurposeTypeRecId                   earningBdugetPurposeTypeRecId;
    HcmWorker                                   activeWorker;
    boolean                                     canAssignWorkerCompFromLivePosition;
    HcmPositionForecastAnniversaryDateType      positionAnnivDateType;
    Timezone                                    processLegalEntityTimeZone;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewForecastPositionsFromPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new forecast position records.
    /// </summary>
    /// <remarks>
    /// The duplicate key and error exception will be caught to allow the process to continue.
    /// </remarks>
    protected void addNewForecastPositionsFromPosition()
    {
        #AviFiles
        int numberOfReferences = conLen(this.parmSelectedPositionReferences());
        int counter;

        for (counter = 1; counter <= numberOfReferences; counter++)
        {
            this.parmCurrentPositionReference(conPeek(this.parmSelectedPositionReferences(), counter));
            try
            {
                ttsbegin;
                this.createPositionForecast();
                this.createPositionForecastDetail();
                this.createPositionForecastHierarchy();
                this.createPositionForecastScenario();
                this.createPositionForecastDefaultDim();
                this.createPositionForecastBudgetAcctLine();
                this.createPositionForecastLastModified();
                ttscommit;

                if (newForecastPositionScenarioCreated)
                {
                    this.parmNumberOfRecordsCreated(this.parmNumberOfRecordsCreated() + 1);
                }

                if (newForecastPositionCreated || newForecastPositionScenarioCreated)
                {
                    newForecastPositionCreated = false;
                    newForecastPositionScenarioCreated = false;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                exceptionTextFallThrough();
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }

        info (strFmt("@GLS190419", this.parmNumberOfRecordsCreated(), int2str(numberOfReferences)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecast</Name>
				<Source><![CDATA[
    private void createPositionForecast()
    {
        HcmPosition position;
        HcmPositionForecast positionForecast;

        position = HcmPosition::find(this.parmCurrentPositionReference());

        if (position)
        {
            positionForecast = HcmPositionForecast::findByPosition(position.RecId);
            this.parmHcmWorker(HcmWorker::find(HcmPositionWorkerAssignment::findByPosition(position.RecId, this.parmAsOfDate()).Worker));
            if (positionForecast.RecId == 0)
            {
                positionForecast.Position = this.parmCurrentPositionReference();
                positionForecast.insert();
                newForecastPositionCreated = true;
            }

            this.parmCurrentPositionId(position.PositionId);
            this.parmCurrentPositionForecastReference(positionForecast.RecId);
            this.createPositionDetail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastBudgetAcctLine</Name>
				<Source><![CDATA[
    private void createPositionForecastBudgetAcctLine()
    {
        HcmPositionBudgetAccountLine positionBudgetAccountLine;
        HcmForecastScenarioRecId hcmForecastScenarioRecId;
        HcmPositionForecastScenarioRecId positionForecastScenarioRecId;
        HcmPositionForecastAssignCost_LivePos hcmPositionForecastAssignCostElement;
        utcdatetime validFrom = this.parmAsOfDate();

        hcmForecastScenarioRecId = this.parmCurrentHcmForecastScenario().RecId;
        // Copy over all default cost elements from current position to forecast position
        positionForecastScenarioRecId = this.parmCurrentHcmPositionForecastScenario().RecId;

        if (newForecastPositionScenarioCreated)
        {
            select firstonly ValidTimeState(validFrom) LegalEntity, Position
                from positionBudgetAccountLine
                where positionBudgetAccountLine.Position == this.parmCurrentPositionReference();
            if (positionBudgetAccountLine.RecId > 0
                || this.parmEarningBudgetPurposeType() > 0
                || this.parmCanAssignWorkerCompFromLivePosition())
            {
                hcmPositionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newAssignCostFromLiveByPosition(positionForecastScenarioRecId,
                                                                                                                                this.parmCurrentPositionReference());
                hcmPositionForecastAssignCostElement.parmEarningCostElementId(this.parmEarningBudgetPurposeType());
                hcmPositionForecastAssignCostElement.parmPositionAsOfDate (this.parmAsOfDate());
                hcmPositionForecastAssignCostElement.parmHcmWorker(this.parmHcmWorker());
                hcmPositionForecastAssignCostElement.parmCanAssignWorkerCompFromLivePosition(this.parmCanAssignWorkerCompFromLivePosition());
                hcmPositionForecastAssignCostElement.processPositionForecastCost();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastBudgetDefaultValue</Name>
				<Source><![CDATA[
    private void createPositionForecastBudgetDefaultValue()
    {
        HcmPositionBudgetDefaultValue positionBudgetDefaultValue;
        HcmPositionForecastBudgetDefaultValue positionForecastBudgetDefaultValue;
        HcmPositionForecastRecId positionForecastReference = this.parmCurrentPositionForecastReference();

        utcdatetime validFrom = this.parmAsOfDate();
        utcdatetime validTo = validFrom;

        if (newForecastPositionCreated)
        {
            insert_recordset positionForecastBudgetDefaultValue (PositionForecast, LegalEntity)
                select ValidTimeState(validFrom, validTo) positionForecastReference, LegalEntity from positionBudgetDefaultValue
                    where positionBudgetDefaultValue.Position == this.parmCurrentPositionReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastDefaultDim</Name>
				<Source><![CDATA[
    private void createPositionForecastDefaultDim()
    {
        HcmPositionDefaultDimension positionDefaultDimension;
        HcmPositionForecastDefaultDim positionForecastDefaultDim;
        LegalEntity planningProcessLegalEntity;
        HcmForecastScenario hcmForecastScenario;

        HcmPositionForecastRecId positionForecastReference = this.parmCurrentPositionForecastReference();

        if (newForecastPositionCreated)
        {
            hcmForecastScenario = HcmForecastScenario::findByPlanningProcessAndScenario(this.parmBudgetPlanningProcess(), this.parmBudgetPlanScenario());
            planningProcessLegalEntity =   hcmForecastScenario.LegalEntity;

            insert_recordset positionForecastDefaultDim (PositionForecast, LegalEntity, DefaultDimension, DistributionTemplate)
                select positionForecastReference, planningProcessLegalEntity, DefaultDimension, AccountingDistributionTemplate from positionDefaultDimension
                        where positionDefaultDimension.Position == this.parmCurrentPositionReference() &&
                               positionDefaultDimension.LegalEntity == planningProcessLegalEntity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionDetail</Name>
				<Source><![CDATA[
    private void createPositionDetail()
    {
        HcmPositionDetail positionDetail = HcmPositionDetail::findByPosition(this.parmCurrentPositionReference(), this.parmAsOfDate());
        this.parmCurrentPositionDetail(positionDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastDetail</Name>
				<Source><![CDATA[
    private void createPositionForecastDetail()
    {
        HcmPositionDetail positionDetail;
        HcmPositionForecastDetail positionForecastDetail;

        positionDetail = this.parmCurrentPositionDetail();

        if (positionDetail.RecId)
        {
            if (newForecastPositionCreated)
            {
                positionForecastDetail.PositionForecast = this.parmCurrentPositionForecastReference();
                positionForecastDetail.CompLocation = positionDetail.CompLocation;
                positionForecastDetail.Department = positionDetail.Department;
                positionForecastDetail.Description = positionDetail.Description;
                positionForecastDetail.PositionType = positionDetail.PositionType;
                positionForecastDetail.Title = positionDetail.Title;
                positionForecastDetail.Job = positionDetail.Job;

                if (positionForecastDetail.doesJobAcceptForecastPositions())
                {
                    // Job maximum has not been exceeded.
                    positionForecastDetail.insert();
                }
                else
                {
                    // Job maximum has been exceeded.
                    throw error(strFmt("@GLS190525", this.parmCurrentPositionId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastDetailV2</Name>
				<Source><![CDATA[
    private void createPositionForecastDetailV2()
    {
        HcmPositionForecastDetailV2 positionForecastDetail;
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionDetail positionDetail;

        positionForecastScenario = HcmPositionForecastScenario::findByPositionForecastBudgetPlanScenario(this.parmCurrentPositionForecastReference(),this.parmCurrentHcmForecastScenario().RecId);
        positionDetail = this.parmCurrentPositionDetail();

        if (positionDetail.RecId)
        {
            if (newForecastPositionScenarioCreated)
            {
                positionForecastDetail.PositionForecast = this.parmCurrentPositionForecastReference();
                positionForecastDetail.CompLocation = positionDetail.CompLocation;
                positionForecastDetail.Department = positionDetail.Department;
                positionForecastDetail.Description = positionDetail.Description;
                positionForecastDetail.PositionType = positionDetail.PositionType;
                positionForecastDetail.Title = positionDetail.Title;
                positionForecastDetail.Job = positionDetail.Job;
                positionForecastDetail.PositionForecastScenario = positionForecastScenario.RecId;

                if (positionForecastDetail.doesJobAcceptForecastPositions())
                {
                    // Job maximum has not been exceeded.
                    positionForecastDetail.insert();
                }
                else
                {
                    // Job maximum has been exceeded.
                    throw error(strFmt("@GLS190525", this.parmCurrentPositionId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastHierarchy</Name>
				<Source><![CDATA[
    private void createPositionForecastHierarchy()
    {
        HcmPositionHierarchy positionHierarchy;
        HcmPositionForecastHierarchy positionForecastHierarchy;

        positionHierarchy = HcmPositionHierarchy::findByPositionAndHierarchyType(this.parmCurrentPositionReference(), HcmPositionHierarchyType::findLineType().RecId, this.parmAsOfDate());

        if (newForecastPositionCreated)
        {
            positionForecastHierarchy.clear();
            positionForecastHierarchy.PositionForecast = this.parmCurrentPositionForecastReference();
            positionForecastHierarchy.PositionHierarchyType = HcmPositionHierarchyType::findLineType().RecId;

            if (positionHierarchy.RecId)
            {
                positionForecastHierarchy.ParentPosition = positionHierarchy.ParentPosition;
            }

            positionForecastHierarchy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastLastModified</Name>
				<Source><![CDATA[
    private void createPositionForecastLastModified()
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;

        hcmPositionForecastLastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(this.parmCurrentHcmPositionForecastScenario().RecId);

        if (newForecastPositionScenarioCreated && hcmPositionForecastLastModified.RecId == 0)
        {
            hcmPositionForecastLastModified.PositionForecastScenario = this.parmCurrentHcmPositionForecastScenario().RecId;
            hcmPositionForecastLastModified.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>HcmPositionForecastScenario</c> table record and <c>HcmForecastScenario</c> table record.
    /// </summary>
    private void createPositionForecastScenario()
    {
        HcmForecastScenario hcmForecastScenario = this.parmCurrentHcmForecastScenario();

        if (hcmForecastScenario.RecId == 0)
        {
            hcmForecastScenario = HcmForecastScenario::findByPlanningProcessAndScenario(this.parmBudgetPlanningProcess(),
                                                                                    this.parmBudgetPlanScenario());
            if (!hcmForecastScenario)
            {
                hcmForecastScenario.BudgetPlanningProcess = this.parmBudgetPlanningProcess();
                hcmForecastScenario.BudgetPlanScenario = this.parmBudgetPlanScenario();
                hcmForecastScenario.insert();
            }

            this.parmCurrentHcmForecastScenario(hcmForecastScenario);
        }

        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::findByPositionForecastBudgetPlanScenario(this.parmCurrentPositionForecastReference(), hcmForecastScenario.RecId);

        if (!positionForecastScenario && positionForecastScenario.RecId == 0)
        {
            positionForecastScenario.ForecastScenario = hcmForecastScenario.RecId;
            positionForecastScenario.FullTimeEquivalency = this.parmCurrentPositionDetail().FullTimeEquivalency;
            positionForecastScenario.VersionDateTime = this.parmAsOfDate();
            positionForecastScenario.PositionForecast = this.parmCurrentPositionForecastReference();
            positionForecastScenario.LegalEntity = hcmForecastScenario.LegalEntity;

            HcmPositionDuration positionDuration = HcmPositionDuration::findByPosition(this.parmCurrentPositionReference(), this.parmAsOfDate());
            if (positionDuration)
            {
                positionForecastScenario.ActivationDateTime = positionDuration.ValidFrom;
                positionForecastScenario.RetirementDateTime = positionDuration.ValidTo;
            }
            else
            {
                utcdatetime asOfDateLocal = this.parmAsOfDate();
                positionForecastScenario.ActivationDateTime = asOfDateLocal;
                positionForecastScenario.RetirementDateTime = DateTimeUtil::maxValue();
            }

            if (positionForecastScenario.validateWrite())
            {
                ttsbegin;
                positionForecastScenario.WorkerName = this.parmHcmWorker().name();
                positionForecastScenario.AnniversaryDate = this.getWorkerAnniversaryDate();
                positionForecastScenario.insert();
                newForecastPositionScenarioCreated = true;
                HcmPositionForecastBudgetDefaultValue::createFromHcmPositionForecastScenario(positionForecastScenario.ForecastScenario, positionForecastScenario.PositionForecast);
                ttscommit;
            }
        }

        this.parmCurrentHcmPositionForecastScenario(positionForecastScenario);
        this.createPositionForecastDetailV2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerAnniversaryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the worker's start date based on the date type selected for the anniversary date when creating a forecast position.
    /// </summary>
    /// <returns>
    /// Anniversary date value for the worker based on the selected date type.
    /// </returns>
    /// <remarks>
    /// The returned date is adjusted based on timezone of the selected forecast scenario legal entity.
    /// </remarks>
    private date getWorkerAnniversaryDate()
    {
        CompanyInfoRecId legalEntity = this.parmCurrentHcmForecastScenario().LegalEntity;

        if (!processLegalEntityTimeZone)
        {
            processLegalEntityTimeZone = CompanyInfo::getDefaultTimeZone(CompanyInfo::findRecId(legalEntity));
        }

        utcdatetime anniversaryDate = DateTimeUtil::minValue();

        if (this.parmHcmWorker() && this.parmPositionAnniversaryDateType())
        {
            HcmEmploymentDetail hcmEmploymentDetail;
            switch (this.parmPositionAnniversaryDateType())
            {
                case HcmPositionForecastAnniversaryDateType::AdjustedStartDate:
                    hcmEmploymentDetail = HcmEmploymentDetail::findByWorkerLegalEntity(this.parmHcmWorker().RecId, legalEntity, this.parmAsOfDate());

                    if (hcmEmploymentDetail.RecId > 0)
                    {
                        anniversaryDate = hcmEmploymentDetail.AdjustedWorkerStartDate;
                    }

                    break;

                case HcmPositionForecastAnniversaryDateType::WorkerStartDate:
                    hcmEmploymentDetail = HcmEmploymentDetail::findByWorkerLegalEntity(this.parmHcmWorker().RecId, legalEntity, this.parmAsOfDate());

                    if (hcmEmploymentDetail.RecId > 0)
                    {
                        anniversaryDate = hcmEmploymentDetail.WorkerStartDate;
                    }

                    break;

                case HcmPositionForecastAnniversaryDateType::EmploymentStartDate:
                    HcmEmployment hcmEmployment = HcmEmployment::findByWorkerLegalEntity(this.parmHcmWorker().RecId, legalEntity, this.parmAsOfDate());

                    if (hcmEmployment.RecId > 0)
                    {
                        anniversaryDate = hcmEmployment.ValidFrom;
                    }
                    break;

                case HcmPositionForecastAnniversaryDateType::SeniorityDate:
                    HcmWorkerTitle hcmWorkerTitle =  HcmWorkerTitle::findByWorker(this.parmHcmWorker().RecId, this.parmAsOfDate());

                    if (hcmWorkerTitle.RecId > 0)
                    {
                        anniversaryDate = hcmWorkerTitle.SeniorityDate;
                    }

                    break;
            }
        }

        return HcmDateTimeUtil::convertToDate(anniversaryDate, processLegalEntityTimeZone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchAddExistingPosition</Name>
				<Source><![CDATA[
    private void launchAddExistingPosition()
    {
        Args args;
        FormRun formRun;

        args = new Args(formStr(HcmPositionForecastAddPosition));
        args.parmObject(this);
        formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAsOfDate</Name>
				<Source><![CDATA[
    public utcdatetime parmAsOfDate(utcdatetime _asOfDate = asOfDate)
    {
        asOfDate = _asOfDate;
        return asOfDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningProcess</Name>
				<Source><![CDATA[
    public BudgetPlanningProcessRecId parmBudgetPlanningProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId = budgetPlanningProcessRecId)
    {
        budgetPlanningProcessRecId = _budgetPlanningProcessRecId;
        return budgetPlanningProcessRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanScenario</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmBudgetPlanScenario(BudgetPlanScenarioRecId _budgetPlanScenarioRecId = budgetPlanScenarioRecId)
    {
        budgetPlanScenarioRecId = _budgetPlanScenarioRecId;
        return budgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanAssignWorkerCompFromLivePosition</Name>
				<Source><![CDATA[
    public boolean parmCanAssignWorkerCompFromLivePosition(boolean _canAssignWorkerCompFromLivePosition = canAssignWorkerCompFromLivePosition)
    {
        canAssignWorkerCompFromLivePosition = _canAssignWorkerCompFromLivePosition;

        return canAssignWorkerCompFromLivePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentHcmForecastScenario</Name>
				<Source><![CDATA[
    public HcmForecastScenario parmCurrentHcmForecastScenario(HcmForecastScenario _hcmForecastScenario = currentHcmForecastScenario)
    {
        currentHcmForecastScenario = _hcmForecastScenario;
        return currentHcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentHcmPositionForecastScenario</Name>
				<Source><![CDATA[
    public HcmPositionForecastScenario parmCurrentHcmPositionForecastScenario(HcmPositionForecastScenario _hcmPositionForecastScenario = currentHcmPositionForecastScenario)
    {
        currentHcmPositionForecastScenario = _hcmPositionForecastScenario;
        return currentHcmPositionForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPositionDetail</Name>
				<Source><![CDATA[
    public HcmPositionDetail parmCurrentPositionDetail(HcmPositionDetail _positionDetail = currentpositionDetail)
    {
        currentpositionDetail = _positionDetail;
        return _positionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPositionDuration</Name>
				<Source><![CDATA[
    public HcmPositionDuration parmCurrentPositionDuration(HcmPositionDuration _positionDuration = currentPositionDuration)
    {
        currentPositionDuration = _positionDuration;
        return currentPositionDuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPositionForecastReference</Name>
				<Source><![CDATA[
    public HcmPositionForecastRecId parmCurrentPositionForecastReference(HcmPositionForecastRecId _currentPositionForecastReference = currentPositionForecastReference)
    {
        currentPositionForecastReference = _currentPositionForecastReference;
        return currentPositionForecastReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPositionId</Name>
				<Source><![CDATA[
    public HcmPositionId parmCurrentPositionId(HcmPositionId _currentPositionId = currentPositionId)
    {
        currentPositionId = _currentPositionId;
        return currentPositionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPositionReference</Name>
				<Source><![CDATA[
    public HcmPositionRecId parmCurrentPositionReference(HcmPositionRecId _currentPositionReference = currentPositionReference)
    {
        currentPositionReference = _currentPositionReference;
        return currentPositionReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningBudgetPurposeType</Name>
				<Source><![CDATA[
    public HcmBudgetPurposeTypeRecId parmEarningBudgetPurposeType(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId = earningBdugetPurposeTypeRecId)
    {
        earningBdugetPurposeTypeRecId = _budgetPurposeTypeRecId;
        return earningBdugetPurposeTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorker</Name>
				<Source><![CDATA[
    public HcmWorker parmHcmWorker(HcmWorker _hcmWorker = activeWorker)
    {
        activeWorker = _hcmWorker;
        return activeWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionAnniversaryDateType</Name>
				<Source><![CDATA[
    public HcmPositionForecastAnniversaryDateType parmPositionAnniversaryDateType(HcmPositionForecastAnniversaryDateType _annivDateType = positionAnnivDateType)
    {
        positionAnnivDateType= _annivDateType;
        return positionAnnivDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfRecordsCreated</Name>
				<Source><![CDATA[
    public int parmNumberOfRecordsCreated(int _numberOfrecordsCreated = numberOfRecordsCreated)
    {
        numberOfRecordsCreated = _numberOfrecordsCreated;
        return numberOfrecordsCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedPositionReferences</Name>
				<Source><![CDATA[
    public container parmSelectedPositionReferences(container _selectedPositionReferences = selectedPositionReferences)
    {
        selectedPositionReferences = _selectedPositionReferences;
        return selectedPositionReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSelectedPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process for creating forecast positions from live positions.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>HcmPositionForecastCopyContract</c> class.
    /// </param>
    public void processSelectedPosition(HcmPositionForecastAddPositionContract _contract)
    {
        this.parmBudgetPlanningProcess(_contract.parmBudgetPlanningProcess());
        this.parmBudgetPlanScenario(_contract.parmBudgetPlanScenario());
        this.parmAsOfDate(_contract.parmAsOfDate());
        this.parmSelectedPositionReferences(_contract.parmSelectedPositionReferences());
        this.parmEarningBudgetPurposeType(_contract.parmEarningBudgetPurposeType());
        this.parmCanAssignWorkerCompFromLivePosition(_contract.parmCanAssignWorkerCompFromLivePosition());
        this.parmPositionAnniversaryDateType(_contract.parmPositionAnniversaryDateType());

        if (conLen(this.parmSelectedPositionReferences()) > 0)
        {
            this.addNewForecastPositionsFromPosition();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HcmPositionForecastAddPosition construct()
    {
        return new HcmPositionForecastAddPosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return ("@GLS190374");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>