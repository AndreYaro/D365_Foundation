<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkExecuteDisplayReprintLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to reprint license plate labels.
/// </summary>
[SysObsolete('This class has been refactored. Refer class <c>WHSProcessGuideReprintLabelController</c> instead.', false, 30\06\2020),
WHSWorkExecuteMode(WHSWorkExecuteMode::ReprintLabel)]
public class whsWorkExecuteDisplayReprintLabel extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLPSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for selecting LP.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildLPSelect(container _con)
    {
        container                   ret = _con;
        WHSLastPrintedLicensePlate  defaultLP;

        defaultLP = WHSWorkUserSession::find(userId).LastPrintedLicensePlate;

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, defaultLP, #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReprintLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for showing entered LP label information.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_enteredLP">
    /// The entered license plate.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildReprintLabel(container _con, WHSLastPrintedLicensePlate _enteredLP)
    {
        container               ret = _con;
        WHSLicensePlateLabel    licensePlateLabel;

        select firstonly ItemName, InventQty, InventUnitId from licensePlateLabel order by RecId desc
            where licensePlateLabel.LicensePlateId == _enteredLP;

        ret += [this.buildControl(#RFLabel, "@WAX3178", "@WAX3179", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, "@WAX2202", strFmt("@WAX730", _enteredLP), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, "@SYS5398", strFmt("@WAX3189", licensePlateLabel.ItemName), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, "@WAX3182", strFmt("@WAX1685", WHSWorkExecuteDisplay::num2StrDisplay(licensePlateLabel.InventQty), licensePlateLabel.InventUnitId), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS8813", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container                   ret = conNull();
        WHSLastPrintedLicensePlate  enteredLP;
        WHSLicensePlateLabel        validateLP;
        int                         hasError = 0;

        hasError = this.hasError(_con);

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0:
                ret = this.buildLPSelect(ret);
                step = 1;
                break;

            case 1:
                enteredLP = conPeek(conPeek(_con, 4 + hasError), 5);

                select firstonly RecId from validateLP
                    where validateLP.LicensePlateId == enteredLP;

                if (validateLP.RecId == 0)
                {
                    throw error(strFmt("@WAX:Error_LicensePlateDoesNotExist", enteredLP));
                }

                ret = this.buildReprintLabel(ret, enteredLP);
                step = 2;

                pass.insert(#LicensePlateId, enteredLP);
                break;

            case 2:
                enteredLP = pass.lookup(#LicensePlateId);
                this.printLabel(enteredLP);
                ret = this.addErrorLabel(ret, "@WAX3181", WHSRFColorText::Success);
                ret = this.buildLPSelect(ret);
                step = 1;
                break;
        }

        ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::ReprintLabel, step, pass);
        ret = this.addCancelButton(ret, 1, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints entered license plate using document routing.
    /// </summary>
    /// <param name="_enteredLP">
    /// Entered LP.
    /// </param>
    void printLabel(WHSLastPrintedLicensePlate _enteredLP)
    {
        WHSDocumentRouting          documentRouting = WHSDocumentRouting::construct();
        WHSLicensePlateLabel        licensePlateLabel;

        select firstonly licensePlateLabel
            order by licensePlateLabel.PrintedDate desc
            where licensePlateLabel.LicensePlateId == _enteredLP;

        documentRouting.parmUserId(userId);
        documentRouting.printDocument(licensePlateLabel.WorkTransType, licensePlateLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use WhsWorkExecuteDisplay::construct() instead.', false, 31\05\2017)]
    static WHSWorkExecuteDisplayReprintLabel construct()
    {
        WHSWorkExecuteDisplayReprintLabel   workExecuteDisplayReprintLabel;

        workExecuteDisplayReprintLabel = new WHSWorkExecuteDisplayReprintLabel();

        return workExecuteDisplayReprintLabel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>