<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord_NACHA_IAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaymRecord_NACHA_IAT extends VendOutPaymRecord_NACHA
{
    //***** NACHA IAT Record Layout *****
    //
    //      Field                          Offset     Value
    //--    ------------------------------- -------  -----------
    //01    recordTypeCode                  01 - 01   6
    //02    transactionCode                 02 - 03   22
    //03    receivingDFI_Identification     04 - 11
    //04    checkDigit                      12 - 12
    //05    addendaRecord                   13 - 16
    //06    reserved                        17 - 29
    //07    amount                          30 - 39
    //08    foreignReceiverAccountNumber    40 - 74
    //09    reservedSecond                  75 - 76
    //10    gatewayOperatorIndicator        77 - 77
    //11    secondryOFACIndicatorOffset     78 - 78
    //12    addendaRecordIndicator          79 - 79 1 (One)
    //13    traceNumber                     80 - 94


    //Offsets:
    #define.addendaRecordOffset(13)
    #define.reservedOffset(17)
    #define.amountOffset(30)
    #define.foreignReceiverAccountNumberOffset(40)
    #define.reservedSecondOffset(75)
    #define.gatewayOperatorIndicatorOffset(77)
    #define.secondryOFACIndicatorOffset(78)
    #define.addendaRecordIndicatorOffset(79)
    #define.traceNumberOffset(80)

    //Field Lengths:
    #define.addendaLength(4)
    #define.reservedLength(13)
    #define.foreignReceiverAccountNumberLength(35)
    #define.reservedSecondlength(2)
    #define.gatewayOperatorIndicatorLength(1)
    #define.secondryOFACIndicatorLenth(1)
    #define.traceNumAddendaLenth(7)
    #define.traceLenth(15)

    container               nacha_iat_Record;
    CompanyInfo             companyInfo;
    VendTable               vendTable;
    int                     noAddendaRecord;
    str #traceLenth         traceNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIATFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds debug field information to the output file.
    /// </summary>
    private void addIATFieldPositions()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCDEEEEFFFFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIJKLMMMMMMMMMMMMMMM - iAT PAYABLES RECORD')
        #define.iATTraceNumber                      ('                                                                               MMMMMMMMMMMMMMM - Trace Number [Journal ID + Line Number]')
        #define.iATAddendaIndicator                 ('                                                                              L - Addenda Record Indicator = "0"')
        #define.iATSecondryOFACIndicator            ('                                                                             K - SECONDARY OFAC SCREENING INDICATOR')
        #define.iATGatewayOperatorIndicator         ('                                                                            J - GATEWAY OPERATOR OFAC SCREENING INDICATOR')
        #define.iATreservedSecond                   ('                                                                          II - IAT reseved ')
        #define.iATforeignReceiverAccountNumber     ('                                       HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH -foreign receiver account number/DFI acount number]')
        #define.iATAmount                           ('                             GGGGGGGGGG - Amount [$$$$$$$$cc]')
        #define.iATreserved                         ('                FFFFFFFFFFFFF - IAT reseved ')
        #define.iATaddenda                          ('            EEEE - Number of Addenda record')
        #define.iATCheckDigit                       ('           D - Check Digit')
        #define.iATreceivingDFI_Identification      ('   CCCCCCCC - Receiving DFI Identification')
        #define.iATTransactionCode                  (' BB - Transaction Code = "22" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "6"')

        file.write(#iATRecordLayout);
        file.write(#iATTraceNumber);
        file.write(#iATAddendaIndicator);
        file.write(#iATSecondryOFACIndicator);
        file.write(#iATGatewayOperatorIndicator);
        file.write(#iATreservedSecond);
        file.write(#iATforeignReceiverAccountNumber);
        file.write(#iATAmount);
        file.write(#iATreserved);
        file.write(#iATaddenda);
        file.write(#iATCheckDigit);
        file.write(#iATreceivingDFI_Identification);
        file.write(#iATTransactionCode);
        file.write(#iATRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null,
        RunbaseProgress _progress = null)
    {
        boolean ok = true;
        #ISOCountryRegionCodes

        changecompany(custVendPaym.ledgerJournalTrans().Company)
        {
            if (VendPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, VendPaymentValidate::PaymReference)
                && !_ledgerJournalTrans.PaymReference)
            {
                ok = checkFailed("@SYS24523");
            }

            if (ok)
            {
                // Only transactions with Debit Amounts can be used from Accounts Payable
                if (custVendPaym.paymAmountInSendersCurrency() <= 0)
                {
                    ok = checkFailed(strFmt("@SYS98765", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                vendBankAccount = VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(),
                                            VendTable::find(custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
                if (!vendBankAccount)
                {
                    ok = checkFailed(strFmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                else
                {
                    if (!vendBankAccount.AccountNum)
                    {
                        ok = checkFailed(strFmt("@SYS82529", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }

                    if (SysCountryRegionCode::isLocationInCountryRegion(vendBankAccount.Location, [#isoUS]))
                    {
                        ok = checkFailed(strFmt("@SYS330062", _ledgerJournalTrans.PaymMode, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correspondenceIATAddendaRecord</Name>
				<Source><![CDATA[
    container correspondenceIATAddendaRecord()
    {
        container correspondenceITAddendaRecord = conNull();

        #define.recTypeCode('7')
        #define.addendaCode('18')
        #define.zero('0')
        #define.spc(' ')
        #define.correspoBankNameLen(35)
        #define.correspoBankINumQualifierLen(2)
        #define.correspoBankIdentificationNumLen(34)
        #define.correspoBankBranchCountryCodeLen(3)
        #define.addendaSequenceNumLength(4)

        // Offset          Hardcoded       Value
        str 1       recordTypeCode                  =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                     =   #AddendaCode;               // 02 - 03          18              The code to identify 1st IAT Addenda records is 10
        str 35      correspoBankName                =   strRep(#spc,35);            // 04 - 38
        str 2       correspoBankINumQualifier       =   strRep(#spc,2);             // 39 - 40
        str 34      correspoBankIdentificationNum   =   strRep(#spc,34);            // 41 - 74
        str 3       correspoBankBranchCountryCode   =   strRep(#spc,3);             // 75 - 77
        str 6       reserve                         =   strRep(#spc,6);             // 78 - 83          BLANK
        str 4       addendaSequenceNum              =   strRep(#zero,4);            // 84 - 87
        str 7       entryDetailseqNumber            =   strRep(#zero,7);            // 88 - 94

        correspoBankName                  =   strLFix(vendBankAccount.Name,#correspoBankNameLen,#spc);
        correspoBankINumQualifier         =   strLFix(enum2str(custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier),#correspoBankINumQualifierLen,#spc);

        if (custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier == CustVendOriginatingDFIQualifier_US::One     ||
           custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier == CustVendOriginatingDFIQualifier_US::Two)
        {
            correspoBankIdentificationNum = strLFix(vendBankAccount.RegistrationNum,#correspoBankIdentificationNumLen,#spc);
        }
        else
        {
            correspoBankIdentificationNum = strLFix(vendBankAccount.BankIBAN,#correspoBankIdentificationNumLen,#spc);
        }
        correspoBankBranchCountryCode     = strLFix(LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location).CountryRegionId,
                                                    #correspoBankBranchCountryCodeLen, #spc);
        addendaSequenceNum                = strRFix(int2str(custVendOutPaym.getAddendaSequence()),#addendaSequenceNumLength,#spc);
        entryDetailseqNumber              = this.entryDetailSequenceNumber();

        correspondenceITAddendaRecord     = conIns(correspondenceITAddendaRecord, 1, recordTypeCode + addendaCode + correspoBankName + correspoBankINumQualifier +
                                            correspoBankIdentificationNum  + correspoBankBranchCountryCode + reserve +addendaSequenceNum + entryDetailseqNumber );

        return correspondenceITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correspondenceIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void  correspondenceIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFGGGGGGHHHHIIIIIII - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       IIIIIII -Entry detail equence number')
        #define.iATAddendaSequenceNum               ('                                                                                   HHHH -Entry detail equence number')
        #define.iATreserved                         ('                                                                             GGGGGG - IAT reseved ')
        #define.iATCorrespoBankBranchCountryCode    ('                                                                          FFF -Receiving company name /Indivisual name')
        #define.iATCorrespoBankIdentificationNum    ('                                        EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE - RECEIVING DFI IDENTIFICATION')
        #define.iATCorrespoBankINumQualifier        ('                                      DD  RECEIVING DFI IDENTIFICATION NUMBER QUALIFIER')
        #define.iATCorrespoBankName                 ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC - RECEIVING DFI NAME')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "13" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATCorrespoBankBranchCountryCode);
        file.write(#iATCorrespoBankIdentificationNum);
        file.write(#iATCorrespoBankINumQualifier);
        file.write(#iATCorrespoBankName);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryDetailSequenceNumber</Name>
				<Source><![CDATA[
    str 7  entryDetailSequenceNumber()
    {
        return subStr(traceNumber, strLen(traceNumber) - #traceNumAddendaLenth + 1, #traceNumAddendaLenth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fifthIATAddendaRecord</Name>
				<Source><![CDATA[
    container fifthIATAddendaRecord()
    {
        container   fifthITAddendaRecord                =   conNull();

        #define.recTypeCode('7')
        #define.AddendaCode('14')
        #define.zero('0')
        #define.spc(' ')
        #define.bankNameLength(35)
        #define.receivingDFIQualifierLength(2)
        #define.receivingDFIIdentificationLegth(34)
        #define.receivingDFIBranchLength(3)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03         14              The code to identify 1st IAT Addenda records is 10
        str 35      receivingDFIName            =   strRep(#spc,35);            // 04 - 38
        str 2       receivingDFIQualifier       =   strRep(#spc,2);             // 39 - 40
        str 34      receivingDFIIdentification  =   strRep(#spc,34);            // 41 - 74
        str 3       receivingDFIBranch          =   strRep(#spc,3);             // 75 - 77
        str 10      reserve                     =   strRep(#spc,10);            // 78 - 87        BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero,7);            // 88 - 94

        receivingDFIName        = strLFix(custVendPaym.recieversBankName(), #bankNameLength, #spc);
        receivingDFIQualifier   = strLFix(enum2str(custVendPaym.parmCustVendNACHAIATInfoTable().ReceivingDFIQualifier),
                                            #receivingDFIQualifierLength,#spc);

        if (custVendPaym.parmCustVendNACHAIATInfoTable().ReceivingDFIQualifier == CustVendReceivingDFIQualifier_US ::One ||
           custVendPaym.parmCustVendNACHAIATInfoTable().ReceivingDFIQualifier == CustVendReceivingDFIQualifier_US::Two)
        {
            receivingDFIIdentification = strLFix(custVendPaym.recieversBankRegistrationNumber(),
                                            #receivingDFIIdentificationLegth, #spc);
        }
        else
        {
            receivingDFIIdentification = strLFix(vendBankAccount.BankIBAN, #receivingDFIIdentificationLegth, #spc);
        }

        receivingDFIBranch      = strLFix(LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location).CountryRegionId,
                                            #receivingDFIBranchLength, #spc);
        entryDetailseqNumber    = this.entryDetailSequenceNumber();

        fifthITAddendaRecord    = conIns(fifthITAddendaRecord, 1, recordTypeCode + addendaCode + receivingDFIName + receivingDFIQualifier +
                                  receivingDFIIdentification  + receivingDFIBranch + reserve + entryDetailseqNumber );

        return fifthITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fifthIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void fifthIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGHHHHHHH - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                     HHHHHHH -Entry detail equence number')
        #define.iATreserved                         ('                                                                           GGGGGGGGGG - IAT reseved ')
        #define.iATReceivingDFIBranch               ('                                                                        FFF -Receiving company name /Indivisual name')
        #define.iATReceivingDFIIdentification       ('                                      EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE - RECEIVING DFI IDENTIFICATION')
        #define.iATReceivingDFIQualifier            ('                                    DD  RECEIVING DFI IDENTIFICATION NUMBER QUALIFIER')
        #define.iATReceivingDFIName                 ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC - RECEIVING DFI NAME')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "13" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATReceivingDFIBranch);
        file.write(#iATReceivingDFIIdentification);
        file.write(#iATReceivingDFIQualifier);
        file.write(#iATReceivingDFIName);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField05</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the number of addenda records
    /// </summary>
    protected void fillField05()
    {
        str 4 noOfAddendaRecords;
        #define.zero('0')

        noofAddendaRecords = strRFix(int2str(noAddendaRecord),#addendaLength,#zero);
        this.strInsert(noOfAddendaRecords, #addendaRecordOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField06</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills spaces.
    /// </summary>
    protected void fillField06()
    {
        #define.spc('')
        str blankSpace;

        blankSpace = strRep(#spc, #reservedLength);
        this.strInsert(blankSpace, #reservedOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField07</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the transaction amount.
    /// </summary>
    protected void fillField07()
    {
        transactionAmount = custVendPaym.paymAmountInSendersCurrency();
        this.strInsert(custVendOutPaym.num2StrNACHA(transactionAmount, 10), #amountOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills account NUMBER/DFI ACCOUNT number of the foreign receiver.
    /// </summary>
    protected void fillField08()
    {
        this.strInsert(subStr(vendBankAccount.AccountNum, 1, #foreignReceiverAccountNumberLength),
                        #foreignReceiverAccountNumberOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField09</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills spaces.
    /// </summary>
    protected void fillField09()
    {
        #define.spc('')
        str blankSpace;

        blankSpace = strRep(#spc, #reservedSecondlength);
        this.strInsert(blankSpace, #reservedSecondOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField10</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the gateway operator OFAC screening indicator.
    /// </summary>
    protected void fillField10()
    {
        this.strInsert(subStr(enum2str(custVendPaym.parmCustVendNACHAIATInfoTable().GatewayOperatorOFACIndicator),
                             1, #gatewayOperatorIndicatorLength),#gatewayOperatorIndicatorOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField11</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the secondary OFAC screening indicator.
    /// </summary>
    protected void fillField11()
    {
        this.strInsert(subStr(enum2str(custVendPaym.parmCustVendNACHAIATInfoTable().SecondaryOFACIndicator), 1, #secondryOFACIndicatorLenth),
                      #secondryOFACIndicatorOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField12</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Addenda Record Indicator field in the NACHA IAT detail record. Will always be 0.
    /// </summary>
    protected void fillField12()
    {
        #define.addendaIndicator('1')

        this.strInsert(#addendaIndicator, #addendaRecordIndicatorOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField13</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Trace Number field in the NACHA IAT detail record.
    /// </summary>

    protected void fillField13()
    {
        traceNumber = this.generateTraceNumber();
        this.strInsert(traceNumber, #traceNumberOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls each <c>fillFieldXX</c> method to populate the entire IAT payment record.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10();
        this.fillField11();
        this.fillField12();
        this.fillField13();
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstIATAddendaRecord</Name>
				<Source><![CDATA[
    container firstIATAddendaRecord()
    {
        container   firstAddendaRecord                =   conNull();

        #define.recTypeCode('7')
        #define.AddendaCode('10')
        #define.zero('0')
        #define.spc(' ')
        #define.foreignPaymentAmountLen(18)
        #define.receivingComppanyNameLength(35)
        #define.transactionCode('DEP')
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03         10              The code to identify 1st IAT Addenda records is 10
        str 3       transactionTypeCode         =   #transactionCode;           // 04 - 06                         This field contains a three-character code used to identify the type of transaction.
        str 18      foreignPaymentAmount        =   strRep(#spc, 18);           // 07 - 24                         trnsaactionAmount
        str 22      foreignTraceNumber          =   strRep(#spc, 22);           // 25 - 46        BLANK
        str 35      receivingComppanyName       =   strRep(#spc, 35);           // 47 - 81
        str 6       reserve                     =   strRep(#spc, 6);            // 82 - 87        BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);           // 88 - 94

        foreignPaymentAmount  = custVendOutPaym.num2StrNACHA(transactionAmount, #foreignPaymentAmountLen);
        receivingComppanyName = strLFix(custVendPaym.recieversCompanyName(), #receivingComppanyNameLength, #spc);
        entryDetailseqNumber  = this.entryDetailSequenceNumber();

        firstAddendaRecord = conIns(firstAddendaRecord, 1, recordTypeCode + addendaCode + transactionTypeCode +
                             foreignPaymentAmount + foreignTraceNumber + receivingComppanyName + reserve + entryDetailseqNumber);

        return firstAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void firstIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGHHHHHHH - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       HHHHHHH -Entry detail equence number')
        #define.iATreserved                         ('                                                                                 GGGGGG - IAT reseved ')
        #define.iATReceivingComppanyName            ('                                              FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -Receiving company name /Indivisual name')
        #define.iAForeignTraceNumber                ('                        EEEEEEEEEEEEEEEEEEEEEE - Foreign trace number')
        #define.iAtForeignPaymentAmount             ('      DDDDDDDDDDDDDDDDDD -  Foreign payment amount')
        #define.iATtransactionTypeCode              ('   CCC - Transaction type code')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "22" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "6"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATReceivingComppanyName);
        file.write(#iAForeignTraceNumber);
        file.write(#iAtForeignPaymentAmount);
        file.write(#iATtransactionTypeCode);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fourthIATAddendaRecord</Name>
				<Source><![CDATA[
    container fourthIATAddendaRecord()
    {
        container   fourthITAddendaRecord                =   conNull();

        #define.recTypeCode('7')
        #define.AddendaCode('13')
        #define.zero('0')
        #define.spc(' ')
        #define.bankNameLength(35)
        #define.OriginatingDFIQualifierLength(2)
        #define.origDFIIdentificationLegth(34)
        #define.origDFIBranchLength(3)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03          13              The code to identify 1st IAT Addenda records is 10
        str 35      orignatorDFIName            =   strRep(#spc, 35);           // 04 - 38
        str 2       origDFIIdentificationNum    =   strRep(#spc, 2);            // 39 - 40
        str 34      origDFIIdentification       =   strRep(#spc, 34);           // 41 - 74
        str 3       origDFIBranch               =   strRep(#spc, 3);            // 75 - 77
        str 10      reserve                     =   strRep(#spc, 10);           // 78 - 87          BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);           // 88 - 94

        orignatorDFIName           =   strLFix(custVendPaym.sendersBankName(), #bankNameLength, #spc);
        origDFIIdentificationNum   =   strLFix(enum2str(custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier),
                                                #OriginatingDFIQualifierLength, #spc);

        if (custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier == CustVendOriginatingDFIQualifier_US::One
            || custVendPaym.parmCustVendNACHAIATInfoTable().OriginatingDFIQualifier == CustVendOriginatingDFIQualifier_US::Two)
        {
            origDFIIdentification = strLFix(custVendPaym.sendersBankRegistrationNumber(), #origDFIIdentificationLegth, #spc);
        }
        else
        {
            origDFIIdentification = strLFix(custVendPaym.bankAccountTable().iban, #origDFIIdentificationLegth, #spc);
        }
        origDFIBranch             = strLFix(custVendPaym.bankAccountTable().postalAddress().CountryRegionId, #origDFIBranchLength, #spc);
        entryDetailseqNumber      = this.entryDetailSequenceNumber();

        fourthITAddendaRecord     = conIns(fourthITAddendaRecord, 1, recordTypeCode + addendaCode + orignatorDFIName + origDFIIdentificationNum +
                                     origDFIIdentification  + origDFIBranch + reserve + entryDetailseqNumber );

        return fourthITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fourthIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void fourthIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFGGGGGGGGGGHHHHHHH- iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       HHHHHHH -Entry detail equence number')
        #define.iATreserved                         ('                                                                             GGGGGGGGGG - IAT reseved ')
        #define.iATOrigDFIBranch                    ('                                                                          FFF -Receiving company name /Indivisual name')
        #define.iATOrigDFIIdentification            ('                                        EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE - ORIGINATINGDFI IDENTIFICATION')
        #define.iATOrigDFIIdentificationNum         ('                                      DD  ORIGINATING DFIIDENTIFICATION NUMBER')
        #define.iATOrignatorDFIName                 ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC - Bank name')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "13" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATOrigDFIBranch);
        file.write(#iATOrigDFIIdentification);
        file.write(#iATOrigDFIIdentificationNum);
        file.write(#iATOrignatorDFIName);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the IAT payment output record.
    /// </summary>
    protected void initRecord()
    {
        #define.blankRoutingNumber('0')
        #define.blank(' ')

        nacha_iat_Record    = conNull();
        bankRoutingNumber   = strRep(#blankRoutingNumber, 8);
        outputRecord        = strRep(#blank, 94);
        transactionAmount   = 0;
        noAddendaRecord     = 9;

        vendBankAccount     = VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(),
                                                    VendTable::findByCompany(custVendPaym.ledgerJournalTrans().Company,
                                                                            custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
        companyInfo         = CompanyInfo::find();
        vendTable           = VendTable::find(custVendPaym.custVendTable().AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the totals for the transaction.
    /// </summary>
    public void output()
    {
        this.initRecord();
        this.fillRecord();
        custVendOutPaym.addIATDetailRecord(custVendPaym.ledgerJournalTrans().Voucher,
                                           bankRoutingNumber,
                                           0,
                                           transactionAmount,
                                           custVendPaym.parmCustVendNACHAIATInfoTable(),
                                           custVendPaym.custVendTable());

        nacha_iat_Record = conIns(nacha_iat_Record, 1, outputRecord);
        file.writeExp(nacha_iat_Record);
        if (custVendOutPaym.isDebug())
        {
            this.addIATFieldPositions();
        }
        this.printAddendaRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printAddendaRecords</Name>
				<Source><![CDATA[
    void printAddendaRecords()
    {
        file.writeExp(this.firstIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.firstIATAddendaRecordPosition();
        }
        file.writeExp(this.secondIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.secondIATAddendaRecordPosition();
        }
        file.writeExp(this.thirdIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.thirdIATAddendaRecordPosition();
        }
        file.writeExp(this.fourthIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.fourthIATAddendaRecordPosition();
        }
        file.writeExp(this.fifthIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.fifthIATAddendaRecordPosition();
        }
        file.writeExp(this.sixthIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.sixthIATAddendaRecordPosition();
        }
        file.writeExp(this.seventhIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.seventhIATAddendaRecordPosition();
        }
        file.writeExp(this.remittanceIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.remittanceIATAddendaRecordPosition();
        }
        file.writeExp(this.correspondenceIATAddendaRecord());
        if (custVendOutPaym.isDebug())
        {
            this.correspondenceIATAddendaRecordPosition();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remittanceIATAddendaRecord</Name>
				<Source><![CDATA[
    container remittanceIATAddendaRecord()
    {
        container   seventhITAddendaRecord                =   conNull();

        #define.recTypeCode('7')
        #define.AddendaCode('17')
        #define.zero('0')
        #define.spc(' ')
        #define.paymentRelatedInformationLength(80)
        #define.receivingDFIBranchLength(3)
        #define.addendaSequenceNumLength(4)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03         17              The code to identify 1st IAT Addenda records is 10
        str 80      paymentRelatedInformation   =   strRep(#spc, 80);           // 04 - 83                         LedgerJournalTrans.Tran
        str 4       addendaSequenceNum          =   strRep(#zero, 4);           // 84 - 87
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);           // 88 - 94

        paymentRelatedInformation    = strLFix(custVendPaym.ledgerJournalTrans().Txt, #paymentRelatedInformationLength, #spc);
        entryDetailseqNumber         = this.entryDetailSequenceNumber();
        addendaSequenceNum           = strRFix(int2str(custVendOutPaym.getAddendaSequence()), #addendaSequenceNumLength, #spc);
        seventhITAddendaRecord       = conIns(seventhITAddendaRecord, 1, recordTypeCode + addendaCode + paymentRelatedInformation + addendaSequenceNum + entryDetailseqNumber );

        return seventhITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remittanceIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void remittanceIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDEEEEEEE - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       EEEEEEE -Entry detail equence number')
        #define.iATAddendaSequenceNum               ('                                                                                   DDDD   ADDENDA SEQUENCE NUMBER ')
        #define.iATPaymentRelatedInformation        ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC - PAYMENT RELATED INFROMATION')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "22" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "6"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATAddendaSequenceNum);
        file.write(#iATPaymentRelatedInformation);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondIATAddendaRecord</Name>
				<Source><![CDATA[
    container secondIATAddendaRecord()
    {
        container   secondATAddendaRecord                =   conNull();
        str threeLineAddress;
        str oneLineAddress;
        str addressLine;
        int lineCount;

        #define.recTypeCode('7')
        #define.AddendaCode('11')
        #define.zero('0')
        #define.spc(' ')
        #define.orignatorNameLength(35)
        #define.orignatorAddress(35)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03         11              The code to identify 1st IAT Addenda records is 10
        str 35      orignatorName               =   strRep(#spc, 35);           // 04 - 38
        str 35      orignatorAddress            =   strRep(#spc, 35);           // 39 - 73
        str 14      reserve                     =   strRep(#spc, 14);           // 74 - 87         BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);           // 88 - 94

        orignatorName           = strLFix(custVendPaym.sendersCompanyName(), #orignatorNameLength, #spc);

        threeLineAddress = companyInfo.postalAddress().Address;

        for (lineCount=1; lineCount<=3; lineCount++)
        {
            addressLine = custVendPaym.textLine(threeLineAddress, lineCount);

            if (addressLine != '')
            {
                oneLineAddress += addressLine + #spc;
            }
        }

        orignatorAddress        = strLFix(oneLineAddress, #orignatorAddress, #spc);

        entryDetailseqNumber    = this.entryDetailSequenceNumber();

        secondATAddendaRecord   = conIns(secondATAddendaRecord, 1, recordTypeCode + addendaCode + orignatorName +
                                         orignatorAddress  + reserve + entryDetailseqNumber );

        return secondATAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void secondIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEFFFFFFF - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       FFFFFFF -Entry detail equence number')
        #define.iATreserved                         ('                                                                         EEEEEEEEEEEEEE - IAT reseved ')
        #define.iATOrignatorAddress                 ('                                      DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD -  Orignator address')
        #define.iATOrignatorName                    ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC -Orignator name')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "11" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATOrignatorAddress);
        file.write(#iATOrignatorName);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>seventhIATAddendaRecord</Name>
				<Source><![CDATA[
    container seventhIATAddendaRecord()
    {
        container seventhITAddendaRecord = conNull();
        LogisticsPostalAddress localPostalAddress;

        #define.recTypeCode('7')
        #define.AddendaCode('16')
        #define.zero('0')
        #define.spc(' ')
        #define.receiverCityStateLength(35)
        #define.receiverCountryIdLegth(35)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;                // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;                // 02 - 03         16              The code to identify 1st IAT Addenda records is 10
        str 35      receiverCityState           =   strRep(#spc, 35);            // 04 - 18
        str 35      receiverCountryId           =   strRep(#spc, 35);            // 19 - 53
        str 14      reserve                     =   strRep(#spc, 14);            // 54 - 87        BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);            // 88 - 94
        str 1       slash                       =   #spc;

        localPostalAddress = vendTable.postalAddress();
        if (localPostalAddress.Street && localPostalAddress.State)
        {
            slash = '/';
        }
        receiverCityState          = strLFix(localPostalAddress.Street + slash + localPostalAddress.State,
                                                #receiverCityStateLength, #spc);
        receiverCountryId          = strLFix(localPostalAddress.CountryRegionId, #receiverCountryIdLegth, #spc);
        entryDetailseqNumber       = this.entryDetailSequenceNumber();

        seventhITAddendaRecord     = conIns(seventhITAddendaRecord, 1, recordTypeCode + addendaCode +
                                       receiverCityState + receiverCountryId + reserve + entryDetailseqNumber );

        return seventhITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seventhIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void seventhIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                    ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       FFFFFFF -Entry detail equence number')
        #define.iATreserved                         ('                                                                         EEEEEEEEEEEEEE - IAT reseved ')
        #define.iATReceiverCountryId                ('                                      DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD -  RECEIVER COUNTRY & POSTAL CODE')
        #define.iATReceiverCityState                ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC -RECEIVER CITY & STATE/PROVINCE')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "11" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATReceiverCountryId);
        file.write(#iATReceiverCityState);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sixthIATAddendaRecord</Name>
				<Source><![CDATA[
    container sixthIATAddendaRecord()
    {
        container   sixthITAddendaRecord                =   conNull();

        #define.recTypeCode('7')
        #define.AddendaCode('15')
        #define.zero('0')
        #define.spc(' ')
        #define.receiverIndentificationNumLength(15)
        #define.receiverStreetNumberLength(35)
        #define.receivingDFIIdentificationLegth(34)
        #define.receivingDFIBranchLength(3)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03         15              The code to identify 1st IAT Addenda records is 10
        str 15      receiverIndentificationNum  =   strRep(#spc, 15);           // 04 - 18
        str 35      receiverStreetNumber        =   strRep(#spc, 35);           // 19 - 53
        str 34      reserve                     =   strRep(#spc, 34);           // 54 - 87        BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero, 7);           // 88 - 94

        receiverIndentificationNum    = strLFix(VendTable::find(custVendPaym.custVendTable().AccountNum).Tax1099RegNum,
                                                #receiverIndentificationNumLength, #spc);
        receiverStreetNumber          = strLFix(DirParty::primaryPostalAddress(custVendPaym.custVendTable().Party).Street,
                                                #receiverStreetNumberLength, #spc);
        entryDetailseqNumber          = this.entryDetailSequenceNumber();

        sixthITAddendaRecord          = conIns(sixthITAddendaRecord, 1, recordTypeCode + addendaCode + receiverIndentificationNum
                                        + receiverStreetNumber +  reserve + entryDetailseqNumber );

        return sixthITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sixthIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void sixthIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFF - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       FFFFFFF -Entry detail equence number')
        #define.iATreserved                         ('                                                     EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE - IAT reseved ')
        #define.iATReceiverStreetNumber             ('                  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD -  RECEIVER STREET NUMBER')
        #define.iATReceiverIndentificationNum       ('   CCCCCCCCCCCCCCC -RECEIVER IDENTIFICATION NUMBER')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "22" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "6"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATReceiverStreetNumber);
        file.write(#iATReceiverIndentificationNum);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdIATAddendaRecord</Name>
				<Source><![CDATA[
    container thirdIATAddendaRecord()
    {
        container thirdITAddendaRecord = conNull();
        LogisticsPostalAddress localPostalAddress;

        #define.recTypeCode('7')
        #define.AddendaCode('12')
        #define.zero('0')
        #define.spc(' ')
        #define.orignatorNameLength(35)
        #define.orignatorAddress(35)
        // Offset          Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;               // 01 - 01          7
        str 2       addendaCode                 =   #AddendaCode;               // 02 - 03          12              The code to identify 1st IAT Addenda records is 10
        str 35      orignatorCity               =   strRep(#spc,35);            // 04 - 38
        str 35      origCountryCountry          =   strRep(#spc,35);            // 39 - 73
        str 14      reserve                     =   strRep(#spc,14);            // 82 - 87          BLANK
        str 7       entryDetailseqNumber        =   strRep(#zero,7);            // 88 - 94
        str         slash                       =   #spc;

        localPostalAddress = companyInfo.postalAddress();
        if (localPostalAddress.City && localPostalAddress.State)
        {
            slash = '/';
        }
        orignatorCity           = strLFix(localPostalAddress.City + slash + localPostalAddress.State ,
                                        #orignatorNameLength, #spc);
        slash                   =  #spc;
        if (localPostalAddress.CountryRegionId && localPostalAddress.ZipCode)
        {
            slash = '/';
        }
        origCountryCountry      = strLFix(localPostalAddress.CountryRegionId + slash + localPostalAddress.ZipCode,
                                            #orignatorAddress, #spc);
        entryDetailseqNumber    = this.entryDetailSequenceNumber();

        thirdITAddendaRecord    = conIns(thirdITAddendaRecord, 1, recordTypeCode + addendaCode + orignatorCity +
                                   origCountryCountry  + reserve + entryDetailseqNumber );

        return thirdITAddendaRecord ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdIATAddendaRecordPosition</Name>
				<Source><![CDATA[
    void thirdIATAddendaRecordPosition()
    {
        #define.iATRecordLayout                     ('ABBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEFFFFFFF - iAT PAYABLES RECORD')
        #define.iATEntryDetailseqNumber             ('                                                                                       FFFFFFF -Entry detail sequence number')
        #define.iATreserved                         ('                                                                         EEEEEEEEEEEEEE - IAT reseved ')
        #define.iATOrigCountryCountry               ('                                      DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD -  Originator country/region & POSTAL CODE')
        #define.iATorignatorCity                    ('   CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC Originator city & STATE/PROVINCE')
        #define.iATAddedTypeCode                    (' BB - Transaction Code = "11" for AP Checking, "32" for AP Savings')
        #define.iATRecordTypeCode                   ('A - Record Type Code = "7"')

        file.write(#iATRecordLayout);
        file.write(#iATEntryDetailseqNumber);
        file.write(#iATreserved);
        file.write(#iATOrigCountryCountry);
        file.write(#iATorignatorCity);
        file.write(#iATAddedTypeCode);
        file.write(#iATRecordTypeCode);

        file.write();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>