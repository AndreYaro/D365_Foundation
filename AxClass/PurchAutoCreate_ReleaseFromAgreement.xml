<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_ReleaseFromAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAutoCreate_ReleaseFromAgreement</c> class makes the automatic creation of a release
/// purchase order from a agreement easier.
/// </summary>
/// <remarks>
/// This class extends the <c>PurchAutoCreate</c> class.
/// </remarks>
class PurchAutoCreate_ReleaseFromAgreement extends PurchAutoCreate
{
    TmpPurchLine                     tmpPurchLine;
    TmpPurchTable                    tmpPurchTable;
    PurchAgreementHeader             createFromPurchAgreement;
    AgreementLineQuantityCommitment  createFromAgreementLine;
    // <GEERU>
    #ISOCountryRegionCodes
    boolean                          countryRegion_RU;
    PurchAgreementHeaderExt_RU       createFromPurchAgreementExt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    // </GEERU>

    /// <summary>
    ///    Creates the purchase release order and lines.
    /// </summary>
    public void create()
    {
        #OCCRetryCount

        try
        {
            setPrefix("@SYS28446");

            ttsbegin;

            this.setVend();
            setPrefix(#PreFixField(VendTable,AccountNum));

            this.setPurchTable();
            this.createPurchTable();

            this.createLines();

            this.endUpdate();

            this.updateFinancialDimensionFromAgreementHeader();

            ttscommit;

            // Report success..
            if (this.showInfo())
            {
                info(strFmt("@SYS82024", purchTable.PurchId),'',SysInfoAction_TableField::newBuffer(purchTable));
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementReleaseHeaderMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>AgreementReleaseHeaderMatch</c> link record between the <c>PurchTable</c> and
    ///    <c>AgreementHeader</c> tables.
    /// </summary>
    protected void createAgreementReleaseHeaderMatch()
    {
        AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;

        agreementReleaseHeaderMatch.initFromPurchTable(purchTable);
        agreementReleaseHeaderMatch.initFromAgreementHeader(createFromPurchAgreement);
        agreementReleaseHeaderMatch.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase line.
    /// </summary>
    protected void createLine()
    {
        this.setPurchLine();

        if (purchLine.PurchQty)
        {
            if (purchLine.ItemId)
            {
                setPrefix(#PreFixField(PurchLine,ItemId));
            }

            this.createPurchLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates over the <c>TmpPurchLine</c> buffer and creates lines.
    /// </summary>
    protected void createLines()
    {
        Set recordsVisited = new Set(Types::Int64);
        while (this.recordExist())
        {
            // Avoid same line is created multiple times, if tmpPurchLine is reset while creating lines.
            if (!recordsVisited.in(tmpPurchLine.RecId))
            {
                recordsVisited.add(tmpPurchLine.RecId);
                using (var activityContext = this.instrumentationLogger().purchOrderLineCreationActivities().createFromPurchAgreement())
                {
                    this.createLine();
                }
            }
            this.nextRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a purchase release line.
    /// </summary>
    /// <remarks>
    ///    This method also creates a link object to the agreement line from which the release has been made
    ///    and does copy financial dimensions from agreement line.
    /// </remarks>
    public void createPurchLine()
    {
        if(!purchLine.checkItemId())
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        this.recordCreatingEventHandler(this, purchLine);

        purchLine.createLine(NoYes::No,             // Validate
                             NoYes::No,             // initFromPurchTable
                             NoYes::No,             // initFromInventTable
                             NoYes::Yes,            // calcInventQty
                             NoYes::Yes             // searchMarkup
                             );
        purchLine.MatchingAgreementLine = createFromAgreementLine.RecId;

        purchLine.write();

        this.recordCreatedEventHandler(this, purchLine);

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {            
            TransTaxInformationHelper::copyTransTaxInformation(
                AgreementLine::find(createFromAgreementLine.RecId),
                purchLine); 
        }
        // </GTE>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a purchase release order header.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    A new <c>PurchTable</c> record cannot be created.
    /// </exception>
    void createPurchTable()
    {
        this.recordCreatingEventHandler(this, purchTable);
        // actual creation of the PurchTable takes place here
        super();
        this.recordCreatedEventHandler(this, purchTable);

        if (!purchTable)
        {
            checkFailed(strFmt("@SYS15067", this.purchId()));
            throw error("@SYS23020");
        }

        TMSPurchTable::initFromTMSPurchAgreement(purchTable.PurchId, createFromPurchAgreement.RecId);

        this.createAgreementReleaseHeaderMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes how to create the purchase release order header and lines.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Creating the purchase release order header failed.
    /// </exception>
    public void  endUpdate()
    {
        if (!purchTable)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the first record of the <c>TmpPurchLine</c> table.
    /// </summary>
    protected void firstRecord()
    {
        select tmpPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InvoiceAccount</c> object that is associated with a release.
    /// </summary>
    /// <returns>
    ///    The <c>VendInvoiceAccount</c> object that is associated with the vendor for the purchase agreement
    ///    and the release order line.
    /// </returns>
    public VendInvoiceAccount invoiceAccount()
    {
        return vendTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchAutoCreate_releaseFromAgreement</c> class.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>TmpPurchLine</c> table buffer.
    /// </param>
    /// <param name="_callBackClass">
    ///    The instance of the calling class.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    A <c>TmpPurchTable</c> table buffer.
    /// </param>
    /// <remarks>
    ///    This method is used by the static construct method of this class.
    /// </remarks>
    protected void new(Common _releaseOrderLine,
                       Object _callBackClass     = null,
                       Common _releaseOrderTable = null)
    {
        tmpPurchLine  = _releaseOrderLine as TmpPurchLine;
        tmpPurchTable = _releaseOrderTable as TmpPurchTable;

        if (tmpPurchLine.RecId)
        {
            this.firstRecord();
            createFromAgreementLine  = AgreementLineQuantityCommitment::find(tmpPurchLine.AgreementLineQuantityCommitment);
            createFromPurchAgreement = PurchAgreementHeader::find(createFromAgreementLine.Agreement);
        }
        else
        {
            // Lineless release...
            select tmpPurchTable;
            if (tmpPurchTable.PurchAgreementHeader)
            {
                createFromPurchAgreement = PurchAgreementHeader::find(tmpPurchTable.PurchAgreementHeader);
            }
        }
        super();
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the new record of the <c>TmpPurchLine</c> table.
    /// </summary>
    public void nextRecord()
    {
        next tmpPurchLine;

        if (tmpPurchLine.RecId)
        {
            createFromAgreementLine  = AgreementLineQuantityCommitment::find(tmpPurchLine.AgreementLineQuantityCommitment, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the purchase type for the release line.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>PurchaseType::Purch</c> enumeration value.
    /// </returns>
    public PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreatedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intercepts the post creation of purchasing records.
    /// </summary>
    /// <param name="_sender">
    /// The object that raises the event.
    /// </param>
    /// <param name="_buffer">
    /// The buffer to be created.
    /// </param>
    /// <remarks>
    /// In case you have to handle the additional post creation of purchasing records, attach to the
    /// delegate.The <paramref name="_buffer" /> parameter can be of the <c>PurchTable</c> or
    /// <c>PurchLine</c> type.
    /// </remarks>
    delegate void recordCreatedEventHandler(Object _sender, Common _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreatingEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intercepts how to create purchasing records.
    /// </summary>
    /// <param name="_sender">
    /// The object that raises the event.
    /// </param>
    /// <param name="_buffer">
    /// The buffer to be created.
    /// </param>
    /// <remarks>
    /// In case you have to for example handle additional initialization, attach to the delegate.The
    /// <paramref name="_buffer" /> parameter can be of the <c>PurchTable</c> or <c>PurchLine</c> type.
    /// </remarks>
    delegate void recordCreatingEventHandler(Object _sender, Common _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current <c>TmpPurchLine</c> record exists.
    /// </summary>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Existence is determined by the record ID.
    /// </remarks>
    public boolean recordExist()
    {
        return tmpPurchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementLine</Name>
				<Source><![CDATA[
    protected boolean validateAgreementLine()
    {
        return createFromAgreementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields of the purchase release line, based on the current record of the
    ///    <c>TmpPurchLine</c> table.
    /// </summary>
    public void setPurchLine()
    {
        // <GIN>
        PurchLine_IN        purchLine_IN;
        // </GIN>
        setPrefix(#PrefixField(tmpPurchLine, ItemId));

        purchLine.clear();
        super();

        if (!this.validateAgreementLine())
        {
            throw error("@SYS23020");
        }

        purchLine.initFromTmpPurchLine(tmpPurchLine);
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            purchLine.calculateRequestedShipAndReceiptDate(dateNull(), purchLine.DeliveryDate, SchedDirection::Backward);
            purchLine.SkipShipReceiptDateCalculation = true;
        }
        purchLine.initFromAgreementLine(createFromAgreementLine);
        purchLine.initFromVendExternalItemDescription();
        purchLine.MatchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(purchLine.inventTable(), purchTable.vendTable_OrderAccount(), purchLine.ProcurementCategory);
        purchLine.LineAmount              = purchLine.calcLineAmount();

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
            && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && purchLine.CFOPTable_BR)))
        {
            purchLine.TaxItemGroup = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, purchLine.ItemId, purchLine.InventDimId);
        }

        if (purchLine.PurchQty != 0)
        {
            // For non-empty release quantities
            // add warning if created line amount is going to be outside an agreed transactions min/MAX amounts
            if (   (createFromAgreementLine.AgreedReleaseLineMinAmount > 0  && createFromAgreementLine.AgreedReleaseLineMinAmount > purchLine.LineAmount)
                || (createFromAgreementLine.AgreedReleaseLineMaxAmount > 0  && createFromAgreementLine.AgreedReleaseLineMaxAmount < purchLine.LineAmount))
            {
                if (this.showInfo())
                {
                    info("@SYS342771");
                }
            }
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            purchLine_IN = purchLine.purchLine_IN();            
            purchLine_IN.AssessableValueTransactionCurrency = purchLine.LineAmount;
            purchLine_IN.AssessableValueAccountingCurrency  = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(
                purchLine_IN.AssessableValueTransactionCurrency,
                purchLine.CurrencyCode, 
                purchTable.AccountingDate);
            purchLine.packPurchLine_IN(purchLine_IN);
        }
        // </GIN>

        purchLine.setStockedProduct();

        // <GEERU>
        if (countryRegion_RU)
        {
            purchLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(createFromPurchAgreementExt.RecId,
                purchLine.DefaultDimension);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseDeliveryDate</Name>
				<Source><![CDATA[
    private DlvDate purchaseDeliveryDate()
    {
        if (tmpPurchLine.RecId)
        {
            TmpPurchLine tmpPurchLineForFindingDeliveryDate;
            tmpPurchLineForFindingDeliveryDate.setTmpData(tmpPurchLine);

            if (PurchAutoCreateReleaseFromAgreementDlvDateFlight::instance().isEnabled())
            {
                select minOf(DeliveryDate) from tmpPurchLineForFindingDeliveryDate
                    where tmpPurchLineForFindingDeliveryDate.PurchQty != 0;
            }
            else
            {
                // Set delivery date on the Purchase order to the earliest of the delivery dates on the lines
                select minOf(DeliveryDate) from tmpPurchLineForFindingDeliveryDate;
            }

            return max(createFromPurchAgreement.EarliestLineEffectiveDate, tmpPurchLineForFindingDeliveryDate.DeliveryDate);
        }

        return max(createFromPurchAgreement.EarliestLineEffectiveDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the purchase release order fields.
    /// </summary>
    public void  setPurchTable()
    {
        AgreementHeaderDefault agreementHeaderDefault = AgreementHeaderDefault::findAgreementHeader(createFromPurchAgreement.RecId);
        PurchAgreementHeaderDefault purchAgreementHeaderDefault = PurchAgreementHeaderDefault::findPurchAgreementHeader(createFromPurchAgreement.RecId);

        VendInvoiceAccount          vendInvoiceAccount;
        // <GEERU>
        PurchTable_RU               purchTable_RU;
        // </GEERU>

        super();

        purchTable.initFromVendTable();

        purchTable.MatchingAgreement = createFromPurchAgreement.RecId;
        purchTable.LanguageId        = createFromPurchAgreement.Language;
        purchTable.CurrencyCode      = createFromPurchAgreement.Currency;
        purchTable.DeliveryDate      = this.purchaseDeliveryDate();
        
        if (agreementHeaderDefault.ContactPerson)
        {
            purchTable.ContactPersonId = agreementHeaderDefault.ContactPerson;
        }
        if (agreementHeaderDefault.DeliveryMode)
        {
            purchTable.DlvMode         = agreementHeaderDefault.DeliveryMode;
        }
        if (agreementHeaderDefault.DeliveryTerm)
        {
            purchTable.DlvTerm         = agreementHeaderDefault.DeliveryTerm;            
        }
        if (agreementHeaderDefault.PaymentTerms)
        {
            purchTable.Payment         = agreementHeaderDefault.PaymentTerms;
        }
        if (agreementHeaderDefault.PaymentSchedule)
        {
            purchTable.PaymentSched    = agreementHeaderDefault.PaymentSchedule;
        }
        if (agreementHeaderDefault.CashDiscountCode)
        {
            purchTable.CashDisc        = agreementHeaderDefault.CashDiscountCode;
            purchTable.CashDiscPercent = agreementHeaderDefault.cashDiscPercent();
        }

        if (agreementHeaderDefault.MiscChargeGroup)
        {
            purchTable.MarkupGroup     = agreementHeaderDefault.MiscChargeGroup;
        }
        if (agreementHeaderDefault.Project)
        {
            purchTable.ProjId          = agreementHeaderDefault.Project;
        }

        if (purchAgreementHeaderDefault.VendorInvoiceAccount)
        {
            purchTable.InvoiceAccount  = purchAgreementHeaderDefault.VendorInvoiceAccount;
        }
        else
        {
            vendInvoiceAccount = createFromPurchAgreement.vendTable().InvoiceAccount;
            if (vendInvoiceAccount)
            {
                purchTable.InvoiceAccount = vendInvoiceAccount;
            }
        }

        if (purchAgreementHeaderDefault.BuyerGroup)
        {
            purchTable.ItemBuyerGroupId  = purchAgreementHeaderDefault.BuyerGroup;
        }
        if (purchAgreementHeaderDefault.PurchasePool)
        {
            purchTable.PurchPoolId     = purchAgreementHeaderDefault.PurchasePool;
        }
        if (purchAgreementHeaderDefault.MethodOfPayment)
        {
            purchTable.PaymMode        = purchAgreementHeaderDefault.MethodOfPayment;
        }
        if (purchAgreementHeaderDefault.PaymentSpecification)
        {
            purchTable.PaymSpec        = purchAgreementHeaderDefault.PaymentSpecification;
        }

        purchTable.DeliveryName      = tmpPurchTable.DeliveryName;

        purchTable.DeliveryPostalAddress = tmpPurchTable.DeliveryPostalAddress;
        LogisticsLocationSelectForm_PurchTable::construct(purchTable).copyAddressToCaller(purchTable.getDeliveryEntityRecord(), purchTable.DeliveryPostalAddress);

        if (purchTable.OrderAccount != purchTable.InvoiceAccount)
        {
            purchTable.transferTaxDefaultsFromInvoiceAcc();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            purchTable_RU = purchTable.purchTable_RU();

            createFromPurchAgreementExt = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(createFromPurchAgreement.RecId);

            purchTable_RU.AgreementHeaderExt_RU = createFromPurchAgreementExt.RecId;

            if (createFromPurchAgreementExt.InventProfileType || createFromPurchAgreementExt.InventProfileId)
            {
                purchTable_RU.InventProfileType_RU = createFromPurchAgreementExt.InventProfileType;
                purchTable_RU.InventProfileId_RU   = createFromPurchAgreementExt.InventProfileId;
            }

            if (createFromPurchAgreementExt.VendPostingProfile)
            {
                purchTable.PostingProfile = createFromPurchAgreementExt.VendPostingProfile;
            }

            if (createFromPurchAgreementExt.vatOperationCode)
            {
                purchTable_RU.vatOperationCode_RU = createFromPurchAgreementExt.vatOperationCode;
            }

            if (createFromPurchAgreementExt.vatChargeSource)
            {
                purchTable_RU.vatChargeSource_RU  = createFromPurchAgreementExt.vatChargeSource;
            }

            if (purchTable.PaymentSched)
            {
                purchTable.FixedDueDate = dateNull();
            }

            purchTable.packPurchTable_RU(purchTable_RU);
        }
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            purchTable.ShipCalendarId = createFromPurchAgreement.ShipCalendarId;
            purchTable.calculateRequestedShipAndReceiptDate(dateNull(), purchTable.DeliveryDate, SchedDirection::Backward);
            purchTable.SkipShipReceiptDateCalculation = true;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the internal <c>VendTable</c> buffer, according to the vendor settings of the purchase
    ///    agreement.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The required vendor cannot be located in the <c>VendTable</c>.
    /// </exception>
    public void setVend()
    {
        if (this.vendAccount())
        {
            vendTable = VendTable::find(this.vendAccount());
        }

        if (!vendTable)
        {
            checkFailed(strFmt("@SYS17184", this.vendAccount()));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default dimension from the agreement header.
    /// </summary>
    /// <returns>The default dimension.</returns>
    protected DimensionDefault defaultDimensionFromAgreementHeader()
    {
        // <GEERU>
        if (countryRegion_RU)
        {
            return purchTable.copyDimension(tmpPurchTable.DefaultDimension_RU);
        }
        // </GEERU>

        return purchTable.mergeDimension(createFromPurchAgreement.DefaultDimension, purchTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFinancialDimensionFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize financial dimensions from agreement header to the released order header.
    /// </summary>
    protected void initializeFinancialDimensionFromAgreementHeader()
    {
        purchTable.DefaultDimension = this.defaultDimensionFromAgreementHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialDimensionFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates financial dimensions from agreement header to the released order header.
    /// </summary>
    protected void updateFinancialDimensionFromAgreementHeader()
    {
        this.initializeFinancialDimensionFromAgreementHeader();
        purchTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves for <c>VendAccount</c> value for the release purchase order.
    /// </summary>
    /// <returns>
    ///    The <c>VendAccount</c> that is associated with the purchase agreement.
    /// </returns>
    public VendAccount vendAccount()
    {
        return createFromPurchAgreement.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>PurchAutoCreate_releaseFromAgreement</c> class.
    /// </summary>
    /// <param name="_releaseOrderLine">
    ///    A <c>TmpPurchLine</c> table buffer.
    /// </param>
    /// <param name="_callBackClass">
    ///    The instance of the calling class.
    /// </param>
    /// <param name="_releaseOrderTable">
    ///    A <c>TmpPurchTable</c> table buffer.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchAutoCreate_ReleaseFromAgreement</c> class.
    /// </returns>
    public static PurchAutoCreate_ReleaseFromAgreement construct(TmpPurchLine  _releaseOrderLine,
                                                                 Object        _callBackClass     = null,
                                                                 TmpPurchTable _releaseOrderTable = null)
    {
        return new PurchAutoCreate_ReleaseFromAgreement(_releaseOrderLine, _callBackClass, _releaseOrderTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>