<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableLedgerCovTypePaymSched</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SalesPurchTableLedgerCovTypePaymSched extends SalesPurchTableLedgerCovType
{
    protected CustVendPaymentSched custVendPaymSched;
    protected CustVendInvoiceJour tmpInvoiceJour;
    protected CustVendPaymentSchedLine custVendPaymSchedLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInvoices</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected int processInvoices(
        TransDate _invoiceDate)
    {
        int invoiceLineCount = super(_invoiceDate);

        if (invoiceLineCount > 0)
        {
            AmountCur totalAmount = contract.totalAmount() * contract.parmSign();

            this.updateLedgerCovForInvoiceSummary(_invoiceDate, totalAmount);
            this.updateLedgerCovForInvoiceMarkup(_invoiceDate, totalAmount);
            this.updateLedgerCovForInvoiceTaxes(_invoiceDate);
        }

        return invoiceLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void processPayments(
        TransDate _invoiceDate)
    {
        this.findOrCreatePaymentSched();

        while select DueAmount, DueDate
            from custVendPaymSchedLine
            where custVendPaymSchedLine.ParentRecID == custVendPaymSched.RecId
        {
            if (custVendPaymSchedLine.DueAmount)
            {
                AmountCur dueAmount = custVendPaymSchedLine.DueAmount * contract.parmSign();

                this.updateLedgerCovForPayment(custVendPaymSchedLine.DueDate, dueAmount);
            }
        }

        this.cleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp()
    {
        if (tmpInvoiceJour)
        {
            delete_from custVendPaymSched
                where custVendPaymSched.ExtTableId == tmpInvoiceJour.TableId
                    && custVendPaymSched.ExtRecId == tmpInvoiceJour.RecId;

            tmpInvoiceJour.delete();
        }

        delete_from custVendPaymSched
            where custVendPaymSched.ExtTableId == contract.parmSalesPurchTableInterface().parmSalesPurchTable().TableId
                && custVendPaymSched.ExtRecId == contract.parmSalesPurchTableInterface().parmSalesPurchTable().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreatePaymentSched</Name>
				<Source><![CDATA[
    private void findOrCreatePaymentSched()
    {
        if (!contract.doesPaymentScheduleExist())
        {
            this.createPaymentSched();
        }
        else
        {
            this.findPaymentSched();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    private void createPaymentSched()
    {
        contract.parmSalesPurchTableInterface().createPaymentSched();

        tmpInvoiceJour.FixedDueDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), contract.parmSalesPurchTableInterface().parmDeliveryDate());
        tmpInvoiceJour.DueDate = tmpInvoiceJour.FixedDueDate;

        tmpInvoiceJour.CashDiscDate = tmpInvoiceJour.DueDate;
        tmpInvoiceJour.InvoiceDate = tmpInvoiceJour.DueDate;

        tmpInvoiceJour.insert();

        contract.parmSalesPurchTableInterface().copyPaymentSched(tmpInvoiceJour);
        tmpInvoiceJour.CustVendInvoiceJour::createPaymentSched();

        select firstonly custVendPaymSched
            where custVendPaymSched.ExtTableId == tmpInvoiceJour.TableId
                && custVendPaymSched.ExtRecId == tmpInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymentSched</Name>
				<Source><![CDATA[
    private void findPaymentSched()
    {
        select firstonly custVendPaymSched
            where custVendPaymSched.ExtTableId == contract.parmSalesPurchTableInterface().parmSalesPurchTable().TableId
                && custVendPaymSched.ExtRecId == contract.parmSalesPurchTableInterface().parmSalesPurchTable().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForPayment</Name>
				<Source><![CDATA[
    private void updateLedgerCovForPayment(
        DueDate _dueDate,
        AmountCur _invoiceAmount)
    {
        TransDate paymentDueDate = contract.parmLedgerCoverage().determinePaymentDueDateWithAverages(
            contract.parmLedgerCovAvgAverageDaysSelectorPayment(),
            contract.parmInvoiceCustVendTable().AccountNum,
            _dueDate,
            contract.parmSalesPurchTableInterface().clearingPeriod());

        //Payment summary
        contract.parmLedgerCoverage().updateSum(
            paymentDueDate,
            contract.parmSummaryPostingType(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().summaryLedgerDimension() ),
            contract.parmInvoiceCustVendTable().DefaultDimension,
            contract.parmSalesPurchTableInterface().parmCurrencyCode(),
            -_invoiceAmount);

        //Payment clearing
        contract.parmLedgerCoverage().updateSum(
            paymentDueDate,
            contract.parmSummaryPostingType(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().clearingLedgerDimension()),
            contract.parmInvoiceCustVendTable().DefaultDimension,
            contract.parmSalesPurchTableInterface().parmCurrencyCode(),
            _invoiceAmount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>