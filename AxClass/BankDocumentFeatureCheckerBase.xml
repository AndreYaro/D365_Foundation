<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentFeatureCheckerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankDocumentFeatureCheckerBase</c> class is the based class to provide the APIs to check
///    whether a special feature is enabled or disabled.
/// </summary>
abstract class BankDocumentFeatureCheckerBase
{
    boolean isAllowCaching;
    boolean isCached;
    boolean isFeatureEnabled;

    SelectableDataArea selectableDataArea;

    #define.DefaultFeature('Default Feature')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the feature is enabled or not.
    /// </summary>
    /// <param name="_raiseError">
    /// The parameter is used to control if the check fail message should be raised out or not.
    /// </param>
    /// <param name="_exceptionLevel">
    /// The error message rasing level.
    /// </param>
    /// <returns>
    /// true if the feature is enabled; otherwise, false.
    /// </returns>
    public boolean checkFeatureEnabled(
        boolean   _raiseError     = false,
        Exception _exceptionLevel = Exception::Error)
    {
        boolean ret;

        if (isCached)
        {
            ret = isFeatureEnabled;
        }
        else
        {
            ret = this.isFeatureEnabledByCountryRegionCode() && this.isFeatureEnabled();

            if (isAllowCaching)
            {
                isFeatureEnabled = ret;
                isCached         = true;
            }
        }

        if (_raiseError && !ret)
        {
            switch (_exceptionLevel)
            {
                case Exception::Warning :
                    warning(this.getCheckFailedMessage());
                    break;
                case Exception::Error :
                    throw Error(this.getCheckFailedMessage());
                case Exception::Info :
                    info(this.getCheckFailedMessage());
                    break;
                default :
                    throw Error(this.getCheckFailedMessage());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckFailedMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the failed message used by the <see cref="BankDocumentFeatureCheckerBase.checkFeatureEnabled Method" /> method.
    /// </summary>
    /// <returns>
    /// The failed message.
    /// </returns>
    /// <remarks>
    /// The method is required to be implemented by sub class.
    /// </remarks>
    public abstract str getCheckFailedMessage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the feature name.
    /// </summary>
    /// <returns>
    /// The name of the feature.
    /// </returns>
    public str getFeatureName()
    {
        return #DefaultFeature;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureRelatedCountryRegionCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region codes which are required to enable this feature.
    /// </summary>
    /// <returns>
    /// The country region codes as container.
    /// </returns>
    /// <remarks>
    /// The method is required to be implemented by sub class.
    /// </remarks>
    protected abstract container getFeatureRelatedCountryRegionCodes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the check result is cached or not.
    /// </summary>
    /// <returns>
    /// true if the result is cached; otherwise, false.
    /// </returns>
    public boolean isCached()
    {
        return isCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the feature is enabled or not.
    /// </summary>
    /// <returns>
    /// true if the feature is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is required to be implemented by sub class.
    /// </remarks>
    protected abstract boolean isFeatureEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabledByCountryRegionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the feature is enabled by the current company.
    /// </summary>
    /// <returns>
    /// true if it is enabled; otherwise, false.
    /// </returns>
    private boolean isFeatureEnabledByCountryRegionCode()
    {
        container countryCodes;

        countryCodes = this.getFeatureRelatedCountryRegionCodes();
        if (conLen(countryCodes) != 0)
        {
            return SysCountryRegionCode::isLegalEntityInCountryRegion(countryCodes, this.parmSelectableDataArea());
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BankDocumentFeatureCheckerBase</c> class.
    /// </summary>
    /// <param name="_isAllowCaching">
    /// If the value is true, the check result will be cached.
    /// The default parameter value is true.
    /// </param>
    protected void new(boolean _isAllowCaching = true)
    {
        this.parmIsAllowCaching(_isAllowCaching);
        this.parmSelectableDataArea(curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAllowCaching</Name>
				<Source><![CDATA[
        public boolean parmIsAllowCaching(boolean _isAllowCaching = isAllowCaching)
    {
        isAllowCaching = _isAllowCaching;
        if (!isAllowCaching)
        {
            this.refresh();
        }
        return isAllowCaching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectableDataArea</Name>
				<Source><![CDATA[
        public SelectableDataArea parmSelectableDataArea(selectableDataArea _selectableDataArea = selectableDataArea)
    {
        selectableDataArea = _selectableDataArea;
        return selectableDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method to refresh the caching.
    /// </summary>
    public void refresh()
    {
        isCached = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>