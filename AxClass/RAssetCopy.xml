<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetCopy extends RunBaseBatch implements BatchRetryable
{
    private RAssetId rAssetId;
    private DialogField dialogAssetId;
    private DialogField dialogCopiesNumber;
    private RAssetTable rAssetTable;
    private RAssetTable rassetTableNew;
    private NumberSequenceCode numberSequenceCode;
    private NumberSeq numberSeq;
    private NumberOf copiesNumber;

    private const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTableNew</Name>
				<Source><![CDATA[
    private RAssetTable assetTableNew()
    {
        return rassetTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        RAssetParameters rAssetParameters = RAssetParameters::find();
        RAssetMainGroup assetMainGroup = RAssetMainGroup::find(rAssetTable.AssetGroup);

        dialog.caption("@GLS116413");
        dialogAssetId = dialog.addField(extendedTypeStr(RAssetId), "@GLS116307");
        dialogCopiesNumber = dialog.addField(extendedTypeStr(NumberOf), "@GLS116679");
        dialogCopiesNumber.displayLength(10);
        dialogAssetId.lookupButton(1);

        if (rAssetParameters.AutoNumber)
        {
            numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetId))
                .numberSequenceTable()
                .NumberSequence;
        }

        if (assetMainGroup.AutoNumber)
        {
            numberSequenceCode = assetMainGroup.AutoNumberSequence;
        }

        if (numberSequenceCode)
        {
            dialogAssetId.allowEdit(false);

            numberSeq = NumberSeq::newReserveNumFromCode(numberSequenceCode, NumberSeqScopeFactory::createDefaultScope(), true);
            if (numberSeq)
            {
                dialogAssetId.value(numberSeq.num());
                if (copiesNumber <= 0)
                {
                    copiesNumber = 1;
                }

                dialogCopiesNumber.value(copiesNumber);
            }
        }
        else
        {
            dialogAssetId.value(rAssetId);
            dialogCopiesNumber.value(1);
            dialogCopiesNumber.allowEdit(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;

        rAssetId = dialogAssetId.value();
        copiesNumber = dialogCopiesNumber.value();
        if (!copiesNumber)
        {
            ret = checkFailed("@GLS116680");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewAssetId</Name>
				<Source><![CDATA[
    public RAssetId getNewAssetId()
    {
        return rAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequence</Name>
				<Source><![CDATA[
    public void initSequence()
    {
        RAssetParameters rAssetParameters = RAssetParameters::find();
        RAssetMainGroup assetMainGroup = RAssetMainGroup::find(rAssetTable.AssetGroup);

        if (rAssetParameters.AutoNumber)
        {
            numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetId))
                .numberSequenceTable()
                .NumberSequence;
        }

        if (assetMainGroup.AutoNumber)
        {
            numberSequenceCode = assetMainGroup.AutoNumberSequence;
        }

        numberSeq = NumberSeq::newReserveNumFromCode(numberSequenceCode, NumberSeqScopeFactory::createDefaultScope(), true);

        rAssetId = numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RAssetTable _assetTable)
    {
        super();

        rAssetTable = _assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCodeRelease</Name>
				<Source><![CDATA[
    private void numberSequenceCodeRelease()
    {
        if (numberSequenceCode)
        {
            NumberSeq::release(numberSequenceCode, dialogAssetId.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, rassetId, copiesNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopiesNumber</Name>
				<Source><![CDATA[
    public NumberOf parmCopiesNumber(NumberOf _copiesNumber = copiesNumber)
    {
        copiesNumber = _copiesNumber;
        return copiesNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetParameters assetParameters = RAssetParameters::find();

        for (int i = 1; i <= copiesNumber; i++)
        {
            ttsbegin;

            if (numberSequenceCode
                && i != 1)
            {
                numberSeq = NumberSeq::newReserveNumFromCode(numberSequenceCode, NumberSeqScopeFactory::createDefaultScope(), true);
                if (numberSeq)
                {
                    rAssetId = numberSeq.num();
                }
            }

            rassetTableNew.clear();
            rassetTableNew.AccountNum = rAssetId;
            rassetTableNew.Status = RAssetStatus::NoAcquisition;
            rassetTableNew.Name = rAssetTable.Name;
            rassetTableNew.AssetGroup = rAssetTable.AssetGroup;
            rassetTableNew.AcquisitionDate = rAssetTable.AcquisitionDate;
            rassetTableNew.AcquisitionPrice = rAssetTable.AcquisitionPrice;
            rassetTableNew.Documents = rAssetTable.Documents;
            rassetTableNew.InsPolicyNum = rAssetTable.InsPolicyNum;
            rassetTableNew.InsuredValue = rAssetTable.InsuredValue;
            rassetTableNew.Make = rAssetTable.Make;
            rassetTableNew.Model = rAssetTable.Model;
            rassetTableNew.GuaranteeDate = rAssetTable.GuaranteeDate;
            rassetTableNew.AccountNumMain = rAssetTable.AccountNumMain;
            rassetTableNew.AssetType = rAssetTable.AssetType;
            rassetTableNew.Notes = rAssetTable.Notes;
            rassetTableNew.CustAccount = rAssetTable.CustAccount;
            rassetTableNew.VendAccount = rAssetTable.VendAccount;
            rassetTableNew.AssetReplaceCost = rAssetTable.AssetReplaceCost;
            rassetTableNew.AssetUse = rAssetTable.AssetUse;
            rassetTableNew.AssetBelonged = rAssetTable.AssetBelonged;
            rassetTableNew.InsuranceDate1 = rAssetTable.InsuranceDate1;
            rassetTableNew.InsuranceDate2 = rAssetTable.InsuranceDate2;
            rassetTableNew.ReleaseYear = rAssetTable.ReleaseYear;
            rassetTableNew.AccountNumReference = rAssetTable.AccountNumReference;
            rassetTableNew.TaxCode = rAssetTable.TaxCode;
            rassetTableNew.AssessedTaxType = rAssetTable.AssessedTaxType;
            rassetTableNew.BuildingStartDate = rAssetTable.BuildingStartDate;
            rassetTableNew.DenominatorShare = rAssetTable.DenominatorShare;
            rassetTableNew.LandTaxCode = rAssetTable.LandTaxCode;
            rassetTableNew.LandType = rAssetTable.LandType;
            rassetTableNew.NumeratorShare = rAssetTable.NumeratorShare;
            rassetTableNew.TaxAllowanceRecId = rAssetTable.TaxAllowanceRecId;
            rassetTableNew.TaxBase = rAssetTable.TaxBase;
            rassetTableNew.TaxBaseUnitId = rAssetTable.TaxBaseUnitId;
            rassetTableNew.TransportTaxCode = rAssetTable.TransportTaxCode;
            rassetTableNew.VatRefundingStartDate = rAssetTable.VatRefundingStartDate;
            rassetTableNew.VehicleModel = rAssetTable.VehicleModel;
            rassetTableNew.VehicleType = rAssetTable.VehicleType;

            if (assetParameters.BarcodeEqualsAssetNumber)
            {
                rassetTableNew.Barcode = rassetTableNew.AccountNum;
            }
            else if (assetParameters.AutoNumberBarcode)
            {
                RefRecId barcodeNumberSequenceId = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetBarcode)).NumberSequenceId;

                if (barcodeNumberSequenceId)
                {
                    NumberSeq barcodeNumberSeq = NumberSeq::newGetNumFromId(barcodeNumberSequenceId);
                    if (barcodeNumberSeq)
                    {
                        rassetTableNew.Barcode = barcodeNumberSeq.num();
                    }
                }
            }

            container assetTypes = this.getAssetTypes();

            if (!conFind(assetTypes, rAssetTable.AssetType))
            {
                RAssetTaxAllowanceHistory allowanceHist = RAssetTaxAllowanceHistory::findLast(maxDate(), rAssetTable.AccountNum);
                if (allowanceHist.RecId)
                {
                    RAssetTaxAllowanceHistory allowanceHistNew;
                    allowanceHistNew.data(allowanceHist);
                    allowanceHistNew.AssetId   = rassetTableNew.AccountNum;
                    allowanceHistNew.StartDate = dateStartMth(rassetTableNew.AcquisitionDate);
                    allowanceHistNew.doInsert();
                }
            }

            RAssetStandards assetStandards;
            while select assetStandards
                where assetStandards.AssetId == rAssetTable.AccountNum
            {
                RAssetStandards assetStandardsNew;
                assetStandardsNew.data(assetStandards);
                assetStandardsNew.AssetId = rassetTableNew.AccountNum;
                assetStandardsNew.LastDepDate = dateNull();
                assetStandardsNew.DisposalDate = dateNull();
                assetStandardsNew.SaleValue = 0;
                assetStandardsNew.LendingPosted = NoYes::No;
                assetStandardsNew.insert();

                RAssetLifeHist lifeHist = RAssetLifeHist::findDateLifeTime(rAssetTable.AccountNum, maxDate(), assetStandards.AssetStandardId);
                RAssetLifeHist lifeHistNew = RAssetLifeHist::findDateLifeTime(rassetTableNew.AccountNum, maxDate(), assetStandardsNew.AssetStandardId, true);
                lifeHistNew.NewLife = lifeHist.NewLife;
                lifeHistNew.NewFactor = lifeHist.NewFactor;
                lifeHistNew.doUpdate();
            }

            RAssetDeferralsAccounts rAssetDeferralsAccounts;
            while select rAssetDeferralsAccounts
                where rAssetDeferralsAccounts.AccountCode == RAssetTableGroupAllStandard::Table
                    && rAssetDeferralsAccounts.AccountNum  == rAssetTable.AccountNum
            {
                RAssetDeferralsAccounts rAssetDeferralsAccountsNew;
                rAssetDeferralsAccountsNew.data(rAssetDeferralsAccounts);
                rAssetDeferralsAccountsNew.AccountNum = rassetTableNew.AccountNum;
                rAssetDeferralsAccountsNew.insert();
            }

            RAssetDeprAccount assetDeprAccount;
            while select assetDeprAccount
                where assetDeprAccount.AssetId == rAssetTable.AccountNum
            {
                RAssetDeprAccount assetDeprAccountNew;
                assetDeprAccountNew.data(assetDeprAccount);
                assetDeprAccountNew.AssetId = rassetTableNew.AccountNum;
                assetDeprAccountNew.insert();
            }

            rassetTableNew.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets applicable asset types.
    /// </summary>
    /// <returns>The <c>container</c> with applicable asset types.</returns>
    protected container getAssetTypes()
    {
        return [RAssetType::Land, RAssetType::LandBuilding];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = true;

        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion :
                [version, rassetId, copiesNumber] = _packedClass;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            if (!rAssetId)
            {
                ret = checkFailed("@GLS116617");
            }

            if (RAssetTable::find(rAssetId))
            {
                ret = checkFailed("@GLS116405");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS116413";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args
            || _args.dataset() != tableNum(RAssetTable))
        {
            throw error(strFmt("@SYS25516", RAssetCopy::description()));
        }

        RAssetCopy rAssetCopy = new RAssetCopy(_args.record());

        if (rAssetCopy.prompt())
        {
            rAssetCopy.runOperation();
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
            RAssetTable rAssetTable = rAssetCopy.assetTableNew();
            formDataSource.executeQuery();
            formDataSource.positionToRecord(rAssetTable);
        }
        else
        {
            rAssetCopy.numberSequenceCodeRelease();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>