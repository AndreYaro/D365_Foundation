<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeLineRenumbering</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeLineRenumbering</c> class assigns values to the line number field.
/// </summary>
public class TradeLineRenumbering
{
    TradeLineNumbering  lineNumbering;
    SalesPurchTable     salesPurchTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNumbering</Name>
				<Source><![CDATA[
        public TradeLineNumbering parmLineNumbering(TradeLineNumbering _lineNumbering = lineNumbering)
    {
        lineNumbering = _lineNumbering;
        return lineNumbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchTable</Name>
				<Source><![CDATA[
        public SalesPurchTable parmSalesPurchTable(SalesPurchTable _salesPurchTable = salesPurchTable)
    {
        salesPurchTable = _salesPurchTable;
        return salesPurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumberLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renumbers the lines.
    /// </summary>
    /// <param name = "_tmpLineRenumbering">The <c>TradeTmpLineRenumbering</c> with the recIds of the lines to renumber.</param>
    /// <returns>true if renumbering of lines was done for the table; otherwise, false.</returns>
    protected boolean renumberLines(TradeTmpLineRenumbering _tmpLineRenumbering)
    {
        Integer increment = SystemParameters::getSystemLineNumberIncrement();

        switch (lineNumbering.TableId)
        {
            case tablenum(PurchLine) :
                PurchLine localPurchLine;
                localPurchLine.skipDataMethods(true);
                localPurchLine.skipEvents(this.skipPurchLineEvents());

                ttsbegin;

                update_recordset localPurchLine
                            setting LineNumber = localPurchLine.LineNumber * -1
                        join RecId from _tmpLineRenumbering
                            where _tmpLineRenumbering.TradeLineRecId == localPurchLine.RecId;

                update_recordset localPurchLine
                            setting LineNumber = _tmpLineRenumbering.RecId  * increment
                        join RecId from _tmpLineRenumbering
                            where _tmpLineRenumbering.TradeLineRecId == localPurchLine.RecId;

                ttscommit;
                return true;
            case tablenum(PurchRFQCaseLine) :
                PurchRFQCaseLine        localPurchRFQCaseLine;
                localPurchRFQCaseLine.skipDataMethods(true);

                ttsbegin;

                update_recordset localPurchRFQCaseLine
                            setting LineNumber = localPurchRFQCaseLine.LineNumber * -1
                        join RecId from _tmpLineRenumbering
                            where _tmpLineRenumbering.TradeLineRecId == localPurchRFQCaseLine.RecId;

                update_recordset localPurchRFQCaseLine
                            setting LineNumber = _tmpLineRenumbering.RecId  * increment
                        join RecId from _tmpLineRenumbering
                            where _tmpLineRenumbering.TradeLineRecId == localPurchRFQCaseLine.RecId;

                ttscommit;
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipPurchLineEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if purchase order line events should be skip.
    /// </summary>
    /// <returns>true if purchase order line events should be skip; otherwise, false.</returns>
    protected boolean skipPurchLineEvents()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRenumberingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the renumbering is allowed.
    /// </summary>
    /// <returns>
    ///    true if the renumbering is allowed; otherwise, false. 
    /// </returns>
    protected boolean isRenumberingAllowed()
    {
        if (lineNumbering.TableId == tableNum(PurchLine)
            && PurchParameters::find().DisallowLineRenumbering == NoYes::Yes)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the renumbering.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict cannot be resolved after several attempts.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict exists.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The operation is canceled because of an error.
    /// </exception>
    protected void renumber()
    {
        #OCCRetryCount
        TradeTmpLineRenumbering tmpLineRenumbering;

        if (!this.isRenumberingAllowed())
        {
            throw error("@SCM:RenumberingOfLinesNotAllowed");
        }
        
        try
        {
            tmpLineRenumbering.clear();
            if (lineNumbering.TradeLineNumbering::isFKRecId())
            {
                insert_recordset tmpLineRenumbering (TradeLineRecId)
                    select RecId from lineNumbering order by LineNumber
                    where lineNumbering.HeaderRecId == salesPurchTable.RecId;
            }
            else
            {
                insert_recordset tmpLineRenumbering (TradeLineRecId)
                    select RecId from lineNumbering order by LineNumber
                    where lineNumbering.HeaderId == salesPurchTable.salesPurchTableInterface().parmOrderId();
            }

            if (!this.renumberLines(tmpLineRenumbering))
            {
                throw error(strfmt("@SYS22828",funcname()));
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the renumbering can be executed.
    /// </summary>
    /// <returns>
    /// true if the renumbering can be executed; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (ret && !salesPurchTable.salesPurchTableInterface().canRenumberLineNumbers())
        {
            ret = checkFailed(strfmt("@SYS319864", salesPurchTable.salesPurchTableInterface().parmOrderId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TradeLineRenumbering construct()
    {
        return new TradeLineRenumbering();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        TradeLineRenumbering::mainOnServer(_args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the execution of the class to the server.
    /// </summary>
    /// <param name="_buffer">
    /// An instance of the <c>Args</c> class.
    /// </param>
    public static void mainOnServer(common _buffer)
    {
        TradeLineRenumbering lineRenumbering = TradeLineRenumbering::newFromParm(_buffer);

        if (lineRenumbering.validate())
        {
            lineRenumbering.renumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs and passes parameters to a new instance of the <c>TradeLineRenumbering</c> class.
    /// </summary>
    /// <param name="_buffer">
    ///    An object of the <c>Common</c> type.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>TradeLineRenumbering</c> class.
    /// </returns>
    static TradeLineRenumbering newFromParm(Common _buffer)
    {
        TradeLineRenumbering    tradeLineRenumbering = TradeLineRenumbering::construct();

        tradeLineRenumbering.parmLineNumbering(_buffer);
        tradeLineRenumbering.parmSalesPurchTable(_buffer.salesPurchTable());

        return tradeLineRenumbering;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>