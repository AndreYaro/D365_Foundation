<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchyNodeSelector_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the hierarchy node tree.
/// </summary>
class TaxReportHierarchyNodeSelector_IN
{
    #ResAppl
    #FormListControl

    TaxReportHierarchySetOffRule_IN             rule;
    TaxDirection                                taxDir;
    TaxReportHierarchySetOffRuleDirection_IN    ruleDir;
    TaxReportHrchyNodeCollection_IN             nodeColl;

    // Form tree control
    ImageListAppl_checkbox                      imageListState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendRuleDetail</Name>
				<Source><![CDATA[
    private void appendRuleDetail(TaxReportHrchyNode_IN _node)
    {
        TaxReportHrchyNodeCollectionDetails_IN  collDetail;
        TaxReportHierarchySetOffRuleDetails_IN  ruleDetail;
        TaxReportHierarchySetOffRuleDetails_IN  ruleDetailPriority;

        if (_node.parmCanSettle() != NoYes::Yes)
        {
            // Node must be capable of settlement
            return;
        }

        // Collection detail
        select RecId from collDetail
            where collDetail.TaxReportHrchyNodeCollection_IN == nodeColl.RecId
               && collDetail.TaxReportHierarchyNode_IN == _node.parmRecId();

        if (collDetail.RecId == 0)
        {
            collDetail.clear();
            collDetail.initValue();

            collDetail.TaxReportHrchyNodeCollection_IN = nodeColl.RecId;
            collDetail.TaxReportHierarchyNode_IN = _node.parmRecId();

            collDetail.insert();
        }

        // Rule detail
        select RecId from ruleDetail
            where ruleDetail.TaxReportHierarchySetOffRuleDirection_IN == ruleDir.RecId
               && ruleDetail.TaxReportHrchyNodeCollectionDetails_IN == collDetail.RecId;

        if (ruleDetail.RecId == 0)
        {
            ruleDetail.clear();
            ruleDetail.initValue();

            select maxOf(Priority) from ruleDetailPriority
                where ruleDetailPriority.TaxReportHierarchySetOffRuleDirection_IN == ruleDir.RecId;

            ruleDetail.Priority = ruleDetailPriority.Priority + 1;
            ruleDetail.TaxReportHierarchySetOffRuleDirection_IN = ruleDir.RecId;
            ruleDetail.TaxReportHrchyNodeCollectionDetails_IN = collDetail.RecId;

            ruleDetail.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendRuleDetails</Name>
				<Source><![CDATA[
    private void appendRuleDetails(TaxReportHrchyNode_IN _node)
    {
        List                    childList;
        ListEnumerator          childListEnumerator;
        TaxReportHrchyNode_IN   childNode;

        this.initRuleDirection(TaxReportHierarchyHelper_IN::findRootNode(rule.TaxReportHierarchyVersion_IN));

        this.appendRuleDetail(_node);

        childList = TaxReportHierarchyHelper_IN::findAllDescendants(_node);
        childListEnumerator = childList.getEnumerator();
        while (childListEnumerator.moveNext())
        {
            childNode = childListEnumerator.current();
            this.appendRuleDetail(childNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHierarchyTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new hierarhy tree for given parameters.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The instance of <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_treeMap">
    /// The map with elements of tree.
    /// </param>
    public void buildHierarchyTree(FormTreeControl _formTreeControl, Map _treeMap)
    {
        TaxReportHrchyNode_IN   rootNode;

        // Tree mode
        _formTreeControl.setStateImagelist(imageListState.imageList());

        // Clear the tree
        _formTreeControl.deleteAll();

        // Populate the tree
        rootNode = TaxReportHierarchyHelper_IN::findRootNode(rule.TaxReportHierarchyVersion_IN);
        this.populateHierarchyTree(_formTreeControl, rootNode, FormTreeAdd::Root, _treeMap);

        SysFormTreeControl::expandTree(_formTreeControl, _formTreeControl.getRoot(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method frames the collection expression
    /// </summary>
    /// <param name="_node">
    /// The parameter TaxReportHrchyNode_IN
    /// </param>
    /// <returns>
    /// Returns the TaxReportHrchyNodeCollectionExp_IN.
    /// </returns>
    private TaxReportHrchyNodeCollectionExp_IN getCollectionExpression(TaxReportHrchyNode_IN _node)
    {
        str                                     reportCodeDelimiter = DimensionParameters::getDimensionSegmentDelimiter();
        TaxReportHierarchyNode_IN               tableNode;
        int                                     counter;
        TaxReportHrchyNodeCollectionExp_IN      expression;

        if (_node.parmNodeType() == TaxReportHierarchyNodeType_IN::Root)
        {
            expression = _node.parmDisplayValue();
        }
        else
        {
            expression =  _node.parmComboDisplayValuestr();
        }

        select maxOf(Level) from tableNode
            where tableNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion()
            && tableNode.LeftId > _node.parmLeftId()
            && tableNode.RightId < _node.parmRightId()
            && tableNode.RightId - tableNode.LeftId == 1
            && tableNode.CanSettle == NoYes::Yes;

        if (tableNode.Level)
        {
            for (counter = 1; counter <= tableNode.Level - _node.parmLevel(); counter++)
            {
                expression += reportCodeDelimiter + '*';
            }
        }

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(TaxReportHierarchySetOffRule_IN _rule, TaxDirection _taxDir)
    {
        rule = _rule;
        taxDir = _taxDir;

        ruleDir = TaxReportHierarchySetOffRuleDirection_IN::findBySetOffRule(
            rule.RecId, taxDir);
        nodeColl = TaxReportHrchyNodeCollection_IN::find(ruleDir.TaxReportHrchyNodeCollection_IN);

        imageListState = new ImageListAppl_checkbox();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleDirection</Name>
				<Source><![CDATA[
    private void initRuleDirection(TaxReportHrchyNode_IN _node)
    {
        if (!nodeColl)
        {
            nodeColl.initValue();
            nodeColl.TaxReportHierarchyNode_IN = _node.parmRecId();
            nodeColl.Expression = this.getCollectionExpression(_node);
            nodeColl.Name = strFmt("%1_%2", rule.Name, enum2int(taxDir));

            nodeColl.insert();
        }

        if (!ruleDir)
        {
            ruleDir.initValue();
            ruleDir.TaxDirection = taxDir;
            ruleDir.TaxReportHierarchySetOffRule_IN = rule.RecId;
            ruleDir.TaxReportHrchyNodeCollection_IN = nodeColl.RecId;

            ruleDir.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>populateHierarchyTree</Name>
				<Source><![CDATA[
    private void populateHierarchyTree(
        FormTreeControl _formTreeControl,
        TaxReportHrchyNode_IN _node,
        TreeItemIdx _parentIdx,
        Map _treeMap = null)
    {
        TreeItemIdx             itemIdx;
        List                    childNodes;
        ListEnumerator          childNodesEnumerator;
        TaxReportHrchyNode_IN   childNode;
        boolean                 hasChildren;

        hasChildren = (_node.parmRightId() - _node.parmLeftId() > 1);

        itemIdx = SysFormTreeControl::addTreeItem(
            _formTreeControl,
            _node.parmDisplayValue(),
            _parentIdx,
            _node,
            0,
            hasChildren,
            imageListState.image(#ImageCheckNone));

        if (_treeMap != null)
        {
            _treeMap.insert(_node.parmRecId(), itemIdx);
        }

        childNodes = TaxReportHierarchyHelper_IN::findAllDescendantsByDepth(_node, 1);
        childNodesEnumerator = childNodes.getEnumerator();
        while (childNodesEnumerator.moveNext())
        {
            childNode = childNodesEnumerator.current();
            if (childNode.parmCanSettle() || childNode.parmRightId() - childNode.parmLeftId() != 1)
            {
                this.populateHierarchyTree(_formTreeControl, childNode, itemIdx, _treeMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptyDirection</Name>
				<Source><![CDATA[
    private void removeEmptyDirection()
    {
        TaxReportHierarchySetOffRuleDetails_IN  ruleDetail;

        // Check if there are no rule details
        select firstOnly ruleDetail
            where ruleDetail.TaxReportHierarchySetOffRuleDirection_IN == ruleDir.RecId;

        if (!ruleDetail)
        {
            ruleDir.selectForUpdate(true);
            ruleDir.delete();
            ruleDir.clear();

            nodeColl.selectForUpdate(true);
            nodeColl.delete();
            nodeColl.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRuleDetail</Name>
				<Source><![CDATA[
    private void removeRuleDetail(TaxReportHrchyNode_IN _node)
    {
        TaxReportHrchyNodeCollectionDetails_IN  collectionDetail;
        TaxReportHierarchySetOffRuleDetails_IN  ruleDetail;

        while select forUpdate ruleDetail
            where ruleDetail.TaxReportHierarchySetOffRuleDirection_IN == ruleDir.RecId
            join forUpdate collectionDetail
                where collectionDetail.RecId == ruleDetail.TaxReportHrchyNodeCollectionDetails_IN
                   && collectionDetail.TaxReportHierarchyNode_IN == _node.parmRecId()
        {
            collectionDetail.delete();
            ruleDetail.delete();

            TaxReportHierarchySetOffRuleHelper_IN::updateDetailsPriority(ruleDir.RecId, ruleDetail.Priority);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleSelectNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the tree node.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The instance of <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_formTreeItem">
    /// The instance of <c>FormTreeItem</c>.
    /// </param>
    public void toggleSelectNode(FormTreeControl _formTreeControl, FormTreeItem _formTreeItem)
    {
        Map                     selectionMap;
        MapEnumerator           selectionMapEnumerator;
        TreeItemIdx             treeItemIdx;
        FormTreeItem            treeItem;
        TaxReportHrchyNode_IN   treeNode;
        TaxReportHrchyNode_IN   hierarchyNode;

        if (rule.RecId == 0)
        {
            throw error("@SYS4005701");
        }

        selectionMap = new Map(Types::Integer, Types::AnyType);

        // Update rule details accordingly
        hierarchyNode = _formTreeItem.data();
        if (_formTreeItem.stateChecked() == FormTreeCheckedState::Unchecked)
        {
            // Remove
            ttsBegin;
            selectionMap = this.getTreeNode(_formTreeControl, _formTreeItem.idx(), selectionMap);
            selectionMapEnumerator = selectionMap.getEnumerator();

            while (selectionMapEnumerator.moveNext())
            {
                treeItemIdx = selectionMapEnumerator.currentKey();
                treeItem = _formTreeControl.getItem(treeItemIdx);

                if (treeItem.stateChecked() == FormTreeCheckedState::Unchecked)
                {
                    treeNode = treeItem.data();
                    this.removeRuleDetail(treeNode);
                }
            }

            this.removeEmptyDirection();

            ttsCommit;
        }
        else
        {
            // Append
            ttsBegin;

            this.appendRuleDetails(hierarchyNode);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the tree node.
    /// </summary>
    /// <param name = "_formTreeControl">The instance of <c>FormTreeControl</c>.</param>
    /// <param name = "_TreeItemIdx">The instance of <c>FormTreeItem</c></param>
    /// <param name = "_selectionMap">The map with elements of tree.</param>
    /// <returns>The map with elements of tree.</returns>
    public Map getTreeNode(FormTreeControl _formTreeControl, TreeItemIdx _TreeItemIdx,  Map _selectionMap = null)
    {
        FormTreeItem formTreeItem;
        TreeItemIdx  treeItemIdx    = _TreeItemIdx;

        while (treeItemIdx)
        {
            formTreeItem = _formTreeControl.getItem(treeItemIdx);

            _selectionMap.insert(treeItemIdx, formTreeItem.data());

            if (_formTreeControl.getChild(treeItemIdx))
            {
                this.getTreeNode(_formTreeControl, _formTreeControl.getChild(treeItemIdx), _selectionMap);
            }
            treeItemIdx = _formTreeControl.getNextSibling(treeItemIdx);
        }

        return _selectionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTreeItemState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state of check box on the tree.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The instance of <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_treeMap">
    /// The map with elements of tree.
    /// </param>
    public void updateTreeItemState(FormTreeControl _formTreeControl, Map _treeMap)
    {
        TaxReportHierarchySetOffRuleDetails_IN   ruleDetailLoc;
        TaxReportHrchyNodeCollectionDetails_IN   collectionDetailsLoc;
        TaxReportHierarchySetOffRuleDirection_IN ruleDirection;
        TaxReportHierarchyNode_IN nodeLoc;
        TreeItemIdx itemIdx;
        FormTreeItem formTreeItem;
        MapEnumerator mapEnumerator;
        Set checkedSet = new Set(Types::Integer);

        while select RecId from nodeLoc
            exists join collectionDetailsLoc
            where collectionDetailsLoc.TaxReportHierarchyNode_IN == nodeLoc.RECID
                exists join ruleDetailLoc
                where collectionDetailsLoc.RECID == ruleDetailLoc.TaxReportHrchyNodeCollectionDetails_IN
                    exists join ruleDirection
                    where ruleDetailLoc.TaxReportHierarchySetOffRuleDirection_IN == ruleDirection.RecId
                        && ruleDirection.TaxReportHierarchySetOffRule_IN == rule.RecId
                        && ruleDirection.TaxReportHrchyNodeCollection_IN == nodeColl.RecId
        {
            itemIdx = _treeMap.lookup(nodeLoc.RecId);
            checkedSet = this.changeTreeItemState(_formTreeControl, itemIdx, checkedSet);
        }

        mapEnumerator = _treeMap.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            if (!checkedSet.in(mapEnumerator.currentValue()))
            {
                formTreeItem = _formTreeControl.getItem(mapEnumerator.currentValue());
                formTreeItem.stateChecked(FormTreeCheckedState::Unchecked);
                _formTreeControl.setItem(formTreeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeTreeItemState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the check box state
    /// </summary>
    /// <param name = "_formTreeControl">The instance of <c>FormTreeControl</c>.</param>
    /// <param name = "_idx">The form tree item id.</param>
    /// <param name = "_checkedSet">The set with item id when tree item check box state changed.</param>
    /// <returns>The set with item id when tree item check box state changed.</returns>
    public Set changeTreeItemState(FormTreeControl _formTreeControl, TreeItemIdx _idx, Set _checkedSet = null)
    {
        if (_idx)
        {
            FormTreeItem formTreeItem = _formTreeControl.getItem(_idx);

            formTreeItem.stateChecked(FormTreeCheckedState::Checked);
            _formTreeControl.setItem(formTreeItem);

            if (_formTreeControl.getParent(_Idx))
            {
                _checkedSet = this.changeParentTressItemState(_formTreeControl, _formTreeControl.getParent(_idx), _checkedSet);
            }

            _checkedSet.add(_idx);
        }
        return _checkedSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeParentTressItemState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the check box state of parent tree item
    /// </summary>
    /// <param name = "_formTreeControl">The instance of <c>FormTreeControl</c>.</param>
    /// <param name = "_parentIdx">The form tree item id.</param>
    /// <param name = "_selectionSet">The set with item id when tree item check box state changed.</param>
    /// <returns>The set with item id when tree item check box state changed.</returns>
    public Set changeParentTressItemState(FormTreeControl _formTreeControl, TreeItemIdx _parentIdx, Set _selectionSet = null)
    {
        FormTreeItem formTreeItem = _formTreeControl.getItem(_parentIdx);
        FormTreeCheckedState parentState;

        if (formTreeItem)
        {
            parentState = this.checkTreeItemState(_formTreeControl, _formTreeControl.getChild(_parentIdx));
        }

        _selectionSet.add(_parentIdx);
        formTreeItem.stateChecked(parentState);
        _formTreeControl.setItem(formTreeItem);

        if (_formTreeControl.getParent(_parentIdx))
        {
            this.changeParentTressItemState(_formTreeControl, _formTreeControl.getParent(_parentIdx), _selectionSet);
        }
        return _selectionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTreeItemState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the state of tree item.
    /// </summary>
    /// <param name = "_formTreeControl">The instance of <c>FormTreeControl</c>.</param>
    /// <param name = "_treeItemIdx">The item id.</param>
    /// <returns>Tree item state.</returns>
    public FormTreeCheckedState checkTreeItemState(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx)
    {
        FormTreeItem    formTreeItem;
        TreeItemIdx     treeItemIdx = _treeItemIdx;
        FormTreeCheckedState retState;
        boolean         checkedFlag = false;
        boolean         uncheckedFlag = false;
        boolean         partialFlag = false;

        retState = _formTreeControl.getItem(treeItemIdx).stateChecked();

        while (treeItemIdx)
        {
            formTreeItem = _formTreeControl.getItem(treeItemIdx);

            //is partial?
            if (formTreeItem.stateChecked() == FormTreeCheckedState::Partial)
            {
                partialFlag = true;
                break;
            }

            //is unChecked?
            if (formTreeItem.stateChecked() == FormTreeCheckedState::Unchecked)
            {
                uncheckedFlag = true;
            }

            if (formTreeItem.stateChecked() == FormTreeCheckedState::Checked)
            {
                checkedFlag = true;
            }

            //go to sibling tree item
            treeItemIdx = _formTreeControl.getNextSibling(treeItemIdx);
        }

        if (retState == FormTreeCheckedState::Partial || partialFlag)
        {
            retState = FormTreeCheckedState::Partial;
        }
        else
        {
            if ((uncheckedFlag && checkedFlag))
            {
                retState = FormTreeCheckedState::Partial;
            }
            else if (uncheckedFlag && !checkedFlag && retState == FormTreeCheckedState::Unchecked)
            {
                retState = FormTreeCheckedState::Unchecked;
            }
            else if (!uncheckedFlag && checkedFlag && retState == FormTreeCheckedState::Checked)
            {
                retState = FormTreeCheckedState::Checked;
            }
        }

        return retState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands a tree.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The instance of <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_hierarchyVersion">
    /// The instance of <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    /// <param name="_treeMap">
    /// The map with elements of tree.
    /// </param>
    public static void buildTree(
        FormTreeControl              _formTreeControl,
        TaxReportHierarchyVersion_IN _hierarchyVersion,
        Map                          _treeMap)
    {
        TaxReportHrchyNode_IN   rootNode;
        ImageListAppl_checkbox  imageListState;

        // Clear the tree
        _formTreeControl.deleteAll();

        // Populate the tree
        rootNode = TaxReportHierarchyHelper_IN::findRootNode(_hierarchyVersion.RecId);

        SysFormTreeControl::expandTree(_formTreeControl, _formTreeControl.getRoot(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static TaxReportHierarchyNodeSelector_IN construct()
    {
        return new TaxReportHierarchyNodeSelector_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSelector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creats a new instance of <c> TaxReportHierarchyNodeSelector_IN </c>.
    /// </summary>
    /// <param name="_setoffRule">
    /// A instance of <c> TaxReportHierarchySetOffRule_IN </c>.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <returns>
    /// A new instance of <c> TaxReportHierarchyNodeSelector_IN </c>.
    /// </returns>
    public static TaxReportHierarchyNodeSelector_IN newSelector(
        TaxReportHierarchySetOffRule_IN _setoffRule,
        TaxDirection _taxDirection)
    {
        TaxReportHierarchyNodeSelector_IN   selector;

        selector = TaxReportHierarchyNodeSelector_IN::construct();
        selector.init(_setoffRule, _taxDirection);

        return selector;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>