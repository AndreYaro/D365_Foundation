<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedContribFileController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedContribFileController_BR</c> class is the controller class for the sped contributions file generation operation.
/// </summary>
[
    FBTaxStatement_BRAttribute("@SYS4083200", menuitemDisplayStr(FBContribSpedFileExporter_BR)),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::PIS),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::COFINS),
    FBTaxStatementLocation_BRAttribute('BRA', 'PR'),
    FBTaxStatementLocation_BRAttribute('BRA', 'RJ'),
    FBTaxStatementLocation_BRAttribute('BRA', 'RS'),
    FBTaxStatementLocation_BRAttribute('BRA', 'SC'),
    FBTaxStatementLocation_BRAttribute('BRA', 'SP'),
    FBTaxStatementValidation_BRAttribute(menuitemDisplayStr(FBContribSpedFileValidation_BR)),
    FBTaxStatementSetupMenuItem_BRAttribute(menuitemDisplayStr(FBSpedContribFileParameters_BR))
]
public class FBSpedContribFileController_BR extends FBTaxStatementController_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the pre-requisites that must be met in order to start the file creation process.
    /// </summary>
    /// <returns>
    ///     A boolean value indicating whether the pre-requisites are met; false otherwise.
    /// </returns>
    protected boolean validate()
    {
        boolean                         ret = true;
        FBSpedContribFileContract_BR    contract;
        FiscalOrganization_BR                   fiscalOrganization;

        ret = super();

        contract = this.getDataContractObject();
        bookingPeriod   = this.bookingPeriod();

        if (bookingPeriod.fiscalEstablishment().isRootFiscalEstablishment())
        {
            fiscalOrganization = FiscalOrganization_BR::findByFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId, bookingPeriod.FiscalEstablishmentDataArea);

            if (!fiscalOrganization)
            {
                ret = checkFailed(strFmt("@SYS4006714", bookingPeriod.FiscalEstablishmentId, bookingPeriod.FiscalEstablishmentDataArea));
            }
            else
            {
                this.validateTaxAssessment(TaxType_BR::PIS);
                this.validateTaxAssessment(TaxType_BR::COFINS);
                this.validateFixedAssetCredit();
            }
        }
        else
        {
            ret = checkFailed("@SYS4001657");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs a new instance of the <c>FBSpedContribFileController_BR</c> class.
    /// </summary>
    /// <param name="_args">
    ///     <c>Args</c> class instance representing the arguments used to construct the controller class.
    /// </param>
    /// <returns>
    ///     An instance of the <c>FBSpedContribFileController_BR</c> class.
    /// </returns>
    public static SysOperationController construct(Args _args)
    {
        FBSpedContribFileController_BR  controller = new FBSpedContribFileController_BR();
        FBSpedContribFileContract_BR    contract;
        FBBookingPeriod_BR              bookingPeriod;
        FiscalOrganization_BR           fiscalOrganization;

        if (controller.canRetrieveBookingPeriodFromArgs(_args))
        {
            controller.initializeFromArgs(_args);
            controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
            controller.parmShowProgressForm(true);

            contract = controller.getDataContractObject();

            bookingPeriod = controller.bookingPeriod();

            if (bookingPeriod.fiscalEstablishment().isRootFiscalEstablishment())
            {
                fiscalOrganization = FiscalOrganization_BR::findByFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId, bookingPeriod.FiscalEstablishmentDataArea);

                if (fiscalOrganization)
                {
                    contract.parmFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId);
                    contract.parmFiscalEstablishmentDataArea(bookingPeriod.FiscalEstablishmentDataArea);
                    contract.parmMonth(bookingPeriod.PeriodMonth);
                    contract.parmYr(bookingPeriod.PeriodYear);
                    contract.parmContribVersion(fiscalOrganization.Version);
                    contract.parmContribSituationType(FBContribSituationType_BR::None);
                    contract.parmBookingPeriod(bookingPeriod);
                }
            }
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSpedContribFileController_BR::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFixedAssetCredit</Name>
				<Source><![CDATA[
    private void validateFixedAssetCredit()
    {
        FBTaxAssessment_BR                      pisTaxAssessment, cofinsTaxAssessment;
        FBContribAssetAssessment_BR             contribAssetAssessment;
        AmountMST                               pisCreditAssetAdjAmount, cofinsCreditAssetAdjAmount;
        FBTaxAssessmentCalculatorPISCOFINS_BR   pisTaxAssessmentCalculator, cofinsTaxAssessmentCalculator;

        pisTaxAssessment        = FBTaxAssessment_BR::findByBookingPeriodAndTaxType(bookingPeriod.RecId, TaxType_BR::PIS);
        cofinsTaxAssessment     = FBTaxAssessment_BR::findByBookingPeriodAndTaxType(bookingPeriod.RecId, TaxType_BR::COFINS);
        contribAssetAssessment  = FBContribAssetAssessment_BR::findByBookingPeriod(bookingPeriod.RecId);

        if (pisTaxAssessment && cofinsTaxAssessment && contribAssetAssessment)
        {
            pisTaxAssessmentCalculator      = FBTaxAssessmentCalculator_BR::construct(pisTaxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;
            cofinsTaxAssessmentCalculator   = FBTaxAssessmentCalculator_BR::construct(cofinsTaxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;

            pisCreditAssetAdjAmount     = pisTaxAssessmentCalculator.getSumOfAssetCreditAdjByTaxAssessment();
            cofinsCreditAssetAdjAmount  = cofinsTaxAssessmentCalculator.getSumOfAssetCreditAdjByTaxAssessment();

            if (    pisCreditAssetAdjAmount     != contribAssetAssessment.PISInstallmentSum
                    ||  cofinsCreditAssetAdjAmount  != contribAssetAssessment.COFINSInstallmentSum)
            {
                warning("@SYP4884105");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxAssessment</Name>
				<Source><![CDATA[
    private void validateTaxAssessment(TaxType_BR _taxType)
    {
        FBTaxAssessment_BR                      taxAssessment;
        FBTaxAssessmentCalculatorPISCOFINS_BR   taxAssessmentCalculator;

        select firstOnly taxAssessment
            where   taxAssessment.FBBookingPeriod_BR    == bookingPeriod.RecId
                &&  taxAssessment.TaxType               == _taxType;

        if (!taxAssessment)
        {
            warning(strfmt("@SYP4930079", _taxType));
        }
        else
        {
            taxAssessmentCalculator = FBTaxAssessmentCalculator_BR::construct(taxAssessment) as FBTaxAssessmentCalculatorPISCOFINS_BR;
            taxAssessmentCalculator.calculate();

            if (taxAssessmentCalculator.getCumulativeDeductions() > taxAssessmentCalculator.getCumulativeDebits())
            {
                warning("@SYP4930080");
            }

            if (taxAssessmentCalculator.getDeductions() > taxAssessmentCalculator.getDebits())
            {
                warning("@SYP4882687");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>