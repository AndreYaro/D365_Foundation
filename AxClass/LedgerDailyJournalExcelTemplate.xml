<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDailyJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The <c>LedgerDailyJournalExcelTemplate</c> is the supporting class for the Daily journal excel template.
/// </summary>
public class LedgerDailyJournalExcelTemplate extends DocuTemplateRegistrationBase implements LedgerIJournalExcelTemplate
{
    private const DocuTemplateName ExcelTemplateName = resourceStr(LedgerJournalLineEntryTemplate);
    private const DataEntityName LineEntityName = tableStr(LedgerJournalLineEntity);
    private const FieldName LineEntityJournalNum = fieldStr(LedgerJournalLineEntity, JournalBatchNumber);
    private const FieldName LineEntityDataAreaId = fieldStr(LedgerJournalLineEntity, dataAreaId);
    private const DataEntityName HeaderEntityName = tableStr(LedgerJournalHeaderEntity);
    private const FieldName HeaderEntityJournalNum = fieldStr(LedgerJournalHeaderEntity, JournalBatchNumber);
    private const FieldName HeaderEntityDataAreaId = fieldStr(LedgerJournalHeaderEntity, dataAreaId);
    private const GlobalObjectCacheScope LedgerDailyJournalCacheScopeRecId = 'LedgerDailyJournalCacheScopeRecId';
    private const GlobalObjectCacheScope LedgerDailyJournalCacheScopeResult = 'LedgerDailyJournalCacheScopeResult';
    private const int64 JournalValidationFailed = -1;
    private const int64 JournalNotValidated = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    private static boolean getCacheValue(GlobalObjectCacheScope _scope, RecId _journalRecId)
    {
        SysGlobalCache c;

        c = classfactory.globalCache();

        return c.get(_scope, _journalRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCacheValue</Name>
				<Source><![CDATA[
    private static void insertCacheValue(GlobalObjectCacheScope _scope, RecId _journalRecId, boolean _value)
    {
        SysGlobalCache c;

        c = classfactory.globalCache();

        c.set(_scope, _journalRecId, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedValidation</Name>
				<Source><![CDATA[
    private static UnknownNoYes getCachedValidation(GlobalObjectCacheScope _scope, RecId _journalRecId)
    {
        SysGlobalCache c;

        c = classfactory.globalCache();

        return c.get(_scope, _journalRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCachedValidation</Name>
				<Source><![CDATA[
    private static void setCachedValidation(GlobalObjectCacheScope _scope, RecId _journalRecId, boolean _value)
    {
        UnknownNoYes valueToStore;

        if (_value) 
        {
            valueToStore = UnknownNoYes::Yes;
        }
        else 
        {
            valueToStore = UnknownNoYes::No;
        }

        SysGlobalCache c;

        c = classfactory.globalCache();

        c.set(_scope, _journalRecId, valueToStore);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Daily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTemplateName</Name>
				<Source><![CDATA[
    public DocuTemplateName documentTemplateName()
    {
        return ExcelTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustomTrimming</Name>
				<Source><![CDATA[
    public void applyCustomTrimming(Excel.IWorkbookManager _templateManager, Excel.WorkbookSettingsManager _settingsManager, LedgerJournalTable _ledgerJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedAccountTypes()
    {
        Set accountTypeSet = new Set(Types::Integer);

        accountTypeSet.add(LedgerJournalACType::Ledger);
        accountTypeSet.add(LedgerJournalACType::Bank);
        accountTypeSet.add(LedgerJournalACType::Cust);
        accountTypeSet.add(LedgerJournalACType::Vend);

        return accountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedOffsetAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedOffsetAccountTypes()
    {
        Set offsetAccountTypeSet = new Set(Types::Integer);

        offsetAccountTypeSet.add(LedgerJournalACType::Ledger);
        offsetAccountTypeSet.add(LedgerJournalACType::Bank);
        offsetAccountTypeSet.add(LedgerJournalACType::Cust);
        offsetAccountTypeSet.add(LedgerJournalACType::Vend);

        return offsetAccountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    public boolean validateJournalForTemplate(LedgerJournalTable _ledgerJournalTable)
    {
        return LedgerJournalExcelTemplate::validateJournalForTemplate(_ledgerJournalTable, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    public void registerTemplates()
    {
        this.addTemplate(
            OfficeAppApplicationType::Excel,
            ExcelTemplateName,
            ExcelTemplateName,
            literalStr("@GeneralLedger:LedgerJournalLineEntryTemplateDescription"),
            literalStr("@GeneralLedger:LedgerJournalLineEntryTemplateDisplayName"),
            NoYes::No,
            NoYes::No,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEntityName</Name>
				<Source><![CDATA[
    public DataEntityName headerEntityName()
    {
        return HeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEntityName</Name>
				<Source><![CDATA[
    public DataEntityName lineEntityName()
    {
        return LineEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName headerJournalBatchNumberFieldName()
    {
        return HeaderEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName headerDataAreaFieldName()
    {
        return HeaderEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName lineJournalBatchNumberFieldName()
    {
        return LineEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName lineDataAreaFieldName()
    {
        return LineEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendHeaderEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendHeaderEntityFilters(FilterCollectionNode _headerFilter, ExportToExcelFilterTreeBuilder _headerFilterBuilder)
    {
        return _headerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLineEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendLineEntityFilters(FilterCollectionNode _lineFilter, ExportToExcelFilterTreeBuilder _lineFilterBuilder)
    {
        return _lineFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsDailyJournalType</Name>
				<Source><![CDATA[
    private static void validateIsDailyJournalType(LedgerJournalTable _journalTable, GlobalObjectCacheScope _cachedScope)
    {
        if (_journalTable.JournalType != LedgerJournalType::Daily)
        {
            LedgerDailyJournalExcelTemplate::insertCacheValue(_cachedScope, _journalTable.RecId, LedgerDailyJournalExcelTemplate::JournalValidationFailed);
            throw error(strFmt("@SYS114718", _journalTable.JournalName, LedgerJournalType::Daily));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeader</Name>
				<Source><![CDATA[
    private static boolean validateHeader(JournalId _journalId)
    {
        LedgerJournalHeaderEntity header;
        select firstonly header where header.JournalBatchNumber == _journalId;

        return LedgerJournalEntityBase::validateJournal(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDailyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a journal is valid for use with the <c>LedgerDailyJournalExcelTemplate</c>. The state of the journal is
    /// checked to verify inserts and updates are allowed.
    /// </summary>
    /// <param name = "_journalId">The name of the journal to validate.</param>
    /// <returns>True if the journal type is valid for use with the template; otherwise false.</returns>
    /// <remarks>Validation results are cached to improve import performance and eliminate redundant checks.</remarks>
    public static boolean validateDailyJournal(JournalId _journalId)
    {
        LedgerJournalTable journalTable = LedgerJournalTable::find(_journalId);
        boolean ret = false;

        UnknownNoYes cacheValue = LedgerDailyJournalExcelTemplate::getCachedValidation(LedgerDailyJournalCacheScopeResult, journalTable.RecId);

        if (cacheValue == UnknownNoYes::Unknown)
        {
            LedgerDailyJournalExcelTemplate::validateIsDailyJournalType(journalTable, LedgerDailyJournalCacheScopeResult);
            ret = LedgerDailyJournalExcelTemplate::validateHeader(_journalId);

            LedgerDailyJournalExcelTemplate::setCachedValidation(LedgerDailyJournalCacheScopeResult, journalTable.RecId, ret);
        } 
        else
        {
            ret = (cacheValue == UnknownNoYes::Yes);
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>