<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjWIPProj2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjWIPProj2ColDP</c> class is the report data provider class for the associated
///    <c>ProjListProjWIPProj2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementProject)),
    SRSReportParameterAttribute(classstr(ProjListProjWIPContract))
]

class ProjListProjWIPProj2ColDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget2Col;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    ProjShowAmount          showAmount;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;

    ProjListProjWIPTmp      projListProjWIPTmp;
    ProjListProjTrans_WIP   listProjTrans;
    ProjListProjTransLayout listProjTransLayout;
    ProjListProjHelpClass   actualProjHelpClass;
    ProjListProjHelpClass   budgetProjHelpClass;

    NumberSequenceFormat    oldLevelFormat;

    QueryRun                qrun;
    ProjId                  projIdFound;
    ProjId                  projId;
    ProjName                name;

    AmountMST               actualGross;
    AmountMST               budgetGross;
    AmountMST               actualOnAccount;
    AmountMST               budgetOnAccount;
    AmountMST               actualNet;
    AmountMST               budgetNet;

    int         showCostValue, showGross, showNet, showOnAccount,  showQtyHour, showSalesValue;
    str         grossWIPLabel, wipInvoiceLabel, netWIPLabel, devianceLabel,selectionLabel;
    int         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts required for the report.
    /// </summary>
    void calculate()
    {
        actualProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        actualProjHelpClass.setParmField();

        budgetProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        budgetProjHelpClass.setParmField();

        actualGross       += actualProjHelpClass.parmProjStatement().b300_Gross();
        actualOnAccount   += actualProjHelpClass.parmProjStatement().b400_wip_Invoiced_OnAccount();
        actualNet         += actualProjHelpClass.parmProjStatement().b500_Net();

        budgetGross       += budgetProjHelpClass.parmProjStatement().b300_Gross();
        budgetOnAccount   += budgetProjHelpClass.parmProjStatement().b400_wip_Invoiced_OnAccount();
        budgetNet         += budgetProjHelpClass.parmProjStatement().b500_Net();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line should print
    /// </summary>
    /// <returns>
    ///    true if line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(actualProjHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the line should print and calls the insert to temporary table method.
    /// </summary>
    /// <param name="projTableLocal">
    ///    A record that contains information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (stateProjType == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= level) ||
                (projTableLocal.levelFormat(level)   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    actualProjHelpClass.setName();
                    this.insertProjListProjWIPTmp();
                    this.setFieldZero();
                }
            }
        }
        else if (this.checkPrintLine())
        {
            actualProjHelpClass.setName();
            this.insertProjListProjWIPTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('projListProjWIPTmp')]
    public ProjListProjWIPTmp getProjListProjWIPTmp()
    {
        select * from projListProjWIPTmp;

        return projListProjWIPTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>ProjListProjTrans</c> class.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::WIP, ProjListStateId::Project);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmActualVsBudget(actualVsBudget2Col);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTrans.parmShowDeviance(true);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjWIPTmp()
    {
        projListProjWIPTmp.clear();

        projListProjWIPTmp.Id   = actualProjHelpClass.id();
        projListProjWIPTmp.Name = actualProjHelpClass.name();

        projListProjWIPTmp.Gross      = listProjTransLayout.showAmountReport(actualGross, showAmount);
        projListProjWIPTmp.Gross1     = listProjTransLayout.showAmountReport(budgetGross, showAmount);
        projListProjWIPTmp.Gross2     = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.Gross,
                                        projListProjWIPTmp.Gross1, actualVsBudget2Col, false);

        projListProjWIPTmp.Net        = listProjTransLayout.showAmountReport(actualNet, showAmount);
        projListProjWIPTmp.Net1       = listProjTransLayout.showAmountReport(budgetNet, showAmount);
        projListProjWIPTmp.Net2       = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.Net,
                                        projListProjWIPTmp.Net1, actualVsBudget2Col, false);

        projListProjWIPTmp.OnAccount  = listProjTransLayout.showAmountReport(actualOnAccount, showAmount);
        projListProjWIPTmp.OnAccount1 = listProjTransLayout.showAmountReport(budgetOnAccount, showAmount);
        projListProjWIPTmp.OnAccount2 = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.OnAccount,
                                        projListProjWIPTmp.OnAccount1, actualVsBudget2Col, false);

        // set labels
        projListProjWIPTmp.IdLabel         = strfmt('%1',stateProjType);
        projListProjWIPTmp.HeaderLabel     = selectionLabel;
        projListProjWIPTmp.DevianceLabel   = devianceLabel;

        projListProjWIPTmp.GrossLabel      = grossWIPLabel;
        projListProjWIPTmp.OnAccountLabel  = wipInvoiceLabel;
        projListProjWIPTmp.NetLabel        = netWIPLabel;

        // set field visibility
        projListProjWIPTmp.ShowGross      = showGross;
        projListProjWIPTmp.ShowNet        = showNet;
        projListProjWIPTmp.ShowOnAccount  = showOnAccount;

        // set decimals
        projListProjWIPTmp.DecimalAmount  = amountDecimals;
        projListProjWIPTmp.DecimalHourQty = hourQtyDecimals;

        projListProjWIPTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return ((actualGross    != 0) || (budgetGross       != 0) ||
                (actualOnAccount!= 0) || (budgetOnAccount   != 0) ||
                (actualNet      != 0) || (budgetNet         !=0 ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = qrun.query().dataSourceTable(tableNum(ProjTable));
        qbdsProjTable.addSortField(fieldNum(ProjTable, ProjId));

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = qrun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                hour,
                expenses,
                revenue,
                item,
                false);
        }
        else
        {
            QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldNum(ProjTable, Type));
            rangeHide.status(RangeStatus::Hidden);

            if (timeMaterial)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Cost));
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Internal));
            }

            if (! (timeMaterial || fixedPrice || investment || internalCost))
            {
                QueryBuildRange rangeEmptyString = qbdsProjTable.addRange(fieldNum(ProjTable,Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (skipZero)
        {
            QueryBuildDataSource qbdsProjectTrans = qbdsProjTable.addDataSource((tableNum(ProjTransPostingBudgetView)));
            qbdsProjectTrans.joinMode(JoinMode::ExistsJoin);
            qbdsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransPostingBudgetView, ProjId));
            qbdsProjectTrans.addRange(fieldNum(ProjTransPostingBudgetView, ProjTransDate)).value(queryValue(listProjTrans.parmProjFromDate()) + '..' + queryValue(listProjTrans.parmProjToDate()));
            qbdsProjectTrans.addRange(fieldNum(ProjTransPostingBudgetView, LedgerTransDate)).value(queryValue(listProjTrans.parmLedgerFromDate()) + '..' + queryValue(listProjTrans.parmLedgerToDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the calculate method.
    /// </summary>
    void printProject()
    {
        ProjTable           projTableLocal;
        ProjFundingSource   projFundingSourceLocal;

        projTableLocal  = qrun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,listProjTransLayout.parmStateProjType(),level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = qrun.get(tablenum(ProjFundingSource));
        }
        actualProjHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(actualProjHelpClass.idNew()))
        {
            actualProjHelpClass.setOld();

            return;
        }

        if (actualProjHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        actualProjHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(listProjTransLayout.parmLevel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjWIPContract contract = this.parmDataContract() as ProjListProjWIPContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        projFromDate = contract.parmProjFromDate();
        projBreakDate = contract.parmProjBreakDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerBreakDate = contract.parmLedgerBreakDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget2Col = contract.parmActualVsBudget2Col();
        forecastModelId = contract.parmForecastModelIdV2();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();

        this.initProjListTrans();

        [grossWIPLabel, wipInvoiceLabel, netWIPLabel, devianceLabel, selectionLabel] = listProjTrans.setDisplayLabel2Column(showAmount, hour, expenses, item, revenue, onAcc);

        [showOnAccount, showNet, showGross] = listProjTrans.setDisplayFlags2Column(hour, expenses, item, revenue, onAcc);

        [hourQtyDecimals, amountDecimals,
         grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        actualProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newProjListWIP(listProjTrans),
                                            stateProjType);

        budgetProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newProjListWIP(
                                                listProjTrans,
                                                ProjActualBudget::Budget,
                                                listProjTransLayout.parmAmountQty(),
                                                forecastModelId),
                                            stateProjType);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (qrun.next())
        {
            this.printProject();
        }

        if (this.checkPrintLine())
        {
            actualProjHelpClass.setName();
            this.insertProjListProjWIPTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields to zero.
    /// </summary>
    void setFieldZero()
    {
        actualGross       = 0;
        actualOnAccount   = 0;
        actualNet         = 0;

        budgetGross       = 0;
        budgetOnAccount   = 0;
        budgetNet         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        qrun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>