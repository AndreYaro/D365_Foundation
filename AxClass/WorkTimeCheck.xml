<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkTimeCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkTimeCheck
{
    timeOfDay       timeFrom;
    timeOfDay       timeTo;
    EffectivityPct  effectivity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if times are overlapping.
    /// </summary>
    /// <param name = "_time2From">The from time.</param>
    /// <param name = "_time2To">The to time.</param>
    /// <returns>true if the times are overlapping; otherwise, false.</returns>
    public boolean hasOverlap(timeOfDay _time2From, timeOfDay _time2To)
    {
        if (timeTo > _time2From && timeFrom <= _time2From)
        {
            return true;
        }

        if (timeFrom >= _time2From && timeTo <= _time2To)
        {
            return true;
        }

        if (timeFrom < _time2To && timeTo >= _time2To)
        {
            return true;
        }

        if (timeFrom <= _time2From && timeTo >= _time2To)
        {
            return true;
        }

        return false;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotOverlapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if times are overlapping.
    /// </summary>
    /// <param name = "time2From">The from time.</param>
    /// <param name = "time2To">The to time.</param>
    /// <returns>true if the times are not overlapping; otherwise, false.</returns>
    public boolean checkNotOverlapping(timeOfDay time2From, timeOfDay time2To)
    {
        if (this.hasOverlap(time2From, time2To))
        {
            return checkFailed("@SYS8795");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the record has valid times.
    /// </summary>
    /// <returns>true if valid; otherwise, false.</returns>
    public boolean checkRecord()
    {
        #TimeConstants
        if (timeTo > #secondsPerDay)
        {
            return checkFailed("@SYS8795");
        }

        if (effectivity < 0)
        {
            return checkFailed("@SYS24245");
        }

        if (timeFrom == timeTo || timeFrom > timeTo)
        {
            return checkFailed("@SYS8795");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>WorkTimeCheck</c> class.
    /// </summary>
    /// <param name = "_timeFrom">The from time-</param>
    /// <param name = "_timeTo">The to time.</param>
    /// <param name = "_effectivity">The effectivity.</param>
    public void new(
        timeOfDay       _timeFrom,
        timeOfDay       _timeTo,
        EffectivityPct  _effectivity)
    {
        timeFrom    = _timeFrom;
        timeTo      = _timeTo;
        effectivity = _effectivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkTimeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if work work time has valid times.
    /// </summary>
    /// <param name = "_workTimeLine">The <c>WorkTimeLine</c> record.</param>
    /// <returns>true if work time line has valid times; otherwise, false.</returns>
    [SysObsolete('Use checkTime() and checkOverlap() instead.', false, 30\06\2020)]
    static boolean checkWorkTimeLine(WorkTimeLine _workTimeLine)
    {
        return _workTimeLine.checkTime() && _workTimeLine.checkOverlap();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>