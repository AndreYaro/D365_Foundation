<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMovementByTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to create movement by template.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::MovementByTemplate)]
class WhsWorkExecuteDisplayMovementByTemplate extends WHSWorkExecuteDisplay
{
    WHSWorkScheduleMovementProvider workScheduleMovementProvider = WHSWorkScheduleMovementProvider::construct();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlContainerType:
                WhsControlContainerType controlContainer = _control as WhsControlContainerType;
                controlContainer.initializeContainerType();

                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalQuarantineInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the original quarantine invent dimension to be used when restoring the work on cancel or logout.
    /// </summary>
    /// <returns>The original quarantine inventory dimension.</returns>
    protected InventDim createOriginalQuarantineInventDim()
    {
        #InventDimDevelop
        InventDim quarantineInventDim = pass.createInventDimFromPass();
        if (pass.exists(#ItemId))
        {
            quarantineInventDim.clearLocationAndBelowDim(pass.lookup(#ItemId));
        }
        quarantineInventDim.InventStatusId  = pass.lookupStr(#FromInventoryStatus);
        quarantineInventDim.LicensePlateId  = pass.lookupStr(#LicensePlateId);
        quarantineInventDim.wmsLocationId   = pass.lookupStr(#WMSLocationId);
        quarantineInventDim.inventBatchId   = pass.lookupStr(#BatchId);
        quarantineInventDim.inventSerialId  = pass.lookupStr(#SerialId);

        return quarantineInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWorkOnCancelOrLogout</Name>
				<Source><![CDATA[
    protected void cleanupWorkOnCancelOrLogout(WHSWorkId _workId)
    {
        ttsbegin;

        super(_workId);

        // Delete Work if we cancel on the first pick of a Movement By Template
        if (!pass.exists(#LineNum) || WHSWorkLine::find(_workId, pass.parmLineNum()).isFirstPick())
        {
            WHSWorkTable::cancelWork(_workId);
            WHSWorkTable::find(_workId, true).delete();

            // If the status was being changed during the movement, we need to change it back.
            // this is only needed when the work is created and not executed on the menu item,
            // when work is executed right away the status is changed during work execution.
            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ScheduleMovement
                && this.isInventoryStatusBeingChanged(pass))
            {
                InventDim quarantineInventDim = this.createOriginalQuarantineInventDim();
                quarantineInventDim = InventDim::findOrCreate(quarantineInventDim);

                WhsWorkExecute workExecute = WhsWorkExecute::construct();
                workExecute.createOrUpdateQuarantineWork(pass.lookup(#UserId),
                                                            quarantineInventDim,
                                                            pass.lookup(#InventoryStatus),
                                                            pass.lookup(#ItemId),
                                                            pass.lookupNum(#Qty),
                                                            pass.lookup(#SelectedValueUOM),
                                                            true,
                                                            false,
                                                            '',
                                                            pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryStatusFrom</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for selecting from status by work user.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_label">
	/// Label text.
	/// </param>
	/// <param name="_showRemove">
	/// Determines whether Remove from Quarantine button should be shown, false by default.
	/// </param>
	/// <param name="_showBlank">
	/// Determines whether inventory status combobox should allow blank, false by default.
	/// </param>
	/// <param name="_showOK">
	/// Determines whether OK button should be shown, true by default.
	/// </param>
	/// <param name="_selected">
	/// Selected combobox element, empty string by default.
	/// </param>
	/// <param name="_enabled">
	/// Determines whether inventory status combobox should be enabled, true by default.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildInventoryStatusFrom(container    _con,
                                       str          _label = '',
                                       boolean      _showRemove = false,
                                       boolean      _showBlank = false,
                                       boolean      _showOK = true,
                                       str          _selected = '',
                                       boolean      _enabled = true)
    {
        WHSInventStatus     inventStatus;
        container           ret = _con;
        boolean             first = true;
        str                 elements;
        str                 label = _label ? _label : "@WAX1304";      // From Status

        if (_showBlank)
        {
            elements = '||';
        }

        while select inventStatus
        {
            if (first)
            {
                elements += inventStatus.InventStatusId;
                first = false;
            }
            else
            {
                elements = elements + '||' + inventStatus.InventStatusId;
            }
        }

        ret += [this.buildControl(#RFCombobox, #FromInventoryStatus, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected, WHSRFColorText::Default, extendedTypeNum(WHSInventStatusId))];

        if (_showOK)
        {
            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryStatusTo</Name>
				<Source><![CDATA[
    private container buildInventoryStatusTo(container _con)
    {
        Name toInventoryStatus = pass.lookupStr(#SelectedValue);

        if (!toInventoryStatus)
        {
            toInventoryStatus = pass.lookupStr(#SelectedFromValue);
        }

        return this.buildInventoryStatus(_con, "@WAX1305", false, false, false, toInventoryStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMovementFrom</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for Movement From screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_locationId">
	/// From location id.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildMovementFrom(container       _con,
                                WMSLocationId   _locationId = '')
    {
        container           ret = _con;
        WMSLocation         location;
        InventTable         inventTable;
        WHSInventTable      whsInventTable;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        ret += [this.buildControl(#RFLabel, 'Movement', WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, 'From', "@WAX1300", 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (!pass.exists(#WMSLocationId))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId,  extendedTypeNum(WHSLocOrLP), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];
        }

        if (_locationId && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

            if (location.whsLocationIsLPControlled())
            {
                ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
            }
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, inventTable.ItemId, extendedTypeNum(InventInventItemSearchItem), '', 0)];

        if (inventTable)
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

        ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location);

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        ret = this.buildCWWeightControl(ret, inventTable.ItemId);
        
        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
        {              
            if (location.whsLocationIsLPControlled())
            {
                boolean valueExists = pass.lookupStr(#SelectedFromValue) != '';

                ret = this.buildInventoryStatusFrom(ret, '', false, false, false, pass.lookupStr(#SelectedFromValue), !valueExists);
            }
            else
            {
                ret = this.buildInventoryStatusFrom(ret, '', false, false, false, pass.lookupStr(#SelectedFromValue));
            }

            ret = this.buildInventoryStatusTo(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForInitiation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares for initiation.
    /// </summary>
    protected void prepareForInitiation()
    {
        pass.insert(#Initiation, 1);
        step = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay           workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::MovementByTemplate);
        WHSWorkCreate                   workCreate;
        WHSTmpMovementWork              tmpMovementWork;
        WHSWorkBuildId                  workBuildId;
        WhsWorkExecute                  workExecute = WhsWorkExecute::construct();
        WHSRFMenuItemTable              menuItemTable;
        WMSLocationId                   newLocationId;
        InventDim                       inventDim;
        InventDim                       quarantineInventDim;
        container                       ret = conNull();
        container                       con = _con;
        container                       tmpFieldValues;
        int                             hasError = 0;
        boolean                         complete;
        boolean                         addCancel = true;
        boolean                         recall;
        boolean                         fullLP;
        boolean                         addButtons = true;
        container                       tmpPass;
        container                       tmpCon;
        Set                             excludeLocationId = new Set(Types::String);
        WHSRFPassthrough                fieldValues = new WHSRFPassthrough(Types::String, Types::String);

        mode = conPeek(conPeek(_con, 1), 1);
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(con);

        if (_buttonClicked == #RFOverride)       // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
            [newLocationId, tmpCon] = workExecute.findNewLocationWithDirectiveCode(workLine, excludeLocationId, menuItemTable.LocDirHintCode);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }

        switch (step)
        {
            case 0,1:
                if (pass.exists(#MenuItem))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData && !step)
                    {
                        con = this.buildMovementFrom(ret);

                        con = this.updateModeStepPass(con, mode, step, pass);

                        this.prepareForInitiation();
                    }
                }

                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#Recall);
                    pass.remove(#WorkComplete);
                }

                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                    if (step == #LocOrLPCheck)
                    {
                        break;
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);

                    if (hasError)
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                    pass.insert(#Initiation, '1');
                }

                con = this.buildMovementFrom(ret, pass.lookupStr(#WMSLocationId));

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                        && !pass.exists(#Initiation)
                        && !pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                        && WHSCatchWeightConfigurationKeyManager::instance().isEnabled()
                        && this.isInventoryStatusBeingChanged()
                        && PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                        && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ScheduleMovement == NoYes::Yes
                        && (WHSInventTable::movementWeightCapturingMethod(pass.lookup(#ItemId)) != WHSMovementWeightCapturingMethod::NotCaptured
                            || (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                                && WHSInventTable::catchWeightTagDimensionTrackingMethod(pass.lookup(#ItemId)) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)))
                    {
                        if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                        {
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);

                            WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectMovementByTemplate::newFromParams(mode, pass);
                            if (tagAutoSelect.canUseAutoSelection())
                            {
                                tagAutoSelect.process();
                            }
                            else
                            {
                                complete = false;
                                ret = this.buildWeightCapture(conNull());
                                step = #CWOutboundWeightCaptureForQuarantine;
                            }
                        }
                        else
                        {
                            PmfQtyDataCarrier onhand = this.getCurrentPhysicalOnHand(pass.lookup(#ItemId));

                            if (pass.lookupNum(#Qty) == onhand.parmCwQty()
                                && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict)
                            {
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, onhand.parmInventQty());
                            }
                            else if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight)
                                || (pass.lookupNum(#Qty) < onhand.parmCwQty()
                                    && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict))
                            {
                                complete = false;
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);

                                if (WHSInventTable::movementWeightCapturingMethod(pass.lookup(#ItemId)) == WHSMovementWeightCapturingMethod::PerCatchWeightUnit)
                                {
                                    ret = this.buildWeightCapture(conNull());
                                    step = #CWOutboundWeightCaptureForQuarantine;
                                }
                            }
                        }
                    }

                    boolean useFullLPMovement = this.shouldUseFullLPMovement();

                    if (complete || useFullLPMovement)
                    {
                        if (pass.exists(#Initiation))
                        {
                            pass.remove(#Initiation);

                            if (!useFullLPMovement)
                            {
                                break;
                            }
                        }

                        if (pass.exists(#LicensePlateId))
                        {
                            inventDim = pass.createInventDimFromPass();

                            fullLP = workExecute.validateMovementLPQty(inventDim,
                                                                            pass.lookupStr(#ItemId),
                                                                            pass.lookupNum(#Qty),
                                                                            pass.lookupStr(#UOM));

                            this.processLicensePlate(fullLP);
                        }

                        inventDim = pass.createInventDimFromPass();
                        if (pass.exists(#ItemId) && !useFullLPMovement)
                        {
                            // Inventory movement should not change tracking dimensions.
                            InventDimParm inventDimParm;
                            inventDimParm.setAllTrackingDimensions();
                            inventDimParm = InventDimParm::orParms(
                                                inventDimParm,
                                                WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(pass.lookup(#ItemId))));
                            inventDim.clearNotSelectedDim(inventDimParm);
                        }

                        inventDim = InventDim::findOrCreate(inventDim);

                        tmpMovementWork.InventDimId         = inventDim.InventDimId;

                        if (!useFullLPMovement)
                        {
                            tmpMovementWork.ItemId              = pass.lookupStr(#ItemId);
                            tmpMovementWork.Qty                 = pass.lookupNum(#Qty);
                            tmpMovementWork.UnitID              = pass.lookupStr(#UOM);
                        }

                        ttsbegin;

                        menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
                            
                        boolean changingStatuses = !useFullLPMovement && this.isInventoryStatusBeingChanged();
                        boolean isCWItem = PdsGlobal::pdsIsCWItem(tmpMovementWork.ItemId);

                        if (isCWItem && changingStatuses)
                        {
                            WHSInventTable::ensureInventoryStatusChangedAllowedForItem(tmpMovementWork.ItemId, true);
                        }
                             
                        if (menuItemTable.ScheduleMovement 
							&& changingStatuses)
                        {
                            quarantineInventDim                 = InventDim::find(inventDim.InventDimId);
                            quarantineInventDim.InventStatusId  = pass.lookup(#InventoryStatus);
                            quarantineInventDim.LicensePlateId  = pass.lookupStr(#LicensePlateId);
                            quarantineInventDim.wmsLocationId   = pass.lookupStr(#WMSLocationId);
                            quarantineInventDim.inventBatchId   = pass.lookupStr(#BatchId);
                            quarantineInventDim.inventSerialId  = pass.lookupStr(#SerialId);
                            quarantineInventDim                 = InventDim::findOrCreate(quarantineInventDim);

                            if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList) && WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                            {
                                workExecute.parmScannedCatchWeightTags(str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList)));
                            }
                                
                            workExecute.createOrUpdateQuarantineWork(pass.lookup(#UserId),
                                                                quarantineInventDim,
                                                                pass.lookupStr(#FromInventoryStatus),
                                                                pass.lookup(#ItemId),
                                                                pass.lookupNum(#Qty),
                                                                pass.lookup(#UOM),
                                                                true,
                                                                false,
                                                                '',
                                                                pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight));
                        }

                        workCreate = WHSWorkCreate::construct(tmpMovementWork);
                        if (pass.exists(#InventoryStatus))
                        {
                            workCreate.parmInventStatusId(pass.lookup(#InventoryStatus));
                        }
                        workCreate.parmCreatedBy(userId);
                        workCreate.parmStartLocationId(pass.lookup(#WMSLocationId));
                        workCreate.parmWorkTemplateCode(menuItemTable.WorkTemplateCode);
                        workCreate.parmLocDirHintCode(menuItemTable.LocDirHintCode);
                        workCreate.parmTargetLicensePlateId(pass.lookupStr(#LicensePlateId));

                        if (!menuItemTable.ScheduleMovement
                        &&  changingStatuses)
                        {
                            workCreate.parmFromInventStatusId(pass.lookupStr(#FromInventoryStatus));
                        }

                        //if we are moving the full lp then we want that lp to be moved so we include the lp on the workInventTrans which will lead to a reservation that includes the lp
                        workCreate.parmCreateWorkInventTransWithTargetLP(fullLP);

                        using (var activityContext = this.instrumentationLogger().workExecuteMovementByTemplate().createWork())
                        {
                            workBuildId = workCreate.createWork();
                        }

                        ttscommit;

                        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ScheduleMovement == NoYes::No)
                        {
                            workLine = WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId);

                            if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                            {
                                throw error("@WAX1459");
                            }

                            workTable = workLine.whsWorkTable();

                            if (pass.lookup(#InventLocationId) != workTable.InventLocationId)
                            {
                                throw(error("@WAX1207"));
                            }
                            pass.insert(#WorkId, workLine.WorkId);
                            pass.parmLineNum(workLine.LineNum);
                            pass.insert(#TargetLicensePlateId, workTable.TargetLicensePlateId);
                            pass.insert(#DetermineStep, 1);
                            con = this.updateModeStepPass(con, mode, step, pass);
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, WHSWorkExecuteMode::MovementByTemplate, step, userId, newLocationId, _buttonClicked, false);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(tmpPass);

                            if (step == #Restart)
                            {
                                step = 0;
                            }
                            else if (step == #StepOne)
                            {
                                step = #StepMax;
                                pass.insert(#DetermineStep, 1);
                            }

                            if (recall)
                            {
                                pass.insert(#Recall, 1);
                                con = this.updateModeStepPass(con, WHSWorkExecuteMode::MovementByTemplate, step, pass);
                                con = conPoke(con, 1, [WHSWorkExecuteMode::MovementByTemplate, step]);
                                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                                pass = new WHSRFPassthrough(Types::String, Types::String);
                                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                                if (pass.exists(#WorkId) && pass.exists(#LineNum))
                                {
                                    workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                }
                            }
                        }
                        else
                        {
                            pass = this.resetPassthrough(con, false);
                            pass.insert(#WorkComplete, 1);

                            workScheduleMovementProvider.scheduleMovementFromPass(pass, userId);
                            workScheduleMovementProvider.updatePassData(pass);

                            step = workScheduleMovementProvider.getNextStep();
                            mode = workScheduleMovementProvider.getNextMode();

                            con = this.updateModeStepPass(con, mode, step, pass);

                            con = conPoke(con, 2, pass.pack());

                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));                             
                        }                    
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            // Must be a separate step from the normal outbound weight capture step as that is still executed when processing work in the default case
            case #CWOutboundWeightCaptureForQuarantine:
                ret = this.processWeightCapture(hasError, con);
                break;

            case #LocOrLPCheck:
                ret = this.processLocOrLPCheck(con, _buttonClicked);
                break;

            default:
                if (pass.exists(#WorkId))
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine)
                    {
                        if (pass.lookup(#InventLocationId) != workLine.whsWorkTable().InventLocationId)
                        {
                            throw(error("@WAX1207"));
                        }
                        con = conPoke(con, 2, pass.pack());
                        workTable = workLine.whsWorkTable();
                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, WHSWorkExecuteMode::MovementByTemplate, step, userId, newLocationId, _buttonClicked, false);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);

                        if (this.isInventoryStatusBeingChanged())
                        {
                            addSplitButton = false;
                        }

                        if (step == #Restart)
                        {
                            step = 0;
                            addButtons = false;
                        }
                        else if (step == #StepOne)
                        {
                            step = #StepMax;
                            pass.insert(#DetermineStep, 1);
                        }

                        if (recall)
                        {
                            pass.insert(#Recall, 1);
                            con = this.updateModeStepPass(con, WHSWorkExecuteMode::MovementByTemplate, step, pass);
                            con = conPoke(con, 1, [WHSWorkExecuteMode::MovementByTemplate, step]);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            if (pass.exists(#WorkId) && pass.exists(#LineNum))
                            {
                                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                            }
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }

        if (addButtons)
        {
            ret = this.addButtons(ret);
        }

        if (addCancel)
        {
            ret = this.addCancelButton(ret);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseFullLPMovement</Name>
				<Source><![CDATA[
    private boolean shouldUseFullLPMovement()
    {
        WHSFullLPMovementPolicy fullLPMovePolicy = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).FullLPMovementPolicy;

        return pass.exists(#LicensePlateId)
                && WHSFullLPMovementByTemplateFlight::instance().isEnabled()
                && (fullLPMovePolicy == WHSFullLPMovementPolicy::AutoMoveFullLP)
                    || (fullLPMovePolicy == WHSFullLPMovementPolicy::AutoMoveFullLPForSingleItem && !WHSLicensePlate::isLPMultiDimension(pass.lookupStr(#LicensePlateId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLicensePlate</Name>
				<Source><![CDATA[
    protected void processLicensePlate(boolean _fullLicensePlate)
    {
        if (!_fullLicensePlate)
        {
            pass.insert(#OrigLP, pass.lookup(#LicensePlateId));
            pass.insert(#SplittingLP, '1');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheck</Name>
				<Source><![CDATA[
    private container processLocOrLPCheck(container _con, str _buttonClicked)
    {
        step = 1;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        container ret = conNull();
        
        pass = this.resetPassthrough(ret, false);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        pass.insert(#Initiation, '1');

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.buildMovementFrom(ret, locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickHeaderLabel</Name>
				<Source><![CDATA[
    public str getPickHeaderLabel(str _movementStr)
    {
        str pickHeaderLabel;

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ScheduleMovement == NoYes::Yes)
        {
            pickHeaderLabel = super("@SYS4001475");
        }
        else
        {
            pickHeaderLabel = super(_movementStr);
        }

        return pickHeaderLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkScheduleMovementProvider</Name>
				<Source><![CDATA[
    public WHSWorkScheduleMovementProvider parmWorkScheduleMovementProvider(WHSWorkScheduleMovementProvider _workScheduleMovementProvider = workScheduleMovementProvider)
    {
        workScheduleMovementProvider = _workScheduleMovementProvider;

        return workScheduleMovementProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use WhsWorkExecuteDisplay::construct() instead.', false, 31\05\2017)]
    static WHSWorkExecuteDisplayMovementByTemplate construct()
    {
        WHSWorkExecuteDisplayMovementByTemplate   workExecuteDisplayMovementByTemplate;

        workExecuteDisplayMovementByTemplate = new WHSWorkExecuteDisplayMovementByTemplate();
        workExecuteDisplayMovementByTemplate.parmWorkScheduleMovementProvider(WHSWorkScheduleMovementProvider::construct());

        return workExecuteDisplayMovementByTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWeightCapture</Name>
				<Source><![CDATA[
    private container buildWeightCapture(container _con)
    {
        container ret = _con;
        WMSLocation location;

        if (pass.lookupStr(#WMSLocationId) && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(pass.lookupStr(#WMSLocationId), pass.lookup(#InventLocationId));
        }

        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, pass.lookupNum(#Qty));
        }

        if (WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
        {
            // Capturing tags
            ret += [this.buildControl(#RFLabel,
                                    WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                    strFmt("@WAX:CatchWeightTagCountOfWhole", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                    1,
                                    '',
                                    #WHSRFUndefinedDataType,
                                    '',
                                    0)];

            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", pass.lookupStr(#ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildProductDimensionsText(ret, pass.lookupStr(#ItemId), true, false);

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, "@WAX:MobileDeviceLabelCatchWeightTag", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag), extendedTypeNum(WHSCatchWeightTagNumber), '', 0)];
        }
        else
        {
            // Capturing weight per catch weight unit
            ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, strFmt("@SYS333411", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            ret = this.buildProductDimensionsText(ret, pass.lookupStr(#ItemId), true, false);

            ret = this.buildTrackingDimensionsText(ret, pass.lookupStr(#ItemId), location, true, true, false, true);

            ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", 1, WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId))), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight), extendedTypeNum(Weight), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWeightCapture</Name>
				<Source><![CDATA[
    private container processWeightCapture(boolean _hasError, container _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                {
                    // Update old catch weight tag with new info
                    WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag));

                    if (!catchWeightTag)
                    {
                        throw error("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
                    }
                    else if (this.isCatchWeightTagScanned(catchWeightTag.RecId))
                    {
                        throw error(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", catchWeightTag.TagNumber));
                    }

                    this.trackScannedCatchWeightTags(catchWeightTag.RecId);

                    // Remove current Tag Id and increment Tag Counter
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total catch weight value
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, catchWeightTag.CapturedWeight);
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight) + catchWeightTag.CapturedWeight));
                    }
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total outbound weight for picking quantity
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight));
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight)));
                    }

                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight);
                }

                // Check to see if weight has been captured for total quantity
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

                    step = 1;
                    ret = [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    ret = this.buildWeightCapture(conNull());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCWWeightControl</Name>
				<Source><![CDATA[
    private container buildCWWeightControl(container _ret, ItemId _itemId)
    {
        container ret = _ret;

        if (_itemId
            && !pass.exists(#Initiation)
            && pass.hasValue(#Qty)
            && this.isInventoryStatusBeingChanged()
            && WHSCatchWeightConfigurationKeyManager::instance().isEnabled()
            && PdsGlobal::pdsIsCWItem(_itemId)
            && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ScheduleMovement == NoYes::Yes
            && WHSInventTable::movementWeightCapturingMethod(_itemId) == WHSMovementWeightCapturingMethod::PerPickingQty)
        {
            PmfQtyDataCarrier onhand;
            if (WHSInventTable::outboundWeightVarianceMethod(_itemId) == WHSOutboundWeightVarianceMethod::Restrict)
            {
                onhand = this.getCurrentPhysicalOnHand(_itemId);
            }

            if (onhand == null || pass.lookupNum(#Qty) < onhand.parmCwQty())
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, "@WAX:Weight", 1, '', extendedTypeNum(Weight), '', 0, true)];
            }
            else
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, onhand.parmInventQty());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPhysicalOnHand</Name>
				<Source><![CDATA[
    private PmfQtyDataCarrier getCurrentPhysicalOnHand(ItemId _itemId)
    {
        InventDim fromInventDim = pass.createInventDimFromPass();
        fromInventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
        fromInventDim = InventDim::findOrCreate(fromInventDim);

        return whsInventOnHand::getWorkPhysicalQuantityByInventDim(_itemId, fromInventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>