<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadItemReceivingPurchLineProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadItemReceivingPurchLineProvider</c> class is responsible
/// for analyzing load item receiving parameters
/// and suggesting, when possible, the purchase line that should be received next.
/// </summary>
[InventTransTypeFactory(InventTransType::Purch)]
public class WHSLoadItemReceivingPurchLineProvider extends WHSLoadItemReceivingOrderLineProvider
{
    [SysObsolete('Deprecated field. Please use the WHSLoadItemReceivingOrderLineProvider.multipleOrdersExist field instead.', false, 22\02\2023)]
    protected boolean     multiplePurchaseOrdersExist;
    [SysObsolete('Deprecated field. Please use the WHSLoadItemReceivingOrderLineProvider.suggestedOrderLine field instead.',  false, 22\02\2023)]
    protected PurchLine   suggestedPurchLine;
    [SysObsolete('Deprecated field. Please use the WHSLoadItemReceivingOrderLineProvider.itemFoundInLoad field instead.',     false, 22\02\2023)]
    protected boolean     itemExistsOnLoad;

    private InventTransId lastDeferredQtyInventTransId;
    private InventQty lastDeferredQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrderLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSReceiptOrderLine findOrderLine(
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _orderId,
        TradeLineNumber _lineNum)
    {
        PurchLine           currentPurchLine, purchLineNotFullyReceived, purchLineWithPossibleOverdelivery;
        WHSLoadLine         loadLine;
        InventDim           inventDimPurchLine;
        InventDimParm       productInventDimParm = _productInventDim.toDimParm();
        InventDimParm       productInventDimParmAllowBlank;
        
        productInventDimParmAllowBlank.setAllTrackingDimensions();

        while select currentPurchLine
            where (!_orderId || currentPurchLine.PurchId == _orderId)
                && (!_lineNum || currentPurchLine.LineNumber == _lineNum)
                && currentPurchLine.ItemId == _itemId
            exists join loadLine
                where loadLine.InventTransId == currentPurchLine.InventTransId
                    && loadLine.InventTransType == InventTransType::Purch
                    && loadLine.ItemId == _itemId
                    && loadLine.LoadId == _loadId
            #InventDimExistsJoinAllowBlank(currentPurchLine.InventDimId, inventDimPurchLine, _productInventDim, productInventDimParm, productInventDimParmAllowBlank)
        {
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(currentPurchLine.DataAreaId, currentPurchLine.InventTransId));

            if (!this.checkLinesBlockedByOverdelivery(_loadId, currentPurchLine.InventTransId))
            {
                continue;
            }

            inventTransIdSum.calcSum();
            this.addDeferredQtyToInventTransIdSum(currentPurchLine.InventTransId, inventTransIdSum);

            if (inventTransIdSum.ordered() > 0)
            {
                // we want to suggest lines that still have open quantity prior to ones where overdelivery is possible
                purchLineNotFullyReceived = currentPurchLine;
                break;
            }
            else if (!purchLineWithPossibleOverdelivery && this.isOverDeliveryPossible(currentPurchLine, inventTransIdSum))
            {
                purchLineWithPossibleOverdelivery.data(currentPurchLine);
            }
        }

        return purchLineNotFullyReceived.RecId ? purchLineNotFullyReceived : purchLineWithPossibleOverdelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected InventTransType inventTransType()
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object based on the specified parameters.
    /// </summary>
    /// <param name="_loadId">
    /// The ID of the load that is being received.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that is being received.
    /// </param>
    /// <param name="_productInventDim">
    /// The product dimension values of the item that is being received.
    /// </param>
    /// <param name="_purchId">
    /// The number of the purchase order that is being received.
    /// </param>
    /// <param name="_purchLineNumber">
    /// The number of the purchase line that is being received.
    /// </param>
    protected void initialize(
        WHSLoadId       _loadId,
        ItemId          _itemId,
        InventDim       _productInventDim,
        Num             _purchId = '',
        TradeLineNumber _purchLineNumber = 0)
    {
        super(_loadId, _itemId, _productInventDim, _purchId, _purchLineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptPossible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is possible to perform load item receipt with the specified parameters.
    /// </summary>
    /// <returns>
    /// true if it is possible to perform the receipt; otherwise, false.
    /// </returns>
    public boolean isReceiptPossible()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemExistsOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified item exists on the specified load.
    /// </summary>
    /// <returns>
    /// true if the specified item exists on the specified load.
    /// </returns>
    public boolean itemExistsOnLoad()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiplePurchaseOrdersCanBeReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether load lines that fit the load item receiving criteria
    /// and can be received refer to more than one purchase order.
    /// </summary>
    /// <returns>
    /// true if more than one purchase order can be received; otherwise, false.
    /// </returns>
    public boolean multiplePurchaseOrdersCanBeReceived()
    {
        return this.multipleOrdersCanBeReceived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>singlePurchaseOrderCanBeReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether load lines that fit the load item receiving criteria
    /// and can be received refer to a single purchase order.
    /// </summary>
    /// <returns>
    /// true, if the load lines refer to a single purchase order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If there are no load lines that can be received then the method returns false.
    /// If the load lines that can be received refer to more than one purchase order then the method returns false.
    /// </remarks>
    public boolean singlePurchaseOrderCanBeReceived()
    {
        return this.singleOrderCanBeReceived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The purchase line that is suggested for receiving
    /// based on the specified load item receiving parameters.
    /// </summary>
    /// <returns>
    /// The suggested purchase line.
    /// </returns>
    /// <remarks>
    /// Returns null if there are no load lines that can be received.
    /// </remarks>
    public PurchLine suggestedPurchLine()
    {
        return this.suggestedOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestedOrderLine</Name>
				<Source><![CDATA[
    public WHSReceiptOrderLine suggestedOrderLine()
    {
        var ret = super();
        if (!ret)
        {
            // Make sure the map is always correctly resolved
            PurchLine purchLine;
            ret = purchLine;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLoadItemReceivingPurchLineProvider</c> class based on the specified parameters.
    /// </summary>
    /// <param name="_loadId">
    /// The ID of the load that is being received.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that is being received.
    /// </param>
    /// <param name="_productInventDim">
    /// The product dimension values of the item that is being received.
    /// </param>
    /// <param name="_purchId">
    /// The number of the purchase order that is being received.
    /// </param>
    /// <param name="_purchLineNumber">
    /// The number of the purchase line that is being received.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLoadItemReceivingPurchLineProvider</c> class.
    /// </returns>
    public static WHSLoadItemReceivingPurchLineProvider newFromParameters(
        WHSLoadId           _loadId,
        ItemId              _itemId,
        InventDim           _productInventDim,
        PurchId             _purchId = '',
        TradeLineNumber     _purchLineNumber = 0)
    {
        WHSLoadItemReceivingPurchLineProvider result = new WHSLoadItemReceivingPurchLineProvider();

        result.allowLoadOverreceipt = true;
        result.initialize(_loadId, _itemId, _productInventDim, _purchId, _purchLineNumber);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParametersNoLoadOverreceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLoadItemReceivingPurchLineProvider</c> class based on the specified parameters that does not allow load overdelivery.
    /// </summary>
    /// <param name="_loadId">
    /// The ID of the load that is being received.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that is being received.
    /// </param>
    /// <param name="_productInventDim">
    /// The product dimension values of the item that is being received.
    /// </param>
    /// <param name="_purchId">
    /// The number of the purchase order that is being received.
    /// </param>
    /// <param name="_purchLineNumber">
    /// The number of the purchase line that is being received.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLoadItemReceivingPurchLineProvider</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSLoadItemReceivingPurchLineProvider newFromParametersNoLoadOverreceipt(
        WHSLoadId           _loadId,
        ItemId              _itemId,
        InventDim           _productInventDim,
        PurchId             _purchId = '',
        TradeLineNumber     _purchLineNumber = 0)
    {
        WHSLoadItemReceivingPurchLineProvider result = new WHSLoadItemReceivingPurchLineProvider();

        result.allowLoadOverreceipt = false;
        result.initialize(_loadId, _itemId, _productInventDim, _purchId, _purchLineNumber);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeferredQtyToInventTransIdSum</Name>
				<Source><![CDATA[
    private void addDeferredQtyToInventTransIdSum(
        InventTransId _transId,
        InventTransIdSum _inventTransIdSum)
    {
        if (lastDeferredQtyInventTransId != _transId)
        {
            lastDeferredQtyInventTransId = _transId;
            lastDeferredQty = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(_transId);
            _inventTransIdSum.update(StatusReceipt::Ordered, StatusIssue::None, -lastDeferredQty);
            _inventTransIdSum.update(StatusReceipt::Registered, StatusIssue::None, lastDeferredQty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>