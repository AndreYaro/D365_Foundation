<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandChangeEvent_WHS</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandChangeEvent_WHS
{
    private str inventDimId;
    private str parentInventDimId;
    private str organizationId;
    private str productId;
    private str id;
    private InventOnHandChangeEventDimensionSet_WHS dimensions;
    private InventOnHandChangeEventQuantities_WHS quantities;
    private int hierarchyLevel;

    private List reserveOffset;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        dimensions = new InventOnHandChangeEventDimensionSet_WHS();
        quantities = new InventOnHandChangeEventQuantities_WHS();
        reserveOffset = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [DataMember('inventDimId')]
    public str parmInventDimId(str _inventDimIdStr = inventDimId)
    {
        inventDimId = _inventDimIdStr;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentInventDimId</Name>
				<Source><![CDATA[
    [DataMember('parentInventDimId')]
    public str parmParentInventDimId(str _inventDimIdStr = parentInventDimId)
    {
        parentInventDimId = _inventDimIdStr;
        return parentInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantities</Name>
				<Source><![CDATA[
    [DataMember('quantities')]
    public InventOnHandChangeEventQuantities_WHS parmQuantities(InventOnHandChangeEventQuantities_WHS _quantities = quantities)
    {
        quantities = _quantities;
        return quantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionSet</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public InventOnHandChangeEventDimensionSet_WHS parmDimensionSet(InventOnHandChangeEventDimensionSet_WHS _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReserveOffset</Name>
				<Source><![CDATA[
    [DataMember('onHandOffsetEvents')]
    public List parmReserveOffset(List _reserveOffset = reserveOffset)
    {
        reserveOffset = _reserveOffset;
        return reserveOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHierarchyLevel</Name>
				<Source><![CDATA[
    [DataMember('hierarchyLevel')]
    public int parmHierarchyLevel(int _hierarchyLevel = hierarchyLevel)
    {
        hierarchyLevel = _hierarchyLevel;
        return hierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildZeroQtyEvent</Name>
				<Source><![CDATA[
    public static InventOnHandChangeEvent_WHS buildZeroQtyEvent(InventInventoryDataServiceWHSQueueTemp whsInventReserveQueueTemp)
    {
        var changeEvent = new InventOnHandChangeEvent_WHS();
        var _inventDim = InventDim::findInLegalEntity(whsInventReserveQueueTemp.InventDimId, whsInventReserveQueueTemp.Company);
        if (_inventDim)
        {
            var zeroQuantities = new InventOnHandChangeEventQuantities_WHS();
            zeroQuantities.parmFnoModifiers(InventOnHandChangeEventModifiers_WHS::buildZeroQtyModifiers());
            changeEvent.parmQuantities(zeroQuantities);
            changeEvent.parmId(int642str(whsInventReserveQueueTemp.RecId));
            changeEvent.parmOrganizationId(whsInventReserveQueueTemp.Company);
            changeEvent.parmDimensionSet(InventOnHandChangeEventDimensionSet_WHS::BuildDimensionSetFromInventDim(_inventDim));
            changeEvent.parmProductId(whsInventReserveQueueTemp.ItemId);
            changeEvent.parmInventDimId(whsInventReserveQueueTemp.InventDimId);

            // Pass HierarchyLevel with -1, IV will handle it to get correct HierarchyLevel and ParentInventDimId.
            changeEvent.parmParentInventDimId(whsInventReserveQueueTemp.InventDimId);
            changeEvent.parmHierarchyLevel(-1);
        }

        return changeEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>