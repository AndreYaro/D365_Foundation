<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeVisitorSumPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Visitor responsible for calculating sub results for components.
/// </summary>
class PCRuntimeVisitorSumPrice extends PCRuntimeVisitor
{
    PCRuntimePriceModel runtimePriceModel;
    PCRuntimeComponent  currentRuntimeComponent;
    StackBase           stack;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        stack = new StackBase(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimePriceModel</Name>
				<Source><![CDATA[
        public PCRuntimePriceModel parmRuntimePriceModel(PCRuntimePriceModel _runtimePriceModel = runtimePriceModel)
    {
        runtimePriceModel = _runtimePriceModel;

        return runtimePriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnd</Name>
				<Source><![CDATA[
        public void visitEnd(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitEndComponent(_runtimeElement as PCRuntimeComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEndComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends visiting a runtime component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component instance.
    /// </param>
    protected void visitEndComponent(PCRuntimeComponent _runtimeComponent)
    {
        PCRuntimePriceModelNode runtimePriceModelNodeParent;
        PCRuntimePriceModelNode runtimePriceModelNode;
        real                    value;

        stack.pop();
        // not root
        if (stack.count() != 0)
        {
            currentRuntimeComponent     = stack.peek(stack.count());
            runtimePriceModelNodeParent = runtimePriceModel.getPriceModelNodeFromRuntime(currentRuntimeComponent);
            runtimePriceModelNode       = runtimePriceModel.getPriceModelNodeFromRuntime(_runtimeComponent);
            value =     runtimePriceModelNodeParent.parmValue();
            value +=    runtimePriceModelNode.parmValue();
            runtimePriceModelNodeParent.parmValue(value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStart</Name>
				<Source><![CDATA[
        public void visitStart(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitStartComponent(_runtimeElement as PCRuntimeComponent);
        }
        else if (_runtimeElement is PCRuntimePriceElement)
        {
            this.visitStartPriceElement(_runtimeElement as PCRuntimePriceElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component instance.
    /// </param>
    protected void visitStartComponent(PCRuntimeComponent _runtimeComponent)
    {
        currentRuntimeComponent = _runtimeComponent;
        runtimePriceModel.getPriceModelNodeFromRuntime(_runtimeComponent).parmValue(0);
        stack.push(currentRuntimeComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime price element.
    /// </summary>
    /// <param name="_runtimePriceElement">
    /// A runtime price element instance.
    /// </param>
    protected void visitStartPriceElement(PCRuntimePriceElement _runtimePriceElement)
    {
        PCRuntimePriceModelNode runtimePriceModelNodePriceElement = runtimePriceModel.getPriceModelNodeFromRuntime(_runtimePriceElement);
        PCRuntimePriceModelNode runtimePriceModelNodeComponent;
        real                    value;

        if (runtimePriceModelNodePriceElement.parmIsCalculated())
        {
            runtimePriceModelNodeComponent = runtimePriceModel.getPriceModelNodeFromRuntime(currentRuntimeComponent);
            value =     runtimePriceModelNodeComponent.parmValue();
            value +=    runtimePriceModelNodePriceElement.parmValue();
            runtimePriceModelNodeComponent.parmValue(value);
            runtimePriceModelNodeComponent.parmValueWithoutSubcomponents(value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCRuntimeVisitorSumPrice construct()
    {
        return new PCRuntimeVisitorSumPrice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>