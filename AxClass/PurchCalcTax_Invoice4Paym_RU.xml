<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PurchCalcTax_Invoice4Paym_RU extends PurchCalcTax
{
    VendInvoice4PaymJour_RU     invoice4PaymJour;
    VendInvoice4PaymTrans_RU    invoice4PaymTrans;
    PurchTable                  purchTable;
    PurchParmTable              purchParmTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice currency code.
    /// </summary>
    /// <returns><c>CurrencyCode</c> object.</returns>
    public CurrencyCode currencyCode()
    {
        return invoice4PaymJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rxchane rate.
    /// </summary>
    /// <param name = "_date">Date.</param>
    /// <returns><c>VendExchRate</c> object.</returns>
    public VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return invoice4PaymJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets secondary exchane rate.
    /// </summary>
    /// <param name = "_date">Date.</param>
    /// <returns><c>ExchrateSecondary</c> object.</returns>
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return invoice4PaymJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cursor.
    /// </summary>
    public void  initCursor()
    {
        select nofetch forupdate invoice4PaymTrans
            where invoice4PaymTrans.PurchId               == invoice4PaymJour.PurchId          &&
                  invoice4PaymTrans.Invoice4PaymId        == invoice4PaymJour.Invoice4PaymId   &&
                  invoice4PaymTrans.Invoice4PaymDate      == invoice4PaymJour.Invoice4PaymDate &&
                  invoice4PaymTrans.NumberSequenceGroupId == invoice4PaymJour.NumberSequenceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets markup amount.
    /// </summary>
    /// <param name = "_rounded">Defines if amount is rounded.</param>
    /// <param name = "deductTaxForTaxIncluded">Defines if deduction included.</param>
    /// <returns><c>MarkupAmount</c> object.</returns>
    public MarkupAmount markupAmount(boolean _rounded = true, boolean deductTaxForTaxIncluded = true)
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default dimension for markup
    /// </summary>
    /// <returns>
    /// Default dimension for markup
    /// </returns>
    public DimensionDefault markupDefaultDimension()
    {
        return purchLine           ?
               purchLine.DefaultDimension :
               invoice4PaymJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(VendInvoice4PaymJour_RU _vendInvoice4PaymJour, ParmId _parmId)
    {
        super(_vendInvoice4PaymJour);

        invoice4PaymJour = _vendInvoice4PaymJour;
        purchTable       = invoice4PaymJour.purchTable();
        purchParmTable  = PurchParmTable::findPurchId(invoice4PaymJour.PurchId, _parmId);

        update           = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public Common nextLine()
    {
        next invoice4PaymTrans;

        this.getPurchLine();
        this.initCursorMarkup(invoice4PaymTrans.TableId, invoice4PaymTrans.RecId);

        return invoice4PaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    recId  origHeadingRecID()
    {
        return purchParmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    tableId  origHeadingTableID()
    {
        return purchParmTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets markup record Id.
    /// </summary>
    /// <returns><c>RecId</c> object.</returns>
    public RecId purchMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table Id.
    /// </summary>
    /// <returns><c>tableId</c> object.</returns>
    public tableId purchMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tax amount.
    /// </summary>
    /// <param name = "_taxWriteCode"><c>TaxWriteCode</c> object.</param>
    /// <param name = "_amountCur">Transaction amount.</param>
    public void setTax(TaxWriteCode _taxWriteCode,
                       AmountCur    _amountCur)
    {
        invoice4PaymTrans.TaxAmount = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount.
    /// </summary>
    /// <param name = "_rounded">Defines if amount is rounded.</param>
    /// <returns><c>AmountCur</c> object.</returns>
    public AmountCur transLineAmount(boolean _rounded = true)
    {
        return invoice4PaymTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line gross amount.
    /// </summary>
    /// <returns><c>AmountCur</c> object.</returns>
    public AmountCur transLineAmountInclTax()
    {
        return invoice4PaymTrans.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity
    /// </summary>
    /// <returns><c>PurchQty</c> object.</returns>
    public PurchQty transQty()
    {
        return invoice4PaymTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invent transaction Id.
    /// </summary>
    /// <returns><c>InventTransId</c> object.</returns>
    public InventTransId transTransId()
    {
        return invoice4PaymTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets triangulation.
    /// </summary>
    /// <param name = "_date">Date.</param>
    /// <returns><c>EUROTriangulation</c> object.</returns>
    public EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return invoice4PaymJour.Triangulation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>