<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithhold_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of <c>TaxWithhold</c>.
/// </summary>
[ExtensionOf(classStr(TaxWithhold))]
final class TaxWithhold_AppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer of <c>LedgerVoucherTransObject</c>.
    /// </summary>
    /// <param name = "_taxWithholdTrans">
    /// The buffer of <c>TaxWithholdTrans</c>.
    /// </param>
    /// <param name = "_ledgerVoucherObject">
    /// The buffer of <c>LedgerVoucherObject</c>.
    /// </param>
    /// <param name = "_ledgerDimensionMerged">
    /// The buffer of Ledger dimension account of <c>LedgerDimensionAccount</c>.
    /// </param>
    /// <param name = "_currencyExchangeHelper">
    /// The buffer of <c>CurrencyExchangeHelper</c>.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name = "_vendVoucherTaxWithhold">
    ///  The buffer of <c>VendVoucherTaxWithhold</c>.
    /// </param>
    /// <param name = "_taxWithholdTransLedgerVoucher">
    /// The buffer of <c>LedgerVoucher</c>.
    /// </param>
    /// <param name = "_invoiceVendTrans">
    /// The vend invoice trans.
    /// </param>
    /// <returns>
    /// Return the buffer of ledger voucher transaction.
    /// </returns>
    public static LedgerVoucherTransObject initLedgerVoucherTransObject(
        TaxWithholdTrans         _taxWithholdTrans,
        LedgerVoucherObject      _ledgerVoucherObject,
        LedgerDimensionAccount   _ledgerDimensionMerged,
        CurrencyExchangeHelper   _currencyExchangeHelper,
        LedgerJournalTrans       _ledgerJournalTrans,
        VendVoucherTaxWithhold   _vendVoucherTaxWithhold,
        LedgerVoucher            _taxWithholdTransLedgerVoucher,
        VendTrans                _invoiceVendTrans)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;
        ledgerVoucherTransObject = next initLedgerVoucherTransObject(_taxWithholdTrans,
                                                                     _ledgerVoucherObject,
                                                                     _ledgerDimensionMerged,
                                                                     _currencyExchangeHelper,
                                                                     _ledgerJournalTrans,
                                                                     _vendVoucherTaxWithhold,
                                                                     _taxWithholdTransLedgerVoucher,
                                                                     _invoiceVendTrans);

        if (BrazilParameters::isEnabled())
        {
            // <GBR>
            ledgerVoucherTransObject.parmPaymentReference(_ledgerJournalTrans.PaymReference);
            ledgerVoucherTransObject.parmPaymMode(_ledgerJournalTrans.PaymMode);
            // </GBR>
        }
        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Txt for <c>LedgerVoucherTransObject</c>.
    /// </summary>
    /// <param name = "_taxWithholdTrans">
    /// The buffer of <c>TaxWithholdTrans</c>.
    /// </param>
    /// <param name = "_ledgerVoucherTransObject">
    /// The buffer of <c>LedgerVoucherTransObject</c>.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name = "_vendVoucherTaxWithhold">
    ///  The buffer of <c>VendVoucherTaxWithhold</c>.
    /// </param>
    /// <param name = "_taxWithholdTransLedgerVoucher">
    /// The buffer of <c>LedgerVoucher</c>.
    /// </param>
    /// <param name = "_invoiceVendTrans">
    /// The vend invoice trans.
    /// </param>
    public static void setTransTxt(
        TaxWithholdTrans         _taxWithholdTrans,
        LedgerVoucherTransObject _ledgerVoucherTransObject,
        LedgerJournalTrans       _ledgerJournalTrans,
        VendVoucherTaxWithhold   _vendVoucherTaxWithhold,
        LedgerVoucher            _taxWithholdTransLedgerVoucher,
        VendTrans                _invoiceVendTrans)
    {
        next setTransTxt(_taxWithholdTrans, _ledgerVoucherTransObject, _ledgerJournalTrans, _vendVoucherTaxWithhold, _taxWithholdTransLedgerVoucher, _invoiceVendTrans);

        if (BrazilParameters::isEnabled())
        {
            // <GBR>
            _ledgerVoucherTransObject.parmTransTxt(_vendVoucherTaxWithhold.getTransactionTxt_BR(_ledgerJournalTrans.accountDisplay(), _taxWithholdTrans.TaxWithholdCode, _invoiceVendTrans.Invoice, _taxWithholdTransLedgerVoucher));
            // </GBR>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendVoucherTaxWithhold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parm for <c>VendVoucherTaxWithhold</c>.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The buffer of <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name = "_vendVoucherTaxWithhold">
    /// The buffer of <c>VendVoucherTaxWithhold</c>.
    /// </param>
    /// <param name = "_taxWithholdTransLedgerVoucher">
    /// The buffer of <c>LedgerVoucher</c>.
    /// </param>
    /// <param name = "_vendTrans">
    /// The buffer of <c>VendTrans</c>.
    /// </param>
    /// <param name = "_invoiceVendTrans">
    /// The vend invoice trans.
    /// </param>
    /// <param name = "_taxWithholdTrans">
    /// The buffer of <c>TaxWithholdTrans</c>.
    /// </param>
    public static void initVendVoucherTaxWithhold(
        LedgerJournalTrans       _ledgerJournalTrans,
        VendVoucherTaxWithhold   _vendVoucherTaxWithhold,
        LedgerVoucher            _taxWithholdTransLedgerVoucher,
        VendTrans                _vendTrans,
        VendTrans                _invoiceVendTrans,
        TaxWithholdTrans         _taxWithholdTrans)
    {
        // <GBR>
        if (!BrazilParameters::isEnabled())
        {
            _vendVoucherTaxWithhold.parmTransTxt(_ledgerJournalTrans.Txt);
        }
        // </GBR>

        next initVendVoucherTaxWithhold(_ledgerJournalTrans, _vendVoucherTaxWithhold, _taxWithholdTransLedgerVoucher, _vendTrans, _invoiceVendTrans, _taxWithholdTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes amountMST for <c>VendVoucherTaxWithhold</c> for Thoild.
    /// </summary>
    /// <param name = "_vendVoucherTaxWithhold">
    /// The buffer of <c>VendVoucherTaxWithhold</c>.
    /// </param>
    /// <param name = "_taxWithholdTrans">
    /// The buffer of <c>TaxWithholdTrans</c>.
    /// </param>
    public static void setAmountMST(VendVoucherTaxWithhold _vendVoucherTaxWithhold, TaxWithholdTrans _taxWithholdTrans)
    {
        boolean isTaxWithholdFeatureEnabled_TH = TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled();

        next setAmountMST(_vendVoucherTaxWithhold, _taxWithholdTrans);

        // <GTH>
        if (isTaxWithholdFeatureEnabled_TH)
        {
            _vendVoucherTaxWithhold.parmAmountMST(_taxWithholdTrans.displayAccountingCurDeductableAmount());
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceWithholdBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the withhold base amount before applying the invoice currency rounding.
    /// </summary>
    /// <param name = "_taxWithholdTrans">The buffer of <c>TaxWithholdTrans</c>.</param>
    /// <param name = "_custVendTransAmountCur">Customer or vendor transaction currency amount.</param>
    /// <param name = "_accumPayment">The accounting payment amount.</param>
    /// <param name = "_accumBaseAmountFromPreviousPayment">The accounting base amount which from previous payment amount.</param>
    /// <param name = "_useBrazilCalculation">The flag set True if we need to do the Brazil specific calculations.</param>
    /// <returns>The value of field <c>InvoiceWithholdBaseAmount</c> before the invoice currency rounding.</returns>
    protected Amount calcInvoiceWithholdBase(
        TaxWithholdTrans _taxWithholdTrans,
        AmountCur _custVendTransAmountCur,
        AmountMST _accumPayment,
        AmountMST _accumBaseAmountFromPreviousPayment,
        boolean _useBrazilCalculation)
    {
        Amount ret = next calcInvoiceWithholdBase(_taxWithholdTrans, _custVendTransAmountCur, _accumPayment, _accumBaseAmountFromPreviousPayment, _useBrazilCalculation);

        if (FeatureStateProvider::isFeatureEnabled(UniqueCertificationFeature::instance()))
        {
            TaxWithholdAmount taxReimbursmentAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                _taxWithholdTrans.TaxReimbursement_IT,
                _taxWithholdTrans.TaxWithholdCurrency,
                _taxWithholdTrans.InvoiceCurrency,
                _taxWithholdTrans.TransDate,
                false);

            ret = ret - taxReimbursmentAmount;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>