<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Globalization;

/// <summary>
///    The <c>WhsWorkExecuteForm</c> is a simple client for the mobile device features.
/// </summary>
public class WhsWorkExecuteForm
{
    #WHSWorkExecuteControlElements
    #wHSRF
    private const str ControlGroupName  = 'controlGroup';
    private const int formContentStart  = 3;
    str dateCulture;

    FormBuildGroupControl           controlGroup;
    FormRun                         workExecuteFormRun;
    str                             clickedButtonName;
    container                       formStateContainer;
    Map                             controlNameToPostfix;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information from the form, before the form closes.
    /// </summary>
    /// <remarks>
    ///    The method is called from the <c>WHSWorkExecute</c> form.
    /// </remarks>
    public void closeOk()
    {
        clickedButtonName = workExecuteFormRun.selectedControl().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comboBoxData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in a temporary table that are used to populate list- and comboboxes.
    /// </summary>
    /// <returns>
    ///    The temporary table buffer.
    /// </returns>
    protected WHSTmpWorkExecuteListBoxItems comboBoxData()
    {
        WHSTmpWorkExecuteListBoxItems   comboBoxTable;
        container                       element;
        str                             type;
        int                             i;

        ttsbegin;
        delete_from comboBoxTable;

        for (i = 1; i <= conLen(formStateContainer); i++)
        {
            element = conPeek(formStateContainer,i);
            type    = this.elementType(element);

            if (   type == #RFListbox
                || type == #RFCombobox)
            {
                comboBoxTable.Name     = this.elementName(element);
                comboBoxTable.Elements = this.elementData(element);
                comboBoxTable.Selected = this.elementSelected(element);
                comboBoxTable.insert();
            }
        }

        ttscommit;

        return comboBoxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a button form control.
    /// </summary>
    /// <param name="_btn">
    ///    The data used the create the button.
    /// </param>
    protected void createButton(container _btn)
    {
        str label = this.elementLabel(_btn);

        FormBuildCommandButtonControl buttonControl = controlGroup.addControl(FormControlType::CommandButton, this.getControlName(this.elementName(_btn)));

        buttonControl.text(label);
        buttonControl.caption(label);
        buttonControl.defaultButton(this.elementDefaultButton(_btn));
        buttonControl.command(263);
        buttonControl.widthMode(FormWidth::ColumnWidth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComboBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a combobox form control.
    /// </summary>
    /// <param name="_comboBox">
    ///    The data used the create the combobox.
    /// </param>
    protected void createComboBox(container _comboBox)
    {
        FormBuildComboBoxControl    comboBox;
        str                         name = this.getControlName(this.elementName(_comboBox));

        comboBox = controlGroup.addControl(FormControlType::ComboBox, name);

        comboBox.name(name);
        comboBox.visible(true);
        comboBox.label(this.elementLabel(_comboBox));
        comboBox.labelPosition(LabelPosition::Left);

        if (this.elementHasError(_comboBox))
        {
            comboBox.colorScheme(FormColorScheme::RGB);
            comboBox.backStyle(FormBackStyle::Auto);
            comboBox.backgroundColor(WHSWorkExecuteForm::errorBackgroundColor());
        }

        comboBox.enabled(this.elementEnabled(_comboBox));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Intstantiates a new form.
    /// </summary>
    protected void createForm()
    {
        Args    args;

        args = new Args(formStr(WHSWorkExecute));
        args.name();
        args.caller(this);

        workExecuteFormRun = classfactory.formRunClass(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all form controls.
    /// </summary>
    protected void createFormControls()
    {
        controlGroup = workExecuteFormRun.form().design().control(ControlGroupName);
        controlNameToPostfix = new Map(Types::String, Types::Integer);

        this.setFormTitle();

        for (int i = FormContentStart; i <= conLen(formStateContainer); i++)
        {
            container ctrlElement = conPeek(formStateContainer, i);
            str type = this.elementType(ctrlElement);

            switch (type)
            {
                case #RFButton:
                case #RFDetourButton:
                    this.createButton(ctrlElement);
                    break;

                case #RFLabel:
                    this.createLabel(ctrlElement);
                    break;

                case #RFText:
                    this.createTextBox(ctrlElement);
                    break;

                case #RFPassword:
                    this.createTextBox(ctrlElement, true);
                    break;

                case #RFListbox, #RFCombobox:
                    this.createComboBox(ctrlElement);
                    break;

                case #RFFastValidationIds:
                    ctrlElement = conPoke(ctrlElement, #data, '');
                    this.createTextBox(ctrlElement);
                    break;

                default:
                    error("@WAX629");
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a static text form control.
    /// </summary>
    /// <param name="_label">
    ///    The data used the create the static text.
    /// </param>
    protected void createLabel(container _label)
    {
        FormBuildStaticTextControl  staticTextControl;
        str                         label  = this.elementLabel(_label);
        str                         name   = this.elementName(_label);
        str                         controlName   = this.getControlName(name);

        staticTextControl = controlGroup.addControl(FormControlType::StaticText, label + controlName);

        staticTextControl.name(controlName);
        staticTextControl.text(label);
        staticTextControl.widthMode(FormWidth::ColumnWidth);

        int numLines = conLen(str2con(label, '\n', false));

        if (numLines > 0)
        {
            const int heightPerLine = 15;
            staticTextControl.height(heightPerLine * numLines);
        }

        // error
        if (name == "@SYS36230")
        {
            staticTextControl.colorScheme(FormColorScheme::RGB);
            staticTextControl.backStyle(FormBackStyle::Auto);
            staticTextControl.backgroundColor(WHSWorkExecuteForm::errorBackgroundColor());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTextBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a string form control.
    /// </summary>
    /// <param name="_textBox">
    ///    The data used the create the combobox.
    /// </param>
    /// <param name="_password">
    ///    A Boolean value that indicates if the string control is a password control; optional.
    /// </param>
    protected void createTextBox(
        container _textBox,
        boolean   _password = false)
    {
        FormBuildStringControl      stringControl;
        str dataType = this.elementDataType(_textBox);

        stringControl = controlGroup.addControl(FormControlType::String, this.getControlName(this.elementName(_textBox)));

        if (this.elementHasError(_textBox))
        {
            stringControl.colorScheme(FormColorScheme::RGB);
            stringControl.backgroundColor(WHSWorkExecuteForm::errorBackgroundColor());
        }

        str elementData = this.elementData(_textBox);

        stringControl.text(elementData);
        stringControl.label(this.elementLabel(_textBox));
        stringControl.passwordStyle(_password);
        stringControl.enabled(this.elementEnabled(_textBox));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the current form.
    /// </summary>
    /// <remarks>
    ///    A new form is displayed with every submission.
    /// </remarks>
    protected void displayForm()
    {
        boolean closedOk;

        do
        {
            this.createForm();
            this.createFormControls();
            this.initFormControls();
            infolog.clear();

            workExecuteFormRun.run();

            if (!workExecuteFormRun.closed())
            {
                workExecuteFormRun.wait();
            }

            closedOK = workExecuteFormRun.closedOk();
            if (closedOK)
            {
                this.setNextForm();
            }
        }
        while (closedOK);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data value from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The data value.
    /// </returns>
    protected anytype elementData(container _element)
    {
        return conPeek(_element,#data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the button should be the default button on the form
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    true if the button should be the default button; otherwise, false.
    /// </returns>
    protected boolean elementDefaultButton(container _element)
    {
        return any2enum(conPeek(_element, #defaultButton));
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to enable or disable the object.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    true if the object is enabled; otherwise, false.
    /// </returns>
    protected boolean elementEnabled(container _element)
    {
        return any2enum(conPeek(_element,#enabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementHasError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current element has an error.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    true if the element has an error; otherwise, false.
    /// </returns>
    protected boolean elementHasError(container _element)
    {
        return    _element
               && conPeek(_element,#error) == '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the label value from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The label value.
    /// </returns>
    protected anytype elementLabel(container _element)
    {
        return conPeek(_element,#label);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data type from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The element data type.
    /// </returns>
    protected anytype elementDataType(container _element)
    {
        return conPeek(_element, #type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name value from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The name value.
    /// </returns>
    protected anytype elementName(container _element)
    {
        return conPeek(_element,#name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the selected value from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The selected value.
    /// </returns>
    protected anytype elementSelected(container _element)
    {
        return conPeek(_element,#selected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the type value from an element container.
    /// </summary>
    /// <param name="_element">
    ///    The element.
    /// </param>
    /// <returns>
    ///    The type value.
    /// </returns>
    protected anytype elementType(container _element)
    {
        return conPeek(_element,#controlType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormStateValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves values from the form.
    /// </summary>
    /// <param name="_con">
    ///    A container with form state values.
    /// </param>
    /// <returns>
    ///    A map with value name and data.
    /// </returns>
    protected Map getFormStateValues(container _con)
    {
        Map mapValues = new Map(Types::String,Types::String);

        for (int i = FormContentStart; i <= conLen(_con); i++)
        {
            container ctrlElement = conPeek(_con,i);
            str type = this.elementType(ctrlElement);
            str dataType = this.elementDataType(ctrlElement);

            if (   type == #RFText
                || type == #RFPassword
                || type == #RFCombobox
                || type == #RFFastValidationIds)
            {
                str name    = this.elementName(ctrlElement);
                str value   = workExecuteFormRun.design().controlName(name).valueStr();

                mapValues.insert(name,value);
            }
        }

        return mapValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes form controls
    /// </summary>
    protected void initFormControls()
    {
        workExecuteFormRun.init();
        this.loadComboBoxItems(this.comboBoxData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadComboBoxItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads combobox items from a table buffer into the form.
    /// </summary>
    /// <param name="_comboBoxTable">
    ///    The table buffer to load data from.
    /// </param>
    protected void loadComboBoxItems(WHSTmpWorkExecuteListBoxItems _comboBoxTable)
    {
        FormBuildGroupControl formGroupControl = workExecuteFormRun.form().design().control(ControlGroupName);

        for (int i = 1; i <= formGroupControl.controlCount(); ++i)
        {
            FormBuildControl formControl = formGroupControl.controlNum(i);

            if (formControl.handle() == classNum(FormBuildComboBoxControl))
            {
                str 100 name = formControl.name();
                FormComboBoxControl comboBox = workExecuteFormRun.design().controlName(name);

                select firstonly _comboBoxTable
                    where _comboBoxTable.Name == name;

                container con = WHSParameters::str2con(_comboBoxTable.Elements, '||');

                for (int j = 1; j <= conLen(con); ++j)
                {
                    comboBox.add(conPeek(con, j));
                }

                comboBox.selectText(_comboBoxTable.Selected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class and displays the first form.
    /// </summary>
    public void run()
    {
        this.setNextFormState();
        this.displayForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormStateValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the form state container with values from the form.
    /// </summary>
    protected void setFormStateValues()
    {
        Map mapValues = this.getFormStateValues(formStateContainer);

        for (int i = FormContentStart; i <= conLen(formStateContainer); i++)
        {
            container ctrlElement = conPeek(formStateContainer, i);
            str type = this.elementType(ctrlElement);

            switch (type)
            {
                case #RFLabel:
                    break;

                case #RFText, #RFPassword, #RFCombobox, #RFFastValidationIds:
                    str name = this.elementName(ctrlElement);
                    if (mapValues.exists(name))
                    {
                        ctrlElement = conPoke(ctrlElement, #data, mapValues.lookup(name));
                        formStateContainer = conPoke(formStateContainer, i, ctrlElement);
                    }
                    break;

                case #RFButton:
                case #RFDetourButton:
                    if (this.elementName(ctrlElement) == clickedButtonName)
                    {
                        ctrlElement = conPoke(ctrlElement, #data, '1');
                        formStateContainer = conPoke(formStateContainer, i, ctrlElement);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the form title.
    /// </summary>
    protected void setFormTitle()
    {
        container ctrlElement = conPeek(formStateContainer, 1);
        WHSWorkExecuteMode workExecuteMode = conPeek(ctrlElement, 1);

        workExecuteFormRun.form().design().caption(enum2str(workExecuteMode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the next form to display.
    /// </summary>
    protected void setNextForm()
    {
        using (var instrumentationTask = WHSMobileRequestInstrumentationTask::newFromMobileDeviceClientType(WHSMobileDeviceClientType::Emulator))
        {
            this.setFormStateValues();
            this.setNextFormState();
        
            dateCulture = WHSParameters::getCurrentUserDateCulture(this.getCurrentWarehouseMobileDeviceUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextFormState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the form state for the next form.
    /// </summary>
    protected void setNextFormState()
    {
        formStateContainer = conPoke(formStateContainer, #StateInfo, [WHSWorkExecuteMode::WebRequestDefault, 0]);
        formStateContainer = WHSWorkExecuteDisplay::getNextForm(formStateContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkExecuteForm construct()
    {
        return new WHSWorkExecuteForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorBackgroundColor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the background color for RF errors.
    /// </summary>
    /// <returns>
    ///    The error background color converted to an integer value.
    /// </returns>
    protected static int errorBackgroundColor()
    {
        return WinAPI::RGB2int(255,60,60);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        int infologLine;
        try
        {
            infologLine = infologLine();
            WHSWorkExecuteForm::newStandard().run();
        }
        catch
        {
            SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infolog.cut(infologLine));

            while (sysInfologEnumerator.moveNext())
            {
                SysInfoLogStr currentInfologMessage = sysInfologEnumerator.currentMessage();
                Box::stop(currentInfologMessage);
            }

            // Back to login         
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSWorkExecuteForm</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSWorkExecuteForm</c> class.
    /// </returns>
    public static WHSWorkExecuteForm newStandard()
    {
        return WHSWorkExecuteForm::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlName</Name>
				<Source><![CDATA[
    private String50 getControlName(str _controlNameWithoutPostfix)
    {
        int controlPostFix = 0;

        //Control names need to be unique, so if we run in a scenario in which the base name has been already
        //set to a control, we need to update it to be unique.
        if (controlNameToPostfix.exists(_controlNameWithoutPostfix))
        {
            controlPostFix = controlNameToPostfix.lookup(_controlNameWithoutPostfix) + 1;
        }

        controlNameToPostfix.insert(_controlNameWithoutPostfix, controlPostFix);

        return controlPostFix ? (_controlNameWithoutPostfix + int2Str(controlPostFix)) : _controlNameWithoutPostfix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentWarehouseMobileDeviceUserId</Name>
				<Source><![CDATA[
    private WHSUserId getCurrentWarehouseMobileDeviceUserId()
    {
        // Get the formStateContainer element which holds the current warehouse mobile device user id.
        container ctrlElement = conPeek(formStateContainer, 2);

        WHSUserId currentWarehouseMobileDeviceUserId = conPeek(ctrlElement, 6);

        return currentWarehouseMobileDeviceUserId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>