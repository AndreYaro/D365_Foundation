<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommercePaymentsFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailCommercePaymentsFeature</c> represents the feature management for commerce payments.
/// </summary>
[FeatureMetadataConfigurationKey(configurationKeyStr(Retail))]
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
internal final class RetailCommercePaymentsFeature implements IFeatureMetadata, IFeatureConfirmationMetadata, IFeaturePrerequisites, IFeatureMetadataEnablementNotifiable
{
    private static RetailCommercePaymentsFeature instance;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new RetailCommercePaymentsFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailCommercePaymentsFeature</c> instance.</returns>
    [Hookable(false)]
    public static RetailCommercePaymentsFeature instance()
    {
        return RetailCommercePaymentsFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the message to be displayed for feature confirmation.
    /// </summary>
    /// <returns>The label ID of the message.</returns>
    [Hookable(false)]
    public LabelId confirmationMessage()
    {
        return strFmt("@Retail:RetailCommercePaymentsFeatureEnableMessage", "@MCR40148", "@Retail:RetailCommerceUnifiedPaymentJournalFeatureLabel", "@Retail:RetailOmniChannelPage", "@Retail:DuplicatePaymentProtectionOnInvoicingFeatureLabel", "@Retail:RefundsOverMultipleCaptureFeatureDescription", "@Retail:RetailAllowVoidingofStaleAuthorizationsFeatureLabel", "@Retail:RetailCommercePaymentsFeatureRestriction");
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RetailCommercePaymentFeatureKey");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RetailCommercePaymentFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://go.microsoft.com/fwlink/?linkid=2129837";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    public LabelId cannotEnableMessage()
    {
        RetailStoreTenderTypeTable storeTenderTypeTable;
        RetailChannelTable retailChannelTable;

        // Show warnings if the payment methods aren't configured as expected.
        while select crosscompany storeTenderTypeTable
            exists join retailChannelTable where retailChannelTable.RecId == storeTenderTypeTable.Channel
        {
            storeTenderTypeTable.validateForCommerce();
        }

        return strFmt("@Retail:RetailCommercePaymentsFeatureCannotEnable", "@Retail:RetailCommerceUnifiedPaymentJournalFeatureLabel", "@Retail:RetailOmniChannelPage", "@Retail:DuplicatePaymentProtectionOnInvoicingFeatureLabel", "@Retail:RefundsOverMultipleCaptureFeatureDescription", "@Retail:RetailAllowVoidingofStaleAuthorizationsFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    public boolean canEnable()
    {
        RetailStoreTenderTypeTable storeTenderTypeTable;
        RetailChannelTable retailChannelTable;
        boolean canEnable = true;

        // Disable showing warnings if the payment methods aren't configured as expected since canEnable is triggered during onLoad of the form.
        while select crosscompany storeTenderTypeTable
            exists join retailChannelTable where retailChannelTable.RecId == storeTenderTypeTable.Channel
        {
            canEnable = storeTenderTypeTable.validateForCommerce(false);

            // short-circuit further evaluation once a payment method with incorrect setup has been discovered.
            if (!storeTenderTypeTable.validateForCommerce(false))
            {
                canEnable = false;
                break;
            }
        }

        // Add soft dependencies for features, as they will be allowed to disabled in order to mitigate potential issues.
        canEnable = canEnable
                    && Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailCommerceUnifiedPaymentJournalFeature::instance())
                    && Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailOmniChannelPaymentsFeature::instance())
                    && Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailDuplicatePaymentProtectionFeature::instance())
                    && Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailPaymentsRefundOverMultipleCapturesFeature::instance())
                    && Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailAllowVoidingofStaleAuthorizationsFeature::instance());

        return canEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        ttsbegin;

        RetailMCRChannelTable callCenters;
        while select forupdate callCenters
            where callCenters.ChannelType == RetailChannelType::MCRCallCenter
        {
            callCenters.MCREnableOrderCompletion = true;
            callCenters.update();
        }

        eventSource.EventWritePaymentsRetailCommercePaymentsFeatureEnabled();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        // Warn user of side effects.
        eventSource.EventWritePaymentsRetailCommercePaymentsFeatureDisabled();
        Box::warning(strFmt("@Retail:RetailCommercePaymentsFeatureDisableMessage", "@Retail:RetailCommercePaymentsFeatureRestriction", "@Retail:RetailCommerceUnifiedPaymentJournalFeatureLabel", "@Retail:RetailOmniChannelPage", "@Retail:DuplicatePaymentProtectionOnInvoicingFeatureLabel", "@Retail:RefundsOverMultipleCaptureFeatureDescription", "@Retail:RetailAllowVoidingofStaleAuthorizationsFeatureLabel", "@MCR40148"));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>