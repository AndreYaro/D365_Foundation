<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSAFTCashRegisterUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSAFTCashRegisterUIBuilder</c> class is the UI builder class for SAF-T Cash register report.
/// </summary>
class RetailSAFTCashRegisterUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField companyControl;
    DialogField retailStoreControl;
    DialogField retailTerminalControl;
    RetailSAFTCashRegisterContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();

        contract = this.dataContractObject() as RetailSAFTCashRegisterContract;
        companyControl = this.bindInfo().getDialogField(contract, methodStr(RetailSAFTCashRegisterContract, parmCompany));
        retailStoreControl = this.bindInfo().getDialogField(contract, methodStr(RetailSAFTCashRegisterContract, parmRetailStore));
        retailTerminalControl = this.bindInfo().getDialogField(contract, methodStr(RetailSAFTCashRegisterContract, parmRetailTerminal));

        retailStoreControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(RetailSAFTCashRegisterUIBuilder, retailStoreControlModified), this);
        retailStoreControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RetailSAFTCashRegisterUIBuilder, retailStoreControlLookup), this);
        retailTerminalControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RetailSAFTCashRegisterUIBuilder, retailTerminalControlLookup), this);

        this.initDialog();
        this.configureTerminalControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dialog.
    /// </summary>
    private void initDialog()
    {
        if (!retailStoreControl.value())
        {
            retailTerminalControl.value('');
        }

        if (!companyControl.value())
        {
            companyControl.value(curExt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailStoreControlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles retail store control modified event.
    /// </summary>
    /// <param name = "control">Control which value is modified.</param>
    /// <returns>true if the value is valid; false otherwise.</returns>
    private boolean retailStoreControlModified(FormStringControl control)
    {
        if (control.modified())
        {
            this.clearTerminal();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears selected terminal value.
    /// </summary>
    private void clearTerminal()
    {
        retailTerminalControl.value('');
        contract.parmRetailTerminal(null);
        this.configureTerminalControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTerminalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures terminal control state.
    /// </summary>
    private void configureTerminalControl()
    {
        retailTerminalControl.enabled(retailStoreControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailStoreControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles retail store control lookup event.
    /// </summary>
    /// <param name = "control">Control for which lookup event is raised.</param>
    private void retailStoreControlLookup(FormStringControl control)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(RetailStoreTable));

        QueryBuildRange qbr = qbds.addRange(fieldNum(RetailStoreTable, DefaultCustDataAreaId));
        qbr.value(queryValue(curExt()));        

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailStoreTable), control, true);
        sysTableLookup.addLookupfield(fieldNum(RetailStoreTable, StoreNumber));
        sysTableLookup.addLookupfield(fieldNum(RetailStoreTable, DefaultCustDataAreaId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailTerminalControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles retail terminal control lookup event.
    /// </summary>
    /// <param name = "control">Control for which lookup event is raised.</param>
    private void retailTerminalControlLookup(FormStringControl control)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(RetailTerminalTable));

        RecId storeRecId = RetailStoreTable::find(retailStoreControl.value()).RecId;
        QueryBuildRange qbr = qbds.addRange(fieldNum(RetailTerminalTable, StoreRecId));
        qbr.value(queryValue(storeRecId));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailTerminalTable), control, true);
        sysTableLookup.addLookupfield(fieldNum(RetailTerminalTable, StoreRecId));
        sysTableLookup.addLookupfield(fieldNum(RetailTerminalTable, name));
        sysTableLookup.addLookupfield(fieldNum(RetailTerminalTable, terminalId), true);
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>