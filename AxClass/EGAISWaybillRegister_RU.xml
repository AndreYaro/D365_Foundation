<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISWaybillRegister_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISWaybillRegister_RU</c> class is used to register EGAIS waybill.
/// </summary>
public class EGAISWaybillRegister_RU extends RunBase
{
    EGAISWaybillJour_RU     waybillJour;
    RefRecId                waybillJourRecId;
    Set                     purchLineSet;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewRegistration</Name>
				<Source><![CDATA[
    private void createNewRegistration()
    {
        InventTransWMS_Register     inventTransWMS_Register;
        tmpInventTransWMS           tmpInventTransWMS;
        PurchLine                   purchLine;
        EGAISWaybillSettlement_RU   settlement;
        EGAISWaybillLine_RU         waybillLine;
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;

        while select settlement
            exists join waybillLine
                where waybillLine.RecId == settlement.WaybillLine &&
                      waybillLine.waybillJour == waybillJour.RecId
        {
            purchLine = purchLine::findInventTransId(settlement.InventTransId);

            delete_from tmpInventTransWMS;
            inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTransWMS);

            select firstOnly RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == settlement.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Ordered
                    && inventTrans.Qty >= settlement.Qty;

            if (!inventTransOrigin)
            {
                throw error("@EGAIS:NothingToRegister");
            }

            inventTrans.Qty = settlement.Qty;
            inventTrans.inventDimId = settlement.InventDimId;
            inventTransWMS_Register.createFromInventTrans(inventTrans, inventTrans.inventDim());
            inventTransWMS_Register.updateInvent(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPurchLineSet</Name>
				<Source><![CDATA[
    private void fillPurchLineSet()
    {
        EGAISWaybillLine_RU         waybillLine;
        EGAISWaybillSettlement_RU   settlement;
        InventDim                   inventDim;
        Set                         inventoryProfileSet;

        purchLineSet        = new Set(Types::String);
        inventoryProfileSet = new Set(Types::String);

        while select InventTransId, InventDimId from settlement
            join InventProfileId_RU from inventDim
                where inventDim.inventDimId == settlement.InventDimId
            exists join waybillLine 
                where waybillLine.WaybillJour == waybillJour.RecId &&
                      waybillLine.RecId == settlement.WaybillLine
        {
            purchLineSet.add(settlement.InventTransId);
            inventoryProfileSet.add(inventDim.InventProfileId_RU);
        }

        if (inventoryProfileSet.elements() > 1)
        {
            throw error("@EGAIS:AllEgaisBolLinesShouldRelateToOneInventoryProfile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        waybillJour = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, waybillJourRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillJourRecId</Name>
				<Source><![CDATA[
    public RefRecId parmWaybillJourRecId(RefRecId _waybillJourRecId = waybillJourRecId)
    {
        waybillJourRecId = _waybillJourRecId;

        return waybillJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        setPrefix(EGAISWaybillRegister_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            this.fillPurchLineSet();
            this.undoExistingRegistration();
            this.createNewRegistration();
            this.updateWaybillJour();

            ttsCommit;

            info(strFmt("@EGAIS:EgaisBolNumberDateHasBeenRegistered", waybillJour.WaybillNum, waybillJour.WaybillDate));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoExistingRegistration</Name>
				<Source><![CDATA[
    private void undoExistingRegistration()
    {
        SetEnumerator               se = purchLineSet.getEnumerator();
        TradeInventTransId          inventTransId;
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        InventTransWMS_Register     inventTransWMS_Register;
        tmpInventTransWMS           tmpInventTransWMS;
        PurchLine                   purchLine;

        while (se.moveNext())
        {
            inventTransId = se.current();
            purchLine = PurchLine::findInventTransId(inventTransId);

            delete_from tmpInventTransWMS;
            inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTransWMS);


            while select inventTrans
                where inventTrans.StatusReceipt    == StatusReceipt::Registered 
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
            {
                inventTransWMS_Register.createFromInventTrans(inventTrans, inventTrans.inventDim());
            }

            inventTransWMS_Register.updateInvent(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, waybillJourRecId] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaybillJour</Name>
				<Source><![CDATA[
    private void updateWaybillJour()
    {
        EGAISWaybillJour_RU     waybillJourUpd = EGAISWaybillJour_RU::findRecId(waybillJour.RecId, true);

        waybillJourUpd.StatusReceipt = EGAISWaybillStatusReceipt_RU::Registered;
        waybillJourUpd.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        EGAISWaybillJour_RU waybillJourLocal = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
        EGAISWaybillJour_RU waybillJourInProgress;

        boolean ret;

        ret = super(_calledFrom);

        if (!waybillJourLocal.canBeRegistered())
        {
            ret = checkFailed(strFmt("@EGAIS:EgaisBolNumberDateCannotBeRegistered", waybillJourLocal.WaybillNum, waybillJourLocal.WaybillDate));
        }

        select firstOnly waybillJourInProgress
            where waybillJourInProgress.Shipper == waybillJourLocal.Shipper
               && waybillJourInProgress.Direction == EGAISDocumentDirection_RU::Incoming
               && (   waybillJourInProgress.StatusReceipt == EGAISWaybillStatusReceipt_RU::Registered
                   || waybillJourInProgress.StatusReceipt == EGAISWaybillStatusReceipt_RU::ProductReceiptPosted)
               && waybillJourInProgress.RecId != waybillJourLocal.RecId;

        if (waybillJourInProgress)
        {
            throw error(strFmt("@EGAIS:EgaisBolNumberDateShouldBeInvoicedFirst", waybillJourInProgress.WaybillNum, waybillJourInProgress.WaybillDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EGAISWaybillRegister_RU construct()
    {
        return new EGAISWaybillRegister_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@EGAIS:RegisterEgaisBol";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISWaybillRegister_RU     runClass;
        FormDataSource              formDataSource;

        if (!_args || _args.dataset() != tableNum(EGAISWaybillJour_RU))
        {
            throw error(strFmt("@SYS25516",EGAISWaybillRegister_RU::description()));
        }

        runClass = EGAISWaybillRegister_RU::newFromWaybillJour(_args.record());

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaybillJour</Name>
				<Source><![CDATA[
    public static EGAISWaybillRegister_RU newFromWaybillJour(EGAISWaybillJour_RU _waybillJour)
    {
        EGAISWaybillRegister_RU runClass = EGAISWaybillRegister_RU::construct();

        runClass.parmWaybillJourRecId(_waybillJour.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>