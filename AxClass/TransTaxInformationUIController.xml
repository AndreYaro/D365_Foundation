<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling new tax information UI and transaction update.
/// </summary>
public class TransTaxInformationUIController
{
    protected   TaxModelTaxable                             taxModelTaxable;
    protected   Common                                      sourceTable;
    protected   List                                        ctrlList;
    protected   OpenMode                                    formOpenMode;
    protected   TransTaxInformation                         transTaxInformation;
    protected   FormDataSource                              transTaxInformationDS;
    protected   TransTaxInformationDeliveryInfoCtrl_IN      transTaxInformationDeliveryInfoCtrl;
    protected   TransTaxInformationCustTaxInfoCtrl_IN       transTaxInformationCustTaxInfoCtrl;
    protected   TransTaxInformationVendorTaxInfoCtrl_IN     transTaxInformationVendorTaxInfoCtrl;
    protected   TransTaxInformationTaxIdCtrl                transTaxInformationTaxIdCtrl;
    protected   TransTaxInformationBankTaxInfoCtrl_IN       transTaxInformationBankTaxInfoCtrl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform relevant logics when switch to other tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The tax information transaction.
    /// </param>
    public void selectionChanged(TransTaxInformation _transTaxInformation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormOpenMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the Open mode.
    /// </summary>
    /// <param name="_formOpenMode">
    /// The form open mode.
    /// </param>
    /// <returns>
    /// The form open mode.
    /// </returns>
    public OpenMode parmFormOpenMode(OpenMode _formOpenMode = formOpenMode)
    {
        formOpenMode = _formOpenMode;
        return formOpenMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or get the class TaxModelTaxable.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// Tax model doc line instance
    /// </param>
    /// <returns>
    /// The class TaxModelTaxable.
    /// </returns>
    protected TaxModelTaxable parmTaxModelTaxable(TaxModelTaxable _taxModelTaxable = taxModelTaxable)
    {
        taxModelTaxable = _taxModelTaxable;

        if (!taxModelTaxable)
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(SalesPurchJournalLine::findRecId(sourceTable.TableId, sourceTable.RecId));
        }

        return taxModelTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the transaction table.
    /// </summary>
    /// <param name="_sourceTable">
    /// The transaction table.
    /// </param>
    /// <returns>
    /// The transaction table.
    /// </returns>
    public Common parmSourceTable(Common _sourceTable = sourceTable)
    {
        sourceTable = _sourceTable;
        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the transaction tax information.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// the transaction tax information table.
    /// </param>
    /// <returns>
    /// the transaction tax information table.
    /// </returns>
    public TransTaxInformation parmTransTaxInformation(TransTaxInformation _transTaxInformation = transTaxInformation)
    {
        transTaxInformation = _transTaxInformation;
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the preparative logics to set the UI and data on Tax information form.
    /// </summary>
    public void run()
    {
        if (!this.canModifyTaxInformation())
        {
            transTaxInformationDS.formRun().design().viewEditMode(ViewEditMode::View);
        }
        else
        {
            TransTaxInformationHelper taxInfomationHelper = TransTaxInformationHelper::newHelper();
            taxInfomationHelper.parmTaxModelTaxable(taxModelTaxable);
            transTaxInformation.data(taxInfomationHelper.findTransTaxInformationByRecord(sourceTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls and data source for Tax information form.
    /// </summary>
    protected void init()
    {
        transTaxInformationDS = FormDataUtil::getFormDataSource(transTaxInformation);
        this.getCtrlClassFromList();
        this.initAllCtrls();
        this.setVisibleToTransTaxInformationFormCtrls();
        this.setEnabledToTransTaxInformationFormCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToTransTaxInformationFormCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all controls on Tax information form.
    /// </summary>
    protected void setVisibleToTransTaxInformationFormCtrls()
    {
        this.setVisibleToDeliveryInfoCtrls();
        this.setVisibleToCustTaxInfoCtrls();
        this.setVisibleToVendTaxInfoCtrls();
        this.setVisibleToBankTaxInfoCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToTransTaxInformationFormCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all controls on Tax information form.
    /// </summary>
    protected void setEnabledToTransTaxInformationFormCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCtrlClassFromList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get each control class for Tax information.
    /// </summary>
    protected void getCtrlClassFromList()
    {
        ListEnumerator ctrlListEnum;

        if (ctrlList)
        {
            ctrlListEnum = ctrlList.getEnumerator();

            while (ctrlListEnum.moveNext())
            {
                switch (classIdGet(ctrlListEnum.current()))
                {
                    case classNum(TransTaxInformationDeliveryInfoCtrl_IN) :
                        transTaxInformationDeliveryInfoCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationVendorTaxInfoCtrl_IN) :
                        transTaxInformationVendorTaxInfoCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationCustTaxInfoCtrl_IN) :
                        transTaxInformationCustTaxInfoCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationTaxIdCtrl) :
                        transTaxInformationTaxIdCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationBankTaxInfoCtrl_IN) :
                        transTaxInformationBankTaxInfoCtrl = ctrlListEnum.current();
                        break;
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls for Tax information form.
    /// </summary>
    protected void initAllCtrls()
    {
        // Company Location
        transTaxInformationDeliveryInfoCtrl.parmCompanyLocation().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfCompanyLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, CompanyLocation)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedCompanyLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, CompanyLocation)).registerOverrideMethod(methodStr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfCompanyLocation), this);

        // Tax information
        transTaxInformationDeliveryInfoCtrl.parmTaxInformation().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfTaxInfo), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, TaxInformation)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedTaxInformation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, TaxInformation)).registerOverrideMethod(methodstr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfTaxInfo), this);
    
        // Vendor Location
        transTaxInformationVendorTaxInfoCtrl.parmVendorLocation().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfVendorLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, VendorLocation)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedVendorLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, VendorLocation)).registerOverrideMethod(methodStr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfVendorLocation), this);
        transTaxInformationVendorTaxInfoCtrl.parmVendorTaxInfo().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfVendorTaxInfo), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, VendorTaxInformation)).registerOverrideMethod(methodstr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfVendTaxInfo), this);

        // Customer Location
        transTaxInformationCustTaxInfoCtrl.parmCustomerLocation().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfCustomerLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, CustomerLocation)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedCustomerLocation), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, CustomerLocation)).registerOverrideMethod(methodStr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfCustomerLocation), this);
        transTaxInformationCustTaxInfoCtrl.parmCustomerTaxInfo().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfCustomerTaxInfo), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, CustomerTaxInformation)).registerOverrideMethod(methodstr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfCustTaxInfo), this);

        // Bank Location
        transTaxInformationBankTaxInfoCtrl.parmBankTaxInfo().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceOfBankTaxInfo), this);
        transTaxInformationDS.object(fieldNum(TransTaxInformation, BankTaxInformation)).registerOverrideMethod(methodstr(FormReferenceGroupControl, jumpRef), methodStr(TransTaxInformationUIController, jumpRefOfBankTaxInfo), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the lookup reference method to company location.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfCompanyLocation(FormReferenceGroupControl _formReferenceGroupControl)
    {
        InventDimID inventDimId;
        InventDim   inventDim;

        inventDimId = this.parmTaxModelTaxable().getInventDimId();
        if (inventDimId)
        {
            inventDim = InventDim::find(inventDimId);
            return TaxLogisticsLocationControllerHelper_IN::lookupAllLogisticsLocation(_formReferenceGroupControl, inventDim.InventLocationId, inventDim.InventSiteId, true);
        }
        else
        {
            return TaxInformation_IN::locationLookup(_formReferenceGroupControl, CompanyInfo::findDataArea(this.parmTaxModelTaxable().getTransactionCompany()).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to company location.
    /// </summary>
    /// <param name="_companyLocation">
    /// The form data source company location.
    /// </param>
    protected void modifiedCompanyLocation(FormDataObject _companyLocation)
    {
        TransTaxInformationHelper::initFromCompanyLocation(transTaxInformation);
        TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to company location.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfCompanyLocation(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRefLocationAddressForm(transTaxInformation.CompanyLocation, transTaxInformationDS.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to Tax information.
    /// </summary>
    /// <param name="_taxInformation">
    /// The form data source tax information.
    /// </param>
    protected void modifiedTaxInformation(FormDataObject _taxInformation)
    {
        TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Tax information.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfTaxInfo(FormReferenceGroupControl _formReferenceControl)
    {
        return TaxInformation_IN::lookup(_formReferenceControl, transTaxInformation.CompanyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Tax information.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfTaxInfo(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRef(transTaxInformation.TaxInformation, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a specific transaction control class.
    /// </summary>
    /// <param name="_source">
    /// A table buffer for the type of transaction to be constructed.
    /// </param>
    /// <param name="_transTaxInformation">
    /// The tax information table.
    /// </param>
    /// <param name="_ctrlList">
    /// The control list.
    /// </param>
    /// <returns>
    /// The new TransTaxInformationUIController_IN class.
    /// </returns>
    public static TransTaxInformationUIController construct(
        Common                  _source,
        TransTaxInformation	_transTaxInformation,
        List                    _ctrlList)
    {
        LedgerJournalType journalType;
        TransTaxInformationUIController transTaxInformationUIController;
        EnumName    enumName = "";
        str         enumValueSymbol = "";

        if (_source.TableId == tableNum(LedgerJournalTrans))
        {
            enumName = enumStr(LedgerJournalType);
            journalType = TransTaxInformationUIController::getJournalType(_source);
            enumValueSymbol = enum2Symbol(enumName2Id(enumName), journalType);
        }

        TransTaxInfoUIControllerAttribute attr = new TransTaxInfoUIControllerAttribute(tableId2Name(_source.TableId), enumName, enumValueSymbol);

        transTaxInformationUIController = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(TransTaxInformationUIController), attr) as TransTaxInformationUIController;

        if (!transTaxInformationUIController)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        transTaxInformationUIController.initForConstruct(_ctrlList, _source, _transTaxInformation);
        
        transTaxInformationUIController.init();

        return transTaxInformationUIController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// To init the params.
    /// </summary>
    private void initForConstruct(
        List                _ctrlList,
        Common              _source,
        TransTaxInformation	_transTaxInformation)
    {
        ctrlList = _ctrlList;
        sourceTable = _source;
        transTaxInformation = _transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get ledger journal type.
    /// </summary>
    /// <param name = "_source">Source table</param>
    /// <returns>Get LedgerJournalType</returns>
    protected static LedgerJournalType getJournalType(Common _source)
    {
        LedgerJournalType journalType;
        LedgerJournalTrans ledgerJournalTrans = _source as LedgerJournalTrans;
        LedgerJournalType journalTypeLoc = ledgerJournalTrans.ledgerJournalTable().JournalType;

        switch (journalTypeLoc)
        {
            case LedgerJournalType::Payment :
            case LedgerJournalType::Approval :
            case LedgerJournalType::PurchaseLedger :
            case LedgerJournalType::VendInvoiceRegister :
            case LedgerJournalType::Daily :
            case LedgerJournalType::VendInvoicePool :
            case LedgerJournalType::CustPayment :
            case LedgerJournalType::Cost :
                journalType = journalTypeLoc;
                break;
        }
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToDeliveryInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible or invisible to all delivery information controls on Tax information form.
    /// </summary>
    protected void setVisibleToDeliveryInfoCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible or invisible to all customer tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustTaxInfoCtrls()
    {
        transTaxInformationCustTaxInfoCtrl.parmCustomerTaxInformation().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVendTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible or invisible to all vendor tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToVendTaxInfoCtrls()
    {
        transTaxInformationVendorTaxInfoCtrl.parmVendorTaxInformation().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine whether we can modify the tax information fields.
    /// </summary>
    /// <returns>
    /// Can modify or not.
    /// </returns>
    protected boolean canModifyTaxInformation()
    {
        return (this.skipTaxModelTaxable()
                    || this.parmTaxModelTaxable().canModifyTaxInformation())
                && this.parmFormOpenMode() != OpenMode::View;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine whether we can skip to generate the <c>TaxModelTaxable</c> object.
    /// </summary>
    /// <returns>
    /// Can skip or not.
    /// </returns>
    protected boolean skipTaxModelTaxable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfCustomerLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Customer location.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfCustomerLocation(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRefLocationAddressForm(transTaxInformation.CustomerLocation, transTaxInformationDS.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfCustTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Tax information.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfCustTaxInfo(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRef(transTaxInformation.CustomerTaxInformation, _formReferenceObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfVendorLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Vendor location.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfVendorLocation(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRefLocationAddressForm(transTaxInformation.VendorLocation, transTaxInformationDS.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfVendTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Tax information.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfVendTaxInfo(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRef(transTaxInformation.VendorTaxInformation, _formReferenceObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfCustomerLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the lookup reference method to Customer location.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfCustomerLocation(FormReferenceGroupControl _formReferenceGroupControl)
    {
        return TaxInformation_IN::locationLookup(_formReferenceGroupControl, this.parmTaxModelTaxable().getCustTable().Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfCustomerTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Tax information.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfCustomerTaxInfo(FormReferenceGroupControl _formReferenceControl)
    {
        return TaxInformation_IN::lookup(_formReferenceControl, transTaxInformation.CustomerLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfVendorLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the lookup reference method to Vendor location.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfVendorLocation(FormReferenceGroupControl _formReferenceGroupControl)
    {
        return TaxInformation_IN::locationLookup(_formReferenceGroupControl, this.parmTaxModelTaxable().getVendTable().Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfVendorTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Tax information.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfVendorTaxInfo(FormReferenceGroupControl _formReferenceControl)
    {
        return TaxInformation_IN::lookup(_formReferenceControl, transTaxInformation.VendorLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCustomerLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to company location.
    /// </summary>
    /// <param name="_customerLocation">
    /// The form data source company location.
    /// </param>
    protected void modifiedCustomerLocation(FormDataObject _customerLocation)
    {
        TransTaxInformationHelper::initFromCustomerLocation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVendorLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to company location.
    /// </summary>
    /// <param name="_vendorLocation">
    /// The form data source company location.
    /// </param>
    protected void modifiedVendorLocation(FormDataObject _vendorLocation)
    {
        TransTaxInformationHelper::initFromVendorLocation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(List _ctrlList, Common _sourse, TransTaxInformation _transTaxInformation)
    {
        ctrlList = _ctrlList;
        sourceTable = _sourse;
        transTaxInformation = _transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToGSTTCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all GST tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToGSTTCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Excise tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToExciseCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Service tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToServiceTaxCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVATCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all VAT tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToVATCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Customs tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustomsCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToWithholdTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Withholding tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToWithholdTaxCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToSalesTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Sales tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToSalesTaxCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Excise controls on Tax information form.
    /// </summary>
    protected void setEnabledToExciseCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToTaxWithholdingCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Withholding controls on Tax information form.
    /// </summary>
    protected void setEnabledToTaxWithholdingCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Customs controls on Tax information form.
    /// </summary>
    protected void setEnabledToCustomsCtrls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedExciseField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform relevant logics after modify excise field.
    /// </summary>
    protected void modifiedExciseField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to excise.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The form comboBox control.
    /// </param>
    /// <returns>
    /// Returns true if the control is modified, otherwise false
    /// </returns>
    protected boolean modifiedOfExcise(FormComboBoxControl _formComboBoxControl)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefOfBankTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jump method to Tax information.
    /// </summary>
    /// <param name="_formReferenceObject">
    /// The form reference object.
    /// </param>
    protected void jumpRefOfBankTaxInfo(FormReferenceObject _formReferenceObject)
    {
        TaxInformation_IN::jumpRef(transTaxInformation.BankTaxInformation, _formReferenceObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceOfBankTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Tax information.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceOfBankTaxInfo(FormReferenceGroupControl _formReferenceControl)
    {
        return TaxInformation_IN::lookup(_formReferenceControl, transTaxInformation.BankLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToBankTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all bank tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToBankTaxInfoCtrls()
    {
        transTaxInformationBankTaxInfoCtrl.parmBankTaxInformation().visible(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>