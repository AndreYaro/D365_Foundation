<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationOnHandConstraintQryEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationOnHandConstraintQryEnumerator</c> class allows to
/// iterate over the <c>WHSLocationOnHandConstraintQuery</c>.
/// </summary>
public class WhsLocationOnHandConstraintQryEnumerator
{
    private static boolean IsUseOfInventSumDimEnabled = InventUseDimOfInventSumToggle::instance().isEnabled();

    boolean                         includeDelta;
    QueryRun                        queryRun;
    InventSum                       currentInventSum;
    InventDim                       currentInventDim;
    InventSumUnionDeltaPhysicalQty  currentInventSumUnionDelta;    
    
    protected InventSumUnionDeltaWithInventDimPhysicalQty currentInventSumUnionDeltaWithInventDim;
    protected InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty currentInventSumWithInventDimUnionDeltaWithInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>InventDim</c> record.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    public InventDim currentInventDim()
    {
        if (IsUseOfInventSumDimEnabled)
        {
            if (includeDelta)
            {
                return InventDim::findOrCreateInventDimFromInventSumWithInventDimUnionDeltaWithInventDimPhysicalQty(currentInventSumWithInventDimUnionDeltaWithInventDim);
            }
            else
            {
                return InventDim::findOrCreateInventDimFromInventSum(currentInventSum);
            }
        }         
        else
        {
            return currentInventDim;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventUnitOfMeasureRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A RecID of the inventory unit of measure of the current product.
    /// </summary>
    /// <returns>
    /// A RecID of a <c>UnitOfMeasure</c> record.
    /// </returns>
    public UnitOfMeasureRecId currentInventUnitOfMeasureRecId()
    {
        UnitOfMeasureSymbol fromUnit = InventTableModule::find(this.currentItemId(), ModuleInventPurchSales::Invent).UnitId;

        return UnitOfMeasure::unitOfMeasureIdBySymbol(fromUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCWInventUnitOfMeasureRecId</Name>
				<Source><![CDATA[
    private UnitOfMeasureRecId currentCWInventUnitOfMeasureRecId()
    {
        UnitOfMeasureSymbol fromUnit = PdsCatchWeight::cwUnitId(this.currentItemId());

        return UnitOfMeasure::unitOfMeasureIdBySymbol(fromUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentHandlingUnitOfMeasureRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A RecID of the handling unit of measure of the current product.
    /// </summary>
    /// <returns>
    /// A RecID of a <c>UnitOfMeasure</c> record.
    /// </returns>
    [Hookable(false)]
    internal UnitOfMeasureRecId currentHandlingUnitOfMeasureRecId()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.currentItemId()))
        {
            return this.currentCWInventUnitOfMeasureRecId();
        }

        return this.currentInventUnitOfMeasureRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current item ID.
    /// </summary>
    /// <returns>
    /// An item ID.
    /// </returns>
    public ItemId currentItemId()
    {
        if (includeDelta)
        {
            if (IsUseOfInventSumDimEnabled)
            {
                return currentInventSumWithInventDimUnionDeltaWithInventDim.ItemId;
            }
            else
            {
                return currentInventSumUnionDelta.ItemId;
            }
        }
        else
        {
            return currentInventSum.ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current physical inventory quantity.
    /// </summary>
    /// <returns>
    /// A quantity in the inventory unit.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the currentHandlingPhysicalInvent method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty currentPhysicalInvent()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.currentItemId());

        if (includeDelta)
        {
            if (IsUseOfInventSumDimEnabled)
            {
                return currentInventSumWithInventDimUnionDeltaWithInventDim.PhysicalInvent;
            }
            else
            {
                return currentInventSumUnionDelta.PhysicalInvent;
            }
        }

        return currentInventSum.PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCWPhysicalInvent</Name>
				<Source><![CDATA[
    private PdsCWInventQty currentCWPhysicalInvent()
    {
        if (includeDelta)
        {
            if (IsUseOfInventSumDimEnabled)
            {
                return currentInventSumWithInventDimUnionDeltaWithInventDim.PdsCWPhysicalInvent;
            }
            else
            {
                return currentInventSumUnionDelta.PdsCWPhysicalInvent;
            }
        }

        return currentInventSum.PdsCWPhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentHandlingPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current physical handling quantity.
    /// </summary>
    /// <returns>
    /// A quantity in the handling unit.
    /// </returns>
    [Hookable(false)]
    final public InventHandlingQty currentHandlingPhysicalInvent()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.currentItemId()))
        {
            return this.currentCWPhysicalInvent();
        }

        return this.currentPhysicalInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the RecID of the current <c>EcoResProduct</c> record.
    /// </summary>
    /// <returns>
    /// A RecID of a <c>EcoResProduct</c> record.
    /// </returns>
    public EcoResProductRecId currentProductRecId()
    {
        return InventTable::itemProduct(this.currentItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator.
    /// </summary>
    /// <param name="_queryType">
    /// The type of query that the enumerator will be iterating over.
    /// </param>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to iterate over.
    /// </param>
    protected void initialize(WHSLocationOnHandConstraintQueryType _queryType, QueryRun _queryRun)
    {
        includeDelta = _queryType.parmIncludeDelta();
        queryRun = _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the next record.
    /// </summary>
    /// <returns>
    /// true if the next record was found; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        boolean result = queryRun.next();

        if (includeDelta)
        {
            if (IsUseOfInventSumDimEnabled)
            {
                currentInventSumWithInventDimUnionDeltaWithInventDim = queryRun.get(tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty));
            }
            else
            {
                currentInventSumUnionDelta = queryRun.get(tableNum(InventSumUnionDeltaPhysicalQty));
            }
        }
        else
        {
            currentInventSum = queryRun.get(tableNum(InventSum));
        }

        if (!IsUseOfInventSumDimEnabled)
        {
            currentInventDim = queryRun.get(tableNum(InventDim));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSLocationOnHandConstraintQryEnumerator construct()
    {
        return new WHSLocationOnHandConstraintQryEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new enumerator.
    /// </summary>
    /// <param name="_queryType">
    /// The type of query that the enumerator will be iterating over.
    /// </param>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to iterate over.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLocationOnHandConstraintQryEnumerator</c> class.
    /// </returns>
    public static WHSLocationOnHandConstraintQryEnumerator newStandard(WHSLocationOnHandConstraintQueryType _queryType, QueryRun _queryRun)
    {
        WHSLocationOnHandConstraintQryEnumerator enumerator = WHSLocationOnHandConstraintQryEnumerator::construct();
        enumerator.initialize(_queryType, _queryRun);
        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>