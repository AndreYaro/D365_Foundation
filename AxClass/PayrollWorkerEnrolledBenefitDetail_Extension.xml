<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerEnrolledBenefitDetail_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class PayrollWorkerEnrolledBenefitDetail_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the position lookup with an applied filter to restrict the lookup to the specified subset of positions.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control that is opening the position lookup.
    /// </param>
    /// <param name="_payrollWorkerEnrolledBenefitDetail">
    /// A <c>PayrollWorkerEnrolledBenefitDetail</c> table record buffer. 
    /// </param>
    /// <returns>
    /// A <c>HcmPosition</c> record buffer that references the selected record.
    /// </returns>
    public static HcmPosition lookupPosition(FormReferenceControl _formReferenceControl, PayrollWorkerEnrolledBenefitDetail _payrollWorkerEnrolledBenefitDetail )
    {
        Common ret;
        SysReferenceTableLookup     sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmPosition), _formReferenceControl, true);
        Query                       lookupQuery;
        QueryBuildDataSource        qbDSHcmPosition;
        QueryBuildDataSource        qbDSPayrollPositionDetails;
        QueryBuildDataSource        qbDShcmPositionWorkerAssignment;

        if (_payrollWorkerEnrolledBenefitDetail.RecId != 0)
        {
            sysTableLookup.addLookupfield(fieldNum(HcmPosition, PositionId));
            sysTableLookup.addLookupMethod(identifierStr(description));
            sysTableLookup.addLookupMethod(identifierStr(title));
            sysTableLookup.addLookupMethod(identifierStr(worker));

            lookupQuery = new Query();

            qbDSHcmPosition = lookupQuery.addDataSource(tableNum(HcmPosition));

            qbDSPayrollPositionDetails = qbDSHcmPosition.addDataSource(tableNum(PayrollPositionDetails));
            qbDSPayrollPositionDetails.addLink(fieldNum(PayrollPositionDetails, Position), fieldNum(HcmPosition, RecId));
            qbDSPayrollPositionDetails.joinMode(JoinMode::InnerJoin);
            qbDSPayrollPositionDetails.addRange(fieldNum(PayrollPositionDetails, PaidByLegalEntity)).value(SysQuery::value(_payrollWorkerEnrolledBenefitDetail.LegalEntity));

            qbDShcmPositionWorkerAssignment = qbDSPayrollPositionDetails.addDataSource(tableNum(HcmPositionWorkerAssignment));
            qbDShcmPositionWorkerAssignment.addLink(fieldNum(HcmPositionWorkerAssignment, Position), fieldNum(PayrollPositionDetails, Position));
            qbDShcmPositionWorkerAssignment.joinMode(JoinMode::InnerJoin);
            qbDShcmPositionWorkerAssignment.addRange(fieldNum(HcmPositionWorkerAssignment, Worker)).value(SysQuery::value(HcmWorkerEnrolledBenefit::find(_payrollWorkerEnrolledBenefitDetail.WorkerEnrolledBenefit).Worker));

            sysTableLookup.parmQuery(lookupQuery);
            ret = sysTableLookup.performFormLookup();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the vendor account number is valid.
    /// </summary>
    /// <param name="_payrollWorkerEnrolledBenefitDetail">
    /// A <c>PayrollWorkerEnrolledBenefitDetail</c> table record buffer.
    /// </param>
    /// <returns>
    ///     true if the vendor account number is valid; otherwise, false.
    /// </returns>
    public static boolean validateVendAccountNum(PayrollWorkerEnrolledBenefitDetail _payrollWorkerEnrolledBenefitDetail)
    {
        boolean ret;
        DataAreaId paidByDataArea;

        if (_payrollWorkerEnrolledBenefitDetail.VendAccountNum == '')
        {
            // The vendor account is an optional field
            ret = true;
        }
        else if (_payrollWorkerEnrolledBenefitDetail.LegalEntity)
        {
            paidByDataArea = CompanyInfo::getDataArea(_payrollWorkerEnrolledBenefitDetail.LegalEntity);

            changecompany(paidByDataArea)
            {
                if (VendTable::exist(_payrollWorkerEnrolledBenefitDetail.VendAccountNum))
                {
                    ret = true;
                }
                else
                {
                    ret = checkFailed(strFmt("@Payroll:TheValue1InField2IsNotFoundInTheRelatedTable3",
                        _payrollWorkerEnrolledBenefitDetail.VendAccountNum,
                        fieldPName(PayrollWorkerEnrolledBenefitDetail, VendAccountNum),
                        tablePName(VendTable)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the position is valid.
    /// </summary>
    /// <param name="_position">
    /// A RecId of <c>HcmPosition</c>.
    /// </param>
    /// <param name="_legalEntity">
    /// A RecId of <c>CompanyInfo</c>.
    /// </param>
    /// <param name="_worker">
    /// A RecId of <c>HcmWorker</c>.
    /// </param>
    /// <param name="_benefit">
    /// A RecId of <c>HcmBenefit</c>.
    /// </param>
    /// <param name="_validFromDate">
    /// A validate from date.
    /// </param>
    /// <param name="_validToDate">
    /// A validate to date.
    /// </param>
    /// <returns>
    ///     true if the position is valid; otherwise, false.
    /// </returns>
    public static boolean validatePosition(
        HcmPositionRecId    _position, 
        CompanyInfoRecId    _legalEntity, 
        HcmWorkerRecId      _worker, 
        HcmBenefitRecId     _benefit,
        ValidFromDate       _validFromDate,
        ValidToDate         _validToDate)
    {
        boolean ret = true;

        if (_position && _legalEntity)
        {
            HcmPositionWorkerAssignment positionWorkerAssignment;
            PayrollPositionDetails payrollPositionDetails;
            utcdatetime validFrom = DateTimeUtil::newDateTime(_validFromDate, 0);
            utcdatetime ValidTo = DateTimeUtil::newDateTime(_validToDate, timeMax());

            select validTimeState(validFrom, validTo) RecId from positionWorkerAssignment
                where positionWorkerAssignment.Position == _position
                    && positionWorkerAssignment.Worker == _worker;

            select validTimeState(validFrom, validTo) RecId from payrollPositionDetails
                where payrollPositionDetails.Position == _position
                    && payrollPositionDetails.PaidByLegalEntity == _legalEntity;

            PayrollCategory payrollCategory = HcmBenefitType::findByBenefit(_benefit).PayrollCategory;

            if (payrollPositionDetails.RecId == 0
                || positionWorkerAssignment.RecId == 0
                || payrollCategory == PayrollCategory::Garnishment
                || payrollCategory == PayrollCategory::TaxLevy)
            {
                ret = checkFailed(strFmt("@SYS119897", _position, fieldPName(PayrollWorkerEnrolledBenefitDetail, Position)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverrideLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether OverrideLimit is valid.
    /// </summary>
    /// <param name="_payrollWorkerEnrolledBenefitDetail">
    /// A <c>PayrollWorkerEnrolledBenefitDetail</c> table record buffer.
    /// </param>
    /// <returns>
    ///     true if OverrideLimit is valid; otherwise, false.
    /// </returns>
    public static boolean validateOverrideLimit(PayrollWorkerEnrolledBenefitDetail _payrollWorkerEnrolledBenefitDetail)
    {
        boolean ret = true;
        HcmWorkerEnrolledBenefit workerEnrolledBenefit = HcmWorkerEnrolledBenefit::find(_payrollWorkerEnrolledBenefitDetail.WorkerEnrolledBenefit);

        if (_payrollWorkerEnrolledBenefitDetail.OverrideLimit == NoYes::Yes)
        {
            HcmBenefit benefit = HcmBenefit::find(workerEnrolledBenefit.Benefit);
            PayrollRetirementBenefitPlanDetail_US retirementBenefitPlan = PayrollRetirementBenefitPlanDetail_US::findByBenefitPlan(benefit.RecId);

            if (!PayrollParameters::find().AllowRetirementLimitOverride 
                || (retirementBenefitPlan.RecId && retirementBenefitPlan.RetirementType == PayrollRetirementType::PRT401kRoth401k))
            {
                ret = checkFailed(strFmt("@SYS119897", _payrollWorkerEnrolledBenefitDetail.OverrideLimit, fieldPName(PayrollWorkerEnrolledBenefitDetail, OverrideLimit)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>