<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResourceFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds convenience methods for working with resources.
/// </summary>
public class ResourceFacade
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if specified resource already exists.
    /// </summary>
    /// <param name = "_resource">
    ///    Resource
    /// </param>
    /// <returns>
    ///   Returns true if the specified resource already exists; false otherwise.
    /// </returns>
    public static boolean exist(ResourceRecId _resource)
    {
        boolean exist;
        ResourceView resource;

        if (_resource)
        {
            select firstonly RecId from resource
                where resource.RecId == _resource;

            if (resource)
            {
                exist = true;
            }
        }

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the resource by the resource Id and the company provided.
    /// </summary>
    /// <param name = "_resourceId">
    ///    Id of the resource.
    /// </param>
    /// <param name = "_resourceCompany">
    ///    Resource company of the resource.
    /// </param>
    /// <returns>
    ///    Identifier of the resource.
    /// </returns>
    public static ResourceRecId findByResourceId(ResResourceID _resourceId, SelectableDataArea _resourceCompany = curExt())
    {
        ResourceView    resource;
        
        select firstonly RecId from resource
            where resource.ResourceId == _resourceId
                && resource.ResourceCompanyId == _resourceCompany;

        return resource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByResourceBackingEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds resource by resource backing entity.
    /// </summary>
    /// <param name = "_resourceBackingEntity">
    ///    Entity record that resource is based on.
    /// </param>
    /// <returns>
    ///    Record Id that identifies the resource.
    /// </returns>
    public static ResourceRecId findByResourceBackingEntity(Common _resourceBackingEntity)
    {
        ResResourceIdentifier resourceIdentifier;

        select firstonly RecId from resourceIdentifier
            where resourceIdentifier.RefRecId == _resourceBackingEntity.RecId &&
                resourceIdentifier.RefTableId == _resourceBackingEntity.TableId;

        return resourceIdentifier.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBackingEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Lookups <c>RecId</c> of the record in the table used as backing entity of the resource.
    /// </summary>
    /// <param name = "_resource">
    ///    Resource
    /// </param>
    /// <param name = "_backingEntity">
    ///    The table used as backing entity for the resource.
    /// </param>
    /// <returns>
    ///    Record Id of the backing entity.
    /// </returns>
    public static RecId getBackingEntityRecId(ResourceRecId _resource, TableId _backingEntity)
    {
        ResResourceIdentifier resourceIdentifier;

        select firstonly RefRecId from resourceIdentifier
            where resourceIdentifier.RecId == _resource &&
                resourceIdentifier.RefTableId == _backingEntity;

        return resourceIdentifier.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds resource by corresponding <c>HcmWorker</c> record.
    /// </summary>
    /// <param name = "_worker">
    ///    The <c>HcmWorker</c> table record ID.
    /// </param>
    /// <param name = "_resourceLegalEntity">
    ///    The resource legal entity record ID.
    /// </param>
    /// <returns>
    ///    Identifier of the resource.
    /// </returns>
    public static ResourceRecId findByWorker(HcmWorkerRecId _worker, LegalEntityRecId _resourceLegalEntity = CompanyInfo::current())
    {
        ResourceWorkerView workerResource;

        if (_worker)
        {
            select firstonly RecId from workerResource
                where workerResource.Worker == _worker
                    && workerResource.ResourceLegalEntity == _resourceLegalEntity;
        }

        return workerResource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contains</Name>
				<Source><![CDATA[
    private static boolean contains(container _container, anyType _element)
    {
        for (int i=1; i <= conLen(_container); i++)
        {
            if (_element == conPeek(_container, i))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds existing resource or creates new one if no resource exists for corresponding worker in the specified legal entity at specified point in time.
    /// </summary>
    /// <param name = "_worker">
    ///    The <c>HcmWorker</c> table record ID.
    /// </param>
    /// <param name = "_legalEntityRecId">
    ///    The resource legal entity record ID.
    /// </param>
    /// <returns>
    ///    Identifier of the resource.
    /// </returns>
    public static ResourceRecId findOrCreateByWorker(HcmWorkerRecId _worker, LegalEntityRecId _legalEntityRecId = CompanyInfo::current())
    {
        if (!_worker)
        {
            return 0;
        }

        ResourceRecId resourceRecId = ResourceFacade::findByWorker(_worker, _legalEntityRecId);

        if (!resourceRecId)
        {
            HcmWorker hcmWorker = HcmWorker::find(_worker);
            if (!hcmWorker)
            {
                throw error(strFmt("@SYS22828", funcName()));
            }

            changecompany(CompanyInfo::findRecId(_legalEntityRecId).DataArea)
            {
                WrkCtrTable resourceBackingEntity = WrkCtrTable::findByWorker(_worker);

                ttsbegin;
                if (!resourceBackingEntity)
                {
                    resourceBackingEntity.clear();
                    resourceBackingEntity.initValue();
                    resourceBackingEntity.WrkCtrId   = WrkCtrTable::generateWrkCtrId(hcmWorker.PersonnelNumber);
                    resourceBackingEntity.Name       = hcmWorker.name();
                    resourceBackingEntity.WrkCtrType = WrkCtrType::Personnel;
                    resourceBackingEntity.Worker     = hcmWorker.RecId;
                    resourceBackingEntity.insert();
                }

                resourceRecId = ResourceFacade::registerResource(resourceBackingEntity);
                ttscommit;
            }
        }

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a resource identifier for given resource backing entity thus making it consumable by Project Module.
    /// </summary>
    /// <param name = "_resourceBackingEntity">
    ///    Resource backing entity.
    /// </param>
    /// <returns>
    ///    Identifier of the resource.
    /// </returns>
    private static ResourceRecId registerResource(Common _resourceBackingEntity)
    {
        ResResourceIdentifier resourceIdentifier;

        ResourceRecId resource = ResourceFacade::findByResourceBackingEntity(_resourceBackingEntity);

        if (!resource)
        {
            resourceIdentifier.RefRecId = _resourceBackingEntity.RecId;
            resourceIdentifier.RefTableId = _resourceBackingEntity.TableId;
            resourceIdentifier.insert();

            resource = resourceIdentifier.RecId;
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerWorkCenterResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a resource identifier for given operations resource thus making it consumable by Project Module.
    /// </summary>
    /// <param name = "_resourceBackingEntity">
    ///    Operations resource.
    /// </param>
    /// <returns>
    ///    Identifier of the resource.
    /// </returns>
    public static ResourceRecId registerWorkCenterResource(WrkCtrTable _resourceBackingEntity)
    {
        ResourceWorkerView resourceWorker;
        
        if (_resourceBackingEntity.WrkCtrType != WrkCtrType::Personnel || _resourceBackingEntity.Worker == 0)
        {
            throw error("@Res:ErrorWrkCtrTypeNotPersonnel");
        }

        select firstonly resourceWorker
            where resourceWorker.Worker == _resourceBackingEntity.Worker &&
                resourceWorker.ResourceLegalEntity == CompanyInfo::current();

        if (resourceWorker)
        {
            throw error(strFmt("@Res:ErrorWrkCtrWorkerAlreadyRegistered", _resourceBackingEntity.Name, resourceWorker.Name));
        }

        return ResourceFacade::registerResource(_resourceBackingEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the resource record, but doesn't affect related backing entity record.
    /// </summary>
    /// <param name = "_resource">Resource to be deleted.</param>
    public static void deleteResource(ResourceRecId _resource)
    {
        ResResourceIdentifier resourceIdentifier;

        ttsbegin;
        select forupdate resourceIdentifier
            where resourceIdentifier.RecId == _resource;

        if (resourceIdentifier.validateDelete())
        {
            resourceIdentifier.delete();

            ActivityResourceId activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, 0, _resource, 0);
            container arguments = [activityResourceId];
            Global::runAsync(classNum(ResRollUpWriter),
                staticMethodStr(ResRollUpWriter, removeRollUpForSpecificActivityResourceIdAsync), arguments);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCurrentWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the resource that is associated with the current worker at a given date.
    /// </summary>
    /// <returns>
    ///    The record ID of the resource; otherwise, zero.
    /// </returns>
    public static ResourceRecId findByCurrentWorker()
    {
        HcmWorkerRecId  currentWorker = HcmWorkerLookup::currentWorker();

        ResourceRecId resourceRecId = ResourceFacade::findByWorker(currentWorker);

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByCurrentWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates the resource that is associated with the current worker at a given date.
    /// </summary>
    /// <returns>
    ///    The record Id of the resource; otherwise, zero.
    /// </returns>
    public static ResourceRecId findOrCreateByCurrentWorker()
    {
        HcmWorkerRecId  currentWorker = HcmWorkerLookup::currentWorker();

        ResourceRecId resourceRecId = ResourceFacade::findOrCreateByWorker(currentWorker);

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves calendar used by the resource during provided timeframe.
    /// </summary>
    /// <param name = "_resource">The resource to get calendar of.</param>
    /// <param name = "_startDate">Start of timeframe to get calendar for.</param>
    /// <param name = "_endDate">End of timeframe to get calendar for.</param>
    /// <returns>The calendar used by the resource for the provided timeframe.</returns>
    public static CalendarRecId getCalendar(
        ResourceRecId _resource,
        TransDate _startDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        TransDate _endDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CalendarRecId calendar;
        if (_resource)
        {
            utcdatetime validFromDateTime, validToDateTime;

            validFromDateTime = DateTimeUtil::newDateTime(_startDate, 0);
            validToDateTime = DateTimeUtil::newDateTime(_endDate, #LastSecondOfTheDay);
        
            calendar = ResourceFacade::getCalendarUtc(_resource, validFromDateTime, validToDateTime);
        }

        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarUtc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves calendar used by the resource during provided timeframe.
    /// </summary>
    /// <param name = "_resource">The resource to get calendar of.</param>
    /// <param name = "_validFromDateTime">Start of timeframe to get calendar for.</param>
    /// <param name = "_validToDateTime">End of timeframe to get calendar for.</param>
    /// <returns>The calendar used by the resource for the provided timeframe.</returns>
    public static CalendarRecId getCalendarUtc(
        ResourceRecId _resource,
        utcdatetime _validFromDateTime,
        utcdatetime _validToDateTime)
    {
        CalendarRecId calendar;
        if (_resource)
        {
            if(ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                ResCalendarDateTimeRange calendarDateTimeRange;

                select firstonly Calendar from calendarDateTimeRange
                    where calendarDateTimeRange.Resource == _resource
                        && calendarDateTimeRange.ValidFromDateTime <= _validToDateTime
                        && calendarDateTimeRange.validToDateTime >= _validFromDateTime;

                calendar = calendarDateTimeRange.Calendar;
            }
            else
            {
                ResourceLegalEntityView resourceLegalEntityView;
                
                select firstonly Calendar from resourceLegalEntityView
                    where resourceLegalEntityView.Resource == _resource
                        && resourceLegalEntityView.CalendarValidFrom <= _validToDateTime
                        && resourceLegalEntityView.CalendarvalidTo >= _validFromDateTime;
        
                calendar = resourceLegalEntityView.Calendar;
            }
        }

        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Id of the calendar used by the resource during provided timeframe.
    /// </summary>
    /// <param name = "_resource">The resource to get calendar of.</param>
    /// <param name = "_startDate">Start of timeframe to get calendar for.</param>
    /// <param name = "_endDate">End of timeframe to get calendar for.</param>
    /// <returns>The Id of the calendar used by the resource for the provided timeframe.</returns>
    public static CalendarId getCalendarId(
        ResourceRecId _resource,
        TransDate _startDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        TransDate _endDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CalendarId calendarId;
        WorkCalendarTable workCalendarTable;

        CalendarRecId calendarRecId = ResourceFacade::getCalendar(_resource, _startDate, _endDate);
        if (calendarRecId)
        {
            select firstonly crossCompany CalendarId
                from workCalendarTable
                where workCalendarTable.RecId == calendarRecId;

            calendarId = workCalendarTable.CalendarId;
        }

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves default ledger dimension associated with the resource.
    /// </summary>
    /// <param name = "_resource">Resource to get ledger dimension of.</param>
    /// <returns>Resource default dimension.</returns>
    public static DimensionDefault getDefaultDimension(ResourceRecId _resource)
    {
        return ResourceFacade::getDefaultDimensionByDate(_resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTimeCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the default time category associated with the resource and legal entity.
    /// </summary>
    /// <param name = "_resource">Resource to get time category for.</param>
    /// <returns>Default hour category for this resource.</returns>
    public static ProjCategoryId getDefaultTimeCategoryId(ResourceRecId _resource)
    {
        ProjCategoryId categoryId;
        ProjCategory projCategory;
        ProjCategoryRefId categoryRecId = ResourceSetup::find(_resource).DefaultTimeCategory;

        if (categoryRecId)
        {
            select firstonly crossCompany CategoryId
                from projCategory
                where projCategory.RecId == categoryRecId;

            categoryId = projCategory.CategoryId;
        }

        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the specified resource.
    /// </summary>
    /// <param name = "_resource">Resource to get Id of.</param>
    /// <returns>The Id of the specified resource.</returns>
    public static ResResourceID getId(ResourceRecId _resource)
    {
        ResourceView resource;
        Name id;

        if (_resource)
        {
            select firstonly ResourceId from resource
                where resource.RecId == _resource;

            id = resource.ResourceId;
        }

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>ResourceView</c> buffer of the specified resource.
    /// </summary>
    /// <param name = "_resource">Resource record identifier.</param>
    /// <returns><c>ResourceView</c> buffer.</returns>
    public static ResourceView getResourceView(ResourceRecId _resource)
    {
        ResourceView resource;

        if (_resource)
        {
            select firstonly resource
                where resource.RecId == _resource;
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves legal entity that resource works for.
    /// </summary>
    /// <param name = "_resource">Resource to get legal entity of.</param>
    /// <returns>The legal entity that resource works for.</returns>
    public static LegalEntityRecId getLegalEntity(ResourceRecId _resource)
    {
        LegalEntityRecId legalEntity;

        DataAreaId dataAreaId = ResourceFacade::getLegalEntityId(_resource);
        if (dataAreaId)
        {
            legalEntity = CompanyInfo::findDataArea(dataAreaId).RecId;
        }

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the legal entity that resource works for.
    /// </summary>
    /// <param name = "_resource">Resource to get legal entity of.</param>
    /// <returns>The Id of the legal entity that resource works for.</returns>
    public static DataAreaId getLegalEntityId(ResourceRecId _resource)
    {
        ResourceView resource;
        DataAreaId dataAreaId;

        if (_resource)
        {
            select firstonly ResourceCompanyId from resource
                where resource.RecId == _resource;

            dataAreaId = resource.ResourceCompanyId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the resource.
    /// </summary>
    /// <param name = "_resource">Resource to get the name of.</param>
    /// <returns>The name of the resource.</returns>
    public static ResResourceName getName(ResourceRecId _resource)
    {
        ResourceView resource;
        ResResourceName name;

        if (_resource)
        {
            select firstonly Name from resource
                where resource.RecId == _resource;

            name = resource.Name;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves work calendar period defined for the resource.
    /// </summary>
    /// <param name = "_resource">Resource to get work calendar period defined for.</param>
    /// <returns>The work calendar period defined for the resource.</returns>
    public static PeriodRecId getPeriod(ResourceRecId _resource)
    {
        return ResourceSetup::find(_resource).Period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Id of the work calendar period defined for the resource.
    /// </summary>
    /// <param name = "_resource">Resource to get work calendar period defined for.</param>
    /// <returns>The Id of the work calendar period defined for the resource.</returns>
    public static PeriodId getPeriodId(ResourceRecId _resource)
    {
        PeriodId periodId;
        ProjPeriodTable projPeriodTable;

        PeriodRecId periodRecId = ResourceFacade::getPeriod(_resource);
        if (periodRecId)
        {
            select firstonly crossCompany PeriodId from projPeriodTable
                where projPeriodTable.RecId == periodRecId;

            periodId = projPeriodTable.PeriodId;
        }

        return periodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get resource category base on the the date and data area Id.
    /// </summary>
    /// <param name="_resource">
    /// The resource RecId.
    /// </param>
    /// <param name="_date">
    /// The specify date.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area Id of the resoruce.
    /// </param>
    /// <returns>
    /// The resource category rec Id.
    /// </returns>
    public static ResourceCategoryRecId getResourceCategory(
        ResourceRecId   _resource,
        Date            _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        DataAreaId      _dataAreaId = curExt())
    {
        ResourceCategoryRecId resourceCategory;

        if (_resource)
        {
            ResourceResourceCategorySetup resourceResourceCategorySetup = ResourceResourceCategorySetup::findByResource(_resource, _date, _dataAreaId);

            if (resourceResourceCategorySetup)
            {
                resourceCategory = resourceResourceCategorySetup.ResourceCategory;
            }
        }

        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the worker associated with the resource.
    /// </summary>
    /// <param name = "_resource">Resource to get worker for.</param>
    /// <returns>The worker associated with the resource.</returns>
    public static ProjWorkerRecId getWorker(ResourceRecId _resource)
    {
        ResourceView resource;
        ProjWorkerRecId worker;

        if (_resource)
        {
            select firstonly Type, Worker from resource
                where resource.RecId == _resource;

            if (resource.Type == WrkCtrType::Personnel)
            {
                worker = resource.Worker;
            }
        }

        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonnelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the personnel number id of the worker related to the current resource.
    /// </summary>
    /// <param name="_resource">Record id of the resource that is related to the worker.</param>
    /// <returns>The personnel number id of the resource.</returns>
    public static HcmPersonnelNumberId getPersonnelId(ResourceRecId _resource)
    {
        var worker = HcmWorker::find(ResourceFacade::getWorker(_resource));

        return worker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the phone number of the worker related to the current resource.
    /// </summary>
    /// <param name="_resource">Record id of the resource that is related to the worker.</param>
    /// <returns>The phone number of the resource.</returns>
    public static Phone getPhone(ResourceRecId _resource)
    {
        var worker = HcmWorker::find(ResourceFacade::getWorker(_resource));

        return worker.phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the manager of the worker related to the current resource.
    /// </summary>
    /// <param name="_resource">Record id of the resource that is related to the worker.</param>
    /// <returns>Manager of the currrent worker.</returns>
    public static HcmWorker getManager(ResourceRecId _resource)
    {
        var workerRecId = ResourceFacade::getWorker(_resource);

        var hcmPositionId = HcmWorkerHelper::getPrimaryPosition(workerRecId);

        var hcmManagerId = HcmPosition::getReportsToWorker(hcmPositionId);

        return HcmWorker::find(hcmManagerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResourceInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record ID of the resource belongs to this current legal entity.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The record ID of the resource.
    /// </param>
    /// <returns>
    /// Returns true if the record ID of the resource belongs to this current legal entity; otherwise, false.
    /// </returns>
    public static boolean isResourceInCurrentCompany(ResourceRecId _resourceRecId)
    {
        ResourceView    resource;
        boolean         inCurrentCompany = true;

        if (_resourceRecId)
        {
            select firstonly resource
                where resource.RecId == _resourceRecId &&
                        resource.ResourceCompanyId == curExt();

            if (!resource)
            {
                inCurrentCompany = false;
            }
        }

        return inCurrentCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceIsInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record ID of the resource belongs to the current legal entity.
    /// </summary>
    /// <param name="_resourceRecId">
    /// The record ID of the resource.
    /// </param>
    /// <returns>
    /// Returns true if the record ID of the resource belongs to the current legal entity; otherwise, returns false and throws check failure..
    /// </returns>
    public static boolean checkResourceIsInCurrentCompany(ResourceRecId _resourceRecId)
    {
        boolean success = ResourceFacade::isResourceInCurrentCompany(_resourceRecId);

        if (!success)
        {
            return checkFailed("@Res:ResourceIsNotInCurrentCompany");
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useResourceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if effective labour rate should be used during cost calculation for the specified resource.
    /// </summary>
    /// <param name = "_resource">Resource to determine for.</param>
    /// <returns>true if effective labour rate should be used during cost calculation; otherwise, false.</returns>
    public static boolean useResourceRate(ResourceRecId _resource)
    {
        return ResourceSetup::find(_resource).UseResourceRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if project resource validaton checks are enabled for the specified resource.
    /// </summary>
    /// <param name = "_resource">Resource to check.</param>
    /// <returns>true if project resource validaton checks are enabled; otherwise, false.</returns>
    public static boolean validateProjectResource(ResourceRecId _resource)
    {
        return ResourceSetup::find(_resource).ValidateProjectResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if resource category validaton checks are enabled for the specified resource.
    /// </summary>
    /// <param name = "_resource">Resource to check.</param>
    /// <returns>true if resource category validaton checks are enabled; otherwise, false.</returns>
    public static boolean validateResourceCategory(ResourceRecId _resource)
    {
        return ResourceSetup::find(_resource).ValidateResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxHoursCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the resource max hours calendar rec ID.
    /// </summary>
    /// <param name = "_resource">The resource rec ID.</param>
    /// <returns>Max hours calendar rec ID.</returns>
    public static TSMaxHoursCalendarRecId getMaxHoursCalendar(ResourceRecId       _resource)
    {
        return ResourceSetup::find(_resource).MaxHoursCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxHoursCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the resource max hours calendar ID.
    /// </summary>
    /// <param name = "_resource">The resource rec ID.</param>
    /// <returns>Max hours calendar ID.</returns>
    public static TSMaxHoursCalendar getMaxHoursCalendarId(ResourceRecId       _resource)
    {
        TSMaxHoursCalendar      calendarId;
        WorkCalendarTable       workCalendarTable;

        TSMaxHoursCalendarRecId calendarRecId = ResourceFacade::getMaxHoursCalendar(_resource);
        if (calendarRecId)
        {
            select firstonly crossCompany CalendarId
                from workCalendarTable
                where workCalendarTable.RecId == calendarRecId;

            calendarId = workCalendarTable.CalendarId;
        }

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxWorkingHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the defined seven days max working hours.
    /// </summary>
    /// <param name = "_resource">The resource rec ID.</param>
    /// <returns>The resource MaxWorkingHours array</returns>
    public static TSMaxWorkingHours getMaxWorkingHours(ResourceRecId       _resource)
    {
        return ResourceSetup::find(_resource).MaxWorkingHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequireStartStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if start and stop time are required for timesheets of a given resource.
    /// </summary>
    /// <param name = "_resource">
    ///    The resource rec ID to check if start and stop times are required for timesheets.
    /// </param>
    /// <param name = "_projParameters">
    ///    The project parameters for the current company; optional.
    /// </param>
    /// <returns>
    ///    true if timesheets are required; otherwise, false.
    /// </returns>
    public static boolean getRequireStartStopTime(
        ResourceRecId       _resource,
        ProjParameters      _projParameters  = null)
    {
        ProjParameters  projParameters = _projParameters ? _projParameters : ProjParameters::find();
        boolean         result         = projParameters.RequireStartStopTime;

        if (result)
        {
            result = ResourceSetup::find(_resource).RequireStartStopTime;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefToHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the HcmWorker Form for a given resource.
    /// </summary>
    /// <param name = "_resourceRecId">RecId of the resource that is related to the worker</param>
    /// <param name = "_caller">UI element to open the form from.</param>
    public static void jumpRefToHcmWorker(ResourceRecId _resourceRecId, Object _caller)
    {
        var workerRecId = ResourceFacade::getWorker(_resourceRecId);

        if (workerRecId)
        {
            Args args = new Args();
            args.lookupRecord(HcmWorker::find(workerRecId));
            args.caller(_caller);

            ResourceFacade::jumpRef(
                               args,
                               menuitemDisplayStr(HcmWorker),
                               MenuItemType::Display);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    private static void jumpRef(Args _args, str _menuItem, MenuItemType _menuItemType)
    {
        MenuFunction menuFunction = new MenuFunction(_menuItem, _menuItemType);
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotTerminated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the the worker resource is not terminated.
    /// </summary>
    /// <param name = "_resourceRecId">Resource rec Id.</param>
    /// <returns>True if the worker resource is not terminated.</returns>
    public static boolean validateNotTerminated(ResourceRecId _resourceRecId)
    {
        boolean retOk = true;

        ProjWorkerRecId worker = ResourceFacade::getWorker(_resourceRecId);
        LegalEntityRecId legalEntity = ResourceFacade::getLegalEntity(_resourceRecId);
        if (worker &&  HcmWorker::find(worker).workerStatus(legalEntity) == HcmWorkerStatus::Terminated
            && !ProjParameters::find().ShowInactiveEmployees)
        {
            retOk = checkFailed("@SYS39651");
        }

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sales price for the specified resource and date.
    /// </summary>
    /// <param name = "_resource">Resource identifier.</param>
    /// <param name = "_transDate">Sales price date.</param>
    /// <returns>Sales price for specified date.</returns>
    public static SalesPrice getSalesPrice(ResourceRecId _resource, TransDate _transDate)
    {
        SalesPrice resourcePrice = 0;
        boolean priceFound = false;

        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
            '',
            _resource,
            '',
            '',
            0,
            CompanyInfoHelper::standardCurrency(),
            _transDate,
            '',
            '',
            '',
            0);
        [resourcePrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false, false);

        return resourcePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves cost price for the specified resource and date.
    /// </summary>
    /// <param name = "_resource">Resource identifier.</param>
    /// <param name = "_transDate">Sales price date.</param>
    /// <param name = "_activity">Optional Activity identifier.</param>
    /// <returns>Sales price for specified date.</returns>
    public static CostPrice getCostPrice(ResourceRecId _resource, TransDate _transDate, ActivityRecId _activity = 0)
    {
        CostPrice resourcePrice = 0;

        if (_resource)
        {
            ProjId projectId;

            if (_activity)
            {
                projectId = ActivityFacade::getProjId(_activity);
            }

            if (ResourceFacade::isResourceInCurrentCompany(_resource))
            {
                ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(projectId, _resource, '', '', _transDate, '', '');
                resourcePrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
            }
            else
            {
                ProjTable project = ProjTable::find(projectId);
                DataAreaId resourceCompany = ResourceFacade::getLegalEntityId(_resource);
                
                // Get the resource company currency ID.
                CurrencyCode resourceCompanyCurrencyId;
                changecompany(resourceCompany)
                {
                    resourceCompanyCurrencyId = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
                }

                // Lookup by TransType as timesheet which is hours. The method findTransferPrice() should lookup price value for both timesheet and all TransType.
                resourcePrice = ProjTransferPrice::findTransferPrice(_resource, curExt(), project.RecId, 0, '',
                    _transDate, resourceCompany, resourceCompanyCurrencyId, 0, 0.00, 0.00, ProjTransferPriceTransType::Timesheet);

                // Convert currency if necessary.
                CurrencyCode localCompanyCurrencyId = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
                if (localCompanyCurrencyId != resourceCompanyCurrencyId)
                {
                    resourcePrice = ExchangeRateHelper::curPrice2CurPrice(resourcePrice, resourceCompanyCurrencyId, localCompanyCurrencyId);
                }
            }
        }
        return resourcePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the resource with the specified name.
    /// </summary>
    /// <param name = "_name">Resource name.</param>
    /// <param name = "_recipientCompany">Recipient company of the resource.</param>
    /// <returns>ResCompanyResourceDetailView record.</returns>
    [SysObsoleteAttribute('This method is replaced by findByNameV2 because ResCompanyResourceDetailView is obsolete.', false, 30\06\2018)]
    public static ResCompanyResourceDetailView findByName(Name _name, SelectableDataArea _recipientCompany = curExt())
    {
        ResCompanyResourceDetailView resource;
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the resource with the specified name.
    /// </summary>
    /// <param name = "_name">Resource name.</param>
    /// <param name = "_recipientCompany">Recipient company of the resource.</param>
    /// <returns>ResCompanyResourceView record.</returns>
    public static ResCompanyResourceView findByNameV2(Name _name, SelectableDataArea _recipientCompany = curExt())
    {
        ResCompanyResourceView resource;

        if (_name)
        {
            select firstonly resource
                where resource.RecipientCompany == _recipientCompany
                && resource.Name == _name;
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDateTime</Name>
				<Source><![CDATA[
    private static utcdatetime getDefaultDateTime()
    {
        return utcdatetimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastSecondOfTheDay</Name>
				<Source><![CDATA[
    private static utcdatetime getLastSecondOfTheDay(utcdatetime _datetime)
    {
        return DateTimeUtil::newDateTime(DateTimeUtil::date(_datetime), #LastSecondOfTheDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestBookingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the resource is booked on.
    /// </summary>
    /// <param name = "_resource">Resource resource identifier.</param>
    /// <returns>The latest date time that the resource is booked on.</returns>
    public static utcdatetime getLatestBookingDateTime(ResourceRecId _resource)
    {
        ResBooking          resBooking;
        PSAProjSchedRole    teamTable;

        select maxof(Day) from resBooking
            join teamTable
            where teamTable.Resource == _resource
                && resBooking.ActivityResource == teamTable.RecId;

        return resBooking ? ResourceFacade::getLastSecondOfTheDay(resBooking.Day) : ResourceFacade::getDefaultDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestAssignmentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the resource has assignments on.
    /// </summary>
    /// <param name = "_resource">Resource rec Id.</param>
    /// <returns>The earliest date time that the resource has assingments on.</returns>
    public static utcdatetime getLatestAssignmentDateTime(ResourceRecId _resource)
    {
        ResAssignment       resAssignment;
        PSAProjSchedRole    teamTable;

        select maxof(Day) from resAssignment
            join teamTable
            where teamTable.Resource == _resource
                && resAssignment.ActivityResource == teamTable.RecId;

        return resAssignment ? ResourceFacade::getLastSecondOfTheDay(resAssignment.Day) : ResourceFacade::getDefaultDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestReservationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the resource has bookings or assignments on.
    /// </summary>
    /// <param name = "_resource">Resource rec Id.</param>
    /// <returns>The latest date time that the resource has bookings or assingments on.</returns>
    public static utcdatetime getLatestReservationDateTime(ResourceRecId _resource)
    {
        utcdatetime   latestDate;
        utcdatetime   defaultDate = ResourceFacade::getDefaultDateTime();
        utcdatetime   bookingLatestDate = ResourceFacade::getLatestBookingDateTime(_resource);
        utcdatetime   assignmentLatestDate = ResourceFacade::getLatestAssignmentDateTime(_resource);

        if ((bookingLatestDate != defaultDate) && (assignmentLatestDate != defaultDate))
        {
            latestDate = bookingLatestDate > assignmentLatestDate ? bookingLatestDate : assignmentLatestDate;
        }
        else if (bookingLatestDate != defaultDate)
        {
            latestDate = bookingLatestDate;
        }
        else
        {
            latestDate = assignmentLatestDate;
        }

        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarByActivityAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calendar record identifier for the resource by the specific activity record identifier and scheduling date.
    /// </summary>
    /// <param name = "_resource">Resource record identifier.</param>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <param name = "_schedulingDate">Scheduling date.</param>
    /// <returns>Calendar record identifier.</returns>
    public static CalendarRecId getCalendarByActivityAndDate(ResourceRecId _resource, ActivityRecId _activity, Date _schedulingDate)
    {
        CalendarRecId calendar;

        if (_resource && _activity)
        {
            boolean useActivityCalendar = ActivityFacade::useActivityCalendar(_activity);
            if (useActivityCalendar)
            {
                calendar = ActivityFacade::getCalendar(_activity);
            }
            else
            {
                calendar = ResourceFacade::getCalendar(_resource, _schedulingDate, _schedulingDate);
            }
        }
        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves default ledger dimension associated with the resource.
    /// </summary>
    /// <param name = "_resource">
    /// Resource to get ledger dimension of.
    /// </param>
    /// <param name = "_validFrom">
    /// Date to get ledger dimension of.
    /// </param>
    /// <returns>Resource default dimension.</returns>
    public static DimensionDefault getDefaultDimensionByDate(ResourceRecId _resource, utcdatetime _validFrom = DateTimeUtil::utcNow())
    {
        DimensionDefault defaultDimension;
        
        if (_resource)
        {
            ProjWorkerRecId worker = ResourceFacade::getWorker(_resource);

            if (worker)
            {
                LegalEntityRecId workerLegalEntity = ResourceFacade::getLegalEntity(_resource);

                TSTimesheetLineParameters insertParameters = TSTimesheetLineParameters::current();

                utcdatetime validTo;

                if (insertParameters)
                {
                    validTo = insertParameters.validTo();
                }

                if (validTo != DateTimeUtil::minValue())
                {
                    defaultDimension = HcmEmployment::findByWorkerLegalEntity(worker, workerLegalEntity, _validFrom, validTo).DefaultDimension;
                }
                else
                {
                    defaultDimension = HcmEmployment::findByWorkerLegalEntity(worker, workerLegalEntity, _validFrom).DefaultDimension;
                }
            }
            else
            {
                ResResourceWorkCenterView resource;
                DataAreaId dataAreaId = ResourceFacade::getLegalEntityId(_resource);

                select firstonly DefaultDimension from resource
                    where resource.RecId == _resource &&
                    resource.ResourceCompanyId == dataAreaId;

                defaultDimension = resource.DefaultDimension;
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfWorkingDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of working days for the specified resource.
    /// </summary>
    /// <param name = "_resourceRecId">Resource record ID.</param>
    /// <param name = "_startDateTime">Start date time.</param>
    /// <param name = "_endDateTime">End date time.</param>
    /// <returns>Number of working days.</returns>
    [Hookable(false), Wrappable(false)]
    public static int getNumberOfWorkingDays(ResourceRecId _resourceRecId, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        int numOfWorkingDays;

        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            ResCalendarCapacityDayView calendarCapacityDayView;
            ResCalendarDateTimeRange calendarDateTimeRange;
            ResProjectResource projectResource;
            
            select count(RecId) from calendarCapacityDayView
                where calendarCapacityDayView.Day >= _startDateTime &&
                    calendarCapacityDayView.Day <= _endDateTime &&
                    calendarCapacityDayView.Capacity > 0
            exists join calendarDateTimeRange
                where calendarDateTimeRange.Calendar == calendarCapacityDayView.Calendar &&
                    calendarDateTimeRange.ValidFromDateTime <= calendarCapacityDayView.Day &&
                    calendarDateTimeRange.ValidToDateTime >= calendarCapacityDayView.Day
            exists join projectResource
                where projectResource.Resource == calendarDateTimeRange.Resource &&
                    projectResource.RecipientCompany == projectResource.SourceCompany &&
                    projectResource.Resource == _resourceRecId;
            
            numOfWorkingDays = int642int(calendarCapacityDayView.RecId);
        }
        else
        {
            ResCalendarCapacityDayView calendarCapacityDayView;
            ResourceLegalEntityView resourceLegalEntityView;
            
            select count(RecId) from calendarCapacityDayView
                where calendarCapacityDayView.Day >= _startDateTime &&
                    calendarCapacityDayView.Day <= _endDateTime &&
                    calendarCapacityDayView.Capacity > 0
            exists join resourceLegalEntityView
                where resourceLegalEntityView.Calendar == calendarCapacityDayView.Calendar &&
                    resourceLegalEntityView.CalendarValidFrom <= calendarCapacityDayView.Day &&
                    resourceLegalEntityView.CalendarValidTo >= calendarCapacityDayView.Day &&
                    resourceLegalEntityView.Resource == _resourceRecId;

            numOfWorkingDays = int642int(calendarCapacityDayView.RecId);
        }

        return numOfWorkingDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get resource calendar capacity in seconds.
    /// </summary>
    /// <param name = "_resourceRecId">Resource record ID.</param>
    /// <param name = "_startDateTime">Start date time.</param>
    /// <param name = "_endDateTime">End date time.</param>
    /// <returns>Resource calendar capacity in seconds.</returns>
    [Hookable(false), Wrappable(false)]
    public static real getCalendarCapacity(ResourceRecId _resourceRecId, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        real capacity;

        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            ResCalendarCapacityView calendarCapacityView;
            ResCalendarDateTimeRange calendarDateTimeRange;
            ResProjectResource projectResource;
            
            select sum(Capacity) from calendarCapacityView
                where calendarCapacityView.Hour >= _startDateTime &&
                    calendarCapacityView.Hour <= _endDateTime
            exists join calendarDateTimeRange
                where calendarDateTimeRange.Calendar == calendarCapacityView.Calendar &&
                    calendarDateTimeRange.ValidFromDateTime <= calendarCapacityView.Hour &&
                    calendarDateTimeRange.ValidToDateTime >= calendarCapacityView.Hour
            exists join projectResource
                where projectResource.Resource == calendarDateTimeRange.Resource &&
                    projectResource.RecipientCompany == projectResource.SourceCompany &&
                    projectResource.Resource == _resourceRecId;
            
            capacity = calendarCapacityView.Capacity;
        }
        else
        {
            ResCalendarCapacityView calendarCapacityView;
            ResourceLegalEntityView resourceLegalEntityView;
            
            select sum(Capacity) from calendarCapacityView
                where calendarCapacityView.Hour >= _startDateTime &&
                    calendarCapacityView.Hour <= _endDateTime
            exists join resourceLegalEntityView
                where resourceLegalEntityView.Calendar == calendarCapacityView.Calendar &&
                    resourceLegalEntityView.CalendarValidFrom <= calendarCapacityView.Hour &&
                    resourceLegalEntityView.CalendarValidTo >= calendarCapacityView.Hour &&
                    resourceLegalEntityView.Resource == _resourceRecId;

            capacity = calendarCapacityView.Capacity;
        }

        return capacity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>