<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationLedgerDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciationLedgerDP_IT</c> class provides data for the <c>AssetDepreciationLedger_IT</c> SQL Server Reporting Services (SSRS) report.
/// </summary>
[SRSReportQueryAttribute(querystr(AssetDepreciationLedger_IT)), SRSReportParameterAttribute(classstr(AssetDepreciationLedgerContract_IT))]
public class AssetDepreciationLedgerDP_IT extends SrsReportDataProviderPreProcessTempDB
{
    private FromDate fromDate;
    private ToDate toDate;
    private NoYes detailedPrint;
    private TmpAssetFixedBook tmpAssetFixedBook;
    private AssetSumCalc_Trans  assetTransPrior;
    private AssetSumCalc_Trans  assetTransThis;
    private AssetBook assetBookQuery;
    private TmpAssetFixedBook prevTmpAssetFixedBookAssetType;
    private TmpAssetFixedBook prevTmpAssetFixedBookAssetGroup;
    private TmpAssetFixedBook prevTmpAssetFixedBookAssetAcquisitionYear;
    private TmpAssetFixedBook prevTmpAssetFixedBookAssetId;
    private TmpAssetFixedBook prevTmpAssetFixedBookAssetBookId;
    private Amount totalCost;
    private Amount totalPriorCost;
    private Amount assetScrapValue;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00017, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>accDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated depreciation asset amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private AssetAmount accDepreciation()
    {
        return assetTransPrior.depreciationValue() + assetTransPrior.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accDepreciationEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated depreciation end period asset amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private AssetAmount accDepreciationEnd()
    {
        return this.accDepreciation() + this.accExtraDepreciation() + this.totalDepreciationInPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeUpDownAdjValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the write-down or write-up adjustment amounts in the period.
    /// </summary>
    /// <returns>The Write Down or Write Up Adjustment amounts.</returns>
    public AssetWriteUpAdj writeUpDownAdjValue()
    {
        return assetTransThis.writeUpAdjValue()
            + assetTransThis.writeDownAdjValue()
            + assetTransPrior.writeUpAdjValue()
            + assetTransPrior.writeDownAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the revaluation amounts in the period.
    /// </summary>
    /// <returns>
    ///    The revaluation amounts.
    /// </returns>
    public AssetAmount revaluationValue()
    {
        return assetTransThis.revaluationValue() +
               assetTransPrior.revaluationValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accExtraDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated extraordinary depreication asset amount.
    /// </summary>
    /// <returns>
    /// The calculated amount
    /// </returns>
    private AssetAmount accExtraDepreciation()
    {
        return assetTransPrior.extraDepreciationValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAccDepreciationEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated depreciation end period with disposal.
    /// </summary>
    /// <returns>
    /// The calculated amount
    /// </returns>
    private AssetAmount assetAccDepreciationEnd()
    {
        return this.accDepreciation()
            + this.accExtraDepreciation()
            + this.totalDepreciationInPeriod()
            + this.disposalInPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>assetGroupName</c> value combined with the group ID.
    /// </summary>
    /// <param name="_assetGroupId">
    /// The group ID.
    /// </param>
    /// <returns>
    /// The combined name.
    /// </returns>
    private Name assetGroupName(AssetGroupId _assetGroupId)
    {
        return _assetGroupId + ' ' + AssetGroup::find(_assetGroupId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the asset name of an asset ID.
    /// </summary>
    /// <param name="_assetId">
    /// An asset ID.
    /// </param>
    /// <returns>
    /// The asset name of the asset ID.
    /// </returns>
    private AssetName assetName(AssetId _assetId)
    {
        return AssetTable::find(_assetId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount in the period.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private Amount depreciationInPeriod()
    {
        return assetTransThis.depreciationValue() + assetTransThis.depreciationAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationInPeriodPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the depreciation percentage in the period.
    /// </summary>
    /// <returns>
    /// The calculated percentage.
    /// </returns>
    private Percent depreciationInPeriodPct()
    {
        if (totalCost - assetScrapValue)
        {
            return (assetTransThis.depreciationValue() + assetTransThis.depreciationAdjValue()) * 100 / (totalCost + this.revaluationValue() - assetScrapValue);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposalInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the disposal amount in the period.
    /// </summary>
    /// <returns>
    /// The disposal amount.
    /// </returns>
    private Amount disposalInPeriod()
    {
        return assetTransThis.depreciationValue_priorYears()
            +  assetTransThis.depreciationAdjValue_priorYears()
            +  assetTransThis.extraDepreciationValue_priorYears()
            +  assetTransThis.depreciationValue_thisYear()
            +  assetTransThis.depreciationAdjValue_thisYear()
            +  assetTransThis.extraDepreciationValue_thisYear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendForGroupAssetAcquisitionYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the values from the previous record if the group for the <c>AssetAcquisitionYear</c> value is not changed.
    /// </summary>
    private void extendForGroupAssetAcquisitionYear()
    {
        this.extendForGroupAssetGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendForGroupAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the values from the previous record if the group for the asset group is not changed.
    /// </summary>
    private void extendForGroupAssetGroup()
    {
        tmpAssetFixedBook.AssetGroupName = prevTmpAssetFixedBookAssetGroup.AssetGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendForGroupAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the values from the previous record if the group for the asset book ID is not changed
    /// </summary>
    private void extendForGroupAssetId()
    {
        this.extendForGroupAssetAcquisitionYear();

        tmpAssetFixedBook.AssetNameValue = prevTmpAssetFixedBookAssetId.AssetNameValue;
        tmpAssetFixedBook.PeriodTxt = prevTmpAssetFixedBookAssetId.PeriodTxt;

        totalCost += tmpAssetFixedBook.AmountEnd;
        totalPriorCost += tmpAssetFixedBook.AmountStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Caculates the extraordinary depreciation amount in the period.
    /// </summary>
    /// <returns>
    ///    The caculated amount.
    /// </returns>
    private Amount extraDepreciationInPeriod()
    {
        return assetTransThis.extraDepreciationValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationInPeriodPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Caculates the percentage of the extraordinary depreciation in the period.
    /// </summary>
    /// <returns>
    ///    The calculated percentage.
    /// </returns>
    private Percent extraDepreciationInPeriodPct()
    {
        if (totalCost - assetScrapValue)
        {
            return assetTransThis.extraDepreciationValue() * 100 / (totalCost - assetScrapValue);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraDepreciationInPriorPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the percentage of the extra depreciation in the previous period.
    /// </summary>
    /// <returns>
    ///    The calculated percentage.
    /// </returns>
    private Percent extraDepreciationInPriorPct()
    {
        if (totalPriorCost - assetScrapValue)
        {
            return assetTransPrior.extraDepreciationValue() * 100 / (totalPriorCost - assetScrapValue);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpAssetFixedBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills in the records for the specified asset.
    /// </summary>
    /// <param name="_assetTableQuery">
    ///    The asset for which to fill in records.
    /// </param>
    public void fillTmpAssetFixedBook(AssetTable _assetTableQuery)
    {
        int         i;
        AssetAmount netBookAmount;

        assetTransPrior = AssetSumCalc_Trans::newAssetYear(
                            assetBookQuery.AssetId,
                            assetBookQuery.BookId,
                            toDate,
                            AssetYear::PriorYears);
        assetTransThis  = AssetSumCalc_Trans::newAssetYear(
                            assetBookQuery.AssetId,
                            assetBookQuery.BookId,
                            toDate,
                            AssetYear::ThisYear);
        netBookAmount   = this.accDepreciationEnd() + this.disposalInPeriod();

        for (i=0 ; i<=2 ; i++)
        {
            tmpAssetFixedBook.AssetTransType        = i;
            tmpAssetFixedBook.AssetAcquisitionDate  = assetBookQuery.AcquisitionDate;
            tmpAssetFixedBook.AssetAcquisitionYear  = year(assetBookQuery.AcquisitionDate);

            tmpAssetFixedBook.AssetType             = _assetTableQuery.AssetType;
            tmpAssetFixedBook.AssetGroupId          = assetBookQuery.AssetGroup;
            tmpAssetFixedBook.AssetId               = assetBookQuery.AssetId;
            tmpAssetFixedBook.AssetBookId           = assetBookQuery.BookId;
            tmpAssetFixedBook.DispInPeriod          = 0;

            switch (i)
            {
                case 0 :
                    tmpAssetFixedBook.LineNAme      = "@SYS95941";
                    tmpAssetFixedBook.AmountStart   = assetTransPrior.acquisitionValue()
                                                    + assetTransPrior.acquisitionAdjValue();

                    tmpAssetFixedBook.Addition      = assetTransThis.acquisitionValue()
                                                    + assetTransThis.acquisitionAdjValue();

                    tmpAssetFixedBook.Disposal      = assetTransThis.acquisitionValue_priorYears()
                                                    + assetTransThis.acquisitionAdjValue_priorYears()
                                                    + assetTransThis.acquisitionValue_thisYear()
                                                    + assetTransThis.acquisitionAdjValue_thisYear();

                    tmpAssetFixedBook.AmountEnd     = tmpAssetFixedBook.AmountStart
                                                    + tmpAssetFixedBook.Addition
                                                    + tmpAssetFixedBook.Disposal;

                    tmpAssetFixedBook.DispInPeriod  = assetTransThis.disposalValue();

                    break;

                case 1 :
                    tmpAssetFixedBook.LineNAme = "@SYS95942";
                    tmpAssetFixedBook.AmountStart   = (assetTransPrior.revaluationValue() > 0 ? assetTransPrior.revaluationValue() : 0)
                                                    + assetTransPrior.writeUpAdjValue();

                    tmpAssetFixedBook.Addition      = (assetTransThis.revaluationValue() > 0 ? assetTransThis.revaluationValue() : 0)
                                                    + assetTransThis.writeUpAdjValue();

                    tmpAssetFixedBook.Disposal      = (assetTransThis.revaluationValue_priorYears() > 0 ? assetTransThis.revaluationValue_priorYears() : 0)
                                                    + assetTransThis.writeUpAdjValue_priorYears();

                    tmpAssetFixedBook.AmountEnd     = tmpAssetFixedBook.AmountStart + tmpAssetFixedBook.Addition + tmpAssetFixedBook.Disposal;
                    break;

                case 2 :
                    tmpAssetFixedBook.LineNAme = "@SYS95943";
                    tmpAssetFixedBook.AmountStart   = (assetTransPrior.revaluationValue() < 0 ? assetTransPrior.revaluationValue() : 0)
                                                    + assetTransPrior.writeDownAdjValue();

                    tmpAssetFixedBook.Addition      = (assetTransThis.revaluationValue() < 0 ? assetTransThis.revaluationValue() : 0)
                                                    + assetTransThis.writeDownAdjValue();

                    tmpAssetFixedBook.Disposal      = (assetTransThis.revaluationValue_priorYears() < 0 ? assetTransThis.revaluationValue_priorYears() : 0)
                                                    + assetTransThis.writeDownAdjValue_priorYears();

                    tmpAssetFixedBook.AmountEnd     = tmpAssetFixedBook.AmountStart + tmpAssetFixedBook.Addition + tmpAssetFixedBook.Disposal;

                    break;
            }

            netBookAmount += tmpAssetFixedBook.AmountEnd;
            tmpAssetFixedBook.insert();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the parameters from the report dialog box and sets them to the relevent variables.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    private boolean getFromDialog()
    {
        boolean ret = true;

        AssetDepreciationLedgerContract_IT contract = this.parmDataContract() as AssetDepreciationLedgerContract_IT;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        detailedPrint = contract.parmDetailedPrint();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssetFixedBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the temporary <c>TmpAssetFixedBook</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TmpAssetFixedBook</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(TmpAssetFixedBook))]
    public TmpAssetFixedBook getTmpAssetFixedBook()
    {
        select * from tmpAssetFixedBook;
        return tmpAssetFixedBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Caculates the net book value.
    /// </summary>
    /// <returns>
    ///    The calculated value.
    /// </returns>
    private AssetAmount netBookValue()
    {
        return assetTransThis.netBookValue() + assetTransPrior.netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>period</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the string text for the period.
    /// </summary>
    /// <returns>
    ///    The text of the period.
    /// </returns>
    private str period()
    {
        return "@SYS40"
             + ': '
             + date2str(fromDate, 2, 2, 2, 2, 2, 2, DateFlags::None)
             + '..' + date2str(toDate, 2, 2, 2, 2, 2, 2, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the SQL Services Reporting Services data source.
    /// </summary>
    public void processReport()
    {
        AssetTable           assetTableQuery;
        CurrentOperationsTax currentOperationsTax;
        AssetTrans           assetTrans;
        QueryBuildRange      qbRange;
        QueryRun             qr;
        QueryBuildDataSource qbds;

        boolean firstRecord;

        tmpAssetFixedBook.clear();

        this.getFromDialog();

        qr = new QueryRun(this.parmQuery());

        qbds = qr.query().dataSourceTable(tablenum(AssetBookTable));
        if (qbds)
        {
            qbRange = qbds.findRange(fieldnum(AssetBookTable, CurrentOperationsTax));
            if (qbRange && !qbRange.value())
            {
                qbRange.value(enum2str(CurrentOperationsTax::Current));
            }
        }

        qbRange = qr.query().dataSourceTable(tablenum(AssetBookTable)).findRange(fieldnum(AssetBookTable, CurrentOperationsTax));
        if (qbRange
            && strltrim(qbRange.value()))
        {
            currentOperationsTax = str2enum(currentOperationsTax, strltrim(qbRange.value()));
        }

        while (qr.next())
        {
            assetBookQuery  = qr.get(tablenum(AssetBook));
            assetTableQuery = qr.get(tablenum(AssetTable));

            if (assetBookQuery.AcquisitionDate <= toDate
                && (assetBookQuery.DisposalDate >  fromDate
                    || !assetBookQuery.DisposalDate)
                && assetTableQuery.RecId)
            {
                if (assetBookQuery.Status != AssetStatus::NoAcquisition)
                {
                    this.fillTmpAssetFixedBook(assetTableQuery);
                }
                else
                {
                    select firstonly assetTrans
                        where assetTrans.AssetGroup == assetTableQuery.AssetGroup
                            && assetTrans.AssetId   == assetTableQuery.AssetId
                            && assetTrans.TransDate >  fromDate;

                    if (assetTrans)
                    {
                        this.fillTmpAssetFixedBook(assetTableQuery);
                    }
                }
            }
        }

        firstRecord = true;

        ttsbegin;

        while select forupdate tmpAssetFixedBook
            order by tmpAssetFixedBook.AssetType, tmpAssetFixedBook.AssetGroupId, tmpAssetFixedBook.AssetAcquisitionYear, tmpAssetFixedBook.AssetId, tmpAssetFixedBook.AssetBookId
        {
            if (firstRecord)
            {
                firstRecord = false;

                this.refreshForGroupAssetType();
            }

            if (prevTmpAssetFixedBookAssetType.AssetType != tmpAssetFixedBook.AssetType)
            {
                this.refreshForGroupAssetType();
            }
            else
            {
                if (prevTmpAssetFixedBookAssetGroup.AssetGroupId != tmpAssetFixedBook.AssetGroupId)
                {
                    this.refreshForGroupAssetGroup();
                }
                else
                {
                    if (prevTmpAssetFixedBookAssetAcquisitionYear.AssetAcquisitionYear != tmpAssetFixedBook.AssetAcquisitionYear)
                    {
                        this.refreshForGroupAssetAcquisitionYear();
                    }
                    else
                    {
                        if (prevTmpAssetFixedBookAssetId.AssetId != tmpAssetFixedBook.AssetId)
                        {
                            this.refreshForGroupAssetId();
                        }
                        else
                        {
                            if (prevTmpAssetFixedBookAssetBookId.AssetBookId != tmpAssetFixedBook.AssetBookId)
                            {
                                this.refreshForGroupAssetBookId();
                            }
                            else
                            {
                                this.extendForGroupAssetId();
                            }
                        }
                    }
                }
            }

            tmpAssetFixedBook.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForGroupAssetAcquisitionYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the values from the previous record if the group for the <c>AssetAcquisitionYear</c>
    ///    value is changed.
    /// </summary>
    private void refreshForGroupAssetAcquisitionYear()
    {
        this.refreshForGroupAssetId();
        this.refreshForGroupAssetBookId();

        prevTmpAssetFixedBookAssetAcquisitionYear = tmpAssetFixedBook.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForGroupAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the values from the previous record if the group for the asset is changed.
    /// </summary>
    private void refreshForGroupAssetId()
    {
        this.refreshForGroupAssetBookId();

        prevTmpAssetFixedBookAssetId = tmpAssetFixedBook.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForGroupAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the values from the previous record if the group for the <c>AssetGroup</c> value is
    ///    changed.
    /// </summary>
    private void refreshForGroupAssetGroup()
    {
        tmpAssetFixedBook.AssetGroupName = this.assetGroupName(tmpAssetFixedBook.AssetGroupId);

        this.refreshForGroupAssetAcquisitionYear();
        this.refreshForGroupAssetId();
        this.refreshForGroupAssetBookId();

        prevTmpAssetFixedBookAssetGroup = tmpAssetFixedBook.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForGroupAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the values from the previous record if the group for the <c>AssetBookId</c> value is changed.
    /// </summary>
    private void refreshForGroupAssetBookId()
    {
        assetTransPrior = AssetSumCalc_Trans::newAssetYear(
                            tmpAssetFixedBook.AssetId,
                            tmpAssetFixedBook.AssetBookId,
                            toDate,
                            AssetYear::PriorYears);
        assetTransThis  = AssetSumCalc_Trans::newAssetYear(
                            tmpAssetFixedBook.AssetId,
                            tmpAssetFixedBook.AssetBookId,
                            toDate,
                            AssetYear::ThisYear);

        tmpAssetFixedBook.AssetNameValue = this.assetName(tmpAssetFixedBook.AssetId);
        tmpAssetFixedBook.PeriodTxt = this.period();

        totalCost = tmpAssetFixedBook.AmountEnd;
        totalPriorCost = tmpAssetFixedBook.AmountStart;

        if (prevTmpAssetFixedBookAssetBookId
            && prevTmpAssetFixedBookAssetBookId.AssetId
            && prevTmpAssetFixedBookAssetBookId.AssetBookId)
        {
            assetScrapValue = AssetBook::find(prevTmpAssetFixedBookAssetBookId.AssetId, prevTmpAssetFixedBookAssetBookId.AssetBookId).ScrapValue;
        }
        else
        {
            prevTmpAssetFixedBookAssetBookId = tmpAssetFixedBook.data();
            assetScrapValue = AssetBook::find(prevTmpAssetFixedBookAssetBookId.AssetId, prevTmpAssetFixedBookAssetBookId.AssetBookId).ScrapValue;
        }

        tmpAssetFixedBook.AssetSumAccDepreciation = this.accDepreciation();
        tmpAssetFixedBook.AssetSumAccExDepreciationStartPercent = this.extraDepreciationInPriorPct();
        tmpAssetFixedBook.AssetSumAccExtraDepreciation = this.accExtraDepreciation();
        tmpAssetFixedBook.AssetSumDisposalInPeriod = this.disposalInPeriod();
        tmpAssetFixedBook.AssetSumDepreciationInPeriodPct = this.depreciationInPeriodPct();
        tmpAssetFixedBook.AssetSumDepreciationInPeriod = this.depreciationInPeriod();
        tmpAssetFixedBook.AssetSumExtraDepreciationInPeriodPct = this.extraDepreciationInPeriodPct();
        tmpAssetFixedBook.AssetSumExtraDepreciationInPeriod = this.extraDepreciationInPeriod();
        tmpAssetFixedBook.AssetSumTotalDepreciationInPeriodPct = this.totalDepreciationInPeriodPct();
        tmpAssetFixedBook.AssetSumTotalDepreciationInPeriod = this.totalDepreciationInPeriod();
        tmpAssetFixedBook.AssetSumAssetAccDepreciationEnd = this.assetAccDepreciationEnd();
        tmpAssetFixedBook.AssetSumNetBookValue = this.netBookValue();
        tmpAssetFixedBook.AssetSumAccDepreciationEnd = this.accDepreciationEnd();

        prevTmpAssetFixedBookAssetBookId = tmpAssetFixedBook.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForGroupAssetType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the values from the previous record if the group for the asset type is changed.
    /// </summary>
    private void refreshForGroupAssetType()
    {
        this.refreshForGroupAssetGroup();
        this.refreshForGroupAssetAcquisitionYear();
        this.refreshForGroupAssetId();
        this.refreshForGroupAssetBookId();

        prevTmpAssetFixedBookAssetType = tmpAssetFixedBook.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDepreciationInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total depreciation amount in the period.
    /// </summary>
    /// <returns>
    ///    The calculated amount.
    /// </returns>
    private Amount totalDepreciationInPeriod()
    {
        return assetTransThis.depreciationValue()
            + assetTransThis.depreciationAdjValue()
            + assetTransThis.extraDepreciationValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDepreciationInPeriodPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the percentage of the total depreciation amount in the period.
    /// </summary>
    /// <returns>
    ///    The calculated percentage.
    /// </returns>
    private Percent totalDepreciationInPeriodPct()
    {
        if (totalCost - assetScrapValue)
        {
            return (assetTransThis.depreciationValue()
                + assetTransThis.depreciationAdjValue()
                + assetTransThis.extraDepreciationValue()) * 100 / (totalCost + this.revaluationValue() - assetScrapValue);
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>