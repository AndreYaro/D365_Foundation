<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTransList</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostTransList
{
    RecordSortedList    costTransList;
    /// <summary>
    ///    Adds an <c>InventCostTrans</c> record to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>InventCostTrans</c> record that is to be added.
    /// </param>
    /// <param name="_allowZero">
    ///    A Boolean value that indicates whether zero values are allowed; optional.
    /// </param>
    /// <remarks>
    ///    If the record that is to be added is already found in the list, the quantity fields will be summed
    ///    up.From the <c>InventCostUpdate</c> class, no zero values are allowed in the list. In the
    ///    <c>InventCostMovement</c> class, zero values must be added because the summarization of these
    ///    records in the <c>InventCostUpdate</c> class will not work.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public void add(InventCostTrans  _inventCostTrans,
                    boolean          _allowZero = true)
    {
        InventCostTrans     inventCostTrans;

        // First, try to get the record that should be added out of the costTransList
        inventCostTrans.initFromInventCostTrans(_inventCostTrans);

        costTransList.find(inventCostTrans);

        // If the record was found, the qty fields should have been set, so now add the qty
            inventCostTrans.addQtyFromInventCostTrans(_inventCostTrans);

        // Due to the fact that may be all qty fields have be come zero, check this fields
        if (_allowZero || !inventCostTrans.allQtyFieldsZero() || inventCostTrans.isRevaluation())
        {
        // (Re)Insert the record to the list
            this.insert(inventCostTrans);
        }
        else
        {
            // Qtys are or have become zero ==> remove it from the list
            this.delete(inventCostTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete(InventCostTrans _inventCostTrans)
    {
        costTransList.del(_inventCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public boolean find(InventCostTrans _inventCostTrans)
    {
        return costTransList.find(_inventCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
        public boolean first(InventCostTrans _inventCostTrans)
    {
        return costTransList.first(_inventCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>RecordSortedList</c> object.
    /// </summary>
    /// <remarks>
    ///    The
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object is initialized by using the following sort order:
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             <c>InventTransId</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>CostTransType</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>ItemId</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>FinancialInventDimId</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>Voucher</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>TransDate</c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>ItemPriceRefRecId</c>
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This is the default sort order for a
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object in the
    ///    <c>
    ///       InventCost
    ///    </c>
    ///     framework. So always use this class instead of
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     objects.
    /// </remarks>

    protected void init()
    {
        costTransList = new RecordSortedList(tableNum(InventCostTrans));

        CostParameters costParameters = CostParameters::find();
        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled()
            && costParameters.DimensionDefaultingSource == DimensionDefaultingSource::Posting)
        {
            costTransList.sortOrder(fieldNum(InventCostTrans, InventTransId),
                            fieldNum(InventCostTrans, ItemId),
                            fieldNum(InventCostTrans, Voucher),
                            fieldNum(InventCostTrans, TransDate),
                            fieldNum(InventCostTrans, CostTransState),
                            fieldNum(InventCostTrans, CostTransRefType),
                            fieldNum(InventCostTrans, CostTransType),
                            fieldNum(InventCostTrans, TransRefId),
                            fieldNum(InventCostTrans, FinancialInventDimId),
                            fieldNum(InventCostTrans, ItemPriceRefRecId),
                            fieldNum(InventCostTrans, DefaultDimension));
            
        }
        else
        {
            costTransList.sortOrder(fieldNum(InventCostTrans, InventTransId),
                            fieldNum(InventCostTrans, ItemId),
                            fieldNum(InventCostTrans, Voucher),
                            fieldNum(InventCostTrans, TransDate),
                            fieldNum(InventCostTrans, CostTransState),
                            fieldNum(InventCostTrans, CostTransRefType),
                            fieldNum(InventCostTrans, CostTransType),
                            fieldNum(InventCostTrans, TransRefId),
                            fieldNum(InventCostTrans, FinancialInventDimId),
                            fieldNum(InventCostTrans, ItemPriceRefRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert(InventCostTrans _inventCostTrans,
                       boolean         _updateIfExist = true)
    {
        costTransList.ins(_inventCostTrans, _updateIfExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
        public void insertDatabase()
    {
        costTransList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>length</Name>
				<Source><![CDATA[
        public int length()
    {
        return costTransList.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostTransList</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to make sure that the <c>construct</c> method is used.
    /// </remarks>

    protected void new()
    {
        // Initialize the recordSortedList
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next(InventCostTrans _inventCostTrans)
    {
        return costTransList.next(_inventCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes a given <c>InventCostTransList</c> object to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_sourceList">
    ///    The <c>InventCostTransList</c> object that is to be added.
    /// </param>
    /// <remarks>
    ///    Each record that is stored in <paramref name="_sourceList" /> will be added by calling the
    ///    <c>add</c> method.
    /// </remarks>

    public void summarize(InventCostTransList _sourceList)
    {
        InventCostTrans  sourceCostTrans;
        boolean          found;

        if (_sourceList && _sourceList.length() != 0)
        {
            found = _sourceList.first(sourceCostTrans);
            while (found)
            {
                // Add this record to the costTransList
                this.add(sourceCostTrans);

                found = _sourceList.next(sourceCostTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroQtyList_RU</Name>
				<Source><![CDATA[
        public InventCostTransList zeroQtyList_RU()
    {
        InventCostTrans     origTrans, newTrans;
        InventCostTransList newList = InventCostTransList::construct();

        boolean found = this.first(origTrans);
        while (found)
        {
            newTrans.data(origTrans);
            newTrans.resetQtyFields();
            newList.insert(newTrans, true);

            found = this.next(origTrans);
        }

        return newList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostTransList construct()
    {
        return new InventCostTransList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>