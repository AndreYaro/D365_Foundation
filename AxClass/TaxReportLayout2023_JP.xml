<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportLayout2023_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[TaxReportLayoutStartDateAttribute_JP(01\01\2023)]
[Export(identifierstr(Dynamics.AX.Application.TaxReportILayout_JP))]
internal final class TaxReportLayout2023_JP extends TaxReportLayout_JP implements TaxReportILayoutProperties
{
    private const date StartDate = 01\01\2023;

    internal const TaxReportDataLayout_JP TaxReportDataLayout = ssrsReportStr(TaxReport2023_JP, Report);
    internal const TaxReportDataLayout_JP TaxReportAddonDataLayout = ssrsReportStr(TaxReport2023_JP, ReportAddon);
    internal const TaxReportDataLayout_JP Appendix1DataLayout = ssrsReportStr(TaxReportCalcSheet2023_JP, Appendix1);
    internal const TaxReportDataLayout_JP Appendix2DataLayout = ssrsReportStr(TaxReportCalcSheet2023_JP, Appendix2);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openConsumptionTaxTransactionForm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void openConsumptionTaxTransactionForm(TaxReportIParameters_JP _taxReportParameters)
    {
        new MenuFunction(menuItemDisplayStr(LedgerConsumptionTaxCalcTrans2023_JP), MenuItemType::Display).run(this.getTaxReportArguments(_taxReportParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutConsumptionTaxReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printoutConsumptionTaxReport(TaxReportIParameters_JP _taxReportParameters)
    {
        this.printoutCalcSheet(_taxReportParameters);
        this.printoutTaxReport(_taxReportParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutCalcSheet</Name>
				<Source><![CDATA[
    protected void printoutCalcSheet(TaxReportIParameters_JP _taxReportParameters)
    {
        this.printOutReportByMenuName(menuItemOutputStr(TaxReportCalcSheet2023_JP), _taxReportParameters, ssrsReportStr(TaxReportCalcSheet2023_JP, Appendix1), Appendix1DataLayout);
        this.printOutReportByMenuName(menuItemOutputStr(TaxReportCalcSheet2023_JP), _taxReportParameters, ssrsReportStr(TaxReportCalcSheet2023_JP, Appendix2), Appendix2DataLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutTaxReport</Name>
				<Source><![CDATA[
    protected void printoutTaxReport(TaxReportIParameters_JP _taxReportParameters)
    {
        this.printOutReportByMenuName(menuItemOutputStr(TaxReport2023_JP), _taxReportParameters, ssrsReportStr(TaxReport2023_JP, Report), TaxReportDataLayout);
        this.printOutReportByMenuName(menuItemOutputStr(TaxReport2023_JP), _taxReportParameters, ssrsReportStr(TaxReport2023_JP, ReportAddon), TaxReportAddonDataLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOutReportByMenuName</Name>
				<Source><![CDATA[
    private void printOutReportByMenuName(str _outputMenuName, TaxReportIParameters_JP _taxReportParameters, SRSCatalogItemName _reportName, TaxReportDataLayout_JP _dataLayout)
    {
        TaxReportContract_JP contract = TaxReportContract_JP::newFromParameter(_taxReportParameters);
        contract.parmReportName(_reportName);
        contract.parmDataLayout(_dataLayout);

        new MenuFunction(_outputMenuName, MenuItemType::Output).run(this.getTaxReportArguments(contract));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calculateReport(TaxReportIParameters_JP _taxReportParameters)
    {
        TaxCalcReportFields2023_JP::newFromTaxReport(_taxReportParameters).calc(TaxReportDataLayout, TaxReportAddonDataLayout, Appendix1DataLayout, Appendix2DataLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEnabled(TaxReportIParameters_JP _taxReportParameters)
    {
        return _taxReportParameters.parmFromDate() >= StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesTransactionExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean doesTransactionExist(TaxReportIParameters_JP _taxReportParameters)
    {
        return TaxTrans::existPeriod(_taxReportParameters.parmFromDate(), _taxReportParameters.parmToDate(), _taxReportParameters.parmTaxPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportDataLayout</Name>
				<Source><![CDATA[
    public TaxReportDataLayout_JP getTaxReportDataLayout()
    {
        return TaxReportDataLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportAddonDataLayout</Name>
				<Source><![CDATA[
    public TaxReportDataLayout_JP getTaxReportAddonDataLayout()
    {
        return TaxReportAddonDataLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppendix1DataLayout</Name>
				<Source><![CDATA[
    public TaxReportDataLayout_JP getAppendix1DataLayout()
    {
        return Appendix1DataLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppendix2DataLayout</Name>
				<Source><![CDATA[
    public TaxReportDataLayout_JP getAppendix2DataLayout()
    {
        return Appendix2DataLayout;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>