<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceEvent</c> class contains the main logic for processing mobile device events.
/// </summary>
public abstract class WHSMobileDeviceEvent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a mobile device event.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection related to the mobile device event.</param>
    /// <param name = "_batchAffinity">The batch affinity identifying the messages to be processed.</param>
    public abstract void processEvent(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection, WHSMobileDeviceQueueBatchAffinity _batchAffinity)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default message state that should be used when creating messages.
    /// </summary>
    /// <returns>The default message state that should be used when creating messages.</returns>
    public abstract WHSMobileDeviceQueueMessageState defaultState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateOnRelatedMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the message state on the messages associated with the related mobile device event.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection used when finding the related mobile device event.</param>
    public abstract void updateStateOnRelatedMessages(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventTypeDependency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the dependent event type for the mobile device event.
    /// </summary>
    /// <returns>The dependent event type for the mobile device event.</returns>
    public abstract WHSMobileDeviceQueueEventType getEventTypeDependency()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeMessagesInCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the message state to completed for messages associated with a mobile device event.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection identifying the messages to be updated.</param>
    /// <param name = "_batchAffinity">The batch affinity identifying the messages to be updated.</param>
    protected void completeMessagesInCollection(WHSMobileDeviceQueueMessageCollection _mobileDeviceQueueMessageCollection, WHSMobileDeviceQueueBatchAffinity _batchAffinity)
    {
        WHSMobileDeviceQueueMessage::updateQueueMessageState(_mobileDeviceQueueMessageCollection.RecId, _batchAffinity, WHSMobileDeviceQueueMessageState::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMessageCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the message collection records identified by collection identifier and event types.
    /// </summary>
    /// <param name = "_collectionIdentifier">The message collection identifier of the collections to be deleted.</param>
    /// <param name = "_eventTypesToDelete">The event types to delete.</param>
    protected void deleteMessageCollection(WHSMobileDeviceQueueMessageCollectionIdentifier _collectionIdentifier, container _eventTypesToDelete)
    {
        WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection;

        delete_from mobileDeviceQueueMessageCollection
            where  mobileDeviceQueueMessageCollection.Identifier == _collectionIdentifier
                && mobileDeviceQueueMessageCollection.EventType in _eventTypesToDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the singleton instance of a <c>WHSMobileDeviceEvent</c> class based on a <c>WHSMobileDeviceQueueEventType</c> enum.
    /// </summary>
    /// <param name = "_type">The type enum determining the sub-class.</param>
    /// <returns>A strategy instance; or null.</returns>
    static public WHSMobileDeviceEvent singletonFromType(WHSMobileDeviceQueueEventType _type)
    {
        WHSMobileDeviceEventStrategyFactoryAttribute attribute = new WHSMobileDeviceEventStrategyFactoryAttribute(_type);
        WHSMobileDeviceEvent instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSMobileDeviceEvent), attribute) as WHSMobileDeviceEvent;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>