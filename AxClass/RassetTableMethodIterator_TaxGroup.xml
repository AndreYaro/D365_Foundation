<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTableMethodIterator_TaxGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTableMethodIterator_TaxGroup extends RassetTableMethodIterator
{
    RAssetGroup          rAssetGroup;
    Map                  prevDepreciation, curDepreciation, bonusGroup;
    RAssetAmount         sumNetBookGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        public void calculate()
    {
        RAssetSubGroup  rAssetSubGroup;

        this.calculateSubGroup(null);
        while select rAssetSubGroup
            where rAssetSubGroup.GroupId == rAssetGroup.AssetGroupId
        {
            this.calculateSubGroup(rAssetSubGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSubGroup</Name>
				<Source><![CDATA[
        #define.v20000(20000)
    void calculateSubGroup(RAssetSubGroup _subGroup)
    {
        MapIterator     iterator;
        Map             depreciation, netBook;
        RAssetAmount    prevDepr, curCalc, difference, netBookAmount;
        RAssetTransDate endBonusPeriod;
        anytype         anyZero = 0;

        RAssetAmount netBookDepreciate(RAssetAmount _netBook)
        {
            RAssetAmount netBookDepr;

            netBookDepr = _netBook * rAssetGroup.DepreciationRate *
                          (_subGroup.Factor ? _subGroup.Factor : 1) / 100;

            if (_netBook - netBookDepr < RAssetGroup::assetDepreciationMin(rAssetGroup.AssetGroupId))
            {
                netBookDepr = _netBook;
            }
            return netBookDepr;
        }

        depreciation = this.intervalAssets(deprStartDate, _subGroup.SubGroupId);
        if (! depreciation.elements())
            return;
        netBook      = new Map(Types::Int64, Types::Real);
        iterator     = new MapIterator(depreciation);
        sumNetBookGroup = 0;
        while (iterator.more())
        {
            rAssetStandards = iterator.key();

            rAssetTableMethod = new RAssetTableMethod_TaxGroup(rAssetStandards, deprStartDate);
            prevDepr = prevDepreciation.exists(rAssetStandards.RecId) ? prevDepreciation.lookup(rAssetStandards.RecId) : anyZero;

            endBonusPeriod   = deprStartDate - 1;
            startBonusPeriod = prevDepr ?
                               dateStartMth(endBonusPeriod) :
                               (rAssetStandards.LastDepDate ?
                                RAssetTrans::findLastType(rAssetStandards.AssetId,
                                                          rAssetStandards.AssetStandardId,
                                                          RAssetTransType::Depreciation,
                                                          false,
                                                         rAssetStandards.LastDepDate).TransDate :
                                dateNull());
            parmAmountRevoluation = - this.calculateDepreciationBonus(startBonusPeriod, endBonusPeriod);
            deprBonusForPreviousPeriod -= this.calculateDeprBonusForPreviousPeriod(startBonusPeriod, endBonusPeriod);
            bonusGroup.insert(rAssetStandards.RecId, bonusTrans);
            rAssetTableMethod.parmAmountRevoluation(parmAmountRevoluation);
            rAssetTableMethod.parmDeprBonusForPreviousPeriod(deprBonusForPreviousPeriod);
            rAssetTableMethod.parmPrevDepAmount(prevDepr);
            rAssetTableMethod.init(deprStartDate);

            curCalc = rAssetTableMethod.calc(deprStartDate);
            curDepreciation.insert(rAssetStandards, curCalc);
            netBookAmount = rAssetTableMethod.amountNetBookValue();
            sumNetBookGroup += (netBookAmount - prevDepr);
            prevDepreciation.insert(rAssetStandards.RecId, prevDepr - parmAmountRevoluation - deprBonusForPreviousPeriod);
            netBook.insert(rAssetStandards.RecId, (netBook.exists(rAssetStandards.RecId) ? netBook.lookup(rAssetStandards.RecId) : anyZero) + (netBookAmount - prevDepr));
            iterator.next();
        }
        difference = netBookDepreciate(sumNetBookGroup);
        difference = RAssetTableMethod::roundAmount(RAssetParameters::standardTaxIdDefault(), difference) - difference;
        iterator.begin();
        while (iterator.more())
        {
            rAssetStandards = iterator.key();
            prevDepr = prevDepreciation.exists(rAssetStandards.RecId) ? prevDepreciation.lookup(rAssetStandards.RecId) : anyZero;
            curCalc  = curDepreciation.exists(rAssetStandards) ? curDepreciation.lookup(rAssetStandards) : anyZero;
            netBookAmount = netBook.exists(rAssetStandards.RecId) ? netBook.lookup(rAssetStandards.RecId) : anyZero;

            if (difference &&
                netBookAmount - curCalc - difference > RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
            {
                curCalc += difference;
                difference = 0;
            }

            curDepreciation.insert(rAssetStandards, curCalc);
            prevDepreciation.insert(rAssetStandards.RecId, prevDepr + curCalc);
            iterator.next();
        }
        if (RAssetTableMethod::roundAmount(RAssetParameters::standardTaxIdDefault(), sumNetBookGroup) < #v20000)
        {
            info(strFmt("@GLS117104",
                 (_subGroup.SubGroupId ?
                  rAssetGroup.AssetGroupId + "@GLS102833" +"@SYS34952" + strFmt("@GLS117090", _subGroup.SubGroupId) + "@SYS34953" :
                  rAssetGroup.AssetGroupId),
                 deprStartDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>curDepreciation</Name>
				<Source><![CDATA[
        public Map curDepreciation()
    {
        return curDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBonusGroup</Name>
				<Source><![CDATA[
        public Map getBonusGroup()
    {
        return bonusGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurDepreciation</Name>
				<Source><![CDATA[
        public Map getCurDepreciation()
    {
        return curDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationStartDate</Name>
				<Source><![CDATA[
        private StartDate getDepreciationStartDate()
    {
        RAssetStandards     standards;
        TransDate           transDate, startDate;
        RAssetLifeHist      history;
        RAssetDeprProfile   profile;

        startDate = parmRunDate;
        while select standards
            where standards.AssetGroup == rAssetGroup.AssetGroupId
               && !standards.DisposalDate
               && standards.Depreciation
        {
            transDate = standards.LastDepDate ? standards.LastDepDate + 1 : standards.DepStartDate;

            if (standards.assetDeprMethod(transDate - 1) != RAssetDeprMethod::TaxNonLinearGroup)
            {
                select firstonly ChangeDate, RecId from history
                    order by ChangeDate asc
                    where history.AccountNum      == standards.AssetId
                       && history.AssetStandardId == standards.AssetStandardId
                       && history.ChangeDate      >= transDate
                       && history.rAssetDeprProfile
                exists join profile
                    where profile.RecId      == history.rAssetDeprProfile
                       && profile.DeprMethod == RAssetDeprMethod::TaxNonLinearGroup;

                if (! history.RecId)
                    continue;

                transDate = history.ChangeDate + 1;
            }

            startDate = startDate < transDate ? startDate : transDate;
        }
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInterval</Name>
				<Source><![CDATA[
        protected void initInterval()
    {
        if (postingDate)
        {
            deprStartDate = postingDate + 1;
        }
        else
        {
            deprStartDate = this.getDepreciationStartDate();
        }

        deprInterval    =  new RAssetTableInterval_Month();
        postingDate     = deprInterval.getEndDate(deprStartDate);
        curDepreciation = new Map(Types::Record, Types::Real);
        bonusGroup      = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue(RAssetStandards     _rAssetStandards,
                          RAssetTransDate     _runDate,
                          RAssetBudgetModelId _rAssetBudgetModelId = '',
                          RAssetGroup         _group               = null)
    {

        rAssetStandards     = _rAssetStandards;
        rAssetGroup         = _group;
        parmRunDate         = endmth(prevMth(_runDate));
        this.parmBudgetModelId(_rAssetBudgetModelId);
        deprIntervalMth     = new RAssetTableInterval_Month();
        prevDepreciation    = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intervalAssets</Name>
				<Source><![CDATA[
        private Map intervalAssets(TransDate        _transDate,
                               RAssetSubGroupId _subGroupId)
    {
        RAssetStandards     standards;
        RAssetSuspend       suspend;
        RAssetSumCalc       sumCalc;
        TransDate           lastDepDate;
        RAssetLifeHist      hist;
        Map                 depreciation = new Map(Types::Record, Types::Real);

        while select standards
            where standards.AssetGroup == rAssetGroup.AssetGroupId &&
                  ! standards.DisposalDate                         &&
                  standards.Depreciation
        notexists join suspend
            where suspend.Assetid      == standards.AssetId &&
                  suspend.SuspendStart <= _transDate        &&
                  (suspend.SuspendEnd  >= _transDate        ||
                   ! suspend.SuspendEnd)
        {
            hist = RAssetLifeHist::findDateLifeTime(standards.AssetId, _transDate - 1, standards.AssetStandardId);
            if (hist.SubGroupId != _subGroupId)
                continue;

            lastDepDate = standards.lastDepDate() ? standards.lastDepDate() + 1 : standards.startDepDate();
            if (lastDepDate > _transDate)
                continue;

            sumCalc = RAssetSumCalc_Trans::newAssetPeriod(standards.AssetId, standards.AssetStandardId, _transDate - 1);
            if (! sumCalc.netBookValue())
                continue;

            if (RAssetDeprProfile::find(hist.rAssetDeprProfile).DeprMethod == RAssetDeprMethod::TaxNonLinearGroup)
            {
                if (standards.assetDeprMethod(lastDepDate) != RAssetDeprMethod::TaxNonLinearGroup)
                    throw error(strFmt("@GLS117099", standards.AssetId, lastDepDate));

                depreciation.insert(standards, 0);
            }
        }
        return depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextInterval</Name>
				<Source><![CDATA[
        public boolean nextInterval()
    {
        boolean      ret = false;

        this.initInterval();

        if (postingDate <= parmRunDate)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>