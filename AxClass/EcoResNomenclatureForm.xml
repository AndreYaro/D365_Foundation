<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResNomenclatureForm</c> class provides
/// functionality for the <c>EcoResNomenclature</c> form.
/// </summary>
public class EcoResNomenclatureForm
{
    private PCClass pcClass;
    private BOMTable bomTable;
    private TableId nomenclatureType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmNomenclatureType</Name>
				<Source><![CDATA[
    public TableId parmNomenclatureType(TableId _tableId = nomenclatureType)
    {
        nomenclatureType = _tableId;
        return nomenclatureType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPCClass</Name>
				<Source><![CDATA[
    public PCClass parmPCClass(PCClass _pcClass = pcClass)
    {
        pcClass = _pcClass;
        return pcClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMTable</Name>
				<Source><![CDATA[
    internal BOMTable parmBOMTable(BOMTable _bomTable = bomTable)
    {
        bomTable = _bomTable;
        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResNomenclatureForm construct()
    {
        return new EcoResNomenclatureForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNomenclatureType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Defines the nomenclature type between <c>PCConfigurationNomenclature</c>, 
    ///   <c>EcoResDimBasedConfigurationNomenclature</c> or <c>EcoResProductVariantNomenclature</c>.
    /// </summary>
    /// <param name = "_tableId">
    ///   A table ID of one of the above-mentioned nomenclature types.
    /// </param>
    /// <param name = "_record">
    ///   A record which is related with the specific nomenclature.
    /// </param>
    public void initNomenclatureType(TableId _tableId, Common _record)
    {
        switch (_tableId)
        {
            case tableNum(PCClass):
                nomenclatureType = tableNum(PCConfigurationNomenclature);
                pcClass = _record as PCClass;
                break;
            case tableNum(BOMTable):
                nomenclatureType = tableNum(EcoResDimBasedConfigurationNomenclature);
                bomTable = _record as BOMTable;
                break;
            default:
                nomenclatureType = tableNum(EcoResProductVariantNomenclature);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInSingleRecordMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if this class was initialized from a <c>PCClass</c> or a <c>BOMTable</c> record.
    /// </summary>
    /// <returns>
    ///   true if the record related to the nomeclature is a <c>PCClass</c> or a <c>BOMTable</c>
    ///   record; otherwise, false.
    /// </returns>
    public boolean runInSingleRecordMode()
    {
        return (pcClass || bomTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeValueLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a lookup for the selection of attribute record IDs of the specified component.
    /// </summary>
    /// <param name = "_lookupFormControl">
    ///   The form control that will receive the chosen value from the lookup.
    /// </param>
    /// <returns>
    ///   A lookup attribute reference.
    /// </returns>
    public SysReferenceTableLookup getAttributeValueLookup(FormControl _lookupFormControl)
    {
        return PCModelingLibrary::getAttributeLookupReference(_lookupFormControl, pcClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedNomenclatureSegments</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the allowed nomenclature segments according to the specified nomenclature type.
    /// </summary>
    /// <param name = "_nomenclatureType">
    ///   A nomenclature type for which the segments will be specified.  
    /// </param>
    /// <param name = "_nomenclature">
    ///   A nomenclature record to be used at extensions of this class.
    /// </param>
    /// <returns>
    ///   A map of the allowed nomenclature semgents.
    /// </returns>
    public static Map getAllowedNomenclatureSegments(TableId _nomenclatureType, EcoResNomenclature _nomenclature)
    {
        return EcoResNomenclature::getAllowedSegments(_nomenclatureType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeValueLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and performs a lookup for the selection of attribute record IDs of the specified component.
    /// </summary>
    /// <param name="_caller">
    ///    The form control that will receive the chosen value from the lookup.
    /// </param>
    /// <param name="_component">
    ///    The component that owns the attributes.
    /// </param>
    /// <returns>
    ///    The selected record from the lookup.
    /// </returns>
    internal Common attributeValueLookup(FormControl _lookupFormControl)
    {
        SysReferenceTableLookup lookup = this.getAttributeValueLookup(_lookupFormControl);

        return lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationGroupLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs a lookup for the selection of configuration groups of the specified component.
    /// </summary>
    /// <param name = "_lookupFormControl">
    ///   The form control that will receive the chosen value from the lookup.
    /// </param>
    internal void configurationGroupLookup(FormControl _lookupFormControl)
    {
        BOM::lookupConfigGroupIdAdv(_lookupFormControl, bomTable.BOMId, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>