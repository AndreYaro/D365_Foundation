<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_JobTicket</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Job Ticket report to excel.
/// </summary>
class OXMLExcelReport_JobTicket extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    #define.allpages('ALLPAGES')
    #define.IsCompanyPos(4)

    TmpSalesPurchReportTable_RU header;
    TmpSalesPurchReportLine_RU  dynamicData;

    WMSBillOfLading             billOfLading;
    WMSBillOfLadingId           billOfLadingId;
    DialogField                 dlgBillOfLadingId;
    PrintCopyOriginal           printCopyOriginal;

    container        consignorInfo,
                     consigneeInfo,
                     carrierInfo,
                     accompanyingDocInfo,
                     paymentInfo;

    boolean          creditNote;
    OffSessionId_RU  offSessionId;
    OffReportType_RU reportType;
    OffPosition_RU   consignorCarrierPos,
                     consigneeCarrierPos,
                     carrierPos;

    protected INN_RU consignorINN,
                     consigneeINN,
                     carrierINN;

    AmountMST        totalAmount;
    CurrencyCode     currencyCode;
    ModuleCustVend   offCustVend;

    #define.ConsignorContactInfo    ('ConsignorContactInfo')
    #define.ConsignorFullName       ('ConsignorFullName')
    #define.ConsigneeContactInfo    ('ConsigneeContactInfo')
    #define.ConsigneeFullName       ('ConsigneeFullName')
    #define.PayerInfo               ('PayerInfo')
    #define.CargoDesc               ('CargoDesc')
    #define.NumPackUnit             ('NumPackUnit')
    #define.GrossWeightUnit         ('GrossWeightUnit')
    #define.DeclaredCost            ('DeclaredCost')
    #define.LadingAddr              ('LadingAddr')
    #define.UnladingAddr            ('UnladingAddr')
    #define.CargoWeight             ('CargoWeight')
    #define.CarrierPersonInfo       ('CarrierPersonInfo')
    #define.CarrierOrgInfo          ('CarrierOrgInfo')
    #define.CarrierDriverInfo       ('CarrierDriverInfo')
    #define.Waybill                 ('Waybill')
    #define.VehicleInfo             ('VehicleInfo')
    #define.VehicleRegNum           ('VehicleRegNum')
    #define.ConsignorSign           ('ConsignorSign')
    #define.ConsignorDate           ('ConsignorDate')
    #define.CarrierDate             ('CarrierDate')
    #define.CarrierSign             ('CarrierSign')
    #define.DocumentNum             ('DocumentNum')
    #define.DocumentDate            ('DocumentDate')
    #define.AccompanyingDoc         ('AccompanyingDoc')

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        billOfLadingId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accompanyDocInfo</Name>
				<Source><![CDATA[
    private void accompanyDocInfo(CustInvoiceJour _custInvoiceJour)
    {
        FactureJour_RU      factureJour;
        RecordSortedList    factureJourList = _custInvoiceJour.factureJourSortedList_RU();

        accompanyingDocInfo += "@SYS14204" + " " + strFmt("@GLS102243", _custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceDate);

        while (factureJourList.next(factureJour))
        {
            accompanyingDocInfo += "@GLS100743" + " " + strFmt("@GLS102243", factureJour.FactureExternalId, factureJour.FactureDate_External);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.defaultHeight(12.00)

        return #defaultHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>concat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Concats container values with comma.
    /// </summary>
    /// <param name="_values">
    ///     Container with values.
    /// </param>
    /// <returns>
    ///     Concated string.
    /// </returns>
    #define.CommaSpace(', ')

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str concat(container _values)
    {
        int         idx;
        str         value;
        container   ret;
        int         cLen;

        cLen = conLen(_values);
        for (idx = 1; idx <= cLen; idx++)
        {
            value = strFmt("@GLS106007", conPeek(_values, idx));
            if (value)
            {
                ret += value;
            }
        }

        return strRemoveCr(con2Str(ret, #CommaSpace));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        this.setCurrentWorksheetNum(1,this.pageWidth());
        this.initSectionMap();
        this.execute(#allpages);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoInvent</Name>
				<Source><![CDATA[
    private void custVendInfoInvent(InventTransferTable _inventTransferTable)
    {
        CustVendAC          custVendAC;
        CustVendTable       payerTable;
        VendTable           consignor;
        VendTable           consignee;

        consignorCarrierPos = OffPosition_RU::TransResp;
        consigneeCarrierPos = OffPosition_RU::TransRespCust;
        carrierPos          = OffPosition_RU::TransRespCarrier;

        switch (_inventTransferTable.TransferType_RU)
        {
            case InventTransferType_RU::Standard :
                custVendAC = InventLocation::find(_inventTransferTable.InventLocationIdTo).VendAccount;
                if (custVendAC)
                {
                    consignorInfo = this.getCompanyInfo();
                    consigneeInfo = this.getDirPartyInfo(VendTable::find(custVendAC));
                    consignee = VendTable::find(custVendAC);

                    this.initCarrierType(consigneeInfo);
                }
                else
                {
                    consignorInfo = this.getCompanyInfo();
                    consigneeInfo = consignorInfo;

                    this.initCarrierType(consignorInfo);
                }
                break;

            case InventTransferType_RU::IssueToParty :

                consignorInfo = this.getCompanyInfo();
                consigneeInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());
                consignee = _inventTransferTable.partyVendTable_RU();

                this.custVendInfoInvent_Party(_inventTransferTable);

            break;

            case InventTransferType_RU::ReceiptFromParty :
                consigneeInfo = this.getCompanyInfo();
                consignorInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());
                consignor = _inventTransferTable.partyVendTable_RU();

                this.custVendInfoInvent_Party(_inventTransferTable);

            break;
        }

        switch (billOfLading.TransportationPayerType_RU)
        {
            case TransportationPayerType_RU::Consignor :
                    payerTable = consignor;
                break;

            case TransportationPayerType_RU::Consignee :
                    payerTable = consignee;
                break;

            case TransportationPayerType_RU::ThirdParty :
                    payerTable = CustTable::find(billOfLading.TransportationPayer_RU);
                break;
        }
        paymentInfo = this.getPaymentInfo(payerTable, billOfLading.DeliveryDate_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets carrier info for standard transfer type for vendor.
    /// </summary>
    /// <param name = "_invoiceAccountInfo">Container with invoice account info.</param>
    protected void initCarrierType(container _invoiceAccountInfo)
    {
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = _invoiceAccountInfo;
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoInvent_Party</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets carrier info for issue to party or receipt from party transfer type.
    /// </summary>
    /// <param name = "_inventTransferTable">Cursor of <c>InventTransferTable</c> table.</param>
    protected void custVendInfoInvent_Party(InventTransferTable _inventTransferTable)
    {
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrierInfo = this.getDirPartyInfo(_inventTransferTable.partyVendTable_RU());
                break;

            case CarrierType_W::Customer:
                carrierInfo = this.getDirPartyInfo(CustTable::find(billOfLading.CarrierCode_RU));
                break;

            case CarrierType_W::Vendor:
                carrierInfo = this.getDirPartyInfo(VendTable::find(billOfLading.CarrierCode_RU));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoProd</Name>
				<Source><![CDATA[
    private void custVendInfoProd()
    {
        CustVendTable           payerTable;

        consignorCarrierPos = OffPosition_RU::TransResp;
        consigneeCarrierPos = OffPosition_RU::TransRespCust;
        carrierPos          = OffPosition_RU::TransRespCarrier;

        consignorInfo = this.getCompanyInfo();
        consigneeInfo = consignorInfo;

        this.initCarrierType(consignorInfo);

        switch (billOfLading.TransportationPayerType_RU)
        {
            case TransportationPayerType_RU::Consignor :
            case TransportationPayerType_RU::Consignee :
                payerTable = null;
                break;

            case TransportationPayerType_RU::ThirdParty :
                payerTable = CustTable::find(billOfLading.TransportationPayer_RU);
                break;
        }
        paymentInfo = this.getPaymentInfo(payerTable, billOfLading.DeliveryDate_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInfoSales</Name>
				<Source><![CDATA[
    private void custVendInfoSales(CustVendAC     _invoiceAccount,
                                     VendAccount    _consignor = '',
                                     CustAccount    _consingee = '')
    {
        container                               tmpCon;
        CustVendTable                           payerTable;

        carrierPos = OffPosition_RU::TransRespCarrier;

        date billOfLadingCreateDate = DateTimeUtil::date(billOfLading.CreatedDateTime);
        CustTable consingee = CustTable::find(_consingee ? _consingee : billOfLading.CustAccount);
        consigneeInfo = this.getDirPartyInfo(consingee, false, true);
        consigneeINN = consingee.partyINNasOfDate_RU(billOfLadingCreateDate);
        if (_consignor)
        {
            VendTable consignor = VendTable::find(_consignor);
            consignorInfo = this.getDirPartyInfo(consignor);
            consignorINN = consignor.partyINNasOfDate_RU(billOfLadingCreateDate);
        }
        else
        {
            consignorInfo = this.getCompanyInfo();
            consignorINN = CompanyInfo::find().partyINNasOfDate_RU(billOfLadingCreateDate);
        }

        if (creditNote)
        {
            tmpCon          = consigneeInfo;
            consigneeInfo   = consignorInfo;
            consignorInfo   = tmpCon;

            INN_RU tmpINN = consigneeINN;
            consigneeINN = consignorINN;
            consignorINN = tmpINN;

            consignorCarrierPos = OffPosition_RU::TransRespCust;
            consigneeCarrierPos = OffPosition_RU::TransResp;
        }
        else
        {
            consignorCarrierPos = OffPosition_RU::TransResp;
            consigneeCarrierPos = OffPosition_RU::TransRespCust;
        }

        CustVendTable carrier;
        switch (billOfLading.CarrierType_RU)
        {
            case CarrierType_W::InvoiceAccount:
                carrier = CustTable::find(_invoiceAccount);
            break;

            case CarrierType_W::Customer:
                carrier = CustTable::find(billOfLading.CarrierCode_RU);
            break;

            case CarrierType_W::Vendor:
                carrier = VendTable::find(billOfLading.CarrierCode_RU);
            break;
        }
        carrierInfo = this.getDirPartyInfo(carrier);
        carrierINN = carrier.partyINNasOfDate_RU(billOfLadingCreateDate);

        //Calc payment info
        switch (billOfLading.TransportationPayerType_RU)
        {
            case TransportationPayerType_RU::Consignor :
                if (creditNote)
                {
                    payerTable = CustTable::find(_consingee ? _consingee : billOfLading.custAccount);
                }
                else
                {
                    payerTable = _consignor ?vendTable::find(_consignor) : null;
                }
                break;

            case TransportationPayerType_RU::Consignee :
                if (creditNote)
                {
                    payerTable = _consignor ? VendTable::find(_consignor) : null;
                }
                else
                {
                    payerTable = CustTable::find(_consingee ? _consingee : billOfLading.CustAccount);
                }
                break;

            case TransportationPayerType_RU::ThirdParty :
                    payerTable = CustTable::find(billOfLading.TransportationPayer_RU);
                break;
        }
        paymentInfo = this.getPaymentInfo(payerTable, billOfLading.DeliveryDate_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoInvent</Name>
				<Source><![CDATA[
    private void docInfoInvent()
    {
        InventTransferJour      inventTransferJour;
        InventTransferTable     inventTransferTable;
        WMSShipment             wmsShipment;

        inventTransferTable = InventTransferTable::find(billOfLading.InventTransRefId);
        currencyCode = inventTransferTable.CurrencyCode_RU;

        if (billOfLading.ShipmentId)
        {
            wmsShipment = WMSShipment::find(billOfLading.ShipmentId);
            this.initFromShipment();
            offSessionId = wmsShipment.OffSessionId_RU;
        }
        else
        {
            select firstonly inventTransferJour
                where inventTransferJour.BillOfLadingId_RU == billOfLading.BillOfLadingId;

            if (! inventTransferJour)
            {
                throw error(strFmt("@GLS115701", billOfLadingId));
            }

            this.initFromTransferJour(inventTransferJour);
            offSessionId = inventTransferJour.OffSessionId_RU;
        }

        reportType   = OffReportType_RU::TransferInvoiceM15;
        offCustVend  = ModuleCustVend::Vend;

        this.custVendInfoInvent(inventTransferTable);

        totalAmount  = header.TotalAmountWithVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoProd</Name>
				<Source><![CDATA[
    private void docInfoProd()
    {
        ProdTable prodTable;
        WMSShipment         wmsShipment = WMSShipment::find(billOfLading.ShipmentId);

        prodTable = ProdTable::find(billOfLading.InventTransRefId);
        currencyCode = prodTable.CurrencyCode_RU;

        this.initFromShipment();

        reportType   = OffReportType_RU::TransferInvoiceM15;
        offSessionId = wmsShipment.OffSessionId_RU;

        this.custVendInfoProd();

        totalAmount  = header.TotalAmountWithVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docInfoSales</Name>
				<Source><![CDATA[
    private void docInfoSales()
    {
        SalesTable                  salesTable;
        CustPackingSlipJour         custPackingSlipJour;
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceJour_RU          custInvoiceJourRU;
        SalesReport_WMSBOL_RU       reportBOL;
        SalesReport_InvoiceM15_RU   reportM15;
        WMSShipment                 wmsShipment;
        // <GEEU>
        CustInvoiceJour_Officials   custInvoiceJour_Officials;
        // </GEEU>

        if (billOfLading.ShipmentId)
        {
            salesTable = SalesTable::find(billOfLading.InventTransRefId);
            currencyCode = salesTable.CurrencyCode;
            wmsShipment = WMSShipment::find(billOfLading.ShipmentId);

            this.initFromShipment();

            offSessionId = wmsShipment.OffSessionId_RU;

            this.custVendInfoSales(salesTable.InvoiceAccount,
                                   salesTable.salesTable_RU().ConsignorAccount_RU,
                                   salesTable.salesTable_RU().ConsigneeAccount_RU);

            reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote : OffReportType_RU::SalesInvoice;
        }
        else
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.BillOfLadingId == billOfLading.BillOfLadingId;

            if (custInvoiceJour)
            {
                custInvoiceJourRU = custInvoiceJour.custInvoiceJour_RU();
                custInvoiceJour_Officials = custInvoiceJour.custInvoiceJour_Officials();

                offSessionId = custInvoiceJour_Officials.OffSessionId;
                if (custInvoiceJourRU.CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12)
                {
                    reportBOL = new SalesReport_WMSBOL_RU();
                    reportBOL.setParameters(PrintCopyOriginal::Original, custInvoiceJour);
                    reportBOL.parmIsBOL(true);
                    reportBOL.preRun();
                    header = reportBOL.parmHeader();
                    dynamicData.setTmpData(reportBOL.parmDynamicData());
                }
                else
                {
                    reportM15 = new SalesReport_InvoiceM15_RU();
                    reportM15.setParameters(PrintCopyOriginal::Original, custInvoiceJour);
                    reportM15.parmIsBOL(true);
                    reportM15.preRun();
                    header = reportM15.parmHeader();
                    dynamicData.setTmpData(reportM15.parmDynamicData());
                }

                creditNote = custInvoiceJour.creditNote();
                this.custVendInfoSales(custInvoiceJour.InvoiceAccount,
                                       custInvoiceJourRU.ConsignorAccount_RU,
                                       custInvoiceJourRU.ConsigneeAccount_RU);

                this.accompanyDocInfo(custInvoiceJour);

                currencyCode = custInvoiceJour.CurrencyCode;
                reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote :
                                            (custInvoiceJourRU.CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12 ? OffReportType_RU::SalesInvoice :
                                                                                                                                 OffReportType_RU::SalesInvoiceM15);
            }
            else
            {
                select firstonly custPackingSlipJour
                    where custPackingSlipJour.BillOfLadingId == billOfLading.BillOfLadingId;

                if (custPackingSlipJour)
                {
                    this.initFromPackingSlip(custPackingSlipJour);
                    offSessionId = custPackingSlipJour.OffSessionId_RU;
                    creditNote   = (custPackingSlipJour.Qty < 0);
                    this.custVendInfoSales(custPackingSlipJour.InvoiceAccount,
                                           custPackingSlipJour.salesTable().salesTable_RU().ConsignorAccount_RU,
                                           custPackingSlipJour.salesTable().salesTable_RU().ConsigneeAccount_RU);

                    currencyCode = custPackingSlipJour.salesTable().CurrencyCode;
                    reportType   = creditNote ? OffReportType_RU::SalesInvoiceCreditNote : OffReportType_RU::SalesInvoice;
                }
                else
                {
                    throw error(strFmt("@GLS111079", billOfLadingId));
                }
            }
        }

        totalAmount  = abs(header.TotalAmountWithVAT);
        offCustVend  = ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    #define.FileName('JobTicket')
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + billOfLading.BillOfLadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'JobTicket';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #allpages:
                if (this.validate())
                {
                    billOfLading = WMSBillOfLading::find_RU(billOfLadingId);
                    this.initDocumentInfo();
                    this.fillDocument();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the template.
    /// </summary>
    #define.NamePos(1)
    #define.PhonePos(3)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        Name            consignorName, carrierName;
        boolean         isCompany;
        UnitOfMeasureReportingText      massUnitText;
        UnitOfMeasureReportingText      volumeUnitText;

        this.insertValueToSection(#AccompanyingDoc, this.concat(accompanyingDocInfo));

        isCompany = conPeek(consignorInfo, #IsCompanyPos);
        consignorInfo = conDel(consignorInfo, #IsCompanyPos, 1);
        this.insertValueToSectionNoOverflow(isCompany ? #ConsignorFullName : #ConsignorContactInfo, this.concat(consignorInfo));
        consignorInfo = conPoke(consignorInfo, #IsCompanyPos, isCompany);

        isCompany = conPeek(carrierInfo, #IsCompanyPos);
        carrierInfo = conDel(carrierInfo, #IsCompanyPos, 1);
        this.insertValueToSectionNoOverflow(isCompany ? #ConsigneeFullName : #ConsigneeContactInfo, this.concat(carrierInfo));
        carrierInfo = conPoke(carrierInfo, #IsCompanyPos, isCompany);

        consignorName = conPeek(consignorInfo, #NamePos);
        carrierName   = conPeek(carrierInfo, #NamePos);

        paymentInfo   = conDel(paymentInfo, #IsCompanyPos, 1);
        this.insertValueToSectionNoOverflow(#PayerInfo, this.concat(paymentInfo));
        //find translations for system units of measure;
        massUnitText    = UnitOfMeasureReportingTranslation::findByReportingTranslation(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
                                                                       CompanyInfo::languageId()
                                                                       ).Text;
        if ( !massUnitText )
        {
            massUnitText = UnitOfMeasure::find( UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass)
                                                    .UnitOfMeasure).Symbol;
        }

        volumeUnitText = UnitOfMeasureReportingTranslation::findByReportingTranslation(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume).UnitOfMeasure,
                                                                       CompanyInfo::languageId()
                                                                       ).Text;
        if ( !volumeUnitText )
        {
             volumeUnitText = UnitOfMeasure::find( UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume)
                                                    .UnitOfMeasure).Symbol;
        }

        this.insertValueToSection(#CargoDesc, billOfLading.CargoDescription_RU);
        this.insertValueToSection(#NumPackUnit, this.concat([abs(header.TotalPackagingQty), billOfLading.CargoPacking_RU]));
        this.insertValueToSection(#GrossWeightUnit, this.concat([strFmt("@SYS76498", abs(header.TotalGrossWeight),
                                                                massUnitText),
                                                           strFmt("@SYS76498", abs(header.TotalVolume),
                                                                volumeUnitText)]));

        this.insertValueToSection(#VehicleInfo, VehicleModelTable_W::description(billOfLading.VehicleModel_RU));
        this.insertValueToSection(#VehicleRegNum, billOfLading.VehiclePlateNum_RU);
        this.insertValueToSectionNoOverflow(#ConsignorSign, consignorName);
        this.insertValueToSection(#ConsignorDate, strFmt("@GLS106007", billOfLading.DeliveryDate_RU));
        this.insertValueToSectionNoOverflow(#CarrierSign, carrierName);
        this.insertValueToSection(#CarrierDate, strFmt("@GLS106007", billOfLading.DeliveryDate_RU));
        this.insertValueToSection(#LadingAddr, strRemoveCr(billOfLading.addressLading_RU()));
        this.insertValueToSection(#CarrierDriverInfo, this.concat([billOfLading.DriverName_RU, billOfLading.DriverContact_RU, billOfLading.WaybillNum_RU]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    private container getCompanyInfo()
    {
        CompanyInfo company = CompanyInfo::find();

        return [company.Name, company.postalAddress().Address, company.phone(), true];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides Party information.
    /// </summary>
    /// <param name="_custVendTable">
    /// Customer or Vendor table record to retrieve info from.
    /// </param>
    /// <param name="_isOfficial">
    /// A Boolean determining whether this is official party or not; optional.
    /// </param>
    /// <param name="_getDeliveryAddress">
    /// A Boolean determining whether to retrieve delivery address if possible; optional.
    /// </param>
    /// <returns>
    /// A Container with party info.
    /// </returns>
    private container getDirPartyInfo(CustVendTable _custVendTable, boolean _isOfficial = false, boolean _getDeliveryAddress = false)
    {
        DirPartyTable               dirPartyTable                       = DirPartyTable::findRec(_custVendTable.Party);
        boolean                     isCompany                           = dirPartyTable.partyType() != DirPartyType::Person;
        Addressing                  address;

        if (_getDeliveryAddress)
        {
            address = DirParty::getPostalAddressByType(_custVendTable.Party, LogisticsLocationRoleType::Delivery);
        }

        if (!address)
        {
            address = dirPartyTable.primaryAddress();
        }

        return [dirPartyTable.Name,
                address,
                _isOfficial ? dirPartyTable.primaryPhone() :
                              _custVendTable.phone(),
                isCompany];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfficialsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns string with official.
    /// </summary>
    /// <param name="_session">
    ///     Sesstion id.
    /// </param>
    /// <param name="_position">
    ///     Official position.
    /// </param>
    /// <returns>
    ///     String with oficial details.
    /// </returns>
    #define.AddressPos(2)
    #define.IsCompanyPos(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getOfficialsInfo(
        OffSessionId_RU  _session,
        OffPosition_RU   _position)
    {
        OfficialsTrans_RU   officialsTrans;
        CustVendTable       custVendTable;
        DirPartyTable       partyTable;
        container           vendInfo;

        officialsTrans = OfficialsTrans_RU::findSessionId(_session, _position);

        select firstOnly NameAlias, RecId from partyTable
            where partyTable.NameAlias == officialsTrans.Name;

        custVendTable.clear();
        custVendTable.Party = partyTable.RecId;
        if (custVendTable.Party)
        {
            vendInfo = this.getDirPartyInfo(custVendTable, true);
            vendInfo = conDel(vendInfo, #IsCompanyPos, 1);
            return vendInfo;
        }
        else
        {
            return [officialsTrans.Name];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentInfo</Name>
				<Source><![CDATA[
    private container getPaymentInfo(custVendTable  _contragent = null,
                                     TransDate      _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        SalesPurchReportCounteragentData_RU     counteragentData = new SalesPurchReportCounteragentData_RU();
        CustBankAccount                         custBankAccount;
        VendBankAccount                         vendBankAccount;
        container                               dirPartyInfoCon;
        container                               ret;
        CompanyInfo                             company;

        if (_contragent)
        {
            switch (_contragent.TableId)
            {
                case tableNum(CustTable):
                    select firstonly custBankAccount
                        where custBankAccount.AccountID     == _contragent.BankAccountId
                           && custBankAccount.CustAccount   == _contragent.AccountNum;
                    counteragentData.parmBankAccountTable(custBankAccount);
                    break;
                case tableNum(VendTable):
                    select firstonly vendBankAccount
                        where vendBankAccount.AccountID     == _contragent.BankAccountId
                           && vendBankAccount.VendAccount   == _contragent.AccountNum;
                    counteragentData.parmBankAccountTable(vendBankAccount);
                    break;
            }

            dirPartyInfoCon = this.getDirPartyInfo(_contragent);

            counteragentData.parmTelefax         (_contragent.telefax());
            counteragentData.parmOKDP            (_contragent.partyOKDPasOfDate_RU(_date));
            counteragentData.parmOKPO            (_contragent.partyOKPOasOfDate_RU(_date));
            counteragentData.parmINN             (_contragent.partyINNasOfDate_RU(_date));
            counteragentData.parmStructDept      (_contragent.getStructDepartment_RU());
        }
        else
        {
            dirPartyInfoCon = this.getCompanyInfo();

            company = CompanyInfo::find();
            counteragentData.parmTelefax         (company.TeleFax());
            counteragentData.parmBankAccountTable(BankAccountTable::find(company.Bank));
            counteragentData.parmOKDP            (CompanyInfoHelper::partyOKDPasOfDate_RU(company, _date));
            counteragentData.parmOKPO            (CompanyInfoHelper::partyOKPOasOfDate_RU(company, _date));
            counteragentData.parmINN             (company.partyINNasOfDate_RU(_date));
            counteragentData.parmStructDept      (SalesParameters::find().StructDepartment_RU);
        }
        counteragentData.parmName            (conpeek(dirPartyInfoCon, 1));
        counteragentData.parmAddress         (conpeek(dirPartyInfoCon, 2));
        counteragentData.parmPhone           (conpeek(dirPartyInfoCon, 3));

        ret += counteragentData.parmName();
        ret += counteragentData.parmAddress();
        ret += counteragentData.fullBankAccountName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes class with data about document being printed.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDocumentInfo()
    {
        switch (billOfLading.wmsReferenceType)
        {
            case WMSReferenceType::TransferOrderShipment:
                this.docInfoInvent();
            break;

            case WMSReferenceType::Sales:
                this.docInfoSales();
            break;

            case WMSReferenceType::ProductionOrder_RU:
            case WMSReferenceType::ProductionLine:
                this.docInfoProd();
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPackingSlip</Name>
				<Source><![CDATA[
    private void initFromPackingSlip(CustPackingSlipJour _custPackingSlipJour)
    {
        CustPackingSlipTrans    custPackingSlipTrans;
        InventTable             inventTable;
        ItemId                  itemId;

        TaxPackagingQty         taxPackingQty;
        Qty                     qty, qtyInStandardUnits;

        boolean                 conversionOk;

        while select custPackingSlipTrans
            where custPackingSlipTrans.SalesId       == _custPackingSlipJour.SalesId
               && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
               && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
        outer join inventTable
            where inventTable.ItemId == custPackingSlipTrans.ItemId
        {
            itemId                      = FormLetter::journalItemId(ModuleInventPurchSales::Sales,
                                                                    custPackingSlipTrans.ItemId,
                                                                    custPackingSlipTrans.ExternalItemId);
            dynamicData.clear();
            dynamicData.ItemId          = itemId;
            dynamicData.ItemName        = custPackingSlipTrans.itemName();

            dynamicData.Unit            = UnitOfMeasureReportingTranslation::findByReportingTranslation(
                                                UnitOfMeasure::findBySymbol(custPackingSlipTrans.SalesUnit).RecId,
                                                billOfLading.LanguageId
                                                ).Text;
            if (! dynamicData.Unit)
            {
                dynamicData.Unit = UnitOfMeasureReportingTranslation::findByReportingTranslation(
                                                UnitOfMeasure::findBySymbol(custPackingSlipTrans.SalesUnit).RecId,
                                                billOfLading.LanguageId
                                                ).Text;
            }

            qty             = custPackingSlipTrans.Qty;
            dynamicData.Qty = qty;

            dynamicData.LineAmount = abs(custPackingSlipTrans.salesLine().calcLineAmountInclTax_RU(qty));
            if (inventTable)
            {
                UnitOfMeasureSymbol toUnitOfMeasure = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;

                EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                                                          custPackingSlipTrans.InventDimId,
                                                                                                                                          custPackingSlipTrans.SalesUnit,
                                                                                                                                          toUnitOfMeasure,
                                                                                                                                          NoYes::No);

                conversionOk    = ecoResProductUnitConverter.canValueBeConverted();
                if (! conversionOk)
                {
                    warning(strFmt("@SYS28690", custPackingSlipTrans.SalesUnit, toUnitOfMeasure));
                }

                qtyInStandardUnits              = (custPackingSlipTrans.SalesUnit && custPackingSlipTrans.Qty && conversionOk)
                                                  ?
                                                      ecoResProductUnitConverter.convertValue(qty)
                                                  :
                                                  qty;

                if (qtyInStandardUnits)
                    taxPackingQty               = abs(inventTable.TaxPackagingQty) * qty / qtyInStandardUnits;

                dynamicData.TaxPackagingQty     = taxPackingQty;
                dynamicData.QtyNumber           = abs(taxPackingQty ? roundUp(custPackingSlipTrans.Qty / taxPackingQty, 1) : 0);
                dynamicData.Packing             = inventTable.Packing_RU;
                dynamicData.GrossWeight         = abs(qtyInStandardUnits * inventTable.grossWeight());
            }
            else
            {
                dynamicData.GrossWeight  = SalesLineForeignTradeCategory::findSalesLine(custPackingSlipTrans.salesLine()).UnitWeight * custPackingSlipTrans.Qty;
            }

            dynamicData.insert();

            header.TotalGrossWeight         += dynamicData.GrossWeight;
            header.TotalPackagingQty        += dynamicData.QtyNumber;
            header.TotalVolume              += qtyInStandardUnits * inventTable.UnitVolume;
            header.TotalAmount              += custPackingSlipTrans.ValueMST;
            header.TotalAmountWithVAT       += dynamicData.LineAmount;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    private void initFromShipment()
    {
        SalesLine               salesLine;
        ProdBOM                 prodBOM;
        InventTransferLine      inventTransferLine;

        WMSOrderTrans           wmsOrderTrans;
        InventTable             inventTable;
        InventDim               inventDim;
        SalesQty                salesQty;
        BOMQty                  bomQty;

        // init lines
        while select wmsOrderTrans
            where wmsOrderTrans.ShipmentId      == billOfLading.ShipmentId
               && wmsOrderTrans.Customer        == billOfLading.CustAccount
               && wmsOrderTrans.DeliveryPostalAddress == billOfLading.DeliveryPostalAddress
        join inventDim
            where inventDim.InventDimId == wmsOrderTrans.InventDimId
        join inventTable
            where inventTable.ItemId == wmsOrderTrans.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = wmsOrderTrans.ItemId;
            dynamicData.ItemName        = wmsOrderTrans.inventTable().itemName(inventDim);
            dynamicData.Unit            = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(wmsOrderTrans.unitId()).RecId,
                                                                                      billOfLading.LanguageId ).Description;
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = wmsOrderTrans.Qty;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(wmsOrderTrans.Qty / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = wmsOrderTrans.Qty * inventTable.grossWeight();

            if (wmsOrderTrans.isProdLine_RU())
            {
                prodBOM = ProdBOM::findTransId(wmsOrderTrans.InventTransId);

                if (prodBOM)
                {
                    bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                   prodBOM.InventDimId,
                                                                                                   prodBOM.QtyBOMCalc,
                                                                                                   prodBOM.UnitId,
                                                                                                   wmsOrderTrans.unitId(),
                                                                                                   NoYes::No);
                    if (bomQty)
                    {
                        dynamicData.LineAmount  = CurrencyExchangeHelper::amount(prodBOM.LineAmount_RU * wmsOrderTrans.Qty / bomQty);
                    }
                }
            }
            else
            if (wmsOrderTrans.InventTransType == InventTransType::TransferOrderShip)
            {
                select firstonly inventTransferLine
                    where inventTransferLine.TransferId     == wmsOrderTrans.InventTransRefId
                       && inventTransferLine.InventTransId  == wmsOrderTrans.InventTransId;

                if (inventTransferLine)
                {
                    dynamicData.LineAmount  = CurrencyExchangeHelper::amount(inventTransferLine.LineAmount_RU * wmsOrderTrans.Qty / inventTransferLine.QtyTransfer);
                }
            }
            else
            {
                salesLine                = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
                salesQty                 = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                                 wmsOrderTrans.inventDimId,
                                                                                                                 wmsOrderTrans.Qty,
                                                                                                                 wmsOrderTrans.unitId(),
                                                                                                                 salesLine.SalesUnit,
                                                                                                                 NoYes::No);

                dynamicData.LineAmount   = abs(salesLine.calcLineAmountInclTax_RU(salesQty));
                dynamicData.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(dynamicData.LineAmount, salesLine.CurrencyCode, currencyCode, DateTimeUtil::date(billOfLading.CreatedDateTime));
            }

            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalPackagingQty    += dynamicData.QtyNumber;
            header.TotalVolume          += wmsOrderTrans.Qty * inventTable.UnitVolume;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransferJour</Name>
				<Source><![CDATA[
    private void initFromTransferJour(InventTransferJour _inventTransferJour)
    {
        InventTransferJourLine  inventTransferJourLine;
        InventTable             inventTable;

        // init lines
        while select inventTransferJourLine
            where inventTransferJourLine.TransferId == _inventTransferJour.TransferId
               && inventTransferJourLine.VoucherId  == _inventTransferJour.VoucherId
        join inventTable
            where inventTable.ItemId                == inventTransferJourLine.ItemId
        {
            dynamicData.clear();
            dynamicData.ItemId          = inventTransferJourLine.ItemId;
            dynamicData.ItemName        = inventTransferJourLine.itemName();

            dynamicData.Unit            = inventTransferJourLine.UnitId;
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.Qty             = inventTransferJourLine.QtyShipped;
            dynamicData.QtyNumber       = inventTable.TaxPackagingQty ? roundUp(inventTransferJourLine.QtyShipped / inventTable.TaxPackagingQty, 1) : 0;
            dynamicData.GrossWeight     = inventTransferJourLine.QtyShipped * inventTable.grossWeight();
            dynamicData.LineAmount      = inventTransferJourLine.LineAmountShipped_RU;
            dynamicData.insert();

            header.TotalAmountWithVAT   += dynamicData.LineAmount;
            header.TotalGrossWeight     += dynamicData.GrossWeight;
            header.TotalPackagingQty    += dynamicData.QtyNumber;
            header.TotalVolume          += inventTransferJourLine.QtyShipped * inventTable.UnitVolume;
        }

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#allpages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageWidth</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns width of report in columns.
    /// </summary>
    /// <returns>
    ///   Width of report in columns.
    /// </returns>
    #define.pageWidth(64)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int pageWidth()
    {
        return #pageWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfLading</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WMSBillOfLading parmBillOfLading(WMSBillOfLading _billOfLading = billOfLading)
    {
        billOfLading    = _billOfLading;
        billOfLadingId  = _billOfLading.BillOfLadingId;
        return billOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(WMSJobTicket_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.docInfoCells(3)
        #define.docCells(19)
        return #docInfoCells + #docCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnitsOfMeasure</Name>
				<Source><![CDATA[
    private static boolean checkUnitsOfMeasure()
    {
        boolean ret = true;

        setPrefix("@GLS221918");

        if ( !UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass))
        {
            ret = checkFailed(strFmt("@GLS222804", enum2str(UnitOfMeasureClass::Mass) ));
        }

        if ( !UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::DryVolume))
        {
            ret = checkFailed(strFmt("@GLS222804", enum2str(UnitOfMeasureClass::DryVolume) ));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new instance of <c>OXMLExcelReport_JobTicket</c> class.
    /// </summary>
    /// <param name="_type">
    ///   Enum which determines which class should be created.
    /// </param>
    /// <returns>
    ///   <c>OXMLExcelReport_JobTicket</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_JobTicket construct(TransportInvoiceType_RU _type)
    {
        OXMLExcelReport_JobTicket report;
        switch (_type)
        {
            case TransportInvoiceType_RU::Invoice:
                report = new OXMLExcelReport_TransportInvoice();
                break;
            default:
                report = new OXMLExcelReport_JobTicket();
        }
        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes <c>OXMLExcelReport_JobTicket</c> report using specified print management setting.
    /// </summary>
    /// <param name="_args">
    ///   <c>Args</c> object holding parameters.
    /// </param>
    /// <param name="_settingDetail">
    ///   <c>PrintMgmtPrintSettingDetail</c> object, which contains data about print management setting.
    /// </param>
    /// <param name="_recordId">
    ///   Record id of journal being printed.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeWithPrintMgmt(
        Args                        _args,
        PrintMgmtPrintSettingDetail _settingDetail,
        RecId                       _recordId)
    {
        OXMLExcelReport_TransportInvoice    oxmlReport;

        WMSBillOfLading                     billOfLading = _args.record();
        PrintCopyOriginal                   printCopyOriginal;

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

        oxmlReport = OXMLExcelReport_JobTicket::construct(billOfLading.TransportInvoiceType_RU);
        oxmlReport.parmArgs(_args);
        oxmlReport.parmBillOfLading(billOfLading);
        oxmlReport.parmPrintCopyOriginal(printCopyOriginal);

        SRSPrintDestinationSettings printSettings = _settingDetail.parmPrintJobSettings();

        if (oxmlReport.isPdfConversionEnabled(printSettings))
        {
            oxmlReport.parmPrintDestinationSettings(printSettings);
        }

        if (oxmlReport.init())
        {
            oxmlReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if ( ! OXMLExcelReport_JobTicket::checkUnitsOfMeasure() )
        {
            return;
        }
        if (! _args)
        {
            return;
        }

        NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU, _args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>