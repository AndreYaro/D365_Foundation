<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineAutoReallocatorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineAutoReallocatorBase</c> class is responsible for automatically reallocating a work line.
/// </summary>
public abstract class WHSWorkLineAutoReallocatorBase extends WHSWorkLineReallocatorBase
{
    protected WHSTmpWorkLine tmpWorkLine;
    protected boolean        fullQtyReallocationRequested;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineAutoReallocatorBase</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_workLineReallocationParams">The parameters object to retrieve the information for the work line reallocation from</param>
    /// <returns>A new instance of the <c>WHSWorkLineAutoReallocatorBase</c> class</returns>
    public static WHSWorkLineAutoReallocatorBase newFromParams(WHSWorkLineReallocationParams _workLineReallocationParams)
    {
        WHSWorkLine  shortPickedWorkLine = _workLineReallocationParams.getShortPickedWorkLine();
        WHSWorkTable workLineToReallocateWorkTable = WHSWorkTable::find(shortPickedWorkLine.WorkId);

        WHSWorkLineAutoReallocatorBase workLineReallocator = WHSWorkLineAutoReallocatorBase::singletonFromWorkTransType(workLineToReallocateWorkTable.WorkTransType);

        if (!workLineReallocator)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
  
        workLineReallocator.parmWorkLineToReallocate(shortPickedWorkLine);
        workLineReallocator.parmWorkException(_workLineReallocationParams.getWorkException());
        if (workLineReallocator.parmIsReallocateCWItem())
        {
            workLineReallocator.parmInitialWorkLineInventHandlingQty(_workLineReallocationParams.getInitialWorkLineInventHandlingQty());
        }
        else
        {
            workLineReallocator.parmInitialWorkLineInventQty(_workLineReallocationParams.getInitialWorkLineInventHandlingQty());
        }
        workLineReallocator.parmWorkTable(workLineToReallocateWorkTable);
        workLineReallocator.parmUserId(_workLineReallocationParams.getWorkUser().UserId);
        if (workLineReallocator.parmIsReallocateCWItem())
        {
            workLineReallocator.parmShortPickInventHandlingQty(_workLineReallocationParams.getShortPickInventHandlingQty());
        }
        else
        {
            workLineReallocator.parmShortPickInventQty(_workLineReallocationParams.getShortPickInventHandlingQty());
        }
        workLineReallocator.parmFullQtyReallocationRequested(_workLineReallocationParams.getFullQtyReallocationRequested());

        return workLineReallocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkTransTypeSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isWorkTransTypeSupported(WHSWorkTransType _workTransType)
    {
        return WHSWorkLineAutoReallocatorBase::singletonFromWorkTransType(_workTransType) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromWorkTransType</Name>
				<Source><![CDATA[
    private static WHSWorkLineAutoReallocatorBase singletonFromWorkTransType(WHSWorkTransType _workTransType)
    {
        WHSWorkLineReallocatorAttribute reallocatorAttribute = new WHSWorkLineReallocatorAttribute(_workTransType);
        WHSWorkLineAutoReallocatorBase workLineReallocator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkLineAutoReallocatorBase), reallocatorAttribute);
        return workLineReallocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullQtyReallocationRequested</Name>
				<Source><![CDATA[
    protected boolean parmFullQtyReallocationRequested(boolean _fullQtyReallocationRequested = fullQtyReallocationRequested)
    {
        fullQtyReallocationRequested = _fullQtyReallocationRequested;

        return fullQtyReallocationRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventQtyThatCanBeAutoReallocated</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the calculateHandlingQtyThatCanBeAutoReallocated method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty calculateInventQtyThatCanBeAutoReallocated()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.calculateInventHandlingQuantitesThatCanBeAutoReallocated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyThatCanBeAutoReallocated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHandlingQty calculateHandlingQtyThatCanBeAutoReallocated()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.calculateInventHandlingQuantitesThatCanBeAutoReallocated();
        }
        
        return this.calculateInventQtyThatCanBeAutoReallocated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventHandlingQuantitesThatCanBeAutoReallocated</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateInventHandlingQuantitesThatCanBeAutoReallocated()
    {
        WHSWorkLineReallocationValidator reallocationValidator = this.getWorkLineReallocationValidator();
        if (!reallocationValidator.validate())
        {
            return 0;
        }
        
        this.initTmpReallocatedWorkLines();

        LineNum lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated = tmpWorkLine.getLastLineNum();

        ttsbegin;

        InventHandlingQty inventQtyThatCanBeReallocated = this.createTmpReallocatedWorkLinesHandlingQty(initialWorkLineInventHandlingQty - shortPickInventHandlingQty);

        this.cleanupTmpWorkLines(lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated);

        ttscommit;

        return inventQtyThatCanBeReallocated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to reallocate the specified quantity from another location, than the one already specified in the work line
    /// and adjusts the load line quantity if set.
    /// </summary>
    /// <returns>The inventory quantity that was reallocated</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty reallocateWorkLine()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        return this.reallocateWorkLineHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to reallocate the specified quantity from another location, than the one already specified in the work line
    /// and adjusts the load line quantity if set.
    /// </summary>
    /// <returns>The inventory quantity that was reallocated</returns>
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.reallocateWorkLineHandlingQuantity();
        }

        return this.reallocateWorkLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty reallocateWorkLineHandlingQuantity()
    {
        WHSWorkLineReallocationValidator reallocationValidator = this.getWorkLineReallocationValidator();
        if (!reallocationValidator.validate())
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                        workTable.WorkBuildId,
                                        strFmt("@WAX:ReallocationNotExecuted", workLineToReallocate.LineNum),
                                        false);

            return 0;
        }

        ttsbegin;

        InventHandlingQty requestedInventQtyToReallocate = initialWorkLineInventHandlingQty - workLineToReallocate.InventQtyWork;

        inventHandlingQtyToReallocate = this.calculateHandlingQtyToReallocate(requestedInventQtyToReallocate);

        this.initTmpReallocatedWorkLines();

        LineNum lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated = tmpWorkLine.getLastLineNum();

        reallocatedInventHandlingQty = this.createTmpReallocatedWorkLinesHandlingQty(inventHandlingQtyToReallocate);
        InventHandlingQty quantityNotReallocated = requestedInventQtyToReallocate - reallocatedInventHandlingQty;

        if (fullQtyReallocationRequested && quantityNotReallocated > 0)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                        workTable.WorkBuildId,
                                        strFmt("@WAX:NotAllQtyAutoReallocatedBecauseOfUpdates", workLineToReallocate.LineNum),
                                        false);
        }

        if (reallocatedInventHandlingQty > 0)
        {
            this.adjustLoadLineHandlingQuantities(workLineToReallocate, reallocatedInventHandlingQty, workException.AutoDecrementShipment);

            this.createReallocatedWorkLinesFromTmpWorkLines(lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated);
        }

        this.adjustHandlingQuantitiesPostShortPickConfirmation(reallocatedInventHandlingQty, quantityNotReallocated);

        ttscommit;

        return reallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyToReallocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory handling quantity that is already reserved and can be reallocated.
    /// </summary>
    /// <param name = "_requestedInventHandlingQtyToReallocate">The requested inventory quantity to be reallocated</param>
    /// <returns>The inventory quantity that can be reallocated</returns>
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQtyToReallocate(InventHandlingQty _requestedInventHandlingQtyToReallocate)
    {
        return this.calculateInventHandlingQuantityToReallocate(_requestedInventHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventHandlingQuantityToReallocate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected  InventHandlingQty calculateInventHandlingQuantityToReallocate(InventHandlingQty _requestedInventHandlingQtyToReallocate)
    {
        inventHandlingQtyToReallocate = initialWorkLineInventHandlingQty - workLineToReallocate.InventQtyWork;

        if (workException.AdjustInventory
            && WHSAdjustmentType::find(workException.DefaultAdjustmentTypeCode).RemoveReservation)
        {
            inventHandlingQtyToReallocate = min(this.calculateHandlingQtyAvailForWorkCreationAboveLocationDims(), inventHandlingQtyToReallocate);
        }

        return inventHandlingQtyToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineReallocationValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSWorkLineReallocationValidator</c> instance.
    /// </summary>
    /// <returns>A new instance of the validator for reallocating a work line</returns>
    protected WHSWorkLineReallocationValidator getWorkLineReallocationValidator()
    {
        return WHSWorkLineReallocationValidator::newFromWorkLine(
                                                        workLineToReallocate,
                                                        initialWorkLineInventHandlingQty,
                                                        initialWorkLineInventHandlingQty - workLineToReallocate.InventQtyWork,
                                                        workException,
                                                        userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWaveTable</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromWaveTable()
    {
        WHSWaveTable waveTable = WHSWaveTable::find(workTable.WaveId);

        tmpWorkLine.OriginType           = WHSOriginType::Wave;
        tmpWorkLine.OriginRefId          = waveTable.WaveId;
        tmpWorkLine.WorkCreateId         = waveTable.WorkBuildId;
        tmpWorkLine.WaveAttributeCode    = waveTable.WaveAttributeCode;
        tmpWorkLine.WaveId               = waveTable.WaveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromLoadLine</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromLoadLine()
    {
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(workLineToReallocate.LoadLineRefRecId);

        tmpWorkLine.RefRecId             = loadLine.RecId;
        tmpWorkLine.OrderNum             = loadLine.OrderNum;
        tmpWorkLine.InventTransId        = loadLine.InventTransId;
        tmpWorkLine.InventDimId          = loadLine.InventDimId;
        tmpWorkLine.ItemId               = loadLine.ItemId;
        tmpWorkLine.ShipmentId           = loadLine.ShipmentId;
        tmpWorkLine.LoadLineRefRecId     = loadLine.RecId;
        tmpWorkLine.PackingQty           = loadLine.PackingQty;
        tmpWorkLine.LoadId               = loadLine.LoadId;
        tmpWorkLine.RefTableId           = tableNum(WHSLoadLine);
        
        if (WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled())
        {
            if (loadLine.InventTransType == InventTransType::TransferOrderShip)
            {
                InventTransferLine inventTransferLine = loadLine.getOrderCommonFromLoadLine() as InventTransferLine;
                tmpWorkLine.ToWarehouse = inventTransferLine.inventTransferTable().InventLocationIdTo;
            }
            else
            {
                tmpWorkLine.CustVendAC = loadLine.displayCustAccount();
            }
        }
        else
        {
            if (loadLine.InventTransType == InventTransType::TransferOrderShip)
            {
                InventTransferLine inventTransferLine = loadLine.getOrderCommonFromLoadLine() as InventTransferLine;
                tmpWorkLine.ToWarehouse = inventTransferLine.inventTransferTable().InventLocationIdTo;
            }
            else if (loadLine.InventTransType == InventTransType::Sales)
            {
                SalesLine salesLine = loadLine.getOrderCommonFromLoadLine() as SalesLine;
                tmpWorkLine.CustVendAC = salesLine.CustAccount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromShipmentTable</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromShipmentTable()
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(workLineToReallocate.ShipmentId);

        tmpWorkLine.CarrierCode          = shipmentTable.CarrierCode;
        tmpWorkLine.CarrierServiceCode   = shipmentTable.CarrierServiceCode;
        tmpWorkLine.ModeCode             = shipmentTable.ModeCode;
        tmpWorkLine.WorkTransType        = shipmentTable.WorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWorkLineToReallocate</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromWorkLineToReallocate()
    {
        tmpWorkLine.WorkId      = workLineToReallocate.WorkId;
        tmpWorkLine.ContainerId = workLineToReallocate.ContainerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpReallocatedWorkLines</Name>
				<Source><![CDATA[
    protected void initTmpReallocatedWorkLines()
    {
        tmpWorkLine.WorkType = WHSWorkType::Pick;

        this.initTmpWorkLineFromWorkLineToReallocate();
        this.initTmpWorkLineFromWaveTable();
        this.initTmpWorkLineFromLoadLine();
        this.initTmpWorkLineFromShipmentTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReallocatedWorkLines</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    protected Qty createTmpReallocatedWorkLines(Qty _inventQtyToReallocate)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.createTmpReallocatedWorkLinesHandlingQuantities(_inventQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReallocatedWorkLinesHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty createTmpReallocatedWorkLinesHandlingQty(InventHandlingQty _inventHandlingQtyToReallocate)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.createTmpReallocatedWorkLinesHandlingQuantities(_inventHandlingQtyToReallocate);
        }

        return this.createTmpReallocatedWorkLines(_inventHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReallocatedWorkLinesHandlingQuantities</Name>
				<Source><![CDATA[
    private InventHandlingQty createTmpReallocatedWorkLinesHandlingQuantities(InventHandlingQty _inventHandlingQtyToReallocate)
    {
        WHSLocationDirective locationDirective = new WHSLocationDirective();
        locationDirective.setGlobals(tmpWorkLine.WorkCreateId, tmpWorkLine.OriginType, tmpWorkLine.OriginRefId, tmpWorkLine);

        InventHandlingQty runningInventHandlingQty = _inventHandlingQtyToReallocate;
        InventHandlingQty localReallocatedInventHandlingQty = 0;

        WHSLocDirHintCode   workTemplateLineDirectiveCode = WHSWorkTemplateLine::findByRecId(workLineToReallocate.WorkTemplateLineRecId).LocDirHintCode;

        Set locationToExclude = new Set(Types::String);
        locationToExclude.add(workLineToReallocate.WMSLocationId);

        InventDim inventDim = InventDim::find(tmpWorkLine.InventDimId);

        while (runningInventHandlingQty > 0)
        {
            WMSLocationId       pickLocationId;
            InventHandlingQty   qty, inventHandlingQty;
            UnitOfMeasureSymbol unitId;

            locationDirective.parmSkipImmedReplen(true);

            [pickLocationId, qty, unitId, inventHandlingQty] = locationDirective.findPickPutLocation(inventDim.InventDimId,
                                                                                                    tmpWorkLine.InventTransId,
                                                                                                    tmpWorkLine.ItemId,
                                                                                                    runningInventHandlingQty,
                                                                                                    tmpWorkLine.WorkTransType,
                                                                                                    tmpWorkLine.WorkType,
                                                                                                    workTemplateLineDirectiveCode,
                                                                                                    tmpWorkLine.PackingQty,
                                                                                                    locationToExclude,
                                                                                                    tmpWorkLine.CustVendAC,
                                                                                                    tmpWorkLine.InventBatchId,
                                                                                                    workTable.DispositionCode);

            WhsWorkLineReallocateQuantitiesParameters reallocateQuantitiesParameters = 
                                                        this.createReallocateQuantitiesParameters(inventDim, 
                                                                                                  locationDirective, 
                                                                                                  pickLocationId, 
                                                                                                  runningInventHandlingQty, 
                                                                                                  qty, 
                                                                                                  unitId, 
                                                                                                  inventHandlingQty);
            
            
            this.initializeTmpWorkLineFromWorkLineReallocateQuantities(reallocateQuantitiesParameters);
                                                    
            if (tmpWorkLine.WMSLocationId)
            {
                tmpWorkLine.insert();
                runningInventHandlingQty -= inventHandlingQty;
                localReallocatedInventHandlingQty += inventHandlingQty;
            }
            else
            {
                WHSWorkCreateHistory::createWorkHistoryLine(
                                                    tmpWorkLine.WorkCreateId,
                                                    strFmt("@WAX:NotAllQuantityWasReallocated", _inventHandlingQtyToReallocate, _inventHandlingQtyToReallocate - runningInventHandlingQty),
                                                    false);
                break;
            }
        }

        return localReallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReallocateQuantitiesParameters</Name>
				<Source><![CDATA[
    private WhsWorkLineReallocateQuantitiesParameters createReallocateQuantitiesParameters(
            InventDim             _inventDim,
            WhsLocationDirective  _locationDirective,
            WMSLocationId         _pickLocationId,
            InventHandlingQty     _runningInventHandlingQty,
            InventHandlingQty     _qty,
            UnitOfMeasureSymbol   _unitId,
            InventHandlingQty     _inventHandlingQty)
    {
        WhsWorkLineReallocateQuantitiesParameters parameters = WhsWorkLineReallocateQuantitiesParameters::construct();
        parameters.inventDim                = _inventDim;
        parameters.locationDirective        = _locationDirective;
        parameters.pickLocationId           = _pickLocationId;
        parameters.runningInventHandlingQty = _runningInventHandlingQty;
        parameters.qty                      = _qty;
        parameters.unitId                   = _unitId;
        parameters.inventHandlingQty        = _inventHandlingQty;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpWorkLineFromWorkLineReallocateQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the temporary work line from work line reallocate quantities parameters.
    /// </summary>
    /// <param name = "_reallocateParameters">Instance of <c>WhsWorkLineReallocateQuantitiesParameters</c> to initialize from.</param>
    protected void initializeTmpWorkLineFromWorkLineReallocateQuantities(
            WhsWorkLineReallocateQuantitiesParameters _reallocateParameters)
    {
        tmpWorkLine.initFromInventDim(_reallocateParameters.inventDim);

        tmpWorkLine.setWMSLocation(_reallocateParameters.pickLocationId, _reallocateParameters.inventDim.InventLocationId);
        tmpWorkLine.initInventAndDirectiveQuantities(_reallocateParameters.runningInventHandlingQty, 
                                                     _reallocateParameters.qty, 
                                                     _reallocateParameters.unitId, 
                                                     _reallocateParameters.inventHandlingQty);

        [tmpWorkLine.HighestQty,
             tmpWorkLine.HighestUnitId] = WHSInventTable::getHighestUnitQtyByUOMSeqGroup(tmpWorkLine.ItemId,
                                                                                         tmpWorkLine.DirectiveQty,
                                                                                         tmpWorkLine.DirectiveUOM,
                                                                                         tmpWorkLine.InventDimId);

        tmpWorkLine.setPackQtyCompare();
        tmpWorkLine.fefoBatchId = _reallocateParameters.locationDirective.parmFEFOBatchId();
        tmpWorkLine.setLineNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupTmpWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the temporary work lines that have been created during the reallocation process, regardless of the
    /// RetainTmpWorkTable parameter in the <c>WHSParameters</c> table
    /// </summary>
    /// <param name = "_lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated">The last line number of the work before the reallocated tmp lines were created</param>
    protected void cleanupTmpWorkLines(LineNum _lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated)
    {
        WHSTmpWorkLine locTmpWorkLine;

        delete_from locTmpWorkLine
            where locTmpWorkLine.LineNum > _lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated
                && locTmpWorkLine.WorkCreateId == tmpWorkLine.WorkCreateId
                && locTmpWorkLine.WorkId == tmpWorkLine.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReallocatedWorkLinesFromTmpWorkLines</Name>
				<Source><![CDATA[
    protected void createReallocatedWorkLinesFromTmpWorkLines(LineNum _lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated)
    {
        WHSTmpWorkLine                      locTmpWorkLine;
        LineNum                             reallocatedWorkLineNum = lastLineNumOfWorkBeforeReallocatedLinesAreCreated + 1;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        UnitOfMeasureSymbol                 inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(workLineToReallocate.ItemId);

        WHSWorkLine reallocatedWorkLine = this.initReallocatedWorkLine();

        while select forupdate locTmpWorkLine
            order by locTmpWorkLine.LineNum
            where locTmpWorkLine.WorkId == tmpWorkLine.WorkId
                && locTmpWorkLine.LineNum > _lastTmpWorkLineNumBeforeReallocatedTmpLinesWereCreated
                && locTmpWorkLine.WorkCreateId == tmpWorkLine.WorkCreateId
        {
            reallocatedWorkLine.LineNum     = reallocatedWorkLineNum;
            reallocatedWorkLineNum ++;

            this.initReallocatedWorkLineFromTmpWorkLine(reallocatedWorkLine, locTmpWorkLine);
            reallocatedWorkLine.InventQtyWork          = releasedProductUnitConverter.convert(reallocatedWorkLine.QtyWork,
                                                                              UnitOfMeasure::unitOfMeasureIdBySymbol(reallocatedWorkLine.UnitId),
                                                                              UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitId),
                                                                              NoYes::No,
                                                                              locTmpWorkLine.ItemId,
                                                                              locTmpWorkLine.InventDimId,
                                                                              NoYes::No);
            reallocatedWorkLine.QtyRemain              = reallocatedWorkLine.QtyWork;
            reallocatedWorkLine.InventQtyRemain        = reallocatedWorkLine.InventQtyWork;
            
            reallocatedWorkLine.insert();

            this.createWorkInventTransForReallocatedLine(reallocatedWorkLine);

            locTmpWorkLine.WorkCreated = NoYes::Yes;
            locTmpWorkLine.update();
        }

        this.cleanupTmpWorkLines(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReallocatedWorkLineFromTmpWorkLine</Name>
				<Source><![CDATA[
    protected void initReallocatedWorkLineFromTmpWorkLine(WHSWorkLine _reallocatedWorkLine, WHSTmpWorkLine _locTmpWorkLine)
    {
        _reallocatedWorkLine.wmsLocationId          = _locTmpWorkLine.wmsLocationId;
        _reallocatedWorkLine.SortCode               = _locTmpWorkLine.SortCode;
        _reallocatedWorkLine.ZoneId                 = _locTmpWorkLine.ZoneId;
        _reallocatedWorkLine.InventDimId            = _locTmpWorkLine.InventDimId;
        _reallocatedWorkLine.UnitId                 = _locTmpWorkLine.HighestUnitId;
        _reallocatedWorkLine.QtyWork                = _locTmpWorkLine.HighestQty;
        _reallocatedWorkLine.InventTransId          = _locTmpWorkLine.InventTransId;
        _reallocatedWorkLine.ContainerId            = _locTmpWorkLine.ContainerId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>