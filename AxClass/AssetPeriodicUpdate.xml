<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPeriodicUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetPeriodicUpdate</c> class is used to update the <c>AssetReplaceCost</c> and
///    <c>InsuredValue</c> field values of selected <c>AssetTable</c> records based on the
///    <c>ReplacementCostFactor</c> and <c>InsuredValueFactor</c> field values of the associated
///    <c>AssetGroup</c> record.
/// </summary>
/// <remarks>
///    A query is available to restrict the assets that are updated.
/// </remarks>
class AssetPeriodicUpdate extends RunBaseBatch implements BatchRetryable
{
    QueryRun                queryRun;
    date                    currentSystemDate;
    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class can be executed in batch mode.
    /// </summary>
    /// <returns>
    ///    true if the class can be executed in batch mode; otherwise false.
    /// </returns>
    public boolean canGoBatch()
    {
        ;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Object ret;

        ret = this.dialogInternal(dialog, forceOnClient);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the query object when not invoked in batch mode to add a default date.
    /// </summary>
    /// <remarks>
    ///    If it is not in batch mode, it will call the <c>initLastFactorUpdateDateRange</c> method to apply
    ///    the current system date as a default value for the <c>LastFactorUpdateDate</c> field range.
    /// </remarks>
    public void getLast()
    {
        ;

        super();
        if (! this.isInBatch())
        {
            this.initLastFactorUpdateDateRange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLastFactorUpdateDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>LastFactorUpdateDate</c> value range to be less than the current date.
    /// </summary>
    /// <remarks>
    ///    This replaces any range previously applied to that date value.
    /// </remarks>
    protected void initLastFactorUpdateDateRange()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        str datestrdone;

        ;

        queryBuildDataSource = queryRun.query().dataSourceNo(1);
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(AssetTable ,LastFactorUpdateDate));
        datestrdone =strfmt ('< %1', date2StrUsr(currentSystemDate, DateFlags::FormatAll));
        queryBuildRange.value(datestrdone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class parameters the first time the class in instantiated.
    /// </summary>
    /// <remarks>
    ///    This is called only if there are no settings in the <c>SysLastValue</c> table.This calls the
    ///    <c>initLastFactorUpdateDateRange</c> method to set the <c>LastFactorUpdateDate</c> value range.
    ///    This ensures that the <c>AssetID</c> field is selected in the instance of the <c>QueryRun</c> class
    ///    so that the <c>AssetID</c> can be accessed during the <c>run</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        QueryBuildDataSource assetTableDataSource;
        ;

        super();
        assetTableDataSource = queryRun.query().dataSourceNo(1);
        assetTableDataSource.addSelectionField(fieldnum(AssetTable, AssetId));
        assetTableDataSource.addSelectionField(fieldnum(AssetTable, AssetGroup));
        assetTableDataSource.addOrderByField(fieldnum(AssetTable, AssetGroup));
        this.initLastFactorUpdateDateRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ;

        super();
        currentSystemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        queryRun = new QueryRun(querystr(AssetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the query that is passed to the server.
    /// </summary>
    /// <returns>
    ///    The packed container that is used to recreate the class.
    /// </returns>
    public container pack()
    {
        ;

        return [#CurrentVersion,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an instance of the <c>QueryRun</c> class that is associated with the instance of the
    ///    <c>AssetPeriodicUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>QueryRun</c> class.
    /// </returns>
    public QueryRun queryRun()
    {
        ;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the batch process that updates the <c>AssetReplaceCost</c> and <c>InsuredValue</c> fields of
    ///    selected assets.
    /// </summary>
    /// <remarks>
    ///    This method uses the selection criteria that were determined in the dialog box, together with the
    ///    <c>lastFactorCutoffDate</c> field, to filter the list of assets.Some asset groups have either a
    ///    value in the <c>ReplacementCostFactor</c> or an <c>InsuredValueFactor</c> field. Before you open
    ///    the query, restrict the list of assets to those that are members of such a group.
    /// </remarks>
    public void run()
    {
        #OCCRetryCount
        AssetTable assetTableFromQuery;
        AssetTable assetTable;
        AssetGroup assetGroup;
        QueryBuildDataSource assetGroupDS;
        QueryBuildRange qbrInsuredValueFactor;
        QueryBuildRange qbrReplacementCostFactor;
        int loopCounter = 0;

        #DEFINE.zeroRange('0.00')
        ;

        //
        // Before we open the query we want to restrict the list of items
        // to the assets that are members of groups that have either a ReplacementCostFactor
        // or an InsuredValueFactor
        //

        assetGroupDS = queryRun.query().dataSourceNo(1).addDataSource(tablenum(AssetGroup));
        assetGroupDS.joinMode(JoinMode::NoExistsJoin);
        assetGroupDS.relations(true);
        qbrInsuredValueFactor = assetGroupDS.addRange(fieldnum(AssetGroup, InsuredValueFactor));
        qbrInsuredValueFactor.value(#zeroRange);
        qbrReplacementCostFactor = assetGroupDS.addRange(fieldnum(AssetGroup, ReplacementCostFactor));
        qbrReplacementCostFactor.value(#zeroRange);
        try
        {
            ttsbegin;
            while (queryRun.next())
            {
                assetTableFromQuery = queryRun.get(tablenum(AssetTable));
                update_recordset assetTable
                setting LastFactorUpdateDate = currentSystemDate,
                   AssetReplaceCost =  assetTable.AssetReplaceCost + (assetTable.AssetReplaceCost * assetGroup.ReplacementCostFactor * 0.01),
                   InsuredValue = assetTable.InsuredValue + (assetTable.InsuredValue * assetGroup.InsuredValueFactor * 0.01)
                where assetTable.AssetId == assetTableFromQuery.AssetId
                join assetGroup where assetTable.AssetGroup == assetGroup.GroupId;

               loopCounter++;
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Error;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        if (loopCounter == 1)
        {
            info(strfmt("@SYS122792", loopCounter));
        }
        else
        {
            info(strfmt("@SYS114260", loopCounter));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates that the class can be run on a server by using the credentials of the user who requested
    ///    the batch job.
    /// </summary>
    /// <returns>
    ///    true the class can be run on a server by using the credentials of the user who requested the batch
    ///    job; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        ;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates that query information is shown on the general tab of the dialog.
    /// </summary>
    /// <returns>
    ///    true if query information is shown on the general tab of the dialog; otherwise, false.
    /// </returns>
    public boolean showQueryValues()
    {
        ;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the specified pack method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the <c>packedClass</c> container has been successfully unpacked; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Integer         version     = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contructs a new instance of the <c>AssetPeriodicUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>AssetPeriodicUpdate</c> class.
    /// </returns>
    public static AssetPeriodicUpdate construct()
    {
        ;

        return new AssetPeriodicUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of the <c>AssetPeriodicUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    The <c>ClassDescription</c> field of the <c>AssetPeriodicUpdate</c> class.
    /// </returns>
    static public ClassDescription description()
    {
        ;

        return "@SYS114258";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and runs an instance of the <c>AssetPeriodicUpdate</c> class.
    /// </summary>
    /// <param name="args">
    ///    The arguments passed to the class.
    /// </param>
    static public void main(Args args)
    {
        AssetPeriodicUpdate  assetPeriodicUpdate;
        ;

        assetPeriodicUpdate = AssetPeriodicUpdate::construct();

        if (assetPeriodicUpdate.prompt())
            assetPeriodicUpdate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>