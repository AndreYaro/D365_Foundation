<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFindRulesCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFindRulesCache</c> class provides caching of the kanban rules for a given kanban rule search.
/// </summary>
public class KanbanFindRulesCache
{
    #define.delimiter('#')
    SysGlobalObjectCache    kanbanRulesCache;
    SysGlobalObjectCache    itemLeanCoverageCheckCache;
    SysGlobalObjectCache    replenishmentStrategyCheckCache;
    classId                 classIdCaller;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllScopes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all scopes of the <c>KanbanFindRules</c> cache
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// A class or enumeration was not found as expected.
    /// </exception>
    protected void clearAllScopes()
    {
        int                     i;

        DictClass dictClass = new DictClass(classNum(KanbanFindRules));
        DictEnum dictEnum = new DictEnum(enumNum(KanbanFindRulesCacheCoverageType));

        if (   dictClass
            && dictEnum)
        {
            List list = dictClass.extendedBy();
            list.addStart(dictClass.id());

            // iterate KanbanFindRules and all its sub class names as part of the scope name
            ListEnumerator le = list.getEnumerator();
            while (le.moveNext())
            {
                dictClass = new DictClass(le.current());

                // iterate all LeanRuleCoverageTypes as part of the scope name
                for (i = 0; i <= dictEnum.values(); i++)
                {
                    kanbanRulesCache.clear(this.scopeName(kanbanRulesCache,dictEnum.index2Value(i),dictClass.id()));
                }
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        itemLeanCoverageCheckCache.clear(this.scopeName(itemLeanCoverageCheckCache));
        replenishmentStrategyCheckCache.clear(this.scopeName(replenishmentStrategyCheckCache));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a rule exists in the cache.
    /// </summary>
    /// <param name="_ruleSearchId">
    ///    The rule search identifier.
    /// </param>
    /// <param name="_leanRuleCoverageType">
    ///    The coverage type.
    /// </param>
    /// <returns>
    ///    true if the rule exists; otherwise, false.
    /// </returns>
    public boolean existKanbanRule(
        container            _ruleSearchId,
        KanbanFindRulesCacheCoverageType _leanRuleCoverageType)
    {
        return kanbanRulesCache.find(this.scopeName(kanbanRulesCache,_leanRuleCoverageType),[_ruleSearchId]) != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLeanCoverageCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item coverage check value from the cache.
    /// </summary>
    /// <param name="_itemRuleSearchId">
    /// The item rule search identifier.
    /// </param>
    /// <returns>
    /// A container with the cached value; otherwise, an empty container.
    /// </returns>
    public container getItemLeanCoverageCheck(str _itemRuleSearchId)
    {
        return itemLeanCoverageCheckCache.find(this.scopeName(itemLeanCoverageCheckCache), [_itemRuleSearchId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value from the cache.
    /// </summary>
    /// <param name="_ruleSearchId">
    /// The rule search identifier.
    /// </param>
    /// <param name="_leanRuleCoverageType">
    /// The coverage type.
    /// </param>
    /// <param name="_from">
    /// The coverage validity start datetime.
    /// </param>
    /// <param name="_to">
    /// The coverage validity end datetime.
    /// </param>
    /// <returns>
    /// A container that contains a Boolean value that indicates whether the rule was cache and the actual
    /// kanban rule plus the validity period.
    /// </returns>
    public container getKanbanRule(
        container              _ruleSearchId,
        KanbanFindRulesCacheCoverageType   _leanRuleCoverageType,
        LeanRuleActiveDateTime _from = DateTimeUtil::getSystemDateTime(),
        LeanRuleActiveDateTime _to   = DateTimeUtil::getSystemDateTime())
    {
        KanbanRule                  kanbanRule;
        LeanRuleActiveDateTime      dateTimeFrom;
        LeanRuleActiveDateTime      dateTimeTo;
        LeanRuleActiveDateTime      cacheTimeStamp;

        boolean                     found      = false;
        boolean                     cleanCache = false;

        container result = kanbanRulesCache.find(this.scopeName(kanbanRulesCache,_leanRuleCoverageType), [_ruleSearchId]);

        if (result)
        {
            // Either a rule, or a rule placeholder was found
            [cacheTimeStamp, dateTimeFrom, dateTimeTo, kanbanRule] = result;

            // Cache was taken after current time stamp so it needs to be discarded
            cleanCache = cacheTimeStamp > DateTimeUtil::getSystemDateTime();
            if (   cleanCache
                || (kanbanRule
                &&  !KanbanFindRules::isCoverageValid(dateTimeFrom,
                                                      dateTimeTo,
                                                      _from,
                                                      _to)))
            {
                // There was an actual rule in cache but it is not time valid
                kanbanRule = null;

                // If cache is not lookahead, rule is expired
                cleanCache = cleanCache || !_to || dateTimeFrom < _to;
            }

            if (cleanCache)
            {
                // Expired rule gets removed
                this.removeKanbanRule(_ruleSearchId,_leanRuleCoverageType);
            }

            found = !cleanCache;
        }

        return [found,kanbanRule,dateTimeFrom,dateTimeTo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplenishmentStrategyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the replenishment strategy check value from the cache.
    /// </summary>
    /// <param name="_replenishmentStrategyRuleSearchId">
    /// The replenishment strategy dimension rule search identifier.
    /// </param>
    /// <returns>
    /// A container with the cached value; otherwise, an empty container.
    /// </returns>
    public container getReplenishmentStrategyCheck(container _replenishmentStrategyRuleSearchId)
    {
        return replenishmentStrategyCheckCache.find(this.scopeName(replenishmentStrategyCheckCache),
                                                    [_replenishmentStrategyRuleSearchId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemLeanCoverageCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new value into the cache.
    /// </summary>
    /// <param name="_itemRuleSearchId">
    ///    The item rule search identifier.
    /// </param>
    /// <param name="_value">
    ///    The value to cache.
    /// </param>
    public void insertItemLeanCoverageCheck(
        str _itemRuleSearchId,
        boolean   _value)
    {
        itemLeanCoverageCheckCache.insert(this.scopeName(itemLeanCoverageCheckCache),
                                          [_itemRuleSearchId],[_value]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new value into the cache.
    /// </summary>
    /// <param name="_ruleSearchId">
    ///    The rule search identifier.
    /// </param>
    /// <param name="_leanRuleCoverageType">
    ///    The coverage type.
    /// </param>
    /// <param name="_from">
    ///    The coverage validity start date and time.
    /// </param>
    /// <param name="_to">
    ///    The coverage validity end date and time.
    /// </param>
    /// <param name="_rule">
    ///    The rule to be cached.
    /// </param>
    public void insertKanbanRule(
        container              _ruleSearchId,
        KanbanFindRulesCacheCoverageType   _leanRuleCoverageType,
        LeanRuleActiveDateTime _from = DateTimeUtil::getSystemDateTime(),
        LeanRuleActiveDateTime _to   = DateTimeUtil::getSystemDateTime(),
        KanbanRule             _rule = null)
    {
        kanbanRulesCache.insert(this.scopeName(kanbanRulesCache,_leanRuleCoverageType),
                                [_ruleSearchId],
                                [DateTimeUtil::getSystemDateTime(),_from,_to,_rule]);

        if (_rule.RecId != 0)
        {
            this.insertItemLeanCoverageCheck(KanbanFindRulesCache::getItemRuleSearchId(_ruleSearchId),true);
            this.insertReplenishmentStrategyCheck(KanbanFindRulesCache::buildReplenishmentStrategyRuleSearchId(_rule.ReplenishmentStrategy),true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReplenishmentStrategyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new value into the cache.
    /// </summary>
    /// <param name="_replenishmentStrategyRuleSearchId">
    ///    The item and inventory dimension rule search identifier.
    /// </param>
    /// <param name="_value">
    ///    The value to cache.
    /// </param>
    public void insertReplenishmentStrategyCheck(
        container _replenishmentStrategyRuleSearchId,
        boolean   _value)
    {
        replenishmentStrategyCheckCache.insert(this.scopeName(replenishmentStrategyCheckCache),
                                          [_replenishmentStrategyRuleSearchId],[_value]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        kanbanRulesCache                = new SysGlobalObjectCache();
        itemLeanCoverageCheckCache      = new SysGlobalObjectCache();
        replenishmentStrategyCheckCache = new SysGlobalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClassIdCaller</Name>
				<Source><![CDATA[
    public classId parmClassIdCaller(classId _classIdCaller = classIdCaller)
    {
        classIdCaller = _classIdCaller;
        return classIdCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a value from the cache.
    /// </summary>
    /// <param name="_ruleSearchId">
    ///    The rule search identifier.
    /// </param>
    /// <param name="_leanRuleCoverageType">
    ///    The coverage type.
    /// </param>
    public void removeKanbanRule(
        container            _ruleSearchId,
        KanbanFindRulesCacheCoverageType _leanRuleCoverageType)
    {
        kanbanRulesCache.remove(this.scopeName(kanbanRulesCache,_leanRuleCoverageType),[_ruleSearchId]);
        itemLeanCoverageCheckCache.remove(this.scopeName(itemLeanCoverageCheckCache),
                                         [KanbanFindRulesCache::getItemRuleSearchId(_ruleSearchId)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scopeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cache scope name.
    /// </summary>
    /// <param name="_cache">
    /// The type of cache.
    /// </param>
    /// <param name="_leanRuleCoverageType">
    /// The coverage type; optional.
    /// </param>
    /// <param name="_classIdCaller">
    /// The class ID of the calling class; optional.
    /// </param>
    /// <returns>
    /// The scope name.
    /// </returns>
    protected globalObjectCacheScope scopeName(
        SysGlobalObjectCache _cache,
        KanbanFindRulesCacheCoverageType _leanRuleCoverageType = KanbanFindRulesCacheCoverageType::Product,
        classId              _classIdCaller        = classIdCaller)
    {
        #define.scopeKanbanRules(1)
        #define.scopeItemLeanCoverageCheck(2)
        #define.scopeReplenishmentStrategyCheck(3)
        globalObjectCacheScope  scopeName;

        if (_cache == kanbanRulesCache)
        {
            scopeName =  strFmt('%1%6%2%6%3%6%4%6%5',
                                classStr(KanbanFindRulesCache),
                                #scopeKanbanRules,
                                _classIdCaller,
                                enum2int(_leanRuleCoverageType),
                                curext(),
                                #delimiter);
        }

        if (_cache == itemLeanCoverageCheckCache)
        {
            scopeName =  strFmt('%1%4%2%4%3',
                                classStr(KanbanFindRulesCache),
                                #scopeItemLeanCoverageCheck,
                                curext(),
                                #delimiter);
        }

        if (_cache == replenishmentStrategyCheckCache)
        {
            scopeName =  strFmt('%1%4%2%4%3',
                                classStr(KanbanFindRulesCache),
                                #scopeReplenishmentStrategyCheck,
                                curext(),
                                #delimiter);
        }

        return scopeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReplenishmentStrategyRuleSearchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a rule search ID from a replenishment strategy.
    /// </summary>
    /// <param name="_replenishmentStrategy">
    /// A replenishment strategy that is used as part of the resulting container.
    /// </param>
    /// <returns>
    /// A container that contains a rule search ID.
    /// </returns>
    public static container buildReplenishmentStrategyRuleSearchId(LeanReplenishmentStrategy _replenishmentStrategy)
    {
        return [_replenishmentStrategy];
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all scopes of the <c>KanbanFindRules</c> cache
    /// </summary>
    /// <param name="_kanbanFindRulesCache">
    ///    A <c>KanbanFindRulesCache</c> object; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    A class or enumeration was not found as expected.
    /// </exception>
    public static void clearCache(
        KanbanFindRulesCache _kanbanFindRulesCache = null)
    {
        KanbanFindRulesCache kanbanFindRulesCache = _kanbanFindRulesCache ? _kanbanFindRulesCache : KanbanFindRulesCache::construct();
        kanbanFindRulesCache.clearAllScopes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all kanban rules from the cache on the server side.
    /// </summary>
    protected static void clearCacheServer()
    {
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanFindRulesCache construct()
    {
        return new KanbanFindRulesCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRuleSearchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item rule search ID from a container.
    /// </summary>
    /// <param name="_ruleSearchId">
    /// A container that contains a rule search ID.
    /// </param>
    /// <returns>
    /// The rule search ID.
    /// </returns>
    protected static str getItemRuleSearchId(container _ruleSearchId)
    {
        return conPeek(_ruleSearchId,1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanFindRulesCache</c> object.
    /// </summary>
    /// <param name="_classIdCaller">
    /// The class ID of the calling class.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanFindRules</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The class ID was not specified.
    /// </exception>
    public static KanbanFindRulesCache newStandard(classId _classIdCaller)
    {
        KanbanFindRulesCache    kanbanFindRulesCache = KanbanFindRulesCache::construct();

        if (!_classIdCaller)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanFindRulesCache.parmClassIdCaller(_classIdCaller);

        return kanbanFindRulesCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
