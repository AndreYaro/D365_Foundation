<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsWorkloadDetailReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSWorkloadDetailDP</c> class is the Report Data Provider class for the
///    <c>WMSWorkloadDetail</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(WMSWorkLoadDetailContract))]
public class WmsWorkloadDetailReportDP extends SRSReportDataProviderBase
{
    WMSWorkloadDetailTmp            wmsWorkloadDetailTmp;
    WMSWorkLoadDetailContract       contract;
    WMSWorkloadCapacityWarehouse    wmsWorkloadCapacityWarehouse;

    boolean                         hasInconsistencies;
    boolean                         needsLastInsert;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getForecastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves current forecast value for given storage load unit type.
    /// </summary>
    /// <param name="_forecast">
    /// The <c>WMSWorkloadForecast</c> to use.
    /// </param>
    /// <param name="_type">
    /// The <c>WMSStorageLoadUnitType</c> to use.
    /// </param>
    /// <returns>
    /// The current forecast value as real.
    /// </returns>
    private real getForecastValue(WMSWorkLoadForecast       _forecast,
                                  WMSStorageLoadUnitType    _type)
    {
        real result = 0;

        switch (_type)
        {
            case WMSStorageLoadUnitType::Pallet:
                result = _forecast.CurrentPalletCount;
                break;

            case WMSStorageLoadUnitType::Volume:
                result = _forecast.CurrentVolume;
                break;

            case WMSStorageLoadUnitType::Weight:
                result = _forecast.CurrentWeight;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves max value for given storage load unit type and direction.
    /// </summary>
    /// <param name="_type">
    /// The <c>WMSStorageLoadUnitType</c> to use.
    /// </param>
    /// <param name="_direction">
    /// The <c>InventDirection</c> to use.
    /// </param>
    /// <returns>
    /// The maximum value as real.
    /// </returns>
    private real getMaxValue(WMSStorageLoadUnitType _type,
                             InventDirection        _direction)
    {
        real result = 0;

        switch (_type)
        {
            case WMSStorageLoadUnitType::Pallet:
                result = _direction == InventDirection::Receipt ?
                            wmsWorkloadCapacityWarehouse.MaxPalletCountInbound :
                            wmsWorkloadCapacityWarehouse.MaxPalletCountOutbound;
                break;

            case WMSStorageLoadUnitType::Volume:
                result = _direction == InventDirection::Receipt ?
                            wmsWorkloadCapacityWarehouse.MaxVolumeInbound :
                            wmsWorkloadCapacityWarehouse.MaxVolumeOutbound;
                break;

            case WMSStorageLoadUnitType::Weight:
                result = _direction == InventDirection::Receipt ?
                            wmsWorkloadCapacityWarehouse.MaxWeightInbound :
                            wmsWorkloadCapacityWarehouse.MaxWeightOutbound;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSWorkloaddetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>WMSWorkloadDetailTmp</c> table
    /// </summary>
    /// <returns>
    /// The data from the <c>WMSWorkloadDetailTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSWorkloadDetailTmp))
    ]
    public WMSWorkloadDetailTmp getWMSWorkloaddetailTmp()
    {
        select wmsWorkloadDetailTmp;
        return wmsWorkloadDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInconsistencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any inconsistencies for this run.
    /// </summary>
    /// <returns>
    /// true if there are inconsistencies; otherwise, false.
    /// </returns>
    private boolean hasInconsistencies()
    {
        WMSSpaceUtilInconsistencyType   type;

        switch (contract.parmWMSStorageLoadUnitType())
        {
            case WMSStorageLoadUnitType::Pallet:
                type = WMSSpaceUtilInconsistencyType::Pallet;
                break;

            case WMSStorageLoadUnitType::Volume:
                type = WMSSpaceUtilInconsistencyType::Volume;
                break;

            case WMSStorageLoadUnitType::Weight:
                type = WMSSpaceUtilInconsistencyType::Weight;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return WMSSpaceUtilInconsistencies::exist(contract.parmWMSReportSetup(), type, "", contract.parmWarehouseId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for processing the report.
    /// </summary>
    private void initialize()
    {
        contract = this.parmDataContract() as WMSWorkLoadDetailContract;

        if (!contract)
            throw error(Error::missingParameter(this));

        if (!contract.parmWarehouseId()
            || !contract.parmWMSReportSetup())
            throw error(Error::wrongUseOfFunction(funcName()));

        wmsWorkloadDetailTmp.initValue();
        needsLastInsert = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>WMSWorkloadDetailTmp</c> table into the database.
    /// </summary>
    /// <param name="_date">
    /// The tracking date value to use.
    /// </param>
    /// <param name="_type">
    /// The <c>WMSStorageLoadUnit</c> type for this record.
    /// </param>
    private void insertData(TransDate               _date,
                            WMSStorageLoadUnitType  _type)
    {
        wmsWorkloadDetailTmp.Date               = _date;
        wmsWorkloadDetailTmp.HasInconsistencies = hasInconsistencies ? 1 : 0;
        wmsWorkloadDetailTmp.MaxValueIn         = this.getMaxValue(_type, InventDirection::Receipt);
        wmsWorkloadDetailTmp.MaxValueOut        = this.getMaxValue(_type, InventDirection::Issue);

        wmsWorkloadDetailTmp.insert();
        wmsWorkloadDetailTmp.clear();

        // No need to insert any more.
        needsLastInsert = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic by obtaining records from the <c>WMSSpaceUtilForecast</c> table
    /// as required for the report into the <c>WmsSpaceUtilizationTmp</c> table.
    /// </summary>
    public void processReport()
    {
        WMSWorkLoadForecast         wmsWorkLoadForecast;
        RecId                       previousRecId = 0;
        InventLocationId            previousLocation;
        TransDate                   previousDate;
        TransDate                   startDate;

        ttsbegin;

        this.initialize();

        // Initialize global wmsWorkloadCapacityWarehouse
        select AddInboundOutbound, MaxPalletCountInbound, MaxPalletCountOutbound, MaxVolumeInbound, MaxVolumeOutbound, MaxWeightInbound, MaxWeightOutbound, RecId
            from wmsWorkloadCapacityWarehouse
            where wmsWorkloadCapacityWarehouse.wmsReportSetup       == contract.parmWMSReportSetup()
                  && wmsWorkloadCapacityWarehouse.InventLocation    == contract.parmWarehouseId();

        if (wmsWorkloadCapacityWarehouse.RecId)
        {
            startDate = WMSReportSetup::getCompanyTodayDate();
            hasInconsistencies = this.hasInconsistencies();

            while select wmsWorkLoadForecast
                order by wmsWorkLoadForecast.TrackingDate, wmsWorkLoadForecast.InventLocationID
                where wmsWorkLoadForecast.InventLocationID  == contract.parmWarehouseId()
                      && wmsWorkLoadForecast.TrackingDate   >= startDate
                      && wmsWorkLoadForecast.wmsReportSetup == contract.parmWMSReportSetup()
                      && (contract.parmMovementStatus() == WMSReqTransMovementStatus::All
                          || wmsWorkLoadForecast.MovementStatus == contract.parmMovementStatus())
            {
                // Insert current record if we moved to next warehouse or date
                if (previousRecId
                    && (wmsWorkLoadForecast.InventLocationID    != previousLocation
                        || wmsWorkLoadForecast.TrackingDate     != previousDate))
                {
                    this.insertData(previousDate, contract.parmWMSStorageLoadUnitType());
                }

                // Update current record
                this.updateData(wmsWorkLoadForecast, wmsWorkloadCapacityWarehouse.AddInboundOutbound);

                // Update local state
                previousRecId       = wmsWorkLoadForecast.RecId;
                previousLocation    = wmsWorkLoadForecast.InventLocationID;
                previousDate        = wmsWorkLoadForecast.TrackingDate;
            }
            if (needsLastInsert)
            {
                this.insertData(previousDate, contract.parmWMSStorageLoadUnitType());
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateData</Name>
				<Source><![CDATA[
    private void updateData(WMSWorkLoadForecast _forecast, NoYesId _joinInboundOutbound)
    {
        WMSStorageLoadUnitType  type = contract.parmWMSStorageLoadUnitType();

        if (_forecast.Direction == InventDirection::Receipt)
        {
            wmsWorkloadDetailTmp.CurrentValueIn += this.getForecastValue(_forecast, type);
        }
        else
        {
            wmsWorkloadDetailTmp.CurrentValueOut    += this.getForecastValue(_forecast, type);
        }

        if (_forecast.HasBacklog == NoYes::Yes)
        {
            wmsWorkloadDetailTmp.HasBacklog = 1;
        }

        wmsWorkloadDetailTmp.JoinInOut  = _joinInboundOutbound == NoYes::Yes ? 1 : 0;

        // Has been modified - needs insert
        needsLastInsert = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>