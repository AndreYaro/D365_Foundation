<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateEngineMultiThread</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSumDateEngineMultiThread extends InventSumDateEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcData</Name>
				<Source><![CDATA[
    public void calcData()
    {
        try
        {
            this.initMemberVariables();

            this.deleteTransactions();

            this.waitForAsyncTasks(this.createItemTasks());

            this.mergeRecords();
        }
        finally
        {
            this.deleteTransactions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemIdsFromInventSum</Name>
				<Source><![CDATA[
    private void populateItemIdsFromInventSum(Set itemIds)
    {
        Query targetQuery = new Query();
        InventSum inventSum;
        int rangeCount = 1;

        if (userConnection)
        {
            inventSum.setConnection(userConnection);
        }

        QueryBuildRange sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId), rangeCount);

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventSum));
        qbds.addRange(fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));
        while (sourceItemIdRange)
        {
            qbds.addRange(fieldNum(InventSum, ItemId)).value(sourceItemIdRange.value());
            ++rangeCount;
            sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId), rangeCount);
        }

        qbds.addSelectionField(fieldNum(InventSum, ItemId));
        qbds.addOrderByField(fieldNum(InventSum, ItemId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        
        while (queryRun.next())
        {
            inventSum = queryRun.get(tableNum(inventSum));

            itemIds.add(inventSum.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemIdsFromInventTrans</Name>
				<Source><![CDATA[
    private void populateItemIdsFromInventTrans(Set itemIds)
    {
        Query targetQuery = new Query();

        InventTrans inventTrans;

        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
        }

        QueryBuildRange sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId));

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventTrans));
        if (sourceItemIdRange)
        {
            qbds.addRange(fieldNum(InventTrans, ItemId)).value(sourceItemIdRange.value());
        }
        qbds.addRange(fieldNum(InventTrans, DateStatus)).value(queryRange(perDate, dateMax()));

        qbds.addSelectionField(fieldNum(inventTrans, ItemId));
        qbds.addOrderByField(fieldNum(inventTrans, ItemId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(inventTrans, InventDimId), fieldNum(inventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tableNum(InventTrans));

            itemIds.add(inventTrans.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTasks</Name>
				<Source><![CDATA[
    private System.Threading.Tasks.Task[] createItemTasks()
    {
        List taskList = new List(Types::Class);

        Set distinctItemIds = new Set(Types::String);
        this.populateItemIdsFromInventSum(distinctItemIds);
        this.populateItemIdsFromInventTrans(distinctItemIds);

        Array itemIds = Array::create(distinctItemIds.pack());

        int itemCount = itemIds.lastIndex();
        int numOfTasksToCreate = min(itemCount, this.maxItemTaskCount());
        for (int currentTask = 1; currentTask <= numOfTasksToCreate; currentTask++)
        {
            List itemsForTask = new List(Types::String);

            int indexOfItem = currentTask;
            while (indexOfItem <= itemCount)
            {
                itemsForTask.addEnd(itemIds.value(indexOfItem));
                indexOfItem += numOfTasksToCreate;
            }

            taskList.addEnd(InventSumDateEngineItemTask::newParameters(this.parmPerDate(), itemsForTask, this.parmId, this.inventSumDateType, this.minus, this.parmQuery()));
        }

        int taskListLength = taskList.elements();
        System.Threading.Tasks.Task[] threadTasklist = new System.Threading.Tasks.Task[taskListLength]();

        int i = 0;

        ListEnumerator tasksEnumerator = taskList.getEnumerator();
        while (tasksEnumerator.moveNext())
        {
            CostIAsyncRunnable asyncRunnableTask = tasksEnumerator.current() as CostIAsyncRunnable;

            if (asyncRunnableTask)
            {
                threadTasklist.SetValue(asyncRunnableTask.runAsync(), i);
                i++;
            }
        }

        return threadTasklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxItemTaskCount</Name>
				<Source><![CDATA[
    protected int maxItemTaskCount()
    {
        return max(1, System.Environment::ProcessorCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 15*60*1000; // 15 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRetryCount</Name>
				<Source><![CDATA[
    private int maxRetryCount()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        #OCCRetryCount

        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();

        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';

                ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                resultset.next();
            }
        }

        this.allTasksSucceed(_threadTasklist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allTasksSucceed</Name>
				<Source><![CDATA[
    private void allTasksSucceed(System.Threading.Tasks.Task[] _threadTasklist)
    {
        boolean allSucceed = true;
        str errorStr = "";

        for (int i = 0; i < _threadTasklist.Get_Length(); i++)
        {
            boolean taskSucceed = false;
            System.Threading.Tasks.Task task = _threadTasklist.GetValue(i);
            AsyncTaskResult taskResult = AsyncTaskResult::getAsyncTaskResult(task);
            System.Exception exception = taskResult.getException();
            taskSucceed = (exception == null);

            if (!taskSucceed)
            {
                allSucceed = false;
                container infologCon = taskResult.getInfologData();
                container infoException, infoItem;
                str ExceptionMsg, ItemMsg;
                for(int j = 2;  j < conLen(infologCon);  j += 2)
                {
                    infoException = conPeek(infologCon, j);
                    ExceptionMsg  = conPeek(infoException, 2);

                    infoItem      = conPeek(infologCon, j + 1);
                    ItemMsg       = conPeek(infoItem, 2);
                    
                    errorStr += strFmt("%1 : %2\n", ItemMsg, ExceptionMsg);
                }
            }
        }
        
        if (!allSucceed) 
        {
            throw error(strFmt("%1:\n %2", funcName(), errorStr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventSumDateEngineMultiThread construct()
    {
        return new InventSumDateEngineMultiThread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventSumDateEngineMultiThread newParameters(
        TransDate       _perDate,
        InventDimParm   _inventDimParm,
        NoYes           _deleteZeroLines,
        Query           _query = new Query(queryStr(InventDimPhys)))
    {
        InventSumDateEngineMultiThread inventSumDateEngine = InventSumDateEngineMultiThread::construct();

        inventSumDateEngine.parmPerDate(_perDate);
        inventSumDateEngine.parmInventDimParm(_inventDimParm);
        inventSumDateEngine.parmDeleteZeroLines(_deleteZeroLines);
        inventSumDateEngine.parmQuery(_query);

        return inventSumDateEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>