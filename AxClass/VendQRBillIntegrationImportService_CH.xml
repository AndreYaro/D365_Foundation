<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendQRBillIntegrationImportService_CH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class of the import QR-Bill procedure.
/// </summary>
using Microsoft.Dynamics365.LocalizationFramework;
public class VendQRBillIntegrationImportService_CH extends SysOperationServiceBase
{
    public const str VendInvoiceJournalHeaderEntityIntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(VendInvoiceJournalHeaderEntity);
    public const str VendorInvoiceHeaderEntityIntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(VendorInvoiceHeaderEntity);
    public const str VendorInterimIntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(VendQRBillIntegrationEntity);
    public const str VendInvoiceRegisterHeaderEntityIntegrationPoint = classStr(ERTableDestination) + '#' + tableStr(VendInvoiceRegisterHeaderEntity);

    private str executionId = System.Guid::NewGuid().ToString('N');
    private VendQRBillIntegrationImportContract_CH contract;
    private System.IO.MemoryStream inputStream;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Preforms an actual import.
    /// </summary>
    /// <param name = "_contract">The object of the class <c>VendQRBillIntegrationImportContract_CH</c>.</param>
    public void run(VendQRBillIntegrationImportContract_CH _contract)
    {
        contract = _contract;

        if (_contract.parmQRBillPlainText())
        {
            inputStream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(strReplace(_contract.parmQRBillPlainText(), '\n', '\r\n')));
        }
        else
        {
            FileUploadResultBase inputFile = File::GetFileFromUser();

            if (inputFile)
            {
                inputStream = inputFile.openResult();
            }
            else
            {
                return;
            }
        }

        this.runER(VendorInterimIntegrationPoint, inputStream);

        Args fromArgs = new Args();
        fromArgs.caller(this);

        MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(VendQRBillIntegrationData_CH), MenuItemType::Display);
        menuFunction.run(fromArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique execution Id of the current import procedure.
    /// </summary>
    /// <returns>the unique execution Id of the current import procedure.</returns>
    public str getExecutionId()
    {
        return executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runImportEndDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prforms the import to the final document.
    /// </summary>
    public void runImportEndDocument()
    {
        str integrationPoint = ERIntegrationPointDestinationMapping::findByDestinationMappingId(contract.parmModelMappingId()).IntegrationPoint;

        try
        {
            inputStream.Seek(0u, System.IO.SeekOrigin::Begin);
            this.runER(integrationPoint, inputStream, true);
        }
        catch
        {
            this.removeIntermediateExecution();
        }

        if (contract.parmFormDataSource())
        {
            contract.parmFormDataSource().research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeIntermediateExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes intermediate record of not completed import.
    /// </summary>
    public void removeIntermediateExecution()
    {
        VendQRBillIntegrationTrans_CH vendQRBillIntegrationTrans;

        delete_from vendQRBillIntegrationTrans
            where vendQRBillIntegrationTrans.ExecutionId == executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private void runER(
        str                 _integrationPoint, 
        System.IO.Stream    _inputStream,
        boolean             _showInfologMessage = false)
    {
        var runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(
            contract.parmImportFormatMappingId(),
            _integrationPoint,
            _showInfologMessage);

        ERModelDefinitionInputParametersAction erModelDefinitionInputParametersAction = new ERModelDefinitionInputParametersAction();
        erModelDefinitionInputParametersAction.parmSkipExceptionOnMissingParameter(true);
        erModelDefinitionInputParametersAction.addParameter('$ExecutionID', executionId);
        erModelDefinitionInputParametersAction.addParameter('$InvoiceJourNum', contract.parmInvoiceJourNum());
        erModelDefinitionInputParametersAction.addParameter('$VendInvoiceInfoTableRecId', contract.parmVendInvoiceInfoTableRecId());

        runner.withParameter(erModelDefinitionInputParametersAction);
        runner.init();

        var parameters = runner.getParameters();
        var traverser = new ERModelDefinitionParametersTraverser(parameters);
        while (traverser.moveNext())
        {
            ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;

            if (current)
            {
                current.parmInputDataStream(_inputStream);
            }
        }

        runner.runUnattended();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract object.
    /// </summary>
    /// <returns>The contract object.</returns>
    public VendQRBillIntegrationImportContract_CH getContract()
    {
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQRModelMappingRecIdgByImportFormatMappingAndIntegrationPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Record Id of QR-Bill Model mapping by impoting format mapping and integration point.
    /// </summary>
    /// <param name = "_importFormatMappingId">The identifier of importing format mapping.</param>
    /// <param name = "_integrationPoint">The integration point.</param>
    /// <returns>The Record Id of QR-Bill Model mapping by impoting format mapping and integration point.</returns>
    public static ERModelMappingId getQRModelMappingRecIdgByImportFormatMappingAndIntegrationPoint(
        ERModelMappingId _importFormatMappingId,
        str _integrationPoint)
    {
        ERModelMappingTable interimModelMapping = ERModelMappingTable::find(_importFormatMappingId);

        ERIntegrationPointDestinationMapping erIntegrationPointDestinationMapping;
        ERModelMappingTable erModelMappingTable;

        select firstonly RecId from erModelMappingTable
            where erModelMappingTable.IsDeleted == NoYes::No
        exists join erIntegrationPointDestinationMapping
            where erIntegrationPointDestinationMapping.DestinationMapping == erModelMappingTable.RecId
                && erIntegrationPointDestinationMapping.IntegrationPoint == _integrationPoint
                && erIntegrationPointDestinationMapping.DataModel == interimModelMapping.dataModel().RecId
                && erIntegrationPointDestinationMapping.DataContainerDescriptor == interimModelMapping.DataContainerDescriptor;

        return erModelMappingTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntegrationPointFromJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the integration point related to journal type.
    /// </summary>
    /// <param name = "_ledgerJournalType">The journal type.</param>
    /// <returns>The integration point.</returns>
    public static str getIntegrationPointFromJournalType(LedgerJournalType _ledgerJournalType)
    {
        str integrationPoint;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::VendInvoiceRegister:
                integrationPoint = VendQRBillIntegrationImportService_CH::VendInvoiceJournalHeaderEntityIntegrationPoint;
                break;
            case LedgerJournalType::PurchaseLedger:
                integrationPoint = VendQRBillIntegrationImportService_CH::VendInvoiceRegisterHeaderEntityIntegrationPoint;
                break;
            default:
                break;
        }

        return integrationPoint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>