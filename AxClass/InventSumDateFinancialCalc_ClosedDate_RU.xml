<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateFinancialCalc_ClosedDate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSumDateFinancialCalc_ClosedDate_RU extends InventSumDateFinancialCalc_RU implements BatchRetryable
{
    NoYes           recalculate;
    DialogField     fieldToDate;
    DialogField     fieldRecalculate;

    private const Version CurrentVersionForClosedDate = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <param name="_dialog">
    ///    An already initialized instance of the <c>DialogRunBase</c> class; optional.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be created on the client; optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    protected Object dialogInternal(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase dialog = super(_dialog, _forceOnClient);

        fieldToDate      = dialog.addFieldValue(extendedTypeStr(TransDate), this.getDefaultToDate(), "@GLS114177", "@GLS114013");
        fieldRecalculate = dialog.addField(extendedTypeStr(NoYesId), "@GLS114014", "@GLS114015");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventClosing</Name>
				<Source><![CDATA[
    private InventClosing findInventClosing()
    {
        InventClosing inventClosing = InventClosing::findClosingDate(toDate, InventTransCurrency_RU::PrimaryCur, true);

        if (! inventClosing)
        {
            throw error(strFmt("@GLS104892", toDate));
        }

        if (!recalculate && inventClosing.InventSumDateFinancialCalcFinished_RU)
        {
            throw error("@GLS114018");
        }

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultToDate</Name>
				<Source><![CDATA[
    private TransDate getDefaultToDate()
    {
        InventClosing lastInventClosing = InventClosing::findPrevClosingDate(dateMax());

        if (lastInventClosing)
        {
            if (lastInventClosing.InventSumDateFinancialCalcFinished_RU)
            {
                return endmth(dateMthFwd(lastInventClosing.TransDate, 1));
            }

            return lastInventClosing.TransDate;
        }

        return endmth(dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        toDate      = fieldToDate.value();
        recalculate = fieldRecalculate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcCreateItemsQuery</Name>
				<Source><![CDATA[
    public Query onCalcCreateItemsQuery(Query _query)
    {
        QueryBuildDataSource    qbdsInvent = _query.dataSourceTable(tableNum(InventTable));
        QueryBuildDataSource    qbdsTrans  = qbdsInvent.addDataSource(tableNum(InventSumDateFinancialTrans_RU));

        qbdsTrans.addLink(fieldNum(InventSumDateFinancialTrans_RU, ItemId), fieldNum(InventTable, ItemId));
        qbdsTrans.joinMode(JoinMode::NoExistsJoin);

        qbdsTrans.addRange(fieldNum(InventSumDateFinancialTrans_RU, ParmId)).value(SysQuery::valueEmptyString());
        qbdsTrans.addRange(fieldNum(InventSumDateFinancialTrans_RU, TransDate)).value(queryValue(toDate));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcEnd</Name>
				<Source><![CDATA[
    public void onCalcEnd(InventSumDateFinancialCalc_RU _calc)
    {
        InventClosing   inventClosing = this.findInventClosing();

        inventClosing.InventSumDateFinancialCalcFinished_RU = NoYes::Yes;
        inventClosing.update();

        super(_calc);

        info("@SYS56424");
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCalcStart</Name>
				<Source><![CDATA[
    public void onCalcStart(InventSumDateFinancialCalc_RU _calc)
    {
        InventClosing inventClosing = this.findInventClosing();

        inventClosing.InventSumDateFinancialCalcFinished_RU = NoYes::No;
        inventClosing.update();

        parmId = "";

        if (recalculate)
        {
            InventSumDateFinancialTrans_RU::deleteTransDate(toDate);
        }

        super(_calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersionForClosedDate, recalculate] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   base;
        boolean     ret;

        switch (version)
        {
            case CurrentVersionForClosedDate:
                [version, recalculate, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (ret)
        {
            if (! toDate)
            {
                ret = checkFailed("@GLS114016");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSumDateFinancialCalc_ClosedDate_RU construct()
    {
        return new InventSumDateFinancialCalc_ClosedDate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS114023";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventSumDateFinancialCalc_ClosedDate_RU  calc = InventSumDateFinancialCalc_ClosedDate_RU::construct();

        if (calc.prompt())
        {
            calc.runOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>