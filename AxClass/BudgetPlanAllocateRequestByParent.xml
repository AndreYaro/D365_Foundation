<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateRequestByParent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetPlanAllocateRequestByParent</c> class is used to capture the information
///    that is required to allocate budget plans by parent budget plans.
/// </summary>
public class BudgetPlanAllocateRequestByParent extends BudgetPlanAllocateRequestByPlan
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetPlanAllocateType</Name>
				<Source><![CDATA[
    public BudgetPlanAllocateType getBudgetPlanAllocateType()
    {
        return BudgetPlanAllocateType::AllocateByParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the allocation budget plan by parent request.
    /// </summary>
    /// <returns> true if the allocation request is valid; otherwise, false. </returns>
    public boolean validate()
    {
        boolean isValid;
        BudgetPlanHeader parentBudgetPlanHeader = BudgetPlanHeader::find(parentBudgetPlanHeaderRecId);

        isValid = super();

        if (isValid
                && !BudgetPlanLayoutHelper::validateScenarioExistsInLayout(
                        parentBudgetPlanHeader.Layout,
                        BudgetPlanningConstants::emptyString,
                        sourceBudgetPlanScenarioRecId,
                        false))
        {
            // Layout element that uses the source scenario cannot be found.
            throw error("@Budget:LayoutElementDoesNotExistForScenario");
        }

        if (isValid
            && !BudgetPlan::doesBudgetPlanHaveChild(parentBudgetPlanHeaderRecId))
        {
            // Do not allocate lines if the parent budget plan has no children budget plans
            throw error("@Budget:BudgetPlanHasNoAssociatedPlans");
        }

        // Skip validation when called during allocation schedule event.
        if (this.parmIsCalledFromForm()
            && isValid
            && !BudgetPlanLayoutHelper::allChildPlansHaveAccessSetForScenario(
                    parentBudgetPlanHeaderRecId,
                    targetBudgetPlanScenarioRecId,
                    NoYes::Yes))
        {
            // Target scenario MUST be editable for all children plans' layout elements
            throw error("@Budget:UneditableDestinationPlan");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanAllocateRequestByParent construct()
    {
        return new BudgetPlanAllocateRequestByParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLineRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    ///    The parent <c>BudgetPlanHeader</c> record ID.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <returns>
    ///    The set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </returns>
    public static Set getBudgetPlanLineRecIds(
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId)
    {
        BudgetPlanHeader budgetPlanHeader;
        BudgetPlanLine   budgetPlanLine;
        Set              selectedPlanLines = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineRecId)));

        while select RecId from budgetPlanLine
            where budgetPlanLine.BudgetPlanScenario == _sourceBudgetPlanScenarioRecId
            exists join budgetPlanHeader
                where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                    && budgetPlanHeader.RecId == _parentBudgetPlanHeaderRecId
        {
            selectedPlanLines.add(budgetPlanLine.RecId);
        }

        return selectedPlanLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>