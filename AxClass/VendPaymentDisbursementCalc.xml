<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymentDisbursementCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPaymentDisbursementCalc</c> class is used to create the vendor specific Open transactions.
/// This class uses the <c>VendPaymentDisbursement</c> tableMaps and <c>PurchTotals</c> class to
/// create the <c>CustVendTransOpen</c> records.
/// </summary>

class VendPaymentDisbursementCalc extends CustVendPaymentDisbursementCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records in the <c>VendPaymentDisbursement</c> table based on the allocation percentage.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The recId of <c>VendInvoiceJour</c> table for which the <c>VendPaymentDisbursement</c> table records are created.
    /// </param>

    public void createTransaction(CustVendInvoiceJour _vendInvoiceJour)
    {
        boolean                             first = true;
        boolean                             uncheckedValue = true;
        AmountCur                           amountCur;
        Percent                             allocationRemaining = 100;
        VendInvoiceInfo_PaymentDisbursement paymDisbursement;
        ;

        amountCur           = invoiceAmount;
        paymentAmountCur    = invoiceAmount;

        ttsbegin;

        this.setDueDate();
        vendPaymentDisbursement.VendInvoiceJour = _vendInvoiceJour.RecId;

        // creates the transaction based on percentage allocation to specfic vendor bank
        while select * from paymDisbursement
            where paymDisbursement.TableRefId == vendInvoiceInfoTable.TableRefId
            && paymDisbursement.ParmId        == vendInvoiceInfoTable.ParmId
            && paymDisbursement.VendAccount   == vendInvoiceInfoTable.InvoiceAccount
        {
            vendPaymentDisbursement.DueAmount           = paymDisbursement.PercentageAllocation;
            allocationRemaining = allocationRemaining   - paymDisbursement.PercentageAllocation;

            vendPaymentDisbursement.VendBankAccountId   = paymDisbursement.VendBankAccountID;
            vendPaymentDisbursement.DueDate             = dueDate;
            vendPaymentDisbursement.DiscDate            = cashDiscDate;

            vendPaymentDisbursement.DueAmount   = CurrencyExchangeHelper::amount(paymentAmountCur * paymDisbursement.PercentageAllocation / 100, currencyCode);

            vendPaymentDisbursement.DiscAmount     = CurrencyExchangeHelper::amount(cashDiscAmount * paymDisbursement.PercentageAllocation / 100, currencyCode);

            amountCur -= vendPaymentDisbursement.DueAmount;
            vendPaymentDisbursement.insert();
        }

        // if some allocation percentage is remaining.
        // then creates the transaction with no vendor bank.
        if (allocationRemaining)
        {
            vendPaymentDisbursement.DueAmount      = allocationRemaining;
            vendPaymentDisbursement.VendBankAccountId = '';
            vendPaymentDisbursement.DueDate        = dueDate;
            vendPaymentDisbursement.DiscDate       = cashDiscDate;

            vendPaymentDisbursement.DueAmount  = CurrencyExchangeHelper::amount(paymentAmountCur * allocationRemaining / 100, currencyCode);

            vendPaymentDisbursement.DiscAmount = CurrencyExchangeHelper::amount(cashDiscAmount * allocationRemaining / 100, currencyCode);

            amountCur -= vendPaymentDisbursement.DueAmount;

            vendPaymentDisbursement.insert();
        }
        // if any amount left.
        if (amountCur)
        {
            this.remainAmountCur(vendPaymentDisbursement, amountCur);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables with the <c>PurchTotals</c> class object.
    /// </summary>
    /// <param name="purchTotals">
    /// The <c>PurchTotals</c> class object is used to initialize the class variables for creating the Open transactions.
    /// </param>

    public void initFromPurchTotals(PurchTotals   purchTotals)
    {
        ;
        invoiceAmount       = purchTotals.purchTotalAmount();
        invoiceTaxAmount    = purchTotals.purchTaxTotal();
        cashDiscAmount      = purchTotals.purchCashDiscAmount();

        invoiceDate         = purchTotals.documentDate();
        paymTermId          = purchTotals.paymCode();
        paymDayId           = purchTotals.paymDayId();
        dueDate             = PaymTerm::find(paymTermId).due(invoiceDate, paymDayId);
        cashDiscDate        = purchTotals.purchCashDiscDate();
        invoiceId           = '';
        cashDiscCode        = purchTotals.purchCashDiscCode();
        currencyCode        = purchTotals.purchCurrency();
        paymentAmountCur    = invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The base data buffer.
    /// </param>
    public void new(Common _common)
    {
        ;
        if (_common.TableId == tablenum(VendInvoiceInfoTable))
            vendInvoiceInfoTable           = _common;

        if (_common.TableId == tablenum(VendInvoiceJour))
            custVendInvoiceJour           = _common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
