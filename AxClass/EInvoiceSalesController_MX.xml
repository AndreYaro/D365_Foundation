<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>eInvoiceSalesController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceSalesController_MX</c> class is a controller class for the <c>EInvoiceReport_MX</c>
/// report.
/// </summary>
public class eInvoiceSalesController_MX extends EInvoiceCFDISalesController_MX implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print management configuration into <c>FormLetterReport.</c>
    /// </summary>
    /// <param name = "_formLetterReport">The  <c>FormLetterReport.</c> that will be used in report printing.</param>
    /// <remarks>
    /// Override this method to set print management configuration specific.
    /// </remarks>
    protected void setPrintMgmt(FormLetterReport _formLetterReport)
    {
        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoiceJournalPrint))
        {
            // Set the caller
            SalesInvoiceJournalPrint salesInvoiceJournalPrint = this.parmArgs().caller();

            _formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            _formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            _formLetterReport.parmUsePrintMgmtDestinations(salesInvoiceJournalPrint.parmUsePrintManagement());
            _formLetterReport.parmUseUserDefinedDestinations(salesInvoiceJournalPrint.parmUseUserDefinedDestinations());
            usePrintMgmtDestinations = salesInvoiceJournalPrint.parmUsePrintManagement();
        }
        else
        {
            super(_formLetterReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCFDI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the invoice to be printed is CFDI or CFD.
    /// </summary>
    /// <returns>True if the invoice is a CFDI, false if is CFD.</returns>
    protected boolean isCFDI()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>EInvoiceReport_MX</c> SRS Report.
    /// </summary>
    /// <param name="_args">Args object.</param>
    public static void main(Args _args)
    {
        EInvoiceControllerBase_MX controller = new EInvoiceSalesController_MX();

        controller.initialize(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>