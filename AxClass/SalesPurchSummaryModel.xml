<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchSummaryModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesPurchSummaryModel
{
    SalesPurchSummary   orderSummary;
    // <GEERU>
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data sources to the query during the query building.
    /// </summary>
    /// <param name="_queryRun">
    /// The queryRun with a query that is being built.
    /// </param>
    public void addDataSources(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSources_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds country specific data sources to the query during the query build process.
    /// </summary>
    /// <param name="_query">
    /// The query that is being built.
    /// </param>
    /// <remarks>
    /// This method should be overwritten in subclasses if there is a necessity to use additional datasources.
    /// </remarks>
    public void addDataSources_RU(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add sorting fields to the country specific table on the query.
    /// </summary>
    /// <param name="_queryRun">
    /// The query that is being built.
    /// </param>
    /// <remarks>
    /// this method is intentionally left empty.
    /// </remarks>
    protected void addOrderFields_RU(QueryRun    _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesQuery</Name>
				<Source><![CDATA[
    public QueryRun addRangesQuery(
        QueryRun    _queryRun,
        Common      _orderTable)
    {
        return _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateAllowed</Name>
				<Source><![CDATA[
    public boolean checkUpdateAllowed()
    {
        if (orderSummary.sumOrderId())
        {
            return checkFailed("@SYS25705");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    public boolean createNewJournal(Common _orderTable)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesPurchSummary _orderSummary)
    {
        orderSummary = _orderSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query for finding records to post.
    /// </summary>
    /// <param name="_isInBatch">
    ///    A Boolean value that determines whether the <c>queryBuild</c> method is called from batch; optional.
    /// </param>
    /// <returns>
    ///    The <c>QueryRun</c> object for the build query.
    /// </returns>
    public QueryRun queryBuild(boolean _isInBatch = false)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(orderSummary.tableNumParmTable(),tableid2name(orderSummary.tableNumParmTable()));

        // <GEERU>
        QueryRun queryRun = new queryRun(query);
        // </GEERU>

        this.addDataSources(queryRun);

        // <GEERU>
        query = new query(queryRun.query());
        qbds = query.dataSourceTable(orderSummary.tableNumParmTable());
        this.addDataSources_RU(query);
        // </GEERU>

        qbds = qbds.addDataSource(orderSummary.tableNumParmLine(), tableid2name(orderSummary.tableNumParmLine()));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);

        if (_isInBatch)
        {
            qbds = query.dataSourceTable(orderSummary.tableNumParmTable());
            qbds.addDataSource(orderSummary.tableNumSalesPurchParmTable());
            qbds = query.dataSourceTable(orderSummary.tableNumSalesPurchParmTable());
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(orderSummary.fieldNumSalesPurchParmTable_JobStatus()).value(queryValue(orderSummary.parmJobStatus()));
        }

        queryRun    = new QueryRun(query);
        queryRun.query().dataSourceTable(orderSummary.tableNumParmTable()).addRange(orderSummary.fieldNumParmTable_ParmId()).value(queryValue(orderSummary.parmId()));
        queryRun.query().dataSourceTable(orderSummary.tableNumParmTable()).update(true);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPurchSummaryModel construct(SalesPurchSummary _orderSummary)
    {
        SalesPurchSummaryModel salesPurchSummaryModel = SalesPurchSummaryModel::createSalesPurchSummaryModel(_orderSummary);

        if (salesPurchSummaryModel == null)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        return salesPurchSummaryModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPurchSummaryModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SalesPurchSummaryModel</c> depending on the account order and related information in the order summary.
    /// </summary>
    /// <param name = "_orderSummary">An instance of the <c>SalesPurchSummary</c> class.</param>
    /// <returns>An instance of the <c>SalesPurchSummaryModel</c> class.</returns>
    protected static SalesPurchSummaryModel createSalesPurchSummaryModel(SalesPurchSummary _orderSummary)
    {
        switch (_orderSummary.sumBy())
        {
            case AccountOrder::None:
                if (_orderSummary.tableNumOrderTable() == tablenum(PurchTable))
                {
                    return new PurchSummaryModel_None(_orderSummary);
                }
                else
                {
                    return new SalesPurchSummaryModel_None(_orderSummary);
                }

            case AccountOrder::Account:
                if ((_orderSummary.documentStatus() == DocumentStatus::Invoice ||
                     // <GEERU>
                _orderSummary.documentStatus() == DocumentStatus::Facture_RU ||
                     // </GEERU>
                _orderSummary.documentStatus() == DocumentStatus::ApproveJournal) &&
                     _orderSummary.tableNumOrderTable() == tablenum(PurchTable))
                {
                    return new PurchSummaryModel_Account_Invoice(_orderSummary);
                }
                else
                {
                    return new SalesPurchSummaryModel_Account(_orderSummary);
                }

            case AccountOrder::Order:
                return new SalesPurchSummaryModel_Order  (_orderSummary);

            case AccountOrder::Auto:
                if ((_orderSummary.documentStatus() == DocumentStatus::Invoice ||
                     _orderSummary.documentStatus() == DocumentStatus::ApproveJournal) &&
                     _orderSummary.tableNumOrderTable() == tablenum(PurchTable))
                {
                    return new PurchSummaryModel_Auto_Invoice(_orderSummary);
                }
                else
                {
                    return new SalesPurchSummaryModel_Auto(_orderSummary);
                }

            case AccountOrder::Journal:
                return new SalesPurchSummaryModel_Journal(_orderSummary);
            default:
                return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>