<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostJournal extends ProjPost
{
    Common              buffer;
    ProjCostTrans       projCostTrans;
    ProjCostTransCost   projCostTransCost;
    ProjCostTransSale   projCostTransSale;
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_Project  ledgerJournalTrans_Project;
    ProjBegBalJournalTrans_CostSales projBegBalJournalTrans_CostSales;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the mandatory transaction fields contain values.
    /// </summary>
    /// <param name="throwerror">
    /// Indicates whether an error should be thrown when a validation fails. May be set to null. The
    /// default value is true; optional.
    /// </param>
    /// <returns>
    ///  true if the basic fields contain values. The following fields are checked by this routine:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Project ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Category ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Currency ID for Sales</description>
    ///   </item>
    ///   <item>
    ///   <description>Transaction Date</description>
    ///   </item>
    ///  </list>
    /// </returns>
    /// <remarks>
    /// The <paramref name="throwerror" /> parameter is not used in this method and is provided for
    /// extending the functionality through an override method. This method will call the
    /// <c>checkFailed</c> method for all checked fields that do not contain a valid value.
    /// </remarks>
    public boolean checkTrans(boolean throwerror = true)
    {
        boolean ok  = true;
        ListEnumerator         enumerator;
        ProjFundingSourceRefId fundingSourceId;
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount defaultLedgerDimension;

        ok  = super();

        ok = (ok &&  projTrans.validateWrite());

        if (! projTrans.linePropertyId())
        {
            ok = checkFailed("@SYS50154") && ok;
        }

        ProjTable projTableLoc = ProjTable::find(projTrans.projId());
        ok  = (ok && projTableLoc.status().journalCheckStatusCost());

        ProjLedgerStatus costLedgerStatus;
        NoYes postCostEmpl;

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (!projTableLoc.ProjInvoiceProjId)
            {
                // Internal project, post cost to P/L accounts.
                costLedgerStatus = ProjLedgerStatus::Operations;
                postCostEmpl = NoYes::No;
            }
            else
            {
                ProjRevenueProfile revProfile = ProjRevRecHelper::getRevProfileForTransactionType(projTableLoc, ProjTransType::Cost);
                costLedgerStatus = ProjRevRecHelper::cost2LedgerStatus(revProfile.CostLedgerStatus);
                postCostEmpl = revProfile.PostWIPCost;
            }
        }
        else
        {
            ProjGroup projGroup = ProjGroup::find(projTableLoc.ProjGroupId);
            costLedgerStatus = projGroup.CostTransCost;
            postCostEmpl = projGroup.CostTransTurnover;
        }

        if (projTrans.transCost() && costledgerStatus)
        {
            List fundingsources = ProjFundingSource::getFundingSources(projTrans);

            enumerator = fundingsources.getEnumerator();

            while ( enumerator.moveNext() )
            {
                fundingSourceId = enumerator.current();
                ok = ok && this.validateDimensionsForPosting(throwerror, costledgerStatus, fundingSourceId);
            }

            if (fundingsources.empty())
            {
                ok = ok && this.validateDimensionsForPosting(throwerror, costledgerStatus, 0);
            }
        }

        if (projTrans.canBeInvoiced() && projTrans.transTurnover() && postCostEmpl)
        {
            if ( !enumerator )
            {
                enumerator = ProjFundingSource::getFundingSources( projTrans ).getEnumerator();
            }
            else
            {
                enumerator.reset();
            }

            while ( enumerator.moveNext() )
            {
                fundingSourceId = enumerator.current();
                defaultLedgerDimension=projTrans.salesOffsetAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

                defaultLedgerDimension=projTrans.salesValueAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    public boolean checkUpdateBudget()
    {
        boolean ret;
        //don't do the budget check for the ProjPostCostJournal for adjustments
        if (this.parmAdjustment() && SysDictClass::isSuperclass(classIdGet(this), classNum(ProjPostCostJournal)))
        {
            ret = false;
        }
        else
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that posts the credit side of the transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that posts the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId );
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId );
                break;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used to post the debit side of a transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that is used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension( _fundingSourceId );
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerDimension = projTrans.costAccountLedgerDimension( _fundingSourceId, false);
                break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForCosts())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate that will be used for computing amounts in the default currency.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTrans.ExchRate</c> field.
    /// </returns>
    /// <remarks>
    /// When the value 0 is passed to the routine for computing amounts in the default currency, the
    /// exchange rate is retrieved from the tables.
    /// </remarks>
    public ExchRate exchRate()
    {
        return ledgerJournalTrans.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate that will be used for computing amounts in the reporting currency.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTrans.ReportingCurrencyExchRate</c> field.
    /// </returns>
    public ExchRate reportingCurrencyExchRate()
    {
        return ledgerJournalTrans.ReportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchRate exchRateSecondary()
    {
        return ledgerJournalTrans.ExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getbudgetAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the adjustment type of the budget.
    /// </summary>
    /// <returns>
    ///    The adjustment type of the budget.
    /// </returns>
    protected ProjBudgetAdjustmentType getbudgetAdjustmentType()
    {
        ProjBudgetAdjustmentType ret;

        if (this.parmTransIdOrig() && this.parmAdjRefTransId())
        {
            ret = ProjBudgetAdjustmentType::Decrement;
        }
        else
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the reference transaction ID that is associated with the project transaction.
    /// </summary>
    /// <returns>
    ///    The reference transaction ID.
    /// </returns>
    protected ProjTransIdBase getRefTransId()
    {
        ProjTransIdBase projTransIdBase;

        projTransIdBase = super();

        if (this.parmTransIdOrig() && this.parmAdjRefTransId())
        {
            projTransIdBase = projTrans.transId();
        }

        return projTransIdBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>investmentElimination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the investment elimination value.
    /// </summary>
    /// <returns>
    /// true if the investment elimination value is true; otherwise, false.
    /// </returns>
    public boolean investmentElimination()
    {
        if (ProjTable::find(projTrans.txt()).Type == ProjType::Investment || ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (this.parmElimination())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the<c>ProjPostCostJournal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        buffer  = _buffer;

        switch (_buffer.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans  = _buffer;
                this.initFromLedgerJournalTrans(ledgerJournalTrans);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerJournalTrans_Project</c> and <c>ProjTrans</c> based on the instance of the <c>ProjPostCostJournal</c>.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The instance of <c>LedgerJournalTrans</c>.
    /// </param>
    protected void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(_ledgerJournalTrans.RecId);
        projTrans = ProjTrans::newLedgerJournalTrans(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>oneVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether one voucher was created for the journal.
    /// </summary>
    /// <returns>
    /// true if there is only one voucher created for the journal; otherwise, false.
    /// </returns>
    protected boolean oneVoucher()
    {
        if (ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().NewVoucher == NewVoucher::OneVoucher)
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForCosts())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>ProjCostTrans</c> table buffer.
    /// </summary>
    /// <param name = "_multiplier">
    /// An integer value.
    /// </param>
    protected void populateProjCostTrans(int _multiplier)
    {
        projCostTrans.clear();

        switch (buffer.TableId)
        {
            case tableNum(LedgerJournalTrans):
                projCostTrans = ProjCostTrans::initTransFromJournal(ledgerJournalTrans, ledgerJournalTrans_Project);
                break;
        }

        if (ledgerVoucher)
        {
            projCostTrans.VoucherJournal = ledgerVoucher.lastVoucher();
        }

        projCostTrans.DefaultDimension = this.setCostDefaultDimension();
        projCostTrans.TransactionOrigin = this.parmTransactionOrigin();

        projCostTrans.Qty               = projCostTrans.Qty*_multiplier;

        if (! projCostTrans.TransId)
        {
            projCostTrans.TransId   = ProjParameters::newTransId();
        }

        if (this.parmAdjustment())
        {
            projCostTrans.TransIdRef = this.parmTransIdRef();
            projCostTrans.AdjRefTransId = this.parmAdjRefTransId();

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                ProjCostTrans origProjCostTrans = ProjCostTrans::find(this.parmAdjRefTransId());
                projCostTrans.LedgerJournalTrans = origProjCostTrans.LedgerJournalTrans;
                projCostTrans.VendInvoiceTrans = origProjCostTrans.VendInvoiceTrans;

                if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()))
                {
                    projCostTrans.VendorAccount = origProjCostTrans.VendorAccount;
                    projCostTrans.VendorName = origProjCostTrans.VendorName;
                }
            }
        }
        else if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projCostTrans.LedgerJournalTrans = ledgerJournalTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjectCostTransSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the project expense sales price and line amount.
    /// </summary>
    /// <param name = "_projCostTransSale">
    /// The project expense sales transaction table record.
    /// </param>
    /// <param name = "_projCostTrans">
    /// The project expense transaction table record.
    /// </param>
    [Replaceable]
    protected void populateProjectCostTransSales(ProjCostTransSale _projCostTransSale, ProjCostTrans _projCostTrans)
    {
        if ( fundingSourceList.elements() == 1)
        {
            _projCostTransSale.SalesPrice = ledgerJournalTrans_Project.SalesPrice;   
        }

        //Multiple funding sources scenario
        else  if (projTrans.qty() != 0)
        {
            _projCostTransSale.SalesPrice = _projCostTransSale.LineAmount/projTrans.qty();
        }
        else
        {
            // Use Qty value of 1
            _projCostTransSale.SalesPrice = _projCostTransSale.LineAmount;
        }

        ProjTable projTable = ProjTable::find(_projCostTrans.ProjId);

        if (projTable.wipProject && ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Cost))
        {
            if (ProjRevRecHelper::getSalesPriceMatchingPrincipleForProject(projTable.wipProject) != ProjSalesPriceMatchingPrincip::None)
            {
                _projCostTransSale.LineAmount = 0;
                _projCostTransSale.SalesPrice = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus getTransStatus()
    {
        ProjTransStatus ret = this.parmTransStatus();

        if (!ret)
        {
            ret = ProjTransStatus::Posted;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjCostTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projCostTrans">
    /// The <c>ProjCostTrans</c> record.
    /// </param>    
    /// <param name = "_projTrans">
    /// The <c>ProjTrans</c> object.
    /// </param>
    /// <param name = "_fundingSourceRecId">
    /// The funding source reference ID.
    /// </param>
    /// <param name = "_lineAmount">
    /// The line amount value.
    /// </param>
    /// <returns>
    /// The <c>ProjCostTransSale</c> record.>
    /// </returns>
	protected ProjCostTransSale initializeProjCostTransSale(ProjCostTrans _projCostTrans, ProjTrans _projTrans, ProjFundingSourceRefId _fundingSourceRecId, AmountCur _lineAmount)
    {

        ProjCostTransSale localProjCostTransSale;
        localProjCostTransSale.TransId = _projCostTrans.TransId;
        localProjCostTransSale.FundingSource = _fundingSourceRecId;
        localProjCostTransSale.LineAmount = _lineAmount;

        this.populateProjectCostTransSales(localProjCostTransSale, _projCostTrans);

        switch (buffer.TableId)
        {
            case tableNum(LedgerJournalTrans):
                localProjCostTransSale.LedgerTransdate = this.getLedgerJournalTransDate();
                break;
        }

        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(_fundingSourceRecId))
        {
            localProjCostTransSale.LedgerSalesPosted  = true;
            localProjCostTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(localProjCostTransSale.SalesPrice * _projTrans.qty(), _projTrans.currencyIdSales(), _projTrans.transDate(), Currency::noYes2UnknownNoYes(_projTrans.triangulationSales()), _projTrans.exchRateSales(), _projTrans.exchRateSecondarySales());
        }

        localProjCostTransSale.TransStatus = this.getTransStatus();

        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        localProjCostTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projCostTrans.DefaultDimension, projFundingSource.DefaultDimension);

        return localProjCostTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        int multiplier;
        ProjFundingSource projFundingSource;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        if (this.parmElimination() && this.parmReverseAccrued())
        {
            multiplier = -1;
        }
        else
        {
            multiplier = 1;
        }

        this.populateProjCostTrans(multiplier);

        if (!projCostTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            projCostTrans.IsCorrection = this.isTransCorrection();
        }
        // </GEEU>

        projCostTrans.insert();

        // <GTE> <GIN>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            LedgerJournalTable ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

            if (ledgerJournalTable.JournalType == LedgerJournalType::Cost
                || (ledgerJournalTable.JournalType  == LedgerJournalType::Daily
                    && (ledgerJournalTrans.AccountType ==  LedgerJournalACType::Project
                        || ledgerJournalTrans.OffsetAccountType ==  LedgerJournalACType::Project)))
            {
                TransTaxInformationHelper::copyTransTaxInformation(ledgerJournalTrans_Project, projCostTrans);
            }
            else if (ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
            {
                TransTaxInformationHelper::copyTransTaxInformation(ledgerJournalTrans, projCostTrans);

                TransTaxInformationHelper::resetCustVendLocationByTransTable(projCostTrans);
            }
        }
        // </GTE> </GIN>

        if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
        {
            MapEnumerator fundingAllocationEnumerator;

            // this creates the cost and sales distributions
            this.createCostSalesDistributions(projTrans.transCost() - this.parmTaxAmountCur(), projTrans.transTurnover());
            if (!fundingSourceList)
            {
                throw error("@SYS136842");
            }

            switch (buffer.TableId)
            {
                case tableNum(LedgerJournalTrans):
                    // this is the same call where we allocate the ledger amount
                    // we need to use the same call so that the CostLedgerAmount is exactly as it is as the amount posted to GL
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList, projTrans.transCost() - this.parmTaxAmountCur(), projTrans.currencyIdCost()).getEnumerator();
                    break;
            }

            if (allocationError == NoYes::No)
            {
                //Create ProjCostTransCost record
                while (fundingAllocationEnumerator.moveNext())
                {
                    projCostTransCost.clear();
                    projCostTransCost.TransId       = projCostTrans.TransId;
                    projCostTransCost.FundingSource = fundingAllocationEnumerator.currentKey();
                    projCostTransCost.LineAmount    = fundingAllocationEnumerator.currentValue();
                    projFundingSource = ProjFundingSource::find(projCostTransCost.FundingSource);

                    if (fundingSourceList.elements() == 1)
                    {
                        if (this.parmTaxAmountCur() && projTrans.qty())
                        {
                            projCostTransCost.CostPriceCurrency = (projTrans.transCost() - this.parmTaxAmountCur())/projTrans.qty();
                        }
                        else
                        {
                            projCostTransCost.CostPriceCurrency = ledgerJournalTrans_Project.CostPrice;
                        }
                    }
                    // Multiple funding sources
                    else if (projTrans.qty() != 0)
                    {
                        projCostTransCost.CostPriceCurrency = projCostTransCost.LineAmount / projTrans.qty();
                    }
                    else
                    {
                        // Use Qty value of 1
                        projCostTransCost.CostPriceCurrency =  projCostTransCost.LineAmount;
                    }

                    switch (buffer.TableId)
                    {
                        case tableNum(LedgerJournalTrans):

                            CurrencyExchangeHelper exchangeRateHelper = this.getCurrencyExchHelperForReversingEntry();

                            if (!exchangeRateHelper)
                            {
                                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), projCostTrans.TransDate);
                            }

                            exchangeRateHelper.parmExchangeRate1(this.exchRate());
                            exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());
                            projCostTransCost.CostPrice = exchangeRateHelper.calculateTransactionToAccounting(projTrans.currencyIdCost(), projCostTransCost.CostPriceCurrency, true);
                            projCostTransCost.LedgerTransdate = this.getLedgerJournalTransDate();
                            break;
                    }

                    projCostTransCost.CostPrice = projCostTransCost.CostPrice*multiplier;
                    projCostTransCost.CostPriceCurrency = projCostTransCost.CostPriceCurrency*multiplier;
                    projCostTransCost.LedgerStatusCost = this.projCostTransCostLedgerStatus();
                    projCostTransCost.TransStatus = this.getTransStatus();
                    projCostTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projCostTrans.DefaultDimension, projFundingSource.DefaultDimension);
                    projCostTransCost.insert();
                }

                // Create ProjCostTransSale record
                Amount salesAmount = projTrans.transTurnover();
                     
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, salesAmount, ledgerJournalTrans_Project.SalesCurrencyId).getEnumerator();
                while (fundingAllocationEnumerator.moveNext())
                {
                    projCostTransSale = this.initializeProjCostTransSale(projCostTrans, projTrans, fundingAllocationEnumerator.currentKey(), fundingAllocationEnumerator.currentValue());
                    projCostTransSale.insert();
                }
            }
        }

        switch (buffer.TableId)
        {
            case tableNum(LedgerJournalTrans):
                Docu::copy(ledgerJournalTrans, projCostTrans);
                break;
        }

        this.parmTransIdCost(projCostTrans.TransId);
        this.parmTransIdSales(projCostTrans.TransId);

        transIdNew = projCostTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjPostCostJournal)))
        {
            if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
            {
                ProjCostTransCost   projCostTransCostUpd;
                select sum(LineAmount) from projCostTransCostUpd
                    where projCostTransCostUpd.TransId == projCostTrans.TransId;
                
                AmountCur totalcost = projCostTransCostUpd.LineAmount;
                
                if (totalcost)
                {
                    ttsbegin;
                    while select forupdate projCostTransCostUpd
                        where projCostTransCostUpd.TransId == projCostTrans.TransId
                    {
                        ProjTrans projTransDetail = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCostUpd);
                        real percent = projTransDetail.transCost() / totalcost;
                        projCostTransCostUpd.CostAmountLedger = percent * this.ledgerCostAmountMST();
                        projCostTransCostUpd.update();
                    }
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public UnknownNoYes triangulation()
    {
        return Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs sales tax validation for the ledger dimension used.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// ledger dimension need to be validate.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateNoTax(LedgerDimensionAccount _ledgerDimension)
    {
        if (!this.validateTaxOnTrans(_ledgerDimension))
        {
            throw error("@SYS21533");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxOnTrans</Name>
				<Source><![CDATA[
    protected boolean validateTaxOnTrans(LedgerDimensionAccount _ledgerDimension)
    {
        MainAccount mainAccount;
        DimensionAttributeValueCombination dimAttrValueCombo;
        boolean ret;

        select firstonly RecId from dimAttrValueCombo
            where dimAttrValueCombo.RecId == _ledgerDimension
                join mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

        if (ProjAdjustmentTaxCodeValidateFixFlight::instance().isEnabled())
        {
            if (ledgerJournalTrans)
            {
                ret = Tax::checkNoTax(mainAccount, ledgerJournalTrans.TaxGroup, ledgerJournalTrans.TaxItemGroup, ledgerJournalTrans.TaxCode);
            }
            else
            {
                ret = Tax::checkNoTax(mainAccount, projTrans.taxGroup(), projTrans.taxItemGroup(), '');
            }
        }
        else
        {
            ret = Tax::checkNoTax(mainAccount, ledgerJournalTrans.TaxGroup, ledgerJournalTrans.TaxItemGroup, ledgerJournalTrans.TaxCode);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionsForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether mandatory financial dimension fields contain values to allow posting.
    /// </summary>
    /// <param name="_throwerror">
    /// Indicates whether an error should be thrown when a validation fails.
    /// </param>
    /// <param name="_CostTransCostStatus">
    /// The costTransCost status that is associated with the project group that will be used by this.
    /// transaction.
    /// </param>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this.
    /// transaction.
    /// </param>
    /// <returns>
    /// true, if the transaction is allowed for posting; otherwise, false.
    /// </returns>
    private boolean validateDimensionsForPosting(boolean _throwerror, ProjLedgerStatus _CostTransCostStatus, ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        boolean ret = true;

        if (_CostTransCostStatus == ProjLedgerStatus::BalanceSheet)
        {
            defaultLedgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
        }
        else
        {
            defaultLedgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId, _throwerror);
        }
        // need to merge the default account with the default dimensions and do the check on the fully instantiated account
        mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
        ret = ret && MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension));

        if (TaxParameters::find().ValidateTaxCode)
        {
            ret = this.validateNoTax(mergedLedgerDimension) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default dimensions defined at project cost or WIP account to project cost transaction.
    /// </summary>
    /// <returns>
    /// The record Id that represents the default dimension combination of project cost transaction.
    /// </returns>
    private LedgerDimensionAccount setCostDefaultDimension()
    {
        DimensionDefault costDefaultDimension = this.defaultDimension();

        LedgerDimensionDefaultAccount costDefaultLedgerDimension = (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet) ?
                    projTrans.statusAccountLedgerDimension(projTrans.fundingSource()) :
                    projTrans.costAccountLedgerDimension(projTrans.fundingSource(), false);

        MainAccountLegalEntity mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::findByLedgerDimension(costDefaultLedgerDimension).RecId, CompanyInfo::current());

        if (mainAccountLegalEntity.DefaultDimension)
        {
            MapEnumerator mi;
            Map attributeValues = LedgerDimensionFacade::getFixedDimensionsForMainAccount(mainAccountLegalEntity.MainAccount, mainAccountLegalEntity.LegalEntity);

            if (attributeValues.elements())
            {
                mi = attributeValues.getEnumerator();
                while (mi.moveNext())
                {
                    costDefaultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(costDefaultDimension, mainAccountLegalEntity.DefaultDimension, mi.currentKey());
                }
            }
        }
        
        return costDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowInvalidCostLedgerStatusErrorForCosts</Name>
				<Source><![CDATA[
    protected boolean shouldThrowInvalidCostLedgerStatusErrorForCosts()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostTransCostLedgerStatus</Name>
				<Source><![CDATA[
    protected ProjLedgerStatus projCostTransCostLedgerStatus()
    {
        ProjLedgerStatus projLedgerStatus;
        if (projTrans.projLineProperty().ToBeCapitalize)
        {
            projLedgerStatus = this.parmLedgerStatusCost();
        }
        else
        {
            projLedgerStatus = ProjLedgerStatus::Operations;
        }
        return projLedgerStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>