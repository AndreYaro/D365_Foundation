<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmOutlookAppointment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents an outlook appointment by communicating with the outlook client.
/// </summary>
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmOutlookAppointment implements smmIAppointment
{
    #define.AxOldOutlookEntryId('AxOldOutlookEntryId')
    #smmMSOutlook2002ObjectModelConstants
    COM item;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the appointment is an all day event.
    /// </summary>
    /// <returns>
    /// True if the appointment is an all day event; otherwise, false.
    /// </returns>
    boolean allDayEvent()
    {
        return item.allDayEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>billingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the billing information for the appointment.
    /// </summary>
    /// <returns>
    /// A string containing all the billing information associated with the appointment.
    /// </returns>
    str billingInformation()
    {
        return item.billingInformation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>busyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the busy status of the user for the appointment.
    /// </summary>
    /// <returns>
    /// Returns an #OlBusyStatus constant indicating the busy status of the user for the appointment.
    /// </returns>
    int busyStatus()
    {
        return item.busyStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the categories associated with the appointment.
    /// </summary>
    /// <returns>
    /// A string with all the categories associated to the appointment
    /// </returns>
    str categories()
    {
        return item.categories();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the outlook item from outlook.
    /// </summary>
    void delete()
    {
        item.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date time for the appointment.
    /// </summary>
    /// <returns>
    /// The end date time for the appointment.
    /// </returns>
    utcdatetime end()
    {
        return item.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item's outlook entry id.
    /// </summary>
    /// <returns>
    /// The entry id for that item.
    /// </returns>
    str entryId()
    {
        return item.entryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the occurrence exceptions for the appointment.
    /// The ocurrence exceptions are genereted by editing or deleting an occurrence of a recurrent appointment.
    /// </summary>
    /// <returns>
    /// A list of <c>smmOutlookOcurrence</c> elements that represent all the exceptions for the appointment.
    /// </returns>
    List exceptions()
    {
        int  numOfExceptions, exceptionIndex;
        COM  recurrencePattern   = this.recurrencePattern();
        COM  exceptions          = recurrencePattern.exceptions();
        COM  exception;
        List ret                = new List(Types::Class);

        numOfExceptions = exceptions.count();
        exceptionIndex  = 1;
        while (exceptionIndex <= numOfExceptions)
        {
            exception = exceptions.item(exceptionIndex);
            if (exception)
            {
                ret.addEnd(new smmOutlookOccurrence(exception));
            }
            exceptionIndex++;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment representing a specific occurrence of this recurring appointment.
    /// </summary>
    /// <param name="_date">
    /// The date when the ocurrence takes place.
    /// </param>
    /// <param name="_time">
    /// The time when the ocurrence takes place.
    /// </param>
    /// <returns>
    /// A <c>smmIAppointment</c> representing the occurrence requested.
    /// </returns>
    /// <remarks>
    /// Will fail if no ocurrence exists in the date and time provided.
    /// </remarks>
    smmIAppointment getItemOccurrence(TransDate _date, TimeOfDay _time)
    {
        COM recurrencePattern = item.getRecurrencePattern();
        COM occurrence  = recurrencePattern.getOccurrence(COMVariant::createFromDateAndTime(_date, _time));

        return new smmOutlookAppointment(occurrence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the master appointment for this appointment.
    /// </summary>
    /// <returns>
    /// If the appointment is non-recurring or a recurring master, it will return a new identical instance.
    /// If the appointment is an occurrence or an exception in a recurring appointment it will return the master appointment.
    /// </returns>
    smmIAppointment getMaster()
    {
        COM master          = this.master();

        return new smmOutlookAppointment(master);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldItemEntryId</Name>
				<Source><![CDATA[
    // Get the old outlook entry Id from user properties
    str getOldItemEntryId()
    {
        str                         oldOutlookEntryId;
        COM                         userProperties;
        COM                         userProperty;
        COMVariant                  value;

        if (item)
        {
            userProperties = item.userProperties();
            if (userProperties)
            {
                userProperty = userProperties.item(#AxOldOutlookEntryId);
                if (userProperty)
                {
                    value = userProperty.value();
                    oldOutlookEntryId = value.bStr();
                }
            }
        }
        return oldOutlookEntryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern for the appointment.
    /// </summary>
    /// <returns>
    /// The recurrence pattern for the appointment.
    /// </returns>
    smmIRecurrence getRecurrencePattern()
    {
        return new smmOutlookRecurrence(this.recurrencePattern());
    }

]]></Source>
			</Method>
			<Method>
				<Name>importance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the importance level of the appointment.
    /// </summary>
    /// <returns>
    /// An int representing the importance of the appointment.
    /// The value will be one of the following:
    /// #olImportanceLow, #olImportanceNormal, #olImportanceHigh
    /// </returns>
    int importance()
    {
        return item.importance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is a recurrent appointment.
    /// </summary>
    /// <returns>
    /// True if it is a recurrent appointment; otherwise, false.
    /// </returns>
    boolean isRecurring()
    {
        return item.isRecurring();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModificationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date and time the item was modified in exchange.
    /// </summary>
    /// <returns>
    /// An utcdatetime with the latest date and time when the item was modified in exchange.
    /// If it's a new item, until saved it will just exist locally and it will return
    /// DateTimeUtil::minValue().
    /// </returns>
    utcdatetime lastModificationTime()
    {
        return item.lastModificationTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's location.
    /// </summary>
    /// <returns>
    /// A string with all the appointment's location information.
    /// </returns>
    str location()
    {
        return item.location();
    }

]]></Source>
			</Method>
			<Method>
				<Name>master</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the master appointment.
    /// </summary>
    /// <returns>
    /// The COM object containing the master appointment for this series.
    /// </returns>
    private COM master()
    {
        COM master          = item;
        int recurrenceState = this.recurrenceState();

        if (recurrenceState == #olApptOccurrence || recurrenceState == #olApptException)
        {
            master = item.parent();
        }

        return master;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's mileage.
    /// </summary>
    /// <returns>
    /// A string representing the appointment's mileage.
    /// </returns>
    str mileage()
    {
        return item.mileage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(COM _item)
    {
        item = _item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outlook entry id for the item's parent folder.
    /// </summary>
    /// <returns>
    /// The outlook entry id for the item's parent folder.
    /// </returns>
    str parentFolderId()
    {
        COM master, folder;

        master = this.master();
        folder = master.parent();

        return folder.entryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern for the appointment series.
    /// </summary>
    /// <returns>
    /// The COM object containing the recurrence pattern for the series.
    /// </returns>
    private COM recurrencePattern()
    {
        COM master          = this.master();

        return master.getRecurrencePattern();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence state for the appointment.
    /// </summary>
    /// <returns>
    /// A member of the #OlRecurrenceState enumeration representing the recurrence state of the appointment.
    /// </returns>
    int recurrenceState()
    {
        return item.recurrenceState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <returns>
    /// The number of minutes before the start when the reminder should be triggered.
    /// Will return 0 if it is not set.
    /// </returns>
    int reminderMinutesBeforeStart()
    {
        return item.reminderMinutesBeforeStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reminder was set for this task.
    /// </summary>
    /// <returns>
    /// True if the task has a reminder set; otherwise, false.
    /// </returns>
    boolean reminderSet()
    {
        return item.reminderSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the response is requested for this appointment.
    /// </summary>
    /// <returns>
    /// True if the response is requested; otherwise, false.
    /// </returns>
    boolean responseRequested()
    {
        return item.responseRequested();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the appointment.
    /// </summary>
    /// <returns>
    /// Returns <c>smmOutlookAppointment</c> after saving the appointment.
    /// </returns>
    smmIAppointment saveItem()
    {
        COM newAppointment;

        newAppointment = item.save();

        return new smmOutlookAppointment(newAppointment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOldItemEntryId</Name>
				<Source><![CDATA[
    public void saveOldItemEntryId(boolean synchronizeRecurring,str outlookEntryId)
    {
        COM         userProperties;
        COM         userProperty;
        COM         outlookItemUpd;
        COMVariant  value;

        if (item)
        {
            if (!outlookEntryId)
            {
                outlookEntryId = item.entryid();
            }
            if (synchronizeRecurring && this.isRecurring())
            {
                outlookItemUpd = item.parent();
            }
            else
            {
                outlookItemUpd = item;
            }
            userProperties = outlookItemUpd.userProperties();
            if (userProperties)
            {
                userProperty = userProperties.add(#AxOldOutlookEntryId,#OlText,true);
                if (userProperty)
                {
                    value = userProperty.value();
                    if (value.bStr() != outlookEntryId)
                    {
                        userProperty.value(outlookEntryId);
                        outlookItemUpd.save();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sensitivity for the appointment.
    /// </summary>
    /// <returns>
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the appointment.
    /// The value may be #olConfidential, #olNormal, #olPersonal or #olPrivate.
    /// </returns>
    int sensitivity()
    {
        return item.sensitivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the appointment is an all day event or not.
    /// </summary>
    /// <param name="_allDayEvent">
    /// True if it is an all day event; otherwise, false.
    /// </param>
    void setAllDayEvent(boolean _allDayEvent)
    {
        item.allDayEvent(COMVariant::createFromInt(_allDayEvent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the billing information for the appointment.
    /// </summary>
    /// <param name="_billingInformation">
    /// A string with all the billing information for the appointment.
    /// </param>
    void setBillingInformation(str _billingInformation)
    {
        item.billingInformation(COMVariant::createFromStr(_billingInformation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the html body for the appointment.
    /// </summary>
    /// <param name="_body">
    /// A string with the html body of the appointment.
    /// </param>
    void setBody(str _body)
    {
        item.body(COMVariant::createFromStr(_body));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the busy status for the appointment.
    /// </summary>
    /// <param name="_busyStatus">
    /// A member of the #OlBusyStatus enumeration representing the busy status for the appointment.
    /// </param>
    void setBusyStatus(int _busyStatus)
    {
        item.busyStatus(COMVariant::createFromInt(_busyStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's categories.
    /// </summary>
    /// <param name="_categories">
    /// A string containing the categories asociated with the appointment.
    /// </param>
    void setCategories(str _categories)
    {
        item.categories(COMVariant::createFromStr(_categories));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the end date time for the appointment.
    /// </summary>
    /// <param name="_end">
    /// The end date time.
    /// </param>
    void setEnd(utcdatetime _end)
    {
        item.end(smmOutlookSync::createFromDateAndTime(_end));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the importance of this appointment.
    /// </summary>
    /// <param name="_importance">
    /// A member of the #olImportance enumeration that represents the importance of the appointment.
    /// </param>
    void setImportance(int _importance)
    {
        item.importance(COMVariant::createFromInt(_importance));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the location for the appointment.
    /// </summary>
    /// <param name="_location">
    /// A string containing all the location information for the appointment.
    /// </param>
    void setLocation(str _location)
    {
        item.location(COMVariant::createFromStr(_location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mileage for the appointment.
    /// </summary>
    /// <param name="_mileage">
    /// A string containing the mileage for the appointment.
    /// </param>
    void setMileage(str _mileage)
    {
        item.mileage(COMVariant::createFromStr(_mileage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <param name="_reminderMinutesBeforeStart">
    /// An int with the minutes before the start of the appointment when the reminder should be triggered.
    /// </param>
    void setReminderMinutesBeforeStart(int _reminderMinutesBeforeStart)
    {
        item.reminderMinutesBeforeStart(COMVariant::createFromInt(_reminderMinutesBeforeStart));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the reminder is set for the appointment.
    /// </summary>
    /// <param name="_reminderSet">
    /// True if the reminder is set for the appointment; otherwise, false.
    /// </param>
    void setReminderSet(boolean _reminderSet)
    {
        item.reminderSet(COMVariant::createFromInt(_reminderSet));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResponseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the response is requested for the appointment.
    /// </summary>
    /// <param name="_responseRequested">
    /// True if the response is requested; otherwise, false.
    /// </param>
    void setResponseRequested(boolean _responseRequested)
    {
        item.responseRequested(COMVariant::createFromInt(_responseRequested));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sensitivity for the appointment.
    /// </summary>
    /// <param name="_sensitivity">
    /// A member of the #olSensitivity enumeration representing the sensitivity of this appointment.
    /// </param>
    void setSensitivity(int _sensitivity)
    {
        item.sensitivity(COMVariant::createFromInt(_sensitivity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date time for the appointment.
    /// </summary>
    /// <param name="_datetime">
    /// The start date time.
    /// </param>
    void setStart(utcdatetime _datetime)
    {
        item.start(smmOutlookSync::createFromDateAndTime(_datetime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's subject.
    /// </summary>
    /// <param name="_subject">
    /// A string containing the appointment's subject.
    /// </param>
    void setSubject(str _subject)
    {
        item.subject(COMVariant::createFromStr(_subject));
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date time for the appointment.
    /// </summary>
    /// <returns>
    /// The start date time.
    /// </returns>
    utcdatetime start()
    {
        return item.start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subject for the appointment.
    /// </summary>
    /// <returns>
    /// A string with the subject or empty string if it is not set.
    /// </returns>
    str subject()
    {
        return item.subject();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>