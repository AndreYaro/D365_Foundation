<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAbstractDataPersistenceTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAbstractDataPersistenceTemplate</c> class is an abstract template for data persistence.
/// </summary>
public abstract class TaxIntegrationAbstractDataPersistenceTemplate
    extends TaxIntegrationAbstractTemplate
{
    /// <summary>
    /// The current <c>MarkupTrans</c> of the document.
    /// </summary>
    protected MarkupTrans markupTransOfDocument;

    /// <summary>
    /// The current <c>MarkupTrans</c> of the current line.
    /// </summary>
    protected MarkupTrans markupTransOfLine;

    internal protected boolean isTaxIntegrationDataPersistenceSkipFetchDB;
    internal protected boolean isTaxIntegrationDataPersistenceSetLineRecord;
    internal protected boolean isTaxIntegrationEnabledForTaxSolutionProvider;
    internal protected boolean isTaxIntegrationISVAccrueUseTaxEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits.
    /// </summary>
    protected void init()
    {
        isTaxIntegrationDataPersistenceSkipFetchDB = TaxIntegrationDataPersistenceSkipFetchDBFlight::instance().isEnabled()
            && classIdGet(this) == classNum(TaxIntegrationSalesTableDataPersistence);
        isTaxIntegrationDataPersistenceSetLineRecord = isTaxIntegrationDataPersistenceSkipFetchDB
            && this.useLineRecord();
        isTaxIntegrationEnabledForTaxSolutionProvider = TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider();
        isTaxIntegrationISVAccrueUseTaxEnabled = TaxIntegrationUtils::isTaxIntegrationAccrueUseTaxEnabled(this.document.getBusinessProcess());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentBySysda</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds document query object records by Sysda.
    /// </summary>
    /// <returns>True if document query records exist; otherwise, false</returns>
    internal protected boolean findDocumentBySysda()
    {
        return isTaxIntegrationDataPersistenceSkipFetchDB ? true : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for line.
    /// </summary>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getLineEnumerator()
    {
        return isTaxIntegrationDataPersistenceSkipFetchDB ?
            TaxIntegrationDataEnumeratorFactory::getInstance(document.getLineSet()) : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for line charge.
    /// </summary>
    /// <param name = "_line"><c>TaxIntegrationLineObject</c></param>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getLineChargeEnumerator(TaxIntegrationLineObject _line)
    {
        return isTaxIntegrationDataPersistenceSkipFetchDB ?
            TaxIntegrationDataEnumeratorFactory::getInstance(_line.getChargeSet()) : super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for document charge.
    /// </summary>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getDocumentChargeEnumerator()
    {
        return isTaxIntegrationDataPersistenceSkipFetchDB ?
            TaxIntegrationDataEnumeratorFactory::getInstance(document.getChargeSet()) : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected abstract TaxIntegrationLineObject getLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current charge of the document.
    /// </summary>
    /// <returns>The current charge of the document</returns>
    protected TaxIntegrationLineObject getDocumentCharge()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.markupTransOfDocument.TableId, this.markupTransOfDocument.RecId);
        if (!document.checkCharge(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:ChargeOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getCharge(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current charge of the current line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <returns>The current charge of the current line.</returns>
    protected TaxIntegrationLineObject getLineCharge(TaxIntegrationLineObject _line)
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.markupTransOfLine.TableId, this.markupTransOfLine.RecId);
        if (!_line.checkCharge(localId))
        {
            _line.getAncestorDocument().setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:ChargeOnLineNotFound", localId, _line.getLocalId())));
            return null;
        }

        return _line.getCharge(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected abstract boolean saveDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected abstract boolean saveLine(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveDocumentCharge(TaxIntegrationLineObject _charge)
    {
        if (isTaxIntegrationDataPersistenceSetLineRecord)
        {
            this.markupTransOfDocument = _charge.getLocalRecord();
            if (!markupTransOfDocument)
            {
                throw error(Error::missingRecord(funcName()));
            }
            markupTransOfDocument.selectForUpdate(true);
        }
        return this.copyToMarkupTransFromCharge(this.markupTransOfDocument, _charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLineCharge(TaxIntegrationLineObject _charge)
    {
        if (isTaxIntegrationDataPersistenceSetLineRecord)
        {
            this.markupTransOfLine = _charge.getLocalRecord();
            if (!markupTransOfLine)
            {
                throw error(Error::missingRecord(funcName()));
            }
            markupTransOfLine.selectForUpdate(true);
        }
        return this.copyToMarkupTransFromCharge(this.markupTransOfLine, _charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the execution is transactional,
    /// which involves <c>ttsbegin</c>, <c>ttscommit</c>, and <c>ttsabort</c>.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean isTransactional()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document by saving the document.
    /// </summary>
    /// <returns>The document.</returns>
    protected TaxIntegrationDocumentObject processDocument()
    {
        TaxIntegrationDocumentObject local = this.document;
        if (!this.saveDocument())
        {
            return null;
        }
        return local;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current line of the document by saving the current line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processLine()
    {
        TaxIntegrationLineObject local = isTaxIntegrationDataPersistenceSkipFetchDB ?
            lineEnumerator.current() : this.getLine();

        if (!local || !this.saveLine(local))
        {
            return null;
        }
        return local;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnsavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the unsaved line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processUnsavedLine()
    {
        TaxIntegrationLineObject local = this.getLine();

        if (!local)
        {
            return null;
        }
        // Do nothing in persistence acitivty if the line is not inserted yet.
        // When line is inserted but not updated, save the changes to line.
        if (local.getLocalRecId() && !this.saveLine(local))
        {
            return null;
        }

        return local;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the document by saving the current charge of the document.
    /// </summary>
    /// <returns>The current charge of the document.</returns>
    protected TaxIntegrationLineObject processDocumentCharge()
    {
        TaxIntegrationLineObject local = isTaxIntegrationDataPersistenceSkipFetchDB ?
            documentChargeEnumerator.current() : this.getDocumentCharge();

        if (!local || !this.saveDocumentCharge(local))
        {
            return null;
        }
        return local;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the current line by saving the current charge of the current line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <returns>The current charge of the current line.</returns>
    protected TaxIntegrationLineObject processLineCharge(TaxIntegrationLineObject _line)
    {
        TaxIntegrationLineObject local = isTaxIntegrationDataPersistenceSkipFetchDB ?
             lineChargeEnumerator.current() : this.getLineCharge(_line);

        if (!local || !this.saveLineCharge(local))
        {
            return null;
        }
        return local;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToMarkupTransFromCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>MarkupTrans</c> from <c>TaxIntegrationLineObject</c>
    /// </summary>
    /// <param name = "_destination">The destination <c>MarkupTrans</c>.</param>
    /// <param name = "_source">The source <c>TaxIntegrationLineObject</c>.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean copyToMarkupTransFromCharge(
        MarkupTrans _destination,
        TaxIntegrationLineObject _source)
    {
        if (!_source.isTaxable())
        {
            return true;
        }

        TaxGroup taxGroup = _source.getTaxGroup();
        TaxItemGroup taxItemGroup = _source.getTaxItemGroup();

        if (_source.getNeedUpdateRecord())
        {
            if (_destination)
            {
                _destination.TaxGroup = taxGroup;
                _destination.TaxItemGroup = taxItemGroup;
                _destination.doUpdate();
            }
            else
            {
                MarkupTrans markupTrans;
                markupTrans.skipDataMethods(true);
                markupTrans.skipEvents(true);
                update_recordset markupTrans
                    setting
                        TaxGroup = taxGroup,
                        TaxItemGroup = taxItemGroup
                    where markupTrans.RecId == _source.getLocalRecId();
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>