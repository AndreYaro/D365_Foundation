<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsCreateOrderPickData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsCreateOrderPickData extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;//is being packed

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    protected void buildQueryRun(WMSOrderId _wmsOrderId = '')
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(WMSOrder));
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource.update(true);

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(WMSOrder, OrderId));
        if (_wmsOrderId)
        {
            queryBuildRange.value(queryValue(_wmsOrderId));
        }

        //qty not in shipment and status new means that order is not being processed
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(WMSOrder, Status));
        queryBuildRange.value(queryValue(WMSOrderStatus::New));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(WMSOrder, Type));
        queryBuildRange.value(queryValue(WMSOrderType::OrderPick));
        queryBuildRange.status(RangeStatus::Locked);

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(WMSOrder, QtyNoShipment));
        queryBuildRange.value(SysQuery::valueNot(0));
        queryBuildRange.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        WMSPickingRoute         wmsPickingRoute;
        MapEnumerator           me;
        SysInfoAction_Formrun   sysInfoAction_Formrun;
        Map                     mapPickingRoutes;
        container               conPickingRoutes;

        //move work to the server
        conPickingRoutes = WMSCreateOrderPickData::runServer(queryRun.pack());

        mapPickingRoutes = Map::create(conPickingRoutes);

        if (!conPickingRoutes)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!mapPickingRoutes)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        me = mapPickingRoutes.getEnumerator();

        if (!this.isInBatch())
        {
            while (me.moveNext())
            {
                wmsPickingRoute = me.currentValue();
                sysInfoAction_Formrun = SysInfoAction_Formrun::newFormname(formStr(WMSPickingRegistration));
                sysInfoAction_Formrun.parmCallerBuffer(wmsPickingRoute);
                sysInfoAction_Formrun.parmDescription("@SYS55228");
                info(strFmt("@SYS104169", wmsPickingRoute.PickingRouteID,wmsPickingRoute.TransRefId,wmsPickingRoute.TransType),
                     '', sysInfoAction_Formrun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version     = RunBase::getVersion(packedClass);
        container   queryPacked;

        switch (version)
        {
            case #CurrentVersion:
                [version,queryPacked] = packedClass;
                if (SysQuery::isPackedOk(queryPacked))
                    queryRun = new QueryRun(queryPacked);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSCreateOrderPickData construct()
    {
        return new WMSCreateOrderPickData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS104164";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        WMSCreateOrderPickData  wmsCreateOrderPickData;
        WMSOrder                wmsOrder;

        if (args && args.dataset())
        {
            switch (args.record().TableId)
            {
                case (tableNum(WMSOrder)) :
                    wmsOrder = args.record();
                    if (!wmsOrder.OrderId)
                    {
                        return;
                    }

                    wmsCreateOrderPickData =  WMSCreateOrderPickData::newFromWMSOrder(wmsOrder.OrderId);
                    if (wmsCreateOrderPickData.prompt())
                    {
                        wmsCreateOrderPickData.runOperation();

                        wmsOrder = args.record();
                        if (FormDataUtil::isFormDataSource(wmsOrder))
                        {
                            FormDataUtil::getFormDataSource(wmsOrder).reread();
                            FormDataUtil::getFormDataSource(wmsOrder).refresh();
                        }
                    }

                    break;

                default:
                    throw error(strFmt("@SYS19306",funcName()));
            }
        }
        else
        {
            wmsCreateOrderPickData =  WMSCreateOrderPickData::newFromWMSOrder();
            if (wmsCreateOrderPickData.prompt())
            {
                wmsCreateOrderPickData.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>WMSCreateOrderPickData</c> class.
    /// </summary>
    /// <param name="_wmsOrderId">
    ///    A <c>WMSOrderId</c> value; optional.
    /// </param>
    /// <returns>
    ///    The new server bound instance of the <c>WMSCreateOrderPickData</c> class.
    /// </returns>
    public static WMSCreateOrderPickData newFromWMSOrder(WMSOrderId _wmsOrderId='')
    {
        WMSCreateOrderPickData wmsCreateOrderPickData;

        wmsCreateOrderPickData = WMSCreateOrderPickData::construct();
        wmsCreateOrderPickData.getLast();

        if (_wmsOrderId)
        {
            wmsCreateOrderPickData.buildQueryRun(_wmsOrderId);
        }

        return wmsCreateOrderPickData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    /*
        Used to force run logic to the server
        Returned container holds a map with pickingroutes that client can use to write to infolog
    */
    protected static container runServer(container _packedQueryRun)
    {
        #OCCRetryCount
        WMSOrder                wmsOrder;
        WMSShipment             wmsShipment;
        WMSPickingRoute         wmsPickingRoute;
        WMSPickingRouteLink     wmsPickingRouteLink;
        WMSPickRequestTable     wmsPickRequestTable;
        MapEnumerator           me;
        QueryRun                queryRun;

        Map mapShipment;
        Map mapRouteStatusPerOrderType;
        Map mapPickingRoutes;
        Map mapPickingRouteLink;

        if (!SysQuery::isPackedOk(_packedQueryRun))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        queryRun = new QueryRun(_packedQueryRun);

        try
        {
            mapShipment                 = new Map(Types::String,Types::Record); //Key wmsOrder.inventTransRefId, Value Shipment
            mapRouteStatusPerOrderType  = new Map(Types::Enum,Types::Enum);     //Key wmsOrder.inventTransType, Value WMSPickingRouteStatusOnUpdate
            mapPickingRoutes            = new Map(Types::String,Types::Record); //Key wmsOrder.inventTransRefId, Value WMSPickingRoute - used optimize to inform user of which routes where created
            mapPickingRouteLink         = new Map(Types::String,Types::Record); //Key wmsShipmentId, Value: WMSPickingRouteLink

            ttsbegin;

            //loop all wms orders and create one shipment and route per transrefId
            while (queryRun.next())
            {
                wmsOrder = queryRun.get(tableNum(WMSOrder));

                if (wmsOrder.Type != WMSOrderType::OrderPick)
                {
                    throw error("@SYS104168");
                }

                if (wmsOrder.isBeingProcessed())
                {
                    throw error("@SYS104217");
                }

                if (mapShipment.exists(wmsOrder.InventTransRefId) && mapPickingRoutes.exists(wmsOrder.InventTransRefId))
                {
                    wmsShipment     = mapShipment.lookup(wmsOrder.InventTransRefId);
                    wmsPickingRoute = mapPickingRoutes.lookup(wmsOrder.InventTransRefId);
                }
                else
                {
                    //create shipment
                    wmsShipment.clear();
                    wmsShipment.initTypeOrderPick();
                    wmsShipment.insert();
                    mapShipment.insert(wmsOrder.InventTransRefId,wmsShipment);

                    wmsPickRequestTable = WMSPickRequestTable::newFromWMSOrder(wmsOrder);
                    //store status for update
                    if (!mapRouteStatusPerOrderType.exists(wmsPickRequestTable.inventTranstype()))
                    {
                        mapRouteStatusPerOrderType.insert(wmsPickRequestTable.inventTranstype(),wmsPickRequestTable.pickRouteStatusOnUpdate());
                    }
                    //create picking route
                    wmsPickingRoute.clear();
                    wmsPickingRoute.initTypeOrderPick(wmsShipment,
                                                      WMSExpeditionStatus::Registered,
                                                      wmsPickRequestTable);
                    wmsPickingRoute.insert();
                    mapPickingRoutes.insert(wmsOrder.InventTransRefId,wmsPickingRoute);

                    if (wmsPickRequestTable.mustCreateLinkTable())
                    {
                        if (!mapPickingRouteLink.exists(wmsPickingRoute.PickingRouteID))
                        {
                            wmsPickingRouteLink.clear();
                            wmsPickingRouteLink.initFromWMSPickRequestTable(wmsPickRequestTable);
                            mapPickingRouteLink.insert(wmsPickingRoute.PickingRouteID,wmsPickingRouteLink);
                        }
                    }
                }

                wmsOrder.updateShipment(wmsShipment,
                                        wmsOrder.QtyNoShipment,
                                        wmsPickingRoute.PickingRouteID,
                                        true,
                                        wmsOrder.PdsCWQtyNoShipment);
            }

            me = mapPickingRoutes.getEnumerator();

            while (me.moveNext())
            {
                wmsPickingRoute = me.currentValue();
                wmsPickingRoute.updateRoute(mapRouteStatusPerOrderType.lookup(wmsPickingRoute.TransType));

                //this must be done this late since activation date is set in above call
                if (mapPickingRouteLink.exists(wmsPickingRoute.PickingRouteID))
                {
                    wmsPickingRouteLink = mapPickingRouteLink.lookup(wmsPickingRoute.PickingRouteID);
                    wmsPickingRouteLink.initFromWMSPickingRoute(wmsPickingRoute);
                    wmsPickingRouteLink.insert();
                }
            }
            ttscommit;

            return mapPickingRoutes.pack();
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>