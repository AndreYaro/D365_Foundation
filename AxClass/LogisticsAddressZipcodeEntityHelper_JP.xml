<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsAddressZipcodeEntityHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper clss for LogisticsAddressZipcodeEntity_JP.
/// </summary>
public class LogisticsAddressZipcodeEntityHelper_JP
{
    private static Map cityCacheMap = new Map(Types::Container, Types::Int64);
    private static LogisticsAddressCountryRegionId countryRegionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findJapanLogisticsAddressCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find country region which has Japan ISO code.
    /// </summary>
    /// <returns>Japan country region ID</returns>
    public static LogisticsAddressCountryRegionId findJapanLogisticsAddressCountryRegionId()
    {
        if (!countryRegionId)
        {
            #ISOCountryRegionCodes
            if (!LogisticsAddressCountryRegion::existISOcode(#isoJP))
            {
                DirDataPopulation::insertLogisticAddressCountryRegions();
            }
            countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoJP).CountryRegionId;
        }
        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLogisticsAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find city with given city name. Create if no record is found.
    /// </summary>
    /// <param name = "_city">City name</param>
    /// <param name = "_state">State (perfecture in Japan) the city is in</param>
    /// <param name = "_country">Country the city is in</param>
    /// <param name = "_kanaCity">Kana name of the city</param>
    /// <returns>RecId of the city (found or created)</returns>
    public static RecId findOrCreateLogisticsAddressCity(LogisticsAddressCityName _city, LogisticsAddressStateId _state, LogisticsAddressCountryRegionId _country, AssetCityKana_JP _kanaCity)
    {
        container key = [_city, _state, _country];
        RecId cityRecId;

        if (cityCacheMap.exists(key))
        {
            cityRecId = cityCacheMap.lookup(key);
        }
        else
        {
            cityRecId = LogisticsAddressCity::findCity(_city, _country, "", _state).RecId;
            if (!cityRecId)
            {
                LogisticsAddressCity city;
                city.StateId = _state;
                city.CountryRegionId = _country;
                city.Name = _city;
                city.CityKana_JP = _kanaCity;
                city.defaultCityKey();
                city.insert();
                cityRecId = city.RecId;
            }
            cityCacheMap.insert(key, cityRecId);
        }
        return cityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLogisticsAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find state with given state name. Create if no record is found.
    /// </summary>
    /// <param name = "_state">Name of the state (perfecture in Japan)</param>
    /// <param name = "_country">country the state is in</param>
    /// <returns>RecId of the state (perfecture in Japan) (found or created)</returns>
    public static RecId findOrCreateLogisticsAddressState(LogisticsAddressStateId _state, LogisticsAddressCountryRegionId _country)
    {
        RecId stateRecId = LogisticsAddressState::find(_country, _state).RecId;
        if (!stateRecId)
        {
            LogisticsAddressState state;
            state.CountryRegionId = _country;
            state.StateId = _state;
            state.insert();
            stateRecId = state.RecId;
        }
        return stateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLogisticsAddressStateAndCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find state and city with given state and city names. Create if no record is found.
    /// </summary>
    /// <param name = "_city">City name</param>
    /// <param name = "_state">Name of the state (perfecture in Japan)</param>
    /// <param name = "_country">country the state is in</param>
    /// <param name = "_kanaCity">Kana name of the city</param>
    /// <returns></returns>
    public static container findOrCreateLogisticsAddressStateAndCity(LogisticsAddressCityName _city, LogisticsAddressStateId _state, LogisticsAddressCountryRegionId _country, AssetCityKana_JP _kanaCity)
    {
        RecId stateRecId;
        RecId cityRecId;

        if (_state)
        {
            stateRecId = LogisticsAddressZipcodeEntityHelper_JP::findOrCreateLogisticsAddressState(_state, _country);
        }
        if (_city)
        {
            cityRecId = LogisticsAddressZipcodeEntityHelper_JP::findOrCreateLogisticsAddressCity(_city,_state, _country, _kanaCity);
        }
        return [stateRecId, cityRecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>