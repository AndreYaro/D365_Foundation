<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostIndirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostIndirect</c> class creates an indirect cost based on a cost amount or cost
///    breakdown.
/// </summary>
abstract class InventCostIndirect
{
    // Global variables
    InventCostJournalIndirectCost   journalIndirectCost;
    CurrencyCode                    currencyCode;

    // Caller parameters
    Voucher                         voucher;
    TransDate                       transDate;
    LedgerVoucher                   ledgerVoucher;

    // Caller parameters per calculation request
    InventCostIndirectData          indirectData;       // Caller data

    // Variables per calculation request
    CostCalcTransData               costCalcTransData;  // Data Object for the indirect cost input

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the indirect cost for the specified breakdown.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID for the breakdown.
    /// </param>
    /// <param name="_inventItemCostGroupRollupList">
    ///    The cost breakdown that belongs to the cost amount.
    /// </param>
    /// <remarks>
    ///    When no cost breakdown exists, the total cost will be used.
    /// </remarks>
    protected void addInventConsumption(
        ItemId                          _itemId,
        InventItemCostGroupRollupList   _inventItemCostGroupRollupList
        )
    {
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        UnitOfMeasureSymbol         unitID = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

        boolean found = _inventItemCostGroupRollupList.first(inventItemCostGroupRollup);

        while (found)
        {
            InventItemPrice itemPrice = InventItemPrice::findRecId(inventItemCostGroupRollup.InventItemPriceRefRecId);
            // Now calculate the indirect cost for this portion
            costCalcTransData.addCalcTrans(inventItemCostGroupRollup.CostGroupId,
                                  unitID,
                                  ItemCalcType::Item,
                                  _itemId,
                                  inventItemCostGroupRollup.CostAmountStd,
                                  0,
                                  _inventItemCostGroupRollupList.parmQty(),
                                  0,
                                  indirectData.parmLevel() + inventItemCostGroupRollup.CostLevel,
                                  itemPrice.InventDimId);

            found = _inventItemCostGroupRollupList.next(inventItemCostGroupRollup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToJournalIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates indirect costs, writes the result to the <c>ProdIndirectTrans</c> table, and adds
    ///    entries to the ledger voucher for further posting.
    /// </summary>
    /// <remarks>
    ///    Delegates to the <c>InventCostJournalIndirectCost.addTrans</c> member object.
    /// </remarks>
    protected void addToJournalIndirectCost()
    {
        journalIndirectCost.addTrans(costCalcTransData,
                                     indirectData.parmInventTransId(),
                                     indirectData.parmTransRefId(),
                                     indirectData.parmTransRefType(),
                                     ledgerVoucher,
                                     voucher,
                                     transDate,
                                     indirectData.parmPhysical(),
                                     indirectData.parmDefaultDimension(),
                                     indirectData.parmPostLedger()
                                     // <GEERU>
                                     , indirectData.parmStornoPhysical()
                                     // </GEERU>
                                     );
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the indirect cost for an inventory cost.
    /// </summary>
    /// <param name="_indirectData">
    ///    The inventory transactions for which the indirect cost should be calculated.
    /// </param>
    public void calcInvent(InventCostIndirectData _indirectData)
    {
        this.init(_indirectData);

        if (_indirectData.parmItemCostGroupRollupListMap())
        {
            MapEnumerator mapEnum = _indirectData.parmItemCostGroupRollupListMap().getEnumerator();

            while (mapEnum.moveNext())
            {
                // Now add the consumption to the costTransData object
                this.addInventConsumption(mapEnum.currentKey(), mapEnum.currentValue());
            }
        }

        this.addToJournalIndirectCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the indirect transaction records to the database.
    /// </summary>
    /// <param name="_createJournal">
    ///    A Boolean value that indicates whether to write to the <c>ProdTableJour</c> table.
    /// </param>
    /// <remarks>
    ///    This method triggers the <c>run</c> method of the <c>ProdJournalIndirectCost</c> class.
    /// </remarks>
    public void finalizeCalc(boolean _createJournal = true)
    {
        // Insert the indirect cost records
        journalIndirectCost.run(_createJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostGroup2AmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a map with indirect cost per cost group amounts that correspond to the inventory
    ///    transaction, voucher, and date.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The ID of the inventory transaction.
    /// </param>
    /// <returns>
    ///    A map that has the indirect cost amount per cost group.
    /// </returns>
    /// <remarks>
    ///    Delegates to the <c>InventCostJournalIndirectCost</c> member object for the actual retrieval of the
    ///    map.
    /// </remarks>
    public Map getIndirectCostGroup2AmountMap(InventTransId _inventTransId)
    {
        return journalIndirectCost.getIndirectCostGroup2AmountMap(_inventTransId, voucher, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total indirect cost amount from the <c>InventCostJournalIndirectCost</c> class.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The <c>InventTransId</c> value for which the indirect cost should be retrieved.
    /// </param>
    /// <returns>
    ///    The total indirect cost amount.
    /// </returns>
    public AmountMST getIndirectCostTotal(InventTransId _inventTransId)
    {
        return journalIndirectCost.getIndirectCostTotal(_inventTransId, voucher, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CostCalcTransData</c> class that will later be passed to a
    ///    costing sheet for calculation.
    /// </summary>
    /// <param name="_indirectData">
    ///    The inventory transactions for which the indirect cost should be calculated.
    /// </param>
    abstract protected void init(InventCostIndirectData  _indirectData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class instance with a ledger voucher information.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    protected void initFromLedgerVoucher(LedgerVoucher _ledgerVoucher)
    {
        this.parmLedgerVoucher(_ledgerVoucher);
        this.parmVoucher(_ledgerVoucher.lastVoucher());
        this.parmTransDate(_ledgerVoucher.lastTransDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        currencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventCostJournalIndirectCost</Name>
				<Source><![CDATA[
    public InventCostJournalIndirectCost getInventCostJournalIndirectCost()
    {
        return journalIndirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventMovLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventCostIndirect</c> class for the specified instances of
    ///    the <c>InventoryMovement</c> and <c>LedgerVoucher</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    An instance of the <c>InventMovement</c> class for which this class should be initialized.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    An instance of the <c>LedgerVoucher</c> class for which this class should be initialized.
    /// </param>
    /// <returns>
    ///    An initialized instance of this class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Not all parameters were specified.
    /// </exception>

    public static InventCostIndirect newInventMovLedgerVoucher(
        InventMovement  _inventMovement,
        LedgerVoucher   _ledgerVoucher)
    {
        InventCostIndirect  inventCostIndirect;

        // A ledgerVoucher needs to be passed
        if (_inventMovement == null || _ledgerVoucher == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventCostIndirect = InventCostIndirect::newInventMovLedgerVoucherHelper(_inventMovement, _ledgerVoucher);

        if (inventCostIndirect == null)
        {
            throw error("@SYS91571");
        }

        return inventCostIndirect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventMovLedgerVoucherHelper</Name>
				<Source><![CDATA[
    protected static InventCostIndirect newInventMovLedgerVoucherHelper(
        InventMovement  _inventMovement,
        LedgerVoucher   _ledgerVoucher)
    {
        InventCostIndirect  inventCostIndirect;

        if (_inventMovement is InventMov_Purch
            || _inventMovement is InventMov_PurchCreditNote)
        {
            if (_inventMovement.mustBeBookedCharge())
            {
                inventCostIndirect = InventCostPurchIndirect::newParameters(
                        _inventMovement.accountStockVariation(),
                        _inventMovement.postingStockVariation(),
                        _ledgerVoucher);
            }
            else
            {
                inventCostIndirect = InventCostPurchIndirect::newParameters(
                        _inventMovement.offsetAccountPhysical(),
                        _inventMovement.postingOffsetPhysical(),
                        _ledgerVoucher);
            }
        }

        return inventCostIndirect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>