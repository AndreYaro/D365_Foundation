<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GTECalculationAndPostingConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GTECalculationAndPostingConsistencyCheck</c> class is identifying and correcting records that calcluate and posting data incorrectly.
/// </summary>
public class GTECalculationAndPostingConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.repostTaxDocumentForLedgerJournalTrans();

            this.updateNotCorrected();

            this.dataConsistencyForTransitDocumentTransactionRule_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>repostTaxDocumentForLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void repostTaxDocumentForLedgerJournalTrans()
    {
        TaxTrans                            taxTrans;
        TaxTrans_IN                         taxTransIN;
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;
        TaxDocumentTransitDocument          taxDocumentTransitDocument;
        TaxDocument                         taxDocument;
        TaxDocumentExtension_IN             taxDocumentExtension;
        System.Exception                    generalException;
        Counter                             totalNumOfUpdatedRecords;
        Set                                 journalSet = new Set(Types::String);

        // Issue: tax document status is in draft status when related LedgerjournalTrans and TaxTrans are posted.         
        // Solution: Repost tax document related to this issue pattern.
        while select ledgerJournalTrans
            join RecId from taxEngineLedgerJournalTransHeader 
                where ledgerJournalTrans.JournalNum == taxEngineLedgerJournalTransHeader.JournalNum
                    && ledgerJournalTrans.Voucher == taxEngineLedgerJournalTransHeader.Voucher
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.Posted == NoYes::Yes
                join RecId from taxDocument
                    where taxDocument.OriginSourceRecId == taxEngineLedgerJournalTransHeader.RecId
                        && taxDocument.OriginSourceTableId == tableNum(TaxEngineLedgerJournalTransHeader)
                        && taxDocument.Status == TaxDocumentStatus::Draft
                    join RecId from taxDocumentTransitDocument
                        where taxDocumentTransitDocument.TaxDocument == taxDocument.TaxDocumentGuid
                    exists join taxTrans
                        where taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                            && taxTrans.SourceRecId == ledgerJournalTrans.RecId
                        exists join taxTransIN
                            where taxTransIN.RefRecId == taxTrans.RecId
                                && taxTransIN.TaxType == TaxType_IN::GST
        {
            totalNumOfUpdatedRecords++;

            if (this.checkFix() == CheckFix::Fix)
            {
                try
                {
                    ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(ledgerJournalTrans));
                    LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::System, "");
                                                    
                    ledgerVoucher.lastVoucher(ledgerJournalTrans.Voucher);
                    ledgerVoucher.lastTransDate(ledgerJournalTrans.TransDate);
                    TaxBusinessService::postTaxDocument(taxableDocument, ledgerVoucher);
                }
                catch (generalException)
                {
                    error(strfmt("@ApplicationSuiteTaxEngineIntegration:CalculationAndPostingExceptionMessage", ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, generalException.Message + generalException.StackTrace));
                }

            }

            if (!journalSet.in(ledgerJournalTrans.JournalNum))
            {
                warning(strFmt("@ApplicationSuiteTaxEngineIntegration:IssueJournalNumber", ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher));
            }
            journalSet.add(ledgerJournalTrans.JournalNum);
        }
        
        if (this.checkFix() == CheckFix::Fix)
        {
            this.updateCorrected(totalNumOfUpdatedRecords);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataConsistencyForTransitDocumentTransactionRule_IN</Name>
				<Source><![CDATA[
    private void dataConsistencyForTransitDocumentTransactionRule_IN()
    {
        RecordInsertList transactionRuleRecordList;
        Counter          totalNumOfRepairedRecords;
        transactionRuleRecordList = new RecordInsertList(tableNum(TransitDocumentTransactionRule_IN));

        List ruleList = TransitDocumentTransactionRuleHelper_IN::getTransitDocumentTransRuleList();

        ListEnumerator enumerator = ruleList.getEnumerator();
        while (enumerator.moveNext())
        {
            TransitDocumentTransactionRuleObject_IN ruleObject = enumerator.current();
            TransitDocumentType_IN transitDocumentType_IN;
            TransitDocumentTransactionRule_IN transitDocumentTransactionRule_IN;

            TransitDocumentTransactionRule_IN existingRule = TransitDocumentTransactionRule_IN::findRule(ruleObject.transactionType(), ruleObject.transitDocumentType().RecId);

            if (!existingRule)
            {
                select firstonly RefTableId from transitDocumentType_IN
                    where transitDocumentType_IN.RecId == ruleObject.transitDocumentType().RecId;

                warning(strFmt("@ApplicationSuiteTaxEngineIntegration:RuleMissingLog",
                    tableId2Name(ruleObject.transactionType()),
                    tableId2Name(transitDocumentType_IN.RefTableId),
                    tableStr(TransitDocumentTransactionRule_IN)));

                totalNumOfRepairedRecords++;
            }
        }

        if (totalNumOfRepairedRecords > 0 && this.checkFix() == CheckFix::Fix)
        {
            TransitDocumentTransactionRuleHelper_IN::initRule();
            this.updateCorrected(totalNumOfRepairedRecords);
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(GTEConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@ApplicationSuiteTaxEngineIntegration:CalculationAndPosting";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@ApplicationSuiteTaxEngineIntegration:CalculationAndPosting";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>