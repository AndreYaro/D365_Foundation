<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReverseTax_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReverseTax_RU extends TaxReverseTax
{
    Voucher             paymentVoucher;
    TransDate           paymentDate;
    CustVendTrans       custVendTrans;
    Map                 taxCodesMapIn;
    Map                 taxCodesMapOut;
    Set                 taxTransRecIDs;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPostAndInsertTaxes</Name>
				<Source><![CDATA[
    public container calcPostAndInsertTaxes(LedgerPostingController _ledgerPostingController)
    {
        TaxTrans                taxTrans;
        TaxTrans                taxTransReverse;
        TaxAmountCur            taxAmountCur, totalTaxAmountCur;
        TaxAmount               totalTaxAmountMST;
        TaxAmountCur            taxInCostPrice;
        TaxTransLedgerDimensionView_RU taxTransLedgerDimension;
        TaxTransLedgerDimensionView_RU taxTransUseTaxLedgerDimension;
        TaxTransLedgerDimensionView_RU taxTransTransactionLineAccountLedgerDimension;
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
        CurrencyCode            reportingCurrencyCode = Ledger::reportingCurrency(this.companyInfo().RecId);

        ttsbegin;

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        while select
                  sum (TaxAmount),
                  sum (TaxAmountCur),
                  sum (TaxAmountRep),
                  sum (SourceTaxAmountCur),
                  sum (TaxBaseAmount),
                  sum (TaxBaseAmountCur),
                  sum (TaxBaseAmountRep),
                  sum (SourceBaseAmountCur),
                  sum (SourceRegulateAmountCur),
                  sum (TaxBaseQty),
                  sum (TaxInCostPrice),
                  sum (TaxInCostPriceRep)
              from taxTrans
              group by TaxCode, TaxDirection, CurrencyCode,
                      TransDate,
                      SourceCurrencyCode, TaxAutogenerated, euroTriangulation, TaxGroup, TaxItemGroup
              where taxTrans.Voucher   == paymentVoucher &&
                    taxTrans.TransDate == paymentDate    &&
                    taxTrans.ExemptTax == NoYes::No

            outer join taxTransLedgerDimension group by LedgerDimension
                where taxTransLedgerDimension.TaxTrans == taxTrans.RecId &&
                      taxTransLedgerDimension.TaxTransRelationship == TaxTransRelationshipType::Tax

            outer join taxTransUseTaxLedgerDimension group by LedgerDimension
                where taxTransUseTaxLedgerDimension.TaxTrans == taxTrans.RecId &&
                      taxTransUseTaxLedgerDimension.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable

            outer join taxTransTransactionLineAccountLedgerDimension group by LedgerDimension
                where taxTransTransactionLineAccountLedgerDimension.TaxTrans == taxTrans.RecId &&
                      taxTransTransactionLineAccountLedgerDimension.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
        {
            if ( ! taxCodesMapIn.exists(taxTrans.TaxCode))
            {
                continue;
            }
            else if ( taxTrans.TaxOrigin != taxCodesMapIn.lookup(taxTrans.TaxCode))
            {
                continue;
            }

            triangulation = taxTrans.euroTriangulation;
            if (TaxTable::find(taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit && taxTrans.TaxAmount)
            {
                taxTransReverse.clear();
                taxTransReverse.TaxCode                  = taxTrans.TaxCode;
                taxTransReverse.TaxGroup                 = taxTrans.TaxGroup;
                taxTransReverse.TaxItemGroup             = taxTrans.TaxItemGroup;
                taxTransReverse.Source                   = TaxModuleType::Voucher;
                taxTransReverse.Voucher                  = voucher;
                taxTransReverse.TransDate                = taxDate;
                taxTransReverse.TaxDirection             = taxTrans.TaxDirection;
                taxTransReverse.CurrencyCode             = taxTrans.CurrencyCode;
                taxTransReverse.SourceCurrencyCode       = sourceCurrencyCode;
                taxTransReverse.TaxAutogenerated         = taxTrans.TaxAutogenerated;
                taxTransReverse.euroTriangulation        = taxTrans.euroTriangulation;
                taxTransReverse.HeadingTableId           = taxTrans.HeadingTableId;
                taxTransReverse.TaxAmount                = CurrencyExchangeHelper::amount(taxTrans.TaxAmount * percent * -1 / 100);
                taxTransReverse.TaxBaseAmount            = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * percent * -1 / 100);
                taxTransReverse.TaxInCostPrice           = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * percent * -1 / 100);

                if (taxTrans.CurrencyCode && taxTrans.CurrencyCode != Ledger::accountingCurrency(this.companyInfo().RecId))
                {
                    taxTransReverse.TaxBaseAmountCur         = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * percent * -1 / 100, taxTrans.CurrencyCode);
                    taxTransReverse.TaxAmountCur             = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * percent * -1 / 100, taxTrans.CurrencyCode);
                }
                else
                {
                    taxTransReverse.TaxBaseAmountCur     = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * percent * -1 / 100);
                    taxTransReverse.TaxAmountCur         = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * percent * -1 / 100);
                }

                taxTransReverse.TaxBaseAmountRep         = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountRep * percent * -1 / 100, reportingCurrencyCode);
                taxTransReverse.TaxAmountRep             = CurrencyExchangeHelper::amount(taxTrans.TaxAmountRep * percent * -1 / 100, reportingCurrencyCode);

                if (taxTrans.SourceCurrencyCode == sourceCurrencyCode)
                {
                    taxTransReverse.SourceTaxAmountCur      = CurrencyExchangeHelper::amount(taxTrans.SourceTaxAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                    taxTransReverse.SourceBaseAmountCur     = taxTrans.SourceBaseAmountCur * percent * -1 / 100;
                    taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(taxTrans.SourceRegulateAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                }
                else
                {
                    taxTransReverse.SourceTaxAmountCur       = CurrencyExchangeHelper::curAmount(taxTrans.TaxAmount * percent * -1 / 100, sourceCurrencyCode, taxDate);
                    taxTransReverse.SourceBaseAmountCur     = CurrencyExchangeHelper::curAmount(taxTrans.TaxBaseAmount * percent * -1 / 100, sourceCurrencyCode, taxDate);
                    taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(taxTrans.SourceRegulateAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode, taxTrans.TransDate, Currency::noYes2UnknownNoYes(taxTrans.euroTriangulation)), taxTrans.SourceCurrencyCode);
                }

                taxTransReverse.ExemptTax        = NoYes::No;
                taxTransReverse.TaxAutogenerated = NoYes::Yes;

                if (taxCodesMapOut.exists(taxTrans.TaxCode))
                {
                   taxTransReverse.TaxOrigin     = taxCodesMapOut.lookup(taxTrans.TaxCode);
                }
                else
                {
                    taxTransReverse.TaxOrigin    = TaxOrigin::TaxReversed;
                }

                taxTransReverse.insert();

                if (taxTrans.TaxAutogenerated)
                {
                    taxAmountCur           = taxTransReverse.SourceTaxAmountCur;
                    taxInCostPrice         = taxTransReverse.TaxInCostPrice;
                }
                else
                {
                    taxAmountCur           = taxTransReverse.SourceRegulateAmountCur;
                    taxInCostPrice         = taxTransReverse.TaxInCostPriceRegulated;
                }

                totalTaxAmountCur += taxAmountCur;
                totalTaxAmountMST += taxTransReverse.TaxAmount;

               exchangeRateHelper.parmExchangeRate1(abs(taxTransReverse.TaxAmount / taxAmountCur * 100));
               exchangeRateHelper.parmExchangeDate(taxTrans.TransDate);

               this.post(_ledgerPostingController,
                         taxTransReverse,
                         taxAmountCur,
                         taxInCostPrice,
                         exchangeRateHelper,
                         taxTransLedgerDimension.LedgerDimension,
                         taxTransTransactionLineAccountLedgerDimension.LedgerDimension,
                         taxTransUseTaxLedgerDimension.LedgerDimension
                         );
            }
        }
        ttscommit;

        return [totalTaxAmountCur, totalTaxAmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxParameters</Name>
				<Source><![CDATA[
    public void initTaxParameters(Map                  _taxCodesMapIn,     // MAP taxCodesIn  : TaxCode -> incomingTaxOrign
                                  Map                  _taxCodesMapOut,    // MAP taxCodesOut : TaxCode -> outgoingTaxOrign
                                  Percent              _percent,
                                  CurrencyCode         _reverseCurrencyCode,
                                  CustVendTrans        _custVendTrans)
    {
        taxCodesMapIn       = _taxCodesMapIn;
        taxCodesMapOut      = _taxCodesMapOut;
        paymentDate         = _custVendTrans.TransDate;
        paymentVoucher      = _custVendTrans.Voucher;
        percent             = _percent;
        sourceCurrencyCode  = _reverseCurrencyCode;
        taxDate             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        //transTxt            = ledgerVoucher.findLedgerVoucherObject().lastTransTxt();
        custVendTrans       = _custVendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>