<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustTransListDP</c> class declares the variables and tables that are required for the
/// <c>CustTransList</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustTransList)),
    SRSReportParameterAttribute(classStr(CustTransListContract))
]
public class CustTransListDP extends SrsReportDataProviderPreProcessTempDB
{
    CustTrans custTrans;
    CustTable custTable;
    CustTransListTmp custTransListTmp;
    NoYes remainAmount;

    BillingClassification billingClassification;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the accounting currency balance value.
    /// </summary>
    /// <param name="_exchangeAdjustmentType">
    /// The exchange adjustment type.
    /// </param>
    /// <returns>
    ///    The accounting currency balance value.
    /// </returns>
    private AmountMST balanceMST(ExchAdjustment _exchangeAdjustmentType)
    {
        AmountMST resultAmount;

        if (_exchangeAdjustmentType == ExchAdjustment::AdjustmentDate)
        {
            resultAmount = custTrans.amountExchAdj() - (remainAmount ? custTrans.SettleAmountMST : 0);
        }
        else
        {
            resultAmount = custTrans.AmountMST - (remainAmount ? custTrans.SettleAmountMST : 0);
        }

        return resultAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reporting currency balance value.    
    /// </summary>
    /// <param name="_exchangeAdjustmentType">
    /// The exchange adjustment type.
    /// </param>
    /// <returns>
    ///    The reporting currency balance value.
    /// </returns>
    private AmountMSTSecondary balanceReportingCurrency(ExchAdjustment _exchangeAdjustmentType)
    {
        AmountMSTSecondary resultAmount;

        if (_exchangeAdjustmentType == ExchAdjustment::AdjustmentDate)
        {
            resultAmount = custTrans.amountExchAdjReportingCurrency() - (remainAmount ? custTrans.SettleAmountReporting : 0);
        }
        else
        {
            resultAmount = custTrans.ReportingCurrencyAmount - (remainAmount ? custTrans.SettleAmountReporting : 0);
        }

        return resultAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransListtmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the <c>CustTransListTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustTransListTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustTransListTmp))
    ]
    public CustTransListTmp getCustTransListtmp()
    {
        select custTransListTmp;

        return custTransListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting and transaction currency credit and debit balance.
    /// </summary>
    /// <param name="_exchangeAdjustmentType">
    /// The exchange adjustment type.
    /// </param>
    /// <param name="_custTransListTmp">
    /// A CustTransListTmp table buffer.
    /// </param>
    private void initBalance(ExchAdjustment _exchangeAdjustmentType, CustTransListTmp _custTransListTmp)
    {
        AmountMST amountMst = this.balanceMST(_exchangeAdjustmentType);
        AmountCur amountCur = custTrans.AmountCur - (remainAmount ? custTrans.SettleAmountCur : 0);
        AmountMSTSecondary amountReporting = this.balanceReportingCurrency(_exchangeAdjustmentType);

        _custTransListTmp.DebitBalanceMST = 0;
        _custTransListTmp.CreditBalanceMST = 0;
        _custTransListTmp.DebitBalanceCur = 0;
        _custTransListTmp.CreditBalanceCur = 0;
        _custTransListTmp.DebitBalanceReporting = 0;
        _custTransListTmp.CreditBalanceReporting = 0;

        if (amountMst < 0 || amountCur < 0)
        {
            // Credit
            if (custTrans.Correct)
            {
                _custTransListTmp.DebitBalanceMST = amountMst;
                _custTransListTmp.DebitBalanceCur = amountCur;
                _custTransListTmp.DebitBalanceReporting = amountReporting;
            }
            else
            {
                _custTransListTmp.CreditBalanceMST = -amountMst;
                _custTransListTmp.CreditBalanceCur = -amountCur;
                _custTransListTmp.CreditBalanceReporting = -amountReporting;
            }
        }
        else if (amountMst > 0 || amountCur > 0)
        {
            // Debit
            if (custTrans.Correct)
            {
                _custTransListTmp.CreditBalanceMST = -amountMst;
                _custTransListTmp.CreditBalanceCur = -amountCur;
                _custTransListTmp.CreditBalanceReporting = -amountReporting;
            }
            else
            {
                _custTransListTmp.DebitBalanceMST = amountMst;
                _custTransListTmp.DebitBalanceCur = amountCur;
                _custTransListTmp.DebitBalanceReporting = amountReporting;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustTransListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the details of the <c>CustTransList</c> report into the temporary table.
    /// </summary>
    /// <param name = "_exchangeAdjustmentType">
    ///     The exchange adjustment type.
    /// </param>
    /// <param name = "_custTransListTmp">
    ///     A CustTransListTmp table buffer.
    /// </param>
    /// <param name = "_transactionReversalTransLocal">
    ///     Indicates whether a transaction is a reversal transaction.
    /// </param>
    protected void populateCustTransListTmp(ExchAdjustment _exchangeAdjustmentType, CustTransListTmp _custTransListTmp, TransactionReversalTrans _transactionReversalTransLocal)
    {
        this.initBalance(_exchangeAdjustmentType, _custTransListTmp);
        _custTransListTmp.TraceNum = _transactionReversalTransLocal.TraceNum;
        _custTransListTmp.Reversed = this.reversed(_transactionReversalTransLocal);
        _custTransListTmp.AccountNum = custTable.AccountNum;
        _custTransListTmp.Name = custTable.name();
        _custTransListTmp.Voucher = custTrans.Voucher;
        _custTransListTmp.TransDate = custTrans.TransDate;
        _custTransListTmp.Txt = custTrans.Txt;
        _custTransListTmp.CurrencyCode = custTrans.CurrencyCode;
        _custTransListTmp.BillingClassification = billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details of the <c>CustTransList</c> report into the temporary table.
    /// </summary>
    /// <param name="_exchangeAdjustmentType">
    ///     The exchange adjustment type.
    /// </param>
    /// <param name="_custTransListTmp">
    ///     A CustTransListTmp table buffer.
    /// </param>
    /// <param name="_tmpTableRecordList">
    ///     A RecordInsertList instance to which CustTransListTmp transactions are added.
    /// </param>
    /// <param name="_transactionReversalTransLocal">
    ///     Indicates whether a transaction is a reversal transaction.
    /// </param>
    private void insertCustTransListTmp(ExchAdjustment _exchangeAdjustmentType, CustTransListTmp _custTransListTmp, RecordInsertList _tmpTableRecordList, TransactionReversalTrans _transactionReversalTransLocal)
    {
        this.populateCustTransListTmp(_exchangeAdjustmentType, _custTransListTmp, _transactionReversalTransLocal);
        _tmpTableRecordList.add(_custTransListTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>CustTransList</c> report.
    /// </summary>
    public void processReport()
    {
        Common cursor;
        ExchAdjustment exchangeAdjustmentType;
        NoYes includeReversed;
        boolean transactionsExist;
        RecordInsertList tmpTableRecordList;
        TransactionReversalTrans transactionReversalTransLocal;

        boolean isPublicSectorScenario = false;
        List listBillingClassification;

        Query q = this.parmQuery();
        QueryRun qr = new QueryRun(q);
        CustTransListContract contract = this.parmDataContract() as CustTransListContract;

        if (contract.parmOnlyOpen())
        {
            remainAmount = NoYes::Yes;
        }
        if (contract.parmIncludeReversed())
        {
            includeReversed = NoYes::Yes;
        }

        exchangeAdjustmentType = contract.parmExchangeRates();

        listBillingClassification = contract.parmBillingClassification();
        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(listBillingClassification);

        if (isPublicSectorScenario)
        {
            CustBillingClassificationReportManager::setBillingClassificationRanges(qr.query().dataSourceTable(tableNum(CustTrans)), listBillingClassification, contract.parmInclTransWithNoBillingClass(), fieldNum(CustTrans, CustBillingClassification));
        }

        tmpTableRecordList = new RecordInsertList(tableNum(CustTransListTmp), true, true, true, false, true, custTransListTmp);

        while (qr.next())
        {
            custTrans = qr.get(tablenum(CustTrans));
            custTable = qr.get(tablenum(CustTable));

            if (isPublicSectorScenario)
            {
                billingClassification = CustBillingClassification::find(custTrans.CustBillingClassification).BillingClassification;
            }

            transactionReversalTransLocal = TransactionReversalTrans::findTransactionReversalTrans(tableNum(CustTrans), custTrans.RecId);

            // Checks whether transaction exists or not.
            transactionsExist = (custTrans.RecId && (includeReversed || (!includeReversed && !transactionReversalTransLocal.reversed)));

            // Verifies whether remaining amount exists or not and transaction type not equal to Exchange adjustment
            if ((cursor.TableId == custTable.TableId ||
                !(remainAmount &&
                (custTrans.CurrencyCode ? custTrans.AmountCur == custTrans.SettleAmountCur : custTrans.AmountMST == custTrans.SettleAmountMST))) &&
                (custTrans.TransType != LedgerTransType::ExchAdjustment ||
                (custTrans.TransType == LedgerTransType::ExchAdjustment && this.balanceMST(exchangeAdjustmentType) != 0)))
            {
                if (transactionsExist || includeReversed || (custTrans.RecId && !includeReversed && !transactionReversalTransLocal.reversed))
                {
                    this.insertCustTransListTmp(exchangeAdjustmentType, custTransListTmp, tmpTableRecordList, transactionReversalTransLocal);
                }
            }
        }
        tmpTableRecordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the transaction is reversal.
    /// </summary>
    /// <param name="_transactionReversalTransLocal">
    /// Indicates whether a transaction is a reversal transaction.
    /// </param>
    /// <returns>
    ///    true if the transaction is reversal; otherwise, false.
    /// </returns>
    private str reversed(TransactionReversalTrans _transactionReversalTransLocal)
    {
        return _transactionReversalTransLocal ? 'R' : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>