<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliverySlipTotals_Parm_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class intialized for calculating the totals for delivery slip taxes extends <c>DeliverySlipTotals_DeliverySlip_BR</c> class.
/// </summary>
class     DeliverySlipTotals_Parm_BR extends   DeliverySlipTotals_DeliverySlip_BR
{
    SalesParmTable  salesParmTable;
    SalesParmLine   salesParmLine;
    SalesLine       salesLine;

    ParmId          parmId;
    AccountOrder    sumBy;
    SalesId         sumSalesId;
    DocumentStatus  documentStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the weight of a category-based order line.
    /// </summary>
    /// <returns>
    /// The weight of the category-based order line.
    /// </returns>
    protected Weight categoryWeight()
    {
        return SalesLineForeignTradeCategory::findSalesLine(salesLine).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds proper <c>TradeCalcTax</c> object, which maps data related to document
    /// being processed to tax engine.
    /// </summary>
    /// <returns>
    /// Proper <c>TradeCalcTax</c> object.
    /// </returns>
    protected TradeCalcTax constructCalcTax()
    {
        FiscalDocument_BR fiscalDocument;
        CustPackingSlipJour custPackingSlipJour;

        select firstOnly fiscalDocument
            exists join custPackingSlipJour
            where fiscalDocument.RefTableId     == custPackingSlipJour.TableId
               && fiscalDocument.RefRecId       == custPackingSlipJour.RecId
               && custPackingSlipJour.ParmId    == parmId
               && custPackingSlipJour.SalesId   == salesParmTable.SalesId;

        if (fiscalDocument)
        {
            return new DeliverySlipCalcTax_Cancel_BR(fiscalDocument, salesParmTable);
        }

        return DeliverySlipCalcTax_BR::construct(salesParmTable, specQty, sumBy, parmId, sumSalesId, documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the discount percent for order line.
    /// </summary>
    /// <returns>
    /// The discount percent for order line
    /// </returns>
    protected  DiscPct  discPercent()
    {
        return salesParmLine.salesTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines Created date and time for the sales document.
    /// </summary>
    /// <returns>
    /// Returns Created date and time of the sales document.
    /// </returns>
    public DocumentDate documentDate()
    {
        return DateTimeUtil::date(salesTable.CreatedDateTime) ? DateTimeUtil::date(salesTable.CreatedDateTime) : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines document status for the sales document.
    /// </summary>
    /// <returns>
    /// Returns document status of the sales document.
    /// </returns>
    protected DocumentStatus documentStatus()
    {
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the sales line record based on TableRefId, OrigSalesId, LineNum and SalesLineRecId.
    /// </summary>
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesParmLine));

        recordSortedListLine.sortOrder(fieldNum(SalesParmLine, TableRefId),
                                       fieldNum(SalesParmLine, OrigSalesId),
                                       fieldNum(SalesParmLine, LineNum),
                                       fieldNum(SalesParmLine, SalesLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line amount for the sales document.
    /// </summary>
    /// <param name="_salesQty">
    /// SalesQty value is set.
    /// </param>
    /// <param name="_invoiceDate">
    /// InvoiceDate value is set.
    /// </param>
    /// <returns>
    /// Returns line amount of the sales document.
    /// </returns>
    LineAmount interCompanyLineAmount(SalesQty _salesQty, InvoiceDate _invoiceDate)
    {
        return salesLine.interCompanyLineAmount(_salesQty, _invoiceDate, tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>InventDimId</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>InventDimId</c> field of the current order line.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesParmLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>InventTransId</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>InventTransId</c> field of the current order line.
    /// </returns>
    protected TradeInventTransId inventTransId()
    {
        return salesParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>Transdate</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>Transdate</c> field of the current order line.
    /// </returns>
    protected TransDate invoiceDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the order line is category-based.
    /// </summary>
    /// <returns>
    /// true if the order line is category-based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        return salesLine.isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        return salesLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>ItemId</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>ItemId</c> field of the current order line.
    /// </returns>
    protected ItemId itemId()
    {
        return salesParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>LineAmount</c> field of the current order line.
    /// </summary>
    /// <param name="_salesQty">
    /// SalesQty value is set.
    /// </param>
    /// <param name="_transDate">
    /// TransDate value is set.
    /// </param>
    /// <returns>
    /// The value of the <c>LineAmount</c> field of the current order line.
    /// </returns>
    protected LineAmount lineAmount(SalesQty _salesQty, TransDate _transDate)
    {
        if (skipTaxCalculations)
        {
            return salesParmLine.effectiveLineAmount();
        }
        else
        {
            return salesParmLine.lineAmountExclTax(_transDate, tax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>CostPrice</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>CostPrice</c> field of the current order line.
    /// </returns>
    protected CostPrice lineCostPrice()
    {
        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>discAmount</c> field of the current order line.
    /// </summary>
    /// <param name="_unitQty">
    /// UnitQty value is set.
    /// </param>
    /// <param name="_transDate">
    /// TransDate value is set.
    /// </param>
    /// <returns>
    /// The value of the <c>discAmount</c> field of the current order line.
    /// </returns>
    protected DiscAmount lineDiscAmount(UnitQty _unitQty, TransDate _transDate)
    {
        DiscAmount  discAmount = 0;

        if (salesLine.SalesPrice)
            discAmount += salesParmLine.calcLineDiscExclTax(_unitQty, _transDate, tax);

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun value is set.
    /// </param>
    /// <returns>
    /// The current order line.
    /// </returns>
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        salesParmLine = super(_lineQueryRun);

        if (salesParmLine)
        {
            salesLine = salesParmLine.salesLine();
        }
        else
        {
            salesLine = null;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the instance of <c>DeliverySlipTotals_Parm_BR</c> object based on table id.
    /// </summary>
    /// <param name="_source">
    /// Common is set.
    /// </param>
    /// <param name="_specQty">
    /// SalesUpdate quantity is set.
    /// </param>
    /// <param name="_sumBy">
    /// AccountOrder value is set.
    /// </param>
    /// <param name="_parmId">
    /// ParmId is set.
    /// </param>
    /// <param name="_sumSalesId">
    /// SalesId is set.
    /// </param>
    /// <param name="_documentStatus">
    /// DocumentStatus value is set.
    /// </param>
    /// <remarks>
    /// The instance of <c>DeliverySlipTotals_Parm_BR</c> object
    /// </remarks>
    void new(Common         _source,
             SalesUpdate    _specQty,
             AccountOrder   _sumBy,
             ParmId         _parmId,
             SalesId        _sumSalesId,
             DocumentStatus _documentStatus)
    {
        sumBy               = _sumBy;
        parmId              = _parmId;
        sumSalesId          = _sumSalesId;
        documentStatus      = _documentStatus;

        switch (_source.TableId)
        {
            case tableNum(SalesTable):
                salesTable       = _source;
                salesParmTable   = SalesParmTable::findSalesId(salesTable.SalesId, parmId);
                break;

            case tableNum(SalesParmTable):
                salesParmTable   = _source;
                salesTable       = salesParmTable.salesTable();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(salesTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the current sales order line.
    /// </summary>
    /// <returns>
    /// The current sales order line.
    /// </returns>
    protected Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsParmTransContract</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SalesTotalsParmTransContract</c> class.
    /// </returns>
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsParmTransContract::newFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>InventNow</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>InventNow</c> field of the current order line.
    /// </returns>
    protected InventQty qtyInvent()
    {
        return salesParmLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in inventory units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in inventory units.
    /// </returns>
    protected InventQty qtyInventRemain()
    {
        // <GEERU>
        SalesQuantity   salesQuantity = SalesQuantity::construct(documentStatus);
        InventDimParm   inventDimParm;
        InventDim       inventDim;
        if (salesParmTable.InventOwnerId_RU)
        {
            inventDimParm.InventOwnerIdFlag_RU  = NoYes::Yes;
            inventDim.InventOwnerId_RU          = salesParmTable.InventOwnerId_RU;
            salesQuantity.parmInventDimCriteria_RU(inventDim);
            salesQuantity.parmInventDimParm_RU(inventDimParm);
        }
        return salesQuantity.qtyRemainInventPhysical(salesLine,salesParmLine);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>DeliverNow</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>DeliverNow</c> field of the current order line.
    /// </returns>
    protected UnitQty    qtyUnit()
    {
        return salesParmLine.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in order line units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in order line units.
    /// </returns>
    protected InventQty qtyUnitRemain()
    {
        return SalesQuantity::construct(documentStatus).qtyRemainSalesPhysical(salesLine,salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for current sales order.
    /// </summary>
    /// <returns>
    /// The query for current sales order.
    /// </returns>
    protected QueryRun queryBuildOrderTable()
    {
        return new QueryRun(salesParmTable.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for current sales order.
    /// </summary>
    /// <param name="_queryRun">
    /// QueryRun value is set.
    /// </param>
    /// <returns>
    /// The query for current sales order.
    /// </returns>
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesTable          querySalesTable;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitQtyInInventoryUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from order line units to inventory units.
    /// </summary>
    /// <param name="_unitQty">
    /// The order line quantity to convert.
    /// </param>
    /// <returns>
    /// The order line quantity in inventory units.
    /// </returns>
    protected InventQty unitQtyInInventoryUnits(UnitQty _unitQty)
    {
        Debug::assert(inventTable != null);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                     salesLine.InventDimId,
                                                                                     _unitQty,
                                                                                     salesLine.SalesUnit,
                                                                                     inventTable.inventUnitId(),
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a <c>FormRun</c> object of <c>TmpTaxWorkTrans</c> form.
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    /// A <c>DisplayMenuItem</c> buffer.
    /// </param>
    /// <param name="_salesParmTable">
    /// A <c>SalesParmTable</c> buffer.
    /// </param>
    /// <param name="_specQty">
    /// Quantity.
    /// </param>
    /// <returns>
    /// A <c>FormRun</c> object of <c>TmpTaxWorkTrans</c> form.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static FormRun showTax(str _menuItemDisplayStr, SalesParmTable _salesParmTable, SalesUpdate _specQty)
    {
        DeliverySlipTotals_BR deliverySlipTotals;

        deliverySlipTotals = DeliverySlipTotals_BR::construct(_salesParmTable, _specQty, AccountOrder::None, _salesParmTable.ParmId,
                                                        '',_salesParmTable.Ordering);
        deliverySlipTotals.calc();
        return Tax::showTaxes(_menuItemDisplayStr, deliverySlipTotals.tax(),_salesParmTable.salesTable());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>