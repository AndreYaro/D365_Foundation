<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResReservationAnalysis</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reservations analysis class.
/// </summary>
public class ResReservationAnalysis
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSchedulesForSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes booking and assignment reservations to determine if roll-up updates are necessary.
    /// </summary>
    /// <param name = "_start">Start date/time of records to synchronize.</param>
    /// <param name = "_end">End date/time of records to synchronize.</param>
    /// <returns>List of schedules to synchronize.</returns>
    public static List getSchedulesForSynchronization()
    {
        List schedules = new List(Types::Class);
        ResRollUpLastUpdatedView rollUps;
        ResReservationCreatedDatesView reservations;

        while select ActivityResourceId from rollUps
            group by rollUps.ActivityResourceId
            join minof(Start), maxof(End) from reservations
            where reservations.ActivityResourceId == rollUps.ActivityResourceId
            && reservations.Created > rollUps.LastUpdated
        {
            ResRollUpSynchronizationSchedule schedule = ResRollUpSynchronizationSchedule::construct();
            schedule.activityResourceId(rollUps.ActivityResourceId);
            schedule.start(reservations.Start);
            schedule.end(reservations.End);
            schedules.addEnd(schedule);
        }

        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedulesForSynchronizationInRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets roll-up records for updating within specified range.
    /// </summary>
    /// <param name = "_start">Start date/time of records to synchronize.</param>
    /// <param name = "_end">End date/time of records to synchronize.</param>
    /// <returns>List of schedules to synchronize.</returns>
    public static List getSchedulesForSynchronizationInRange(utcdatetime _start, utcdatetime _end)
    {
        List schedules = new List(Types::Class);
        ResRollUpSynchronizationSchedule schedule;

        ResRollUpSynchronizationSchedule rollUpSchedule = ResRollUpSynchronizationSchedule::construct();
        rollUpSchedule.start(_start);
        rollUpSchedule.end(_end);
        schedules.addEnd(rollUpSchedule);

        return schedules;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
