<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSearchRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendSearchRequest</c> class is an abstract base class for the vendor search class.The
/// purpose of vendor search class is to keep search attribute values and build search query using
/// non-empty attributes only.
/// </summary>
abstract class VendSearchRequest
{
    Query               query;
    DirPartyName        vendorName;

    // multi selectable values
    str                 vendorGroup;
    str                 addressCity;
    str                 addressState;
    str                 addressCountry;

    // NoYes values (if not ignored)
    VendIgnoreNoYes     femaleOwned;
    VendIgnoreNoYes     locallyOwned;
    VendIgnoreNoYes     smallBusiness;
    VendIgnoreNoYes     minorityOwned;

    str                 procurementCategory;
    boolean             includeAllLegalEntities;

    const str PairDelimiter = '=';
    const str ExpressionDelimiter = ';';
    static str ValueDelimiter = ',';
    const str FreeTextCharacter = '*';    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAttributeDataSouce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified table to the specified parent data source.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The parent data source to which the child table must be joined.
    /// </param>
    /// <param name="_childTable">
    /// The child table that must be added to the specified parent data source.
    /// </param>
    /// <param name="_joinMode">
    /// The mode of joining between the parent data source and the child table.
    /// </param>
    /// <returns>
    /// An instance of the <c>QueryBuildDataSource</c> class.
    /// </returns>
    public QueryBuildDataSource addAttributeDataSouce(QueryBuildDataSource _parentDataSource, TableId _childTable, JoinMode _joinMode)
    {
        QueryBuildDataSource childDataSource = _parentDataSource.addDataSource(_childTable);
        childDataSource.joinMode(_joinMode);
        childDataSource.relations(true);
        childDataSource.fetchMode(QueryFetchMode::One2One);

        return childDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPartyNameSearchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a name range to the existing vendor search criteria.
    /// </summary>
    /// <param name="_dbaTableId">
    /// The table ID of the <c>VendTable</c> table or the <c>VendRequestSignup</c> table.
    /// </param>
    /// <param name="_partyName">
    /// A string value that is provided by the user as a vendor name during vendor search.
    /// </param>
    /// <remarks>
    /// Add the ranges for name search. This method determines whether the name attribute contains a value.
    /// If the name attribute is not empty, it adds the required data sources for the vendor search and
    /// assigns the range information about the vendor name. If multiple names are provided as a comma
    /// separated string, it iterates through all the names and adds them to the range.
    /// </remarks>

    public void addPartyNameSearchCriteria(TableId _dbaTableId, str _partyName)
    {
        List list = new List(Types::String);

        if (_partyName != strMin())
        {
            QueryBuildDataSource qbdsDirPartyTable = query.dataSourceTable(tablenum(DirPartyTable));
            QueryBuildDataSource qbdsDBA           = query.dataSourceTable(_dbaTableId);

            list = strSplit(_partyName, ValueDelimiter);
            ListEnumerator items = list.getEnumerator();
            while (items.moveNext())
            {
                str currentItem = items.current();
                if (currentItem != strMin())
                {
                    currentItem = FreeTextCharacter + Global::strLRTrim(currentItem) + FreeTextCharacter;
                    qbdsDirPartyTable.addRange(fieldnum(DirPartyTable, Name)).value(
                        strfmt('((%1.%2 LIKE "%8") || (%3.%4 LIKE "%8") || (%5.%6 LIKE "%8") || (%7.DBA LIKE "%8"))',
                            queryValue(qbdsDirPartyTable.name()), fieldstr(DirPartyTable, Name),
                            queryValue(qbdsDirPartyTable.name()), fieldstr(DirPartyTable, NameAlias),
                            queryValue(qbdsDirPartyTable.name()), fieldstr(DirPartyTable, KnownAs),
                            queryValue(qbdsDBA.name()),
                            queryValue(currentItem)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeMultipleValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified string value as query range to the specified field of the specified table.
    /// </summary>
    /// <param name="_table">
    /// The table name to be considered for query range.
    /// </param>
    /// <param name="_field">
    /// The field name to be considered for query range.
    /// </param>
    /// <param name="_delimitedMultipleValues">
    /// A string value to be added to the query range.
    /// </param>
    /// <remarks>
    /// This method splits the specified comma separated string value. For each split string value, it
    /// calls the <c>addSearchCriteria</c> method in order to add the split string value to the query range.
    /// </remarks>

    public void addRangeMultipleValue(TableId _table, FieldId _field, str _delimitedMultipleValues)
    {
        ListEnumerator items;
        str            currentItem;

        List list = new List(Types::String);

        if (_delimitedMultipleValues != strMin())
        {
            list = strSplit(_delimitedMultipleValues, ExpressionDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(_table, _field, currentItem, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSearchCriteriaNoYes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>NoYes</c> enumeration value as query range to the specified field of the specified table.
    /// </summary>
    /// <param name="_tableId">
    /// The table name to be considered for query range.
    /// </param>
    /// <param name="_fieldId">
    /// The field name to be considered for query range.
    /// </param>
    /// <param name="_attributeValue">
    /// A <c>VendIgnoreNoYes</c> enumeration value to be converted to <c>NoYes</c> enumeration and added to
    /// the query range.
    /// </param>
    public void addSearchCriteriaNoYes(TableId _tableId, FieldId _fieldId, VendIgnoreNoYes _attributeValue)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        boolean              isValidRange = true;
        str                  valueNoYes;

        if (SecurityRights::construct().fieldAccessRight(tableId2Name(_tableId), fieldId2Name(_tableId, _fieldId)) != AccessRight::NoAccess)
        {
            switch (_attributeValue)
            {
                case VendIgnoreNoYes::No:
                    valueNoYes = SysQuery::value(NoYes::No);
                    break;
                case VendIgnoreNoYes::Yes:
                    valueNoYes = SysQuery::value(NoYes::Yes);
                    break;
                default:
                    isValidRange = false;
                    break;
            }

            if (isValidRange)
            {
                qbds = query.dataSourceTable(_tableId);
                if (qbds != null)
                {
                    qbr = qbds.addRange(_fieldId);
                    qbr.value(valueNoYes);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSearchCriteriaString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified string value as a query range to the specified field of the specified table.
    /// </summary>
    /// <param name="_tableId">
    /// The table name to be considered for query range.
    /// </param>
    /// <param name="_fieldId">
    /// The field name to be considered for query range.
    /// </param>
    /// <param name="_attributeValue">
    /// A string value to be added to the query range.
    /// </param>
    /// <param name="_like">
    /// A Boolean value that indicates whether the <c>valueLike</c> property is required for the query
    /// range.
    /// </param>
    public void addSearchCriteriaString(TableId _tableId, FieldId _fieldId, str _attributeValue, boolean _like = true)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds = query.dataSourceTable(_tableId);
        if (qbds != null)
        {
            qbr  = qbds.addRange(_fieldId);
            if (_like)
            {
                qbr.value(SysQuery::valueLike(VendSearchAddCategoryValueDelimiterFlight::instance().isEnabled()
                    ? SysQuery::value(_attributeValue)
                    : _attributeValue));
            }
            else
            {
                qbr.value(SysQuery::value(VendSearchAddCategoryValueDelimiterFlight::instance().isEnabled()
                    ? SysQuery::value(_attributeValue)
                    : _attributeValue));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCommonSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a search expression for all common search attributes of vendor search such as, name, city,
    /// state, country, minority owner, female owner, small business, locally owned and procurement
    /// category.
    /// </summary>
    /// <returns>
    /// A string value that contains the search expression.
    /// </returns>
    public str buildCommonSearchExpression()
    {
        TextBuffer expression = new TextBuffer();

        if (procurementCategory != strMin())
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                    this.labelProcurementCategory(),
                                                    this.parmProcurementCategory()));
        }

        if (vendorName != strMin())
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                    this.labelName(),
                                                    this.parmName()));
        }

        if (addressCity != strMin())
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                    this.labelCity(),
                                                    addressCity));
        }

        if (addressState != strMin())
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                    this.labelState(),
                                                    addressState));
        }

        if (addressCountry != strMin())
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                    this.labelCountry(),
                                                    addressCountry));
        }

        if (minorityOwned != VendIgnoreNoYes::Ignore)
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelMinorityOwner(),
                                                        enum2str(this.parmMinorityOwned())));
        }

        if (femaleOwned != VendIgnoreNoYes::Ignore)
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelFemaleOwned(),
                                                        enum2str(this.parmFemaleOwned())));
        }

        if (smallBusiness != VendIgnoreNoYes::Ignore)
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelSmallBusiness(),
                                                        enum2str(this.parmSmallBusiness())));
        }

        if (locallyOwned != VendIgnoreNoYes::Ignore)
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelLocallyOwned(),
                                                        enum2str(this.parmLocallyOwned())));
        }

        if (this.parmVendorGroup() != strMin()) //VendorGroup
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelVendorGroup(),
                                                        this.parmVendorGroup()));
        }

        return expression.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query specified by the non-empty values.
    /// </summary>
    /// <returns>
    /// A query object that contains vendor specific data tables and range conditions.
    /// </returns>
    /// <remarks>
    /// This method builds a query by selecting values that are not empty to attributes and adding index
    /// ranges to data sources required.
    /// </remarks>
    abstract Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a search string out of the extension class attributes.
    /// </summary>
    /// <returns>
    /// A string that contains the complete search expression.
    /// </returns>
    abstract public str buildSearchExpression()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateResultCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the record count for respective vendors on selection of refresh button.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the entity being searched.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the record ID field.
    /// </param>
    /// <param name="_isAllLEIncluded">
    /// A Boolean value that indicates whether the vendors that belong to all legal entities should be
    /// considered for vendor search.
    /// </param>
    /// <returns>
    /// An integer value that contains the record count.
    /// </returns>
    protected int calculateResultCount(TableId _tableId, FieldId _fieldId, boolean _isAllLEIncluded)
    {
        int                     ret;
        Query                   queryCount;
        QueryBuildDataSource    queryDataSource;
        QueryRun                queryRun;
        Common                  commonTable;

        queryCount      = new Query(this.buildQuery());
        queryDataSource = queryCount.dataSourceTable(_tableId);
        queryDataSource.fields().dynamic(false);
        queryDataSource.fields().clearFieldList();

        queryDataSource.fields().addField(_fieldId, SelectionField::Count, 1);

        if (_isAllLEIncluded)
        {
            queryCount.allowCrossCompany(true);
        }

        queryRun = new QueryRun(queryCount);
        queryRun.next();
        commonTable = queryRun.get(_tableId);

        ret = commonTable.getFieldValue(fieldid2name(_tableId, _fieldId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all range values.
    /// </summary>
    /// <remarks>
    /// Used to reset range values.
    /// </remarks>
    public void clearAllRanges()
    {
        vendorName      = '';
        vendorGroup     = '';
        addressCity     = '';
        addressState    = '';
        addressCountry  = '';

        femaleOwned     = VendIgnoreNoYes::Ignore;
        locallyOwned    = VendIgnoreNoYes::Ignore;
        smallBusiness   = VendIgnoreNoYes::Ignore;
        minorityOwned   = VendIgnoreNoYes::Ignore;

        procurementCategory = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets  attribute values from form.
    /// </summary>
    /// <param name="_form">
    /// The form object from which the attribute values are picked.
    /// </param>
    public void getFormParameters(FormRun _form)
    {
        Object formObject = _form;

        this.parmName(formObject.parmName());
        this.parmAddressCity(formObject.parmCity());
        this.parmAddressState(formObject.parmState());
        this.parmAddressCountry(formObject.parmCountry());

        this.parmMinorityOwned(formObject.parmMinorityOwned());
        this.parmFemaleOwned(formObject.parmFemaleOwned());
        this.parmSmallBusiness(formObject.parmSmallBusiness());
        this.parmLocallyOwned(formObject.parmLocallyOwned());
        this.parmVendorGroup(formObject.parmVendorGroup());

        this.parmProcurementCategory(formObject.parmProcurementCategory());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves record count for respective vendors on selection of refresh button.
    /// </summary>
    /// <param name="_isAllLEIncluded">
    /// A Boolean value that indicates whether the vendors that belong to all legal entities are considered
    /// for vendor search.
    /// </param>
    /// <returns>
    /// An integer value that contains the record count.
    /// </returns>
    public abstract int getResultCount(boolean _isAllLEIncluded)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the procurement category status attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelCategoryStatus()
    {
        DictEnum  typeDictionary = new DictEnum(enumnum(VendCategoryStatus));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the address city attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelCity()
    {
        DictType typeDictionary = new DictType(extendedtypenum(LogisticsAddressCityName));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the address country or region attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelCountry()
    {
        DictType typeDictionary = new DictType(extendedtypenum(LogisticsAddressCountryRegionId));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelFemaleOwned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the female owned attribute.
    /// </summary>
    /// <returns>
    /// A label caption as string.
    /// </returns>
    public str labelFemaleOwned()
    {
        DictType typeDictionary = new DictType(extendedtypenum(FemaleOwner));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelLocallyOwned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the locally owned attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelLocallyOwned()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendLocallyOwned));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelMinorityOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of minority owned attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelMinorityOwner()
    {
        DictType typeDictionary = new DictType(extendedtypenum(MinorityOwner));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of name attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelName()
    {
        DictType typeDictionary = new DictType(extendedtypenum(DirPartyName));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of procurement categories list attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelProcurementCategory()
    {
        return "@SYS133434";
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelSmallBusiness</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of small business indicator attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelSmallBusiness()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendSmallBusiness));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the address state attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelState()
    {
        DictType typeDictionary = new DictType(extendedtypenum(LogisticsAddressStateId));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelVendorGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the vendor group attribute.
    /// </summary>
    /// <returns>
    /// A label caption as a string.
    /// </returns>
    public str labelVendorGroup()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendGroupId));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressCity</Name>
				<Source><![CDATA[
    public VendCity parmAddressCity(VendCity _addressCity = addressCity)
    {
        if (_addressCity != strMin() && _addressCity != addressCity)
        {
            addressCity = strReplace(_addressCity, ValueDelimiter, ExpressionDelimiter);
        }

        return addressCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressCountry</Name>
				<Source><![CDATA[
    public VendCountryRegion parmAddressCountry(VendCountryRegion _addressCountry = addressCountry)
    {
        if (_addressCountry != strMin() && _addressCountry != addressCountry)
        {
            addressCountry = strReplace(_addressCountry, ValueDelimiter, ExpressionDelimiter);
        }

        return addressCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressState</Name>
				<Source><![CDATA[
    public VendState parmAddressState(VendState _addressState = addressState)
    {
        if (_addressState != strMin() && _addressState != addressState)
        {
            addressState = strReplace(_addressState, ValueDelimiter, ExpressionDelimiter);
        }

        return addressState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFemaleOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmFemaleOwned(VendIgnoreNoYes _femaleOwned = femaleOwned)
    {
        femaleOwned = _femaleOwned;
        return femaleOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeAllLegalEntities</Name>
				<Source><![CDATA[
    public boolean parmIncludeAllLegalEntities(boolean _includeAllLegalEntities = includeAllLegalEntities)
    {
        includeAllLegalEntities = _includeAllLegalEntities;
        return includeAllLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocallyOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmLocallyOwned(VendIgnoreNoYes _locallyOwned = locallyOwned)
    {
        locallyOwned = _locallyOwned;
        return locallyOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinorityOwned</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmMinorityOwned(VendIgnoreNoYes _minorityOwned = minorityOwned)
    {
        minorityOwned = _minorityOwned;
        return minorityOwned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public DirPartyName parmName(DirPartyName _vendorName = vendorName)
    {
        if (!prmisdefault(_vendorName))
        {
            vendorName = _vendorName;
        }

        return vendorName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcurementCategory</Name>
				<Source><![CDATA[
    public str parmProcurementCategory(str _procurementCategory = procurementCategory)
    {
        procurementCategory = _procurementCategory;
        return procurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmallBusiness</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmSmallBusiness(VendIgnoreNoYes _smallBusiness = smallBusiness)
    {
        smallBusiness = _smallBusiness;
        return smallBusiness;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorGroup</Name>
				<Source><![CDATA[
    public str parmVendorGroup(str _vendorGroup = vendorGroup)
    {
        return strMin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the attribute expression string, setting the attribute values for use on query ranges.
    /// </summary>
    /// <param name="_searchExpression">
    /// The search expression to be split.
    /// </param>
    /// <returns>
    /// An attribute string if parsing was not successful.
    /// </returns>
    public str parse(str _searchExpression)
    {
        int             posMaxPair      = strlen(_searchExpression);
        int             posPair         = 0;
        str             singleAttribute = strMin();
        str             singlevalue     = strMin();
        str             returnString    = strMin();
        VendIgnoreNoYes vendIgnoreNoYes = VendIgnoreNoYes::Ignore;

        if (_searchExpression != strMin())
        {
            //analize pair left=right
            posPair = strfind(_searchExpression, PairDelimiter, 1, posMaxPair);
            if (posPair)
            {
                singleAttribute = substr(_searchExpression, 1, posPair -1);
                singlevalue = substr(_searchExpression, posPair + 1, posMaxPair - posPair);
                if (singleAttribute != strMin() && singlevalue != strMin())
                {
                    switch (singleAttribute)
                    {
                        case this.labelProcurementCategory():
                            this.parmProcurementCategory(singlevalue);
                            break;

                        case this.labelName():
                            this.parmName(singlevalue);
                            break;

                        case this.labelCity():
                            this.parmAddressCity(singlevalue);
                            break;

                        case this.labelState():
                            this.parmAddressState(singlevalue);
                            break;

                        case this.labelCountry():
                            this.parmAddressCountry(singlevalue);
                            break;

                        case this.labelMinorityOwner():
                            this.parmMinorityOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelFemaleOwned():
                            this.parmFemaleOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelSmallBusiness():
                            this.parmSmallBusiness(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelLocallyOwned():
                            this.parmLocallyOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        default:
                            returnString = _searchExpression;
                            break;
                    }
                }
            }
        }

        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets shared attribute values to form controls.
    /// </summary>
    /// <param name="_form">
    /// The form to which the attribute values are set.
    /// </param>
    public void setCommonFormParameters(FormRun _form)
    {
        Object formObject =  _form;

        formObject.parmName(this.parmName());

        formObject.parmCity(this.parmAddressCity(), true);
        formObject.parmState(this.parmAddressState(), true);
        formObject.parmCountry(this.parmAddressCountry(), true);
        formObject.parmVendorGroup(this.parmVendorGroup(), true);

        formObject.parmMinorityOwned(this.parmMinorityOwned());
        formObject.parmFemaleOwned(this.parmFemaleOwned());
        formObject.parmSmallBusiness(this.parmSmallBusiness());
        formObject.parmLocallyOwned(this.parmLocallyOwned());

        formObject.parmProcurementCategory(this.parmProcurementCategory(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets attribute values to form controls.
    /// </summary>
    /// <param name="_form">
    /// The form to which the attribute values are set.
    /// </param>
    abstract void setFormParameters(FormRun _form)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an attribute name and value in required format and order for the search string.
    /// </summary>
    /// <param name="_label">
    /// A string name of attribute.
    /// </param>
    /// <param name="_values">
    /// A string value for the attribute.
    /// </param>
    /// <returns>
    /// A string in a required format, that presents attribute name and its values.
    /// </returns>
    public static str buildAttributeValues(str _label, str _values)
    {
        TextBuffer textBuffer = new TextBuffer();

        textBuffer.appendText(_label);
        textBuffer.appendText(PairDelimiter);
        textBuffer.appendText(strReplace(_values, ExpressionDelimiter, ValueDelimiter));
        textBuffer.appendText(ExpressionDelimiter);

        return textBuffer.getText();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>