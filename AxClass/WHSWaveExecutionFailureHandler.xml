<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveExecutionFailureHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used responsible for wave processing handling in case it fails.
/// </summary>
public class WHSWaveExecutionFailureHandler
{
    private WHSWaveId waveId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    private void parmWaveId(WHSWaveId _waveId) 
    {
        this.waveId = _waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWaveExecutionFailureHandler construct()
    {
        return new WHSWaveExecutionFailureHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of <c>WHSWaveExecutionFailureHandler</c> for given wave id.
    /// </summary>
    /// <param name = "_waveId">The wave id.</param>
    /// <returns>Instance of <c>WHSWaveExecutionFailureHandler</c>.</returns>
    public static WHSWaveExecutionFailureHandler newFromWaveId(WHSWaveId _waveId)
    {
        WHSWaveExecutionFailureHandler waveExecutionFailureHandler = WHSWaveExecutionFailureHandler::construct();
        waveExecutionFailureHandler.parmWaveId(_waveId);

        waveExecutionFailureHandler.registerEventHandlers();

        return waveExecutionFailureHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        appl.onTtsNotifyAbort += eventhandler(this.onTtsAbort);
        appl.onTtsNotifyCommit += eventhandler(this.onTtsCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandlers</Name>
				<Source><![CDATA[
    private void unregisterEventHandlers()
    {
        appl.onTtsNotifyAbort -= eventhandler(this.onTtsAbort);
        appl.onTtsNotifyCommit -= eventhandler(this.onTtsCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsAbort</Name>
				<Source><![CDATA[
    private void onTtsAbort()
    {
        try
        {
            this.clearWaveData();
        }
        finally
        {
            this.unregisterEventHandlers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWaveData</Name>
				<Source><![CDATA[
    private void clearWaveData()
    {
        var waveProcessingDataCleanup = WHSWaveProcessingDataCleanup::newFromWaveId(waveId);
        waveProcessingDataCleanup.parmWaveCleanupType('onTtsAbortWaveCleanup');
        waveProcessingDataCleanup.cleanupErroredWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsCommit</Name>
				<Source><![CDATA[
    private void onTtsCommit()
    {        
        this.unregisterEventHandlers();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>