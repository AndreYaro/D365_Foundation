<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyNodeMatchRule_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Checks if the taxTrans needs to be mapped with a taxReportHierarchyNode_IN record.
/// </summary>
class TaxReportHrchyNodeMatchRule_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMatchNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the taxTrans needs to be mapped with a taxReportHierarchyNode_IN record
    /// </summary>
    /// <param name="_record">
    /// The record of TaxTrans_IN
    /// </param>
    /// <returns>
    /// Indicates whether the taxTrans record needs to be mapped with a taxReportHierarchyNode_IN record
    /// </returns>
    public static boolean canMatchNode(Common _record)
    {
        TaxTrans_IN                         taxTrans = _record as TaxTrans_IN;
        TaxLedgerAccounts_IN                taxLedgerAccounts;
        TaxLedgerAccountSetup_IN            taxLedgerAccountSetup;
        MainAccount                         recoverableMainAcct, payableMainAcct;
        DimensionAttributeValueCombination  dimAttrValueComb;

        // <GTE>
        //No need to call a check for the GST and VAT
        if (TaxSolutionScopeIntegrationUtil::iscompanyEnabled() && taxTrans.TaxType == TaxType_IN::GST
            || (TaxSolutionScopeIntegrationUtil::iscompanyEnabled() && taxTrans.TaxType == TaxType_IN::VAT))
        {
            return true;
        }
        // </GTE>
        recoverableMainAcct = MainAccount::find(DimensionAttributeValueCombination::find(taxTrans.RecoverableLedgerDimension).MainAccount);
        payableMainAcct = MainAccount::find(DimensionAttributeValueCombination::find(taxTrans.PayableLedgerDimension).MainAccount);

        if (recoverableMainAcct || payableMainAcct)
        {
            //Only taxtrans posted to certain tax accounts are supported
            select RecId from taxLedgerAccounts
                where (taxLedgerAccounts.AccountType == TaxAccountType_IN::ServiceTaxPayableAccount
                        || taxLedgerAccounts.AccountType == TaxAccountType_IN::ServiceTaxRecoverableAccount)
                    || (taxLedgerAccounts.AccountType == TaxAccountType_IN::ExcisePayableAccount
                        || taxLedgerAccounts.AccountType == TaxAccountType_IN::ExciseRecoverableAccount)
                    || (taxLedgerAccounts.AccountType == TaxAccountType_IN::VATPayableAccount
                        || taxLedgerAccounts.AccountType == TaxAccountType_IN::VATRecoverableAccount)
                    || (taxLedgerAccounts.AccountType == TaxAccountType_IN::SalesTaxPayableAccount)
                exists join dimAttrValueComb
                    where dimAttrValueComb.RecId == taxLedgerAccounts.LedgerDimension
                    &&    (dimAttrValueComb.MainAccount == recoverableMainAcct.RecId
                    ||     dimAttrValueComb.MainAccount == payableMainAcct.RecId)
                exists join TaxRegistrationNumberTable, RecId from taxLedgerAccountSetup
                    where (taxLedgerAccountSetup.TaxRegistrationNumberTable == taxTrans.CompanyRegistrationNumber
                        || taxLedgerAccountSetup.TaxRegistrationNumberTable == 0)
                       && taxLedgerAccountSetup.RecId == taxLedgerAccounts.TaxLedgerAccountSetup;
        }

        if (!taxLedgerAccounts.RecId)
        {
            return false;
        }

        //Tax type Customs and None is not supported
        if (taxTrans.TaxType == TaxType_IN::None || taxTrans.TaxType == TaxType_IN::Customs)
            return false;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>