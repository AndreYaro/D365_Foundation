<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceJourDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceJourDP</c> class fetches records for the <c>VendInvoiceJour</c>Microsoft SQL
/// Server Reporting Services report.
/// </summary>
[SRSReportQueryAttribute(querystr(VendInvoiceJour)),
SRSReportParameterAttribute(classstr(VendInvoiceJourContract))]
public class VendInvoiceJourDP extends SRSReportDataProviderBase
{
    VendInvoiceJourTmp vendInvoiceJourTmp;
    VendInvoiceJour vendInvoiceJour;
    TaxCode addTax;
    MarkupCode finIncome;
    boolean calculateAdditionalTax;

    // <GEECZ>
    CurrencyCode accountingCurrency;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the additional <c>taxAmountCur</c> value.
    /// </summary>
    /// <returns>
    /// A <c>TaxAmountCur</c> object.
    /// </returns>
    private TaxAmountCur additionalTaxAmount()
    {
        TaxAmountCur taxAmountCur;

        if (!calculateAdditionalTax)
        {
            return taxAmountCur;
        }

        TaxSpec taxSpec = TaxSpec::construct(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate, vendInvoiceJour.RecId);

        while (taxSpec.parmTaxSpec())
        {
            if (taxSpec.taxCode() == addTax)
            {
                taxAmountCur += taxSpec.taxAmount();
            }
        }

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// A <c>VendInvoiceJourTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendInvoiceJourTmp))]
    public VendInvoiceJourTmp getVendInvoiceJourTmp()
    {
        select vendInvoiceJourTmp;
        return vendInvoiceJourTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceTransFinancialIncome</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the Financial Income value from the lines of the document
    /// </summary>
    /// <param name = "_vendInvoiceJour">The header record to find the line records from</param>
    /// <returns>The portion of the value for the Financial Income field that comes from lines</returns>
    private real getVendorInvoiceTransFinancialIncome(VendInvoiceJour _vendInvoiceJour)
    {
        VendInvoiceTrans_MarkupTransAmount vendInvoiceTrans_MarkupTransAmount;

        if (finIncome == '')
        {
            return 0;
        }

        select sum(MarkupTransPostedAmount)
            from vendInvoiceTrans_MarkupTransAmount
                where vendInvoiceTrans_MarkupTransAmount.InvoiceId == _vendInvoiceJour.InvoiceId
                   && vendInvoiceTrans_MarkupTransAmount.InvoiceDate == _vendInvoiceJour.InvoiceDate
                   && vendInvoiceTrans_MarkupTransAmount.PurchId == _vendInvoiceJour.PurchId
                   && vendInvoiceTrans_MarkupTransAmount.NumberSequenceGroup == _vendInvoiceJour.numberSequenceGroup
                   && vendInvoiceTrans_MarkupTransAmount.InternalInvoiceId == _vendInvoiceJour.InternalInvoiceId
                   && vendInvoiceTrans_MarkupTransAmount.MarkupCode == finIncome;

        return vendInvoiceTrans_MarkupTransAmount.MarkupTransPostedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialIncome</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Financial Income field with the portion of the value that comes from the header
    /// </summary>
    private void updateFinancialIncome()
    {
        VendInvoiceJour_MarkupTransAmount vendInvoiceJour_MarkupTransAmount;

        if (finIncome != '')
        {
            update_recordset vendInvoiceJourTmp
                setting
                    FinancialIncome = vendInvoiceJourTmp.FinancialIncome + vendInvoiceJour_MarkupTransAmount.MarkupTransPostedAmount
                join vendInvoiceJour_MarkupTransAmount
                    where vendInvoiceJour_MarkupTransAmount.TransRecId == vendInvoiceJourTmp.VendInvoiceJourRecId
                && vendInvoiceJour_MarkupTransAmount.TransTableId == vendInvoiceJour.TableId
                && vendInvoiceJour_MarkupTransAmount.MarkupCode == finIncome;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to the <c>VendInvoiceJourTmp</c> table.
    /// </summary>
    private void insertVendInvoiceJourTmp()
    {
        // <GEECZ>
        VendTrans vendTrans;
        // </GEECZ>

        vendInvoiceJourTmp.FinancialIncome = this.getVendorInvoiceTransFinancialIncome(vendInvoiceJour);
        vendInvoiceJourTmp.VendInvoiceJourRecId = vendInvoiceJour.RecId;

        vendInvoiceJourTmp.InvoiceId = vendInvoiceJour.InvoiceId;
        vendInvoiceJourTmp.InvoiceDate = vendInvoiceJour.InvoiceDate;
        vendInvoiceJourTmp.NumberSequenceGroup = vendInvoiceJour.NumberSequenceGroup;
        vendInvoiceJourTmp.InvoiceAccount = vendInvoiceJour.InvoiceAccount;
        vendInvoiceJourTmp.VendName = vendInvoiceJour.vendTable_InvoiceAccount().name();
        vendInvoiceJourTmp.SumLineDisc = vendInvoiceJour.SumLineDisc;
        vendInvoiceJourTmp.SumMarkup = vendInvoiceJour.SumMarkup;
        vendInvoiceJourTmp.EndDisc = vendInvoiceJour.EndDisc;
        vendInvoiceJourTmp.SumTax = vendInvoiceJour.SumTax;
        vendInvoiceJourTmp.AdditionalTaxAmount = this.additionalTaxAmount();
        vendInvoiceJourTmp.CurrencyCode = vendInvoiceJour.CurrencyCode;
        vendInvoiceJourTmp.InvoiceAmount = vendInvoiceJour.InvoiceAmount;
        vendInvoiceJourTmp.InvoiceAmountMST = vendInvoiceJour.amountMST(vendInvoiceJour.InvoiceAmount);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendInvoiceJourTmp.FiscalEstablishmentId = vendInvoiceJour.vendTrans().fiscalEstablishmentId_BR();
        }
        // </GBR>

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            vendInvoiceJourTmp.AccountingCurrency = accountingCurrency;
            vendInvoiceJourTmp.DueDate = vendInvoiceJour.DueDate;
            vendInvoiceJourTmp.VATDueDate = vendInvoiceJour.vatDueDate_W();
            vendInvoiceJourTmp.LedgerVoucher = vendInvoiceJour.LedgerVoucher;
            vendInvoiceJourTmp.VendRegNum = VendTable::find(vendInvoiceJour.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
            vendInvoiceJourTmp.SumTaxMST = vendInvoiceJour.amountMST(vendInvoiceJour.SumTax);

            select sum(SettleAmountMST), sum(SettleAmountCur) from vendTrans
                where vendTrans.AccountNum == vendInvoiceJour.OrderAccount &&
                    vendTrans.TransDate == vendInvoiceJour.InvoiceDate &&
                    vendTrans.Invoice == vendInvoiceJour.InvoiceId;

            vendInvoiceJourTmp.SettleAmountCur = sign(vendInvoiceJour.InvoiceAmount) * abs(vendTrans.SettleAmountCur);
            vendInvoiceJourTmp.SettleAmountMST = sign(vendInvoiceJour.InvoiceAmount) * abs(vendTrans.SettleAmountMST);
        }
        // </GEECZ>

        vendInvoiceJourTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records based on the specified parameters.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        VendInvoiceJourContract contract = this.parmDataContract() as VendInvoiceJourContract;
        finIncome = contract.parmMiscChargesCode();
        addTax = contract.parmSalesTaxCode();
        calculateAdditionalTax = (addTax != "") ? true : false;

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            accountingCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());
        }
        // </GEECZ>

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            vendInvoiceJour = queryRun.get(tablenum('VendInvoiceJour'));
            this.insertVendInvoiceJourTmp();
        }

        this.updateFinancialIncome();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>