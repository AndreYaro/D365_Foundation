<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WarrantyPolicyFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// <c>WarrantyPolicyFacade</c> provides business logic functions for warranty policy.
/// </summary>
internal static final class WarrantyPolicyFacade
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePolicyAfterInvoicing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates policy after invoicing.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice journal</param>
    internal static void updatePolicyAfterInvoicing(CustInvoiceJour _custInvoiceJour)
    {
        // Called when customer order feature is enabled.
        if (WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled())
        {
            CustInvoiceTrans custInvoiceTrans;
            InventTable inventTable;
            EcoResProduct product;

            while select custInvoiceTrans
                where custInvoiceTrans.SalesId == _custInvoiceJour.SalesId
                    && custInvoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId
                    && custInvoiceTrans.InvoiceDate == _custInvoiceJour.InvoiceDate
                    && custInvoiceTrans.numberSequenceGroup == _custInvoiceJour.numberSequenceGroup
            {
                // Warranty item
                if (EcoResProduct::find(inventTable::find(custInvoiceTrans.ItemId).Product).ServiceType == EcoResProductServiceType::Warranty)
                {
                    if (custInvoiceTrans.Qty > 0)
                    {
                        // fulfilment of warranty
                        WarrantyPolicyFacade::createPolicyByWarrantyInvoiceTrans(custInvoiceTrans);
                    }
                    else if (custInvoiceTrans.Qty < 0)
                    {
                        // fulfilment of warranty
                        WarrantyPolicyFacade::voidPolicyByWarrantyReturnInvoiceTrans(custInvoiceTrans);
                    }
                }
                // warrantable item
                else
                {
                    if (custInvoiceTrans.Qty > 0)
                    {
                        // fulfilment of warrantable
                        WarrantyPolicyFacade::createPolicyByWarrantiedInvoiceTrans(custInvoiceTrans);
                    }
                    else if (custInvoiceTrans.Qty < 0)
                    {
                        // return of warrantable
                        WarrantyPolicyFacade::voidPolicyByWarrantiedReturnInvoiceTrans(custInvoiceTrans);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyByWarrantyInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates warranty policy via warranty invoice trans.
    /// </summary>
    /// <param name = "_warrantyInvoiceTrans">warranty invoice trans</param>
    /// <returns>warranty policy created</returns>
    internal static WarrantyPolicy createPolicyByWarrantyInvoiceTrans(CustInvoiceTrans _warrantyInvoiceTrans)
    {
        eventSource.EventWriteWarrantyPolicyCreatePolicyByWarrantyInvoiceTransStart(_warrantyInvoiceTrans.RecId);

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        WarrantyPolicy policy;

        try
        {
            policy = WarrantyPolicyFacade::createPolicyByWarrantyInvoiceTransInternal(_warrantyInvoiceTrans);
        }
        finally
        {
            stopWatch.Stop();
            eventSource.EventWriteWarrantyPolicyCreatePolicyByWarrantyInvoiceTransEnd(_warrantyInvoiceTrans.RecId, stopWatch.ElapsedMilliseconds);
        }

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyByWarrantyInvoiceTransInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates warranty policy via warranty invoice trans.
    /// </summary>
    /// <param name = "_warrantyInvoiceTrans">warranty invoice trans</param>
    /// <returns>warranty policy created</returns>
    private static WarrantyPolicy createPolicyByWarrantyInvoiceTransInternal(CustInvoiceTrans _warrantyInvoiceTrans)
    {
        WarrantyPolicy policy;

        WarrantiedRelationSalesLine warrantiedRelation =
            WarrantiedRelationSalesLine::findWarrantiedRelationByWarrantyInvoiceTrans(_warrantyInvoiceTrans);

        if (!warrantiedRelation
            || (warrantiedRelation.WarrantiedOrderType == WarrantiedRelationOrderType::SalesOrder && !warrantiedRelation.WarrantiedInventTransId))
        {
            return policy;
        }

        if (WarrantyPolicy::existsPolicyForWarrantiedRelation(warrantiedRelation))
        {
            // warranty policy already created, skip creation. This can happen if both are in the same order.
            return policy;
        }

        CustInvoiceTrans warrantiedInvoiceTrans;
        select InvoiceDate from warrantiedInvoiceTrans
            where warrantiedInvoiceTrans.SalesId == warrantiedRelation.WarrantiedSalesId
            && warrantiedInvoiceTrans.ItemId == warrantiedRelation.WarrantiedItemId
            && warrantiedInvoiceTrans.InventTransId == warrantiedRelation.WarrantiedInventTransId;

        if (!warrantiedInvoiceTrans)
        {
            // warrantied is not fulfilled so skip creation of policy.
            return policy;
        }

        policy.CustAccount = warrantiedRelation.CustAccount;
        policy.PolicyNumber = WarrantyPolicy::getNextPolicyNumber();

        policy.WarrantiedItemId = warrantiedRelation.WarrantiedItemId;
        policy.WarrantiedInventTransId = warrantiedRelation.WarrantiedInventTransId;
        policy.WarrantiedSerialNumber = warrantiedRelation.getWarrantiedSerialNumber();

        if (warrantiedRelation.WarrantiedOrderType == WarrantiedRelationOrderType::ThirdParty)
        {
            // For 3rd party sales, the fulfilled date is treated as the same as that of warranty.
            policy.WarrantiedFulfilledDate = _warrantyInvoiceTrans.InvoiceDate;
            policy.WarrantyEffectiveDate = _warrantyInvoiceTrans.InvoiceDate;
        }
        else
        {
            policy.WarrantiedFulfilledDate = warrantiedInvoiceTrans.InvoiceDate;
            // Warrantied is already fulfilled, so take the warranty invoiced date which is no earlier than warrantied.
            policy.WarrantyEffectiveDate = _warrantyInvoiceTrans.InvoiceDate;
        }

        policy.WarrantyItemId = _warrantyInvoiceTrans.ItemId;
        policy.WarrantyInventTransId = _warrantyInvoiceTrans.InventTransId;
        policy.WarrantySalesDate = _warrantyInvoiceTrans.InvoiceDate;
        policy.Status = WarrantyPolicyStatus::Effective;
        policy.WarrantyExpirationDate = EcoResProductServiceWarranty::calculateExpirationDate(
            policy.WarrantyEffectiveDate, EcoResProductServiceWarranty::findByItemId(_warrantyInvoiceTrans.ItemId));

        policy.insert();

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyByWarrantiedInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates warranty policy via warrantied invoice trans.
    /// </summary>
    /// <param name = "_warrantiedInvoiceTrans">warrantied invoice trans</param>
    /// <returns>warranty policy created</returns>
    internal static WarrantyPolicy createPolicyByWarrantiedInvoiceTrans(CustInvoiceTrans _warrantiedInvoiceTrans)
    {
        eventSource.EventWriteWarrantyPolicyCreatePolicyByWarrantiedInvoiceTransStart(_warrantiedInvoiceTrans.RecId);

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        WarrantyPolicy policy;

        try
        {
            policy = WarrantyPolicyFacade::createPolicyByWarrantiedInvoiceTransInternal(_warrantiedInvoiceTrans);
        }
        finally
        {
            stopWatch.Stop();
            eventSource.EventWriteWarrantyPolicyCreatePolicyByWarrantiedInvoiceTransEnd(_warrantiedInvoiceTrans.RecId, stopWatch.ElapsedMilliseconds);
        }

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyByWarrantiedInvoiceTransInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates warranty policy via warrantied invoice trans.
    /// </summary>
    /// <param name = "_warrantiedInvoiceTrans">warrantied invoice trans</param>
    /// <returns>warranty policy created</returns>
    internal static WarrantyPolicy createPolicyByWarrantiedInvoiceTransInternal(CustInvoiceTrans _warrantiedInvoiceTrans)
    {
        WarrantyPolicy policy;

        WarrantiedRelationSalesLine warrantiedRelation =
            WarrantiedRelationSalesLine::findWarrantiedRelationByWarrantiedInvoiceTrans(_warrantiedInvoiceTrans);

        if (!warrantiedRelation
            || (!warrantiedRelation.WarrantiedInventTransId || warrantiedRelation.WarrantiedOrderType != WarrantiedRelationOrderType::SalesOrder))
        {
            return policy;
        }

        if (WarrantyPolicy::existsPolicyForWarrantiedRelation(warrantiedRelation))
        {
            // warranty policy already created, skip creation. This can happen if both are in the same order.
            return policy;
        }

        CustInvoiceTrans warrantyInvoiceTrans;
        select ItemId, InventTransId, InvoiceDate from warrantyInvoiceTrans
            where warrantyInvoiceTrans.SalesId == warrantiedRelation.WarrantySalesId
            && warrantyInvoiceTrans.ItemId == warrantiedRelation.WarrantyItemId
            && warrantyInvoiceTrans.InventTransId == warrantiedRelation.WarrantyInventTransId;

        if (!warrantyInvoiceTrans)
        {
            // Warranty not fulfilled yet, and do not create policy.
            return policy;
        }

        policy.CustAccount = warrantiedRelation.CustAccount;
        policy.PolicyNumber = WarrantyPolicy::getNextPolicyNumber();

        policy.WarrantiedItemId = warrantiedRelation.WarrantiedItemId;
        policy.WarrantiedInventTransId = warrantiedRelation.WarrantiedInventTransId;
        policy.WarrantiedSerialNumber = warrantiedRelation.getWarrantiedSerialNumber();
        policy.WarrantiedFulfilledDate = _warrantiedInvoiceTrans.InvoiceDate;

        // Warranty is already fulfilled, so take the warrantied invoiced date which is no earlier than that of warranty.
        policy.WarrantyEffectiveDate = _warrantiedInvoiceTrans.InvoiceDate;
        policy.WarrantyItemId = warrantyInvoiceTrans.ItemId;
        policy.WarrantyInventTransId = warrantyInvoiceTrans.InventTransId;
        policy.WarrantySalesDate = warrantyInvoiceTrans.InvoiceDate;
        policy.Status = WarrantyPolicyStatus::Effective;
        policy.WarrantyExpirationDate = EcoResProductServiceWarranty::calculateExpirationDate(
            policy.WarrantyEffectiveDate, EcoResProductServiceWarranty::findByItemId(warrantyInvoiceTrans.ItemId));

        policy.insert();

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidPolicyByItemSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids policy by warrantied item serial number.
    /// </summary>
    /// <param name = "_custAccount">customer account</param>
    /// <param name = "_warrantiedItemId">Id of warrantied item</param>
    /// <param name = "_warrantiedSerialNumber">serial number of warrantied item</param>
    internal static void voidPolicyByItemSerialNumber(
        CustAccount _custAccount,
        WarrantiedItemId _warrantiedItemId,
        WarrantiedSerialNumber _warrantiedSerialNumber)
    {
        eventSource.EventWriteWarrantyPolicyVoidPolicyByItemSerialNumberStart(
            _custAccount,
            _warrantiedItemId,
            _warrantiedSerialNumber);

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        try
        {
            WarrantyPolicy::voidPolicyByItemSerialNumber(
                _custAccount,
                _warrantiedItemId,
                _warrantiedSerialNumber);
        }
        finally
        {
            stopWatch.Stop();
            eventSource.EventWriteWarrantyPolicyVoidPolicyByItemSerialNumberEnd(
                    _custAccount,
                    _warrantiedItemId,
                    _warrantiedSerialNumber,
                    stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidPolicyByWarrantyReturnInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Void warranty upon return of warranty item.
    /// </summary>
    /// <param name = "_warrantyReturnInvoiceTrans">The invoice trans of warranty return</param>
    internal static void voidPolicyByWarrantyReturnInvoiceTrans(
        CustInvoiceTrans _warrantyReturnInvoiceTrans)
    {
        eventSource.EventWriteWarrantyPolicyVoidPolicyByWarrantyReturnInvoiceTransStart(_warrantyReturnInvoiceTrans.RecId);

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        try
        {
            WarrantyPolicy::voidPolicyByWarrantyReturnInvoiceTrans(_warrantyReturnInvoiceTrans);
        }
        finally
        {
            stopWatch.Stop();
            eventSource.EventWriteWarrantyPolicyVoidPolicyByWarrantyReturnInvoiceTransEnd(_warrantyReturnInvoiceTrans.RecId, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidPolicyByWarrantiedReturnInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Void warranty upon return of warrantied item.
    /// </summary>
    /// <param name = "_warrantiedReturnInvoiceTrans">The invoice trans of warrantied item return</param>
    internal static void voidPolicyByWarrantiedReturnInvoiceTrans(CustInvoiceTrans _warrantiedReturnInvoiceTrans)
    {
        eventSource.EventWriteWarrantyPolicyVoidPolicyByWarrantiedReturnInvoiceTransStart(_warrantiedReturnInvoiceTrans.RecId);

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        try
        {
            WarrantyPolicy::voidPolicyByWarrantiedReturnInvoiceTrans(_warrantiedReturnInvoiceTrans);
        }
        finally
        {
            stopWatch.Stop();
            eventSource.EventWriteWarrantyPolicyVoidPolicyByWarrantiedReturnInvoiceTransEnd(_warrantiedReturnInvoiceTrans.RecId, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>