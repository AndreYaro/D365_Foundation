<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCalculationActivityOnDocument_CalculationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TaxServiceAPI = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationCalculationActivityOnDocument_CalculationService</c>
/// is a static companion class for <c>TaxIntegrationCalculationActivityOnDocument</c>,
/// calculating using the calculation service.
/// </summary>
public static class TaxIntegrationCalculationActivityOnDocument_CalculationService
{
    public const str LoggerNamePrepare = 'Tax Integration - Calculation Service - Prepare Request';
    public const str LoggerNamePost = 'Tax Integration - Calculation Service - Post Request';
    public const str LoggerNameProcess = 'Tax Integration - Calculation Service - Process Response';

    private const str IODateFormat = '{0:####}-{1:##}-{2:##}T00:00:00';

    private const str IOLineType = 'Line Type';
    private const str IOLineTypeLine = 'Normal';
    private const str IOLineTypeLineCharge = 'Charges - Line';
    private const str IOLineTypeDocumentCharge = 'Charges - Header';

    private const str IOLegalEntityCode = 'Legal Entity Code';
    private const str IOTransactionDate = 'Transaction Date';
    private const str IOCustomerOrderAccount = 'Customer Account';
    private const str IOCustomerOrderAccountType = 'Customer Account Type';
    private const str IOCustomerOrderAccountGroup = 'Customer Account Group';
    private const str IOVendorOrderAccount = 'Vendor Account';
    private const str IOVendorOrderAccountType = 'Vendor Account Type';
    private const str IOVendorOrderAccountGroup = 'Vendor Account Group';
    private const str IOCustomerInvoiceAccount  = 'Customer Invoice Account';
    private const str IOCustomerInvoiceAccountType  = 'Customer Invoice Account Type';
    private const str IOCustomerInvoiceAccountGroup = 'Customer Invoice Account Group';
    private const str IOVendorInvoiceAccount = 'Vendor Invoice Account';
    private const str IOVendorInvoiceAccountType = 'Vendor Invoice Account Type';
    private const str IOVendorInvoiceAccountGroup = 'Vendor Invoice Account Group';
    private const str IOCustomerTaxId = 'Customer Tax Registration Number';
    private const str IOCustomerCountryRegionId = 'Customer Tax Registration Country/Region';
    private const str IOVendorTaxId = 'Vendor Tax Registration Number';
    private const str IOVendorCountryRegionId = 'Vendor Tax Registration Country/Region';
    private const str IOCounterpartyTaxId = 'Counterparty Tax Registration Number';
    private const str IOCounterpartyCountryRegionId = 'Counterparty Tax Registration Country/Region';
    private const str IOListCode = 'List Code';
    private const str IOOrderType = 'Order Type';
    private const str IOItemGroup = 'Item Group';
    private const str IOProjectID = 'Project ID';
    private const str IOProjectCategory = 'Project Category';

    private const str IODeliveryDate = 'Delivery Date';
    private const str IODocumentDate = 'Document Date';
    private const str IOInvoiceDate = 'Invoice Date';
    private const str IOVatRegisterDate = 'Date Of VAT Register';
    private const str IOCreatedDateTime = 'Created Datetime';
    private const str IOCashDiscDate = 'Cash Discount Date';
    private const str IODueDate = 'Due Date';
    private const str IOPickingListDate = 'Picking List Date';
    private const str IOPackingSlipDate = 'Packing Slip Date';
    private const str IODateOfConfirmation = 'Date Of Confirmation';
    private const str IOAccountingDate = 'Accounting Date';
    private const str IOReceiptsListDate = 'Receipts List Date';
    private const str IOProductReceiptDate = 'Product Receipt Date';
    private const str IOInvoiceReceivedDate = 'Invoice Received Date';
    private const str IODateOfVendorVATRegister = 'Date Of Vendor VAT Register';
    private const str IORequestedDate = 'Requested Date';
    private const str IOShipDate = 'Ship Date';
    private const str IOReceiveDate = 'Receipt Date';

    private const str IOReceiptDateRequested = 'Requested Receipt Date';
    private const str IOShippingDateRequested = 'Requested Ship Date';

    private const str IOReversingDate = 'Reversing Date';

    private const str IOTaxGroup = 'Sales Tax Group';
    private const str IOItemTaxGroup = 'Item Sales Tax Group';

    // Measures, mainly used for adjustment
    private const str IOTaxGroupMeasure = 'Tax Group';
    private const str IOItemTaxGroupMeasure = 'Item Tax Group';
    
    private const str IOTaxDirection = 'Tax Direction';
    private const str IOTaxInclusive = 'Amount include tax';
    private const str IOBusinessProcess = 'Business Process';

    private const str IOItemCode = 'Item Code';
    private const str IOChargeCode = 'Charges Code';
    private const str IOProductVariant = 'Variant Number';
    private const str IOCategoryCode = 'Category Name';
    private const str IOItemType = 'Item Type';
    private const str IOCommodityCode = 'Commodity Code';
    internal const str IOJournalName = 'Journal Name';
    internal const str IOJournalType = 'Journal Type';

    private const str IOQuantity = 'Quantity';
    private const str IOUnit = 'Unit';
    private const str IOCostAmount = 'Cost Amount';

    private const str IODirectDelivery = 'Direct Delivery';
    private const str IODeliveryTerm = 'Delivery Term';

    internal const str IOTransactionAmount = 'Amount';
    private const str IOCurrencyCode = 'Currency';
    private const str IOCashDiscountPercent = 'Cash Discount Percent';
    private const str IOCashDiscountAmount = 'Cash Discount Amount';

    private const str IOZipCode = 'Zip Code';
    private const str IOCity = 'City';
    private const str IOState = 'Province/State';
    private const str IOCountry = 'Country/Region';
    private const str IOCountryRegionType = 'Country/Region Type';
    private const str IOStreet = 'Street';
    private const str IOLatitude = 'Latitude';
    private const str IOLongitude = 'Longitude';

    private const str IOShipmentOriginZipCode = 'Ship From Zip Code';
    private const str IOShipmentOriginCity = 'Ship From City';
    private const str IOShipmentOriginState = 'Ship From Province/State';
    private const str IOShipmentOriginCountry = 'Ship From Country/Region';
    private const str IOShipmentOriginCountryRegionType = 'Ship From Country/Region Type';
    private const str IOShipmentOriginStreet = 'Ship From Street';
    private const str IOShipmentOriginLatitude = 'Ship From Latitude';
    private const str IOShipmentOriginLongitude = 'Ship From Longitude';
    private const str IOShipmentDestinationZipCode = 'Ship To Zip Code';
    private const str IOShipmentDestinationCity = 'Ship To City';
    private const str IOShipmentDestinationState = 'Ship To Province/State';
    private const str IOShipmentDestinationCountry = 'Ship To Country/Region';
    private const str IOShipmentDestinationCountryRegionType = 'Ship To Country/Region Type';
    private const str IOShipmentDestinationStreet = 'Ship To Street';
    private const str IOShipmentDestinationLatitude = 'Ship To Latitude';
    private const str IOShipmentDestinationLongitude = 'Ship To Longitude';

    private const str IOInvoiceOriginZipCode = 'Invoice From Zip Code';
    private const str IOInvoiceOriginCity = 'Invoice From City';
    private const str IOInvoiceOriginState = 'Invoice From Province/State';
    private const str IOInvoiceOriginCountry = 'Invoice From Country/Region';
    private const str IOInvoiceOriginCountryRegionType = 'Invoice From Country/Region Type';
    private const str IOInvoiceOriginStreet = 'Invoice From Street';
    private const str IOInvoiceOriginLatitude = 'Invoice From Latitude';
    private const str IOInvoiceOriginLongitude = 'Invoice From Longitude';
    private const str IOInvoiceDestinationZipCode = 'Invoice To Zip Code';
    private const str IOInvoiceDestinationCity = 'Invoice To City';
    private const str IOInvoiceDestinationState = 'Invoice To Province/State';
    private const str IOInvoiceDestinationCountry = 'Invoice To Country/Region';
    private const str IOInvoiceDestinationCountryRegionType = 'Invoice To Country/Region Type';
    private const str IOInvoiceDestinationStreet = 'Invoice To Street';
    private const str IOInvoiceDestinationLatitude = 'Invoice To Latitude';
    private const str IOInvoiceDestinationLongitude = 'Invoice To Longitude';

    private const str IOFinancialDimension = 'Financial Dimension';
    private const str IOGeneralLedgerAccount = 'General Ledger Account';

    private const str IOInventorySite = 'Site';
    private const str IOWarehouse = 'Warehouse';

    private const str IOBaseAmount = 'Base Amount';
    private const str IOTaxAmount = 'Tax Amount';
    private const str IONondeductibleTaxAmount = 'Non-deductible Amount';
    private const str IOCashDiscountAmountForBase = 'Discount amount for tax base calculation';

    private const str IOTaxRate = 'Tax Rate';
    private const str IOExemptTax = 'Is Exempt';
    private const str IOReverseCharge = 'Is Reverse Charge';
    private const str IOUseTax = 'Is Use Tax';

    private const str DirectionOutput = 'Output';
    private const str DirectionInput = 'Input';

    private const str IOAccrueUseTax = 'Accrue Use Tax';
    private const str IOAccrueSalesTaxType = 'Accrue Sales Tax Type';
    private const str IOVendorChargedSalesTax = 'Vendor Charged Sales Tax';
    private const str IOVendorChargedTaxTolerancePercent = 'Vendor Charged Sales Tax Tolerance Percentage';
    private const str IOVendorChargedTaxToleranceAmount = 'Vendor Charged Sales Tax Tolerance Amount';
    private const str IOVendorChargedTaxAssessment = 'Vendor Charged Sales Tax Assessment';
    private const str IOVendorChargedTaxToleranceAssessment = 'Vendor Charged Sales Tax Tolerance Assessment';
    private const str IOClassifyAsPackingDuty = 'Classify as packing duty';

    private const str IOTaxModuleType = 'TaxModuleType';
    private const str IOTableId = 'TableId';
    private const str IOTableName = 'TableName';
    private const str IORecId = 'RecId';
    private const str IOLineCount = 'LineCount';
    private const str IOChargeCount = 'ChargeCount';
    private const str IOTaxLineCount = 'TaxLineCount';
    private const str IOOK = 'OK';
    private static boolean isTaxCodeAdjustmentEnabled;
    private static boolean isTaxIntegrationEnabledForTaxSolutionProvider = TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider();


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a document.
    /// </summary>
    /// <param name = "_document">The document.</param>
    /// <returns>Always true.</returns>
    protected internal static boolean calculateDocument(TaxIntegrationDocumentObject _document)
    {
        TaxServiceAPI.TaxableDocument request;
        TaxServiceAPI.TaxCalculationResultAggregator response;

        using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNamePrepare))
        {
            request = TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareRequest(_document);
        }
        using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNamePost))
        {
            response = TaxIntegrationCalculationActivityOnDocument_CalculationService::postRequest(_document, request);
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareContext(context, _document);
        }
        using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameProcess))
        {
            TaxIntegrationCalculationActivityOnDocument_CalculationService::processResponse(_document, response);
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareContext(context, _document);
            context.addCustomProperty(IOOK, response.OK.ToString());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareContext</Name>
				<Source><![CDATA[
    private static void prepareContext(SysInstrumentationActivityContext _context, TaxIntegrationDocumentObject _document)
    {
        _context
            .addCustomProperty(IOTaxModuleType, enum2Symbol(enumNum(TaxModuleType), _document.getSource()))
            .addCustomProperty(IOTableId, int2Str(_document.getLocalTableId()))
            .addCustomProperty(IOTableName, tableId2Name(_document.getLocalTableId()))
            .addCustomProperty(IORecId, int642Str(_document.getLocalRecId()))
            .addCustomProperty(IOTaxInclusive, enum2Symbol(enumNum(NoYes), _document.getIncludingTax()))
            .addCustomProperty(IOBusinessProcess, enum2Symbol(enumNum(TaxIntegrationBusinessProcess), _document.getBusinessProcess()));

        _context
            .addCustomProperty(IOLineCount, int2Str(_document.getLineCount()))
            .addCustomProperty(IOChargeCount, int2Str(_document.countAllCharges()))
            .addCustomProperty(IOTaxLineCount, int2Str(_document.countAllTaxLines()));

        _context
            .addCustomProperty(IOCountry, SysCountryRegionCode::countryInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a request based on the current properties of the source document.
    /// </summary>
    /// <param name = "_document">The source document.</param>
    /// <returns>The request.</returns>
    protected static TaxServiceAPI.TaxableDocument prepareRequest(TaxIntegrationDocumentObject _document)
    {
        var taxableDocument = new TaxServiceAPI.TaxableDocument();
        TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareTaxableDocumentHeader(taxableDocument, _document);
        _document.setTaxableDocument(taxableDocument);
        return taxableDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxableDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a taxable document header based on the current properties of the source document.
    /// </summary>
    /// <param name = "_destination">The destination document.</param>
    /// <param name = "_source">The source document.</param>
    protected static void prepareTaxableDocumentHeader(TaxServiceAPI.TaxableDocument _destination, TaxIntegrationDocumentObject _source)
    {
        var taxableDocumentHeader = new TaxServiceAPI.TaxableDocumentHeader();
        taxableDocumentHeader.TransactionHeaderId = _source.getLocalId();
        var taxableDocumentHeaderWrapper = new TaxServiceAPI.TaxableDocumentHeaderWrapper();
        taxableDocumentHeaderWrapper.Value = taxableDocumentHeader;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObject(taxableDocumentHeaderWrapper, _source);

        SetEnumerator sourceChargeSet = _source.getChargeSet().getEnumerator();
        while (sourceChargeSet.moveNext())
        {
            var currentSourceCharge = sourceChargeSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareTaxableDocumentChargeV2(taxableDocumentHeaderWrapper, currentSourceCharge, IOLineTypeDocumentCharge);
        }

        SetEnumerator sourceLineSet = _source.getLineSet().getEnumerator();
        while (sourceLineSet.moveNext())
        {
            var currentSourceLine = sourceLineSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareTaxableDocumentLine(taxableDocumentHeaderWrapper, currentSourceLine);
        }

        _destination.Header = taxableDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c></param>
    protected static void copyToTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObject(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        switch (_source.getDirection())
        {
            case TaxIntegrationDirection::Sales:
                _destination.SetField(IOTaxDirection, DirectionOutput);
                break;
            case TaxIntegrationDirection::Purchase:
                _destination.SetField(IOTaxDirection, DirectionInput);
                break;
        }

        _destination.SetField(IOTaxInclusive, _source.getIncludingTax() == NoYes::Yes);
        _destination.SetField(IOBusinessProcess, enum2Symbol(enumNum(TaxIntegrationBusinessProcess), _source.getBusinessProcess()));
        _destination.SetField(IOCurrencyCode, _source.getTransactionCurrencyCode());

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObjectForAccountFields(_destination, _source);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOLegalEntityCode, _source.getCompany());

            switch (_source.getLocalTableId())
            {
                case tableNum(PurchTable):
                    TaxIntegrationCalculationActivityOnDocument_CalculationService::processDatewithDocumentStatusForPurchTable(_destination, _source);
                    break;
                case tableNum(PurchParmTable):
                    TaxIntegrationCalculationActivityOnDocument_CalculationService::processDatewithDocumentStatusForPurchParmTable(_destination, _source);
                    break;
                case tableNum(VendInvoiceInfoTable):
                    _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));
                    _destination.SetField(IOInvoiceReceivedDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getReceivedDate()));
                    _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVATRegisterDate()));
                    _destination.SetField(IODateOfVendorVATRegister, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVendorVATDate()));
                    break;
                case tableNum(SalesTable):
                    _destination.SetField(IOCreatedDateTime, DateTimeUtil::toStr(_source.getCreatedDateTime()));
                    break;
                case tableNum(SalesParmTable):
                    TaxIntegrationCalculationActivityOnDocument_CalculationService::processDatewithDocumentStatusForSalesParmTable(_destination, _source);
                    break;
                case tableNum(CustInvoiceJour):
                    _destination.SetField(IOCashDiscDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getCashDiscDate()));
                    _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));
                    _destination.SetField(IODueDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDueDate()));
                    _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getInvoiceDate()));
                    break;
                case tableNum(SalesQuotationTable):
                    _destination.SetField(IOCreatedDateTime, DateTimeUtil::toStr(_source.getCreatedDateTime()));
                    _destination.SetField(IOReceiptDateRequested, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getReceiptDateRequested()));
                    _destination.SetField(IOShippingDateRequested, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getShippingDateRequested()));
                    break;
                case tableNum(CustInvoiceTable):
                    _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getInvoiceDate()));
                    _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));
                    _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVATRegisterDate()));
                    break;
                case tableNum(PurchReqTable):
                    _destination.SetField(IORequestedDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getRequestedDate()));
                    break;
                case tableNum(InventTransferTable):
                case tableNum(InventTransferParmTable):
                case tableNum(InventTransferJour):
                    _destination.SetField(IOShipDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getShipDate()));
                    _destination.SetField(IOReceiveDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getReceiveDate()));
                    break;
                case tableNum(PurchRFQCaseTable):
                case tableNum(PurchRFQTable):
                    _destination.SetField(IODeliveryDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDeliveryDate()));
                    break;
                case tableNum(ProjProposalJour):
                    _destination.SetField(IOCreatedDateTime, DateTimeUtil::toStr(_source.getCreatedDateTime()));
                    _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getInvoiceDate()));
                    _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVATRegisterDate()));
                    _destination.SetField(IOCashDiscDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getCashDiscDate()));
                    break;
                case tableNum(ProjAdvancedJournal):
                    _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVATRegisterDate()));
                    _destination.SetField(IOTransactionDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getTransactionDate()));
                    _destination.SetField(IOAccountingDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getAccountingDate()));
                    break;

                default:
                    break;
            }
        }

        _destination.SetField(IOShipmentOriginZipCode, _source.getShipmentOriginAddress().getZipCode());
        _destination.SetField(IOShipmentOriginCity, _source.getShipmentOriginAddress().getCity());
        _destination.SetField(IOShipmentOriginState, _source.getShipmentOriginAddress().getState());
        _destination.SetField(IOShipmentOriginCountry, _source.getShipmentOriginAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentOriginStreet, _source.getShipmentOriginAddress().getStreet());
            _destination.SetField(IOShipmentOriginLatitude, _source.getShipmentOriginAddress().getLatitude());
            _destination.SetField(IOShipmentOriginLongitude, _source.getShipmentOriginAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentOriginAddressGroupId, _source.getShipmentOriginAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentOriginCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentOriginAddress().getCountryRegionType()));
        _destination.SetField(IOShipmentDestinationZipCode, _source.getShipmentDestinationAddress().getZipCode());
        _destination.SetField(IOShipmentDestinationCity, _source.getShipmentDestinationAddress().getCity());
        _destination.SetField(IOShipmentDestinationState, _source.getShipmentDestinationAddress().getState());
        _destination.SetField(IOShipmentDestinationCountry, _source.getShipmentDestinationAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentDestinationStreet, _source.getShipmentDestinationAddress().getStreet());
            _destination.SetField(IOShipmentDestinationLatitude, _source.getShipmentDestinationAddress().getLatitude());
            _destination.SetField(IOShipmentDestinationLongitude, _source.getShipmentDestinationAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentDestinationAddressGroupId, _source.getShipmentDestinationAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentDestinationCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentDestinationAddress().getCountryRegionType()));

        _destination.SetField(IOInvoiceOriginZipCode, _source.getInvoiceOriginAddress().getZipCode());
        _destination.SetField(IOInvoiceOriginCity, _source.getInvoiceOriginAddress().getCity());
        _destination.SetField(IOInvoiceOriginState, _source.getInvoiceOriginAddress().getState());
        _destination.SetField(IOInvoiceOriginCountry, _source.getInvoiceOriginAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOInvoiceOriginStreet, _source.getInvoiceOriginAddress().getStreet());
            _destination.SetField(IOInvoiceOriginLatitude, _source.getInvoiceOriginAddress().getLatitude());
            _destination.SetField(IOInvoiceOriginLongitude, _source.getInvoiceOriginAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::InvoiceOriginAddressGroupId, _source.getInvoiceOriginAddress().getAddressGroupId());
        }
        _destination.SetField(IOInvoiceOriginCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getInvoiceOriginAddress().getCountryRegionType()));
        _destination.SetField(IOInvoiceDestinationZipCode, _source.getInvoiceDestinationAddress().getZipCode());
        _destination.SetField(IOInvoiceDestinationCity, _source.getInvoiceDestinationAddress().getCity());
        _destination.SetField(IOInvoiceDestinationState, _source.getInvoiceDestinationAddress().getState());
        _destination.SetField(IOInvoiceDestinationCountry, _source.getInvoiceDestinationAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOInvoiceDestinationStreet, _source.getInvoiceDestinationAddress().getStreet());
            _destination.SetField(IOInvoiceDestinationLatitude, _source.getInvoiceDestinationAddress().getLatitude());
            _destination.SetField(IOInvoiceDestinationLongitude, _source.getInvoiceDestinationAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::InvoiceDestinationAddressGroupId, _source.getInvoiceDestinationAddress().getAddressGroupId());
        }
        _destination.SetField(IOInvoiceDestinationCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getInvoiceDestinationAddress().getCountryRegionType()));

        _destination.setField(IOInventorySite, _source.getInventory().getSite());
        _destination.SetField(IOWarehouse, _source.getInventory().getWarehouse());

        _destination.SetField(IODeliveryTerm, _source.getDeliveryTerm());

        _destination.SetField(IOCashDiscountAmount, _source.getCashDiscountAmount());
        _destination.SetField(IOCashDiscountPercent, _source.getCashDiscountPercent());

        if (_source.isJournal())
        {
            TaxIntegrationJournalDocumentObject journalDocument = _source as TaxIntegrationJournalDocumentObject;
            _destination.SetField(IOJournalName, journalDocument.getJournalName());
            if (_source.isFieldSet(TaxIntegrationRecordFieldConstants::IsPrePaymentJournal))
            {
                _destination.SetField(TaxIntegrationRecordFieldConstants::IsPrePaymentJournal,
                    enum2Symbol(enumNum(NoYes), journalDocument.isPrePaymentJournalVoucher()));
            }

            if (isTaxIntegrationEnabledForTaxSolutionProvider)
            {
                _destination.SetField(IOJournalType, enum2Symbol(enumNum(LedgerJournalType), journalDocument.getJournalType()));
                TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentWrapperFromTaxIntegrationJournalDocumentObjectByHeader(_destination, _source);
            }
        }

        if (_source.isFieldSet(TaxIntegrationRecordFieldConstants::SalesType))
        {
            _destination.SetField(IOOrderType, enum2Symbol(enumNum(SalesType), _source.getSalesType()));
        }

        if (_source.isFieldSet(TaxIntegrationRecordFieldConstants::PurchaseType))
        {
            _destination.SetField(IOOrderType, enum2Symbol(enumNum(PurchaseType), _source.getPurchaseType()));
        }

        if (_source.isFieldSet(TaxIntegrationRecordFieldConstants::DirectDelivery))
        {
            _destination.SetField(TaxIntegrationRecordFieldConstants::DirectDelivery, enum2Symbol(enumNum(NoYes), _source.getDirectDelivery()));
        }

        if (_source.isFieldSet(TaxIntegrationRecordFieldConstants::IntercompanyDirectDelivery))
        {
            _destination.SetField(TaxIntegrationRecordFieldConstants::IntercompanyDirectDelivery, enum2Symbol(enumNum(NoYes), _source.getIntercompanyDirectDelivery()));
        }

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOAccrueUseTax, enum2Symbol(enumNum(NoYes), _source.getAccrueUseTax()));
            _destination.SetField(IOAccrueSalesTaxType, enum2Symbol(enumNum(TaxAccrueSalesTaxType), _source.getAccrueSalesTaxType()));
            _destination.SetField(IOVendorChargedSalesTax , _source.getVendorChargedSalesTax());

            _destination.SetField(IOVendorChargedTaxTolerancePercent , _source.getVendorChargedTaxTolerancePercent());
            _destination.SetField(IOVendorChargedTaxToleranceAmount , _source.getVendorChargedTaxToleranceAmount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxableDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a taxable document line based on the current properties of the source line.
    /// </summary>
    /// <param name = "_destination">The destination document.</param>
    /// <param name = "_source">The source line.</param>
    protected static void prepareTaxableDocumentLine(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationLineObject _source)
    {
        if (_source.shouldSendToTaxService())
        {
            var taxableDocumentLine = new TaxServiceAPI.TaxableDocumentLine();
            taxableDocumentLine.TransactionLineId = _source.getLocalId();
            var taxableDocumentLineWrapper = new TaxServiceAPI.TaxableDocumentLineWrapper();
            taxableDocumentLineWrapper.Value = taxableDocumentLine;

            taxableDocumentLineWrapper.SetField(IOLineType, IOLineTypeLine);
            TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByLine(taxableDocumentLineWrapper, _source);
            _destination.AddLine(taxableDocumentLine);
        }

        // Process document line charge when tax disable on document line. eg: PurchRFQCaseLine.
        SetEnumerator sourceChargeSet = _source.getChargeSet().getEnumerator();
        while (sourceChargeSet.moveNext())
        {
            var currentSourceCharge = sourceChargeSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareTaxableDocumentChargeV2(_destination, currentSourceCharge, IOLineTypeLineCharge);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxableDocumentChargeV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a taxable document line based on the current properties of the source charge.
    /// </summary>
    /// <param name = "_destination">The destination header (wrapper).</param>
    /// <param name = "_source">The source charge to process.</param>
    /// <param name = "_lineType">The line type, indicates line charge or header charge.</param>
    protected static void prepareTaxableDocumentChargeV2(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationLineObject _source, str _lineType)
    {
        if (_source.shouldSendToTaxService())
        {
            var taxableDocumentLine = new TaxServiceAPI.TaxableDocumentLine();
            taxableDocumentLine.TransactionLineId = _source.getLocalId();
            var taxableDocumentLineWrapper = new TaxServiceAPI.TaxableDocumentLineWrapper();
            taxableDocumentLineWrapper.Value = taxableDocumentLine;

            taxableDocumentLineWrapper.SetField(IOLineType, _lineType);
            if (_lineType == IOLineTypeDocumentCharge)
            {
                TaxIntegrationDocumentObject parentDocument = _source.getParentRecord() as TaxIntegrationDocumentObject;
                TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentLineWrapperFromTaxIntegrationDocumentObject(taxableDocumentLineWrapper, parentDocument);
            }
            else
            {
                TaxIntegrationLineObject parentLine = _source.getParentRecord() as TaxIntegrationLineObject;
                TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByLine(taxableDocumentLineWrapper, parentLine);
            }

            TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByCharge(taxableDocumentLineWrapper, _source);

            _destination.AddLine(taxableDocumentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>date</c> to <c>str</c>.
    /// </summary>
    /// <param name = "value"><c>date</c>.</param>
    /// <returns><c>str</c>.</returns>
    protected static str convertDateToStr(date value)
    {
        return System.String::Format(IODateFormat, year(value), mthOfYr(value), dayOfMth(value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxableDocumentLineWrapperFromTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentLineWrapper</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentLineWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c>.</param>
    protected static void copyToTaxableDocumentLineWrapperFromTaxIntegrationDocumentObject(Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxableDocumentLineWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        _destination.SetField(IODeliveryTerm, _source.getDeliveryTerm());

        _destination.SetField(IOCurrencyCode, _source.getTransactionCurrencyCode());

        _destination.SetField(IOShipmentOriginZipCode, _source.getShipmentOriginAddress().getZipCode());
        _destination.SetField(IOShipmentOriginCity, _source.getShipmentOriginAddress().getCity());
        _destination.SetField(IOShipmentOriginState, _source.getShipmentOriginAddress().getState());
        _destination.SetField(IOShipmentOriginCountry, _source.getShipmentOriginAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentOriginStreet, _source.getShipmentOriginAddress().getStreet());
            _destination.SetField(IOShipmentOriginLatitude, _source.getShipmentOriginAddress().getLatitude());
            _destination.SetField(IOShipmentOriginLongitude, _source.getShipmentOriginAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentOriginAddressGroupId, _source.getShipmentOriginAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentOriginCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentOriginAddress().getCountryRegionType()));
        _destination.SetField(IOShipmentDestinationZipCode, _source.getShipmentDestinationAddress().getZipCode());
        _destination.SetField(IOShipmentDestinationCity, _source.getShipmentDestinationAddress().getCity());
        _destination.SetField(IOShipmentDestinationState, _source.getShipmentDestinationAddress().getState());
        _destination.SetField(IOShipmentDestinationCountry, _source.getShipmentDestinationAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentDestinationStreet, _source.getShipmentDestinationAddress().getStreet());
            _destination.SetField(IOShipmentDestinationLatitude, _source.getShipmentDestinationAddress().getLatitude());
            _destination.SetField(IOShipmentDestinationLongitude, _source.getShipmentDestinationAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentDestinationAddressGroupId, _source.getShipmentDestinationAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentDestinationCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentDestinationAddress().getCountryRegionType()));

        _destination.setField(IOInventorySite, _source.getInventory().getSite());
        _destination.SetField(IOWarehouse, _source.getInventory().getWarehouse());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets financial dimension for tax document line. The value will be sent to tax service then.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentLineWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationLineObject</c>.</param>
    private static void setFinancialDimension(TaxServiceAPI.TaxableDocumentLineWrapper _destination, TaxIntegrationLineObject _source)
    {
        if (_source.getAncestorDocument().getSolutionProviderType() == TaxSolutionProviderType::ISV)
        {
            var dictFinancialDimension = _source.getAncestorDocument().getContext().getFinancialDimension(_source.getLedgerDimension());

            _destination.SetField(IOFinancialDimension, dictFinancialDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentLineWrapper</c> from <c>TaxIntegrationLineObject</c> by line.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentLineWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationLineObject</c>.</param>
    protected static void copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByLine(TaxServiceAPI.TaxableDocumentLineWrapper _destination, TaxIntegrationLineObject _source)
    {
        _destination.SetField(IOItemCode, _source.getItemId());
        _destination.SetField(IOProductVariant, _source.getProductVariant());
        _destination.SetField(IOItemType, enum2Symbol(enumNum(ItemType), _source.getItemType()));
        _destination.SetField(IOItemGroup, _source.getItemGroup());
        _destination.SetField(IOQuantity, _source.getQuantity());
        _destination.SetField(IOUnit, _source.getUnit());
        _destination.setField(IOCategoryCode, _source.getItemCategoryName());
        _destination.SetField(IOCommodityCode, _source.getIntrastatCommodityCode());

        _destination.SetField(IODirectDelivery, enum2Symbol(enumNum(NoYes),_source.getDirectDelivery()));
        _destination.SetField(IODeliveryTerm, _source.getDeliveryTerm());

        _destination.SetField(IOTransactionAmount, _source.getTransactionAmount());
        _destination.SetField(IOCostAmount, _source.getCostAmount());
        _destination.SetField(IOCurrencyCode, _source.getTransactionCurrencyCode());
        _destination.SetField(IOTransactionDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getCalculationDateV2()));

        _destination.SetField(IOShipmentOriginZipCode, _source.getShipmentOriginAddress().getZipCode());
        _destination.SetField(IOShipmentOriginCity, _source.getShipmentOriginAddress().getCity());
        _destination.SetField(IOShipmentOriginState, _source.getShipmentOriginAddress().getState());
        _destination.SetField(IOShipmentOriginCountry, _source.getShipmentOriginAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentOriginStreet, _source.getShipmentOriginAddress().getStreet());
            _destination.SetField(IOShipmentOriginLatitude, _source.getShipmentOriginAddress().getLatitude());
            _destination.SetField(IOShipmentOriginLongitude, _source.getShipmentOriginAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentOriginAddressGroupId, _source.getShipmentOriginAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentOriginCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentOriginAddress().getCountryRegionType()));
        _destination.SetField(IOShipmentDestinationZipCode, _source.getShipmentDestinationAddress().getZipCode());
        _destination.SetField(IOShipmentDestinationCity, _source.getShipmentDestinationAddress().getCity());
        _destination.SetField(IOShipmentDestinationState, _source.getShipmentDestinationAddress().getState());
        _destination.SetField(IOShipmentDestinationCountry, _source.getShipmentDestinationAddress().getCountry());
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.SetField(IOShipmentDestinationStreet, _source.getShipmentDestinationAddress().getStreet());
            _destination.SetField(IOShipmentDestinationLatitude, _source.getShipmentDestinationAddress().getLatitude());
            _destination.SetField(IOShipmentDestinationLongitude, _source.getShipmentDestinationAddress().getLongitude());
            _destination.SetField(TaxIntegrationAddressValidationConstants::ShipmentDestinationAddressGroupId, _source.getShipmentDestinationAddress().getAddressGroupId());
        }
        _destination.SetField(IOShipmentDestinationCountryRegionType,
            enum2Symbol(enumNum(CountryRegionType), _source.getShipmentDestinationAddress().getCountryRegionType()));

        _destination.setField(IOInventorySite, _source.getInventory().getSite());
        _destination.SetField(IOWarehouse, _source.getInventory().getWarehouse());

        _destination.SetField(IOTaxGroup, _source.getTaxGroup());
        _destination.SetField(IOItemTaxGroup, _source.getTaxItemGroup());
        _destination.SetField(IOProjectID, _source.getProjectId());
        _destination.SetField(IOProjectCategory, _source.getProjectCategory());

        TaxIntegrationCalculationActivityOnDocument_CalculationService::setFinancialDimension(_destination, _source);

        if (_source.getAncestorDocument().isJournal())
        {
            TaxIntegrationJournalLineObject journalLine = _source;
            switch (journalLine.getDirection())
            {
                case TaxIntegrationDirection::Sales:
                    _destination.SetField(IOTaxDirection, DirectionOutput);
                    break;
                case TaxIntegrationDirection::Purchase:
                    _destination.SetField(IOTaxDirection, DirectionInput);
                    break;
            }

            if (isTaxIntegrationEnabledForTaxSolutionProvider)
            {
                _destination.SetField(IOGeneralLedgerAccount, journalLine.getGeneralLedgerAccount());
            }
        }

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            switch (_source.getLocalTableId())
            {
                case tableNum(CustInvoiceLine):
                case tableNum(ProjAdvancedJournalLine):
                    _destination.SetField(IOGeneralLedgerAccount, _source.getGeneralLedgerAccount());
                    break;
                case tableNum(PurchReqLine):
                    _destination.SetField(IORequestedDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getRequestedDate()));
                    break;
                case tableNum(InventTransferLine):
                case tableNum(InventTransferParmLine):
                case tableNum(InventTransferJourLine):
                    _destination.SetField(IOShipDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getShipDate()));
                    _destination.SetField(IOReceiveDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getReceiveDate()));
                    break;
                case tableNum(PurchRFQCaseLine):
                case tableNum(PurchRFQLine):
                    _destination.SetField(IODeliveryDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDeliveryDate()));
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentLineWrapper</c> from <c>TaxIntegrationLineObject</c> by charge.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentLineWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationLineObject</c>.</param>
    protected static void copyToTaxableDocumentLineWrapperFromTaxIntegrationLineObjectByCharge(TaxServiceAPI.TaxableDocumentLineWrapper _destination, TaxIntegrationLineObject _source)
    {
        _destination.SetField(IOChargeCode, _source.getItemId());
        _destination.SetField(IOTransactionAmount, _source.getTransactionAmount());

        if (TaxIntegrationChargeByQuantityFlight::instance().isEnabled())
        {
            // The quantity of line charge was copied from line by method <c>this.prepareTaxableDocumentChargeV2</c>. It should be reset back since no quantity for charge line.
            _destination.SetField(IOQuantity, 0);
        }

        _destination.SetField(IOCostAmount, 0);
        _destination.SetField(IOCurrencyCode, _source.getTransactionCurrencyCode());
        _destination.SetField(IOTransactionDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getCalculationDateV2()));
        _destination.SetField(IOTaxGroup, _source.getTaxGroup());
        _destination.SetField(IOItemTaxGroup, _source.getTaxItemGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the request as a taxable document.
    /// </summary>
    /// <param name = "_document">The document to reference.</param>
    /// <param name = "_taxableDocument">The request as a taxable document.</param>
    /// <returns>The response.</returns>
    protected static TaxServiceAPI.TaxCalculationResultAggregator postRequest(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxableDocument _taxableDocument)
    {
        TaxIntegrationSetting_CalculationService calculationServiceSetting = _document.getTaxIntegrationSetting() as TaxIntegrationSetting_CalculationService;

        TaxServiceAPI.TaxCalculationInput taxCalculationInput 
            = new TaxServiceAPI.TaxCalculationInput(_taxableDocument, calculationServiceSetting.getTaxCalculationParameter());

        if (TaxIntegrationAdjustment::isEnabledForTransaction(_document.getLocalTableId(), _document.getLocalRecId()))
        {
            isTaxCodeAdjustmentEnabled = true;
        }

        taxCalculationInput.Adjustment = new TaxServiceAPI.TaxAdjustment();
        TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareAdjustment(taxCalculationInput.Adjustment, _document);

        TaxServiceFeatureTypes featureType = TaxIntegrationCalculationServiceUtils::getTaxServiceFeatureTypeBySolutionProviderType(
            _document.getSolutionProviderType());

        var proxy = new  TaxEngineServicePlusProxy();
        return proxy.calculate(
            calculationServiceSetting.getFeatureSetupId(),
            taxCalculationInput,
            featureType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the response,
    /// and saves the results back to the document.
    /// </summary>
    /// <param name = "_document">The document to save the results.</param>
    /// <param name = "_response">The response to process.</param>
    /// <returns>true if the operation is successful; otherwise false.</returns>
    protected static boolean processResponse(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxCalculationResultAggregator _response)
    {
        if (!_response.OK)
        {
            _document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:RemoteExceptionReceived"), _response.Exception));
            return false;
        }
        var calculationResult = _response.Value;
        _document.setRemoteId(calculationResult.Id);

        var taxDocument = calculationResult.TaxDocument;
        var taxDocumentHeader = taxDocument.Header;
        return TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentHeader(_document, taxDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax document header,
    /// and saves the results back to the document.
    /// </summary>
    /// <param name = "_document">The document to save the results.</param>
    /// <param name = "_taxDocumentHeader">The tax document hader to process.</param>
    /// <returns>true if the operation is successful; otherwise false.</returns>
    protected static boolean processTaxDocumentHeader(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxDocumentHeader _taxDocumentHeader)
    {
        var taxDocumentHeaderWrapper = new TaxServiceAPI.TaxDocumentHeaderWrapper();
        taxDocumentHeaderWrapper.Value = _taxDocumentHeader;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxIntegrationDocumentObjectFromTaxDocumentHeaderWrapper(_document, taxDocumentHeaderWrapper);

        TaxIntegrationCalculationActivityOnDocument_CalculationService::processCalculationError(_document, taxDocumentHeaderWrapper.GetErrors());

        TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxJurisdictionParameters(_document, _taxDocumentHeader);

        using (var taxDocumentLines = taxDocumentHeaderWrapper.GetLines())
        {
            while (taxDocumentLines.MoveNext())
            {
                var current = taxDocumentLines.Current;

                // Checks if it is header charge, if it is, processes it.
                if (_document.checkCharge(current.TransactionLineId))
                {
                    if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentCharge(_document, current))
                    {
                        return false;
                    }
                    continue;
                }

                // Checks if it is line charge, if it is, processes it.
                if (_document.checkLineCharge(current.TransactionLineId))
                {
                    if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentLineCharge(
                        _document.getLineFromLineCharge(current.TransactionLineId),
                        current))
                    {
                        return false;
                    }
                    continue;
                }

                // Checks if it is line, if it is, processes it.
                if (_document.checkLine(current.TransactionLineId))
                {
                    TaxIntegrationLineObject destinationLine = _document.getLine(current.TransactionLineId);
                    SelectableDataArea company = destinationLine.getCompany() ? destinationLine.getCompany() : curExt();

                    changecompany (company)
                    {
                        if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentLine(_document, current))
                        {
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxIntegrationDocumentObjectFromTaxDocumentHeaderWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxIntegrationDocumentObject</c> from <c>TaxDocumentHeaderWrapper</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_source"><c>TaxDocumentHeaderWrapper</c>.</param>
    protected static void copyToTaxIntegrationDocumentObjectFromTaxDocumentHeaderWrapper(TaxIntegrationDocumentObject _destination, TaxServiceAPI.TaxDocumentHeaderWrapper _source)
    {
        TaxGroup taxGroup = TaxIntegrationCalculationActivityOnDocument_CalculationService::normalizeTaxGroup(
            _source.GetMeasure(IOTaxGroupMeasure),
            _destination);
        _destination.setTaxGroup(taxGroup);

        str ioTaxId;
        str ioCountryRegionId;

        TaxIntegrationPartyType partyType = _destination.getPartyType();
        if (partyType == TaxIntegrationPartyType::Cust)
        {
            ioTaxId = IOCustomerTaxId;
            ioCountryRegionId = IOCustomerCountryRegionId;
        }
        else if (partyType == TaxIntegrationPartyType::Vend)
        {
            ioTaxId = IOVendorTaxId;
            ioCountryRegionId = IOVendorCountryRegionId;
        }

        // This is to distinguish null and empty string.
        // If null value is returned, we should not check party Tax ID.
        // If empty string is returned, we should follow the normal process to check party Tax ID.
        if (_source.GetMeasure(ioTaxId) == null)
        {
            _destination.setPartyTaxIdReturned(false);
        }
        else
        {
            _destination.setPartyTaxIdReturned(true);
            _destination.setPartyTaxId(_source.GetMeasure(ioTaxId));
            _destination.setPartyCountryRegionId(_source.GetMeasure(ioCountryRegionId));
        }

        _destination.setCalculatedListCodeName(_source.GetMeasure(IOListCode));

        if (isTaxIntegrationEnabledForTaxSolutionProvider 
            && _destination.getAccrueSalesTaxType() == TaxAccrueSalesTaxType::Advanced)
        {
            _destination.setVendorChargedTaxAssessment(TaxIntegrationEnumUtility::convertTaxVendorChargedTaxAssessmentFromString(_source.GetMeasure(IOVendorChargedTaxAssessment)));
            _destination.setVendorChargedTaxTolerance(TaxIntegrationEnumUtility::convertTaxVendorChargedTaxToleranceFromString(_source.GetMeasure(IOVendorChargedTaxToleranceAssessment)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxJurisdictionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax parameters that return from tax calculation service
    /// and saves the results back to the document.
    /// </summary>
    /// <param name = "_document">The document to save the results.</param>
    /// <param name = "_taxDocumentHeader">The tax document hader to process.</param>
    protected static void processTaxJurisdictionParameters(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxDocumentHeader _taxDocumentHeader)
    {
        var taxDocumentHeaderWrapper = new TaxServiceAPI.TaxDocumentHeaderWrapper();
        taxDocumentHeaderWrapper.Value = _taxDocumentHeader;

        TaxIntegrationTaxJurisdictionParameters taxJurisdictionParameters = _document.getTaxJurisdictionParameters();

        str taxJurisdiction = taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::TaxJurisdiction);
        taxJurisdictionParameters.setParameter(
            TaxIntegrationTaxJurisdictionParameters::TaxJurisdiction,
            taxJurisdiction ? taxJurisdiction : "@SYS26467");
        taxJurisdictionParameters.setParameter(
            TaxIntegrationTaxJurisdictionParameters::ParameterReverseTaxOnCashDisc, 
            taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterReverseTaxOnCashDisc));
        taxJurisdictionParameters.setParameter(
            TaxIntegrationTaxJurisdictionParameters::ParameterDeductCashDiscBeforeTaxCalculation,
            taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterDeductCashDiscBeforeTaxCalculation));
        taxJurisdictionParameters.setParameter(
            TaxIntegrationTaxJurisdictionParameters::ParameterCustCalcCashDiscOnAmountInclTax,
            taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterCustCalcCashDiscOnAmountInclTax));
        taxJurisdictionParameters.setParameter(
            TaxIntegrationTaxJurisdictionParameters::ParameterVendCalcCashDiscOnAmountInclTax,
            taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterVendCalcCashDiscOnAmountInclTax));

        // TaxIntegrationTaxJurisdictionParameters::ParameterCalcCashDiscOnAmountInclTax is only used by journal currently
        if (_document.getBusinessProcess() == TaxIntegrationBusinessProcess::Journal)
        {
            if (_document.getAccountType() == LedgerJournalACType::Cust)
            {
                taxJurisdictionParameters.setParameter(
                    TaxIntegrationTaxJurisdictionParameters::ParameterCalcCashDiscOnAmountInclTax,
                    taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterCustCalcCashDiscOnAmountInclTax));
            }
            else if (_document.getAccountType() == LedgerJournalACType::Vend)
            {
                taxJurisdictionParameters.setParameter(
                    TaxIntegrationTaxJurisdictionParameters::ParameterCalcCashDiscOnAmountInclTax,
                    taxDocumentHeaderWrapper.GetMeasure(TaxIntegrationTaxJurisdictionParameters::ParameterVendCalcCashDiscOnAmountInclTax));
            }
            else
            {
                // set default value false for other journal types
                taxJurisdictionParameters.setParameter(
                    TaxIntegrationTaxJurisdictionParameters::ParameterCalcCashDiscOnAmountInclTax,
                    false);
            }
        }

        if (taxJurisdictionParameters.checkParameters(_document))
        {
            TaxCache::insertValue(
                TaxCacheScope::TaxJurisdictionParameter,
                TaxIntegrationTaxJurisdictionParameters::cacheKey(_document.getLocalTableId(), _document.getLocalRecId()),
                taxJurisdictionParameters.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax document line,
    /// and saves the results back to the document.
    /// </summary>
    /// <param name = "_document">The document to save the results.</param>
    /// <param name = "_taxDocumentLine">The tax document line to process.</param>
    /// <returns>The result of the operation.</returns>
    protected static TaxIntegrationLineObject processTaxDocumentLine(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxDocumentLine _taxDocumentLine)
    {
        if (!_document.checkLine(_taxDocumentLine.TransactionLineId))
        {
            _document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:LineOnDocumentNotFound", _taxDocumentLine.TransactionLineId, _document.getLocalId())));
            TaxIntegrationLineObject emptyLine;
            return emptyLine;
        }
        TaxIntegrationLineObject destinationLine = _document.getLine(_taxDocumentLine.TransactionLineId);

        var taxDocumentLineWrapper = new TaxServiceAPI.TaxDocumentLineWrapper();
        taxDocumentLineWrapper.Value = _taxDocumentLine;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::processCalculationError(_document, taxDocumentLineWrapper.GetErrors());

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxIntegrationLineObjectFromTaxDocumentLineWrapper(destinationLine, taxDocumentLineWrapper);

        using (var taxCodes = taxDocumentLineWrapper.GetTaxCodes())
        {
            while (taxCodes.MoveNext())
            {
                str taxCode = taxCodes.Current;
                var taxDocumentTaxCode = taxDocumentLineWrapper.GetTaxCodeLine(taxCode);
                if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxCodeLine(destinationLine, taxCode, taxDocumentTaxCode))
                {
                    TaxIntegrationLineObject emptyLine;
                    return emptyLine;
                }
            }
        }

        if (TaxIntegrationAdjustment::isEnabledForTransaction(_document.getLocalTableId(), _document.getLocalRecId())
            && taxDocumentLineWrapper.GetAdjustment())
        {
            TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentLineAdjustment(destinationLine, taxDocumentLineWrapper.GetAdjustment());
        }

        return destinationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax document charge,
    /// and saves the results back to the document.
    /// </summary>
    /// <param name = "_document">The document to save the results.</param>
    /// <param name = "_taxDocumentCharge">The tax document charge to process.</param>
    /// <returns>The result of the operation.</returns>
    protected static TaxIntegrationLineObject processTaxDocumentCharge(TaxIntegrationDocumentObject _document, TaxServiceAPI.TaxDocumentLine _taxDocumentCharge)
    {
        if (!_document.checkCharge(_taxDocumentCharge.TransactionLineId))
        {
            _document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:ChargeOnDocumentNotFound", _taxDocumentCharge.TransactionLineId, _document.getLocalId())));
            TaxIntegrationLineObject emptyCharge;
            return emptyCharge;
        }
        TaxIntegrationLineObject destinationCharge = _document.getCharge(_taxDocumentCharge.TransactionLineId);

        var taxDocumentChargeWrapper = new TaxServiceAPI.TaxDocumentLineWrapper();
        taxDocumentChargeWrapper.Value = _taxDocumentCharge;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxIntegrationLineObjectFromTaxDocumentLineWrapper(destinationCharge, taxDocumentChargeWrapper);

        TaxIntegrationCalculationActivityOnDocument_CalculationService::processCalculationError(_document, taxDocumentChargeWrapper.GetErrors());

        using (var taxCodes = taxDocumentChargeWrapper.GetTaxCodes())
        {
            while (taxCodes.MoveNext())
            {
                str taxCode = taxCodes.Current;
                var taxDocumentTaxCode = taxDocumentChargeWrapper.GetTaxCodeLine(taxCode);
                if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxCodeLine(destinationCharge, taxCode, taxDocumentTaxCode))
                {
                    TaxIntegrationLineObject emptyCharge;
                    return emptyCharge;
                }
            }
        }

        if (TaxIntegrationAdjustment::isEnabledForTransaction(_document.getLocalTableId(), _document.getLocalRecId())
            && taxDocumentChargeWrapper.GetAdjustment())
        {
            TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentLineAdjustment(destinationCharge, taxDocumentChargeWrapper.GetAdjustment());
        }

        return destinationCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxDocumentLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax document line charge,
    /// and saves the results back to the line.
    /// </summary>
    /// <param name = "_line">The line to save the results.</param>
    /// <param name = "_taxDocumentCharge">The tax document charge to process.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static TaxIntegrationLineObject processTaxDocumentLineCharge(TaxIntegrationLineObject _line, TaxServiceAPI.TaxDocumentLine _taxDocumentCharge)
    {
        if (!_line.checkCharge(_taxDocumentCharge.TransactionLineId))
        {
            _line.getAncestorDocument().setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:ChargeOnLineNotFound", _taxDocumentCharge.TransactionLineId, _line.getLocalId())));
            TaxIntegrationLineObject emptyCharge;
            return emptyCharge;
        }

        TaxIntegrationLineObject destinationCharge = _line.getCharge(_taxDocumentCharge.TransactionLineId);

        var taxDocumentChargeWrapper = new TaxServiceAPI.TaxDocumentLineWrapper();
        taxDocumentChargeWrapper.Value = _taxDocumentCharge;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxIntegrationLineObjectFromTaxDocumentLineWrapper(destinationCharge, taxDocumentChargeWrapper);
        TaxIntegrationCalculationActivityOnDocument_CalculationService::processCalculationError(_line.getAncestorDocument(), taxDocumentChargeWrapper.GetErrors());

        using (var taxCodes = taxDocumentChargeWrapper.GetTaxCodes())
        {
            while (taxCodes.MoveNext())
            {
                str taxCode = taxCodes.Current;
                var taxDocumentTaxCode = taxDocumentChargeWrapper.GetTaxCodeLine(taxCode);
                if (!TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxCodeLine(destinationCharge, taxCode, taxDocumentTaxCode))
                {
                    TaxIntegrationLineObject emptyCharge;
                    return emptyCharge;
                }
            }
        }

        if (TaxIntegrationAdjustment::isEnabledForTransaction(_line.getAncestorDocument().getLocalTableId(), _line.getAncestorDocument().getLocalRecId())
            && taxDocumentChargeWrapper.GetAdjustment())
        {
            TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxDocumentLineAdjustment(destinationCharge, taxDocumentChargeWrapper.GetAdjustment());
        }

        return destinationCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxIntegrationLineObjectFromTaxDocumentLineWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxIntegrationLineObject</c> from <c>TaxDocumentLineWrapper</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source"><c>TaxDocumentLineWrapper</c>.</param>
    protected static void copyToTaxIntegrationLineObjectFromTaxDocumentLineWrapper(TaxIntegrationLineObject _destination, TaxServiceAPI.TaxDocumentLineWrapper _source)
    {
        TaxIntegrationDocumentObject document = _destination.getAncestorDocument();
        TaxGroup taxGroup = TaxIntegrationCalculationActivityOnDocument_CalculationService::normalizeTaxGroup(
            _source.GetMeasure(IOTaxGroupMeasure),
            document);
        if (taxGroup != _destination.getTaxGroup())
        {
            _destination.setTaxGroup(taxGroup);
            _destination.setNeedUpdateRecord(true);
        }

        TaxItemGroup taxItemGroup = TaxIntegrationCalculationActivityOnDocument_CalculationService::normalizeTaxItemGroup(
            _source.GetMeasure(IOItemTaxGroupMeasure),
            document);
        if (taxItemGroup != _destination.getTaxItemGroup())
        {
            _destination.setTaxItemGroup(taxItemGroup);
            _destination.setNeedUpdateRecord(true);
        }

        _destination.setBaseAmount(_source.GetMeasure(IOBaseAmount));
        _destination.setCashDiscountAmountForBase(_source.GetMeasure(IOCashDiscountAmountForBase));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCodeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax code line,
    /// and saves the results back to the line.
    /// </summary>
    /// <param name = "_line">The line to save the results.</param>
    /// <param name = "_taxCode">The tax code.</param>
    /// <param name = "_taxDocumentTaxCode">The tax code line to process</param>
    /// <returns>true if the operation is successful; otherwise false</returns>
    protected static boolean processTaxCodeLine(TaxIntegrationLineObject _line, str _taxCode, TaxServiceAPI.TaxDocumentTaxCode _taxDocumentTaxCode)
    {
        TaxIntegrationDocumentObject document = _line.getAncestorDocument();
        TaxIntegrationTaxLineObject destinationTaxLine = TaxIntegrationTaxLineObject::construct(_taxCode, _line);
        if (!_line.insertTaxLine(destinationTaxLine))
        {
            document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:DuplicateTaxCodesNotAllowed", _taxCode, _line.getLocalId())));
            return false;
        }

        var taxDocumentTaxCodeWrapper = new TaxServiceAPI.TaxDocumentTaxCodeWrapper();
        taxDocumentTaxCodeWrapper.Value = _taxDocumentTaxCode;

        TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToTaxIntegrationTaxLineObjectFromTaxDocumentTaxCodeWrapper(destinationTaxLine, taxDocumentTaxCodeWrapper);

        if (document.isJournal() || document.getHeadingTableId() == tableNum(ProjAdvancedJournalLine))
        {
            TaxTable taxTable = TaxTable::find(destinationTaxLine.getTaxCode());
            if (!taxTable)
            {
                document.setException(
                    new System.InvalidOperationException(
                        strFmt(
                            "@TaxIntegrationException:TaxCodeNotFound",
                            destinationTaxLine.getTaxCode(),
                            _line.getCompany() ? _line.getCompany() : curExt(),
                            _line.getTaxGroup(),
                            _line.getTaxItemGroup())));
            }

            TaxIntegrationLineObject parentLine = destinationTaxLine.getParentLine();
            TaxGroupData taxGroupData = TaxGroupData::find(parentLine.getTaxGroup(), destinationTaxLine.getTaxCode());
            if (!taxGroupData)
            {
                document.setException(
                    new System.InvalidOperationException(
                        strFmt(
                            "@TaxIntegrationException:TaxCodeNotFoundInTheTaxGroup",
                            destinationTaxLine.getTaxCode(),
                            parentLine.getTaxGroup(),
                            _line.getCompany() ? _line.getCompany() : curExt())));
            }
            // for parameter passing, will not persist
            taxGroupData.ExemptTax = destinationTaxLine.getTaxExemptTax();
            taxGroupData.UseTax = destinationTaxLine.getTaxUseTax();
            taxGroupData.ReverseCharge_W = destinationTaxLine.getTaxReverseCharge();

            destinationTaxLine.setTaxDirection(
                parentLine.getTaxableLine().getDefaultTaxDirection(
                    taxGroupData,
                    parentLine.getAncestorDocument().getCompany()));
        }
        else
        {
            destinationTaxLine.setTaxDirection(Tax::determineTaxDirectionInternal(
                document.getLegacyTax().getTaxModuleType(),
                destinationTaxLine.getTaxCode(),
                destinationTaxLine.getTaxExemptTax(),
                destinationTaxLine.getTaxReverseCharge(),
                destinationTaxLine.getTaxUseTax(),
                document.getContext().getTaxGroupData(_line.getTaxGroup(), destinationTaxLine.getTaxCode()).IntracomVAT));
        }

        if (_line.getLocalTableId() == tableNum(MarkupTrans))
        {
            MarkupType chargeDebitType = _line.getChargeDebitType();
            MarkupType chargeCreditType = _line.getChargeCreditType();
            if (destinationTaxLine.getTaxExemptTax() == NoYes::No
                && destinationTaxLine.getTaxDirection() != TaxDirection::UseTax
                && (chargeDebitType == MarkupType::Item && chargeCreditType == MarkupType::Item)
                    || (chargeDebitType == MarkupType::Item && chargeCreditType == MarkupType::LedgerAccount)
                    || (chargeDebitType == MarkupType::LedgerAccount && chargeCreditType == MarkupType::Item))
            {
                _line.setTaxable(false);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxIntegrationTaxLineObjectFromTaxDocumentTaxCodeWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxIntegrationTaxLineObject</c> from <c>TaxDocumentTaxCodeWrapper</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxIntegrationTaxLineObject</c>.</param>
    /// <param name = "_source"><c>TaxDocumentTaxCodeWrapper</c>.</param>
    protected static void copyToTaxIntegrationTaxLineObjectFromTaxDocumentTaxCodeWrapper(TaxIntegrationTaxLineObject _destination, TaxServiceAPI.TaxDocumentTaxCodeWrapper _source)
    {
        _destination.getTransactionCurrencyAmount().setBaseAmount(_source.GetField(IOBaseAmount));
        _destination.getTransactionCurrencyAmount().setTaxAmount(_source.GetField(IOTaxAmount));
        _destination.getTransactionCurrencyAmount().setNondeductibleTaxAmount(_source.GetField(IONondeductibleTaxAmount));
        _destination.getRawTransactionCurrencyAmount().setBaseAmount(_destination.getTransactionCurrencyAmount().getBaseAmount());
        _destination.getRawTransactionCurrencyAmount().setTaxAmount(_destination.getTransactionCurrencyAmount().getTaxAmount());
        _destination.getRawTransactionCurrencyAmount().setNondeductibleTaxAmount(_destination.getTransactionCurrencyAmount().getNondeductibleTaxAmount());

        _destination.setTaxRate(_source.GetField(IOTaxRate));
        _destination.setTaxExemptTax(TaxIntegrationEnumUtility::convertTaxExemptTaxFromBoolean(_source.GetField(IOExemptTax)));
        _destination.setTaxReverseCharge(TaxIntegrationEnumUtility::convertTaxReverseChargeFromBoolean(_source.GetField(IOReverseCharge)));
        _destination.setTaxUseTax(TaxIntegrationEnumUtility::convertTaxUseTaxFromBoolean(_source.GetField(IOUseTax)));

        if (_source.GetField(IOUnit) || _source.GetField(IOClassifyAsPackingDuty))
        {
            _destination.setQuantity(_source.GetField(IOQuantity));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCalculationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes calculation error returned from calculation service.
    /// Call this method when process the object node that contains error message.
    /// </summary>
    /// <param name = "_document">The document.</param>
    /// <param name = "_errorEnumerator">The enumerator of calculation error.</param>
    protected static void processCalculationError(TaxIntegrationDocumentObject _document, System.Collections.IEnumerator _errorEnumerator)
    {
        if (!_errorEnumerator)
        {
            return;
        }

        TaxIntegrationErrorCollection errorCollection = _document.getErrorCollection();

        while (_errorEnumerator.MoveNext())
        {
            TaxServiceAPI.TaxCalculationError calculationError = _errorEnumerator.Current;
            errorCollection.addError(calculationError.Code, calculationError.Message);
        }

        if (errorCollection.hasError() && !_document.getException())
        {
            _document.setException(new System.Exception("@TaxIntegrationException:ErrorOccurredDuringCalculation"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the adjustment data into the request before calling tax service, based on the current properties of the source document.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxAdjustment</c> object.</param>
    /// <param name = "_source">The source document.</param>
    protected static void prepareAdjustment(
        TaxServiceAPI.TaxAdjustment _destination,
        TaxIntegrationDocumentObject _source)
    {
        var taxAdjustmentWrapper = new TaxServiceAPI.TaxAdjustmentWrapper();
        taxAdjustmentWrapper.Value = _destination;

        // Header charges.
        SetEnumerator sourceChargeSet = _source.getChargeSet().getEnumerator();
        while (sourceChargeSet.moveNext())
        {
            var currentSourceCharge = sourceChargeSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareLineAdjustment(taxAdjustmentWrapper, currentSourceCharge);
        }

        // Transaction lines.
        SetEnumerator sourceLineSet = _source.getLineSet().getEnumerator();
        while (sourceLineSet.moveNext())
        {
            var currentSourceLine = sourceLineSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareLineAdjustment(taxAdjustmentWrapper, currentSourceLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares line's tax adjustment data based on the current properties of the source line.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxAdjustmentWrapper</c> object.</param>
    /// <param name = "_source">The source line.</param>
    protected static void prepareLineAdjustment(
        TaxServiceAPI.TaxAdjustmentWrapper _destination,
        TaxIntegrationLineObject _source)
    {
        boolean needsTaxCodeAdjustment = isTaxCodeAdjustmentEnabled
            && _source.isTaxable()
            && _source.getAdjustmentStatus() == TaxAdjustmentStatus::Adjusted;

        // Prepares the line's tax adjustment.
        if (_source.shouldSendAdjustmentGroupToTaxService()
            || needsTaxCodeAdjustment)
        {
            var lineAdjustment = new TaxServiceAPI.LineAdjustment();
            var LineAdjustmentWrapper = new TaxServiceAPI.LineAdjustmentWrapper();
            LineAdjustmentWrapper.Value = lineAdjustment;

            if (needsTaxCodeAdjustment)
            {
                // According to tax service API: null object = without tax adjustment,
                // the empty list [] = with tax adjustment but removed all tax codes.
                // If it needs tax adjustment, it should run InitAdjustedCodes to generate the empty list [] firstly.
                LineAdjustmentWrapper.InitAdjustedCodes();
            }

            TaxIntegrationCalculationActivityOnDocument_CalculationService::copyToLineAdjustment(LineAdjustmentWrapper, _source);
            _destination.SetLineAdjustment(_source.getLocalId(), lineAdjustment);
        }

        // Transaction line's charges.
        SetEnumerator sourceChargeSet = _source.getChargeSet().getEnumerator();
        while (sourceChargeSet.moveNext())
        {
            var currentSourceCharge = sourceChargeSet.current();
            TaxIntegrationCalculationActivityOnDocument_CalculationService::prepareLineAdjustment(_destination, currentSourceCharge);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>LineAdjustmentWrapper</c> from <c>TaxIntegrationLineObject</c> by line.
    /// </summary>
    /// <param name = "_destination">The destination <c>LineAdjustmentWrapper</c> object.</param>
    /// <param name = "_source">The source <c>TaxIntegrationLineObject</c> object.</param>
    protected static void copyToLineAdjustment(
        TaxServiceAPI.LineAdjustmentWrapper _destination,
        TaxIntegrationLineObject _source)
    {
        if (isTaxCodeAdjustmentEnabled)
        {
            // All tax codes on this line.
            Set taxAdjustedCodeSet = _source.getTaxAdjustedCodeSet();
            SetEnumerator taxAdjustedCodeSetEnumerator = taxAdjustedCodeSet.getEnumerator();
            while (taxAdjustedCodeSetEnumerator.moveNext())
            {
                var curTaxAdjustedCode = taxAdjustedCodeSetEnumerator.current();
                _destination.AddAdjustedCode(curTaxAdjustedCode);

                // Adjusted amounts are valid only if OverrideCalculatedTax is checked.
                var taxAdjustedLine = _source.getTaxAdjustedLine(curTaxAdjustedCode);
                if (taxAdjustedLine.getOverrideCalculatedTax())
                {
                    var taxCodeAdjustment = new TaxServiceAPI.TaxCodeAdjustment();
                    var taxCodeAdjustmentWrapper = new TaxServiceAPI.TaxCodeAdjustmentWrapper();
                    taxCodeAdjustmentWrapper.Value = taxCodeAdjustment;

                    // This line's adjusted tax amount.
                    taxCodeAdjustmentWrapper.SetField(IOTaxAmount, taxAdjustedLine.getSourceRegulateAmountCur());

                    _destination.SetTaxCodeAdjustment(curTaxAdjustedCode, taxCodeAdjustment);
                }
            }
        }

        _destination.SetMeasure(IOTaxGroupMeasure, _source.getTaxGroup());
        _destination.SetMeasure(IOItemTaxGroupMeasure, _source.getTaxItemGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxDocumentLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the line's adjustment result and saves the results back to the line.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c> object.</param>
    /// <param name = "_source">The tax service result <c>TaxDocumentLineAdjustment</c> object.</param>
    protected static void processTaxDocumentLineAdjustment(
        TaxIntegrationLineObject _destination,
        TaxServiceAPI.TaxDocumentLineAdjustment _source)
    {
        var taxDocumentLineAdjustmentWrapper = new TaxServiceAPI.TaxDocumentLineAdjustmentWrapper();
        taxDocumentLineAdjustmentWrapper.Value = _source;
        using (var taxCodes = taxDocumentLineAdjustmentWrapper.GetTaxCodes())
        {
            while (taxCodes.MoveNext())
            {
                str taxCode = taxCodes.Current;

                // Saves the tax adjustment calculation result to the tax line.
                TaxIntegrationTaxLineObject taxLine = _destination.getTaxLine(taxCode);
                taxLine.setOverrideCalculatedTax(_destination.getTaxAdjustedLine(taxCode).getOverrideCalculatedTax());

                var taxDocumentTaxCode = taxDocumentLineAdjustmentWrapper.GetTaxCodeLine(taxCode);
                TaxIntegrationCalculationActivityOnDocument_CalculationService::processTaxCodeLineAdjustment(taxLine, taxDocumentTaxCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCodeLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax line's adjustment result and saves the results back to the tax line.
    /// </summary>
    /// <param name = "_destination">The tax line to save the results.</param>
    /// <param name = "_source">The result line to process.</param>
    protected static void processTaxCodeLineAdjustment(
        TaxIntegrationTaxLineObject _destination,
        TaxServiceAPI.TaxDocumentTaxCode _source)
    {
        var taxDocumentTaxCodeWrapper = new TaxServiceAPI.TaxDocumentTaxCodeWrapper();
        taxDocumentTaxCodeWrapper.Value = _source;

        TaxAmountCur taxAmount = taxDocumentTaxCodeWrapper.GetField(IOTaxAmount);
        TaxAmountCur nondeductibleTaxAmount = taxDocumentTaxCodeWrapper.GetField(IONondeductibleTaxAmount);

        _destination.setSourceRegulateAmountCur(taxAmount);
        _destination.setTaxInCostPriceRegulated(nondeductibleTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Normalizes tax group from tax service to FO system because it may exists case inconsistency issue.
    /// </summary>
    /// <param name = "_taxGroup">The tax group from tax service.</param>
    /// <param name = "_document">The document.</param>
    /// <returns>The tax group in FO system.</returns>
    private static TaxGroup normalizeTaxGroup(TaxGroup _taxGroup, TaxIntegrationDocumentObject _document)
    {
        TaxGroup taxGroup;

        if (_taxGroup)
        {
            TaxGroup normalizedTaxGroup = _document.getContext().getNormalizedTaxGroup(_taxGroup);

            if (!normalizedTaxGroup)
            {
                _document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:RecordNotFound", 'TaxGroup', _taxGroup, 'TaxGroupHeading')));
            }
            else
            {
                taxGroup = normalizedTaxGroup;
            }
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Normalizes tax item group from tax service to FO system because it may exists case inconsistency issue.
    /// </summary>
    /// <param name = "_taxItemGroup">The tax item group from tax service.</param>
    /// <param name = "_document">The document.</param>
    /// <returns>The tax item group in FO system.</returns>
    private static TaxItemGroup normalizeTaxItemGroup(TaxItemGroup _taxItemGroup, TaxIntegrationDocumentObject _document)
    {
        TaxItemGroup taxItemGroup;

        if (_taxItemGroup)
        {
            TaxItemGroup normalizedTaxItemGroup = _document.getContext().getNormalizedTaxItemGroup(_taxItemGroup);

            if (!normalizedTaxItemGroup)
            {
                _document.setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:RecordNotFound", 'TaxItemGroup', _taxItemGroup, 'TaxItemGroupHeading')));
            }
            else
            {
                taxItemGroup = normalizedTaxItemGroup;
            }
        }

        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDatewithDocumentStatusForSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c></param>
    private static void processDatewithDocumentStatusForSalesParmTable(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));

        switch (_source.getDocumentStatus())
        {
            case DocumentStatus::Invoice:
                _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getInvoiceDate()));
                _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getVATRegisterDate()));
                break;
            case DocumentStatus::PickingList:
                _destination.SetField(IOPickingListDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getPickingListDate()));
                break;
            case DocumentStatus::PackingSlip:
                _destination.SetField(IOPackingSlipDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getPackingSlipDate()));
                break;
            case DocumentStatus::Confirmation:
                _destination.SetField(IODateOfConfirmation, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDateOfConfirmation()));
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDatewithDocumentStatusForPurchParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c></param>
    private static void processDatewithDocumentStatusForPurchParmTable(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));

        switch (_source.getDocumentStatus())
        {
            case DocumentStatus::ReceiptsList:
                _destination.SetField(IOReceiptsListDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getReceiptsListDate()));
                break;
            case DocumentStatus::PackingSlip:
                _destination.SetField(IOProductReceiptDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getProductReceiptDate()));
                break;
            default:
                break;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDatewithDocumentStatusForPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c></param>
    private static void processDatewithDocumentStatusForPurchTable(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        if (_source.getDocumentStatus() == DocumentStatus::Confirmation)
        {
            _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getDocumentDate()));
        }
        else
        {
            _destination.SetField(IOAccountingDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_source.getAccountingDate()));
            _destination.SetField(IOCreatedDateTime, DateTimeUtil::toStr(_source.getCreatedDateTime()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToTaxableDocumentWrapperFromTaxIntegrationJournalDocumentObjectByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationJournalDocumentObject</c>.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_journalDocument"><c>TaxIntegrationJournalDocumentObject</c></param>
    private static void copyToTaxableDocumentWrapperFromTaxIntegrationJournalDocumentObjectByHeader(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationJournalDocumentObject _journalDocument)
    {
        _destination.SetField(IOVatRegisterDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getVATRegisterDate()));
        _destination.SetField(IODateOfVendorVATRegister, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getVendorVATDate()));
        _destination.SetField(IOTransactionDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getTransDate()));

        switch (_journalDocument.getLegacyTaxableDocument().getJournalType())
        {
            case LedgerJournalType::Daily:
                _destination.SetField(IOReversingDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getReverseDate()));
                _destination.SetField(IOCashDiscDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getCashDiscDate()));
                _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getDocumentDate()));
                break;
            case LedgerJournalType::VendInvoiceRegister:
                _destination.SetField(IOInvoiceDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getInvoiceDate()));
                break;
            case LedgerJournalType::Periodic,
                LedgerJournalType::Payment, // vendor payment journal
                LedgerJournalType::CustPayment:
                _destination.SetField(IODocumentDate, TaxIntegrationCalculationActivityOnDocument_CalculationService::convertDateToStr(_journalDocument.getDocumentDate()));
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObjectForAccountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to <c>TaxableDocumentHeaderWrapper</c> from <c>TaxIntegrationDocumentObject</c> for account fields.
    /// </summary>
    /// <param name = "_destination"><c>TaxableDocumentHeaderWrapper</c>.</param>
    /// <param name = "_source"><c>TaxIntegrationDocumentObject</c></param>
    private static void copyTaxableDocumentHeaderWrapperFromTaxIntegrationDocumentObjectForAccountFields(TaxServiceAPI.TaxableDocumentHeaderWrapper _destination, TaxIntegrationDocumentObject _source)
    {
        TaxIntegrationPartyType partyType = _source.getPartyType();

        if (partyType == TaxIntegrationPartyType::Cust)
        {
            _destination.SetField(IOCustomerOrderAccount, _source.getOrderAccount());
            _destination.SetField(IOCustomerOrderAccountGroup, _source.getOrderAccountGroup());
            _destination.SetField(IOCustomerInvoiceAccount, _source.getInvoiceAccount());
            _destination.SetField(IOCustomerInvoiceAccountGroup, _source.getInvoiceAccountGroup());
            _destination.SetField(IOCounterpartyTaxId, _source.getPartyTaxId());
            _destination.SetField(IOCounterpartyCountryRegionId, _source.getPartyCountryRegionId());
            _destination.SetField(IOCustomerOrderAccountType, enum2Symbol(enumNum(DirPartyType), CustTable::find(_source.getOrderAccount()).partyType()));
            _destination.SetField(IOCustomerInvoiceAccountType, enum2Symbol(enumNum(DirPartyType), CustTable::find( _source.getInvoiceAccount()).partyType()));
        }
        else if (partyType == TaxIntegrationPartyType::Vend)
        {
            _destination.SetField(IOVendorOrderAccount, _source.getOrderAccount());
            _destination.SetField(IOVendorOrderAccountGroup, _source.getOrderAccountGroup());
            _destination.SetField(IOVendorInvoiceAccount, _source.getInvoiceAccount());
            _destination.SetField(IOVendorInvoiceAccountGroup, _source.getInvoiceAccountGroup());
            _destination.SetField(IOCounterpartyTaxId, _source.getPartyTaxId());
            _destination.SetField(IOCounterpartyCountryRegionId, _source.getPartyCountryRegionId());
            _destination.SetField(IOVendorOrderAccountType, enum2Symbol(enumNum(DirPartyType), VendTable::find(_source.getOrderAccount()).partyType()));
            _destination.SetField(IOVendorInvoiceAccountType, enum2Symbol(enumNum(DirPartyType), VendTable::find( _source.getInvoiceAccount()).partyType()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>