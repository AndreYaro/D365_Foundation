<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionDatabaseRelationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionDatabaseRelationType</c> class contains the information that is that is required
/// to generate the session XML for system table constraint type.
/// </summary>
class PcXmlSessionDatabaseRelationType
{
    Name                                typeName;
    boolean                             isEnumeration;
    AttributeDataType                   attributeDataType;
    str                                 typeId;
    PCTableConstraintDatabaseColumnDef  databaseColumnDefinition;
    PCRuntimeCacheController            runtimeCacheController;
    Set                                 enumTypeValues;
    Set                                 intTypeValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIntegerValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a value to the collection of integer type values.
    /// </summary>
    /// <param name="_intValue">
    /// A type display value.
    /// </param>
    public void addIntegerValue(AttributeValueInt _intValue)
    {
        if (!intTypeValues.in(_intValue))
        {
            intTypeValues.add(_intValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a value to the collection of enum type values.
    /// </summary>
    /// <param name="_typeDisplayValue">
    /// A type display value.
    /// </param>
    /// <param name="_typeSolverValue">
    /// A type solver value.
    /// </param>
    public void addValue(AttributeValueText _typeDisplayValue, PCSolverValue _typeSolverValue)
    {
        if (!enumTypeValues.in([_typeDisplayValue, _typeSolverValue]))
        {
            enumTypeValues.add([_typeDisplayValue, _typeSolverValue]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        intTypeValues           = new Set(Types::Integer);
        enumTypeValues          = new Set(Types::Container);
        runtimeCacheController  = PCRuntimeCacheController::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttributeDataType</Name>
				<Source><![CDATA[
    public AttributeDataType parmAttributeDataType(AttributeDataType _attributeDataType = attributeDataType)
    {
        attributeDataType = _attributeDataType;

        return attributeDataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEnumeration</Name>
				<Source><![CDATA[
    public boolean parmIsEnumeration(boolean _isEnumeration = isEnumeration)
    {
        isEnumeration = _isEnumeration;

        return isEnumeration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatabaseColumnDefinition</Name>
				<Source><![CDATA[
    public PCTableConstraintDatabaseColumnDef parmDatabaseColumnDefinition(PCTableConstraintDatabaseColumnDef _databaseColumnDefinition = databaseColumnDefinition)
    {
        databaseColumnDefinition = _databaseColumnDefinition;

        return databaseColumnDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeCacheController</Name>
				<Source><![CDATA[
    public PCRuntimeCacheController parmRuntimeCacheController(PCRuntimeCacheController _runtimeCacheController = runtimeCacheController)
    {
        runtimeCacheController = _runtimeCacheController;

        return runtimeCacheController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeId</Name>
				<Source><![CDATA[
    public str parmTypeId(str _typeId = typeId)
    {
        typeId = _typeId;

        return typeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeName</Name>
				<Source><![CDATA[
    public Name parmTypeName(Name _typeName = typeName)
    {
        typeName = _typeName;

        return typeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the xml representation of the attribute type based on a system table constraint column.
    /// </summary>
    /// <param name="_attributeTypeWriter">
    /// An instance of the <c>XmlWriter</c> used to write attribute types.
    /// </param>
    public void writeIL(PCXmlWriter _attributeTypeWriter)
    {
        AttributeValueText  displayValue;
        PCSolverValue       solverValue;
        PCRuntimeXml        runtimeXml;
        PCXmlWriter         xmlWriter       = PCXmlWriter::construct();

        #PC

        void writeTypeStartElement(str _elementName, str _attributeId, str _name, str _id)
        {
            xmlWriter.writeStartElement(_elementName);
            xmlWriter.writeAttributeString(#nameAttribute, _name);
            xmlWriter.writeAttributeString(_attributeId, _id);
        }

        PCContractNotNull::assertObject(_attributeTypeWriter, funcName());

        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(attributeDataType))
        {
            writeTypeStartElement(#IntegerSetDomainElement, #integerSetDomainId, typeName, typeId);

            SetEnumerator intEnumerator = intTypeValues.getEnumerator();

            while ( intEnumerator.moveNext() )
            {
                xmlWriter.writeStartElement(#Value);
                xmlWriter.writeAttributeString(#valueAttribute, int2str(intEnumerator.current()));
                xmlWriter.writeEndElement();
            }
        }
        else
        {
            writeTypeStartElement(#enumDomainElement, #enumDomainId, typeName, typeId);

            SetEnumerator setEnumerator = enumTypeValues.getEnumerator();

            while ( setEnumerator.moveNext() )
            {
                [displayValue, solverValue] = setEnumerator.current();

                xmlWriter.writeStartElement(#EnumValueElement);
                xmlWriter.writeAttributeString(#valueAttribute,  solverValue);
                xmlWriter.writeAttributeString(#displayValue, displayValue);
                xmlWriter.writeEndElement();
            }
        }

        xmlWriter.writeEndElement();
        runtimeXml = xmlWriter.writeToString();
        _attributeTypeWriter.writeRaw(runtimeXml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionDatabaseRelationType construct()
    {
        return new PCXmlSessionDatabaseRelationType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the type Id from a system defined table constraint column.
    /// </summary>
    /// <param name="_column">
    /// A system defined table constraint column.
    /// </param>
    /// <returns>
    /// A type Id.
    /// </returns>
    public static str createTypeId(PCTableConstraintDatabaseColumnDef _column)
    {
        #PCTableConstraint

        return #TableConstraintEnumPrefix + int642str(_column.AttributeType) + '_' + int642str(_column.ReferencedTableId) + '_' + int642str(_column.ReferencedFieldId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>