<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransOpenPerDateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendTransOpenPerDateController</c> class is the controller class for the
///    <c>VendTransOpenPerDate</c> report.
/// </summary>
public class VendTransOpenPerDateController extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {      
        this.initModuleType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initModuleType</Name>
				<Source><![CDATA[
    private void initModuleType()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoEE, #isoLT, #isoLV, #isoHU, #isoCZ]))
        {
            CustVendTransOpenPerDateContract dataContract = this.parmReportContract().parmRdpContract();
            dataContract.parmModuleCustVend(ModuleCustVend::Vend);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges on the <c>TransDate</c> and <c>Closed</c> date fields
    ///    using the passed in <c>TransDate</c> value.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> which needs to update.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>TransDate</c> value which is used as a range value.
    /// </param>
    public static void addQueryRanges(Query _query, TransDate _transDate)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        FieldId                 transDateFieldId;
        FieldId                 closedFieldId;

        qbds = _query.dataSourceTable(tableNum(VendTrans));

        if (qbds)
        {
            transDateFieldId = fieldnum(VendTrans, TransDate);
            closedFieldId = fieldNum(VendTrans, Closed);
        }

        if (qbds)
        {
            // Add range on trans date field.
            qbr = SysQuery::findOrCreateRange(qbds, transDateFieldId);
            qbr.value(queryRange(dateNull(), _transDate));

            // Add ranges on closed date field.
            qbr = qbds.addRange(closedFieldId);
            qbr.value(SysQuery::value(datenull()));
            qbr = qbds.addRange(closedFieldId);
            qbr.value(queryRange(_transDate + 1, dateMax()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>VendTransOpenPerDateController</c> class instance.
    /// </summary>
    /// <param name="_args">
    ///    The collection of arguments in an instance of the <c>Args</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VendTransOpenPerDateController</c> class.
    /// </returns>
    public static VendTransOpenPerDateController construct(Args _args)
    {
        VendTransOpenPerDateController controller = new VendTransOpenPerDateController();
        controller.parmReportName(VendTransOpenPerDateController::getReportName());
        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains the report name and design name based on the country context.
    /// </summary>
    /// <returns>
    ///    The report and design name.
    /// </returns>
    public static SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName reportName;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoEE, #isoLT, #isoLV, #isoHU, #isoCZ]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00051, funcName());
            reportName = ssrsReportStr(CustVendTransOpenPerDate, Report);
        }
        else
        {
            reportName = ssrsReportStr(VendTransOpenPerDate, Report);
        }

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00010, funcName());

        VendTransOpenPerDateController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>