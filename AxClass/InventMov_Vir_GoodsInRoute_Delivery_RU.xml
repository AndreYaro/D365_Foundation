<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Vir_GoodsInRoute_Delivery_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_Vir_GoodsInRoute_Delivery_RU extends InventMov_Vir_GoodsInRoute_RU
{
    CustVendGroupId     accountGroup;
    TaxGroup            taxGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesConsump));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesGoodsInRoute_RU));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesGoodsInRoute_RU));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesConsump));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysicalTax</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountPhysicalTax()
    {
        if (! accountPhysicalTax)
        {
            accountPhysicalTax = InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter());
        }

        return accountPhysicalTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter()
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::SalesPackingSlipTax,
            this.itemId(),
            this.inventTable().itemGroupId(),
            salesCategory,
            custVendAC,
            accountGroup,
            taxGroup,
            this.inventdim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalRevenue</Name>
				<Source><![CDATA[
    AmountMSTPhysicalRevenue estimatedPhysicalRevenue(InventTrans _inventTrans)
    {
        return estimatedPhysicalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalTax</Name>
				<Source><![CDATA[
    AmountMST estimatedPhysicalTax(InventTrans _inventTrans)
    {
        return estimatedPhysicalTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    boolean  mustBeBookedFinancially()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendGroupId</Name>
				<Source><![CDATA[
    public CustVendGroupId parmCustVendGroupId(CustVendGroupId _accountGroup = accountGroup)
    {
        accountGroup = _accountGroup;
        return accountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup(TaxGroup _taxGroup = taxGroup)
    {
        taxGroup = _taxGroup;
        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight transaction quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return -cwTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
            return LedgerPostingType::SalesConsump;
        else
            return LedgerPostingType::SalesGoodsInRoute_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
            return LedgerPostingType::SalesGoodsInRoute_RU;
        else
            return LedgerPostingType::SalesConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalTax</Name>
				<Source><![CDATA[
    LedgerPostingType postingPhysicalTax()
    {
        if (! postingPhysicalTax)
        {
            postingPhysicalTax = LedgerPostingType::SalesPackingslipTax;
        }

        return postingPhysicalTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    InventQty transQty()
    {
        return -transqty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    UnitQty transQtyUnit()
    {
        return -transqty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    Integer transSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventMov_Vir_GoodsInRoute_Delivery_RU newParameters(
        ItemId              _itemId,
        InventTransType     _transType,
        InventTransRefId    _transRefId,
        InventDimId         _inventDimId,
        CustVendAC          _custVendAC,
        DimensionDefault    _dimension,
        TransDate           _transDate,
        InventQty           _transQty,
        SalesCategory       _salesCategory,
        InventTransOriginId _inventTransOriginSales,
        InventTransId       _inventTransIdDelivery,
        InventTransOriginId _inventTransOriginTransit   = 0,
        CustVendGroupId     _accountGroup               = '',
        TaxGroup            _taxGroup                   = '')

    {
        InventTable                             inventTable = InventTable::find(_itemId);

        InventMov_Vir_GoodsInRoute_Delivery_RU movement_Virtuel = new InventMov_Vir_GoodsInRoute_Delivery_RU(null);

        movement_Virtuel.parmInventDimId(InventDim::find(_inventDimId).goodsInRouteDimId_RU(inventDimGroupSetup::newInventTable(inventTable)));
        movement_Virtuel.parmItemId(_itemId);

        movement_Virtuel.parmDefaultDimension(_dimension);
        movement_Virtuel.parmCustVendAC(_custVendAC);
        movement_Virtuel.parmTransType(_transType);
        movement_Virtuel.parmTransRefId(_transRefId);
        movement_Virtuel.parmInventDimIdSales(_inventDimId);
        movement_Virtuel.parmInventTransOriginSales(_inventTransOriginSales);

        movement_Virtuel.parmTransQty(_transQty);
        movement_Virtuel.parmTransDate(_transDate);

        movement_Virtuel.parmInventTransId(_inventTransIdDelivery);
        movement_Virtuel.parmMarkingRefInventTransOrigin(_inventTransOriginTransit);

        movement_Virtuel.parmCustVendGroupId(_accountGroup);
        movement_Virtuel.parmTaxGroup(_taxGroup);
        movement_Virtuel.parmSalesCategory(_salesCategory);

        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>