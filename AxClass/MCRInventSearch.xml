<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRInventSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRInventSearch</c> class is used to handle item searching.
/// </summary>
class MCRInventSearch
{
    int                     numberOfResults;
    MCRFullTextParameters   mcrFullTextParameters;

    private Common          searchCaller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance.
    /// </summary>
    public void new()
    {
        mcrFullTextParameters = MCRFullTextParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchCaller</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Common parmSearchCaller(Common _searchCaller = searchCaller)
    {
        searchCaller    = _searchCaller;

        return searchCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProductDimensions</Name>
				<Source><![CDATA[
    private void populateProductDimensions(InventDistinctProduct _inventDistinctProduct, InventItemDimTmpFilter _tmpSearchResults)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId productFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
            FieldId inventTmpFieldId = InventItemDimTmpFilter::productDimensionFieldId(productDim);
            if (productFieldId && inventTmpFieldId)
            {
                _tmpSearchResults.(inventTmpFieldId) = _inventDistinctProduct.(productFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a buffer of <c>InventItemDimTmpFilter</c> records from the search result.
    /// </summary>
    /// <param name = "_mcrSearchText">The search text entered by user.</param>
    /// <returns>A buffer of <c>InventItemDimTmpFilter</c> records with product related information.</returns>
    public InventItemDimTmpFilter executeSearch(MCRSearchText _mcrSearchText)
    {
        Query query = this.buildSearchQuery(_mcrSearchText);

        InventItemDimTmpFilter  tmpSearchResults;
        InventDistinctProduct   inventDistinctProduct;
        RecordInsertList        tempSearchList;
        tempSearchList          = new RecordInsertList(tableNum(InventItemDimTmpFilter),false,false,false,false,false,tmpSearchResults);
        tmpSearchResults.clear();

        if (mcrFullTextParameters.NumResults == 0)
        {
            Map searchResultMap = this.createSearchResultMap(query);
            Query::insert_recordset(tmpSearchResults, searchResultMap, query);
            select tmpSearchResults;
        }
        else
        {
            QueryRun queryRun = new QueryRun(query);

            // Loop over all items that meet search text and them to the list that will be displayed the user
            while (queryRun.next())
            {
                inventDistinctProduct = queryRun.get(tableNum(InventDistinctProduct));

                // Populate the search result
                tmpSearchResults.Product        = inventDistinctProduct.Product;
                tmpSearchResults.ItemId         = inventDistinctProduct.ItemId;
                tmpSearchResults.InventDimId    = inventDistinctProduct.InventDimId;
                this.populateProductDimensions(inventDistinctProduct, tmpSearchResults);
                tempSearchList.add(tmpSearchResults);
                
                numberOfResults++;

                // If the number of results exceeds the parameter, exit loop and return
                if (numberOfResults >= mcrFullTextParameters.NumResults)
                {
                    break;
                }
            }
            tempSearchList.insertDatabase();
        }
        return tmpSearchResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used for item searching.
    /// </summary>
    /// <param name = "_mcrSearchText">The search text entered by user.</param>
    /// <returns>The search query.</returns>
    protected Query buildSearchQuery(MCRSearchText _mcrSearchText)
    {
        Query query = MCRSearchQueryFactory::CreateQuery();

        _mcrSearchText = strReplace(_mcrSearchText, '%', '*');

        QueryBuildDataSource queryBuildDataSource   = query.addDataSource(tableNum(MCRInventTableIndex));
        QueryBuildRange      queryBuildRange        = queryBuildDataSource.addRange(fieldNum(MCRInventTableIndex, searchText));

        if (mcrFullTextParameters.SearchType == MCRSearchMatchType::Full)
        {
            queryBuildRange.rangeType(QueryRangeType::FullText);
            queryBuildRange.value(SysQuery::value(_mcrSearchText));
        }
        else
        {
            // If the user added their own wild card do not wrap the search text
            if (strFind(_mcrSearchText, '*', 1, strLen(_mcrSearchText)))
            {
                queryBuildRange.value(_mcrSearchText);
            }
            else
            {
                queryBuildRange.value(SysQuery::valueLike(_mcrSearchText));
            }
        }

        QueryBuildDataSource qbdsInventDistinctProduct = queryBuildDataSource.addDataSource(tableNum(InventDistinctProduct));
        qbdsInventDistinctProduct.addLink(fieldnum(MCRInventTableIndex, RefRecId), fieldnum(InventDistinctProduct, Product));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Destination field to Field Mapping.
    /// </summary>
    /// <param name = "_fieldList">The field list where the field will be added.</param>
    /// <param name = "_tableId">The tableId for the field being added.</param>
    /// <param name = "_fieldMapping">The field Mapping where the field will be added.</param>
    /// <param name = "_dataSourceUniqueId">The unique Id for the data source.</param>
    /// <param name = "_sourceFieldName">The data source field name being added.</param>
    /// <param name = "_destinationFieldName">The Target field name where the field will be added.</param>
    protected void addDestinationFieldToFieldMapping(
        QueryBuildFieldList _fieldList,
        int _tableId,
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    {
        _fieldList = _fieldList.addField(fieldName2Id(_tableId, _sourceFieldName));
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSearchResultMap</Name>
				<Source><![CDATA[
    private Map createSearchResultMap(Query _queryInventDistinctProduct)
    {
        var targetToSourceMap = new Map(Types::String, Types::Container);
        var sourceQueryBuildDataSource = _queryInventDistinctProduct.dataSourceTable(tableNum(InventDistinctProduct));
        var dataSourceId = sourceQueryBuildDataSource.uniqueId();

        _queryInventDistinctProduct.clearAllFields();
        var fieldList = sourceQueryBuildDataSource.fields();

        this.addDestinationFieldToFieldMapping(fieldList, tableNum(InventDistinctProduct), targetToSourceMap, dataSourceId, fieldStr(InventDistinctProduct, Product), fieldStr(InventItemDimTmpFilter, Product));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(InventDistinctProduct), targetToSourceMap, dataSourceId, fieldStr(InventDistinctProduct, ItemId), fieldStr(InventItemDimTmpFilter, ItemId));
        this.addDestinationFieldToFieldMapping(fieldList, tableNum(InventDistinctProduct), targetToSourceMap, dataSourceId, fieldStr(InventDistinctProduct, InventDimId), fieldStr(InventItemDimTmpFilter, InventDimId));
        
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId productFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
            FieldId inventTmpFieldId = InventItemDimTmpFilter::productDimensionFieldId(productDim);
            if (productFieldId && inventTmpFieldId)
            {            
                FieldName productFieldName = fieldid2name(tableNum(InventDistinctProduct), productFieldId);
                FieldName inventTmpFieldName = fieldid2name(tableNum(InventItemDimTmpFilter), inventTmpFieldId);
                this.addDestinationFieldToFieldMapping(fieldList, tableNum(InventDistinctProduct), targetToSourceMap, dataSourceId, productFieldName, inventTmpFieldName);
            }
        }

        fieldList.dynamic(QueryFieldListDynamic::No);

        return targetToSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReleasedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the search text for all released products for the
    /// specified product.
    /// </summary>
    /// <param name="_dataContract">A <c>MCRInventSearchDataContract</c> object that acts as data contract.</param>
    /// <remarks>
    /// Created to update released products in asynchronous mode.
    /// </remarks>
    public void updateReleasedProducts(MCRInventSearchDataContract _dataContract)
    {
        InventTable inventTable;
        InventDistinctProduct inventDistinctProduct;
        RefRecId product;

        product = _dataContract.parmProduct();

        // Only execute if a product were passed, if one was not continue
        //  processing
        if (product)
        {
            // Loop over all items in every company with the passed product and update the search text
            while select crossCompany RecId, TableId, Product from inventDistinctProduct
                where inventDistinctProduct.Product == product
            {
                changeCompany(inventDistinctProduct.company())
                {
                    MCRFullTextSearch::update(inventDistinctProduct);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a product in the full text search table using the passed search criteria.
    /// </summary>
    /// <param name="_common">
    /// Record being modified.
    /// </param>
    /// <param name="_mcrItemIdSearch">
    /// A criteria upon which to search the <c>MCRInventTableIndex</c> table.
    /// </param>
    /// <returns>
    /// A container with:
    /// 1) Product RecId, or blank if the MCRSalesQuickQuote form was used to create the line.
    /// 2) A boolean value that determines if any new records were created.
    /// </returns>
    public static container searchProduct(Common     _common,
                                            MCRItemIdSearch _mcrItemIdSearch)
    {
        Args                    args;
        FormRun                 formRun;
        MCRSalesQuickQuoteConfigure mcrSalesQuickQuoteConfigure;
        EcoResProductRecId      productRecId;
        InventItemDimTmpFilter  searchResults;
        MCRInventSearch         mcrInventSearch;
        int                     position = 1;
        boolean                 recordsCreated;

        // If the searchfield is blank do not perform logic.
        if (_mcrItemIdSearch)
        {
            productRecId = inventTable::find(_mcrItemIdSearch).Product;

            // If not an alias or itemId, then launch search form.
            if (!productRecId)
            {
                // The called form wrapped in a try block to catch a thrown error
                // when no results are found for the search.  Previously when in full screen
                // the edit method would repeatedly trigger due to a leave method.
                try
                {
                    MCRInventSearch = new MCRInventSearch();
                    mcrInventSearch.parmSearchCaller(_common);
                    InventItemDimTmpFilter tmpSearchResults = MCRInventSearch.executeSearch(_mcrItemIdSearch);
                    searchResults.data(tmpSearchResults);
                    select count(RecId) from tmpSearchResults;

                    // If auto fill is on and one is found set the item to the item found.
                    if (MCRFullTextParameters::find().AutoFillItemSearch
                        && tmpSearchResults.RecId == 1)
                    {
                        productRecId = searchResults.Product;
                    }
                    else
                    {
                        // Otherwise load the MCRSalesQuickQuote form with the search results and
                        // the search text so the user can choose which item/dimension combination
                        // they want
                        args = new Args();
                        mcrSalesQuickQuoteConfigure = new MCRSalesQuickQuoteConfigure();
                        mcrSalesQuickQuoteConfigure.parmSearchText(_mcrItemIdSearch);
                        mcrSalesQuickQuoteConfigure.parmSearchResults(searchResults);

                        args.parmObject(mcrSalesQuickQuoteConfigure);

                        // Must pass datasource
                        args.record(_common);

                        // Call the MCRSalesQuickQuote form.
                        formRun = new MenuFunction(
                            menuItemDisplayStr(MCRSalesQuickQuote),
                            MenuItemType::Display).create(args);
                        formRun.run();
                        formRun.wait();

                        if (mcrSalesQuickQuoteConfigure.parmRecordsCreated())
                        {
                            recordsCreated = true;
                            FormDataSource dataSource = FormDataUtil::getFormDataSource(_common);
                            position = dataSource.getPosition();
                            dataSource.delete();
                            dataSource.research(true);
                            dataSource.setPosition(position);
                        }
                    }
                }
                catch
                {
                    Global::exceptionTextFallThrough();
                }
            }
        }

        return [productRecId, recordsCreated];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the search text for all released products for the
    /// specified product.
    /// </summary>
    /// <param name="_product">
    /// <c>RecID</c> of the product that was changed.
    /// </param>
    /// <remarks>
    /// Created to update released products in asynchronous mode.
    /// </remarks>
    public static void updateFromProduct(RefRecId _product)
    {
        int infoLogLineStart = infologLine();

        SysOperationServiceController controller = new MCRInventSearchController(
                classStr(MCRInventSearch),
                methodStr(MCRInventSearch, updateReleasedProducts),
                MCRInventSearchUpdateFromProductFlight::instance().isEnabled() ? MCRInventSearch::updateFromProductExecutionMode() : SysOperationExecutionMode::Asynchronous);

        MCRInventSearchDataContract dataContract = controller.getDataContractObject('_dataContract');
        dataContract.parmProduct(_product);

        controller.run();

        infolog.clear(infologLineStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromProductExecutionMode</Name>
				<Source><![CDATA[
    [Replaceable, Wrappable]
    internal static SysOperationExecutionMode updateFromProductExecutionMode()
    {
        return SysOperationExecutionMode::Asynchronous;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>