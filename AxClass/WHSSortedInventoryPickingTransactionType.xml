<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSortedInventoryPickingTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSortedInventoryPickingTransactionType</c> class handles logic specific to the sorted inventory picking work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::SortedInventoryPicking)]
public final class WHSSortedInventoryPickingTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::OutboundSorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSOutboundSortLocationDirective);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSOutboundSortWorkTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        WHSCancelWorkSortedInventoryPicking::cancelWork(_workTable.TargetLicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isNegativeAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isReplenishmentAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.inventTransId)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSLoadLine)), fieldNum(WHSLoadLine, InventTransId)).value(queryValue(_parameters.inventTransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        if (_locationProfile.LocType != WhsParameters::find().ShipFinalLocType)
        {
            return strFmt("@WAX:FinalPutLocationMustBeFinalShippingLoc", _location.wmsLocationId, workTransType);
        }
        if (_locationProfile.checkIfLocationIsFinalShippingLocationAndNonLPControlled())
        {
            return strFmt("@WAX:FinalPutLocationMustBeLPControlled",_location.wmsLocationId, workTransType);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsLoadLine = _query.dataSourceTable(tableNum(WHSLoadLine));
        QueryBuildDataSource qbdsInventDim = qbdsLoadLine.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>