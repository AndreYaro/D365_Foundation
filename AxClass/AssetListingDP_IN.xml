<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetListingDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetListingDP_IN</c> class declares the variables and tables required
/// for the <c>AssetListing_IN</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetListing))
]
class AssetListingDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    AssetListingTmp_IN assetListingTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetGroupNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the GroupNetBookValue for a particular asset group and asset book combination.
    /// </summary>
    /// <param name="_assetGroup">
    /// Passes asset group value to this method.
    /// </param>
    /// <param name="_bookId">
    /// Passes asset bookID value to this method.
    /// </param>
    /// <param name="_booktype">
    /// Passes asset book type value to this method.
    /// </param>
    /// <returns>
    /// GroupNetBookValue for a particular Asset Group.
    /// </returns>
    private AssetNetBookValue getAssetGroupNetBookValue(
        AssetGroupId        _assetGroup,
        AssetBookId    _bookId)
    {
        boolean      allAssetsSold;
        AssetSumCalc assetSumCalc;

        assetSumCalc  = AssetSumCalc_Trans_IN::newAssetYear(_assetGroup, _bookId);
        allAssetsSold = AssetBook::checkAllAssetsSold_IN(_assetGroup, _bookId);

        assetSumCalc.parmAllAssetsSold_IN(allAssetsSold);
        assetSumCalc.parmGroup_IN(NoYes::Yes);

        return assetSumCalc.netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetListingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>AssetListingTmp_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetListingTmp_IN))
    ]
    public AssetListingTmp_IN getAssetListingTmp()
    {
        return assetListingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetListingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>AssetListingTmp_IN</c>.
    /// </summary>
    /// <param name="_assetBook">
    /// Passes the cursor of <c>AssetBook</c> table to this method.
    /// </param>
    /// <param name="_assetTable">
    /// Passes the cursor of <c>AssetTable</c> table to this method.
    /// </param>
    /// <param name="_currentStatus">
    /// Passes the Asset Group status to this method.
    /// </param>
    /// <param name="_grpNetBookValueColumnvisibilityFlag">
    /// Passes the flag to toggle the visibility of GroupNetBookValue column in design.
    /// </param>
    private void insertAssetListingTmp(
        AssetBook  _assetBook,
        AssetTable      _assetTable,
        AssetStatus     _currentStatus,
        NoYes           _grpNetBookValueColumnvisibilityFlag)
    {
        assetListingTmp.AssetGroup        = _assetBook.AssetGroup;
        assetListingTmp.AssetId           = _assetBook.AssetId;
        assetListingTmp.AssetName         = _assetTable.Name;
        assetListingTmp.BookId            = _assetBook.BookId;
        assetListingTmp.Status            = _assetBook.Status;
        assetListingTmp.AssetNetBookValue = _assetBook.assetNetBookValue();

        assetListingTmp.GroupNetBookValue = this.getAssetGroupNetBookValue(
            _assetBook.AssetGroup,
            _assetBook.BookId);

        assetListingTmp.GroupNetBookValueVisibilityFlag = _grpNetBookValueColumnvisibilityFlag;
        assetListingTmp.AssetGroupStatus                = _currentStatus;
        assetListingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>AssetListing_IN</c> report.
    /// </summary>
    public void processReport()
    {
        Query           query;
        QueryRun        queryRun;
        AssetGroupId    currentAssetGroupId;
        AssetBook  assetBookLoc;
        AssetBook  assetBook;
        AssetTable      assetTable;
        NoYes           GrpNetBookValueColumnvisibilityFlag;
        AssetStatus     currentStatus = AssetStatus::NoAcquisition;

        query    = this.parmQuery();
        queryRun = new QueryRun(query);

        if (AssetParameters::find().DepreciationIncomeTaxAct_IN)
        {
            GrpNetBookValueColumnvisibilityFlag = NoYes::Yes;
        }

        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));
            assetTable     = queryRun.get(tablenum(AssetTable));

            if (currentAssetGroupId != assetBook.AssetGroup)
            {
                select firstOnly recId from assetBookLoc
                    where assetBookLoc.AssetGroup == assetBook.AssetGroup
                        && assetBookLoc.Status    == AssetStatus::Open;

                currentAssetGroupId = assetBook.AssetGroup;
            }

            if (assetBookLoc.RecId)
            {
                currentStatus = AssetStatus::Open;
            }
            else
            {
                currentStatus = assetBook.Status;
            }

            this.insertAssetListingTmp(
                assetBook,
                assetTable,
                currentStatus,
                GrpNetBookValueColumnvisibilityFlag);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>