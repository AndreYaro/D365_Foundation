<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAccountingDistributionRepository</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjectAccountingDistributionRepository
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>distributionsForCommitment</Name>
				<Source><![CDATA[
    public Map distributionsForCommitment(RefRecId _sourceDocumentLine, SourceDocumentLineItem _relievingSourceDocumentLineItem = null, RefRecId _deletedSourceDocumentLine = 0)
    {
        Map distributionsForCommitment;
        Set sourceDocumentLines;

        sourceDocumentLines = this.getSourceDocumentLinesSet(_sourceDocumentLine);
        distributionsForCommitment = this.getDistributionsForCommitmentMap(sourceDocumentLines, _relievingSourceDocumentLineItem, _deletedSourceDocumentLine);

        return distributionsForCommitment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDistributionsList</Name>
				<Source><![CDATA[
    protected AccountingDistributionList getActiveDistributionsList(RefRecId _sourceDocumentLine)
    {
        AccountingDistribution      accountingDistribution;
        AccountingDistribution      reversingAccountingDistribution;
        AccountingDistributionList  accountingDistributions;

        accountingDistributions = AccountingDistributionList::construct();

        if (_sourceDocumentLine)
        {
            while select accountingDistribution
                order by accountingDistribution.MonetaryAmount
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLine &&
                    accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                notexists join reversingAccountingDistribution
                where reversingAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId &&
                    reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
            {
                accountingDistributions.addEnd(accountingDistribution);
            }
        }

        return accountingDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionsForCommitmentMap</Name>
				<Source><![CDATA[
    protected Map getDistributionsForCommitmentMap(Set _sourceDocumentLines, SourceDocumentLineItem _relievingSourceDocumentLineItem = null, RefRecId _deletedSourceDocumentLine = 0)
    {
        Map                                     distributionsForCommitment;
        SetEnumerator                           setEnumerator;
        RefRecId                                sourceDocumentLine;
        AccountingDistributionList              accountingDistributionList;
        AccountingDistributionListEnumerator    accountingDistributionListEnumerator;
        AccountingDistribution                  accountingDistribution;
        List                                    relievingDistributions;

        distributionsForCommitment = new Map(Types::Record, Types::Class);

        if (_sourceDocumentLines)
        {
            setEnumerator = _sourceDocumentLines.getEnumerator();
            while (setEnumerator.moveNext())
            {
                sourceDocumentLine = setEnumerator.current();

                accountingDistributionList = this.getActiveDistributionsList(sourceDocumentLine);
                if (accountingDistributionList)
                {
                    accountingDistributionListEnumerator = accountingDistributionList.getEnumerator();
                    while (accountingDistributionListEnumerator.moveNext())
                    {
                        accountingDistribution = accountingDistributionListEnumerator.current();
                        relievingDistributions = this.getRelievingDistributionsList(accountingDistribution, _relievingSourceDocumentLineItem, _deletedSourceDocumentLine);
                        distributionsForCommitment.insert(accountingDistribution, relievingDistributions);
                    }
                }
            }
        }

        return distributionsForCommitment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionToRelieve</Name>
				<Source><![CDATA[
    protected AccountingDistribution getDistributionToRelieve(RecId _relievingSourceDocumentLineId, AccountingDistribution _relievingDistribution)
    {
        AccountingDistribution  referenceDistribution = AccountingDistribution::find(_relievingDistribution.ReferenceDistribution);
        AccountingDistribution  distributionToRelieve;

        if (referenceDistribution && referenceDistribution.SourceDocumentLine != _relievingSourceDocumentLineId)
        {
            distributionToRelieve = referenceDistribution;
        }

        return distributionToRelieve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelievingDistributionsList</Name>
				<Source><![CDATA[
    protected List getRelievingDistributionsList(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _relievingSourceDocumentLineItem = null, RefRecId _deletedSourceDocumentLine = 0)
    {
        List    relievingDistributions;

        relievingDistributions = new List(Types::Record);

        if (_accountingDistribution)
        {
            this.updateRelievingDistributionsList(_accountingDistribution, relievingDistributions, _accountingDistribution.SourceDocumentLine, _relievingSourceDocumentLineItem, _deletedSourceDocumentLine);
        }

        return relievingDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLinesSet</Name>
				<Source><![CDATA[
    protected Set getSourceDocumentLinesSet(RefRecId _sourceDocumentLine)
    {
        Set                 sourceDocumentLines;
        SourceDocumentLine  childSourceDocumentLine;
        Stack               stack;
        RefRecId            currenSourceDocumentLine;

        sourceDocumentLines = new Set(Types::Int64);

        if (_sourceDocumentLine)
        {
            stack = new Stack();
            stack.push([_sourceDocumentLine]);

            while (stack.qty())
            {
                [currenSourceDocumentLine] = stack.pop();

                sourceDocumentLines.add(currenSourceDocumentLine);

                while select ParentSourceDocumentLine, RecId
                    from childSourceDocumentLine
                    where childSourceDocumentLine.ParentSourceDocumentLine == currenSourceDocumentLine
                {
                    stack.push([childSourceDocumentLine.RecId]);
                }
            }
        }

        return sourceDocumentLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIncludeChildRelievingSourceDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether to include the child accounting distribution reference distribution
    /// as the relieving document for the current distribution commitments updation.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The <c>RecId</c> buffer that holds the source document line recId of the current accounting distribution.
    /// </param>
    /// <param name="_relievedSourceDocumentLines">
    /// The map that holds the relieved source document lines of the current accounting distribution.
    /// </param>
    public void doIncludeChildRelievingSourceDocumentLines(RecId _sourceDocumentLineRecId,
		Set   _relievedSourceDocumentLines)
    {
        AccountingDistribution  parentAccountingDistribution;
        AccountingDistribution  childAccountingDistribution;
        AccountingDistribution  refAccountingDistribution;
        PurchLine               purchLine;
        SourceDocumentLine      childSourceDocumentLine;

        if (SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(_sourceDocumentLineRecId)) is PurchOrderLineSourceDocumentLineItem)
        {
            purchLine = PurchLine::findBySourceDocumentLine(_sourceDocumentLineRecId);

            if (purchLine.PurchReqId && purchLine.BudgetReservationLine_PSN)
            {
                while select childAccountingDistribution
                    where childAccountingDistribution.ReferenceDistribution != 0 &&
                          childAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
                    join SourceDocumentLine from refAccountingDistribution
                        where refAccountingDistribution.RecId == childAccountingDistribution.ReferenceDistribution
                        exists join ParentSourceDocumentLine from childSourceDocumentLine
                            where childSourceDocumentLine.ParentSourceDocumentLine == _sourceDocumentLineRecId &&
                                  childSourceDocumentLine.RecId == childAccountingDistribution.SourceDocumentLine
                            exists join SourceDocumentLine from parentAccountingDistribution
                                where parentAccountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId &&
                                      parentAccountingDistribution.ReferenceDistribution != childAccountingDistribution.ReferenceDistribution
                {
                    if (SourceDocumentLineItem::newFromSourceDocumentLine(
						SourceDocumentLine::find(refAccountingDistribution.SourceDocumentLine)) is BudgetReservationSourceDocumentLineItem_PSN)
                    {
                        this.updateRelievedSourceDocumentLinesSet(childAccountingDistribution, _relievedSourceDocumentLines, childAccountingDistribution.SourceDocumentLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relievedSourceDocumentLines</Name>
				<Source><![CDATA[
    public Set relievedSourceDocumentLines(RefRecId _sourceDocumentLine)
    {
        AccountingDistribution  accountingDistribution;
        Set                     relievedSourceDocumentLines;

        relievedSourceDocumentLines = new Set(Types::Int64);

        if (_sourceDocumentLine)
        {
            while select accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLine
            {
                this.updateRelievedSourceDocumentLinesSet(accountingDistribution, relievedSourceDocumentLines, _sourceDocumentLine);
            }
        }

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            this.doIncludeChildRelievingSourceDocumentLines(_sourceDocumentLine, relievedSourceDocumentLines);
        }

        return relievedSourceDocumentLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelievedSourceDocumentLinesSet</Name>
				<Source><![CDATA[
    protected void updateRelievedSourceDocumentLinesSet(AccountingDistribution _currentAccountingDistribution, Set _relievedSourceDocumentLines, RefRecId _sourceDocumentLine)
    {
        AccountingDistribution  referencedAccountingDistribution;
        SourceDocumentLineItem  sourceDocumentLineItem;
        boolean                 isARelievedDistribution;
        sourceDocumentLine      localSourceDocumentLine;

        if (_currentAccountingDistribution.ReferenceDistribution)
        {
            referencedAccountingDistribution = AccountingDistribution::find(_currentAccountingDistribution.ReferenceDistribution);
            if (referencedAccountingDistribution.SourceDocumentLine != _sourceDocumentLine)
            {
                isARelievedDistribution = false;

                sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(referencedAccountingDistribution.SourceDocumentLine));
                if (ProjectCommitmentFacade::parmCanBookCommitments(sourceDocumentLineItem, CompanyInfo::findRecId(referencedAccountingDistribution.AccountingLegalEntity).DataArea))
                {
                    isARelievedDistribution = true;
                }

                localSourceDocumentLine = sourceDocumentLineItem.parmSourceDocumentLine();

                if (enumName2Id(localSourceDocumentLine.TypeEnumName) == enumNum(SourceDocumentLine_TravelRequisition) &&
                     localSourceDocumentLine.TypeEnumValue == SourceDocumentLine_TravelRequisition::TravelRequisitionLine &&
                     TrvParameters::find().IsReleaseEncumbrancesOnCloseRequisition)
                {
                    if (TrvRequisitionTable::find(TrvRequisitionLine::findBySourceDocumentLine(localSourceDocumentLine.RecId).TrvRequisitionTable).ReconciliationStatus == TrvRequisitionReconciliationStatus::Closed)
                    {
                        isARelievedDistribution= false;
                    }
                }

                if (isARelievedDistribution
					&& enumName2Id(localSourceDocumentLine.TypeEnumName) == enumNum(BudgetReservation_SourceDocumentLine_PSN)
					&& localSourceDocumentLine.TypeEnumValue == enum2int(BudgetReservation_SourceDocumentLine_PSN::BudgetReservationLine)
                    && _currentAccountingDistribution.FinalizeAccountingEvent)                
                {
                    isARelievedDistribution = false;                    
                }

                if (isARelievedDistribution
                    && enumName2Id(localSourceDocumentLine.TypeEnumName) == enumNum(SourceDocumentLine_ProductRequisition)
                    && localSourceDocumentLine.TypeEnumValue == SourceDocumentLine_ProductRequisition::PurchaseRequisitionLine
                    && FeatureStateProvider::isFeatureEnabled(ProjCommittedCostPRToPOFeature::instance()))
                {
                    PurchReqLine purchReqLine = PurchReqLine::findBySourceDocumentLine(localSourceDocumentLine.RecId);
                    if (purchReqLine.purchLine().purchTable().DocumentState != VersioningDocumentState::Confirmed)
                    {
                        isARelievedDistribution = false;
                    }
                }

                if (isARelievedDistribution)
                {
                    _relievedSourceDocumentLines.add(sourceDocumentLineItem.parmSourceDocumentLine().RecId);
                }
                else
                {
                    this.updateRelievedSourceDocumentLinesSet(referencedAccountingDistribution, _relievedSourceDocumentLines, _sourceDocumentLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipTaxForDeleteScenario</Name>
				<Source><![CDATA[
    private boolean shouldSkipTaxForDeleteScenario(AccountingDistribution _referencedAccountingDistribution, SourceDocumentLineRecId _deletedSourceDocumentLine)
    {
        // For tax scenario, tax are the child of the deleted transactions.
        // The child of the deleting transactions should not be included for the relieving distribution list.
        AccountingDistribution referencedChildOfDeletedDistribution;
        AccountingDistribution referencedDeletedDistribution;
        select firstonly RecId from referencedChildOfDeletedDistribution
            where referencedChildOfDeletedDistribution.RecId == _referencedAccountingDistribution.RecId
        join RecId from referencedDeletedDistribution
            where referencedDeletedDistribution.RecId == referencedChildOfDeletedDistribution.ParentDistribution
                && referencedDeletedDistribution.SourceDocumentLine == _deletedSourceDocumentLine;

        return referencedDeletedDistribution.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelievingDistributionsList</Name>
				<Source><![CDATA[
    protected void updateRelievingDistributionsList(AccountingDistribution _currentAccountingDistribution, List _relievingDistributions, RefRecId _sourceDocumentLine, SourceDocumentLineItem _relievingSourceDocumentLineItem = null, RefRecId _deletedSourceDocumentLine = 0)
    {
        AccountingDistribution referencedAccountingDistribution;

        while select referencedAccountingDistribution
            where referencedAccountingDistribution.ReferenceDistribution == _currentAccountingDistribution.RecId
        {
            if (_deletedSourceDocumentLine
                && referencedAccountingDistribution.SourceDocumentLine == _deletedSourceDocumentLine)
            {
                continue;
            }
            else if (_deletedSourceDocumentLine
                && FeatureStateProvider::isFeatureEnabled(ProjEnableStreamlineCostAndSalesPriceCalcFeature::instance())
                && this.shouldSkipTaxForDeleteScenario(referencedAccountingDistribution, _deletedSourceDocumentLine))
            {
                continue;
            }
            else if (referencedAccountingDistribution.SourceDocumentLine != _sourceDocumentLine)
            {
                boolean isARelievingDistribution = false;
                SourceDocumentLineItem sourceDocumentLineItem;

                if (_relievingSourceDocumentLineItem && _relievingSourceDocumentLineItem.parmSourceDocumentLine().RecId == SourceDocumentLine::findTopParentSourceDocumentLine(referencedAccountingDistribution.SourceDocumentLine).RecId)
                {
                    sourceDocumentLineItem = _relievingSourceDocumentLineItem;
                }
                else
                {
                    sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(referencedAccountingDistribution.SourceDocumentLine);
                }
                if (ProjectSourceDocumentLineItemHelper::hasProject(sourceDocumentLineItem))
                {
                    if (ProjectCommitmentFacade::parmCanBookCommitments(sourceDocumentLineItem, CompanyInfo::findRecId(referencedAccountingDistribution.AccountingLegalEntity).DataArea))
                    {
                        isARelievingDistribution = true;
                    }
                    else if (SubledgerJournalizerProjectExtension::parmCanBookActuals(sourceDocumentLineItem))
                    {
                        ProjectAccountingDistribution referencedProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(referencedAccountingDistribution.RecId);
                        if (referencedProjectAccountingDistribution.ProjCostTransCost ||
                            referencedProjectAccountingDistribution.ProjCostTransSale ||
                            referencedProjectAccountingDistribution.ProjItemTransCost ||
                            referencedProjectAccountingDistribution.ProjItemTransSale)
                        {
                            isARelievingDistribution = true;
                        }
                    }
                }

                if (isARelievingDistribution)
                {
                    _relievingDistributions.addEnd(referencedAccountingDistribution);
                }
                else
                {
                    this.updateRelievingDistributionsList(referencedAccountingDistribution, _relievingDistributions, _sourceDocumentLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>ProjectAccountingDistributionRepository</c> class for the given
    /// source document.
    /// </summary>
    /// <param name="_sourceDocument">
    /// An instance of the <c>SourceDocument</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ProjectAccountingDistributionRepository</c> class.
    /// </returns>
    public static ProjectAccountingDistributionRepository newFromSourceDocument(SourceDocument _sourceDocument)
    {
        ProjectAccountingDistributionRepository projectAccountingDistributionRepository;

        if (_sourceDocument)
        {
            switch (_sourceDocument.parmSourceDocumentHeader().SourceRelationType)
            {
                case tableNum(BudgetReservationHeader_PSN):
                    projectAccountingDistributionRepository = new BudgetReservationProjectAccountingDistributionRepository_PSN();
                    break;

                default:
                    projectAccountingDistributionRepository = new ProjectAccountingDistributionRepository();
            }
        }
        else
        {
            projectAccountingDistributionRepository = new ProjectAccountingDistributionRepository();
        }

        return projectAccountingDistributionRepository;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>