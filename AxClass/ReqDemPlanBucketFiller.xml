<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanBucketFiller</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Persists date buckets in <c>ReqDemPlanBucket</c> table.
/// </summary>
class ReqDemPlanBucketFiller
{
    date                        startDate, endDate;
    ReqDemPlanDateGranularity   dateGranularity;
    boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ReqDemPlanBucketFiller</c> object.
    /// </summary>
    /// <param name = "_startDate">The date from which date buckets should be created.</param>
    /// <param name = "_endDate">The date to which date buckets should be created.</param>
    /// <param name = "_dateGranularity">The granularity to be used for date bucket filling.</param>
    public void new(date _startDate, date _endDate, ReqDemPlanDateGranularity _dateGranularity)
    {
        startDate = _startDate;
        endDate = _endDate;
        dateGranularity = _dateGranularity;
        reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public date parmStartDate(date _startDate = StartDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public date parmEndDate(date _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateGranularity</Name>
				<Source><![CDATA[
    public ReqDemPlanDateGranularity parmDateGranularity(ReqDemPlanDateGranularity _dateGranularity = dateGranularity)
    {
        dateGranularity = _dateGranularity;

        return dateGranularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>ReqDemPlanBucket</c> table with date buckets.
    /// </summary>
    public int fill()
    {
        BIDateDimensionsViewPeriods biDatePeriods;
        ReqDemPlanBucket            bucket;

        int infologLineTry = infologLine();

        try
        {
            delete_from bucket;

            #localmacro.insertForecastDates
                insert_recordset bucket(CurrentPeriodStartDate, NextPeriodStartDate, Bucket)
                select %1, %2, %3
                    from biDatePeriods
                    group by %1, %2, %3
                    where biDatePeriods.%1 >= startDate
                       && biDatePeriods.%1 <= endDate;
            #endmacro

            new ReqDemPlanDataProcessingHelper().skipAll(bucket);

            ttsbegin;
            switch (dateGranularity)
            {
                case ReqDemPlanDateGranularity::Day:
                    //macro will add same column twice in the order-by list, which is not allowed
                    insert_recordset bucket(CurrentPeriodStartDate, NextPeriodStartDate, Bucket)
                    select DateKey, DateKey, CurrentDateKey
                        from biDatePeriods
                        group by DateKey, CurrentDateKey
                        where biDatePeriods.DateKey >= startDate
                            && biDatePeriods.DateKey <= endDate;

                    update_recordset bucket
                        setting NextPeriodStartDate = bucket.CurrentPeriodStartDate + 1;

                    break;
                case ReqDemPlanDateGranularity::Week:
                    #insertForecastDates(CurrentWeekStart, NextWeekStart, CurrentWeekKey);
                    break;
                case ReqDemPlanDateGranularity::Month:
                    #insertForecastDates(CurrentMonthStart, NextMonthStart, CurrentMonthKey);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            ttscommit;
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, infologLineTry)

        return int642int(bucket.RowCount());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>