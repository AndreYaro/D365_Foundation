<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingListReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSPickingListReportDP</c> class provides data for the associated reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WMSPickingListReport))
]
public class WmsPickingListReportDP extends SRSReportDataProviderBase
{
    WMSPickingListReportTmp           wmsPickingListReportTmp;
    WMSPickingListReportHeaderTmp     wmsPickingListReportHeaderTmp;

    BarcodeSetup                barcodeSetup;
    Barcode                     barcode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barCodeStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the bar-code string for the picking route ID.
    /// </summary>
    /// <param name="_pickingRouteId">
    ///    The ID of the picking route.
    /// </param>
    /// <returns>
    ///    The string that represents the bar-code for the picking route ID.
    /// </returns>
    private BarCodeString barCodeStr(WMSPickingRouteID _pickingRouteId)
    {
        str barcodeContent = strUpr(_pickingRouteId);

        if (!barcodeContent)
        {
            return '';
        }

        if (barcodeSetup.validateBarcode(barcodeContent))
        {
            barcode.string(true, barcodeContent);
            barcode.encode();
        }
        else
        {
            throw(error(strFmt("@SYS41409", barcode.barcodeType(), barcodeContent)));
        }

        if (!barcode)
        {
            return '';
        }

        return barcode.barcodeStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSPickingListReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves data for the report header from the temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary <c>WMSPickingListHeaderTmp</c>table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSPickingListReportHeaderTmp))
    ]
    public WMSPickingListReportHeaderTmp getWMSPickingListReportHeaderTmp()
    {
        select * from wmsPickingListReportHeaderTmp;
        return wmsPickingListReportHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSPickingListReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary <c>WMSPickingListTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSPickingListReportTmp))
    ]
    public WMSPickingListReportTmp getWMSPickingListReportTmp()
    {
        select * from wmsPickingListReportTmp;
        return wmsPickingListReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a bar-code object according to the setup in the <c>InventParameters</c> table.
    /// </summary>
    private void initBarcode()
    {
        BarcodeSetupId  barcodeSetupId;

        barcodeSetupId = InventParameters::find().BarcodeSetupIdPick;
        barcodeSetup   = BarcodeSetup::find(barcodeSetupId);
        barcode        = barcodeSetup.barcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the query used to get the report data.
    /// </summary>
    /// <remarks>
    ///    Adds the required ranges and specifies the sorting of the results.
    /// </remarks>
    private void initQuery()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query = this.parmQuery();
        str                     expeditionStatusRange;

        queryBuildDataSource    = SysQuery::findOrCreateDataSource(query, tableNum(WMSOrderTrans));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSOrderTrans, ExpeditionStatus));
        expeditionStatusRange = queryValue(WMSExpeditionStatus::Registered);
        expeditionStatusRange = queryRangeConcat(expeditionStatusRange, WMSExpeditionStatus::Activated);
        queryBuildRange.value(expeditionStatusRange);
        queryBuildRange.status(RangeStatus::Hidden);

        WMSOrderTrans::queryAddSortDefault(queryBuildDataSource);

        this.parmQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSPickingListReportTmp</Name>
				<Source><![CDATA[
    protected void initWMSPickingListReportTmp(WMSOrderTrans _wmsOrderTrans, WMSPickingRoute _wmsPickingRoute, InventDim _inventDim)
    {
        wmsPickingListReportTmp.PickingRouteID    = _wmsPickingRoute.PickingRouteID;
        wmsPickingListReportTmp.ItemId            = _wmsOrderTrans.ItemId;
        wmsPickingListReportTmp.Qty               = _wmsOrderTrans.Qty;
        wmsPickingListReportTmp.PdsCWQty          = _wmsOrderTrans.PdsCWQty;
        wmsPickingListReportTmp.PdsCWUnitId       = _wmsOrderTrans.pdsCWUnitId();
        wmsPickingListReportTmp.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSPickingListReportHeaderTmp</Name>
				<Source><![CDATA[
    protected void initWMSPickingListReportHeaderTmp(WMSPickingRoute _wmsPickingRoute, InventDim _inventDim)
    {
        wmsPickingListReportHeaderTmp.PdsEnabled          = (#PdsCatchWeightEnabled? NoYes::Yes : NoYes::No);
        wmsPickingListReportHeaderTmp.PickingRouteID      = _wmsPickingRoute.PickingRouteID;
        wmsPickingListReportHeaderTmp.TransType           = _wmsPickingRoute.TransType;
        wmsPickingListReportHeaderTmp.TransRefId          = _wmsPickingRoute.TransRefId;
        wmsPickingListReportHeaderTmp.ExpeditionStatus    = _wmsPickingRoute.ExpeditionStatus;
        wmsPickingListReportHeaderTmp.ActivationDateTime  = _wmsPickingRoute.ActivationDateTime;
        wmsPickingListReportHeaderTmp.EndDateTime         = _wmsPickingRoute.EndDateTime;

        wmsPickingListReportHeaderTmp.BarcodeStr          = this.barCodeStr(_wmsPickingRoute.PickingRouteID);
        wmsPickingListReportHeaderTmp.BarcodeFontName     = barcodeSetup.FontName;
        wmsPickingListReportHeaderTmp.BarcodeFontSize     = barcodeSetup.FontSize;

        wmsPickingListReportHeaderTmp.InventLocationId    = _inventDim.InventLocationId;
        wmsPickingListReportHeaderTmp.InventSiteId        = _inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the <c>WMSPickingListReport</c> report.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method should compute data and populate the data
    /// tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun                queryRun;
        WMSPickingRoute         wmsPickingRoute;
        WMSOrderTrans           wmsOrderTrans;
        InventDim               inventDim;

        super();

        this.initBarcode();
        this.initQuery();

        queryRun = new QueryRun(this.parmQuery());

        wmsPickingListReportHeaderTmp.clear();

        while (queryRun.next())
        {
            wmsPickingListReportTmp.clear();

            wmsPickingRoute = queryRun.get(tableNum(WMSPickingRoute));
            wmsOrderTrans   = queryRun.get(tableNum(WMSOrderTrans));
            inventDim       = queryRun.get(tableNum(InventDim));

            this.initWMSPickingListReportTmp(wmsOrderTrans, wmsPickingRoute, inventDim);

            wmsPickingListReportTmp.insert();

            if (!wmsPickingListReportHeaderTmp)
            {
                this.initWMSPickingListReportHeaderTmp(wmsPickingRoute, inventDim);

                wmsPickingListReportHeaderTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>