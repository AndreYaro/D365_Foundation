<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPost_Purch_Cancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookPost_Purch_Cancel_RU extends BookPost_Purch_RU implements BatchRetryable
{
    TransDate   lastClosingDate;
    Set         processedBlockedTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected boolean check()
    {
        boolean                             ret = true;
        PurchBookVATProcessLogTable_RU      purchBookVATProcessLogTable;
        BookStructSmallVATAmounts_RU        usedAmounts, currentAmounts;
        AmountMST                           totalAmountToCancel, usedInPurch, usedInSales;
        SalesBookVATProcessLogTrans_RU      salesBookProcessLogTrans;
        SalesBookVATProcessLogTransOper_RU  salesBookProcessLogTransOper;

        boolean checkAmounts(AmountMST _currentAmount, AmountMST _usedAmount)
        {
            if (tmpProcessLogTransOper.DocumentType != PurchBookVATDocumentType_RU::ContractorsWork_2005 && _currentAmount * _usedAmount < 0)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (tmpProcessLogTransOper.DocumentType == PurchBookVATDocumentType_RU::ContractorsWork_2005)
            {
                if (! _usedAmount)
                {
                    return true;
                }
                else
                {
                    if (_currentAmount * _usedAmount < 0)
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
            }
            if (abs(_currentAmount) <= abs(_usedAmount))
            {
                return true;
            }
            return false;
        }
        ;

        setPrefix("@SYS13894");

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            totalAmountToCancel = 0;

            setPrefix(strFmt("@GLS111360", tmpProcessLogTrans.AccountNum, tmpProcessLogTrans.FactureExternalId));

            select firstonly TransDate from purchBookVATProcessLogTable
                where purchBookVATProcessLogTable.RecId == tmpProcessLogTrans.LogTableRefRecId;

            if (transDate < purchBookVATProcessLogTable.TransDate)
            {
                ret = false;
                tmpProcessLogTrans.Error = NoYes::Yes;
                tmpProcessLogTrans.update();
                error("@GLS102559");
            }

            while select tmpProcessLogTransOper
                where tmpProcessLogTransOper.RefRecId               == tmpProcessLogTrans.RecId             &&
                      tmpProcessLogTransOper.LogTableRefRecId       == tmpProcessLogTrans.LogTableRefRecId
            {
                usedAmounts    = PurchBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                 tmpProcessLogTransOper.TaxCode,
                                                                                 tmpProcessLogTransOper.DefaultDimension,
                                                                                 tmpProcessLogTransOper.InventTransId,
                                                                                 tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                 tmpProcessLogTrans.PaymentRecIdRef,
                                                                                 tmpProcessLogTrans.InvoiceCompany,
                                                                                 tmpProcessLogTrans.PaymentCompany,
                                                                                 tmpProcessLogTrans.SettlementRecId,
                                                                                 tmpProcessLogTrans.SettlementDate,
                                                                                 false,
                                                                                 tmpProcessLogTrans.LogTableRefRecId,
                                                                                 NoYes::Yes,
                                                                                 true,
                                                                                 tmpProcessLogTransOper.DocumentType,
                                                                                 tmpProcessLogTrans.ProcessingType,
                                                                                 tmpProcessLogTrans.CorrectedPeriod,
                                                                                 tmpProcessLogTrans.CorrectedFactureId,
                                                                                 tmpProcessLogTransOper.rDeferralsTransRecId);

                currentAmounts = new BookStructSmallVATAmounts_RU();
                currentAmounts.addAmounts(tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount,
                                          tmpProcessLogTransOper.AmountLiableToVAT,
                                          tmpProcessLogTransOper.TaxAmount);

                if (! checkAmounts(currentAmounts.amountInclVAT(), usedAmounts.amountInclVAT())         ||
                    ! checkAmounts(currentAmounts.amountLiableToVAT(), usedAmounts.amountLiableToVAT()) ||
                    ! checkAmounts(currentAmounts.taxAmountVAT(), usedAmounts.taxAmountVAT()))
                {
                    ret = false;

                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS102590");
                }

                if (PurchBookVATProcessLogTransOper_RU::findContractorsWithSettlement(tmpProcessLogTrans.FactureId,
                                                                                      tmpProcessLogTransOper.TaxCode,
                                                                                      tmpProcessLogTransOper.DefaultDimension,
                                                                                      tmpProcessLogTransOper.InventTransId,
                                                                                      tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                      tmpProcessLogTrans.PaymentRecIdRef,
                                                                                      tmpProcessLogTrans.InvoiceCompany,
                                                                                      tmpProcessLogTrans.PaymentCompany,
                                                                                      tmpProcessLogTrans.SettlementRecId,
                                                                                      tmpProcessLogTrans.SettlementDate,
                                                                                      tmpProcessLogTransOper.DocumentType,
                                                                                      tmpProcessLogTransOper.TransDate,
                                                                                      tmpProcessLogTrans.ProcessingType))
                {
                    ret = false;

                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS111437");
                }

                totalAmountToCancel += tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount;
            }

            if (tmpProcessLogTrans.InvoiceRecIdRef &&
                tmpProcessLogTrans.TransType        != SalesPurchBookTransType_RU::VATStandardCancellation &&
                tmpProcessLogTrans.ProcessingType   != PurchBookProcessingType_RU::ExpConfirmation)
            {
                usedInPurch = PurchBookVATProcessLogTransOper_RU::usedAmounts_InvoiceRecId(tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                           tmpProcessLogTrans.InvoiceCompany,
                                                                                           transDate,
                                                                                           false).amountInclVAT();
                changecompany(tmpProcessLogTrans.PaymentCompany)
                {
                    usedInSales = SalesBookVATProcessLogTransOper_RU::usedAmounts_InvoiceRecId(tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                               tmpProcessLogTrans.InvoiceCompany,
                                                                                               false).amountInclVAT();
                }
                if (abs(usedInSales) > abs(usedInPurch - totalAmountToCancel))
                {
                    ret = false;
                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS113569");
                }
            }
            if (tmpProcessLogTrans.TransType == SalesPurchBookTransType_RU::Prepayment)
            {
                select firstonly RecId from salesBookProcessLogTrans
                    where salesBookProcessLogTrans.TransType       == SalesPurchBookTransType_RU::PrepaymentStorno &&
                          salesBookProcessLogTrans.PaymentRecIdRef == tmpProcessLogTrans.PaymentRecIdRef
                exists join salesBookProcessLogTransOper
                    where salesBookProcessLogTrans.RecId                == salesBookProcessLogTransOper.RefRecId &&
                          salesBookProcessLogTransOper.CanceledRefRecId == 0;
                if (salesBookProcessLogTrans)
                {
                    ret = false;
                    tmpProcessLogTrans.Error = NoYes::Yes;
                    tmpProcessLogTrans.update();
                    error("@GLS113569");
                }
            }
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperation</Name>
				<Source><![CDATA[
        protected PurchBookVATProcessLogTransOper_RU logOperation(AmountMST _taxAmount,
                                                              AmountMST _amountLiableToVAT)
    {
        PurchBookVATProcessLogTransOper_RU   processLogTransOper    = super(_taxAmount, _amountLiableToVAT);
        PurchBookVATProcessLogTransOper_RU   prevProcessLogTransOper;
        PurchBookVATProcessLogTrans_RU       processLogTransLocal;
        ;

        select forupdate firstonly prevProcessLogTransOper
            where prevProcessLogTransOper.RecId == tmpProcessLogTransOper.OrigRecId;

        if ( ! PurchBookTable_RU::canProcessDate(prevProcessLogTransOper.TransDate, lastClosingDate))
        {
            throw error(strFmt("@GLS104850",
                PurchBookVATProcessParameters_RU::find(prevProcessLogTransOper.PurchBookVATProcessParameters_RU).OperationCode,
                processLogTrans.FactureExternalId));
        }

        processLogTransOper.CanceledRefRecId = prevProcessLogTransOper.RecId;
        processLogTransOper.update();

        prevProcessLogTransOper.CanceledRefRecId = processLogTransOper.RecId;
        prevProcessLogTransOper.update();

        if (processLogTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno)
        {
            if ( ! prevProcessLogTransOper.Blocked && ! prevProcessLogTransOper.rDeferralsTransRecId)
            {
                if (processLogTransList.len())
                {
                    processLogTransList.first(processLogTransLocal);
                    do
                    {
                        // if cancelation is performed after transition period for facture posted before transition period
                        // system shouldn't cancel blocked transactions
                        if (! (processLogTransLocal.PurchBookTransDate < #TransitionStartDate && prevProcessLogTransOper.TransDate > #TransitionEndDate) &&
                            BookDataCalc_RU::datePeriodBook(processLogTransLocal.PurchBookTransDate) != BookDataCalc_RU::datePeriodBook(prevProcessLogTransOper.TransDate))
                        {
                            processedBlockedTrans.add(processLogTransLocal.RecId);
                        }
                    }
                    while (processLogTransList.next(processLogTransLocal));
                }
                else if (BookDataCalc_RU::datePeriodBook(processLogTrans.PurchBookTransDate) != BookDataCalc_RU::datePeriodBook(prevProcessLogTransOper.TransDate))
                {
                    processedBlockedTrans.add(processLogTrans.RecId);
                }
            }
        }

        return processLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        SetEnumerator                      setEnumerator;
        PurchBookVATProcessLogTable_RU     purchBookVatProcessLogTable;
        PurchBookVATProcessLogTransOper_RU purchBookVATProcessLogTransOper,newPurchBookVatProcessLogTransOper;
        ;

        lastClosingDate = PurchBookTable_RU::getLastClosedBook().ClosingDate;

        processedBlockedTrans = new Set(typeName2Type(extendedTypeStr(recId)));
        ttsbegin;

        super();

        setEnumerator = processedBlockedTrans.getEnumerator();

        while (setEnumerator.moveNext())
        {
            this.cancelBlockedTrans(setEnumerator.current());

            select firstonly RecId from purchBookVatProcessLogTable
                order by Executed desc ,EndTime desc
                where purchBookVatProcessLogTable.TransDate <= lastClosingDate
            exists join purchBookVATProcessLogTransOper
                where purchBookVATProcessLogTransOper.LogTableRefRecId == purchBookVatProcessLogTable.RecId &&
                      purchBookVATProcessLogTransOper.RefRecId         == setEnumerator.current();

            while select purchBookVATProcessLogTransOper
                where purchBookVATProcessLogTransOper.LogTableRefRecId == purchBookVatProcessLogTable.RecId &&
                      purchBookVATProcessLogTransOper.RefRecId         == setEnumerator.current()           &&
                      purchBookVATProcessLogTransOper.Blocked          == NoYes::Yes                        &&
                      purchBookVATProcessLogTransOper.Correct          == NoYes::No                         &&
                      purchBookVATProcessLogTransOper.CanceledRefRecId != 0
            {
                newPurchBookVatProcessLogTransOper.clear();
                newPurchBookVatProcessLogTransOper.data(purchBookVATProcessLogTransOper);
                newPurchBookVatProcessLogTransOper.LogTableRefRecId = logTable.RecId;
                newPurchBookVatProcessLogTransOper.CanceledRefRecId = 0;
                newPurchBookVatProcessLogTransOper.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return  "@GLS101193" + "@GLS101637" + strLwr("@SYS3881");
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>