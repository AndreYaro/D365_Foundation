<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSLocationLabel</c> class is the helper class for the associated reports.
/// </summary>
public class WmsLocationLabel extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a default value for the bar-code setup parameter and query ranges if the report opened for a
    /// specific Warehouse Management Service location.
    /// </summary>
    public void prePromptModifyContract()
    {
        BarcodeSetup                barcodeSetup;
        WMSLocationLabelContract    contract;
        Query                       query;
        WMSLocation                 wmsLocation;
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             qbrInventLocationId;
        QueryBuildRange             qbrwMSLocationId;

        contract = this.parmReportContract().parmRdpContract() as WMSLocationLabelContract;

        if (!contract.parmBarcodeSetupId())
        {
            select firstonly barcodeSetup
                where barcodeSetup.BarcodeType == BarcodeType::Code39;

            if (barcodeSetup)
            {
                contract.parmBarcodeSetupId(barcodeSetup.BarcodeSetupId);
            }
        }

        query                   = this.getFirstQuery();
        queryBuildDataSource    = SysQuery::findOrCreateDataSource(query, tableNum(WMSLocation));

        if (this.parmArgs()
         && this.parmArgs().record() is WMSLocation
         && FormDataUtil::isFormDataSource(this.parmArgs().record()))
        {
            wmsLocation = this.parmArgs().record() as WMSLocation;
            qbrInventLocationId     = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSLocation, InventLocationId));
            qbrInventLocationId.value(queryValue(wmsLocation.InventLocationId));
            qbrwMSLocationId        = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSLocation, wmsLocationId));
            qbrwMSLocationId.value(queryValue(wmsLocation.wmsLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    public void preRunModifyContract()
    {
        BarcodeSetup                barcodeSetup;
        WMSLocationLabelContract    contract = this.parmReportContract().parmRdpContract() as WMSLocationLabelContract;

        barcodeSetup = BarcodeSetup::find(contract.parmBarcodeSetupId());

        if (barcodeSetup)
        {
            contract.parmBarcodeFontName(barcodeSetup.FontName);
            contract.parmBarcodeFontSize(barcodeSetup.FontSize);
        }
        else
        {
            contract.parmBarcodeFontName('');
            contract.parmBarcodeFontSize(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSLocationLabel        controller          = new WMSLocationLabel();

        controller.parmReportName(ssrsReportStr(WMSLocationLabel, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>