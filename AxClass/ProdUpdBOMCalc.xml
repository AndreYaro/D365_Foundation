<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdBOMCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpdBOMCalc</c> class is used for making the estimated price calculation for production
///    orders.
/// </summary>
/// <remarks>
///    You can run the price calculation for a single production order, or for a whole chain of production
///    orders that are related to each other by references.You cannot use this class for realized price
///    calculation. Realized price calculation will be performed automatically when production journals
///    are posted, or production End for the <see cref="T:ProdMultiHistoricalCost" /> is started.
/// </remarks>
class ProdUpdBOMCalc extends ProdUpd
{
    ProdParmBOMCalc    prodParmBOMCalc;
    InventTable        inventTable;

    Qty                seriesSize;
    Qty                consumptionInvent;

    LineNum            lineNum;

    Amount             totalCostPrice;
    Amount             totalCostMarkup;
    Amount             totalSalesPrice;
    Amount             totalSalesMarkup;

    InventDimId        inventDimIdBlank;

    private Set dupProdId;
    private Set refProdId;
    private boolean isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled = BomCalcProdSameRefProdIdAvoidUpdateConflictFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDupProdId</Name>
				<Source><![CDATA[
    public Set parmDupProdId(Set _dupProdId = dupProdId)
    {
        dupProdId = _dupProdId;
        return dupProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefProdId</Name>
				<Source><![CDATA[
    public Set parmRefProdId(Set _refProdId = refProdId)
    {
        refProdId = _refProdId;
        return refProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ProdParmBOMCalc</c> record.
    /// </summary>
    /// <param name="_prodParmBOMCalc">
    ///    The <c>ProdParmBOMCalc</c> record; optional.
    /// </param>
    /// <returns>
    ///    A <c>ProdParmBOMCalc</c> record.
    /// </returns>
    /// <remarks>
    ///    A <c>ProdParmBOMCalc</c> record contains parameters for price calculation. See <see
    ///    cref="T:ProdParmBOMCalc" />.
    /// </remarks>
    public ParmBuffer parmParmBuffer(ParmBuffer _prodParmBOMCalc = prodParmBOMCalc)
    {
        if (!_prodParmBOMCalc.RecId)
            throw error("@SYS25332");

        prodParmBOMCalc = _prodParmBOMCalc;

        return prodParmBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanOldProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears old estimation values.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    private void cleanOldProdCalcTrans(ProdTable _prodTable)
    {
        ProdCalcTransEstimationCleaner  cleaner = ProdCalcTransEstimationCleaner::construct();

        cleaner.parmProdId(_prodTable.ProdId);
        cleaner.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Used for the start of price calculation.
    /// </summary>
    /// <remarks>
    ///    Before the start of price calculation, make sure that price calculation parameters have been set.
    ///    Parameters are set in the following methods:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             The <c>parmParmBuffer</c> method
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>newProdTable</c> method
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>newParmBuffer</c> method
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    void run()
    {
        #OCCRetryCount

        try
        {
            prodTable = ProdTable::find(prodParmBOMCalc.ProdId);
            var parameters = this.addInstrumentationAdditionalParameters();

            using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateBOMCalculationRun, prodParmBOMCalc.RecId, parameters))
            {
                ttsbegin;

                setprefix(ProdMultiBOMCalc::description());
                setprefix(#PreFixField(ProdParmBOMCalc,ProdId));

                if (! this.validate())
                    throw Exception::Error;

                ProdTable prodTableCalc = prodParmBOMCalc.topMostProdTableCalc();

                if (prodTableCalc)
                {
                    BOMCalcProd bomCalcProd;

                    if (isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled)
                    {
                        refProdId = new Set(Types::String);
                        dupProdId = new Set(Types::String);

                        bomCalcProd = BOMCalcProd::newProdTableWithRefProd(prodTableCalc,
                                                                        refProdId,
                                                                        dupProdId,
                                                                        prodParmBOMCalc.ProfitSet,
                                                                        prodParmBOMCalc.CalcDate,
                                                                        prodParmBOMCalc.References,
                                                                        true);
                    }
                    else
                    {
                        bomCalcProd = BOMCalcProd::newProdTable(prodTableCalc,
                                                                            prodParmBOMCalc.ProfitSet,
                                                                            prodParmBOMCalc.CalcDate,
                                                                            prodParmBOMCalc.References,
                                                                            true);
                    }

                    bomCalcProd.calc();

                    if (prodTableCalc.ProdType == ProdType::Process)
                    {
                        PmfProdCoBy prodCoBy;

                        while select prodCoBy
                            where prodCoBy.ProdId == prodTableCalc.ProdId
                                && (  prodCoBy.ProductType == PmfProductType::Co_Product
                                    ||  (prodCoBy.ProductType == PmfProductType::By_Product
                                    && prodCoBy.BurdenType != PmfBurdenType::Recycled))
                        {
                            BOMCalcProd_PmfCoProduct coProductCalc = BOMCalcProd_PmfCoByProduct::newCoByProduct(
                                                                            prodCoBy,
                                                                            prodParmBOMCalc.ProfitSet,
                                                                            prodParmBOMCalc.CalcDate,
                                                                            prodParmBOMCalc.References,
                                                                            true);
                            coProductCalc.calc();
                        }

                        this.runCalculationForRecycledBPsMissingCost();
                    }
                }

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ProdUpdBOMCalc</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>ProdUpdBOMCalc</c> class.
    /// </returns>
    /// <remarks>
    ///    Use the following procedure to customize or extend the
    ///    <c>
    ///       ProdUpdBOMCalc
    ///    </c>
    ///     class.
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class that derives from <c>ProdUpdBOMCalc</c>.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Overlayer the <c>construct</c> method on <c>ProdUpdBOMCalc</c> so that it returns an instance of
    ///             the derived class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Override the methods from the <c>ProdUpdBOMCalc</c> class that you want to customize or extend in
    ///             your derived class.
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This procedure helps to ensure that your customizations are maintained if the base version of the
    ///    <c>
    ///       ProdUpdBOMCalc
    ///    </c>
    ///     class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///    .
    /// </remarks>
    static ProdUpdBOMCalc construct()
    {
        ProdUpdBOMCalc prodUpdBOMCalc = new ProdUpdBOMCalc();

        return prodUpdBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of <c>ProdUpdBOMCalc</c> class, and initializes it with parameters from
    ///    ProdParmBOMCalc table.
    /// </summary>
    /// <param name="_prodParmBOMCalc">
    ///    A record from the ProdParmBOMCalc table; contains parameters for price calculation.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>ProdUpdBOMCalc</c> class.
    /// </returns>
    static ProdUpdBOMCalc newParmBuffer(ProdParmBOMCalc     _prodParmBOMCalc)
    {
        if (! _prodParmBOMCalc.ParmId)
        {
            _prodParmBOMCalc.skipTTSCheck(true);
            _prodParmBOMCalc.ParmBuffer::initParmId();
            _prodParmBOMCalc.write();
        }

        ProdUpdBOMCalc prodUpdBOMCalc = ProdUpdBOMCalc::construct();
        prodUpdBOMCalc.parmParmBuffer(_prodParmBOMCalc);

        return prodUpdBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ProdUpdBOMCalc</c> class, and initializes it with given parameters.
    /// </summary>
    /// <param name="_prodTable">
    ///    The record from the <c>ProdTable</c> table.
    /// </param>
    /// <param name="_profitSet">
    ///    The profit-setting value; optional.
    /// </param>
    /// <param name="_calcDate">
    ///    A date for the price calculation; optional.
    /// </param>
    /// <param name="_references">
    ///    A <c>NoYes</c> enumeration that specifies that the References should be used in price calculation;
    ///    optional.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>ProdUpdBOMCalc</c> class.
    /// </returns>
    /// <remarks>
    ///    This method creates a new record in the <c>ProdParmBOMCalc</c> table, depending on given
    ///    parameters. It also initializes the new instance of <c>ProdUpdBOMCalc</c> class by using that
    ///    record, and returns the object of that class.
    /// </remarks>
    static ProdUpdBOMCalc newProdTable(
        ProdTable           _prodTable,
        CostProfitSet       _profitSet  = ProdParameters::find().ProfitSet,
        date                _calcDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYes               _references = NoYes::Yes
        )
    {
        ProdParmBOMCalc     prodParmBOMCalc;

        prodParmBOMCalc.ParmBuffer::initParmId();
        prodParmBOMCalc.initParmDefault();
        prodParmBOMCalc.initFromProdTable(_prodTable);
        prodParmBOMCalc.ProfitSet       = _profitSet;
        prodParmBOMCalc.CalcDate        = _calcDate;
        prodParmBOMCalc.References      = _references;
        prodParmBOMCalc.insert();

        ProdUpdBOMCalc prodUpdBOMCalc = ProdUpdBOMCalc::construct();
        prodUpdBOMCalc.parmParmBuffer(prodParmBOMCalc);

        return prodUpdBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalculationForRecycledBPsMissingCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs calculation for recycled byproducts that have been not calculated yet.
    /// </summary>
    private void runCalculationForRecycledBPsMissingCost()
    {
        PmfRecycledBpMissingCostCalc_Prod   missingCostCalc = PmfRecycledBpMissingCostCalc_Prod::construct();

        missingCostCalc.parmProdParmBomCalc(prodParmBOMCalc);

        missingCostCalc.runCalculationsForBpMissingCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanOldProdCalcTransNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears old estimation values.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    public static void cleanOldProdCalcTransNew(ProdTable _prodTable)
    {
        ProdCalcTransEstimationCleaner  cleaner = ProdCalcTransEstimationCleaner::construct();

        cleaner.parmProdId(_prodTable.ProdId);
        cleaner.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>