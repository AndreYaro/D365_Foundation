<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneVoucher_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>OneVoucher_BR</c> class is an abstraction to implementations of cheque and bodero.
/// </summary>
public abstract class OneVoucher_BR
{
    BankAccountID               custVendBankAccountId;
    CompanyBankAccountId        bankAccountId;
    CurrencyCode                currencyCode;
    DimensionDynamicAccount     ledgerDimension;
    DimensionDynamicAccount     offsetLedgerDimension;
    LedgerJournalAC             account;
    LedgerJournalACType         accountType;
    LedgerJournalACType         offsetAccountType;
    LedgerJournalId             journalNum;
    List                        voucherTrans;
    PaymMode                    paymMode;
    PaymReference               paymReference;
    Posting_BR                  postingLevel;
    RemittanceLocation          remittanceLocation;
    SelectableDataArea          company;
    TransDate                   transDate;
    Voucher                     voucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the journal transaction into the transactions voucher.
    /// </summary>
    /// <param name="_trans">
    /// The journal transaction <c>LedgerJournalTrans</c> record.
    /// </param>
    public void addLedgerJournalTrans(LedgerJournalTrans _trans)
    {
        voucherTrans.addEnd(_trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal transaction can be added in the voucher.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    /// The journal transaction <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// True if it can be added in the voucher; otherwise, false.
    /// </returns>
    public boolean canAddLedgerJournalTrans(LedgerJournalTrans ledgerJournalTrans)
    {
        if (postingLevel == Posting_BR::Vendor)
        {
            if (ledgerJournalTrans.OffsetLedgerDimension == offsetLedgerDimension
                && ledgerJournalTrans.LedgerDimension == ledgerDimension
                && ledgerJournalTrans.TransDate == transDate)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else if (postingLevel == Posting_BR::Bank)
        {
            if (ledgerJournalTrans.OffsetLedgerDimension == offsetLedgerDimension
                && ledgerJournalTrans.TransDate == transDate)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            throw error((Error::wrongUseOfFunction(funcName())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerJournalTransValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a payment journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line.
    /// </param>
    /// <param name="_progress">
    /// The <c>RunbaseProgress</c> instance.
    /// </param>
    /// <returns>
    /// True if the payment journal line is valid; otherwise, false.
    /// </returns>
    protected abstract boolean checkLedgerJournalTransValues(LedgerJournalTrans  _ledgerJournalTrans,
                        RunbaseProgress     _progress           = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the voucher.
    /// </summary>
    /// <param name="_progress">
    /// The <c>RunbaseProgress</c> instance.
    /// </param>
    /// <returns>
    /// True if the voucher is valid; otherwise, false.
    /// </returns>
    public abstract boolean checkValues(RunbaseProgress _progress)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the basic voucher parameters based on a journal transaction.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal transaction <c>LedgerJournalTrans</c> record.
    /// </param>
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (postingLevel == Posting_BR::Bank)
        {
            this.parmAccount(_ledgerJournalTrans.parmOffsetAccount());
        }
        else if (postingLevel == Posting_BR::Vendor)
        {
            this.parmAccount(_ledgerJournalTrans.parmAccount());
        }

        this.parmAccountType(_ledgerJournalTrans.AccountType);
        this.parmBankAccountId(_ledgerJournalTrans.BankAccountId);
        this.parmCompany(_ledgerJournalTrans.Company);
        this.parmCurrencyCode(_ledgerJournalTrans.CurrencyCode);
        this.parmCustVendBankAccountId(_ledgerJournalTrans.CustVendBankAccountId);
        this.parmLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        this.parmOffsetAccountType(_ledgerJournalTrans.OffsetAccountType);
        this.parmOffsetLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension());
        this.parmRemittanceLocation(_ledgerJournalTrans.RemittanceLocation);
        this.parmVoucher(_ledgerJournalTrans.Voucher);
        this.parmTransDate(_ledgerJournalTrans.TransDate);
        this.parmPaymMode(_ledgerJournalTrans.PaymMode);
        this.parmJournalNum(_ledgerJournalTrans.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmAccount(LedgerJournalAC _account = account)
    {
        account = _account;

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmAccountType(LedgerJournalACType _accountType = accountType)
    {
        accountType = _accountType;

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurCredit</Name>
				<Source><![CDATA[
    public AmountCurCredit parmAmountCurCredit()
    {
        AmountCurCredit     amountCurCredit;
        LedgerJournalTrans  ledgerJournalTrans;
        ListEnumerator      enumerator;

        enumerator = voucherTrans.getEnumerator();

        while (enumerator.moveNext())
        {
            ledgerJournalTrans = enumerator.current();

            amountCurCredit += ledgerJournalTrans.AmountCurCredit;
        }

        return amountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurDebit</Name>
				<Source><![CDATA[
    public AmountCurDebit parmAmountCurDebit()
    {
        AmountCurDebit      amountCurDebit;
        LedgerJournalTrans  ledgerJournalTrans;
        ListEnumerator      enumerator;

        enumerator = voucherTrans.getEnumerator();

        while (enumerator.moveNext())
        {
            ledgerJournalTrans = enumerator.current();

            amountCurDebit += ledgerJournalTrans.AmountCurDebit;
        }

        return amountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        bankAccountId = _bankAccountId;

        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompany</Name>
				<Source><![CDATA[
    public SelectableDataArea parmCompany(SelectableDataArea _company = company)
    {
        company = _company;

        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendBankAccountId</Name>
				<Source><![CDATA[
    public bankAccountId parmCustVendBankAccountId(BankAccountID _custVendBankAccountId = custVendBankAccountId)
    {
        custVendBankAccountId = _custVendBankAccountId;

        return custVendBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    public LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmLedgerDimension(LedgerDimensionAccount _ledgerDimension = ledgerDimension)
    {
        ledgerDimension = _ledgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccountType</Name>
				<Source><![CDATA[
    public LedgerJournalACType parmOffsetAccountType(LedgerJournalACType _offsetAccountType = offsetAccountType)
    {
        offsetAccountType = _offsetAccountType;

        return offsetAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmOffsetLedgerDimension(DimensionDynamicAccount _offsetLedgerDimension = offsetLedgerDimension)
    {
        offsetLedgerDimension = _offsetLedgerDimension;

        return offsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymMode = paymMode)
    {
        paymMode = _paymMode;

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymReference</Name>
				<Source><![CDATA[
    public PaymReference parmPaymReference(PaymReference _paymReference = paymReference)
    {
        paymReference = _paymReference;

        return paymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLevel</Name>
				<Source><![CDATA[
    public Posting_BR parmPostingLevel()
    {
        return postingLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemittanceLocation</Name>
				<Source><![CDATA[
    public RemittanceLocation parmRemittanceLocation(RemittanceLocation _remittanceLocation = remittanceLocation)
    {
        remittanceLocation = _remittanceLocation;

        return remittanceLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherTrans</Name>
				<Source><![CDATA[
    public List parmVoucherTrans()
    {
        return voucherTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLedgerJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line.
    /// </param>
    /// <param name="_progress">
    /// The <c>RunbaseProgress</c> instance.
    /// </param>
    /// <returns>
    /// True if the journal line is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This methods validates through <c>LedgerJournalCheckPost</c> class. Check the <c>LedgerJournalCheckPost</c> for more details.
    /// </remarks>
    protected boolean runLedgerJournalCheckPost(LedgerJournalTrans  _ledgerJournalTrans, RunbaseProgress _progress)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTrans(_ledgerJournalTrans,
                                                                                     LedgerJournalVoucher::Voucher,
                                                                                     NoYes::No,
                                                                                     NoYes::No,
                                                                                     NoYes::No);
        ledgerJournalCheckPost.parmShowErrorOk(false);
        ledgerJournalCheckPost.parmCheckPaymStatus(false);

        if (_progress)
        {
            ledgerJournalCheckPost.progress(_progress);
        }

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        if (ledgerJournalCheckPost.tableErrorLog() !='')
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger journal transactions setting the payment reference, cheque number, voucher and payment status.
    /// </summary>
    public abstract void updateVoucherTransactions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the bank account is active.
    /// </summary>
    /// <param name="_bankAccount">
    /// The bank account.
    /// </param>
    /// <returns>
    /// True if the bank account is active; otherwise, false.
    /// </returns>
    protected boolean validateBankAccountIsActive(LedgerJournalAC _bankAccount)
    {
        return BankAccountTable::checkIsActive(_bankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the payment journal line amount is greater than zero.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line.
    /// </param>
    /// <returns>
    /// True if the payment journal line amount is greater than zero, otherwise, false.
    /// </returns>
    protected boolean validatePaymAmountMST(LedgerJournalTrans  _ledgerJournalTrans)
    {
        AmountMST   paymAmountMST;

        paymAmountMST = _ledgerJournalTrans.calcAmountMST();

        if (paymAmountMST == 0)
        {
            return checkFailed(strfmt("@SYS82275", _ledgerJournalTrans.Voucher));
        }

        if (paymAmountMST < 0)
        {
            return checkFailed(strfmt("@SYS26761", _ledgerJournalTrans.Voucher));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the payment journal line status is rejected.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line.
    /// </param>
    /// <returns>
    /// True if the payment journal line is not rejected; otherwise, false.
    /// </returns>
    protected boolean validatePaymentStatus(LedgerJournalTrans  _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
        {
            return checkFailed(strfmt("@SYS90802", _ledgerJournalTrans.Voucher, "@SYS784"));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>