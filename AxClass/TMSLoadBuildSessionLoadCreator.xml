<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildSessionLoadCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSLoadBuildSessionLoadCreator
{
    protected TMSLoadBuildSessionId loadBuildsessionId;
    
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllLoads</Name>
				<Source><![CDATA[
    public void createAllLoads()
    {
        TMSProposedLoad                 proposedLoad;
        TMSProposedLoadContent          proposedLoadContent;
        TMSLoadBuildStrategyInputSet    strategyInputSet;
        boolean                         loadsCreated;
        boolean                         rateAndAssignRoute = false;

        TMSLoadBuildSession loadBuildSession = TMSLoadBuildSession::find(loadBuildsessionId);

        using (var createLoadActivityContext = this.instrumentationLogger().loadBuildActivities().createLoads())
        {
            this.instrumentationLogger().logRecordInformation(loadBuildSession);

            if (loadBuildSession && loadBuildSession.SessionState == TMSLoadBuildSessionState::LoadsProposed)
            {
                while select proposedLoad
                where proposedLoad.LoadBuildSession == loadBuildsessionId
                join LoadPaysFreight from strategyInputSet
                    where strategyInputSet.LoadBuildSession == proposedLoad.LoadBuildSession
                exists join proposedLoadContent
                    where proposedLoadContent.ProposedLoad == proposedLoad.RecId
                    &&    proposedLoadContent.LoadBuildStrategyInputSet == strategyInputSet.RecId
                {
                    try
                    {
                        // Scheduled route is tied to the proposed load
                        if (proposedLoad.RouteCode)
                        {
                            rateAndAssignRoute = true;
                        }

                        ttsBegin;
                        TMSILoadBuildLoadCreator loadBuildLoadCreator = TMSLoadBuildLoadCreatorFactory::createLoadCreator(loadBuildsessionId, proposedLoad);
                        loadBuildLoadCreator.parmLoadPaysFreight(strategyInputSet.LoadPaysFreight);

                        using (var buildLoadActivityContext = this.instrumentationLogger().loadBuildActivities().buildLoads())
                        {
                            this.instrumentationLogger().logRecordInformation(proposedLoad);

                            if (loadBuildLoadCreator.buildLoads())
                            {
                                this.instrumentationLogger().logInformation('Build loads are created');
                                loadsCreated = true;
                            }
                        }

                        ttsCommit;
                    }
                    catch (Exception::CLRError)
                    {
                        System.Exception sysException = CLRInterop::getLastException();
                        ApplicationUnhandledExceptionLogger::logCLRException(sysException);

                        while (!CLRInterop::isNull(sysException.get_InnerException()))
                        {
                            sysException = sysException.get_InnerException();
                        }
                        error(sysException.get_Message());
                    }
                    catch
                    {
                        error(strFmt("@SYP4861096", proposedLoad.LoadId));
                    }
                }

                ttsBegin;
                loadBuildSession = TMSLoadBuildSession::find(loadBuildsessionId, true);
                loadBuildSession.SessionState = TMSLoadBuildSessionState::LoadsCreated;
                loadBuildSession.update();
                ttsCommit;

                // Open the load planning workbench if the proposed load is not getting assigned a route
                if (loadsCreated && !rateAndAssignRoute)
                {
                    info(strFmt("@SYP4861268", new MenuFunction(menuitemDisplayStr(WHSLoadPlanningWorkbench), MenuItemType::Display).label()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    protected TMSLoadBuildSessionId parmSessionId(TMSLoadBuildSessionId _loadBuildSessionId = loadBuildsessionId)
    {
        loadBuildsessionId = _loadBuildSessionId;

        return loadBuildsessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TMSLoadBuildSessionLoadCreator construct()
    {
        return new TMSLoadBuildSessionLoadCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static TMSLoadBuildSessionLoadCreator newParameters(TMSLoadBuildSessionId _loadBuildSessionId)
    {
        TMSLoadBuildSessionLoadCreator sessionLoadCreator = TMSLoadBuildSessionLoadCreator::construct();

        sessionLoadCreator.parmSessionId(_loadBuildSessionId);

        return sessionLoadCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>