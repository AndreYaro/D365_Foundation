<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>bomVersionActivate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class bomVersionActivate extends BOMRouteVersionActivate implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates or deactivates the <c>BOMVersion</c>, depending on its current Active state.
    /// </summary>
    /// <param name = "_bomVersion">The <c>BOMVersion</c> to be activated</param>
    protected void activateVersion(BOMVersion _bomVersion)
    {
        _bomVersion.Active = _bomVersion.Active ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        using(var activityContext = BomInstrumentationLogger::createLogger(classStr(BOMVersionActivate)).bom().activateVersion())
        {
            if (!this.validate())
            {
                throw error("@SYS21628");
            }

            try
            {
                ttsbegin;

                BOMVersion bomVersion = BOMVersion::findRecId(this.parmRecId(),true);

                this.activateVersion(bomVersion);

                if (!bomVersion.validateWrite(false))
                {
                    throw Exception::Error;
                }

                bomVersion.doUpdate();

                ttscommit;
            }

            catch (Exception::Deadlock)
            {
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS94869";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>