<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsLoadTemplateAssignmentForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsLoadTemplateAssignmentForm</c> class contains the business logic of the <c>whsLoadTemplateAssignment</c> form.
/// </summary>
public class whsLoadTemplateAssignmentForm
{
    Weight      weight;
    Volume      volume;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultLoadTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds default load template defined for items in the load.
    /// </summary>
    /// <param name="_loadTable">
    /// The load record.
    /// </param>
    /// <param name="_tmpLoadLine">
    /// Temporary load line.
    /// </param>
    /// <returns>
    /// Default load template for the items in the load, if there are multiple load templates defined for the items, then it returns empty string.
    /// </returns>
    WHSLoadTemplateId defaultLoadTemplateId(WHSLoadTable    _loadTable, WHSLoadLine     _tmpLoadLine)
    {
        boolean             firstIteration;
        WHSLoadTemplateId   loadTemplateId;
        InventTable         inventTable;
        InventItemGroup     inventItemGroup;
        WHSLoadLine         loadLine = _tmpLoadLine;
        InventItemGroupItem inventItemGroupItem;

        if (_loadTable.RecId == 0)
        {
            firstIteration = true;

            while select ItemId from loadLine
                join TableId from inventTable
                where inventTable.ItemId        == loadLine.ItemId
                join TableId from inventItemGroupItem
                where inventItemGroupItem.ItemDataAreaId    == inventTable.DataAreaId
                   && inventItemGroupItem.ItemId            == inventTable.ItemId
                join LoadTemplateId from inventItemGroup
                where inventItemGroup.DataAreaId            == inventItemGroupItem.ItemGroupDataAreaId
                   && inventItemGroup.ItemGroupId           == inventItemGroupItem.ItemGroupId
            {
                if (firstIteration)
                {
                    loadTemplateId = inventItemGroup.LoadTemplateId;
                    firstIteration = false;
                }
                else
                {
                    if (loadTemplateId != inventItemGroup.LoadTemplateId)
                    {
                        loadTemplateId = '';
                        break;
                    }
                }
            }
        }

        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    public Volume parmVolume(Volume _volume = volume)
    {
        volume = _volume;

        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    public Weight parmWeight(Weight _weight = weight)
    {
        weight = _weight;

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadLine_write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the volume and weight difference when load line is modified.
    /// </summary>
    /// <param name="_whsLoadLine">
    /// Modified load line.
    /// </param>
    void whsLoadLine_write(WHSLoadLine  _whsLoadLine)
    {
        this.parmVolume(_whsLoadLine.displayItemVolume() - _whsLoadLine.orig().displayItemVolume());
        this.parmWeight(_whsLoadLine.displayItemWeight() - _whsLoadLine.orig().displayItemWeight());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadLineQty_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity that is added to load line.
    /// </summary>
    /// <param name="_whsLoadLine">
    /// The modified load line.
    /// </param>
    /// <returns>
    /// True if the quantity added is greater than zero and less than the quantity left in load, false otherwise.
    /// </returns>
    boolean whsLoadLineQty_validate(WHSLoadLine _whsLoadLine)
    {
        boolean     ret = true;

        if (PdsGlobal::pdsIsCWItem(_whsLoadLine.ItemId))
        {
            // Catch weight items will track both quantities in the catch weight Unit of Measure.
            if (_whsLoadLine.Qty > _whsLoadLine.qtyLeftToLoad())
            {
                ret = checkFailed("@WAX2005");
            }
        }
        else
        {
            // Must pass product dimensions to UOM conversion.
            if (InventTableModule::unitConvert(_whsLoadLine.ItemId, ModuleInventPurchSales::Invent, _whsLoadLine.uom, _whsLoadLine.Qty, _whsLoadLine.InventDimId) > _whsLoadLine.qtyLeftToLoad())
            {
                ret = checkFailed("@WAX2005");
            }
        }

        if (_whsLoadLine.Qty < 0)
        {
            ret = checkFailed("@WAX1996");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDataToParentForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data to the parent form.
    /// </summary>
    /// <param name="_loadPlanningWorkBenchForm">An instance of the controller class for the <c>WHSLoadPlanningWorkbenchForm</c> form.</param>
    /// <param name="_loadTable">A load record.</param>
    /// <param name="_loadLine">A load line.</param>
    /// <param name="_assignEarliestSchedShipDateTime">Whether the earliest schedule shipment date has to be assigned.</param>
    public void transferDataToParentForm(WHSLoadPlanningWorkbenchForm _loadPlanningWorkBenchForm, WHSLoadTable _loadTable, WHSLoadLine _loadLine, boolean _assignEarliestSchedShipDateTime)
    {
        _loadPlanningWorkBenchForm.parmLoadTemplateId(_loadTable.LoadTemplateId);
        // The values may have been changed in the dialog but not updated.
        // Skip the full update logic; the record is only used to transfer data between forms (as a tmp record).
        _loadLine.doUpdate();

        _loadPlanningWorkBenchForm.parmTmpLoadLine(_loadLine);
        _loadPlanningWorkBenchForm.parmLoadDirection(_loadLine.LoadDirection);
        _loadPlanningWorkBenchForm.parmLoadPlanningWorkbenchServerForm().parmtAssignEarliestSchedShipDateTime(_assignEarliestSchedShipDateTime);
        _loadPlanningWorkBenchForm.parmReceivingCompletedDeliveryPolicy(_loadTable.ReceivingCompletedDeliveryPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates user`s load selection.
    /// </summary>
    /// <param name="_loadTable">A load record.</param>
    public void validateLoad(WHSLoadTable _loadTable)
    {
        if (!_loadTable.LoadTemplateId)
        {
            throw error("@WAX2008");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fitsCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if load fits capacity.
    /// </summary>
    /// <param name = "weightCapacity">A weight capacity.</param>
    /// <param name = "volumeCapacity">A volume capacity.</param>
    /// <returns>true if load fits capacity; otherwise, false.</returns>
    public boolean fitsCapacity(real weightCapacity, real volumeCapacity)
    {
        return weightCapacity >= 0 && volumeCapacity >= 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>