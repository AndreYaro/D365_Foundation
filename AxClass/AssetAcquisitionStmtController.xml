<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcquisitionStmtController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetAcquisitionStmtController</c> class is the controller for the <c>AssetAcquisitionStatement</c> SSRS report.
/// </summary>
public class AssetAcquisitionStmtController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report controller query.
    /// </summary>
    /// <returns>
    /// The report controller query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        AssetBook assetBook;
        AssetTable assetTable;
        AssetTrans assetTrans;
        AssetAcquisitionStmtContract contract;
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        DocumentDate documentDate;

        #IsoCountryRegionCodes

        super();

        contract = this.parmReportContract().parmRdpContract() as AssetAcquisitionStmtContract;

        if (contract.parmDocumentDate() == dateNull())
        {
            // Provide a default date because the last value is empty.
            contract.parmDocumentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        if (this.parmArgs())
        {
            assetTrans = this.parmArgs().record() as AssetTrans;

            if (assetTrans)
            {
                documentDate = assetTrans.DocumentDate_W;
                if (documentDate == dateNull())
                {
                    documentDate = assetTrans.TransDate;
                }
                contract.parmDocumentDate(documentDate);

                contract.parmDocumentNumber(assetTrans.DocumentNum_W);

                query = this.getQuery();

                assetTable = AssetTable::find(assetTrans.AssetId);
                assetBook = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);

                // AssetTable
                ds = query.dataSourceTable(tableNum(AssetTable));
                ds.clearRanges();

                range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTable, AssetId));
                range.value(SysQuery::value(assetTrans.AssetId));
                range.status(RangeStatus::Locked);

                // AssetTrans
                ds = query.dataSourceTable(tableNum(AssetTrans));
                ds.clearRanges();

                range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, BookId));
                range.value(SysQuery::value(assetBook.BookId));
                range.status(RangeStatus::Locked);

                range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, Voucher));
                range.value(SysQuery::value(assetTrans.Voucher));
                range.status(RangeStatus::Locked);

                range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, TransType));

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    range.value(
                        SysQuery::value(enum2int(AssetTransType::Acquisition)) + ',' +
                        SysQuery::value(enum2int(AssetTransType::AcquisitionAdj)) + ',' +
                        SysQuery::value(enum2int(AssetTransType::WriteDownAdj)) + ',' +
                        SysQuery::value(enum2int(AssetTransType::WriteUpAdj)));
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    range.value(
                        SysQuery::value(enum2int(AssetTransType::Acquisition)) + ',' +
                        SysQuery::value(enum2int(AssetTransType::AcquisitionAdj)));
                }
                else
                {
                    // exclude everything
                    range.value(SysQuery::value(-1));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        AssetTrans assetTrans;
        BankAccountTable bankAccount;
        CompanyInfo companyInfo;
        LogisticsPostalAddress postalAddress;
        AssetAcquisitionStmtContract contract;
        RNumDateInWordConverter wordConverter;

        super();

        assetTrans = this.parmArgs().record() as AssetTrans;

        contract = this.getDataContractObject() as AssetAcquisitionStmtContract;

        wordConverter = RNumDateInWordConverter::construct(currentUserLanguage());

        assetTrans = this.parmArgs().record() as AssetTrans;
        switch (assetTrans.TransType)
        {
            case AssetTransType::Acquisition:
                contract.parmHiddenReportTitle("@GLS108659");
                break;

            case AssetTransType::AcquisitionAdj:
                contract.parmHiddenReportTitle("@GLS108704");
                break;

            case AssetTransType::WriteUpAdj:
                contract.parmHiddenReportTitle("@GLS108726");
                break;

            case AssetTransType::WriteDownAdj:
                contract.parmHiddenReportTitle("@GLS108727");
                break;
        }

        contract.parmHiddenDocumentDateLongFormat(wordConverter.date2strExt(contract.parmDocumentDate()));

        companyInfo = CompanyInfo::find();
        contract.parmHiddenCompanyName(companyInfo.Name);
        contract.parmHiddenCompanyRoutingNumber(companyInfo.RegNum);
        contract.parmHiddenCompanyTaxRegistrationNum(companyInfo.CoRegNum);

        bankAccount = BankAccountTable::find(companyInfo.Bank);
        contract.parmHiddenCompanyBankAccountNumber(bankAccount.AccountNum);
        contract.parmHiddenCompanyBankName(bankAccount.Name);
        contract.parmHiddenCompanyBankRoutingNumber(bankAccount.RegistrationNum);

        postalAddress = companyInfo.postalAddress();
        contract.parmHiddenCompanyAddress(postalAddress.Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str _parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {        
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00037, funcName());

        AssetAcquisitionStmtController controller;

        controller = new AssetAcquisitionStmtController();
        controller.parmReportName(ssrsReportStr(AssetAcquisitionStatement, Report));
        controller.parmDialogCaption("@GLS108659");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>