<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjMissingHourRegEmail</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create dialog for the missing timesheets email batch
/// </summary>
public class ProjMissingHourRegEmail extends RunBaseBatch implements BatchRetryable
{
    // Variables for input parameters
    ProjPeriodId     periodId;
    ProjPeriodFrom   periodFromDate;
    ProjPeriodTo     periodToDate;
    ProjPeriodFrom periodFromDateDuringExecution;
    ProjPeriodTo periodToDateDuringExecution;

    QueryRun    queryRun;

    Dialog      dialogRunBase;

    // Dialog fields to be displayed in the dialog
    DialogField dialogPeriodId;
    DialogField dialogPeriodFromDate;
    DialogField dialogPeriodToDate;

    #define.CurrentVersion(1)

    // Macro defining list of variables that need to be serialized
    #localmacro.CurrentList
        periodId,
        periodFromDate,
        periodToDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        dialogRunBase = super();
        dialogRunBase.caption(this.title());

        dialogPeriodId = dialogRunBase.addFieldValue(extendedTypeStr(ProjPeriodId), periodId, "@SYS22717", "@SYS50471");

        dialogRunBase.addGroup("@SYS4003516");
        dialogPeriodFromDate   = dialogRunBase.addFieldValue(extendedTypeStr(ProjPeriodFrom), periodFromDate, "@SYS4003508", "@SYS4003514");
        dialogPeriodToDate     = dialogRunBase.addFieldValue(extendedTypeStr(ProjPeriodTo), periodToDate, "@SYS4003507", "@SYS4003513");

        dialogPeriodFromDate.enabled(false);
        dialogPeriodToDate.enabled(false);

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method actually allows the dialog form to override control method at runtime.
    /// </summary>
    /// <param name="_dialog">
    ///  Dialog object
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that gets called when the period Id value changes in the dialog
    /// </summary>    
    /// <returns>
    /// true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean fld1_1_modified()
    {
        Object         control;

        control = dialogRunBase.formRun().controlCallingMethod();

        if (control.modified())
        {
           this.getPeriodFromTo();
        }

        return this.validate(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmPeriodId(dialogPeriodId.value());
        this.parmPeriodFromDate(dialogPeriodFromDate.value());
        this.parmPeriodToDate(dialogPeriodToDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodFromTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the From date and To date of the last completed period based on the period Id selected and populate the dialog fields accordingly.
    /// </summary>
    public void getPeriodFromTo()
    {
        ProjPeriodLine          projPeriodLine;

        this.parmPeriodId(dialogPeriodId.value());

        // Query to get the last completed period
        select firstonly PeriodFrom, PeriodTo from projPeriodLine
               order by PeriodFrom desc
               where projPeriodLine.PeriodId == periodId
               && projPeriodLine.PeriodTo < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        dialogPeriodFromDate.value(projPeriodLine.PeriodFrom);
        dialogPeriodToDate.value(projPeriodLine.PeriodTo);

        this.parmPeriodFromDate(projPeriodLine.PeriodFrom);
        this.parmPeriodToDate(projPeriodLine.PeriodTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method applies filters to the query based on the parameters supplied.
    /// </summary>
    void initQuery()
    {
        QueryBuildRange rangeDataAreaId, rangePeriodId, rangePeriodFromDate, rangePeriodToDate, rangeEmploymentDate;
        QueryBuildDataSource qb_ProjPeriodTable, qb_ProjPeriodLine, qb_ResourceSetup;
        Query query;

        this.queryBuild();

        query                 = queryRun.query();
        qb_ResourceSetup      = query.dataSourceTable(tableNum(ResourceSetup));

        // Filter the data to the current company
        qb_ProjPeriodTable    = query.dataSourceTable(tableNum(ProjPeriodTable));
        rangeDataAreaId = SysQuery::findOrCreateRange(qb_ProjPeriodTable, fieldNum(ProjPeriodTable, DataAreaId));
        rangeDataAreaId.value(queryValue(curext()));

        // Set the periodId to the parameter given
        if (periodId)
        {
            rangePeriodId = SysQuery::findOrCreateRange(qb_ProjPeriodTable, fieldNum(ProjPeriodTable, PeriodId));
            rangePeriodId.value(queryValue(periodId));

            if (this.isInBatch())
            {
                // Find the new from and to date depending on the current system time.
                ProjPeriodLine projPeriodLine;
            
                select firstonly PeriodFrom, PeriodTo from projPeriodLine
                    order by PeriodFrom desc
                    where projPeriodLine.PeriodId == periodId
                    && projPeriodLine.PeriodTo < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                
                periodFromDateDuringExecution = projPeriodLine.PeriodFrom;
                periodToDateDuringExecution = projPeriodLine.PeriodTo;
            }
        }

        qb_ProjPeriodLine = queryRun.query().dataSourceTable(tableNum(ProjPeriodLine));

        // Set the 'periodFrom' range based on the given parameter
        if (periodFromDateDuringExecution)
        {
            rangePeriodFromDate = SysQuery::findOrCreateRange(qb_ProjPeriodLine, fieldNum(ProjPeriodLine, PeriodFrom));
            rangePeriodFromDate.value(strFmt('(%1 >= %2)', fieldStr(ProjPeriodLine, PeriodFrom), date2StrXpp(periodFromDateDuringExecution)));
        }

        // Set the 'periodTo' range based on the given parameter
        if (periodToDateDuringExecution)
        {
            rangePeriodToDate = SysQuery::findOrCreateRange(qb_ProjPeriodLine, fieldNum(ProjPeriodLine, PeriodTo));
            rangePeriodToDate.value(strFmt('(%1 <= %2)', fieldStr(ProjPeriodLine, PeriodTo), date2StrXpp(periodToDateDuringExecution)));
        }

        rangeEmploymentDate = SysQuery::findOrCreateRange(qb_ProjPeriodLine, fieldNum(ProjPeriodLine,DataAreaId));

        // Conditions involving the ResourceLegalEntityView check if the resource is employed atleast for a part in the period being considered. There are three sub-conditions for this in the following order
        //   a. Employee has his 'End date' in the period but his 'Start date' was before the period
        //   b. Employee has his 'Start date' in the period but his 'End date' is after the period
        //   c. Employee has his 'Start date' before the period and 'End date' after the period.
        // Also the ranges are relaxed by 2 days at the two ends because the ResourceLegalEntityView dates are of UTCDateTime type where as the ProjPeriodLine dates are of 'date' type. As the query range
        // function does not have an inbuilt way to compare these taking timezones into consideration, we are making sure we get more records than necessary here and filter them later.
        rangeEmploymentDate.value(strFmt(@'(
                                               ((%5.%7 <= %2) && (%5.%7 >= %3)) ||
                                               ((%5.%6 <= %2) && (%5.%6 >= %3)) ||
                                               ((%5.%6 <= %1) && (%5.%7 >= %4))
                                           )',
                                  date2StrXpp(periodFromDateDuringExecution+2),
                                  date2StrXpp(periodToDateDuringExecution+2),
                                  date2StrXpp(periodFromDateDuringExecution-2),
                                  date2StrXpp(periodToDateDuringExecution-2),
                                  query.dataSourceTable(tableNum(ResourceLegalEntityView)).name(),
                                  fieldStr(ResourceLegalEntityView, ValidFrom),
                                  fieldStr(ResourceLegalEntityView, ValidTo)
                                 ));

        // Adjust the validTimeStateRange to consider the resources who are active on or after the periodFrom of the last period
        queryRun.query().validTimeStateDateTimeRange(DateTimeUtil::newDateTime(periodFromDateDuringExecution,0,DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::newDateTime(dateMax(),0,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();
        container ret;

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        ret =  [#CurrentVersion, #CurrentList] + [pack];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodFromDate</Name>
				<Source><![CDATA[
    public ProjPeriodFrom parmPeriodFromDate(ProjPeriodFrom _periodFromDate = periodFromDate)
    {
        periodFromDate = _periodFromDate;

        return periodFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodId</Name>
				<Source><![CDATA[
    public ProjPeriodId parmPeriodId(ProjPeriodId _periodId = periodId)
    {
        periodId = _periodId;

        return periodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodToDate</Name>
				<Source><![CDATA[
    public ProjPeriodTo parmPeriodToDate(ProjPeriodTo _periodToDate = periodToDate)
    {
        periodToDate = _periodToDate;

        return periodToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun =  queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putToDialog</Name>
				<Source><![CDATA[
    void putToDialog()
    {
        super();
        this.getPeriodFromTo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    private QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjMissingHourReg));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailAsMissing</Name>
				<Source><![CDATA[
	protected boolean sendEmailAsMissing(TSAppStatus _approvalStatus)
    {
        boolean returnValue = false;

        if (_approvalStatus == TSAppStatus::All
             || _approvalStatus == TSAppStatus::Create
             || _approvalStatus == TSAppStatus::Returned)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ResourceLegalEntityView resourceLegalEntity;
        ProjPeriodLine          projPeriodLine;
        ResourceSetup           resourceSetup;
        TSTimesheetTable        tsTimesheetTable;
        Map                     mappings = new Map(Types::String,Types::String);
        int                     emailsSent = 0, missingEmailIds =0;

        var missingHoursTemplateEmailId = this.getMissingHoursTemplateEmailId();

        var currentUserEmail =  SysUserInfo::find(curUserId()).Email;
        
        periodFromDateDuringExecution = periodFromDate;
        periodToDateDuringExecution = periodToDate;

        this.initQuery();

        ttsbegin;

        while (queryRun.next())
        {
            resourceSetup           = queryRun.get(tableNum(ResourceSetup));
            projPeriodLine          = queryRun.get(tableNum(ProjPeriodLine));
            tsTimesheetTable        = queryRun.get(tableNum(TSTimesheetTable));
            resourceLegalEntity     = queryRun.get(tableNum(ResourceLegalEntityView));

            if (TmpProjMissingHourReg::resourceLegalEntityIsValidForPeriod(resourceLegalEntity, periodFromDateDuringExecution, periodToDateDuringExecution))
            {
                var worker = hcmWorker::find(ResourceFacade::getWorker(resourceSetup.Resource));

                if (worker.email()
                    && this.sendEmailAsMissing(tsTimesheetTable.ApprovalStatus))
                {
                    TmpProjMissingHourReg::addToMap(mappings, tsTimesheetTable, resourceSetup.Resource, projPeriodLine);

                    SysEmailTable::sendMail(missingHoursTemplateEmailId, SysEmailTable::find(missingHoursTemplateEmailId).DefaultLanguage, worker.email(), mappings, '', '', true, currentUserEmail, true);
                    emailsSent++;
                }
                else if (!worker.email())
                {
                    missingEmailIds++;
                }
            }
            else
            {
                missingEmailIds++;
            }
        }

        info(strFmt("@SYS4003503", emailsSent, missingEmailIds));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the title string.
    /// </summary>
    /// <returns>
    /// The title string.
    /// </returns>
    str title()
    {
        return "@SYS4003515";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the fields on the dialog are populated correctly.
    /// </summary>
    /// <param name="calledFrom">
    /// The calling object.
    /// </param>
    /// <returns>
    /// true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!dialogPeriodId.value() || !dialogPeriodFromDate.value())
        {
            error(strFmt("@SYS324288", "@SYS22717"));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProjMissingHourRegEmail operation;
        operation = new ProjMissingHourRegEmail();

        if (operation && operation.prompt())
        {
            operation.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMissingHoursTemplateEmailId</Name>
				<Source><![CDATA[
    private SysEmailId getMissingHoursTemplateEmailId()
    {
        ProjParameters projParameters;

        select firstonly MissingTimesheetsEmailId from projParameters;

        var missingHoursEmailId = projParameters.MissingTimesheetsEmailId;

        if (!missingHoursEmailId)
        {
            throw error("@SYS4003506");
        }

        return missingHoursEmailId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>