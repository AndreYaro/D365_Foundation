<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquiryTotalFieldsUIHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a UI helper for the form <c>TaxTransactionInquiryTotalFields_IN</c>. It has some methods that help to construct and update
/// the UI and handle some responses.
/// </summary>
public class TaxTransactionInquiryTotalFieldsUIHelper_IN
{
    FormRun                                 formRun;
    TaxTransactionInquirySysListPanel_IN    sysListPanel;
    TaxTransactionInquiry_IN                taxTransactionInquiry;
    FieldGroupName                          availableFieldGroupName;
    DictTable                               taxTransactionTable;
    Set                                     availableFieldIdSet;

    [FormObservable]
    TaxTransactionInquiryFieldPrioritizer_IN    prioritizer;
    TaxTransactionInquiryFieldPrioritizer_IN    originalPrioritizer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxTransactionInquiryTotalFieldsUIHelper_IN construct(
        FormRun                              _formRun,
        TaxTransactionInquiry_IN             _taxTransactionInquiry)
    {
        TaxTransactionInquiryTotalFieldsUIHelper_IN taxTransactionInquiryTotalFieldsUIHelper;

        taxTransactionInquiryTotalFieldsUIHelper = new TaxTransactionInquiryTotalFieldsUIHelper_IN(_formRun, _taxTransactionInquiry);

        return taxTransactionInquiryTotalFieldsUIHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The construction function that do the assignments and initialization.
    /// </summary>
    /// <param name = "_formRun">formRun of the form</param>
    /// <param name = "_taxTransactionInquiry">table of the data source</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(
        FormRun                  _formRun,
        TaxTransactionInquiry_IN _taxTransactionInquiry)
    {
        formRun                 = _formRun;
        taxTransactionInquiry   = _taxTransactionInquiry;

        sysListPanel = TaxTransactionInquirySysListPanel_IN::newForm(formRun, formRun.controlId(formControlStr(TaxTransactionInquiryTotalFields_IN, groupComposition)), true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// The initialization of the UI helper of the form.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        if (taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TCSInquiry
        || taxTransactionInquiry.TaxTransactionInquiryType == TaxTransactionInquiryType_IN::TDSInquiry)
        {
            taxTransactionTable = new DictTable(tablenum(TaxWithholdTrans_IN));
        }
        else
        {
            taxTransactionTable = new DictTable(tablenum(TaxTrans_IN));
        }

        this.constructPrioritizer();
        this.setAvailableFieldGroupName();

        // Fill the list panel
        sysListPanel.parmReloadMethod(identifierstr(reloadMethod));
        sysListPanel.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSysListPanel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialze the list panel of the total fields.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initSysListPanel()
    {
        this.initAvailableFieldSet();

        sysListPanel.parmAllowedSet(availableFieldIdSet);
        sysListPanel.parmTaxTransactionTableId(taxTransactionTable.id());
        sysListPanel.parmTaxTransactionInquiryFieldPrioritizer(prioritizer);
        sysListPanel.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectedTotalFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the list of the selected total fields.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateSelectedTotalFieldsList()
    {
        ListEnumerator                              listEnum;
        ListEnumerator                              origListEnum;
        TaxTransactionInquiryFieldObject_IN         fieldObject;
        TaxTransactionInquiryTotalFields_IN         inquiryTotalFields;
        RecordInsertList                            insertList;
        boolean                                     changesMade;
        int                                         position;

        // Pull data from the current prioritizer
        listEnum = prioritizer.getFieldObjectsEnumerator();
        origListEnum = originalPrioritizer.getFieldObjectsEnumerator();

        changesMade = prioritizer.elements() != originalPrioritizer.elements();
        if (!changesMade)
        {
            // See if all current field objects exist in the inquiry
            while (listEnum.moveNext() && origListEnum.moveNext())
            {
                fieldObject = listEnum.current();

                select firstonly RecId from inquiryTotalFields where
                        inquiryTotalFields.TaxTransactionInquiry == taxTransactionInquiry.RecId
                    &&  inquiryTotalFields.TaxTransactionTableId == fieldObject.parmTableId()
                    &&  inquiryTotalFields.SelectedFieldId == fieldObject.parmFieldId();
                if (!inquiryTotalFields)
                {
                    changesMade = true;
                    break;
                }
            }
        }

        // If changes have been made, verify the user intended to make changes
        if (changesMade)
        {
            listEnum.reset();

            ttsbegin;

            // Clear out existing inquiry selected fields
            delete_from inquiryTotalFields
                where inquiryTotalFields.TaxTransactionInquiry == taxTransactionInquiry.RecId;

            // Populate the updated selected fields
            position = 0;
            insertList = new RecordInsertList(tableNum(TaxTransactionInquiryTotalFields_IN));
            while (listEnum.moveNext())
            {
                position++;
                fieldObject = listEnum.current();

                inquiryTotalFields.clear();
                inquiryTotalFields.TaxTransactionInquiry = taxTransactionInquiry.RecId;
                inquiryTotalFields.TaxTransactionTableId = fieldObject.parmTableId();
                inquiryTotalFields.SelectedFieldId = fieldObject.parmFieldId();
                inquiryTotalFields.Position = position;
                insertList.add(inquiryTotalFields);
            }
            insertList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrioritizer</Name>
				<Source><![CDATA[
    private void constructPrioritizer()
    {
        // Create a prioritizer which tracks current selections for this inquiry
        prioritizer = TaxTransactionInquiryFieldPrioritizer_IN::construct(taxTransactionInquiry);
        prioritizer.initTaxTransactionInquiryTotalFields();

        originalPrioritizer = TaxTransactionInquiryFieldPrioritizer_IN::construct(taxTransactionInquiry);
        originalPrioritizer.initTaxTransactionInquiryTotalFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailableFieldGroupName</Name>
				<Source><![CDATA[
    private void setAvailableFieldGroupName()
    {
        switch (taxTransactionInquiry.TaxTransactionInquiryType)
        {
            case TaxTransactionInquiryType_IN::CustomsInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:CustomsTotalFields";
                break;

            case TaxTransactionInquiryType_IN::ExciseInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:ExciseTotalFields";
                break;

            case TaxTransactionInquiryType_IN::IndirectTaxInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:IndirectTaxTotalFields";
                break;

            case TaxTransactionInquiryType_IN::SalesTaxInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:SalesTaxTotalFields";
                break;

            case TaxTransactionInquiryType_IN::ServiceTaxInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:ServiceTaxTotalFields";
                break;

            case TaxTransactionInquiryType_IN::VATInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:VATTotalFields";
                break;

            case TaxTransactionInquiryType_IN::TCSInquiry,
                TaxTransactionInquiryType_IN::TDSInquiry:
                availableFieldGroupName = "@TaxTransactionInquiry:WithholdingTaxTotalFields";
                break;

            case TaxTransactionInquiryType_IN::ExciseRegisterInquiry,
                TaxTransactionInquiryType_IN::ExciseRegisterBalanceInquiry,
                TaxTransactionInquiryType_IN::VATDefermentInquiry:
                throw error("@TaxTransactionInquiry:InquiryNoTotalFunction");

            default:
                availableFieldGroupName = "@TaxTransactionInquiry:IndirectTaxTotalFields";
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAvailableFieldSet</Name>
				<Source><![CDATA[
    private void initAvailableFieldSet()
    {
        Counter                                 fieldCount;
        DictFieldGroup                          dictFieldGroup;
        SysDictField                            sysDictField;
        TaxTransactionInquirySelectedFields_IN  taxTransactionInquirySelectedFields;
        TaxTransactionInquiryTotalFields_IN     taxTransactionInquiryTotalFields;

        if (availableFieldGroupName)
        {
            availableFieldIdSet = new Set(Types::Integer);
            dictFieldGroup = new DictFieldGroup(taxTransactionTable.id(), availableFieldGroupName);
            if (dictFieldGroup)
            {
                for (fieldCount=1; fieldCount <= dictFieldGroup.numberOfFields(); fieldCount++)
                {
                    sysDictField = new SysDictField(taxTransactionTable.id(), dictFieldGroup.field(fieldCount));
                    if (sysDictField)
                    {
                        select firstonly taxTransactionInquirySelectedFields
                            where taxTransactionInquirySelectedFields.TaxTransactionInquiry == taxTransactionInquiry.RecId
                            && taxTransactionInquirySelectedFields.TaxTransactionTableId == sysDictField.tableid()
                            && taxTransactionInquirySelectedFields.SelectedFieldId == sysDictField.id();

                        if (taxTransactionInquirySelectedFields)
                        {
                            select firstonly taxTransactionInquiryTotalFields
                                where taxTransactionInquiryTotalFields.TaxTransactionInquiry == taxTransactionInquiry.RecId
                                && taxTransactionInquiryTotalFields.TaxTransactionTableId == taxTransactionInquirySelectedFields.TaxTransactionTableId
                                && taxTransactionInquiryTotalFields.SelectedFieldId == taxTransactionInquirySelectedFields.SelectedFieldId;

                            if (!taxTransactionInquiryTotalFields)
                            {
                                availableFieldIdSet.add(sysDictField.id());
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>