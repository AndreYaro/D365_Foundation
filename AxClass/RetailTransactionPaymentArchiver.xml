<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionPaymentArchiver</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionPaymentArchiver</c> class provides the functionality to schedule the batch job for archiving credit card transaction data.
/// </summary>
public final class RetailTransactionPaymentArchiver extends RunBaseBatch implements BatchRetryable
{
    internal TransDate transactionsOlderThanDate;
    internal NoYes isDeleteOnlyPaymentBlob;
    internal NoYes isCompressNewPaymentBlob;
    internal PositiveDays daysAgo;
    internal static const MinimumTransactionAgeInDays MinimumTransactionAgeInDefaultDays = 90;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        transactionsOlderThanDate,
        isDeleteOnlyPaymentBlob,
        daysAgo,
        isCompressNewPaymentBlob
    #ENDMACRO

    private int MaxChildTasks = RetailTransactionPaymentArchiver::getMaxChildTasks();
    private CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private DialogField dialogFieldTransactionsOlderThanDate, dialogFieldIsDeleteOnlyPaymentBlob, dialogFieldIsCompressNewPaymentBlob, dialogFieldDaysAgo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTransactionsOlderThanDate</Name>
				<Source><![CDATA[
    internal TransDate parmTransactionsOlderThanDate(TransDate _transactionsOlderThanDate = this.transactionsOlderThanDate)
    {
        this.transactionsOlderThanDate = _transactionsOlderThanDate;

        return this.transactionsOlderThanDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDeleteOnlyPaymentBlob</Name>
				<Source><![CDATA[
    internal NoYes parmIsDeleteOnlyPaymentBlob(NoYes _isDeleteOnlyPaymentBlob = this.isDeleteOnlyPaymentBlob)
    {
        this.isDeleteOnlyPaymentBlob = _isDeleteOnlyPaymentBlob;

        return this.isDeleteOnlyPaymentBlob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDaysAgo</Name>
				<Source><![CDATA[
    internal PositiveDays parmDaysAgo(PositiveDays _daysAgo = this.daysAgo)
    {
        this.daysAgo = _daysAgo;

        return this.daysAgo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCompressNewPaymentBlob</Name>
				<Source><![CDATA[
    internal NoYes parmIsCompressNewPaymentBlob(NoYes _isCompressNewPaymentBlob = this.isCompressNewPaymentBlob)
    {
        this.isCompressNewPaymentBlob = _isCompressNewPaymentBlob;

        return this.isCompressNewPaymentBlob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailTransactionPaymentArchiver construct()
    {
        return new RetailTransactionPaymentArchiver();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        RetailTransactionPaymentArchiver::construct().prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public static ClassDescription description()
    {
        return "@Retail:RetailTransactionPaymentArchiver";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void new()
    {
        super();
        MinimumTransactionAgeInDays minimumTransactionAgeInDays = RetailTransactionPaymentArchiver::getMinimumTransactionAgeInDays();

        if (daysAgo <= minimumTransactionAgeInDays)
        {
            daysAgo = minimumTransactionAgeInDays + 1;
        }

        transactionsOlderThanDate = RetailTransactionPaymentArchiver::getDateFromDaysAgo(daysAgo);
        isDeleteOnlyPaymentBlob = NoYes::Yes;
        isCompressNewPaymentBlob = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case 1:
                [version, transactionsOlderThanDate] = _packed;
                break;
            case 2:
                [version, transactionsOlderThanDate, isDeleteOnlyPaymentBlob] = _packed;
                break;
            case 3:
                [version, transactionsOlderThanDate, isDeleteOnlyPaymentBlob, daysAgo] = _packed;
                break;
            case 4:
                [version, #CurrentList] = _packed;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public Object dialog()
    {
        DialogRunbase dialogRunbase = new DialogRunbase("@Retail:RetailTransactionPaymentArchiver", this);

        DialogGroup dialogGroupBase = dialogRunbase.addGroup(strMin());
        dialogGroupBase.frameType(FormFrameType::Auto);
        dialogGroupBase.columns(1);

        dialogFieldDaysAgo = dialogRunbase.addField(
            extendedTypeStr(PositiveDays),
            "@Retail:RetailTransactionPaymentArchiverParameterTransactionAge",
            "@Retail:RetailTransactionPaymentArchiverParameterTransactionAgeHelp");
        dialogFieldDaysAgo.value(daysAgo);

        dialogFieldTransactionsOlderThanDate = dialogRunbase.addField(
            extendedTypeStr(TransDate),
            "@Retail:RetailTransactionPaymentArchiverParameterDateEquivalent",
            "@Retail:RetailTransactionPaymentArchiverParameterDateEquivalentHelp");
        dialogFieldTransactionsOlderThanDate.value(transactionsOlderThanDate);
        dialogFieldTransactionsOlderThanDate.enabled(false);

        dialogFieldIsDeleteOnlyPaymentBlob = dialogRunbase.addField(
            identifierStr(NoYes),
            "@Retail:RetailPaymentArchiveSkipStorage",
            "@Retail:RetailPaymentArchiveSkipStorageHelp");
        dialogFieldIsDeleteOnlyPaymentBlob.value(isDeleteOnlyPaymentBlob);

        if (RetailTransactionPaymentsArchiverCompressFlight::instance().isEnabled()
            && RetailTransactionPaymentsArchiverHelper::isCompressTokensFeatureEnabledForMoreThanAWeek())
        {
            dialogFieldIsCompressNewPaymentBlob = dialogRunbase.addField(
                identifierStr(NoYes),
                "@Retail:RetailPaymentArchiveCompress",
                "@Retail:RetailPaymentArchiveCompressHelp");
            dialogFieldIsCompressNewPaymentBlob.value(isCompressNewPaymentBlob);
        }
        else
        {
            this.parmIsCompressNewPaymentBlob(NoYes::No);
        }

        this.showBatchTab(true);

        dialogRunbase.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean getFromDialog()
    {
        this.parmDaysAgo(dialogFieldDaysAgo.value());
        this.parmTransactionsOlderThanDate(dialogFieldTransactionsOlderThanDate.value());
        this.parmIsDeleteOnlyPaymentBlob(dialogFieldIsDeleteOnlyPaymentBlob.value());

        if (RetailTransactionPaymentsArchiverCompressFlight::instance().isEnabled()
            && RetailTransactionPaymentsArchiverHelper::isCompressTokensFeatureEnabledForMoreThanAWeek())
        {
            this.parmIsCompressNewPaymentBlob(dialogFieldIsCompressNewPaymentBlob.value());
        }
        else
        {
            this.parmIsCompressNewPaymentBlob(NoYes::No);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void dialogSelectCtrl()
    {
        super();

        daysAgo = dialogFieldDaysAgo.value();
        transactionsOlderThanDate = RetailTransactionPaymentArchiver::getDateFromDaysAgo(daysAgo);
        dialogFieldTransactionsOlderThanDate.value(transactionsOlderThanDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClosedWithOk</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void dialogClosedWithOk(Object _dialog)
    {
        super(_dialog);

        if (Box::yesNo(
            strFmtLB(strFmt("@Retail:RetailPaymentArchiveConfirmation", this.transactionsOlderThanDate)),
            DialogButton::No) == DialogButton::No)
        {
            this.batchInfo().parmBatchExecute(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean validate(Object _object = null)
    {
        boolean isValid = super();
        MinimumTransactionAgeInDays minimumTransactionAgeInDays = RetailTransactionPaymentArchiver::getMinimumTransactionAgeInDays();

        if (isValid)
        {
            if (!this.isTransactionsOlderThanDateValid())
            {
                isValid = checkFailed(
                    strFmt("@Retail:RetailTransactionPaymentArchiverMinimumAgeLimit", minimumTransactionAgeInDays));
            }
            else if (!this.existsTransactionForArchival())
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionPaymentArchiverNoTransaction"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void run()
    {
        MinimumTransactionAgeInDays minimumTransactionAgeInDays = RetailTransactionPaymentArchiver::getMinimumTransactionAgeInDays();
        transactionsOlderThanDate = RetailTransactionPaymentArchiver::getDateFromDaysAgo(daysAgo);

        if (!this.isTransactionsOlderThanDateValid())
        {
            throw Error(strFmt("@Retail:RetailTransactionPaymentArchiverMinimumAgeLimit", minimumTransactionAgeInDays));
        }

        Array transactions = this.getRecIdForTransactions();

        if (transactions.lastIndex() < 1)
        {
            info("@Retail:RetailTransactionPaymentArchiverNoTransaction");
            eventSource.EventWritePaymentsArchivalCompleted(transactionsOlderThanDate, 0, 0, 0, 0, funcName(), 0, 0);
            return;
        }

        // A child task will archive transactions that are in a certain RecId range.
        // The number of RecId assigned to a child task is determined by the 'batchSize'.
        // The 'batchSize' is the total number of RecId in the list divided by the number of child tasks.
        RecIdCount batchSize = roundUpDec(transactions.lastIndex() / MaxChildTasks, 0);
        RecIdCount startIndex = 1, endIndex = batchSize, childTask;
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        for (childTask = 1; childTask <= MaxChildTasks; childTask++)
        {
            if (startIndex > transactions.lastIndex() || endIndex > transactions.lastIndex()
                || startIndex < 1 || endIndex < 1)
            {
                break;
            }

            RetailTransactionPaymentArchiveTaskProcessor archiveTask = RetailTransactionPaymentArchiveTaskProcessor::construct();
            archiveTask.parmTransactionsOlderThanDate(this.parmTransactionsOlderThanDate());
            archiveTask.parmStartRecId(transactions.value(startIndex));
            archiveTask.parmEndRecId(transactions.value(endIndex));
            archiveTask.parmIsDeleteOnlyPaymentBlob(this.parmIsDeleteOnlyPaymentBlob());
            archiveTask.parmIsCompressNewPaymentBlob(this.parmIsCompressNewPaymentBlob());
            archiveTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            archiveTask.batchInfo().parmCaption(strFmt("@Retail:RetailTransactionPaymentArchiverChildTask", childTask));

            // Add a child task to the batch.
            batchHeader.addRuntimeTask(archiveTask, this.parmCurrentBatch().RecId);

            startIndex = endIndex + 1;
            endIndex += batchSize;
            endIndex = endIndex > transactions.lastIndex() ? transactions.lastIndex() : endIndex;
        }

        batchHeader.save();
        eventSource.EventWritePaymentsArchivalStarted(
            this.transactionsOlderThanDate,
            transactions.lastIndex(),
            batchHeader.parmBatchHeaderId(),
            childTask - 1,
            batchSize,
            any2Str(isDeleteOnlyPaymentBlob),
            any2Str(isCompressNewPaymentBlob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenderTypeFunctionsToInclude</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a list with RetailTenderFunction values to include into token cleanup.
    /// </summary>
    /// <param name = "tenderTypeFunctionsToInclude">List of RetailTenderFunction enum values.</param>
    /// <remark>Attempt to add non-enum value will throw an XPP ErrorException.</remark>
    [Hookable(true)]
    public void getTenderTypeFunctionsToInclude(List tenderTypeFunctionsToInclude)
    {
        tenderTypeFunctionsToInclude.addEnd(RetailTenderFunction::Card);
        tenderTypeFunctionsToInclude.addEnd(RetailTenderFunction::Wallet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromDaysAgo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date corresponding to the transaction age specified in days.
    /// </summary>
    /// <param name = "_days">The transaction age in days.</param>
    /// <returns>The transaction date.</returns>
    internal static TransDate getDateFromDaysAgo(PositiveDays _days)
    {
        return any2Date(DateTimeUtil::addDays(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -_days));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionsOlderThanDateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction older than date is valid i.e., older than 90 days.
    /// </summary>
    /// <returns>True if the transaction is valid. Otherwise, false.</returns>
    internal boolean isTransactionsOlderThanDateValid()
    {
        return (this.getMinimumTransactionDateAllowedForArchival() - this.parmTransactionsOlderThanDate()) >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTransactionRecIdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record identifier (in ascending order) query for transactions that are available for archival.
    /// </summary>
    /// <returns>A query for <c>RecId</c> of transactions (in ascending order) available for archival.</returns>
    internal Query getPaymentTransactionRecIdQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qdbs = query.addDataSource(tableNum(RetailTransactionPaymentTrans));
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, IsPaymentDataArchived)).value(queryValue(NoYes::No));
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TransDate)).value(queryRange(dateNull(), this.transactionsOlderThanDate - 1));

        RetailStoreTenderTypeTable retailStoreTenderTypeTable;

        List tenderTypeFunctionsToInclude = new List(Types::Enum);
        this.getTenderTypeFunctionsToInclude(tenderTypeFunctionsToInclude);
        container filteredFunctions = list2Con(tenderTypeFunctionsToInclude);

        while select TenderTypeId, Function from retailStoreTenderTypeTable
            group by TenderTypeId
            where retailStoreTenderTypeTable.Function in filteredFunctions
        {
            qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TenderType)).value(queryValue(retailStoreTenderTypeTable.TenderTypeId));
        }

        qdbs.addSelectionField(fieldNum(RetailTransactionPaymentTrans, RecId));
        qdbs.addSortField(fieldNum(RetailTransactionPaymentTrans, RecId), SortOrder::Ascending);

        // Use the index that covers IsPaymentDataArchived, TransDate and TenderType.
        qdbs.addSortIndex(indexNum(RetailTransactionPaymentTrans, TransDate_IsPaymentDataArchivedIdx));
        qdbs.indexIsHint(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxChildTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of runtime tasks allowed for the batch header.
    /// </summary>
    /// <returns>The count of runtime tasks.</returns>
    /// <remarks>The allowed range is a maximum of 8,  minimum of 1 task and a default of 4.</remarks>
    internal static PositiveNumber getMaxChildTasks()
    {
        const PositiveNumber MinChildTasks = 1;
        const PositiveNumber MaxChildTasks = 8;
        const PositiveNumber DefaultChildTasks = 4;
        PositiveNumber maxTasksParam = RetailParameters::find().PaymentBlobArchiveMaxTasks;

        if (maxTasksParam < MinChildTasks)
        {
            maxTasksParam = DefaultChildTasks;
        }
        else if (maxTasksParam > MaxChildTasks)
        {
            maxTasksParam = MaxChildTasks;
        }

        return maxTasksParam;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumTransactionDateAllowedForArchival</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the newest date allowed for archival. A transaction that happened before the newest date cannot be archived.
    /// </summary>
    /// <returns>The minimum transaction date.</returns>
    private TransDate getMinimumTransactionDateAllowedForArchival()
    {
        MinimumTransactionAgeInDays minimumTransactionAgeInDays = RetailTransactionPaymentArchiver::getMinimumTransactionAgeInDays();

        return RetailTransactionPaymentArchiver::getDateFromDaysAgo(minimumTransactionAgeInDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumTransactionAgeInDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum transaction age in days as specified.
    /// if minmum transaction age in days is 0 then returns 90 days.
    /// </summary>
    /// <returns>The minimum transaction age in days.</returns>
    internal static MinimumTransactionAgeInDays getMinimumTransactionAgeInDays()
    {
        MCROrderParameters mcrOrderParameters = MCROrderParameters::find();

        return mcrOrderParameters.MinimumTransactionAgeInDays == 0 ? MinimumTransactionAgeInDefaultDays : mcrOrderParameters.MinimumTransactionAgeInDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTransactionForArchival</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction is available for archival.
    /// </summary>
    /// <returns>True if a transaction is available. Otherwise, false.</returns>
    private boolean existsTransactionForArchival()
    {
        Query query = new Query();
        query.firstOnly1(true);

        QueryBuildDataSource qdbs = query.addDataSource(tableNum(RetailTransactionPaymentTrans));
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, IsPaymentDataArchived)).value(queryValue(NoYes::No));
        qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TransDate)).value(queryRange(dateNull(), this.transactionsOlderThanDate - 1));

        // Get tender types that support Card or Wallet.
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        while select TenderTypeId, Function from retailStoreTenderTypeTable
            group by TenderTypeId
            where retailStoreTenderTypeTable.Function == RetailTenderFunction::Card
                || retailStoreTenderTypeTable.Function == RetailTenderFunction::Wallet
        {
            qdbs.addRange(fieldNum(RetailTransactionPaymentTrans, TenderType)).value(queryValue(retailStoreTenderTypeTable.TenderTypeId));
        }

        qdbs.addSelectionField(fieldNum(RetailTransactionPaymentTrans, RecId));

        // Use the index that covers IsPaymentDataArchived, TransDate and TenderType.
        qdbs.addSortIndex(indexNum(RetailTransactionPaymentTrans, TransDate_IsPaymentDataArchivedIdx));
        qdbs.indexIsHint(true);

        QueryRun queryRun = new QueryRun(query);
        queryRun.next();
        RetailTransactionPaymentTrans retailTransactionPaymentTrans = queryRun.get(tableNum(RetailTransactionPaymentTrans));

        return retailTransactionPaymentTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdForTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of transactions that are available for archival.
    /// </summary>
    /// <returns>An array of <c>RecId</c> in ascending order.</returns>
    private Array getRecIdForTransactions()
    {
        Array transactionIdentifiers = new Array(Types::Int64);
        RecIdCount recIdArrayIndex = 1;
        QueryRun queryRun = new QueryRun(this.getPaymentTransactionRecIdQuery());

        while (queryRun.next())
        {
            RetailTransactionPaymentTrans retailTransactionPaymentTrans = queryRun.get(tableNum(RetailTransactionPaymentTrans));
            transactionIdentifiers.value(recIdArrayIndex, retailTransactionPaymentTrans.RecId);
            recIdArrayIndex++;
        }

        return transactionIdentifiers;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>