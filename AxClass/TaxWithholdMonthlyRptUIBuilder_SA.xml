<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdMonthlyRptUIBuilder_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdMonthlyRptUIBuilder_SA</c> class is a report dialog UI builder class that is used
/// by the Saudi Arabia Monthly Withholding Tax report.
/// </summary>
class TaxWithholdMonthlyRptUIBuilder_SA extends SrsReportDataContractUIBuilder
{
    protected DialogField taxWithholdMonth;
    protected DialogField taxWithholdYear;
    protected DialogField fiscalYear;
    protected DialogField evasionFine;
    protected DialogField delayFine;
    protected DialogField taxWithholdPeriod;
    protected TaxWithholdPeriod_TH period;
    protected TaxWithholdMonthlyRptRdlContract_SA contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the default parameters of the report and provides a rich user experience.
    /// </summary>
    public void build()
    {
        dialog dialoglocal = this.dialog();

        contract =  this.getRdlContractInfo().dataContractObject() as TaxWithholdMonthlyRptRdlContract_SA;

        DialogGroup withholdingTaxdetails = dialoglocal.addGroup("@SYS342871");
        taxWithholdPeriod = dialoglocal.addFieldValue(extendedTypeStr(TaxWithholdPeriod_TH), contract.parmTaxWithholdPeriod());
        contract.parmTaxWithholdPeriodId();
        taxWithholdMonth = dialoglocal.addFieldValue(extendedTypeStr(MonthName), contract.parmTaxWithholdMonth());
        taxWithholdYear = dialoglocal.addFieldValue(extendedTypeStr(YearName), contract.parmTaxWithholdYear());
        fiscalYear = dialoglocal.addFieldValue(extendedTypeStr(FiscalYearName), contract.parmFiscalYear());

        taxWithholdPeriod.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(TaxWithholdMonthlyRptUIBuilder_SA, taxWithholdPeriodLookup),
            this);
        taxWithholdPeriod.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(TaxWithholdMonthlyRptUIBuilder_SA, taxWithholdPeriodModified),
            this);

        taxWithholdMonth.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(TaxWithholdMonthlyRptUIBuilder_SA, taxWithholdMonthLookup),
            this);
        taxWithholdMonth.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(TaxWithholdMonthlyRptUIBuilder_SA, taxWithholdMonthModified),
            this);
        taxWithholdMonth.active(true);

        DialogGroup penalties = dialoglocal.addGroup("@SYS342872");
        delayFine = dialoglocal.addFieldValue(extendedTypeStr(Amount), contract.parmDelayFine(), "@SYS342873");
        evasionFine = dialoglocal.addFieldValue(extendedTypeStr(Amount), contract.parmEvasionFine(), "@SYS342874");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers data from the dialog box into the data contract object.
    /// </summary>
    public void getFromDialog()
    {
        super();

        contract.parmFiscalYear(fiscalYear.value());
        contract.parmTaxWithholdMonth(taxWithholdMonth.value());
        contract.parmTaxWithholdYear(taxWithholdYear.value());
        contract.parmDelayFine(delayFine.value());
        contract.parmEvasionFine(evasionFine.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdMonthLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables a drop-down lookup for the available withholding tax months with the From date and the
    /// End-date.
    /// </summary>
    /// <param name="_formStringControl">
    /// A form string control.
    /// </param>
    public void taxWithholdMonthLookup(FormControl _formStringControl)
    {
        Query query = new Query();

        // Create an instance of SysTableLookup using the specified control.
        SysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(TaxWithholdReportPeriod_TH), _formStringControl);
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdReportPeriod_TH, TaxWithholdFromDate), true);
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdReportPeriod_TH, TaxWithholdToDate));

        QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxWithholdReportPeriod_TH));
        qbds.addRange(fieldNum(TaxWithholdReportPeriod_TH, TaxWithholdPeriodHead_TH)).value(int642Str(contract.parmTaxWithholdPeriodId()));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdMonthModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the withholding tax month, year, and fiscal year information based on the beginning date of
    /// the selected month.
    /// </summary>
    /// <param name="_formStringControl">
    /// A form string control.
    /// </param>
    /// <returns>
    /// The status of the control.
    /// </returns>
    public boolean taxWithholdMonthModified(FormStringControl _formStringControl)
    {
        boolean ret = _formStringControl.modified();

        if (ret)
        {
            Date taxFromDate = str2Date(taxWithholdMonth.value(), 321);
            contract.parmTaxWithholdFromDate(taxFromDate);
            str month = mthName(mthOfYr(taxFromDate));
            taxWithholdMonth.value(month);
            str calYear = int2str(year(taxFromDate));
            taxWithholdYear.value(calYear);
            str fisYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), taxFromDate).Name;
            fiscalYear.value(fisYear);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdPeriodLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables a drop-down lookup for the available withholding period.
    /// </summary>
    /// <param name="_formStringControl">
    /// A form string control.
    /// </param>
    public void taxWithholdPeriodLookup(FormStringControl _formStringControl)
    {
        Query query = new Query();

        SysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(TaxWithholdPeriodHead_TH), _formStringControl);
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdPeriodHead_TH, TaxWithholdPeriod));
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdPeriodHead_TH, TaxAuthority));

        query.addDataSource(tableNum(TaxWithholdPeriodHead_TH));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdPeriodModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the withholding tax period based on the user selection.
    /// </summary>
    /// <param name="_formStringControl">
    /// A form string control.
    /// </param>
    /// <returns>
    /// The status of the control.
    /// </returns>
    public boolean taxWithholdPeriodModified(FormStringControl _formStringControl)
    {
        boolean ret = _formStringControl.modified();

        if (ret)
        {
            if (taxWithholdPeriod.value() != contract.parmTaxWithholdPeriod())
            {
                contract.parmTaxWithholdPeriod(taxWithholdPeriod.value());
                contract.parmTaxWithholdPeriodId();

                taxWithholdMonth.value('');
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>