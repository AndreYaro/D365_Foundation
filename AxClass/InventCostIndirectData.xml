<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostIndirectData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostIndirectData</c> class is used as a data object during indirect cost calculation.
/// </summary>
/// <remarks>
///    Abstract class.
/// </remarks>
abstract class InventCostIndirectData
{
    ProdTransRefType        transRefType;
    CostTransRefId          transRefId;
    boolean                 physical;
    boolean                 postLedger;
    InventTransId           inventTransId;
    DimensionDefault        defaultDimension;

    InventSiteId            inventSiteId;

    Map                     itemCostGroupRollupListMap;
    boolean                 stornoPhysical;
    boolean                 countryRegion_RU;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initItemCostGroupRollupListMap</Name>
				<Source><![CDATA[
    public void initItemCostGroupRollupListMap(
        ItemId                           _itemId,
        Qty                              _qty,
        CostAmount                       _costAmount,
        InventItemCostGroupRollupList    _costGroupRollupList = null)
    {
        itemCostGroupRollupListMap = new Map(Types::String, Types::Class);

        if (_costGroupRollupList != null
         && _costGroupRollupList.length() != 0
         && InventTable::modelGroupByItemId(_itemId).inventModelType().stdCostBased())
        {
            itemCostGroupRollupListMap.insert(_itemId, _costGroupRollupList);
        }
        else
        {
            itemCostGroupRollupListMap.insert(
                _itemId,
                InventItemCostGroupRollupList::newFromItemId(_itemId, _qty, _costAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReference</Name>
				<Source><![CDATA[
    protected void initReference(
        CostTransRefId              _transRefId,
        ProdTransRefType            _transRefType,
        boolean                     _physical,
        InventSiteId                _inventSiteId, // Site for which the factors should be applied
        InventTransId               _inventTransId = '',
        DimensionDefault            _defaultDimension = 0,
        boolean                     _postLedger = true
        , boolean                   _stornoPhysical = countryRegion_RU && InventParameters::find().StornoPhysicalPosting_RU
        )
    {
        transRefId          = _transRefId;
        transRefType        = _transRefType;
        physical            = _physical;
        inventSiteId        = _inventSiteId;
        inventTransId       = _inventTransId;
        defaultDimension    = _defaultDimension;
        postLedger          = _postLedger;
        // <GEERU>
        stornoPhysical      = _stornoPhysical;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemCostGroupRollupListMap</Name>
				<Source><![CDATA[
    public Map parmItemCostGroupRollupListMap(Map _itemCostGroupRollupListMap = itemCostGroupRollupListMap)
    {
        itemCostGroupRollupListMap = _itemCostGroupRollupListMap;

        return itemCostGroupRollupListMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Level parmLevel()
    {
        /*
        E.g. we have the following production:

        FinishedGood = 33.00;
              |
              +-RawMaterial = 22.00
                    |
                    +-CostGroup1 = 10.00
                    |
                    +-CostGroup2 = 12.00
              |
              +-Labor = 11.00

        That means that in order to produce a finished good, we need
            1) raw material that costs 22.00 and has a cost breakdown
            2) labor consumption, 11.00

        In that case, the Level of RawMaterial and Labor is 1, and Level of the cost groups is 2.

        The level is taken into account when calculating the costing sheet, so that cost of a particular level will
        either be taken into account or not, depending on the indirect costs codes setup.
        */

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysical</Name>
				<Source><![CDATA[
    public boolean parmPhysical(boolean _physical = physical)
    {
        physical = _physical;

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostLedger</Name>
				<Source><![CDATA[
    public boolean parmPostLedger(boolean _postLedger = postLedger)
    {
        postLedger = _postLedger;

        return postLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStornoPhysical</Name>
				<Source><![CDATA[
    public boolean parmStornoPhysical(boolean _stornoPhysical = stornoPhysical)
    {
        stornoPhysical = _stornoPhysical;

        return stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefId</Name>
				<Source><![CDATA[
    public CostTransRefId parmTransRefId(CostTransRefId _transRefId = transRefId)
    {
        transRefId = _transRefId;

        return transRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefType</Name>
				<Source><![CDATA[
    public ProdTransRefType parmTransRefType(ProdTransRefType _transRefType = transRefType)
    {
        transRefType = _transRefType;

        return transRefType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>