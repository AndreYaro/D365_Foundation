<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S31_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEDatasourceVATDecl501S31_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    int             lineNum;
    Map             values1Map;
    SetEnumerator   values1KeyEnumerator;
    Map             values2Map;
    SetEnumerator   values2KeyEnumerator;
    str             worksheetName1;
    str             worksheetName2;
    int             lastSectionNum;

    Set             valuesKeySorted;
    SetEnumerator   valuesKeySortedEnumerator;
    int             level;

    private const str Worksheet     = 'стр.5';
    private const str Emptydate     = '--.--.----';
    private const str Emptyfactor   = '---.-';
    private const int S31Table1Id   = 3110;
    private const int S31Table2Id   = 3120;
    private const int Field1Id      = 1;
    private const int Field2Id      = 2;
    private const int Field3Id      = 3;
    private const int Field4Id      = 4;
    private const int Field5Id      = 5;
    private const int Field6Id      = 6;
    private const int Field7Id      = 7;
    private const int Field8Id      = 8;
    private const int Field9Id      = 9;
    private const int Field10Id     = 10;
    private const int Field11Id     = 11;
    private const int Field12Id     = 12;
    private const int Field13Id     = 13;
    private const int Field14Id     = 14;
    private const int YearLimit     = 15;
    private const int AssetSpan     = 1;
    private const int IntLen        = 3;
    private const str Dot           = '.';
    private const str Exclamation	= '!';
    private const str Quote	        = "'";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        str     assetName;
        int     sectionNum;
        int     yr;
        date    acquisitionDate, deprStartDate;
        Amount  acquisitionCost, usedIncomingVAT;

        date    useStartDate;
        Factor  factor;
        Amount  restoredTaxAmount;

        date    yrStartDate, yrEndDate;

        str     cityName,
                districtName;

        LogisticsAddressState   logisticsAddressState;

        CompanyInfo             companyInfo = CompanyInfo::find();
        LogisticsPostalAddress  logisticsPostalAddress;

        Map                     mapAssetSections  = new Map(Types::String, Types::Integer);
        Map                     mapYearFactor     = new Map(Types::Integer,Types::Real);
        AssetBookId             bookIdDefault     = AssetParameters::find().BookIdDefault;

        RestoredVATLogTable_RU              restoredVATLogTable;
        RestoredVATLogTransOper_RU          restoredVATLogTransOper;
        RestoredVATLogTransOperAsset_RU     restoredVATLogTransOperAsset;
        AssetTable                          rAssetTable;
        AssetBook                           assetBook;
        VendInvoiceJour                     vendInvoiceJour;
        VendTrans                           vendTrans;
        FactureTrans_RU                     factureTrans;

        RestoredVATCalcAssets_RU            calcAssetRestoredVAT;

        PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        PurchBookVATProcessLogTrans_RU      processLogTrans;

        int getSection(AssetId _accountNum)
        {
            if (mapAssetSections.exists(_accountNum))
            {
                return mapAssetSections.lookup(_accountNum);
            }
            else
            {
                sectionNum++;
                mapAssetSections.insert(_accountNum, sectionNum);
            }

            return sectionNum;
        }

        while select rAssetTable
            where rAssetTable.AssetType  == AssetType::LandBuilding
            join assetBook
            where assetBook.AssetId == rAssetTable.AssetId
                && assetBook.BookId == bookIdDefault
                && assetBook.Status != AssetStatus::NoAcquisition
        {
            AssetTrans assetTrans = AssetTrans::findFirstByType_RU(rassetTable.AssetId, bookIdDefault, AssetTransType::Acquisition, false);
            acquisitionDate = assetTrans.TransDate;
            acquisitionCost = assetTrans.AmountMST;

            AssetSumCalc_Trans calcAssetTrans = AssetSumCalc_Trans::newAssetPeriod(rassetTable.AssetId, bookIdDefault, dateNull(), periodStart);

            if (year(periodEnd) - year(acquisitionDate) >= YearLimit || calcAssetTrans.netBookValue() == 0)
                continue;

            assetTrans = AssetTrans::findFirstByType_RU(rassetTable.AssetId, bookIdDefault, AssetTransType::Depreciation, false);
            deprStartDate = assetTrans.TransDate;

            if (year(periodEnd) >= year(deprStartDate) + AssetSpan)
                continue;

            assetName = rAssetTable.Name;
            logisticsPostalAddress = companyInfo.postalAddress();

            select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceId           == assetBook.VendInvoiceId           &&
                      vendInvoiceJour.InvoiceAccount      == assetBook.VendAccount             &&
                      vendInvoiceJour.PurchId             == assetBook.PurchId;

            vendTrans = vendInvoiceJour.vendTrans();

            select firstonly factureTrans
                   where factureTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId   &&
                         factureTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate         &&
                         factureTrans.InvoiceId           == vendInvoiceJour.InvoiceId           &&
                         factureTrans.SalesPurchId        == vendInvoiceJour.PurchID             &&
                         factureTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                         factureTrans.Module              == FactureModule_RU::Vend              &&
                         factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

            select sum(TaxAmount) from processLogTransOper
                where processLogTransOper.Blocked           == NoYes::No                 &&
                      processLogTransOper.BlockedAuto       == NoYes::No                 &&
                      processLogTransOper.CanceledRefRecId  == 0                         &&
                      processLogTransOper.TransDate         <= periodEnd
            exists join processLogTrans
                where processLogTrans.RecId             == processLogTransOper.RefRecId  &&
                      processLogTrans.FactureId         == factureTrans.FactureId        &&
                      processLogTrans.InvoiceRecIdRef   == vendTrans.RecId               &&
                      processLogTrans.InvoiceCompany    == vendTrans.company()           &&
                      processLogTrans.ProcessingType    == PurchBookProcessingType_RU::Standard;

            usedIncomingVAT = processLogTransOper.TaxAmount;

            cityName  = LogisticsAddressCity::find_RU(logisticsPostalAddress.CityRecId).Description;
            logisticsAddressState = LogisticsAddressState::find(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
            districtName = LogisticsAddressDistrict::findRecId(logisticsPostalAddress.District).Description;

            values1Map.insert(getSection(rassetTable.AssetId),  [assetName,
                                                                    logisticsPostalAddress.ZipCode,
                                                                    logisticsAddressState.StateId,
                                                                    logisticsPostalAddress.County,
                                                                    cityName ? cityName : logisticsAddressState.Name,
                                                                    districtName,
                                                                    LogisticsAddressStreet_RU::findRecID(logisticsPostalAddress.StreetId_RU).Description,
                                                                    LogisticsAddressHouseNumber_RU::findRecId(logisticsPostalAddress.HouseId_RU).Name,
                                                                    logisticsPostalAddress.BuildingCompliment,
                                                                    LogisticsAddressFlatNumber_RU::findRecId(logisticsPostalAddress.FlatId_RU).Name,
                                                                    acquisitionDate,
                                                                    deprStartDate,
                                                                    acquisitionCost,
                                                                    usedIncomingVAT]);

            if (! deprStartDate)
                continue;

            yr = year(deprStartDate);

            while (yr < (year(deprStartDate) + AssetSpan) && yr <= year(periodEnd))
            {
                useStartDate      = datenull();
                factor            = 0;
                restoredTaxAmount = 0;
                yrStartDate       = mkdate(1, 1, yr);
                yrEndDate         = mkdate(31, 12, yr);

                restoredVATLogTable = RestoredVATLogTable_RU::find(yrEndDate);
                if (restoredVATLogTable && restoredVATLogTable.Approved)
                {
                    calcAssetRestoredVAT = RestoredVATCalcAssets_RU::construct(restoredVATLogTable);
                    calcAssetRestoredVAT.calcYearRevenue();
                    factor = calcAssetRestoredVAT.getYearFactor() * 100;

                    if (factor > 0)
                    {
                        useStartDate = yrStartDate;

                        select sum(TaxAmount), sum(TaxAmountNotLiable) from restoredVATLogTransOperAsset
                            where restoredVATLogTransOperAsset.AssetId == rassetTable.AssetId
                        exists join restoredVATLogTransOper
                            where restoredVATLogTransOper.TransDate == yrEndDate                                         &&
                                  restoredVATLogTransOper.RecId     == restoredVATLogTransOperAsset.LogTransOperRefRecId &&
                                  restoredVATLogTransOper.LineType  == RestoredVATLineType_RU::Indirect                  &&
                                  restoredVATLogTransOper.Asset                                                          &&
                                  restoredVATLogTransOper.Include;

                        restoredTaxAmount = restoredVATLogTransOperAsset.TaxAmount + restoredVATLogTransOperAsset.TaxAmountNotLiable;
                    }
                }

                values2Map.insert([getSection(rassetTable.AssetId), yr], [useStartDate, factor, restoredTaxAmount]);
                yr++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName1	= 'Раздел 31 заголовок';
        const str TableName2	= 'Раздел 31 таблица';
        const str Field1Req	    = 'НаимНедв';
        const str Field1Name	= 'Наименование объекта недвижимости';
        const str Field1Cell	= 'V12:DP12;V14:DP14;V16:DP16';
        const str Field2Req	    = 'Индекс';
        const str Field2Name	= 'Индекс';
        const str Field2Cell	= 'U18:AL18';
        const str Field3Req	    = 'КодРегион';
        const str Field3Name	= 'Код Региона';
        const str Field3Cell	= 'DA18:DF18';
        const str Field4Req	    = 'Район';
        const str Field4Name	= 'Район';
        const str Field4Cell	= 'V20:DP20';
        const str Field5Req	    = 'Город';
        const str Field5Name	= 'Город';
        const str Field5Cell	= 'V22:DP22';
        const str Field6Req	    = 'НаселПункт';
        const str Field6Name	= 'Населенный пункт';
        const str Field6Cell	= 'V24:DP24';
        const str Field7Req	    = 'Улица';
        const str Field7Name	= 'Улица';
        const str Field7Cell	= 'V26:DP26';
        const str Field8Req	    = 'Дом';
        const str Field8Name	= 'Дом';
        const str Field8Cell	= 'O28:AL28';
        const str Field9Req	    = 'Корпус';
        const str Field9Name	= 'Корпус';
        const str Field9Cell	= 'BE28:CB28';
        const str Field10Req	= 'Кварт';
        const str Field10Name	= 'Квартира';
        const str Field10Cell	= 'CS28:DP28';
        const str Field11Req	= 'ДатаВводОН';
        const str Field11Name	= 'Дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации';
        const str Field11Cell	= 'CM32:DP32';
        const str Field12Req	= 'ДатаНачАмОтч';
        const str Field12Name	= 'Дата начала начисления амортизационных отчислений по объекту недвижимости';
        const str Field12Cell	= 'CM34:DP34';
        const str Field13Req	= 'СтВводОН';
        const str Field13Name	= 'Стоимость объекта недвижимости на дату ввода объекта в эксплуатацию без учета НДС';
        const str Field13Cell	= 'CM36:DP36';
        const str Field14Req	= 'НалВычОН';
        const str Field14Name	= 'Сумма НДС, принятая к вычету по объекту недвижимости';
        const str Field14Cell	= 'CM38:DP38';
        const str Field15Req	= 'ГодОтч';
        const str Field15Name	= 'Отчетный год (предыдущий отчетный год)';
        const str Field15Cell	= 'H45:S45';
        const str Field16Req	= 'ДатаИсп170';
        const str Field16Name	= 'Дата начала использования объекта недвижимости для операций, указанных в п.2 ст.170 НК РФ';
        const str Field16Cell	= 'AD45:BG45';
        const str Field17Req	= 'ДоляНеОбл';
        const str Field17Name	= 'Доля отгруженных товаров (работ, услуг), имущественных прав, не облагаемых НДС, в общей стоимости отгрузки';
        const str Field17Cell	= 'BP45:CD45';
        const str Field18Req	= 'НалГод';
        const str Field18Name	= 'Сумма НДС, подлежащая восстановлению и уплате в бюджет за календарный год (истекшие календарные годы)';
        const str Field18Cell	= 'CM45:DP45';

        super();

        this.addTable(S31Table1Id, TableName1);

        this.addField(S31Table1Id, Field1Id, Field1Req, Field1Name, Field1Cell, SysAlignment::AlignLeft, 99, Minus);
        this.addField(S31Table1Id, Field2Id, Field2Req, Field2Name, Field2Cell, SysAlignment::AlignLeft, 6,  Minus);
        this.addField(S31Table1Id, Field3Id, Field3Req, Field3Name, Field3Cell, SysAlignment::AlignLeft, 2,  Minus);
        this.addField(S31Table1Id, Field4Id, Field4Req, Field4Name, Field4Cell, SysAlignment::AlignLeft, 33, Minus);
        this.addField(S31Table1Id, Field5Id, Field5Req, Field5Name, Field5Cell, SysAlignment::AlignLeft, 33, Minus);
        this.addField(S31Table1Id, Field6Id, Field6Req, Field6Name, Field6Cell, SysAlignment::AlignLeft, 33, Minus);
        this.addField(S31Table1Id, Field7Id, Field7Req, Field7Name, Field7Cell, SysAlignment::AlignLeft, 33, Minus);
        this.addField(S31Table1Id, Field8Id, Field8Req, Field8Name, Field8Cell, SysAlignment::AlignLeft, 8,  Minus);
        this.addField(S31Table1Id, Field9Id, Field9Req, Field9Name, Field9Cell, SysAlignment::AlignLeft, 8,  Minus);

        this.addField(S31Table1Id, Field10Id, Field10Req, Field10Name, Field10Cell, SysAlignment::AlignLeft, 8,  Minus);
        this.addField(S31Table1Id, Field11Id, Field11Req, Field11Name, Field11Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S31Table1Id, Field12Id, Field12Req, Field12Name, Field12Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S31Table1Id, Field13Id, Field13Req, Field13Name, Field13Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S31Table1Id, Field14Id, Field14Req, Field14Name, Field14Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addTable(S31Table2Id, TableName2);

        this.addField(S31Table2Id, Field1Id, Field15Req, Field15Name, Field15Cell, SysAlignment::AlignLeft, 4,  Minus);
        this.addField(S31Table2Id, Field2Id, Field16Req, Field16Name, Field16Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S31Table2Id, Field3Id, Field17Req, Field17Name, Field17Cell, SysAlignment::AlignLeft, 5,  Minus);
        this.addField(S31Table2Id, Field4Id, Field18Req, Field18Name, Field18Cell, SysAlignment::AlignLeft, 10, Minus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getLevel()
    {
        int sectionNum;
        int sectionPart;
        int reportYear;

        [ sectionNum, sectionPart, reportYear ] = valuesKeySortedEnumerator.current();

        return sectionPart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean moveNext()
    {
        boolean ret;

        if (year(periodEnd + 1) <= year(periodEnd))
            return false;

        if (!vatDeclaration)
            return false;

        const int header = 1;
        const int lines = 2;
        const int defaultYear = -1;
        
        if (!valuesKeySorted)
        {
            valuesKeySorted = new Set(Types::Container);

            MapEnumerator values1mapEnumerator = values1Map.getEnumerator();
            while (values1mapEnumerator.moveNext())
            {
                int sectionNum = values1mapEnumerator.currentKey();
                valuesKeySorted.add([ sectionNum, header, defaultYear ]);
            }

            MapEnumerator values2mapEnumerator = values2Map.getEnumerator();
            while (values2mapEnumerator.moveNext())
            {
                int sectionNum;
                int reportYear;
                [ sectionNum, reportYear ] = values2mapEnumerator.currentKey();
                valuesKeySorted.add([ sectionNum, lines, reportYear ]);
            }

            valuesKeySortedEnumerator = valuesKeySorted.getEnumerator();
        }

        if (valuesKeySortedEnumerator.moveNext())
        {
            ret = true;

            vatDeclaration.resetValues();

            int sectionNum;
            int sectionPart;
            int reportYear;

            [ sectionNum, sectionPart, reportYear ] = valuesKeySortedEnumerator.current();

            if (sectionPart == header)
            {
                this.nextTable1initVatdeclaration(sectionNum);
            }
            else
            {
                this.nextTable2initVatdeclaration(sectionNum, reportYear);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        boolean res;

        if (year(periodEnd + 1) > year(periodEnd))
        {
            switch (_tableId)
            {
                case S31Table1Id:
                    res = this.nextTable1();
                    break;

                case S31Table2Id:
                    res = this.nextTable2();
                    break;
            }
        }

        if (!res)
        {
            this.checkDynamicWorkdsheetInitialized(_tableId);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable1</Name>
				<Source><![CDATA[
    private boolean nextTable1()
    {
        int sectionNum;

        if (vatDeclaration && values1KeyEnumerator && values1KeyEnumerator.moveNext() && values1Map.exists(values1KeyEnumerator.current()))
        {
            sectionNum = values1KeyEnumerator.current();

            this.nextTable1initVatdeclaration(sectionNum);

            worksheetName1 = this.worksheetName(sectionNum, S31Table1Id);

            this.setInitialized(S31Table1Id);

            if (!this.initialized(S31Table2Id))
            {
                this.nextTable2();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable1initVATDeclaration</Name>
				<Source><![CDATA[
    private void nextTable1initVATDeclaration(int _sectionNum)
    {
        str     assetName;
        str     zipCode;
        str     state;
        str     county;
        str     town;
        str     settlement;
        str     street;
        str     estate;
        str     building;
        str     flat;
        date    acquisitionDate, deprStartDate;
        Amount  acquisitionCost, usedIncomingVAT;

        [ assetName,
        zipCode,
        state,
        county,
        town,
        settlement,
        street,
        estate,
        building,
        flat,
        acquisitionDate,
        deprStartDate,
        acquisitionCost,
        usedIncomingVAT ] = values1Map.lookup(_sectionNum);

        vatDeclaration.setValue(Field1Id,  S31Table1Id, assetName);
        vatDeclaration.setValue(Field2Id,  S31Table1Id, zipCode);
        vatDeclaration.setValue(Field3Id,  S31Table1Id, state);
        vatDeclaration.setValue(Field4Id,  S31Table1Id, county);
        vatDeclaration.setValue(Field5Id,  S31Table1Id, town);
        vatDeclaration.setValue(Field6Id,  S31Table1Id, settlement);
        vatDeclaration.setValue(Field7Id,  S31Table1Id, street);
        vatDeclaration.setValue(Field8Id,  S31Table1Id, estate);
        vatDeclaration.setValue(Field9Id,  S31Table1Id, building);
        vatDeclaration.setValue(Field10Id, S31Table1Id, flat);
        vatDeclaration.setValue(Field11Id, S31Table1Id, acquisitionDate ? date2str(acquisitionDate, 123, 2, 2, 2, 2, 4, DateFlags::None) : Emptydate);
        vatDeclaration.setValue(Field12Id, S31Table1Id, deprStartDate   ? date2str(deprStartDate,   123, 2, 2, 2, 2, 4, DateFlags::None) : Emptydate);
        vatDeclaration.setValue(Field13Id, S31Table1Id, decround(acquisitionCost, 0));
        vatDeclaration.setValue(Field14Id, S31Table1Id, decround(usedIncomingVAT, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable2</Name>
				<Source><![CDATA[
    private boolean nextTable2()
    {
        int     sectionNum;
        int     reportYear;

        if (vatDeclaration && values2KeyEnumerator && values2KeyEnumerator.moveNext() && values2Map.exists(values2KeyEnumerator.current()))
        {
            [sectionNum, reportYear] = values2KeyEnumerator.current();

            if (lastSectionNum != sectionNum)
            {
                lineNum         = 0;
                lastSectionNum  = sectionNum;
                worksheetName2  = this.worksheetName(sectionNum, S31Table2Id);
            }

            lineNum++;

            this.nextTable2initVATDeclaration(sectionNum, reportYear);

            this.setInitialized(S31Table2Id);
 
            if (!this.initialized(S31Table2Id))
            {
                this.nextTable1();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable2initVATDeclaration</Name>
				<Source><![CDATA[
    private void nextTable2initVATDeclaration(
        int _sectionNum,
        int _reportYear)
    {
        int     pos;
        date    useStartDate;
        Factor  factor;
        str     factorStr;
        Amount  restoredTaxAmount;

        [ useStartDate, factor, restoredTaxAmount ] = values2Map.lookup([ _sectionNum, _reportYear ]);

        if (factor)
        {
            factorStr = num2str(factor, 0, 1, 1, 0);
            while (strscan(factorStr, Dot, 1, strlen(factorStr)) < IntLen + 1)
            {
                pos = strscan(factorStr, Dot, 1, strlen(factorStr));
                factorStr = strins(factorStr, Minus, pos);
            }
        }

        vatDeclaration.setValue(Field1Id, S31Table2Id, _reportYear);
        vatDeclaration.setValue(Field2Id, S31Table2Id, useStartDate ? date2str(useStartDate, 123, 2, 2, 2, 2, 4, DateFlags::None) : Emptydate);
        vatDeclaration.setValue(Field3Id, S31Table2Id, factor ? factorStr : Emptyfactor);
        vatDeclaration.setValue(Field4Id, S31Table2Id, decround(restoredTaxAmount, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        if (_tableId == S31Table1Id && !worksheetDeleted && values1Map)
        {
            return values1Map.elements();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(S31Table1Id);
        super(S31Table2Id);

        if (!worksheetDeleted)
        {
            lastSectionNum = 0;

            values1Map = new Map(Types::Integer, Types::Container);
            values2Map = new Map(Types::Container, Types::Container);

            this.collectValues();

            values1KeyEnumerator = values1Map.keySet().getEnumerator();
            values2KeyEnumerator = values2Map.keySet().getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        str aWorksheet;
        str cell;
        int cellRow;
        str cellName;

        if (evaluator && evaluator.allowUpdateKeyCode())
        {
            switch (_tableId)
            {
                case S31Table1Id:
                    if (worksheetName1)
                    {
                        cell = ComExcelDocument_RU::replaceWorksheetName(evaluator.keyCode(), worksheetName1);
                    }
                    break;

                case S31Table2Id:
                    [aWorksheet, cell] = str2con_RU(evaluator.keyCode(), '!');

                    if (!cell)
                    {
                        cell = aWorksheet;
                    }

                    if (cell)
                    {
                        [cellName, cellRow] = ComExcelDocument_RU::cell2ColNameRow(cell, false);
                        cell                = ComExcelDocument_RU::replaceWorksheetName(ComExcelDocument_RU::changeCellRows(cell, cellRow + (lineNum - 1) * 2), worksheetName2);
                    }
                    break;
            }

            if (cell)
            {
                evaluator.updateKeyCode(cell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S31_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S31_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S31_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S31_W section31 = LedgerRRGEDatasourceVATDecl501S31_W::construct();

        section31.parmVATDeclaration(_vatDeclaration);

        return section31;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>