<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDateOfVATConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The checking of the missing records in TaxTrans_W, which are essential when turning on the feature 'Date of VAT register'.
/// This class is derived from the <see cref="T:SysConsistencyCheck" />.
/// </summary>
public class TaxTransDateOfVATConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process of checking and fixing the missing lines in TaxTrans_W.
    /// </summary>
    public void run()
    {
        if (VatDueDateFeature::isEnabled())
        {
            FromDate fromDate = this.consistencyCheckJob.parmFromDate();
            CheckFix checkFix = this.checkFix();
            Counter numRecords = this.processMissingRecords(checkFix, fromDate);
            if (checkFix == CheckFix::Fix)
            {
                this.updateCorrected(numRecords);
                info(strFmt("@VatDueDate:CheckConsistencyResultFixMessage", numRecords));
            }
            else
            {
                this.updateNotCorrected();
                if (numRecords > 0)
                {
                    info(strFmt("@VatDueDate:CheckConsistencyResultCheckMessage", numRecords));
                }
            }
        }
        else
        {
            info(strFmt("@VatDueDate:CheckConsistencyPreRequisiteMessage", "@GLS109142", "@FeatureManagement:WorkspaceLabel"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMissingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies and inserts the missing records in TaxTrans_W.
    /// </summary>
    /// <param name = "_checkFix">The type of processing: either Check or Fix.</param>
    /// <param name = "_fromDate">The date, from which should be processed the lines from TaxTrans table.</param>
    /// <returns>The number of records, which should be inserted into TaxTrans_W</returns>
    private Counter processMissingRecords(CheckFix _checkFix, FromDate _fromDate)
    {
        TaxTrans_W taxTransW;
        TaxTrans taxTrans;
        Counter numOfRecords;

        if (_checkFix == CheckFix::Fix)
        {
            RecordInsertList taxTransRecordList = new RecordInsertList(tableNum(TaxTrans_W));
            while select RecId from taxTrans
                where taxTrans.TransDate >= _fromDate
            notexists join taxTransW
                where taxTrans.RecId == taxTransW.TaxTrans
            {
                TaxTrans_W taxTransItem;
                taxTransItem.TaxTrans = taxTrans.RecId;
                taxTransRecordList.add(taxTransItem);
            }
            numOfRecords = taxTransRecordList.insertDatabase();
        }
        else
        {
            select count(RecId) from taxTrans
                where taxTrans.TransDate >= _fromDate
            notexists join taxTransW
                where taxTrans.RecId == taxTransW.TaxTrans;
            numOfRecords = taxTrans.RecId;
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the id of the parent class.
    /// </summary>
    /// <returns>The class id of the parent class.</returns>
    public ClassId treeParentClassId()
    {
        return classNum(TaxConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTransDateOfVATConsistencyCheck construct()
    {
        return new TaxTransDateOfVATConsistencyCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@VatDueDate:CheckConsistencyName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return strFmt("@VatDueDate:CheckConsistencyDescription", "@SYS23189", "@GLS109142", "@SYS336146");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>