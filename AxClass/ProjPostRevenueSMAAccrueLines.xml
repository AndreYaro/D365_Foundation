<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueSMAAccrueLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostRevenueSMAAccrueLines extends ProjPost
{
    SMAAccruePeriodLine smaAccruePeriodLine;
    TransDate           smaPostingDate;
    AmountMST           accrueAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is a nonzero value and the <c>parmEnterSalesAccrued</c> method
    /// returns true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        return  this.parmEnterSalesAccrued() && this.ledgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountSalesAccruedLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used for posting the accrued sales amounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for posting the accrued sales amounts.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountSalesAccruedLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return projTrans.accruedRevenueSubsLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountSalesAccruedLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension that is used for the debit side of posting an on-account transaction.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract used by this transaction.
    /// </param>
    /// <returns>
    ///    The posting dimension for the debit amounts of on-account transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountSalesAccruedLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return projTrans.wipSubscriptionLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales account to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    /// <remarks>
    /// If this transaction is a reversing entry, the value will be the negative value of the value that is
    /// returned by the <c>salesAmountMST</c> method; otherwise, the value will be the revenue amount of
    /// the transaction.
    /// </remarks>
    public AmountCur ledgerSalesAmount()
    {
        AmountCur ret;

        if (this.parmAccrueAmount())
        {
            ret = this.parmAccrueAmount();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostRevenueSMAAccrueLines</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        smaAccruePeriodLine = _buffer;

        projTrans       = ProjTrans::newSMAAccruePeriodLine(smaAccruePeriodLine);

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccrueAmount</Name>
				<Source><![CDATA[
        public AmountMST parmAccrueAmount(AmountMST _accrueAmount   = accrueAmount)
    {
        accrueAmount  = _accrueAmount;

        return accrueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAPostingDate</Name>
				<Source><![CDATA[
        public TransDate parmSMAPostingDate(TransDate _smaPostingDate   = smaPostingDate)
    {
        smaPostingDate  = _smaPostingDate;

        return smaPostingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetTurnoverAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerPostingType::ProjSalesvalueOffset</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::ProjSalesvalueOffset</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeOffsetTurnoverAccrued()
    {
        return LedgerPostingType::ProjAccruedRevenueSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeTurnoverAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerPostingType::ProjSalesValue</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::ProjSalesValue</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeTurnoverAccrued()
    {
        return LedgerPostingType::ProjWIPSubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method is true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;

        if (smaAccruePeriodLine)
        {
            if (this.parmReverseAccrued())
            {
                if (smaAccruePeriodLine.PostingDate)
                {
                    smaAccruePeriodLine.PostingDate = dateNull();
                }
            }
            else
            {
                if (!smaAccruePeriodLine.PostingDate)
                {
                    smaAccruePeriodLine.PostingDate = this.parmSMAPostingDate();
                }
            }

            smaAccruePeriodLine.update();

            projRevenueTrans    = ProjRevenueTrans::find(smaAccruePeriodLine.ProjRevenueTransId);

            if (projRevenueTrans)
            {
                while select forupdate projRevenueTransSale
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId
                {
                    if (this.parmReverseAccrued())
                    {
                        projRevenueTransSale.LedgerSalesAmount -= smaAccruePeriodLine.AmountMST;
                    }
                    else
                    {
                        projRevenueTransSale.LedgerSalesAmount += smaAccruePeriodLine.AmountMST;
                    }

                    projRevenueTransSale.LedgerSalesPosted = (projRevenueTransSale.LedgerSalesAmount != 0);

                    if (!projRevenueTransSale.LedgerSalesPosted && SMAParametersSubscription::find().SubDeleteAccrued)
                    {
                        SMAAccruePeriodLine::deleteAccrueLines(projRevenueTrans.TransId);
                    }
                    projRevenueTransSale.update();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>