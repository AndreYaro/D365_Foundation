<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningComparePurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersionComparePurchTable</c> class extends the generic functionality in the
/// <c>VersioningComparePurchOrder</c> class and implements the analysis for a purchase order.
/// </summary>
/// <remarks>
/// The main contribution by this class is to define the specific data structure that is used to save a
/// purchase order.
/// </remarks>
class VersioningComparePurchTable extends VersioningComparePurchOrder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableAccountingDistributionView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method indicating if button for viewing accounting distributions should be enabled and visible
    /// on the <c>VersioningCompare</c> form. The button invokes the <c>AccountingDistribution</c> form.
    /// The accounting distributions are always displayed for the most recent state of purchase order
    /// and show all changes up to the current state.
    /// </summary>
    /// <returns>
    /// true to indicate that the button should be visible for viewing accounting distributions of purchase orders.
    /// </returns>
    public boolean enableAccountingDistributionView()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
        public str getCaption()
    {
        return "@SYS300228";
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>VersioningTmpTrans</c> temporary table with the information specific to a
    ///    purchase order.
    /// </summary>
    public void loadData()
    {
        // Comparison structure:

        // PurchTable
        //     SourceDocumentDistribution
        //     MarkupTrans
        //         SourceDocumentDistribution
        //     VendPaymSched
        //         VendPaymSchedLine
        //     PurchLine
        //         PurchLineForeignTradeCategory
        //         AgreementLineReleasedLine
        //         SourceDocumentDistribution
        //         MarkupTrans
        //              SourceDocumentDistribution

        this.loadPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchPrepayTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>PurchPrepayTable</c> records that are related to the specified <c>PurchTable</c>
    ///    record and saves the result in the temporary <c>VersioningTmpTrans</c> table.
    /// </summary>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> record that owns the <c>PurchPrepayTable</c> records.
    /// </param>
    /// <param name="_purchTableNodeRecId">
    ///    The record ID of the record in the temporary table that contains the <c>PurchTable</c> record.
    /// </param>
    protected void loadPurchPrepayTable(PurchTable _purchTable, recId _purchTableNodeRecId)
    {
        PurchPrepayTable                        purchPrepayTable;
        PurchPrepayTableMap                     purchPrepayTableOld;
        PurchPrepayTableMap                     purchPrepayTableNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchPrepayTable
            where purchPrepayTable.PurchTable == _purchTable.PurchId
        {
            if (isOldVersionArchived)
            {
                purchPrepayTableOld = PurchPrepayTableHistory::find(purchPrepayTable, oldDateTime);
                foundOld = (purchPrepayTableOld.RecId != 0);
            }
            else
            {
                purchPrepayTableOld = purchPrepayTable;
                foundOld = !purchPrepayTable.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                purchPrepayTableNew = PurchPrepayTableHistory::find(purchPrepayTable, newDateTime);
                foundNew = (purchPrepayTableNew.RecId != 0);
            }
            else
            {
                purchPrepayTableNew = purchPrepayTable;
                foundNew = !purchPrepayTable.IsDeleted;
            }

            this.insertVersioningTmpTrans(purchPrepayTable, foundOld, foundNew, purchPrepayTableOld, purchPrepayTableNew, _purchTableNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>PurchTable</c> records and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <remarks>
    /// The method will also analyze the differences in the following tables:
    /// <list type="bullet">
    /// <item>
    /// <description>The <c>Markup</c> table.</description>
    /// </item>
    /// <item>
    /// <description>The <c>VendPaymSched</c> table.</description>
    /// </item>
    /// <item>
    /// <description>The <c>PurchLine</c> table.</description>
    /// </item>
    /// </list>
    /// </remarks>
    protected void loadPurchTable()
    {
        PurchLine   purchLine;

        super();

        this.loadAccountingDistribution(purchTable.SourceDocumentLine, purchTableNodeRecId);
        this.loadMarkup(                purchTable, purchTableNodeRecId);
        this.loadPurchPrepayTable(      purchTable, purchTableNodeRecId);
        this.loadVendPaymSched(         purchTable, purchTableNodeRecId);

        while select purchLine
            order by LineNumber
            where purchLine.PurchId == purchTable.PurchId
        {
            this.loadPurchLine(purchLine, purchTableNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVendPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>VendPaymSched</c> records related to the specified <c>PurchTable</c> record and
    ///    saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> record that owns the <c>VendPaymSched</c> transactions.
    /// </param>
    /// <param name="_purchTableNodeRecId">
    ///    The <c>RecId</c> field of the record in the temporary table that holds the <c>PurchTable</c> record.
    /// </param>
    /// <remarks>
    ///    The method will also analyze the differences in the <c>VendPaymSchedLine</c> table.
    /// </remarks>
    protected void loadVendPaymSched(PurchTable _purchTable, recId _purchTableNodeRecId)
    {
        VendPaymSched                           vendPaymSched;
        VendPaymSchedMap                        vendPaymSchedOld;
        VendPaymSchedMap                        vendPaymSchedNew;
        recId                                   vendPaymSchedNodeRecId;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select vendPaymSched
            where vendPaymSched.ExtTableId  == _purchTable.TableId
            &&    vendPaymSched.ExtRecId    == _purchTable.RecId
        {
            if (isOldVersionArchived)
            {
                vendPaymSchedOld = VendPaymSchedHistory::find(vendPaymSched, oldDateTime);
                foundOld = (vendPaymSchedOld.RecId != 0);
            }
            else
            {
                vendPaymSchedOld = vendPaymSched;
                foundOld = !vendPaymSched.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                vendPaymSchedNew = VendPaymSchedHistory::find(vendPaymSched, newDateTime);
                foundNew = (vendPaymSchedNew.RecId != 0);
            }
            else
            {
                vendPaymSchedNew = vendPaymSched;
                foundNew = !vendPaymSched.IsDeleted;
            }

            vendPaymSchedNodeRecId = this.insertVersioningTmpTrans(vendPaymSched, foundOld, foundNew, vendPaymSchedOld, vendPaymSchedNew, _purchTableNodeRecId);

            this.loadVendPaymSchedLine( vendPaymSched, vendPaymSchedNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVendPaymSchedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>VendPaymSchedLine</c> records related to the specified <c>VendPaymSched</c> record
    ///    and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_vendPaymSched">
    ///    The <c>VendPaymSched</c> record that owns the <c>VendPaymSchedLine</c> transactions.
    /// </param>
    /// <param name="_vendPaymSchedNodeRecId">
    ///    The <c>RecId</c> field of the record in the temporary table that hold the <c>VendPaymSched</c>
    ///    record.
    /// </param>
    protected void loadVendPaymSchedLine(VendPaymSched _vendPaymSched, recId _vendPaymSchedNodeRecId)
    {
        VendPaymSchedLine                       vendPaymSchedLine;
        VendPaymSchedLineMap                    vendPaymSchedLineOld;
        VendPaymSchedLineMap                    vendPaymSchedLineNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select vendPaymSchedLine
            where vendPaymSchedLine.FatherRecID  == _vendPaymSched.RecId
        {
            if (isOldVersionArchived)
            {
                vendPaymSchedLineOld = VendPaymSchedLineHistory::find(vendPaymSchedLine, oldDateTime);
                foundOld = (vendPaymSchedLineOld.RecId != 0);
            }
            else
            {
                vendPaymSchedLineOld = vendPaymSchedLine;
                foundOld = !vendPaymSchedLine.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                vendPaymSchedLineNew = VendPaymSchedLineHistory::find(vendPaymSchedLine, newDateTime);
                foundNew = (vendPaymSchedLineNew.RecId != 0);
            }
            else
            {
                vendPaymSchedLineNew = vendPaymSchedLine;
                foundNew = !vendPaymSchedLine.IsDeleted;
            }

            this.insertVersioningTmpTrans(vendPaymSchedLine, foundOld, foundNew, vendPaymSchedLineOld, vendPaymSchedLineNew, _vendPaymSchedNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static VersioningComparePurchTable construct()
    {
        return new VersioningComparePurchTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>