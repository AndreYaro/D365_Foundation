<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_DRCST_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedFileCreator_DRCST_BR</c> class generates the SPED DRCST - SC file.
/// </summary>
public class FBSpedFileCreator_DRCST_BR extends FBSpedFileCreatorBase_BR
{
    private FBSPEDFileType_BR               spedFileType;
    private FiscalEstablishment_BR          fiscalEstablishment;
    private FBSpedDRCSTSetupParameters_BR   parameters;

    private FBPresumedComplementedDocumentsTmp_BR   complementedDocumentsTmp;
    private FBSpedDRCSTCollectedAmountsTmp_BR       collectedAmountsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRangeWithUnsupportedCFOPNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the extended range for query object to trim lines with unsupported CFOP numbers.
    /// </summary>
    /// <param name = "_fiscalDocumentLineName">
    /// The name that is used in code to identify the table <c>FiscalDocument_BR</c> in a query.
    /// </param>
    /// <returns>
    /// The extended range.
    /// </returns>
    public static str getRangeWithUnsupportedCFOPNumbers(str _fiscalDocumentLineName)
    {
        return strFmt(@'((%1.%2 != "%3") && (%1.%2 != "%4"))',
            _fiscalDocumentLineName,
            fieldstr(FiscalDocumentLine_BR, CFOP),
            '5.929',
            '6.929');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the extended range for query object.
    /// </summary>
    /// <param name="_fiscalDocumentName">
    /// The name that is used in code to identify the table <c>FiscalDocument_BR</c> in a query.
    /// </param>
    /// <param name="_fiscalDocumentLineName">
    /// The name that is used in code to identify the table <c>FiscalDocumentLine_BR</c> in a query.
    /// </param>
    /// <returns>
    /// The extended range.
    /// </returns>
    public static str getFiscalDocumentRange(str _fiscalDocumentName, str _fiscalDocumentLineName)
    {
        return strFmt(@'(((%1.%2 == 1)) || ((%1.%2 == 0) && !(%3.%4 LIKE "%5")))',
            _fiscalDocumentName,
            fieldstr(FiscalDocument_BR, FinalUser),
            _fiscalDocumentLineName,
            fieldstr(FiscalDocumentLine_BR, CFOP),
            '5*');
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    protected void populateFileContent()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10024, funcName());

        changeCompany (fbBookingPeriod.FiscalEstablishmentDataArea)
        {
            this.populateSpedFileUnitOfMeasure();
            this.populateComplementedFiscalDocument();
            this.populateFiscalDocumentsAmounts();

            this.createBlock0(); // + Block H
            this.createBlock2();
            this.createBlock9();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock0</Name>
				<Source><![CDATA[
    private void createBlock0()
    {
        this.createRecord0000();
        this.createRecord0001();
        this.createRecord0005();
        this.createRecord0100();
        this.createRecord0190(null, fiscalEstablishment);
        this.createRecord0200(null, fiscalEstablishment); // + Record 0220
        this.createRecord0990(); // + Block H
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockH</Name>
				<Source><![CDATA[
    private void createBlockH(FBSpedRecord_BR _parentRecord)
    {
        this.createRecordH001(_parentRecord);
        this.createRecordH005(_parentRecord); // + Record H010
        this.createRecordH990(_parentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock2</Name>
				<Source><![CDATA[
    private void createBlock2()
    {
        this.createRecord2100();
        this.createRecord2110(); // + Records 2113 - 2134
        this.createRecord2990();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock9</Name>
				<Source><![CDATA[
    private void createBlock9()
    {
        this.createRecord9900();
        this.createRecord9990();
        this.createRecord9999();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    private void createRecord0000()
    {
        LogisticsPostalAddress fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('0000');                               // REG - 1
        spedRecord.addFieldNumericFilledWithZeros(parameters.Version, 3);                                   // COD_VER - 2
        spedRecord.addFieldNumeric(spedFileType, 0, 1);                                                     // COD_FIN - 3
        spedRecord.addFieldDate(fbBookingPeriod.periodFrom());                                              // DT_INI - 4
        spedRecord.addFieldDate(fbBookingPeriod.periodTo());                                                // DT_FIN - 5
        spedRecord.addFieldString(fiscalEstablishment.Name);                                                // NOME - 6
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14); // CNPJ - 7
        spedRecord.addFieldEmpty();                                                                         // CPF - 8
        spedRecord.addFieldString(fiscalEstablishmentAddress.State);                                        // UF - 9
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.IENum_BR));                          // IE - 10
        spedRecord.addFieldNumericFilledWithZeros(this.getCityCode(fiscalEstablishmentAddress), 7);         // COD_MUN - 11
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.CCMNum_BR));                         // IM - 12
        spedRecord.addFieldEmpty();                                                                         // SUFRAMA - 13
        spedRecord.addFieldString(enum2Symbol(enumNum(FBSPEDFiscalProfile_BR), parameters.Profile));        // IND_PERFIL - 14
        spedRecord.addFieldNumeric(int2str(parameters.ActivityType), 0, 1);                                 // IND_ATIV - 15

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0001</Name>
				<Source><![CDATA[
    private void createRecord0001()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0001');    // REG
        spedRecord.addFieldNumeric(0);                          // IND_MOV

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0005</Name>
				<Source><![CDATA[
    private void createRecord0005()
    {
        LogisticsPostalAddress fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        FBSpedRecord_BR spedRecord = this.newRecord('0005');                                                // REG

        spedRecord.addFieldString(fiscalEstablishment.Name);                                                // FANTASIA
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(fiscalEstablishmentAddress.ZipCode), 8); // CEP
        spedRecord.addFieldString(fiscalEstablishmentAddress.Street);                                       // END
        spedRecord.addFieldString(fiscalEstablishmentAddress.StreetNumber);                                 // NUM
        spedRecord.addFieldString(fiscalEstablishmentAddress.BuildingCompliment);                           // COMPL
        spedRecord.addFieldString(fiscalEstablishmentAddress.DistrictName);                                 // BAIRRO
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.phone()), 11);                       // FONE
        spedRecord.addFieldString(this.keepNumbers(fiscalEstablishment.teleFax()), 11);                     // FAX
        spedRecord.addFieldString(fiscalEstablishment.email());                                             // EMAIL

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0100</Name>
				<Source><![CDATA[
    private void createRecord0100()
    {
        Accountant_BR accountant = fbBookingPeriod.FiscalEstablishment().primaryAccountant();
        LogisticsPostalAddress postalAddress = accountant.postalAddress();

        FBSpedRecord_BR spedRecord = this.newRecord('0100');                                                                                // REG - 1
        spedRecord.addFieldString(accountant.Name);                                                                                         // NOME - 2
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(accountant.CPFNum_BR), 11);                                              // CPF - 3
        spedRecord.addFieldString(this.keepAlphaWithoutAccents(accountant.CRCNum_BR));                                                      // CRC - 4
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(accountant.CNPJNum_BR), 14);                                             // CNPJ - 5
        spedRecord.addFieldNumericFilledWithZeros(this.keepNumbers(postalAddress.ZipCode), 8);                                              // CEP - 6
        spedRecord.addFieldString(postalAddress.Street, 60);                                                                                // END - 7
        spedRecord.addFieldString(postalAddress.StreetNumber, 10);                                                                          // NUM - 8
        spedRecord.addFieldString(postalAddress.BuildingCompliment, 60);                                                                    // COMPL - 9
        spedRecord.addFieldString(postalAddress.DistrictName, 60);                                                                          // BAIRRO - 10
        spedRecord.addFieldString(this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Phone).Locator), 11); // FONE - 11
        spedRecord.addFieldString(this.keepNumbers(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Fax).Locator), 11);   // FAX - 12
        spedRecord.addFieldString(accountant.electronicAddress(LogisticsElectronicAddressMethodType::Email).Locator);                       // EMAIL - 13
        spedRecord.addFieldNumericFilledWithZeros(LogisticsAddressCity::findRecId(postalAddress.CityRecId).IBGECode_BR, 7);                 // COD_MUN - 14

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0200</Name>
				<Source><![CDATA[
    protected void createRecord0200(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance;
        while select ItemId, sum(Quantity), sum(QuantitySales) from fbICMSSTInventoryBalance
            group by fbICMSSTInventoryBalance.ItemId
            where fbICMSSTInventoryBalance.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            InventTable inventTable = InventTable::find(fbICMSSTInventoryBalance.ItemId);

            if (inventTable && fbICMSSTInventoryBalance.Quantity >= 0 && fbICMSSTInventoryBalance.QuantitySales != 0)
            {
                TaxValue itemTaxValue = this.getItemTaxValueICMS(inventTable.ItemId);

                FBSpedRecord_BR spedRecord = this.newRecord('0200');                                                            // REG - 1
                spedRecord.addFieldString(fbICMSSTInventoryBalance.ItemId);                                                     // COD_ITEM - 2
                spedRecord.addFieldString(strLRTrim(inventTable.NameAlias));                                                    // DESCR_ITEM - 3
                spedRecord.addFieldString(InventItemBarcode::findShowForItem(inventTable.ItemId).ItemBarCode);                  // COD_BARRA - 4
                spedRecord.addFieldEmpty();                                                                                     // COD_ANT_ITEM - 5
                spedRecord.addFieldString(                                                                                      // UNID_INV - 6
                    FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, inventTable.inventTableModuleInvent().UnitId));
                spedRecord.addFieldNumericFilledWithZeros(subStr(inventTable.InventProductType_BR, 1, 2), 2);                   // TIPO_ITEM - 7
                spedRecord.addFieldString(this.keepNumbers(inventTable.TaxFiscalClassification_BR));                            // COD_NCM - 8
                spedRecord.addFieldEmpty();                                                                                     // EX_IPI - 9
                spedRecord.addFieldNumericFilledWithZeros(str2int(substr(inventTable.TaxFiscalClassification_BR, 1, 2)), 2);    // COD_GEN - 10
                spedRecord.addFieldEmpty();                                                                                     // COD_LST - 11
                spedRecord.addFieldNumeric(itemTaxValue, 2);                                                                    // ALIQ_ICMS - 12
                spedRecord.addFieldString(                                                                                      // CEST - 13
                    this.keepNumbers(TaxSubstitutionCodeTable_BR::getTaxSubstitutionCode(inventTable.ItemId, inventTable.TaxFiscalClassification_BR)), 7);

                this.addChildRecord(_parentRecord, spedRecord);

                this.createRecord0220(spedRecord, inventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        UnitOfMeasure inventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(_inventTable.inventTableModuleInvent().UnitId);

        while select Symbol from spedFileUnitOfMeasure
            where spedFileUnitOfMeasure.ItemId == _inventTable.ItemId
        {
            UnitOfMeasure nonInventoryUnitOfMeasure = UnitOfMeasure::findBySymbol(spedFileUnitOfMeasure.Symbol);

            UnitOfMeasureConversion unitOfMeasureConversion = unitOfMeasureConversion::existsProductSpecificConversion(_inventTable.Product)
                ? UnitOfMeasureConversion::findByConversion(nonInventoryUnitOfMeasure.RecId, inventoryUnitOfMeasure.RecId, _inventTable.Product)
                : UnitOfMeasureConversion::findByConversion(nonInventoryUnitOfMeasure.RecId, inventoryUnitOfMeasure.RecId);

            if (unitOfMeasureConversion)
            {
                FBSpedRecord_BR spedRecord = this.newRecord('0220');                                                    // REG

                spedRecord.addFieldString(nonInventoryUnitOfMeasure.Symbol, 6);                                         // UNID_CONV
                spedRecord.addFieldNumeric(unitOfMeasureConversion.Factor / unitOfMeasureConversion.Denominator, 6);    // FAT_CONV

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0990</Name>
				<Source><![CDATA[
    private void createRecord0990()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('0990');                // REG
        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('0') + 1);  // QTD_LIN_0

        this.addRecord(spedRecord);

        this.createBlockH(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH001</Name>
				<Source><![CDATA[
    private void createRecordH001(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('H001');    // REG
        spedRecord.addFieldNumeric(0);                          // IND_MOV

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH005</Name>
				<Source><![CDATA[
    private void createRecordH005(FBSpedRecord_BR _parentRecord)
    {
        Amount totalInventoryAmount;

        FBInventBalance_BR inventBalance;
        while select ItemId, sum(CostAmount), sum(InventQty) from inventBalance
            group by inventBalance.ItemId
            where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                && inventBalance.MonthRef == fbBookingPeriod.periodTo()
                && inventBalance.CostAmount > 0
        {
            Amount accountingAmount;
            UnitQty     quantityBalance,
                        quantityInc,
                        quantityOutFinalUser,
                        quantityOutNonFinalUser;

            quantityInc = this.getTotalQuantity_Record2130(inventBalance.ItemId, false);
            quantityInc += this.getTotalQuantity_Record2130(inventBalance.ItemId, true);

            [ quantityOutNonFinalUser, accountingAmount ] = this.getTotalQuantityAndAmout_Record2113(inventBalance.ItemId, NoYes::No);
            [ quantityOutFinalUser, accountingAmount ] = this.getTotalQuantityAndAmout_Record2113(inventBalance.ItemId, NoYes::Yes);

            quantityBalance = (quantityInc - (quantityOutNonFinalUser + quantityOutFinalUser));

            totalInventoryAmount +=
                inventBalance.InventQty
                ? ((inventBalance.CostAmount / inventBalance.InventQty) * quantityBalance)
                : 0;
        }

        FBSpedRecord_BR spedRecord = this.newRecord('H005');    // REG - 1
        spedRecord.addFieldDate(fbBookingPeriod.periodTo());    // DT_INV - 2
        spedRecord.addFieldNumeric(totalInventoryAmount, 2);    // VL_INV - 3
        spedRecord.addFieldString('05');                        // MOT_INV - 4

        this.addChildRecord(_parentRecord, spedRecord);

        if (totalInventoryAmount > 0)
        {
            this.createRecordH010(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH010</Name>
				<Source><![CDATA[
    private void createRecordH010(FBSpedRecord_BR _parentRecord)
    {
        FBInventBalance_BR  inventBalance;
        InventTable         inventTable;

        while select sum(CostAmount), sum(InventQty) from inventBalance
            group by
                inventBalance.ItemId,
                inventBalance.UnitId,
                inventBalance.CustVendAccount,
                inventBalance.CustVendType,
                inventBalance.InventOwner,
                inventBalance.InventoryAccountNum
            where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                && inventBalance.MonthRef == fbBookingPeriod.periodTo()
                && inventBalance.CostAmount > 0
        join inventTable
            where inventTable.ItemId == inventBalance.ItemId
        {
            Amount accountingAmount;
            InventQty   quantityOutFinalUser,
                        quantityOutNonFinalUser;

            InventQty quantityInc = this.getTotalQuantity_Record2130(inventBalance.ItemId, false);
            quantityInc += this.getTotalQuantity_Record2130(inventBalance.ItemId, true);

            [ quantityOutNonFinalUser, accountingAmount ] = this.getTotalQuantityAndAmout_Record2113(inventBalance.ItemId, NoYes::No);
            [ quantityOutFinalUser, accountingAmount ] = this.getTotalQuantityAndAmout_Record2113(inventBalance.ItemId, NoYes::Yes);

            InventQty qty = (quantityInc - (quantityOutNonFinalUser + quantityOutFinalUser));
            AmountMST valuePerUnit = inventBalance.InventQty ? inventBalance.CostAmount / inventBalance.InventQty : 0;
            CostAmount value = valuePerUnit * qty;

            if (qty > 0 && value > 0)
            {
                if (inventBalance.CustVendAccount)
                {
                    spedFileParty = FBSpedFileCreator_Fiscal_BR::getInventBalanceSpedFileParty(inventBalance, spedFileParty, fiscalEstablishment);
                }

                if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishment.RecId, inventBalance.ItemId))
                {
                    spedFileItem.insertFromInventTable(fiscalEstablishment.RecId, inventTable);
                }

                if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(spedFileUnitOfMeasure, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId))
                {
                    spedFileUnitOfMeasure.insertFromItemIdAndSymbol(spedFileUnitSymbol, fiscalEstablishment.RecId, inventBalance.ItemId, inventBalance.UnitId);
                }

                FBSpedRecord_BR spedRecord = this.newRecord('H010');                                                                        // REG - 1
                spedRecord.addFieldString(inventBalance.ItemId);                                                                            // COD_ITEM - 2
                spedRecord.addFieldString(FBSpedFileUnitSymbolTmp_BR::findOrCreateSpedSymbol(spedFileUnitSymbol, inventBalance.UnitId));    // UNID - 3
                spedRecord.addFieldNumeric(qty, 3);                                                                                         // QTD - 4
                spedRecord.addFieldNumeric(valuePerUnit, 6);                                                                                // VL_UNIT - 5
                spedRecord.addFieldNumeric(value, 2);                                                                                       // VL_ITEM - 6
                spedRecord.addFieldString('0');                                                                                             // IND_PROP - 7
                spedRecord.addFieldString(inventBalance.InventOwner == InventCountingGroup_BR::OwnStock ? '' : spedFileParty.code());       // COD_PART - 8
                spedRecord.addFieldEmpty();                                                                                                 // TXT_COMPL - 9
                spedRecord.addFieldString(inventBalance.InventoryAccountNum);                                                               // COD_CTA - 10
                spedRecord.addFieldNumeric(value, 2);                                                                                       // VL_ITEM_IR - 11

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordH990</Name>
				<Source><![CDATA[
    private void createRecordH990(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('H990');                // REG
        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('H') + 1);  // QTD_LIN_H

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2100</Name>
				<Source><![CDATA[
    private void createRecord2100()
    {
        Amount  sumICMSSTRestituteFinal,        // for S_VL_ICMS_ST_REST (2)
                sumICMSSTComplementFinal,       // for S_VL_ICMS_ST_COMPL (3)
                totalICMSSTRefundOtherState,    // for SD_ICMS_ST_RESS (5)
                totalICMSTransactions;          // for SD_ICMS_OP (7)

        while select collectedAmountsTmp
        {
            Amount itemTaxValue = this.getItemTaxValueICMS(collectedAmountsTmp.ItemId);
            Amount taxBaseAmount = this.getAverageTaxBaseAmountPerUnitOutFinalUser(collectedAmountsTmp);

            if (taxBaseAmount > collectedAmountsTmp.AccountingAmountOutFinalUser)
            {
                sumICMSSTRestituteFinal += (taxBaseAmount - collectedAmountsTmp.AccountingAmountOutFinalUser) * itemTaxValue / 100;
            }
            else
            {
                sumICMSSTComplementFinal += ((collectedAmountsTmp.AccountingAmountOutFinalUser - taxBaseAmount) * itemTaxValue / 100);
            }

            totalICMSTransactions +=
                collectedAmountsTmp.QuantityInc
                ? (collectedAmountsTmp.TaxAmountOtherICMS / collectedAmountsTmp.QuantityInc) * collectedAmountsTmp.QuantityOutNonFinalUser
                : 0;

            totalICMSSTRefundOtherState +=
                collectedAmountsTmp.QuantityInc
                ? (collectedAmountsTmp.TaxAmountOtherICMSST / collectedAmountsTmp.QuantityInc) * collectedAmountsTmp.QuantityOutNonFinalUser
                : 0;
        }

        Amount totalICMSSTRestituteFinal =
            (sumICMSSTRestituteFinal > sumICMSSTComplementFinal)
            ? sumICMSSTRestituteFinal - sumICMSSTComplementFinal
            : 0;

        Amount totalICMSSTComplementFinal =
            (sumICMSSTComplementFinal > sumICMSSTRestituteFinal)
            ? sumICMSSTComplementFinal - sumICMSSTRestituteFinal
            : 0;

        FBSpedRecord_BR spedRecord = this.newRecord('2100');                                                                        // REG - 1
        spedRecord.addFieldNumeric(sumICMSSTRestituteFinal, 2);                                                                     // S_VL_ICMS_ST_REST - 2
        spedRecord.addFieldNumeric(sumICMSSTComplementFinal, 2);                                                                    // S_VL_ICMS_ST_COMPL - 3
        spedRecord.addFieldNumeric(totalICMSSTRestituteFinal, 2);                                                                   // SD_ICMS_ST_REST - 4
        spedRecord.addFieldNumeric(totalICMSSTRefundOtherState, 2);                                                                 // SD_ICMS_ST_RESS - 5
        spedRecord.addFieldNumeric(totalICMSSTComplementFinal, 2);                                                                  // SD_ICMS_ST_COMPL - 6
        spedRecord.addFieldNumeric(totalICMSTransactions, 2);                                                                       // SD_ICMS_OP - 7

        if ((totalICMSSTRestituteFinal + totalICMSSTRefundOtherState) > totalICMSSTComplementFinal)
        {
            spedRecord.addFieldNumeric((totalICMSSTRestituteFinal + totalICMSSTRefundOtherState) - totalICMSSTComplementFinal, 2);  // V_APUR_CRED_ICMS - 8
            spedRecord.addFieldNumeric(0, 2);                                                                                       // V_APUR_ICMS_COMP - 9
        }
        else
        {
            spedRecord.addFieldNumeric(0, 2);                                                                                       // V_APUR_CRED_ICMS - 8
            spedRecord.addFieldNumeric(totalICMSSTComplementFinal - (totalICMSSTRestituteFinal + totalICMSSTRefundOtherState), 2);  // V_APUR_ICMS_COMP - 9
        }

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2110</Name>
				<Source><![CDATA[
    private void createRecord2110()
    {
        FBInventoryBalanceOutDocuments_BR invBalanceOutDocuments;

        while select ItemId, sum(Quantity) from invBalanceOutDocuments
            group by invBalanceOutDocuments.ItemId
            where invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            select firstOnly collectedAmountsTmp
                where collectedAmountsTmp.ItemId == invBalanceOutDocuments.ItemId;

            Amount itemTaxValue = this.getItemTaxValueICMS(invBalanceOutDocuments.ItemId);
            Amount taxBaseAmount = this.getAverageTaxBaseAmountPerUnitOutFinalUser(collectedAmountsTmp);

            FBSpedRecord_BR spedRecord = this.newRecord('2110');                                                                            // REG - 1
            spedRecord.addFieldString(collectedAmountsTmp.ItemId, 60);                                                                      // COD_ITEM - 2
            spedRecord.addFieldNumeric(collectedAmountsTmp.QuantityOutFinalUser, 5);                                                        // QTDE_T_V_CF - 3
            spedRecord.addFieldNumeric(collectedAmountsTmp.AccountingAmountOutFinalUser, 2);                                                // VL_T_V_CF - 4

            spedRecord.addFieldNumeric(                                                                                                     // VLM_UNIT_V_CF - 5
                collectedAmountsTmp.QuantityOutFinalUser
                ? collectedAmountsTmp.AccountingAmountOutFinalUser / collectedAmountsTmp.QuantityOutFinalUser
                : 0, 3);

            spedRecord.addFieldNumeric(taxBaseAmount, 2);                                                                                   // VL_T_BCST_V_CF - 6

            if (taxBaseAmount > collectedAmountsTmp.AccountingAmountOutFinalUser)
            {
                spedRecord.addFieldNumeric(taxBaseAmount - collectedAmountsTmp.AccountingAmountOutFinalUser, 2);                            // VL_DIF_MAIOR_BCST - 7
                spedRecord.addFieldNumeric(0, 2);                                                                                           // VL_DIF_MENOR_BCST - 8
                spedRecord.addFieldNumeric(itemTaxValue, 2);                                                                                // ALIQ_EF - 9
                spedRecord.addFieldNumeric((taxBaseAmount - collectedAmountsTmp.AccountingAmountOutFinalUser) * itemTaxValue / 100, 2);     // VL_ICMS_ST_REST - 10
                spedRecord.addFieldNumeric(0, 2);                                                                                           // VL_ICMS_ST_COMPL - 11
            }
            else
            {
                spedRecord.addFieldNumeric(0, 2);                                                                                           // VL_DIF_MAIOR_BCST - 7
                spedRecord.addFieldNumeric(collectedAmountsTmp.AccountingAmountOutFinalUser - taxBaseAmount, 2);                            // VL_DIF_MENOR_BCST - 8
                spedRecord.addFieldNumeric(itemTaxValue, 2);                                                                                // ALIQ_EF - 9
                spedRecord.addFieldNumeric(0, 2);                                                                                           // VL_ICMS_ST_REST - 10
                spedRecord.addFieldNumeric((collectedAmountsTmp.AccountingAmountOutFinalUser - taxBaseAmount) * itemTaxValue / 100, 2);     // VL_ICMS_ST_COMPL - 11
            }

            spedRecord.addFieldNumeric(collectedAmountsTmp.QuantityOutNonFinalUser, 5);                                                     // QTDE_T_IND_S_OE - 12

            spedRecord.addFieldNumeric(                                                                                                     // VL_ICMS_ IND_S_OE - 13
                collectedAmountsTmp.QuantityInc
                ? (collectedAmountsTmp.TaxAmountOtherICMS / collectedAmountsTmp.QuantityInc) * collectedAmountsTmp.QuantityOutNonFinalUser
                : 0, 2);

            spedRecord.addFieldNumeric(                                                                                                     // VL_ICMS_ ST_IND_S_OE - 14
                collectedAmountsTmp.QuantityInc
                ? (collectedAmountsTmp.TaxAmountOtherICMSST / collectedAmountsTmp.QuantityInc) * collectedAmountsTmp.QuantityOutNonFinalUser
                : 0, 2);

            spedRecord.addFieldNumeric(0, 2);                                                                                               // QTDE_T_IND_S_SN - 15
            spedRecord.addFieldNumeric(0, 2);                                                                                               // VL_T_CREDITO_MVA_SN - 16

            this.addRecord(spedRecord);

            this.createRecord2113(spedRecord, collectedAmountsTmp.ItemId); // Outgoing FD + Records 2114 - 2115
            this.createRecord2113_returned(spedRecord, collectedAmountsTmp.ItemId); // Return Outgoing FD + Records 2114 - 2115
            this.createRecord2120(spedRecord, collectedAmountsTmp.ItemId); // Incoming FD + Records 2121 - 2134
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2113</Name>
				<Source><![CDATA[
    private void createRecord2113(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        FBInventoryBalanceOutDocuments_BR   invBalanceOutDocuments;
        FiscalDocument_BR                   fiscalDocument;
        FiscalDocumentLine_BR               fiscalDocumentLine;

        while select AccessKey, FinalUser, FiscalDocumentAccountNum, FiscalDocumentAccountType, FiscalDocumentDate, RecId, ThirdPartyCNPJCPF from fiscalDocument
        join AccountingAmount, CFOP, LineNum, Quantity, Unit from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        exists join invBalanceOutDocuments
            where invBalanceOutDocuments.FiscalDocument_BR == fiscalDocument.RecId
                && invBalanceOutDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && !invBalanceOutDocuments.IsReturn
        {
            FiscalDocumentLine_BR fiscalDocumentLineComplemented;
            select sum(AccountingAmount) from fiscalDocumentLineComplemented
                where fiscalDocumentLineComplemented.ItemId == _itemId
            exists join complementedDocumentsTmp
                where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLineComplemented.RecId
                    && complementedDocumentsTmp.RegularFiscalDocument_BR == fiscalDocument.RecId
                    && complementedDocumentsTmp.ItemId == _itemId;

            int typeOutputOperation = fiscalDocument.FinalUser ? 10 : 20;
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLine.Unit, _itemId);

            FBSpedRecord_BR spedRecord = this.newRecord('2113');                                        // REG - 1
            spedRecord.addFieldString('0');                                                             // IND_OPER - 2
            spedRecord.addFieldNumeric(typeOutputOperation);                                            // IND_S - 3
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);                                    // CHV_NFE - 4
            spedRecord.addFieldDate(fiscalDocument.FiscalDocumentDate);                                 // DT_NFE - 5
            spedRecord.addFieldEmpty();                                                                 // DT_E - 6

            if (FBUtil_BR::isCNPJ(fiscalDocument.ThirdPartyCNPJCPF) && fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::FiscalEstablishment)
            {
                DirPartyBaseType accountDirPartyBaseType = this.getAccountDirPartyBaseType(fiscalDocument.FiscalDocumentAccountType, fiscalDocument.FiscalDocumentAccountNum);

                if (accountDirPartyBaseType == DirPartyBaseType::Organization)
                {
                    spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 14);  // CNPJ - 7
                    spedRecord.addFieldEmpty();                                                         // CPF - 8
                }
                else
                {
                    spedRecord.addFieldEmpty();                                                         // CNPJ - 7
                    spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 11);  // CPF - 8
                }
            }
            else
            {
                spedRecord.addFieldEmpty();                                                             // CNPJ - 7
                spedRecord.addFieldEmpty();                                                             // CPF - 8
            }

            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0);                                  // NUM_ITEM - 9
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity, 5);                              // QTDE_IND_S - 10
            spedRecord.addFieldString(fiscalDocumentLine.Unit, 6);                                      // UNID - 11
            spedRecord.addFieldNumericAbs(conversionFactor, 6);                                         // FAT_CONV - 12
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity * conversionFactor, 5);           // QTDE_IND_S_C - 13
            spedRecord.addFieldNumericAbs(                                                              // VL_V_IND_S - 14
                fiscalDocumentLine.AccountingAmount + fiscalDocumentLineComplemented.AccountingAmount, 2);
            spedRecord.addFieldString(this.keepNumbers(fiscalDocumentLine.CFOP), 4);                    // CFOP - 15
            spedRecord.addFieldNumeric(0, 2);                                                           // VL_CREDITO_MVA_SN - 16

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecord2115(spedRecord, fiscalDocument.RecId, _itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2113_returned</Name>
				<Source><![CDATA[
    private void createRecord2113_returned(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        FiscalDocument_BR           fiscalDocument;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FBBookingPeriodPresumedIncDocuments_BR presumedIncDocuments;

        while select fiscalDocument
        join AccountingAmount, CFOP, LineNum, Quantity, Unit from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        exists join presumedIncDocuments
            where presumedIncDocuments.FiscalDocument_BR == fiscalDocument.RecId
                && presumedIncDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && presumedIncDocuments.ItemId == _itemId
                && presumedIncDocuments.IsReturn
        {
            FiscalDocumentLine_BR fiscalDocumentLineComplemented;
            select sum(AccountingAmount) from fiscalDocumentLineComplemented
                where fiscalDocumentLineComplemented.ItemId == _itemId
            exists join complementedDocumentsTmp
                where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLineComplemented.RecId
                    && complementedDocumentsTmp.RegularFiscalDocument_BR == fiscalDocument.RecId
                    && complementedDocumentsTmp.ItemId == _itemId;

            int typeOutputOperation = fiscalDocument.FinalUser ? 10 : 20;
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLine.Unit, _itemId);

            FBSpedRecord_BR spedRecord = this.newRecord('2113');                                        // REG - 1
            spedRecord.addFieldString('1');                                                             // IND_OPER - 2
            spedRecord.addFieldNumeric(typeOutputOperation);                                            // IND_S - 3
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);                                    // CHV_NFE - 4
            spedRecord.addFieldDate(fiscalDocument.FiscalDocumentDate);                                 // DT_NFE - 5
            spedRecord.addFieldDate(fiscalDocument.AccountingDate);                                     // DT_E - 6

            if (FBUtil_BR::isCNPJ(fiscalDocument.ThirdPartyCNPJCPF) && fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::FiscalEstablishment)
            {
                DirPartyBaseType accountDirPartyBaseType = this.getAccountDirPartyBaseType(fiscalDocument.FiscalDocumentAccountType, fiscalDocument.FiscalDocumentAccountNum);

                if (accountDirPartyBaseType == DirPartyBaseType::Organization)
                {
                    spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 14);  // CNPJ - 7
                    spedRecord.addFieldEmpty();                                                         // CPF - 8
                }
                else
                {
                    spedRecord.addFieldEmpty();                                                         // CNPJ - 7
                    spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 11);  // CPF - 8
                }
            }
            else
            {
                spedRecord.addFieldEmpty();                                                             // CNPJ - 7
                spedRecord.addFieldEmpty();                                                             // CPF - 8
            }

            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0);                                  // NUM_ITEM - 9
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity, 5);                              // QTDE_IND_S - 10
            spedRecord.addFieldString(fiscalDocumentLine.Unit, 6);                                      // UNID - 11
            spedRecord.addFieldNumericAbs(conversionFactor, 6);                                         // FAT_CONV - 12
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity * conversionFactor, 5);           // QTDE_IND_S_C - 13
            spedRecord.addFieldNumericAbs(                                                              // VL_V_IND_S - 14
                fiscalDocumentLine.AccountingAmount + fiscalDocumentLineComplemented.AccountingAmount, 2);
            spedRecord.addFieldString(this.keepNumbers(fiscalDocumentLine.CFOP), 4);                    // CFOP - 15
            spedRecord.addFieldNumeric(0, 2);                                                           // VL_CREDITO_MVA_SN - 16

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecord2114(spedRecord, fiscalDocument);
            this.createRecord2115(spedRecord, fiscalDocument.RecId, _itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2114</Name>
				<Source><![CDATA[
    private void createRecord2114(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FiscalDocumentReferenced_BR fiscalDocumentReferenced;
        FiscalDocument_BR           referencedFiscalDocument;

        select firstOnly AccessKey, FiscalDocumentDate, FiscalDocumentNumber from referencedFiscalDocument
        exists join fiscalDocumentReferenced
            where referencedFiscalDocument.RecId == fiscalDocumentReferenced.ReferencedFiscalDocument
                && fiscalDocumentReferenced.FiscalDocument == _fiscalDocument.RecId;

        FBSpedRecord_BR spedRecord = this.newRecord('2114');                                            // REG - 1

        if (FBUtil_BR::isCNPJ(_fiscalDocument.ThirdPartyCNPJCPF))
        {
            spedRecord.addFieldString(this.keepNumbers(_fiscalDocument.ThirdPartyCNPJCPF), 14);         // CNPJ - 2
            spedRecord.addFieldString(this.keepNumbers(_fiscalDocument.ThirdPartyCNPJCPF), 11);         // CPF - 3
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                 // CNPJ - 2
            spedRecord.addFieldEmpty();                                                                 // CPF - 3
        }

        spedRecord.addFieldString(referencedFiscalDocument.AccessKey, 44);                              // CHV_NFE_REF - 4
        spedRecord.addFieldEmpty();                                                                     // ECF_CX_REF - 5
        spedRecord.addFieldString(this.keepNumbers(referencedFiscalDocument.FiscalDocumentNumber), 9);  // NUM_DOC_REF - 6
        spedRecord.addFieldDate(referencedFiscalDocument.FiscalDocumentDate);                           // DT_DOC_REF - 7

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2115</Name>
				<Source><![CDATA[
    private void createRecord2115(FBSpedRecord_BR _parentRecord, RefRecId _fdRecId, ItemId _itemId)
    {
        FiscalDocument_BR       fiscalDocument;
        FiscalDocumentLine_BR   fiscalDocumentLine;

        while select AccessKey from fiscalDocument
        join LineNum from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                && fiscalDocumentLine.ItemId == _itemId
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocument_BR == fiscalDocument.RecId
                && complementedDocumentsTmp.RegularFiscalDocument_BR == _fdRecId
                && complementedDocumentsTmp.ItemId == _itemId
        {
            FBSpedRecord_BR spedRecord = this.newRecord('2115');        // REG
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);    // CHV_NFE_COMP
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0);  // NUM_ITEM_NFE_COMP

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2120</Name>
				<Source><![CDATA[
    private void createRecord2120(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        select firstOnly QuantityInc, QuantityIncReportedInR2121,
            TaxBaseAmountOtherICMSST, TaxAmountOtherICMS, TaxAmountOtherICMSST from collectedAmountsTmp
            where collectedAmountsTmp.ItemId == _itemId;

        if (collectedAmountsTmp.QuantityInc)
        {
            FBSpedRecord_BR spedRecord = this.newRecord('2120');                                                            // REG - 1
            spedRecord.addFieldNumeric(collectedAmountsTmp.QuantityInc, 5);                                                 // S_QTDE_C - 2
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxBaseAmountOtherICMSST, 2);                                    // S_VL_BCST_INT - 3
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxBaseAmountOtherICMSST / collectedAmountsTmp.QuantityInc, 3);  // VLM_UNIT_BCST - 4
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxAmountOtherICMS, 2);                                          // S_VL_ICMS - 5
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxAmountOtherICMS / collectedAmountsTmp.QuantityInc, 3);        // VLM_UNIT_ICMS - 6
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxAmountOtherICMSST, 2);                                        // S_VL_ICMS_ST - 7
            spedRecord.addFieldNumeric(collectedAmountsTmp.TaxAmountOtherICMSST / collectedAmountsTmp.QuantityInc, 3);      // VLM_UNIT_ICMS_ST - 8

            this.addChildRecord(_parentRecord, spedRecord);
        }

        if (collectedAmountsTmp.QuantityIncReportedInR2121)
        {
            this.createRecord2121(_parentRecord, _itemId);
        }

        this.createRecord2130(_parentRecord, _itemId); // + Records 2131 - 2134
        this.createRecord2130_returned(_parentRecord, _itemId); // + Records 2131 - 2134
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2121</Name>
				<Source><![CDATA[
    private void createRecord2121(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        select firstOnly collectedAmountsTmp
            where collectedAmountsTmp.ItemId == _itemId;

        Amount taxBaseAmountOtherICMSSTFull = collectedAmountsTmp.TaxBaseAmountOtherICMSST + collectedAmountsTmp.TaxBaseAmountOtherICMSSTReportedInR2121;

        FBSpedRecord_BR spedRecord = this.newRecord('2121');                                // REG - 1
        spedRecord.addFieldNumeric(collectedAmountsTmp.QuantityIncReportedInR2121, 5);      // S_QUANT_C_T - 2
        spedRecord.addFieldNumeric(collectedAmountsTmp.QuantityIncWithNonZeroTaxBase, 5);   // S_QUANT_C_T_VLM - 3
        spedRecord.addFieldNumeric(taxBaseAmountOtherICMSSTFull, 2);                        // S_VL_BCST_INT_VLM - 4
        spedRecord.addFieldNumeric(                                                         // VLM_UNIT_BCST_G - 5
            collectedAmountsTmp.QuantityIncWithNonZeroTaxBase 
            ? taxBaseAmountOtherICMSSTFull / collectedAmountsTmp.QuantityIncWithNonZeroTaxBase
            : 0, 3);

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2130</Name>
				<Source><![CDATA[
    private void createRecord2130(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FBBookingPeriodPresumedIncDocuments_BR  presumedIncDocuments;

        Amount  lineAmountComplemented,
                taxAmountOtherICMSComplemented,
                taxAmountOtherICMSSTComplemented,
                taxBaseAmountOtherICMSComplemented,
                taxBaseAmountOtherICMSSTComplemented;

        while select Quantity, TaxAmountICMSST, TaxBaseAmountICMSST, TaxRateICMSST, Unit from presumedIncDocuments
            where presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && presumedIncDocuments.ItemId == _itemId
                && !presumedIncDocuments.IsReturn
            join AccessKey, AccountingDate, FiscalDocumentDate, FiscalDocumentIssuer, RecId, ThirdPartyCNPJCPF from fiscalDocument
                where fiscalDocument.RecId == presumedIncDocuments.FiscalDocument_BR
            join CFOP, ICMSSTCollectionPaymentMode, ICMSSTCollectionPaymentNumber, LineAmount, LineNum,
                NfeVbcstretVicmsstretTagsReported, Quantity, RespWithholdingICMSST, Unit from fiscalDocumentLine
                where fiscalDocumentLine.RecId == presumedIncDocuments.FiscalDocumentLine_BR
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);

            FiscalDocumentLine_BR fiscalDocumentLineComplemented;
            while select LineAmount from fiscalDocumentLineComplemented
                where fiscalDocumentLineComplemented.ItemId == _itemId
            exists join complementedDocumentsTmp
                where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLineComplemented.RecId
                    && complementedDocumentsTmp.RegularFiscalDocument_BR == fiscalDocument.RecId
                    && complementedDocumentsTmp.ItemId == _itemId
            {
                lineAmountComplemented += fiscalDocumentLineComplemented.LineAmount;

                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransComplemented;
                fiscalDocumentTaxTransComplemented = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLineComplemented);
                taxAmountOtherICMSComplemented += fiscalDocumentTaxTransComplemented.TaxAmountOther;
                taxBaseAmountOtherICMSComplemented += fiscalDocumentTaxTransComplemented.TaxBaseAmountOther;

                fiscalDocumentTaxTransComplemented = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLineComplemented);
                taxAmountOtherICMSSTComplemented += fiscalDocumentTaxTransComplemented.TaxAmountOther;
                taxBaseAmountOtherICMSSTComplemented += fiscalDocumentTaxTransComplemented.TaxBaseAmountOther;
            }

            TaxBase taxBaseAmountICMSSTFull = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented;

            RespWithholdingICMSST_BR personResponsibleICMSST = this.getPersonResponsibleICMSST(
                fiscalDocumentLine.RespWithholdingICMSST,
                fiscalDocument.FiscalDocumentIssuer);

            TaxValue itemTaxValue = this.getItemTaxValueICMS(_itemId);
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLine.Unit, _itemId);
            Qty qtyInGlobalUnitOfMeasure = fiscalDocumentLine.Quantity * conversionFactor;

            FBSpedRecord_BR spedRecord = this.newRecord('2130');                                                        // REG - 1
            spedRecord.addFieldString('0');                                                                             // IND_OPER - 2
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);                                                    // CHV_NFE - 3
            spedRecord.addFieldDate(fiscalDocument.AccountingDate);                                                     // DT_E - 4
            spedRecord.addFieldDate(fiscalDocument.FiscalDocumentDate);                                                 // DT_NFE - 5
            spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 14);                          // CNPJ - 6
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum);                                                     // NUM_ITEM - 7
            spedRecord.addFieldNumeric(enum2int(personResponsibleICMSST));                                              // COD_RESP_RET - 8
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity, 5);                                              // QTDE - 9
            spedRecord.addFieldString(fiscalDocumentLine.Unit, 6);                                                      // UNID - 10
            spedRecord.addFieldNumeric(conversionFactor, 6);                                                            // FAT_CONV - 11
            spedRecord.addFieldNumericAbs(qtyInGlobalUnitOfMeasure, 5);                                                 // QTDE_C - 12
            spedRecord.addFieldNumericAbs(                                                                              // VL_E - 13
                fiscalDocumentLine.LineAmount + lineAmountComplemented, 2);
            spedRecord.addFieldString(this.keepNumbers(fiscalDocumentLine.CFOP), 4);                                    // CFOP - 14

            spedRecord.addFieldNumericAbs(                                                                              // VL_BC_ICMS - 15
                (fiscalDocumentTaxTransICMS.TaxBaseAmountOther + taxBaseAmountOtherICMSComplemented), 2);

            spedRecord.addFieldNumericAbs(fiscalDocumentTaxTransICMS.TaxValue, 2);                                      // ALIQ_ICMS - 16

            spedRecord.addFieldNumericAbs(                                                                              // VL_ICMS - 17
                (fiscalDocumentTaxTransICMS.TaxAmountOther + taxAmountOtherICMSComplemented), 2);

            spedRecord.addFieldNumericAbs(                                                                              // VL_BCST - 18
                (fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented), 2);

            spedRecord.addFieldNumericAbs(taxBaseAmountICMSSTFull, 2);                                                  // VL_BCST_INT - 19

            spedRecord.addFieldNumericAbs(fiscalDocumentTaxTransICMSST.TaxValue, 2);                                    // ALIQ_ST_E - 20

            spedRecord.addFieldNumericAbs(itemTaxValue, 2);                                                             // ALIQ_ST_EF - 21

            spedRecord.addFieldNumericAbs(                                                                              // CAL_ICMS_ST - 22
                (fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented) * itemTaxValue / 100, 3);

            spedRecord.addFieldNumericAbs(                                                                              // VL_ICMS_ST - 23
                (fiscalDocumentTaxTransICMSST.TaxAmountOther + TaxAmountOtherICMSSTComplemented), 2);

            switch (fiscalDocumentLine.ICMSSTCollectionPaymentMode)                                                     // COD_DA - 24
            {
                case ICMSSTCollectionPaymentMode_BR::StateDocumentOfCollection:
                    spedRecord.addFieldString('0');
                    break;

                case ICMSSTCollectionPaymentMode_BR::GNRE:
                    spedRecord.addFieldString('1');
                    break;

                default:
                    spedRecord.addFieldEmpty();
            }

            spedRecord.addFieldString(fiscalDocumentLine.ICMSSTCollectionPaymentNumber);                                // NUM_DARE - 25
            spedRecord.addFieldEmpty();                                                                                 // COD_AJ - 26

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecord2133(spedRecord, fiscalDocument.RecId, _itemId);

            if (this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                this.createRecord2134(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2130_returned</Name>
				<Source><![CDATA[
    private void createRecord2130_returned(FBSpedRecord_BR _parentRecord, ItemId _itemId)
    {
        FiscalDocument_BR           fiscalDocument;
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FBInventoryBalanceOutDocuments_BR invBalanceOutDocuments;

        Amount  lineAmountComplemented,
                taxAmountOtherICMSComplemented,
                taxAmountOtherICMSSTComplemented,
                taxBaseAmountOtherICMSComplemented,
                taxBaseAmountOtherICMSSTComplemented;

        while select fiscalDocument
            join CFOP, ICMSSTCollectionPaymentMode, ICMSSTCollectionPaymentNumber, LineAmount, LineNum,
                NfeVbcstretVicmsstretTagsReported, Quantity, RespWithholdingICMSST, Unit from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            exists join invBalanceOutDocuments
                where invBalanceOutDocuments.FiscalDocument_BR == fiscalDocument.RecId
                    && invBalanceOutDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                    && invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && invBalanceOutDocuments.ItemId == _itemId
                    && invBalanceOutDocuments.IsReturn
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);

            FiscalDocumentLine_BR fiscalDocumentLineComplemented;
            while select LineAmount from fiscalDocumentLineComplemented
                where fiscalDocumentLineComplemented.ItemId == _itemId
            exists join complementedDocumentsTmp
                where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLineComplemented.RecId
                    && complementedDocumentsTmp.RegularFiscalDocument_BR == fiscalDocument.RecId
                    && complementedDocumentsTmp.ItemId == _itemId
            {
                lineAmountComplemented += fiscalDocumentLineComplemented.LineAmount;

                FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransComplemented;
                fiscalDocumentTaxTransComplemented = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLineComplemented);
                taxAmountOtherICMSComplemented += fiscalDocumentTaxTransComplemented.TaxAmountOther;
                taxBaseAmountOtherICMSComplemented += fiscalDocumentTaxTransComplemented.TaxBaseAmountOther;

                fiscalDocumentTaxTransComplemented = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLineComplemented);
                taxAmountOtherICMSSTComplemented += fiscalDocumentTaxTransComplemented.TaxAmountOther;
                taxBaseAmountOtherICMSSTComplemented += fiscalDocumentTaxTransComplemented.TaxBaseAmountOther;
            }

            TaxBase taxBaseAmountICMSSTFull = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented;

            RespWithholdingICMSST_BR personResponsibleICMSST = this.getPersonResponsibleICMSST(
                fiscalDocumentLine.RespWithholdingICMSST,
                fiscalDocument.FiscalDocumentIssuer);

            Amount itemTaxValue = this.getItemTaxValueICMS(_itemId);
            UnitOfMeasureConversionFactor conversionFactor = this.getConversionFactor(fiscalDocumentLine.Unit, _itemId);
            Qty qtyInGlobalUnitOfMeasure = fiscalDocumentLine.Quantity * conversionFactor;

            FBSpedRecord_BR spedRecord = this.newRecord('2130');                                                        // REG - 1
            spedRecord.addFieldString('1');                                                                             // IND_OPER - 2
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);                                                    // CHV_NFE - 3
            spedRecord.addFieldDate(fiscalDocument.AccountingDate);                                                     // DT_E - 4
            spedRecord.addFieldDate(fiscalDocument.FiscalDocumentDate);                                                 // DT_NFE - 5
            spedRecord.addFieldString(this.keepNumbers(fiscalDocument.ThirdPartyCNPJCPF), 14);                          // CNPJ - 6
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum);                                                     // NUM_ITEM - 7
            spedRecord.addFieldNumeric(enum2int(personResponsibleICMSST));                                              // COD_RESP_RET - 8
            spedRecord.addFieldNumericAbs(fiscalDocumentLine.Quantity, 5);                                              // QTDE - 9
            spedRecord.addFieldString(fiscalDocumentLine.Unit, 6);                                                      // UNID - 10
            spedRecord.addFieldNumeric(conversionFactor, 6);                                                            // FAT_CONV - 11
            spedRecord.addFieldNumericAbs(qtyInGlobalUnitOfMeasure, 5);                                                 // QTDE_C - 12
            spedRecord.addFieldNumericAbs(                                                                              // VL_E - 13
                fiscalDocumentLine.LineAmount + lineAmountComplemented, 2);
            spedRecord.addFieldString(this.keepNumbers(fiscalDocumentLine.CFOP), 4);                                    // CFOP - 14

            spedRecord.addFieldNumericAbs(                                                                              // VL_BC_ICMS - 15
                (fiscalDocumentTaxTransICMS.TaxBaseAmountOther + taxBaseAmountOtherICMSComplemented), 2);

            spedRecord.addFieldNumericAbs(fiscalDocumentTaxTransICMS.TaxValue, 2);                                      // ALIQ_ICMS - 16

            spedRecord.addFieldNumericAbs(                                                                              // VL_ICMS - 17
                (fiscalDocumentTaxTransICMS.TaxAmountOther + taxAmountOtherICMSComplemented), 2);

            spedRecord.addFieldNumericAbs(                                                                              // VL_BCST - 18
                (fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented), 2);

            spedRecord.addFieldNumericAbs(taxBaseAmountICMSSTFull, 2);                                                  // VL_BCST_INT - 19

            spedRecord.addFieldNumericAbs(fiscalDocumentTaxTransICMSST.TaxValue, 2);                                    // ALIQ_ST_E - 20

            spedRecord.addFieldNumericAbs(itemTaxValue, 2);                                                             // ALIQ_ST_EF - 21

            spedRecord.addFieldNumericAbs(                                                                              // CAL_ICMS_ST - 22
                (fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented) * itemTaxValue / 100, 3);

            spedRecord.addFieldNumericAbs(                                                                              // VL_ICMS_ST - 23
                (fiscalDocumentTaxTransICMSST.TaxAmountOther + taxAmountOtherICMSSTComplemented), 2);

            switch (fiscalDocumentLine.ICMSSTCollectionPaymentMode)                                                     // COD_DA - 24
            {
                case ICMSSTCollectionPaymentMode_BR::StateDocumentOfCollection:
                    spedRecord.addFieldString('0');
                    break;

                case ICMSSTCollectionPaymentMode_BR::GNRE:
                    spedRecord.addFieldString('1');
                    break;

                default:
                    spedRecord.addFieldEmpty();
            }

            spedRecord.addFieldString(fiscalDocumentLine.ICMSSTCollectionPaymentNumber);                                // NUM_DARE - 25
            spedRecord.addFieldEmpty();                                                                                 // COD_AJ - 26

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecord2132(spedRecord, fiscalDocument);
            this.createRecord2133(spedRecord, fiscalDocument.RecId, _itemId);

            if (this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                this.createRecord2134(spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2132</Name>
				<Source><![CDATA[
    private void createRecord2132(FBSpedRecord_BR _parentRecord, FiscalDocument_BR _fiscalDocument)
    {
        FiscalDocumentReferenced_BR fiscalDocumentReferenced;
        FiscalDocument_BR           referencedFiscalDocument;

        select firstOnly AccessKey, AccountingDate from referencedFiscalDocument
        exists join fiscalDocumentReferenced
            where referencedFiscalDocument.RecId == fiscalDocumentReferenced.ReferencedFiscalDocument
                && fiscalDocumentReferenced.FiscalDocument == _fiscalDocument.RecId;

        FBSpedRecord_BR spedRecord = this.newRecord('2132');                                // REG

        spedRecord.addFieldString(this.keepNumbers(_fiscalDocument.ThirdPartyCNPJCPF), 14); // CNPJ
        spedRecord.addFieldString(referencedFiscalDocument.AccessKey, 44);                  // CHV_NFE_REF
        spedRecord.addFieldDate(referencedFiscalDocument.AccountingDate);                   // DT_E_REF

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2133</Name>
				<Source><![CDATA[
    private void createRecord2133(FBSpedRecord_BR _parentRecord, RefRecId _fdRecId, ItemId _itemId)
    {
        FiscalDocument_BR       fiscalDocument;
        FiscalDocumentLine_BR   fiscalDocumentLine;

        while select AccessKey from fiscalDocument
        join LineNum from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                && fiscalDocumentLine.ItemId == _itemId
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocument_BR == fiscalDocument.RecId
                && complementedDocumentsTmp.RegularFiscalDocument_BR == _fdRecId
                && complementedDocumentsTmp.ItemId == _itemId
        {
            FBSpedRecord_BR spedRecord = this.newRecord('2133');        // REG
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44);    // CHV_NFE_COMP
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0);  // NUM_ITEM_NFE_COMP

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2134</Name>
				<Source><![CDATA[
    private void createRecord2134(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord = this.newRecord('2134');    // REG
        spedRecord.addFieldNumeric(1, 0);                       // COD_IND_XML

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord2990</Name>
				<Source><![CDATA[
    private void createRecord2990()
    {
        FBSpedRecord_BR spedRecord = this.newRecord('2990');                // REG
        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('2') + 2);  // QTD_LIN_2

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9999</Name>
				<Source><![CDATA[
    protected void createRecord9999()
    {
        int64 totalRecord = spedFile.totalRecords() + (spedFile.blocks().elements() - 1); // '-1' for block H

        FBSpedRecord_BR spedRecord = this.newRecord('9999');    // REG
        spedRecord.addFieldNumeric(totalRecord);                // QTD_LIN

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountDirPartyBaseType</Name>
				<Source><![CDATA[
    private DirPartyBaseType getAccountDirPartyBaseType(CustVendType_BR _accountType, CustAccount _accountNum)
    {
        DirPartyBaseType accountDirPartyBaseType;

        if (_accountType == CustVendType_BR::Customer)
        {
            CustTable custTable = CustTable::find(_accountNum);
            accountDirPartyBaseType = DirPartyTable::findRec(custTable.Party).baseType();
        }
        else
        {
            VendTable vendTable = VendTable::find(_accountNum);
            accountDirPartyBaseType = DirPartyTable::findRec(vendTable.Party).baseType();
        }

        return accountDirPartyBaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConversionFactor</Name>
				<Source><![CDATA[
    private UnitOfMeasureConversionFactor getConversionFactor(UnitOfMeasureSymbol _unitOfMeasureSymbol, ItemId _itemId = '')
    {
        UnitOfMeasureConversionFactor conversionFactor;
        UnitOfMeasureSymbol toUnitOfMeasure = InventTable::find(_itemId).inventTableModuleInvent().UnitId;

        if (!_itemId || _unitOfMeasureSymbol == toUnitOfMeasure)
        {
            conversionFactor = 1;
        }
        else
        {
            conversionFactor = UnitOfMeasureConversion::findByConversion(
                UnitOfMeasure::findBySymbol(_unitOfMeasureSymbol).RecId,
                UnitOfMeasure::findBySymbol(toUnitOfMeasure).RecId)
                .Factor;
        }

        return conversionFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemTaxValueICMS</Name>
				<Source><![CDATA[
    private TaxValue getItemTaxValueICMS(ItemId _itemId)
    {
        return this.getItemTaxValue(InventTable::find(_itemId).inventTableModuleSales().TaxItemGroupId, TaxType_BR::ICMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmounts_Record2130</Name>
				<Source><![CDATA[
    private container getTaxAmounts_Record2130(
        ItemId _itemId,
        boolean _isCollectDataForR2121 = false,
        boolean _isConsiderICSMTax = true)
    {
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FBBookingPeriodPresumedIncDocuments_BR  presumedIncDocuments;
        FBInventoryBalanceOutDocuments_BR       invBalanceOutDocuments;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTransICMS,
                                                fiscalDocumentTaxTransICMSST;

        Amount  taxAmountOtherICMS,
                taxBaseAmountOtherICMSST,
                taxAmountOtherICMSST;

        // taxes from incoming fiscal document
        while select RecId from fiscalDocumentLine
        exists join presumedIncDocuments
            where presumedIncDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && presumedIncDocuments.ItemId == _itemId
                && !presumedIncDocuments.IsReturn
        {
            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                if (_isConsiderICSMTax)
                {
                    fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
                    taxAmountOtherICMS += abs(fiscalDocumentTaxTransICMS.TaxAmountOther);
                }

                fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);
                taxBaseAmountOtherICMSST += abs(fiscalDocumentTaxTransICMSST.TaxBaseAmountOther);
                taxAmountOtherICMSST += abs(fiscalDocumentTaxTransICMSST.TaxAmountOther);
            }
        }

        // taxes from returned fiscal document
        while select RecId from fiscalDocumentLine
        exists join invBalanceOutDocuments
            where invBalanceOutDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && invBalanceOutDocuments.IsReturn
        {
            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                if (_isConsiderICSMTax)
                {
                    fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
                    taxAmountOtherICMS -= abs(fiscalDocumentTaxTransICMS.TaxAmountOther);
                }

                fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);
                taxBaseAmountOtherICMSST -= abs(fiscalDocumentTaxTransICMSST.TaxBaseAmountOther);
                taxAmountOtherICMSST -= abs(fiscalDocumentTaxTransICMSST.TaxAmountOther);
            }
        }

        // taxes from complementary fiscal document
        while select RecId from fiscalDocumentLine
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && complementedDocumentsTmp.ItemId == _itemId
        exists join presumedIncDocuments
            where presumedIncDocuments.FiscalDocument_BR == complementedDocumentsTmp.RegularFiscalDocument_BR
                && presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && !presumedIncDocuments.IsReturn
        {
            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                if (_isConsiderICSMTax)
                {
                    fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
                    taxAmountOtherICMS += abs(fiscalDocumentTaxTransICMS.TaxAmountOther);
                }

                fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);
                taxBaseAmountOtherICMSST += abs(fiscalDocumentTaxTransICMSST.TaxBaseAmountOther);
                taxAmountOtherICMSST += abs(fiscalDocumentTaxTransICMSST.TaxAmountOther);
            }
        }

        // taxes from complementary returned fiscal document
        while select RecId from fiscalDocumentLine
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && complementedDocumentsTmp.ItemId == _itemId
        exists join invBalanceOutDocuments
            where invBalanceOutDocuments.FiscalDocument_BR == complementedDocumentsTmp.RegularFiscalDocument_BR
                && invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && invBalanceOutDocuments.IsReturn
        {
            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId))
            {
                if (_isConsiderICSMTax)
                {
                    fiscalDocumentTaxTransICMS = this.getFDTaxTrans(TaxType_BR::ICMS, fiscalDocumentLine);
                    taxAmountOtherICMS -= abs(fiscalDocumentTaxTransICMS.TaxAmountOther);
                }

                fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLine);
                taxBaseAmountOtherICMSST -= abs(fiscalDocumentTaxTransICMSST.TaxBaseAmountOther);
                taxAmountOtherICMSST -= abs(fiscalDocumentTaxTransICMSST.TaxAmountOther);
            }
        }

        return [ taxAmountOtherICMS, taxBaseAmountOtherICMSST, taxAmountOtherICMSST ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantity_Record2130</Name>
				<Source><![CDATA[
    private Qty getTotalQuantity_Record2130(
        ItemId _itemId,
        boolean _isCollectDataForR2121 = false,
        boolean _isCollectQuantityOfNonZeroTaxBase = false)
    {
        Qty qtyTotal;
        FiscalDocumentLine_BR fiscalDocumentLine;

        FBBookingPeriodPresumedIncDocuments_BR presumedIncDocuments;
        while select Quantity from presumedIncDocuments
            where presumedIncDocuments.ItemId == _itemId
                && presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && !presumedIncDocuments.IsReturn
            join RecId, FiscalDocument from fiscalDocumentLine
                where fiscalDocumentLine.RecId == presumedIncDocuments.FiscalDocumentLine_BR
        {
            TaxBase taxBaseAmountICMSSTFull = this.getTaxBaseAmountICMSSTFullPerLine(fiscalDocumentLine, _itemId);

            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId)
                || (_isCollectQuantityOfNonZeroTaxBase && taxBaseAmountICMSSTFull != 0))
            {
                qtyTotal += abs(presumedIncDocuments.Quantity);
            }
        }

        FBInventoryBalanceOutDocuments_BR invBalanceOutDocuments;
        while select Quantity from invBalanceOutDocuments
            where invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && invBalanceOutDocuments.IsReturn
            join RecId, FiscalDocument from fiscalDocumentLine
                where fiscalDocumentLine.RecId == invBalanceOutDocuments.FiscalDocumentLine_BR
        {
            TaxBase taxBaseAmountICMSSTFull = this.getTaxBaseAmountICMSSTFullPerLine(fiscalDocumentLine, _itemId);

            if (_isCollectDataForR2121 == this.isFiscalDocumentLineSuitableForR2121(fiscalDocumentLine.RecId)
                || (_isCollectQuantityOfNonZeroTaxBase && taxBaseAmountICMSSTFull != 0))
            {
                qtyTotal -= abs(invBalanceOutDocuments.Quantity);
            }
        }

        return qtyTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantityAndAmout_Record2113</Name>
				<Source><![CDATA[
    private container getTotalQuantityAndAmout_Record2113(ItemId _itemId, NoYes _isFinalUser)
    {
        FBBookingPeriodPresumedIncDocuments_BR  presumedIncDocuments;
        FBInventoryBalanceOutDocuments_BR       invBalanceOutDocuments;
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;

        Qty     quantity;
        Amount  accountingAmount;

        // outgoing fiscal document
        select sum(Quantity) from invBalanceOutDocuments
            where invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && !invBalanceOutDocuments.IsReturn
        join sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.RecId == invBalanceOutDocuments.FiscalDocumentLine_BR
        exists join fiscalDocument
            where fiscalDocument.RecId == invBalanceOutDocuments.FiscalDocument_BR
                && fiscalDocument.FinalUser == _isFinalUser;

        quantity = abs(invBalanceOutDocuments.Quantity);
        accountingAmount = abs(fiscalDocumentLine.AccountingAmount);

        // returned outgoing fiscal document
        select sum(Quantity) from presumedIncDocuments
            where presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && presumedIncDocuments.ItemId == _itemId
                && presumedIncDocuments.IsReturn
        join sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.RecId == presumedIncDocuments.FiscalDocumentLine_BR
        exists join fiscalDocument
            where fiscalDocument.RecId == presumedIncDocuments.FiscalDocument_BR
                && fiscalDocument.FinalUser == _isFinalUser;

        quantity -= abs(presumedIncDocuments.Quantity);
        accountingAmount -= abs(fiscalDocumentLine.AccountingAmount);

        // complementary outgoing fiscal document
        select sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.ItemId == _itemId
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
        exists join invBalanceOutDocuments
            where invBalanceOutDocuments.FiscalDocument_BR == complementedDocumentsTmp.RegularFiscalDocument_BR
                && invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && invBalanceOutDocuments.ItemId == _itemId
                && !invBalanceOutDocuments.IsReturn
        exists join fiscalDocument
            where fiscalDocument.RecId == complementedDocumentsTmp.FiscalDocument_BR
                && fiscalDocument.FinalUser == _isFinalUser;

        accountingAmount += abs(fiscalDocumentLine.AccountingAmount);

        // complementary returned fiscal document
        select sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.ItemId == _itemId
        exists join complementedDocumentsTmp
            where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
        exists join presumedIncDocuments
            where presumedIncDocuments.FiscalDocument_BR == complementedDocumentsTmp.RegularFiscalDocument_BR
                && presumedIncDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && presumedIncDocuments.ItemId == _itemId
                && presumedIncDocuments.IsReturn
        exists join fiscalDocument
            where fiscalDocument.RecId == complementedDocumentsTmp.FiscalDocument_BR
                && fiscalDocument.FinalUser == _isFinalUser;

        accountingAmount -= abs(fiscalDocumentLine.AccountingAmount);

        return [ quantity, accountingAmount ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDTaxTrans</Name>
				<Source><![CDATA[
    private FiscalDocumentTaxTrans_BR getFDTaxTrans(TaxType_BR _taxType, FiscalDocumentLine_BR _fdLine)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        select avg(TaxValue), sum(TaxAmountOther), sum(TaxBaseAmountOther) from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == _fdLine.RecId
                && fiscalDocumentTaxTrans.Type == _taxType
                && fiscalDocumentTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode60;

        return fiscalDocumentTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTaxBaseAmountPerUnitOutFinalUser</Name>
				<Source><![CDATA[
    private Amount getAverageTaxBaseAmountPerUnitOutFinalUser(FBSpedDRCSTCollectedAmountsTmp_BR _collectedAmountsTmp)
    {
        Amount taxBaseAmountICMSSTFull = _collectedAmountsTmp.TaxBaseAmountOtherICMSST + _collectedAmountsTmp.TaxBaseAmountOtherICMSSTReportedInR2121;

        Amount taxBaseAmountICMSSTFullPerUnitIncWithNonZeroTaxBase = _collectedAmountsTmp.QuantityIncWithNonZeroTaxBase
            ? taxBaseAmountICMSSTFull / _collectedAmountsTmp.QuantityIncWithNonZeroTaxBase
            : 0;

        Amount diffTaxAmountICMSSTFullBetweenUnitOutInc =
            _collectedAmountsTmp.QuantityOutFinalUser * taxBaseAmountICMSSTFullPerUnitIncWithNonZeroTaxBase
            - _collectedAmountsTmp.AccountingAmountOutFinalUser;

        Amount averageTaxBaseAmountPerUnitOutFinalUser;
        if (diffTaxAmountICMSSTFullBetweenUnitOutInc >= 0)
        {
            averageTaxBaseAmountPerUnitOutFinalUser = _collectedAmountsTmp.QuantityOutFinalUser * taxBaseAmountICMSSTFullPerUnitIncWithNonZeroTaxBase;
        }
        else
        {
            Amount taxBaseAmountICMSSTFullPerUnitInc = _collectedAmountsTmp.QuantityInc
                ? _collectedAmountsTmp.TaxBaseAmountOtherICMSST / _collectedAmountsTmp.QuantityInc
                : 0;

            averageTaxBaseAmountPerUnitOutFinalUser = _collectedAmountsTmp.QuantityOutFinalUser * taxBaseAmountICMSSTFullPerUnitInc;
        }

        return averageTaxBaseAmountPerUnitOutFinalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmountICMSSTFullPerLine</Name>
				<Source><![CDATA[
    private Amount getTaxBaseAmountICMSSTFullPerLine(FiscalDocumentLine_BR _fiscalDocumentLine, ItemId _itemId)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = this.getFDTaxTrans(TaxType_BR::ICMSST, _fiscalDocumentLine);
        FiscalDocument_BR fiscalDocument = FiscalDocument_BR::find(_fiscalDocumentLine.FiscalDocument);

        Amount taxBaseAmountOtherICMSSTComplemented = 0;
        FiscalDocumentLine_BR fiscalDocumentLineComplemented;

        while select RecId from fiscalDocumentLineComplemented
            where fiscalDocumentLineComplemented.ItemId == _itemId
            exists join complementedDocumentsTmp
                where complementedDocumentsTmp.FiscalDocumentLine_BR == fiscalDocumentLineComplemented.RecId
                    && complementedDocumentsTmp.RegularFiscalDocument_BR == fiscalDocument.RecId
                    && complementedDocumentsTmp.ItemId == _itemId
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransComplemented = this.getFDTaxTrans(TaxType_BR::ICMSST, fiscalDocumentLineComplemented);
            taxBaseAmountOtherICMSSTComplemented += fiscalDocumentTaxTransComplemented.TaxBaseAmountOther;
        }

        return fiscalDocumentTaxTransICMSST.TaxBaseAmountOther + taxBaseAmountOtherICMSSTComplemented;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonResponsibleICMSST</Name>
				<Source><![CDATA[
    private RespWithholdingICMSST_BR getPersonResponsibleICMSST(
        RespWithholdingICMSST_BR _respWithholdingICMSST,
        FiscalDocumentIssuer_BR _fiscalDocumentIssuer)
    {
        RespWithholdingICMSST_BR personResponsibleICMSST;

        if (_respWithholdingICMSST == RespWithholdingICMSST_BR::Blank)
        {
            if (_fiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty)
            {
                personResponsibleICMSST = RespWithholdingICMSST_BR::Direct;
            }
            else
            {
                personResponsibleICMSST = RespWithholdingICMSST_BR::OwnDeclarant;
            }
        }
        else
        {
            personResponsibleICMSST = _respWithholdingICMSST;
        }

        return personResponsibleICMSST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSpedFileUnitOfMeasure</Name>
				<Source><![CDATA[
    private void populateSpedFileUnitOfMeasure()
    {
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FBBookingPeriodPresumedIncDocuments_BR  incDocuments;
        FBInventoryBalanceOutDocuments_BR       outDocuments;

        while select ItemId, Unit from fiscalDocumentLine
        outer join RecId from incDocuments
            where incDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && incDocuments.ItemId == fiscalDocumentLine.ItemId
                && incDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
        outer join RecId from outDocuments
            where outDocuments.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && outDocuments.ItemId == fiscalDocumentLine.ItemId
                && outDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            if (incDocuments.RecId || outDocuments.RecId)
            {
                if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(
                    spedFileUnitOfMeasure,
                    fiscalEstablishment.RecId,
                    fiscalDocumentLine.ItemId,
                    fiscalDocumentLine.Unit))
                {
                    spedFileUnitOfMeasure.insertFromItemIdAndSymbol(
                        spedFileUnitSymbol,
                        fiscalEstablishment.RecId,
                        fiscalDocumentLine.ItemId,
                        fiscalDocumentLine.Unit);
                }

                InventTable inventTable = InventTable::find(fiscalDocumentLine.ItemId);
                if (!FBSpedFileUnitOfMeasureTmp_BR::existsForItemIdAndSymbol(
                    spedFileUnitOfMeasure,
                    fiscalEstablishment.RecId,
                    inventTable.ItemId,
                    inventTable.inventTableModuleInvent().UnitId))
                {
                    spedFileUnitOfMeasure.insertFromItemIdAndSymbol(
                        spedFileUnitSymbol,
                        fiscalEstablishment.RecId,
                        inventTable.ItemId,
                        inventTable.inventTableModuleInvent().UnitId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFiscalDocumentsAmounts</Name>
				<Source><![CDATA[
    private void populateFiscalDocumentsAmounts()
    {
        Amount  accountingAmountFinalUser,
                accountingAmountOtherStates,
                taxAmountOtherICMSPurch,
                taxAmountOtherICMSPurchForR2121,
                taxBaseAmountOtherICMSSTPurch,
                taxBaseAmountOtherICMSSTPurchForR2121,
                taxAmountOtherICMSSTPurch,
                taxAmountOtherICMSSTPurchForR2121;

        Qty     quantityFinalUser,
                quantityOtherStates;

        const boolean isCollectDataForR2121 = true;
        const boolean isConsiderICSMTax = true;
        const boolean isCollectQuantityOfNonZeroTaxBase = true;

        ttsBegin;

        FBInventoryBalanceOutDocuments_BR invBalanceOutDocuments;
        while select ItemId, sum(Quantity) from invBalanceOutDocuments
            group by invBalanceOutDocuments.ItemId
            where invBalanceOutDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            if (invBalanceOutDocuments.Quantity >= 0)
            {
                [ quantityFinalUser, accountingAmountFinalUser ] = this.getTotalQuantityAndAmout_Record2113(invBalanceOutDocuments.ItemId, NoYes::Yes);
                [ quantityOtherStates, accountingAmountOtherStates ] = this.getTotalQuantityAndAmout_Record2113(invBalanceOutDocuments.ItemId, NoYes::No);

                [ taxAmountOtherICMSPurch, taxBaseAmountOtherICMSSTPurch, taxAmountOtherICMSSTPurch ] = this.getTaxAmounts_Record2130(
                    invBalanceOutDocuments.ItemId,
                    !isCollectDataForR2121,
                    isConsiderICSMTax);

                [ taxAmountOtherICMSPurchForR2121, taxBaseAmountOtherICMSSTPurchForR2121, taxAmountOtherICMSSTPurchForR2121 ] = this.getTaxAmounts_Record2130(
                    invBalanceOutDocuments.ItemId,
                    isCollectDataForR2121,
                    !isConsiderICSMTax);

                Qty quantityPurch = this.getTotalQuantity_Record2130(
                    invBalanceOutDocuments.ItemId,
                    !isCollectDataForR2121,
                    !isCollectQuantityOfNonZeroTaxBase);

                Qty quantityPurchForR2121 = this.getTotalQuantity_Record2130(
                    invBalanceOutDocuments.ItemId,
                    isCollectDataForR2121,
                    !isCollectQuantityOfNonZeroTaxBase);

                Qty quantityPurchWithNonZeroTaxBase = this.getTotalQuantity_Record2130(
                    invBalanceOutDocuments.ItemId,
                    isCollectDataForR2121,
                    isCollectQuantityOfNonZeroTaxBase);

                collectedAmountsTmp.clear();
                collectedAmountsTmp.ItemId = invBalanceOutDocuments.ItemId;
                collectedAmountsTmp.QuantityInc = quantityPurch;
                collectedAmountsTmp.QuantityOutFinalUser = quantityFinalUser;
                collectedAmountsTmp.QuantityOutNonFinalUser = quantityOtherStates;
                collectedAmountsTmp.AccountingAmountOutFinalUser = accountingAmountFinalUser;
                collectedAmountsTmp.AccountingAmountOutNonFinalUser = accountingAmountOtherStates;
                collectedAmountsTmp.TaxAmountOtherICMS = taxAmountOtherICMSPurch;
                collectedAmountsTmp.TaxBaseAmountOtherICMSST = taxBaseAmountOtherICMSSTPurch;
                collectedAmountsTmp.TaxAmountOtherICMSST = taxAmountOtherICMSSTPurch;
                collectedAmountsTmp.QuantityIncReportedInR2121 = quantityPurchForR2121;
                collectedAmountsTmp.TaxBaseAmountOtherICMSSTReportedInR2121 = taxBaseAmountOtherICMSSTPurchForR2121;
                collectedAmountsTmp.QuantityIncWithNonZeroTaxBase = quantityPurchWithNonZeroTaxBase;
                collectedAmountsTmp.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateComplementedFiscalDocument</Name>
				<Source><![CDATA[
    private void populateComplementedFiscalDocument()
    {
        FiscalDocument_BR           fiscalDocumentComplemented;
        FiscalDocumentLine_BR       fiscalDocumentLineComplemented;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTransComplemented;
        FBInventoryBalanceOutDocuments_BR       outDocuments;
        FBBookingPeriodPresumedIncDocuments_BR  incDocuments;

        ttsBegin;

        while select ComplementedFiscalDocument from fiscalDocumentComplemented
            where (fiscalDocumentComplemented.Model == FiscalBooksConstants_BR::FiscalDocModel_55
                || fiscalDocumentComplemented.Model == FiscalBooksConstants_BR::FiscalDocModel_65)
        join ItemId from fiscalDocumentLineComplemented
            where fiscalDocumentLineComplemented.FiscalDocument == fiscalDocumentComplemented.RecId
                && (fiscalDocumentComplemented.Direction == FiscalDocDirection_BR::Incoming
                    || (fiscalDocumentComplemented.FinalUser || (!fiscalDocumentComplemented.FinalUser && !(fiscalDocumentLineComplemented.CFOP LIKE '5*'))))
        outer join RecId from incDocuments
            where incDocuments.FiscalDocument_BR == fiscalDocumentComplemented.ComplementedFiscalDocument
                && incDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && incDocuments.ItemId == fiscalDocumentLineComplemented.ItemId
        outer join RecId from outDocuments
            where outDocuments.FiscalDocument_BR == fiscalDocumentComplemented.ComplementedFiscalDocument
                && outDocuments.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && outDocuments.ItemId == fiscalDocumentLineComplemented.ItemId
        exists join fiscalDocumentTaxTransComplemented
            where fiscalDocumentTaxTransComplemented.FiscalDocumentLine == fiscalDocumentLineComplemented.RecId
                && (fiscalDocumentTaxTransComplemented.Type == TaxType_BR::ICMS || fiscalDocumentTaxTransComplemented.Type == TaxType_BR::ICMSST)
            && fiscalDocumentTaxTransComplemented.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
        {
            if (incDocuments.RecId || outDocuments.RecId)
            {
                complementedDocumentsTmp.clear();
                complementedDocumentsTmp.ItemId = fiscalDocumentLineComplemented.ItemId;
                complementedDocumentsTmp.RegularFiscalDocument_BR = fiscalDocumentComplemented.ComplementedFiscalDocument;
                complementedDocumentsTmp.FiscalDocument_BR = fiscalDocumentComplemented.RecId;
                complementedDocumentsTmp.FiscalDocumentLine_BR = fiscalDocumentLineComplemented.RecId;
                complementedDocumentsTmp.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalDocumentLineSuitableForR2121</Name>
				<Source><![CDATA[
    private boolean isFiscalDocumentLineSuitableForR2121(RefRecId _fiscalDocumentLineRecId)
    {
        FiscalDocumentLine_BR fiscalDocumentLine;
        select firstonly RecId from fiscalDocumentLine
            where fiscalDocumentLine.RecId == _fiscalDocumentLineRecId
                && fiscalDocumentLine.RespWithholdingICMSST == RespWithholdingICMSST_BR::Indirect
                && !fiscalDocumentLine.NfeVbcstretVicmsstretTagsReported;

        return fiscalDocumentLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FBBookingPeriod_BR _fbBookingPeriod, FBFile_BR _file, FBSPEDFileType_BR _spedFileType)
    {
        fbBookingPeriod = _fbBookingPeriod;
        fbFile          = _file;
        spedFileType    = _spedFileType;
        spedFile        = new FBSpedFile_BR();

        super();

        parameters = FBSpedDRCSTSetupParameters_BR::findByFiscalEstablishmentId(_fbBookingPeriod.FiscalEstablishmentId, _fbBookingPeriod.FiscalEstablishmentDataArea);
        fiscalEstablishment = _fbBookingPeriod.fiscalEstablishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>FBSpedFileCreator_DRCST_BR</c>.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// The booking period to be used by the class in order to determine which data should be selected to be exported to the file.
    /// </param>
    /// <param name="_fbFile">
    /// An instance of <c>FBFile_BR</c> representing the disk file where the data should be written to.
    /// </param>
    /// <param name="_spedFileType">
    /// A <c>FBSPEDFileType_BR</c> enum element.
    /// </param>
    /// <returns>
    /// The new instance of <c>FBSpedFileCreator_DRCST_BR</c>.
    /// </returns>
    public static FBSpedFileCreator_DRCST_BR construct(FBBookingPeriod_BR _fbBookingPeriod, FBFile_BR _fbFile, FBSPEDFileType_BR _spedFileType)
    {
        return new FBSpedFileCreator_DRCST_BR(_fbBookingPeriod, _fbFile, _spedFileType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>