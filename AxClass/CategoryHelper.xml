<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CategoryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CategoryHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBaseCategoryExpense</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(TrvCostType), delegatestr(TrvCostType, createBaseCategoryExpense))]
    public static void createBaseCategoryExpense(CategoryId _categoryId, CategoryName _name)
    {
        CategoryHelper::createBaseCategory(_categoryId, _name, CategoryModule::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// When a new category is created in a consuming module, create the needed record in
    /// <c>CategoryTable</c>, or update the existing record to reflect the new modules consumption.
    /// </summary>
    /// <param name = "_categoryId">Category Id being created in the consuming module</param>
    /// <param name = "_name">Category name</param>
    /// <param name = "_module">The module creating the category</param>
    /// <returns></returns>
    public static CategoryTable createBaseCategory(CategoryId _categoryId, CategoryName _name, CategoryModule _module)
    {
        CategoryTable       categoryTable = null;

        ttsbegin;

        if (!CategoryTable::find(_categoryId))
        {
            categoryTable.CategoryId = _categoryId;
            categoryTable.CategoryName = _name;
            switch (_module)
            {
                case CategoryModule::Project:
                    categoryTable.UseInProject = NoYes::Yes;
                    break;
                case CategoryModule::Expense:
                    categoryTable.UseInExpense = NoYes::Yes;
                    break;
                case CategoryModule::Production:
                    categoryTable.UseInProduction = NoYes::Yes;
                    break;
            }

            categoryTable.insert();
        }

        ttscommit;

        return categoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBaseCategoryExpense</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(TrvCostType), delegatestr(TrvCostType, deleteBaseCategoryExpense))]
    public static void deleteBaseCategoryExpense(CategoryId _categoryId)
    {
        CategoryHelper::deleteBaseCategory(_categoryId, CategoryModule::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBaseCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// When a category is deleted from one of the consuming modules, check to see \
    /// if it is still in use and delete the <c>CategoryTable</c> record if it is no
    /// longer needed. If still used, update the record to reflect it is no longer used
    /// by the consuming module where it is being deleted.
    /// </summary>
    /// <param name = "_categoryId">CategoryId of the record being deleted</param>
    /// <param name = "_module">The module from which the category is being deleted</param>
    public static void deleteBaseCategory(CategoryId _categoryId, CategoryModule _module)
    {
        CategoryTable       categoryTable = null;

        categoryTable = CategoryTable::find(_categoryId, true);

        if (!categoryTable)
            return;

        ttsbegin;

        switch (_module)
        {
            case CategoryModule::Project:
                if (categoryTable.UseInProject == NoYes::Yes)
                {
                    if (categoryTable.UseInExpense || categoryTable.UseInProduction)
                    {
                        categoryTable.UseInProject = NoYes::No;
                        categoryTable.update(false);
                    }
                    else
                    {
                        categoryTable.delete(false);
                    }
                }
                break;
            case CategoryModule::Expense:
                if (categoryTable && categoryTable.UseInExpense == NoYes::Yes)
                {
                    if (categoryTable.UseInProject || categoryTable.UseInProduction)
                    {
                        categoryTable.UseInExpense = NoYes::No;
                        categoryTable.update(false);
                    }
                    else
                    {
                        categoryTable.delete(false);
                    }
                }
                break;
            case CategoryModule::Production:
                if (categoryTable.UseInProduction == NoYes::Yes)
                {
                    if (categoryTable.UseInExpense || categoryTable.UseInProject)
                    {
                        categoryTable.UseInProduction = NoYes::No;
                        categoryTable.update(false);
                    }
                    else
                    {
                        categoryTable.delete(false);
                    }
                }
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameCategoryId</Name>
				<Source><![CDATA[
    private static void renameCategoryId(
        CategoryId      _oldCategoryId,
        CategoryId      _newCategoryId,
        CategoryModule  _module)
    {
        ProjCategory        projCategory;
        TrvCostType         trvCostType;
        RouteCostCategory   routeCostCategory;

        ttsbegin;

        switch (_module)
        {
            case CategoryModule::Project:
                projCategory = ProjCategory::find(_oldCategoryId);
                if (projCategory.RecId != 0)
                {
                    projCategory.CategoryId = _newCategoryId;
                    projCategory.renamePrimaryKey();
                }
                break;
            case CategoryModule::Expense:
                trvCostType = TrvCostType::find(_oldCategoryId);
                if (trvCostType.RecId != 0)
                {
                    trvCostType.CostType = _newCategoryId;
                    trvCostType.renamePrimaryKey();
                }
                break;

            case CategoryModule::Production:
                routeCostCategory = RouteCostCategory::find(_oldCategoryId);
                if (routeCostCategory.RecId != 0)
                {
                    routeCostCategory.CostCategoryId = _newCategoryId;
                    routeCostCategory.renamePrimaryKey();
                }
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeChildCategoryId</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(CategoryTable), delegatestr(CategoryTable, changeChildCategoryId))]
    static void changeChildCategoryId(CategoryTable _categoryTable, CategoryId _oldCategoryId, CategoryId _newCategoryId)
    {
        if (_categoryTable.UseInProject)
        {
            CategoryHelper::renameCategoryId(_oldCategoryId, _newCategoryId, CategoryModule::Project);
        }

        if (_categoryTable.UseInExpense)
        {
            CategoryHelper::renameCategoryId(_oldCategoryId, _newCategoryId, CategoryModule::Expense);
        }

        if (_categoryTable.UseInProduction)
        {
            CategoryHelper::renameCategoryId(_oldCategoryId, _newCategoryId, CategoryModule::Production);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteChildCategory</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(CategoryTable), delegatestr(CategoryTable, deleteChildCategory))]
    public static void deleteChildCategory(CategoryTable _categoryTable)
    {
        if (_categoryTable.UseInProject)
        {
            ProjCategory projCategory = ProjCategory::find(_categoryTable.CategoryId, true);
            projCategory.delete(false);
        }

        if (_categoryTable.UseInExpense)
        {
            TrvCostType trvCostType = TrvCostType::find(_categoryTable.CategoryId, true);
            trvCostType.delete(false);
        }

        if (_categoryTable.UseInProduction)
        {
            RouteCostCategory routeCostCategory = RouteCostCategory::find(_categoryTable.CategoryId, true);
            routeCostCategory.delete(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CategoryTable_onInitializingRecord</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CategoryTable), DataEventType::InitializingRecord)]
    public static void CategoryTable_onInitializingRecord(Common _sender, DataEventArgs _e)
    {
        CategoryTable categoryTable = _sender as CategoryTable;
        categoryTable.UseInProject = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CategoryTable_onValidatingDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CategoryTable), DataEventType::ValidatingDelete)]
    public static void CategoryTable_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        CategoryTable categoryTable = _sender as CategoryTable;
        ValidateEventArgs validateEventArgs = _e as ValidateEventArgs;
        boolean ret = true;

        if (categoryTable.UseInProject)
        {
            ProjCategory projCategory = ProjCategory::find(categoryTable.CategoryId);
            ret = projCategory.validateDelete();
        }

        if (ret && categoryTable.UseInExpense)
        {
            TrvCostType trvCostType = TrvCostType::find(categoryTable.CategoryId);
            ret = trvCostType.validateDelete();
        }

        if (ret && categoryTable.UseInProduction)
        {
            RouteCostCategory routeCostCategory = RouteCostCategory::find(categoryTable.CategoryId, true);
            ret = routeCostCategory.validateDelete();
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CategoryTable_onValidatingField</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CategoryTable), DataEventType::ValidatingField)]
    public static void CategoryTable_onValidatingField(Common _sender, DataEventArgs _e)
    {
        ValidateFieldEventArgs validateFieldEventArgs = _e as ValidateFieldEventArgs;
        CategoryTable categoryTable = _sender as CategoryTable;

        boolean ret = true;

        switch (validateFieldEventArgs.parmFieldId())
        {
            case fieldNum(CategoryTable, UseInExpense):
                ret = ret && CategoryTable_Extension::checkNotBothExpenseAndProduction(categoryTable);
                ret = ret && CategoryTable_Extension::checkGlobalUsage(categoryTable);
                break;
            case fieldNum(CategoryTable, UseInProduction):
                ret = ret && CategoryTable_Extension::checkNotBothExpenseAndProduction(categoryTable);
                ret = ret && CategoryTable_Extension::checkGlobalUsage(categoryTable);
                break;
            case fieldNum(CategoryTable, UseInProject):
                ret = ret && CategoryTable_Extension::checkGlobalUsage(categoryTable);
                break;
        }

        if (!ret)
        {
            validateFieldEventArgs.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryNameBase</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(CategoryTable), delegatestr(CategoryTable, updateCategoryNameBase))]
    public static void updateCategoryNameBase(CategoryId _categoryId, CategoryName _name)
    {
        CategoryHelper::updateCategoryName(_categoryId, _name, CategoryModule::Base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryNameExpense</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(TrvCostType), delegatestr(TrvCostType, updateCategoryNameExpense))]
    public static void updateCategoryNameExpense(CategoryId _categoryId, CategoryName _name)
    {
        CategoryHelper::updateCategoryName(_categoryId, _name, CategoryModule::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryName</Name>
				<Source><![CDATA[
    //[SubscribesTo(tablestr(CategoryTable), delegatestr(CategoryTable, updateCategoryName))]
    public static void updateCategoryName(CategoryId _categoryId, CategoryName _name, CategoryModule _module)
    {
        CategoryTable   categoryTable;
        TrvCostType     trvCostType;
        ProjCategory    projCategory;

        categoryTable = CategoryTable::find(_categoryId);

        if (!categoryTable)
            return;

        ttsbegin;

        switch (_module)
        {
            case CategoryModule::Project:
                if (categoryTable.UseInProject)
                {
                    if (categoryTable.UseInExpense)
                    {
                        trvCostType = TrvCostType::find(_categoryId, true);
                        if (trvCostType)
                        {
                            trvCostType.CostTxt = _name;
                            trvCostType.update(false);
                        }
                    }
                    categoryTable.selectForUpdate(true);
                    categoryTable.CategoryName = _name;
                    categoryTable.doUpdate();
                }
                break;
            case CategoryModule::Expense:
                if (categoryTable.UseInExpense)
                {
                    if (categoryTable.UseInProject)
                    {
                        projCategory = ProjCategory::find(_categoryId, true);
                        if (projCategory)
                        {
                            projCategory.Name = _name;
                            projCategory.update(false);
                        }
                    }
                    categoryTable.selectForUpdate(true);
                    categoryTable.CategoryName = _name;
                    categoryTable.doUpdate();
                }
                break;
            case CategoryModule::Base:
                if (categoryTable.UseInProject)
                {
                    projCategory = ProjCategory::find(_categoryId, true);
                    if (projCategory)
                    {
                        projCategory.Name = _name;
                        projCategory.update(false);
                    }
                }
                if (categoryTable.UseInExpense)
                {
                    trvCostType = TrvCostType::find(_categoryId, true);
                    if (trvCostType)
                    {
                        trvCostType.CostTxt = _name;
                        trvCostType.update(false);
                    }
                }
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUsage</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(CategoryTable), delegatestr(CategoryTable, resetUsage))]
    public static void resetUsage(CategoryTable _categoryTable)
    {
        SharedCategory sharedCategory = SharedCategory::findRecId(_categoryTable.SharedCategory);

        _categoryTable.UseInExpense = sharedCategory.canBeUsedInExpense(false,NoYes::No);
        _categoryTable.UseInProduction = sharedCategory.canBeUsedInProduction(false,NoYes::No);
        _categoryTable.UseInProject = sharedCategory.canBeUsedInProject(false,NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryTaxItemGroupExpense</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(TrvCostType), delegatestr(TrvCostType, updateCategoryTaxItemGroupExpense))]
    public static void updateCategoryTaxItemGroupExpense(CategoryId _categoryId, SysGroup _taxItemGroup)
    {
        CategoryHelper::updateTaxItemGroupId(_categoryId, _taxItemGroup, CategoryModule::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxItemGroupId</Name>
				<Source><![CDATA[
    public static void updateTaxItemGroupId(CategoryId _categoryId, TaxItemGroup _taxItemGroup, CategoryModule _module)
    {
        CategoryTable   categoryTable;
        TrvCostType     trvCostType;
        ProjCategory    projCategory;

        categoryTable = CategoryTable::find(_categoryId);

        if (!categoryTable)
            return;

        ttsbegin;

        switch (_module)
        {
            case CategoryModule::Project:
                if ((categoryTable.UseInProject) && (categoryTable.UseInExpense))
                {
                    trvCostType = TrvCostType::find(_categoryId, true);

                    // only update expense category item sales tax group, if not already set
                    if (!trvCostType.TaxItemGroup)
                    {
                        trvCostType.TaxItemGroup = _taxItemGroup;
                        trvCostType.update(false);
                    }
                    
                }
                break;
            case CategoryModule::Expense:
                if ((categoryTable.UseInProject) && (categoryTable.UseInExpense))
                {
                    projCategory = ProjCategory::find(_categoryId, true);

                    // only update expense category item sales tax group, if not already set
                    if (!projCategory.TaxItemGroupId)
                    {
                        projCategory.TaxItemGroupId = _taxItemGroup;
                        projCategory.update(false);
                    }
                    
                }
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>