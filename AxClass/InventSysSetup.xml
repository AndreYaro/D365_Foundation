<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSysSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SysSetupTableAttribute(viewstr(CostStatementView)),
    SysSetupTableAttribute(tableStr(WHSInventReserve)),
    SysSetupTableAttribute(tableStr(InventSum)),
    SysSetupTableAttribute(viewstr(InventSiteOnHandAggregatedView)),
    SysSetupTableAttribute(viewstr(InventWarehouseOnHandAggregatedView)),
    SysSetupTableAttribute(viewstr(InventSiteOnHandIncludingCWItemAggregatedView)),
    SysSetupTableAttribute(viewstr(InventWarehouseOnHandIncludingCWItemAggregatedView)),
    SysSetupTableAttribute(tableStr(InventDim)),
    SysSetupConfigKeyAttribute(configurationKeyStr(LedgerBasic)),
    SysSetupConfigAttribute(false, 300, 0.0)
]
public final class InventSysSetup extends SysSetupAsync implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {        
        if (InventDim::isPhysicallyExistingInDB()
            && WHSInventReserve::isPhysicallyExistingInDB()
            && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            WHSOnHandSPHelper::syncDBStoredProcedures();
        }

        InventSiteOnHandAggregatedViewBuilder::buildView();
        InventWarehouseOnHandAggregatedViewBuilder::buildView();
        InventSiteOnHandIncludingCWItemAggregatedViewBuilder::buildView();
        InventWarehouseOnHandIncludingCWItemAggregatedViewBuilder::buildView();
        InventSumDBTriggerBuilder::buildTriggers();
        WHSInventReserveDBTriggerBuilder::buildTriggers();
        InventDimDBTriggerBuilder::buildTriggers();
        InventDimDBTriggerBuilderForWHSInventReserve::buildTriggers();
        InventDimUpdatePreventionTriggerBuilder::buildTriggers();

        CostStatementViewBuilder::buildCostStatementView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchGroupId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static BatchGroupId getBatchGroupId()
    {
        SysServerConfig     sysServerConfig;
        BatchServerConfig   batchServerConfig;
        BatchGroup          batchGroup;
        BatchServerGroup    batchServerGroup;

        select firstonly batchGroup
            order by batchGroup.Group asc
            exists join batchServerGroup
            where batchGroup.Group == batchServerGroup.GroupId
            exists join batchServerConfig
            where batchServerConfig.ServerId == batchServerGroup.ServerId
               && batchServerConfig.MaxBatchSessions > 0
            exists join sysServerConfig
            where sysServerConfig.ServerId == batchServerConfig.ServerId
               && sysServerConfig.EnableBatch == NoYes::Yes;

        return batchGroup.Group;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>