<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSlotDemandGenerateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class used to run the slotting process.
/// </summary>
internal final class WHSSlotDemandGenerateController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>slotOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the slotting logic depending on data from the data contract.
    /// </summary>
    /// <param name="_data">
    /// The <c>WHSSlotDemandGenerateContract</c> for the current run of the slotting process.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Invalid slot template.
    /// </exception>
    [Hookable(false)]
    internal void slotOperation(WHSSlotDemandGenerateContract _data)
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.demandSlottingActivities().slottingOperation(_data))
        {
            WHSSlotTemplate slotTemplate = WHSSlotTemplate::find(_data.parmSlotTemplateId());

            if (slotTemplate.RecId == 0)
            {
                throw error("@WAX:InvalidSlotTemplate");
            }

            if (_data.parmGenerateDemand())
            {
                ttsbegin;
                WHSSlotDemandGenerate::buildDemand(slotTemplate);

                if (_data.parmLocateDemand())
                {
                    WHSSlotDemandLocate::locateDemand(slotTemplate);

                    if (_data.parmCreateReplen())
                    {
                        WHSWorkCreateSlotReplenishment workCreate = WHSWorkCreateSlotReplenishment::newFromSlotTemplate(slotTemplate);
                        workCreate.runSlotReplenishment();
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSlotDemandGenerateController construct(Args _args)
    {
        SysOperationExecutionMode executionMode = _args.parmEnum();

        WHSSlotDemandGenerateController controller = new WHSSlotDemandGenerateController(classStr(WHSSlotDemandGenerateController),
                                                         methodStr(WHSSlotDemandGenerateController, slotOperation),
                                                         executionMode);

        controller.parmArgs(_args);
        controller.parmShowDialog(true);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void main(Args _args)
    {
        WHSSlotDemandGenerateController controller = WHSSlotDemandGenerateController::construct(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>