<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesQuotationTableType extends InventType implements SalesPurchIModifiedDefaulter
{
    SalesQuotationTable         salesQuotationTable;

    NumberSeqFormHandler        numberSeqFormHandlerQuotationId;

    boolean                     linesExist;
    boolean                     linesExistWasCalled;
    protected boolean           isIntegrationOwnerDynamics365Sales;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCancelledBeUpdated</Name>
				<Source><![CDATA[
    boolean canCancelledBeUpdated(DocumentStatus _documentStatus = DocumentStatus::Quotation , boolean _includeCreated = false)
    {
        boolean  ok = true;

        if (_documentStatus == DocumentStatus::Quotation ||
            _documentStatus == DocumentStatus::Confirmation)
        {
            ok = this.mayCancelledBeUpdated(_includeCreated);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean canConfirmationBeUpdated(DocumentStatus    _documentStatus = DocumentStatus::Confirmation)
    {
        boolean  ok = true;

        if (_documentStatus == DocumentStatus::Confirmation)
        {
            ok = this.mayConfirmationBeUpdated();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLostBeUpdated</Name>
				<Source><![CDATA[
    boolean canLostBeUpdated(DocumentStatus            _documentStatus = DocumentStatus::Quotation)
    {
        boolean  ok = true;

        if (_documentStatus == DocumentStatus::Quotation ||
            _documentStatus == DocumentStatus::Confirmation)
        {
            ok = this.mayLostBeUpdated();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be selected.
    /// </summary>
    /// <returns>
    /// true if the quotation can be selected; otherwise, false.
    /// </returns>
    public boolean canQuotationBeSelected()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeUpdated</Name>
				<Source><![CDATA[
    boolean canQuotationBeUpdated()
    {
        boolean ok = this.mayQuotationBeUpdated();

        if (ok)
        {
            ok = this.canConfirmationBeUpdated(DocumentStatus::Quotation);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be posted.
    /// </summary>
    /// <returns>true if the quotation can be posted; otherwise, false.</returns>
    public boolean canQuotationBePosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQuotationBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesQuotationTable</c> can be canceled.
    /// </summary>
    /// <returns>true if the quotation can be canceled; otherwise, false.</returns>
    public boolean canQuotationBeCanceled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete()
    {
        boolean ok = (!isIntegrationOwnerDynamics365Sales ||
            salesQuotationTable.IsIntegration == TradeIntegrationType::Dynamics365Sales) &&
            salesQuotationTable.QuotationStatus != SalesQuotationStatus::Sent;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the various updates are allowed for the quotation.
    /// </summary>
    /// <param name = "_packedSalesQuotationTableCheckIfUpdateContract">
    ///     Specifies which of the update allowance values for the quotation to get.
    /// </param>
    /// <returns>
    ///    A packed <c>SalesQuotationTableCanBeUpdatedContract</c> class with the values of whether the quotation can be updated to a given type.
    /// </returns>
    container checkIfUpdate(container _packedSalesQuotationTableCheckIfUpdateContract)
    {
        SalesQuotationTableCheckIfUpdateContract checkIfUpdateContract;
        SalesQuotationTableCanBeUpdatedContract  canBeUpdatedContract = SalesQuotationTableCanBeUpdatedContract::construct();

        if (_packedSalesQuotationTableCheckIfUpdateContract == conNull())
        {
            checkIfUpdateContract = SalesQuotationTableCheckIfUpdateContract::newCheckAll();
        }
        else
        {
            checkIfUpdateContract = SalesQuotationTableCheckIfUpdateContract::create(_packedSalesQuotationTableCheckIfUpdateContract);
        }

        if (checkIfUpdateContract.parmCheckQuotation())
        {
            canBeUpdatedContract.parmCanQuotationBeUpdated(this.canQuotationBeUpdated());
        }
        if (checkIfUpdateContract.parmCheckConfirmation())
        {
            canBeUpdatedContract.parmCanConfirmationBeUpdated(this.canConfirmationBeUpdated());
        }
        if (checkIfUpdateContract.parmCheckLost())
        {
            canBeUpdatedContract.parmCanLostBeUpdated(this.canLostBeUpdated());
        }
        if (checkIfUpdateContract.parmCheckCancelled())
        {
            canBeUpdatedContract.parmCanCancelledBeUpdated(this.canCancelledBeUpdated());
        }

        return canBeUpdatedContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    boolean checkUpdate(boolean  useWarning = true)
    {
        boolean     ok = (salesQuotationTable ? true : false);

        if (salesQuotationTable && ((!salesQuotationTable.isTemplate() &&
                                    salesQuotationTable.QuotationStatus != SalesQuotationStatus::Created) &&
                                    salesQuotationTable.QuotationStatus != SalesQuotationStatus::Sent &&
                                    salesQuotationTable.QuotationStatus != SalesQuotationStatus::Revised &&
                                    salesQuotationTable.QuotationStatus != SalesQuotationStatus::Modified) ||
                                   (isIntegrationOwnerDynamics365Sales
                                    && salesQuotationTable.IsIntegration != TradeIntegrationType::Dynamics365Sales
                                    && salesQuotationTable.QuotationStatus != SalesQuotationStatus::Created))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    public void formMethodClose()
    {
        if (numberSeqFormHandlerQuotationId)
        {
            numberSeqFormHandlerQuotationId.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreate</Name>
				<Source><![CDATA[
    public void formMethodDataSourceCreate(FormRun _element, FormDataSource _salesQuotationTable_ds)
    {
        this.numberSeqFormHandlerQuotationId(_element, _salesQuotationTable_ds).formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceDelete</Name>
				<Source><![CDATA[
    public void formMethodDataSourceDelete(FormRun _element, FormDataSource _salesQuotationtable_ds, boolean _forced = false)
    {
        this.numberSeqFormHandlerQuotationId(_element, _salesQuotationtable_ds).formMethodDataSourceDelete(_forced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceLinkActive</Name>
				<Source><![CDATA[
    public void formMethodDataSourceLinkActive(FormRun _element, FormDataSource _salesQuotationTable_ds)
    {
        this.numberSeqFormHandlerQuotationId(_element, _salesQuotationTable_ds).formMethodDataSourceLinkActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceValidateWrite</Name>
				<Source><![CDATA[
    public boolean formMethodDataSourceValidateWrite(FormRun _element, FormDataSource _salesQuotationtable_ds)
    {
        boolean ret = true;

        if (!this.numberSeqFormHandlerQuotationId(_element, _salesQuotationtable_ds).formMethodDataSourceValidateWrite())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceWrite</Name>
				<Source><![CDATA[
    public void formMethodDataSourceWrite(FormRun _element, FormDataSource _salesQuotationtable_ds)
    {
        this.numberSeqFormHandlerQuotationId(_element, _salesQuotationtable_ds).formMethodDataSourceWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodQuotationTypeModifyPostChange</Name>
				<Source><![CDATA[
    public void formMethodQuotationTypeModifyPostChange(FormRun         _element,
                                                        FormDataSource  _salesQuotationtable_ds,
                                                        boolean         _forced = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodQuotationTypeModifyPreChange</Name>
				<Source><![CDATA[
    public void formMethodQuotationTypeModifyPreChange(FormRun          _element,
                                                       FormDataSource   _salesQuotationTable_ds,
                                                       boolean          _forced = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable       _projTable)
    {
        if (!salesQuotationTable.CurrencyCode)
        {
            salesQuotationTable.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }
        
        salesQuotationTable.ProjInvoiceProjId   = _projTable.ProjInvoiceProjId;

        salesQuotationTable.DefaultDimension    = salesQuotationTable.copyDimension(_projTable.DefaultDimension);

        salesQuotationTable.TaxGroup            = ProjParameters::taxGroupInvoice(salesQuotationTable.ProjIdRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        SalesParameters salesParameters         = SalesParameters::find();
        CustParameters  custParameters          = CustParameters::find();
        IntrastatParameters intrastatParameters = IntrastatParameters::find();

        salesQuotationTable.DeliveryDateControlType = salesParameters.DeliveryDateControlType;

        SalesCalcAvailableDlvDates::initDateFields(salesQuotationTable);
        salesQuotationTable.QuotationCategory       = SalesParameters::find().CustQuotationTypeId;

        salesQuotationTable.TransactionCode         = IntrastatParameters::find().DefaultSalePurchase;
        salesQuotationTable.SalesPoolId             = salesParameters.SalesPoolId;
        salesQuotationTable.SalesOriginId           = salesParameters.SalesOriginId;

        if (custParameters.AutoSettle == NoYes::Yes)
        {
            salesQuotationTable.SettleVoucher = SettlementType::OpenTransact;
        }
        salesQuotationTable.TransactionCode      = intrastatParameters.DefaultSalePurchase;
        salesQuotationTable.Transport            = intrastatParameters.TransportModeParm;
        salesQuotationTable.Port                 = intrastatParameters.PortParm;
        salesQuotationTable.StatProcId           = intrastatParameters.StatProcIdParm;
        salesQuotationTable.CountyOrigDest       = intrastatParameters.CountyOrigDest;

        salesQuotationTable.PostingProfile          = custParameters.PostingProfile;

        salesQuotationTable.WorkerSalesTaker        = DirPersonUserEx::findUserWorkerReference();
        salesQuotationTable.WorkerSalesResponsible  = salesQuotationTable.WorkerSalesTaker;

        salesQuotationTable.initExpiryDateFromQuotDate();
        salesQuotationTable.initFollowUpDateFromExpiryDate();
        salesQuotationTable.SalesUnitId             = smmUtility::getCurrentSalesUnit();

        if (SalesParameters::find().IsD365SalesQuotationLifecycleEnabled
            && SalesQuotationD365SalesDefaultOwnershipFeature::instance().isEnabled())
        {
            salesQuotationTable.QuotationOwnership = salesParameters.QuotationOwnership;
        }
        else
        {
            salesQuotationTable.QuotationOwnership = SalesQuotationOwnershipType::BasedOnOrigin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirm</Name>
				<Source><![CDATA[
    ConfirmId lastConfirm()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastQuotation</Name>
				<Source><![CDATA[
    QuotationIdBase lastQuotation()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueElementName
    private IdentifierName lastValueElementName()
    {
        return formStr(SalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales quotation lines exist for the current sales quotation.
    /// </summary>
    /// <returns>
    /// true if the lines exist; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For best performance, the result of this method is stored in the class member variable.Only the
    /// first call of the method invokes a database request.
    /// </remarks>
    protected boolean linesExist()
    {
        if (!linesExistWasCalled)
        {
            linesExist = SalesQuotationLine::exist(salesQuotationTable.QuotationId);
            linesExistWasCalled = true;
        }

        return linesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BankDocumentType</c> field could be modified.
    /// </summary>
    /// <returns>
    /// true if the field could be modified; otherwise, false.
    /// </returns>
    public boolean mayBankDocumentTypeBeModified()
    {
        boolean ok                  = false;
        boolean enableLGFeature     = BankLGFeatureChecker::checkBankLGEnabled();
        boolean enableBankDocument  = enableLGFeature;

        if (enableBankDocument)
        {
            if (!salesQuotationTable.isBankDocumentCreated())
            {
                if (enableLGFeature)
                {
                    // It is not allowed to create LG on project quotation if there
                    // is a LG created in the related project.
                    if (salesQuotationTable.mayBankDocumentTypeBeAllowed(BankLGDocumentType::LetterOfGuarantee))
                    {
                        ok = true;
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCancelledBeUpdated</Name>
				<Source><![CDATA[
    boolean mayCancelledBeUpdated(boolean _includeCreated = false)
    {
        boolean ok = true;

        if (!isIntegrationOwnerDynamics365Sales &&
            (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent ||
            (_includeCreated && !salesQuotationTable.isTemplate() && salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created)))
        {
            ok = true;
        }
        else
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        //only if workflow is approved enable send button
        //if sales quotation customer is prospect, should return false
        return !isIntegrationOwnerDynamics365Sales &&
                (salesQuotationTable.BusRelAccount == '' && !salesQuotationTable.isTemplate() &&
                    (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent
                     && salesQuotationTable.CustAccount
                     && smmOpportunityTable::find(salesQuotationTable.OpportunityId).Status != smmOpportunityStatus::Postponed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConvert2Customer</Name>
				<Source><![CDATA[
    boolean mayConvert2Customer()
    {
        boolean ok = true;

        ok = !isIntegrationOwnerDynamics365Sales &&
            ((!salesQuotationTable.isTemplate() && (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created  ||
                salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent))   &&
                (salesQuotationTable.BusRelAccount && !salesQuotationTable.CustAccount));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayLinkToProjectBeUpdated</Name>
				<Source><![CDATA[
    boolean mayLinkToProjectBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayLostBeUpdated</Name>
				<Source><![CDATA[
    boolean mayLostBeUpdated()
    {
        boolean ok = true;

        ok = !isIntegrationOwnerDynamics365Sales &&
            (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeCopied</Name>
				<Source><![CDATA[
    boolean mayQuotationBeCopied()
    {
        boolean ok = true;

        ok = (salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed  &&
              salesQuotationTable.QuotationStatus != SalesQuotationStatus::Lost       &&
              (isConfigurationkeyEnabled(configurationKeyNum(Project)) ?
              salesQuotationTable.QuotationStatus != SalesQuotationStatus::Submitted : true)
            && salesQuotationTable.QuotationStatus != SalesQuotationStatus::Cancelled
            && (!isIntegrationOwnerDynamics365Sales || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeLinked</Name>
				<Source><![CDATA[
    boolean mayQuotationBeLinked()
    {
        boolean ok = true;

        ok =  !isIntegrationOwnerDynamics365Sales &&
            (!salesQuotationTable.isTemplate() && (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayQuotationBeUpdated()
    {
        //only if workflow is approved enable send button
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return !isIntegrationOwnerDynamics365Sales
                    && (!salesQuotationTable.isTemplate()
                        && ((salesQuotationTable.QuotationStatus == SalesQuotationStatus::Approved || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
                        || (salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed && salesQuotationTable.QuotationType == QuotationType::Sales))
                        && this.linesExist());
        }
        return !isIntegrationOwnerDynamics365Sales
                && (!salesQuotationTable.isTemplate()
                    && ( salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
                    && this.linesExist());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesQuotationTable _salesQuotationTable)
    {
        salesQuotationTable                 = _salesQuotationTable;

        isIntegrationOwnerDynamics365Sales  = salesQuotationTable.isIntegrationOwnerDynamics365Sales();

        super(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerQuotationId</Name>
				<Source><![CDATA[
    protected NumberSeqFormHandler numberSeqFormHandlerQuotationId(FormRun _element, FormDataSource _salesQuotationtable_ds)
    {
        if (!numberSeqFormHandlerQuotationId)
        {         
            numberSeqFormHandlerQuotationId = NumberSeqFormHandler::newForm(this.numRefSalesQuotationId().NumberSequenceId,
                                                                            _element,
                                                                            _salesQuotationtable_ds,
                                                                            fieldNum(SalesQuotationTable, QuotationId)
                                                                            );
        }
        return numberSeqFormHandlerQuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefSalesQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for the new sales quotation.
    /// </summary>
    /// <returns>
    /// The number sequence reference.
    /// </returns>
    protected NumberSequenceReference numRefSalesQuotationId()
    {
        return SalesParameters::numRefSalesQuotationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSeqFormHandlerQuotationId</Name>
				<Source><![CDATA[
    public NumberSeqFormHandler parmNumberSeqFormHandlerQuotationId(NumberSeqFormHandler _numberSeqFormHandlerQuotationId = numberSeqFormHandlerQuotationId)
    {
        numberSeqFormHandlerQuotationId = _numberSeqFormHandlerQuotationId;
        return numberSeqFormHandlerQuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmSalesQuotationTable()
    {
        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup   _taxGroup)
    {
        salesQuotationTable.TaxGroup = _taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation record has been updated.
    /// </summary>
    /// <param name="_salesQuotationTableOrig">
    /// The original quotation which is updated.
    /// </param>
    public void updated(SalesQuotationTable _salesQuotationTableOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes deletion-related updates to the <c>SalesQuotationTable</c> table.
    /// </summary>
    public void updateSalesQuotationLineDelete()
    {
        if (salesQuotationTable.PriceDiscResultFields::multiLineDiscPolicyExist()
            && (select firstonly RecId from salesQuotationLine
                    where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId).RecId == 0)
        {
            salesQuotationTable.PriceDiscResultFields::removeMultiLineDiscCodeFromPolicy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateDeleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the validateDelete must be performed on the specified line.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// A sales quotation line record.
    /// </param>
    /// <returns>
    /// true if the validateDelete must be performed; otherwise false.
    /// </returns>
    protected boolean mustValidateDeleteLine(SalesQuotationLine _salesQuotationLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean                         ok                           = true;
        boolean                         linesWithoutDlvScheduleExist = false;
        SalesQuotationLine              salesQuotationLine;
        SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;

        ok = this.checkDelete();

        if (ok)
        {
            boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

            while select salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                notexists join salesQuotationDeliverySchedule
                    where salesQuotationDeliverySchedule.OrderLine == salesQuotationLine.InventTransId
            {
                linesWithoutDlvScheduleExist = true;

                if (this.mustValidateDeleteLine(salesQuotationLine))
                {
                    if (isKittingEnabled && !this.kittingCanDelete(salesQuotationLine))
                    {
                        continue;
                    }

                    if (!salesQuotationLine.validateDelete())
                    {
                        ok = false;
                        break;
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDisabledFields</Name>
				<Source><![CDATA[
    private boolean validateDisabledFields()
    {
        List fields = new List(Types::Integer);
        fields.appendList(this.disabledFieldChangeReasonCode());
        fields.appendList(this.disabledTemplateFields());
        fields.appendList(this.disabledFieldsIfCustomerAccountNotSpecified());
        fields.appendList(this.disabledFieldsWhenQuotationSent());

        return this.checkFieldsAreNotModified(fields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldChangeReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of disabled fields when reason code is changed.
    /// </summary>
    /// <returns>A collection of disabled fields.</returns>
    protected List disabledFieldChangeReasonCode()
    {
        List fields = new List(Types::Integer);
        if (this.checkUpdate(false))
        {
            fields.addEnd(fieldNum(SalesQuotationTable, ReasonId));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledTemplateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of disabled template fields.
    /// </summary>
    /// <returns>A collection of disabled fields.</returns>
    protected List disabledTemplateFields()
    {
        List fields = new List(Types::Integer);

        if (!salesQuotationTable.TemplateName)
        {
            fields.addEnd(fieldNum(SalesQuotationTable, TemplateActive));
        }

        if (salesQuotationTable.QuotationStatus != SalesQuotationStatus::Created ||
                SalesQuotationLine::exist(salesQuotationTable.QuotationId))
        {
            fields.addEnd(fieldNum(SalesQuotationTable, TemplateGroupId));
            fields.addEnd(fieldNum(SalesQuotationTable, TemplateName));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldsIfCustomerAccountNotSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of disabled fields when customer account is not specified.
    /// </summary>
    /// <returns>A collection of disabled fields.</returns>
    protected List disabledFieldsIfCustomerAccountNotSpecified()
    {
        List fields = new List(Types::Integer);

        if (!salesQuotationTable.CustAccount)
        {
            fields.addEnd(fieldNum(SalesQuotationTable, PriceGroupId));
            fields.addEnd(fieldNum(SalesQuotationTable, MultiLineDisc));
            fields.addEnd(fieldNum(SalesQuotationTable, EndDisc));
            fields.addEnd(fieldNum(SalesQuotationTable, LineDisc));

            if (!(SalesParameters::find().IsD365SalesQuotationLifecycleEnabled
                && salesQuotationTable.BusRelAccount
                && !salesQuotationTable.orig().BusRelAccount
                && !salesQuotationTable.InvoiceAccount))
            {
                // Skip validation of InvoiceAccount when changing from Customer to Prospect and InvoiceAccount is cleared.
                fields.addEnd(fieldNum(SalesQuotationTable, InvoiceAccount));
            }

            fields.addEnd(fieldNum(SalesQuotationTable, vatNum));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldsWhenQuotationSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of disabled fields when quotation is sent.
    /// </summary>
    /// <returns>A collection of disabled fields.</returns>
    protected List disabledFieldsWhenQuotationSent()
    {
        List fields = new List(Types::Integer);

        if (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
        {
            fields.addEnd(fieldNum(SalesQuotationTable, CustAccount));
            fields.addEnd(fieldNum(SalesQuotationTable, BusRelAccount));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldsAreNotModified</Name>
				<Source><![CDATA[
    private boolean checkFieldsAreNotModified(List _fieldIds)
    {
        var enumerator = _fieldIds.getEnumerator();
        boolean result = true;

        while (enumerator.moveNext())
        {
            FieldId fieldId = enumerator.current();
            result = result & this.checkFieldNotModified(fieldId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldNotModified</Name>
				<Source><![CDATA[
    private boolean checkFieldNotModified(FieldId _fieldId)
    {
        boolean result = true;
        if (this.isFieldModified(salesQuotationTable, _fieldId))
        {
            result = this.allowEditCheckFailed(fieldId2PName(tableNum(SalesQuotationTable), _fieldId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldModified</Name>
				<Source><![CDATA[
    private boolean isFieldModified(Common _table, FieldId _fieldId)
    {
        if (_table.isFieldSet(_fieldId))
        {
            if (_table.RecId)
            {
                Common orig = _table.orig();
                return _table.(_fieldId) != orig.(_fieldId);
            }
            else
            {
                Common blankBuffer = new SysDictTable(_table.TableId).makeRecord();
                return _table.(_fieldId) != blankBuffer.(_fieldId);
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCheckFailed</Name>
				<Source><![CDATA[
    private boolean allowEditCheckFailed(FieldLabel _fieldLabel)
    {
        return checkFailed(strFmt("@ApplicationFoundation:DataEntitiesNoAllowEdit", _fieldLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpiryDateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the expiry date is valid.
    /// </summary>
    /// <returns>true if the expiry date is valid; otherwise, false.</returns>
    protected boolean isExpiryDateValid()
    {
        return (!salesQuotationTable.QuotationExpiryDate 
            || salesQuotationTable.QuotationExpiryDate >= (salesQuotationTable.CreatedDateTime? DateTimeUtil::date(salesQuotationTable.CreatedDateTime): DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

    }

]]></Source>
			</Method>
			<Method>
				<Name>isFollowupDateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the follow up date is valid.
    /// </summary>
    /// <returns>true if the follow up date is valid; otherwise, false.</returns>
    protected boolean isFollowupDateValid()
    {
        return (salesQuotationTable.QuotationFollowUpDate >= (salesQuotationTable.CreatedDateTime? DateTimeUtil::date(salesQuotationTable.CreatedDateTime): DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId  fieldId)
    {
        boolean                 ok = true;

        switch (fieldId)
        {
            case(fieldNum(SalesQuotationTable, BusRelAccount))    :
                ok = salesQuotationTable.checkAccount();
                break;

            case(fieldNum(SalesQuotationTable, QuotationExpiryDate))    :
                if (!this.isExpiryDateValid())
                {
                    //Expiry date must not be before created date.
                    ok = checkFailed("@SYS91440");
                }
                // Update follow-update if expiry date has changed
                else
                    salesQuotationTable.initFollowUpDateFromExpiryDate();
                break;

            case(fieldNum(SalesQuotationTable, QuotationFollowUpDate))    :
                if (!this.isFollowupDateValid())
                {
                    //Follow-up date must not be before created date.
                    ok = checkFailed("@SYS91441");
                }

                break;

            case fieldNum(SalesQuotationTable, EnterpriseNumber) :
                ok = TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(salesQuotationTable.EnterpriseNumber);
                break;

            case fieldNum(SalesQuotationTable, vatNum) :
                ok = TaxVATNumTable::checkVATNum(salesQuotationTable.vatNum, salesQuotationTable, fieldId);
                ok = ok && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(salesQuotationTable.EnterpriseNumber, salesQuotationTable.vatNum, true);
                break;

            case(fieldNum(SalesQuotationTable, InvoiceAccount)) :
                if (salesQuotationTable.CustAccount && !salesQuotationTable.InvoiceAccount)
                {
                    ok  = checkFailed(strFmt("@SYS26332",fieldPName(SalesQuotationTable,InvoiceAccount)));
                }
                else
                {
                    ok = salesQuotationTable.checkInvoiceAccount();
                }
                break;

            case fieldNum(SalesQuotationTable, url) :

                if (salesQuotationTable.url)
                {
                    ok = isValidURL(salesQuotationTable.url);
                    if (!ok)
                    {
                        ok = checkFailed("@SYS91305");
                    }
                }

                break;

            case fieldNum(SalesQuotationTable, OpportunityId) :

                smmOpportunityTable smmOpportunityTable = smmOpportunityTable::find(salesQuotationTable.OpportunityId);

                if (salesQuotationTable.OpportunityId && salesQuotationTable.party() != smmOpportunityTable.Party)
                {
                    ok = checkFailed("@SYS106895");
                }
                else if (salesQuotationTable.OpportunityId && smmOpportunityTable.Status == smmOpportunityStatus::Won)
                {
                    ok = checkFailed("@SYS106918");
                }

                break;

            case fieldNum(SalesQuotationTable, InventLocationId):
                ok = salesQuotationTable.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;

            case fieldNum(SalesQuotationTable, BankDocumentType):
                if (salesQuotationTable.orig().BankDocumentType != salesQuotationTable.BankDocumentType)
                {
                    if (salesQuotationTable.orig().isBankDocumentCreated())
                    {
                        // Bank document type could not be changed.
                        ok = checkFailed("@SYS316266");
                    }
                    else
                    {
                        if (salesQuotationTable.BankDocumentType == BankLGDocumentType::LetterOfGuarantee)
                        {
                            if (BankLGFeatureChecker::checkBankLGEnabled())
                            {
                                if (!salesQuotationTable.mayBankDocumentTypeBeAllowed())
                                {
                                    // It is not allowed to set to %1 at the current status.
                                    ok = checkFailed(strFmt("@SYS318015", enum2Value(salesQuotationTable.BankDocumentType)));
                                }
                            }
                            else
                            {
                                // Letter of Guarantee feature is not enabled.
                                ok = checkFailed(
                                    "@SYS318007",
                                    '',
                                    SysInfoAction_Formrun::newFormnameControlnameDesc(
                                        formStr(LedgerParameters),
                                        'BankLG_BankLGEnable',
                                        "@SYS24215"));
                            }
                        }
                    }
                }
                break;

            case fieldNum(SalesQuotationTable, DeliveryDateControlType):
                ok = ok && salesQuotationTable.SalesDeliveryDateControlMap::checkDeliveryDateControlTypeCTP();
                break;

            case fieldNum(SalesQuotationTable, psaEstProjStartDate):
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    if ((salesQuotationTable.psaEstProjStartDate && salesQuotationTable.psaEstProjEndDate) && salesQuotationTable.psaEstProjStartDate > salesQuotationTable.psaEstProjEndDate)
                    {
                        ok = checkFailed("@PSA11100");
                    }
                    if (ok && !WorkCalendarDate::isDateOpen(salesQuotationTable.psaSchedCalendarId,salesQuotationTable.psaEstProjStartDate))
                    {
                        ok = checkFailed("@PSA11116");
                    }
                }
                break;

            case fieldNum(SalesQuotationTable, psaEstProjEndDate):
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    if (salesQuotationTable.psaEstProjEndDate < salesQuotationTable.psaEstProjStartDate)
                    {
                        ok = checkFailed("@SYS21592");
                    }
                    if (ok && !WorkCalendarDate::isDateOpen(salesQuotationTable.psaSchedCalendarId,salesQuotationTable.psaEstProjEndDate))
                    {
                        ok = checkFailed("@PSA11116");
                    }
                }
                break;

            case fieldNum(SalesQuotationTable, SalesPurchOperationType_BR):

                if (BrazilParameters::isEnabled())
                {
                    if (salesQuotationTable.orig().SalesPurchOperationType_BR
                    && SalesQuotationLine::find(salesQuotationTable.QuotationId).RecId != 0)
                    {
                        if (this.createInventTrans(salesQuotationTable.orig().SalesPurchOperationType_BR) != this.createInventTrans(salesQuotationTable.SalesPurchOperationType_BR))
                        {
                            ok = checkFailed("@GLS63949");
                        }
                    }
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTrans</Name>
				<Source><![CDATA[
    private boolean createInventTrans(RecId _salesPurchOperationType_BR)
    {
        if (!_salesPurchOperationType_BR)
        {
            return true;
        }

        return SalesPurchOperationType_BR::find(_salesPurchOperationType_BR).CreateInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>MCRSalesQuotationTable</c> record before saving to the database.
    /// </summary>
    /// <returns>
    /// True if record contains correct information; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ok = true;

        Ok = this.validateDisabledFields();

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRSalesQuotationTable mcrSalesQuotationTable = salesQuotationTable.mcrSalesQuotationTable();
            if (mcrSalesQuotationTable.Sourceid)
            {
                // Validate source code effective.
                if (!MCRSourceCodeSetup::validateSourceEffective(mcrSalesQuotationTable.SourceId))
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationTableType construct(SalesQuotationTable _salesQuotationTable)
    {
        SalesQuotationTypeFactoryAttribute  attribute       = new SalesQuotationTypeFactoryAttribute(_salesQuotationTable.QuotationType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_salesQuotationTable);
        SalesQuotationTableType             instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesQuotationTableType), attribute, instantiation) as SalesQuotationTableType;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCancelled</Name>
				<Source><![CDATA[
    static int posCancelled()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posConfirmation</Name>
				<Source><![CDATA[
    static int posConfirmation()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posLost</Name>
				<Source><![CDATA[
    static int posLost()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posQuotation</Name>
				<Source><![CDATA[
    static int posQuotation()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowedTypes</Name>
				<Source><![CDATA[
    public static container setAllowedTypes()
    {
        container allowedTypes = conNull();

        DictEnum dictEnum = DictEnum::newFromName(enumStr(QuotationType));
        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            QuotationType value = enum.current();
            if (dictEnum.isValueEnabled(value))
            {
                allowedTypes += value;
            }
        }
        return allowedTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromField</Name>
				<Source><![CDATA[
    public void defaultFromField(FieldId _fieldId, boolean _userInput)
    {
        salesQuotationTable.modifiedField(_fieldId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingFields</Name>
				<Source><![CDATA[
    public List defaultingFields()
    {
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(SalesQuotationTable, QuotationType));
        result.addEnd(fieldNum(SalesQuotationTable, ReceiptDateRequested));
        result.addEnd(fieldNum(SalesQuotationTable, ShippingDateRequested));
        result.addEnd(fieldNum(SalesQuotationTable, BusRelAccount));
        result.addEnd(fieldNum(SalesQuotationTable, CustAccount));
        result.addEnd(fieldNum(SalesQuotationTable, CashDisc));
        result.addEnd(fieldNum(SalesQuotationTable, DeliveryPostalAddress));
        result.addEnd(fieldNum(SalesQuotationTable, DlvTerm));
        result.addEnd(fieldNum(SalesQuotationTable, DlvMode));
        result.addEnd(fieldNum(SalesQuotationTable, InvoiceAccount));
        result.addEnd(fieldNum(SalesQuotationTable, CampaignId));
        result.addEnd(fieldNum(SalesQuotationTable, ContactPersonId));
        result.addEnd(fieldNum(SalesQuotationTable, Payment));
        result.addEnd(fieldNum(SalesQuotationTable, PaymMode));
        result.addEnd(fieldNum(SalesQuotationTable, InvoiceAccount));
        result.addEnd(fieldNum(SalesQuotationTable, ProjIdRef));
        result.addEnd(fieldNum(SalesQuotationTable, ProjInvoiceProjId));
        result.addEnd(fieldNum(SalesQuotationTable, InventSiteId));
        result.addEnd(fieldNum(SalesQuotationTable, InventLocationId));
        result.addEnd(fieldNum(SalesQuotationTable, DiscPercent));
        result.addEnd(fieldNum(SalesQuotationTable, psaEstProjStartDate));
        result.addEnd(fieldNum(SalesQuotationTable, psaEstProjEndDate));
        result.addEnd(fieldNum(SalesQuotationTable, psaSchedCalendarId));
        result.addEnd(fieldNum(SalesQuotationTable, DeliveryPostalAddress));
        result.addEnd(fieldNum(SalesQuotationTable, DeliveryDateControlType));
        result.addEnd(fieldNum(SalesQuotationTable, ReceiptDateRequested));
        result.addEnd(fieldNum(SalesQuotationTable, ShippingDateRequested));
        result.addEnd(fieldNum(SalesQuotationTable, SalesPurchOperationType_BR));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeChanges</Name>
				<Source><![CDATA[
    public void mergeChanges()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergableFields</Name>
				<Source><![CDATA[
    public Set mergableFields()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanDelete_delegate</Name>
				<Source><![CDATA[
    delegate void kittingCanDelete_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanDelete</Name>
				<Source><![CDATA[
    protected boolean kittingCanDelete(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingCanDelete_delegate(_salesQuotationLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>