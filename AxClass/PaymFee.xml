<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymFee</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PaymFee
{
    private ModuleCustVend module;
    private List paymModeFeeList;

    private BankAccountID bankAccountID;
    private PaymMode paymMode;
    private PaymSpec paymSpec;
    private CurrencyCode paymCurrency;
    private AmountCur paymAmountCur;
    private TransDate paymDate;
    private BankRemittanceType bankRemittanceType;
    private LedgerJournalType journalType;
    // <GJP><GCN>
    private BankGroupID custVendBankGroupId;
    private SelectableDataArea custVendCompany;
    // </GCN></GJP>
    // <GJP>
    private VendTable               vendTable;
    private VendPaymFeeGroupId_JP   vendPaymFeeGroupId_JP;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankRelation</Name>
				<Source><![CDATA[

    private BankAccountID bankRelation(
        TableGroupAll _bankCode,
                                       BankGroupId     _groupId)
    {
        BankAccountID bankAccountIDLocal;

        switch (_bankCode)
        {
            case TableGroupAll::Table:
                bankAccountIDLocal = bankAccountID;
                break;

            case TableGroupAll::GroupId:
                bankAccountIDLocal = _groupId;
                break;

            default:
                bankAccountIDLocal = '';
        }

        return bankAccountIDLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendBankGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// find bank groups of third party bank account and stores it in member variable.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledgerJournalTrans for which payment fees are searched.
    /// </param>
    protected void findCustVendBankGroupId(LedgerJournalTrans  _ledgerJournalTrans)
    {
        if (!custVendCompany)
        {
            custVendCompany = curext();
        }

        if (module == ModuleCustVend::Cust)
        {
            changeCompany(custVendCompany)
            {
                custVendBankGroupId = CustBankAccount::find(
                    _ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.CustVendBankAccountId).BankGroupId;
            }
        }
        else
        {
            changeCompany(custVendCompany)
            {
                custVendBankGroupId = VendBankAccount::find(
                    _ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.CustVendBankAccountId).BankGroupId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFee</Name>
				<Source><![CDATA[

    private boolean findFee(
        TableGroupAll _bankCode = 0,
        BankAccountID _bankRel = ''
        ,VendTableGroupAll_JP _vendCode_JP = 0
        ,VendRelation_JP _vendRelation_JP = ''
        )
    {
        CustPaymFee     custPaymFee;
        CustPaymModeFee custPaymModeFee;
        // <GJP><GCN>
        #isoCountryRegionCodes
        PaymFeeBankRuleMatch_JP paymFeeBankRuleMatch_JP;
        boolean isJPN;
        // </GCN></GJP>

        VendPaymFee     vendPaymFee;
        VendPaymModeFee vendPaymModeFee;

        boolean         feeExist;

        if (module == ModuleCustVend::Cust)
        {
            while select custPaymModeFee
                where custPaymModeFee.PaymMode == paymMode
                    && custPaymModeFee.FromDate <= paymDate
                    && custPaymModeFee.PaymMin <= abs(paymAmountCur)
                    && custPaymModeFee.BankRemittanceType == bankRemittanceType
                    && custPaymModeFee.BankTableGroupAll == _bankCode
                    && custPaymModeFee.BankRelation == _bankRel
                    && (custPaymModeFee.ToDate >= paymDate
                        || !custPaymModeFee.ToDate)
                    && (custPaymModeFee.PaymMax >= abs(paymAmountCur)
                        || custPaymModeFee.PaymMax == 0)
                    && (custPaymModeFee.PaymSpec == paymSpec
                        || custPaymModeFee.PaymSpec == '')
                    && (custPaymModeFee.PaymCurrency == paymCurrency
                        || custPaymModeFee.PaymCurrency == '')
            join RecId from custPaymFee
                    where custPaymFee.FeeId == custPaymModeFee.PaymFeeId
                        && custPaymFee.LedgerJournalType == journalType
            {
                paymModeFeeList.addEnd(custPaymModeFee);
                feeExist = true;
            }
        }
        else
        {
            // <GJP><GCN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP, #isoCN]))
            {
                isJPN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

                paymFeeBankRuleMatch_JP = PaymFeeBankRuleMatch_JP::construct(
                BankAccountTable::find(bankAccountID).BankGroupId,
                custVendCompany,
                custVendBankGroupId);
            }
            // </GCN></GJP>

            while select vendPaymModeFee
                where vendPaymModeFee.PaymMode == paymMode
                    && vendPaymModeFee.FromDate <= paymDate
                    && vendPaymModeFee.PaymMin <= abs(paymAmountCur)
                    && vendPaymModeFee.BankRemittanceType == bankRemittanceType
                    && vendPaymModeFee.BankTableGroupAll == _bankCode
                    && vendPaymModeFee.BankRelation == _bankRel
                    && (vendPaymModeFee.ToDate >= paymDate
                        || !vendPaymModeFee.ToDate)
                    && (vendPaymModeFee.PaymMax >= abs(paymAmountCur)
                        || vendPaymModeFee.PaymMax == 0)
                    && (vendPaymModeFee.PaymSpec == paymSpec
                        || vendPaymModeFee.PaymSpec == '')
                    && (vendPaymModeFee.PaymCurrency == paymCurrency
                        || vendPaymModeFee.PaymCurrency == '')
            join RecId from vendPaymFee
                    where vendPaymFee.FeeId == vendPaymModeFee.PaymFeeId
                        && vendPaymFee.LedgerJournalType == journalType
            {
                // <GJP><GCN>
                if (vendPaymModeFee.PaymFeeBankRule_JP == 0 || (paymFeeBankRuleMatch_JP && paymFeeBankRuleMatch_JP.ExistMatch(vendPaymModeFee.PaymFeeBankRule_JP)))
                // </GCN></GJP>
                {
                    // <GJP>
                    if (!IsJPN
                        || (IsJPN && vendPaymModeFee.VendRelation_JP == _vendRelation_JP
                            && vendPaymModeFee.VendTableGroupAll_JP == _vendCode_JP))
                    {
                    // </GJP>
                    paymModeFeeList.addEnd(vendPaymModeFee);
                    feeExist = true;
                    // <GJP>
                    }
                    // </GJP>
                // <GJP><GCN>
                }
                // </GCN></GJP>
            }
        }

        return feeExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFees</Name>
				<Source><![CDATA[
    public List findFees()
    {
        TableGroupAll           bankCode;
        BankRelation            bankRelation;
        BankGroupId             bankGroupId;
        Integer                 idx;
        // <GJP>
        #isoCountryRegionCodes
        boolean isJPN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        // </GJP>

        bankGroupId = BankAccountTable::find(bankAccountID).BankGroupId;

        while (idx < 4)
        {
            bankCode = idx;

            bankRelation = this.bankRelation(bankCode, bankGroupId);

            // <GJP>
            if (isJPN)
            {
                if (!this.findFee(idx, bankRelation, VendTableGroupAll_JP::Table, vendTable.AccountNum))
                {
                    if (!vendTable.IsPaymFeeCovered_JP)
                    {
                        this.findFee(idx, bankRelation, VendTableGroupAll_JP::All, '');
                    }
                    else if (vendPaymFeeGroupId_JP != '' && !this.findFee(idx, bankRelation, VendTableGroupAll_JP::GroupId, vendPaymFeeGroupId_JP))
                    {
                        this.findFee(idx, bankRelation, VendTableGroupAll_JP::All, '');
                    }
                }
            }
            else
            {
                // </GJP>
                this.findFee(idx, bankRelation);
                // <GJP>
            }
            // </GJP>

            idx++;
        }

        return paymModeFeeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[

    public void new(
        ModuleCustVend _module,
             BankAccountID      _bankAccountID,
             PaymMode           _paymMode,
             PaymSpec           _paymSpec,
             CurrencyCode       _paymCurrency,
             AmountCur          _paymAmountCur,
             TransDate          _paymDate,
             BankRemittanceType _bankRemittanceType,
             LedgerJournalType  _journalType)
    {
        paymModeFeeList = new List(Types::Record);

        module              = _module;
        bankAccountID       = _bankAccountID;
        paymMode            = _paymMode;
        paymSpec            = _paymSpec;
        paymCurrency        = _paymCurrency;
        paymAmountCur       = _paymAmountCur;
        paymDate            = _paymDate;
        bankRemittanceType  = _bankRemittanceType;
        journalType         = _journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendCompany</Name>
				<Source><![CDATA[
    protected SelectableDataArea parmCustVendCompany(SelectableDataArea _custVendCompany = custVendCompany)
    {
        custVendCompany = _custVendCompany;
        return custVendCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTable_JP</Name>
				<Source><![CDATA[
    public VendTable parmVendTable_JP(vendTable _vendTable = vendTable)
    {
        vendTable = _vendTable;
        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPaymFeeGroupId_JP</Name>
				<Source><![CDATA[

    public VendPaymFeeGroupId_JP parmVendPaymFeeGroupId_JP(VendPaymFeeGroupId_JP _vendPaymFeeGroup = vendPaymFeeGroupId_JP)
    {
        vendPaymFeeGroupId_JP = _vendPaymFeeGroup;
        return vendPaymFeeGroupId_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLedgerJournalTrans</Name>
				<Source><![CDATA[

public static PaymFee newFromLedgerJournalTrans(
        ModuleCustVend _moduleCustVend,
                                                    LedgerJournalTrans  _ledgerJournalTrans,
                                                    BankAccountID       _bankAccountId)
    {
        PaymFee paymFee;

        paymFee = new PaymFee(
            _moduleCustVend,
                              _bankAccountId,
                              _ledgerJournalTrans.PaymMode,
                              _ledgerJournalTrans.PaymSpec,
                              _ledgerJournalTrans.CurrencyCode,
                              _ledgerJournalTrans.amount(),
                              _ledgerJournalTrans.TransDate,
                              _ledgerJournalTrans.BankRemittanceType,
                              _ledgerJournalTrans.ledgerJournalTable().JournalType);

        // <GJP><GCN>
        if (PaymFeeBankRuleUtil_JP::isPaymFeeBankRuleEnabled())
        {
            // std payment only addresses the situation where offset account is bank, and account is cust/vend.
            paymFee.parmCustVendCompany(_ledgerJournalTrans.Company);
            paymFee.findCustVendBankGroupId(_ledgerJournalTrans);
        }
        // </GJP></GCN>
        // <GJP>
        if (VendPaymFeeUtil_JP::isVendorPaymFeeEnabled())
        {
            paymFee.parmVendTable_JP(_ledgerJournalTrans.findVendTable());
            paymFee.parmVendPaymFeeGroupId_JP(_ledgerJournalTrans.VendPaymFeeGroup_JP);
        }
        // </GJP>

        return paymFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLedgerJournalTrans_OffsetAccount</Name>
				<Source><![CDATA[
    public static PaymFee newFromLedgerJournalTrans_OffsetAccount(ModuleCustVend     _moduleCustVend,
                                                                  LedgerJournalTrans _ledgerJournalTrans)

    {
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            return PaymFee::newFromLedgerJournalTrans(_moduleCustVend, _ledgerJournalTrans, _ledgerJournalTrans.parmOffsetAccount());
        }
        else
        {
            return PaymFee::newFromLedgerJournalTrans(_moduleCustVend, _ledgerJournalTrans, _ledgerJournalTrans.BankAccountId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>