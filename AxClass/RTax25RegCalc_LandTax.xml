<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_LandTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.ConPos1(1)
#define.ConPos2(2)
#define.ConPos3(3)
#define.ConPos4(4)
final class rTax25RegCalc_LandTax extends RTax25RegCalc implements BatchRetryable
{
    RTax25RegisterTrans_LandTaxCalc regTrans, header;
    RAssetStandardId        standardId;
    RAssetAssessedAmount    taxSum, prevPaySum;
    RefRecId                        taxCalcRefRecId;
#define.EndMarch(31)
    #define.EndJune(30)
    #define.EndSeptember(30)
    #define.MarchNum(03)
    #define.JuneNum(06)
    #define.SeptemberNum(09)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advancePaymentSum</Name>
				<Source><![CDATA[
    private RAssetNetBookValue advancePaymentSum()
    {
        RTax25RegisterTrans_LandTax     landTaxAsset;
        RTax25RegisterJournalTrans      journalTrans;
        RTax25RegisterTrans         rTax25RegTransAsset;
        RTax25RegisterJournalTable      regJournalTable;
        RAssetAssessedAmount        ret = 0.0;
    
        if (dateTo != dateEndYr(dateTo))
            return 0.;
    
        while select rTax25RegTransAsset
            order by LineNumber
            where rTax25RegTransAsset.AssessedTaxRegisterType == RAssetAssessedTaxRegType::LandTax            &&
                  rTax25RegTransAsset.FiscalYear              == year(dateFrom)                         &&
                  rTax25RegTransAsset.BlockType               == ReportBlockType::Body
        exists join regJournalTable
            where regJournalTable.JournalNum            == rTax25RegTransAsset.JournalNum               &&
                  regJournalTable.PeriodNum             == rTax25RegTransAsset.PeriodNum                &&
                  regJournalTable.PeriodType            == rTax25RegTransAsset.PeriodType               &&
                  regJournalTable.FiscalYear            == rTax25RegTransAsset.FiscalYear               &&
                  regJournalTable.RegisterJournalType   == RTax25RegisterJournalType::Asset_RU          &&
                  (regJournalTable.EndDate              == mkdate(#EndMarch, #MarchNum, year(dateFrom)) ||
                   regJournalTable.EndDate              == mkdate(#EndJune, #JuneNum, year(dateFrom))   ||
                   regJournalTable.EndDate              == mkdate(#EndSeptember, #SeptemberNum, year(dateFrom)))
        {
            if (conpeek(rTax25RegTransAsset.RegisterValues, #ConPos1) == regTrans.RCOAD             &&
                conpeek(rTax25RegTransAsset.RegisterValues, #ConPos2) == regTrans.BudgetRevenueCode &&
                conpeek(rTax25RegTransAsset.RegisterValues, #ConPos3) == regTrans.SalesTaxCode)
            {
                ret += conpeek(rTax25RegTransAsset.RegisterValues, #ConPos4);
            }
        }
    
        select sum(TaxAmount) from landTaxAsset
            where landTaxAsset.BlockType         == ReportBlockType::Body      &&
                  landTaxAsset.RCOAD             == regTrans.RCOAD             &&
                  landTaxAsset.BudgetRevenueCode == regTrans.BudgetRevenueCode &&
                  landTaxAsset.SalesTaxCode      == regTrans.SalesTaxCode
        exists join journalTrans
            where journalTrans.RecId        == landTaxAsset.JournalTransRefRecId &&
                  journalTrans.RegisterId   == registerId                        &&
                  ! journalTrans.Cancelled
        exists join regJournalTable
            where regJournalTable.JournalNum            == journalTrans.JournalNum               &&
                  regJournalTable.PeriodNum             == journalTrans.PeriodNum                &&
                  regJournalTable.PeriodType            == journalTrans.PeriodType               &&
                  regJournalTable.FiscalYear            == journalTrans.FiscalYear               &&
                  regJournalTable.RegisterJournalType   == RTax25RegisterJournalType::Asset_RU          &&
                  (regJournalTable.EndDate              == mkdate(#EndMarch, #MarchNum, year(dateFrom)) ||
                   regJournalTable.EndDate              == mkdate(#EndJune, #JuneNum, year(dateFrom))   ||
                   regJournalTable.EndDate              == mkdate(#EndSeptember, #SeptemberNum, year(dateFrom)));
    
        return ret + landTaxAsset.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00084, funcName());

            ttsbegin;
    
            super();
    
            while select regTrans
                order by LineNumber
                where regTrans.JournalTransRefRecId == taxCalcRefRecId
            {
                if (! regTrans.AssetId)
                {
                    if (! header)
                    {
                        this.outHeader();
                    }
    
                    if (header                                                           &&
                        regTrans.RCOAD                  &&
                        (regTrans.RCOAD != header.RCOAD ||
                         regTrans.BudgetRevenueCode != header.BudgetRevenueCode))
                    {
                        this.outFooter();
                        taxSum= 0; prevPaySum = 0;
                        this.outHeader();
                    }
    
                    if (! regTrans.RefTableId)
                    {
                        header = regTrans.data();
                    }
    
                    this.fillSections();
                }
            }
    
            if (header)
            {
                this.outFooter();
            }
    
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSections</Name>
				<Source><![CDATA[
    private void fillSections()
    {
        RTax25RegisterTrans_LandTaxCalc taxCalcAsset;
        RAssetAssessedAmount      tax, prevPay;
        ;
    
        while select AssetId, TaxAmount from taxCalcAsset
            order by LineNumber
            where taxCalcAsset.JournalTransRefRecId == taxCalcRefRecId &&
                  taxCalcAsset.LineNumber           >  regTrans.LineNumber
    
        {
            if (! taxCalcAsset.AssetId)
                break;
    
            tax += taxCalcAsset.TaxAmount;
        }
    
        prevPay = this.advancePaymentSum();
    
        regQuery.addBodyRecord(0, [regTrans.RCOAD,
                                   regTrans.BudgetRevenueCode,
                                   regTrans.SalesTaxCode,
                                    tax,
                                    prevPay],
                                   regTrans.RefTableId, regTrans.RefRecId);
    
        taxSum       += tax;
        prevPaySum   += prevPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
    
        standardId = RAssetParameters::standardIdDefault();
        taxCalcRefRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::PaymentReceipt,
                                                                         _registerJournalTrans,
                                                                         RAssetAssessedTaxRegType::LandTaxCalc).RecId;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outFooter</Name>
				<Source><![CDATA[
    private void outFooter()
    {
        ;
        regQuery.addFooterRecord(0, [header.RCOAD,
                                     header.BudgetRevenueCode,
                                     '',
                                     taxSum, prevPaySum], 0,
                                    strfmt("@GLS116803", header.RCOAD, header.BudgetRevenueCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outHeader</Name>
				<Source><![CDATA[
    private void outHeader()
    {
        ;
        regQuery.addHeaderRecord(0, conNull(), 0,
                                 strfmt("@SYS76498", regTrans.RCOAD, regTrans.BudgetRevenueCode));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>