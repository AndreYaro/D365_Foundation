<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCreateLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvCreateLedger
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournal</Name>
				<Source><![CDATA[
    public static LedgerJournalTable createLedgerJournal(LedgerJournalNameId _journalName = '',
                                                                LedgerJournalId _journalId = '',
                                                                Name _description = '',
                                                                TransDate _transDate = dateNull(),
                                                                NoYes _taxIncluded = NoYes::No)
    {
        LedgerJournalTable ledgerJournalTable;
        JournalTableData    journalTableData;

        ;
        if (_journalId)
        {
            ledgerJournalTable = LedgerJournalTable::find(_journalId);
        }

        if (!ledgerJournalTable.RecId)
        {
            ttsbegin;
            ledgerJournalTable.initFromLedgerJournalName(_journalName);
            journalTableData                = JournalTableData::newTable(ledgerJournalTable);
            ledgerJournalTable.JournalNum   = journalTableData.nextJournalId();
            ledgerJournalTable.Name         = _description;
            ledgerJournalTable.CurrencyCode = CompanyInfoHelper::standardCurrency();
            ledgerJournalTable.LedgerJournalInclTax = _taxIncluded;
            if (ledgerJournalTable.validateWrite())
                ledgerJournalTable.insert();
            else
                throw error("@SYS21628");

            ttscommit;
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    public static LedgerJournalTrans createLedgerJournalTrans(TrvLedgerInfo _trvLedgerInfo)
    {
        LedgerJournalTrans ledgerJournalTrans;
        // <GIN>
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        #ISOCountryRegionCodes
        // </GIN>

        if (!_trvLedgerInfo)
            throw error ("@SYS120733");

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.JournalNum           =   _trvLedgerInfo.parmJournalId();
        ledgerJournalTrans.Voucher              =   _trvLedgerInfo.parmVoucher();
        ledgerJournalTrans.Txt                  =   _trvLedgerInfo.parmTxt();
        ledgerJournalTrans.TaxGroup             =   _trvLedgerInfo.parmTaxGroupJournal();
        ledgerJournalTrans.TaxItemGroup         =   _trvLedgerInfo.parmTaxItemGroup();

        ledgerJournalTrans.parmAccount('', _trvLedgerInfo.parmAccountType());
        ledgerJournalTrans.parmLedgerDimension(_trvLedgerInfo.parmLedgerDimension());
        ledgerJournalTrans.parmOffsetAccount('',_trvLedgerInfo.parmOffsetAccountType());
        ledgerJournalTrans.parmOffsetLedgerDimension(_trvLedgerInfo.parmOffsetLedgerDimension(), curext());

        if (_trvLedgerInfo.parmAccountType() != LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.parmDefaultDimension(_trvLedgerInfo.parmDefaultDimension());
        }

        if (_trvLedgerInfo.parmOffsetAccountType() != LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.parmOffsetDefaultDimension(_trvLedgerInfo.parmOffsetDefaultDimension());
        }

        ledgerJournalTrans.AmountCurCredit      =   _trvLedgerInfo.parmAmountCurCredit();
        ledgerJournalTrans.AmountCurDebit       =   _trvLedgerInfo.parmAmountCurDebit();
        ledgerJournalTrans.CurrencyCode         =   _trvLedgerInfo.parmCurrencyCode();
        ledgerJournalTrans.ExchRate             =   _trvLedgerInfo.parmExchRate();
        ledgerJournalTrans.TransDate            =   _trvLedgerInfo.parmTransDate();
        ledgerJournalTrans.DefaultDimension     =   _trvLedgerInfo.parmDefaultDimension();
        ledgerJournalTrans.Invoice              =   _trvLedgerInfo.parmInvoiceId();
        ledgerJournalTrans.DocumentNum          =   _trvLedgerInfo.parmDocumentNum();
        ledgerJournalTrans.PaymMode             =   _trvLedgerInfo.parmPaymMode();
        ledgerJournalTrans.PaymSpec             =   _trvLedgerInfo.parmPaymSpec();
        ledgerJournalTrans.Payment              =   _trvLedgerInfo.parmPayment();
        ledgerJournalTrans.Due                  =   _trvLedgerInfo.parmDueDate();

        // Calculate AmountMST
        ledgerJournalTrans.calcAmountMST();

        if (_trvLedgerInfo.parmApproved() == NoYes::Yes)
        {
            ledgerJournalTrans.Approved = _trvLedgerInfo.parmApproved();
            ledgerJournalTrans.Approver = _trvLedgerInfo.parmApprover();
        }

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ledgerJournalTransTaxExtensionIN = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            ledgerJournalTransTaxExtensionIN.TaxModelDocLineExtensionIN::init(ledgerJournalTrans);
            ledgerJournalTrans.packledgerJournalTransTaxExtensionIN(ledgerJournalTransTaxExtensionIN);
        }
        // </GIN>

        ledgerJournalTrans.insert();

        // check if CorrectedTaxAmount > 0
        if (_trvLedgerInfo.parmCorrectedTaxAmount())
        {
            // seperate the ifs to prevent unnecessary select, check if tax is not included, calculate corrected tax amount
            if (!ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax)
            {
                LedgerJournalEngine_Server::correctTaxAmount(ledgerJournalTrans,_trvLedgerInfo.parmCorrectedTaxAmount());
            }
        }

        info(strFmt("@SYS101859", _trvLedgerInfo.parmDocumentNum(), _trvLedgerInfo.parmJournalId()));

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>