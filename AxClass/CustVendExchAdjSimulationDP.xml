<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjSimulationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendExchAdjSimulationDP extends SrsReportDataProviderPreProcessTempDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQueryRange</Name>
				<Source><![CDATA[
    protected abstract void addQueryRange(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNewAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    private AmountMST calculateNewAccountingCurrencyAmount(
        CurrencyExchangeHelper _currencyExchangeHelper,
        CurrencyCode _transactionCurrency,
        AmountCur _transactionCurrencyAmount,
        AmountMst _existingAccountingCurrencyAmount)
    {
        AmountMST newAccountingCurrencyAmount = _currencyExchangeHelper.calculateTransactionToAccounting(
            _transactionCurrency,
            _transactionCurrencyAmount,
            true);

        if (this.getRevaluationMethod() == CustVendExchPrinciples::MinMaxPrinciple
            && newAccountingCurrencyAmount > _existingAccountingCurrencyAmount)
        {
            newAccountingCurrencyAmount = _existingAccountingCurrencyAmount;
        }

        return newAccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNewReportingCurrencyAmount</Name>
				<Source><![CDATA[
    private AmountMstSecondary calculateNewReportingCurrencyAmount(
        CurrencyExchangeHelper _currencyExchangeHelper,
        CurrencyCode _transactionCurrency,
        AmountCur _transactionCurrencyAmount,
        AmountMstSecondary _existingReportingCurrencyAmount)
    {
        AmountMSTSecondary newReportingCurrencyAmount = _currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
            _transactionCurrency,
            _transactionCurrencyAmount);

        if (this.getRevaluationMethod() == CustVendExchPrinciples::MinMaxPrinciple
            && newReportingCurrencyAmount > _existingReportingCurrencyAmount)
        {
            newReportingCurrencyAmount = _existingReportingCurrencyAmount;
        }

        return newReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsideredDate</Name>
				<Source><![CDATA[
    protected abstract TransDate getConsideredDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDate</Name>
				<Source><![CDATA[
    protected abstract TransDate getExchangeRateDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected abstract ModuleCustVend getModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevaluationMethod</Name>
				<Source><![CDATA[
    protected abstract CustVendExchPrinciples getRevaluationMethod()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    abstract protected void insertRecord(
        CustVendTrans _custVendTrans,
        AmountCur _transactionCurrencyAmount,
        AmountMst _currentBalance,
        AmountMst _newBalance,
        CurrencyExchangeRate _accountingCurrencyExchangeRateUsed,
        AmountMstSecondary _currentBalanceReporting,
        AmountMstSecondary _newBalanceReporting,
        CurrencyExchangeRate _reportingCurrencyExchangeRateUsed)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyCrossRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accounting currencies cross rate for a <c>CustVendTrans</c> record.
    /// </summary>
    /// <param name = "_custVendTrans">The <c>CustVendTrans</c> record used to calculate the cross rate.</param>
    /// <returns>The currency exchange rate cross rate.</returns>
    protected CurrencyExchangeRate calculateAccountingCurrencyCrossRate(CustVendTrans _custVendTrans)
    {
        return ExchangeRateCalculation::calculateCrossRate(_custVendTrans.ExchRate, _custVendTrans.ExchRateSecond);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExchangeRateUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency exchange rate.
    /// </summary>
    /// <param name = "_ledger">The ledger context that is used for retrieving exchange rate information.</param>
    /// <param name = "_fromCurrency">The currency that is used for retrieving exchange rate information.</param>
    /// <param name = "_exchangeDate">The exchange rate date that is used for retrieving exchange rate information.</param>
    /// <returns>The accounting currency exchange rate.</returns>
    protected CurrencyExchangeRate getAccountingCurrencyExchangeRateUsed(LedgerRecId _ledger, CurrencyCode _fromCurrency, TransDate _exchangeDate)
    {
        return ExchangeRateHelper::getCrossRate_Static(_ledger, _fromCurrency, _exchangeDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRateUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency exchange rate.
    /// </summary>
    /// <param name = "_ledger">The ledger context that is used for retrieving exchange rate information.</param>
    /// <param name = "_fromCurrency">The currency that is used for retrieving exchange rate information.</param>
    /// <param name = "_exchangeDate">The exchange rate date that is used for retrieving exchange rate information.</param>
    /// <returns>The reporting currency exchange rate.</returns>
    protected CurrencyExchangeRate getReportingCurrencyExchangeRateUsed(LedgerRecId _ledger, CurrencyCode _fromCurrency, TransDate _exchangeDate)
    {
        Ledger ledger = Ledger::find(_ledger);
        ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(_ledger, _fromCurrency, _exchangeDate);
        helper.parmToCurrency(ledger.ReportingCurrency);
        helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);
        return helper.getCrossRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExchangeRateHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes an instance of the <c>ExchangeRateHelper</c> class.
    /// </summary>
    /// <param name = "_ledger">The ledger context that is used for retrieving exchange rate information.</param>
    /// <param name = "_fromCurrency">The currency that is used for retrieving exchange rate information.</param>
    /// <returns>An instance of the <c>ExchangeRateHelper</c> class.</returns>
    protected ExchangeRateHelper initExchangeRateHelper(LedgerRecId _ledger, CurrencyCode _fromCurrency)
    {
        return ExchangeRateHelper::newCurrency(_ledger, _fromCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records by using the specified parameters.
    /// </summary>
    public void processReport()
    {
        TransDate dateOfRate = this.getExchangeRateDate();
        LedgerRecId currentLedgerRecId = Ledger::current();

        if (!dateOfRate)
        {
            dateOfRate = this.getConsideredDate();
        }

        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            currentLedgerRecId,
            dateOfRate);

        Query query = new Query(this.parmQuery());
        QueryRun queryRun = new QueryRun(query);
        this.addQueryRange(queryRun);

        this.addCustVendTransFilterToQuery(queryRun);

        CustVendTransOpen custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(this.getModule());
        CustVendSettlement custVendSettlement = CustVendSettlement::getEmptyTableBuffer(this.getModule());
        CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(this.getModule());

        while (queryRun.next())
        {
            if (custVendTrans.custVendTrans::hasChangedInQuery(queryRun))
            {
                custVendTrans = custVendTrans.custVendTrans::getFromQuery(queryRun);

                CurrencyCode currentReportingCurrency = Ledger::reportingCurrencyByLedger(currentLedgerRecId);
                CurrencyExchangeRate accountingCurrencyExchangeRateUsed;
                CurrencyExchangeRate reportingCurrencyExchangeRateUsed;

                if (this.getRevaluationMethod() == CustVendExchPrinciples::InvDatePrinciple)
                {
                    // For invoice date, use the rates from the original transaction.
                    currencyExchangeHelper.parmExchangeRate1(custVendTrans.ExchRate);
                    currencyExchangeHelper.parmExchangeRate2(custVendTrans.ExchRateSecond);
                    custVendTrans.setExchangeHelperReportingExchRate(currencyExchangeHelper);

                    accountingCurrencyExchangeRateUsed = this.calculateAccountingCurrencyCrossRate(custVendTrans);

                    reportingCurrencyExchangeRateUsed = custVendTrans.getReportingCombinedExchangeRate();
                }
                else
                {
                    // Retrieve the rates based on the date of the adjustment
                    if (CustVendExchAdjSimulationWithExchRateTypeFlight::instance().isEnabled())
                    {
                        RecId exchRateTypeMSTRecId = this.getExchRateTypeRecIdEnhanced(custVendTrans.AccountNum, true);
                        accountingCurrencyExchangeRateUsed = ExchangeRateCalculation::getCrossRate_Static(
                            exchRateTypeMSTRecId,
                            custVendTrans.CurrencyCode,
                            Ledger::accountingCurrencyByLedger(currentLedgerRecId),
                            dateOfRate);
                        currencyExchangeHelper.parmExchangeRateTypeRecId(exchRateTypeMSTRecId);
                        currencyExchangeHelper.parmExchangeRate1(accountingCurrencyExchangeRateUsed);
                        currencyExchangeHelper.parmExchangeRate2(0);

                        if (currentReportingCurrency)
                        {
                            RecId exchRateTypeReportingRecId = this.getExchRateTypeRecIdEnhanced(custVendTrans.AccountNum, false);
                            reportingCurrencyExchangeRateUsed = ExchangeRateCalculation::getCrossRate_Static(
                                exchRateTypeReportingRecId,
                                custVendTrans.CurrencyCode,
                                Ledger::reportingCurrencyByLedger(currentLedgerRecId),
                                dateOfRate);
                            currencyExchangeHelper.parmReportingExchangeRateTypeRecId(exchRateTypeReportingRecId);
                            currencyExchangeHelper.parmReportingExchangeRate1(reportingCurrencyExchangeRateUsed);
                        }
                    }
                    else
                    {
                        accountingCurrencyExchangeRateUsed = this.getAccountingCurrencyExchangeRateUsed(currentLedgerRecId, custVendTrans.CurrencyCode, dateOfRate);

                        currencyExchangeHelper.parmExchangeRate1(accountingCurrencyExchangeRateUsed);
                        currencyExchangeHelper.parmExchangeRate2(0);

                        if (currentReportingCurrency != '')
                        {
                            reportingCurrencyExchangeRateUsed = this.getReportingCurrencyExchangeRateUsed(currentLedgerRecId, custVendTrans.CurrencyCode, dateOfRate);

                            currencyExchangeHelper.parmReportingExchangeRate1(reportingCurrencyExchangeRateUsed);
                        }
                    }
                }

                ExchangeRateHelper exchangeRateHelper = this.initExchangeRateHelper(currentLedgerRecId, custVendTrans.CurrencyCode);
                CurrencyExchangeRate accountingCurrencyExchangeRateUsedForDisplay = exchangeRateHelper.displayStoredExchangeRate(accountingCurrencyExchangeRateUsed);

                // We are repurposing the exchangeRateHelper from transaction to reporting when it was transaction to accounting.
                exchangeRateHelper.parmToCurrency(currentReportingCurrency);
                exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());

                CurrencyExchangeRate reportingCurrencyExchangeRateUsedForDisplay = exchangeRateHelper.displayStoredExchangeRate(reportingCurrencyExchangeRateUsed);

                AmountCur transactionCurrencyAmount;
                AmountMST newAccountingCurrencyAmount;
                AmountMST currentBalance;
                AmountMST newBalance;
                AmountMSTSecondary newReportingCurrencyAmount;
                AmountMSTSecondary currentBalanceReporting;
                AmountMSTSecondary newBalanceReporting;

                // Process settled portions of the transaction that are beyond the considered date
                if (custVendTrans.LastSettleDate)
                {
                    while select SettleAmountCur, SettleAmountMST, ExchAdjustment, SettleAmountReporting, ExchAdjustmentReporting
                        from custVendSettlement
                        where custVendSettlement.TransRecId == custVendTrans.RecId
                            && custVendSettlement.TransDate > this.getConsideredDate()
                    {
                        transactionCurrencyAmount += custVendSettlement.SettleAmountCur;

                        // Calculate the new accounting and reporting currency amounts
                        newAccountingCurrencyAmount = this.calculateNewAccountingCurrencyAmount(
                            currencyExchangeHelper,
                            custVendTrans.CurrencyCode,
                            custVendSettlement.SettleAmountCur,
                            custVendSettlement.SettleAmountMST);

                        currentBalance += custVendSettlement.SettleAmountMST - custVendSettlement.ExchAdjustment;
                        newBalance += newAccountingCurrencyAmount;

                        if (this.shouldSimulateReportingCurrency(custVendTrans, currentReportingCurrency))
                        {
                            newReportingCurrencyAmount = this.calculateNewReportingCurrencyAmount(
                                currencyExchangeHelper,
                                custVendTrans.CurrencyCode,
                                custVendSettlement.SettleAmountCur,
                                custVendSettlement.SettleAmountReporting);

                            currentBalanceReporting += custVendSettlement.SettleAmountReporting - custVendSettlement.ExchAdjustmentReporting;
                            newBalanceReporting += newReportingCurrencyAmount;
                        }
                    }
                }

                // Process the open portion of the transaction
                while select AmountCur, AmountMST, ReportingCurrencyAmount from custVendTransOpen
                    where custVendTransOpen.RefRecId == custVendTrans.RecId
                {
                    transactionCurrencyAmount += custVendTransOpen.AmountCur;

                    // Calculate the new accounting and reporting currency amounts
                    newAccountingCurrencyAmount = this.calculateNewAccountingCurrencyAmount(
                        currencyExchangeHelper,
                        custVendTrans.CurrencyCode,
                        custVendTransOpen.AmountCur,
                        custVendTransOpen.AmountMST);

                    currentBalance += custVendTransOpen.AmountMST;
                    newBalance += newAccountingCurrencyAmount;

                    if (this.shouldSimulateReportingCurrency(custVendTrans, currentReportingCurrency))
                    {
                        newReportingCurrencyAmount = this.calculateNewReportingCurrencyAmount(
                            currencyExchangeHelper,
                            custVendTrans.CurrencyCode,
                            custVendTransOpen.AmountCur,
                            custVendTransOpen.ReportingCurrencyAmount);

                        currentBalanceReporting += custVendTransOpen.ReportingCurrencyAmount;
                        newBalanceReporting += newReportingCurrencyAmount;
                    }
                }

                if (newBalance != currentBalance ||
                    newBalanceReporting != currentBalanceReporting)
                {
                    this.insertRecord(
                        custVendTrans,
                        transactionCurrencyAmount,
                        currentBalance,
                        newBalance,
                        accountingCurrencyExchangeRateUsedForDisplay,
                        currentBalanceReporting,
                        newBalanceReporting,
                        reportingCurrencyExchangeRateUsedForDisplay);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSimulateReportingCurrency</Name>
				<Source><![CDATA[
    private boolean shouldSimulateReportingCurrency(CustVendTrans _custVendTrans, CurrencyCode _reportingCurrency)
    {
        return _reportingCurrency != '' && _custVendTrans.getReportingCombinedExchangeRate() != 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustVendTransFilterToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>CustVendTrans</c> based filter to the existing query.
    /// </summary>
    /// <param name = "_queryRun">
    /// The <c>QueryRun</c> object being used for the simulation.
    /// </param>
    protected void addCustVendTransFilterToQuery(QueryRun _queryRun)
    {
        TmpRecIdFilter filter;
        this.findCustVendTransToRevalue(filter, _queryRun.query());
 
        Query q = _queryRun.query();
        QueryBuildDataSource qbdsFilter;
        if (this.getModule() == ModuleCustVend::Cust)
        {
            qbdsFilter = q.dataSourceName(tableStr(CustTrans)).addDataSource(tableNum(TmpRecIdFilter));
        }
        else
        {
            qbdsFilter = q.dataSourceName(tableStr(VendTrans)).addDataSource(tableNum(TmpRecIdFilter));
        }
        qbdsFilter.addLink(fieldNum(CustTrans, RecId), fieldNum(TmpRecIdFilter, RefRecId));
        qbdsFilter.joinMode(JoinMode::InnerJoin);

        _queryRun.setRecord(filter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a source to target the field mapping.
    /// </summary>
    /// <param name="_fieldList">
    /// The Field List.
    /// </param>
    /// <param name="_tableId">
    /// The Table Id.
    /// </param>
    /// <param name="_fieldMapping">
    /// The map in which we are doing the field mapping.
    /// </param>
    /// <param name="_dataSourceUniqueId">
    /// The data source unique Id.
    /// </param>
    /// <param name="_sourceFieldName">
    /// The source Field name.
    /// </param>
    /// <param name="_destinationFieldName">
    /// The destination field name.
    /// </param>
    protected void addDestinationFieldToFieldMapping(
        QueryBuildFieldList _fieldList,
        int _tableId,
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    
    {
        _fieldList = _fieldList.addField(fieldName2Id(_tableId, _sourceFieldName));
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpenTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a query to get open transactions based on the user-defined query.
    /// </summary>
    /// <param name="_baseQuery">
    /// The query on which we are creating open transaction query.
    /// </param>
    /// <returns>
    /// The open transaction query.
    /// </returns>
    protected abstract Query createOpenTransQuery(Query _baseQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettledTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a query to get settled transactions based on the user-defined query.
    /// </summary>
    /// <param name="_baseQuery">
    /// The query on wchich we are creating settle transaction query.
    /// </param>
    /// <returns>
    /// The settled transaction query.
    /// </returns>
    protected abstract Query createSettledTransQuery(Query _baseQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedTransQuery</Name>
				<Source><![CDATA[
    protected Query createReversedTransQuery(Query _baseQuery)
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankChequeCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankChequeCancelTransQuery(Query _baseQuery)
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankDepositCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankDepositCancelTransQuery(Query _baseQuery)
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransOpenToRevalue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the open transations Query.
    /// </summary>
    /// <param name="_filter">
    /// The <c>RecId</c> from the temporary processing table used to find the record to revalue.
    /// </param>
    /// <param name="_baseQuery">
    /// The base query used to process the simulation.
    /// </param>
    protected void findCustVendTransOpenToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        Query q = this.createOpenTransQuery(_baseQuery);
        Map fieldMapping = this.generateFieldMapping(q);
        Query::insert_recordset(_filter, fieldMapping, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransSettledToRevalue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the appropriate <c>CustVendTransSettled</c> record to revalue
    /// </summary>
    /// <param name="_filter">
    /// The filter.
    /// </param>
    /// <param name="_baseQuery">
    /// The base query.
    /// </param>
    protected void findCustVendTransSettledToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        Query q = this.createSettledTransQuery(_baseQuery);
        Map fieldMapping = this.generateFieldMapping(q);
        Query::insert_recordset(_filter, fieldMapping, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransReversedToRevalue</Name>
				<Source><![CDATA[
    private void findCustVendTransReversedToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        Query q = this.createReversedTransQuery(_baseQuery);
        Map fieldMapping = this.generateFieldMapping(q);
        Query::insert_recordset(_filter, fieldMapping, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankChequeCancelToRevalue</Name>
				<Source><![CDATA[
    private void findBankChequeCancelToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        Query q = this.createBankChequeCancelTransQuery(_baseQuery);
        Map fieldMapping = this.generateFieldMapping(q);
        Query::insert_recordset(_filter, fieldMapping, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankDepositCancelToRevalue</Name>
				<Source><![CDATA[
    private void findBankDepositCancelToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        Query q = this.createBankDepositCancelTransQuery(_baseQuery);
        Map fieldMapping = this.generateFieldMapping(q);
        Query::insert_recordset(_filter, fieldMapping, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransToRevalue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the appropriate <c>CustVendTrans</c> record to revalue, deletes the duplicate values, and insert the missing records.
    /// </summary>
    /// <param name = "_filter">
    /// The <c>RecId</c> from the temporary processing table used to find the record to revalue.
    /// </param>
    /// <param name = "_baseQuery">
    /// The base query used to process the simulation.
    /// </param>
    protected void findCustVendTransToRevalue(TmpRecIdFilter _filter, Query _baseQuery)
    {
        this.findCustVendTransOpenToRevalue(_filter, _baseQuery);

        TmpRecIdFilter filter;
        this.findCustVendTransSettledToRevalue(filter, _baseQuery);

        TmpRecIdFilter filter2;
        this.findCustVendTransReversedToRevalue(filter2, _baseQuery);

        TmpRecIdFilter filter3;
        this.findBankChequeCancelToRevalue(filter3, _baseQuery);

        delete_from filter 
            where filter.RefRecId == filter2.RefRecId;

        delete_from filter
            where filter.RefRecId == filter3.RefRecId;

        insert_recordset filter (RefRecId)
            select RefRecId from filter2;

        insert_recordset filter (RefRecId)
            select RefRecId from filter3;

        if (this.getModule() == ModuleCustVend::Cust)
        {
            TmpRecIdFilter filter4;
            this.findBankDepositCancelToRevalue(filter4, _baseQuery);

            delete_from filter
                where filter.RefRecId == filter4.RefRecId;

            insert_recordset filter (RefRecId)
                select RefRecId from filter4;
        }

        //remove duplicates
        delete_from filter
            where filter.RefRecId == _filter.RefRecId;

        //insert missing
        insert_recordset _filter (RefRecId)
            select RefRecId from filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the source to destination field mapping.
    /// </summary>
    /// <param name="_query">
    /// The Query used to map fields.
    /// </param>
    /// <returns>
    /// The source to destination mapped values.
    /// </returns>
    protected Map generateFieldMapping(Query _query)
    {
        QueryBuildFieldList fieldList;
        Map insertRecordsetMap = new Map(Types::String, Types::Container);
        TableId tableId = this.getTableId();
        int dataSourceId = _query.dataSourceTable(tableId).uniqueId();
        
        _query.clearAllFields();
        
        fieldList = _query.dataSourceTable(tableId).fields();
        fieldList.dynamic(1);
        
        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        tableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldStr(CustTrans, RecId),
                        fieldStr(TmpRecIdFilter, RefRecId));
        
        return insertRecordsetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on the module system gets the appropriate <c>TableId</c> value.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c> of the customer or vendor open transaction table.
    /// </returns>
    protected TableId getTableId()
    {
        TableId tableId;
        if (this.getModule() == ModuleCustVend::Cust)
        {
            tableId = tablenum(CustTrans);
        }
        else
        {
            tableId = tableNum(VendTrans);
        }
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateTypeRecIdEnhanced</Name>
				<Source><![CDATA[
    private RecId getExchRateTypeRecIdEnhanced(CustVendAC _custVendAC, boolean _isAccounting)
    {
        RecId exchRateTypeRecId;
        CustVendExchAdjRateSource currentRateSource = this.getModule() == ModuleCustVend::Cust ?
            CustParameters::find().ExchAdjRateSource :
            VendParameters::find().ExchAdjRateSource;

        switch (currentRateSource)
        {
            case CustVendExchAdjRateSource::Group:
                SysGroup groupId = CustVendTable::findModule(this.getModule(), _custVendAC).GroupId;
                if (groupId)
                {
                    SysModule custVendSysModule = this.getModule() == ModuleCustVend::Cust ?
                        SysModule::Cust :
                        SysModule::Vend;
                    CustVendGroup custVendGroup = CustVendGroup::findByModule(custVendSysModule, groupId);
                    exchRateTypeRecId = _isAccounting ? custVendGroup.AccountingCurrencyExchangeRateType : custVendGroup.ReportingCurrencyExchangeRateType;
                }
                break;
            case CustVendExchAdjRateSource::Specific:
                if (_isAccounting)
                {
                    exchRateTypeRecId = this.getModule() == ModuleCustVend::Cust ?
                        CustParameters::find().AccountingCurrencyExchangeRateType :
                        VendParameters::find().AccountingCurrencyExchangeRateType;
                }
                else
                {
                    exchRateTypeRecId = this.getModule() == ModuleCustVend::Cust ?
                        CustParameters::find().ReportingCurrencyExchangeRateType :
                        VendParameters::find().ReportingCurrencyExchangeRateType;
                }
                break;
            default:
                break;
        }

        if (!exchRateTypeRecId)
        {
            if (_isAccounting)
            {
                exchRateTypeRecId = Ledger::defaultExchangeRateType();
            }
            else
            {
                exchRateTypeRecId = Ledger::reportingCurrencyExchangeRateType() ? Ledger::reportingCurrencyExchangeRateType() : Ledger::defaultExchangeRateType();
            }
        }

        return exchRateTypeRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>