<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CalculationApi = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService</c> is a static companion class for <c>TaxIntegrationSettingRetrievalActivityOnDocument</c>,
/// retrieving setting for calculation service.
/// </summary>
public static class TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareTaxCalculationParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares tax calculation parameter.
    /// </summary>
    /// <param name = "_document">The document.</param>
    public static void prepareTaxCalculationParameter(TaxIntegrationDocumentObject _document)
    {
        #ISOCountryRegionCodes
        TaxIntegrationTaxServiceParameters parameterTable = TaxIntegrationTaxServiceParameters::find();
        TaxSolutionProviderType solutionProviderType = _document.getSolutionProviderType();
        TaxIntegrationSetting_CalculationService calculationServiceSetting = new TaxIntegrationSetting_CalculationService();

        CalculationApi.TaxCalculationParameter calculationParameter = new CalculationApi.TaxCalculationParameter();
        calculationParameter.WithContinueOnErrors(parameterTable.ErrorProcessMode == TaxIntegrationErrorProcessMode::ContinueOnError);

        if (solutionProviderType == TaxSolutionProviderType::Microsoft)
        {
            calculationParameter
                .WithCurrencyRoundingType(TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService::convertRoundOffTypeToTaxDocumentRoundingType(parameterTable.RoundOffType))
                .WithCurrencyRoundingTo(parameterTable.RoundOff)
                .WithCalculationMethod(TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService::convertRoundOffCalculationMethodToTaxCalculationMethod(parameterTable.RoundOffCalculationMethod))
                .WithRoundingPrinciple(TaxIntegrationSettingRetrievalActivityOnDocument_CalculationService::convertRoundOffPrincipleToRoundingPrinciple(parameterTable.RoundOffPrinciple));

            TaxIntegrationRoundingConfiguration taxIntegrationRoundingConfiguration = new TaxIntegrationRoundingConfiguration();
            taxIntegrationRoundingConfiguration.setRoundOff(parameterTable.RoundOff);
            taxIntegrationRoundingConfiguration.setRoundOffType(parameterTable.RoundOffType);
            taxIntegrationRoundingConfiguration.setRoundOffPrinciple(parameterTable.RoundOffPrinciple);
            taxIntegrationRoundingConfiguration.setRoundOffCalculationMethod(parameterTable.RoundOffCalculationMethod);

            calculationServiceSetting.setRoundingConfiguration(taxIntegrationRoundingConfiguration);
        }
        calculationServiceSetting.setTaxCalculationParameter(calculationParameter);
        calculationServiceSetting.setFeatureSetupId(solutionProviderType == TaxSolutionProviderType::Microsoft ? parameterTable.FeatureSetupId : parameterTable.ISVFeatureSetupId);
        calculationServiceSetting.setTaxIntegrationTaxServiceParameters(parameterTable);
        TaxParameters taxParameters = TaxParameters::find();
        calculationServiceSetting.setCalculationDateType(taxParameters.TaxCalculationDateType);

        boolean isCheckIntersectionForSales_IT;

        if (!TaxPostponeCheckTaxGroupAfterTaxCalculation_ITFlight::instance().isEnabled())
        {
            isCheckIntersectionForSales_IT = TaxIntegrationCheckTaxCode_ITFlight::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
        }

        CheckTaxGroups checkIntersection = isCheckIntersectionForSales_IT ? CheckTaxGroups::Error : taxParameters.CheckIntersection;
        calculationServiceSetting.setCheckTaxGroupsIntersection(checkIntersection);

        switch (_document.getLocalTableId())
        {
            case tableNum(SalesTable):
            case tableNum(SalesParmTable):
            case tableNum(SalesQuotationTable):
                calculationServiceSetting.setDiscountParameter(SalesParameters::find().Disc);
                break;
            case tableNum(PurchTable):
            case tableNum(PurchParmTable):
            case tableNum(VendInvoiceInfoTable):
            case tableNum(PurchReqTable):
            case tableNum(PurchRFQCaseTable):
            case tableNum(PurchRFQTable):
                calculationServiceSetting.setDiscountParameter(PurchParameters::find().Disc);
                break;
        }

        _document.setTaxIntegrationSetting(calculationServiceSetting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRoundOffTypeToTaxDocumentRoundingType</Name>
				<Source><![CDATA[
    private static CalculationApi.TaxDocumentRoundingType convertRoundOffTypeToTaxDocumentRoundingType(RoundOffType _roundOffType)
    {
        switch (_roundOffType)
        {
            case RoundOffType::Ordinary:
                return CalculationApi.TaxDocumentRoundingType::Ordinary;
            case RoundOffType::RoundDown:
                return CalculationApi.TaxDocumentRoundingType::RoundDown;
            case RoundOffType::RoundUp:
                return CalculationApi.TaxDocumentRoundingType::RoundUp;
        }

        return CalculationApi.TaxDocumentRoundingType::Ordinary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRoundOffCalculationMethodToTaxCalculationMethod</Name>
				<Source><![CDATA[
    private static CalculationApi.TaxCalculationMethod convertRoundOffCalculationMethodToTaxCalculationMethod(
        TaxRoundOffCalculationMethod _roundOffCalculationMethod)
    {
        switch (_roundOffCalculationMethod)
        {
            case TaxRoundOffCalculationMethod::Line:
                return CalculationApi.TaxCalculationMethod::Line;
            case TaxRoundOffCalculationMethod::Total:
                return CalculationApi.TaxCalculationMethod::Total;
        }

        return CalculationApi.TaxCalculationMethod::Line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRoundOffPrincipleToRoundingPrinciple</Name>
				<Source><![CDATA[
    private static CalculationApi.RoundingPrinciple convertRoundOffPrincipleToRoundingPrinciple(TaxRoundOffPrinciple _roundOffPrinciple)
    {
        switch (_roundOffPrinciple)
        {
            case TaxRoundOffPrinciple::TaxCode:
                return CalculationApi.RoundingPrinciple::TaxCode;
            case TaxRoundOffPrinciple::TaxCodeCombination:
                return CalculationApi.RoundingPrinciple::TaxCodeCombination;
        }

        return CalculationApi.RoundingPrinciple::TaxCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>