<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxByCustomerController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesTaxByCustomerController extends SrsReportRunController implements BatchRetryable
{
    #define.ReportNameDetail('SalesTaxByCustomer.DetailReport')

    #define.BillingClassification('BillingClassification')
    #define.InclTransWithNoBillingClass('InclTransWithNoBillingClass')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to change a report contract before the report is executed.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract dataContract = this.parmReportContract().parmRdlContract() as SrsReportRdlDataContract;

        this.parmReportContract().parmReportName(#ReportNameDetail);

        List listBillingClassification = dataContract.getParameter(#BillingClassification).getValueTyped();

        this.setSalesTaxReversalRanges(this.getFirstQuery());

        if (CustBillingClassificationReportManager::isPublicSectorScenario(listBillingClassification))
        {
            this.setRanges(this.getFirstQuery(),listBillingClassification,
                this.parmReportContract().parmRdlContract().getParameter(#InclTransWithNoBillingClass).getValueTyped());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxReversalRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges to handle tax reversals.
    /// </summary>
    /// <param name="_query">
    /// The report query object.
    /// </param>
    internal void setSalesTaxReversalRanges(Query  _query)
    {
        QueryBuildDataSource custTransSource = _query.dataSourceTable(tableNum(CustTrans));
        QueryBuildDataSource taxTransSource = _query.dataSourceTable(tableNum(TaxTrans));

        QueryBuildRange settlementRange = taxTransSource.addRange(fieldNum(TaxTrans, Voucher));

        // If (TaxTrans.Voucher = CustTrans.Voucher && TaxTrans.TransDate = CustTrans.TransDate)
        // || ( CustTrans.RecId = TaxTrans.SourceRecId && CustTrans.TableId = TaxTrans.SourceTableId)
        // We do this through a string builder as there are too many variables required

        System.Text.StringBuilder settlementRangeQuery = new System.Text.StringBuilder();

        settlementRangeQuery.AppendFormat('((({0}.{2} == {1}.{3}) && ({0}.{4} == {1}.{5}))',
            taxTransSource.name(),
            custTransSource.name(),
            fieldStr(TaxTrans, Voucher),
            fieldStr(CustTrans, Voucher),
            fieldStr(TaxTrans, TransDate),
            fieldStr(CustTrans, TransDate)
        );

        settlementRangeQuery.AppendFormat(' || (({0}.{2} == {1}.{3}) && ({1}.{4} == {0}.{5})))',
            taxTransSource.name(),
            custTransSource.name(),
            fieldStr(TaxTrans, SourceRecId),
            fieldStr(CustTrans, RecId),
            fieldStr(CustTrans, TableId),
            fieldStr(TaxTrans, SourceTableId)
        );

        settlementRange.value(strFmt('%1', settlementRangeQuery));
        settlementRange.status(RangeStatus::Hidden);

    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges.
    /// </summary>
    /// <param name="_query">
    /// The report query object.
    /// </param>
    /// <param name="_billingClassification">
    /// A List of billing classifications.
    /// </param>
    /// <param name="_inclTransWithNoBillingClass">
    /// A Boolean variable that indicates whether to include transactions without the billing
    /// classification.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setRanges(
        Query   _query,
        List    _billingClassification,
        NoYes   _inclTransWithNoBillingClass)
    {
        QueryBuildDataSource qbdsCustTrans = _query.dataSourceTable(tableNum(CustTrans));

        CustBillingClassificationReportManager::setBillingClassificationRanges(qbdsCustTrans,
                                                                               _billingClassification,
                                                                               _inclTransWithNoBillingClass,
                                                                               fieldNum(CustTrans, CustBillingClassification));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController controller = new SalesTaxByCustomerController();
        controller.parmArgs(_args);
        controller.parmReportName(#ReportNameDetail);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>