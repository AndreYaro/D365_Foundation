<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionSqlObjectsDAVCInsertTriggerExtensionBudgetControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionSqlObjectsDAVCInsertTriggerExtensionBudgetControl</c> class provides the budget control account specific implementation for the
/// <c>DimensionSQLObjectsDAVCInsertTriggerExtension</c> class.
/// </summary>
[System.ComponentModel.Composition.ExportAttribute("Dynamics.AX.Application.DimensionSQLObjectsDAVCInsertTriggerExtension")]
public class DimensionSqlObjectsDAVCInsertTriggerExtensionBudgetControl extends DimensionSQLObjectsDAVCInsertTriggerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHashMessageTypeFlag</Name>
				<Source><![CDATA[
    public str getHashMessageTypeFlag()
    {
        return this.getHashMessageTypeFlagForType(LedgerDimensionType::BudgetControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashMessagePrefixCase</Name>
				<Source><![CDATA[
    public str getHashMessagePrefixCase()
    {
        return strfmt(@" WHEN %1 THEN '%2' ",
            enum2int(LedgerDimensionType::BudgetControl),
            this.getHashMessageTypeFlag());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDAVCToInsertValidationSQL</Name>
				<Source><![CDATA[
    public str getDAVCToInsertValidationSQL()
    {
        // Validate an account structure is specified for each budget control account
        str sqlStatement = strFmt(@"
        IF EXISTS (SELECT 'x' FROM @DAVCToInsert WHERE LedgerDimensionType = %1 AND AccountStructure = 0)
            throw 50000, 'Combinations of type Budget Control must specify an AccountStructure', 1;
        ", enum2int(LedgerDimensionType::BudgetControl));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreDisplayValueConstructionSQL</Name>
				<Source><![CDATA[
    public str getPreDisplayValueConstructionSQL(str _segmentDisplayOrderingAlias)
    {
        str sqlStatement = strFmt(@"
            -- Combinations of type Budget Control should hide any segment
            -- which is not enabled through the BudgetPrimaryLedgerDimensionAttribute
            -- and BudgetControlDimensionAttribute for the current ledger (based on DataAreaForCreation)
            DELETE SDO
            FROM %1 SDO
            WHERE SDO.LEDGERDIMENSIONTYPE = %2
            AND NOT EXISTS (
                SELECT 'x'
                FROM BUDGETPRIMARYLEDGERDIMENSIONATTRIBUTE BPLDA
                JOIN LEDGER L ON
                        L.PARTITION = SDO.PARTITION
                    AND L.RECID = BPLDA.PRIMARYLEDGER
                    AND L.ISBUDGETCONTROLENABLED = 1
                JOIN DIRPARTYTABLE DPT ON
                        DPT.INSTANCERELATIONTYPE = %3
                    AND DPT.DATAAREA = SDO.DATAAREAFORCREATION
                    AND DPT.RECID = L.PRIMARYFORLEGALENTITY
                JOIN BUDGETCONTROLDIMENSIONATTRIBUTE BCDA ON
                        BCDA.PARTITION = SDO.PARTITION
                    AND BCDA.BUDGETPRIMARYLEDGERDIMENSIONATTRIBUTE = BPLDA.RECID
                WHERE
                        BPLDA.DIMENSIONATTRIBUTE = SDO.DIMENSIONATTRIBUTE
                    AND BPLDA.PARTITION = SDO.PARTITION
            )
        ",
            _segmentDisplayOrderingAlias,
            enum2int(LedgerDimensionType::BudgetControl),
            tableNum(CompanyInfo));

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>