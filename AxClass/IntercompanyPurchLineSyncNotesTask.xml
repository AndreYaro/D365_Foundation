<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanyPurchLineSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
class IntercompanyPurchLineSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                SalesLine salesLine;
                DocuRef fromDocuRef;

                PurchLine purchLine             = PurchLine::findRecId(refRecId);
                CompanyId interCompanyCompanyId = purchLine.purchTable().InterCompanyCompanyId;

                if (interCompanyCompanyId)
                {
                    //
                    //  Delete all notes on associated salesline in other company
                    //
                    // No need to delete all notes in order to improve performance if new notes are created
                    if (!this.isCreatedDocu())
                    {
                        changecompany(interCompanyCompanyId)
                        {
                            setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                            select salesLine
                            where salesLine.InventTransId == purchLine.InterCompanyInventTransId
                                && salesLine.RecId         != fromRecId;
                            if (salesLine.RecId)
                            {
                                this.deleteDocuRef(salesLine,purchLine.RecId);
                            }
                        }
                    }

                    //
                    //  Create all notes on associated salesline in other company
                    //
                    while select fromDocuRef
                    where fromDocuRef.RefCompanyId == purchLine.DataAreaId
                        && fromDocuRef.RefTableId   == purchLine.TableId
                        && fromDocuRef.RefRecId     == purchLine.RecId
                        // Only process new created notes if new notes are created
                        && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                        && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                    {
                        if (this.canWriteDocuRef(fromDocuRef))
                        {
                            changecompany(interCompanyCompanyId)
                            {
                                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                                select salesLine
                                where salesLine.InventTransId == purchLine.InterCompanyInventTransId
                                    && salesLine.RecId         != fromRecId;
                                if (salesLine.RecId)
                                {
                                    this.writeDocuRef(salesLine,fromDocuRef,purchLine.RecId);
                                }
                            }
                        }
                    }
                }

                if (purchLine.InventRefTransId
                    && purchLine.purchTable().InterCompanyOrder)
                {
                    salesLine = null;
                    select salesLine
                    where salesLine.InventTransId == purchLine.InventRefTransId
                        && salesLine.RecId         != fromRecId;

                    if (salesLine.RecId)
                    {
                        if (!this.isCreatedDocu())
                        {
                            //
                            //  Delete all notes on associated salesline in same company
                            //
                            this.deleteDocuRef(salesLine,purchLine.RecId);
                        }
                        //
                        //  Create all notes on associated salesline in same company
                        //
                        while select fromDocuRef
                        where fromDocuRef.RefCompanyId == purchLine.DataAreaId
                            && fromDocuRef.RefTableId   == purchLine.TableId
                            && fromDocuRef.RefRecId     == purchLine.RecId
                            // Only process new created notes if new notes are created
                            && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                            && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                        {
                            if (this.canWriteDocuRef(fromDocuRef))
                            {
                                this.writeDocuRef(salesLine,fromDocuRef,purchLine.RecId);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanyPurchLineSyncNotesTask construct()
    {
        return new IntercompanyPurchLineSyncNotesTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCreatedDateTimeOfDocuRefBeingWritten</Name>
				<Source><![CDATA[
    protected boolean shouldUseCreatedDateTimeOfDocuRefBeingWritten()
    {
        return docuRefBeingWritten.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>