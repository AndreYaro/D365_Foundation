<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MpsFullRunCtpStatusResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MpsFullRunCtpStatusResolver</c> is responsible for calculating the MPSFullRunCTPStatus status
/// for a salesline.
/// </summary>
internal final class MpsFullRunCtpStatusResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFullRunCTPStatusOnSalesLineModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new status for the modified sales line. 
    /// Gets triggered when a sales line field has been changed from UI.
    /// </summary>
    /// <param name = "_salesLine">The modified sales line.</param>
    /// <returns>The calculated status.</returns>
    internal static MPSFullRunCTPStatus getFullRunCTPStatusOnSalesLineModifiedField(SalesLine _salesLine)
    {
        SalesLine salesLineOrig = _salesLine.orig();

        if (salesLineOrig
            && (_salesLine.QtyOrdered != salesLineOrig.QtyOrdered
                || _salesLine.ShippingDateRequested != salesLineOrig.ShippingDateRequested
                || _salesLine.CustAccount != salesLineOrig.CustAccount
                || _salesLine.CustGroup != salesLineOrig.CustGroup
                || (_salesLine.PlanningPriority != salesLineOrig.PlanningPriority
                    && ReqPriorityBasedPlanningFeature::instance().isEnabled())
                || (_salesLine.DlvMode != salesLineOrig.DlvMode
                    && MpsSalesLineDlvModeModifiedFieldFlight::instance().isEnabled())))
        {
            return MPSFullRunCTPStatus::NotReady;
        }

        return _salesLine.MPSFullRunCTPStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullRunCTPStatusOnModifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new status for the modified inventory dimensions of a sales line.
    /// Gets triggered when the inventory dimensions of a sales line have been changed from UI.
    /// </summary>
    /// <param name = "_salesLine">The modified sales line.</param>
    /// <param name = "_modifiedInventDimFields">The set with modified inventory dimension fields.</param>
    /// <returns>The calculated status.</returns>
    internal static MPSFullRunCTPStatus getFullRunCTPStatusOnModifiedInventDim(SalesLine _salesLine, Set _modifiedInventDimFields)
    {
        if (MpsFullRunCtpStatusResolver::isInventDimChanged(_salesLine, _modifiedInventDimFields))
        {
            return MPSFullRunCTPStatus::NotReady;
        }

        return _salesLine.MPSFullRunCTPStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullRunCTPStatusOnSalesLineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new status of the salesline by checking if the salesline is in sync with latest active dynamic plan result.
    /// Gets triggered when updating the salesline.
    /// </summary>
    /// <param name = "_salesLine">The salesline to be updated.</param>
    /// <returns>The calculated status.</returns>
    internal static MPSFullRunCTPStatus getFullRunCTPStatusOnSalesLineUpdate(SalesLine _salesLine)
    {
        return !MpsFullRunCtpStatusResolver::areConfirmedDatesCleared(_salesLine) 
            && MpsFullRunCtpStatusResolver::isSalesLineInSyncWithActiveDynamicPlanResult(_salesLine)
            && !(_salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::CTP
                && MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabledWithPlanningService()
                && MpsFullRunCtpStatusResolver::isRequestedDateChanged(_salesLine))?
            MPSFullRunCTPStatus::Ready : 
            MPSFullRunCTPStatus::NotReady;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTableFullRunCTPStatusFromAllSalesLines</Name>
				<Source><![CDATA[
    public static MPSFullRunCTPStatus getSalesTableFullRunCTPStatusFromAllSalesLines(SalesId _salesId)
    {
        SalesLine salesLine;

        select firstonly RecId from salesLine
            where salesLine.SalesId == _salesId
                && (salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::FullRunCTP
                || (salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::CTP
                && MpsDeliveryDateControlTypeCTPHelper::isMpsOnlineCTPFeatureEnabledWithPlanningService()))
                && salesLine.MPSFullRunCTPStatus == MPSFullRunCTPStatus::NotReady;

        if (salesLine.RecId)
        {
            return MPSFullRunCTPStatus::NotReady;
        }

        return MPSFullRunCTPStatus::Ready;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestedDateChanged</Name>
				<Source><![CDATA[
    private static boolean isRequestedDateChanged(SalesLine _salesLine)
    {
        SalesLine salesLineOrig = _salesLine.orig();

        return salesLineOrig.ShippingDateRequested != _salesLine.ShippingDateRequested
            || salesLineOrig.ReceiptDateRequested != _salesLine.ReceiptDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineInSyncWithActiveDynamicPlanResult</Name>
				<Source><![CDATA[
    private static boolean isSalesLineInSyncWithActiveDynamicPlanResult(SalesLine _salesLine)
    {
        ReqPlanVersion dynamicPlanVersion = ReqPlanVersion::findActiveReqPlanIdDynamic();

        if (!dynamicPlanVersion)
        {
            return false;
        }

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(InventTable::find(_salesLine.ItemId));
        InventDim           inventDimCriteria = InventDim::find(_salesLine.InventDimId);
        InventDimParm       inventDimParm = MpsFullRunCtpStatusResolver::initInventDimParm(inventDimGroupSetup, inventDimCriteria);

        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_salesLine.InventTransId).RecId;

        var salesLineReqTransMap = MpsFullRunCtpStatusResolver::calculateDynamicPlanReqTransInSyncWithSalesLine(
                                    _salesLine,
                                    inventTransOriginId,
                                    dynamicPlanVersion.RecId,
                                    inventDimCriteria,
                                    inventDimParm);

        return MpsFullRunCtpStatusResolver::isSalesLineInSyncWithDynamicPlanReqTrans(salesLineReqTransMap)
            && MpsFullRunCtpStatusResolver::isInventTransForSalesLineInSyncWithDynamicPlanReqTrans(
                salesLineReqTransMap,
                inventTransOriginId,
                inventDimCriteria,
                inventDimParm,
                dynamicPlanVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimChanged</Name>
				<Source><![CDATA[
    private static boolean isInventDimChanged(SalesLine _salesLine, Set _modifiedInventDimFields)
    {
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(InventTable::find(_salesLine.ItemId));
        InventDim inventDimCriteria = InventDim::find(_salesLine.InventDimId);
        InventDimParm inventDimParm = MpsFullRunCtpStatusResolver::initInventDimParm(inventDimGroupSetup, inventDimCriteria);

        Enumerator modifiedInventDimsEnumerator = _modifiedInventDimFields.getEnumerator();

        FieldId dimFieldId;

        while (modifiedInventDimsEnumerator.moveNext())
        {
            dimFieldId = modifiedInventDimsEnumerator.current();

            if (inventDimParm.isFieldIdEnabled(dimFieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDynamicPlanReqTransInSyncWithSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active dynamic plan ReqTrans records which are in sync with the Sales line, based on specific fields.
    /// </summary>
    private static Map calculateDynamicPlanReqTransInSyncWithSalesLine(
        SalesLine _salesLine,
        InventTransOriginId _inventTransOriginId,
        RefRecId _dynamicPlanVersionRecId,
        InventDim _inventDimCriteria,
        InventDimParm _inventDimParm)
    {
        var reqTransMap = new Map(Types::Container, Types::Integer);
        ReqTrans reqTrans;
        InventDim inventDim;

        while select ReqDateDlvOrig, sum(Qty) from reqTrans
            group by ReqDateDlvOrig
            where reqTrans.InventTransOrigin    == _inventTransOriginId
                && reqTrans.PlanVersion         == _dynamicPlanVersionRecId
                && reqTrans.RefId               == _salesLine.SalesId
                && reqTrans.RefType             == ReqRefType::Sales
                && reqTrans.CustAccountId       == _salesLine.CustAccount
                && reqTrans.CustGroupId         == _salesLine.CustGroup
                && (!ReqPriorityBasedPlanningFeature::instance().isEnabled() 
                    || reqTrans.PlanningPriority == _salesLine.PlanningPriority)
            #InventDimExistsJoin(reqTrans.CovInventDimId, inventDim, _inventDimCriteria, _inventDimParm)
        {
            var key = MpsFullRunCtpStatusResolver::getReqTransMapKey(reqTrans.ReqDateDlvOrig, reqTrans.Qty);
             
            if (!reqTransMap.exists(key))
            {
                reqTransMap.insert(key, 1);
            }
            else
            {
                reqTransMap.insert(key, reqTransMap.lookup(key) + 1);
            }
        }

        return reqTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTransForSalesLineInSyncWithDynamicPlanReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the inventory transactions and the requirement transactions of the active dynamic plan result 
    /// for a sales line are in sync, based on specific fields.
    /// </summary>
    private static boolean isInventTransForSalesLineInSyncWithDynamicPlanReqTrans(
        Map _reqTransMap,
        InventTransOriginId _inventTransOriginId,
        InventDim _inventDimCriteria,
        InventDimParm _inventDimParm,
        ReqPlanVersion _dynamicPlanVersion)
    {
        InventTrans inventTrans;
        InventDim inventDim;

        ReqPlanSched dynamicPlan = ReqPlanSched::find(_dynamicPlanVersion.ReqPlanId);

        // For each InventTrans record included in the planning calculation check if there is a matching ReqTrans record.
        while select DateStatus, sum(Qty) from inventTrans
            group by DateStatus
            where inventTrans.InventTransOrigin     == _inventTransOriginId
                && (inventTrans.StatusIssue         == StatusIssue::OnOrder
                    || inventTrans.StatusIssue      == StatusIssue::ReservOrdered
                    || (dynamicPlan.UseInventOnHand
                        && inventTrans.StatusIssue  == StatusIssue::ReservPhysical))
            #InventDimExistsJoin(inventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm)
        {
            var key = MpsFullRunCtpStatusResolver::getReqTransMapKey(inventTrans.DateStatus, inventTrans.Qty);

            if (_reqTransMap.exists(key))
            {
                var value = _reqTransMap.lookup(key);

                if (value > 1)
                {
                    _reqTransMap.insert(key, _reqTransMap.lookup(key) - 1);
                }
                else
                {
                    _reqTransMap.remove(key);
                }
            }
            else
            {
                return false;
            }
        }

        if (!_reqTransMap.empty())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    private static InventDimParm initInventDimParm(InventDimGroupSetup _inventDimGroupSetup, InventDim _salesLineInventDim)
    {
        InventDimParm inventDimParm;

        inventDimParm.initProductDimensionsAllGroups();
        inventDimParm.initCovPrDimension(_inventDimGroupSetup);

        if (_salesLineInventDim.InventLocationId == '')
        {
            inventDimParm.InventLocationIdFlag = NoYes::No;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineInSyncWithDynamicPlanReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are active dynamic plan ReqTrans records for a sales line, based on the map passed.
    /// </summary>
    private static boolean isSalesLineInSyncWithDynamicPlanReqTrans(Map _salesLineDynamicPlanReqTransMap)
    {
        return !_salesLineDynamicPlanReqTransMap.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransMapKey</Name>
				<Source><![CDATA[
    private static container getReqTransMapKey(date _date, int _qty)
    {
        return [_date, _qty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>areConfirmedDatesCleared</Name>
				<Source><![CDATA[
    private static boolean areConfirmedDatesCleared(SalesLine _salesLine)
    {
        return _salesLine.ShippingDateConfirmed == dateNull() || _salesLine.ReceiptDateConfirmed == dateNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>