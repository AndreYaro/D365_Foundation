<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateSubcontracted</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventValueReportPopulateSubcontracted</c> class generates report data for subcontracted services.
/// </summary>
public class InventValueReportPopulateSubcontracted extends InventValueReportPopulateResource implements CostIAsyncRunnable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventValueReportPopulateSubcontracted),
                                                          staticMethodStr(InventValueReportPopulateSubcontracted, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventValueReportPopulateSubcontracted  dataCollectionTask = new InventValueReportPopulateSubcontracted();
        container                               packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);
        CostManagementInstrumentationLogger logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportPopulateSubcontracted));
        using (var activityContext = logger.inventoryValueReportActivity().populateSubcontracted(dataCollectionTask.parmInventValueReportContract().parmTransactionId()))
        {
            dataCollectionTask.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionsWithDynamicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collects the current balance and transaction data for a particular service item.
    /// </summary>
    protected void buildTransactionsWithDynamicQuery()
    {
        InventValueReportTmpLine            tmpReportLine;
        RecId                               defaultDimensionRecId = -1;
        InventSiteId                        inventSiteId;

        Query q = new Query();
        QueryBuildDataSource qbdsSubContTransView = q.addDataSource(tableNum(InventValueReportSubContUnionAll));
        qbdsSubContTransView.addRange(fieldNum(InventValueReportSubContUnionAll, ServiceItemId)).value(queryValue(resourceId));
        qbdsSubContTransView.addRange(fieldNum(InventValueReportSubContUnionAll, SessionId)).value(queryValue(sessionId()));
        qbdsSubContTransView.orderMode(OrderMode::GroupBy);

        if (this.isDimensionLinkLocked())
        {
            qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, DefaultDimension));
        }

        this.copyRangesFromContractQuery(this.mapReportLineToReportView(), qbdsSubContTransView);
        this.setDimensionRange(fieldNum(InventValueReportSubContUnionAll, DefaultDimension), qbdsSubContTransView);

        // select sum(field)
        qbdsSubContTransView.addSelectionField(fieldNum(InventValueReportSubContUnionAll, Amount), SelectionField::Sum);
        qbdsSubContTransView.addSelectionField(fieldNum(InventValueReportSubContUnionAll, Qty), SelectionField::Sum);

        qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, LineType));
        qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, ServiceItemId));
        qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, ResourceGroup));

        if (inventValueReport.DetailLevel == TotalTrans::Trans)
        {
            qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, Voucher));
            qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, Reference));
        }

        // Group by dates regardless of DetailLevel value, so that the records with TransDate > ToDate could be deleted later
        qbdsSubContTransView.addGroupByField(fieldNum(InventValueReportSubContUnionAll, TransDate));

        QueryRun qr = new QueryRun(q);
        while (qr.next())
        {
            InventValueReportSubContUnionAll subContTransView = qr.get(tableNum(InventValueReportSubContUnionAll));
            if (this.isDimensionLinkLocked())
            {
                if (!DimensionDefaultFacade::areEqual(subContTransView.DefaultDimension, defaultDimensionRecId))
                {
                    inventSiteId = this.getInventSiteId(subContTransView.DefaultDimension);
                    defaultDimensionRecId = subContTransView.DefaultDimension;
                }
            }

            // Only include blank site id if no range has been provided
            if ((subContTransView.Qty || subContTransView.Amount) &&
                (inventSiteId != '' || this.getSiteIdRangeValue() == ''))
            {
                // Update transaction line
                if (inventValueReport.DetailLevel == TotalTrans::Trans)
                {
                    if (subContTransView.TransDate <= this.getActualToDate()
                     && subContTransView.LineType == InventValueReportLineType::Transaction)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::Transaction, subContTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, 1, subContTransView);
                        this.updateReportLine(tmpReportLine);
                    }

                    // Update beginning balance
                    if (inventValueReport.IncludeBeginningBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::BeginningBalance, subContTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, -1, subContTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
                else
                {
                    // Update ending balance
                    if (subContTransView.TransDate > this.getActualToDate()
                     || subContTransView.LineType == InventValueReportLineType::CurrentBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::EndingBalance, subContTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, -1, subContTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the report line that corresponds to the specified view line and line type.
    /// </summary>
    /// <param name="_lineType">
    ///    A member of the <c>InventValueReportLineType</c> enumeration.
    /// </param>
    /// <param name="_subContTransView">
    ///    A record from the <c>InventValueReportSubContUnionAll</c> view.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The invent site ID to be stored in the report line.
    /// </param>
    /// <returns>
    ///    A record from the <c>InventValueReportTmpLine</c> table.
    /// </returns>
    private InventValueReportTmpLine findReportLine(
        InventValueReportLineType           _lineType,
        InventValueReportSubContUnionAll    _subContTransView,
        InventSiteId                        _inventSiteId)
    {
        InventValueReportTmpLine    tmpReportLine;

        // Set fields of tmpReportLine according to the settings and parameters in _subContTransView
        // and the type of report line we're searching for (parameter _lineType).
        // These fields will be then used to find the specific record we're looking for.
        tmpReportLine.clear();
        tmpReportLine.LineType          = _lineType;
        if (inventValueReport.ViewResourceId || inventValueReport.ViewResourceIdTotal)
        {
            tmpReportLine.ResourceId        = _subContTransView.ServiceItemId;
        }
        if (inventValueReport.ViewResourceGroup || inventValueReport.ViewResourceGroupTotal)
        {
            InventTable inventTable = InventTable::find(_subContTransView.ServiceItemId);
            tmpReportLine.ResourceGroupId = inventTable.itemGroupId();
        }

        tmpReportLine.ResourceType      = this.resourceType();
        switch (_lineType)
        {
            case InventValueReportLineType::Transaction:
                tmpReportLine.Voucher           = _subContTransView.Voucher;
                tmpReportLine.TransDate         = _subContTransView.TransDate;
                tmpReportLine.Reference         = _subContTransView.Reference;
                tmpReportLine.ReferenceCategory = InventTransType::ProdLine;
                break;
            case InventValueReportLineType::BeginningBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualFromDate();
                break;
            case InventValueReportLineType::EndingBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualToDate();
                break;
        }

        if (this.isDimensionLinkLocked())
        {
            tmpReportLine.InventSiteId = _inventSiteId;
        }

        // Do the actual search in the buffer based on the fields we set up
        reportLines.find(tmpReportLine);

        return tmpReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToReportView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportSubContUnionAll</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportSubContUnionAll</c>.
    /// </returns>
    protected Map mapReportLineToReportView()
    {
        Map map = new Map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, Reference), fieldNum(InventValueReportSubContUnionAll, Reference));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the resource type that is associated with the current instance of the
    ///    <c>InventValueReportResourceType</c> class.
    /// </summary>
    /// <returns>
    ///    A value from the <c>InventValueReportResourceType</c> enumeration.
    /// </returns>
    /// <remarks>
    ///    Instances of this class always return the <c>DirectOutsourcing</c>.
    /// </remarks>
    protected InventValueReportResourceType resourceType()
    {
        return InventValueReportResourceType::DirectOutsourcing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLineBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the balance in the specified report line.
    /// </summary>
    /// <param name="_tmpReportLine">
    ///    A record of the <c>InventValueReportTmpLine</c> table.
    /// </param>
    /// <param name="_sign">
    ///    The sign of the operation; +1 or -1.
    /// </param>
    /// <param name="_subContTransView">
    ///    A record in the <c>InventValueReportSubContUnionAll</c> view.
    /// </param>
    private void updateReportLineBalance(
        InventValueReportTmpLine _tmpReportLine,
        int _sign,
        InventValueReportSubContUnionAll _subContTransView)
    {
        _tmpReportLine.wipPhysicalPostedAmount += _subContTransView.Amount * _sign;
        _tmpReportLine.wipPhysicalPostedQty += _subContTransView.Qty * _sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportPopulateSubcontracted construct()
    {
        return new InventValueReportPopulateSubcontracted();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>