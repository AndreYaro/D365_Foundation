<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAllocator_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetAllocator_CN</c> class creates journal lines according to
///    the asset allocation rule setup for one transaction date.
/// </summary>
public class AssetAllocator_CN
{
    #define.PercentBase(100)
    boolean isCNRegion;
    Map     mapAllocRuleValid;
    
    private boolean isCNTelemetryLogged;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a bunch of transactions for an asset journal.
    /// </summary>
    /// <param name="_journal">
    ///    The asset journal.
    /// </param>
    /// <param name="_transAmount">
    ///    The amount of the transaction.
    /// </param>
    /// <param name="_assetBook">
    ///    The asset book of the transaction.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the transaction.
    /// </param>
    /// <param name="_assetBudgetModelId">
    ///    The budget model of the transaction; optional.
    /// </param>
    /// <param name="_period">
    ///    The depreciation period of the transaction; optional.
    /// </param>
    /// <param name="_consumptionQty">
    ///    The amount of the fixed asset to consume; optional.
    /// </param>
    /// <param name="_revaluationTrans">
    ///    A flag that indicates whether this transaction is for revaluating the fixed asset; optional.
    /// </param>
    /// <param name="_revaluationAmount">
    ///    The amount to revaluate if it is a revaluation; optional.
    /// </param>
    /// <param name="_custTransId">
    ///    The associated customer transaction record if this is customer-related; optional.
    /// </param>
    /// <param name="_firstTransDate">
    ///    The first transaction date of the transaction; optional.
    /// </param>
    /// <param name="_isProposalAcquisition">
    ///    If this is an acquisition proposal; optional.
    /// </param>
    /// <param name="_isPriorYear">
    ///    If this is for prior year; optional.
    /// </param>
    /// <param name="_assetDocumentType">
    ///    The asset document type; optional.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    ///    The asset document entry recid; optional.
    /// </param>
    /// <param name="_reserveJournals">
    ///    List contains information for special reserve; optional.
    /// </param>
    /// <returns>
    ///    The number of transactions that were created.
    /// </returns>
    public int createTransJournal(
        AssetJournal                   _journal,
        AmountCur                      _transAmount,
        AssetBook                      _assetBook,
        AssetTransDate                 _transDate,
        AssetBudgetModelId             _assetBudgetModelId     = '',
        AssetDepreciationTime          _period                 = 0,
        AssetConsumptionQty            _consumptionQty         = 0,
        AssetRevaluationTrans          _revaluationTrans       = false,
        AssetRevaluationAmount         _revaluationAmount      = 0,
        RecId                          _custTransId            = 0,
        TransDate                      _firstTransDate         = dateNull(),
        boolean                        _isProposalAcquisition  = false,
        boolean                        _isPriorYear            = false,
        AssetDocumentType_JP           _assetDocumentType       = AssetDocumentType_JP::None,
        AssetDocumentRecId_JP          _assetDocumentEntryRecId = 0,
        List                           _reserveJournals        = null)
    {
        assetLedgerAccounts         assetLedgerAccounts;
        AssetpostingProfile         postingProfile;
        AssetAllocationRule_CN      allocationRule;
        AssetAllocationRuleLine_CN  allocationRuleLine;
        Counter                     transCount = 0;
        AmountCur                   allocatedTransAmount;
        AmountCur                   lineAmount, tempPercent;
        boolean                     isLastLine = false;
        RefRecId                    allocRuleRecId;

        Voucher                     voucher = '';
        Voucher_CN                  voucherCN = '';

        AssetBookTable assetBookTable = AssetBookTable::find(_assetBook.BookId);
        AssetTable assetTable = AssetTable::find(_assetBook.AssetId);
        postingProfile =  assetTable.postingProfile(_assetBook.BookId);
        assetLedgerAccounts = assetLedgerAccounts::findForAllocationRule_CN(
            _assetBook.AssetId,
            _assetBook.BookId,
            AssetPost::assetTransTypeJournal2AssetTransType(_journal.parmAssetTransType()),
            postingProfile);

        if (!isCNTelemetryLogged)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00004, funcName());
            isCNTelemetryLogged = true;
        }

        allocRuleRecId = assetLedgerAccounts.AssetAllocationRule;
        if (allocRuleRecId)
        {
            allocationRule = AssetAllocationRule_CN::find(allocRuleRecId);
            if (this.verifyAllocationRule(allocationRule) == NoYes::No)
            {
                // @SYS4002356 - Invalid allocation rule %1.
                throw error(strFmt("@SYS4002356", allocationRule.RuleId));
            }

            Amount lineAmountReportingCurrency = _journal.parmReportingCurrencyAmount();

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00032, funcName());

            while select allocationRuleLine
                order by allocationRuleLine.LocalizedValue
                where allocationRuleLine.AssetAllocationRule == allocationRule.RecId
            {
                tempPercent += allocationRuleLine.Percentage;
                isLastLine = (tempPercent == #PercentBase);

                lineAmount = this.roundOff(_transAmount * allocationRuleLine.Percentage / #PercentBase, assetBookTable.RoundOffDepreciation);
                if (!lineAmount && !isLastLine)
                {
                    continue;
                }

                if (isLastLine || abs(allocatedTransAmount + lineAmount) >= abs(_transAmount))
                {
                    lineAmount = _transAmount - allocatedTransAmount;
                    isLastLine = true;
                }

                _journal.parmAllocationRule_CN(allocationRule);
                _journal.parmAllocationRuleLine_CN(allocationRuleLine);
                _journal.parmPrevVoucher_CN(voucher);

                if (lineAmountReportingCurrency != 0)
                {
                    Amount lineAmountPartReportingCurrency = this.roundOff(
                        lineAmountReportingCurrency * allocationRuleLine.Percentage / #PercentBase, 
                        assetBookTable.RoundOffDepreciationReportingCurrency);
                    _journal.parmReportingCurrencyAmount(lineAmountPartReportingCurrency);
                }

                if (isCNRegion)
                {
                    _journal.parmPrevCNVoucher_CN(voucherCN);
                }
                _journal.createTrans(
                    lineAmount,
                    _assetBook,
                    _transDate,
                    _assetBudgetModelId,
                    _period,
                    _consumptionQty,
                    _revaluationTrans,
                    _revaluationAmount,
                    _custTransId,
                    _firstTransDate,
                    _isProposalAcquisition,
                    _isPriorYear,
                    _assetDocumentType,
                    _assetDocumentEntryRecId,
                    _reserveJournals);
                if (isCNRegion)
                {
                    voucherCN = _journal.parmCNVoucher_CN();
                }
                voucher = _journal.parmVoucher();
                _journal.parmAllocationRuleLine_CN(null);
                _journal.parmAllocationRule_CN(null);
                transCount++;

                allocatedTransAmount = allocatedTransAmount + lineAmount;
                if (isLastLine)
                {
                    break;
                }
            }

            // Set previous voucher to '' so that a new voucher number can be generated in the new period
            _journal.parmPrevVoucher_CN('');
            if (isCNRegion)
            {
                _journal.parmPrevCNVoucher_CN('');
            }
        }
        else
        {
            _journal.createTrans(
                _transAmount,
                _assetBook,
                _transDate,
                _assetBudgetModelId,
                _period,
                _consumptionQty,
                _revaluationTrans,
                _revaluationAmount,
                _custTransId,
                _firstTransDate,
                _isProposalAcquisition,
                _isPriorYear,
                _assetDocumentType,
                _assetDocumentEntryRecId,
                _reserveJournals);
            transCount++;
        }

        return transCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial instance of class <c>AssetAllocator_CN</c>
    /// </summary>
    public void new()
    {
        #isoCountryRegionCodes

        isCNRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]);
        mapAllocRuleValid = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    private AmountCur roundOff(AmountCur _amount, RoundOff _roundOff)
    {
        if (_roundOff == 0.0)
        {
            return CurrencyExchangeHelper::amount(_amount);
        }
        else
        {
            return round(_amount, _roundOff);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAllocationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether the <c>AssetAllocationRule_CN</c> is valid or not
    /// </summary>
    /// <param name="_rule">
    /// <c>AssetAllocationRule_CN</c>
    /// </param>
    /// <returns>
    /// Whether the <c>AssetAllocationRule_CN</c> is valid
    /// </returns>
    private boolean verifyAllocationRule(AssetAllocationRule_CN _rule)
    {
        RefRecId    ruleRecId = _rule.RecId;

        if (!_rule)
        {
            return false;
        }

        if (!mapAllocRuleValid.exists(ruleRecId))
        {
            mapAllocRuleValid.insert(ruleRecId, AssetAllocationRule_CN::validateAllocationRule_CN(_rule));
        }
        return mapAllocRuleValid.lookup(ruleRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>