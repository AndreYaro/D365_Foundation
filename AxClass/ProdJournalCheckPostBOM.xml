<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCheckPostBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCheckPostBOM extends ProdJournalCheckPost implements BatchRetryable
{
    Map prodBOMMap;
    Map endConsumptionMap;

    InventJournalCheckConsolidatedQty inventJournalCheckConsolidatedQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdBOMMapEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the <c>ProdBOM</c> records for later obtained cost amounts update.
    /// </summary>
    /// <param name="_prodId">
    /// The production identifier.
    /// </param>
    /// <param name="_prodBOM">
    /// The production BOM line record.
    /// </param>
    /// <param name="_priceDate">
    /// The consumed item price date.
    /// </param>
    /// <param name="_inventItemPrice">
    /// The item price record.
    /// </param>
    /// <remarks>
    /// This is a performance improvement measure. If one production BOM line is referenced by multiple
    /// records in the Picking List journal, the obtained cost amounts for this line will be updated only
    /// one time. The <see cref="M:ProdJournalCheckPostBOM.updateRealCalcBOM" /> is finally called when all
    /// journal lines are processed.
    /// </remarks>
    protected void addProdBOMMapEntry(
        ProdId          _prodId,
        ProdBOM         _prodBOM,
        TransDate       _priceDate,
        InventItemPrice _inventItemPrice)
    {
        if (prodBOMMap == null)
        {
            prodBOMMap = new Map(Types::String, Types::Class);
        }

        if (!prodBOMMap.exists(_prodId))
        {
            prodBOMMap.insert(_prodId, new Set(Types::Container));
        }

        Set prodBOMSet = prodBOMMap.lookup(_prodId);
        prodBOMSet.add([_prodBOM.RecId, _priceDate, _inventItemPrice.RecId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    public boolean checkJournal(JournalTransList _journalTransList)
    {
        inventJournalCheckConsolidatedQty = new InventJournalCheckConsolidatedQty();

        return super(_journalTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean             ok             = true;
        ProdJournalBOM      prodJournalBOM = _journalTransData.journalTrans();
        // <GIN>
        // </GIN>

        setprefix(fieldLabelValue(prodJournalBOM.TableId, fieldnum(ProdJournalBOM, ProdId), prodJournalBOM.ProdId));
        setprefix(fieldLabelValue(prodJournalBOM.TableId, fieldnum(ProdJournalBOM, ItemId), prodJournalBOM.ItemId));

        if (!super(_journalTransData))
        {
            return false;
        }

        if (!prodJournalBOM.InventTransId)
        {
            return checkFailed("@SYS50830");
        }

        // Serial active raw materials must have a serial number at consumption
        if (!prodJournalBOM.checkJournalBOMSerialRegisteredAtConsumption())
        {
            return false;
        }

        if (!prodJournalBOM.checkLicensePlateId())
        {
            return false;
        }

        ProdBOM prodBOM = ProdBOM::findTransId(prodJournalBOM.InventTransId);

        if (   !prodBOM.checkValid()
            || !prodBOM.checkRefProdJournalBOM(prodJournalBOM))
        {
            return false;
        }

        // <GEERU>
        if (! prodJournalBOM.checkBOMConsump_RU())
        {
            ok = false;
        }
        // </GEERU>

        // <GIN>
        if (TaxParameters::isExciseEnable_IN())
        {
            ProdTable prodTable = prodJournalBOM.prodTable();
            TaxInformation_IN taxInformationProdTable = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(prodTable).TaxInformation);
            TaxInformation_IN taxInformationProdJournalBOM = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(prodJournalBOM).TaxInformation);

            // Field "ECC number" must match for BOM and BOM line.
            if (taxInformationProdTable.ManECCRegistrationNumberTable != taxInformationProdJournalBOM.ManECCRegistrationNumberTable)
            {
                return checkFailed("@SYP4860467");
            }
        }
        // </GIN>

        InventUpd_Physical physical = InventUpd_Physical::newCheckPostProdJournalBOM(prodBOM,prodJournalBOM, journalTableData.journalTable());

        physical.movement().parmInventJournalCheckConsolidatedQty(inventJournalCheckConsolidatedQty);

        if (!physical.check(prodJournalBOM.TransDate))
        {
            ok = false;
        }

        if (ok && prodJournalBOM.isProjMethodConsumed())
        {
            ok = ProjPost::newCheckTrans(prodJournalBOM).checkTrans();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endConsumptionNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the remaining consumption should be reset to zero for a specified
    ///    <c>ProdJournalBOM</c> record.
    /// </summary>
    /// <param name="_prodJournalBOM">
    ///    A <c>ProdJournalBOM</c> record.
    /// </param>
    /// <returns>
    ///    true if the remaining quantity must be reset to zero; otherwise, false.
    /// </returns>
    protected boolean endConsumptionNow(ProdJournalBOM _prodJournalBOM)
    {
        ProdJournalBOM      prodJournalBOM;
        Set                 set;
        boolean             result;

        if (!endConsumptionMap)
        {
            endConsumptionMap = new Map(Types::String,Types::Class);
        }

        if (endConsumptionMap.exists(_prodJournalBOM.InventTransId))
        {
            set = endConsumptionMap.lookup(_prodJournalBOM.InventTransId);

            if (!set)
            {
                //null in the map means there no journal lines for the lot with end consumption
                //or the lot is present in another unposted journal.
                result = false;
            }
            else
            {
                //remove self from set
                //if no further records remain, the result must be true.
                set.remove(_prodJournalBOM.RecId);
                result = set.elements() == 0;
            }
        }
        else
        {
            if (_prodJournalBOM.existsOtherTransIdNotPosted())
            {
                //insert null, present in another journal
                endConsumptionMap.insert(_prodJournalBOM.InventTransId,null);
            }
            else
            {
                set = new Set(Types::Int64);
                boolean hasEndConsump = _prodJournalBOM.EndConsump == NoYes::Yes;

                while select RecId, EndConsump from prodJournalBOM
                    where prodJournalBOM.InventTransId == _prodJournalBOM.InventTransId
                       && prodJournalBOM.JournalId     == _prodJournalBOM.JournalId
                       && prodJournalBOM.RecId         != _prodJournalBOM.RecId
                {
                    hasEndConsump =    hasEndConsump
                                    || prodJournalBOM.EndConsump == NoYes::Yes;

                    set.add(prodJournalBOM.RecId);
                }

                if (hasEndConsump)
                {
                    //insert set into map
                    //return true if current record is the only record for the lot
                    endConsumptionMap.insert(_prodJournalBOM.InventTransId,set);
                    result = set.elements() == 0;
                }
                else
                {
                    //insert null, no end consumption flag present for this lot
                    endConsumptionMap.insert(_prodJournalBOM.InventTransId,null);
                    result = false;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProdBOMForJournalBOMForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProdBOM</c> record for the production picking journal line.
    /// </summary>
    /// <param name = "_prodJournalBOM">The <c>ProdJournalBOM</c> record</param>
    /// <returns>The <c>ProdBOM</c> record.</returns>
    /// <remarks>
    /// When certain processes are used (e.g. production picking on mobile device with flushing principle: Available at location)
    /// several picking list journals can be created and posted concurrently.
    /// On one hand we want to make sure that the locks on the ProdBOM table are held for as little time as possible 
    /// to allow fast interactive scenarios to complete quickly. 
    /// So, by default, be we will fetching the <c>ProdBOM</c> record using the optimistic concurrency mechanism.
    /// However, we want to avoid the need for the users to constantly check the status of the picking list posting batch jobs 
    /// and we want to increase the chances of the last update conflict retry to succeed. 
    /// Hence, in the unlikely event, when the last retry attempted is reached, we will be taking a pessimistic lock on <c>ProdBOM</c> 
    /// to ensure that picking list posting goes through.
    /// </remarks>
    private ProdBOM findProdBOMForJournalBOMForUpdate(ProdJournalBOM _prodJournalBOM)
    {
        #OCCRetryCount

        if (xSession::currentRetryCount() == #RetryNum - 1)
        {
            using (var sys = ProdInstrumentationSegmentFactory::create( 
                ProdInstrumentationActivities::ProdJournalCheckPostPessimisticLockOnProdBOM, _prodJournalBOM.RecId))
            {
                return ProdBOM::findTransIdPessimistic(_prodJournalBOM.InventTransId);
            }
        }
        
        return ProdBOM::findTransId(_prodJournalBOM.InventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventUpdPhysical</Name>
				<Source><![CDATA[
    protected InventUpd_Physical getInventUpdPhysical(ProdBOM prodBOM, ProdJournalBOM prodJournalBOM, ProdJournalTable prodJournalTable)
    {
        return InventUpd_Physical::newCheckPostProdJournalBOM(prodBOM, prodJournalBOM,prodJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    public void postTransLedger(
        JournalTransData _journalTransData,
        LedgerVoucher    _ledgerVoucher)
    {
        InventMovement                  movement;

        ProdBOMTransProj                prodBOMTransProj;

        TransDate                       priceDate;
        CostAmount                      currentCostAmountPhysical;
        Qty                             currentQtyPhysical;
        InventItemPrice                 inventItemPrice;
        InventItemCostGroupRollupList   inventItemCostGroupRollupList;

        ProdJournalTable prodJournalTable = journalTableData.journalTable();
        ProdJournalBOM prodJournalBOM = _journalTransData.journalTrans();

        setprefix(fieldLabelValue(prodJournalBOM.TableId, fieldnum(ProdJournalBOM, ProdId), prodJournalBOM.ProdId));
        setprefix(fieldLabelValue(prodJournalBOM.TableId, fieldnum(ProdJournalBOM, ItemId), prodJournalBOM.ItemId));

        ProdTable prodTable = prodJournalBOM.prodTable();

        super(_journalTransData, _ledgerVoucher);

        if (!prodJournalBOM.InventTransId)
        {
            throw error("@SYS50830");
        }

        if (EcoResTrackingDimensionGroupItem::isItemActiveSerialAtConsumption(prodJournalBOM.ItemId))
        {
            WHSProdMaterialSerialRegistration::newFromProdJournalBOM(prodJournalBOM).registerRawMaterialsAtConsumption();
        }

        ProdBOM prodBOM = this.findProdBOMForJournalBOMForUpdate(prodJournalBOM);

        if (   !prodBOM.checkValid()
            || !prodBOM.checkRefProdJournalBOM(prodJournalBOM))
        {
            throw error("@SYS21533");
        }

        if (prodJournalTable.InventControlProposal)
        {
            if (   abs(prodJournalBOM.InventProposal) > abs(prodJournalBOM.InventConsump)
                && !prodJournalBOM.InventReturnFlag)
            {
                var qtyDelta    = prodJournalBOM.InventConsump - prodJournalBOM.InventProposal;
                var qtyBOMDelta = prodJournalBOM.bomConsump    - prodJournalBOM.bomProposal;
                var cwQtyDelta  = prodJournalBOM.PdsCWInventConsump - prodJournalBOM.PdsCWInventProposal;

                // For CW items we should only perform the update if the CW quantity changes.
                if (!prodJournalBOM.mandatoryPick()
                    && (cwQtyDelta != 0
                        || !PdsGlobal::pdsIsCWItem(prodJournalBOM.ItemId)))
                {
                    movement = InventMovement::construct(prodBOM,InventMovSubType::None, prodJournalBOM);
                    var childReference = InventUpd_ChildReference::newParameters(movement, -qtyDelta, -qtyBOMDelta, false, '', -cwQtyDelta);
                    childReference.updateNow();
                }

                prodJournalBOM.subProdBOMRemain(prodBOM, qtyDelta, qtyBOMDelta, prodJournalTable.InventControlProposal, cwQtyDelta);
            }
        }

        if (InventReportDimHistory::canCreateHistory(prodJournalBOM))
        {
            InventReportDimHistory::addFromProdJournalBOM(prodJournalBOM);
        }

        if (prodBOM.isProjMethodConsumed())
        {
            this.projForecastReturn(prodBOM, prodJournalBOM);
        }

        Qty remainInventPhysical = prodJournalBOM.calcRemainInventPhysical(prodBOM);
        if (remainInventPhysical != 0 && prodJournalBOM.calcRemainBOMPhysical(prodBOM) == 0)
        {
            // Special case that can occur due to rounding
            // Move the remaining invent qty to the child to allow it to be deprecated later
            movement = InventMovement::construct(prodBOM,InventMovSubType::None, prodJournalBOM);           
            var childReference = InventUpd_ChildReference::newParameters(movement, -remainInventPhysical, 0,false,'');
            childReference.updateNow();
            
            if (remainInventPhysical > -movement.transIdSum().estimatedIssue())
            {
                InventDimParm inventDimParm;
                movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
                InventUpd_Picked::newParameters(movement, prodJournalBOM.inventDim(), inventDimParm, prodJournalBOM.inventDim(), inventDimParm,
                                                remainInventPhysical, '', 0).updateNow();
            }

            InventUpd_ChangeDimension::updateForceInventTrans(movement, prodJournalBOM.inventDim(), true, true);
        }

        InventUpd_Physical physical = this.getInventUpdPhysical(prodBOM, prodJournalBOM,prodJournalTable);
        InventMovement inventMovement = physical.movement();
        physical.updateNow(_ledgerVoucher);

        if (abs(physical.updPhysical()) < abs( prodJournalBOM.InventConsump))
        {
            var qty     = - physical.updPhysical()      - prodJournalBOM.InventConsump;
            var qtyBOM  = - physical.updPhysicalUnit()  - prodJournalBOM.bomConsump;

            var pdsCWInventQty  = - physical.pdsCWUpdPhysical() - prodJournalBOM.PdsCWInventConsump;

            movement = InventMovement::construct(prodBOM,InventMovSubType::None, prodJournalBOM);

            var childReference = InventUpd_ChildReference::newParameters(movement, -qty, -qtyBOM, false, '', -pdsCWInventQty);
            childReference.updateNow();

            // actual consumption quantities should be reflected in a picking list line
            prodJournalBOM.InventConsump += qty;
            prodJournalBOM.bomConsump    += qtyBOM;
            prodJournalBOM.PdsCWInventConsump += pdsCWInventQty;
            prodJournalBOM.doUpdate();
        }

        if (   prodJournalBOM.EndConsump
            && !prodBOM.EndConsump)
        {
            prodBOM.EndConsump = NoYes::Yes;
            prodBOM.doUpdate();
        }

        if (
            (
            (prodBOM.RemainInventPhysical
            ||  prodBOM.RemainBOMPhysical
            ||  prodBOM.PdsCWRemainPhysical
            )
            && this.endConsumptionNow(prodJournalBOM)
            // Remove the Non-CW remainder when the full CW quantity has been picked
            )
            || (PdsGlobal::pdsIsCWItem(prodJournalBOM.ItemId)
                && !prodBOM.PdsCWRemainPhysical
                && prodBOM.RemainInventPhysical)
            )
        {
            prodBOM.RemainBOMPhysical       = 0;
            prodBOM.RemainInventPhysical    = 0;

            prodBOM.PdsCWRemainPhysical     = 0;

            if (!ProdTable::find(prodBOM.InventRefId).ProjId || prodJournalBOM.BOMConsump)
            {
                ProdBOM::updateExclBackStatus(prodBOM);
            }
        }

        // For std cost items use the cost that has been added to
        // the inventCostTrans
        if (!physical.movement().inventModelType().stdCostBased())
        {
            currentCostAmountPhysical = -physical.updPhysicalAmountLedger();
            currentQtyPhysical        = -physical.updPhysical();
        }
        else
        {
            if (physical.updPhysical() != 0)
            {
                currentCostAmountPhysical       = - physical.movement().inventModelType().inventCostMovement().totalCostAmount();
                currentQtyPhysical              = - physical.movement().inventModelType().inventCostMovement().totalQty();
                inventItemPrice                 = physical.movement().inventModelType().inventCostMovement().parmInventItemPrice();

                var costBreakdownInsertionRule = CostBreakdownInsertionRule::construct();
                costBreakdownInsertionRule.parmItemId(prodJournalBOM.ItemId);

                if (costBreakdownInsertionRule.mustInsertCostBreakdown())
                {
                    inventItemCostGroupRollupList   = InventItemCostGroupRollupList::newStdCostList(inventItemPrice.RecId, currentQtyPhysical);
                }
            }
            else
            {
                currentCostAmountPhysical = 0;
                currentQtyPhysical        = 0;
            }
        }

        costAmountPhysical += currentCostAmountPhysical;

        if (prodBOM.isProjMethodConsumed())
        {
            prodBOMTransProj.initFromProdJournalBOM(prodJournalBOM);
            ProjItemTrans projItemTrans = ProjItemTrans::findInvent(prodJournalBOM.InventTransId, inventMovement.projAdjustRefId());

            if (projItemTrans)
            {
                prodBOMTransProj.ProjTransId = projItemTrans.ProjTransId;
            }

            prodBOMTransProj.insert();
        }

        // For catch weight items, attempt to sum the inventTrans records since they previously could have had different statuses.
        if (InventTable::isItemCatchWeightAndWarehouseProcessEnabled(prodBOM.ItemId))
        {
            InventTrans formulaInventTrans = InventTrans::findTransId(prodBOM.InventTransId, true);

            formulaInventTrans.updateSumUp();
        }

        //  Save ProdBOM records for bulk update of ProdCalcTrans
        // <GEERU>
        if (!ProdTableJour::isHistoricalCost(prodTable.ProdId) || prodTable.calculatingWIP_RU())
        // </GEERU>
        {
            // Find the last cost price, revaluation entries to this date have been created
            priceDate = dateMax();

            this.addProdBOMMapEntry(prodTable.ProdId, prodBOM, priceDate, inventItemPrice);
        }

        if (   !inventCostProdIndirect
            || inventCostProdIndirect.parmVoucher() != _ledgerVoucher.lastVoucher())
        {
            inventCostProdIndirect = InventCostProdIndirect::newFromLedgerVoucher(_ledgerVoucher);
        }

        this.addInventCostProdIndirectRelation(_journalTransData, inventCostProdIndirect);

        if (currentCostAmountPhysical != 0 || currentQtyPhysical != 0)
        {
            InventTrans inventTrans = InventTrans::findTransId(prodTable.InventTransId);

            if (prodTable.inventTable().PmfProductType == PmfProductType::MainItem)
            {
                // no inventTrans
                inventCostProdIndirect.calcInvent(InventCostProdIndirectData_Invent::newConsumptionProdTable(prodTable,
                                                                                                             0,
                                                                                                             prodBOM.ItemId,
                                                                                                             currentQtyPhysical,
                                                                                                             currentCostAmountPhysical,
                                                                                                             inventItemCostGroupRollupList));
            }

            else if (!inventTrans)
            {
                inventCostProdIndirect.calcInvent(InventCostProdIndirectData_Invent::newConsumptionFromProdTable(prodTable,
                                                                                                                 0,
                                                                                                                 prodBOM.ItemId,
                                                                                                                 currentQtyPhysical,
                                                                                                                 currentCostAmountPhysical,
                                                                                                                 inventMovement.mustBeBookedPhysically(),
                                                                                                                 inventItemCostGroupRollupList));
            }
            else
            {
                inventCostProdIndirect.calcInvent(InventCostProdIndirectData_Invent::newConsumptionFromInventTrans(inventTrans,
                                                                                                               0,
                                                                                                               prodBOM.ItemId,
                                                                                                               currentQtyPhysical,
                                                                                                               currentCostAmountPhysical,
                                                                                                               inventMovement.mustBeBookedPhysically(),
                                                                                                               inventItemCostGroupRollupList
                                                                                                               // <GEERU>
                                                                                                               , countryRegion_RU && prodJournalBOM.StornoPhysical_RU
                                                                                                               // </GEERU>
                                                                                                               ));
            }
        }

        // <GIN>
        if (TaxParameters::isExciseEnable_IN())
        {
            this.updateExciseRegister_IN(prodJournalBOM);
        }
        // </GIN>

        if (BOMParameters::find().EnableTrackedComponents)
        {
            // manually created RAF journal lines with pre-created product LOT associations => update journal references.
            ProdAsBuiltBOMComponentLotAssociation::updateRecordsetFromPickingListJournalLine(prodJournalBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefix</Name>
				<Source><![CDATA[
    public str prefix()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return "@SYS28450" + ' - ' + "@SYS60017";
        }

        return "@SYS5943" + ' - ' + "@SYS60017";
    }

]]></Source>
			</Method>
			<Method>
				<Name>projForecastReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the item forecast for the packing slip return.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production bills of materials (BOM) table buffer.
    /// </param>
    /// <param name="_prodJournalBOM">
    ///    The BOM journal transaction table buffer.
    /// </param>
    public void projForecastReturn(
        ProdBOM        _prodBOM,
        ProdJournalBOM _prodJournalBOM
    )
    {
        ProjForecastReduce              projForecastReduce;
        ProjItemTrans                   projItemTrans;
        ProjForecastReductionHistory    projForecastReductionHistory;

        if (_prodJournalBOM.InventReturnFlag)
        {
            while select projItemTrans
                where   projItemTrans.ProjTransIdRef    == _prodBOM.ProjTransId &&
                        projItemTrans.Qty               != 0
            {
                select firstonly QtyReduced, CostPriceReduced from projForecastReductionHistory
                    where projForecastReductionHistory.ProjTransId == projItemTrans.ProjTransId;

                if (projForecastReductionHistory.QtyReduced >0)
                {
                    projForecastReduce=ProjForecastReduce::newForecastReturn(projItemTrans.ProjTransId,
                                                                             ProjTransType::Item,
                                                                             -projForecastReductionHistory.QtyReduced,
                                                                             -projForecastReductionHistory.QtyReduced * projItemTrans.costAmountTotal() /projItemTrans.Qty);
                    projForecastReduce.run();
                }
                else if (projForecastReductionHistory.CostPriceReduced >0)  //return to lump sum
                {
                    projForecastReduce=ProjForecastReduce::newForecastReturn(projItemTrans.ProjTransId,
                                                                             ProjTransType::Item,
                                                                             -projForecastReductionHistory.CostPriceReduced * projItemTrans.Qty /projItemTrans.costAmountTotal(),
                                                                             -projForecastReductionHistory.CostPriceReduced);
                    projForecastReduce.run();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>super</c> method.
    /// </summary>
    /// <remarks>
    ///    This method is overwritten to add a new attribute.
    /// </remarks>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorJournalLine</Name>
				<Source><![CDATA[
    protected void transferErrorJournalLine(
        JournalTransMap  _journalTrans,
        JournalTableData _toJournalTableData,
        JournalTableMap  _toJournalTable)
    {
        ProdJournalBOM      prodJournalBOM = _journalTrans;

        if (prodJournalBOM.InventTransId)
        {
            InventTransOrigin::changeReferenceId(InventTransOrigin::findByInventTransId(prodJournalBOM.InventTransId).RecId,prodJournalBOM.prodBOM().ProdId);
        }

        super(_journalTrans, _toJournalTableData, _toJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProdCalcTrans</c> table by using the obtained cost amounts of production BOM lines.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order to update.
    /// </param>
    protected void updateRealCalcBOM(ProdTable _prodTable)
    {
        RecId           prodBOMRecID;
        ProdBOM         prodBOM;
        TransDate       priceDate;
        RecId           inventItemPriceRecId;

        if (!(prodBOMMap.exists(_prodTable.ProdId) && this.mustUpdateRealCalcProduction()))
        {
            return;
        }

        Set prodBOMSet = prodBOMMap.lookup(_prodTable.ProdId);
        SetEnumerator recIdEnumerator = prodBOMSet.getEnumerator();
        while (recIdEnumerator.moveNext())
        {
            [prodBOMRecID, priceDate, inventItemPriceRecId] = recIdEnumerator.current();

            select firstonly prodBOM
                where prodBOM.RecId == prodBOMRecID;

            InventItemPrice inventItemPrice = InventItemPrice::stdCostFindDate(prodBOM.inventTable(), maxDate(), prodBOM.InventDimId);

            ProdCalcTrans::updateRealCalcBOM(_prodTable, prodBOM, priceDate, inventItemPrice);

            PmfCoByProdCalcTrans::updateRealCalcBOM(_prodTable, prodBOM, priceDate, inventItemPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates material obtained cost amounts.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production order to update.
    /// </param>
    /// <remarks>
    ///    The obtained indirect costs and production costs are updated by the super-class.
    /// </remarks>
    protected void updateRealCalcProduction(ProdTable _prodTable)
    {
        this.updateRealCalcBOM(_prodTable);
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS60017";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    public static ProdJournalCheckPostBOM newJournalCheckPost(
        boolean             _autoBlock,
        boolean             _showInfoResult,
        JournalCheckPostType _journalCheckPostType,
        TableId              _tableId,
        JournalId            _journalId)
    {
        ProdJournalCheckPostBOM journalCheckPost = new ProdJournalCheckPostBOM();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_autoBlock);
        journalCheckPost.parmShowInfoResult(_showInfoResult);
        journalCheckPost.parmJournalCheckPostType(_journalCheckPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdJournalCheckPostBOM</c> object for posting a journal.
    /// </summary>
    /// <param name = "_prodJournalId">The id of the journal.</param>
    /// <param name = "_showInfoResult">A boolean indicating whether to show the results of the posting in the info log.</param>
    protected void initPostJournal(ProdJournalId _prodJournalId, boolean _showInfoResult)
    {
        this.getLast();
        this.parmAutoBlock(true);
        this.parmShowInfoResult(_showInfoResult);
        this.parmJournalCheckPostType(JournalCheckPostType::Post);
        this.parmJournalTableId(tableNum(ProdJournalTable));
        this.parmJournalId(_prodJournalId);
        this.parmVoucher('');
        this.parmThrowCheckFailed(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProdJournalCheckPostBOM</c> class for posting a journal.
    /// </summary>
    /// <param name = "_prodJournalId">The id of the journal.</param>
    /// <param name = "_showInfoResult">A boolean indicating whether to show the results of the posting in the info log.</param>
    /// <returns>A new instance of the <c>ProdJournalCheckPostBOM</c> class.</returns>
    public static ProdJournalCheckPostBOM newPostJournal(ProdJournalId _prodJournalId, boolean _showInfoResult)
    {
        ProdJournalCheckPostBOM journalCheckPost = new ProdJournalCheckPostBOM();
        journalCheckPost.initPostJournal(_prodJournalId, _showInfoResult);
        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExciseQuantityRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the excise quantity register.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The tax model excise taxable information.
    /// </param>
    protected void handleExciseQuantityRegister_IN(TaxModelExciseTaxable_IN _taxModelExciseTaxable)
    {
        TaxExciseQuantityRegister_IN            register;

        if (_taxModelExciseTaxable)
        {
            if (_taxModelExciseTaxable.isExicseDSA())
            {
                register = TaxExciseRegisterFacade_IN::updateDSAQuantityRegister(_taxModelExciseTaxable);
            }
            else if (_taxModelExciseTaxable.getExciseRecordType() != ExciseRecordType_IN::RG23A
                    || _taxModelExciseTaxable.getExciseRecordType() != ExciseRecordType_IN::RG23C)
            {
                register = TaxExciseRegisterFacade_IN::updatePartIRegister(_taxModelExciseTaxable);
            }

            if (register.RecId != 0)
            {
                TaxTransExtensionRGQuantityHandler_IN rgQuantityHandler = new TaxTransExtensionRGQuantityHandler_IN();
                rgQuantityHandler.setExciseRegister(register);
                rgQuantityHandler.setTaxModelTaxable(_taxModelExciseTaxable as TaxModelTaxable_IN);
                rgQuantityHandler.init();
                rgQuantityHandler.setData();
                TaxTrans_IN taxTransIN = rgQuantityHandler.post();

                register.selectForUpdate(true);
                register.TaxTrans_IN = taxTransIN.RecId;
                register.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the excise register information.
    /// </summary>
    /// <param name="_prodJournalBOM">
    /// The production journal transaction.
    /// </param>
    protected void updateExciseRegister_IN(ProdJournalBOM _prodJournalBOM)
    {
        TaxModelExciseTaxable_IN taxModelExciseTaxable = TaxModelDocLineFactory::newTaxModelDocLine(_prodJournalBOM) as TaxModelExciseTaxable_IN;

        if (taxModelExciseTaxable)
        {
            if (!taxModelExciseTaxable.getExciseTaxRegistrationRefRecId())
            {
                throw error(strFmt("@SYS26332","@GLS5102"));
            }
            if (taxModelExciseTaxable.shouldPostQuantityRegister())
            {
                this.handleExciseQuantityRegister_IN(taxModelExciseTaxable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        super(_journalTable);

        if (BOMParameters::find().EnableTrackedComponents)
        {
            ProdJournalTable journalHeader = ProdJournalTable::find(_journalTable.JournalId);            
            if (journalHeader.JournalType != ProdJournalType::Picklist)
            {
                return;
            }

            ProdAsBuiltBOMComponentLotAssociation::complete(journalHeader.ProdId, journalHeader.JournalId);

            if (FeatureStateProvider::isFeatureEnabled(SCTTracingActivityFeature::instance()))
            {
                SCTTracingActivityBuilder_ProdPickingList::createTracingActivity(journalHeader);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>