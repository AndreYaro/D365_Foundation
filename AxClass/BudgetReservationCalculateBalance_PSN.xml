<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationCalculateBalance_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationCalculateBalance_PSN</c> class calculates journalized, relieved, total balance and remaining balance amounts
/// for a budget reservation in the accounting currency type or the currency type specified.
/// </summary>
public class BudgetReservationCalculateBalance_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts and returns the provided transaction currency amount to the specified currency.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// Legal entity record ID to use for getting the exchange rate.
    /// </param>
    /// <param name="_accountingDate">
    /// Accounting date to use for getting the exchange rate.
    /// </param>
    /// <param name="_transactionCurrency">
    /// The currency code of the transaction.
    /// </param>
    /// <param name="_targetCurrency">
    /// The currency code to convert the transaction amount to.
    /// </param>
    /// <param name="_transactionCurrencyAmount">
    /// The transaction currency amount to covert to the specified currency.
    /// </param>
    /// <returns>
    /// The transaction currency amount converted to the specified currency.
    /// </returns>
    public static Amount calculateCurrencyAmount(
        LegalEntity     _legalEntityRecId,
        AccountingDate  _accountingDate,
        CurrencyCode    _transactionCurrency,
        CurrencyCode    _targetCurrency,
        AmountCur       _transactionCurrencyAmount)
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(_legalEntityRecId), _accountingDate);
    
        return currencyExchangeHelper.calculateCurrencyToCurrency(_transactionCurrency, _targetCurrency, _transactionCurrencyAmount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationLineTotalBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount available to be relieved for the specified budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of the <c>BudgetReservationLine_PSN</c> to check.
    /// </param>
    /// <param name="_draftRelievingSourceDocumentHeaderRecId">
    /// The record ID of the draft source document referencing the
    /// <c>BudgetReservationLine_PSN</c>; optional.
    /// </param>
    /// <returns>
    /// The amount available to be relieved for the budget reservation line.
    /// </returns>
    /// <remarks>
    /// If <paramref name="_draftRelievingSourceDocumentHeaderRecId"/> is not specified, then the method will calculate draft relieving
    /// amounts for all documents referencing the budget reservation line.
    /// </remarks>
    public static AmountCur getBudgetReservationLineTotalBalance(
        BudgetReservationLineRecId_PSN  _budgetReservationLineRecId,
        SourceDocumentHeaderRecId       _draftRelievingSourceDocumentHeaderRecId = 0)
    {
        BudgetReservationLine_PSN   localBudgetReservationLine;
        BudgetReservationHeader_PSN localBudgetReservationHeader;
        SourceDocumentLine          sourceDocumentLineLocal;
        Amount                      totalRelievedAmount;
        AmountCur                   availableBalance;
        AmountCur                   journalizedAmount;
        Amount                      finalizedAmount;
    
        if (_budgetReservationLineRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        select firstonly localBudgetReservationLine
            where localBudgetReservationLine.RecId == _budgetReservationLineRecId
            join SourceDocumentHeader from localBudgetReservationHeader
                where localBudgetReservationHeader.RecId == localBudgetReservationLine.BudgetReservationHeader_PSN
            join AccountingStatus from sourceDocumentLineLocal
                where sourceDocumentLineLocal.RecId == localBudgetReservationLine.SourceDocumentLine;
        
        if (BudgetReservationLineBalanceCurrencyFlight::instance().isEnabled())
        {
            availableBalance = BudgetReservationCalculateBalance_PSN::calculateBudgetReservationLineBalance(
                localBudgetReservationLine,
                localBudgetReservationHeader.SourceDocumentHeader,
                _draftRelievingSourceDocumentHeaderRecId);
        }
        else
        {
            totalRelievedAmount = BudgetReservationCalculateBalance_PSN::getPostedRelievedAmount(
                localBudgetReservationHeader.SourceDocumentHeader,
                localBudgetReservationLine.SourceDocumentLine);
    
            totalRelievedAmount += BudgetReservationCalculateBalance_PSN::getDraftRelievedAmount(
                localBudgetReservationLine,
                _draftRelievingSourceDocumentHeaderRecId);
    
            journalizedAmount = BudgetReservationCalculateBalance_PSN::getJournalizedAmount(
                localBudgetReservationHeader.SourceDocumentHeader,
                localBudgetReservationLine.SourceDocumentLine);
        
            if (sourceDocumentLineLocal.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized)
            {
                finalizedAmount = BudgetReservationCalculateBalance_PSN::getFinalizedAmount(
                    localBudgetReservationHeader.SourceDocumentHeader,
                    localBudgetReservationLine.SourceDocumentLine);
            }
        
            availableBalance = journalizedAmount - totalRelievedAmount - finalizedAmount;
        }
    
        return availableBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the draft amounts relieved by the downstream document(s) for the given budget reservation line in accounting currency.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// Record ID of the budget reservation line to check.
    /// </param>
    /// <param name="_relievingSourceDocumentHeaderRecId">
    /// Record ID of the draft document referencing the budget reservation line; optional.
    /// </param>
    /// <returns>
    /// The draft amounts in accounting currency relieved by all or the provided document referencing the given budget reservation line.
    /// </returns>
    public static AmountMST getDraftRelievedAmount(
        BudgetReservationLine_PSN _budgetReservationLine,
        SourceDocumentHeaderRecId _relievingSourceDocumentHeaderRecId = 0)
    {
        AccountingDistribution                      accountingDistributionRelievingDocument;
        AccountingDistribution                      accountingDistributionBudgetRes;
        AccountingDistribution                      accountingDistributionReversing;
        SourceDocumentLine                          budgetResSourceDocumentLine;
        SourceDocumentLineItem                      sourceDocumentLineItem;
        AmountMST                                   draftRelievedAmount;
        SubledgerJournalAccountEntryDistribution    accountEntryDistributionRelievingDocument;
        CurrencyCodeTransaction                     previousTransactionCurrency;
        LegalEntity                                 previousAccountingLegalEntity;
        AccountingDate                              previousAccountingDate;
        Amount                                      transactionCurrencyAmount = 0;
    
        if (!_budgetReservationLine)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetResSourceDocumentLine = SourceDocumentLine::find(_budgetReservationLine.SourceDocumentLine);
        sourceDocumentLineItem      = SourceDocumentLineItem::newFromSourceDocumentLine(budgetResSourceDocumentLine);
        
        // Gets the relieving distributions that reference a budget reservation header or line.
        // It also excludes reversing and reversed accounting distribution entries of the budget reservation line.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, TransactionCurrencyAmount, RecId from accountingDistributionRelievingDocument
            order by TransactionCurrency, AccountingLegalEntity, AccountingDate asc
            where _relievingSourceDocumentHeaderRecId == 0 || accountingDistributionRelievingDocument.SourceDocumentHeader == _relievingSourceDocumentHeaderRecId
            exists join accountingDistributionBudgetRes
                where accountingDistributionBudgetRes.SourceDocumentLine == _budgetReservationLine.SourceDocumentLine
                    && accountingDistributionRelievingDocument.ReferenceDistribution == accountingDistributionBudgetRes.RecId
            notexists join accountingDistributionReversing
                where accountingDistributionReversing.SourceDocumentLine == _budgetReservationLine.SourceDocumentLine
                    && accountingDistributionReversing.ReferenceDistribution == accountingDistributionBudgetRes.RecId
                    && accountingDistributionReversing.ReferenceRole == AccountingDistributionReferenceRole::Reversing
        {
            // Exclude confirmed accounting distributions from the draft balance.
            // A nested notexists in the while loop does not produce the correct SQL
            // syntax and requires the secondary select.
            select firstOnly RecId from accountEntryDistributionRelievingDocument
                where accountEntryDistributionRelievingDocument.AccountingDistribution == accountingDistributionRelievingDocument.RecId;
    
            if (accountEntryDistributionRelievingDocument.RecId == 0)
            {
                if (BudgetReservationLineBalanceCurrencyFlight::instance().isEnabled())
                {
                    draftRelievedAmount += BudgetReservationCalculateBalance_PSN::calculateTotalDraftRelieved(
                        _budgetReservationLine,
                        accountingDistributionRelievingDocument);
                }
                else
                {
                    // The accounting distribution is draft if no records for it are found in the
                    // SubledgerJournalAccountEntryDistribution table.
                    if (transactionCurrencyAmount
                        && (previousTransactionCurrency != accountingDistributionRelievingDocument.TransactionCurrency
                        || previousAccountingLegalEntity != accountingDistributionRelievingDocument.AccountingLegalEntity
                        || previousAccountingDate != accountingDistributionRelievingDocument.AccountingDate))
                    {
                        // The currency details have changed and the prior amount needs to be calculated.
                        draftRelievedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                            previousAccountingLegalEntity,
                            previousAccountingDate,
                            previousTransactionCurrency,
                            accountingDistributionRelievingDocument.TransactionCurrency,
                            transactionCurrencyAmount);
                        
                        transactionCurrencyAmount = 0;
                    }
    
                    transactionCurrencyAmount       += accountingDistributionRelievingDocument.TransactionCurrencyAmount;
    
                    previousTransactionCurrency     = accountingDistributionRelievingDocument.TransactionCurrency;
                    previousAccountingLegalEntity   = accountingDistributionRelievingDocument.AccountingLegalEntity;
                    previousAccountingDate          = accountingDistributionRelievingDocument.AccountingDate;
                }
            }

            if (!BudgetReservationLineBalanceCurrencyFlight::instance().isEnabled() && transactionCurrencyAmount != 0)
            {
                // Calculate the currency amount for the last draft relieving amount.
                draftRelievedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                    previousAccountingLegalEntity,
                    previousAccountingDate,
                    previousTransactionCurrency,
                    previousTransactionCurrency,
                    transactionCurrencyAmount);
            }
        }

        return draftRelievedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalizedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the finalized amount in accounting currency, or currency provided for the
    /// given budget reservation source document header and/or line.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the <c>SourceDocumentHeader</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used to get the amount, if other than accounting currency; optional.
    /// </param>
    /// <returns>
    /// The finalized amount in the currency provided or in accounting currency if a currency is not provided.
    /// </returns>
    public static Amount getFinalizedAmount(
        SourceDocumentHeaderRecId   _sourceDocumentHeaderRecId,
        SourceDocumentLineRecId     _sourceDocumentLineRecId = 0,
        CurrencyCode                _currencyCode = Ledger::accountingCurrency())
    {
        Amount                                      finalizedAmount;
        AccountingDistribution                      finalizedAccountingDistribution;
        AccountingDistribution                      reversingAccountingDistribution;
        AccountingEvent                             finalizedAccountingEvent;
        SubledgerJournalAccountEntryDistribution    finalizedAccountEntryDistribution;
        SubledgerJournalAccountEntry                finalizedAccountEntry;
        SubledgerJournalEntry                       finalizedSubledgerJournalEntry;
    
        if (_sourceDocumentHeaderRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // Gets the finalized accounting distribution entries of the source document. The distributions are finalized if
        // entries for it exist in the SubledgerJournalAccountEntryDistribution table with finalized accounting event.
        // It also excludes reversing and reversed accounting distribution entries.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate from finalizedAccountingDistribution
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate
            where (finalizedAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::None
                || finalizedAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching)
                && finalizedAccountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                && (!_sourceDocumentLineRecId || finalizedAccountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId)
            join sum(AccountingCurrencyAmount) from finalizedAccountEntryDistribution
                where finalizedAccountEntryDistribution.AccountingDistribution == finalizedAccountingDistribution.RecId
            exists join finalizedAccountEntry
                where finalizedAccountEntryDistribution.SubledgerJournalAccountEntry == finalizedAccountEntry.RecId
                   && finalizedAccountEntry.Side == DebitCredit::Debit
            exists join finalizedSubledgerJournalEntry
                where finalizedAccountEntry.SubledgerJournalEntry == finalizedSubledgerJournalEntry.RecId
                   && finalizedSubledgerJournalEntry.Type == SubledgerJournalEntryType::Committed
            exists join finalizedAccountingEvent
                where finalizedAccountingEvent.RecId == finalizedSubledgerJournalEntry.AccountingEvent
                   && finalizedAccountingEvent.Type == AccountingEventType::Finalize
            notexists join reversingAccountingDistribution
                where reversingAccountingDistribution.ReferenceDistribution == finalizedAccountingDistribution.RecId
                   && reversingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing
        {
            if (finalizedAccountingDistribution.TransactionCurrency == _currencyCode)
            {
                finalizedAmount += finalizedAccountEntryDistribution.AccountingCurrencyAmount;
            }
            else
            {
                finalizedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                    finalizedAccountingDistribution.AccountingLegalEntity,
                    finalizedAccountingDistribution.AccountingDate,
                    finalizedAccountingDistribution.TransactionCurrency,
                    _currencyCode,
                    finalizedAccountEntryDistribution.AccountingCurrencyAmount);
            }
        }
    
        return finalizedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journalized amount in accounting currency, or currency provided against the provided source document header, source document line.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the <c>SourceDocumentHeader</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used to get the amount, if other than accounting currency; optional.
    /// </param>
    /// <returns>
    /// The journalzied amount in the currency provided or in accounting currency if a currency is not provided.
    /// </returns>
    public static Amount getJournalizedAmount(
        SourceDocumentHeaderRecId   _sourceDocumentHeaderRecId,
        SourceDocumentLineRecId     _sourceDocumentLineRecId = 0,
        CurrencyCode                _currencyCode = Ledger::accountingCurrency())
    {
        Amount                                      journalizedAmount;
        AccountingDistribution                      accountingDistributionBudgetReservation;
        AccountingEvent                             accountingEventBudgetReservation;
        SubledgerJournalAccountEntryDistribution    accountEntryDistributionBudgetReservation;
        SubledgerJournalAccountEntry                accountEntryBudgetReservation;
        SubledgerJournalEntry                       subledgerJournalEntryBudgetReservation;
    
        if (_sourceDocumentHeaderRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // Gets the budget reservation line's journalized distributions. The distributions are journalized
        // if entries for it exist in the SubledgerJournalAccountEntryDistribution table.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from accountingDistributionBudgetReservation
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate
            where accountingDistributionBudgetReservation.SourceDocumentHeader == _sourceDocumentHeaderRecId
                && (!_sourceDocumentLineRecId || accountingDistributionBudgetReservation.SourceDocumentLine == _sourceDocumentLineRecId)
            exists join accountEntryDistributionBudgetReservation
                where accountEntryDistributionBudgetReservation.AccountingDistribution == accountingDistributionBudgetReservation.RecId
            exists join accountEntryBudgetReservation
                where accountEntryDistributionBudgetReservation.SubledgerJournalAccountEntry == accountEntryBudgetReservation.RecId
                   && accountEntryBudgetReservation.Side == DebitCredit::Debit
            exists join subledgerJournalEntryBudgetReservation
                where accountEntryBudgetReservation.SubledgerJournalEntry == subledgerJournalEntryBudgetReservation.RecId
                   && subledgerJournalEntryBudgetReservation.Type == SubledgerJournalEntryType::Committed
            exists join accountingEventBudgetReservation
                where accountingEventBudgetReservation.RecId == subledgerJournalEntryBudgetReservation.AccountingEvent
                   && accountingEventBudgetReservation.Type != AccountingEventType::Finalize
        {
            if (accountingDistributionBudgetReservation.TransactionCurrency == _currencyCode)
            {
                journalizedAmount += accountingDistributionBudgetReservation.TransactionCurrencyAmount;
            }
            else
            {
                journalizedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                    accountingDistributionBudgetReservation.AccountingLegalEntity,
                    accountingDistributionBudgetReservation.AccountingDate,
                    accountingDistributionBudgetReservation.TransactionCurrency,
                    _currencyCode,
                    accountingDistributionBudgetReservation.TransactionCurrencyAmount);
            }
        }
    
        return journalizedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostedRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posted relieved amount in accounting currency, or currency provided for the
    /// given budget reservation source document header and/or line.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the <c>SourceDocumentHeader</c> table associated with the budget reservation header.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table associated with the budget reservation line; optional.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used to get the amount, if other than accounting currency; optional.
    /// </param>
    /// <returns>
    /// The relieved amount in accounting currency, or currency provided.
    /// </returns>
    public static Amount getPostedRelievedAmount(
        SourceDocumentHeaderRecId   _sourceDocumentHeaderRecId,
        RefRecId                    _sourceDocumentLineRecId = 0,
        CurrencyCode                _currencyCode = Ledger::accountingCurrency())
    {
        Amount                                      relievedAmount;
        AccountingDistribution                      relievingDistribution;
        AccountingDistribution                      budgetResDistribution;
        AccountingEvent                             relievingEvent;
    
        if (_sourceDocumentHeaderRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // Gets the journalized relieving accounting distributions that reference a budget reservation line's
        // accounting distribution and that are related to accounting events with a state of either journalized or completed.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from relievingDistribution
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate
            exists join budgetResDistribution
                where budgetResDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                    && (!_sourceDocumentLineRecId || budgetResDistribution.SourceDocumentLine == _sourceDocumentLineRecId)
                    && relievingDistribution.ReferenceDistribution == budgetResDistribution.RecId
                    && relievingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
            exists join relievingEvent
                where relievingEvent.RecId == relievingDistribution.AccountingEvent
                    && (relievingEvent.State == AccountingEventState::Complete
                        || relievingEvent.State == AccountingEventState::Journalized)
        {
            if (relievingDistribution.TransactionCurrency == _currencyCode)
            {
                relievedAmount += relievingDistribution.TransactionCurrencyAmount;
            }
            else
            {
                relievedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                    relievingDistribution.AccountingLegalEntity,
                    relievingDistribution.AccountingDate,
                    relievingDistribution.TransactionCurrency,
                    _currencyCode,
                    relievingDistribution.TransactionCurrencyAmount);
            }
        }
    
        return relievedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total balance amount in accounting currency, or currency provided.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// The record ID of the table<c>BudgetReservationHeader_PSN</c>.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used to get the amount, if other than accounting currency; optional.
    /// </param>
    /// <returns>
    /// The total balance amount in accounting currency, or currency provided.
    /// </returns>
    /// <remarks>
    /// The budget reservation uses methods from this class to determine relieved amounts as
    /// the <c>SourceDocumentBalanceProvider</c> class method will include relief from both the purchase
    /// requisition and budget reservation documents in a relieving relationship.
    /// The entry types for both documents are type Committed and there is no further
    /// differentiating parameters to separate the amounts for the two documents.
    /// </remarks>
    public static Amount getTotalBalance(
        BudgetReservationRecId_PSN  _budgetReservationRecId,
        CurrencyCode                _currencyCode = Ledger::accountingCurrency())
    {
        BudgetReservationHeader_PSN budgetReservationHeaderLocal;
        Amount                      journalizedAmount   = 0.0;
        Amount                      relievedAmount      = 0.0;
        Amount                      finalizedAmount     = 0.0;
        Amount                      totalBalance        = 0.0;
    
        if (_budgetReservationRecId)
        {
            budgetReservationHeaderLocal = BudgetReservationHeader_PSN::find(_budgetReservationRecId);
    
            journalizedAmount   = BudgetReservationCalculateBalance_PSN::getJournalizedAmount(budgetReservationHeaderLocal.SourceDocumentHeader, 0, _currencyCode);
            
            relievedAmount      = BudgetReservationCalculateBalance_PSN::getPostedRelievedAmount(budgetReservationHeaderLocal.SourceDocumentHeader, 0, _currencyCode);
            
            if (budgetReservationHeaderLocal.DocumentStatus == BudgetReservationDocumentStatus_PSN::Finalized)
            {
                finalizedAmount = BudgetReservationCalculateBalance_PSN::getFinalizedAmount(budgetReservationHeaderLocal.SourceDocumentHeader, 0, _currencyCode);
            }
        }
    
        totalBalance = journalizedAmount - relievedAmount - finalizedAmount;
    
        return totalBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalDraftRelieved</Name>
				<Source><![CDATA[
    private static AmountCur calculateTotalDraftRelieved(BudgetReservationLine_PSN _budgetReservationLine, AccountingDistribution _relievingDistribution)
    {
        AmountCur draftRelievedAmount;

        if (_relievingDistribution.TransactionCurrency == _budgetReservationLine.Currency)
        {
            draftRelievedAmount += _relievingDistribution.TransactionCurrencyAmount;
        }
        else
        {
            draftRelievedAmount += BudgetReservationCalculateBalance_PSN::calculateCurrencyAmount(
                _relievingDistribution.AccountingLegalEntity,
                _relievingDistribution.AccountingDate,
                _relievingDistribution.TransactionCurrency,
                _budgetReservationLine.Currency,
                _relievingDistribution.TransactionCurrencyAmount);
        }

        return draftRelievedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetReservationLineBalance</Name>
				<Source><![CDATA[
    private static AmountCur calculateBudgetReservationLineBalance(
        BudgetReservationLine_PSN _budgetReservationLine, 
        SourceDocumentHeaderRecId _sourceDocumentHeader,
        SourceDocumentHeaderRecId _draftRelievingSourceDocumentHeaderRecId)
    {
        AmountCur totalRelievedAmount = BudgetReservationCalculateBalance_PSN::getPostedRelievedAmount(
            _sourceDocumentHeader,
            _budgetReservationLine.SourceDocumentLine,
            _budgetReservationLine.Currency);

        totalRelievedAmount += BudgetReservationCalculateBalance_PSN::getDraftRelievedAmount(
            _budgetReservationLine,
            _draftRelievingSourceDocumentHeaderRecId);

        AmountCur journalizedAmount = BudgetReservationCalculateBalance_PSN::getJournalizedAmount(
            _sourceDocumentHeader,
            _budgetReservationLine.SourceDocumentLine,
            _budgetReservationLine.Currency);

        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_budgetReservationLine.SourceDocumentLine);

        AmountCur finalizedAmount;

        if (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized)
        {
            finalizedAmount = BudgetReservationCalculateBalance_PSN::getFinalizedAmount(
                _sourceDocumentHeader,
                _budgetReservationLine.SourceDocumentLine,
                _budgetReservationLine.Currency);
        }

        return journalizedAmount - totalRelievedAmount - finalizedAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>