<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogProductReleaseManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CatVendorCatalogProductReleaseManager</c> class is responsible for releasing products to the
///    legal entities.
/// </summary>
class CatVendorCatalogProductReleaseManager
{
    #CatVendCatalogImportProduct
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSalesPrice</Name>
				<Source><![CDATA[
    private AmountCur calculateSalesPrice(RetailVendorProductCandSalesPrice _retailVendorProductCandSalesPrice, VendAccount _vendorAccount, CatVendorProductCandidate _catVendorProductCandidate)
    {
        CatVendorProductCandidatePrice catVendorProductCandPurchPrice; //purchase price
        RetailVendorSalesPriceMarginSetup retailVendorSalesPriceMarginSetup;
        RetailVendorSalesPricePointSetup retailVendorSalesPricePointSetup;
        RetailVendTable retailVendTable;

        if (_retailVendorProductCandSalesPrice.SuggestedPrice)
        {
            if (_catVendorProductCandidate.Category)
            {
                // Calculate sales price based on sales price points setup
                retailVendorSalesPricePointSetup = RetailVendorSalesPricePointSetup::findInheritedSetup(_vendorAccount, _catVendorProductCandidate.Category, _retailVendorProductCandSalesPrice.SuggestedPrice);
                if (retailVendorSalesPricePointSetup && retailVendorSalesPricePointSetup.SalesPrice)
                {
                    return retailVendorSalesPricePointSetup.SalesPrice;
                }

                // Calculate sales price based on sales price margin setup
                retailVendorSalesPriceMarginSetup = RetailVendorSalesPriceMarginSetup::findInheritedSetup(_vendorAccount, _catVendorProductCandidate.Category);
                if (retailVendorSalesPriceMarginSetup)
                {
                    return _retailVendorProductCandSalesPrice.SuggestedPrice * ( 1 + retailVendorSalesPriceMarginSetup.ContributionRatio / 100);
                }

                // Calculate sales price based on suggested sales price
                return _retailVendorProductCandSalesPrice.SuggestedPrice;
            }
            else
            {
                return _retailVendorProductCandSalesPrice.SuggestedPrice;
            }
        }
        else
        {
            // Calculate sales price based on purchase price

            // Find matching purchase price
            select firstonly Price from catVendorProductCandPurchPrice
                index hint VendorProductCandidateIdx
                where catVendorProductCandPurchPrice.VendorProductCandidate == _catVendorProductCandidate.RecId &&
                      catVendorProductCandPurchPrice.CurrencyCode == _retailVendorProductCandSalesPrice.CurrencyCode &&
                      catVendorProductCandPurchPrice.UnitOfMeasure == _retailVendorProductCandSalesPrice.UnitOfMeasure;

            // Find sales price margin setup
                retailVendorSalesPriceMarginSetup = RetailVendorSalesPriceMarginSetup::findInheritedSetup(_vendorAccount, _catVendorProductCandidate.Category);

            if (catVendorProductCandPurchPrice && catVendorProductCandPurchPrice.Price && retailVendorSalesPriceMarginSetup)
            {
                return catVendorProductCandPurchPrice.Price * ( 1 + retailVendorSalesPriceMarginSetup.ContributionRatio / 100);
            }

            // Calculated sales price based on vendor-provided sales price
            if (_retailVendorProductCandSalesPrice.Price)
            {
                retailVendTable = RetailVendTable::find(_vendorAccount);

                if (retailVendTable)
                {
                    if (retailVendTable.SalesPriceRounding == RetailSalesPriceRoundingBase::PricePoints && retailVendTable.PricePointGroupId)
                    {
                        return RetailSalesPricePoint::getPricePoint(retailVendTable.PricePointGroupId, _retailVendorProductCandSalesPrice.Price, retailVendTable.PricePointRoundingType);
                    }
                    else if (retailVendTable.SalesPriceRounding == RetailSalesPriceRoundingBase::Rounding && retailVendTable.RoundingMethod)
                    {
                        return RetailRoundingMethod::getAmountFromRoundingMethod(retailVendTable.RoundingMethod, _retailVendorProductCandSalesPrice.Price);
                    }
                }
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductBarCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a product bar code.
    /// </summary>
    /// <param name="_catVendorProductCandidate">
    ///   A <c>CatVendorProductCandidate</c> record.
    /// </param>
    public void createProductBarCode(CatVendorProductCandidate _catVendorProductCandidate)
    {
        InventItemBarcode           barcodeTable;
        CatVendorProductCandidate   catVendorProductCandidate = _catVendorProductCandidate;
        RetailBarcodeManagement     rboBarcodeManagement = new RetailBarcodeManagement();
        BarcodeSetupId              fieldBarcodeSetupId;
        InventTable                 inventTable;
        InventDim                   inventDimTable;

        fieldBarcodeSetupId = RetailAttributesLegalEntityLookup::findByCategory(catVendorProductCandidate.Category, CompanyInfo::findDataArea(curext()).RecId).BarCodeSetup;

        inventTable = InventTable::find(catVendorProductCandidate.VendorProductCode);

        barcodeTable.clear();
        barcodeTable.ItemBarCode        = catVendorProductCandidate.BarCode;
        barcodeTable.ItemId             = catVendorProductCandidate.VendorProductCode;
        barcodeTable.Description        = catVendorProductCandidate.SearchName;
        barcodeTable.RetailVariantId    = '';
        inventDimTable.initFromInventTable(inventTable);
        barcodeTable.InventDimId        = InventDim::findOrCreate(inventDimTable).InventDimId;
        barcodeTable.BarcodeSetupId     = fieldBarcodeSetupId;
        barcodeTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProductDimensionsOnInventDim</Name>
				<Source><![CDATA[
    private void populateProductDimensionsOnInventDim(InventDim _inventDim, CatVendorProductCandidate _catVendorProductCandidate)
    {
        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();
            FieldId catVendorProductCandidateProductDimFieldId = productDim.fieldIdInTable(tableStr(CatVendorProductCandidate));
            if (catVendorProductCandidateProductDimFieldId)
            {
                _inventDim.(productDim.parmInventDimFieldId()) = _catVendorProductCandidate.(catVendorProductCandidateProductDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchlines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase lines of the released products if the option for create purchase order is selected.
    /// </summary>
    /// <param name="_inventTable">
    /// The current instance of table <c>InventTable</c>.
    /// </param>
    /// <param name="_catVendorProductCandidate">
    /// The current instance of table <c>CatVendorProductCandidate</c>.
    /// </param>
    /// <param name="_dataAreaId">
    /// The current value of field <c>dataAreaId</c>.
    /// </param>
    /// <remarks>
    /// Checks for values of storage dimension, tracking dimension and invent model group of the product before creating lines.
    /// </remarks>
    public void createPurchlines(InventTable                    _inventTable,
                                    CatVendorProductCandidate   _catVendorProductCandidate,
                                    CompanyId                   _dataAreaId)
    {
        PurchLine                           purchLine;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        RetailAttributesGlobalLookup        retailAttributesGlobalLookup;
        RetailAttributesLegalEntityLookup   retailAttributesLegalEntityLookup;
        InventDim                           inventDim;
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItem;
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;

        catVendorCatalogProductPerCompany = CatVendorCatalogProductPerCompany::find(_catVendorProductCandidate.RecId,_dataAreaId,true);

        retailAttributesGlobalLookup = RetailAttributesGlobalLookup::findByCategory(_catVendorProductCandidate.Category);
        retailAttributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(_catVendorProductCandidate.Category, CompanyInfo::findDataArea(_dataAreaId).RecId);

        if (this.mayCreatePurchLines(catVendorCatalogProductPerCompany, retailAttributesGlobalLookup, retailAttributesLegalEntityLookup))
        {
            try
            {
                inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Purch, inventDim);

                ecoResStorageDimensionGroupItem = EcoResStorageDimensionGroupItem::findByItem(_inventTable.DataAreaId, _inventTable.ItemId, true);
                if (!ecoResStorageDimensionGroupItem)
                {
                    ecoResStorageDimensionGroupItem.ItemId = _inventTable.ItemId;
                    ecoResStorageDimensionGroupItem.ItemDataAreaId = _inventTable.DataAreaId;
                    ecoResStorageDimensionGroupItem.StorageDimensionGroup = EcoResStorageDimensionGroup::findByDimensionGroupName(retailAttributesGlobalLookup.GroupStorageDimension).RecId;
                    ecoResStorageDimensionGroupItem.insert();
                }

                ecoResTrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(_inventTable.DataAreaId, _inventTable.ItemId, true);
                if (!ecoResTrackingDimensionGroupItem)
                {
                    ecoResTrackingDimensionGroupItem.ItemId = _inventTable.ItemId;
                    ecoResTrackingDimensionGroupItem.ItemDataAreaId = _inventTable.DataAreaId;
                    ecoResTrackingDimensionGroupItem.TrackingDimensionGroup = EcoResTrackingDimensionGroup::findByDimensionGroupName(retailAttributesGlobalLookup.GroupTrackingDimension).RecId;
                    ecoResTrackingDimensionGroupItem.insert();
                }

                purchLine.clear();
                purchLine.initValue();
                purchLine.PurchId    = PurchTable::findRecId(catVendorCatalogProductPerCompany.RetailPurchTableRefRecId).PurchId;
                purchLine.ItemId     = _inventTable.ItemId;
                purchLine.PurchUnit  = UnitOfMeasure::find(retailAttributesLegalEntityLookup.UnitInvent).Symbol;

                if (_catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductVariant)
                {
                    this.populateProductDimensionsOnInventDim(inventDim, _catVendorProductCandidate);
                }

                inventDim.InventLocationId = retailAttributesLegalEntityLookup.WarehousePurch;
                inventDim.InventSiteId     = InventLocation::find(retailAttributesLegalEntityLookup.WarehousePurch).InventSiteId;

                purchLine.setInventDimId(InventDim::findOrCreate(inventDim).InventDimId);

                purchLine.createLine(true,  //  validation
                                     true,  //  initFromPurchTable
                                     true,  //  initFromInventTableModule
                                     true,  //  calcInventQty
                                     true,  //  searchMarkup
                                     true,  //  searchPrice
                                     true,  //  ignorePurchTableInventDim
                                     false);
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCreatePurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the pre-requisite checks before the creation of purchase order.
    /// </summary>
    /// <param name = "_catVendorCatalogProductPerCompany">
    ///    A <c>CatVendorCatalogProductPerCompany</c> object that represents a table record.
    /// </param>
    /// <param name = "_retailAttributesGlobalLookup">
    ///    A <c>RetailAttributesGlobalLookup</c> object that represents a table record.
    /// </param>
    /// <param name = "_retailAttributesLegalEntityLookup">
    ///    A <c>RetailAttributesLegalEntityLookup</c> object that represents a table record.
    /// </param>
    /// <returns>
    ///    true if condition succeeded; otherwise, false.
    /// </returns>
    protected boolean mayCreatePurchLines(CatVendorCatalogProductPerCompany _catVendorCatalogProductPerCompany,
        RetailAttributesGlobalLookup _retailAttributesGlobalLookup,
        RetailAttributesLegalEntityLookup _retailAttributesLegalEntityLookup)
    {
        return _catVendorCatalogProductPerCompany.RetailPurchTableRefRecId && _retailAttributesGlobalLookup.GroupStorageDimension
            && _retailAttributesGlobalLookup.GroupTrackingDimension && _retailAttributesLegalEntityLookup.GroupInventoryModel
            && _retailAttributesLegalEntityLookup.WarehousePurch && _retailAttributesLegalEntityLookup.UnitInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreatePriceDiscAdmName</Name>
				<Source><![CDATA[
    private PriceDiscAdmName findOrCreatePriceDiscAdmName(PriceDiscJournalName _priceDiscJournalName, Name _name='')
    {
        PriceDiscAdmName    priceDiscAdmName;

        priceDiscAdmName =  PriceDiscAdmName::find(_priceDiscJournalName);
        if (!priceDiscAdmName)
        {
            priceDiscAdmName.JournalName = _priceDiscJournalName;
            priceDiscAdmName.Name = _name;
            priceDiscAdmName.insert();
        }

        return priceDiscAdmName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEcoResCategoryName</Name>
				<Source><![CDATA[
    private str getEcoResCategoryName(RecId _ecoResCategoryRecId)
    {
        return EcoResCategory::find(_ecoResCategoryRecId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductNotReleasedToCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the product is released to a legal entity.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    ///    A <c>RecId</c> value of the <c>CatVendorProductCandidate</c> table.
    /// </param>
    /// <param name="_dataAreaId">
    ///    Identifies data area in which the product must be released.
    /// </param>
    /// <returns>
    ///    true if product already released in the company; otherwise, false.
    /// </returns>
    public boolean isProductNotReleasedToCompany(
        RecId _catVendorProductCandidateRecId,
        CompanyId
        _dataAreaId
        )
    {
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        boolean                             isNotReleased = false;

        catVendorCatalogProductPerCompany = CatVendorCatalogProductPerCompany::find(_catVendorProductCandidateRecId,_dataAreaId);

        if ( !catVendorCatalogProductPerCompany ||
            (catVendorCatalogProductPerCompany &&
             !catVendorCatalogProductPerCompany.IsReleased) )
        {
            isNotReleased = true;
        }

        return isNotReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleasedInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a product is released in a legal entity.
    /// </summary>
    /// <param name="_ecoresProductRecId">
    ///    A <c>RecId</c> value of the <c>EcoResProduct</c> table.
    /// </param>
    /// <param name="_dataAreaId">
    ///    A legal entity in which the product is released.
    /// </param>
    /// <returns>
    ///    true if the product already released in the company; otherwise, false.
    /// </returns>
    private boolean isReleasedInLegalEntity(
        RefRecId _ecoresProductRecId,
        CompanyId
        _dataAreaId
        )
    {
        InventTable inventTable;

        inventTable = InventTable::findByProductInCompany(_ecoresProductRecId, _dataAreaId);

        return inventTable? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorCategoryAssociated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a category is associated with a vendor.
    /// </summary>
    /// <param name="_vendorParty">
    /// The party of the <c>VendTable</c> table.
    /// </param>
    /// <param name="_ecoResCategoryRecId">
    /// The record ID of the <c>EcoResCategory</c> table.
    /// </param>
    /// <param name="_vendorDataAreaId">
    /// The <c>VendorDataAreadId</c> value of the <c>VendCategory</c> table.
    /// </param>
    /// <returns>
    /// true if a category is associated with a vendor party; otherwise, false.
    /// </returns>
    public boolean isVendorCategoryAssociated(RefRecId _vendorParty,RefRecId _ecoResCategoryRecId,DataAreaId _vendorDataAreaId)
    {
        VendTable       vendTable;
        boolean         isAssociated = false;
        VendCategory vendCategory;

        select firstonly crossCompany RecId from vendTable
            where  vendTable.Party == _vendorParty
                && vendTable.DataAreaId == _vendorDataAreaId
        join RecId from vendCategory
            where  vendCategory.Category == _ecoResCategoryRecId
                && vendCategory.VendorDataArea  == vendTable.DataAreaId
                && vendCategory.VendorAccount     == vendTable.AccountNum
        ;
        isAssociated = (vendCategory.RecId);

        return isAssociated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseApprovedProductsToCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all of the approved products from a catalog to legal entities.
    /// </summary>
    /// <param name="_catVendorCatalogRecId">
    /// The ID of the <c>CatVendorCatalog</c> table.
    /// </param>
    /// <param name="_companiesSet">
    /// A set of <c>DataAreaId</c> values.
    /// </param>
    public void releaseApprovedProductsToCompanies(RecId _catVendorCatalogRecId,Set _companiesSet)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalog                    catVendorCatalog;

        SetEnumerator                       companyEnumerator;
        CompanyId
                                            dataAreaId;

        boolean                             released,notReleased;
        str                                 releasedCompanies,notReleasedCompanies;
        str                                 releasedLog,notReleasedLog;

        if (_companiesSet.elements() > 0 )
        {
            // Select all the approved products from vendor catalog order by
            // catalog maintenance request file created date time.
            while select RecId,VendorParty from catVendorCatalog
                        where catVendorCatalog.RecId   == _catVendorCatalogRecId

                    join RecId,CreatedDateTime,VendorCatalog from catVendorCatalogMaintenanceRequest
                        order by  catVendorCatalogMaintenanceRequest.CreatedDateTime
                        where   catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorCatalog.RecId

                    join * from catVendorProductCandidate
                        where   catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId &&
                                catVendorProductCandidate.Status == CatVendorProductStatus::Approved

                    join EcoResProduct from catVendorApprovedProduct
                        where   catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
                                && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
                                && catVendorApprovedProduct.IsDeleted == NoYes::No

            {
                companyEnumerator       = _companiesSet.getEnumerator();

                releasedCompanies       = '';
                notReleasedCompanies    = '';
                released                = false;
                notReleased             = false;

                // Iterate through all the selected companies
                while (companyEnumerator.moveNext())
                {
                    dataAreaId = companyEnumerator.current();

                    //If the product is not released in the respective company.
                    if (this.isProductNotReleasedToCompany(catVendorProductCandidate.RecId,dataAreaId))
                    {
                        // If the product category is associated with vendor party in a perticular dataArea
                        if (this.isVendorCategoryAssociated(catVendorCatalog.VendorParty,
                                                           catVendorProductCandidate.Category,
                                                           getCompany(tableNum(VendTable), dataAreaId)
                                                           ))
                        {
                            this.releaseProductToCompany(catVendorProductCandidate,catVendorApprovedProduct.EcoResProduct,dataAreaId);

                            if (!releasedCompanies)
                            {
                                releasedCompanies = releasedCompanies + strFmt('%1',dataAreaId);
                            }
                            else
                            {
                                releasedCompanies = releasedCompanies + strFmt(',%1',dataAreaId);
                            }
                            released = true;
                        }
                        else
                        {
                            // Create event log.
                            CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Info,
                                                            CatVendorCatalogProcessingState::ReleasingApprovedProductNotReleased,
                                                            strFmt("@SYS332606",catVendorProductCandidate.VendorProductCode,dataAreaId));

                            CatVendorCatalogProductPerCompany::createOrUpdate(catVendorProductCandidate.RecId,dataAreaId,NoYes::No);

                            if (!notReleasedCompanies)
                            {
                                notReleasedCompanies = notReleasedCompanies + strFmt('%1',dataAreaId);
                            }
                            else
                            {
                                notReleasedCompanies = notReleasedCompanies + strFmt(',%1',dataAreaId);
                            }
                            notReleased = true;
                        }
                    }
                }

                if (released)
                {
                    releasedLog = strFmt("@SYS320627",catVendorProductCandidate.VendorProductCode,releasedCompanies);

                    CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Info,
                                                            CatVendorCatalogProcessingState::ReleasingApprovedProductReleased,
                                                            releasedLog);
                }
                if (notReleased)
                {
                    notReleasedLog = strFmt("@SYS320628",catVendorProductCandidate.VendorProductCode,notReleasedCompanies);
                    notReleasedLog = notReleasedLog +
                                    strFmt("@SYS320629",
                                          this.getEcoResCategoryName(catVendorProductCandidate.Category));

                    CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                            CatImportProcessingMessageType::Warning,
                                                            CatVendorCatalogProcessingState::ReleasingApprovedProductNotReleased,
                                                            notReleasedLog);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductToCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases a product to a legal entity.
    /// </summary>
    /// <param name="_catVendorProductCandidate">
    /// A <c>CatVendorProductCandidate</c> table buffer.
    /// </param>
    /// <param name="_ecoresProductRecId">
    /// The ID of the <c>EcoResProduct</c> table.
    /// </param>
    /// <param name="_dataAreaId">
    /// A legal entity which to release the specified product.
    /// </param>
    public void releaseProductToCompany(
        CatVendorProductCandidate _catVendorProductCandidate,
        RefRecId _ecoresProductRecId,
        CompanyId
        _dataAreaId)
    {
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;

        RetailAttributesLegalEntityLookup   retailAttributesLegalEntityLookup;
        InventModelGroup                    inventModelGroup;
        boolean                             ret = true;
        EcoResProductVariantReleaseManager  ecoResProductVariantReleaseManager;
        EcoResDistinctProductVariant        ecoResDistinctProductVariant;

        ttsbegin;
        //Release the product to legal entity only when it is not released.
        if ( !this.isReleasedInLegalEntity(_ecoresProductRecId,_dataAreaId) )
        {
            ecoResProduct = EcoResProduct::find(_ecoresProductRecId);

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                && ecoResProduct.isDistinctProductVariant())
            {
                //Release product variant
                ecoResProductVariantReleaseManager = EcoResProductReleaseManagerBase::newFromProduct(ecoResProduct);
                ecoResProductVariantReleaseManager.release();
            }
            else
            {
                EcoResProductReleaseManager::releaseProductWithLegalEntityData(
                    _ecoresProductRecId,
                    CompanyInfo::findDataArea(_dataAreaId).RecId,
                    ecoResProduct.productNumber(),
                    ecoResProduct.SearchName);
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && ecoResProduct.isDistinctProductVariant())
        {
            ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(_ecoresProductRecId);
            inventTable = InventTable::findByProductInCompany(ecoResDistinctProductVariant.ProductMaster, _dataAreaId);
        }
        else
        {
            inventTable = InventTable::findByProductInCompany(_ecoresProductRecId, _dataAreaId);
        }

        // Create and post trade agreement journal (for purchase price)
        this.updateProductPrice(inventTable.ItemId, _catVendorProductCandidate.RecId, _dataAreaId);

        // Update InventItemPurchSetup table with default purchase order settings.
        // Purchase order settings can only associate to a distinct product or a product master (not product variant).
        if (!isConfigurationkeyEnabled(configurationKeyNum(Retail)) || _catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductVariant)
        {
            this.updatePurchDefaultOrderSettings(inventTable,_catVendorProductCandidate.RecId, _dataAreaId);
        }

        CatVendorCatalogProductPerCompany::createOrUpdate(_catVendorProductCandidate.RecId,_dataAreaId,NoYes::Yes);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            //Validates Item model group is attached in the Retail management category form.
            select RecId, GroupInventoryModel from retailAttributesLegalEntityLookup
                where retailAttributesLegalEntityLookup.Category            == _catVendorProductCandidate.Category
                   && retailAttributesLegalEntityLookup.GroupInventoryModel != ""
            join inventModelGroup
                where inventModelGroup.ModelGroupId == retailAttributesLegalEntityLookup.GroupInventoryModel;

            if (!retailAttributesLegalEntityLookup.RecId || !inventModelGroup.StockedProduct)
            {
                CatVendorCatalogImportEventLog::logEvent(_catVendorProductCandidate.CatalogMaintenanceRequest,
                                                         CatImportProcessingMessageType::Warning,
                                                         CatVendorCatalogProcessingState::ReleasingApprovedProductReleased,
                                                         strFmt("@RET260099", fieldId2pname(tableNum(InventModelGroup), fieldNum(InventModelGroup, ModelGroupId)), "@RET5695"));
                ret = false;
            }

            //Validates Bar code setup is attached in the Retail management category form.
            retailAttributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(_catVendorProductCandidate.Category, CompanyInfo::findDataArea(_dataAreaId).RecId);

            if (ret
                && !retailAttributesLegalEntityLookup.BarCodeSetup)
            {
                CatVendorCatalogImportEventLog::logEvent(_catVendorProductCandidate.CatalogMaintenanceRequest,
                                                         CatImportProcessingMessageType::Warning,
                                                         CatVendorCatalogProcessingState::ReleasingApprovedProductReleased,
                                                         strFmt("@RET260099", fieldId2pname(tableNum(BarcodeSetup), fieldNum(BarcodeSetup, BarcodeSetupId)), "@RET5695"));
                ret = false;
            }

            //Checks for the existence of the Bar code in the Item - bar code table for the parameters Bar code and Bar code setup.
            if (ret
                && !InventItemBarcode::findBarcode(_catVendorProductCandidate.BarCode, false, false, retailAttributesLegalEntityLookup.BarCodeSetup))
            {
                ret = true;
            }

            //Checks for the existence of the Bar code in the Item - bar code table for the parameter Bar code.
            if (ret
                && InventItemBarcode::findBarcode(_catVendorProductCandidate.BarCode, false, false))
            {
                ret = false;
            }

            //Validates if the bar code is not passed as attribute in the xml.
            if (ret
                && !_catVendorProductCandidate.BarCode)
            {
                ret = false;
            }

            //Creates a new record in the Item - bar code table.
            if (ret)
            {
                this.createProductBarCode(_catVendorProductCandidate);
            }

            if (_catVendorProductCandidate.ProductSubtype != EcoResProductSubtype::ProductMaster)
            {
                this.createPurchlines(inventTable, _catVendorProductCandidate, _dataAreaId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductPrice</Name>
				<Source><![CDATA[
    private void updateProductPrice(
        PriceDiscItemRelation _itemRelation,
        RefRecId _catVendorProductCandidateRecId,
        CompanyId _dataAreaId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest,catVendorCatalogMaintenanceRequestDateValues;
        CatVendorProductCandidatePrice      catVendorProductCandidatePrice;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalog                    catVendorCatalog;
        PriceDiscAdmName                    priceDiscAdmName;
        PriceDiscAdmTrans                   priceDiscAdmTrans;
        PriceDiscAdmTable                   priceDiscAdmTable;
        UnitOfMeasure                       unitOfMeasure;
        InventDim                           inventDim;
        VendTable                           vendTable;

        PriceDiscAdmCheckPost               priceDiscAdmCheckPost;

        RetailVendorProductCandSalesPrice   retailVendorProductCandSalesPrice;

        Set selectedPriceDiscAdmTrans = new Set(Types::Int64);

        select RecId, VendorParty from catVendorCatalog

        join VendorCatalog, RecId from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorCatalog.RecId

        join catVendorProductCandidate
            where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
                  && catVendorProductCandidate.RecId == _catVendorProductCandidateRecId;

        changecompany(_dataAreaId)
        {
            // Set dimension values into inventDim in case of prices for a product variant
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                catVendorProductCandidate = CatVendorProductCandidate::find(_catVendorProductCandidateRecId);
                if (catVendorProductCandidate.ProductSubtype == EcoResProductSubtype::ProductVariant)
                {
                    this.populateProductDimensionsOnInventDim(inventDim, catVendorProductCandidate);
                }
            }

            select catVendorProductCandidatePrice
                where catVendorProductCandidatePrice.VendorProductCandidate == _catVendorProductCandidateRecId;

            if (catVendorProductCandidatePrice.RecId)
            {
                priceDiscAdmName = this.findOrCreatePriceDiscAdmName(#ImportPriceDiscJournalName,"@SYS342509");

                priceDiscAdmTable.clear();
                priceDiscAdmTable.JournalName       = priceDiscAdmName.JournalName;
                priceDiscAdmTable.Name              = priceDiscAdmName.Name;
                priceDiscAdmTable.insert();

                // Update price information
                while (catVendorProductCandidatePrice.RecId)
                {
                    vendTable = VendTable::findByPartyRecId(catVendorCatalog.VendorParty);
                    if (vendTable.RecId)
                    {
                        priceDiscAdmTrans.clear();
                        priceDiscAdmTrans.initValue();
                        priceDiscAdmTrans.Module                = ModuleInventCustVend::Vend;
                        priceDiscAdmTrans.AccountCode           = PriceDiscPartyCodeType::Table;
                        priceDiscAdmTrans.ItemCode              = PriceDiscProductCodeType::Table;
                        priceDiscAdmTrans.ItemRelation          = _itemRelation;

                        priceDiscAdmTrans.AccountRelation       = vendTable.AccountNum;
                        priceDiscAdmTrans.JournalNum            = priceDiscAdmTable.JournalNum;

                        // Inserting Product price information
                        select PriceValidFromDate, PriceValidToDate
                            from catVendorCatalogMaintenanceRequestDateValues
                            where catVendorCatalogMaintenanceRequestDateValues.RecId ==
                                CatVendorProductCandidate::find(_catVendorProductCandidateRecId).CatalogMaintenanceRequest;

                        priceDiscAdmTrans.FromDate              = catVendorCatalogMaintenanceRequestDateValues.PriceValidFromDate;
                        priceDiscAdmTrans.ToDate                = catVendorCatalogMaintenanceRequestDateValues.PriceValidToDate;

                        priceDiscAdmTrans.InventDimId           = InventDim::findOrCreate(inventDim).InventDimId;
                        priceDiscAdmTrans.QuantityAmountFrom    = 1;

                        priceDiscAdmTrans.Amount                = catVendorProductCandidatePrice.Price;
                        priceDiscAdmTrans.Currency              = catVendorProductCandidatePrice.CurrencyCode;

                        select Symbol from unitOfMeasure
                            where unitOfMeasure.RecId == catVendorProductCandidatePrice.UnitOfMeasure;

                        priceDiscAdmTrans.UnitId                = unitOfMeasure.Symbol;
                        priceDiscAdmTrans.insert();

                        priceDiscAdmTrans.initFromAccountCode();
                        priceDiscAdmTrans.initFromItemCode();

                        selectedPriceDiscAdmTrans.add(priceDiscAdmTrans.RecId);
                    }

                    next catVendorProductCandidatePrice;
                }
            }

            // Update sales price information
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                // Find all sales price for the vendor product candicate
                select * from retailVendorProductCandSalesPrice
                    where retailVendorProductCandSalesPrice.VendorProductCandidate == _catVendorProductCandidateRecId;

                if (retailVendorProductCandSalesPrice.RecId)
                {
                    // Create a PriceDiscAdmTable if it hasn't been created when updating purchase prices
                    if (!priceDiscAdmTable.RecId)
                    {
                        priceDiscAdmName = this.findOrCreatePriceDiscAdmName(#ImportPriceDiscJournalName,"@SYS342509");

                        priceDiscAdmTable.clear();
                        priceDiscAdmTable.JournalName       = priceDiscAdmName.JournalName;
                        priceDiscAdmTable.Name              = priceDiscAdmName.Name;
                        priceDiscAdmTable.insert();
                    }

                    while (retailVendorProductCandSalesPrice.RecId)
                    {
                        vendTable = VendTable::findByPartyRecId(catVendorCatalog.VendorParty);
                        if (vendTable.RecId)
                        {
                            priceDiscAdmTrans.clear();
                            priceDiscAdmTrans.initValue();
                            priceDiscAdmTrans.Module                = ModuleInventCustVend::Vend;
                            priceDiscAdmTrans.AccountCode           = PriceDiscPartyCodeType::All;
                            priceDiscAdmTrans.ItemCode              = PriceDiscProductCodeType::Table;
                            priceDiscAdmTrans.ItemRelation          = _itemRelation;
                            priceDiscAdmTrans.Relation              = PriceType::PriceSales;

                            priceDiscAdmTrans.JournalNum            = priceDiscAdmTable.JournalNum;

                            // Inserting Product price information
                            select PriceValidFromDate, PriceValidToDate
                                from catVendorCatalogMaintenanceRequestDateValues
                                where catVendorCatalogMaintenanceRequestDateValues.RecId ==
                                    CatVendorProductCandidate::find(_catVendorProductCandidateRecId).CatalogMaintenanceRequest;

                            priceDiscAdmTrans.FromDate              = catVendorCatalogMaintenanceRequestDateValues.PriceValidFromDate;
                            priceDiscAdmTrans.ToDate                = catVendorCatalogMaintenanceRequestDateValues.PriceValidToDate;

                            priceDiscAdmTrans.InventDimId           = InventDim::findOrCreate(inventDim).InventDimId;
                            priceDiscAdmTrans.QuantityAmountFrom    = 1;

                            priceDiscAdmTrans.Amount                = this.calculateSalesPrice(retailVendorProductCandSalesPrice, vendTable.AccountNum, catVendorProductCandidate);
                            priceDiscAdmTrans.Currency              = retailVendorProductCandSalesPrice.CurrencyCode;

                            select Symbol from unitOfMeasure
                                where unitOfMeasure.RecId == retailVendorProductCandSalesPrice.UnitOfMeasure;

                            priceDiscAdmTrans.UnitId                = unitOfMeasure.Symbol;
                            priceDiscAdmTrans.insert();

                            priceDiscAdmTrans.initFromAccountCode();
                            priceDiscAdmTrans.initFromItemCode();

                            selectedPriceDiscAdmTrans.add(priceDiscAdmTrans.RecId);
                        }

                        next retailVendorProductCandSalesPrice;
                    }
                }
            }

            if (priceDiscAdmTable.RecId)
            {
                infolog.clear();

                PriceDiscAdmCheckPostInputContract priceDiscAdmCheckPostInputContract = PriceDiscAdmCheckPostInputContract::construct();
                priceDiscAdmCheckPostInputContract.parmJournalNum(priceDiscAdmTable.JournalNum);
                priceDiscAdmCheckPostInputContract.parmCheckActionType(PriceDiscAdmCheckActionType::ValidateAll);
                priceDiscAdmCheckPostInputContract.parmPriceDiscAdmTransSetSelected(selectedPriceDiscAdmTrans);
                priceDiscAdmCheckPostInputContract.parmCheckOnly(false);
                priceDiscAdmCheckPostInputContract.parmAcceptWarnings(true);

                PriceDiscAdmCheckPost::runFromContract(priceDiscAdmCheckPostInputContract.pack());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchDefaultOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the default settings of the purchase order in <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> record for which the purchase order default settings will be updated.
    /// </param>
    /// <param name="_catVendorProductCandidateRecId">
    ///    The ID of the <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <param name="_dataAreaId">
    ///    The item legal entity
    /// </param>
    private void updatePurchDefaultOrderSettings(
        InventTable _inventTable,
        RefRecId _catVendorProductCandidateRecId,
        CompanyId
        _dataAreaId)
    {
        UnitOfMeasure                                   unitOfMeasure;
        UnitOfMeasureSymbol                             unitId;
        CatVendorProductCandidateDefaultOrderSettings   catVendorProductCandidateDefaultOrderSettings;
        InventItemPurchSetup                            inventItemPurchSetup;

        changecompany(_dataAreaId)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                // Unit Id from _inventTable.inventTableModulePurch() may be different from catVendorProductCandidatePrice.UnitOfMeasure,
                // because the former can be inherited from Retail category while the latter is from the vendor catalog XML.
                // Since catVendorProductCandidatePrice.UnitOfMeasure is the RecId of a UnitOfMeature, we only need it to in the join
                select HighestQty, LeadTime, LowestQty, MultipleQty, StandardQty
                    from catVendorProductCandidateDefaultOrderSettings
                        where catVendorProductCandidateDefaultOrderSettings.VendorProductCandidate == _catVendorProductCandidateRecId
                    join Symbol from unitOfMeasure
                        where unitOfMeasure.RecId == catVendorProductCandidateDefaultOrderSettings.UnitOfMeasure;
            }
            else
            {
                unitId = _inventTable.inventTableModulePurch().UnitId;

                select HighestQty, LeadTime, LowestQty, MultipleQty, StandardQty
                    from catVendorProductCandidateDefaultOrderSettings
                        where catVendorProductCandidateDefaultOrderSettings.VendorProductCandidate == _catVendorProductCandidateRecId
                    join Symbol from unitOfMeasure
                        where unitOfMeasure.RecId == catVendorProductCandidateDefaultOrderSettings.UnitOfMeasure
                              && unitOfMeasure.Symbol == unitId;
            }

            if (catVendorProductCandidateDefaultOrderSettings)
            {
                ttsbegin;
                inventItemPurchSetup = InventItemPurchSetup::findDefault(_inventTable.ItemId, true);
                if (inventItemPurchSetup)
                {
                    inventItemPurchSetup.HighestQty     = catVendorProductCandidateDefaultOrderSettings.HighestQty;
                    inventItemPurchSetup.LeadTime       = catVendorProductCandidateDefaultOrderSettings.LeadTime;
                    inventItemPurchSetup.LowestQty      = catVendorProductCandidateDefaultOrderSettings.LowestQty;
                    inventItemPurchSetup.MultipleQty    = catVendorProductCandidateDefaultOrderSettings.MultipleQty;
                    inventItemPurchSetup.StandardQty    = catVendorProductCandidateDefaultOrderSettings.StandardQty;
                    inventItemPurchSetup.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>