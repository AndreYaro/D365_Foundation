<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchOrderJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchPurchOrderJournalCreate extends FormletterJournalCreate
{
    VendPurchOrderJour          vendPurchOrderJour;

    PurchTable                  purchTable;
    PurchParmTable              purchParmTable;
    PurchParmUpdate             purchParmUpdate;

    PurchTotals                 purchTotals;
    RecordSortedList            recordListPurchParmLine;
    NoYes                       creditNote;
    LedgerParameters            ledgerParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a journal and voucher number from the corresponding number sequences.
    /// </summary>
    /// <returns>
    /// A <c>NumberSeq</c> object.
    /// </returns>
    protected NumberSeq allocateNumAndVoucher()
    {
        RefRecId                purchNumber;
        RefRecId                purchVoucher;
        NumberSequenceDatatype  numberDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchaseOrderId().NumberSequenceDatatype);
        NumberSequenceDatatype  voucherDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchaseOrderVoucher().NumberSequenceDatatype);
        RefRecId                scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        boolean                 voucherEqualsNumber;

        if (ledgerParameters.IsEncumbranceProcessEnabled)
        {
            if (purchTable.NumberSequenceGroup)
            {
                purchNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, purchTable.NumberSequenceGroup).NumberSequenceId;

                if (!purchNumber)
                {
                    purchNumber = PurchParameters::numRefPurchaseOrderId().NumberSequenceId;
                }

                if (PurchParameters::numRefPurchaseOrderId().AllowSameAs)
                {
                    voucherEqualsNumber = true;
                    purchVoucher        = purchNumber;
                }
                else
                {
                    purchVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, purchTable.NumberSequenceGroup).NumberSequenceId;

                    if (!purchVoucher)
                    {
                        purchVoucher = PurchParameters::numRefPurchaseOrderVoucher().NumberSequenceId;
                    }
                }

                if (purchNumber)
                {
                    return NumberSeq::newGetNumAndVoucherFromId(purchNumber, purchVoucher, voucherEqualsNumber);
                }
                else
                {
                    return NumberSeq::newGetVoucherFromId(purchVoucher);
                }
            }
            else
            {
                if (PurchParameters::numRefPurchaseOrderId().NumberSequenceId)
                {
                    return NumberSeq::newGetNumAndVoucher(PurchParameters::numRefPurchaseOrderId(),PurchParameters::numRefPurchaseOrderVoucher());
                }
                else
                {
                    return NumberSeq::newGetVoucher(PurchParameters::numRefPurchaseOrderVoucher());
                }
            }
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the journal can be created.
    /// </summary>
    /// <returns>
    /// true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean                                 validatedOk = true;

        if (!super())
        {
            return false;
        }

        if (!this.checkLedgerPeriod())
        {
            return false;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && !this.checkHeaderChargesAllocated())
        {
            return false;
        }

        return validatedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeaderChargesAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are unallocated header charges for the current purchase order.
    /// </summary>
    /// <returns>
    /// true if there are not any unallocated header charges for the current purchase order; otherwise,
    /// false.
    /// </returns>
    public boolean checkHeaderChargesAllocated()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && purchTable.existUnallocatedMiscCharge())
        {
            error("@SPS2136");

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that posting in the ledger period is allowed.
    /// </summary>
    /// <returns>
    ///    true if posting in the ledger period is allowed; otherwise, false.
    /// </returns>
    protected boolean checkLedgerPeriod()
    {
        return PurchTable::checkLedgerPeriod(purchTable.PurchId, purchTable.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when either the sales order, the purchase order, or the request for
    /// quote is updated.
    /// </summary>
    protected void createJournalHeader()
    {
        this.setDeliveryFields();

        vendPurchOrderJour.Qty                  = purchTotals.purchQty();
        vendPurchOrderJour.Weight               = purchTotals.purchWeight();
        vendPurchOrderJour.Volume               = purchTotals.purchVolume();
        vendPurchOrderJour.SalesOrderbalance    = purchTotals.purchBalance();
        vendPurchOrderJour.EndDisc              = purchTotals.purchEndDisc();
        vendPurchOrderJour.SumMarkup            = purchTotals.purchMarkup();
        vendPurchOrderJour.SumTax               = purchTotals.purchTaxTotal();
        vendPurchOrderJour.RoundOff             = purchTotals.purchRoundOff();
        vendPurchOrderJour.Amount               = purchTotals.purchTotalAmount();    

        vendPurchOrderJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    //Docucopy  moved to post class
    protected void createJournalLine(Common _purchLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _purchParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            TransitDocumentManager_IN::newManager().transit(purchTable, vendPurchOrderJour);
        }

        //<GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(PurchTable, VendPurchOrderJour);
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>VendPurchOrderJour</c> record.
    /// </summary>
    /// <returns>
    ///    The <c>VendPurchOrderJour</c> record.
    /// </returns>
    public Common getJournal()
    {
        return vendPurchOrderJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        ledgerParameters = LedgerParameters::find();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        boolean         proformaPosting;
        RefRecId        createdVersionRefRecId;

        [journalNumber, voucher] = this.getNumAndVoucher();

        vendPurchOrderJour.clear();
        vendPurchOrderJour.initValue();

        vendPurchOrderJour.ParmId               = purchParmUpdate.ParmId;
        vendPurchOrderJour.PurchaseOrderId      = this.getJournalNumber();
        vendPurchOrderJour.PurchaseOrderVoucher = this.getVoucher();
        vendPurchOrderJour.PurchOrderDate       = this.updateDate();

        purchTable = PurchTable::findRecId(purchTable.RecId, true);

        if (this.proforma())
        {
            proformaPosting         = true;
            createdVersionRefRecId  = VersioningPurchaseOrder::newPurchaseOrder(purchTable).createApprovedVersion(true);
        }
        else if (purchTable.DocumentState != VersioningDocumentState::Confirmed)
        {
            VersioningPurchaseOrder::newPurchaseOrder(purchTable).confirm();
        }

        if (proformaPosting && createdVersionRefRecId)
        {
            vendPurchOrderJour.PurchTableVersion    = createdVersionRefRecId;
        }
        else
        {
            vendPurchOrderJour.PurchTableVersion    = PurchTableVersion::findLatest(purchTable.PurchId,
    																				 purchTable.DataAreaId,
    																				 false, 			//not for update
    																				 proformaPosting	//are proforma versions allowed
    																				).RecId;
        }

        vendPurchOrderJour.initFromPurchTable(purchTable);

        vendPurchOrderJour.setDocNum(purchTable);

        vendPurchOrderJour.InterCompanyPosted   = this.parmInterCompanyPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {
        purchTable = purchParmTable.purchTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        if (totals)
        {
            purchTotals = totals;
        }

        if (!totals || !purchTotals.isConfirmation())
        {
            purchTotals = PurchTotals::newPurchTableConfirmation(purchTable, purchParmTable);
            purchTotals.calc();
        }

        purchTotals.parmUpdateTotalsSummary(true);
        this.parmTax(purchTotals.tax());
        PurchOrderSourceDocumentLineItem::initializePurchTotalsDiscountCache(purchTable, purchTotals);
		
        if (this.mustUpdatePurchaseOrderHeaderDistribution())
        {
            purchTable.type().updateDistribution();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePurchaseOrderHeaderDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if updates the purchase order header distribution.
    /// </summary>
    /// <returns>
    /// true if the purchase order header distribution must be updated; otherwise, false.
    /// </returns>
    private boolean mustUpdatePurchaseOrderHeaderDistribution()
    {
        if (purchTable.ChangeRequestRequired && 
            purchTable.SourceDocumentLine)
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(purchTable.SourceDocumentLine);
            return !sourceDocumentLine.StateContainer || 
                   sourceDocumentLine.StateContainer != SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine).parmCurrentStateContainer();
        }

        return !purchTable.ChangeRequestRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal was created.
    /// </summary>
    /// <returns>
    /// true if the journal was created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Allow confirmation of PO without lines when a previous entry in the purchase order confirmation
    /// exists.
    /// </remarks>
    protected boolean isJournalCreated()
    {
        boolean isJournalCreated;

        isJournalCreated = super() || this.previousJournalEntryExists();

        return isJournalCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExists</Name>
				<Source><![CDATA[
    protected boolean linesExists()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected TableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchaseOrderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the voucher number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        if (ledgerParameters.IsEncumbranceProcessEnabled)
        {
            return PurchParameters::numRefPurchaseOrderVoucher();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousJournalEntryExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a previous journal entry exists.
    /// </summary>
    /// <returns>
    /// true if a previous journal entry exists; otherwise, false.
    /// </returns>
    protected boolean previousJournalEntryExists()
    {
        VendPurchOrderJour      localVendPurchOrderJour;

        select firstonly RecId
        from localVendPurchOrderJour
        where localVendPurchOrderJour.PurchId == purchTable.PurchId
           && localVendPurchOrderJour.RecId   != vendPurchOrderJour.RecId;

        return (localVendPurchOrderJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is a pro forma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a pro forma journal; otherwise, false
    /// </returns>
    protected boolean  proforma()
    {
        return purchParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordListPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
        PurchLine           localPurchLine;

        if (!purchParmTable.DeliveryPostalAddress
            || !purchParmTable.DeliveryName)
        {
            select firstonly DeliveryPostalAddress, DeliveryName, PurchId from localPurchLine
                where localPurchLine.PurchId == purchTable.PurchId;
        }
        vendPurchOrderJour.DeliveryPostalAddress = purchParmTable.DeliveryPostalAddress ? purchParmTable.DeliveryPostalAddress : localPurchLine.DeliveryPostalAddress;

        vendPurchOrderJour.DeliveryName             = purchParmTable.DeliveryName    ? purchParmTable.DeliveryName
                                                                     : localPurchLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        PurchLine   purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate  updateDate()
    {
        return purchParmTable.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPurchOrderJournalCreate construct()
    {
        return new PurchPurchOrderJournalCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>