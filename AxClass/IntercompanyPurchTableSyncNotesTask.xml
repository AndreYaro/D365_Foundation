<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanyPurchTableSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanyPurchTableSyncNotesTask</c> class handles the transfer of documents when it is
///    called from the <c>PurchLine</c> class.
/// </summary>
class IntercompanyPurchTableSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                SalesTable  salesTable;
                DocuRef     fromDocuRef;

                PurchTable purchTable = PurchTable::findRecId(refRecId);
                if (purchTable.InterCompanyCompanyId)
                {
                    //
                    //  Delete all notes on associated salesorder in other company
                    //
                    // No need to delete all notes in order to improve performance if new notes are created
                    if (!this.isCreatedDocu())
                    {
                        changecompany(purchTable.InterCompanyCompanyId)
                        {
                            setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                            select salesTable
                            where salesTable.SalesId == purchTable.InterCompanySalesId
                                && salesTable.RecId   != fromRecId;
                            if (salesTable.RecId)
                            {
                                this.deleteDocuRef(salesTable,purchTable.RecId);

                                //need check if there were customer Notes for InterCompany salesOrders
                                if (SalesParameters::find().MCRCopyNotes && !this.shouldUseCreatedDateTimeOfDocuRefBeingWritten())
                                {
                                    DocuType docuType;

                                    while select TypeId from docuType
                                    where docuType.TypeGroup == DocuTypeGroup::Note
                                    {
                                        Docu::copy(salesTable.custTable_CustAccount(), salesTable, docuType.TypeId);
                                    }
                                }
                            }
                        }
                    }
                    //
                    //  Create all notes on associated salesorder in other company
                    //
                    while select fromDocuRef
                    where fromDocuRef.RefCompanyId == purchTable.DataAreaId
                        && fromDocuRef.RefTableId   == purchTable.TableId
                        && fromDocuRef.RefRecId     == purchTable.RecId
                        // Only process new created notes if new notes are created
                        && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                        && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                    {
                        if (this.validateDocuRefTypeGroup(fromDocuRef))
                        {
                            changecompany(purchTable.InterCompanyCompanyId)
                            {
                                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                                select salesTable
                                where salesTable.SalesId == purchTable.InterCompanySalesId
                                    && salesTable.RecId   != fromRecId;
                                if (salesTable.RecId)
                                {
                                    this.writeDocuRef(salesTable,fromDocuRef,purchTable.RecId);
                                }
                            }
                        }
                    }
                }

                if (purchTable.InterCompanyOriginalSalesId
                    && purchTable.InterCompanyOrder)
                {
                    salesTable = null;
                    while select salesTable
                    where salesTable.SalesId == purchTable.InterCompanyOriginalSalesId
                        && salesTable.RecId   != fromRecId
                    {
                        if (!this.isCreatedDocu())
                        {
                            //
                            //  Delete all notes on associated salesorder in same company
                            //
                            this.deleteDocuRef(salesTable,purchTable.RecId);
                        }

                        //
                        //  Create all notes on associated salesorder in same company
                        //
                        while select fromDocuRef
                        where fromDocuRef.RefCompanyId == purchTable.DataAreaId
                            && fromDocuRef.RefTableId   == purchTable.TableId
                            && fromDocuRef.RefRecId     == purchTable.RecId
                            // Only process new created notes if new notes are created
                            && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                            && (!this.shouldUseCreatedDateTimeOfDocuRefBeingWritten() || fromDocuRef.CreatedDateTime == docuRefBeingWritten.CreatedDateTime)
                        {
                            if (this.validateDocuRefTypeGroup(fromDocuRef))
                            {
                                this.writeDocuRef(salesTable,fromDocuRef,purchTable.RecId);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuRefTypeGroup</Name>
				<Source><![CDATA[
    protected boolean validateDocuRefTypeGroup(DocuRef _docuRef)
    {
        if (IntercompanySyncNotesTaskWriteDocuRefCheckFlight::instance().isEnabled())
        {
            return this.canWriteDocuRef(_docuRef);
        }
        else
        {
            return _docuRef.docuType().TypeGroup == DocuTypeGroup::Note;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanyPurchTableSyncNotesTask construct()
    {
        return new IntercompanyPurchTableSyncNotesTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCreatedDateTimeOfDocuRefBeingWritten</Name>
				<Source><![CDATA[
    protected boolean shouldUseCreatedDateTimeOfDocuRefBeingWritten()
    {
        return docuRefBeingWritten.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>