<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollSetup</c> class sets up default payroll data, including all the payroll tax data.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[
SysSetupConfigKeyAttribute(configurationkeystr(PayrollAdministration)),
SysSetupTableAttribute(tableStr(PayrollCalculationFrequency)),
SysSetupTableAttribute(tableStr(PayrollTaxCode)),
SysSetupTableAttribute(tableStr(PayrollTaxCodeParameter)),
SysSetupTableAttribute(tableStr(PayrollTaxCodeParameterDuration)),
SysSetupTableAttribute(tableStr(PayrollTaxCodeParameterValue)),
SysSetupTableAttribute(tableStr(PayrollTaxEngineTaxCodeForSymmetry)),
SysSetupTableAttribute(tableStr(PayrollWorkerTaxCode)),
SysSetupTableAttribute(tableStr(PayrollWorkerTaxCodeParameterValue))
]
class PayrollSetup extends SysSetupAsync implements SysSetup
{
    #PayrollConstants

    str                 xmlDataFile;
    FileIOPermission    filePermission;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadCalculationFrequencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the default calculation frequency records
    /// </summary>
    protected void loadCalculationFrequencies()
    {
        PayrollCalculationFrequency calculationFrequency;

        // Create 'All' frequency
        calculationFrequency = PayrollCalculationFrequency::findByCalculationFrequency("@Payroll:All");

        if (calculationFrequency.RecId == 0)
        {
            calculationFrequency.clear();
            calculationFrequency.CalculationFrequencyId = ("@Payroll:All");
            calculationFrequency.Description = ("@Payroll:AllPayPeriods");
            calculationFrequency.Basis = PayrollCalculationBasis::All;
            calculationFrequency.IsImmutable = true;
            calculationFrequency.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the default data for the Payroll module
    /// </summary>
    public void loadData()
    {
        // Load the default calculation frequencies
        this.loadCalculationFrequencies();
        this.loadRailroadTaxData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRailroadTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the RRTA (Railroad Retirement Tax Act) and RUIA (Railroad Unemployment
    /// Insurance Authority) tax codes and associated parameter records.
    /// </summary>
    /// <remarks>
    /// These railroad taxes are not imported from the base tax data xml file but
    /// instead are directly added via this method.
    /// </remarks>
    public void loadRailroadTaxData()
    {
        //
        // Only perform railroad tax data updates if railroad taxes were previously disabled
        // and have just now been enabled.
        //
        if (!PayrollSetup::haveRailroadTaxesBeenLoaded())
        {
            PayrollSetup::loadRailroadTaxDataSingle(#EMPLOYEERRTA1, PayrollTaxCodeType::RRTA1, false, true, #EMPLOYEERRTA1SYMMETRY);
            PayrollSetup::loadRailroadTaxDataSingle(#EMPLOYEERRTA2, PayrollTaxCodeType::RRTA2, false, true, #EMPLOYEERRTA2SYMMETRY);
            PayrollSetup::loadRailroadTaxDataSingle(#EMPLOYERRRTA1, PayrollTaxCodeType::ER_RRTA1, true, true, #EMPLOYERRRTA1SYMMETRY);
            PayrollSetup::loadRailroadTaxDataSingle(#EMPLOYERRRTA2, PayrollTaxCodeType::ER_RRTA2, true, true, #EMPLOYERRRTA2SYMMETRY);
            PayrollSetup::loadRailroadTaxDataSingle(#EMPLOYERRUIA, PayrollTaxCodeType::ER_RUIA, true, false, #EMPLOYERRUIASYMMETRY);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRailroadTaxesToApplicableTaxesList</Name>
				<Source><![CDATA[
    private static System.Collections.ArrayList addRailroadTaxesToApplicableTaxesList(
        System.Collections.ArrayList _list)
    {
        const str RailroadTaxId = '%RRTA%';
        const str RailroadUnemploymentTaxId = '%ER_RUIA%';

        System.Collections.ArrayList railroadTaxCodeList;
        
        if (HcmSharedParameters::find().EnableRailroadTaxes)
        {
            railroadTaxCodeList = PayrollTaxEngineUtil::getTaxIdListFromTaxEngine();
            _list.AddRange(railroadTaxCodeList);
            
            railroadTaxCodeList = PayrollTaxEngineUtil::getTaxIdListFromTaxEngine();
            _list.AddRange(railroadTaxCodeList);
        }

        return _list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveRailroadTaxesBeenLoaded</Name>
				<Source><![CDATA[
    private static boolean haveRailroadTaxesBeenLoaded()
    {
        #ISOCountryRegionCodes
        LogisticsAddressCountryRegionId countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        
        // If one of the RR taxes already exists, then it is safe to assume that all of them have been created, in which case return true
        return (PayrollTaxCode::findByCodeCountryRegion(#EMPLOYEERRTA1, countryRegionId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the base tax data xml document
    /// </summary>
    /// <returns>
    /// Returns an <c>XmlDocument</c> object of the base tax data xml file.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an exception if no XML is found.
    /// </exception>
    protected XmlDocument loadXmlDocument()
    {
        return PayrollTaxEngineUtil::loadBaseTaxDataXmlDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlDocumentForResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML stored in the specified AOT Resource.
    /// </summary>
    /// <param name="_resourceName">
    /// The name string of the Resource in the AOT from which to retrieve the XML.
    /// </param>
    /// <returns>
    /// Returns an <c>XmlDocument</c> object of the XML that is stored in the specified
    /// Resource resource in the AOT. Null is returned if no XML is found.
    /// </returns>
    public static XmlDocument getXmlDocumentForResource(str _resourceName)
    {
        #AOT
        resourceNode        resourceNode;
        str                 source;
        container           data;
        XmlDocument         sourceXML;

        // Get the XML string holding the data from the specified resource item
        resourceNode = new resourceNode(_resourceName);
        if (resourceNode.isFound() && resourceNode.resourceType() == SysResourceType::XMLDoc)
        {
            data = SysResource::getResourceNodeData(resourceNode);
            source = conPeek(data, 1);
        }
        else
        {
            return null;
        }

        if (source)
        {
            sourceXML = XmlDocument::newXml(source);
        }
        else
        {
            return null;
        }

        return sourceXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBaseTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads and updates the base tax payroll data tables based on the current XML stored in
    /// the <c>PayrollBaseTaxData</c> Resource. This is data that is shipped as part of the
    /// application and is updated via regular tax updates.
    /// </summary>
    /// <param name="_showProcess">
    /// Specifies if the progress control should be displayed; optional.
    /// </param>
    /// <remarks>
    /// The following tables are populated by this method:  PayrollTaxCode, PayrollTaxCodeForSymmetry,
    /// PayrollTaxCodeParameter, PayrollTaxCodeParameterDuration and PayrollTaxCodeParameterValue.
    /// </remarks>
    public static void loadBaseTaxData(boolean _showProcess = false)
    {
        #AOT
        #PayrollConstants
        #avifiles
        XmlDocument         sourceXML;
        XmlNodeList         taxCodeRecords,
                            taxCodeSymmetryRecords,
                            parameterRecords,
                            parameterDurationRecords,
                            parameterValueRecords;
        XmlNode             versionNode,
                            taxCodeRecord,
                            taxCodeSymmetryRecord,
                            parameterRecord,
                            parameterDurationRecord,
                            parameterValueRecord;
        LogisticsAddressCountryRegion       countryRegion;
        PayrollTaxCode                      taxCode;
        PayrollTaxEngineTaxCodeForSymmetry  taxCodeForSymmetry;
        PayrollTaxCodeParameter             taxCodeParameter;
        PayrollTaxCodeParameterDuration     taxCodeParameterDuration;
        PayrollTaxCodeParameterValue        taxCodeParameterValue;
        PayrollTaxExternalReporting         taxExternalReporting;
        HcmSharedParameters                 hcmSharedParameters;
        PayrollSetup                        payrollSetup;
        DictEnum                            payrollTaxCodeTypeEnum = new DictEnum(enumName2Id('PayrollTaxCodetype')),
                                            payrollControlTypeEnum = new DictEnum(enumName2Id('PayrollControlType')),
                                            payrollMethodModifierEnum = new DictEnum(enumName2Id('PayrollMethodModifier'));
        str                                 code,
                                            codeSymmetry,
                                            parameterName,
                                            versionStr,
                                            description,
                                            controlType,
                                            paramDescr;
        int                                 taxType, methodModifier;
        boolean                             isEmployerTax,
                                            isPayStatementLineLocked;
        SysOperationProgress                p;
        LogisticsAddressCountryRegionISOCode countryRegionISOCode;

        payrollSetup = new PayrollSetup();

        sourceXML = payrollSetup.loadXmlDocument();

        // Grab the version node at the top of the XML file
        versionNode = sourceXML.selectSingleNode('//Record[@name="HcmSharedParameters"]');

        //
        // If the version node does not exist, this is a sign the resource XML file has not been constructed properly
        // and could indicate that the tax engine binaries have not been loaded properly.
        //
        if (versionNode == null)
        {
            error("@PayrollProcessing:PayrollDeprecationMessage");
            return;
        }

        //
        // Grab the tax engine version from the XML node.
        // For example: 2018-R3a, 2018-R2, 2018-R1, etc.
        //
        versionStr = versionNode.selectSingleNode('Field[@name="TaxDataVersionForSymmetry"]').text();

        hcmSharedParameters = HcmSharedParameters::find(true);

        //
        // Gather payroll tax code nodes from the resource XML. These will be looped through in order to create or
        // update tax code, parameter, parameter duration, and parameter value records in the customer's existing data.
        //
        taxCodeRecords = sourceXML.selectNodes('//Record[@name="PayrollTaxCode"]');

        // If no tax code nodes are found, the resource XML has either been constructed incorrectly or has not been loaded properly
        if (taxCodeRecords == null)
        {
            error("@PayrollProcessing:PayrollDeprecationMessage");
            return;
        }

        if (_showProcess)
        {
            p = SysOperationProgress::newGeneral(#aviupdate, "@Payroll:ImportingAndUpdatingTaxCodesAndTaxCodeParameters", taxCodeRecords.length());
        }

        //
        // The entire tax update process is wrapped in a tts block to ensure that any failures during update
        // will result in a complete rollback and will not leave corrupt or incomplete data.
        //
        ttsbegin;

        //
        // Remove all existing parameter duration and parameter value records from customer data prior to update.
        // These will be refreshed against the updated versions of themselves in the resource XML.
        //
        delete_from taxCodeParameterDuration;
        delete_from taxCodeParameterValue;

        taxCodeRecord = taxCodeRecords.nextNode();

        // Begin iterating over all payroll tax code nodes in the resource XML file
        while (taxCodeRecord)
        {
            code = taxCodeRecord.selectSingleNode('Field[@name="Code"]').text();

            if (_showProcess)
            {
                p.setText(strFmt("@Payroll:TaxCode1", code));
                p.incCount();
            }

            description = taxCodeRecord.selectSingleNode('Field[@name="Description"]').text();
            countryRegionISOCode = taxCodeRecord.selectSingleNode('Field[@name="CountryRegionId"]').text();
            isEmployerTax = str2int(taxCodeRecord.selectSingleNode('Field[@name="IsEmployerTax"]').text());
            isPayStatementLineLocked = str2int(taxCodeRecord.selectSingleNode('Field[@name="IsPayStatementLineLocked"]').text());
            taxType = payrollTaxCodeTypeEnum.symbol2Value(taxCodeRecord.selectSingleNode('Field[@name="Type"]').text());

            select firstonly CountryRegionId from countryRegion where countryRegion.ISOcode == countryRegionISOCode;

            // Attempt to find an existing payroll tax code database record for this tax code
            taxCode = PayrollTaxCode::findByCodeCountryRegion(code, countryRegion.CountryRegionId, true);

            // If no such database record exists, insert a new one
            if (!taxCode.RecId)
            {
                taxCode.Code = code;
                taxCode.Description = description;
                taxCode.CountryRegionId = countryRegion.CountryRegionId;
                taxCode.IsEmployerTax = isEmployerTax;
                taxCode.IsPayStatementLineLocked = isPayStatementLineLocked;
                taxCode.Type = taxType;
                taxCode.insert();
            }
            else if (taxCode.Description != description || taxCode.IsEmployerTax != isEmployerTax
                        || taxCode.IsPayStatementLineLocked != isPayStatementLineLocked || taxCode.Type != taxType)
            {
                // If one or more tax code fields have changed, it is easier to refresh all fields when updating the existing record
                taxCode.Description = description;
                taxCode.CountryRegionId = countryRegion.CountryRegionId;
                taxCode.IsEmployerTax = isEmployerTax;
                taxCode.IsPayStatementLineLocked = isPayStatementLineLocked;
                taxCode.Type = taxType;
                taxCode.update();
            }

            //
            // Attempt to find an existing PayrollTaxExternalReporting record for this payroll tax code.
            // If one does not already exist, write a default PayrollTaxExternalReporting record for the tax.
            //
            taxExternalReporting = PayrollTaxExternalReporting::findByPayrollTaxCode(taxCode.RecId, dateNull(), dateMax());

            if (!taxExternalReporting.RecId)
            {
                taxExternalReporting.PayrollTaxCode = taxCode.RecId;
                taxExternalReporting.w2BoxNumber = PayrollW2BoxNumber::None;
                taxExternalReporting.ValidFrom = dateNull();
                taxExternalReporting.ValidTo = dateMax();
                taxExternalReporting.insert();
            }

            // Each payroll tax code node in the resource XML contains one child symmetry tax code node.
            taxCodeSymmetryRecords = taxCodeRecord.selectNodes('Record[@name="PayrollTaxEngineTaxCodeForSymmetry"]');

            //
            // If a payroll tax code node is found without a child symmetry tax code node, this indicates
            // an improperly constructed resoure XML file and the update should be aborted.
            //
            if (taxCodeSymmetryRecords == null)
            {
                error("@PayrollProcessing:PayrollDeprecationMessage");
                ttsabort;

                return;
            }

            taxCodeSymmetryRecord = taxCodeSymmetryRecords.nextNode();

            if (taxCodeSymmetryRecord)
            {
                codeSymmetry = taxCodeSymmetryRecord.selectSingleNode('Field[@name="Code"]').text();
                methodModifier = payrollMethodModifierEnum.symbol2Value(taxCodeSymmetryRecord.selectSingleNode('Field[@name="MethodModifier"]').text());
                countryRegionISOCode = taxCodeSymmetryRecord.selectSingleNode('Field[@name="CountryRegionId"]').text();

                select firstonly CountryRegionId from countryRegion where countryRegion.isOcode == countryRegionISOCode;

                //
                // Attempt to find an existing symmetry tax code record for the current payroll tax code record.
                // If one does not exist or does exist but has been modified, insert/update the symmetry tax code record accordingly.
                //
                select firstonly forupdate taxCodeForSymmetry
                    where taxCodeForSymmetry.PayrollTaxCode == taxCode.RecId
                       && taxCodeForSymmetry.CountryRegionId == countryRegion.CountryRegionId;
                
                if (!taxCodeForSymmetry.RecId || taxCodeForSymmetry.Code != codeSymmetry || taxCodeForSymmetry.MethodModifier != methodModifier)
                {
                    taxCodeForSymmetry.Code = codeSymmetry;
                    taxCodeForSymmetry.CountryRegionId = countryRegion.CountryRegionId;
                    taxCodeForSymmetry.MethodModifier = methodModifier;
                    taxCodeForSymmetry.PayrollTaxCode = taxCode.RecId;
                    taxCodeForSymmetry.write();
                }

                //
                // Each symmetry tax code XML node contains child tax code parameter nodes.
                // Iterate over these child nodes, inserting or updating database records where appropriate.
                //
                parameterRecords = taxCodeSymmetryRecord.selectNodes('Record[@name="PayrollTaxCodeParameter"]');
                parameterRecord = parameterRecords.nextNode();

                while (parameterRecord)
                {
                    parameterName = parameterRecord.selectSingleNode('Field[@name="Name"]').text();
                    paramDescr = parameterRecord.selectSingleNode('Field[@name="Description"]').text();
                    controlType = parameterRecord.selectSingleNode('Field[@name="ControlType"]').text();

                    // Attempt to find a corresponding PayrollTaxCodeParameter record in the database
                    taxCodeParameter = PayrollTaxCodeParameter::findByNameTaxEngineTaxCode(parameterName, taxCodeForSymmetry.RecId, true);

                    // If no record exists, create a new one
                    if (!taxCodeParameter.RecId)
                    {
                        taxCodeParameter.TaxEngineTaxCode = taxCodeForSymmetry.RecId;
                        taxCodeParameter.Name = parameterName;
                        taxCodeParameter.Description = paramDescr;
                        taxCodeParameter.ControlType = payrollControlTypeEnum.name2Value(controlType);
                        taxCodeParameter.insert();
                    }
                    else if (taxCodeParameter.Description != paramDescr || taxCodeParameter.ControlType != payrollControlTypeEnum.name2Value(controlType))
                    {
                        // Description has changed, update the record with the new description value
                        taxCodeParameter.Description = paramDescr;
                        taxCodeParameter.ControlType = payrollControlTypeEnum.name2Value(controlType);
                        taxCodeParameter.update();
                    }

                    //
                    // Each tax code parameter XML node contains child tax code parameter duration nodes.
                    // Since all existing parameter duration records were deleted prior to this update, iterate over
                    // these child nodes and insert new database records for each.
                    //
                    parameterDurationRecords = parameterRecord.selectNodes('Record[@name="PayrollTaxCodeParameterDuration"]');
                    parameterDurationRecord = parameterDurationRecords.nextNode();

                    while (parameterDurationRecord)
                    {
                        // Create a new PayrollTaxCodeParameterDuration record from the xml data
                        taxCodeParameterDuration.TaxCodeParameter = taxCodeParameter.RecId;
                        taxCodeParameterDuration.ValidFrom = str2Date(parameterDurationRecord.selectSingleNode('Field[@name="ValidFrom"]').text(), 213);
                        taxCodeParameterDuration.ValidTo = str2Date(parameterDurationRecord.selectSingleNode('Field[@name="ValidTo"]').text(), 213);
                        taxCodeParameterDuration.insert();

                        //
                        // Each tax code parameter duration XML node contains child tax code parameter value nodes.
                        // Since all existing parameter value records were also deleted prior to this update, iterate over
                        // these child parameter value nodes and insert new database records for each.
                        //
                        parameterValueRecords = parameterDurationRecord.selectNodes('Record[@name="PayrollTaxCodeParameterValue"]');
                        parameterValueRecord = parameterValueRecords.nextNode();

                        while (parameterValueRecord)
                        {
                            // Create a new PayrollTaxCodeParameterValue record from the xml data
                            taxCodeParameterValue.TaxCodeParameterDuration = taxCodeParameterDuration.RecId;
                            taxCodeParameterValue.Value = parameterValueRecord.selectSingleNode('Field[@name="Value"]').text();
                            taxCodeParameterValue.Description = parameterValueRecord.selectSingleNode('Field[@name="Description"]').text();
                            taxCodeParameterValue.IsDefault = str2int(parameterValueRecord.selectSingleNode('Field[@name="IsDefault"]').text());
                            taxCodeParameterValue.ValidFrom = str2Date(parameterValueRecord.selectSingleNode('Field[@name="ValidFrom"]').text(), 213);
                            taxCodeParameterValue.ValidTo = str2Date(parameterValueRecord.selectSingleNode('Field[@name="ValidTo"]').text(), 213);
                            taxCodeParameterValue.insert();

                            parameterValueRecord = parameterValueRecords.nextNode();
                        }

                        parameterDurationRecord = parameterDurationRecords.nextNode();
                    }

                    parameterRecord = parameterRecords.nextNode();
                }
            }

            taxCodeRecord = taxCodeRecords.nextNode();
        }

        //
        // Now that all payroll tax codes and child nodes have been parsed from the resource XML
        // and corresponding database records updated, check if railroad taxes have been enabled.
        //
        if (hcmSharedParameters.EnableRailroadTaxes)
        {
            // If so, attempt to update railroad tax code data as well
            payrollSetup.loadRailroadTaxData();
        }

        // Update the shared parameters table with the tax engine version of the data that was just updated
        hcmSharedParameters.TaxDataVersionForSymmetry = versionStr;
        hcmSharedParameters.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRailroadTaxDataSingle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the specified railroad tax code and associated parameter records.
    /// </summary>
    /// <param name="_taxCodeId">
    /// The natural key for the <c>PayrollTaxCode</c> being created.
    /// </param>
    /// <param name="_taxCodeType">
    /// The tax code type of the <c>PayrollTaxCode</c> being created.
    /// </param>
    /// <param name="_isEmployer">
    /// True indicates that an employer tax is being created.
    /// </param>
    /// <param name="_isLineLocked">
    /// True indicates that a pay statement tax line for this tax cannot be edited.
    /// </param>
    /// <param name="_taxCodeIdInternal">
    /// The internal tax code that the tax engine uses.
    /// </param>
    private static void loadRailroadTaxDataSingle(
        PayrollTaxCodeId _taxCodeId,
        PayrollTaxCodeType _taxCodeType,
        boolean _isEmployer,
        boolean _isLineLocked,
        PayrollTaxCodeId _taxCodeIdInternal)
    {
        #ISOCountryRegionCodes

        LogisticsAddressCountryRegionId countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        PayrollTaxCode taxCode;
        PayrollTaxExternalReporting taxExternalReporting;
        PayrollTaxEngineTaxCodeForSymmetry taxCodeForSymmetry;
        PayrollTaxCodeParameter taxCodeParameter;
        PayrollTaxCodeParameterDuration taxCodeParameterDuration;
        PayrollTaxCodeParameterValue taxCodeParameterValue;
        
        taxCode.Code = _taxCodeId;
        taxCode.Description = enum2Value(_taxCodeType);
        taxCode.CountryRegionId = countryRegionId;
        taxCode.IsEmployerTax = _isEmployer;
        taxCode.IsPayStatementLineLocked = _isLineLocked;
        taxCode.Type = _taxCodeType;
        taxCode.write();
        
        taxExternalReporting.PayrollTaxCode = taxCode.RecId;
        taxExternalReporting.w2BoxNumber = PayrollW2BoxNumber::None;
        taxExternalReporting.ValidFrom = dateNull();
        taxExternalReporting.ValidTo = dateMax();
        taxExternalReporting.write();
        
        taxCodeForSymmetry.PayrollTaxCode = taxCode.RecId;
        taxCodeForSymmetry.Code = _taxCodeIdInternal;
        taxCodeForSymmetry.CountryRegionId = taxCode.CountryRegionId;
        taxCodeForSymmetry.MethodModifier = PayrollMethodModifier::None;
        taxCodeForSymmetry.write();
        
        taxCodeParameter.TaxEngineTaxCode = taxCodeForSymmetry.RecId;
        taxCodeParameter.Name = #EXEMPT;
        taxCodeParameter.Description = "@SYS117148";
        taxCodeParameter.ControlType = PayrollControlType::List;
        taxCodeParameter.write();
        
        taxCodeParameterDuration.TaxCodeParameter = taxCodeParameter.RecId;
        taxCodeParameterDuration.ValidFrom = dateNull();
        taxCodeParameterDuration.ValidTo = dateMax();
        taxCodeParameterDuration.write();
        
        taxCodeParameterValue.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        taxCodeParameterValue.TaxCodeParameterDuration = taxCodeParameterDuration.RecId;
        taxCodeParameterValue.Value = strUpr(#FALSE);
        taxCodeParameterValue.Description = #FALSE;
        taxCodeParameterValue.IsDefault = false;
        taxCodeParameterValue.ValidFrom = dateNull();
        taxCodeParameterValue.ValidTo = dateMax();
        taxCodeParameterValue.write();
        
        taxCodeParameterValue.TaxCodeParameterDuration = taxCodeParameterDuration.RecId;
        taxCodeParameterValue.Value = strUpr(#TRUE);
        taxCodeParameterValue.Description = #TRUE;
        taxCodeParameterValue.IsDefault = true;
        taxCodeParameterValue.ValidFrom = dateNull();
        taxCodeParameterValue.ValidTo = dateMax();
        taxCodeParameterValue.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the base tax data used in the <c>Payroll</c> module and then
    /// creates all the necessary tax setup records for applicable workers.
    /// </summary>
    /// <param name="args">
    /// The <c>Args</c> to be used during the process.
    /// </param>
    /// <param name="_showProcess">
    /// Whether or not a confirmation dialog should be displayed before the process begins.
    /// </param>
    public static void main(Args args, boolean _showProcess = true)
    {
        //
        // Note: this method is intended to be used by the PayrollUpdateBaseTaxData action menuitem,
        // so if any other menuitems need to leverage this main() there will need to be caller-evaluation
        // logic added to this method to ensure the applicable logic gets run.
        //

        if (!_showProcess || Box::yesNo("@Payroll:ThisProcessCanTakeALongTimeDependingOnTheNumberOfEmployeesAn", DialogButton::No) == DialogButton::Yes)
        {
            // Load the core payroll base tax tables
            PayrollSetup::loadBaseTaxData(_showProcess);

            // Set up immutable tax groups
            PayrollSetup::setupImmutableTaxGroup(_showProcess);

            // Refresh the worker tax records (taxes and parameter values)
            PayrollSetup::refreshAllWorkerTaxRegionTaxes(_showProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllWorkerTaxRegionTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all worker tax regions and refreshes worker taxes for each one.
    /// </summary>
    /// <param name="_showProcess">
    /// Specifies if the progress control should be displayed; optional.
    /// </param>
    /// <param name="_returnList">
    /// Specifies if a container should be returned of the tax codes added; optional.
    /// </param>
    public static void refreshAllWorkerTaxRegionTaxes(boolean _showProcess = false,
        boolean _returnList=false)
    {
        #avifiles
        #PayrollConstants
        SysOperationProgress        p;
        HcmWorker                   worker;
        PayrollWorkerTaxRegion      workerTaxRegion;

        if (_showProcess)
        {
            select count(RecId) from workerTaxRegion;
            p = SysOperationProgress::newGeneral(#aviupdate, "@Payroll:UpdatingWorkerTaxCodesAndParameters", workerTaxRegion.RecId);
        }

        // Refresh all worker tax regions
        while select workerTaxRegion
        {
            if (_showProcess)
            {
                // Retrieve the worker for progress display purposes
                worker = HcmWorker::find(workerTaxRegion.Worker);

                // Worker: %1 - %2
                p.setText(strFmt("@Payroll:Worker12", worker.PersonnelNumber, worker.name()));
                p.incCount();
            }

            PayrollSetup::refreshWorkerTaxRegionTaxesAllTime(workerTaxRegion, _returnList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkerTaxRegionTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the specified worker has all tax codes and their parameter values that are
    /// applicable to the specified tax region.
    /// </summary>
    /// <param name="_workerTaxRegion">
    /// The <c>PayrollWorkerTaxRegion</c> record that specifies the <c>HcmWorker</c> for which to
    /// refresh tax code assignments and parameters based on the inferred <c>PayrollTaxRegion</c>.
    /// </param>
    /// <param name="_applicableDate">
    /// The date the tax engine will use to determine tax applicability. This paramter is optional
    /// and defaults to the current date.
    /// </param>
    /// <param name="_returnList">
    /// Specifies if a container should be returned of the tax codes added; optional.
    /// </param>
    /// <returns>
    /// A container containing the string values representing the tax codes and parameter values added by the method.
    /// </returns>
    public static container refreshWorkerTaxRegionTaxes(PayrollWorkerTaxRegion _workerTaxRegion,
        date _applicableDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
        boolean _returnList=false)
    {
        #PayrollConstants
        #Define.SpaceFormatting('    ')
        System.Collections.ArrayList                        list;
        System.Collections.IEnumerator                      iter;
        System.Int16                                        payPeriodsPerYear = #PERIODSDAILY,
                                                            zeroInt16 = #ZEROAMOUNT;

        PayrollTaxRegion                    taxRegion;
        PayrollTaxRegionForSymmetry         taxRegionForSymmetry;
        PayrollTaxCodeParameter             taxCodeParameter;
        PayrollTaxCodeParameterDuration     taxCodeParameterDuration;
        PayrollTaxEngineTaxCodeForSymmetry  taxEngineTaxCodeForSymmetry;
        PayrollWorkerTaxCode                workerTaxCode;
        PayrollWorkerTaxCodeParameterValue  workerTaxCodeParameterValue;
        PayrollPositionDetails              payrollPositionDetails;
        HcmPositionWorkerAssignment         positionWorkerAssignment;
        HcmPositionWorkerAssignment         posWorkerAssign;
        LogisticsAddressCountryRegion       countryRegion;
        LogisticsPostalAddress              taxRegionPostalAddress;
        PayrollTaxCode                      taxCodeTable;
        PayrollWorkerTaxRegionForSymmetry   workerTaxRegionForSymmetry;

        CompanyInfo                         legalEntity;
        InteropPermission                   permission = new InteropPermission(InteropKind::ClrInterop);

        str                 taxCode,
                            newParameterValue;
        date                now     = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                            dateMin = dateNull(),
                            datemax = dateMax();
        utcdatetime         minDateTime = DateTimeUtil::minValue(),
                            maxDateTime = DateTimeUtil::maxValue();
        container           taxCodeList;
        int                 containerCount=0;
        boolean             taxCodeAdded,
                            legalEntityAdded;

        permission.assert();

        SysDaQueryObject queryObject = PayrollSetup::getCountryRegionId(countryRegion);

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.executeQuery(new SysDaFindObject(queryObject));

        select firstonly workerTaxRegionForSymmetry
            where workerTaxRegionForSymmetry.WorkerTaxRegion == _workerTaxRegion.RecId;

        taxRegion = PayrollTaxRegion::find(_workerTaxRegion.TaxRegion);
        taxRegionPostalAddress = LogisticsPostalAddress::findByLocation(taxRegion.LogisticsLocation);

        ttsbegin;
        while (iter && iter.MoveNext())
        {
            taxCodeAdded = false;
            
            // Get the first position assignment to use as the ValidFrom for the worker tax parameter values created later
            select firstonly ValidTimeState(minDateTime, maxDateTime) posWorkerAssign order by ValidFrom asc
                where posWorkerAssign.Worker == _workerTaxRegion.Worker;

            //
            // Iterate through the payroll-paying LEs for the worker's assigned positions across all time
            // and set up LE-specific parameter values for the worker (and tax codes)
            //
            while select ValidTimeState(minDateTime, maxDateTime) PaidByLegalEntity from payrollPositionDetails
            group by PaidByLegalEntity
                join Position, Worker from positionWorkerAssignment
                where positionWorkerAssignment.Position == payrollPositionDetails.Position
                &&    positionWorkerAssignment.Worker == _workerTaxRegion.Worker
            {
                legalEntityAdded = false;

                //
                // Now iterate across all current and future parameters for that tax and create worker parameter value if missing.
                // Optimized for the most common path where there will not be multiple future versions
                // of parameter duration records.
                //
                while select validTimeState(now, dateMax) RecId, Name, ControlType, Description from taxCodeParameter
                    where taxCodeParameter.TaxEngineTaxCode == taxEngineTaxCodeForSymmetry.RecId
                    join TaxCodeParameter from taxCodeParameterDuration
                    where taxCodeParameterDuration.TaxCodeParameter == taxCodeParameter.RecId
                {
                    // Determine if the corresponding worker parameter value record exists at any point in time, and if not, create it
                    workerTaxCodeParameterValue = PayrollWorkerTaxCodeParameterValue::findByWorkerTaxCodeParameter(workerTaxCode.RecId, taxCodeParameter.RecId, payrollPositionDetails.PaidByLegalEntity, dateMin, dateMax);
                    if (!workerTaxCodeParameterValue)
                    {
                        workerTaxCodeParameterValue.WorkerTaxCode = workerTaxCode.RecId;
                        workerTaxCodeParameterValue.TaxCodeParameter = taxCodeParameter.RecId;
                        workerTaxCodeParameterValue.LegalEntity = payrollPositionDetails.PaidByLegalEntity;
                        workerTaxCodeParameterValue.ValidFrom   = DateTimeUtil::date(posWorkerAssign.ValidFrom);
                        workerTaxCodeParameterValue.ValidTo     = dateMax;

                        // Special logic is needed to create the correct SUTA value
                        if (taxCode == #GENERICSUTA && taxCodeParameter.Name == #SUTASTATE)
                        {
                            newParameterValue = taxRegionPostalAddress.State;
                        }
                        else
                        {
                            // All other parameter value records use the following logic
                            if (taxCodeParameter.ControlType == PayrollControlType::Freetext)
                            {
                                newParameterValue = int2str(#ZEROAMOUNT);
                            }
                            else
                            {
                                // It is a list parameter and thus needs the default value retrieved
                                newParameterValue = PayrollTaxCodeParameterValue::getDefaultValue(taxCodeParameter.RecId, now);
                            }
                        }
                        workerTaxCodeParameterValue.Value = newParameterValue;
                        workerTaxCodeParameterValue.insert();

                        if (_returnList)
                        {
                            //
                            // If the parameter value was added for an existing worker tax code, add the tax code text to the
                            // container for the infolog as context to what tax it was added for.
                            //
                            if (!taxCodeAdded)
                            {
                                taxCodeTable = PayrollTaxCode::find(taxEngineTaxCodeForSymmetry.PayrollTaxCode);
                                taxCodeList = conIns(taxCodeList, containerCount+1, taxCodeTable.Code+ ' - ' + taxCodeTable.Description);
                                containerCount++;
                                taxCodeAdded = true;
                            }

                            //
                            // Make sure that the LE is specified prior to reporting on the parameter values that are
                            // created for it
                            //
                            if (!legalEntityAdded)
                            {
                                legalEntity = CompanyInfo::findRecId(payrollPositionDetails.PaidByLegalEntity);
                                taxCodeList = conIns(taxCodeList, containerCount+1, ' ' + legalEntity.Name);
                                containerCount++;
                                legalEntityAdded = true;
                            }

                            taxCodeList = conIns(taxCodeList, containerCount+1, #SpaceFormatting + taxCodeParameter.Description+ ' - ' + workerTaxCodeParameterValue.Value);
                            containerCount++;
                        }
                    }
                    else
                    {
                        // Ensure that the current value is valid and, if not, transform the value to a valid one
                        PayrollSetup::transformParameterValue(WorkerTaxCode.RecId, taxCodeParameter, taxEngineTaxCodeForSymmetry.Code);
                    }
                }
            }
        }

        ttscommit;   

        CodeAccessPermission::revertAssert();

        return taxCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region ID.
    /// </summary>
    /// <param name = "_countryRegion">The <c>LogisticsAddressCountryRegion</c> record.</param>
    /// <returns>The query object.</returns>
    protected static SysDaQueryObject getCountryRegionId(LogisticsAddressCountryRegion _countryRegion)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_countryRegion);

        queryObject.projection().add(fieldStr(LogisticsAddressCountryRegion, CountryRegionId));
        queryObject.firstOnlyHint = true;

        queryObject.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(_countryRegion, fieldStr(LogisticsAddressCountryRegion, ISOcode)), new SysDaValueExpression(#US)));
        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkerTaxRegionTaxesAllTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates worker tax region for any tax changes for the previous and coming year.
    /// </summary>
    /// <param name="_workerTaxRegion">
    /// The <c>PayrollWorkerTaxRegion</c> record that specifies the <c>HcmWorker</c> for which to
    /// refresh tax code assignments and parameters based on the inferred <c>PayrollTaxRegion</c>.
    /// </param>
    /// <param name="_returnList">
    /// Specifies if a container should be returned of the tax codes added; optional.
    /// </param>
    /// <returns>
    /// A container containing the string values representing the tax codes and parameter values added by the method.
    /// </returns>
    public static container refreshWorkerTaxRegionTaxesAllTime(PayrollWorkerTaxRegion _workerTaxRegion,
        boolean _returnList=false)
    {
        #PayrollConstants
        utcdatetime                 applicableDate;
        int                         monthOffset;

        int                         containerIndex,
                                    containerLength;
        container                   taxCodeList,
                                    masterTaxCodeList;

        // The reference point for the iterations is today's date
        applicableDate = DateTimeUtil::utcNow();

        //
        // Execute the same logic starting 12 months prior to today's date and doing it quarterly
        // until 12 months after today's date in order to 'pick up' any applicable taxes that may
        // not have been applicable when the process was last run but have since been introduced by
        // a new tax update.
        //
        for (monthOffset = -#MONTHSINYEAR; monthOffset <= #MONTHSINYEAR; monthOffset+=3)
        {
            taxCodeList = PayrollSetup::refreshWorkerTaxRegionTaxes(_workerTaxRegion,
                DateTimeUtil::date(DateTimeUtil::addMonths(applicableDate, monthOffset)),
                _returnList);
            containerLength = conLen(masterTaxCodeList);
            for (containerIndex = 1; containerIndex <= conLen(taxCodeList); containerIndex++)
            {
                masterTaxCodeList = conIns(masterTaxCodeList, conLen(masterTaxCodeList)+1, conPeek(taxCodeList, containerIndex));
            }
        }
        return masterTaxCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms any known-invalid values in existing <c>PayrollWorkerTaxCodeParameterValue</c>
    /// records into valid values.
    /// </summary>
    /// <param name="_workerTaxCodeRecId">
    /// The <c>PayrollWorkerTaxCode</c> record identifier for the parameter being examined.
    /// </param>
    /// <param name="_parameter">
    /// The <c>PayrolltaxCodeParameter</c> table buffer associated with the value being examined.
    /// </param>
    /// <param name="_TaxCodeSym">
    /// The tax code that is internal to the tax engine.
    /// </param>
    private static void transformParameterValue(
    PayrollWorkerTaxCodeRecId _workerTaxCodeRecId,
    PayrollTaxCodeParameter _parameter,
    PayrollTaxCodeId _TaxCodeSym)
    {
        const str falseValue = 'FALSE';
        const str trueValue = 'TRUE';
        const str minimumRate = 'MINIMUMRATE';
        const str none = 'NONE';
        const str percentageRule = 'PERCENTAGERULE';
        PayrollWorkerTaxCodeParameterValue workerTaxCodeParameterValue;
        date dateMin = dateNull();
        date datemax = dateMax();
        int currentState = str2int(PayrollTaxEngineUtil::getTaxCodeSegment(_taxCodeSym, PayrollTaxCodeSegment::State));
        str currentTaxTypeStr = PayrollTaxEngineUtil::getTaxCodeSegment(_taxCodeSym, PayrollTaxCodeSegment::TaxCodeType);

        //
        // As of the 2017-R11 tax update, TRUE and FALSE are no longer valid state miscellaneous
        // parameters for Nebraska State Income Tax, so transform any such values to valid values.
        //
        if (currentTaxTypeStr == enum2Symbol(enumNum(PayrollTaxCodeType), PayrollTaxCodeType::SIT)
            && currentState == PayrollUSState::NE
            && _parameter.Name == minimumRate)
        {
            workerTaxCodeParameterValue.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            while select forUpdate validTimeState(dateMin, dateMax) workerTaxCodeParameterValue
                where workerTaxCodeParameterValue.WorkerTaxCode == _workerTaxCodeRecId
                && workerTaxCodeParameterValue.TaxCodeParameter == _parameter.RecId
            {
                if (workerTaxCodeParameterValue.Value == falseValue)
                {
                    workerTaxCodeParameterValue.Value = none;
                    workerTaxCodeParameterValue.update();
                }
                else if (workerTaxCodeParameterValue.Value == trueValue)
                {
                    workerTaxCodeParameterValue.Value = percentageRule;
                    workerTaxCodeParameterValue.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupImmutableTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through the <c>PayrollTaxCodeType</c> base enum items to create the immutable tax group if it does not
    /// already exist. The tax group is created using the Name property of the base enum item as the tax group name
    /// and the Label property as the tax group description.
    /// </summary>
    /// <param name="_showProcess">
    /// Specifies if the progress control should be displayed; optional.
    /// </param>
    /// <remarks>
    /// The <c>PayrollTaxGroup</c> table is populated by this method.
    /// </remarks>
    public static void setupImmutableTaxGroup(boolean _showProcess = false)
    {
        #avifiles
        int                     taxCodeTypeItemIndex;
        PayrollTaxGroup         taxGroup;
        PayrollTaxGroupId       taxGroupId;
        PayrollTaxGroupId       taxGroupDescription;
        SysOperationProgress    operationProgress;
        DictEnum                taxCodeType = new DictEnum(enumName2Id(enumStr(PayrollTaxCodeType)));

        if (_showProcess)
        {
            operationProgress = SysOperationProgress::newGeneral(#aviupdate, "@SYS4005097", taxCodeType.values());
        }

        ttsbegin;

        // Remove the tax group if its tax type cannot be found in the tax type enum
        while select forupdate taxGroup
            where taxGroup.IsImmutable == NoYes::Yes
        {
            if (taxCodeType.symbol2Value(taxGroup.GroupId) == 255 && taxGroup.IsEnabledForPostingDefinition == NoYes::No)
            {
                taxGroup.delete();
            }
        }

        for (taxCodeTypeItemIndex = 0; taxCodeTypeItemIndex < taxCodeType.values(); taxCodeTypeItemIndex++)
        {
            taxGroupId = taxCodeType.index2Symbol(taxCodeTypeItemIndex);
            taxGroupDescription = taxCodeType.index2Label(taxCodeTypeItemIndex);
            taxGroup = PayrollTaxGroup::findByTaxGroup(taxGroupId, true);

            if (_showProcess)
            {
                operationProgress.setText(strFmt("@SYS4005098", taxGroupId));
                operationProgress.incCount();
            }

            // Create tax group if it does not exist
            if (!taxGroup.RecId)
            {
                taxGroup.GroupId = taxGroupId;
                taxGroup.Description = taxGroupDescription;
                taxGroup.IsImmutable = NoYes::Yes;
                taxGroup.insert();
            }
            else
            {
                // Update record if a tax group exists and description is changed
                if (taxGroup.Description != taxGroupDescription)
                {
                    taxGroup.Description = taxGroupDescription;
                    taxGroup.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the supported currency code for payroll.
    /// </summary>
    /// <returns>The supported payroll currency code.</returns>
	public static CurrencyCode currencyCode()
    {
        const CurrencyCode PayrollUSDCurrencyCode = 'USD';
        return PayrollUSDCurrencyCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>