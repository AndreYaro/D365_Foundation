<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_Init</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost_Init</c> class initializes the backflush costing process.
/// </summary>
/// <remarks>
///    If running in batch, a separate batch task will be created for each production flow that will be
///    processed.
/// </remarks>
class LeanCost_Init extends LeanCost implements BatchRetryable
{
    TransDate                       transDate;

    BatchHeader                     batchHeader;

    DialogRunbase                   dialog;
    DialogField                     dialogTransDate;
    DialogField                     dialogTimeBucketPeriod;
    DialogField                     dialogTimeBucketPeriodUnit;

    // Recurrent backflush related
    TransDate                       endTransDate;
    Integer                         timeBucketPeriod;
    LeanCostingTimeBucketPeriodUnit timeBucketPeriodUnit;

    boolean                         isResumed;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        transDate,
        timeBucketPeriod,
        timeBucketPeriodUnit,
        endTransDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a lean costing record has been initialized
    /// </summary>
    /// <returns>
    ///    true if a lean costing record exists and the status is not ended; otherwise false.
    /// </returns>
    protected boolean checkStatus()
    {
        boolean ret = true;

        ret = super();
        if (ret && leanCostingRecId && leanCosting.status() == LeanProductionFlowCostingStatus::Ended)
            ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLeanCostCalcProdFlowBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>LeanCost_CalcProdFlowBase</c> class.
    /// </summary>
    /// <returns>
    ///    A <c>LeanCost_CalcProdFlow</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanCost_CalcProdFlowBase constructLeanCostCalcProdFlowBase()
    {
        return LeanCost_CalcProdFlowBase::construct(this.getLeanCostingFacade(), isResumed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLeanCosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lean costing record to use to cost this period.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createLeanCosting()
    {
        // First of all, check if the record already has been created
        select firstonly leanCosting
            where leanCosting.RecId == leanCostingRecId;

        if (!leanCosting)
        {
            leanCosting.ToDate             = transDate;
            leanCosting.insert();

            leanCostingRecId = leanCosting.RecId;

            // Now create the records for each production flow
            this.createLeanProductionFlowCosting();
        }
        else
        {
            isResumed = true;

            this.resetLeanProductionFlowCostingInfologs();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLeanProductionFlowCostingInfologs</Name>
				<Source><![CDATA[
    private void resetLeanProductionFlowCostingInfologs()
    {
        if (leanCosting)
        {
            LeanProductionFlowCosting leanProductionFlowCosting;

            while select forupdate leanProductionFlowCosting
                where leanProductionFlowCosting.LeanCosting == leanCosting.RecId
                   && leanProductionFlowCosting.Status == LeanProductionFlowCostingStatus::Created
            {
                leanProductionFlowCosting.infolog = conNull();
                leanProductionFlowCosting.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLeanProductionFlowCosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the lean costing production flow records to use to cost this period.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createLeanProductionFlowCosting()
    {
        LeanProductionFlowReference leanProductionFlowReference;
        PlanReference               planReference;
        LeanProductionFlowCosting   leanProductionFlowCosting;
        LegalEntity                 legalEntity = CompanyInfo::current();

        while select RecId from leanProductionFlowReference
            exists join planReference
                where planReference.RecId       == leanProductionFlowReference.PlanReference
                   && planReference.LegalEntity == legalEntity
        {
            leanProductionFlowCosting.clear();
            leanProductionFlowCosting.LeanCosting                 = leanCosting.RecId;
            leanProductionFlowCosting.Voucher                     = NumberSeq::newGetNum(ProdParameters::numRefProdCalcVoucherId()).num();
            leanProductionFlowCosting.LeanProductionFlowReference = leanProductionFlowReference.RecId;
            leanProductionFlowCosting.Status                      = LeanProductionFlowCostingStatus::Created;
            leanProductionFlowCosting.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the worker tasks.
    /// </summary>
    /// <remarks>
    ///    If the class is running in batch, the worker tasks will be put into batch; otherwise, the outer
    ///    Transaction Tracking System (TTS) scope will be committed and the worker tasks will be triggered.
    ///    This is performed so that in both cases, the cancellation will run in several small TTS scopes.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTasks()
    {
        LeanProductionFlowCosting       leanProductionFlowCosting;
        LeanCost_Init                   leanCost_Init;

        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                // Initialize the batch header using the recId that this class
                // currently holds to add the tasks to the same job
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // When running in batch mode we need to check if there are remaining time buckets
            // and schedule a new "init" task for the next time bucket if it exists.
            if (transDate < endTransDate)
            {
                leanCost_Init = LeanCost_Init::newParameters(endTransDate);
                batchHeader.addTask(leanCost_Init, BatchConstraintType::And);
            }
        }
        else
        {
            progress.setText("@SYS8516");
            progress.update(true);

            // Commit the outer transaction
            // Application Level should be zero after wards
            ttscommit;

            if (appl.ttsLevel() != 0)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        // Add all the items that needs to be cancelled
        while select leanProductionFlowCosting
            where leanProductionFlowCosting.LeanCosting == leanCosting.RecId
               && leanProductionFlowCosting.Status      == LeanProductionFlowCostingStatus::Created
        {
            // For each record add a new Batch Task
            LeanCost_CalcProdFlowBase leanCost_CalcProdFlow = this.constructLeanCostCalcProdFlowBase();
            leanCost_CalcProdFlow.parmLeanCostingRecId(leanCosting.RecId);
            leanCost_CalcProdFlow.parmLeanProductionFlowCostingRecId(leanProductionFlowCosting.RecId);

            // Add the tasks
            if (this.isInBatch())
            {
                leanCost_CalcProdFlow.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

                batchHeader.addTask(leanCost_CalcProdFlow, BatchConstraintType::And);
                // If there is a next time bucket "init" task, we need to make it dependent on
                // all previous "calculation" tasks. Here we add this dependency for each "calculation" tasks.
                if (leanCost_Init)
                {
                    batchHeader.addDependency(leanCost_Init, leanCost_CalcProdFlow, BatchDependencyStatus::Finished);
                }
            }
            else
            {
                progress.setText(strFmt("@SYS313425", leanProductionFlowCosting.displayProductionFlowName()));
                progress.incCount();
                try
                {
                    // Any exceptions raised due to the call to run() method for the current production flow
                    // should not prevent the backflush costing of next production flows from running.
                    this.runProductionFlowCalculation(leanCost_CalcProdFlow);
                }
                catch
                {
                    if (LeanProductionFlowCosting::find(leanProductionFlowCosting.RecId).Status != LeanProductionFlowCostingStatus::Ended)
                    {
                        error(strFmt("@SYS342992", leanProductionFlowCosting.displayProductionFlowName()));
                    }
                }
            }
        }

        // Save
        if (this.isInBatch())
        {
            batchHeader.save();
        }
        else
        {
            // Now open a transaction again
            ttsbegin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProductionFlowCalculation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runProductionFlowCalculation(LeanCost_CalcProdFlowBase _leanCost_CalcProdFlow)
    {
        _leanCost_CalcProdFlow.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the dialog box system or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        LeanCosting     currentLeanCosting = LeanCosting::find(leanCostingRecId);
        ProdParameters  prodParameters = ProdParameters::find();

        dialog = super();

        if (currentLeanCosting.RecId && currentLeanCosting.status() != LeanProductionFlowCostingStatus::Ended)
        {
            dialog.addText(strFmt("@SYS301738", queryValue(currentLeanCosting.fromDate()), queryValue(currentLeanCosting.ToDate)));
        }
        else
        {
            this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            dialogTransDate = dialog.addField(extendedTypeStr(TransDate), "@SYS301722", "@SYS301739");
            dialogTransDate.value(transDate);

            if (!LeanCosting::lastToDate())
            {
                // This is the case when there is no lean costing record.
                // The first lean costing record cannot be created using buckets,
                // so we disregard the time bucket parameters.
                timeBucketPeriod = 0;
                timeBucketPeriodUnit = LeanCostingTimeBucketPeriodUnit::None;
            }
            else
            {
                dialogTimeBucketPeriod = dialog.addField(extendedTypeStr(Integer), "@SYS318023", "@SYS318023");
                dialogTimeBucketPeriodUnit = dialog.addField(enumStr(LeanCostingTimeBucketPeriodUnit), "@SYS318025", "@SYS318025");
                dialogTimeBucketPeriod.enabled(false);
                dialogTimeBucketPeriodUnit.enabled(false);
                if (this.useTransactionDateAsEndDate(prodParameters))
                {
                    dialogTransDate.enabled(false);
                }
                dialogTimeBucketPeriod.value(prodParameters.LeanCostingTimeBucketPeriod);
                dialogTimeBucketPeriodUnit.value(prodParameters.LeanCostingTimeBucketPeriodUnit);

                timeBucketPeriod = prodParameters.LeanCostingTimeBucketPeriod;
                timeBucketPeriodUnit = prodParameters.LeanCostingTimeBucketPeriodUnit;
            }
        }

        dialog.defaultButton(DialogDefaultButton::Cancel);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDateWhenInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction date to use when running in batch.
    /// </summary>
    /// <returns>The transaction date.</returns>
    protected TransDate transactionDateWhenInBatch()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTransactionDateAsEndDate</Name>
				<Source><![CDATA[
    protected boolean useTransactionDateAsEndDate(ProdParameters _prodParameters)
    {
        return _prodParameters.LeanCostingTimeBucketPeriodUnit != LeanCostingTimeBucketPeriodUnit::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDialogTransDate</Name>
				<Source><![CDATA[
    protected boolean useDialogTransDate()
    {
        return timeBucketPeriodUnit == LeanCostingTimeBucketPeriodUnit::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the costing process.
    /// </summary>
    /// <remarks>
    ///    The records for the production flows that should be costed are created first, then the lean costing
    ///    record. The worker tasks will be initialized for this pair.
    /// </remarks>
    protected void execute()
    {
        setPrefix(LeanCost_Init::description());

        if (this.isInBatch())
        {
            // If we are running in batch mode the settings for time bucket
            // might have changed since the job was scheduled.
            // We need to run with latest values, so we have to retrieve their current value.
            this.getTimeBucketParameters();

            // When running in batch mode with time buckets
            // we use the current execution date as the end date.
            if (!this.useDialogTransDate())
            {
                transDate = this.transactionDateWhenInBatch();
                endTransDate = transDate;
            }
        }

        do
        {
            if (timeBucketPeriodUnit != LeanCostingTimeBucketPeriodUnit::None)
            {
                this.recalculateCurrentTransDate();
                if (transDate > endTransDate)
                    break;  // time bucket ending date is pass the whole period end date: stop calculation.
            }

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.progressInit(LeanCost_Init::description(),0,#AviUpdate);

            this.createLeanCosting();

            // Check if I am allowed to proceed
            if (this.checkStatus())
            {
                // For this closing I need to create the tasks
                this.createTasks();
            }
        }
        while (!this.isInBatch() && (transDate < endTransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog(boolean _calledFromUI = true)
    {
        if (dialogTransDate)
        {
            if (this.useDialogTransDate())
            {
                transDate = dialogTransDate.value();

                // Check the trans date
                if (transDate <= LeanCosting::lastToDate())
                {
                    throw error(strFmt("@SYS301723", LeanCosting::lastToDate()));
                }
            }

            if (!transDate && !this.isInBatch())
            {
                transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            if (_calledFromUI && transDate == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                if (Box::okCancel("@SYS328728", DialogButton::Cancel) == DialogButton::Cancel)
                {
                    return false;
                }
            }

            // Save end date (selected by user)
            endTransDate = transDate;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeBucketParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the parameters of the current lean costing time bucket from the production parameters
    ///    table.
    /// </summary>
    private void getTimeBucketParameters()
    {
        ProdParameters  prodParameters = ProdParameters::find();

        if (prodParameters.RecId)
        {
            timeBucketPeriod = prodParameters.LeanCostingTimeBucketPeriod;
            timeBucketPeriodUnit = prodParameters.LeanCostingTimeBucketPeriodUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateCurrentTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the ending date for the next time bucket.
    /// </summary>
    private void recalculateCurrentTransDate()
    {
        TransDate   lastTransDate = LeanCosting::lastToDate();
        TransDate   newTransDate;

        switch (timeBucketPeriodUnit)
        {
            case LeanCostingTimeBucketPeriodUnit::None:
                return;
            case LeanCostingTimeBucketPeriodUnit::Day:
                newTransDate = lastTransDate + timeBucketPeriod;
                break;
            case LeanCostingTimeBucketPeriodUnit::Week:
                newTransDate = lastTransDate + (timeBucketPeriod * 7);
                break;
            case LeanCostingTimeBucketPeriodUnit::Month:
                while (timeBucketPeriod > 0)
                {
                    newTransDate = nextMth(lastTransDate);
                    timeBucketPeriod--;
                }
                break;
            case LeanCostingTimeBucketPeriodUnit::Quarter:
                while (timeBucketPeriod > 0)
                {
                    newTransDate = nextQtr(lastTransDate);
                    timeBucketPeriod--;
                }
                break;
            case LeanCostingTimeBucketPeriodUnit::Year:
                while (timeBucketPeriod > 0)
                {
                    newTransDate = nextYr(lastTransDate);
                    timeBucketPeriod--;
                }
                break;
            default:
                return;
        }

        this.parmTransDate(newTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, #CurrentList, base]        = _packedClass;
                return super(base);
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the costing has not already been done.
    /// </summary>
    /// <param name="calledFrom">
    ///    An object that indicates whether the method was called from the client or the server.
    /// </param>
    /// <returns>
    ///    true if the costing can proceed; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean                     ret = true;
        LeanCosting                 costingCheck;

        costingCheck.selectLocked(false);
        select firstonly costingCheck
        order by ToDate desc;

        if (costingCheck.status() != LeanProductionFlowCostingStatus::Ended &&
            costingCheck.RecId    != leanCostingRecId)
        {
            return checkFailed(strFmt("@SYS301734",
                        LeanProductionFlowCostingStatus::Calculation));
        }

        if (!this.isInBatch() && transDate <= costingCheck.ToDate)
        {
            return checkFailed("@SYS301735");
        }

        RecId calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, transDate);
        if (fiscalCalendarPeriod.currentLedgerPeriodStatus() !=  FiscalPeriodStatus::Open)
        {
            return checkFailed(strFmt("@SYS96735", date2StrUsr(transDate, DateFlags::FormatAll)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_Init construct(
        LeanCostingFacadeBase   _leanCostingFacade
        )
    {
        LeanCost_Init leanCostInit = new LeanCost_Init();
        leanCostInit.parmLeanCostingFacade(_leanCostingFacade);
        return leanCostInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@SYS190016";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args, LeanCost_Init costing = LeanCost_Init::newParameters())
    {
        LeanCosting                  leanCosting;

        if (args &&
            args.dataset() == tableNum(LeanCosting) &&
            args.parmEnumType() == enumNum(LeanProductionFlowCostingStatus) &&
            args.parmEnum() == LeanProductionFlowCostingStatus::Calculation)
        {
            leanCosting = args.record();
            if (leanCosting.status() == LeanProductionFlowCostingStatus::Ended)
            {
                throw error("@SYS301737");
            }

            costing.parmLeanCostingRecId(leanCosting.RecId);
        }
        else
        {
            costing.parmLeanCostingRecId(0);
        }

        if (! costing.prompt())
            return;

        try
        {
            costing.runOperation();
        }
        catch
        {
            exceptionTextFallThrough();
        }

        if (args && args.caller() && args.dataset() == tableNum(LeanCosting))
        {
            leanCosting = args.record();
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(leanCosting);

            if (formDataSource)
            {
                args.lookupRecord(costing.parmLeanCosting());
                formDataSource.research(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>LeanCost_Init</c> class.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date; optional.
    /// </param>
    /// <returns>
    /// The new instance of the <c>LeanCost_Init</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LeanCost_Init newParameters(TransDate  _transDate = dateNull())
    {
        LeanCost_Init  costing = LeanCost_Init::construct(LeanCostingFacade::construct());
        costing.getLast();
        costing.parmTransDate(_transDate ? _transDate : LeanCost::defaultDate());
        return costing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>