<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReversal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransReversal_IN</c> class is the tax transaction reversal class.
/// </summary>
public class TaxTransReversal_IN
{
    int         factor;
    TraceNum    reversalTraceNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doReverseRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does reverse register of tax transaction.
    /// </summary>
    /// <param name="_orignalTaxTransIN">
    /// The original tax transaction.
    /// </param>
    /// <param name="_TaxTransIN">
    /// The new tax transaction.
    /// </param>
    protected void doReverseRegister(TaxTrans_IN _orignalTaxTransIN, TaxTrans_IN _TaxTransIN)
    {
        ExciseRG23AIRegister_IN orignalRG23AI;
        ExciseRG23ARegister_IN  orignalRG23A;
        ExciseRG23CIRegister_IN orignalRG23CI;
        ExciseRG23CRegister_IN  orignalRG23C;
        ExciseRG23DRegister_IN  orignalRG23D;
        ExciseDSARegister_IN    orignalDSA;
        ExcisePLARegister_IN    orignalPLA;

        ExciseRG23AIRegister_IN RG23AI;
        ExciseRG23ARegister_IN  RG23A;
        ExciseRG23CIRegister_IN RG23CI;
        ExciseRG23CRegister_IN  RG23C;
        ExciseRG23DRegister_IN  RG23D;
        ExciseDSARegister_IN    DSA;
        ExcisePLARegister_IN    PLA;

        switch (_orignalTaxTransIN.ExciseRegister)
        {
            case ExciseRegister_IN::RG23APartI :
                select firstOnly orignalRG23AI where orignalRG23AI.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalRG23AI.RecId)
                {
                    RG23AI = orignalRG23AI.data();
                    this.reverseRegister(RG23AI, _TaxTransIN);
                    this.reverseQuantityRegister(RG23AI);
                    RG23AI.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23AIRegister_IN),orignalRG23AI.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23AIRegister_IN),RG23AI.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::RG23APartII :
                select firstOnly orignalRG23A where orignalRG23A.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalRG23A.RecId)
                {
                    RG23A = orignalRG23A.data();
                    this.reverseRegister(RG23A, _TaxTransIN);
                    this.reverseAmountRegister(RG23A, _TaxTransIN);
                    RG23A.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23ARegister_IN),orignalRG23A.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23ARegister_IN),RG23A.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::RG23CPartI :
                select firstOnly orignalRG23CI where orignalRG23CI.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalRG23CI.RecId)
                {
                    RG23CI = orignalRG23CI.data();
                    this.reverseRegister(RG23CI, _TaxTransIN);
                    this.reverseQuantityRegister(RG23CI);
                    RG23CI.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23CIRegister_IN),orignalRG23CI.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23CIRegister_IN),RG23CI.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::RG23CPartII :
                select firstOnly orignalRG23C where orignalRG23C.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalRG23C.RecId)
                {
                    RG23C = orignalRG23C.data();
                    this.reverseRegister(RG23C, _TaxTransIN);
                    this.reverseAmountRegister(RG23C, _TaxTransIN);
                    RG23C.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23CRegister_IN),orignalRG23C.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23CRegister_IN),RG23C.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::RG23D :
                select firstOnly orignalRG23D where orignalRG23D.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalRG23D.RecId)
                {
                    RG23D = orignalRG23D.data();
                    this.reverseRegister(RG23D, _TaxTransIN);
                    this.reverseAmountRegister(RG23D, _TaxTransIN);
                    RG23D.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23DRegister_IN),orignalRG23D.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseRG23DRegister_IN),RG23D.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::DSA :
                select firstOnly orignalDSA where orignalDSA.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalDSA.RecId)
                {
                    DSA = orignalDSA.data();
                    this.reverseRegister(DSA, _TaxTransIN);
                    this.reverseAmountRegister(DSA, _TaxTransIN);
                    DSA.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExciseDSARegister_IN),orignalDSA.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExciseDSARegister_IN),DSA.RecId,reversalTraceNum);
                    }
                }
                break;
            case ExciseRegister_IN::PLA :
                select firstOnly orignalPLA where orignalPLA.TaxTrans_IN == _orignalTaxTransIN.RecId;
                if (orignalPLA.RecId)
                {
                    PLA = orignalPLA.data();
                    this.reverseRegister(PLA, _TaxTransIN);
                    this.reverseAmountRegister(PLA, _TaxTransIN);
                    PLA.insert();

                    if (reversalTraceNum)
                    {
                        TransactionReversalTrans::createTransaction(tablenum(ExcisePLARegister_IN),orignalPLA.RecId,reversalTraceNum);
                        TransactionReversalTrans::createTransaction(tablenum(ExcisePLARegister_IN),PLA.RecId,reversalTraceNum);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>TaxTransReversal_IN</c> class.
    /// </summary>
    public void init()
    {
        factor = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactor</Name>
				<Source><![CDATA[
        public int parmFactor(int _factor = factor)
    {
        factor = _factor;
        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalTraceNum</Name>
				<Source><![CDATA[
        public TraceNum parmReversalTraceNum(TraceNum _reversalTraceNum = reversalTraceNum)
    {
        reversalTraceNum = _reversalTraceNum;
        return reversalTraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the register amount.
    /// </summary>
    /// <param name="_register">
    /// The tax excise amount register.
    /// </param>
    /// <param name="_TaxTransIN">
    /// The tax transaction.
    /// </param>
    protected void reverseAmountRegister(TaxExciseAmountRegister_IN _register, TaxTrans_IN _TaxTransIN)
    {
        TaxAmount tempAmount;

        if (_register.TableId == tableNum(ExcisePLARegister_IN))
        {
            tempAmount = _register.PayableAmount;
            _register.PayableAmount = _register.RecoverableAmount;
            _register.RecoverableAmount = tempAmount;
        }
        else
        {
            _register.PayableAmount = _register.PayableAmount * factor;
            _register.RecoverableAmount = _register.RecoverableAmount * factor;
        }
        _register.TransRecId = _TaxTransIN.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseByTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse data by tax transaction.
    /// </summary>
    /// <param name="_orignalTaxTransRecId">
    /// The original tax transaction rec id.
    /// </param>
    /// <param name="_newTaxTrans">
    /// The new tax transaction.
    /// </param>
    public void reverseByTaxTrans(RecId _orignalTaxTransRecId, TaxTrans _newTaxTrans)
    {
        TaxTrans_IN orignalTaxTransIN;
        TaxTrans_IN taxTransIN;

        select firstOnly orignalTaxTransIN
            where orignalTaxTransIN.RefRecId == _orignalTaxTransRecId
                && orignalTaxTransIN.ExciseRegister == ExciseRegister_IN::None;

        if (orignalTaxTransIN.RecId)
        {
            taxTransIN = this.reverseTaxTransIN(orignalTaxTransIN);
            taxTransIN.RefRecId = _newTaxTrans.RecId;
            taxTransIN.TransDate = _newTaxTrans.TransDate;
            taxTransIN.Voucher  = _newTaxTrans.Voucher;
            taxTransIN.TaxOrigin = _newTaxTrans.TaxOrigin;

            taxTransIN.insert();

            if (reversalTraceNum)
            {
                TransactionReversalTrans::createTransaction(tablenum(TaxTrans_IN),orignalTaxTransIN.RecId,reversalTraceNum);
                TransactionReversalTrans::createTransaction(tablenum(TaxTrans_IN),taxTransIN.RecId,reversalTraceNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseExciseRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the excise registration.
    /// </summary>
    /// <param name="_orignialTransDate">
    /// The original transaction date.
    /// </param>
    /// <param name="_originalVoucher">
    /// The original voucher.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_voucher">
    /// The voucher information.
    /// </param>
    public void reverseExciseRegistration(
        TransDate _orignialTransDate,
        Voucher _originalVoucher,
        TransDate _transDate,
        Voucher _voucher)
    {
        TaxTrans_IN orignalTaxTransIN;
        TaxTrans_IN taxTransIN;

        while select orignalTaxTransIN
            where orignalTaxTransIN.TransDate == _orignialTransDate
                && orignalTaxTransIN.Voucher  == _originalVoucher
                && orignalTaxTransIN.ExciseRegister != ExciseRegister_IN::None
        {
            taxTransIN = this.reverseTaxTransIN(orignalTaxTransIN);
            taxTransIN.TransDate = _transDate;
            taxTransIN.Voucher  = _voucher;
            taxTransIN.TaxOrigin = TaxOrigin::TaxReversed;
            taxTransIN = this.reverseTaxTransINExcise(orignalTaxTransIN, taxTransIN);
            taxTransIN.insert();
            this.doReverseRegister(orignalTaxTransIN, taxTransIN);

            if (reversalTraceNum)
            {
                TransactionReversalTrans::createTransaction(tablenum(TaxTrans_IN),orignalTaxTransIN.RecId,reversalTraceNum);
                TransactionReversalTrans::createTransaction(tablenum(TaxTrans_IN),taxTransIN.RecId,reversalTraceNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the quantity register information.
    /// </summary>
    /// <param name="_register">
    /// The tax excise quantity register.
    /// </param>
    protected void reverseQuantityRegister(TaxExciseQuantityRegister_IN _register)
    {
        _register.ApplyExciseBalQty = _register.ApplyExciseBalQty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the tax excise register.
    /// </summary>
    /// <param name="_register">
    /// The tax excise register.
    /// </param>
    /// <param name="_TaxTransIN">
    /// The tax transaction.
    /// </param>
    protected void reverseRegister(TaxExciseRegister_IN _register, TaxTrans_IN _TaxTransIN)
    {
        _register.RGDate = _TaxTransIN.TransDate;
        _register.TaxTrans_IN = _TaxTransIN.RecId;
        _register.IssueQty = _register.IssueQty * factor;
        _register.ReceiptQty = _register.ReceiptQty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxTransIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the tax transaction.
    /// </summary>
    /// <param name="_originalTaxTransIN">
    /// The original tax transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxTrans_IN</c> class.
    /// </returns>
    protected TaxTrans_IN reverseTaxTransIN(TaxTrans_IN _originalTaxTransIN)
    {
        TaxTrans_IN taxTransIN;

        taxTransIN = _originalTaxTransIN.data();

        taxTransIN.LoadOnInventoryAmount      = taxTransIN.LoadOnInventoryAmount * factor;
        taxTransIN.PostedTaxAmout             = taxTransIN.PostedTaxAmout * factor;
        taxTransIN.NonRecoverableAmt          = taxTransIN.NonRecoverableAmt * factor;
        taxTransIN.RecoverableAmount          = taxTransIN.RecoverableAmount * factor;
        taxTransIN.PayableAmount              = taxTransIN.PayableAmount * factor;
        taxTransIN.DeferredAmount             = taxTransIN.DeferredAmount * factor;
        taxTransIN.AbatementAmount            = taxTransIN.AbatementAmount * factor;

        taxTransIN.CustomsTaxRegulationAmountCur = taxTransIN.CustomsTaxRegulationAmountCur * factor;
        taxTransIN.ExpenseAmount                 = taxTransIN.ExpenseAmount * factor;
        taxTransIN.Quantity                      = taxTransIN.Quantity * factor;
        taxTransIN.RetentionAmount               = taxTransIN.RetentionAmount * factor;

        taxTransIN.SourceBaseAmountCur           = taxTransIN.SourceBaseAmountCur * factor;
        taxTransIN.SourceBaseAmountCurRegulated  = taxTransIN.SourceBaseAmountCurRegulated * factor;
        taxTransIN.SourceRegulateAmountCur       = taxTransIN.SourceRegulateAmountCur * factor;
        taxTransIN.SourceTaxAmountCur            = taxTransIN.SourceTaxAmountCur * factor;

        taxTransIN.TaxAmount                     = taxTransIN.TaxAmount * factor;
        taxTransIN.TaxAmountSecondary            = taxTransIN.TaxAmountSecondary * factor;

        taxTransIN.RG23ADeferredAmount           = taxTransIN.RG23ADeferredAmount * factor;
        taxTransIN.RG23CDeferredAmount           = taxTransIN.RG23CDeferredAmount * factor;
        taxTransIN.RG23DCENVATCreditAmount       = taxTransIN.RG23DCENVATCreditAmount * factor;

        return taxTransIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxTransINExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse tax transaction excise.
    /// </summary>
    /// <param name="_originalTaxTransIN">
    /// The original tax transaction.
    /// </param>
    /// <param name="_taxTransIN">
    /// The tax transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxTrans_IN</c> class.
    /// </returns>
    protected TaxTrans_IN reverseTaxTransINExcise(TaxTrans_IN _originalTaxTransIN, TaxTrans_IN _taxTransIN)
    {
        _taxTransIN.DSAQuantity                   = _taxTransIN.DSAQuantity * factor;
        _taxTransIN.ManufacturedQuantity          = _taxTransIN.ManufacturedQuantity * factor;
        _taxTransIN.PLAAmount                     = _taxTransIN.PLAAmount * factor;

        if (_taxTransIN.rg23aiiIdDate != dateNull())
        {
            _taxTransIN.rg23aiiIdDate             = _taxTransIN.TransDate;
        }
        if (_taxTransIN.RG23AIIdDate != dateNull())
        {
            _taxTransIN.RG23AIIdDate             = _taxTransIN.TransDate;
        }
        if (_taxTransIN.RG23CIIdDate != dateNull())
        {
            _taxTransIN.RG23CIIdDate             = _taxTransIN.TransDate;
        }
        if (_taxTransIN.RG23CIIIdDate != dateNull())
        {
            _taxTransIN.RG23CIIIdDate             = _taxTransIN.TransDate;
        }
        if (_taxTransIN.plaIdDate != dateNull())
        {
            _taxTransIN.plaIdDate             = _taxTransIN.TransDate;
        }
        if (_taxTransIN.dsaIdDate != dateNull())
        {
            _taxTransIN.dsaIdDate             = _taxTransIN.TransDate;
        }

        return _taxTransIN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>