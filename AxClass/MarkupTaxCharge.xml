<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTaxCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class MarkupTaxCharge implements SysPackable
{
    private List salesTaxCodeList;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        salesTaxCodeListPacked
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesTaxCodeList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal List parmSalesTaxCodeList(List _salesTaxCodeList = salesTaxCodeList)
    {
        salesTaxCodeList = _salesTaxCodeList;

        return salesTaxCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static MarkupTaxCharge construct()
    {
        return new MarkupTaxCharge();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        container salesTaxCodeListPacked = salesTaxCodeList ? salesTaxCodeList.pack() : conNull();

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        int version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                container salesTaxCodeListPacked;
                [version, #CurrentList] = packedClass;
                if (salesTaxCodeListPacked != conNull())
                {
                    salesTaxCodeList = List::create(salesTaxCodeListPacked);
                }

                return true;
            
            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>