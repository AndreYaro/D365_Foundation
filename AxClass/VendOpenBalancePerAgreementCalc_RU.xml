<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOpenBalancePerAgreementCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VendOpenBalancePerAgreementCalc_RU</c> is a class
/// for calculation open vendor balance regarding to contract (agreement).
/// </summary>
public final class VendOpenBalancePerAgreementCalc_RU extends CustVendOpenBalancePerAgreementCalc_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates open vendor balance with regards to contract (agreement).
    /// </summary>
    /// <param name = "_agreementId"> Agreement identificator.</param>
    /// <returns> Returns open vendor balance regarding to contract (agreement).</returns>
    protected AmountMST calcForAgreement(AgreementId_RU _agreementId)
    {
        AmountMST balance;

        Query query = new Query();

        QueryBuildDataSource mainQbds = this.addTransBalanceDataSource(query);

        SysQuery::addDimensionAttributeRange(
            query,
            mainQbds.name(),
            fieldStr(VendTrans, DefaultDimension),
            DimensionComponent::DimensionAttribute,
            _agreementId,
            this.agreementDimensionAttribute.Name);

        QueryRun qr = new QueryRun(query);

        if (qr.next())
        {
            VendTrans vendTrans = qr.get(tableNum(VendTrans));
            balance = vendTrans.AmountMST;
        }

        query = new Query();
        mainQbds = this.addSettlementBalanceDataSource(query);

        QueryBuildDataSource qbds = mainQbds.addDataSource(tableNum(VendTrans));
        qbds.addLink(fieldNum(VendSettlement, OffsetRecid), fieldNum(VendTrans, RecId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::addDimensionAttributeRange(
            query,
            qbds.name(),
            fieldStr(VendTrans, DefaultDimension),
            DimensionComponent::DimensionAttribute,
            _agreementId,
            this.agreementDimensionAttribute.Name);

        this.addJoinTransFilterByDimValue(
            query,
            mainQbds,
            SysQuery::valueNot(_agreementId));

        qr = new QueryRun(query);

        if (qr.next())
        {
            VendSettlement vendSettlement = qr.get(tableNum(VendSettlement));
            balance += vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcForEmptyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates open vendor balance without agreement.
    /// </summary>
    /// <returns> Returns open vendor balance without agreement.</returns>
    protected AmountMST calcForEmptyAgreement()
    {
        AmountMST balance;

        Query query = new Query();
        this.addTransBalanceDataSource(query);

        QueryRun qr = new QueryRun(query);

        if (qr.next())
        {
            VendTrans vendTrans = qr.get(tableNum(VendTrans));
            balance = vendTrans.AmountMST;
        }

        query = new Query();
        QueryBuildDataSource qbds = this.addSettlementBalanceDataSource(query);

        this.addJoinTransFilterByDimValue(
            query,
            qbds,
            SysQuery::valueNotEmptyString());

        qr = new QueryRun(query);

        if (qr.next())
        {
            VendSettlement vendSettlement = qr.get(tableNum(VendSettlement));

            balance += vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
        }
 
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransBalanceDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addTransBalanceDataSource(Query _query)
    {
        QueryBuildDataSource qbds = _query.addDataSource(tableNum(VendTrans));
        qbds.addRange(fieldNum(VendTrans, AccountNum)).value(this.accountNum);
        qbds.addSelectionField(fieldNum(VendTrans, AmountMST), SelectionField::Sum);

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSettlementBalanceDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addSettlementBalanceDataSource(Query _query)
    {
        QueryBuildDataSource qbds = _query.addDataSource(tableNum(VendSettlement));
        qbds.addRange(fieldNum(VendSettlement, AccountNum)).value(this.accountNum);
        qbds.addSelectionField(fieldNum(VendSettlement, SettleAmountMST), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(VendSettlement, ExchAdjustment), SelectionField::Sum);

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinTransFilterByDimValue</Name>
				<Source><![CDATA[
    private void addJoinTransFilterByDimValue(
        Query _query,
        QueryBuildDataSource _parentQbds,
        str _rangeValue)
    {
        QueryBuildDataSource qbds = _parentQbds.addDataSource(tableNum(VendTrans));
        qbds.addRange(fieldNum(VendTrans, AccountNum)).value(this.accountNum);
        qbds.addLink(fieldNum(VendSettlement, TransRecid), fieldNum(VendTrans, RecId));
        qbds.addLink(fieldNum(VendSettlement, AccountNum), fieldNum(VendTrans, AccountNum));
        qbds.addLink(fieldNum(VendSettlement, TransCompany), fieldNum(VendTrans, DataAreaId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::addDimensionAttributeRange(
            _query,
            qbds.name(),
            fieldStr(VendTrans, DefaultDimension),
            DimensionComponent::DimensionAttribute,
            _rangeValue,
            this.agreementDimensionAttribute.Name);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>