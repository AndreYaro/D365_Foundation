<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostPurch_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PackingSlip)]
class InterCompanyPostPurch_PackingSlip extends InterCompanyPostPurch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    void formLetterUpdate()
    {
        PurchFormLetter_PackingSlip purchFormLetter_PackingSlip = this.toFormLetter() as PurchFormLetter_PackingSlip;
        SalesFormLetter_PackingSlip salesFormLetter_PackingSlip = this.fromFormLetter() as SalesFormLetter_PackingSlip;
        VendPackingSlipJour         vendPackingSlipJour;
        CustPackingSlipJour         custPackingSlipJour;

        boolean isVersioningCorrectionOrCancel = salesFormLetter_PackingSlip.isVersioningCorrectionOrCancel();
        boolean cancelPackingSlipSecurityFlight = InterCompanyCancelPackingSlipSecurityFlight::instance().isEnabled();

        if (isVersioningCorrectionOrCancel)
        {
            custPackingSlipJour = this.fromFormLetter().parmCallerTable() as CustPackingSlipJour;
            
            if (cancelPackingSlipSecurityFlight)
            {
                unchecked (Uncheck::TableSecurityPermission)
                {
                    select crossCompany vendPackingSlipJour
                        where vendPackingSlipJour.PackingSlipId         == custPackingSlipJour.PackingSlipId
                           && vendPackingSlipJour.DeliveryDate          == custPackingSlipJour.DeliveryDate
                           && vendPackingSlipJour.InterCompanyCompanyId == custPackingSlipJour.DataAreaId
                           && vendPackingSlipJour.InterCompanySalesId   == custPackingSlipJour.SalesId;
                }
            }
            else
            {
                select crossCompany vendPackingSlipJour
                    where vendPackingSlipJour.PackingSlipId         == custPackingSlipJour.PackingSlipId
                       && vendPackingSlipJour.DeliveryDate          == custPackingSlipJour.DeliveryDate
                       && vendPackingSlipJour.InterCompanyCompanyId == custPackingSlipJour.DataAreaId
                       && vendPackingSlipJour.InterCompanySalesId   == custPackingSlipJour.SalesId;
            }

            purchFormLetter_PackingSlip.parmCallerTable(vendPackingSlipJour);
            purchFormLetter_PackingSlip.parmAccountingDate(salesFormLetter_PackingSlip.parmAccountingDate());
            purchFormLetter_PackingSlip.parmVersionDateTime(salesFormLetter_PackingSlip.parmVersionDateTime());
        }

        formletterPrintout = purchTable.interCompanyEndpointActionPolicy().PrintPurchPackingslip;

        if (cancelPackingSlipSecurityFlight && isVersioningCorrectionOrCancel)
        {
            using (InterCompanyCancelPackingSlipSecurityContext interCompanyCancelPackingSlipSecurityContext = InterCompanyCancelPackingSlipSecurityContext::construct())
            {
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromParmId</Name>
				<Source><![CDATA[
    public ParmId fromParmId()
    {
        CustPackingSlipJour custPackingSlipJour;

        if (this.fromFormLetter().isVersioningCorrectionOrCancel())
        {
            custPackingSlipJour = this.fromFormLetter().parmCallerTable();
            custPackingSlipJour.reread();
            return custPackingSlipJour.ParmId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany purchase order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the packing slip that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the packing slip that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForPO(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        InterCompanyPostPurch_PackingSlip::interCompanyMarkupAllocation(_purchTable,_docNum,_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    protected StatusIssue statusIssue()
    {
        return StatusIssue::Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany purchase order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the packing slip that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the packing slip that triggers the allocation.
    /// </param>
    public static void interCompanyMarkupAllocation(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        MarkupAllocation                    markupAllocation;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy = _purchTable.interCompanyEndpointActionPolicy();

        markupAllocation = MarkupAllocation::newMarkupAllocation(_purchTable);
        markupAllocation.parmAllocateAfter(interCompanyEndpointActionPolicy.MarkupAllocateAfter);
        markupAllocation.parmAllocateInventoried(interCompanyEndpointActionPolicy.MarkupInventoriedOnly);
        markupAllocation.parmInterCompanyCompanyId(_purchTable.InterCompanyCompanyId);
        markupAllocation.parmInterCompanyDirectDelivery(_purchTable.InterCompanyDirectDelivery);
        markupAllocation.parmSkipWarning(true);
        markupAllocation.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>