<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMSeqGroupLineConversionEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Enumerates over <c>WHSUOMSeqGroupLine</c> records for a specified released product, initializing a unit of measure converter for each available unit.
/// </summary>
public class WHSUOMSeqGroupLineConversionEnumerator implements Enumerator
{
    QueryRun queryRunUOMSeqGroupLine;

    UnitOfMeasureSymbol currentUnitId;
    UnitOfMeasureRecId  currentUnitOfMeasure;

    WHSUOMSeqGroupId uomSeqGroupId;
    UnitOfMeasureSymbol fromUnitId;
    UnitOfMeasureRecId  fromUnitOfMeasure;
    ItemId itemId;
    InventDimId inventDimId;
    NoYes roundAbsoluteValue;
    NoYes applyRounding;

    Map unitConverters;
    boolean valueRetrieved;
    private boolean anyValueExist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current element in the collection.
    /// </summary>
    /// <returns>
    /// The current element in the collection.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The enumerator does not point to any element in the collection.
    /// </exception>
    public anytype current()
    {
        var unitId = this.currentUnitId();

        if (unitConverters.exists(unitId))
        {
            return unitConverters.lookup(unitId);
        }

        var converter = EcoResReleasedProductUnitConverter::construct();

        unitConverters.insert(unitId, converter);

        return converter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit of measure symbol for the current <c>WHSUOMSeqGroupLine</c> converter.
    /// </summary>
    /// <returns>Unit of measure symbol.</returns>
    public UnitOfMeasureSymbol currentUnitId()
    {
        if (!valueRetrieved)
        {
            throw error("@SYS125456");
        }

        if (!currentUnitId)
        {
            var currentLine = queryRunUOMSeqGroupLine.get(tableNum(WHSUOMSeqGroupLine)) as WHSUOMSeqGroupLine;

            currentUnitId = currentLine.UnitId;
            currentUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(currentUnitId);
        }
        return currentUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit of measure id for the current <c>WHSUOMSeqGroupLine</c> converter.
    /// </summary>
    /// <returns>Unit of measure id.</returns>
    public UnitOfMeasureRecId currentUnitOfMeasure()
    {
        // Ensure there is a current unit selected.
        this.currentUnitId();

        return currentUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWithCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the specified value using the current converter instance.
    /// </summary>
    /// <param name = "_value">Value to be converted.</param>
    /// <returns>Value converted to the current unit.</returns>
    public real convertWithCurrent(real _value)
    {
        EcoResReleasedProductUnitConverter converter = this.current();

        return converter.convert(_value,
            fromUnitOfMeasure,
            this.currentUnitOfMeasure(),
            roundAbsoluteValue,
            itemId,
            inventDimId,
            applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the description for the <c>WHSUOMSeqGroupLineConversionEnumerator</c> class.
    /// </summary>
    /// <returns>
    /// The description for the <c>WHSUOMSeqGroupLineConversionEnumerator</c> class.
    /// </returns>
    public str definitionString()
    {
        return queryRunUOMSeqGroupLine.query().dataSourceTable(tableNum(WHSUOMSeqGroupLine)).toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the enumerator to the next element of the collection.
    /// </summary>
    /// <returns>
    /// true if the enumerator was advanced; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        valueRetrieved = queryRunUOMSeqGroupLine.next();

        if (itemId && !valueRetrieved && !anyValueExist)
        {
            throw error(strFmt("@WAX1018", uomSeqGroupId));
        }

        anyValueExist = valueRetrieved;

        currentUnitId = '';

        return valueRetrieved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>QueryRun</c> object to iterate over.
    /// </summary>
    protected void initQueryRun()
    {
        Query queryUOMSeqGroupLine = new Query();
        var qbdsUOMSeqGroupLine = queryUOMSeqGroupLine.addDataSource(tableNum(WHSUOMSeqGroupLine));
        qbdsUOMSeqGroupLine.addSelectionField(fieldNum(WHSUOMSeqGroupLine, UnitId));
        qbdsUOMSeqGroupLine.addRange(fieldNum(WHSUOMSeqGroupLine, UOMSeqGroupId));

        queryRunUOMSeqGroupLine = new QueryRun(queryUOMSeqGroupLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initQueryRun();

        valueRetrieved = false;
        unitConverters = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enumerator to its initial position, which is before the first element in the collection.
    /// </summary>
    public void reset()
    {
        valueRetrieved = false;
        anyValueExist = false;
        queryRunUOMSeqGroupLine.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the string representation of the collection element that enumerator points to.
    /// </summary>
    /// <returns>
    /// The string representation of the collection element that enumerator points to.
    /// </returns>
    public str ToString()
    {
        if (valueRetrieved)
        {
            return this.currentUnitId();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOMSeqGroupId</Name>
				<Source><![CDATA[
    public WHSUOMSeqGroupId parmUOMSeqGroupId(WHSUOMSeqGroupId _uomSeqGroupId = uomSeqGroupId)
    {
        if (!prmIsDefault(_uomSeqGroupId))
        {
            uomSeqGroupId = _uomSeqGroupId;

            var qdbs = queryRunUOMSeqGroupLine.query().dataSourceTable(tableNum(WHSUOMSeqGroupLine));
            if (qdbs)
            {
                SysQuery::findOrCreateRange(qdbs, fieldNum(WHSUOMSeqGroupLine, UOMSeqGroupId)).value(queryValue(uomSeqGroupId));
            }
        }

        return uomSeqGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasureFrom</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitOfMeasureFrom(UnitOfMeasureSymbol _fromUnitId = fromUnitId)
    {
        if (!prmIsDefault(_fromUnitId))
        {
            fromUnitId = _fromUnitId;

            fromUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(fromUnitId);
        }
        return fromUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmIsDefault(_itemId))
        {
            itemId = _itemId;

            this.parmUOMSeqGroupId(WHSInventTable::find(itemId).UOMSeqGroupId);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoundAbsoluteValue</Name>
				<Source><![CDATA[
    public NoYes parmRoundAbsoluteValue(NoYes _roundAbsoluteValue = roundAbsoluteValue)
    {
        roundAbsoluteValue = _roundAbsoluteValue;
        return roundAbsoluteValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplyRounding</Name>
				<Source><![CDATA[
    public NoYes parmApplyRounding(NoYes _applyRounding = applyRounding)
    {
        applyRounding = _applyRounding;
        return applyRounding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderByLineNum</Name>
				<Source><![CDATA[
    protected void addOrderByLineNum(SortOrder _sortOrder)
    {
        queryRunUOMSeqGroupLine.query().dataSourceTable(tableNum(WHSUOMSeqGroupLine)).addOrderByField(fieldNum(WHSUOMSeqGroupLine, LineNum), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    protected void validateParameters()
    {
        if (itemId && !uomSeqGroupId)
        {
            throw error(strFmt("@WAX1017", itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEnumerator</Name>
				<Source><![CDATA[
    private static WHSUOMSeqGroupLineConversionEnumerator constructEnumerator(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromHandlingUnitId,
        NoYes               _roundAbsoluteValue,
        NoYes               _applyRounding)
    {
        return WHSUOMSeqGroupLineConversionEnumerator::constructUnitEnumerator(
            _itemId,
            _inventDimId,
            _fromHandlingUnitId,
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUnitEnumerator</Name>
				<Source><![CDATA[
    private static WHSUOMSeqGroupLineConversionEnumerator constructUnitEnumerator(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromHandlingUnitId,
        NoYes               _roundAbsoluteValue,
        NoYes               _applyRounding)
    {
        var enumerator = new WHSUOMSeqGroupLineConversionEnumerator();

        enumerator.parmUnitOfMeasureFrom(_fromHandlingUnitId);
        enumerator.parmItemId(_itemId);
        enumerator.parmInventDimId(_inventDimId);
        enumerator.parmRoundAbsoluteValue(_roundAbsoluteValue);
        enumerator.parmApplyRounding(_applyRounding);

        enumerator.validateParameters();

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLowestToHighestEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.
    /// <c>WHSUOMSeqGroupLine</c> records will be ordered by <c>LineNum</c> in ascending order.
    /// </summary>
    /// <param name = "_itemId">Item number to initialize the enumerator for.</param>
    /// <param name = "_inventDimId">Product dimensions InventDimId to initialize the enumerator for.</param>
    /// <param name = "_fromHandlingUnitId">Unit of measure symbol to convert from. The quantities used with the enumerator need to be in this unit.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean parameter that specifies if the absolute value should be rounded.</param>
    /// <param name = "_applyRounding">A Boolean parameter that specifies if rounding should be applied after conversion.</param>
    /// <returns>An instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.</returns>
    [Hookable(false)]
    internal static WHSUOMSeqGroupLineConversionEnumerator constructLowestToHighestEnumerator(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromHandlingUnitId,
        NoYes               _roundAbsoluteValue = NoYes::No,
        NoYes               _applyRounding = NoYes::No)
    {
        return WHSUOMSeqGroupLineConversionEnumerator::constructLowestToHighestUnitEnumerator(
            _itemId,
            _inventDimId,
            _fromHandlingUnitId,
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLowestToHighestUnitEnumerator</Name>
				<Source><![CDATA[
    private static WHSUOMSeqGroupLineConversionEnumerator constructLowestToHighestUnitEnumerator(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromHandlingUnitId,
        NoYes               _roundAbsoluteValue,
        NoYes               _applyRounding)
    {
        var enumerator = WHSUOMSeqGroupLineConversionEnumerator::constructEnumerator(_itemId, _inventDimId, _fromHandlingUnitId, _roundAbsoluteValue, _applyRounding);
        enumerator.addOrderByLineNum(SortOrder::Ascending);

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructHighestToLowest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.
    /// <c>WHSUOMSeqGroupLine</c> records will be ordered by <c>LineNum</c> in descending order.
    /// </summary>
    /// <param name = "_itemId">Item number to initialize the enumerator for.</param>
    /// <param name = "_inventDimId">Product dimensions InventDimId to initialize the enumerator for.</param>
    /// <param name = "_fromUnitId">Unit of measure symbol to convert from. The quantities used with the enumerator need to be in this unit.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean parameter that specifies if the absolute value should be rounded.</param>
    /// <param name = "_applyRounding">A Boolean parameter that specifies if rounding should be applied after conversion.</param>
    /// <returns>An instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static WHSUOMSeqGroupLineConversionEnumerator constructHighestToLowest(
            ItemId _itemId,
            InventDimId _inventDimId,
            UnitOfMeasureSymbol _fromUnitId = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId,
            NoYes _roundAbsoluteValue = NoYes::No,
            NoYes _applyRounding = NoYes::No)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);
        
        return WHSUOMSeqGroupLineConversionEnumerator::constructHighestToLowestUnitEnumerator(
            _itemId,
            _inventDimId,
            _fromUnitId,
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructHighestToLowestEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.
    /// <c>WHSUOMSeqGroupLine</c> records will be ordered by <c>LineNum</c> in descending order.
    /// </summary>
    /// <param name = "_itemId">Item number to initialize the enumerator for.</param>
    /// <param name = "_inventDimId">Product dimensions InventDimId to initialize the enumerator for.</param>
    /// <param name = "_fromHandlingUnitId">Unit of measure symbol to convert from. The quantities used with the enumerator need to be in this unit.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean parameter that specifies if the absolute value should be rounded.</param>
    /// <param name = "_applyRounding">A Boolean parameter that specifies if rounding should be applied after conversion.</param>
    /// <returns>An instance of <c>WHSUOMSeqGroupLineConversionEnumerator</c> type.</returns>
    [Hookable(false)]
    internal static WHSUOMSeqGroupLineConversionEnumerator constructHighestToLowestEnumerator(
            ItemId              _itemId,
            InventDimId         _inventDimId,
            UnitOfMeasureSymbol _fromHandlingUnitId,
            NoYes               _roundAbsoluteValue = NoYes::No,
            NoYes               _applyRounding = NoYes::No)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            return WHSUOMSeqGroupLineConversionEnumerator::constructHighestToLowestUnitEnumerator(
                _itemId,
                _inventDimId,
                _fromHandlingUnitId,
                _roundAbsoluteValue,
                _applyRounding);
        }

        return WHSUOMSeqGroupLineConversionEnumerator::constructHighestToLowest(
            _itemId,
            _inventDimId,
            _fromHandlingUnitId,
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructHighestToLowestUnitEnumerator</Name>
				<Source><![CDATA[
    private static WHSUOMSeqGroupLineConversionEnumerator constructHighestToLowestUnitEnumerator(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromHandlingUnitId,
        NoYes               _roundAbsoluteValue,
        NoYes               _applyRounding)
    {
        var enumerator = WHSUOMSeqGroupLineConversionEnumerator::constructEnumerator(_itemId, _inventDimId, _fromHandlingUnitId, _roundAbsoluteValue, _applyRounding);
        enumerator.addOrderByLineNum(SortOrder::Descending);

        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>