<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_MidQuarter</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Mid-Quarter'. For this purpose this class type must
//  always be used in conjuction with the AssetTableMethod_SL and
//  AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::MidQuarter)]
class AssetTableDepConv_MidQuarter extends AssetTableDepConv
{
//  First year factors
    #DEFINE.FirstYear_1stQuarterFactor(0.875)
    #DEFINE.FirstYear_2ndQuarterFactor(0.625)
    #DEFINE.FirstYear_3rdQuarterFactor(0.375)
    #DEFINE.FirstYear_4thQuarterFactor(0.125)

//  Last year factors
    #DEFINE.LastYear_1stQuarterFactor(0.125)
    #DEFINE.LastYear_2ndQuarterFactor(0.375)
    #DEFINE.LastYear_3rdQuarterFactor(0.625)
    #DEFINE.LastYear_4thQuarterFactor(0.875)

//  First & Last quarter factor
    #DEFINE.First_LastQuarterFactor(0.125)

    boolean isFirstQuarter;
    boolean isLastQuarter;
    Percent midQuarterPercentage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLastDepreciationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the projected depreciation date based on a given depreciation convention.
    /// </summary>
    /// <param name="_endDate">
    /// A date to adjust
    /// </param>
    /// <param name="_partialPeriod">
    /// Value model's life remaining.
    /// </param>
    /// <returns>
    /// Adjusted date of the last projected depreciation date.
    /// </returns>
    protected TransDate adjustLastDepreciationDate(TransDate _endDate, real _partialPeriod = 0)
    {
        return depreciationInterval.findLastDayOfPeriod(_endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RB</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Reducing Balance" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_RB(AssetAmount  _basisForDepreciation,
                               AssetAmount  _prevDepAmountThisYear,
                               TransDate    _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 firstLastQuarterDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //
        //  Reducing Balance cannot have a last year because it is percentage not period based.
        //  Depreciations using Reducing Balance usually switch to a "Straight Line" method of
        //  depreciation in order to fully depreciate the asset within its lifetime.
        //
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);
            this.setMidQuarterPercentage();

            if (isFirstYear)
            {
                estimatedYearlyDepreciation     = _basisForDepreciation *
                                                  midQuarterPercentage;
                firstLastQuarterDepreciation    = _basisForDepreciation *
                                                  #First_LastQuarterFactor;

                //
                //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                //  this loop is designed to work at a "Monthly" level and roll up the calulated
                //  amounts to meet the requirements of the larger accruals.
                //  This functionality was needed in order to meet the specific first and last
                //  month requirements of this depreciation convention
                //
                origAssetPeriodDate = assetPeriodDate;
                while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                {
                    numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                    numberOfPeriodsInInterval = 1;

                    this.checkIsFirstQuarter(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                    if (isFirstQuarter)
                    {
                        numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(
                            depreciationInterval.findLastDayOfQuarter(assetBook.DepreciationStartDate))
                            - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                        netAmountToDepreciate = firstLastQuarterDepreciation - prevDepAmountThisYear;

                        periodAmount = this.getPeriodAmount(
                            netAmountToDepreciate, 
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);

                        if (periodAmount)
                        {
                            prevDepAmountThisYear += periodAmount;
                            retValue += periodAmount;
                        }
                        assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                    }
                    else
                    {
                        netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                        periodAmount = this.getPeriodAmount(
                            netAmountToDepreciate,
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);

                        prevDepAmountThisYear += periodAmount;
                        retValue += periodAmount;
                        assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                    }
                }
                assetPeriodDate = origAssetPeriodDate;
            }
            else
            {
                retValue = this.calc_ReducingBalance(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Straight Line" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_SL(AssetAmount  _basisForDepreciation,
                               AssetAmount  _prevDepAmountThisYear,
                               AssetAmount  _prevDepAmountExternal,
                               AssetAmount  _prevDepAmountPriorYears,
                               TransDate    _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 fullLastYearsDepreciation;
        AssetAmount                 firstLastQuarterDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;
        int                         numberOfPeriodsInYear;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods);
            this.setMidQuarterPercentage();

            if (isFirstYear || islastYear)
            {
                //
                //  This makes sure to account for any depreciation rounding errors that
                //  that could create a difference between the estimated final year's amount and
                //  the actual final year's amount.
                //  This only affects "Straight Line Service Life" because "Straight Line Life Remaining"
                //  always uses the Net Book value but "Service Life" does not.
                //
                if (islastYear &&
                    depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                {
                    estimatedYearlyDepreciation  = _basisForDepreciation - _prevDepAmountPriorYears;
                }
                else
                {
                    estimatedYearlyDepreciation  = _basisForDepreciation *
                                                   this.depreciationPercentage_SL() *
                                                   midQuarterPercentage;
                }

                fullLastYearsDepreciation  = _basisForDepreciation * this.depreciationPercentage_SL();
                firstLastQuarterDepreciation    = _basisForDepreciation *
                                                  this.depreciationPercentage_SL() *
                                                  #First_LastQuarterFactor;

                //
                //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                //  this loop is designed to work at a "Monthly" level and roll up the calulated
                //  amounts to meet the requirements of the larger accruals.
                //  This functionality was needed in order to meet the specific first and last
                //  month requirements of this depreciation convention
                //
                origAssetPeriodDate = assetPeriodDate;
                if (isFirstYear)
                {
                    while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                    {
                        numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                        numberOfPeriodsInInterval = 1;

                        this.checkIsFirstQuarter(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                        if (isFirstQuarter)
                        {
                            numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfQuarter(assetBook.DepreciationStartDate))
                                - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                            netAmountToDepreciate = firstLastQuarterDepreciation - prevDepAmountThisYear;

                            periodAmount = this.getPeriodAmount(
                                netAmountToDepreciate,
                                numberOfPeriodsInInterval,
                                numberOfPeriodsLeftInYear);

                            if (periodAmount)
                            {
                                prevDepAmountThisYear += periodAmount;
                                retValue += periodAmount;
                            }
                            assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                        }
                        else
                        {
                            netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                            periodAmount = this.getPeriodAmount(
                                netAmountToDepreciate,
                                numberOfPeriodsInInterval,
                                numberOfPeriodsLeftInYear);
                            
                            prevDepAmountThisYear += periodAmount;
                            retValue += periodAmount;
                            assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                        }
                    }
                }
                else
                {
                    // If a depreciation profile is based on a Straight Line Service Life method,
                    // and this profile is used with a RB method.  The amounts for the Service Life
                    // method do not need to be recalculated for the last quarter, as the depreciation will
                    // be done earlier then the last quarter.
                    if (depreciationProfile.Method == AssetDepreciationMethod::StraightLine
                        && assetBook.depreciationAltProfile() != null)
                    {
                        this.checkIsLastQuarter(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                        retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
                    }
                    else
                    {
                        // Straight line Service life might have additional acquisitions that would increase the original life of the asset.
                        // Depreciate the total of acquisitions over the number of periods until the asset is fully depreciated.
                        if (depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                        {
                            AmountMST straightLineRegularDepreciationAmount =
                            this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
                            if (straightLineRegularDepreciationAmount <= estimatedYearlyDepreciation)
                            {
                                retValue = straightLineRegularDepreciationAmount;
                            }
                        }

                        if (!retValue)
                        {
                            while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                            {
                                numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                                numberOfPeriodsInInterval = 1;

                                this.checkIsLastQuarter(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                                if (isLastQuarter)
                                {
                                    numberOfPeriodsInYear = depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(assetPeriodDate));
                                    if (numberOfPeriodsInYear)
                                    {
                                        periodAmount = this.getPeriodAmount(
                                            fullLastYearsDepreciation,
                                            numberOfPeriodsInInterval,
                                            numberOfPeriodsInYear);
                                    }

                                    // If it is the last period, just take the remaining depreciation left
                                    if (depreciationInterval.endPeriod(assetPeriodDate) + 1 > lastDepreciationDate)
                                    {
                                        periodAmount = estimatedYearlyDepreciation - prevDepAmountThisYear;
                                    }

                                    if (periodAmount)
                                    {
                                        prevDepAmountThisYear += periodAmount;
                                        retValue += periodAmount;
                                    }

                                    // If this is the last quater of depreciation, finish the calculation.
                                    if (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1 > depreciationInterval.findLastDayOfQuarter(lastDepreciationDate))
                                    {
                                        break;
                                    }

                                    assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                                }
                                else
                                {
                                    numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(depreciationInterval.findFirstDayOfQuarter(lastDepreciationDate) - 1)
                                        - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                                    netAmountToDepreciate = estimatedYearlyDepreciation - firstLastQuarterDepreciation - prevDepAmountThisYear;

                                    periodAmount = this.getPeriodAmount(
                                        netAmountToDepreciate,
                                        numberOfPeriodsInInterval,
                                        numberOfPeriodsLeftInYear);

                                    prevDepAmountThisYear += periodAmount;
                                    retValue += periodAmount;
                                    assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                                }
                            }
                        }
                    }
                }
                assetPeriodDate = origAssetPeriodDate;
            }
            else
            {
                retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process, throw an error..
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SLP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the "Straight Line Percentage" type period depreciation amount
    ///  for the asset's current transaction.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// Amount to be taken as the base amount to calculate depreciation.
    /// </param>
    /// <param name="_prevDepAmountThisYear">
    /// The depreciation amount for prev year.
    /// </param>
    /// <param name="_depreciationDate">
    /// The depreciation start date.
    /// </param>
    /// <param name="_periods">
    /// The period for which to calculate depreciation amount.
    /// </param>
    /// <returns>
    /// Returns the amount calculated as SLP type period depreciation.
    /// </returns>
    public AssetAmount calc_SLP_IN(AssetAmount              _basisForDepreciation,
                                   AssetAmount              _prevDepAmountThisYear,
                                   TransDate                _depreciationDate,
                                   AssetDepreciationTime    _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 firstLastQuarterDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //  Straight Line Percentage cannot have a last year because it is percentage not period based.
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);
            this.setMidQuarterPercentage();

            if (isFirstYear)
            {
                estimatedYearlyDepreciation     = _basisForDepreciation *
                                                  midQuarterPercentage;
                firstLastQuarterDepreciation    = _basisForDepreciation *
                                                  #First_LastQuarterFactor;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                        numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);
                        if (isFirstQuarter)
                        {
                            numberOfPeriodsLeftInYear   = depreciationInterval.numOfPeriods(_depreciationDate, assetPeriodDate);
                            netAmountToDepreciate       = firstLastQuarterDepreciation - _prevDepAmountThisYear;
                        }
                        else
                        {
                            netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;
                        }

                        retValue = this.getPeriodAmount(
                            netAmountToDepreciate,
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);

                        break;

                    case AssetDepreciationYear::Calendar:
                        //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                        //  this loop is designed to work at a "Monthly" level and roll up the calulated
                        //  amounts to meet the requirements of the larger accruals.
                        //  This functionality was needed in order to meet the specific first and last
                        //  month requirements of this depreciation convention
                        origAssetPeriodDate = assetPeriodDate;
                        while (dateEndMth(assetPeriodDate) <= _depreciationDate)
                        {
                            numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                            numberOfPeriodsInInterval = 1;

                            this.checkIsFirstQuarter(dateEndMth(assetPeriodDate));
                            if (isFirstQuarter)
                            {
                                numberOfPeriodsLeftInYear   = (mthOfYr(dateEndQtr(assetBook.DepreciationStartDate)) - mthOfYr(dateEndMth(assetPeriodDate))) + 1;
                                netAmountToDepreciate       = firstLastQuarterDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);
                                
                                if (periodAmount)
                                {
                                    prevDepAmountThisYear   += periodAmount;
                                    retValue                += periodAmount;
                                }
                                assetPeriodDate = dateEndMth(assetPeriodDate) + 1;
                            }
                            else
                            {
                                netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);
                                
                                prevDepAmountThisYear   += periodAmount;
                                retValue                += periodAmount;
                                assetPeriodDate         = dateEndMth(assetPeriodDate) + 1;
                            }
                        }
                        assetPeriodDate = origAssetPeriodDate;
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
            else
            {
                retValue = this.calc_StraightLinePercentage_IN(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //  An error has occurred within this calculation process.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's period depreciation amount into the correct currency.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetAmount calcCurrencyAmount(AssetAmount _amount, AssetDepreciationTime _periods)
    {
        AssetAmount amount;

        if (assetBook.RecId)
        {
            amount = assetBook.roundDepreciationAmount(
                _amount,
                isReportingCurrencyDepreciation);
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(_amount, this.getCurrencyCode());
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMidQuarterPercentage</Name>
				<Source><![CDATA[
    //
    //  This method corrdinates the calculation of the mid-quarter percentage required
    //  to accurately calculate the assets depreciation amount.
    //
    private Percent calcMidQuarterPercentage(TransDate  _transDate,
                                             boolean    _isFirstYear = false,
                                             boolean    _isLastYear = false)
    {
        #DEFINE.1st_Quarter(1)
        #DEFINE.2nd_Quarter(2)
        #DEFINE.3rd_Quarter(3)
        #DEFINE.4th_Quarter(4)

        int             quarter;
        Percent         retValue;

        quarter = depreciationInterval.findCurrentQuarter(_transDate);

        if (_isFirstYear)
        {
            switch (quarter)
            {
                case #1st_Quarter:
                    retValue = #FirstYear_1stQuarterFactor;
                    break;
                case #2nd_Quarter:
                    retValue = #FirstYear_2ndQuarterFactor;
                    break;
                case #3rd_Quarter:
                    retValue = #FirstYear_3rdQuarterFactor;
                    break;
                case #4th_Quarter:
                    retValue = #FirstYear_4thQuarterFactor;
                    break;
            }
        }
        else if (_isLastYear)
        {
            switch (quarter)
            {
                case #1st_Quarter:
                    retValue = #LastYear_1stQuarterFactor;
                    break;
                case #2nd_Quarter:
                    retValue = #LastYear_2ndQuarterFactor;
                    break;
                case #3rd_Quarter:
                    retValue = #LastYear_3rdQuarterFactor;
                    break;
                case #4th_Quarter:
                    retValue = #LastYear_4thQuarterFactor;
                    break;
            }
        }
        else
        {
            retValue = 1.0;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    //
    //  This method returns the adjustment to asset's remaining life.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetDepreciationTime calcRestPeriod(
        AssetDepreciationTime _restPeriod,
        AssetTransDate _periodstart,
        AssetDepreciationTime _periods)
    {
        AssetDepreciationTime restPeriod;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                restPeriod = this.getAssetDepreciaionTime(_periodstart, _periods);
                boolean isKnownAccrual = this.checkKnownAssetAccrual();

                if (!isKnownAccrual)
                {
                    throw error(strFmt("@SYS99071", depreciationProfile.Profile));
                }
                break;

            case AssetDepreciationYear::Calendar:
                if (isFirstYear)
                {
                    if (_periodstart == assetBook.DepreciationStartDate)
                    {
                        restPeriod = mthOfYr(depreciationInterval.endPeriod(assetBook.DepreciationStartDate));
                        restPeriod = restPeriod * (depreciationInterval.numOfPeriodsPerYear() / #monthsInYear) *
                                     midQuarterPercentage;
                    }
                    else
                    {
                        restPeriod = midQuarterPercentage;
                    }
                }
                else if (isLastYear)
                {
                    // Is this the last period.
                    if (isLastQuarter &&
                        mthOfYr(depreciationInterval.endPeriod(_periodstart)) == mthOfYr(depreciationInterval.endPeriod(lastDepreciationDate)))
                    {
                        restPeriod = _periods;
                    }
                    else
                    {
                        restPeriod = midQuarterPercentage;
                    }
                }
                else
                {
                    restPeriod = midQuarterPercentage;
                }
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciaionTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the asset remaining depreciation periods.
    /// </summary>
    /// <param name = "_periodStart">
    /// Starting date of the period.
    /// </param>
    /// <param name = "_periods">
    /// The asset depreciation period.
    /// </param>
    /// <returns>
    /// The remaining asset depreciation periods.
    /// </returns>
    protected AssetDepreciationTime getAssetDepreciaionTime(AssetTransDate _periodStart, AssetDepreciationTime _periods)
    {
        AssetDepreciationTime restPeriod;
        date fromDate, toDate;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
                if (isFirstYear)
                {
                    if (_periodStart == assetBook.DepreciationStartDate)
                    {
                        fromDate = depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate);
                        toDate = depreciationInterval.endPeriod(assetBook.DepreciationStartDate);
                        restPeriod = depreciationInterval.numOfPeriods(fromDate, toDate);
                        restPeriod = restPeriod * midQuarterPercentage;
                    }
                    else
                    {
                        restPeriod = midQuarterPercentage;
                    }
                }
                else if (isLastYear)
                {
                    if (isLastQuarter && depreciationInterval.endPeriod(_periodStart) == depreciationInterval.endPeriod(lastDepreciationDate))
                    {
                        restPeriod = _periods;
                    }
                    else
                    {
                        restPeriod = midQuarterPercentage;
                    }
                }
                else
                {
                    restPeriod = midQuarterPercentage;
                }
                break;

            case AssetAccrual::Yearly:
                if (isFirstYear)
                {
                    restPeriod = midQuarterPercentage;
                }
                else if (isLastYear)
                {
                    restPeriod = _periods;
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                break;
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKnownAssetAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given asset accrual is a known accrual.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetAccrual</c> enumeration value is of known type; otherwise, false.
    /// </returns>
    protected boolean checkKnownAssetAccrual()
    {
        boolean isKnownAccrual = true;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
            case AssetAccrual::Yearly:
                break;
            default:
                isKnownAccrual = false;
        }

        return isKnownAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's starting depreciation date.
    //
    //  The "Mid Quarter" depreciation convention will always calculate the "depreciation run date"
    //  to the 1st of the of the month the asset was placed in service.
    //
    //  The AssetBook.usedFromDate is considered to be the "placed in service date".
    //
    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        AssetDepreciationStartDate startDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findFirstDayOfPeriod(_usedFromDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisposalDepreciationAdjRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the portion of the depreciation allowed for a given period based on the date of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The date of the disposal.
    /// </param>
    /// <returns>
    /// The portion of depreciation.
    /// </returns>
    public real calculateDisposalDepreciationAdjRatio(
        TransDate  _disposalTransDate)
    {
        real adjustedDepreciation;
        boolean isDisposalSameYear;
        real lastDepreciationQuarterAdjustment;

        this.updateDisposalFirstLastYear(_disposalTransDate);

        isDisposalSameYear =
            (depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate)
                == depreciationInterval.findLastDayOfYear(_disposalTransDate)) ? true : false;

        if (isDisposalSameYear)
        {
            // If the disposal happens in the same year as the place of service, the depreciation
            // engine already has already calculated the depreciation amount till the end of year.
            // Depreciation for the quarters left out from the full year needs to be removed
            // for the posted depreciation adjustment.
            adjustedDepreciation = (this.calcMidQuarterPercentage(assetBook.UsedFromDate, true, false)
                - this.calcMidQuarterPercentage(_disposalTransDate, true, false))
                / this.calcMidQuarterPercentage(assetBook.UsedFromDate, true, false);
            if (adjustedDepreciation < 0)
            {
                adjustedDepreciation = 0;
            }
        }
        else
        {
            adjustedDepreciation = 1;

            // Adjust value if disposal is before the projected last day of depreciation.
            if (lastDepreciationDate >= _disposalTransDate)
            {
                // Verify the last year of depreciation.
                if (depreciationInterval.findLastDayOfYear(_disposalTransDate) ==
                    depreciationInterval.findLastDayOfYear(lastDepreciationDate))
                {
                    lastDepreciationQuarterAdjustment = depreciationInterval.findCurrentQuarter(lastDepreciationDate) - 0.5;

                    if (lastDepreciationQuarterAdjustment)
                    {
                        adjustedDepreciation = (depreciationInterval.findCurrentQuarter(_disposalTransDate) - 0.5) /
                            lastDepreciationQuarterAdjustment;
                    }
                }
                else
                {
                    adjustedDepreciation = this.calcMidQuarterPercentage(_disposalTransDate, false, true);
                }
            }
        }

        return adjustedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsFirstQuarter</Name>
				<Source><![CDATA[
    //
    //  This method checks if the current depreciation transaction date
    //  is in the asset's estimated first quater of the first year of depreciation.
    //
    private void checkIsFirstQuarter(TransDate _depreciationDate)
    {
        date            startDate;
        date            endDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findFirstDayOfQuarter(assetBook.DepreciationStartDate);
                endDate = depreciationInterval.findLastDayOfQuarter(assetBook.DepreciationStartDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        if (_depreciationDate >= startDate &&
            _depreciationDate <= endDate)
        {
            isFirstQuarter  = true;
            isLastQuarter   = false;
        }
        else
        {
            isFirstQuarter  = false;
            isLastQuarter   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsLastQuarter</Name>
				<Source><![CDATA[
    //
    //  This method checks if the current depreciation transaction date
    //  is in the asset's estimated last quarter of the last year of depreciation.
    //
    private void checkIsLastQuarter(TransDate _depreciationDate)
    {
        date            startDate;
        date            endDate;
        ;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findFirstDayOfQuarter(lastDepreciationDate);
                endDate = depreciationInterval.findLastDayOfQuarter(lastDepreciationDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        if (_depreciationDate >= startDate &&
            _depreciationDate <= endDate)
        {
            isFirstQuarter  = false;
            isLastQuarter   = true;
        }
        else
        {
            isFirstQuarter  = false;
            isLastQuarter   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetPeriodDate</Name>
				<Source><![CDATA[
    //
    //  This method sets the various date properties required for this class.
    //
    protected void setAssetPeriodDate(TransDate _depreciationDate,
                                      AssetDepreciationTime _periods,
                                      boolean   _isRB_Calc = false)
    {
        this.checkIsFirstYear(_depreciationDate);
        if (isFirstYear)
        {
            startingServiceLife = assetBook.ServiceLife;

            if (depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) >= depreciationInterval.periodOfYear(depreciationInterval.startOfPeriod(_depreciationDate)))
            {
                assetPeriodDate = assetBook.DepreciationStartDate;
            }
            else
            {
                assetPeriodDate = depreciationInterval.startOfPeriod(_depreciationDate);
            }
        }
        else
        {
            this.checkIsLastYear(_depreciationDate, _periods, _isRB_Calc);
            if (isLastYear)
            {
                startingServiceLife = this.calcMidQuarterPercentage(assetBook.DepreciationStartDate, false, true);

                if (depreciationInterval.periodOfYear(depreciationInterval.startOfPeriod(_depreciationDate))
                    < depreciationInterval.periodOfYear(lastDepreciationDate))
                {
                    assetPeriodDate = depreciationInterval.startOfPeriod(_depreciationDate);
                }
                else
                {
                    assetPeriodDate = lastDepreciationDate;
                }
            }
            else
            {
                isFirstQuarter  = false;
                isLastQuarter   = false;
                assetPeriodDate = _depreciationDate;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(depreciationInterval.openingPeriodDate(_depreciationDate)) -
                             year(depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate))) +
                            this.calcMidQuarterPercentage(assetBook.DepreciationStartDate, false, true);
                        break;

                    case AssetDepreciationYear::Calendar:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(_depreciationDate) - year(assetBook.DepreciationStartDate)) +
                            this.calcMidQuarterPercentage(assetBook.DepreciationStartDate, false, true);
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMidQuarterPercentage</Name>
				<Source><![CDATA[
    //
    //  This method sets mid-quarter percentage.
    //
    private void setMidQuarterPercentage()
    {
        ;

        if (isFirstYear || isLastYear)
        {
            midQuarterPercentage = this.calcMidQuarterPercentage(assetBook.DepreciationStartDate, isFirstYear, isLastYear);
        }
        else
        {
            midQuarterPercentage = this.calcMidQuarterPercentage(assetPeriodDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>