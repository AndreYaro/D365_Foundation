<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataBOE_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormletterParmDataBOE_IN</c> class is the purch form letter parm data BOE.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::BillOfEntry_IN)]
public class PurchFormletterParmDataBOE_IN extends PurchFormletterParmData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common         _purchLine,
                                     TradeLineRefId _tableRef,
                                     PurchQty       _purchQty     = naReal(),
                                     InventQty      _inventQty    = naReal(),
                                     boolean        _callFromCreateParmLineAndSubLines = false,
                                     PurchQty       _previousPurchQty  = 0,
                                     InventQty      _previousInventQty = 0,
                                     PurchQty       _previousPurchQtyVariance  = 0,
                                     InventQty      _previousInventQtyVariance = 0)
    {
        PurchParmLine                       newPurchParmLine;
        PurchParmLine_IN                    newPurchParmLineIN;
        boolean                             lineCreated = false;
        RealBase                            factor;
        AmountMST                           perUnitAssessableValue;
        VendDocumentLineMap                 localParmLine;
        PurchLine                           purchLine;
        CustomsImportInvoiceNumberTable_IN  customsImporterInvoiceNumberLoc;
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;

        if (_purchLine.RecId)
        {
            localParmLine = this.initParmLine();
            if (localParmLine.TableId == tablenum(PurchParmLine))
            {
                newPurchParmLine = localParmLine;
            }
            purchLine = _purchLine as PurchLine;

            newPurchParmLine.clear();
            newPurchParmLineIN.clear();
            purchQuantity.parmCustomsImporterInvoiceNumber_IN(customsImporterInvoiceNumber);
            [newPurchParmLine.ReceiveNow,  newPurchParmLine.RemainBefore      , newPurchParmLine.RemainAfter      ] = this.qtyPurch_IN(_purchLine, naReal());
            [newPurchParmLine.InventNow,   newPurchParmLine.RemainBeforeInvent, newPurchParmLine.RemainAfterInvent] = this.qtyInvent(_purchLine, naReal());

            if (newPurchParmLine.ReceiveNow && customsImporterInvoiceNumber)
            {
                customsImporterInvoiceNumberLoc = CustomsImportInvoiceNumberTable_IN::find(customsImporterInvoiceNumber);

                select RecId from customsInvoiceRegnTrans
                    join RecId from customsInvoiceRegnJournalLine
                        where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                           && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLine.RecId;

                if (customsInvoiceRegnTrans.RecId
                    && !PurchParmTable::checkDuplicateImporterNumber_IN(customsImporterInvoiceNumberLoc.RecId, purchLine.PurchId, newPurchParmLine.ParmId))
                {
                    newPurchParmLine.ParmId     = purchParmUpdate.ParmId;
                    newPurchParmLine.initFromPurchLine(_purchLine);
                    newPurchParmLine.setLineAmount();
                    newPurchParmLine.TableRefId = _tableRef;
                    
                    newPurchParmLine.insert();
                    lineCreated = true;
                    newPurchParmLineIN = newPurchParmLine.purchParmLine_IN();
                    newPurchParmLineIN.CustomsImportInvoiceNumberTable = customsImporterInvoiceNumberLoc.RecId;
                    newPurchParmLineIN.CustomsBillOfEntryNumberTable   = purchParmUpdate.CustomsBillOfEntryNumberTable_IN ? purchParmUpdate.CustomsBillOfEntryNumberTable_IN : customsBillOfEntryNumber;
                    newPurchParmLineIN.CustomsInvoiceRegnRecId = customsInvoiceRegnTrans.RecId;
                    if (PurchTable::find(purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    {
                        if (!TaxIndiaBOEAssessableValueDefaultProportionalFeatureExposure::isEnabled()
                            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                        {
                            newPurchParmLineIN.AssessableValueTransactionCurrency = newPurchParmLine.getMiscChargesAmount_IN(_purchLine.TableId, _purchLine.RecId, this.parmDocumentStatus());
                        }
                        else
                        {
                            factor = purchLine.purchLine_IN().AssessableValueTransactionCurrency / purchLine.PurchQty;
                            newPurchParmLineIN.AssessableValueTransactionCurrency = factor * newPurchParmLine.ReceiveNow;
                        }
                    }
                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        newPurchParmLineIN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(newPurchParmLineIN.AssessableValueTransactionCurrency, newPurchParmLine.currencyCode, newPurchParmLine.purchParmTable().TransDate);
                    }
                    else
                    {
                        perUnitAssessableValue = purchLine.purchLine_IN().AssessableValueAccountingCurrency / purchLine.PurchQty;
                        newPurchParmLineIN.AssessableValueAccountingCurrency = perUnitAssessableValue * newPurchParmLine.ReceiveNow;
                    }
                    newPurchParmLine.packPurchParmLine_IN(newPurchParmLineIN);
                    newPurchParmLine.SysExtensionSerializerMap::PostInsert();

                    this.copyMarkupFromPurchaseOrder(purchLine, newPurchParmLine);
                }

                this.allowCreateParmTable(true);
                #if.never //#Speedtest
                if (speedExecute_Purch)
                    speedExecute_Purch.timing(SpeedPurchTiming::ParmLineInsert, strfmt(purchParmLine.parmId, purchParmLine.itemId));
                #endif
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected Common createParmTable(
        Common          _purchTable,
        Common          _purchLine,
        TradeLineRefId  _tableRefId,
        boolean         _skipParmSubTable = false,
        boolean         _hold = false,
        boolean         _notApproved = false,
        Num             _purchSummaryFormLetterId = "",
        VendPostingProfile    _postingProfile     = '',
        InventProfileType_RU  _inventProfileType  = InventProfileType_RU::NotSpecified)
    {
        VendDocumentTableMap vendInvoiceInfoTable = this.initParmTable();

        vendInvoiceInfoTable = super(_purchTable, _purchLine, _tableRefId, _skipParmSubTable);

        this.copyMarkupFromPurchaseOrder(_purchTable, vendInvoiceInfoTable as PurchParmTable);

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkupFromPurchaseOrder</Name>
				<Source><![CDATA[
    private void copyMarkupFromPurchaseOrder(Common _fromTable, Common _toTable)
    {
        if (TaxIntegrationUtils::isChargeOnBOEEnabled())
        {
            MarkupTrans markupTrans;
            MarkupCopy_BillOfEntry_IN markupCopy = MarkupCopy_BillOfEntry_IN::construct();

            select firstonly RecId from markupTrans
                where markupTrans.TransTableId == _toTable.TableId
                    && markupTrans.TransRecId == _toTable.RecId
                    && !markupTrans.IsDeleted;

            if (!markupTrans)
            {
                MarkupCopyFromPurchOrderParameters copyFromPurchOrderToSubTableParameters =
                    MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                        _fromTable,
                        _toTable,
                        '',
                        '',
                        SourceDocumentLineAccountingStatus::Draft);
                markupCopy.copyFromPurchOrder(copyFromPurchOrderToSubTableParameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts parm lines.
    /// </summary>
    /// <param name="_purchParmTable">
    /// The purchase parm table.
    /// </param>
    public void insertParmLines_IN(PurchParmTable _purchParmTable)
    {
        PurchTable      localPurchTable;
        PurchLine       localPurchLine;

        TradeLineRefId  tableRef = '';

        boolean         mayJournalBePosted  = false;
        boolean         purchParmLinesExistLoc;
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;

        #query
        chooseLines = new SysQueryRun(querystr(PurchUpdate));

        this.parmParmId(_purchParmTable.ParmId);
        this.parmParmUpdate(_purchParmTable.purchParmUpdate());
        this.parmCustomsBillOfEntryNumber_IN(_purchParmTable.CustomsBillOfEntryNumberTable_IN);
        this.parmCustomsImporterInvoiceNumber_IN(_purchParmTable.CustomsImportInvoiceNumberTable_IN);

        select RecId from customsInvoiceRegnTrans
            join RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
            join RecId from customsInvoiceRegnJournalTable
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                    && customsInvoiceRegnJournalTable.OrderId == _purchParmTable.PurchId;

        if (customsInvoiceRegnTrans.RecId)
        {
            chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(_purchParmTable.PurchId));
        }

        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
        if (_purchParmTable.RecId)
        {
            purchParmLinesExistLoc = (select firstonly RecId from purchParmLine
                                        where purchParmLine.ParmId == parmId && PurchParmLine.TableRefId == _purchParmTable.TableRefId).RecId != 0;
        }

        while (chooseLines.next())
        {
            if (chooseLines.changed(tablenum(PurchTable)))
            {
                localPurchTable = chooseLines.get(tablenum(PurchTable));
                mayJournalBePosted = this.mayJournalBePosted(localPurchTable);
            }
            localPurchLine  = chooseLines.get(tablenum(PurchLine));

            if (!purchParmLinesExistLoc
                || ! PurchParmLine::existWaiting(parmId, localPurchLine.PurchId, localPurchLine.InventTransId))
            {
                tableRef = _purchParmTable.TableRefId;
                this.createParmLine(localPurchLine, tableRef);
            }
        }
        this.parmQueryChooseLines(chooseLines);
        this.fillOutputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    public boolean  mayJournalBePosted(Common  _purchTable)
    {
        boolean ok = super(_purchTable);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrintingInAfterOperation</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmIsPrintingInAfterOperation(boolean _isPrintingInAfterOperation = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate purch quantity
    /// </summary>
    /// <param name="_purchLine">
    /// Specific <c>PurchLine</c>
    /// </param>
    /// <param name="_qty">
    ///  Specific <c>PurchQty</c>
    /// </param>
    /// <param name="_specQty">
    ///  PurchParmUpdate type
    /// </param>
    /// <returns>
    /// Containeer with receivenow, remainbefore and remain after
    /// </returns>
    public container qtyPurch_IN(PurchLine     _purchLine,
                                 PurchQty      _qty     = naReal(),
                                 PurchUpdate   _specQty = purchParmUpdate.SpecQty)
    {
        PurchQty            qtyUpdate;
        PurchQty            numOfRemainOri;
        PurchQty            qtyRemainNew;
        PurchParmTable      parmTable;
        PurchParmLine       parmLine;
        CustomsQty_IN       recievedBOECur;

        [qtyUpdate, numOfRemainOri, qtyRemainNew] = this.qtyPurch(_purchLine, _qty, _specQty);

        //Qty which is consumed by other lines in current session
        select sum(ReceiveNow) from parmLine
            where parmLine.PurchLineRecId == _purchLine.RecId
            exists join parmTable
            where parmline.ParmId     == parmTable.ParmId
            &&    parmLine.TableRefId == parmTable.TableRefId
            &&    parmTable.PurchId   == _purchLine.PurchId
            &&    parmTable.CustomsImportInvoiceNumberTable_IN == customsImporterInvoiceNumber
            &&    parmTable.ParmId    == parmId;
        recievedBOECur = parmLine.ReceiveNow;

        qtyUpdate = (_purchLine.PurchQty < 0) ? (qtyUpdate - recievedBOECur) : (qtyUpdate - abs(recievedBOECur));
        qtyRemainNew = numOfRemainOri - qtyUpdate;

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterChooseLinesByPurchId</Name>
				<Source><![CDATA[
    private void filterChooseLinesByPurchId(PurchId _purchId)
    {
        CustomsInvoiceRegnTrans_IN customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN customsInvoiceRegnJournalTable;

        select firstOnly RecId from customsInvoiceRegnTrans
            exists join RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
            exists join RecId from customsInvoiceRegnJournalTable
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                    && customsInvoiceRegnJournalTable.OrderId == _purchId;

        if (customsInvoiceRegnTrans.RecId)
        {
            chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(_purchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild()
    {
        container purchTableContainer;
        Map mapPurchTable;
        MapEnumerator mapPurchTableEnumerator;

        #query
        this.initQueryBuild();
        setprefix("@SYS25781");
        purchTableContainer = this.parmDatasourceRecordsPacked();

        if (purchTableContainer)
        {
            mapPurchTable = Map::create(purchTableContainer);
            mapPurchTableEnumerator = mapPurchTable.getEnumerator();

            while (mapPurchTableEnumerator.moveNext())
            {
                PurchTable localPruchTable = mapPurchTableEnumerator.currentValue();
                this.filterChooseLinesByPurchId(localPruchTable.PurchId);
            }
        }
        else
        {
            this.filterChooseLinesByPurchId(purchTable.PurchId);
        }

        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates query build.
    /// </summary>
    /// <param name="_customsImportOrderType">
    /// The customs import order type.
    /// </param>
    public void updateQueryBuild_IN(CustomsImportOrderType_IN _customsImportOrderType)
    {
        PurchTable      localPurchTable;
        PurchTable_W    localPurchTable_W;
        PurchTable_W    purchTable_W;
        container       purchTableContainer;
        Map             mapPurchTable;
        MapEnumerator   mapPurchTableEnumerator;
        FormDataSource  callerFormDataSourceCopy;
        SysGlobalCache  cache = classfactory.globalCache();

        #query

        this.initQueryBuild();

        if (callerFormDataSourceCopy)
        {
            purchTableContainer = FormLetter::getFormRecord(callerFormDataSourceCopy);
            if (purchTableContainer)
            {
                mapPurchTable = Map::create(purchTableContainer);
                mapPurchTableEnumerator = mapPurchTable.getEnumerator();

                while (mapPurchTableEnumerator.moveNext())
                {
                    localPurchTable = mapPurchTableEnumerator.currentValue();
                    localPurchTable_W = localPurchTable.purchTable_W();

                    if ((_customsImportOrderType == CustomsImportOrderType_IN::ImportOrder      &&
                        localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes)                    ||
                        (_customsImportOrderType == CustomsImportOrderType_IN::PurchaseOrder    &&
                        localPurchTable_W.CustomsImportOrder_IN == NoYes::No))
                    {
                        chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(localPurchTable.PurchId));
                    }
                    else
                    {
                        chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(''));
                    }
                }
            }
        }
        else
        {
            purchTable_W = purchTable.purchTable_W();
            if ((_customsImportOrderType == CustomsImportOrderType_IN::ImportOrder      &&
                purchTable_W.CustomsImportOrder_IN == NoYes::Yes)                    ||
                (_customsImportOrderType == CustomsImportOrderType_IN::PurchaseOrder    &&
                purchTable_W.CustomsImportOrder_IN == NoYes::No))
            {
                chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(purchTable.PurchId));
            }
            else
            {
                chooseLines.query().dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchId)).value(queryValue(''));
            }
        }
        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryDocumentRanges</Name>
				<Source><![CDATA[
    protected int updateQueryDocumentRanges(
        container _datasourceRecordsPackedMap,
        boolean _abortOnError = false)
    {
        int             ret;
        int             counter;
        Map             map;
        MapEnumerator   mapEnumerator;
        PurchTable      localPurchTable;
        PurchTable_W    localPurchTable_W;
        QueryBuildRange rangePurchTable;

        ret = super(_datasourceRecordsPackedMap, _abortOnError);

        if (ret && TaxParameters::find().Customs_IN && _datasourceRecordsPackedMap)
        {
            counter = 0;
            map = Map::create(_datasourceRecordsPackedMap);
            mapEnumerator = map.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                localPurchTable     = mapEnumerator.currentValue();
                localPurchTable_W   = localPurchTable.purchTable_W();
                if (localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes)
                {
                    counter ++;
                }
                if (counter == conpeek(_datasourceRecordsPackedMap, 4))
                {
                    ttsbegin;
                    select forupdate purchParmUpdate
                        where purchParmUpdate.ParmId == parmId;
                    purchParmUpdate.CustomsImportOrderType_IN = CustomsImportOrderType_IN::ImportOrder;
                    purchParmUpdate.update();
                    ttscommit;
                }
                this.parmCustomsImportOrderType_IN(purchParmUpdate.CustomsImportOrderType_IN);
            }

            map = Map::create(_datasourceRecordsPackedMap);
            mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                localPurchTable     = mapEnumerator.currentValue();
                localPurchTable_W   = localPurchTable.purchTable_W();

                if ((localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes && purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::PurchaseOrder) ||
                    (localPurchTable_W.CustomsImportOrder_IN == NoYes::No  && purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::ImportOrder))
                {
                    rangePurchTable = chooseLines.query().dataSourceTable(tablenum(PurchTable)).findRange(fieldnum(PurchTable, PurchId));
                    if (rangePurchTable)
                    {
                        rangePurchTable.value(queryValue(''));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServerBOE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize the PurchFormletterParmDataBOE_IN class and create the query for BillOfEntry posting.
    /// </summary>
    /// <param name="_purchFormletterBOEContractPacked">
    ///    The _purchFormletterBOEContractPacked packed contract class for posting BillOfEntry.
    /// </param>
    /// <param name="_append">
    ///    The _append to the existing query.
    /// </param>
    /// <param name="_parmTableContainer">
    ///    The _parmTableContainer container of purchParmTable.
    /// </param>
    /// <param name="_reuseParmUpdate">
    ///    The _reuseParmUpdate to resue parmUpdate table.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    ///    The _onlyCreateParmUpdate to create only parmUpdate table.
    /// </param>
    /// <param name="_executeLateSelection">
    ///    The _executeLateSelection if it is late selection.
    /// </param>
    /// <returns>
    ///    container packed with the info from contract class.
    /// </returns>
    static public container chooseLinesServerBOE(
        container        _purchFormletterBOEContractPacked,
        boolean          _append,
        container        _parmTableContainer,
        boolean          _reuseParmUpdate       = false,
        boolean          _onlyCreateParmUpdate  = false,
        boolean          _executeLateSelection  = false)
    {
        PurchParmTable  purchParmTable;
        PurchFormletterParmDataBOE_IN purchFormletterParmDataBOE = PurchFormletterParmData::newChooseLines(_purchFormletterBOEContractPacked,
                                                                                                           _reuseParmUpdate,
                                                                                                           _onlyCreateParmUpdate,
                                                                                                           _executeLateSelection);
        if (conLen(_parmTableContainer) >0)
        {
            purchParmTable = conPeek(_parmTableContainer, 1);
        }

        purchFormletterParmDataBOE.insertParmLines_IN(purchParmTable);

        return purchFormletterParmDataBOE.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>