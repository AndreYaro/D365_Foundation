<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingTraceFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingTraceFilter</c> is a base class for filters used in Item tracing.
/// </summary>
abstract class InventTrackingTraceFilter implements SysPackable
{
    #define.CaptionSeparator(" - ")
    #define.ListSeparator(", ")

    #define.CurrentVersion(1)

    FormRun                             formRun;
    FormDataSource                      mainDataSource;
    FormDataSource                      filterDataSource;

    Common                              filterTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies this filter to the form data sources.
    /// </summary>
    /// <remarks>
    ///    This method must be called prior to the data source <c>executeQuery</c> running; it can be called before <c>super()</c> within <c>executeQuery</c>
    ///    or in an appropriate data source <c>init</c> method (such as for the filter data source).
    /// </remarks>
    public void applyFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the records with the unique set of key values for filtering a data source with this filter object.
    /// </summary>
    public void create()
    {
        ttsbegin;
        this.fillFilterTable();
        ttscommit;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs any initialization necessary after the main data source has been initialized.
    /// </summary>
    /// <remarks>
    ///    This method must be called from the form data source <c>init</c> method (after <c>super()</c>).
    /// </remarks>
    public void dataSourceInitPost()
    {
        if (!mainDataSource)
        {
            throw(error(Error::wrongUseOfFunction(funcName())));
        }

        if (filterDataSource)
        {
            filterDataSource.joinSource(mainDataSource.id());
            filterDataSource.linkType(FormLinkType::ExistJoin);
            filterDataSource.cursor().linkPhysicalTableInstance(filterTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFilterTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills filter table.
    /// </summary>
    protected abstract void fillFilterTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the filter table type that is expected by this class.
    /// </summary>
    /// <returns>
    ///    The <c>TableId</c> for the type of filter table expected by this class.
    /// </returns>
    protected abstract TableId filterTableType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initializations operations necessary after the form has been initialized.
    /// </summary>
    /// <remarks>
    ///    This method must be called in the form <c>init</c> method (after <c>super()</c>).
    /// </remarks>
    public void formInitPost()
    {
        // Code from override in BatchSummaryFilter needs to be moved to the batches form, and then this method
        // should only be responsible for setting the caption of the filtered form. Name should be changed accordingly.
        this.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables used when the filter is created.
    /// </summary>
    protected void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimExistsJoin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an exists join between the given datasource and the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_parentQbds">
    ///     The parent datasource to join with.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///     The <c>InventDim</c> record containing values to use as ranges.
    /// </param>
    /// <param name="_inventDimParm">
    ///     An <c>InventDimParm</c> record specifying which fields to use as ranges.
    /// </param>
    /// <param name="_allowBlank">
    ///     Determines if blank values should be accepted; optional.
    /// </param>
    /// <returns>
    ///     The joined <c>InventDim</c> datasource.
    /// </returns>
    /// <remarks>
    ///     The fields from the <c>InventDim</c> table must be blank (if _allowBlank is true) or equal to their counterparts
    ///     in <paramref name="_inventDimCriteria"/>.
    /// </remarks>
    protected QueryBuildDataSource inventDimExistsJoin(
        QueryBuildDataSource    _parentQbds,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm,
        boolean                 _allowBlank = false)
    {
        ListEnumerator          fieldsEnumerator = InventDim::dimFieldListEnumerator();

        QueryBuildDataSource qbds = _parentQbds.addDataSource(tableNum(InventDim));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(true);

        while (fieldsEnumerator.moveNext())
        {
            FieldId dimFieldId = fieldsEnumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            if (_inventDimParm.(dimParmFieldId) == NoYes::Yes)
            {
                QueryBuildRange qbr = qbds.addRange(dimFieldId);
                qbr.value(queryValue(_inventDimCriteria.(dimFieldId)));

                if (_allowBlank && _inventDimCriteria.(dimFieldId))
                {
                    // Multiple ranges for the same field are ORed.
                    qbr = qbds.addRange(dimFieldId);
                    qbr.value(SysQuery::valueEmptyString());
                }
            }
        }

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.init();

        filterTmp = new DictTable(this.filterTableType()).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // Dummy implementation. Override if some internal state needs to be serialized in subclasses.
        return [#currentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmFilterDataSource(FormDataSource _filterDataSource = filterDataSource)
    {
        if (!prmisDefault(_filterDataSource))
        {
            if (_filterDataSource && this.filterTableType() != _filterDataSource.table())
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            filterDataSource = _filterDataSource;
        }

        return filterDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterTmp</Name>
				<Source><![CDATA[
    public Common parmFilterTmp(Common _filterTmp = filterTmp)
    {
        if (!prmisDefault(_filterTmp))
        {
            if (_filterTmp && !this.filterTableType() != _filterTmp.TableId)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            filterTmp = _filterTmp;
        }

        return filterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public formRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmMainDataSource(FormDataSource _mainDataSource = mainDataSource)
    {
        mainDataSource = _mainDataSource;

        return mainDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case #CurrentVersion:
                [version] = _packed;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
