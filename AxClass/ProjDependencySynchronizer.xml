<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjDependencySynchronizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjDependencySynchronizer</c> class is utility class used for synchronizing
///    tasks dependencies between MSProject and Dynamics.
/// </summary>
public class ProjDependencySynchronizer
{
    Map                 mspDependencies;
    Map                 mspToActivityMapping;
    Map                 activityToMspMapping;
    HierarchyIdBase     hierarchyId;
    RecordInsertList    insertList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds new dependency between tasks with specified id`s.
    /// </summary>
    /// <param name = "_predecessor">
    ///     MSProject id of predecessor task.
    /// </param>
    /// <param name = "_successor">
    ///     MSProject id of successor task.
    /// </param>
    public void addDependency(MSPID _predecessor, MSPID _successor)
    {
        Set predecessors;

        if (!mspDependencies.exists(_successor))
        {
            mspDependencies.insert(_successor, new Set(Types::String));
        }

        predecessors = mspDependencies.lookup(_successor);
        predecessors.add(_predecessor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanPredecessors</Name>
				<Source><![CDATA[
        private void cleanPredecessors()
    {
        ProjDependency projDependency;

        MapEnumerator mapEnum = mspDependencies.getEnumerator();
        while (mapEnum.moveNext())
        {
            delete_from projDependency
                where projDependency.Successor == mspToActivityMapping.lookup(mapEnum.currentKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPredecessors</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Clears predecessors for specified task.
    /// </summary>
    /// <param name = "_task">
    ///     MSProject id of the task to clear predecessors for.
    /// </param>
    public void clearPredecessors(MSPID _task)
    {
        mspDependencies.insert(_task, new Set(Types::String));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPredecessorsFromDb</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Clears predecessors for specified task from database.
    /// </summary>
    /// <param name = "_taskNumber">
    ///     Activity number of the task to clear predecessors for.
    /// </param>
    public void clearPredecessorsFromDb(smmActivityNumber _taskNumber)
    {
        ProjDependency projDependency;

        if (_taskNumber == "")
        {
            return;
        }
        delete_from projDependency where projDependency.Successor == _taskNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Commits added dependencies to db.
    /// </summary>
    public void commitDependencies()
    {
        this.createActivitiesMapping();
        this.cleanPredecessors();
        this.fillInsertRecordList();

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivitiesMapping</Name>
				<Source><![CDATA[
        private void createActivitiesMapping()
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        Map                 result = new Map(Types::String, Types::Class);

        mspToActivityMapping = new Map(Types::String, Types::String);
        activityToMspMapping = new Map(Types::String, Types::String);

        while select MSPID from hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId == hierarchyId
        join ActivityNumber from smmActivities
             where smmActivities.RecId == hierarchyTreeTable.RefRecId
        {
            mspToActivityMapping.insert(hierarchyTreeTable.MSPID, smmActivities.ActivityNumber);
            activityToMspMapping.insert(smmActivities.ActivityNumber, hierarchyTreeTable.MSPID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDependenciesMapping</Name>
				<Source><![CDATA[
        private Map createDependenciesMapping()
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        ProjDependency      projDependency;
        Map                 result = new Map(Types::String, Types::Class);

        mspToActivityMapping = new Map(Types::String, Types::String);
        activityToMspMapping = new Map(Types::String, Types::String);

        while select HierarchyId, MSPID from hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId == hierarchyId
        join ActivityNumber from smmActivities
             where smmActivities.RecId == hierarchyTreeTable.RefRecId
        outer join projDependency
             where projDependency.Successor == smmActivities.ActivityNumber
        {
            if (hierarchyTreeTable.MSPID && smmActivities.ActivityNumber)
            {
                if (!mspToActivityMapping.exists(hierarchyTreeTable.MSPID))
                {
                    mspToActivityMapping.insert(hierarchyTreeTable.MSPID, smmActivities.ActivityNumber);
                    activityToMspMapping.insert(smmActivities.ActivityNumber, hierarchyTreeTable.MSPID);
                }

                if (projDependency.Successor)
                {
                    if (!result.exists(projDependency.Successor))
                    {
                        result.insert(projDependency.Successor, new List(Types::String));
                    }
                    result.lookup(projDependency.Successor).AddEnd(projDependency.Predecessor);
                }
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInsertRecordList</Name>
				<Source><![CDATA[
        private void fillInsertRecordList()
    {
        ProjDependency  projDependency;
        Set             predecessors;
        SetEnumerator   predecessorsEnumerator;
        MapEnumerator   mapEnum = mspDependencies.getEnumerator();

        insertList = new RecordInsertList(tableNum(ProjDependency), true, true, true, false, true);

        while (mapEnum.moveNext())
        {
            predecessors = mapEnum.currentValue();
            predecessorsEnumerator = predecessors.getEnumerator();

            while (predecessorsEnumerator.moveNext())
            {
                projDependency.Successor    = mspToActivityMapping.lookup(mapEnum.currentKey());
                projDependency.Predecessor  = mspToActivityMapping.lookup(predecessorsEnumerator.current());
                insertList.add(projDependency);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns map of dependencies for the entire hierarchy.
    /// </summary>
    /// <returns>
    ///     Map that stores predecessor lists for the each task.
    /// </returns>

    public Map getDependencies()
    {
        Map             activityDependencies        = this.createDependenciesMapping();
        MapEnumerator   activityDependenciesEnum    = activityDependencies.getEnumerator();
        Map             result                      = new Map(Types::String, Types::Class);

        Enumerator      predecessorsEnumerator;
        List            predecessorsToInsert;

        while (activityDependenciesEnum.moveNext())
        {
            predecessorsToInsert = new List(Types::String);
            predecessorsEnumerator = activityDependenciesEnum.currentValue().getEnumerator();
            while (predecessorsEnumerator.moveNext())
            {
                predecessorsToInsert.addEnd(activityToMspMapping.lookup(predecessorsEnumerator.current()));
            }

            result.insert(activityToMspMapping.lookup(activityDependenciesEnum.currentKey()), predecessorsToInsert);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new(HierarchyIdBase _hierarchyId)
    {
        hierarchyId     = _hierarchyId;
        mspDependencies = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new <c>ProjDependencySynchronizer</c> object.
    /// </summary>
    /// <param name = "_hierarchyId">
    ///   Identifier of the hierarchy to add depedencies.
    /// </param>
    /// <returns>
    ///   New <c>ProjDependencySynchronizer</c> object.
    /// </returns>
    public static ProjDependencySynchronizer construct(HierarchyIdBase _hierarchyId)
    {
        return new ProjDependencySynchronizer(_hierarchyId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>