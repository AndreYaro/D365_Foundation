<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFDIWithholdingReportDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CFDIWithholdingReportDP_MX</c> class is a report data provider (RDP) class for the associated
/// <c>CFDIWitholdingReport_MX</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(CFDIWithholdingReportContract_MX))]
public class CFDIWithholdingReportDP_MX extends SRSReportDataProviderBase
{
    CompanyInfo companyInfo;
    RecId recId;
    PrintCopyOriginal printCopyOriginal;
    str reportLanguage;

    CFDIWithholdingReportHeaderTmp_MX reportHeader;
    CFDIWithholdingReportLineTmp_MX reportLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentDateTime</Name>
				<Source><![CDATA[
    private utcDateTime documentDateTime(EInvoiceJour_MX _eInvoiceJour)
    {
        return DateTimeUtil::applyTimeZoneOffset(_eInvoiceJour.InvoiceDateTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the company address.
    /// </summary>
    /// <param name="_companyAddress">
    /// The company address to format.
    /// </param>
    /// <returns>
    /// The formatted address.
    /// </returns>
    public str formatAddress(str _companyAddress)
    {
        str companyAddress = _companyAddress;

        while(strFind(companyAddress, '\n', 0, strLen(companyAddress)))
        {
            companyAddress = strIns(companyAddress, ' ', strFind(companyAddress, '\n', 0, strLen(companyAddress)));
            companyAddress = strDel(companyAddress, strFind(companyAddress, '\n', 0, strLen(companyAddress)), 1);
        }

        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthName</Name>
				<Source><![CDATA[
    private str getMonthName(int _month)
    {
        DictEnum dictEnum = new DictEnum(enumNum(MonthsOfYear));
        str labelId = dictEnum.value2Label(_month);
        str name;

        if (labelId)
        {
            name = SysLabel::labelId2String2(labelId, reportLanguage);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>CFDIWithholdingReportHeaderTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CFDIWithholdingReportHeaderTmp_MX</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CFDIWithholdingReportHeaderTmp_MX))]
    public CFDIWithholdingReportHeaderTmp_MX getReportHeaderTmp()
    {
        select * from reportHeader;

        return reportHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>CFDIWithholdingReportHeaderTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CFDIWithholdingReportHeaderTmp_MX</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CFDIWithholdingReportLineTmp_MX))]
    public CFDIWithholdingReportLineTmp_MX getReportLineTmp()
    {
        select reportLine;

        return reportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    private void insertHeader(EInvoiceJour_MX _eInvoiceJour, CFDIWithholdingJour_MX  _withholdingJour)
    {
        reportHeader.clear();

        LogisticsPostalAddress companyAddress = companyInfo.postalAddress();
        reportHeader.CompanyCity = companyAddress.City;
        reportHeader.CompanyRFC = companyInfo.Rfc_MX;
        reportHeader.CompanyState = LogisticsAddressState::find(companyAddress.CountryRegionId, companyAddress.State).Name;
        reportHeader.CompanyCountryRegion = LogisticsAddressCountryRegionTranslation::find(companyAddress.CountryRegionId).ShortName;
        reportHeader.CompanyStreet = this.formatAddress(companyAddress.Street);
        reportHeader.CompanyZipCode = companyAddress.ZipCode;
        reportHeader.CompanyCounty = LogisticsAddressCounty::find(companyAddress.CountryRegionId, companyAddress.State, companyAddress.County).Name;
        reportHeader.CompanyName = companyInfo.name();
        reportHeader.CompanyEmail = companyInfo.email();

        VendTable vendTable = VendTable::find(_withholdingJour.AccountNum);
        LogisticsPostalAddress vendAddress = VendTable.postalAddress();

        reportHeader.ReceiverCompanyRFC = vendTable.Rfc_MX;
        reportHeader.ReceiverCity = vendAddress.City;
        reportHeader.RecieverZipCode = vendAddress.ZipCode;
        reportHeader.ReceiverStreet = this.formatAddress(companyAddress.Street);
        reportHeader.ReceiverCounty = LogisticsAddressCounty::find(vendAddress.CountryRegionId, vendAddress.State, vendAddress.County).Name;
        reportHeader.ReceiverState = LogisticsAddressState::find(vendAddress.CountryRegionId, vendAddress.State).Name;
        reportHeader.ReceiverCountryRegion = LogisticsAddressCountryRegionTranslation::find(vendAddress.CountryRegionId).ShortName;
        reportHeader.InvoiceDateTime = DateTimeUtil::toStr(this.documentDateTime(_eInvoiceJour));
        reportHeader.ReceiverName = vendTable.name();
        reportHeader.ReceiverEmail = vendTable.email();

        reportHeader.ExemptAmount = _withholdingJour.ExemptAmount;
        reportHeader.OperationAmount = _withholdingJour.OperationAmount;
        reportHeader.TaxBaseAmount = _withholdingJour.TaxBaseAmount;
        reportHeader.WithholdingAmount = _withholdingJour.WithholdingAmount;

        reportHeader.CFDISATStamp = _eInvoiceJour.CFDISATStamp;
        reportHeader.CFDIStamp = _eInvoiceJour.CFDIStamp;
        reportHeader.SATCertificateNumber = _eInvoiceJour.CFDISATCertificateNumber;
        reportHeader.WithholdingUUID = _eInvoiceJour.CFDIUUID;
        reportHeader.OriginalString = _eInvoiceJour.CFDIOriginalString;

        reportHeader.CompanyTaxRegimeDesc = EInvoiceExtCodeTable_MX::find(
            companyInfo.TaxRegimeCode_MX,
            EInvoiceExtCodeType_MX::TaxRegime,
            DateTimeUtil::date(this.documentDateTime(_eInvoiceJour))).Description;

        CFDIWithholdingXMLDocReader_MX xmlReader = EInvoiceXMLDocReader_MX::construct(_eInvoiceJour);

        reportHeader.TypeOfPrint = this.typeOfPrint();
        reportHeader.DigitalStamp = xmlReader.getSello();
        reportHeader.CertificateSerialNumber = xmlReader.getCertificateNumber();
        reportHeader.WithholdingJournalID = _withholdingJour.WithholdingJournalID;
        reportHeader.WithholdingTypeCode = _withholdingJour.WithholdingTypeCode;
        reportHeader.WithholdingTypeDescription = CFDIWithholdingType_MX::find(_withholdingJour.WithholdingTypeCode).Description;
        reportHeader.ReceiverType = (vendTable.VendorType_MX == VendorType_MX::ForeignVendor) ? 'Extranjero' : 'Nacional';

        reportHeader.PeriodStartDate = _withholdingJour.PeriodStartDate;
        reportHeader.PeriodEndDate = _withholdingJour.PeriodEndDate;
        reportHeader.PeriodFiscalYearName = _withholdingJour.periodFiscalYearName();
        reportHeader.PeriodStartMonthFY = _withholdingJour.periodStartMonthOfFY();
        reportHeader.PeriodEndMonthFY = _withholdingJour.periodEndMonthOfFY();
        reportHeader.PeriodStartMonthName = this.getMonthName(mthOfYr(_withholdingJour.PeriodStartDate));
        reportHeader.PeriodEndMonthName = this.getMonthName(mthOfYr(_withholdingJour.PeriodEndDate));
        reportHeader.insert();

        this.insertLines(_withholdingJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLines</Name>
				<Source><![CDATA[
    private void insertLines(CFDIWithholdingJour_MX  _withholdingJour)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        CFDIWithholdingTrans_MX witholdingTrans;
        DictEnum dictEnum = new DictEnum(enumNum(TaxType_MX));

        while
        select witholdingTrans
            where witholdingTrans.CFDIWithholdingJour == _withholdingJour.RecId
        join sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
            where taxTrans.RecId == witholdingTrans.TaxTrans
        join TaxType_MX from taxTable
            group by taxTable.TaxType_MX
            where taxTable.TaxCode == taxTrans.TaxCode
        {

            reportLine.clear();
            reportLine.WithholdingJournalID = _withholdingJour.WithholdingJournalID;
            reportLine.WithholdingAmount = taxTrans.TaxAmount;
            reportLine.TaxBaseAmount = taxTrans.TaxBaseAmount;
            reportLine.PaymentType = 'Pago provisional';

            str labelId = dictEnum.value2Label(taxTable.TaxType_MX);
            str text = SysLabel::labelId2String2(labelId, reportLanguage);
            reportLine.TaxType = text;

            reportLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournal</Name>
				<Source><![CDATA[
    private void processJournal()
    {
        EInvoiceJour_MX eInvoiceJour = EInvoiceJour_MX::find(recId);
        CFDIWithholdingJour_MX withholdingJour = CFDIWithholdingJour_MX::find(eInvoiceJour.RefRecId);

        if (withholdingJour)
        {
            this.insertHeader(eInvoiceJour, withholdingJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// The method should compute data and populate the data tables that will be returned to . Note that
    /// this is a framework class. Customizing this class may cause problems with future upgrades to the
    /// software.
    /// </remarks>
    public void processReport()
    {
        companyInfo = CompanyInfo::find();

        CFDIWithholdingReportContract_MX contract = this.parmDataContract() as CFDIWithholdingReportContract_MX;
        recId = contract.parmRecordId();

        printCopyOriginal =  contract.parmPrintCopyOriginal();
        reportLanguage = 'es-MX';

        this.processJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeOfPrint</Name>
				<Source><![CDATA[
    private str typeOfPrint()
    {
        if(printCopyOriginal == PrintCopyOriginal::Copy)
        {
            return "@SYS35043";
        }
        else
        {
            return "@SYS5301";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>