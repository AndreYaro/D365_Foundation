<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdRecalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostProdRecalc</c> class recalculates the <c>prodCalcTrans</c> records.
/// </summary>
/// <remarks>
///    This class recalculates the <c>prodCalcTrans</c> records for the production order that is set as a
///    parameter.
/// </remarks>

class InventCostProdRecalc
{
    ProdTable       prodTable;
    boolean         updateBreakdown;
    boolean         recalculateRouteTransactions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateBreakdown</Name>
				<Source><![CDATA[
    public boolean parmUpdateBreakdown(boolean _updateBreakdown = updateBreakdown)
    {
        updateBreakdown = _updateBreakdown;

        return updateBreakdown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateRouteTransactions</Name>
				<Source><![CDATA[
    public boolean parmRecalculateRouteTransactions(boolean _recalculateRouteTransactions = recalculateRouteTransactions)
    {
        recalculateRouteTransactions = _recalculateRouteTransactions;
        return recalculateRouteTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRouteTransactions</Name>
				<Source><![CDATA[
    private void recalculateRouteTransactions()
    {
        if (this.parmRecalculateRouteTransactions())
        {
            ProdRouteTrans  prodRouteTrans;

            while select * from prodRouteTrans
               where prodRouteTrans.TransRefId    == prodTable.ProdId
                       && prodRouteTrans.TransRefType  == ProdTransRefType::Production
            {
                ProdJobType prodJobType = ProdJobType::construct(prodRouteTrans.JobType);

                prodJobType.updateRealConsumption(prodTable,
                                                  prodRouteTrans,
                                                  true,
                                                  prodTable.pmfRemainCostAlloc());

                PmfProdCoBy     prodCoBy;

                while select RecId, CostAllocationPct from prodCoBy
                              where prodCoBy.ProdId == prodTable.ProdId
                                &&  prodCoBy.ProductType == PmfProductType::Co_Product

                {
                    prodJobType.updateRealConsumptionCoBy(prodTable,
                                                          prodRouteTrans,
                                                          prodCoBy.CostAllocationPct,
                                                          prodCoBy.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the recalculation.
    /// </summary>
    /// <remarks>
    /// The <c>ProdCalcTrans</c> records will be recalculated by using the static table methods. A loop
    /// over all the <c>ProdBOM</c> records that belong to the specified production order will be done.
    /// The cost breakdown will not be updated when called from an inventory closing cancellation.
    /// </remarks>
    public void run()
    {
        #OCCRetryCount

        ProdBOM prodBOM;
        ProdCalcTrans prodCalcTrans;

        boolean SkipBlockingOfProdTable = !FeatureStateProvider::isFeatureEnabled(InventCostBlockProdTableWhenClosingToggle::instance());

        if (!SkipBlockingOfProdTable)
        {
            this.lockProdTable(prodTable);
        }
        
        try
        {
            if (SkipBlockingOfProdTable)
            {
                ttsbegin;
            }

            Set setProdBOM = new Set(Types::Int64);

            // Actualize all the prodCalcTrans related to a prodBOM
            while select prodBOM
                where prodBOM.ProdId    == prodTable.ProdId
                outer join forUpdate prodCalcTrans
                where prodCalcTrans.IdRefTableId   == prodBOM.tableId &&
                      prodCalcTrans.IdRefRecId     == prodBOM.RecId &&
                      prodCalcTrans.CalcType       != ItemCalcType::CostGroup
            {
                if (!setProdBOM.in(prodBOM.RecId))
                {
                    setProdBOM.add(prodBOM.RecId);

                    ProdCalcTrans::updateRealCalcBOM(prodTable, prodBOM, maxDate(), null, updateBreakdown, prodCalcTrans);

                    PmfCoByProdCalcTrans::updateRealCalcBOM(prodTable, prodBOM, maxDate(), null, updateBreakdown);
                }
            }

            this.recalculateRouteTransactions();

            // Now calculate the indirect costs
            if (CostSheetTable::hasCostType(CostPriceType::COGM))
            {
                ProdCalcTrans::updateRealCalcIndirect(prodTable);
            }

            // Now calculate the production
            ProdCalcTrans::updateRealCalcProduction(prodTable);

            if (prodTable.ProdType == ProdType::Process)
            {
                //Update the co/bys
                PmfCoByProdCalcTrans::updateRealCalcProduction(prodTable);
            }

            if (SkipBlockingOfProdTable)
            {
                ttscommit;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostProdRecalc construct()
    {
        return new InventCostProdRecalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locks the production order to avoid update conflicts when multiple threads try to recalculate the same production order.
    /// </summary>
    /// <param name = "_prodTable">The production order that should be locked.</param>
    private void lockProdTable(ProdTable _prodTable)
    {
        ProdTable lockProdTable;

        select pessimisticlock RecId
            from lockProdTable
            where lockProdTable.ProdId == _prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of this class for a given <c>ProdTable</c> record.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record that should be recalculated
    /// </param>
    /// <param name="_updateBreakdown">
    ///    A boolean flag indicating if the cost breakdown must be updated; optional.
    /// </param>
    /// <returns>
    ///    An initialized instance of this class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No <c>ProdTable</c> record is given
    /// </exception>
    public static InventCostProdRecalc newFromProdTable(
        ProdTable   _prodTable,
        boolean     _updateBreakdown = true
        )
    {
        // A prodTable needs to be passed
        if (! _prodTable)
        {
            throw error("@SYS25407");
        }

        // Create instance
        InventCostProdRecalc inventCostProdRecalc = InventCostProdRecalc::construct();

        // Set parameters
        inventCostProdRecalc.parmProdTable(_prodTable);
        inventCostProdRecalc.parmUpdateBreakdown(_updateBreakdown);

        return inventCostProdRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates a single production order.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production order that should be recalculated.
    /// </param>
    /// <param name="_updateBreakdown">
    ///    A boolean flag indicating if the cost breakdown must be updated; optional.
    /// </param>
    public static void recalcProductionOrder(
        ProdTable   _prodTable,
        boolean     _updateBreakdown = true
        )
    {
        // This method will be used to recalculate a single production order

        // Get instance
        InventCostProdRecalc inventCostProdRecalc = InventCostProdRecalc::newFromProdTable(_prodTable, _updateBreakdown);

        // Recalc the single production order
        inventCostProdRecalc.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>