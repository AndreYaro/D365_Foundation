<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqPlanDelete extends RunBaseBatch implements BatchRetryable
{
    ReqPlanId       reqPlanId;
    NoYes           deleteTaskTrace;

    Dialog          dialog;
    DialogField     dialogPlanId;
    DialogField     dialogDeleteTaskTrace;

    ReqPlanManager  reqPlanManager;
    ReqBackgroundJobService backgroundJobService;
    SysInstrumentationLogger logger;

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        ReqPlanId,
        deleteTaskTrace
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        logger = SysInstrumentationLoggerFactory::createLogger(classStr(ReqPlanDelete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>backgroundJobService</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exposes the instance of the <c>ReqBackgroundJobService</c> class.
    /// </summary>
    /// <returns>
    ///     The instance of the <c>ReqBackgroundJobService</c> class.
    /// </returns>
    public ReqBackgroundJobService backgroundJobService()
    {
        if (!backgroundJobService)
        {
            backgroundJobService = ReqBackgroundJobService::newBatchHeader();

            if (this.isInBatch() && ReqBatchTasksSchedulingFixToggle::instance().isEnabled())
            {
                backgroundJobService.parmGroupId(this.parmCurrentBatch().GroupId);
            }
        }
        return backgroundJobService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> method
    ///    returns false, this method will not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the description from the current class by calling the static description method on the
    ///    class if there is one.
    /// </summary>
    /// <returns>
    ///    The description from the current class.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to give a more precise description, for example, when you need some
    ///    internal variables to build the description text. The static <c>RunBase::description </c> method is
    ///    generally used to obtain the description of a class because you do not have to instantiate the
    ///    class to call it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    ClassDescription caption()
    {
        return ReqPlanDelete::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The plan version.
    /// </param>
    public void cleanupPlanVersion(ReqPlanVersion _reqPlanVersion)
    {
        if (appl.ttsLevel() > 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ReqPlanVersion reqPlanVersionLocal;
        reqPlanVersionLocal.disableCache(true);
        
        select firstOnly forUpdate reqPlanVersionLocal
            where reqPlanVersionLocal.RecId == _reqPlanVersion.RecId;

        logger.logInformation(strFmt('Attempting to clean up PlanVersion: %1.', _reqPlanVersion.RecId));

        if (!this.canPlanVersionBeCleanedUp(reqPlanVersionLocal, true))
        {
            return;
        }

        this.reqPlanManager().acquireWriterLockOnPlanVersion(reqPlanVersionLocal);

        try
        {
            select firstOnly forUpdate reqPlanVersionLocal
                where reqPlanVersionLocal.RecId == _reqPlanVersion.RecId;

            if (!this.canPlanVersionBeCleanedUp(reqPlanVersionLocal, false))
            {
                return;
            }

            this.cleanupWrkCtrCapRes(      reqPlanVersionLocal);
            this.cleanupReqRouteJob(       reqPlanVersionLocal);
            this.cleanupReqTransCov(       reqPlanVersionLocal);
            this.cleanupReqTransCovKeep(   reqPlanVersionLocal);
            this.cleanupReqTransReceiptCov(reqPlanVersionLocal);
            this.cleanupReqTraceLog(       reqPlanVersionLocal);
            this.cleanupReqPO(             reqPlanVersionLocal);
            this.cleanupReqRoute(          reqPlanVersionLocal);
            this.cleanupReqTrans(          reqPlanVersionLocal);
        }
        finally
        {
            this.reqPlanManager().releaseLockOnPlanVersion(reqPlanVersionLocal);
        }

        reqPlanVersionLocal.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPlanVersionBeCleanedUp</Name>
				<Source><![CDATA[
    private boolean canPlanVersionBeCleanedUp(ReqPlanVersion _planVersion, boolean _shouldCheckPlanLock)
    {
        if (!_planVersion)
        {
            logger.logInformation('PlanVersion does not exist.');
            return false;
        }

        boolean isOrphaned = ReqPlan::findReqPlanId(_planVersion.ReqPlanId).RecId == 0;
        boolean isLocked = _shouldCheckPlanLock && ReqPlanManager::isPlanVersionLocked(_planVersion);
        boolean isActive = _planVersion.Active;
        boolean canPlanVersionBeCleanedUp = (isOrphaned || !isActive) && (!isLocked);

        if (!canPlanVersionBeCleanedUp)
        {
            logger.logInformation(strFmt('PlanVersion cannot be cleaned up. IsOrphaned: %1, IsActive: %2, IsLocked: %3', isOrphaned, isActive, isLocked));
        }

        return canPlanVersionBeCleanedUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the planned orders in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    protected void cleanupReqPO(ReqPlanVersion _reqPlanVersion)
    {
        ReqPO reqPODelete;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqPODelete);

        ttsbegin;

        delete_from reqPODelete
            where   reqPODelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the routes of planned production orders in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    public void cleanupReqRoute(ReqPlanVersion _reqPlanVersion)
    {
        ReqRoute reqRouteDelete;
        ReqRoute reqRouteSelect;
        PMFSeqReqRouteChanges pmfSeqReqRouteChanges;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqRouteDelete);

        ttsbegin;

        delete_from pmfSeqReqRouteChanges
            exists join reqRouteSelect
                where reqRouteSelect.RecId       == pmfSeqReqRouteChanges.ReqRouteRecId
                   && reqRouteSelect.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;

        ttsbegin;

        delete_from reqRouteDelete
            where   reqRouteDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the route jobs of the planned production orders in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    protected void cleanupReqRouteJob(ReqPlanVersion _reqPlanVersion)
    {
        ReqRouteJob reqRouteJobDelete;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqRouteJobDelete);

        ttsbegin;

        delete_from reqRouteJobDelete
            where   reqRouteJobDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqTraceLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the explanation log in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    protected void cleanupReqTraceLog(ReqPlanVersion _reqPlanVersion)
    {
        ReqTraceLog reqTraceLog;

        ttsbegin;

        delete_from reqTraceLog
            where reqTraceLog.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the requirement profile in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    protected void cleanupReqTrans(ReqPlanVersion _reqPlanVersion)
    {
        ReqTrans reqTransDelete;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqTransDelete);

        ttsbegin;

        delete_from reqTransDelete
            where reqTransDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqTransCov</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the coverage in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    protected void cleanupReqTransCov(ReqPlanVersion _reqPlanVersion)
    {
        ReqTransCov reqTransCovDelete;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqTransCovDelete);

        ttsbegin;

        delete_from reqTransCovDelete
            where   reqTransCovDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWrkCtrCapRes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the capacity reservations for the planned orders in the specified version of the master
    ///    plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    public void cleanupWrkCtrCapRes(ReqPlanVersion  _reqPlanVersion)
    {
        WrkCtrCapRes         wrkCtrCapResSelect;
        WrkCtrCapResProperty wrkCtrCapResProperty;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(wrkCtrCapResProperty);

        ttsbegin;

        delete_from wrkCtrCapResProperty
            exists join wrkCtrCapResSelect
                where wrkCtrCapResSelect.RecId       == wrkCtrCapResProperty.CapResRefRecId
                   && wrkCtrCapResSelect.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
        
        WrkCtrCapRes wrkCtrCapResDelete;
        this.skipBufferMethods(wrkCtrCapResDelete);

        ttsbegin;

        delete_from wrkCtrCapResDelete
            where   wrkCtrCapResDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the master plan.
    /// </summary>
    /// <remarks>
    ///    If the master plan contains approved planned orders or uses freezing time fences, it is only
    ///    partially deleted.
    /// </remarks>
    protected void deletePlan()
    {
        using (var sessionCacheScope = new ReqMemoryCacheCurrentSessionScope())
        {                     
            ReqPlanData reqPlanData = ReqPlanData::newReqPlanId(reqPlanId);
            reqPlanData.parmMemoryCacheCurrentSessionScope(sessionCacheScope);

            ReqPlanVersion reqPlanVersion = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();

            if (ReqPO::hasApprovedOrders(reqPlanVersion.RecId) || reqPlanData.useLockingTimeFence())
            {
                this.deletePlanPartially(reqPlanId, reqPlanData);
            }
            else
            {
                this.deletePlanCompletely(reqPlanId);
            }

            ReqTransFirmLog reqTransFirmLog;

            delete_from reqTransFirmLog
            where       reqTransFirmLog.ReqPlanId == reqPlanId;

            if (deleteTaskTrace)
            {
                ReqCalcTaskTrace::deleteReqPlanId(reqPlanId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlanCompletely</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the master plan entirely.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of the master plan to delete.
    /// </param>
    protected void deletePlanCompletely(ReqPlanId _reqPlanId)
    {
        this.deletePlanInternal(_reqPlanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlanInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the master plan entirely or partially.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of the master plan to delete.
    /// </param>
    /// <param name="_isPartialDeletion">
    ///    A Boolean value that specifies if the master plan has to be partially deleted; optional.
    /// </param>
    /// <param name="_reqPlanData">
    ///    An instance of the <c>ReqPlanData</c> class that contains parameters for partially deleting the
    ///    plan.
    /// </param>
    /// <remarks>
    ///    Deletion of the master plan is performed by switching the system to the new version of the plan and
    ///    then deleting the old plan version.
    /// </remarks>
    protected void deletePlanInternal(
        ReqPlanId   _reqPlanId,
        boolean     _isPartialDeletion               = false,
        ReqPlanData _reqPlanData                     = null)
    {
        ReqPlan        reqPlan = ReqPlan::findReqPlanId(_reqPlanId);
        ReqPlanVersion sourcePlanVersion;
        ReqPlanVersion targetPlanVersion;

        if (appl.ttsLevel() > 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourcePlanVersion = reqPlan.getActiveVersion();
        this.reqPlanManager().acquireUpdateLockOnPlanVersion(sourcePlanVersion);

        boolean targetPlanVersionLockAcquired = false;

        try 
        {
            sourcePlanVersion = ReqPlanVersion::find(sourcePlanVersion.RecId);
            if (sourcePlanVersion.Active)
            {
                targetPlanVersion = reqPlan.createNewInactiveVersion();
                this.reqPlanManager().acquireUpdateLockOnPlanVersion(targetPlanVersion);
                targetPlanVersionLockAcquired = true;

                if (_isPartialDeletion)
                {
                    ReqPlanCopy::construct().copyPreservedPlanData(sourcePlanVersion, targetPlanVersion, _reqPlanData);
                }

                reqPlan.switchActiveVersionTo(targetPlanVersion);
                
                this.backgroundJobService().parmTriggeredBy(classStr(ReqPlanDelete)); 
                this.backgroundJobService().startPlanVersionCleanup(sourcePlanVersion);
            }
        }
        finally
        {
            this.reqPlanManager().releaseLockOnPlanVersion(sourcePlanVersion);
            if (targetPlanVersionLockAcquired)
            {
                this.reqPlanManager().releaseLockOnPlanVersion(targetPlanVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlanPartially</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the master plan partially.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of the master plan to delete.
    /// </param>
    /// <param name="_reqPlanData">
    ///    An instance of the <c>ReqPlanData</c> class that contains parameters for partially deleting the
    ///    plan.
    /// </param>
    protected void deletePlanPartially(
        ReqPlanId   _reqPlanId,
        ReqPlanData _reqPlanData)
    {
        this.deletePlanInternal(
            _reqPlanId,
            true,
            _reqPlanData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogPlanId            = dialog.addFieldValue(extendedTypeStr(ReqPlanId),reqPlanId);
        dialogDeleteTaskTrace   = dialog.addFieldValue(enumStr(NoYes), deleteTaskTrace, "@SYS114420", "@SYS114421");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        reqPlanId = dialogPlanId.value();
        deleteTaskTrace = dialogDeleteTaskTrace.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;
        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteTaskTrace</Name>
				<Source><![CDATA[
    boolean parmDeleteTaskTrace(boolean _deleteTaskTrace = deleteTaskTrace)
    {
        deleteTaskTrace = _deleteTaskTrace;
        return deleteTaskTrace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exposes the instance of the <c>ReqPlanManager</c> class.
    /// </summary>
    /// <returns>
    ///     The instance of the <c>ReqPlanManager</c> class.
    /// </returns>
    public ReqPlanManager reqPlanManager()
    {
        if (!reqPlanManager)
        {
            reqPlanManager = ReqPlanManager::construct();
        }
        return reqPlanManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        setPrefix(this.caption());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (appl.ttsLevel() > 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        try
        {
            this.deletePlan();
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if those tasks are to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqBackgroundJobService</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>ReqBackgroundJobService</c> class.
    /// </summary>
    /// <param name="_backgroundService">
    ///     The instance of the <c>ReqBackgroundJobService</c> class.
    /// </param>
    protected void setReqBackgroundJobService(ReqBackgroundJobService _backgroundService)
    {
        backgroundJobService = _backgroundService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPlanManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>ReqPlanManager</c> class.
    /// </summary>
    /// <param name="_reqPlanManager">
    ///     The instance of the <c>ReqPlanManager</c> class.
    /// </param>
    protected void setReqPlanManager(ReqPlanManager _reqPlanManager)
    {
        reqPlanManager = _reqPlanManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        if (! ReqPlan::findReqPlanId(this.parmReqPlanId()).RecId)
        {
            return checkFailed(strFmt("@SYS25328",this.parmReqPlanId()));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ReqPlanDelete construct()
    {
        return new ReqPlanDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS25371";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    static void main(Args args)
    {
        ReqPlanDelete reqPlanDelete;

        reqPlanDelete = ReqPlanDelete::construct();
        reqPlanDelete.getLast();

        var reqPlanIdArgs = ReqTransPlanIdFilter::getPlanIdFromArgsSysFilter(args);
        if (reqPlanIdArgs)
        {
            reqPlanDelete.parmReqPlanId(reqPlanIdArgs);
        }

        if (!reqPlanDelete.prompt())
        {
            return;
        }

        reqPlanDelete.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    public static ReqPlanDelete newDefault(
        ReqPlanManager _reqPlanManager = ReqPlanManager::construct(),
        ReqBackgroundJobService _backgroundJobService = ReqBackgroundJobService::newBatchHeader())
    {
        ReqPlanDelete reqPlanDelete = ReqPlanDelete::construct();

        reqPlanDelete.setReqPlanManager(_reqPlanManager);
        reqPlanDelete.setReqBackgroundJobService(_backgroundJobService);

        return reqPlanDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqTransCovKeep</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the kept coverage in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance
    ///    of set-based operations.
    /// </remarks>
    protected void cleanupReqTransCovKeep(ReqPlanVersion _reqPlanVersion)
    {
        ReqTransCovKeep reqTransCovKeepDelete;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqTransCovKeepDelete);

        ttsbegin;

        delete_from reqTransCovKeepDelete
            where reqTransCovKeepDelete.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqTransReceiptCov</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the aggregated receipts in the specified version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///    The version of the master plan.
    /// </param>
    /// <remarks>
    ///    The function skips the AOS validation methods on the table buffers in order to improve performance of set-based operations.
    /// </remarks>
    protected void cleanupReqTransReceiptCov(ReqPlanVersion _reqPlanVersion)
    {
        ReqTransReceiptCov reqTransReceiptCov;

        new SkipAOSValidationPermission().assert();
        this.skipBufferMethods(reqTransReceiptCov);

        ttsbegin;

        delete_from reqTransReceiptCov
            where reqTransReceiptCov.PlanVersion == _reqPlanVersion.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipBufferMethods</Name>
				<Source><![CDATA[
    private void skipBufferMethods(Common _buffer)
    {
        _buffer.skipDataMethods(true);
        _buffer.skipDeleteActions(true);
        _buffer.skipAosValidation(true);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>