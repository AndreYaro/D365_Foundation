<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkShipmentConstraintsProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkShipmentConstraintsProcessor</c> class processes shipment constraints.
/// </summary>
class TMSFwkShipmentConstraintsProcessor extends TMSFwkConstraintsProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkShipmentConstraintsProcessor construct()
    {
        return new TMSFwkShipmentConstraintsProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipment</Name>
				<Source><![CDATA[
    public RatingDtoList processShipment(TmsTransactionFacade _tmsTransactionFacade, XElement _shippingEntity, RatingDtoList _ratingDtos)
    {
        RatingDtoList restrictedCarriers = new RatingDtoList();

        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            TMSWeight           weight = _shippingEntity.SumDown(ElementXmlConstants::Weight);
            TMSCustomerCode     custCode = _tmsTransactionFacade.parmCustomerCode();
            TMSVendorCode       vendCode = _tmsTransactionFacade.parmVendorCode();
            InventSiteId        site = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::get_InventorySiteId());
            InventLocationId    warehouse = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::get_InventLocationId());

            RatingDto ratingDto = _ratingDtos.FirstOrDefault();
            TMSScheduledShipUTCDateTime sheduledShipDate = ratingDto.EffectiveScheduledShipDateTime;

            XElement pickup = _shippingEntity.GetAddress(AddTypeXmlConstants::Pickup);
            XElement dropoff = _shippingEntity.GetAddress(AddTypeXmlConstants::DropOff);
            str pickUpHub = pickup.GetString(AddElementXmlConstants::HubMasterCode);
            str dropOffHub = dropoff.GetString(AddElementXmlConstants::HubMasterCode);

            TMSShipmentConstraint shipmentConstraint;

            while select shipmentConstraint
                where (shipmentConstraint.EffectiveUTCDateTimeFrom <= sheduledShipDate || shipmentConstraint.EffectiveUTCDateTimeFrom == DateTimeUtil::minValue())
                    && (shipmentConstraint.EffectiveUTCDateTimeTo >= sheduledShipDate || shipmentConstraint.EffectiveUTCDateTimeTo == DateTimeUtil::minValue())
                    && (shipmentConstraint.InventSiteId == site || shipmentConstraint.InventSiteId == '')
                    && (shipmentConstraint.InventLocationId == warehouse || shipmentConstraint.InventLocationId == '')
                    && (shipmentConstraint.CustomerCode == custCode || shipmentConstraint.CustomerCode == "")
                    && (shipmentConstraint.VendorCode == vendCode || shipmentConstraint.VendorCode == "")
                    && (shipmentConstraint.WeightLow <= weight || shipmentConstraint.WeightLow == 0)
                    && (shipmentConstraint.WeightHigh > weight || shipmentConstraint.WeightHigh == 0)
                    && (shipmentConstraint.HubMasterCode == dropOffHub || shipmentConstraint.HubMasterCode == pickUpHub || shipmentConstraint.HubMasterCode == '')
            {
                this.assignShipmentConstraints(shipmentConstraint, _shippingEntity, _ratingDtos, restrictedCarriers);
            }
        }

        return restrictedCarriers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignShipmentConstraints</Name>
				<Source><![CDATA[
    private void assignShipmentConstraints(TMSShipmentConstraint _shipmentConstraint, XElement _shippingEntity, RatingDtoList _ratingDtoList, RatingDtoList _restrictedCarriers)
    {
        RatingDtoListEnumerator ratingDtoEnumerator = _ratingDtoList.GetListEnumerator();

        while (ratingDtoEnumerator.MoveNext())
        {
            RatingDto currentRatingDto = ratingDtoEnumerator.Current();

            if (this.constraintQualifiesForRatingDTO(_shipmentConstraint, currentRatingDto))
            {
                XElement ratingEntity = _shippingEntity.RetrieveOrCreateRatingEntity(currentRatingDto).GenerateElementForXPath(ElementXmlConstants::Constraints);
                ratingEntity.AddConstraint("@TRX448", _shipmentConstraint.ShipmentConstraintCode, _shipmentConstraint.Name, _shipmentConstraint.Action);

                if (_shipmentConstraint.Action == TMSAction::Restrict)
                {
                    _restrictedCarriers.Add(currentRatingDto);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constraintQualifiesForRatingDTO</Name>
				<Source><![CDATA[
    private boolean constraintQualifiesForRatingDTO(TMSShipmentConstraint _shipmentConstraint, RatingDto _ratingDto)
    {
        boolean result = ((_shipmentConstraint.CarrierCode == _ratingDto.CarrierCode || _shipmentConstraint.CarrierCode == '')
                            && (((_shipmentConstraint.CarrierCode == _ratingDto.CarrierCode)
                                && (_shipmentConstraint.CarrierServiceCode == _ratingDto.CarrierServiceCode)) || _shipmentConstraint.CarrierServiceCode == ''))
                            && (_shipmentConstraint.MethodCode == _ratingDto.MethodCode || _shipmentConstraint.MethodCode == '')
                            && (_shipmentConstraint.ModeCode == _ratingDTO.ModeCode || _shipmentConstraint.ModeCode == '');

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>