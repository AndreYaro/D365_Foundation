<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRecBasketFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class sets up and executes the logic around the ProdRecBasket functionality visualisation in the forms.
/// </summary>
class ProdRecBasketFormInteraction
{
    ProdRecBasketHandler        prodRecBasketHandler;

    //caller details
    FormRun                     callerFormRun;
    FormDataSource              callerFormRunMainDataSource;
    Query                       callerFormRunQuery;
    QueryBuildDataSource        callerFormRunQueryMainDataSource;

    // hooked in notifier
    PCDataSourceEventNotify     dataSourceNotifier;

    //get the basket controls
    FormFunctionButtonControl   buttonAddToBasket;
    FormFunctionButtonControl   buttonDelFromBasket;
    FormFunctionButtonControl   buttonClearBasket;

    FormButtonControl           buttonToggleViewBasket;
    FormButtonControl           buttonToggleViewCompBasket;

    protected const int         maximumSelectedRecordCountForRefresh = 1000;    // obsolete but keep for compatibility
    private boolean             updatingCache = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProdRecBasketFormInteraction construct()
    {
        return new ProdRecBasketFormInteraction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Statically instantiates the class.
    /// </summary>
    /// <param name = "_callerFormRun">The <c>FormRun</c> instance of the caller form.</param>
    /// <returns>An instance of the class itself.</returns>
    public static ProdRecBasketFormInteraction newStandard(FormRun _callerFormRun)
    {
        ProdRecBasketFormInteraction recBasketFormInteraction = ProdRecBasketFormInteraction::construct();
        recBasketFormInteraction.parmCallerForm(_callerFormRun);

        recBasketFormInteraction.init();

        return recBasketFormInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the called form reference.
    /// </summary>
    /// <param name = "_callerFormRun">The <c>FormRun</c> instance of the caller form.</param>
    /// <returns>The <c>FormRun</c> instance of the caller form.</returns>
    public FormRun parmCallerForm(FormRun _callerFormRun = callerFormRun)
    {
        callerFormRun = _callerFormRun;

        return callerFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class and the logic around it.
    /// </summary>
    public void init()
    {
        callerFormRunMainDataSource = callerFormRun.dataSource();
        callerFormRunQuery          = callerFormRunMainDataSource.query();
        callerFormRunQueryMainDataSource = callerFormRunQuery.dataSourceTable(callerFormRunMainDataSource.table());

        if (isConfigurationkeyEnabled(configurationKeyNum(ProdRecBasket)))
        {
            prodRecBasketHandler = ProdRecBasketHandler::newFromFormName(callerFormRun.name(), callerFormRunQueryMainDataSource.table());
            this.initCallerDatasourceForBasketRecBinding();
            this.initCallerDatasourceHandler();
            this.locateBasketControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerDatasourceForBasketRecBinding</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the basket datasource on the parent list page.
    /// </summary>
    private void initCallerDatasourceForBasketRecBinding()
    {
        prodRecBasketHandler.findOrAddBasketDataSource(callerFormRunMainDataSource.table(), callerFormRunQuery);

        // add it back to the listpage
        callerFormRunMainDataSource.query(callerFormRunQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerDatasourceHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the notification handler that redirects the event handlers from the master data source to this form.
    /// </summary>
    private void initCallerDatasourceHandler()
    {
        dataSourceNotifier = PCDataSourceEventNotify::construct(this);
        callerFormRunMainDataSource.addNotifyHandler(dataSourceNotifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs when the <c>refresh</c> method is called in the main datasource.
    /// </summary>
    /// <param name="_sender">
    ///     The datasource triggering the method.
    /// </param>
    public void onRefresh(FormObjectSet _sender)
    {
        callerFormRunMainDataSource = _sender;
        this.refreshBasketControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs when the <c>active</c> method is called in the main datasource.
    /// </summary>
    /// <param name="_sender">
    ///     The datasource triggering the method.
    /// </param>
    public void onActive(FormObjectSet _sender)
    {
        callerFormRunMainDataSource = _sender;
        this.refreshBasketControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCacheChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Occurs when the <c>CacheChanged</c> method is called in the main datasource.
    /// </summary>
    /// <param name = "_sender">
    ///     The datasource triggering the method.
    /// </param>
    /// <param name = "_cacheChangeType">
    ///     The type of change done to the cache.
    /// </param>
    public void onCacheChanged(FormObjectSet _sender, NotifyCacheChangeType _cacheChangeType)
    {
        if (!updatingCache)
        {
            updatingCache = true;
            callerFormRunMainDataSource = _sender;

            updatingCache = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateBasketControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Locates the basket controls on the parent form.
    /// </summary>
    public void locateBasketControls()
    {
        //basket controls need to have the same name as the menu item
        buttonAddToBasket               = callerFormRun.control(callerFormRun.controlId(menuitemActionStr(ProdRecBasketAddToCache)));
        buttonDelFromBasket             = callerFormRun.control(callerFormRun.controlId(menuitemActionStr(ProdRecBasketDelFromCache)));
        buttonClearBasket               = callerFormRun.control(callerFormRun.controlId(menuitemActionStr(ProdRecBasketClearBasket)));

        buttonToggleViewBasket          = callerFormRun.control(callerFormRun.controlId(identifierStr(ProdRecBasketToggleViewButton)));
        buttonToggleViewCompBasket      = callerFormRun.control(callerFormRun.controlId(identifierStr(ProdRecBasketToggleViewCompButton)));

        buttonToggleViewBasket.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ProdRecBasketHandler, handleClickedToggleView), prodRecBasketHandler);
        buttonToggleViewCompBasket.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ProdRecBasketHandler, handleClickedToggleComplView), prodRecBasketHandler);    
        
        buttonAddToBasket.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ProdRecBasketFormInteraction, clickAddToBasket), this);
        buttonDelFromBasket.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ProdRecBasketFormInteraction, clickDeleteFromBasket), this);
        buttonClearBasket.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ProdRecBasketFormInteraction, clickClearBasket), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBasketControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the basket controls on the parent form.
    /// </summary>
    public void refreshBasketControls()
    {
        JoinMode                currentjoinMode = prodRecBasketHandler.getBasketJoinMode(callerFormRunMainDataSource);

        if (buttonToggleViewBasket)
        {
            buttonToggleViewBasket.enabled(currentjoinMode != JoinMode::ExistsJoin);
            buttonToggleViewBasket.toggleValue(currentjoinMode == JoinMode::ExistsJoin);
        }
        if (buttonToggleViewCompBasket)
        {
            buttonToggleViewCompBasket.enabled(currentjoinMode != JoinMode::NoExistsJoin);
            buttonToggleViewCompBasket.toggleValue(currentjoinMode == JoinMode::NoExistsJoin);
        }

        this.refreshBasketAddRemoveButtons();

        // prevent sticky highlight of the push button
        var currentSelectedControl = callerFormRun.selectedControl();
        if (currentSelectedControl && currentSelectedControl.id())
        {
            if (   (currentjoinMode == JoinMode::OuterJoin && (currentSelectedControl.id() == buttonToggleViewBasket.id()))
               ||  (currentjoinMode == JoinMode::OuterJoin && (currentSelectedControl.id() == buttonToggleViewCompBasket.id())))
            {
                callerFormRun.design().controlNum(1).setFocus();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBasketFormPart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes basket form part.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance of the caller form.</param>
    public static void refreshBasketFormPart(FormRun _formRun)
    {
        if (!_formRun)
        {
            return;
        }

        var partList = new PartList(_formRun);
        var part = partList.getPartControlByFormName(formStr(ProdRecBasketPart));
        var basketPartFormRun = part.getPartFormRun() as ReqRefreshableFormInterface;

        if (basketPartFormRun)
        {
            basketPartFormRun.refreshForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickAddToBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the <c>click</c> event for the button that toggles Add to basket functionality.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control calling the method.
    /// </param>
    public void clickAddToBasket(FormControl _callingControl)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemActionStr(ProdRecBasketAddToCache), MenuItemType::Action);
    
        this.invokeProdBasketMenuItem(_callingControl, menuFunction);
        this.enableSelectionBasketButtons(false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickDeleteFromBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the <c>click</c> event for the button that toggles Delete from basket functionality.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control calling the method.
    /// </param>
    public void clickDeleteFromBasket(FormControl _callingControl)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemActionStr(ProdRecBasketDelFromCache), MenuItemType::Action);
    
        this.invokeProdBasketMenuItem(_callingControl, menuFunction);
        this.enableSelectionBasketButtons(true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickClearBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the <c>click</c> event for the button that toggles Clear basket functionality.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control calling the method.
    /// </param>
    public void clickClearBasket(FormControl _callingControl)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemActionStr(ProdRecBasketClearBasket), MenuItemType::Action);
    
        this.invokeProdBasketMenuItem(_callingControl, menuFunction);
        this.enableSelectionBasketButtons(true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFiltersChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the select view or apply filter events on the form.
    /// </summary>    
    public void queryFiltersChanged()
    {
        if (prodRecBasketHandler && prodRecBasketHandler.isProdBasketViewSelected())
        {
            prodRecBasketHandler.cacheFormQuery(callerFormRunMainDataSource);
            prodRecBasketHandler.handleClickedToggleComplView(buttonToggleViewCompBasket);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeProdBasketMenuItem</Name>
				<Source><![CDATA[
    private void invokeProdBasketMenuItem(FormControl _callingControl, MenuFunction _menuFunction)
    {
        if (_menuFunction && _menuFunction.checkAccessRights())
        {
            FormRun        caller = _callingControl.formRun();
            FormDataSource datasource = caller.dataSource();
            Args           args = new Args();

            args.caller(_callingControl.formRun());
            args.record(datasource.cursor());
            args.parmObject(prodRecBasketHandler);

            _menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBasketAddRemoveButtons</Name>
				<Source><![CDATA[
    private void refreshBasketAddRemoveButtons()
    {
        boolean addButtonEnabled = true;
        boolean delButtonEnabled = true;

        void checkSelectionBasketStatus()
        {
            var selectionStatus = prodRecBasketHandler.checkSelectionBasketStatus(callerFormRunMainDataSource);

            addButtonEnabled = selectionStatus != NoneOneOfAllSelected::All;
            delButtonEnabled = selectionStatus != NoneOneOfAllSelected::None;
        }

        void checkSelectionBasketStatusLegacy()
        {
            var selectionStatus = prodRecBasketHandler.getSelectionBasketStatus(callerFormRunMainDataSource);

            addButtonEnabled = selectionStatus != NoneOneOfAllSelected::All;
            delButtonEnabled = selectionStatus != NoneOneOfAllSelected::None;
        }

        // Checking basket selection status is performance heavy operation when big number of records is selected.
        // In this case disabling the buttons is not so important.
        if (prodRecBasketHandler.parmIsProdBasketContextUsed() && callerFormRunMainDataSource.recordsMarked().lastIndex() == 1)
        {
            checkSelectionBasketStatus();
        }

        this.enableSelectionBasketButtons(addButtonEnabled, delButtonEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSelectionBasketButtons</Name>
				<Source><![CDATA[
    private void enableSelectionBasketButtons(boolean _addButtonEnabled,
                                              boolean _deleteButtonEnabled)
    {
        if (buttonAddToBasket)
        {
            buttonAddToBasket.enabled(_addButtonEnabled);
        }
        if (buttonDelFromBasket)
        {
            buttonDelFromBasket.enabled(_deleteButtonEnabled);
        }
        if (buttonClearBasket)
        {
            buttonClearBasket.enabled(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>