<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReport_BillOfExchangeOpenTrans_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c> CustReport_BillOfExchangeOpenTrans_ES </c> is used in CustBillOfExchangeOpenTransDP_ES
///     to format invoice text, select correct dueDate, CustTrans and CompanyBankAccountId.
/// </summary>
public class CustReport_BillOfExchangeOpenTrans_ES
{
    CustTrans custTrans;
    str paymMode;
    str txt;
    date dueDate;
    AmountMST amountMST;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTransInCartera</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Selects customer transactions corresponding to bill of exchange transaction.
    /// </summary>
    /// <param name="_custBillOfExchangeTrans">
    ///     The table record that holds the bill of exchange transactions details.
    /// </param>
    public void custTransInCartera(CustBillOfExchangeTrans _custBillOfExchangeTrans)
    {
        select firstonly custTrans
            where custTrans.BillOfExchangeID == _custBillOfExchangeTrans.BillOfExchangeId
            && custTrans.BillOfExchangeStatus == _custBillOfExchangeTrans.Status
            && custTrans.BillOfExchangeSeqNum == _custBillOfExchangeTrans.SeqNum
            && custTrans.AccountNum == _custBillOfExchangeTrans.CustAccount
            && custTrans.Voucher == _custBillOfExchangeTrans.Voucher
            && custTrans.TransDate == _custBillOfExchangeTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns corresponding due date depending on status from bill of exchange.
    /// </summary>
    /// <param name="_custBillOfExchangeJour">
    ///     The table record that holds the customer bill of exchange details.
    /// </param>
    /// <returns>
    ///     The due date of bill of exchange.
    /// </returns>
    public DueDate dueDate(CustBillOfExchangeJour _custBillOfExchangeJour)
    {
        CustTrans tmpCustTrans;
        CustSettlement custSettlement;
        CustTransOpen custTransOpen;
        tmpCustTrans.BillOfExchangeID = _custBillOfExchangeJour.BillOfExchangeId;

        switch (_custBillOfExchangeJour.Status)
        {
            case CustVendNegInstStatus::Honored:
                select firstonly BillOfExchangeID, TransDate from tmpCustTrans
                    order by BillOfExchangeSeqNum desc
                    where tmpCustTrans.BillOfExchangeID == _custBillOfExchangeJour.BillOfExchangeId
                    join TransRecId, DueDate from custSettlement
                    order by DueDate desc
                    where custSettlement.TransRecId == tmpCustTrans.RecId;
                tmpCustTrans.TransDate = custSettlement.DueDate;
                break;
            default:
                select firstonly DueDate, RefRecId from custTransOpen
                    order by DueDate desc
                    join RecId, BillOfExchangeID, TransDate from tmpCustTrans
                    where tmpCustTrans.RecId == custTransOpen.RefRecId
                    && tmpCustTrans.BillOfExchangeID == _custBillOfExchangeJour.BillOfExchangeId;
                tmpCustTrans.TransDate = custTransOpen.DueDate;
        }
        return tmpCustTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats invoice text according bill of exchange lines.
    /// </summary>
    /// <param name="_custBillOfExchangeTrans">
    ///     The table record that holds the bill of exchange transactions details.
    /// </param>
    /// <returns>
    ///     The invoice of bill of exchange.
    /// </returns>
    public CustInvoiceId invoiceTxt(CustBillOfExchangeTrans _custBillOfExchangeTrans)
    {
        FreeText invoiceId;
        CustSettlement custSettlement;
        CustBillOfExchangeInvoice custBillOfExchangeInvoice;
        AmountMST seattleAmount;
        ExchRate exchRate;
        dataAreaId invoiceCompayId;

        // Retrieve the company currency code. This code together with vendSettlement.SettleAmountMST will be used
        // to convert to a new amount based on currency setting in the invoice company.
        CurrencyCode currencyCode = Ledger::accountingCurrency();

        while select crosscompany BillOfExchangeId, InvoiceAmountMST, InvoiceId, InvoiceVoucher, InvoiceCompany, TransDate, CurrencyCode
            from custBillOfExchangeInvoice
            join SettleAmountMST, OffsetTransVoucher, OffsetCompany from custSettlement
            where custBillOfExchangeInvoice.BillOfExchangeId == _custBillOfExchangeTrans.BillOfExchangeId
            && custBillOfExchangeInvoice.InvoiceVoucher == custSettlement.OffsetTransVoucher
            && custBillOfExchangeInvoice.InvoiceCompany == custSettlement.OffsetCompany
        {
            if (custBillOfExchangeInvoice.InvoiceCompany != custSettlement.company())
            {
                // Invoice and seattlement transactions can be in different companies and can have different transactions
                // amounts due to different currencies per transaction. Thus, the seattlment transaction amount need to be
                // converted using the same currency as the invoice before the two amounts are compared.

                invoiceCompayId = custBillOfExchangeInvoice.InvoiceCompany;
                if (!xDataArea::exist(invoiceCompayId))
                {
                    invoiceCompayId = curext();
                }

                changecompany(invoiceCompayId)
                {
                    exchRate = ExchangeRateHelper::exchRate(currencyCode, custBillOfExchangeInvoice.TransDate, Currency::noYes2UnknownNoYes(NoYes::Yes));
                    seattleAmount = CurrencyExchangeHelper::amountCur2MST(custSettlement.SettleAmountMST, currencyCode, exchRate, custBillOfExchangeInvoice.TransDate);
                }
            }
            else
            {
                seattleAmount = custSettlement.SettleAmountMST;
            }

            if ((custBillOfExchangeInvoice.InvoiceAmountMST) - (abs(seattleAmount)) > 0)
            {
                if (!invoiceId)
                {
                    invoiceId = strfmt('%1 %2',"@SYS1863", custBillOfExchangeInvoice.InvoiceId);
                }
                else
                {
                    invoiceId += strfmt(', %1 %2',"@SYS1863", custBillOfExchangeInvoice.InvoiceId);
                }
            }
            if ((custBillOfExchangeInvoice.InvoiceAmountMST) - (abs(seattleAmount)) == 0)
            {
                if (!invoiceId)
                {
                    invoiceId = custBillOfExchangeInvoice.InvoiceId;
                }
                else
                {
                    invoiceId += strfmt(', %1',custBillOfExchangeInvoice.InvoiceId);
                }
            }
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountMST</Name>
				<Source><![CDATA[
    public AmountMST parmAmountMST()
    {
        amountMST = custTrans.AmountMST;
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public DueDate parmDueDate()
    {
        dueDate = custTrans.DueDate;
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        paymMode = custTrans.PaymMode;
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTxt</Name>
				<Source><![CDATA[
    public FreeText parmTxt()
    {
        txt = custTrans.Txt;
        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remittedToBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns bank account corresponding to bill of exchange transaction when transaction status is remitted or protested.
    /// </summary>
    /// <param name="_billOfExchangeId">
    ///     The bill of exchange ID.
    /// </param>
    /// <returns>
    ///     The company bank account ID.
    /// </returns>
    public CompanyBankAccountId remittedToBankAccount(CustBillOfExchangeID _billOfExchangeId)
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;

        select RemittedToBankAccountId from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == _billOfExchangeId
            && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted;

        if (!custBillOfExchangeTrans.RecId)
        {
            select RemittedToBankAccountId from custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == _billOfExchangeId
                && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested;
        }

        return custBillOfExchangeTrans.RemittedToBankAccountId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>