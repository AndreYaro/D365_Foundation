<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxImposeSubtractPeriodFunc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements folder functor to calculate tax based on employee tax state (substract).
/// </summary>
class rPayTaxImposeSubtractPeriodFunc implements IRPayTaxCalcFunctor
{
    RPayTaxCalcState        calcState;
    RPayTaxCalcContext      calcContext;
    RPayTaxCalcDataList     taxDifferenceList;
    RPayEmplTax             emplTax;

    RPayCorrectedPeriod     correctedPeriod;
    BranchId_RU             branchIdStored; //last actual branch
    RPayEmplTaxStatus       taxStatusStored; //last actual status

    RPayTaxEmplSum   taxEmplSumMinuend, taxEmplSumSubtrahend, taxEmplSumDifference;
    RPayTaxEmplTrans taxEmplTransMinuend, taxEmplTransSubtrahend, taxEmplTransDifference;

    Map storedSumData; //holds amounts by income group code and branch with tuple (group, branch) as a key
    Map storedTransData; //holds amounts by income group, incomme\deduction code and relative
    Map minuendSumData; //holds amounts by income group code and branch for new calculated tax sum values to apply new calculated tax values to unmatched trans

    Map createdSumDiff; //holds created difference recIds by income group and branchId
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the function.
    /// </summary>
    /// <param name="_args">
    /// The argument.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The result.
    /// </returns>
    public Object apply(anytype _args, Object _context)
    {
        Object obj;

        calcContext = _context as RPayTaxCalcContext;
        Debug::assert(calcContext != null);

        Debug::assert(typeOf(_args) == Types::Class);
        obj = _args;

        emplTax = obj as RPayEmplTax;
        Debug::assert(emplTax != null);

        this.initFun();
        this.subtractPeriod();

        return taxDifferenceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides accessebility to external variables from functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    public void closure(anytype _closure)
    {
        Object obj = _closure;
        calcState = obj as RPayTaxCalcState;
        Debug::assert(calcState != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectStoredData</Name>
				<Source><![CDATA[
        private void collectStoredData()
    {
        RPayTaxIncomeGroupTable     taxGroupTable;
        container                   sumKey, transKey, conValue;
        Set                         payPeriodGroup = new Set(Types::Container);

        storedSumData   = new Map(Types::Container, Types::Container);
        storedTransData = new Map(Types::Container, Types::Container);

        //the difference can be calculated between previous and open period only
        if (correctedPeriod == calcContext.parmPayPeriodOpen())
        {
            return;
        }

        while select PayPeriod, RpayTaxIncomeGroupCode, BranchId,
                     TaxRateCode, IncomeAmount, AddTaxAmount,
                     DeductionOtherAmount, DeductionStandardAmount, RecId from taxEmplSumSubtrahend
                order by PayPeriod
                where  taxEmplSumSubtrahend.EmplId          == calcContext.parmEmplId()
                    && taxEmplSumSubtrahend.BranchId        == branchIdStored
                    && taxEmplSumSubtrahend.CorrectedPeriod == correctedPeriod
                    && taxEmplSumSubtrahend.PayPeriod       <  calcContext.parmPayPeriodOpen()
                    && taxEmplSumSubtrahend.Source          == false
                join taxEmplTransSubtrahend
                    where  taxEmplTransSubtrahend.TaxSumRecId == taxEmplSumSubtrahend.RecId
                        && taxEmplTransSubtrahend.Manual      == false
                exists join taxGroupTable
                    where  taxGroupTable.RpayTaxIncomeGroupCode == taxEmplSumSubtrahend.RpayTaxIncomeGroupCode
                        && taxGroupTable.EmplTaxStatus          == taxStatusStored
        {
            transKey = this.transTax2Key(taxEmplSumSubtrahend, taxEmplTransSubtrahend);
            sumKey   = this.taxSum2Key(taxEmplSumSubtrahend);

            if (!payPeriodGroup.in([taxEmplSumSubtrahend.RpayTaxIncomeGroupCode, taxEmplSumSubtrahend.PayPeriod]))
            {
                if (storedSumData.exists(sumKey))
                {
                    conValue = storedSumData.lookup(sumKey);

                    //use table variable as temporary buffer
                    taxEmplSumSubtrahend.IncomeAmount               += conPeek(conValue, 1);
                    taxEmplSumSubtrahend.DeductionOtherAmount       += conPeek(conValue, 2);
                    taxEmplSumSubtrahend.DeductionStandardAmount    += conPeek(conValue, 3);
                    taxEmplSumSubtrahend.AddTaxAmount               += conPeek(conValue, 4);
                    taxEmplSumSubtrahend.TaxRateCode                 = conPeek(conValue, 5); //assume that tax rate cannot be changed whithin one tax group. That means only one rate code on one tax status.
                }

                storedSumData.insert(sumKey, [taxEmplSumSubtrahend.IncomeAmount,            taxEmplSumSubtrahend.DeductionOtherAmount,
                                              taxEmplSumSubtrahend.DeductionStandardAmount, taxEmplSumSubtrahend.AddTaxAmount,
                                              taxEmplSumSubtrahend.TaxRateCode]);
                payPeriodGroup.add([taxEmplSumSubtrahend.RpayTaxIncomeGroupCode, taxEmplSumSubtrahend.PayPeriod]);
            }

            if (storedTransData.exists(transKey))
            {
                conValue = storedTransData.lookup(transKey);
                //use table variable as temporary buffer
                taxEmplTransSubtrahend.Amount       += conPeek(conValue, 1);
                taxEmplTransSubtrahend.Deduction    += conPeek(conValue, 2);
            }

            storedTransData.insert(transKey, [taxEmplTransSubtrahend.Amount, taxEmplTransSubtrahend.Deduction]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTaxSumDifference</Name>
				<Source><![CDATA[
        private RecId findOrCreateTaxSumDifference(RpayTaxIncomeGroupCode   _taxGroupCode,
                                               BranchId_RU              _branchId,
                                               RPayAmount               _incomeAmount,
                                               RPayAmount               _dedOtherAmount,
                                               RPayAmount               _dedStdAmount,
                                               RPayAmount               _addTaxAmount,
                                               RPayRateCode             _rateCode)
    {
        container key = this.sumKey(_taxGroupCode, _branchId);

        if (createdSumDiff.exists(key))
        {
            return createdSumDiff.lookup(key);
        }
        else
        {
            taxEmplSumDifference.clear();
            taxEmplSumDifference.EmplId                  = calcContext.parmEmplId();
            taxEmplSumDifference.CorrectedPeriod         = correctedPeriod;
            taxEmplSumDifference.PayPeriod               = calcContext.parmPayPeriodOpen();
            taxEmplSumDifference.RpayTaxIncomeGroupCode  = _taxGroupCode;
            taxEmplSumDifference.BranchId                = _branchId;
            taxEmplSumDifference.TaxRateCode             = _rateCode;
            taxEmplSumDifference.IncomeAmount            = _incomeAmount;
            taxEmplSumDifference.DeductionOtherAmount    = _dedOtherAmount;
            taxEmplSumDifference.DeductionStandardAmount = _dedStdAmount;
            taxEmplSumDifference.AddTaxAmount            = _addTaxAmount;
            taxEmplSumDifference.insert();

            createdSumDiff.insert(key, taxEmplSumDifference.RecId);

            return taxEmplSumDifference.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFun</Name>
				<Source><![CDATA[
        private void initFun()
    {
        if (taxDifferenceList == null)
        {
            taxDifferenceList = RPayTaxCalcTypeFactory::construct(calcContext).getTaxCalcDataList() as RPayTaxCalcDataList;

            Debug::assert(taxDifferenceList != null);

            taxEmplSumDifference.setTmp();
            taxEmplTransDifference.setTmp();

            taxDifferenceList.initPlainQueryRun(taxEmplSumDifference, taxEmplTransDifference);
        }

        taxEmplSumMinuend.setTmp();
        taxEmplSumMinuend.setTmpData(calcState.taxEmplSumTmp());
        taxEmplTransMinuend.setTmp();
        taxEmplTransMinuend.setTmpData(calcState.taxEmplTransTmp());

        correctedPeriod = emplTax.parmPayPeriod();
        createdSumDiff  = new Map(Types::Container, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStoredEmplInfo</Name>
				<Source><![CDATA[
        private void initStoredEmplInfo()
    {
        //the difference can be calculated between previous and open period only
        if (correctedPeriod == calcContext.parmPayPeriodOpen())
        {
            return;
        }

        [taxStatusStored, branchIdStored] = RPayTaxEmplSum::findLastTaxStatusBranch(calcContext.parmPayPeriodOpen(),
                                                                                    correctedPeriod,
                                                                                    calcContext.parmEmplId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractPeriod</Name>
				<Source><![CDATA[
        private void subtractPeriod()
    {
        this.initStoredEmplInfo(); //define last actual branch and status of employee
        this.collectStoredData();  //load stored data to maps to increase performance
        this.subtractTrans();      //substract trans diff = new calculated - stored
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractTrans</Name>
				<Source><![CDATA[
        private void subtractTrans()
    {
        container storedSumKey, storedTransKey, conValue;
        RPayAmount incDedAmountStored, dedAmountStored;
        RPayAmount stIncomeAmount, stDedOtherAmount, stStdAmount, stAddTaxAmount;

        minuendSumData = new Map(Types::Container, Types::Container);

        while select taxEmplTransMinuend
                join taxEmplSumMinuend
                where taxEmplSumMinuend.RecId           == taxEmplTransMinuend.TaxSumRecId
                   && taxEmplSumMinuend.CorrectedPeriod == correctedPeriod
                   && taxEmplSumMinuend.EmplId          == calcContext.parmEmplId()
        {
            storedTransKey = this.transTax2Key(taxEmplSumMinuend, taxEmplTransMinuend);
            storedSumKey   = this.taxSum2Key(taxEmplSumMinuend);

            minuendSumData.insert(this.taxSum2Key(taxEmplSumMinuend),
                                  [taxEmplSumMinuend.IncomeAmount,            taxEmplSumMinuend.DeductionOtherAmount,
                                   taxEmplSumMinuend.DeductionStandardAmount, taxEmplSumMinuend.AddTaxAmount,
                                   taxEmplSumMinuend.TaxRateCode]);

            if (storedTransData.exists(storedTransKey))
            {
                [incDedAmountStored, dedAmountStored] = storedTransData.lookup(storedTransKey);

                taxEmplTransDifference.clear();
                taxEmplTransDifference.initFromTaxTransBaseData(taxEmplTransMinuend);
                taxEmplTransDifference.Amount      = taxEmplTransMinuend.Amount    - incDedAmountStored;
                taxEmplTransDifference.Deduction   = taxEmplTransMinuend.Deduction - dedAmountStored;

                if (taxEmplTransDifference.RpayTaxType == RpayTaxType::Income && taxEmplTransDifference.Deduction == 0)
                {
                    taxEmplTransDifference.RpayTaxDeductionCode = 0;
                }

                if (taxEmplTransDifference.Amount || taxEmplTransDifference.Deduction)
                {
                    conValue = storedSumData.lookup(storedSumKey);
                    taxEmplTransDifference.TaxSumRecId = this.findOrCreateTaxSumDifference(taxEmplSumMinuend.RpayTaxIncomeGroupCode,
                                                                                           taxEmplSumMinuend.BranchId,
                                                                                           taxEmplSumMinuend.IncomeAmount               - conPeek(conValue, 1),
                                                                                           taxEmplSumMinuend.DeductionOtherAmount       - conPeek(conValue, 2),
                                                                                           taxEmplSumMinuend.DeductionStandardAmount    - conPeek(conValue, 3),
                                                                                           taxEmplSumMinuend.AddTaxAmount               - conPeek(conValue, 4),
                                                                                           conPeek(conValue, 5));
                    taxEmplTransDifference.insert();
                }

                storedTransData.remove(storedTransKey);
            }
            else
            {
                if (storedSumData.exists(storedSumKey))
                {
                    conValue = storedSumData.lookup(storedSumKey);
                    stIncomeAmount      = conPeek(conValue, 1);
                    stDedOtherAmount    = conPeek(conValue, 2);
                    stStdAmount         = conPeek(conValue, 3);
                    stAddTaxAmount      = conPeek(conValue, 4);
                }
                else
                {
                    stIncomeAmount      = 0;
                    stDedOtherAmount    = 0;
                    stStdAmount         = 0;
                    stAddTaxAmount      = 0;
                }

                taxEmplTransDifference.clear();
                taxEmplTransDifference.initFromTaxTransBaseData(taxEmplTransMinuend);
                taxEmplTransDifference.Amount      = taxEmplTransMinuend.Amount;
                taxEmplTransDifference.Deduction   = taxEmplTransMinuend.Deduction;
                taxEmplTransDifference.TaxSumRecId = this.findOrCreateTaxSumDifference(taxEmplSumMinuend.RpayTaxIncomeGroupCode,
                                                                                       taxEmplSumMinuend.BranchId,
                                                                                       taxEmplSumMinuend.IncomeAmount               - stIncomeAmount,
                                                                                       taxEmplSumMinuend.DeductionOtherAmount       - stDedOtherAmount,
                                                                                       taxEmplSumMinuend.DeductionStandardAmount    - stStdAmount,
                                                                                       taxEmplSumMinuend.AddTaxAmount               - stAddTaxAmount,
                                                                                       taxEmplSumMinuend.TaxRateCode);
                taxEmplTransDifference.insert();
            }
        }

        this.subtractTransUnMatched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractTransUnMatched</Name>
				<Source><![CDATA[
        private void subtractTransUnMatched()
    {
        MapEnumerator mapEnum = storedTransData.getEnumerator();

        RpayTaxIncomeGroupCode  taxGroupCode;
        BranchId_RU             branchId;
        RpayTaxType             transType;
        RpayTaxIncDedCode       incDedCode;
        RPayRateCode            rateCode;
        RHRMFamilyRecId         familyId;
        container sumKey, conValue;

        RPayAmount incomeAmount, dedOtherAmount, dedStdAmount, addTaxAmount;
        RPayAmount incDedAmount, dedAmount;
        RPayAmount mindIncomeAmount, mindDedOtherAmount, mindDedStdAmount, mindAddTaxAmount;

        while (mapEnum.moveNext())
        {
            [taxGroupCode, branchId, transType, incDedCode, familyId]  = mapEnum.currentKey();

            sumKey = this.sumKey(taxGroupCode, branchId);

            [incomeAmount, dedOtherAmount, dedStdAmount, addTaxAmount, rateCode] = storedSumData.lookup(sumKey);
            [incDedAmount, dedAmount] = mapEnum.currentValue();

            taxEmplTransDifference.clear();
            taxEmplTransDifference.RpayTaxType          = transType;
            taxEmplTransDifference.RpayTaxIncDedCode    = incDedCode;
            taxEmplTransDifference.Amount               = -incDedAmount;
            taxEmplTransDifference.FamilyRecId          = familyId;

            if (transType == RpayTaxType::Income && dedAmount)
            {
                taxEmplTransDifference.RpayTaxDeductionCode = RPayTaxIncomeTable::find(incDedCode).RpayTaxDeductionCode; //assume that only 1 deduction on income code within year
                taxEmplTransDifference.Deduction = -dedAmount;
            }

            if (createdSumDiff.exists(sumKey))
            {
                taxEmplTransDifference.TaxSumRecId = createdSumDiff.lookup(sumKey);
            }
            else
            {
                if (minuendSumData.exists(sumKey))
                {
                    conValue = minuendSumData.lookup(sumKey);
                    mindIncomeAmount      = conPeek(conValue, 1);
                    mindDedOtherAmount    = conPeek(conValue, 2);
                    mindDedStdAmount      = conPeek(conValue, 3);
                    mindAddTaxAmount      = conPeek(conValue, 4);
                }
                else
                {
                    mindIncomeAmount      = 0;
                    mindDedOtherAmount    = 0;
                    mindDedStdAmount      = 0;
                    mindAddTaxAmount      = 0;
                }

                taxEmplTransDifference.TaxSumRecId = this.findOrCreateTaxSumDifference(taxGroupCode,
                                                                                       branchId,
                                                                                       mindIncomeAmount     - incomeAmount,
                                                                                       mindDedOtherAmount   - dedOtherAmount,
                                                                                       mindDedStdAmount     - dedStdAmount,
                                                                                       mindAddTaxAmount     - addTaxAmount,
                                                                                       rateCode);
            }
            taxEmplTransDifference.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumKey</Name>
				<Source><![CDATA[
        private container sumKey(RpayTaxIncomeGroupCode   _taxGroupCode,
                             BranchId_RU              _branchId)
    {
        return [_taxGroupCode, _branchId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSum2Key</Name>
				<Source><![CDATA[
        private container taxSum2Key(RPayTaxEmplSum _taxSum)
    {
        return this.sumKey(_taxSum.RpayTaxIncomeGroupCode, _taxSum.BranchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKey</Name>
				<Source><![CDATA[
        private container transKey(RpayTaxIncomeGroupCode   _taxGroupCode,
                               BranchId_RU              _branchId,
                               RpayTaxType              _transType,
                               RpayTaxIncDedCode        _incDedCode,
                               RHRMFamilyRecId          _familyId)
    {
        return [_taxGroupCode, _branchId, _transType, _incDedCode, _familyId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTax2Key</Name>
				<Source><![CDATA[
        private container transTax2Key(RPayTaxEmplSum _taxEmplSum, RPayTaxEmplTrans _taxEmplTrans)
    {
        return this.transKey(_taxEmplSum.RpayTaxIncomeGroupCode,
                             _taxEmplSum.BranchId,
                             _taxEmplTrans.RpayTaxType,
                             _taxEmplTrans.RpayTaxIncDedCode,
                             _taxEmplTrans.FamilyRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>