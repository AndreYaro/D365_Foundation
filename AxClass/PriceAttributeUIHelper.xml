<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceAttributeUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class to rendering the data grid with lookup for price attributes.
/// When registerOverrideMethod - lookup for a control, there's no way to pass extra parameters, so we have to put a callee of lookup with attribute record id aware.
/// </summary>
public final class PriceAttributeUIHelper
{
    private PriceAttributeDefinition attribute;
    private IPriceAttributeProvider attributeProvider;
    private int sequence;

    private const str AttributeNameFormat = 'PriceAttribute_%1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PriceAttributeDefinition _attribute, int _sequence)
    {
        attribute.data(_attribute); // PriceAttributeUIHelper doesn't have lifetime bound to the table buffer PriceAttributeDefinition.
        this.attributeProvider = attribute.findProvider();
        this.sequence = _sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(false)]
    public void initAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        if (!attributeProvider)
        {
            return ;
        }

        if (this.attribute.AttributeType == PriceAttributeType::Extension)
        {
            this.initExtensionAttributeControl(groupControl, dataSource);
            return ;
        }

        switch (attributeProvider.dataType(this.attribute))
        {
            case PriceAttributeDataType::Reference:  
                this.initReferenceAttributeControl(groupControl, dataSource);
                break;
            
            case PriceAttributeDataType::Enum:
                this.initEnumAttributeControl(groupControl, dataSource);
                break;
          
            case PriceAttributeDataType::Text:
                this.initTextAttributeControl(groupControl, dataSource);
                break;

            case PriceAttributeDataType::Integer:
                this.initIntegerAttributeControl(groupControl, dataSource);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeControlName</Name>
				<Source><![CDATA[
    public static str attributeControlName(int sequence)
    {
        return strFmt(AttributeNameFormat, sequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReferenceAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(true)]
    protected void initReferenceAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        FieldId fieldNumber = attributeProvider.referenceFieldNum(this.attribute);
        FormReferenceGroupControl dataFieldControl = groupControl.addDataField(dataSource.id(), fieldNumber);
        dataFieldControl.name(PriceAttributeUIHelper::attributeControlName(this.sequence));
        dataFieldControl.label(this.attribute.Name);
        dataFieldControl.registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(PriceAttributeUIHelper, lookupReference), this);
        dataFieldControl.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified), methodStr(PriceAttributeUIHelper, referenceModified), this);
        dataFieldControl.registerOverrideMethod(methodStr(FormReferenceGroupControl, jumpRef), methodStr(PriceAttributeUIHelper, jumpRef), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEnumAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(true)]
    protected void initEnumAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        FieldId fieldNumber = attributeProvider.referenceFieldNum(this.attribute);
        FormComboBoxControl dataFieldControl = groupControl.addDataField(dataSource.id(), fieldNumber);
        dataFieldControl.name(PriceAttributeUIHelper::attributeControlName(this.sequence));
        dataFieldControl.label(this.attribute.Name);
        dataFieldControl.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(PriceAttributeUIHelper, enumModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntegerAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(true)]
    protected void initIntegerAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        FieldId fieldNumber = PricingRuleApplicability::getValueFieldId(this.sequence);
        FormStringControl dataFieldControl = groupControl.addDataField(dataSource.id(), fieldNumber);
        dataFieldControl.name(PriceAttributeUIHelper::attributeControlName(this.sequence));
        dataFieldControl.label(this.attribute.Name);
        dataFieldControl.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(PriceAttributeUIHelper, validateInt), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTextAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(true)]
    protected void initTextAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        FieldId fieldNumber = PricingRuleApplicability::getValueFieldId(this.sequence);
        FormStringControl dataFieldControl = groupControl.addDataField(dataSource.id(), fieldNumber);
        dataFieldControl.name(PriceAttributeUIHelper::attributeControlName(this.sequence));
        dataFieldControl.label(this.attribute.Name);
        dataFieldControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(PriceAttributeUIHelper, lookupValues), this);
        dataFieldControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(PriceAttributeUIHelper, jumpRef), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExtensionAttributeControl</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(true)]
    protected void initExtensionAttributeControl(FormGroupControl groupControl, FormDataSource dataSource)
    {
        // A hook for extension to render its control.
        // The control extension renderred needs to be named correctly.
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    internal Common lookupReference(FormControl _control)
    {
        return attributeProvider.lookupReference(attribute, _control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValues</Name>
				<Source><![CDATA[
    internal void lookupValues(FormControl _control)
    {
        attributeProvider.lookupAllowedValues(attribute, _control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    internal void jumpRef(FormControl _control)
    {
        attributeProvider.jumpRef(attribute, _control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceModified</Name>
				<Source><![CDATA[
    internal boolean referenceModified(FormReferenceGroupControl _control)
    {
        boolean ret = _control.modified();
        
        FormDataSource dataSource = _control.dataSourceObject();
        FieldId tableFieldNumber = PricingRuleApplicability::getValueFieldId(this.sequence);
        Common tableBuffer = dataSource.cursor();
        if (_control.value())
        {
            tableBuffer.(tableFieldNumber) = any2Str(_control.value());
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumModified</Name>
				<Source><![CDATA[
    internal boolean enumModified(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        
        FormDataSource dataSource = _control.dataSourceObject();
        FieldId tableFieldNumber = PricingRuleApplicability::getValueFieldId(this.sequence);
        Common tableBuffer = dataSource.cursor();
        if (_control.selection())
        {
            tableBuffer.(tableFieldNumber) = any2Str(_control.selection());
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBoolean</Name>
				<Source><![CDATA[
    internal void lookupBoolean(FormStringControl _control)
    {
        Query query = new Query();

        PriceEnumLookupPickList tmpPicklist;
        QueryBuildDataSource qbds = query.addDataSource(tableNum(PriceEnumLookupPickList));

        DictEnum dictEnum = new DictEnum(enumNum(NoYes));
        for (int idx = 0; idx < dictEnum.values(); idx++)
        {
            tmpPicklist.clear();
            tmpPicklist.Value = dictEnum.index2Name(idx);
            tmpPicklist.insert();
        }
        
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PriceEnumLookupPickList), _control);
        sysTableLookup.addLookupfield(fieldNum(PriceEnumLookupPickList, Value));
        sysTableLookup.parmQuery(query);
        sysTableLookup.parmTmpBuffer(tmpPicklist);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInt</Name>
				<Source><![CDATA[
    internal boolean validateInt(FormStringControl _control)
    {
        boolean ret = true;
        str value = _control.text();

        System.Int32 result;
        if (!System.Int32::TryParse(value, byref result))
        {
            ret = checkFailed(strFmt('@RetailPricing:PricingValueOutOfRange', intMin(), intMax()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>