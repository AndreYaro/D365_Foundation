<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesOrderGiftCardPolicyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSalesOrderGiftCardPolicyHelper</c> manages gift card policies for MCR sales lines
/// </summary>
class MCRSalesOrderGiftCardPolicyHelper
{
    Map giftCardMap;
    Map policyDescriptionMap;
    RetailGiftCardId giftCardId;
    boolean found;
    RetailGiftCardId defaultEmailCardNum;
    boolean defaultEmailCardNumFound;
    ChannelTimeZone channelTimeZone;
    CurrencyCode currencyCode;
    RetailGiftCardTable retailGiftCardTable;
    RetailGiftCardPolicies policyDescription;
    RetailGiftCardFaceValue faceValue;
    DataAreaId  giftCardCompany;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGiftCardPoliciesSample</Name>
				<Source><![CDATA[
    private void addGiftCardPoliciesSample()
    {
        this.getRetailGiftCardSample();

        policyDescription = retailGiftCardTable.policyDescription();
        faceValue = this.convertToAmountCur(retailGiftCardTable.FaceValue);

        giftCardMap.insert(giftCardId, retailGiftCardTable);
        policyDescriptionMap.insert(giftCardId, [faceValue, policyDescription]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks gift card policy for given combination of gift card nimber and type.
    /// </summary>
    /// <param name="_giftAmount">
    /// Input amount of gift card.
    /// </param>
    /// <param name="_giftCardId">
    /// The number of a gift card.
    /// </param>
    /// <param name="_giftCardType">
    /// The type of gift card.
    /// </param>
    /// <returns>
    /// true if validation is passed; otherwise false.
    /// </returns>
    public boolean checkPolicy(MCRGiftCardIssueAmount_RU _giftAmount, RetailGiftCardId _giftCardId, MCRGiftCardType _giftCardType)
    {
        this.findOrCreateGiftCardPoliciesSample(_giftCardId, _giftCardType);

        return retailGiftCardTable.checkPolicy(RetailGiftCardOperation::Issue, _giftAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToAmountCur</Name>
				<Source><![CDATA[
    private AmountCur convertToAmountCur(AmountMST _amount)
    {
        return CurrencyExchangeHelper::curAmount(_amount, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateGiftCardPoliciesSample</Name>
				<Source><![CDATA[
    private void findOrCreateGiftCardPoliciesSample(RetailGiftCardId _giftCardId, MCRGiftCardType _giftCardType)
    {
        RetailGiftCardId locGiftCardId = this.giftCardId(_giftCardId, _giftCardType);
        if (locGiftCardId != giftCardId || !found)
        {
            giftCardId = locGiftCardId;

            if (!giftCardMap.exists(giftCardId))
            {
                if (giftCardCompany)
                {
                    changeCompany(giftCardCompany)
                    {
                        this.addGiftCardPoliciesSample();
                    }
                }
                else
                {
                    this.addGiftCardPoliciesSample();
                }
            }
            else
            {
                retailGiftCardTable = giftCardMap.lookup(giftCardId);
                [faceValue, policyDescription]   = policyDescriptionMap.lookup(giftCardId);
            }

            found = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFaceValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from cache or creates face value of gift card in the current currencyfor given gift card number and type.
    /// </summary>
    /// <param name="_giftCardId">
    /// The number of a gift card.
    /// </param>
    /// <param name="_giftCardType">
    /// The type of gift card.
    /// </param>
    /// <returns>
    /// sThe face value of a gift card in the current currency.
    /// </returns>
    public RetailGiftCardFaceValue getFaceValue(RetailGiftCardId _giftCardId, MCRGiftCardType _giftCardType)
    {
        this.findOrCreateGiftCardPoliciesSample(_giftCardId, _giftCardType);
        return faceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPoliciesDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from cache or creates description of policies for given gift card number and type.
    /// </summary>
    /// <param name="_giftCardId">
    /// The number of a gift card.
    /// </param>
    /// <param name="_giftCardType">
    /// The type of gift card.
    /// </param>
    /// <returns>
    /// The description of policies.
    /// </returns>
    public RetailGiftCardPolicies getPoliciesDescription(RetailGiftCardId _giftCardId, MCRGiftCardType _giftCardType)
    {
        this.findOrCreateGiftCardPoliciesSample(_giftCardId, _giftCardType);
        return policyDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailGiftCardSample</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a gift card record according its number from the current line.
    /// </summary>
    /// <returns>
    /// Cursor containg a gift card according its number from the current line
    /// </returns>
    /// <remarks>
    /// Gift card is not issued the method creates unsaved record and intializes it by pollicy Gift card policy set according the number of gift card.
    /// If gift card number of email Gift card is empty it uses minimal current number.
    /// </remarks>
    private RetailGiftCardTable getRetailGiftCardSample()
    {
        if (giftCardId)
        {
            retailGiftCardTable = RetailGiftCardTable::find(giftCardId);
        }

        if (!retailGiftCardTable)
        {
            retailGiftCardTable.clear();
            retailGiftCardTable.initGiftCardPolicies(giftCardId, DateTimeUtil::getSystemDateTime(), channelTimeZone);
            retailGiftCardTable.currencyCode = currencyCode;
        }

        return retailGiftCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giftCardId</Name>
				<Source><![CDATA[
    private RetailGiftCardId giftCardId(RetailGiftCardId _giftCardId, MCRGiftCardType _giftCardType)
    {
        RetailGiftCardId retailGiftCardId;
        RetailGiftCardId template;

        RetailGiftCardId getTemplate()
        {
            return MCRGiftCardSerialTemplate::findActive(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).SerialTemplate;
        }

        if (_giftCardId || _giftCardType == MCRGiftCardType::Physical)
        {
            retailGiftCardId = _giftCardId;
        }
        else
        {
            if (!defaultEmailCardNumFound)
            {
                if (giftCardCompany)
                {
                    changeCompany(giftCardCompany)
                    {
                        template = getTemplate();
                    }
                }
                else
                {
                    template = getTemplate();
                }

                defaultEmailCardNum = strReplace(template, '#',  '0');

                defaultEmailCardNumFound = true;
            }
            retailGiftCardId = defaultEmailCardNum;
        }
        return retailGiftCardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        giftCardMap = new Map(Types::String, Types::Record);
        policyDescriptionMap = new Map(Types::String, Types::Container);
        giftCardCompany = RetailParameters::find().GiftCardCompany;
        if (giftCardCompany == curExt())
        {
            giftCardCompany = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannelTimeZone</Name>
				<Source><![CDATA[
    public ChannelTimeZone parmChannelTimeZone(ChannelTimeZone _channelTimeZone = channelTimeZone)
    {
        channelTimeZone = _channelTimeZone;

        return channelTimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the MCRSalesLinesGiftCardPolicyHelper class.
    /// </summary>
    /// <param name="_currencyCode">
    /// The current currency of the caller.
    /// </param>
    /// <returns>
    /// A new instance of this class.
    /// </returns>
    public static MCRSalesOrderGiftCardPolicyHelper construct(CurrencyCode _currencyCode)
    {
        MCRSalesOrderGiftCardPolicyHelper mcrSalesOrderGiftCardPolicyHelper = new MCRSalesOrderGiftCardPolicyHelper();
        mcrSalesOrderGiftCardPolicyHelper.parmChannelTimeZone(DateTimeUtil::getCompanyTimeZone());
        mcrSalesOrderGiftCardPolicyHelper.parmCurrencyCode(_currencyCode);
        return mcrSalesOrderGiftCardPolicyHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
