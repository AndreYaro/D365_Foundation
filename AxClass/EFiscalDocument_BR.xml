<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFiscalDocument_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class encapsulates the data of an electronic fiscal document.
/// </summary>
public class EFiscalDocument_BR
{
    #ExportFiscalDocument_BR

    #define.ptBrLanguageId('pt-br')
    #define.CnpjLength(14)

    List                            lines;
    ListEnumerator                  linesEnumerator;
    EFDocument_BR                   eFDocument;
    EFDocumentXML_BR                EFDocumentXML;
    FiscalDocument_BR               fiscalDocument;
    Counter                         numOfLines;
    LogisticsPostalAddress          deliveryPostalAddress,
                                    fiscalEstablishmentPostalAddress,
                                    thirdPartyPostalAddress,
                                    salesCarrierPostalAddress;
    SalesCarrier                    salesCarrier;
    FiscalEstablishment_BR          fiscalEstablishment;
    IntrastatPort                   intrastatPort;
    ICMSDifRecipientTaxAmount       icmsDifRecipientTotalTaxAmount;
    ICMSDifIssuerTaxAmount          icmsDifIssuerTotalTaxAmount;
    boolean                         hasIcmsDif;
    TaxAmount                       taxPovertyFundAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the access key for this NF-e.
    /// </summary>
    /// <returns>The access key.</returns>
    public final EFDocAccessKey_BR accessKey()
    {
        return fiscalDocument.AccessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the DirPartyType that represents the type of the vendor in carrier.
    /// </summary>
    /// <returns>
    ///     The DirPartyType representing the type of the vendor in carrier.
    /// </returns>
    public DirPartyType carrierPartyType()
    {
        return VendTable::find(salesCarrier.VendAccount_BR).partyType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the carrier address line (with street name, number, and district name).
    /// </summary>
    /// <returns>
    /// Carrier address, with 60 characters maximum.
    /// </returns>
    public LogisticsAddressing carrierAddress()
    {
        #define.MaxAddressSize(60)

        str address;

        void insertAddressComponent(str _component, str _separator = '')
        {
            str tempAddress;

            if (_component)
            {
                tempAddress = address + _separator + _component;

                if (strLen(tempAddress) <= #MaxAddressSize)
                {
                    address = tempAddress;
                }
            }
        }

        insertAddressComponent(salesCarrierPostalAddress.Street);
        insertAddressComponent(salesCarrierPostalAddress.StreetNumber, ' ');
        insertAddressComponent(salesCarrierPostalAddress.BuildingCompliment, ' - ');
        insertAddressComponent(salesCarrierPostalAddress.DistrictName, ' - ');

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the city of the sales carrier.
    /// </summary>
    /// <returns>City name of the sales carrier.</returns>
    public LogisticsAddressCityName carrierCity()
    {
        return salesCarrierPostalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CNPJ of the sales carrier.
    /// </summary>
    /// <returns>The CNPJ of the sales carrier.</returns>
    public CNPJCPFNum_BR carrierCNPJ()
    {
        return salesCarrier.CNPJCPFNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierIENum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IE number for the sales carrier.
    /// </summary>
    /// <returns>The IE number for the sales carrier.</returns>
    public IENum_BR carrierIENum()
    {
        IENum_BR IENum = salesCarrier.IENum_BR;

        if (IENum != 'ISENTO')
        {
            IENum = strkeep(IENum, '0123456789');
        }
        return IENum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the sales carrier.
    /// </summary>
    /// <returns>The name of the sales carrier.</returns>
    public WMSCarrierName carrierName()
    {
        return salesCarrier.CarrierName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the state of the sales carrier.
    /// </summary>
    /// <returns>Sales carrier state ID.</returns>
    public LogisticsAddressStateId carrierStateId()
    {
        return salesCarrierPostalAddress.State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contingencyDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date and time when the contingency mode started in case this NF-e has been issued in contingency mode.
    /// </summary>
    /// <returns>
    /// String with contingency date and time in format "YYYY-MM-DDTHH:MM:SS".
    /// </returns>
    /// <remarks>
    /// For non-contingency documents, returns empty string.
    /// </remarks>
    public DateTimeWithTimeZone_BR contingencyDateTime()
    {
        TimezoneHelper_BR       timezoneHelper;
        EFDocContingencyMode_BR contigencyMode;

        if (efdocument.ContingencyMode != EFDocContingMode_BR::Off)
        {
            if (efdocument.ContingencyModeRefRecID)
            {
                contigencyMode = EFDocContingencyMode_BR::find(efdocument.ContingencyModeRefRecID);
            }
            else
            {
                contigencyMode = EFDocContingencyMode_BR::getLastContingencyMode(fiscalEstablishment.FiscalEstablishmentId);
            }

            timezoneHelper = new TimezoneHelper_BR();
            return timezoneHelper.formatDateTimeWithTimeZone(contigencyMode.createdDateTime,
                                                             contigencyMode.CreatedTimeOffset);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>contingencyMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the contigency mode for this NF-e.
    /// </summary>
    /// <returns>Contigency mode for this NF-e. For non-contigency documents,
    /// returns an empty string.</returns>
    EFDocContingMode_BR contingencyMode()
    {
        return eFDocument.ContingencyMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contingencyReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves contigency reason for this NF-e.
    /// </summary>
    /// <returns>Contigency reason for this NF-e. For non-contigency documents,
    /// returns an empty string.</returns>
    EFDocContingencyReason_BR contingencyReason()
    {
        if (eFDocument.ContingencyMode != EFDocContingMode_BR::Off)
        {
            return eFDocument.ContingencyReason;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current item of the map line collection
    /// </summary>
    /// <returns>
    /// An instance of <c>EFiscalDocumentLine_BR</c>
    /// </returns>
    /// <remarks>
    /// Use this method to iterate through the map lines.
    /// You should call method MoveNext before currentLine, to make there is a valid current item
    /// Example:
    /// while (map.NextLine())
    /// {
    ///     eFiscalDocumentLine = map.currentLine();
    ///     //Do your stuff
    /// }
    /// </remarks>
    public final EFiscalDocumentLine_BR currentLine()
    {
        return linesEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressBuildingCompliment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the building compliment for the delivery address.
    /// </summary>
    /// <returns>Building compliment for the delivery address.</returns>
    public LogisticsAddressBuildingCompliment deliveryAddressBuildingCompliment()
    {
        return deliveryPostalAddress.BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the city name of the delivery address.
    /// </summary>
    /// <returns>City name of the delivery address.</returns>
    public LogisticsAddressCityName deliveryAddressCityName()
    {
        if (this.isForeignAddress(deliveryPostalAddress))
        {
            return #ForeignerCity;
        }
        else
        {
            return deliveryPostalAddress.City;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressDistrict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the district name for the delivery address.
    /// </summary>
    /// <returns>District name for the delivery address.</returns>
    public LogisticsAddressDistrictName deliveryAddressDistrict()
    {
        return deliveryPostalAddress.DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the state ID for the delivery address.
    /// </summary>
    /// <returns>State ID for the delivery address.</returns>
    public LogisticsAddressStateId deliveryAddressState()
    {
        if (this.isForeignAddress(deliveryPostalAddress))
        {
            return #ForeignerState;
        }
        else
        {
            return deliveryPostalAddress.State;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the street name of the delivery address.
    /// </summary>
    /// <returns>Street name of the delivery address.</returns>
    public LogisticsAddressStreet deliveryAddressStreet()
    {
        return deliveryPostalAddress.Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the street number of the delivery address.
    /// </summary>
    /// <returns>Street number of the delivery address.</returns>
    public LogisticsAddressStreetNumber deliveryAddressStreetNumber()
    {
        return deliveryPostalAddress.StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCityIBGECode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IBGE code of the city of the delivery address.
    /// </summary>
    /// <returns>IBGE code of the city of the delivery address.</returns>
    CityIBGECode_BR deliveryCityIBGECode()
    {
        if (this.isForeignAddress(deliveryPostalAddress))
        {
            return #ForeignerIBGECode;
        }
        else
        {
            return LogisticsAddressCity::findLogisticsAddressMap(deliveryPostalAddress).IBGECode_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the CNPJ of the company to which the goods will be delivered.
    /// </summary>
    /// <returns>
    ///     CNPJ of the company to which the goods will be delivered; empty string represents a CPF instead of a CPNJ code.
    /// </returns>
    public CNPJCPFNum_BR deliveryCNPJ()
    {
        if (strLen(fiscalDocument.DeliveryCNPJCPF) < #CnpjLength)
        {
            return '';
        }
        else
        {
            return fiscalDocument.DeliveryCNPJCPF;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the BACEN code of the country of the delivery address.
    /// </summary>
    /// <returns>BACEN code of the delivery address.</returns>
    public BacenCode_BR deliveryCountryCode()
    {
        return LogisticsAddressCountryRegion::find(deliveryPostalAddress.CountryRegionId).BACENCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCountryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the country name of the delivery address.
    /// </summary>
    /// <returns>Country name of the delivery address.</returns>
    public LogisticsAddressCountryRegionName deliveryCountryName()
    {
        return LogisticsAddressCountryRegionTranslation::find(deliveryPostalAddress.CountryRegionId, #ptBrLanguageId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCPF</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the CPF of the person to receive the fiscal document.
    /// </summary>
    /// <returns>
    ///     Delivery CPF if it is a person; empty string otherwise.
    /// </returns>
    public CNPJCPFNum_BR deliveryCPF()
    {
        if (strLen(fiscalDocument.DeliveryCNPJCPF) < #CnpjLength)
        {
            return fiscalDocument.DeliveryCNPJCPF;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IE number of the company which will receive the goods.
    /// </summary>
    /// <returns>IE number of the company which will receive the goods.
    /// If the delivery address is in a foreign country, returns 'ISENTO'.</returns>
    public IENum_BR deliveryIEnum()
    {
        IENum_BR iENum;

        if (!this.isForeignAddress(deliveryPostalAddress))
        {
            iENum = fiscalDocument.DeliveryIE;
        }

        return iENum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliverySuframaNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the suframa number of the company which will receive the goods.
    /// </summary>
    /// <returns>Suframa number of the company which will receive the goods.</returns>
    public str deliverySuframaNumber()
    {
        CustTable custTable;

        if (fiscalDocument.FiscalDocumentAccountType != CustVendType_BR::Customer)
        {
            return '';
        }

        select firstOnly SuframaNumber_BR from custTable
            where custTable.AccountNum == fiscalDocument.FiscalDocumentAccountNum;

        return custTable.SuframaNumber_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the delivery address zip code
    /// </summary>
    /// <returns>
    /// Delivery address zip code.
    /// </returns>
    public LogisticsAddressZipCodeId deliveryZipCode()
    {
        return deliveryPostalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>digitalCertificateSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the digital certificate subject that should be used to sign this document.
    /// </summary>
    /// <returns><c>DigitalCertificateSubject</c> that should be used to retrieve the certificate.</returns>
    public DigitalCertificateSubject digitalCertificateSubject()
    {
        return fiscalEstablishment.EFDocDigitalCertificateSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartySalesDigitalPlatformCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves third party sales digital platform CNPJ of this document.
    /// </summary>
    /// <returns>Third party sales digital platform CNPJ of this document.</returns>
    public ThirdPartySalesDigitalPlatformCNPJ_BR thirdPartySalesDigitalPlatformCNPJ()
    {
        return fiscalDocument.ThirdPartySalesDigitalPlatformCNPJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartySalesDigitalPlatformSalesResponsible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves third party sales digital platform sales responsible of this document.
    /// </summary>
    /// <returns>Third party sales digital platform sales responsible of this document.</returns>
    public ThirdPartySalesDigitalPlatformSalesResponsible_BR thirdPartySalesDigitalPlatformSalesResponsible()
    {
        return fiscalDocument.ThirdPartySalesDigitalPlatformSalesResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyVaultCertificateRef</Name>
				<Source><![CDATA[
    public KeyVaultCertificateRef keyVaultCertificateRef()
    {
        return fiscalEstablishment.EFDocKeyVaultCertificateRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the EFDocument record used by this mapping.
    /// </summary>
    /// <returns>EFDocument record used by this mapping.</returns>
    public EFDocument_BR eFDocument()
    {
        return eFDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFDocumentXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the EFDocumentXML_BR record used by this mapping.
    /// </summary>
    /// <returns>EFDocumentXML_BR record used by this mapping.</returns>
    public EFDocumentXML_BR eFDocumentXML()
    {
        return eFDocumentXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportationPortName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the place where the goods will be shipped from in an exportation scenario.
    /// </summary>
    /// <returns>
    /// the name of the place where the goods will be shipped from in an exportation scenario.
    /// </returns>
    public Description exportationPortName()
    {
        return intrastatPort.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportationPortState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the state of the place where the goods will be shipped from in an exportation scenario.
    /// </summary>
    /// <returns>
    /// the state of the place where the goods will be shipped from in an exportation scenario.
    /// </returns>
    public PortState_BR exportationPortState()
    {
        return intrastatPort.PortState_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the FiscalDocument_BR record used by this mapping.
    /// </summary>
    /// <returns>FiscalDocument_BR record used by this mapping.</returns>
    public FiscalDocument_BR fiscalDocument()
    {
        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>FiscalEstablishment_BR</c> record related to this document.
    /// </summary>
    /// <returns><c>FiscalEstablishment_BR</c> record used by this mapping.</returns>
    public FiscalEstablishment_BR fiscalEstablishment()
    {
        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of fiscal references from which the current document refers to.
    /// </summary>
    /// <returns>A List of <c>FiscalReferenceMap_BR</c> objects.</returns>
    List fiscalReferenceList()
    {
        List list = new List(Types::Class);

        FiscalDocumentReferenced_BR fiscalReference;
        FiscalReferenceMap_BR fiscalReferenceMap;

        while select ExternalReferencedFiscalDocument, ReferencedFiscalDocument from fiscalReference
            where fiscalReference.FiscalDocument == fiscalDocument.RecId
        {
            if (fiscalReference.ExternalReferencedFiscalDocument)
            {
                fiscalReferenceMap = FiscalReferenceMap_BR::constructForExtFiscalDocument(fiscalReference.ExternalReferencedFiscalDocument, fiscalDocument.FiscalEstablishment);
            }
            else
            {
                fiscalReferenceMap = FiscalReferenceMap_BR::constructForFiscalDocument(fiscalReference.ReferencedFiscalDocument);
            }

            list.addEnd(fiscalReferenceMap);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document texts related to this NF-e that dont have fiscal value.
    /// </summary>
    /// <returns>A concatenated string with all the legal texts with fiscal value,
    /// with a ' ' separator between them.</returns>
    public str getAdditionalInformation()
    {
        return fiscalDocument.getAdditionalInformationAsString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderLegalTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document texts related to this NF-e that have fiscal value.
    /// </summary>
    /// <returns>A concatenated string with all the legal texts with fiscal value,
    /// with a ' ' separator between them.</returns>
    public EFDocInfAdFisco_BR getHeaderLegalTexts()
    {
        EFDocInfAdFisco_BR legalTexts;
        str separator = ' ';

        legalTexts = fiscalDocument.getLegalTextsAsString(DocuRestriction::External, separator);
        legalTexts += strLen(legalTexts) > 0 ? separator : '';
        legalTexts += fiscalDocument.getLegalTextsAsString(DocuRestriction::Internal, separator);

        return strRTrim(legalTexts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalApproximateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of approximate taxes
    /// </summary>
    /// <returns>
    /// Total amount from the sum of the lines
    /// </returns>
    public TaxAmount getTotalApproximateAmount()
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;

        select sum(ApproximateTaxAmount) from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        return fiscalDocumentLine.ApproximateTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLineDiscount</Name>
				<Source><![CDATA[
    protected SalesSumLineDiscAmount getTotalLineDiscount(FiscalDocumentLineItemType_BR _itemType)
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;

        select sum(LineDiscount) from fiscalDocumentLine
            where fiscalDocumentLine.ItemType == _itemType &&
                  fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        return fiscalDocumentLine.LineDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total gross weight for this document.
    /// </summary>
    /// <returns>Gross weight for this document.</returns>
    public GrossWeight grossWeight ()
    {
        return fiscalDocument.getGrossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIcmsDif</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Identify if the fiscal document has tax type ICMS-DIF
    /// </summary>
    /// <returns>
    ///     True if the fiscal document has tax type ICMS-DIF; false otherwise
    /// </returns>
    public boolean hasIcmsDif()
    {
        return hasIcmsDif;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icmsDifIssuerTaxAmount</Name>
				<Source><![CDATA[
    public ICMSDifIssuerTaxAmount icmsDifIssuerTaxAmount()
    {
        return icmsDifIssuerTotalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icmsDifRecipientTaxAmount</Name>
				<Source><![CDATA[
    public ICMSDifRecipientTaxAmount icmsDifRecipientTaxAmount()
    {
        return icmsDifRecipientTotalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initICMSDifTotals</Name>
				<Source><![CDATA[
    private void initICMSDifTotals()
    {
        FiscalDocumentTaxTransOutgoingICMSDif_BR fiscalDocTaxTransICMSDif;

        select sum(ICMSDifIssuerTaxAmount), sum(ICMSDifRecipientTaxAmount) from fiscalDocTaxTransICMSDif
            where fiscalDocTaxTransICMSDif.FiscalDocument == fiscalDocument.RecId;

        if (fiscalDocTaxTransICMSDif)
        {
            icmsDifRecipientTotalTaxAmount = fiscalDocTaxTransICMSDif.ICMSDifRecipientTaxAmount;
            icmsDifIssuerTotalTaxAmount = fiscalDocTaxTransICMSDif.ICMSDifIssuerTaxAmount;
            hasIcmsDif = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks wether the fiscal document has a delivery address.
    /// </summary>
    /// <returns>
    ///     True if the fiscal document has a delivery address; false otherwise.
    /// </returns>
    public boolean hasDeliveryAddress()
    {
        return fiscalDocument.DeliveryLogisticsPostalAddress != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPovertyFundAmount</Name>
				<Source><![CDATA[
    private void initTaxPovertyFundAmount()
    {
        FiscalDocumentLine_BR                   line;
        FiscalDocumentTaxTrans_BR               taxTrans;
        FiscalDocumentTaxTransPovertyFund_BR    taxTransPovertyFund;
        
        if (!this.hasIcmsDif() && (this.taxAmount(TaxType_BR::ICMS) == 0))
        {
            return;
        }

        select sum(TaxPovertyFundAmount) from taxTransPovertyFund
            exists join taxTrans
            where taxTransPovertyFund.FiscalDocumentTaxTrans_BR == taxTrans.RecId
                exists join line
                where taxTrans.FiscalDocumentLine == line.RecId
                    && line.FiscalDocument == fiscalDocument.RecId;

        taxPovertyFundAmount = taxTransPovertyFund.TaxPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importTaxAmountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total amount other for import tax.
    /// </summary>
    /// <returns>Total amount other for import tax.</returns>
    public TaxAmount importTaxAmountOther()
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR fiscalDocumentLine;

        select sum(TaxAmountOther) from taxTrans
            where taxTrans.Type == TaxType_BR::ImportTax
            exists join fiscalDocumentLine
            where taxTrans.FiscalDocumentLine       == fiscalDocumentLine.RecId
               && fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        return taxTrans.TaxAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdSpec</Name>
				<Source><![CDATA[
    private void initTaxWithholdSpec()
    {
        //    TaxWithholdSpec taxWithholdSpec = new TaxWithholdSpec(fiscalDocument.refRecId);
        //    ;
        //    taxWithholdMap = new Map(Types::Enum, Types::Real);
        //
        //    TaxWithholdSpec.setTmpTaxWithhold(
        //        TaxWithhold::calculateTmpTaxWithhold('',
        //                                             SalesPArameters::find().TaxWithholdGroup,
        //                                             fiscalDocument.invoiceDate,
        //                                             fiscalDocument.currencyCode,
        //                                             fiscalDocument.TotalServicesAmount,
        //                                             fiscalDocument.refRecId));
        //
        //    while (TaxWithholdSpec.taxSpec())
        //    {
        //        taxWithholdMap.insert(taxWithholdTable::find(TaxWithholdSpec.taxCode()).TaxWithholdType_BR, taxWithholdSpec.taxAmountMST());
        //    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory direction for this document.
    /// </summary>
    /// <returns>'0' for incoming, '1' for outgoing.</returns>
    public str 1 inventoryDirection()
    {
        return fiscaldocument.Direction == FiscalDocDirection_BR::Incoming ? '0' : '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceSpecie_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specie of this document.
    /// </summary>
    /// <returns>The specie of this document.</returns>
    public FiscalDocumentSpecie_BR invoiceSpecie_BR()
    {
        return fiscalDocument.Specie;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutomaticPrintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if DANFE should be printed automatically for this document.
    /// </summary>
    /// <returns>
    /// true if the document should be printed automatically; false otherwise.
    /// </returns>
    public boolean isAutomaticPrintEnabled()
    {
        return fiscalEstablishment.EFDocAutomaticPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if an address is from outside of Brazil.
    /// </summary>
    /// <param name="_address">
    /// The address to verify.
    /// </param>
    /// <returns>
    /// True if the address is not from Brazil; otherwise, false.
    /// </returns>
    protected boolean isForeignAddress (LogisticsPostalAddress _address)
    {
        #ISOCountryRegionCodes
        if (LogisticsAddressCountryRegion::find(_address.CountryRegionId).ISOcode != #IsoBR)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current operation is an importing operation
    /// </summary>
    /// <returns>
    /// True if this is an importing operation, false otherwise
    /// </returns>
    /// <remarks>
    /// In order to determine if this is an importing operation, the ImportDeclaration and Direction attributes will be used.
    /// Import Declation must have a value and Direction must be Incoming.
    /// </remarks>
    public boolean isImporting()
    {
        return fiscalDocument.isImporting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerAddressComplement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the building complement of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    ///     Building complement of the fiscal establishment's address.
    /// </returns>
    public LogisticsAddressBuildingCompliment issuerAddressComplement()
    {
        return fiscalEstablishmentPostalAddress.BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerAddressNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets street number of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    ///     Fiscal establishment street number.
    /// </returns>
    public LogisticsAddressStreetNumber issuerAddressNumber()
    {
        return fiscalEstablishmentPostalAddress.StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCCMNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CCM number of the document issuer.
    /// </summary>
    /// <returns>CCM number of the document issuer.</returns>
    public CCMNum_BR issuerCCMNum()
    {
        return fiscalDocument.FiscalEstablishmentCCMNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets city name of the fiscal establishments's address.
    /// </summary>
    /// <returns>
    ///     City name of the fiscal establishment's address.
    /// </returns>
    public AddressCity issuerCity()
    {
        return fiscalEstablishmentPostalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCNAE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CNAE number of the document issuer.
    /// </summary>
    /// <returns>CNAE number of the document issuer.</returns>
    public CNAE_BR issuerCNAE()
    {
        return CompanyInfo::find().CNAE_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CNPJ of the document issuer.
    /// </summary>
    /// <returns>CNPJ number of the document issuer.</returns>
    public CNPJCPFNum_BR issuerCNPJ()
    {
        return fiscalDocument.FiscalEstablishmentCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves BACEN code of the fiscal document issuer's address.
    /// </summary>
    /// <returns>
    /// BACEN code of the fiscal document issuer's address.
    /// </returns>
    public BacenCode_BR issuerCountryCode()
    {
        return LogisticsAddressCountryRegion::find(fiscalEstablishmentPostalAddress.CountryRegionId).BacenCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCountryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the country name of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    ///     Country name of the fiscal establishment's address.
    /// </returns>
    public Name issuerCountryName()
    {
        return LogisticsAddressCountryRegionTranslation::find(fiscalEstablishmentPostalAddress.CountryRegionId, #ptBrLanguageId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerCPF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CPF of the document issuer.
    /// </summary>
    /// <returns>CPF number of the document issuer; null if the issuer is a company.</returns>
    public CNPJCPFNum_BR issuerCPF()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerDistrict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the district name of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    /// District name of the fiscal establishment's address.
    /// </returns>
    public DistrictName_BR issuerDistrict()
    {
        return fiscalEstablishmentPostalAddress.DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerIBGECode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the IBGE code of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    ///     IBGE code of the fiscal establishment's address.
    /// </returns>
    public CityIBGECode_BR issuerIBGECode()
    {
        return LogisticsAddressCity::findLogisticsAddressMap(fiscalEstablishmentPostalAddress).IBGECode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerIEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the IE number of the document issuer.
    /// </summary>
    /// <returns>IE number of the document issuer.</returns>
    public IENum_BR issuerIEnum()
    {
        return fiscalDocument.FiscalEstablishmentIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Company name of the fiscal document issuer.
    /// </summary>
    /// <returns>
    /// Issuer's company name.
    /// </returns>
    public Name issuerName()
    {
        return fiscalDocument.FiscalEstablishmentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the phone number of the document issuer.
    /// </summary>
    /// <returns>Phone number of the document issuer.</returns>
    public Phone issuerPhone()
    {
        return fiscalDocument.FiscalEstablishmentPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerSearchName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the search name of the document issuer.
    /// </summary>
    /// <returns>Search name of the document issuer.</returns>
    public Name issuerSearchName()
    {
        return fiscalDocument.FiscalEstablishmentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the state ID of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    /// State ID of the fiscal establishemnt's address.
    /// </returns>
    public LogisticsAddressStateId issuerState()
    {
        return fiscalEstablishmentPostalAddress.State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the street name of the fiscal establishent's address.
    /// </summary>
    /// <returns>
    /// Street name of the fiscal establishment's address.
    /// </returns>
    public LogisticsAddressStreet issuerStreet()
    {
        return fiscalEstablishmentPostalAddress.Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerTributarySubstitutionRegistry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tributary substitution registry of the fiscal document issuer.
    /// </summary>
    /// <returns>
    /// Tributary substitution registry of the fiscal document issuer.
    /// </returns>
    public TributarySubstitutionRegistry_BR issuerTributarySubstitutionRegistry()
    {
        return fiscalDocument.FiscalEstablishmentTribSubstitutionReg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuerZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ZIP code of the fiscal establishment's address.
    /// </summary>
    /// <returns>
    /// ZIP code of the fiscal establishment's address.
    /// </returns>
    public LogisticsAddressZipCodeId issuerZipCode()
    {
        return fiscalEstablishmentPostalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    protected List journalLines()
    {
        FiscalDocumentLine_BR  fiscalDocumentLine;
        List                   journalLines = new List(Types::Class);

        while select fiscalDocumentLine
            where fiscalDocumentLine.fiscalDocument == fiscalDocument.RecId
        {
            journalLines.addEnd(EFiscalDocumentLine_BR::construct(fiscalDocument, fiscalDocumentLine));
            numOfLines++;
        }

        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total net weight of this document.
    /// </summary>
    /// <returns>The total net weight of this document.</returns>
    public ItemNetWeight netWeight()
    {
        return fiscalDocument.getNetWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FiscalDocument_BR _fiscalDocument)
    {
        this.initTaxWithholdSpec();

        fiscalDocument = _fiscalDocument.data();
        fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalDocument.FiscalEstablishment);
        eFDocument = EFDocument_BR::findByRef(_fiscalDocument.RecId);
        EFDocumentXML = EFDocumentXML_BR::findByRef(eFDocument.RecId);

        lines = this.journalLines();

        deliveryPostalAddress               = LogisticsPostalAddress::findRecId(fiscalDocument.DeliveryLogisticsPostalAddress);
        thirdPartyPostalAddress             = LogisticsPostalAddress::findRecId(fiscalDocument.ThirdPartyPostalAddress);
        fiscalEstablishmentPostalAddress    = LogisticsPostalAddress::findRecId(fiscalDocument.FiscalEstablishmentPostalAddress);

        select firstonly salesCarrier
            where salesCarrier.recId == fiscalDocument.SalesCarrier;

        salesCarrierPostalAddress = LogisticsPostalAddress::findByLocation(SalesCarrier.Location);

        this.initIntrastatPort();

        this.initICMSDifTotals();

        this.initTaxPovertyFundAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move the line collection to the next line.
    /// </summary>
    /// <returns>
    /// True if the line collection still have elements
    /// </returns>
    /// <remarks>
    /// Use this method to iterate through the map lines, togheter with current method.
    /// Example:
    /// while (map.NextLine())
    /// {
    ///     fiscalDocTransMap = map.currentLine();
    ///     //Do your stuff
    /// }
    /// </remarks>
    public boolean nextLine()
    {
        if (linesEnumerator == null)
        {
            this.resetLines();
        }

        return linesEnumerator.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numericCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the numeric code of this document.
    /// </summary>
    /// <returns>The numeric code of this document.</returns>
    public int numericCode()
    {
        return fiscalDocument.NumericCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of lines of this document.
    /// </summary>
    /// <returns>The number of lines of this document.</returns>
    public Counter numOfLines()
    {
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment amount
    /// </summary>
    /// <returns>
    /// A value that indicates payment amount
    /// </returns>
    public AmountCur paymentAmount()
    {
        return fiscalDocument.PaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enum that indicates the method of payment
    /// </summary>
    /// <returns>
    /// A value that indicates the method of payment
    /// </returns>
    public EFDocPaymentMethod_BR paymentMethod()
    {
        return fiscalDocument.PaymentMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSchedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list with all the installments of this document.
    /// </summary>
    /// <returns>A list of FiscalDocumentInstallment_BR registries for this document.</returns>
    public List paymSchedList()
    {
        FiscalDocumentCustVendTrans_BR fiscalDocumentCustVendTrans;
        FiscalDocumentInstallment_BR   fiscalDocumentInstallment;
        List                           listOfInstallments  = new List(Types::Record);

        while select fiscalDocumentInstallment
            exists join fiscalDocumentCustVendTrans
            where fiscalDocumentCustVendTrans.FiscalDocument == fiscalDocument.recId
               && fiscalDocumentInstallment.FiscalDocumentCustVendTrans == fiscalDocumentCustVendTrans.RecId
        {
            listOfInstallments.addEnd(fiscalDocumentInstallment);
        }
        return listOfInstallments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the payment terms for this document.
    /// </summary>
    /// <returns>A 1-character string with '0' for cash, '1' for installment, or '2' for other.</returns>
    public str paymTerms()
    {
        str paymTerms;

        switch (fiscalDocument.paymentTerms())
        {
            case EFDocPaymTerms_BR::Cash :
                paymTerms = '0';
                break;

            case EFDocPaymTerms_BR::Installment :
                paymTerms = '1';
                break;

            case EFDocPaymTerms_BR::Other:
                paymTerms = '2';
                break;
        }

        return paymTerms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>protocolNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the protocol number for this document.
    /// </summary>
    /// <returns>Protocol number of this document.</returns>
    EFDocProtocolNumber_BR protocolNumber()
    {
        return eFdocument.ProtocolNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchImportDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the import declaration for this document.
    /// </summary>
    /// <returns>Import declaration for this document.</returns>
    public PurchImportDeclaration_BR purchImportDeclaration()
    {
        return PurchImportDeclaration_BR::find(fiscalDocument.ImportDeclaration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountQuery</Name>
				<Source><![CDATA[
    private Query taxAmountQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SelectionField::Sum);
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(query.dataSourceTable(tableNum(FiscalDocumentLine_BR)), fieldNum(FiscalDocumentLine_BR, FiscalDocument), queryValue(fiscalDocument.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountQuery</Name>
				<Source><![CDATA[
	private Query taxBaseAmountQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(query.dataSourceTable(tableNum(FiscalDocumentLine_BR)), fieldNum(FiscalDocumentLine_BR, FiscalDocument), queryValue(fiscalDocument.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the receipt number of this document.
    /// </summary>
    /// <returns>Receipt number of this document.</returns>
    EFDocProtocolNumber_BR receiptNumber()
    {
        return eFdocument.ReceiptNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencedProcessList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the processes referenced by this document.
    /// </summary>
    /// <returns>List of FiscalDocumentReferencedProcess_BR records.</returns>
    public List referencedProcessList()
    {
        List list = new List(Types::Class);
        FiscalDocumentTextListParmData_BR fiscalDocumentTextList;

        fiscalDocumentTextList = fiscalDocument.getLegalTexts(DocuRestriction::External);

        while (fiscalDocumentTextList.moveNext())
        {
            list.appendList(fiscalDocumentTextList.getCurrent().parmFiscalRefProcessList());
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartySalesDigitalPlatform</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Third patty sales digital platform indicator of this document.
    /// </summary>
    /// <returns>Third party sales digital platform indicator of this document.</returns>
    public NoYes thirdPartySalesDigitalPlatform()
    {
        return fiscalDocument.ThirdPartySalesDigitalPlatform;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the map lines enumerator back the first item.
    /// </summary>
    /// <remarks>
    /// You should call it if you need to iterate the map lines collection more than once.
    /// </remarks>
    public void resetLines()
    {
        linesEnumerator = lines.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableTaxAmountForServices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the amounts of a given tax that has been classified as taxable.
    /// In order to calculate this sum, all the taxable tax trans from service lines for
    /// that tax type will be used.
    /// </summary>
    /// <param name="_taxType">
    /// The sum of the amounts must be calculated for this tax type.
    /// </param>
    /// <returns>
    /// Total tax services amount for the given tax type.
    /// </returns>
    public TaxAmount taxableTaxAmountForServices(TaxType_BR _taxType)
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR     fiscalDocumentLine;
        TaxationCodeTable_BR      taxationCodeTable;

        select sum(TaxAmount), sum(TaxAmountOther) from taxTrans
            where taxTrans.Type == _taxType
            exists join taxationCodeTable
                where taxationCodeTable.TaxationCode == taxTrans.TaxationCode
                   && taxationCodeTable.FiscalValue == TaxFiscalValue_BR::WithCreditDebit
            exists join fiscalDocumentLine
            where fiscalDocumentLine.ItemType == FiscalDocumentLineItemType_BR::Service
               && taxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
               && fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        return taxTrans.TaxAmount ? taxTrans.TaxAmount : taxTrans.TaxAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amount for the givven tax type and returns it if it is not zero. If it is zero returns tax amount other.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type the amount will refer to.
    /// </param>
    /// <param name="_taxSubstitution">
    /// Consider tax subsitution.
    /// </param>
    /// <returns>Tax amount; if tax amount is zero, then returns tax amount other.</returns>
    public TaxBase taxAmount(TaxType_BR _taxType, boolean _taxSubstitution = false)
    {
        return this.taxAmountExcludedTaxCodes(_taxType, _taxSubstitution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByItemType</Name>
				<Source><![CDATA[
    private TaxAmount taxAmountByItemType(TaxType_BR _taxType, FiscalDocumentLineItemType_BR _itemType)
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR fiscalDocumentLine;

        select sum(TaxAmount), sum(TaxAmountOther) from taxTrans
            where taxTrans.Type == _taxType
            exists join fiscalDocumentLine
            where fiscalDocumentLine.ItemType == _itemType
               && taxTrans.FiscalDocumentLine       == fiscalDocumentLine.RecId
               && fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        if (this.isImporting())
        {
            return taxTrans.TaxAmount + taxTrans.TaxAmountOther;
        }

        return (taxTrans.TaxAmount) ? taxTrans.TaxAmount : taxTrans.TaxAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountForProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tax amount for products.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type for which the amount will be retrieved.
    /// </param>
    /// <returns>
    /// Product tax amount for the given tax type.
    /// </returns>
    public TaxAmount taxAmountForProducts(TaxType_BR _taxType)
    {
        return this.taxAmountByItemType(_taxType, FiscalDocumentLineItemType_BR::Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountForServices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tax amount for services items.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type for each the amount will be from.
    /// </param>
    /// <returns>
    /// Total tax services amount for the given tax.
    /// </returns>
    public TaxAmount taxAmountForServices(TaxType_BR _taxType)
    {
        return this.taxAmountByItemType(_taxType, FiscalDocumentLineItemType_BR::Service);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax base amount for the given tax type and returns it if it is not zero. If it is zero returns tax base amount other.
    /// </summary>
    /// <param name="_taxType">Tax type for which to retrieve the total base amount.</param>
    /// <param name="_taxSubsitution">Indicater whether to retrieve the tax substitution amount.</param>
    /// <returns>Tax base amount; if tax amount is zero, then returns tax base amount other.</returns>
    public TaxBase taxBaseAmount(TaxType_BR _taxType, boolean _taxSubsitution = false)
    {
        return this.taxBaseAmountExcludedTaxCodes(_taxType, _taxSubsitution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountExcludedTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amount for the given tax type and returns it if it is not zero. If it is zero returns tax amount other.
    /// </summary>
    /// <param name="_taxType">Tax type for which to retrieve the total amount.</param>
    /// <param name="_taxSubstitution">Indicator whether to retrieve the tax substitution amount.</param>
    /// <param name="_taxCodes">Container with filter by taxcodes; by default it is null.</param>
    /// <returns>Tax amount; if tax amount is zero, then returns tax amount other.</returns>
    internal TaxBase taxAmountExcludedTaxCodes(TaxType_BR _taxType, boolean _taxSubstitution = false, container _taxCodes = conNull())
    {
        return this.getTaxAmountOrBaseAmountExcludingTaxCodes(false, _taxType, _taxSubstitution, _taxCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountExcludedTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax base amount for the given tax type and returns it if it is not zero. If it is zero returns tax base amount other.
    /// </summary>
    /// <param name="_taxType">Tax type for which to retrieve the total base amount.</param>
    /// <param name="_taxSubsitution">Indicator whether to retrieve the tax substitution amount.</param>
    /// <param name="_taxCodes">Container with filter by taxcodes; by default it is null.</param>
    /// <returns>Tax base amount; if tax base amount is zero, then returns tax base amount other.</returns>
    public TaxBase taxBaseAmountExcludedTaxCodes(TaxType_BR _taxType, boolean _taxSubsitution = false, container _taxCodes = conNull())
    {
        return this.getTaxAmountOrBaseAmountExcludingTaxCodes(true, _taxType, _taxSubsitution, _taxCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountOrBaseAmountExcludingTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax base amount for the given tax type and returns it if it is not zero. If it is zero returns tax base amount other.
    /// </summary>
    /// <param name="_isBaseAmount">Indicator whether to retrieve the tax base amount otherwise tax amount.</param>
    /// <param name="_taxType">Tax type for which to retrieve the total base amount.</param>
    /// <param name="_taxSubsitution">Indicator whether to retrieve the tax substitution amount.</param>
    /// <param name="_taxCodes">Container with filter by taxcodes; by default it is null.</param>
    /// <returns>Tax base amount; if tax base amount is zero, then returns tax base amount other.</returns>
    internal TaxBase getTaxAmountOrBaseAmountExcludingTaxCodes(
        boolean _isBaseAmount,
        TaxType_BR _taxType, 
        boolean _taxSubsitution = false, 
        container _taxCodes = conNull())
    {
        Query query = _isBaseAmount ? this.taxBaseAmountQuery() : this.taxAmountQuery();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));

        str typeRange = _taxSubsitution ? queryValue(TaxType_BR::ICMSST) : queryValue(_taxType);
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentTaxTrans_BR, Type), typeRange);

        if (_taxCodes != conNull())
        {
            qbds = qbds.addDataSource(tableNum(TaxationCodeTable_BR));
            qbds.relations(false);
            qbds.joinMode(JoinMode::NoExistsJoin);
            qbds.addLink(fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), fieldNum(TaxationCodeTable_BR, TaxationCode));
            qbds.addLink(fieldNum(FiscalDocumentTaxTrans_BR, Type), fieldNum(TaxationCodeTable_BR, TaxType));

            for (int i = 1; i <= conLen(_taxCodes); i++)
            {
                qbds.addRange(fieldNum(TaxationCodeTable_BR, TaxationCode)).value(queryValue(conPeek(_taxCodes, i)));
            }
        }

        QueryRun queryRun = new QueryRun(query);
        AmountMST taxBaseAmount, taxBaseAmountOther, taxAmount, taxAmountOther, result;

        if (queryRun.next())
        {
            FiscalDocumentTaxTrans_BR taxTrans = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            taxBaseAmount = taxTrans.TaxBaseAmount;
            taxBaseAmountOther = taxTrans.TaxBaseAmountOther;
            taxAmount = taxTrans.TaxAmount;
            taxAmountOther = taxTrans.TaxAmountOther;
        }

        if (!_taxSubsitution)
        {
            result = _isBaseAmount ? (taxBaseAmount + taxBaseAmountOther) : (taxAmount + taxAmountOther);
        }
        else
        {
            result = _isBaseAmount ? taxBaseAmount : taxAmount;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPovertyFundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax poverty fund amount for the document.
    /// </summary>
    /// <returns>
    /// The tax poverty fund amount.
    /// </returns>
    public TaxAmount taxPovertyFundAmount()
    {
        return taxPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tax withhold amount for a given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// Type the amount will refer to.
    /// </param>
    /// <returns>
    /// Tax withhold amount for the given tax type.
    /// </returns>
    public TaxAmount taxWithholdAmount(TaxWithholdType_BR _taxType)
    {
        //    if (taxWithholdMap.exists(_taxType))
        //    {
        //        return taxWithholdMap.lookup(_taxType);
        //    }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyAddressComplement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Return the delivery address complement of the original transaction
    /// </summary>
    /// <returns>
    ///     Source transaction delivery address complement.
    /// </returns>
    public LogisticsAddressBuildingCompliment thirdPartyAddressComplement()
    {
        return thirdPartyPostalAddress.BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyAddressDistrict</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the district of the fiscal document third party address.
    /// </summary>
    /// <returns>
    ///     Third Party address district.
    /// </returns>
    public LogisticsAddressDistrictName thirdPartyAddressDistrict()
    {
        if (this.isInternationalOperation() && !thirdPartyPostalAddress.DistrictName)
        {
            return #ForeignerDistrict;
        }

        return thirdPartyPostalAddress.DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyAddressNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the street number of the fiscal document third party address.
    /// </summary>
    /// <returns>
    ///     Third Party address street number.
    /// </returns>
    public LogisticsAddressStreetNumber thirdPartyAddressNumber()
    {
        return thirdPartyPostalAddress.StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the city name of the recipient's address.
    /// </summary>
    /// <returns>
    ///     City name of the recipient's address. If the city is in a foreign country, 'Exterior' is returned.
    /// </returns>
    public LogisticsAddressCityName thirdPartyCity()
    {
        if (this.isForeignAddress(thirdPartyPostalAddress))
        {
            return #ForeignerCity;
        }
        else
        {
            return thirdPartyPostalAddress.City;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCityIBGECode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the IBGE code of the city of the third party's address.
    /// </summary>
    /// <returns>
    ///     IBGE code of the city of the third party's address.
    /// </returns>
    public CityIBGECode_BR thirdPartyCityIBGECode()
    {
        if (this.isForeignAddress(thirdPartyPostalAddress))
        {
            return #ForeignerIBGECode;
        }
        else
        {
            return LogisticsAddressCity::findLogisticsAddressMap(thirdPartyPostalAddress).IBGECode_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the CNPJ of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     CNPJ of the third party company; empty string if third party is a person.
    /// </returns>
    public CNPJCPFNum_BR thirdPartyCNPJ()
    {
        if (fiscalDocument.thirdPartyType() == DirPartyType::Person)
        {
            return '';
        }
        else
        {
            return fiscalDocument.ThirdPartyCNPJCPF;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the BACEN code of the third party's country.
    /// </summary>
    /// <returns>
    ///     BACEN code of the third party's country.
    /// </returns>
    public str thirdPartyCountryCode()
    {
        return LogisticsAddressCountryRegion::find(thirdPartyPostalAddress.CountryRegionId).BacenCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCountryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the country name of the third party's address.
    /// </summary>
    /// <returns>
    ///     Country name of the third party's address.
    /// </returns>
    public LogisticsAddressCountryRegionName thirdPartyCountryName()
    {
        return LogisticsAddressCountryRegionTranslation::find(thirdPartyPostalAddress.CountryRegionId, #ptBrLanguageId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCPF</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the CPF of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     CPF of the fiscal document third party; empty string if third party is not a person.
    /// </returns>
    public CNPJCPFNum_BR thirdPartyCPF()
    {
        if (fiscalDocument.thirdPartyType() != DirPartyType::Person)
        {
            return '';
        }
        else
        {
            return fiscalDocument.ThirdPartyCNPJCPF;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyEmail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the email of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     Email of the third party.
    /// </returns>
    public Email thirdPartyEmail()
    {
        return fiscalDocument.thirdPartyEmail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyIEnum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the IE number of the document third party.
    /// </summary>
    /// <returns>
    ///     IE number of the document third party.
    /// </returns>
    public IENum_BR thirdPartyIEnum()
    {
        return fiscalDocument.ThirdPartyIE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the name of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     The name of the fsical document third party.
    /// </returns>
    public Name thirdPartyName()
    {
        return fiscalDocument.ThirdPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyPhone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the phone number of the third party.
    /// </summary>
    /// <returns>
    ///     Third party phone number.
    /// </returns>
    public Phone thirdPartyPhone()
    {
        return fiscalDocument.ThirdPartyPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the state ID of the third party's address.
    /// </summary>
    /// <returns>
    ///     State ID of the third party's address. If the state is in a foreign country, 'EX' is returned.
    /// </returns>
    public LogisticsAddressStateId thirdPartyState()
    {
        if (this.isForeignAddress(thirdPartyPostalAddress))
        {
            return #ForeignerState;
        }
        else
        {
            return thirdPartyPostalAddress.State;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyStreet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the street number of the third party address.
    /// </summary>
    /// <returns>
    ///     Third party address street number.
    /// </returns>
    public LogisticsAddressStreet thirdPartyStreet()
    {
        return thirdPartyPostalAddress.Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the delivery address zip code of the original transaction
    /// </summary>
    /// <returns>
    /// Source transaction delivery address zip code.
    /// </returns>
    public LogisticsAddressZipCodeId thirdPartyZipCode()
    {
        return thirdPartyPostalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalGrossGoodsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total gross goods amount for this document.
    /// </summary>
    /// <returns>Total gross goods amount for this document.</returns>
    public AmountCur totalGrossGoodsAmount()
    {
        return abs(fiscalDocument.totalGoodsAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalGrossServicesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total gross services amount for this document.
    /// </summary>
    /// <returns>Total gross goods services for this document.</returns>
    public AmountMST totalGrossServicesAmount()
    {
        return abs(fiscalDocument.TotalServicesAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalProductDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total product discount amount for this document.
    /// </summary>
    /// <returns>Total product discount  for this document.</returns>
    public SalesSumLineDiscAmount totalProductDiscount()
    {
        return this.getTotalLineDiscount(FiscalDocumentLineItemType_BR::Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalServiceDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total discount for service items.
    /// </summary>
    /// <returns>
    /// The total discount for service items.
    /// </returns>
    public SalesSumLineDiscAmount totalServiceDiscount()
    {
        return this.getTotalLineDiscount(FiscalDocumentLineItemType_BR::Service);
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumeQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the volume quantity for this document.
    /// </summary>
    /// <returns>Volume quantity for this document.</returns>
    public VolumeQty_BR volumeQty()
    {
        return fiscalDocument.getVolumeQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>volumeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the volume type of this document.
    /// </summary>
    /// <returns>Volume type of this document.</returns>
    /// <remarks>
    /// If there are different volume types in the shipments, then,
    /// a multiple string will be returned.
    /// </remarks>
    public VolumeType_BR volumeType()
    {
        FiscalDocumentShipmentStat_BR shipment;

        if (fiscalDocument.hasManyVolumeTypesBeingShipped())
        {
            return "@SYS21762";
        }

        select firstOnly VolumeType from shipment
            where shipment.FiscalDocument == fiscalDocument.RecId;

        return shipment.VolumeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new EFiscalDocument_BR instance.
    /// </summary>
    /// <param name="_fiscalDocument">FiscalDocument_BR record to be mapped.</param>
    /// <returns>An EFiscalDocument_BR object that maps the given fiscal document record.</returns>
    public static EFiscalDocument_BR construct(FiscalDocument_BR _fiscalDocument)
    {
        return new EFiscalDocument_BR(_fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>direction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document direction
    /// </summary>
    /// <returns>
    /// The direction of the fiscal document
    /// </returns>
    public FiscalDocDirection_BR direction()
    {
        return fiscalDocument.Direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enum that indicates if the operation was destined to a final or not
    /// </summary>
    /// <returns>
    /// A value that indicates if the operation was destined to a final user or not
    /// </returns>
    /// <remarks>
    /// This flag is used to indicate if the operation was destined to a final user for outbound operations or for use and consumption for inbound operations
    /// </remarks>
    public CustVendFinalUser_BR finalUser()
    {
        return fiscalDocument.FinalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocIssueDateTimeWithTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the fiscal document issue date with timezone information
    /// </summary>
    /// <returns>
    ///     A text representation of datetime with timezone in format dd-mm-yyyyThh:mm:ss-00:00
    /// </returns>
    public DateTimeWithTimeZone_BR getFiscalDocIssueDateTimeWithTimeZone()
    {
        return this.getFiscalDocumentDateTimeWithTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocOutboundDateTimeWithTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the fiscal document outbound date with timezone information
    /// </summary>
    /// <returns>
    ///     A text representation of datetime with timezone in format dd-mm-yyyyThh:mm:ss-00:00
    /// </returns>
    public DateTimeWithTimeZone_BR getFiscalDocOutboundDateTimeWithTimeZone()
    {
        return this.getFiscalDocumentDateTimeWithTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentDateTimeWithTimeZone</Name>
				<Source><![CDATA[
    private DateTimeWithTimeZone_BR getFiscalDocumentDateTimeWithTimeZone()
    {
        TimezoneHelper_BR  timezoneHelper = new TimezoneHelper_BR();
        return timezoneHelper.formatDateTimeWithTimeZone(
                          fiscalDocument.FiscalDocumentDateTime,
                          fiscalDocument.FiscalDocumentDateTimeOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of shipments (EFiscalDocumentShipmentStat_BR) that contain the volume
    /// information to be written at the NF-e xml.
    /// </summary>
    /// <returns>
    /// List of shipments (EFiscalDocumentShipmentStat_BR).
    /// </returns>
    public List getListOfShipments()
    {
        FiscalDocumentShipmentStat_BR  fiscalDocumentShipmentStat;
        EFiscalDocumentShipmentStat_BR shipment;
        List                           shipments = new List(Types::Class);

        while select fiscalDocumentShipmentStat
            where fiscalDocumentShipmentStat.FiscalDocument == fiscalDocument.RecId
        {
            shipment = new EFiscalDocumentShipmentStat_BR();

            shipment.parmGrossWeight(fiscalDocumentShipmentStat.GrossWeight);
            shipment.parmNetWeight(fiscalDocumentShipmentStat.NetWeight);
            shipment.parmVolumeQuantity(fiscalDocumentShipmentStat.VolumeQuantity);
            shipment.parmVolumeType(fiscalDocumentShipmentStat.VolumeType);

            shipment.parmPackingBrand(fiscalDocument.PackingBrand);

            shipments.addEnd(shipment);
        }

        return shipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Operation location of the document
    /// </summary>
    /// <returns>
    ///     The enum value of the Operation location for the document's CFOP
    /// </returns>
    public OperationLocation_BR getOperationLocation()
    {
        switch (fiscalDocument.getDefaultCFOP().CustVendLocation)
        {
            case CustVendLocation_BR::SameState:
                return OperationLocation_BR::Intrastate;

            case CustVendLocation_BR::OtherState:
                return OperationLocation_BR::Interstate;

            case CustVendLocation_BR::OutsideCountry:
                return OperationLocation_BR::International;

            default:
                return OperationLocation_BR::Invalid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigInvoiceJourRecId</Name>
				<Source><![CDATA[
    private RefRecId getOrigInvoiceJourRecId()
    {
        RefRecId                       origInvoiceJourRecId;
        FiscalDocumentReferenced_BR    fiscalDocReferenced;

        switch (fiscalDocument.RefTableId)
        {
            case tableNum(CustInvoiceJour):
            case tableNum(VendInvoiceJour):
            case tableNum(ProjInvoiceJour):
                origInvoiceJourRecId = fiscalDocument.RefRecId;
                break;

            case tableNum(SalesComplementaryInvoiceHeader):
            case tableNum(PurchComplementaryInvoiceHeader):
                select firstonly ReferencedFiscalDocument from fiscalDocReferenced
                    where fiscalDocReferenced.FiscalDocument == fiscalDocument.recId;

                origInvoiceJourRecId = FiscalDocument_BR::find(fiscalDocReferenced.ReferencedFiscalDocument).RefRecId;
                break;
        }

        return origInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTaxAmountFromBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax from base amount for the given tax type.
    /// </summary>
    /// <param name="_taxType">Tax type for which to retrieve the total tax amount from base amount</param>
    /// <param name="excludeSUFRAMADicountLines">
    /// The flag shows if lines that contain SuframaDiscount of given Tax type should be included in calculation; by default should not.
    /// </param>
    /// <param name="_taxCodes">
    /// Container with filter by taxcodes; by default it is null.
    /// </param>
    /// <returns>Tax amount.</returns>
    public TaxAmount getTotalTaxAmountFromBaseAmount(TaxType_BR _taxType, boolean _excludeSUFRAMADicountLines = false, container _taxCodes = conNull())
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR fiscalDocumentLine;
        TaxAmount taxAmount;

        boolean useTaxCodesCondition = !prmisDefault(_taxCodes);
        
        while select RecId from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
               && (!_excludeSUFRAMADicountLines ||
                     (!(fiscalDocumentLine.SuframaDiscountICMS && _taxType == TaxType_BR::ICMS) &&
                      !(fiscalDocumentLine.SuframaDiscountCOFINS && _taxType == TaxType_BR::COFINS) &&
                      !(fiscalDocumentLine.SuframaDiscountPIS && _taxType == TaxType_BR::PIS)))
            join sum(TaxBaseAmountOther), sum(TaxBaseAmountExempt) from taxTrans
            group by TaxValue, TaxationCode
            where taxTrans.Type == _taxType
               && taxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
        {
            if (!useTaxCodesCondition || conFind(_taxCodes, taxTrans.TaxationCode) &&
                !fiscalEstablishment.checkExemptionICMSState(taxTrans.TaxationCode))
            {
                taxAmount += (taxTrans.TaxBaseAmountOther + taxTrans.TaxBaseAmountExempt) * TaxTrans.TaxValue / 100;
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatPort</Name>
				<Source><![CDATA[
    private void initIntrastatPort()
    {
        if (this.isInternationalOperation())
        {
            switch (fiscalDocument.RefTableId)
            {
                case tableNum(VendInvoiceJour):
                case tableNum(PurchComplementaryInvoiceHeader):
                    this.initIntrastatPortFromVendInvoice();
                    break;

                case tableNum(CustInvoiceJour):
                    this.initIntrastatPortFromCustInvoice();
                    break;

                case tableNum(SalesComplementaryInvoiceHeader):
                    FiscalDocumentReferenced_BR fiscalDocReferenced;
                    select firstonly ReferencedFiscalDocument from fiscalDocReferenced
                        where fiscalDocReferenced.FiscalDocument == fiscalDocument.RecId;

                    if (FiscalDocument_BR::find(fiscalDocReferenced.ReferencedFiscalDocument).RefTableId == tableNum(ProjInvoiceJour))
                    {
                        this.initIntrastatPortFromProjInvoice();
                    }
                    else
                    {
                        this.initIntrastatPortFromCustInvoice();
                    }
                    break;

                case tableNum(ProjInvoiceJour):
                    this.initIntrastatPortFromProjInvoice();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatPortFromProjInvoice</Name>
				<Source><![CDATA[
    private void initIntrastatPortFromProjInvoice()
    {
        ProjInvoiceJour projInvoiceJour;
        ProjInvoiceItem projInvoiceItem;

        RefRecId origProjInvoiceJourRecId = this.getOrigInvoiceJourRecId();

        select intrastatPort
            exists join projInvoiceItem
            where projInvoiceItem.Port == intrastatPort.PortId
            exists join projInvoiceJour
            where projInvoiceJour.InvoiceDate    == projInvoiceItem.InvoiceDate
                && projInvoiceJour.ProjInvoiceId == projInvoiceItem.ProjInvoiceId
                && projInvoiceJour.RecId         == origProjInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatPortFromCustInvoice</Name>
				<Source><![CDATA[
    private void initIntrastatPortFromCustInvoice()
    {
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;
        RefRecId            origCustInvoiceJourRecId;

        origCustInvoiceJourRecId = this.getOrigInvoiceJourRecId();

        select intrastatPort
            exists join custInvoiceTrans
            where custInvoiceTrans.Port                  == intrastatPort.PortId
            exists join custInvoiceJour
            where custinvoicetrans.SalesId               == custInvoiceJour.SalesId
                && custinvoicetrans.InvoiceId            == custInvoiceJour.InvoiceId
                && custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
                && custInvoiceTrans.numberSequenceGroup  == custInvoiceJour.numberSequenceGroup
                && custInvoiceJour.RecId                 == origCustInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatPortFromVendInvoice</Name>
				<Source><![CDATA[
    private void initIntrastatPortFromVendInvoice()
    {
        VendInvoiceJour     vendInvoiceJour;
        VendInvoiceTrans    vendInvoiceTrans;
        RefRecId            origVendInvoiceJourRecId;

        origVendInvoiceJourRecId = this.getOrigInvoiceJourRecId();

        select intrastatPort
            exists join vendInvoiceTrans
            where vendInvoiceTrans.Port                  == intrastatPort.PortId
            exists join vendInvoiceJour
            where vendInvoiceTrans.PurchID               == vendInvoiceJour.PurchId
                && vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId
                && vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate
                && vendInvoiceTrans.numberSequenceGroup  == vendInvoiceJour.numberSequenceGroup
                && vendInvoiceJour.RecId                 == origVendInvoiceJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInternationalOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current Nf-e is related to import or export operation
    /// </summary>
    /// <returns>
    /// True if the current operation is import/export operation, false otherwise.
    /// </returns>
    public boolean isInternationalOperation()
    {
        return this.getOperationLocation() == OperationLocation_BR::International;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list with all the payments trans of this document.
    /// </summary>
    /// <returns>A list of FiscalDocumentPaymentTrans_BR registries for this document.</returns>
    public List paymTransList()
    {
        FiscalDocumentPaymentTrans_BR   paymentTrans;
        List                            listOfPaymentTrans  = new List(Types::Record);
        ;

        while select paymentTrans
            where paymentTrans.FiscalDocument == fiscalDocument.recId
        {
            listOfPaymentTrans.addEnd(paymentTrans);
        }
        return listOfPaymentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enum that indicates the type of presence of the third party for the operation
    /// </summary>
    /// <returns>
    /// A value that indicates the presence type of the third party for the operation
    /// </returns>
    public EFDocPresenceType_BR presenceType()
    {
        return fiscalDocument.PresenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal document purpose
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document
    /// </returns>
    public FiscalDocumentPurpose_BR purpose()
    {
        return fiscalDocument.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableTaxAmountForProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the amounts of a given tax that has been classified as taxable.
    /// In order to calculate this sum, all the taxable tax trans from product lines for
    /// that tax type will be used.
    /// </summary>
    /// <param name="_taxType">
    /// The sum of the amounts must be calculated for this tax type.
    /// </param>
    /// <returns>
    /// Total tax products amount for the given tax type.
    /// </returns>
    public TaxAmount taxableTaxAmountForProducts(TaxType_BR _taxType)
    {
        FiscalDocumentTaxTrans_BR taxTrans;
        FiscalDocumentLine_BR     fiscalDocumentLine;

        select sum(TaxAmount), sum(TaxAmountOther) from taxTrans
            where taxTrans.Type == _taxType
            exists join fiscalDocumentLine
            where fiscalDocumentLine.ItemType == FiscalDocumentLineItemType_BR::Product
               && taxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
               && fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        if (taxTrans.taxAmount && taxTrans.taxAmountOther)
        {
            return taxTrans.taxAmount + taxTrans.taxAmountOther;
        }

        if (this.isImporting())
        {
            return taxTrans.taxAmount ? taxTrans.taxAmount : taxTrans.taxAmountOther;
        }

        return taxTrans.taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyForeignerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Foreigner Id of the fiscal document third party.
    /// </summary>
    /// <returns>
    /// Foreigner Id of the third party company; empty otherwise
    /// </returns>
    public CNPJCPFNum_BR thirdPartyForeignerId()
    {
        return fiscalDocument.ThirdPartyForeignerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyICMSContributionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ICMS Contribution ID of the third party based on IE and ICMSContributor flag.
    /// </summary>
    /// <returns>
    ///     The ICMS Contribution ID of the third party
    /// </returns>
    public ICMSContributionType_BR thirdPartyICMSContributionType()
    {
        #EFDocConstants_BR
        ICMSContributionType_BR contributionType;

        if (fiscalDocument.ThirdPartyIE == #ExemptIe)
        {
            contributionType = ICMSContributionType_BR::ExemptContributor;
        }
        else if (fiscalDocument.ThirdPartyICMSContributor)
        {
            contributionType = ICMSContributionType_BR::Contributor;
        }
        else
        {
            contributionType = ICMSContributionType_BR::NonContributor;
        }

        return contributionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total discount of the document
    /// </summary>
    /// <returns>
    /// The total discount of the document
    /// </returns>
    /// <remarks>
    /// This discount also includes discounts due to tax exemption
    /// </remarks>
    public DiscAmount totalDiscountAmount()
    {
        return fiscalDocument.TotalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSuframaDiscountICMSAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total SUFRAMA discount due to ICMS exemption
    /// </summary>
    /// <returns>
    /// The total SUFRAMA discount due to ICMS exemption
    /// </returns>
    public DiscAmount totalSuframaDiscountICMSAmount()
    {
        return fiscalDocument.TotalSuframaDiscountICMSAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalDocFromPurchOrder</Name>
				<Source><![CDATA[
    internal static boolean isFiscalDocFromPurchOrder(RefTableId _refTableId, RefRecId _refRecId)
    {
        boolean ret = false;

        if (_refTableId == tableNum(VendInvoiceJour))
        {
            VendInvoiceJour vendInvoiceJour;

            select firstonly PurchId from vendInvoiceJour
                where vendInvoiceJour.RecId == _refRecId;

            if (vendInvoiceJour && vendInvoiceJour.PurchId != '')
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateTaxationCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if TaxationCode_BR field should be updated in TmpTax table
    /// </summary>
    /// <param name = "_taxObject">Tax object</param>
    /// <returns>
    /// True if TaxationCode_BR field should be updated in TmpTax table
    /// </returns>
    [Hookable(false)]
    public static boolean shouldUpdateTaxationCode_BR(Tax _taxObject)
    {
        boolean ret = false;
        boolean shouldUpdateForSales = EFiscalDocument_BR::shouldUpdateTaxationCodeForSales(_taxObject);
        boolean shouldUpdateForPurch = EFiscalDocument_BR::shouldIncludeICMSST60FiscalValue3Purch(_taxObject);

        if (shouldUpdateForSales || shouldUpdateForPurch)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeTaxInTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if we should include a particular tax in total tax amount
    /// </summary>
    /// <param name = "_isTaxICMSST60FiscalValue3">Is tax type ICMS-ST 60 FiscalValue 3</param>
    /// <param name = "_taxObject">Tax object</param>
    /// <returns>
    /// True if we should include a particular tax in total tax amount
    /// </returns>
    [Hookable(false)]
    public static boolean shouldIncludeTaxInTaxTotal(boolean _isTaxICMSST60FiscalValue3, Tax _taxObject)
    {
        boolean ret = false;

        boolean shouldIncludeICMSST60FV3ForPurch = EFiscalDocument_BR::shouldIncludeICMSST60FiscalValue3Purch(_taxObject);
        boolean shouldIncludeICMSST60FV3ForNonPurch = EFiscalDocument_BR::shouldIncludeICMSST60FiscalValue3NonPurch(_taxObject);

        if ((_isTaxICMSST60FiscalValue3
                &&(shouldIncludeICMSST60FV3ForPurch || shouldIncludeICMSST60FV3ForNonPurch))
            || !_isTaxICMSST60FiscalValue3)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateTaxationCodeForSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if TaxationCode should be updated for Sales Order
    /// </summary>
    /// <param name = "_taxObject">Tax object</param>
    /// <returns>
    /// True if TaxationCode should be updated for Sales Order
    /// </returns>
    [Hookable(false)]
    public static boolean shouldUpdateTaxationCodeForSales(Tax _taxObject)
    {
       return  _taxObject is TaxSales && ICMSST60TaxCalculationSOFeature::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeICMSST60FiscalValue3Purch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ICMS-ST, taxation code 60 and fiscal value 3
    /// should be included in total tax for Purchase orders
    /// For Purchase Order we check the Flight for PO scenarios
    /// </summary>
    /// <param name = "_taxObject">Tax object</param>
    /// <returns>
    /// True if ICMS-ST, taxation code 60 and fiscal value 3
    /// should be included in total tax for Purchase orders
    /// </returns>
    [Hookable(false)]
    public static boolean shouldIncludeICMSST60FiscalValue3Purch(Tax _taxObject)
    {
        return _taxObject is TaxPurch && EFDocIncludeICMSTST60FV3OnPurchInvoice_BRFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeICMSST60FiscalValue3NonPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ICMS-ST, taxation code 60 and fiscal value 3
    /// should be included in total tax for Non-Purchase invoices
    /// For Non-Purch Invoices, we check the feature
    /// </summary>
    /// <param name = "_taxObject">Tax object</param>
    /// <returns>
    /// True if ICMS-ST, taxation code 60 and fiscal value 3
    /// should be included in total tax for Non-Purchase invoices
    /// </returns>
    [Hookable(false)]
    public static boolean shouldIncludeICMSST60FiscalValue3NonPurch(Tax _taxObject)
    {
        return !ICMSST60TaxCalculationSOFeature::isEnabled() && !(_taxObject is TaxPurch);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>