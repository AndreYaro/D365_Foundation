<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryItemSetUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides ability to update WHS inventory item set without creating duplicate elements.
/// </summary>
internal final class WHSInventoryItemSetUpdate
{
    #localmacro.unpackKey
        [itemId, inventDimId] = %1;
    #endmacro

    #localmacro.getQuantities
        [handlingQty, handlingWeight] = updates.lookup(%1);
    #endmacro

    #localmacro.setQuantities
        updates.insert(%1, [handlingQty, handlingWeight]);
    #endmacro

    #localmacro.unpackQuantities
        [handlingQty, handlingWeight] = %1;
    #endmacro
    
    private Map updates = new Map(Types::Container, Types::Container); // InventDimId => [WHSInventoryTransactionHandlingQty, WHSInventoryTransactionHandlingWeight]

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new item to the the set.
    /// </summary>
    /// <param name = "_itemId">Id of item to add.</param>
    /// <param name = "_inventDimId">Product and tracking dimensions.</param>
    /// <param name = "_handlingQtyUpdate">Handling quantity to add.</param>
    /// <param name = "_handlingWeightUpdate">Handling weight to add.</param>
    [Hookable(false)]
    internal void addElement(
        ItemId _itemId,
        InventDimId _inventDimId,
        WHSInventoryTransactionHandlingQty _handlingQtyUpdate,
        WHSInventoryTransactionHandlingWeight _handlingWeightUpdate)
    {
        WHSInventoryTransactionHandlingQty handlingQty = 0;
        WHSInventoryTransactionHandlingWeight handlingWeight = 0;

        var key = this.getKey(_itemId, _inventDimId);

        if (updates.exists(key))
        {
            #getQuantities(key);
        }

        handlingQty += _handlingQtyUpdate;
        handlingWeight += _handlingWeightUpdate;

        #setQuantities(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies updates to an existing item set.
    /// </summary>
    /// <param name = "_itemSetId">Item set to update.</param>
    [Hookable(false)]
    internal void updateItemSet(WHSInventoryItemSetId _itemSetId)
    {
        this.applyToItemSet(_itemSetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new item set and applies updates to it.
    /// </summary>
    /// <returns>An Id of the created item set.</returns>
    [Hookable(false)]
    internal WHSInventoryItemSetId createItemSet()
    {
        WHSInventoryItemSetId itemSetId = WHSSequentialGuidGenerator::generateSequentialGuid();
        this.applyToItemSet(itemSetId);

        return itemSetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false), Replaceable(false)]
    internal void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToItemSet</Name>
				<Source><![CDATA[
    private void applyToItemSet(WHSInventoryItemSetId _itemSetId)
    {
        ItemId itemId;
        InventDimId inventDimId;
        WHSInventoryTransactionHandlingQty handlingQty = 0;
        WHSInventoryTransactionHandlingWeight handlingWeight = 0;

        var updatesEnumerator = updates.getEnumerator();
        while (updatesEnumerator.moveNext())
        {
            #unpackKey(updatesEnumerator.currentKey());
            #unpackQuantities(updatesEnumerator.currentValue());

            WHSInventoryItemSetElement::insertItemSetElement(
                _itemSetId,
                itemId,
                InventDim::find(inventDimId),
                handlingQty,
                handlingWeight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private container getKey(ItemId _itemId, InventDimId _inventDimId)
    {
        return [_itemId, _inventDimId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>