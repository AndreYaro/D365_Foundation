<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralJournalAccountEntryCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>GeneralJournalAccountEntryCashFlow</c> class is the implementation between general jouranl account entry line transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'GeneralJournalAccountEntry'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class GeneralJournalAccountEntryCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.deleteExistingRows();
            this.generateCashFlowForProcessSet(_allNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        LedgerAccountCov covAC;
        LedgerAccountCov ledgerAllocation;
        Integer invent;
        Integer maxInvent;
        TransDate fromDate;
        PaymTerm payment;

        while select FromMainAccount, Payment from covAC
            where covAC.TransBudget == TransBudget::Trans
                && covAC.FromMainAccount
        {
            maxInvent = 0;

            while select RecId from ledgerAllocation
                where ledgerAllocation.TransBudget == TransBudget::Trans
                    && ledgerAllocation.FromMainAccount == covAC.FromMainAccount
            {
                payment = PaymTerm::find(covAC.Payment);
                invent = this.determineInventDays(payment);
                invent += payment.NumOfDays + (payment.NumOfMonths * 31);

                if (invent > maxInvent)
                {
                    maxInvent = invent;
                }
            }

            fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - maxInvent;

            this.processCashFlowForProcessSet(fromDate, covAC.FromMainAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(TransDate _fromDate, MainAccountRecId _fromMainAccount)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowGeneralJournalAccountEntry))
        {
            System.Exception exception;
            RecId generalJournalAccountEntryRecId;
            try
            {
                GeneralJournalAccountEntry generalJournalAccountEntry;
                GeneralJournalEntry generalJournalEntry;
                FiscalCalendarPeriod fiscalCalendarPeriod;

                ttsbegin;
                    
                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(generalJournalAccountEntry, NoYes::Yes);

                // Find all GeneralJournalAccountEntry records that have a ledger dimension with the MainAccount specified in the cash flow setup record.
                while select generalJournalEntry
                    where generalJournalEntry.AccountingDate >= _fromDate
                        && generalJournalEntry.Ledger == Ledger::current()
                    join fiscalCalendarPeriod
                        where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                            && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                    join generalJournalAccountEntry
                        where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                            && generalJournalAccountEntry.MainAccount == _fromMainAccount
                {
                    generalJournalAccountEntryRecId = generalJournalAccountEntry.RecId;
                    generalJournalAccountEntry.updateLedgerCov(generalJournalEntry, ledgerCoverage);

                    //A from liqudity account can have multiple to liqudity accounts.  Therefore, we only need one LedgerCovDocument.
                    if (LedgerCovDocument::findByTransTableIdAndTransRecId(tableNum(GeneralJournalAccountEntry), generalJournalAccountEntry.RecId).RecId == 0)
                    {
                        this.insertLedgerCovDocumentRow(generalJournalAccountEntry.RecId);
                    }
                }

                ledgerCoverage.insertDatabase();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (Exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(GeneralJournalAccountEntry), generalJournalAccountEntryRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(GeneralJournalAccountEntry), generalJournalAccountEntryRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingRows</Name>
				<Source><![CDATA[
    private void deleteExistingRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

            delete_from ledgerCov
                where ledgerCov.TransTableId == tableNum(GeneralJournalAccountEntry)
                    && ledgerCov.IsBeginningBalance == NoYes::No;

            LedgerCovDocument::deleteForTransTableId(tableNum(GeneralJournalAccountEntry));

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRow</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRow(RecId _generalJournalAccountEntryRecId)
    {
        LedgerCovDocument ledgerCovDocument;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;

        select RecId
            from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == _generalJournalAccountEntryRecId
        join AccountingDate,
            SubledgerVoucher
            from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry;

        ledgerCovDocument.TransTableId = tableNum(GeneralJournalAccountEntry);
        ledgerCovDocument.TransRecId = generalJournalAccountEntry.RecId;
        ledgerCovDocument.TransDate = generalJournalEntry.AccountingDate;
        ledgerCovDocument.Type = LedgerCovDocumentType::GeneralJournalAccountEntry;
        ledgerCovDocument.AccountingCurrency = Ledger::accountingCurrency();
        ledgerCovDocument.Voucher = generalJournalEntry.SubledgerVoucher;
        ledgerCovDocument.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowGeneralJournalAccountEntry))
        {
            System.Exception exception;
            RecId generalJournalAccountEntryRecId;
            try
            {
                LedgerAccountCov covAC;
                LedgerAccountCov ledgerAllocation;
                Integer invent;
                Integer maxInvent;
                TransDate fromDate;
                PaymTerm payment;
                GeneralJournalAccountEntry generalJournalAccountEntry;
                GeneralJournalEntry generalJournalEntry;
                DimensionAttributeLevelValueView dimAttributeLevelValueView;

                ttsbegin;
                    
                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(generalJournalAccountEntry, NoYes::Yes);

                while select FromMainAccount, Payment from covAC
                    where covAC.TransBudget == TransBudget::Trans
                    && covAC.FromMainAccount
                {
                    maxInvent = 0;

                    while select RecId from ledgerAllocation
                        where ledgerAllocation.TransBudget == TransBudget::Trans
                            && ledgerAllocation.FromMainAccount == covAC.FromMainAccount
                    {
                        payment = PaymTerm::find(covAC.Payment);
                        invent = this.determineInventDays(payment);
                        invent += payment.NumOfDays + (payment.NumOfMonths * 31);

                        if (invent > maxInvent)
                        {
                            maxInvent = invent;
                        }
                    }

                    fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - maxInvent;

                    // Find all GeneralJournalAccountEntry records that have a ledger dimension with the MainAccount specified in the cash flow setup record.
                    while select generalJournalEntry
                        where generalJournalEntry.AccountingDate >= fromDate
                            && generalJournalEntry.Ledger == Ledger::current()
                        join generalJournalAccountEntry
                            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                                && generalJournalAccountEntry.MainAccount == covAC.FromMainAccount
                    {
                        generalJournalAccountEntryRecId = generalJournalAccountEntry.RecId;
                        generalJournalAccountEntry.updateLedgerCov(generalJournalEntry, ledgerCoverage);
                    }
                }

                LedgerCov::deleteForTransTableId(tableNum(GeneralJournalAccountEntry));
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableId(tableNum(GeneralJournalAccountEntry));
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (Exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(GeneralJournalAccountEntry), generalJournalAccountEntryRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(GeneralJournalAccountEntry), generalJournalAccountEntryRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInventDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the inventory days.
    /// </summary>
    /// <param name = "_payment">The <c>PaymTerm</c> buffer.</param>
    /// <returns>The inventory days.</returns>
    protected int determineInventDays(PaymTerm _payment)
    {
        int invent;

        switch (_payment.PaymMethod)
        {
            case NetCurrent::Net:
                invent = 0;
                break;

            case NetCurrent::CurrentMth:
                invent = 31;
                break;

            case NetCurrent::CurrentQuart:
                invent = 93;
                break;

            case NetCurrent::CurrentYear:
                invent = 366;
                break;

            case NetCurrent::CurrentWeek:
                invent = 7;
                break;

            default:
                invent = 0;
                break;
        }
        return invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        TableId generalJournalAccountEntryTableId = tableNum(GeneralJournalAccountEntry);
        LedgerCovDocumentType type = LedgerCovDocumentType::GeneralJournalAccountEntry;
        Name number;
        String20 accountNumber;
        DueDate dueDate;
        DirPartyName accountName;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate,
            AccountName)
            select generalJournalAccountEntryTableId,
                RecId
                from generalJournalAccountEntry
            join _filter
                where generalJournalAccountEntry.TableId == _filter.RefTableId
                    && generalJournalAccountEntry.RecId == _filter.RefRecId
            join AccountingDate,
                type,
                accountingCurrency,
                number,
                SubledgerVoucher,
                accountNumber,
                dueDate,
                accountName
                from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@SYS132693";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        // GeneralJournalAccountEntry does not have a docment number, so just return.
        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapSignForMainAccountByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating whether the amount sign should be swapped for cash flow entry based on the
    /// main account type.
    /// </summary>
    /// <param name = "_mainAccount">The <c>MainAccount</c> table record.</param>
    /// <returns>true if the amount sign should be swapped for cash flow; otherwise, false</returns>
    internal static boolean swapSignForMainAccountByType(
        MainAccount _mainAccount)
    {
        boolean swapSign;

        switch (_mainAccount.Type)
        {
            // Revenue, Expense, Profit/Loss, Equity accounts should swap the sign to represent the proper cash inflow/outflow
            case (DimensionLedgerAccountType::Revenue):
            case (DimensionLedgerAccountType::Expense):
            case (DimensionLedgerAccountType::ProfitAndLoss):
            case (DimensionLedgerAccountType::Equity):
                swapSign = true;
                break;

            default:
                break;
        }

        return swapSign;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>