<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetterPackingSlipContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormLetterPackingslipContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> class when posting sales order packing slips.
/// </summary>
[DataContractAttribute]
[DocumentStatusFactoryAttribute(DocumentStatus::PackingSlip)]
class SalesFormLetterPackingSlipContract
extends SalesFormLetterContract
{
    NoYes           backorder;
    NoYes           queryCriteria;
    NoYes           editing;
    NoYes           resetProforma;

    //List of parameters common for SalesFormLetter_* classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(1)
    #LOCALMACRO.ParmListSalesPackingSlip
        backorder,
        queryCriteria,
        editing,
        resetProforma
        // <GEEU>
        ,ltDocNumberingCode
        // </GEEU>
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus getDocumentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrinting</Name>
				<Source><![CDATA[
    public boolean isPrinting()
    {
        boolean isPrinting = super() || (this.parmPrintEntryCertificate_W() == NoYes::Yes) || (this.parmPrintBillOfLading_RU() == NoYes::Yes);

        return isPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListSalesPackingSlip] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBackorder</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmBackorder(NoYes _backorder = backorder)
    {
        backorder = _backorder;
        return backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditing</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmEditing(NoYes _editing = editing)
    {
        editing = _editing;
        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCriteria</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmQueryCriteria(NoYes _queryCriteria = queryCriteria)
    {
        queryCriteria = _queryCriteria;
        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResetProforma</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmResetProforma(NoYes _resetProforma = resetProforma)
    {
        resetProforma = _resetProforma;
        return resetProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);
        container   packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListSalesPackingSlip, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>