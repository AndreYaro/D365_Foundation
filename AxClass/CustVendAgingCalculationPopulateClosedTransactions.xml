<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAgingCalculationPopulateClosedTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendAgingCalculationPopulateClosedTransactions</c> class copies values from the <c>CustVendTransAging</c>, <c>CustVendTrans</c> and <c>CustVendSettlement</c> inserts
///     records into the <c>CustVendAgingProcessingTmp</c> table.
/// </summary>
public final class CustVendAgingCalculationPopulateClosedTransactions extends SysQueryInsertRecordSet
{
    private CustVendAgingCalculationParameters custVendAgingCalculationParameters;

    private int custVendTransAgingDataSourceId;
    private int custVendTransDataSourceId;
    private int custVendSettlementDataSourceId;

    const str TransDateBelowOrAsOfBalanceDate = '(%1.%2 <= %3)';
    const str TransDateAboveOrAsOfBalanceDate = '(%1.%2 >= %3)';
    const str TransDateAboveAsOfBalanceDate = '(%1.%2 > %3)';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustVendAgingCalculationPopulateClosedTransactions</c> class.
    /// </summary>
    /// <param name = "_custVendAgingCalculationParameters">
    /// The <c>CustVendAgingCalculationParameters</c> object which holds the parameter values.
    /// </param>
    /// <returns>
    /// The initialized <c>CustVendAgingCalculationPopulateClosedTransactions</c> object.
    /// </returns>
    public static CustVendAgingCalculationPopulateClosedTransactions newFromParameters(CustVendAgingCalculationParameters _custVendAgingCalculationParameters)
    {
        CustVendAgingCalculationPopulateClosedTransactions instance = CustVendAgingCalculationPopulateClosedTransactions::construct();
        instance.custVendAgingCalculationParameters = _custVendAgingCalculationParameters;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAgingDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendTransAging</c> table.
    /// </summary>
    /// <returns>
    /// The unique ID.
    /// </returns>
    protected int getCustVendTransAgingDataSourceId()
    {
        return custVendTransAgingDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// The unique ID.
    /// </returns>
    protected int getCustVendTransDataSourceId()
    {
        return custVendTransDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendSettlementDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendSettlement</c> table.
    /// </summary>
    /// <returns>
    /// The unique ID.
    /// </returns>
    protected int getCustVendSettlementDataSourceId()
    {
        return custVendSettlementDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CustVendAgingCalculationPopulateClosedTransactions construct()
    {
        return new CustVendAgingCalculationPopulateClosedTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the target <c>CustVendAgingProcessingTmp</c> cursor.
    /// </summary>
    /// <returns>
    /// The <c>CustVendAgingProcessingTmp</c> table.
    /// </returns>
    protected Common initTargetCursor()
    {
        CustVendAgingProcessingTmp custVendAgingProcessingTmp = custVendAgingCalculationParameters.custVendAgingProcessingTmp;
        custVendAgingProcessingTmp.skipDataMethods(true);

        return custVendAgingProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map fields.
    /// </summary>
    protected void initFieldMapping()
    {
        this.insertFieldMap(
            custVendTransAgingDataSourceId,
            custVendAgingCalculationParameters.customersVendors.TableId,
            fieldNum(CustVendTransAging, AccountNum),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, AccountNum));

        this.insertFieldMap(
            custVendTransDataSourceId,
            custVendAgingCalculationParameters.custVendTrans.TableId,
            fieldName2Id(custVendAgingCalculationParameters.custVendTrans.TableId, fieldStr(CustVendTrans, RecId)),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, TransRecId));

        this.insertFieldMap(
            custVendTransDataSourceId,
            custVendAgingCalculationParameters.custVendTrans.TableId,
            this.getFieldNum(fieldNum(CustVendTrans, CurrencyCode), custVendAgingCalculationParameters.custVendTrans.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, CurrencyCode));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            fieldName2Id(custVendAgingCalculationParameters.custVendSettlement.TableId, fieldStr(CustVendSettlement, RecId)),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, SettlementRecId));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            this.getFieldNum(fieldNum(CustVendSettlement, SettleAmountMst), custVendAgingCalculationParameters.custVendSettlement.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, Amount));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            this.getFieldNum(fieldNum(CustVendSettlement, ExchAdjustment), custVendAgingCalculationParameters.custVendSettlement.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, ExchAdjustment));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            this.getFieldNum(fieldNum(CustVendSettlement, ExchAdjustmentReporting), custVendAgingCalculationParameters.custVendSettlement.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, ExchAdjustmentReporting));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            this.getFieldNum(fieldNum(CustVendSettlement, SettleAmountCur),
            custVendAgingCalculationParameters.custVendSettlement.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, AmountCur));

        this.insertFieldMap(
            custVendSettlementDataSourceId,
            custVendAgingCalculationParameters.custVendSettlement.TableId,
            this.getFieldNum(fieldNum(CustVendSettlement, SettleAmountReporting), custVendAgingCalculationParameters.custVendSettlement.tableId),
            tableNum(CustVendAgingProcessingTmp),
            fieldNum(CustVendAgingProcessingTmp, AmountReporting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to select <c>CustVendTransAging</c>, <c>CustVendTrans</c> and <c>CustVendSettlement</c> records.
    /// </summary>
    /// <returns>
    /// Query instance to select <c>CustVendTransAging</c>, <c>CustVendTrans</c> and <c>CustVendSettlement</c> records.
    /// </returns>
    protected Query initQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsCustVendTransAging = query.addDataSource(custVendAgingCalculationParameters.customersVendors.TableId);
        qbdsCustVendTransAging.cursor(custVendAgingCalculationParameters.customersVendors);

        QueryBuildDataSource qbdsCustVendTrans = this.addCustVendTransFieldsToQueryObject(qbdsCustVendTransAging);

        QueryBuildDataSource qbdsCustVendSettlement = this.addCustVendSettlementFieldsToQueryObject(qbdsCustVendTrans);

        query.clearAllFields();

        custVendTransAgingDataSourceId = qbdsCustVendTransAging.uniqueId();
        custVendTransDataSourceId = qbdsCustVendTrans.uniqueId();
        custVendSettlementDataSourceId = qbdsCustVendSettlement.uniqueId();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustVendTransFieldsToQueryObject</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addCustVendTransFieldsToQueryObject(QueryBuildDataSource _qbdsCustVendTransAging)
    {
        QueryBuildDataSource qbdsCustVendTrans = _qbdsCustVendTransAging.addDataSource(custVendAgingCalculationParameters.custVendTrans.TableId);

        // Joins the <c>CustVendTrans</c> data source with the <c>CustVendTransAging</c> datasource.
        qbdsCustVendTrans.addLink(fieldNum(CustVendTransAging, AccountNum),
            this.getFieldNum(fieldNum(CustVendTrans, AccountNum), custVendAgingCalculationParameters.custVendTrans.TableId),
            _qbdsCustVendTransAging.name());

        // Selects only the transactions where transaction date is below or same as balance as of date.
        qbdsCustVendTrans.addRange(this.getFieldNum(fieldNum(CustVendTrans, TransDate), custVendAgingCalculationParameters.custVendTrans.TableId)).value(
            strFmt(TransDateBelowOrAsOfBalanceDate,
            qbdsCustVendTrans.name(),
            fieldStr(CustVendTrans, TransDate),
            date2StrXpp(custVendAgingCalculationParameters.balanceAsOfDate)));

        // Selects only transactions which are not closed or transaction date is above or same as balance as of date.
        qbdsCustVendTrans.addRange(this.getFieldNum(fieldNum(CustVendTrans, Closed),custVendAgingCalculationParameters.custVendTrans.TableId)).value(SysQuery::valueEmptyString());
        qbdsCustVendTrans.addRange(this.getFieldNum(fieldNum(CustVendTrans, Closed), custVendAgingCalculationParameters.custVendTrans.TableId)).value(
            strFmt(TransDateAboveOrAsOfBalanceDate,
            qbdsCustVendTrans.name(),
            fieldStr(CustVendTrans, Closed),
            date2StrXpp(custVendAgingCalculationParameters.balanceAsOfDate)));

        qbdsCustVendTrans.cursor(custVendAgingCalculationParameters.custVendTrans);

        return qbdsCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustVendSettlementFieldsToQueryObject</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addCustVendSettlementFieldsToQueryObject(QueryBuildDataSource _qbdsCustVendTrans)
    {
        QueryBuildDataSource qbdsCustVendSettlement = _qbdsCustVendTrans.addDataSource(custVendAgingCalculationParameters.custVendSettlement.TableId);

        // Joins the <c>CustVendSettlement</c> data source with the <c>CustVendTrans</c> datasource.
        qbdsCustVendSettlement.addLink(fieldName2Id(custVendAgingCalculationParameters.custVendTrans.TableId, fieldStr(CustVendTrans, RecId)),
            this.getFieldNum(fieldNum(CustVendSettlement, TransRecId), custVendAgingCalculationParameters.custVendSettlement.TableId),
            _qbdsCustVendTrans.name());

        // Selects only the transactions where transaction date is above as balance as of date.
        qbdsCustVendSettlement.addRange(this.getFieldNum(fieldNum(CustVendSettlement, TransDate), custVendAgingCalculationParameters.custVendSettlement.TableId)).value(
            strFmt(TransDateAboveAsOfBalanceDate,
            qbdsCustVendSettlement.name(),
            fieldStr(CustVendSettlement, TransDate),
            date2StrXpp(custVendAgingCalculationParameters.balanceAsOfDate)));

        qbdsCustVendSettlement.cursor(custVendAgingCalculationParameters.custVendSettlement);

        return qbdsCustVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNum</Name>
				<Source><![CDATA[
    private fieldId getFieldNum(fieldId _fieldIdInMap, tableId _tableId)
    {
        tableId mapId;
        SysGlobalObjectCache globalObjectCache = new SysGlobalObjectCache();
        container result = globalObjectCache.find(funcname(), [_fieldIdInMap, _tableId]);

        if (result == connull())
        {
            switch (_tableId)
            {
                case tablenum(CustTrans), tablenum(VendTrans):
                    mapId = tablenum(CustVendTrans);
                    break;
                case tablenum(CustSettlement), tableNum(VendSettlement):
                    mapId = tablenum(CustVendSettlement);
                    break;

                default:
                    throw error(strfmt("@SYS19306", funcname()));
            }

            Map idMapping = VendDocumentUtil::fieldMapping(mapId, _tableId);
            fieldId fieldIdInTable = idMapping.lookup(_fieldIdInMap);
            result = [fieldIdInTable];
            globalObjectCache.insert(funcname(), [_fieldIdInMap, _tableId], result);
        }

        return conpeek(result, 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>