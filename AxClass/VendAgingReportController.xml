<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAgingReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAgingReportController</c> class is the controller class for the
/// <c>VendAgingReport</c>Microsoft SQL Server Reporting Services report.
/// </summary>
public class VendAgingReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the vendor aging report name.
    /// </summary>
    /// <param name = "_contract">
    ///     An instance of <c>VendAgingReportContract</c> class.
    /// </param>
    /// <returns>
    ///     The report name.
    /// </returns>
    [Wrappable(true)]
    protected final str getReportName(VendAgingReportContract _contract)
    {
        str reportNameLocal;

        if (_contract.parmDetailed())
        {
            if (_contract.parmIncludeAmountCur())
            {
                reportNameLocal = ssrsReportStr (VendAgingReport, DesignWithDetailAndWithTransactionCur);
            }
            else
            {
                reportNameLocal = ssrsReportStr(VendAgingReport, DesignWithDetailAndNoTransactionCur);
            }
        }
        else
        {
            if (_contract.parmIncludeAmountCur())
            {
                reportNameLocal = ssrsReportStr(VendAgingReport, DesignWithNoDetailAndWithTransactionCur);
            }
            else
            {
                reportNameLocal = ssrsReportStr(VendAgingReport, DesignWithNoDetailAndNoTransactionCur);
            }
        }

        return reportNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        VendAgingReportContract contract = this.parmReportContract().parmRdpContract() as VendAgingReportContract;

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        VendAgingReportContract contract = this.parmReportContract().parmRdpContract() as VendAgingReportContract;
        this.parmReportContract().parmReportName(this.getReportName(contract));
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        // Now that this report is a preprocess tempdb report, we no longer need
        // the limits that were required in the SYS version of the report. In order
        // to accomplish this, we are removing the internals of this method to not
        // call super(), but to just return what the original base class returns.
        return [SrsReportPreRunState::Run, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryChanged</Name>
				<Source><![CDATA[
    protected void queryChanged(str _key, Query _query)
    {
        super(_key, _query);

        SysOperationDataContractInfo queryInfo = this.getDataContractInfoObjectsRecursively().lookup(_key);
        SysOperationQueryDataContractInfo queryDataContractInfo = queryInfo as SysOperationQueryDataContractInfo;

        // checking to see if queryInfo is an object of SysOperationQueryDataContractInfo, if yes only then
        // check sorting information
        if (queryDataContractInfo != null)
        {
            int datasourceCount = _query.dataSourceCount();

            for (int i = 1; i <= datasourceCount; i+=1)
            {
                int sortFieldCount = _query.dataSourceNo(i).sortFieldCount();

                if (sortFieldCount)
                {
                    boolean found = false;
                    int j = 1;
                    QueryBuildDataSource qbds = _query.dataSourceNo(i);
                    str tableName = tableId2Name(qbds.table());

                    while (!found && j <= sortFieldCount)
                    {
                        found = (tableName == tableStr(VendTable)
                                    && qbds.sortField(j) != fieldNum(VendTable, AccountNum)
                                    && qbds.sortField(j) != fieldNum(VendTable, VendGroup))
                            || (tableName == tableStr(DirPartyTable) && qbds.sortField(j) != fieldNum(DirPartyTable, Name));

                        j++;
                    }
                    if (found)
                    {
                        info(strFmt("@AccountsReceivable:FieldsToSortInAgingReport", fieldPName(VendTable, AccountNum), fieldPName(DirPartyTable, Name), fieldPName(VendTable, VendGroup)));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges, depending on the caller.
    /// </summary>
    /// <param name="_query">
    /// The query of the report.
    /// </param>
    /// <param name="_contract">
    /// The <c>VendAgingReportContract</c> object of the report.
    /// </param>
    public void setRanges(Query _query, VendAgingReportContract _contract)
    {
        VendAgingReportTmp vendAgingReportTmp;

        // Checking the current table number
        if (this.parmArgs() && this.parmArgs().record() && this.parmArgs().record().TableId == tableNum(VendAgingReportTmp))
        {
            vendAgingReportTmp = this.parmArgs().record();

            // Modifying the query
            _query.dataSourceTable(tableNum(VendTable)).rangeField(fieldNum(VendTable, AccountNum)).value(vendAgingReportTmp.AccountNum);

            // Setting the ranges
            _contract.parmDateTransactionDuedate(any2int(vendAgingReportTmp.Balance01));
            _contract.parmAgingBuckets(vendAgingReportTmp.Txt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendAgingReportController controller = new VendAgingReportController();
        controller.parmReportName(ssrsReportStr(VendAgingReport, DesignWithNoDetailAndNoTransactionCur));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>