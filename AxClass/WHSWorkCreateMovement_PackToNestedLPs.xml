<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateMovement_PackToNestedLPs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for actually creating the inventory movement from a parent
/// license plate to the nested license plate as per a packing structure defined on the load.
/// </summary>
class WhsWorkCreateMovement_PackToNestedLPs extends WHSWorkCreateMovementBasic
{

    WHSWorkTable workTable;

    private WHSModule whsModule;
    private static boolean WHSWorkCreateMovementPackToNestedLPsRefactoringFlightEnabled = WHSWorkCreateMovementPackToNestedLPsRefactoringFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInProcessWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkLine createInProcessWorkLine(
        WHSWorkId       _workId,
        WMSLocationId   _locationId,
        InventDimId     _inventDimId,
        ItemId          _itemId,
        Qty             _qty,
        WHSUom          _uom,
        WHSUserId       _userid)
    {
        WHSWorkLine     workLine;

        workLine.WorkId                 = _workId;
        workLine.LineNum                = lastWorkLineNum;
        lastWorkLineNum++;
        workLine.WorkType               = WHSWorkType::PackToNestedLicensePlate;
        workLine.wmsLocationId          = _locationId;
        workLine.ItemId                 = _itemId;
        workLine.InventDimId            = _inventDimId;
        workLine.QtyRemain              = _qty;
        workLine.QtyWork                = _qty;
        workLine.UnitId                 = _uom;
        workLine.InventQtyRemain        = WHSCatchWeightHelper::convertInventQuantity(itemId, _uom, _qty, _inventDimId);
        workLine.InventQtyWork          = workLine.InventQtyRemain;

        workLine.WorkStatus                 = WHSWorkStatus::InProcess;
        workLine.UserId                     = _userid;
        workLine.WorkInProcessUTCDateTime   = DateTimeUtil::utcNow();

        workLine.insert();

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSModule</Name>
				<Source><![CDATA[
    private WHSModule parmWHSModule(WHSModule _whsModule = whsModule)
    {
        whsModule = _whsModule;
        return whsModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPackingStructure</Name>
				<Source><![CDATA[
    private void checkPackingStructure(WHSLicensePlateId _parentLicensePlateId)
    {
        WHSUOMStructure             uomStructParentLine;
        int                         counter = 0;

        if (WhsWorkCreateMovement_PackToNestedLPs::WHSWorkCreateMovementPackToNestedLPsRefactoringFlightEnabled)
        {
            container supportedTypes = WHSUOMStructure::whsModulesSuppportingPackToNestedLP();
            WHSModule foundModule;
            
            while select firstOnly10 RecId, Module from uomStructParentLine
            where uomStructParentLine.LicensePlateId == _parentLicensePlateId
                  && uomStructParentLine.LicensePlateParent == ''
                  && uomStructParentLine.Module in supportedTypes
            {
                counter++;
                if (counter > 1)
                {
                    throw error(strFmt("@WAX736",
                                   strFmt("@SYP4986024", _parentLicensePlateId),
                                   "@SYP4986021"));
                }

                foundModule = uomStructParentLine.Module;
            }

            if (counter == 0)
            {
                throw error(strFmt("@WAX736",
                               strFmt("@SYP4986024", _parentLicensePlateId),
                               "@SYP4986022"));
            }

            this.parmWHSModule(foundModule);
                              
        }
        else
        {
            // Check that there exists only one packing structure for the license plate
            while select firstOnly10 RecId from uomStructParentLine
            where uomStructParentLine.LicensePlateId == _parentLicensePlateId
                  && uomStructParentLine.Module == WHSModule::Purch
                  && uomStructParentLine.LicensePlateParent == ''
            {
                counter ++;
                if (counter > 1)
                {
                    throw error(strFmt("@WAX736",
                                   strFmt("@SYP4986024", _parentLicensePlateId),
                                   "@SYP4986021"));
                }
            }

            if (counter == 0)
            {
                throw error(strFmt("@WAX736",
                               strFmt("@SYP4986024", _parentLicensePlateId),
                               "@SYP4986022"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryForAsnItems</Name>
				<Source><![CDATA[
    private Query queryForAsnItems(WHSLicensePlateId _parentLicensePlateId)
    {
        Query query = new Query();

        QueryBuildDataSource asnItemDS = query.addDataSource(tableNum(WHSASNItem));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, LicensePlateId));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, ItemId));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, InventDimId));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, Qty));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, uom));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, ShipmentId));
        asnItemDS.addSelectionField(fieldNum(WHSASNItem, CapturedWeight));
        if (WhsWorkCreateMovement_PackToNestedLPs::WHSWorkCreateMovementPackToNestedLPsRefactoringFlightEnabled)
        {
            asnItemDS.addRange(fieldNum(WHSASNItem, Module)).value(queryValue(this.parmWHSModule()));
        }
        else
        {
            asnItemDS.addRange(fieldNum(WHSASNItem, Module)).value(queryValue(WHSModule::Purch));
        }
        asnItemDS.addSortField(fieldNum(WHSASNItem, ItemId));

        QueryBuildDataSource inventDimDS = asnItemDS.addDataSource(tableNum(InventDim));
        inventDimDS.addLink(fieldNum(WHSASNItem, InventDimId), fieldNum(InventDim, InventDimId));
        var enumerator = InventDim::dimProductDimFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            inventDimDS.addSortField(enumerator.current());
        }

        QueryBuildDataSource uomStructureDS = inventDimDS.addDataSource(tableNum(WHSUOMStructure));
        uomStructureDS.joinMode(JoinMode::ExistsJoin);
        uomStructureDS.addRange(fieldNum(WHSUOMStructure, LicensePlateParent)).value(queryValue(_parentLicensePlateId));
        if (WhsWorkCreateMovement_PackToNestedLPs::WHSWorkCreateMovementPackToNestedLPsRefactoringFlightEnabled)
        {
            uomStructureDS.addRange(fieldNum(WHSUOMStructure, Module)).value(queryValue(this.parmWHSModule()));
        }
        else
        {
            uomStructureDS.addRange(fieldNum(WHSUOMStructure, Module)).value(queryValue(WHSModule::Purch));
        }
        uomStructureDS.addLink(fieldNum(WHSASNItem, ShipmentId), fieldNum(WHSUOMStructure, ShipmentId), asnItemDS.name());
        uomStructureDS.addLink(fieldNum(WHSASNItem, LicensePlateId), fieldNum(WHSUOMStructure, LicensePlateId), asnItemDS.name());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkBasedOnPackingStruct</Name>
				<Source><![CDATA[
    private WHSWorkId createWorkBasedOnPackingStruct(
        WHSUserId           _userId,
        WHSLicensePlateId   _parentLicensePlateId)
    {
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter;

        InventSumUnionDeltaPhysicalQty      inventSumUnionDelta;
        InventDim                           inventDimSum, inventDimSumTo;
        InventDimParm                       inventDimParm;
        InventHandlingQty                   remainingQty, currentQty;
        boolean                             itemIdChanged = false;
        boolean                             licensePlateIdChanged = false;
        ItemId                              currentItemId;
        WHSLicensePlateId                   currentLicensePlateId;
        WHSInventoryItemSetId               currentItemSetId = WHSSequentialGuidGenerator::generateSequentialGuid();
        InventTable                         inventTable;
        List                                listInventDimActiveFinancialDim;
        WHSWorkLine                         workLine;
        WHSWorkInventTrans                  workInventTrans;
        inventDim                           inventDimSumJoinCriteria, inventDimInventSumPrevious;
        InventHandlingUnitId                inventHandlingUnitId;
        UnitOfMeasureRecId                  inventUOMRecID;

        this.checkPackingStructure(_parentLicensePlateId);

        ttsbegin;
        releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        /*
        Iterate the asn items going item by item and product dimension by product dimension.
        This is done because we want to create work lines per financial dimension, and since product dimensions are financial this is the most ordering
        */
        
        QueryRun queryRun = new QueryRun(this.queryForAsnItems(_parentLicensePlateId));
        while (queryRun.next())
        {
            WHSASNItem asnItem = queryRun.get(tableNum(WHSASNItem));
            InventDim inventDimAsn = queryRun.get(tableNum(InventDim));

            boolean isCWItem;
            //set variables if item changes
            if (currentItemId != asnItem.ItemId)
            {
                itemIdChanged = true;
                currentItemId = asnItem.ItemId;
                inventDimInventSumPrevious.clear();// don't compare to previous dim if item changes
                inventTable = InventTable::find(currentItemId);

                //it improves performance to reduce the number of worklines by only creating them on the financial dimensions
                listInventDimActiveFinancialDim = InventDimGroupSetup::newInventTable(inventTable).activeFinancialInventoryFields();

                isCWItem = PdsGlobal::pdsIsCWItem(currentItemId);
                inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(currentItemId);
                inventUOMRecID = UnitOfMeasure::findBySymbol(inventHandlingUnitId).recId;
            }

            if (currentLicensePlateId != asnItem.LicensePlateId)
            {
                licensePlateIdChanged = true;
                currentLicensePlateId = asnItem.LicensePlateId;
            }

            //we are going to keep all the work quantities in inventory unit to avoid conversions back and forward
            remainingQty = releasedProductUnitConverter.convert(asnItem.Qty, UnitOfMeasure::findBySymbol(asnItem.UOM).RecId, inventUOMRecID, NoYes::No, asnItem.ItemId, asnItem.InventDimId);

            WHSTransWeightRemain remainingWeight;
            if (isCWItem)
            {
                remainingWeight = asnItem.CapturedWeight ? asnItem.CapturedWeight : WHSCatchWeightHelper::convertInventQuantity(currentItemId, inventHandlingUnitId, remainingQty,  asnItem.InventDimId);
            }

            // The inventDim of the InventSum should be dimensions of asn item + parent lp
            inventDimSumJoinCriteria.clear();
            inventDimSumJoinCriteria.data(inventDimAsn);
            inventDimSumJoinCriteria.LicensePlateId = _parentLicensePlateId;
            inventDimSumJoinCriteria = inventDim::findOrCreate(inventDimSumJoinCriteria);

            inventDimParm.clear();
            inventDimParm.initFromInventDim(inventDimSumJoinCriteria);

            WHSTransWeightRemain currentWeight;

            while select InventDimId, PhysicalInvent, PdsCWPhysicalInvent from inventSumUnionDelta
                where inventSumUnionDelta.ItemId == asnItem.ItemId
                    && inventSumUnionDelta.PhysicalInvent > 0
                    #InventDimInnerJoin(inventSumUnionDelta.InventDimId, inventDimSum, inventDimSumJoinCriteria, inventDimParm)
            {
                if (isCWItem)
                {
                    currentQty = min(remainingQty, inventSumUnionDelta.PdsCWPhysicalInvent);
                    currentWeight = WHSCatchWeightHelper::calculateAverageWeight(currentQty, remainingQty, remainingWeight, InventTable::inventDecimals(currentItemId));
                }
                else
                {
                    currentQty = min(remainingQty, inventSumUnionDelta.PhysicalInvent);
                }

                //if the item or the financial dimension change then we need to create a new work line since we want the inventory transactions to be per financial dimensions
                if (itemIdChanged || this.mustCreateNewWorkInventoryTransaction(inventDimInventSumPrevious, inventDimSum, listInventDimActiveFinancialDim))
                {
                    itemIdChanged = false; //only act once on the itemId change
                    licensePlateIdChanged = false;

                    //update the previous created transactions
                    if (workLine.RecId)
                    {
                        this.moveWorkQty(
                            workInventTrans,
                            workLine,
                            currentItemSetId,
                            inventDimSumTo.LicensePlateId);

                        workLine = null;
                        workInventTrans = null;

                        // generate new item set id so can collect the new portion of the inventory to be moved.
                        currentItemSetId = WHSSequentialGuidGenerator::generateSequentialGuid();
                    }

                    //create the inventDims for the workLine trans which are less specific than the ones coming from inventSum but more specific than the ones from the asn
                    var inventDimWorkLineTo = InventDim::find(inventDimAsn.inventdimId);
                    inventDimWorkLineTo.InventLocationId = inventDimSum.InventLocationId;
                    inventDimWorkLineTo.initFromInventLocation(inventDimWorkLineTo.inventLocation());
                    inventDimWorkLineTo.wMSLocationId = inventDimSum.wMSLocationId;

                    if (!inventDimWorkLineTo.InventStatusId)
                    {
                        inventDimWorkLineTo.InventStatusId = inventDimSum.InventStatusId;
                    }

                    inventDimWorkLineTo = this.clearWorkLineToDim(inventDimWorkLineTo);
                    inventDimWorkLineTo = inventDim::findOrCreate(inventDimWorkLineTo);

                    //from and to should match except for the license plate
                    var inventDimWorkLineFrom = this.newInventDimFromDimAndLP(inventDimWorkLineTo, _parentLicensePlateId);

                    var inventDimWorkLine = inventDimWorkLineTo.data();
                    inventDimWorkLine.clearLocationAndBelowDim(asnItem.ItemId);
                    inventDimWorkLine = inventDim::findOrCreate(inventDimWorkLine);

                    workLine = this.createInProcessWorkLine(
                        this.createWorkTable(_userId, inventDimWorkLine, _parentLicensePlateId),
                        inventDimSum.wMSLocationId,
                        inventDimWorkLine.inventDimId,
                        asnItem.ItemId,
                        0, //we are going to add the quantity for all the nested lps but the total is not known until the end
                    inventHandlingUnitId,//we create the work in inventory unit to avoid converting back and forward for work we are anyway going to complete automatically
                    _userId);

                    //create the specific dimensions we want to use when we update the inventory
                    inventDimSumTo = this.newInventDimFromDimAndLP(inventDimSum, asnItem.LicensePlateId);

                    //create inventory transactions with the specific dimensions
                    workInventTrans = this.createWorkInventTransWithSpecificDim(workLine, currentQty, currentWeight, inventDimWorkLineFrom, inventDimWorkLineTo, inventDimSum, inventDimSumTo);

                    if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(workLine.WorkId))
                    {
                        WHSInventoryItemSetElement::insertItemSetElement(
                            currentItemSetId,
                            workInventTrans.ItemId,
                            inventDimSum,
                            currentQty,
                            currentWeight);
                    }
                }
                else //just create a new set of transactions with the specific dim
                {
                    if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(workLine.WorkId))
                    {
                        // If the target LP has changed, but still the same item, than we want to move what we have collected so far.
                        if (licensePlateIdChanged)
                        {
                            licensePlateIdChanged = false;

                            this.moveWorkQty(
                                workInventTrans,
                                workLine,
                                currentItemSetId,
                                inventDimSumTo.LicensePlateId);

                            // generate new item set id so can collect the new portion of the inventory to be moved.
                            currentItemSetId = WHSSequentialGuidGenerator::generateSequentialGuid();
                        }

                        WHSInventoryItemSetElement::insertItemSetElement(
                            currentItemSetId,
                            workInventTrans.ItemId,
                            inventDimSum,
                            currentQty,
                            currentWeight);
                    }

                    inventDimSumTo = this.newInventDimFromDimAndLP(inventDimSum, asnItem.LicensePlateId);

                    workInventTrans.changeQuantitiesForSpecificDimensions(currentQty, currentWeight, inventDimSum, inventDimSumTo, false);
                }

                //set loop variables dependent on inventSum loop
                inventDimInventSumPrevious.data(inventDimSum);

                // deduct the remaining qty by the qty that has been moved in this iteration
                remainingQty = remainingQty - currentQty;
                remainingWeight -= currentWeight;

                // if enough quantity has been moved, come out of the loop
                if (remainingQty == 0)
                {
                    break;
                }
            }

            // all inventory dimensions for this WHSASNItem have been iterated- ideally there should not be any pending remaining qty
            if (remainingQty > 0)
            {
                throw error(strFmt("@WAX736",
                                   strFmt("@SYP4986024", _parentLicensePlateId),
                                   strFmt("@SYP4986023", asnItem.ItemId)));
            }
        }

        //handle the last iteration
        if (workLine.RecId)
        {
            this.moveWorkQty(
                workInventTrans,
                workLine,
                currentItemSetId,
                inventDimSumTo.LicensePlateId);
        }

        if (workTable.RecId)
        {
            workTable.WorkStatus = WHSWorkStatus::Closed;
            workTable.WorkClosedUTCDateTime = DateTimeUtil::utcNow();
            workTable.doUpdate();
        }

        ttscommit;

        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWorkLineToDim</Name>
				<Source><![CDATA[
    private InventDim clearWorkLineToDim(InventDim _inventDimWorkLineTo)
    {
        InventDim inventDimWorkLineTo;
        inventDimWorkLineTo.data(_inventDimWorkLineTo);

        inventDimWorkLineTo.LicensePlateId = ''; //there are potentially more than one so we blank this

        // Clear these dimensions because there are potentially more than one.
        // The linked inventory transactions has all the required dimensions.
        inventDimWorkLineTo.inventBatchId = '';
        inventDimWorkLineTo.inventSerialId = '';

        return inventDimWorkLineTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkCreateMovement_PackToNestedLPs construct()
    {
        WHSWorkCreateMovement_PackToNestedLPs workCreator = new WHSWorkCreateMovement_PackToNestedLPs();
        return workCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransWithSpecificDim</Name>
				<Source><![CDATA[
    private WHSWorkInventTrans createWorkInventTransWithSpecificDim(
        WHSWorkLine             _workLine,
        InventHandlingQty       _inventHandlingQty,
        WHSTransWeight          _capturedWeight,
        InventDim               _fromInventDim,
        InventDim               _toInventDim,
        InventDim               _fromInventDimSpecific,
        InventDim               _toInventDimSpecific
        )
    {
        WHSWorkInventTrans  workInventTrans;

        workInventTrans.initFromWorkLine(_workLine);
        workInventTrans.createQuantitiesWithSpecificDimensions(_inventHandlingQty, _capturedWeight, _fromInventDim, _toInventDim, _fromInventDimSpecific, _toInventDimSpecific, false);

        return workInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTable</Name>
				<Source><![CDATA[
    private WHSWorkId createWorkTable(
        WHSUserId           _userId,
        InventDim           _inventDimFrom,
        WHSLicensePlateId   _targetLicensePlateId)
    {
        if (!workTable.RecId)
        {
            workTable.setWorkId();
            workTable.WorkTransType             = WHSWorkTransType::Invent;
            workTable.InventSiteId              = _inventDimFrom.InventSiteId;
            workTable.InventLocationId          = _inventDimFrom.InventLocationId;
            workTable.TargetLicensePlateId      = _targetLicensePlateId;
            workTable.WorkCreatedBy             = _userId;

            workTable.WorkStatus                = WHSWorkStatus::InProcess;
            workTable.WorkInProcessUTCDateTime  = DateTimeUtil::utcNow();

            workTable.insert();
        }

        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveWorkQty</Name>
				<Source><![CDATA[
    private void moveWorkQty(
        WHSWorkInventTrans      _workInventTrans,
        WHSWorkLine             _workLine,
        WHSInventoryItemSetId   _itemSetIdToMove,
        WHSLicensePlateId       _targetLP)
    {
        InventHandlingQty workQty;
        InventHandlingQty workQtyCW;

        if (PdsGlobal::pdsIsCWItem(_workInventTrans.ItemId))
        {
            workQty   = _workInventTrans.TransactionWeight;
            workQtyCW = _workInventTrans.Qty;
        }
        else
        {
            workQty   = _workInventTrans.Qty;
            workQtyCW = 0;
        }

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workInventTrans.WorkId))
        {
            InventDim inventDimFrom = InventDim::find(_workInventTrans.InventDimIdFrom);
            InventDim inventDimTo = this.newInventDimFromDimAndLP(InventDim::find(_workInventTrans.InventDimIdTo), _targetLP);

            // here we do the fast movement using the constructed set and bypassing the user location and reservations.
            WHSInventoryTransactionSource transactionSource = WHSInventoryTransactionSource::newFromValues(
                WHSInventoryTransactionReferenceCategoryEnum::Work,
                _workInventTrans.WorkId,
                _workInventTrans.InventoryTransactionOriginId);

            WHSInventoryTransactionActionIssueRegistrationParameters issueActionParams = WHSInventoryTransactionActionIssueRegistrationParameters::newFromValues(
                transactionSource,
                _itemSetIdToMove,
                WHSInventoryStorageDimensions::newFromInventDim(inventDimFrom),
                WHSInventoryTransactionActionValidationParameters::noChecks()
                    .activateAllCreateReservationChecks()
                    .activateAllIssueRegistrationChecks());

            WHSInventoryTransactionIssueRegistrationAction::construct().execute(issueActionParams);

            WHSInventoryTransactionActionReceiptRegistrationParameters receiptActionParams = WHSInventoryTransactionActionReceiptRegistrationParameters::newFromValues(
                transactionSource,
                _itemSetIdToMove,
                WHSInventoryStorageDimensions::newFromInventDim(inventDimTo),
                WHSInventoryTransactionActionValidationParameters::noChecks()
                    .activateAllRemoveReservationChecks()
                    .activateAllReceiptRegistrationChecks());

            WHSInventoryTransactionReceiptRegistrationAction::construct().execute(receiptActionParams);
        }
        else
        {
            InventUpdate::sumUpTransactions(_workinventtrans.InventTransIdFrom);
            InventUpdate::sumUpTransactions(_workInventTrans.InventTransIdTo);

            WHSInvent::moveWorkQuantities(
                _workInventTrans,
                _workInventTrans.InventDimIdFrom,
                _workInventTrans.InventDimIdTo,
                workQty,
                workQtyCW,
                null,
                null,
                null,
                false,  /*updateTransactionsBeforeUpdate*/
            true    /*skipSumOfOfTransactions*/);
        }

        //update the workline so the qty match the quantities for the workInventTrans and set it to closed
        _workLine.QtyRemain              = _workInventTrans.InventQtyRemain;
        _workLine.InventQtyRemain        = _workInventTrans.InventQtyRemain;
        _workLine.QtyWork                = _workInventTrans.Qty;
        _workLine.InventQtyWork          = _workInventTrans.Qty;
        _workLine.CapturedWeight         = _workInventTrans.TransactionWeight;
        _workLine.WorkClosedUTCDateTime  = DateTimeUtil::utcNow();
        _workLine.WorkStatus             = WHSWorkStatus::Closed;

        _workLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewWorkInventoryTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether warehouse inventory transaction must be created for new inventory dimensions.
    /// </summary>
    /// <param name = "_inventDimPrevious">Previous inventory dimensions.</param>
    /// <param name = "_inventDimNew">New inventory dimensions.</param>
    /// <param name = "_listInventDimActiveFinancialDim">List of active dimensions which are part of financial inventory.</param>
    /// <returns>true if transaction must be created for new inventory dimensions; otherwise, false.</returns>
    protected boolean mustCreateNewWorkInventoryTransaction(
        InventDim   _inventDimPrevious,
        InventDim   _inventDimNew,
        List        _listInventDimActiveFinancialDim)
    {
        return !InventDim::isInventDimEqual(_inventDimPrevious, _inventDimNew, _listInventDimActiveFinancialDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDimFromDimAndLP</Name>
				<Source><![CDATA[
    private InventDim newInventDimFromDimAndLP(
        InventDim           _inventDimFrom,
        WHSLicensePlateId   _licensePlateID)
    {
        InventDim inventDimNew;

        inventDimNew.data(_inventDimFrom);
        inventDimNew.LicensePlateId = _licensePlateID;
        inventDimNew = InventDim::findOrCreate(inventDimNew);

        return inventDimNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packToNestedLPs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to initiate processing by this class
    /// </summary>
    /// <param name="_userId">
    /// The user id who has called this method from the RF device menu
    /// </param>
    /// <param name="_fromParentLP">
    /// The parent license plate from which the inventory is to be packed to nested license plate
    /// </param>
    /// <returns>
    /// The work id of the work that was created and closed
    /// </returns>
    public static WHSWorkId packToNestedLPs(
        WHSUserId           _userId,
        WHSLicensePlateId   _fromParentLP)
    {
        return WHSWorkCreateMovement_PackToNestedLPs::construct().createWorkBasedOnPackingStruct(_userId, _fromParentLP);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>