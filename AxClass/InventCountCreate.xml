<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCountCreate extends InventCountCreate_Base implements BatchRetryable
{
    NoYes               activateCountSystem;
    NoYes               includeZeroOnHand;

    DialogField         dialogInventoryStatus;
    DialogField         dialogActivateCountSystem;
    DialogField         dialogIncludeZeroOnHand;
    DialogGroup         dialogInventDimParm;

    InventSiteId        inventSiteId;
    InventLocationId    inventLocationId;

    boolean                            useBulkInventSum;
    InventSumDatePhysicalDimEnumerator bulkInventSumEnumerator;

    UserConnection  userConnection;

    boolean isReleaseMemoryFlightEnabled = InventCostRemoveCursorCopyToReleaseMemoryFlight::instance().isEnabled();

    #DEFINE.CurrentVersion(10)
    #LOCALMACRO.CurrentList
         ActivateCountSystem,
         includeZeroOnHand
    #ENDMACRO

    #LOCALMACRO.CurrentList9
         ActivateCountSystem
    #ENDMACRO

    #LOCALMACRO.CurrentList7
         CountDate,
         journalId,
         ActivateCountSystem,
         CountGroupId,
         inventDimParm
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateCountSystem</Name>
				<Source><![CDATA[
    protected NoYes activateCountSystem()
    {
        return activateCountSystem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogActivateCountSystem = dialog.addFieldValue(enumStr(NoYes), activateCountSystem, "@SYS54346", "@SYS54347");
        dialogIncludeZeroOnHand = dialog.addFieldValue(enumStr(NoYes), includeZeroOnHand, "@SYS98263", "@SYS98264");

        dialogInventDimParm = inventDimParm.addFieldsToDialog(dialog, "@SYS54383", false, false, '', this.initDisabledFieldsInventDimParm());
        
        this.autoSelectInventoryStatusField();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSelectInventoryStatusField</Name>
				<Source><![CDATA[
    private void autoSelectInventoryStatusField()
    {
        ListEnumerator enumerator = InventDimParm::dimParmEnabledFieldList().getEnumerator();
        FieldId        dimParmFieldId;
        Integer        h = 0;
        FieldId        inventStatusFieldId = fieldNum(InventDimParm, InventStatusFlag);

        while (enumerator.moveNext())
        {
            h++;
            dimParmFieldId = enumerator.current();
            if (dimParmFieldId == inventStatusFieldId)
            {
                dialogInventoryStatus = dialog.getDialogClass(dialogInventDimParm.fieldnameNo(h));
                dialogInventoryStatus.value(true);
                dialogInventoryStatus.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(InventCountCreate, modifyInventoryStatusField), this);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventoryStatusField</Name>
				<Source><![CDATA[
    private void modifyInventoryStatusField(FormCheckBoxControl _checkBoxControl)
    {
        if (dialogInventoryStatus && !dialogInventoryStatus.value())
        {
            warning("@WAX:WHSInventoryStatusFieldRequiredToBeSelected");
            dialogInventoryStatus.value(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDisabledFieldsInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventDimParm</c> record for fields to disable in the dialog.
    /// </summary>
    /// <returns>An <c>InventDimParm</c> record for fields to disable in the dialog.</returns>
    protected InventDimParm initDisabledFieldsInventDimParm()
    {
        InventDimParm dimParmDisabledFields;
        dimParmDisabledFields.InventSiteIdFlag = inventDimParm.InventSiteIdFlag;

        return dimParmDisabledFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSiteAndLocationFilter</Name>
				<Source><![CDATA[
    private void queryAddSiteAndLocationFilter()
    {
        Query query = this.queryRun().query();
        QueryBuildDataSource qbds = query.dataSourceTable(tablenum(InventDim));
        QueryFilter qf_InventSiteId = SysQuery::findOrCreateQueryFilter(query, qbds, fieldstr(InventDim, inventSiteId));
        qf_InventSiteId.value(inventSiteId ? queryValue(inventSiteId) : null);

        QueryFilter qf_InventLocationId = SysQuery::findOrCreateQueryFilter(query, qbds, fieldstr(InventDim, inventLocationId));
        qf_InventLocationId.value(inventLocationId ? queryValue(inventLocationId) : null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiteAndLocationFromJournal</Name>
				<Source><![CDATA[
    private void getSiteAndLocationFromJournal()
    {
        InventJournalTable tmpInventJournalTable = InventJournalTable::find(journalId);

        if (tmpInventJournalTable)
        {
            inventSiteId = tmpInventJournalTable.inventSiteId;
            inventLocationId = tmpInventJournalTable.inventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        activateCountSystem     = dialogActivateCountSystem.value();
        includeZeroOnHand       = dialogIncludeZeroOnHand.value();
        inventDimParm.getFromDialog(dialog,dialogInventDimParm);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when the
    ///    <c>SysLastValue.GetLast</c> method is called. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        includeZeroOnHand = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected void initQueryRun()
    {
        queryRun = new QueryRun(queryStr(InventSumCount));
        InventInventoriedPolicy::addInventoriedRangeToInventTable(queryRun.query().dataSourceTable(tableNum(InventTable)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddGroupFields</Name>
				<Source><![CDATA[
    protected void queryAddGroupFields()
    {
        Query                   query   = queryRun.query();
        QueryBuildDataSource    qbsSum  = query.dataSourceTable(tableNum(InventSum));
        QueryBuildDataSource    qbsDim  = query.dataSourceTable(tableNum(InventDim));

        qbsSum.addGroupByField(fieldNum(InventSum, ItemId));
        inventDimParm.queryAddGroupByField(qbsDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        setPrefix(InventCountCreate::description());
        var logger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = logger.activityContext(logger.activity('Create on-hand counting journal')))
        {
            this.runSingleTransaction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSingleTransaction</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void runSingleTransaction()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.queryAddGroupFields();
            this.progressInit(InventCountCreate::description(),maxLines,#AviUpdate);
            this.initJournalTableData();

            this.initBulkInventSum();

            this.addFilterToCountingGroup();

            InventSum   inventSum;
            InventDim   inventDim;

            while (this.getNextRecord(inventSum, inventDim))
            {
                setPrefix(#prefixField(inventSum,itemId));
                progress.setText(inventSum.ItemId, 1);

                if (this.doCounting(inventSum,inventDim))
                {
                    this.createInventJournalTrans(inventSum,inventDim, includeZeroOnHand);
                    progress.incCount();
                }

                if (isReleaseMemoryFlightEnabled)
                {
                    inventSum = null;
                    inventDim = null;
                }

                if (!this.allowMoreLines())
                {
                    break;
                }
            }
            if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
            {
                journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
            }
            else
            {
                journalTableData.journalTable().update();
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPartitionTransaction</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void runPartitionTransaction()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        this.queryAddGroupFields();
        this.progressInit(InventCountCreate::description(),maxLines,#AviUpdate);
        this.initJournalTableData();

        this.initBulkInventSum();

        this.addFilterToCountingGroup();

        InventSum   inventSum;
        InventDim   inventDim;
        
        using (InventRecordPartitionCommitter partitionCommitter = InventRecordPartitionCommitter::construct(50))
        {
            while (this.getNextRecord(inventSum, inventDim))
            {
                setPrefix(#prefixField(inventSum,itemId));
                progress.setText(inventSum.ItemId, 1);

                if (this.doCounting(inventSum,inventDim))
                {
                    try
                    {
                        partitionCommitter.beginTransactionIfNeeded();
                        this.createInventJournalTrans(inventSum,inventDim, includeZeroOnHand);
                        progress.incCount();
                        partitionCommitter.commitTransactionIfNeeded();
                    }
                    catch (Exception::Deadlock)
                    {
                        retry;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }

                    if (!this.allowMoreLines())
                    {
                        break;
                    }
                }
            }
        }

        try
        {
            ttsbegin;
            if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
            {
                journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
            }
            else
            {
                journalTableData.journalTable().update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = RunBase::getVersion(_packedClass);
        container       packedQuery;
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;

            case 9:
                [version,#CurrentList9, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;

            case 7:
                [version,#CurrentList7,packedQuery] = _packedClass;
                if (packedQuery)
                {
                   queryRun = new QueryRun(packedQuery);
                   InventInventoriedPolicy::addInventoriedRangeToInventTable(queryRun.query().dataSourceTable(tableNum(InventTable)));
                }
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS27464";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalForm       journalForm       = JournalForm::fromArgs(_args);
        InventJournalId   journalId         = InventCountCreate_Base::argsJournalId(_args);
        InventCountCreate inventCountCreate = InventCountCreateUseItemBaseTasksFlight::instance().isEnabled() ?
            InventCountCreate_MultiTask::newCountCreate(journalId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),InventJournalTable::journalId2inventDimParm(journalId)) :
            InventCountCreate::newCountCreate(journalId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),InventJournalTable::journalId2inventDimParm(journalId));

        inventCountCreate.getSiteAndLocationFromJournal();
        inventCountCreate.queryAddSiteAndLocationFilter();

        InventCountCreate_Base::mainHandling(inventCountCreate, journalId, journalForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCountCreate</Name>
				<Source><![CDATA[
    public static InventCountCreate newCountCreate(
        InventJournalId _journalId,
        TransDate       _transDate,
        InventDimParm   _inventDimParm)
    {
        InventCountCreate   inventCountCreate = new InventCountCreate();

        inventCountCreate.getLast();
        inventCountCreate.parmJournalId(_journalId);
        inventCountCreate.parmCountDate(_transDate);
        inventCountCreate.parmInventDimParm(_inventDimParm);
        return inventCountCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecord</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean getNextRecord(InventSum _inventSum, InventDim _inventDim)
    {
        boolean     ret;

        if (useBulkInventSum)
        {
            ret = bulkInventSumEnumerator.moveNext();
            if (ret)
            {
                container current = bulkINventSumEnumerator.current();
                _inventSum.data(conPeek(current, 3));
                _inventDim.data(conPeek(current, 4));
            }
        }
        else
        {
            ret = queryRun.next();
            if (ret)
            {
                _inventSum.data(queryRun.get(tableNum(InventSum)));
                _inventDim.data(queryRun.get(tableNum(InventDim)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHandQty</Name>
				<Source><![CDATA[
    protected container getOnHandQty(TransDate _countDate, ItemId _itemId, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        container   ret;

        if (useBulkInventSum)
        {
            container current = bulkInventSumEnumerator.current();
            ret = [conPeek(current, 1), conPeek(current, 2)];
        }
        else
        {
            ret = super(_countDate, _itemId, _inventDimCriteria, _inventDimParm);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBulkInventSum</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void initBulkInventSum()
    {
        // Following options might result in many itemId x dimensions combination to be
        // excluded from counting. To avoid unnecessary up-front calculation
        // we use non-bulk counting code.
        if (   countGroupId                     != ''
            || physicalUpdates                  == NoYes::Yes
            || inventDimParm.InventSerialIdFlag == NoYes::Yes)
        {
            useBulkInventSum = false;
        }
        else
        {
            useBulkInventSum = true;
            bulkInventSumEnumerator = InventSumDatePhysicalDimEnumerator::newParameters(countDate, queryRun.query());

            bulkInventSumEnumerator.parmInventDimParm(inventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>