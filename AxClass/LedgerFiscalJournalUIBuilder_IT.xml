<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalJournalUIBuilder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerFiscalJournalUIBuilder_IT</c> class is the UI Builder class for
///    <c>LedgerFiscalJournal_IT</c> SSRS Report.
/// </summary>
public class LedgerFiscalJournalUIBuilder_IT extends SrsReportDataContractUIBuilder
{
    LedgerFiscalJournalContract_IT  ledgerFiscalJournalContract_IT;

    DialogField                     allYear;
    DialogField                     fromDate;
    DialogField                     changePageNumber;
    DialogField                     changeSequenceNumber;
    DialogField                     changeAmountCurDebit;
    DialogField                     changeAmountCurCredit;

    DialogField                     changeLastPage;
    DialogField                     changeLastSequenceNumber;
    DialogField                     changeLastAmountCurDebit;
    DialogField                     changeLastAmountCurCredit;

    DialogField                     lastPage;
    DialogField                     lastSequenceNumber;
    DialogField                     lastAmountCurDebit;
    DialogField                     lastAmountCurCredit;

    int changeLastPageValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allYearchecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the events for the <c>allYear</c> check box.
    /// </summary>
    /// <param name="_allYear">
    ///    The All Year check box value.
    /// </param>
    /// <returns>
    ///    true if event handler is executed successfully; otherwise, false.
    /// </returns>

    public boolean allYearchecked(FormCheckBoxControl _allYear)
    {
        if (_allYear.modified()&& allYear.value())
        {
            changePageNumber.enabled(false);
            changeSequenceNumber.enabled(false);
            changeAmountCurDebit.enabled(false);
            changeAmountCurCredit.enabled(false);
        }
        else
        {
            changePageNumber.enabled(true);
            changeSequenceNumber.enabled(true);
            changeAmountCurDebit.enabled(true);
            changeAmountCurCredit.enabled(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
        public void build()
    {
        super();

        allYear = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmAllYear));
        fromDate = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmFromDate));

        changePageNumber = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangePageNumber));
        changeSequenceNumber = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeSequenceNumber));
        changeAmountCurDebit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeAmountCurDebit));
        changeAmountCurCredit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeAmountCurCredit));

        lastPage = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmLastPage));
        lastSequenceNumber = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmLastsequenceNumber));
        lastAmountCurDebit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmLastAmountCurDebit));
        lastAmountCurCredit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmLastAmountCurCredit));

        changelastPage = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangelastPage));
        changeLastSequenceNumber = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeLastSequenceNumber));
        changeLastAmountCurDebit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeLastAmountCurDebit));
        changeLastAmountCurCredit = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerFiscalJournalContract_IT, parmChangeLastAmountCurCredit));

        changePageNumber.enabled(!allYear.value());
        changeSequenceNumber.enabled(!allYear.value());
        changeAmountCurDebit.enabled(!allYear.value());
        changeAmountCurCredit.enabled(!allYear.value());

        changelastPage.enabled(false);
        changeLastSequenceNumber.enabled(false);
        changeLastAmountCurDebit.enabled(false);
        changeLastAmountCurCredit.enabled(false);

        // disable following dialog fields by design
        lastPage.enabled(false);
        lastSequenceNumber.enabled(false);
        lastAmountCurDebit.enabled(false);
        lastAmountCurCredit.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAmountCurCreditChecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the events for the <c>changeAmountCurCredit</c> check box.
    /// </summary>
    /// <param name="_changeAmountCurCredit">
    ///    Changes the amount credit flag.
    /// </param>
    /// <returns>
    ///    true if event handler is executed successfully; otherwise, false.
    /// </returns>

    private boolean changeAmountCurCreditChecked(FormCheckBoxControl _changeAmountCurCredit)
    {
        if (_changeAmountCurCredit.modified() && changeAmountCurCredit.value())
        {
            changeLastAmountCurCredit.enabled(true);
        }
        else
        {
            changeLastAmountCurCredit.enabled(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAmountCurDebitChecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the events for the <c>changeAmountCurDedit</c> check box.
    /// </summary>
    /// <param name="_changeAmountCurDebit">
    ///    The change amount debit flag.
    /// </param>
    /// <returns>
    ///    true if event handler is executed successfully; false.
    /// </returns>

    private boolean changeAmountCurDebitChecked(FormCheckBoxControl _changeAmountCurDebit)
    {
        if (_changeAmountCurDebit.modified() && changeAmountCurDebit.value())
        {
            changeLastAmountCurDebit.enabled(true);
        }
        else
        {
            changeLastAmountCurDebit.enabled(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePageNumberChecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles events for the <c>changePageNumber</c> check box.
    /// </summary>
    /// <param name="_changePageNumber">
    ///    The change page number flag.
    /// </param>
    /// <returns>
    ///    true if event handler is executed successfully; otherwise, false.
    /// </returns>

    private boolean changePageNumberChecked(FormCheckBoxControl _changePageNumber)
    {
        if (_changePageNumber.modified() && changePageNumber.value())
        {
            changelastPage.enabled(true);
        }
        else
        {
            changelastPage.enabled(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSequenceNumberChecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the events for the <c>changeSequenceNumber</c> check box.
    /// </summary>
    /// <param name="_changeSequenceNumber">
    ///    The change sequence number flag.
    /// </param>
    /// <returns>
    ///    true if the event handler is executed successfully; otherwise, false.
    /// </returns>

    private boolean changeSequenceNumberChecked(FormCheckBoxControl _changeSequenceNumber)
    {
        if (_changeSequenceNumber.modified() && changeSequenceNumber.value())
        {
            changeLastSequenceNumber.enabled(true);
        }
        else
        {
            changeLastSequenceNumber.enabled(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles events for the From Date control.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date value.
    /// </param>
    /// <returns>
    ///    true if the event handler is executed successfully; otherwise, false.
    /// </returns>
    public boolean fromDateModified(FormDateControl _fromDate)
    {
        ledgerFiscalJournalContract_IT      contract;
        container                           lastReportValuesCon;

        if (_fromDate.modified() && fromDate.value())
        {
            // find the values from the last report
            lastReportValuesCon = LedgerFiscalJournalController_IT::getLastReportValues(fromDate.value());

            // update controls in the dialog
            lastPage.value(conPeek(lastReportValuesCon, 1));
            lastSequenceNumber.value(conPeek(lastReportValuesCon, 2));
            lastAmountCurDebit.value(conPeek(lastReportValuesCon, 3));
            lastAmountCurCredit.value(conPeek(lastReportValuesCon, 4));

            contract = this.dataContractObject() as ledgerFiscalJournalContract_IT;

            // update values in the contract class
            contract.parmLastPage(lastPage.value());
            contract.parmLastsequenceNumber(lastSequenceNumber.value());
            contract.parmLastAmountCurDebit(lastAmountCurDebit.value());
            contract.parmLastAmountCurCredit(lastAmountCurCredit.value());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Post run actions.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // register event handler for each checkbox control
        allYear.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, allyearchecked), this);
        changePageNumber.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, changePageNumberChecked), this);
        changeSequenceNumber.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, changeSequenceNumberChecked), this);
        changeAmountCurDebit.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, changeAmountCurDebitChecked), this);
        changeAmountCurCredit.registerOverrideMethod(methodstr(FormCheckBoxControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, changeAmountCurCreditChecked), this);

        fromDate.registerOverrideMethod(methodstr(FormDateControl, modified), methodstr(LedgerFiscalJournalUIBuilder_IT, fromDateModified), this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>