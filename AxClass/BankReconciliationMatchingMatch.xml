<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchingMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconciliationMatchingMatch</c> class contains business logic
///     for matching bank statement and bank document.
/// </summary>
[BankReconciliationMatchingAttribute(BankReconciliationMatchingType::Statement2Document)]
class BankReconciliationMatchingMatch
{
    BankReconciliationHeader reconciliationHeader;

    List entryList;
    List statementList;
    List documentList;
    List reversalStatementList;

    BankReconciliationMatchingType bankReconciliationMatchingType;
    BankReconciliationMatchRuleRefRecId matchRuleRecId;

    BankParameters bankParameters;
    BankAccountTable bankAccountTable;

    boolean isAutomation;
    boolean skipUpdateBankStatement;

    private TransDate bankTransClearedDate;
    private BankPaymentType paymentType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the given <c>BankReconciliationMatchingEntry</c> to list.
    /// </summary>
    /// <param name="_matchingEntry">
    ///     Given <c>BankReconciliationMatchingEntry</c>.
    /// </param>
    public void addEntry(BankReconciliationMatchingEntry _matchingEntry)
    {
        entryList.addEnd(_matchingEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReconciliationMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new <c>BankReconciliationMatching</c> record.
    /// </summary>
    /// <returns>
    ///     New created <c>BankReconciliationMatching</c> record.
    /// </returns>
    protected BankReconciliationMatching createReconciliationMatching()
    {
        BankReconciliationMatching  matching;

        BankReconciliationMatchingType matchingType = this.parmBankReconciliationMatchingType();
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())
            && matchingType == BankReconciliationMatchingType::Statement2Document)
        {
            // When the MBR feature is enabled, the matching type is displayed in the worksheet.
            // We need to identify the matching type of <c>GenerateCustPayment</c> and <c>GenerateVendPayment</c> in <c>Statement2Document</c>.
            // To avoid any potential breaking changes, we preserve the original matching type before creating the matching record.
            switch (this.parmPaymentType())
            {
                case BankPaymentType::CustPayment:
                    matchingType = BankReconciliationMatchingType::GenerateCustPayment;
                    break;
                case BankPaymentType::VendPayment:
                    matchingType = BankReconciliationMatchingType::GenerateVendPayment;
                    break;
                default:
                    break;
            }
        }

        matching.BankReconciliationMatchingType = matchingType;
        matching.BankReconciliationHeader = reconciliationHeader.RecId;

        if (matching.BankReconciliationHeader == 0 && matching.BankReconciliationMatchingType != BankReconciliationMatchingType::DocumentClear)
        {
            throw error("@CashManagement:BankReconsilationHeaderEmpty");
        }

        if (matchRuleRecId)
        {
            matching.BankReconciliationMatchRuleId = BankReconciliationMatchRule::find(matchRuleRecId).RuleId;
        }
        matching.insert();

        return matching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReconciliationMatchingItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create matching items for specified matching.
    /// </summary>
    /// <param name="_matching">
    ///     Given <c>BankReconciliationMatching</c> buffer.
    /// </param>
    protected void createReconciliationMatchingItems(BankReconciliationMatching _matching)
    {
        BankReconciliationMatchingItem  matchingItem;
        ListEnumerator                  enumerator;
        RecId                           recId;
        BankReconciliationMatchingEntry matchingEntry;

        enumerator = entryList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            matchingItem.clear();
            matchingItem.BankReconciliationMatching = _matching.RecId;
            recId = matchingEntry.parmRefRecId();

            if (matchingEntry.parmEntryType() == BankReconciliationMatchingEntryType::BankDocument)
            {
                matchingItem.BankDocumentTable = recId;
            }

            if (matchingEntry.parmEntryType() == BankReconciliationMatchingEntryType::BankStatement)
            {
                matchingItem.BankStmtISOReportEntry = recId;
            }
            matchingItem.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance of bank document.
    /// </summary>
    /// <returns>
    /// The balance of bank document.
    /// </returns>
    protected AmountCur getDocumentBalance()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        AmountCur                       documentBalance;
        AmountCur                       openAmountCur;

        enumerator = documentList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            // Exclude cancelled bank document from bank currency amount calculation when MBR feature is enabled.
            if (!FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()) || matchingEntry.parmIsReversal() == NoYes::No)
            {
                openAmountCur = matchingEntry.parmOpenAmountCur();
            }

            documentBalance += openAmountCur;
        }

        return documentBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance of bank statement.
    /// </summary>
    /// <returns>
    /// The balance of bank statement.
    /// </returns>
    protected AmountCur getStatementBalance()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        AmountCur                       statementBalance;
        AmountCur                       openAmountCur;

        enumerator = statementList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            openAmountCur = matchingEntry.parmOpenAmountCur();

            statementBalance += openAmountCur;
        }

        return statementBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Peforms initialization.
    /// </summary>
    protected void initialize()
    {
        ListEnumerator      enumerator;
        BankReconciliationMatchingEntry matchingEntry;

        bankParameters = BankParameters::find();
        bankAccountTable = BankAccountTable::find(reconciliationHeader.AccountId);

        statementList           = new List(Types::Class);
        documentList            = new List(Types::Class);
        reversalStatementList   = new List(Types::Class);

        enumerator = entryList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            switch (matchingEntry.parmEntryType())
            {
                case BankReconciliationMatchingEntryType::BankDocument:
                    documentList.addEnd(matchingEntry);
                    break;

                case BankReconciliationMatchingEntryType::BankStatement:
                    if (matchingEntry.parmIsReversal())
                    {
                        reversalStatementList.addEnd(matchingEntry);
                    }
                    statementList.addEnd(matchingEntry);
                    break;
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance())
            && this.parmBankReconciliationMatchingType() == BankReconciliationMatchingType::Statement2Document)
        {
            bankTransClearedDate = this.getStatementLinesRecentBookingDate(statementList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntryCounterMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the entry counter.
    /// </summary>
    /// <param name="_entryCount">
    /// The entry counter.
    /// </param>
    /// <returns>
    /// True if the entry counter meets the criteria; otherwise, false.
    /// </returns>
    protected boolean isEntryCounterMultiple(Counter _entryCount)
    {
        #define.Single(1)

        return _entryCount > #Single;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntryCounterNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the entry counter.
    /// </summary>
    /// <param name="_entryCount">
    /// The entry counter.
    /// </param>
    /// <returns>
    /// True if the entry counter meets the criteria; otherwise, false.
    /// </returns>
    protected boolean isEntryCounterNone(Counter _entryCount)
    {
        return _entryCount == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntryCounterNotNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the entry counter.
    /// </summary>
    /// <param name="_entryCount">
    /// The entry counter.
    /// </param>
    /// <returns>
    /// True if the entry counter meets the criteria; otherwise, false.
    /// </returns>
    protected boolean isEntryCounterNotNone(Counter _entryCount)
    {
        return _entryCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntryCounterSingle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the entry counter.
    /// </summary>
    /// <param name="_entryCount">
    /// The entry counter.
    /// </param>
    /// <returns>
    /// True if the entry counter meets the criteria; otherwise, false.
    /// </returns>
    protected boolean isEntryCounterSingle(Counter _entryCount)
    {
        #define.Single(1)

        return _entryCount == #Single;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Matched event handler.
    /// </summary>
    /// <param name="_statementList">
    ///     The list of statements.
    /// </param>
    /// <param name="_documentList">
    ///     The list
    /// </param>
    /// <param name="_matchingType">
    ///     Indicates which matching type will be processed.
    /// </param>
    delegate void matchedEventHandler(
        List    _statementList,
        List    _documentList,
        BankReconciliationMatchingType _matchingType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        entryList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationHeader</Name>
				<Source><![CDATA[
    public BankReconciliationHeader parmBankReconciliationHeader(BankReconciliationHeader _reconciliationHeader = reconciliationHeader)
    {
        reconciliationHeader = _reconciliationHeader;

        return reconciliationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationMatchingType</Name>
				<Source><![CDATA[
    private BankReconciliationMatchingType parmBankReconciliationMatchingType(BankReconciliationMatchingType _bankReconciliationMatchingType = bankReconciliationMatchingType)
    {
        bankReconciliationMatchingType = _bankReconciliationMatchingType;

        return bankReconciliationMatchingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAutomation</Name>
				<Source><![CDATA[
    public boolean parmIsAutomation(boolean _isAutomation = isAutomation)
    {
        isAutomation = _isAutomation;

        return isAutomation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchRuleRecId</Name>
				<Source><![CDATA[
    public BankReconciliationMatchRuleRefRecId parmMatchRuleRecId(BankReconciliationMatchRuleRefRecId _matchRuleRecId = matchRuleRecId)
    {
        matchRuleRecId = _matchRuleRecId;

        return matchRuleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdateBankStatement</Name>
				<Source><![CDATA[
    internal boolean parmSkipUpdateBankStatement(boolean _skipUpdateBankStatement = skipUpdateBankStatement)
    {
        skipUpdateBankStatement = _skipUpdateBankStatement;

        return skipUpdateBankStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentType</Name>
				<Source><![CDATA[
    internal BankPaymentType parmPaymentType(BankPaymentType _paymentType = paymentType)
    {
        paymentType = _paymentType;

        return paymentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs matching process.
    /// </summary>
    /// <returns>
    ///     True if the matching succeeds; otherwise, false.
    /// </returns>
    public boolean processMatch()
    {
        BankReconciliationMatching  matching;
        boolean                     isSuccess;

        this.initialize();

        if (this.validate())
        {
            ttsBegin;
            matching = this.createReconciliationMatching();
            this.createReconciliationMatchingItems(matching);
            this.updateImpactedMatchingEntries();

            this.matchedEventHandler(statementList, documentList, this.parmBankReconciliationMatchingType());
            isSuccess = true;
            ttsCommit;
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the bank document involved in the matching.
    /// </summary>
    /// <param name="_documentList">
    ///     The bank document list.
    /// </param>
    /// <param name="_matchingType">
    ///     Indicates which matching type will be updated.
    /// </param>
    protected void updateBankDocument(
        List                            _documentList,
        BankReconciliationMatchingType  _matchingType)
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;

        AmountCur                       statementBalance;
        AmountCur                       documentBalance;
        AmountCur                       amountDifference;

        statementBalance = this.getStatementBalance();
        documentBalance = this.getDocumentBalance();
        amountDifference = statementBalance - documentBalance;

        enumerator = documentList.getEnumerator();
        if (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            //update correction amount
            BankDocumentTable::updateCorrectionBankCurrencyAmount(matchingEntry.parmRefRecId(), amountDifference);

            if (FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance())
                && _matchingType == BankReconciliationMatchingType::DocumentClear)
            {
                BankAccountTrans bankAccountTrans = BankAccountTrans::findByRecId_CN(BankDocumentTable::find(matchingEntry.parmRefRecId()).SourceRecId);

                enumerator.moveNext();
                matchingEntry = enumerator.current();

                BankAccountTrans bankAccountTransMatched = BankAccountTrans::findByRecId_CN(BankDocumentTable::find(matchingEntry.parmRefRecId()).SourceRecId);

                TransDate recentTransDate = bankAccountTrans.TransDate <= bankAccountTransMatched.TransDate ? bankAccountTransMatched.TransDate : bankAccountTrans.TransDate;

                bankAccountTrans.updateClearedDate(recentTransDate);
                bankAccountTransMatched.updateClearedDate(recentTransDate);
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance())
            && _matchingType == BankReconciliationMatchingType::Statement2Document)
        {
            enumerator.reset();
            while (enumerator.moveNext())
            {
                matchingEntry = enumerator.current();
                BankAccountTrans::updateBankTransClearedDates(bankTransClearedDate, matchingEntry.parmRefRecId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the statement status of matched statement line.
    /// </summary>
    /// <param name="_statementList">
    ///     The statement line list.
    /// </param>
    /// <param name="_matchingType">
    ///     Indicates which matching type will be updated.
    /// </param>
    protected void updateBankStatement(
        List                            _statementList,
        BankReconciliationMatchingType  _matchingType)
    {
        ListEnumerator enumerator;
        BankReconciliationMatchingEntry matchingEntry;

        ttsBegin;

        enumerator = _statementList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            BankStmtISOReportEntry::find(matchingEntry.parmRefRecId()).getStatement().refreshMatchingStatus();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankStatementDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the bank statement which is marked as document.
    /// </summary>
    /// <param name="_statementList">
    ///     The impacted statement list.
    /// </param>
    /// <param name="_matchingType">
    ///     The matching type.
    /// </param>
    protected void updateBankStatementDocument(
        List                            _statementList,
        BankReconciliationMatchingType  _matchingType)
    {
        ListEnumerator enumerator;
        BankReconciliationMatchingEntry matchingEntry;

        ttsBegin;

        if (_matchingType == BankReconciliationMatchingType::SingleStatement)
        {
            enumerator = _statementList.getEnumerator();
            while (enumerator.moveNext())
            {
                matchingEntry = enumerator.current();
                BankStmtISOReportEntry::markNewBankDocument(matchingEntry.parmRefRecId(), true);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImpactedMatchingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates impacted entries involved in the matching.
    /// </summary>
    protected void updateImpactedMatchingEntries()
    {
        if (!this.parmskipUpdateBankStatement())
        {
            this.updateBankStatement(statementList, this.parmBankReconciliationMatchingType());
        }
        this.updateBankStatementDocument(statementList, this.parmBankReconciliationMatchingType());
        this.updateBankDocument(documentList, this.parmBankReconciliationMatchingType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs validations.
    /// </summary>
    /// <returns>
    ///     True if all validations are passed; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean                         ret = true;

        if (!entryList.elements())
        {
            return this.validateError("@GLS221614");
        }

        //perfrom critical validation
        ret =   this.validateExistingMatch()
                && this.validateStatementValidForMatching();

        if (ret)
        {
            ret = this.validateCounter();
            ret = this.validateBalance() && ret;
            ret = this.validateIsReconciled() && ret;
            //Only when the below parameter is enabled, we check the date difference
            if (bankParameters.CheckReconciliationMatchingDiffDays)
            {
                ret = this.validateDate() && ret;
            }
            //Only when the below parameter is enabled, we check the transaction type
            if (bankParameters.CheckReconciliationMatchingTransType)
            {
                ret = this.validateBankTransType() && ret;
            }
            ret = this.validateBankDocumentReversalType() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the balances of bank statment and document are the same.
    /// </summary>
    /// <returns>
    ///     True if the balances of bank statement and document are the same; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Balances can be zero if a pair of reversal entry and orginal entry are selected on one side.
    /// </remarks>
    protected boolean validateBalance()
    {
        boolean                         ret = true;
        AmountCur                       statementBalance;
        AmountCur                       documentBalance;
        AmountCur                       amountDifference;

        statementBalance = this.getStatementBalance();
        documentBalance = this.getDocumentBalance();
        amountDifference = abs(statementBalance - documentBalance);

        if (amountDifference > bankAccountTable.BankReconAllowedPennyDifference)
        {
            ret = this.validateError(strFmt("@SYS4082363",
                                        statementBalance,
                                        documentBalance));
        }

        if (ret
            && amountDifference != 0)
        {
            ret = this.validateCorrection();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankDocumentReversalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether all document reversal status for all document entries are the same.
    /// </summary>
    /// <returns>
    ///     True if all document entries have the same document reversal status; otherwise, false.
    /// </returns>
    protected boolean validateBankDocumentReversalType()
    {
        boolean             result = true;
        ListEnumerator      enumerator;
        BankReconciliationMatchingEntry matchingEntry;

        enumerator = documentList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            if (matchingEntry.parmIsReversal())
            {
                //The bank document is cancelled.
                result = this.validateError("@GLS221891");
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether bank transaction types for all entries are the same.
    /// </summary>
    /// <returns>
    ///     True if all entries have the same bank transaction types; otherwise, false.
    /// </returns>
    protected boolean validateBankTransType()
    {
        ListEnumerator                      enumerator;
        BankTransactionType                 bankTransTypeOfBankDocument;
        BankReconciliationMatchingEntry     matchingEntry;
        boolean                             isTransactionTypeSame = true;
        boolean                             isTargetTransactionTypeInit;

        //check all the bank document transaction type are the same
        enumerator = documentList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            if (!isTargetTransactionTypeInit)
            {
                bankTransTypeOfBankDocument = matchingEntry.parmBankTransType();
                isTargetTransactionTypeInit = true;
            }
            else
            {
                if (matchingEntry.parmBankTransType() != bankTransTypeOfBankDocument)
                {
                    //Bank transaction type is not the same.
                    isTransactionTypeSame = this.validateError("@GLS221617");
                    break;
                }
            }
        }

        //check all the bank statement line transaction types are same
        if (isTransactionTypeSame)
        {
            enumerator = statementList.getEnumerator();
            while (enumerator.moveNext())
            {
                matchingEntry = enumerator.current();

                if (matchingEntry.parmBankTransType() != bankTransTypeOfBankDocument)
                {
                    //Bank transaction type is not the same.
                    isTransactionTypeSame = this.validateError("@GLS221617");
                    break;
                }
            }
        }

        return isTransactionTypeSame;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates correction.
    /// </summary>
    /// <returns>
    /// True if the correction is working; otherwise, false.
    /// </returns>
    protected boolean validateCorrection()
    {
        boolean                         ret = true;
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        BankDocumentDocType             bankDocumentDocType;

        //validate the document type
        if (ret)
        {
            enumerator = documentList.getEnumerator();
            if (enumerator.moveNext())
            {
                matchingEntry = enumerator.current();

                bankDocumentDocType = BankDocumentDocType::construct(BankDocumentTable::find(matchingEntry.parmRefRecId()).BankDocumentBookType);
                if (!bankDocumentDocType.isAllowedCorrection())
                {
                    ret = this.validateError(strFmt("@SYS4082366", bankDocumentDocType.getBankDocumentType()));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCounter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the counter of selected entries for matching are correct.
    /// </summary>
    /// <returns>
    ///     True if the number of entries is valid, otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns true if there is just only one bank statement line and more than one bank documents.
    /// </remarks>
    protected boolean validateCounter()
    {
        boolean ret = true;

        if (this.isEntryCounterNotNone(statementList.elements()))
        {
            if (this.isEntryCounterNone(documentList.elements()))
            {
                ret = this.validateError("@GLS221618");
            }
        }
        else
        {
            ret = this.validateError("@SYP4986048");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether transaction dates for all entries are in the range of
    ///     "Allowed different days for manual matching".
    /// </summary>
    /// <returns>
    ///     True if transaction dates for all entries are in the range of
    ///     allowed different days for manual matching; otherwise, false.
    /// </returns>
    protected boolean validateDate()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        TransDate                       minOrigStatementDate;
        TransDate                       maxOrigStatementDate;
        TransDate                       minReversalStatementDate;
        TransDate                       maxReversalStatementDate;
        TransDate                       minCompareStatementDate;
        TransDate                       maxCompareStatementDate;
        TransDate                       minDocumentDate;
        TransDate                       maxDocumentDate;
        TransDate                       dateLocal;

        int                             dateDifference = 0;
        boolean                         ret = true;

        enumerator = entryList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            switch (matchingEntry.parmEntryType())
            {
                case BankReconciliationMatchingEntryType::BankDocument:
                    dateLocal = matchingEntry.parmDocumentDate();
                    if (!minDocumentDate
                        || minDocumentDate > dateLocal)
                    {
                        minDocumentDate = dateLocal;
                    }

                    if (!maxDocumentDate
                        || maxDocumentDate < dateLocal)
                    {
                        maxDocumentDate = dateLocal;
                    }

                    break;

                case BankReconciliationMatchingEntryType::BankStatement:
                    dateLocal = matchingEntry.parmDocumentDate();
                    if (matchingEntry.parmIsReversal())
                    {
                        if (!minReversalStatementDate
                            || minReversalStatementDate > dateLocal)
                        {
                            minReversalStatementDate = dateLocal;
                        }

                        if (!maxReversalStatementDate
                            || maxReversalStatementDate < dateLocal)
                        {
                            maxReversalStatementDate = dateLocal;
                        }
                    }
                    else
                    {
                        if (!minOrigStatementDate
                            || minOrigStatementDate > dateLocal)
                        {
                            minOrigStatementDate = dateLocal;
                        }

                        if (!maxOrigStatementDate
                            || maxOrigStatementDate < dateLocal)
                        {
                            maxOrigStatementDate = dateLocal;
                        }
                    }

                    break;
            }
        }

        if (minReversalStatementDate && maxReversalStatementDate)
        {
            minCompareStatementDate = minReversalStatementDate;
            maxCompareStatementDate = maxReversalStatementDate;

            if (minOrigStatementDate && maxOrigStatementDate)
            {
                //check the difference between the date of reversal line and the date of original line.
                dateDifference = max(abs (maxCompareStatementDate - minOrigStatementDate), abs (minCompareStatementDate - maxOrigStatementDate));
                if (dateDifference > bankParameters.AllowedReconciliationMatchingMaxDiffDays)
                {
                    ret = this.validateError(strFmt(
                        "@GLS221620",
                        dateDifference,
                        bankParameters.AllowedReconciliationMatchingMaxDiffDays));
                }
            }
        }
        else if (minOrigStatementDate && maxOrigStatementDate)
        {
            minCompareStatementDate = minOrigStatementDate;
            maxCompareStatementDate = maxOrigStatementDate;
        }

        //check the difference between the date of bank document and the statement line.
        if (minDocumentDate && maxDocumentDate && minCompareStatementDate && maxCompareStatementDate)
        {
            dateDifference = max(abs (maxDocumentDate - minCompareStatementDate), abs (minDocumentDate - maxCompareStatementDate));
            if (dateDifference > bankParameters.AllowedReconciliationMatchingMaxDiffDays)
            {
                ret = this.validateError(strFmt(
                    "@GLS221620",
                    dateDifference,
                    bankParameters.AllowedReconciliationMatchingMaxDiffDays));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns false without infolog when matching is automation; Otherwise, Adds infolog.
    /// </summary>
    /// <param name="_txt">
    ///     Infolog text.
    /// </param>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    protected boolean validateError(SysInfoLogStr _txt)
    {
        if (!isAutomation)
        {
            return checkFailed(_txt);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether there is any existing matching.
    /// </summary>
    /// <returns>
    ///     Whether there is any existing matching; otherwise, false.
    /// </returns>
    protected boolean validateExistingMatch()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator  enumerator;
        boolean         result = true;

        enumerator = entryList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            switch (matchingEntry.parmEntryType())
            {
                case BankReconciliationMatchingEntryType::BankDocument:
                    if (BankReconciliationMatchingItem::findValidByDocumentRecId(matchingEntry.parmRefRecId()))
                    {
                        //The bank document or statement line is already matched.
                        result = this.validateError("@GLS221892");
                    }
                    break;

                case BankReconciliationMatchingEntryType::BankStatement:
                    if (BankReconciliationMatchingItem::findValidByStatementLineRecId(matchingEntry.parmRefRecId()))
                    {
                        //The bank document or statement line is already matched.
                        result = this.validateError("@GLS221892");
                    }
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsReconciled</Name>
				<Source><![CDATA[
    protected boolean validateIsReconciled()
    {
        boolean ret = true;

        if (reconciliationHeader.IsReconciled)
        {
            ret = this.validateError("@CashManagement:AdvancedBankReconciliationStatementReconciled");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatementValidForMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the statement lines are valid for matching.
    /// </summary>
    /// <returns>
    /// True if the statement lines are valid for macthing; otherwise, false.
    /// </returns>
    protected boolean validateStatementValidForMatching()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        boolean                         result = true;
        BankStmtISOReportEntry          statementLine;
        BankStmtISOAccountStatement     statement;

        enumerator = statementList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            //check the statement status
            statementLine = BankStmtISOReportEntry::find(matchingEntry.parmRefRecId());
            statement = statementLine.getStatement();
            if (!statement.isPassedValidation())
            {
                //Bank statement %1 is not validated.
                result = this.validateError(strFmt("@SYS4081983", statement.Identification));
                break;
            }

            //check the statement new document flag
            if (statementLine.isNewBankDocument()
                && this.parmBankReconciliationMatchingType() != BankReconciliationMatchingType::SingleStatement)
            {
                //The bank statement line is already marked as new.
                result = this.validateError("@SYS4081984");
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs the instance of the <c>BankReconciliationMatchingMatch</c> class by given <c>BankReconciliationHeader</c> buffer.
    /// </summary>
    /// <param name="_reconciliationHeader">
    ///     Given <c>BankReconciliationHeader</c> buffer.
    /// </param>
    /// <param name="_matchingType">
    ///     Indicates which matching type will be constructed.
    /// </param>
    /// <returns>
    ///     An instance of the <c>BankReconciliationMatchingMatch</c> class.
    /// </returns>
    public static BankReconciliationMatchingMatch construct(
        BankReconciliationHeader        _reconciliationHeader,
        BankReconciliationMatchingType  _matchingType)
    {
        BankReconciliationMatchingMatch matchingMatch;

        matchingMatch = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(BankReconciliationMatchingMatch),
            new BankReconciliationMatchingAttribute(_matchingType));

        matchingMatch.parmBankReconciliationHeader(_reconciliationHeader);
        matchingMatch.parmBankReconciliationMatchingType(_matchingType);

        return matchingMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementLinesRecentBookingDate</Name>
				<Source><![CDATA[
    private TransDate getStatementLinesRecentBookingDate(List _statementList)
    {
        TransDate recentDate;
        ListEnumerator enumerator = _statementList.getEnumerator();

        while (enumerator.moveNext())
        {
            BankReconciliationMatchingEntry matchingEntry = enumerator.current();
            recentDate = max(recentDate, matchingEntry.parmDocumentDate());
        }

        return recentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>