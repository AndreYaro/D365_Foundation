<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesMultipleInvoiceTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSalesMultipleInvoiceTotals</c> calculates invoiced
/// amounts when an order is invoiced more than once.
/// </summary>
class MCRSalesMultipleInvoiceTotals
{
    CustInvoiceJour     custInvoiceJour;

    Map                 mapBalance;        // SalesId to balance (sum of lines)
    Map                 mapMarkup;         // SalesId to markup amount
    Map                 mapTax;            // SalesId to tax amount
    Map                 mapEndDiscPercent; // SalesId to end disc percentage
    Map                 mapEndDiscBalance; // SalesId to balance for end discount
    Map                 mapEndDiscAmount;  // SalesId to calculated end disc amount
    Map                 mapMarkupList;     // SalesId to list of MarkupTrans records

    boolean             calculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates every order's contribution to the summary invoice, who is part of the summary invoice.
    /// </summary>
    /// <remarks>
    ///     Assumes TaxParameter.TaxSpecifyLine is on which populates the tax amount for
    ///     CustInvoiceTrans and MarkupTrans records.  This assumption enforce in
    ///     SalesFormLetter validate.
    ///     Usies a series of maps with SalesId as key, cycle through invoice lines and
    ///     misc charges just once, and add each charge to the appropriate bucket in the
    ///     appropriate map.
    /// </remarks>
    private void calc()
    {
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceSalesLink    custInvoiceSalesLink;
        InventTableModule       inventTableModule;
        MarkupTrans             markUpTrans;
        SalesTable              salesTable;

        MapEnumerator           mapEnum;
        SalesId                 salesIdSummary;

        // For end discount amount calculation
        SalesEndDiscAmount      endDiscAmount;
        AmountCur               endDiscBalance;
        SalesEndDiscPct         endDiscPercent;

        void addAmountToMap(Map     _map,
                            SalesId _salesIdKey,
                            real    _amount)
        {
            real amount;
            if (_map.exists(_salesIdKey))
            {
                amount = _map.lookup(_salesIdKey);
            }
            amount += _amount;
            _map.insert(_salesIdKey, amount);
        }

        void addMarkupTrans(SalesId     _salesIdKey,
                            MarkupTrans _markupTrans)
        {
            RecordSortedList recordList;

            if (mapMarkupList.exists(_salesIdKey))
            {
                recordList = mapMarkupList.lookup(_salesIdKey);
            }
            else
            {
                recordList = new RecordSortedList(tableNum(MarkupTrans));
                recordList.sortOrder(fieldNum(MarkupTrans, RecId));
            }
            recordList.ins(_markupTrans);
            mapMarkupList.insert(_salesIdKey, recordList);
        }

        salesIdSummary = this.getCustInvoiceJour().SalesId;

        // Store discount percent of every order that is part of summary invoice
        while select RecId from custInvoiceSalesLink
            where custInvoiceSalesLink.InvoiceId == this.getCustInvoiceJour().InvoiceId
            join RecId, SalesId, DiscPercent from salesTable
                where custInvoiceSalesLink.OrigSalesId == salesTable.SalesId
        {
            if (!mapEndDiscPercent.exists(salesTable.DiscPercent))
            {
                mapEndDiscPercent.insert(salesTable.SalesId, salesTable.DiscPercent);
            }
        }

        // Add every invoice line that came from the order
        while select ItemId, LineAmount, TaxAmount, OrigSalesId from custInvoiceTrans
            where custInvoiceTrans.SalesId     == salesIdSummary
               && custInvoiceTrans.InvoiceDate == this.getCustInvoiceJour().InvoiceDate
               && custInvoiceTrans.InvoiceId   == this.getCustInvoiceJour().InvoiceId
            join EndDisc from inventTableModule
                where inventTableModule.ItemId     == custInvoiceTrans.ItemId
                   && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        {
            addAmountToMap(mapBalance,
                           custInvoiceTrans.OrigSalesId,
                           custInvoiceTrans.LineAmount);

            addAmountToMap(mapTax,
                           custInvoiceTrans.OrigSalesId,
                           custInvoiceTrans.TaxAmount);

            // If item qualifies for total discount add line amount to amount that
            // qualifies for end discount
            if (inventTableModule.EndDisc)
            {
                addAmountToMap(mapEndDiscBalance,
                               custInvoiceTrans.OrigSalesId,
                               custInvoiceTrans.LineAmount);
            }
        }

        // Add every misc charge on the summary invoice that originally linked to
        // SalesLine but is now linked to invoice lines
        while select markupTrans
            join OrigSalesId, TaxAmount from custInvoiceTrans
                where markupTrans.TransRecId       == custInvoiceTrans.RecId
                   && markupTrans.TransTableId     == custInvoiceTrans.TableId
                   && custInvoiceTrans.SalesId     == salesIdSummary
                   && custInvoiceTrans.InvoiceDate == this.getCustInvoiceJour().InvoiceDate
                   && custInvoiceTrans.InvoiceId   == this.getCustInvoiceJour().InvoiceId
        {
            addAmountToMap(mapMarkup,
                           custInvoiceTrans.OrigSalesId,
                           markupTrans.CalculatedAmount);
            addAmountToMap(mapTax,
                           custInvoiceTrans.OrigSalesId,
                           markupTrans.TaxAmount);
            addMarkupTrans(custInvoiceTrans.OrigSalesId, markupTrans);
        }

        // Add every misc charge on the summary invoice that originally linked to
        // SalesTable but is now linked to invoice journal record
        while select markupTrans
            where markupTrans.TransRecId   == this.getCustInvoiceJour().RecId
               && markupTrans.TransTableId == this.getCustInvoiceJour().TableId
            join firstOnly SalesId from salesTable
                where salesTable.RecId    == markupTrans.MCRSavedRecID
        {
            addAmountToMap(mapMarkup,
                           salesTable.SalesId,
                           markupTrans.CalculatedAmount);
            addAmountToMap(mapTax,
                           salesTable.SalesId,
                           markupTrans.TaxAmount);
            addMarkupTrans(salesTable.SalesId, markupTrans);
        }

        // Calculate each order's total discount amount
        mapEnum = mapEndDiscBalance.getEnumerator();
        while (mapEnum.moveNext())
        {
            // If percentage of end discount then calculate end disc amount.  Should always
            // be true.  Silently failing if not true.
            if (mapEndDiscPercent.exists(mapEnum.currentKey()))
            {
                endDiscBalance = mapEnum.currentValue();
                endDiscPercent = mapEndDiscPercent.lookup(mapEnum.currentKey());
                endDiscAmount  = endDiscPercent * endDiscBalance / 100;
                endDiscAmount  = CurrencyExchangeHelper::amount(endDiscAmount, this.getCustInvoiceJour().CurrencyCode);
                addAmountToMap(mapEndDiscAmount,
                               mapEnum.currentKey(),
                               endDiscAmount);
            }
        }

        // Record that calculation has now occurred
        this.parmCalculated(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns balance portion of summary invoice for the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose balance is being calculated.
    /// </param>
    /// <returns>
    ///     The balance portion of the summary invoice.
    /// </returns>
    /// <remarks>
    ///     Balance is sum of lines and does not include taxes or misc charges.
    ///     Similar naming as TradeTotals.
    ///     Corresponds to 'prodcut' total with MCRSalesOrderTotals.
    /// </remarks>
    public AmountCur getBalance(SalesId _salesId)
    {
        AmountCur balance;

        if (!this.parmCalculated())
        {
            this.calc();
        }
        if (mapBalance.exists(_salesId))
        {
            balance = mapBalance.lookup(_salesId);
        }
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJour</Name>
				<Source><![CDATA[
    private CustInvoiceJour getCustInvoiceJour()
    {
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns order discount portion of summary invoice for the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose end discount is being calculated.
    /// </param>
    /// <returns>
    ///     The order discount portion of summary invoice for sales order.
    /// </returns>
    public SalesEndDiscAmount getEndDisc(SalesId _salesId)
    {
        SalesEndDiscAmount  endDiscAmount;

        if (!this.parmCalculated())
        {
            this.calc();
        }
        if (mapEndDiscAmount.exists(_salesId))
        {
            endDiscAmount = mapEndDiscAmount.lookup(_salesId);
        }
        return endDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns misc charge portion of summary invoice for the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose markup is being calculated.
    /// </param>
    /// <returns>
    ///     The misc charge portion of summary invoice for the sales order.
    /// </returns>
    public AmountCur getMarkup(SalesId _salesId)
    {
        AmountCur markupAmount;

        if (!this.parmCalculated())
        {
            this.calc();
        }
        if (mapMarkup.exists(_salesId))
        {
            markupAmount = mapMarkup.lookup(_salesId);
        }
        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a list of misc charges that were on summary invoice but originated from the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose markup is being calculated.
    /// </param>
    /// <returns>
    ///     A list of misc charges that were on summary invoice but originated from the sales order.
    /// </returns>
    public RecordSortedList getMarkupList(SalesId _salesId)
    {
        RecordSortedList recordSortedList;

        if (!this.parmCalculated())
        {
            this.calc();
        }
        if (mapMarkupList.exists(_salesId))
        {
            recordSortedList = mapMarkupList.lookup(_salesId);
        }
        else
        {
            // Build and return an empty list
            recordSortedList = new RecordSortedList(tableNum(MarkupTrans));
            recordSortedList.sortOrder(fieldNum(MarkupTrans, RecId));
        }
        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns tax portion of summary invoice for the sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose tax is being calculated.
    /// </param>
    /// <returns>
    ///     The tax portion of summary invoice for the sales order.
    /// </returns>
    public TaxAmountCur getTax(SalesId _salesId)
    {
        TaxAmountCur taxAmount;

        if (!this.parmCalculated())
        {
            this.calc();
        }
        if (mapTax.exists(_salesId))
        {
            taxAmount = mapTax.lookup(_salesId);
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the sum of line amounts, misc charges, and taxes minus
    ///     the end discount amount.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the record whose total is being calculated.
    /// </param>
    /// <returns>
    ///     The sum of line amounts, misc charges, and taxes minus
    ///     the end discount amount.
    /// </returns>
    public AmountCur getTotal(SalesId _salesId)
    {
        AmountCur           balance;
        AmountCur           markup;
        AmountCur           tax;
        AmountCur           endDiscount;
        AmountCur           total;

        if (!this.parmCalculated())
        {
            this.calc();
        }

        total = 0;
        // Add balance (sum of lines)
        if (mapBalance.exists(_salesId))
        {
            balance = this.getBalance(_salesId);
        }

        // Add markup
        if (mapMarkup.exists(_salesId))
        {
            markup = this.getMarkup(_salesId);
        }

        // Add taxes
        if (mapTax.exists(_salesId))
        {
            tax = this.getTax(_salesId);
        }

        // Subtract discount from total
        if (mapEndDiscAmount.exists(_salesId))
        {
            endDiscount = this.getEndDisc(_salesId);
        }

        total = balance + markup + tax;
        total -= endDiscount;
        total = CurrencyExchangeHelper::amount(total, this.getCustInvoiceJour().CurrencyCode);
        total = CurrencyExchange::roundWithRuleType(total,
                                                this.getCustInvoiceJour().CurrencyCode,
                                                CurrencyRoundingRuleType::SalesOrder);
        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables for the <c>MCRSalesMultipleInvoiceTotals</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The customer invoice journal record to use in initializing the class variables.
    /// </param>
    protected void new(CustInvoiceJour _custInvoiceJour)
    {
        Types  keyType;

        custInvoiceJour.data(_custInvoiceJour);
        this.parmCalculated(false);
        keyType = typeName2Type(extendedTypeStr(SalesId));

        mapBalance         = new Map(keyType, Types::Real);
        mapMarkup          = new Map(keyType, Types::Real);
        mapTax             = new Map(keyType, Types::Real);
        mapEndDiscPercent  = new Map(keyType, Types::Real);
        mapEndDiscBalance  = new Map(keyType, Types::Real);
        mapEndDiscAmount   = new Map(keyType, Types::Real);
        mapMarkupList      = new Map(keyType, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets class variable that indicates whether calculation has been
    ///     performed.
    /// </summary>
    /// <param name="_calculated">
    ///     The value to set the class variable; optional.
    /// </param>
    /// <returns>
    ///     The class' value of the calculated flag.
    /// </returns>
    private boolean parmCalculated(boolean _calculated = calculated)
    {
        calculated = _calculated;
        return calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRSalesMultipleInvoiceTotals</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The customer invoice journal from which this class is initialized.
    /// </param>
    /// <returns>
    /// The newly created instance of the <c>MCRSalesMultipleInvoiceTotals</c> class.
    /// </returns>
    public static MCRSalesMultipleInvoiceTotals construct(CustInvoiceJour _custInvoiceJour)
    {
        return new MCRSalesMultipleInvoiceTotals(_custInvoiceJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
