<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaym</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInPaym extends RunBase implements CustVendBankPaymFormat
{
    NumberSeq numberSeq;

    LedgerJournalTrans ledgerJournalTrans;
    BankAccountTable bankAccountTable;

    AsciiStreamIo asciiFile;

    Voucher voucher;
    LedgerJournalId ledgerJournalId;
    RefRecId numberSeqId;
    PaymMode paymMode;

    NoYes insertIncorrectRecords;
    Filename filename;
    System.IO.Stream stream;
    LedgerAccount offsetAccount;

    DialogField dialogInsertIncorrectRecords;
    DialogField dialogOffsetAccount;
    DialogField dialogPaymMode;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        offsetAccount,
        filename,
        insertIncorrectRecords,
        paymMode,
        ledgerJournalId
    #endmacro

    #localmacro.ListVersion1
        offsetAccount,
        filename,
        insertIncorrectRecords
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(BankElectronicBanking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the record in the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name = "_ledgerJournalTransImport">
    ///     A instance of <c>LedgerJournalTransImport</c> class.
    /// </param>
    /// <param name = "_insert">
    ///    A <c>UnknownNoYes</c> enumeration value.
    /// </param>
    /// <returns>
    ///     The error text.
    /// </returns>
    protected ErrorTxt createLedgerJournalTrans(
        LedgerJournalTransImport _ledgerJournalTransImport,
        UnknownNoYes _insert = UnknownNoYes::Unknown)
    {
        ErrorTxt errorTxt;
        CustTable custTable;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTransManager specTransManager;
        AmountCur settleAmountCur;
        DiscDate calcDiscDate;
        DiscGraceDays discGraceDays;

        LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();

        ledgerJournalTrans.clear();
        ledgerJournalTrans.JournalNum = ledgerJournalId;
        ledgerJournalTrans.PaymMode = paymMode;
        ledgerJournalTrans.LoadingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.TransDate = _ledgerJournalTransImport.transDate();

        ledgerJournalTrans.parmAccount(_ledgerJournalTransImport.accountNum(), LedgerJournalACType::Cust, curext());
        ledgerJournalTrans.OffsetCompany = curext();
        ledgerJournalTrans.OffsetAccountType = CustPaymModeTable::find(paymMode).AccountType;
        ledgerJournalTrans.parmOffsetLedgerDimension(CustPaymModeTable::find(paymMode).PaymentLedgerDimension);

        ledgerJournalTrans.TransactionType = LedgerTransType::Cust;
        ledgerJournalTrans.CurrencyCode = _ledgerJournalTransImport.currencyCode();
        ledgerJournalTrans.AmountCurCredit = _ledgerJournalTransImport.amountCurCredit();
        ledgerJournalTrans.AmountCurDebit = _ledgerJournalTransImport.amountCurDebit();
        ledgerJournalTrans.Triangulation = Currency::triangulation(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);

        if (Ledger::reportingCurrency())
        {
            [ledgerJournalTrans.ReportingCurrencyExchRate, ledgerJournalTrans.ReportingCurrencyExchRateSecondary] = CustInPaym::calculateReportingCurrencyExchRate(
                Ledger::reportingCurrencyExchangeRateType(),
                ledgerJournalTrans.CurrencyCode,
                Ledger::reportingCurrency(),
                ledgerJournalTrans.TransDate);
        }

        ledgerJournalTrans.SettleVoucher = this.findAutomaticSettlementType();
        ledgerJournalTrans.MarkedInvoice = _ledgerJournalTransImport.invoice();
        ledgerJournalTrans.Txt = _ledgerJournalTransImport.txt();

        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);

        if (!ledgerJournalTrans.parmLedgerDimension())
        {
            errorTxt = "@SYS68580";
        }
        else if (!ledgerJournalTrans.MarkedInvoice || strlen(strltrim(LedgerJournalTrans.MarkedInvoice)) == 0)
        {
            errorTxt = "@SYS24539";
        }
        else
        {
            custTable = CustTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension());
            if (custTable)
            {
                ledgerJournalTrans.TaxGroup = custTable.TaxGroup;
                ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
                ledgerJournalTrans.Payment = custTable.PaymTermId;

                select firstonly custTrans
                    where custTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && custTrans.Invoice == ledgerJournalTrans.MarkedInvoice;

                if (custTrans)
                {
                    ledgerJournalTrans.CustTransId = custTrans.RecId;
                    ledgerJournalTrans.Txt = custTrans.Txt;

                    select firstonly custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId;

                    if (custTransOpen)
                    {
                        ledgerJournalTrans.Due = custTransOpen.DueDate;
                    }
                    else
                    {
                        errorTxt = "@SYS68581";
                    }
                }
                else
                {
                    errorTxt = strfmt("@SYS68582",ledgerJournalTrans.MarkedInvoice);
                }
            }
            else
            {
                errorTxt = strfmt("@SYS16734",ledgerJournalTrans.parmAccount());
            }
        }

        if (errorTxt)
        {
            ledgerJournalTrans.PaymId = _ledgerJournalTransImport.paymId();
        }
        else
        {
            if (custTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
            {
                // check whether the amount is correct (consider cash discount and maximum over-/underpayment)
                if (custTransOpen.CashDiscDate > ledgerJournalTrans.TransDate)
                {
                    if (ledgerJournalTrans.amount() != custTransOpen.AmountCur - custTransOpen.PossibleCashDisc
                        && ledgerJournalTrans.amount() - custTransOpen.AmountCur + custTransOpen.PossibleCashDisc
                        > CustParameters::find().MaxMSTOverUnder)
                    {
                        errorTxt = "@SYS68583";
                    }
                }
                else
                {
                    if (ledgerJournalTrans.amount() != custTransOpen.AmountCur
                        && ledgerJournalTrans.amount() - custTransOpen.AmountCur > CustParameters::find().MaxMSTOverUnder)
                    {
                        errorTxt = "@SYS68584";
                    }
                }
            }
            else
            {
                errorTxt = "@SYS119481";
            }
        }

        if (_insert == UnknownNoYes::Yes || (_insert == UnknownNoYes::Unknown && errorTxt == ""))
        {
            this.loadVoucherNum();
            ledgerJournalTrans.Voucher = voucher;

            ledgerJournalTrans.insert();

            if (custTransOpen)
            {
                // marking of the transaction for settlement
                specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

                if (specTransManager.exist(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId))
                {
                    errorTxt = "@SYS29065";
                    if (_insert == UnknownNoYes::Unknown)
                    {
                        ledgerJournalTrans.delete();
                    }
                }
                else
                {
                    discGraceDays = CustPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode);
                    calcDiscDate = CustVendTransOpenData::construct(custTransOpen).calcDiscDate(num2date(date2num(custTransOpen.TransDate) - discGraceDays));
                    settleAmountCur = CustVendTransOpenData::construct(custTransOpen).remainAmountCashDisc(calcDiscDate);

                    if (!settleAmountCur)
                    {
                        settleAmountCur = custTransOpen.AmountCur;
                    }

                    specTransManager.insert(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId, settleAmountCur, custTrans.CurrencyCode);

                    ledgerJournalTrans.SettleVoucher = this.getSettlementType();
                    ledgerJournalTrans.update();
                }
            }
        }

        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates ReportingCurrencyExchRate and ReportingCurrencyExchRateSecondary.
    /// </summary>
    /// <param name="_exchangeRateTypeId">
    /// The exchange rate type that is used for retrieving exchange rate information.
    /// </param>
    /// <param name="_fromCurrency">
    /// The from currency that is used for retrieving exchange rate information.
    /// </param>
    /// <param name="_toCurrency">
    /// The to currency that is used for retrieving exchange rate information.
    /// </param>
    /// <param name="_exchangeDate">
    /// The exchange rate date that is used for retrieving exchange rate information.
    /// </param>
    /// <returns>
    /// Container of ReportingCurrencyExchRate and ReportingCurrencyExchRateSecondary.
    /// </returns>
    protected static container calculateReportingCurrencyExchRate(
        ExchangeRateTypeRecId _exchangeRateTypeId,
        CurrencyCode _fromCurrency,
        CurrencyCode _toCurrency,
        TransDate _exchangeDate)
    {
        ExchangeRateCalculation exchangeRateCalculation = ExchangeRateCalculation::newExchangeDate(
            _exchangeRateTypeId,
            _fromCurrency,
            _toCurrency,
            _exchangeDate);

        return [exchangeRateCalculation.getExchangeRate1(), exchangeRateCalculation.getExchangeRate2()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomaticSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type based on <c>CustParameters</c> table.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType findAutomaticSettlementType()
    {
        return (CustParameters::find().AutoSettle ? SettlementType::OpenTransact : SettlementType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogOffsetAccount = dialog.addFieldValue(extendedtypestr(CompanyBankAccountId), CustPaymModeTable::find(paymMode).parmPaymAccount());
        dialogOffsetAccount.allowEdit(false);

        dialogInsertIncorrectRecords = dialog.addFieldValue(enumstr(NoYes), insertIncorrectRecords, "@SYS68585", "@SYS68585");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    protected void fromDisk2Journal()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        offsetAccount = dialogOffsetAccount.value();
        insertIncorrectRecords = dialogInsertIncorrectRecords.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVoucherNum</Name>
				<Source><![CDATA[
    protected void loadVoucherNum()
    {
        ttsbegin;

        voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(ledgerJournalId))).getNew(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    public boolean openFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    public CustPaymMode paymMode()
    {
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.openFile();
        this.fromDisk2Journal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalNum</Name>
				<Source><![CDATA[
    public void setJournalNum(LedgerJournalId _ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymMode</Name>
				<Source><![CDATA[
    public void setPaymMode(PaymMode _paymMode)
    {
        paymMode = _paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileStream</Name>
				<Source><![CDATA[
    public void setFileStream(System.IO.Stream _stream)
    {
        stream = _stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case 1:
                [version,#ListVersion1] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        // Bank account is taken from the customer payment mode
        if (!offsetAccount)
        {
            offsetAccount = CustPaymModeTable::find(paymMode).parmPaymAccount();
        }

        bankAccountTable = BankAccountTable::find(offsetAccount);

        if (!bankAccountTable)
        {
            ok = checkFailed(strfmt("@SYS26720", offsetAccount));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = _dialog.formRun().control(_dialog.formRun().controlId('OkButton'));

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Object construct(PaymMode _paymMode)
    {
        DictClass dictClass;
        Object action;
        classId classId;
        Query infoActionQuery;

        classId = CustPaymModeTable::find(_paymMode).ClassIdIn;

        if (!classId)
        {
            infoActionQuery = new Query();
            infoActionQuery.addDataSource(tablenum(CustPaymModeTable)).addRange(fieldnum(CustPaymModeTable,PaymMode)).value(_paymMode);

            throw error(strfmt("@SYS63358", "@SYS66244", new DictType(extendedtypenum(PaymMode)).label(), _paymMode),
                SysHelpPath::applForm(formstr('CustPaymMode')),
                SysInfoAction_FormrunQuery::newFormnameControlnameQuery(formstr(CustPaymMode), 'actionClassNameIn', infoActionQuery));
        }

        if (!SysDictClass::isSuperclass(classId, classnum(CustInPaym)))
        {
            throw error(strfmt("@SYS66047",_paymMode));
        }

        dictClass = new DictClass(classId);
        action = dictClass.makeObject();

        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustInPaymDialog dialog = CustInPaymDialog::construct();
        dialog.openDialog(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustPaymModeTable</Name>
				<Source><![CDATA[
    public static CustInPaym newCustPaymModeTable(CustPaymModeTable _custPaymModeTable)
    {
        DictClass dictClass;
        CustInPaym custInPaym;

        if (!_custPaymModeTable.ClassIdIn)
        {
            return null;
        }

        if (!SysDictClass::isSuperclass(_custPaymModeTable.ClassIdIn, classnum(CustInPaym)))
        {
            return null;
        }

        dictClass = new DictClass(_custPaymModeTable.ClassIdIn);
        custInPaym = dictClass.makeObject();

        return custInPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFileStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AsciiStreamIo</c> class to be used for reading from a <c>System.IO.Stream</c>.
    /// </summary>
    /// <param name = "_stream">
    /// The <c>System.IO.Stream</c> to read from.
    /// </param>
    /// <returns>
    /// A new instance of the <c>AsciiStreamIo</c> class for reading from a <c>System.IO.Stream</c>.
    /// </returns>
    protected static AsciiStreamIo openFileStream(System.IO.Stream _stream)
    {
        return AsciiStreamIo::constructForRead(_stream);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>