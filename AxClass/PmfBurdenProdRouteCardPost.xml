<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBurdenProdRouteCardPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>PmfBurdenProdRouteCardPost</c> is responsible for creating and posting route card
/// journals that simulate the burden cost.
/// </summary>
class PmfBurdenProdRouteCardPost
{
    ProdTable               prodTable;

    PmfProdCoBy             pmfProdCoBy;
    ProdTableJour           prodTableJour;

    boolean                 currentProductionCostProvided;
    Amount                  currentProductionCost;
    boolean                 skipUpdateOfProdCalcTrans;
    boolean                 reversalOnly;
    private TransDate       transDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCurrentProductionCostEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates current production estimate used for the burden percentage calculation.
    /// </summary>
    /// <returns>
    /// The current production cost estimate.
    /// </returns>
    private Amount calculateCurrentProductionCostEstimate()
    {
        ProdCalcTrans        prodCalcTrans;
        PmfCoByProdCalcTrans pmfCoByProdCalcTrans;

        select sum(RealCostAmount)
        from prodCalcTrans
        where   prodCalcTrans.CollectRefLevel   == prodTable.CollectRefLevel + 1 &&
                prodCalcTrans.TransRefId        == prodTable.ProdId &&
                (prodCalcTrans.IdRefTableId     == tableNum(ProdBOM) ||
                 prodCalcTrans.IdRefTableId     == tableNum(ProdRoute));

        select sum(RealCostAmount)
        from pmfCoByProdCalcTrans
        where   pmfCoByProdCalcTrans.CollectRefLevel   == prodTable.CollectRefLevel + 1 &&
                pmfCoByProdCalcTrans.TransRefId        == prodTable.ProdId &&
                (pmfCoByProdCalcTrans.IdRefTableId     == tableNum(ProdBOM) ||
                 pmfCoByProdCalcTrans.IdRefTableId     == tableNum(ProdRoute));

        return prodCalcTrans.realCostAmount + pmfCoByProdCalcTrans.RealCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PmfBurdenProdRouteCardPost</c> class.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record used to initialize the instance.
    /// </param>
    protected void initFromProdTable(ProdTable _prodTable)
    {
        prodTable = _prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmByProduct</Name>
				<Source><![CDATA[
    public PmfProdCoBy parmByProduct(PmfProdCoBy _pmfProdCoBy = pmfProdCoBy)
    {
        pmfProdCoBy = _pmfProdCoBy;
        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentProductionCost</Name>
				<Source><![CDATA[
    public Amount parmCurrentProductionCost(Amount _currentProductionCost = currentProductionCost)
    {
        if (!prmisDefault(_currentProductionCost))
        {
            currentProductionCostProvided = true;
            currentProductionCost = _currentProductionCost;
        }

        return currentProductionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalOnly</Name>
				<Source><![CDATA[
    public boolean parmReversalOnly(boolean _reversalOnly = reversalOnly)
    {
        reversalOnly = _reversalOnly;
        return reversalOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdateOfProdCalcTrans</Name>
				<Source><![CDATA[
    public boolean parmSkipUpdateOfProdCalcTrans(boolean _skipUpdateOfProdCalcTrans = skipUpdateOfProdCalcTrans)
    {
        skipUpdateOfProdCalcTrans = _skipUpdateOfProdCalcTrans;
        return skipUpdateOfProdCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the route card journal that carries the burden cost.
    /// </summary>
    public void post()
    {
        ProdJournalCreateRouteBurden prodJournalCreateRoute = prodJournalCreateRouteBurden::newFromPmfProdCoBy(pmfProdCoBy);

        prodJournalCreateRoute.parmReversalOnly(reversalOnly);

        if (this.transDate)
        {
            prodJournalCreateRoute.parmTransDate(this.transDate);
        }
        prodJournalCreateRoute.parmCurrentProductionCost(currentProductionCostProvided ?
                                                            currentProductionCost : this.calculateCurrentProductionCostEstimate());

        prodJournalCreateRoute.runOperation();
        if (prodJournalCreateRoute.parmJournalId())
        {
            ProdJournalCheckPostRoute_Burden postRoute = ProdJournalCheckPostRoute_Burden::newPostJournal(prodJournalCreateRoute.parmJournalId(), true);

            postRoute.parmSkipUpdateOfProdCalcTrans(this.parmSkipUpdateOfProdCalcTrans());
            postRoute.parmProdCoBy(pmfProdCoBy);

            postRoute.parmBurden(true);
            postRoute.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PmfBurdenProdRouteCardPost</c> class.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record used to initialize the created instance.
    /// </param>
    /// <returns>
    /// The <c>PmfBurdenProdRouteCardPost</c> class instance.
    /// </returns>
    public static PmfBurdenProdRouteCardPost newFromProdTable(ProdTable _prodTable)
    {
        PmfBurdenProdRouteCardPost pmfBurdenProdRouteCardPost = new PmfBurdenProdRouteCardPost();

        pmfBurdenProdRouteCardPost.initFromProdTable(_prodTable);

        return pmfBurdenProdRouteCardPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>