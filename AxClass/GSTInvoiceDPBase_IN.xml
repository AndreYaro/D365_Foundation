<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GSTInvoiceDPBase_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>GSTInvoiceDPBase_IN</c> class provides base implementation of a data provider class for invoice reports.
/// </summary>
[SRSReportParameterAttribute(classStr(GSTInvoiceContract_IN))]
public class GSTInvoiceDPBase_IN extends SrsReportDataProviderPreProcess
{
    GSTInvoiceHeaderFooterTmp_IN gstInvoiceHeaderFooterTmp;
    GSTInvoiceTmp_IN             gstInvoiceTmp;
    Common                       invoiceJournal;
    GSTInvoiceDPBase_IN          gstInvoiceDPBase;
    GSTInvoiceDPBase_IN          gstInvoiceDPBaseImp;
    GSTInvoiceContract_IN        contract;
    TaxDocumentExtension_IN         taxDocumentExtension;
    TaxDirection                    taxDirection;
    container                       inventDimSetup;
    container                       inventDimSetupProduct;

    ITaxDocumentLine                taxDocumentLine;
    ITaxDocumentComponentLine       taxDocumentComponentLine;
    TaxModelTaxable_IN              taxModelTaxable;
    LogisticsLocation               logisticsLocation;
    LogisticsLocation               partylogisticsLocation;
    LogisticsPostalAddress          partyLogisticsPostalAddress;
    LogisticsPostalAddress          logisticsPostalAddress;
    TaxInformation_IN               taxInformation;
    TaxInformation_IN               partyTaxInformation;

    int                             rowNum;
    int                             orderByNum;
    MarkupCode                      chargeCode;
    TableId                         lineTableId;
    RecId                           lineRecId;
    RefRecId                        headerRecId;

    boolean                         isProforma;
    boolean                         isAPJournal;
    NoYes                           isPriceInclTax;
    AmountCur                       grandTotal;
    ModuleType_IN                   moduleType;
    PrintCopyOriginal               printCopyOriginal;

    private boolean isOnlineInvoicing;

    #ISOCountryRegionCodes
    const str TaxType = 'GST';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    public void createData()
    {
        ITaxDocumentLineEnumerator          taxDocumentLineEnumerator;
        ITaxDocumentComponentLineEnumerator componentLines;
        EREnumValueBase                     erEnumValue;
        const str GST = 'GST';

        if (invoiceJournal)
        {
            ITaxDocument taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(invoiceJournal.TableId, invoiceJournal.RecId);

            if (taxDocumentObject)
            {
                if (taxDocumentObject.getGUID())
                {
                    taxDocumentExtension = taxDocumentExtension_in::findByTaxDocument(taxDocumentObject.getGUID());
                }
                gstInvoiceDPBaseImp.insertIntoGSTInvoiceHeaderFooterTmp();

                taxDocumentLineEnumerator = taxDocumentObject.lines();
                while (taxDocumentLineEnumerator.moveNext())
                {
                    taxDocumentLine = taxDocumentLineEnumerator.current();
                    erEnumValue = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::LineType);

                    if (EREnumValue)
                    {
                        if (erEnumValue.getLabel() == TaxEngineModelFieldsConstants::LineTypeLine)
                        {
                            rowNum++;
                        }
                        orderByNum++;
                        taxDirection = TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::TaxDirection));
                        isPriceInclTax = TaxEngineEREnumToEnumUtil::noYes(taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::IsPricesIncludeSalesTax));
                        gstInvoiceDPBaseImp.populateGSTInvoiceTmp(classStr(ITaxDocumentLine));
                    }
                    else
                    {
                        continue;
                    }
                    // Only process GST tax
                    componentLines = taxDocumentLine.componentLines(GST);
                    while (componentLines.moveNext())
                    {
                        taxDocumentComponentLine = componentLines.current();
                        gstInvoiceDPBaseImp.populateGSTInvoiceTmp(classStr(ITaxDocumentComponentLine));
                    }
                }
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                TaxDocument taxDocument = TaxDocumentUtils::getTaxDocumentBySource(invoiceJournal.TableId, invoiceJournal.RecId);

                if (taxDocument)
                {
                    taxDocumentExtension = taxDocumentExtension_in::findByTaxDocument(taxDocument.TaxDocumentGuid);
                }
                gstInvoiceDPBaseImp.insertIntoGSTInvoiceHeaderFooterTmp();

                TaxDocumentRowTransaction taxDocumentRowTransaction;
                while select taxDocumentRowTransaction
                    where taxDocumentRowTransaction.TransactionJourHeaderTableId == invoiceJournal.TableId
                        && taxDocumentRowTransaction.TransactionJourHeaderRecId == invoiceJournal.RecId
                {
                    if (taxDocumentRowTransaction.TransactionJourLineTableId != tableNum(MarkupTrans))
                    {
                        rowNum++;
                    }
                    orderByNum++;
                    taxDirection = taxDocumentRowTransaction.TaxDirection;

                    SysDictTable dictTable = new SysDictTable(taxDocumentRowTransaction.TransactionJourLineTableId);
                    Common invoiceTrans = dictTable.makeRecord();
                    select firstonly invoiceTrans
                        where invoiceTrans.RecId == taxDocumentRowTransaction.TransactionJourLineRecId;

                    TaxModelTaxable_IN taxModelTaxableLocal = TaxModelDocLineFactory::newTaxModelDocLine(invoiceTrans);
                    isPriceInclTax = taxModelTaxableLocal.isPriceInclTax();

                    gstInvoiceDPBaseImp.populateGSTInvoiceTmp(classStr(ITaxDocumentLine), taxDocumentRowTransaction);

                    TaxDocumentComponentTransaction taxDocumentComponentTransaction;
                    while select taxDocumentComponentTransaction
                        where taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
                    {
                        gstInvoiceDPBaseImp.populateGSTInvoiceTmp(classStr(ITaxDocumentComponentLine), taxDocumentComponentTransaction);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTCSAmount</Name>
				<Source><![CDATA[
    public AmountCur getTCSAmount()
    {
        AmountCur ret=0;
        TaxWithholdTrans_IN taxWithholdTrans_IN;
        CustInvoiceJour custInvoiceJour = invoiceJournal;
        select sum(AdjustedTaxWithholdAmount) from taxWithholdTrans_IN
                    where taxWithholdTrans_IN.Voucher == custinvoicejour.LedgerVoucher
                        && taxWithholdTrans_IN.TransDate == custInvoiceJour.InvoiceDate
                        && taxWithholdTrans_IN.TaxType == TaxWithholdCodeType_IN::TCS;

        ret = -1 * taxWithholdTrans_IN.AdjustedTaxWithholdAmount;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>GSTInvoiceHeaderFooterTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>GSTInvoiceHeaderFooterTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(GSTInvoiceHeaderFooterTmp_IN))]
    public GSTInvoiceHeaderFooterTmp_IN getGSTInvoiceHeaderFooterTmp()
    {
        select gstInvoiceHeaderFooterTmp;
        return gstInvoiceHeaderFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>GSTInvoiceTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>GSTInvoiceTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(GSTInvoiceTmp_IN))]
    public GSTInvoiceTmp_IN getGSTInvoiceTmp()
    {
        select gstInvoiceTmp;
        return gstInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report header title for the India
    /// </summary>
    /// <param name = "_isProforma">The boolean sign if it is proforma</param>
    /// <param name = "_taxDocumentExtension"><c>TaxDocumentExtension_IN</c>buffer</param>
    /// <param name = "_printCopyOriginal">Printing type: Copy or Original</param>
    /// <param name = "_moduleType">module type</param>
    /// <returns>The report header title</returns>
    public str documentTitle(boolean _isProforma, TaxDocumentExtension_IN _taxDocumentExtension, PrintCopyOriginal _printCopyOriginal, ModuleType_IN _moduleType)
    {
        isProforma = _isProforma;
        taxDocumentExtension = _taxDocumentExtension;
        printCopyOriginal = _printCopyOriginal;
        moduleType = _moduleType;

        str invoiceTitle = this.getInvoiceTitle();

        return invoiceTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report header title.
    /// </summary>
    /// <returns>
    /// The report header title.
    /// </returns>
    protected str getInvoiceTitle()
    {
        str invoiceTitle;

        if (isProforma)
        {
            switch (taxDocumentExtension.TaxInvReferenceType)
            {
                case GSTReference_IN::FreeTextInvoice:
                case GSTReference_IN::GSTInvoice :
                    switch (printCopyOriginal)
                    {
                        case PrintCopyOriginal::Copy  :
                            if (moduleType == ModuleType_IN::AccountsPayable)
                            {
                                // Pro forma reverse charge tax invoice copy
                                invoiceTitle = "@TaxGST:ProFormaReverseChargeTaxInvoiceCopy";
                            }
                            else
                            {
                                // Pro forma tax invoice copy
                                invoiceTitle = "@SYS121363";
                            }
                            break;

                        case PrintCopyOriginal::Original:
                        case PrintCopyOriginal::OriginalPrint:
                            if (moduleType == ModuleType_IN::AccountsPayable)
                            {
                                // Pro forma reverse charge tax invoice
                                invoiceTitle = "@TaxGST:ProFormaReverseChargeTaxInvoice";
                            }
                            else
                            {
                                // Pro forma tax invoice
                                invoiceTitle = "@SYS121362";
                            }
                            break;
                    }
                    break;

                case GSTReference_IN::BillOfSupply :
                    switch (printCopyOriginal)
                    {
                        // Pro forma bill of supply copy
                    case PrintCopyOriginal::Copy  :
                            invoiceTitle = "@TaxGST:ProFormaBillOfSupplyCopy";
                        break;

                        // Pro forma bill of supply
                    case PrintCopyOriginal::Original:
                    case PrintCopyOriginal::OriginalPrint:
                            invoiceTitle = "@TaxGST:ProFormaBillOfSupply";
                        break;
                    }
                    break;

                case GSTReference_IN::DebitCreditNote :
                    switch (printCopyOriginal)
                    {
                        // Pro forma debit/credit note copy
                    case PrintCopyOriginal::Copy  :
                            invoiceTitle = "@TaxGST:ProFormaDebitOrCreditNoteCopy";
                        break;

                        // Pro forma debit/credit note
                    case PrintCopyOriginal::Original:
                    case PrintCopyOriginal::OriginalPrint:
                            invoiceTitle = "@TaxGST:ProFormaDebitOrcreditNote";
                        break;
                    }
                    break;

                case GSTReference_IN::RevisedInvoice :
                    switch (printCopyOriginal)
                    {
                        // Pro forma revised tax invoice copy
                    case PrintCopyOriginal::Copy  :
                            invoiceTitle = "@TaxGST:ProFormaRevisedTaxInvoiceCopy";
                        break;

                        // Pro forma revised tax invoice
                    case PrintCopyOriginal::Original:
                    case PrintCopyOriginal::OriginalPrint:
                            invoiceTitle = "@TaxGST:ProFormaRevisedTaxInvoice";
                        break;
                    }
                    break;

                case GSTReference_IN::ExportOrder :
                    switch (printCopyOriginal)
                    {
                        case PrintCopyOriginal::Copy :
                            if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Original)
                            {
                                // Pro forma export invoice copy
                                invoiceTitle = "@TaxGST:ProFormaExportInvoiceCopy";
                            }
                            else if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Revised)
                            {
                                // Pro forma revised export invoice copy
                                invoiceTitle = "@TaxGST:ProFormaRevisedExportInvoiceCopy";
                            }
                            break;

                        case PrintCopyOriginal::Original:
                        case PrintCopyOriginal::OriginalPrint:
                            if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Original)
                            {
                                // Pro forma export invoice
                                invoiceTitle = "@TaxGST:ProFormaExportInvoice";
                            }
                            else if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Revised)
                            {
                                // Pro forma revised export invoice
                                invoiceTitle = "@TaxGST:ProFormaRevisedExportInvoice";
                            }
                            break;
                    }
                    break;
            }
        }
        else
        {
            switch (taxDocumentExtension.TaxInvReferenceType)
            {
                case GSTReference_IN::GSTInvoice :
                    switch (printCopyOriginal)
                    {
                        case PrintCopyOriginal::Copy :
                            if (moduleType == ModuleType_IN::AccountsPayable)
                            {
                                // Reverse charge tax invoice copy
                                invoiceTitle = "@TaxGST:ReverseChargeTaxInvoiceCopy";
                            }
                            else
                            {
                                // Tax invoice copy
                                invoiceTitle = "@SYS121364";
                            }
                            break;

                        case PrintCopyOriginal::Original:
                        case PrintCopyOriginal::OriginalPrint:
                            if (moduleType == ModuleType_IN::AccountsPayable)
                            {
                                // Reverse charge tax invoice
                                invoiceTitle = "@TaxGST:ReverseChargeTaxInvoice";
                            }
                            else
                            {
                                // Tax invoice
                                invoiceTitle = "@TaxGST:TaxInvoice";
                            }
                            break;
                    }
                    break;

                case GSTReference_IN::BillOfSupply :
                    switch (printCopyOriginal)
                    {
                        // Bill of supply copy
                    case PrintCopyOriginal::Copy  :
                            invoiceTitle = "@TaxGST:BillOfSupplyCopy";
                        break;
                        // Bill of supply
                    case PrintCopyOriginal::Original:
                    case PrintCopyOriginal::OriginalPrint:
                            invoiceTitle = "@TaxGST:BillOfSupply";
                        break;
                    }
                    break;

                case GSTReference_IN::DebitCreditNote :
                    switch (printCopyOriginal)
                    {
                        // Debit/Credit note copy
                    case PrintCopyOriginal::Copy  :
                            invoiceTitle = "@TaxGST:DebitOrCreditNoteCopy";
                        break;

                        // Debit/Credit note
                    case PrintCopyOriginal::Original:
                    case PrintCopyOriginal::OriginalPrint:
                            invoiceTitle = "@TaxGST:DebitCreditNote";
                        break;
                    }
                    break;

                case GSTReference_IN::RevisedInvoice :
                    switch (printCopyOriginal)
                    {
                        case PrintCopyOriginal::Copy  :
                            // Revised tax invoice copy
                            invoiceTitle = "@TaxGST:RevisedTaxInvoiceCopy";
                            break;

                        case PrintCopyOriginal::Original:
                        case PrintCopyOriginal::OriginalPrint:
                            // Revised tax invoice
                            invoiceTitle = "@TaxGST:RevisedTaxInvoice";
                            break;
                    }
                    break;

                case GSTReference_IN::AdvancePaymentVoucher :
                    switch (taxDocumentExtension.TaxTransactionRefType)
                    {
                        case TaxTransactionRefType_IN::Original :
                            // Advanced payment voucher
                            invoiceTitle = "@TaxGST:PaymentVoucher";
                            break;

                        case TaxTransactionRefType_IN::Revised :
                            // Revised advanced payment voucher
                            invoiceTitle = "@TaxGST:RevisedAdvancedPaymentVoucher";
                            break;
                    }
                    break;

                case GSTReference_IN::AdvanceReceiptVoucher :
                    switch (taxDocumentExtension.TaxTransactionRefType)
                    {
                        case TaxTransactionRefType_IN::Original :
                            // Advanced receipt voucher
                            invoiceTitle = "@TaxGST:AdvanceReceiptVoucher";
                            break;

                        case TaxTransactionRefType_IN::Revised :
                            // Revised advanced receipt voucher
                            invoiceTitle = "@TaxGST:RevisedAdvancedReceiptVoucher";
                            break;
                    }
                    break;

                case GSTReference_IN::AdvanceRefundVoucher :
                    switch (taxDocumentExtension.TaxTransactionRefType)
                    {
                        case TaxTransactionRefType_IN::Original :
                            // Refund voucher
                            invoiceTitle = "@TaxGST:RefundVouch";
                            break;

                        case TaxTransactionRefType_IN::Revised :
                            // Revised refund voucher
                            invoiceTitle = "@TaxGST:RevisedRefundVoucher";
                            break;
                    }
                    break;

                case GSTReference_IN::ExportOrder :
                    switch (printCopyOriginal)
                    {
                        case PrintCopyOriginal::Copy  :
                            if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Original)
                            {
                                // Export invoice copy
                                invoiceTitle = "@TaxGST:ExportInvoiceCopy";
                            }
                            else if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Revised)
                            {
                                // Revised export invoice copy
                                invoiceTitle = "@TaxGST:RevisedExportInvoiceCopy";
                            }
                            break;

                        case PrintCopyOriginal::Original:
                        case PrintCopyOriginal::OriginalPrint:
                            if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Original)
                            {
                                // Export invoice
                                invoiceTitle = "@TaxGST:ExportInvoice";
                            }
                            else if (taxDocumentExtension.TaxTransactionRefType == TaxTransactionRefType_IN::Revised)
                            {
                                // Revised export invoice
                                invoiceTitle = "@TaxGST:RevisedExportInvoice";
                            }
                            break;
                    }
                    break;
            }
        }

        return invoiceTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGSInvoiceDP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the DP class to generate report data for other transaction.
    /// </summary>
    /// <param name="_controllerName">
    /// The class name of GST invoice report controller.
    /// </param>
    protected void initGSInvoiceDP(ClassName _controllerName)
    {
        switch (_controllerName)
        {
            case classStr(SalesInvoiceController) :
                gstInvoiceDPBaseImp = new TaxGSTSalesOrderInvoiceDP_IN();
                break;

                // Process FTI and AR invoice journal
            case classStr(FreeTextInvoiceController) :
                gstInvoiceDPBaseImp = new TaxGSTFTIInvoiceDP_IN();
                break;

                // Process PO and AP invoice journal
            case classStr(VendInvoiceDocumentController) :
                gstInvoiceDPBaseImp = new TaxGSTPurchInvoiceDP_IN();
                break;

            case classStr(PSAProjAndContractInvoiceController) :
                gstInvoiceDPBaseImp = new TaxGSTProjInvoiceDP_IN();
                break;

            case classStr(TaxGSTSTOController_IN) :
                gstInvoiceDPBaseImp = new TaxGSTSTOInvoiceDP_IN();
                break;

                // Process AP and AR payment
            case classStr(TaxGSTPaymentController_IN) :
                gstInvoiceDPBaseImp = new TaxGSTPaymentDP_IN();
                break;

                // Process export order
            case classStr(TaxGSTExportInvoiceController_IN) :
                gstInvoiceDPBaseImp = new TaxGSTExportInvoiceDP_IN();
                break;

            default :

        }

        gstInvoiceDPBaseImp.parmGstInvoiceDPBase(this);
        gstInvoiceDPBaseImp.parmGstInvoiceDPBaseImp(gstInvoiceDPBaseImp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimProduct</Name>
				<Source><![CDATA[
    protected void initInventDimProduct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax invoice header information.
    /// </summary>
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        TaxDocumentExtension_IN taxDocumentExtensionOrg;

        if (taxModelTaxable)
        {
            taxInformation              = taxModelTaxable.getTaxInfomationTable();
            partyTaxInformation         = taxModelTaxable.getPartyTaxInfomationTable();
            logisticsLocation           = LogisticsLocation::find(taxModelTaxable.getTaxLocationRefRecId());
            logisticsPostalAddress      = taxModelTaxable.getTaxLogisticsPostalAddressTable();
            partyLogisticsPostalAddress = taxModelTaxable.getPartyLogisticsPostalAddress();
            partylogisticsLocation      = LogisticsLocation::find(partyLogisticsPostalAddress.Location);
        }

        // Init the company info
        if (taxInformation)
        {
            gstInvoiceHeaderFooterTmp.GSTIN             = taxInformation.getTaxRegistrationNumbersTable(TaxType_IN::GST).RegistrationNumber;
        }
        gstInvoiceHeaderFooterTmp.CompanyLocation       = logisticsLocation.Description;
        gstInvoiceHeaderFooterTmp.CompanyAddress        = logisticsPostalAddress.Address;
        gstInvoiceHeaderFooterTmp.CompanyLogisticsPostalAddress = logisticsPostalAddress.RecId;

        // Init the bill to info
        gstInvoiceHeaderFooterTmp.BilledToName         = partylogisticsLocation.Description;
        gstInvoiceHeaderFooterTmp.BilledToState        = partyLogisticsPostalAddress.State;

        if (LogisticsAddressCountryRegion::find(partyLogisticsPostalAddress.CountryRegionId).ISOcode == #isoIN)
        {
            gstInvoiceHeaderFooterTmp.BilledToStateCode = LogisticsAddressState::find(partyLogisticsPostalAddress.CountryRegionId,
                partyLogisticsPostalAddress.State).StateCode_IN;
        }

        if (partyTaxInformation)
        {
            gstInvoiceHeaderFooterTmp.BilledToGSTIN    = partyTaxInformation.getTaxRegistrationNumbersTable(TaxType_IN::GST).RegistrationNumber;
        }
        gstInvoiceHeaderFooterTmp.BilledToAddress      = partyLogisticsPostalAddress.Address;
        gstInvoiceHeaderFooterTmp.BilledToLogisticsPostalAddress = partyLogisticsPostalAddress.RecId;
        gstInvoiceHeaderFooterTmp.PlaceOfSupply        = partyLogisticsPostalAddress.City;
        gstInvoiceHeaderFooterTmp.PlaceOfSupplyState   = partyLogisticsPostalAddress.State;
        gstInvoiceHeaderFooterTmp.PlaceOfSupplyLogisticsPostalAddress = partyLogisticsPostalAddress.RecId;

        // Init the ship to info
        gstInvoiceHeaderFooterTmp.ShippedToName         = gstInvoiceHeaderFooterTmp.BilledToName;
        gstInvoiceHeaderFooterTmp.ShippedToAddress      = gstInvoiceHeaderFooterTmp.BilledToAddress;
        gstInvoiceHeaderFooterTmp.ShippedToState        = gstInvoiceHeaderFooterTmp.BilledToState;
        gstInvoiceHeaderFooterTmp.ShippedToStateCode    = gstInvoiceHeaderFooterTmp.BilledToStateCode;
        gstInvoiceHeaderFooterTmp.ShippedToGSTIN        = gstInvoiceHeaderFooterTmp.BilledToGSTIN;
        gstInvoiceHeaderFooterTmp.ShippedToLogisticsPostalAddress = gstInvoiceHeaderFooterTmp.BilledToLogisticsPostalAddress;

        if (FeatureStateProvider::isFeatureEnabled(EInvoice_IN_Feature::instance()))
        {
            LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(partylogisticsLocation.RecId);
            gstInvoiceHeaderFooterTmp.IsSEZParty = logisticsLocationExt.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
            gstInvoiceHeaderFooterTmp.IsDeemedExport = logisticsLocationExt.isDeemedExportType();
        }

        if (FeatureStateProvider::isFeatureEnabled(TaxWithholdEnableIncludeTCSInTotalFeature::instance()))
        {
            if (invoiceJournal as CustInvoiceJour)
            {
                gstInvoiceHeaderFooterTmp.TCSAmount = this.getTCSAmount();
            }
        }

        gstInvoiceHeaderFooterTmp.SerialNumOfInvoice        = taxDocumentExtension.TaxTransactionId;
        gstInvoiceHeaderFooterTmp.InvoiceDate               = taxDocumentExtension.TaxTransactionDate;
        gstInvoiceHeaderFooterTmp.IsTaxInvoice              = taxDocumentExtension.TaxInvReferenceType ==  GSTReference_IN::BillOfSupply ? false : true;
        gstInvoiceHeaderFooterTmp.TaxInvReferenceType       = taxDocumentExtension.TaxInvReferenceType;

        taxDocumentExtensionOrg = taxDocumentExtension_IN::find(taxDocumentExtension.RefTaxDocumentExtension);
        gstInvoiceHeaderFooterTmp.OriginalInvoiceId        = taxDocumentExtensionOrg.TaxTransactionId;
        gstInvoiceHeaderFooterTmp.OriginalnvoiceDate       = taxDocumentExtension.RefTaxTransactionDate;

        gstInvoiceHeaderFooterTmp.InvoiceTitle = this.getInvoiceTitle();

        switch (taxDocumentExtension.TaxInvReferenceType)
        {
            case GSTReference_IN::BillOfSupply :
                gstInvoiceHeaderFooterTmp.BilledToLabel = "@TaxGST:RecipientsDetails";
                break;

            case GSTReference_IN::AdvancePaymentVoucher :
                gstInvoiceHeaderFooterTmp.BilledToLabel = "@TaxGST:DetailsOfThePersonWhomAdvancePaymentIsMade";
                break;

            case GSTReference_IN::AdvanceReceiptVoucher :
                gstInvoiceHeaderFooterTmp.BilledToLabel = "@TaxGST:DetailOfThePersonFromWhomAdvancePaymentIsReceived";
                break;

            case GSTReference_IN::AdvanceRefundVoucher :
                gstInvoiceHeaderFooterTmp.BilledToLabel = "@TaxGST:DetailOfThePersonFromWhomRefundPaymentIsMade";
                break;

            default:
                gstInvoiceHeaderFooterTmp.BilledToLabel = "@TaxGST:DetailsOfReceiver";
                gstInvoiceHeaderFooterTmp.ExistsShippedTo = isAPJournal ? false : true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax invoice header information.
    /// </summary>
    /// <param name="_className">
    /// The class: ITaxDocumentLine and ITaxDocumentComponentLine.
    /// </param>
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        // The logic is moved into populateGSTInvoiceTmp, do nothing in base class.
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGSTInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the GST invoice information.
    /// </summary>
    /// <param name="_className">
    /// The class name: ITaxDocumentLine or ITaxDocumentComponentLine.
    /// </param>
    /// <param name = "_transactionTable">
    /// The transaction table: TaxDocumentRowTransaction or TaxDocumentComponentTransaction
    /// </param>
    protected void populateGSTInvoiceTmp(str _className, Common _transactionTable = null)
    {
        AmountCur           taxableValue;

        gstInvoiceTmp.RowNum = rowNum;
        gstInvoiceTmp.OrderByNum = orderByNum;

        if (_className == classStr(ITaxDocumentLine))
        {
            boolean isMiscChargeLine;
            NoYes isService;
            str hSNOrSACCode;
            SalesDiscAmount discountAmount;
            Qty qty;
            AmountCur assessableValue;

            if (_transactionTable && _transactionTable.TableId == tableNum(TaxDocumentRowTransaction))
            {
                TaxDocumentRowTransaction taxDocumentRowTransaction = _transactionTable;
                TaxDocumentRowTransaction_IN taxDocumentRowTransaction_IN;

                select firstonly taxDocumentRowTransaction_IN
                    where taxDocumentRowTransaction_IN.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId;

                isMiscChargeLine = (taxDocumentRowTransaction.TransactionJourLineTableId == tableNum(MarkupTrans));
                hSNOrSACCode = taxDocumentRowTransaction_IN.HSNCode ? taxDocumentRowTransaction_IN.HSNCode : taxDocumentRowTransaction_IN.SAC;
                isService = taxDocumentRowTransaction_IN.SAC ? NoYes::Yes : NoYes::No;
                taxableValue = taxDocumentRowTransaction.BaseAmountCur;
                discountAmount = taxDocumentRowTransaction.DiscountAmount;
                qty = taxDocumentRowTransaction.Qty;

                if (isPriceInclTax)
                {
                    TaxTrans_IN taxTrans_IN;

                    select firstonly * from taxTrans_IN
                        where taxTrans_IN.SourceRecId == taxDocumentRowTransaction.TransactionJourLineRecId
                            && taxTrans_IN.SourceTableId == taxDocumentRowTransaction.TransactionJourLineTableId;

                    assessableValue = taxTrans_IN.AssessableValue;
                }

                // Global variables
                lineTableId = taxDocumentRowTransaction.TransactionJourLineTableId;
                lineRecId = taxDocumentRowTransaction.TransactionJourLineRecId;
                chargeCode = isMiscChargeLine ? MarkupTrans::findRecId(taxDocumentRowTransaction.TransactionJourLineRecId).MarkupCode : '';
            }
            else
            {
                chargeCode = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::MarkupTransChargeCode);
                isMiscChargeLine = chargeCode ? true : false;
                hSNOrSACCode = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::HSNCode) ? taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::HSNCode) : taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::SAC);
                isService = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::SAC) ? NoYes::Yes : NoYes::No;
                taxableValue = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::BaseAmount) ? taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::BaseAmount) : taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::AssessableValue);
                discountAmount = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::DiscountAmount);
                qty = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::Quantity);

                if (isPriceInclTax)
                {
                    assessableValue = taxDocumentLine.getFieldValue(TaxEngineModelFieldsConstants::AssessableValue);
                }

                // Global variables
                lineTableId = taxDocumentLine.sourceTableId();
                lineRecId = taxDocumentLine.sourceRecId();
            }

            gstInvoiceTmp.IsMiscChargeLine  = isMiscChargeLine;
            gstInvoiceTmp.IsService = isService;
            gstInvoiceTmp.HSNOrSACCode      = hSNOrSACCode;
            gstInvoiceTmp.TaxableValue      = taxableValue;

            if (!isMiscChargeLine)
            {
                gstInvoiceTmp.DiscountAmount    = discountAmount;
                gstInvoiceTmp.Qty               = qty;
            }

            if (isPriceInclTax == NoYes::Yes)
            {
                grandTotal += assessableValue;
            }
            else
            {
                grandTotal += taxableValue;
            }

            this.insertIntoGSTInvoiceTmp(classStr(ITaxDocumentLine));
        }

        if (_className == classStr(ITaxDocumentComponentLine))
        {
            TaxComponent_IN taxComponent;
            TaxValue taxComponentRate;
            TaxAmount taxComponentAmount;
            Amount reverseChargeAmount;

            if (_transactionTable && _transactionTable.TableId == tableNum(TaxDocumentComponentTransaction))
            {
                TaxDocumentComponentTransaction taxDocumentComponentTransaction = _transactionTable;
                TaxDocumentComponentTransaction_IN taxDocumentComponentTransactionn_IN;
                TaxComponentTable_IN taxComponentTable;

                select firstonly Component from taxComponentTable
                    join RecId from taxDocumentComponentTransactionn_IN
                        where taxDocumentComponentTransactionn_IN.TaxComponent == taxComponentTable.RecId
                            && taxDocumentComponentTransactionn_IN.TaxDocumentComponnetTransactionRecId == taxDocumentComponentTransaction.RecId;

                taxComponent = taxComponentTable.Component;
                taxComponentRate = taxDocumentComponentTransaction.TaxRate;
                taxComponentAmount = taxDocumentComponentTransaction.TaxAmountCur;

                if (taxDirection == taxDirection::IncomingTax)
                {
                    reverseChargeAmount = taxDocumentComponentTransaction.TotalTaxPayableAmountCur + taxDocumentComponentTransaction.TotalInterimTaxPayableAmountCur;
                }
                else
                {
                    reverseChargeAmount = taxDocumentComponentTransaction.TotalTaxReverseChargeAmountCur;
                }
            }
            else
            {
                ;
                ITaxDocumentMeasure reverseChargeMeasure;

                taxComponent = taxDocumentComponentLine.metaData().taxComponent();

                ITaxDocumentMeasure taxRateMeasure = taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxRate);
                if (taxRateMeasure)
                {
                    taxComponentRate = taxRateMeasure.value().value();
                }

                ITaxDocumentMeasure taxAmountMeasure = taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxAmount);
                if (taxAmountMeasure)
                {
                    taxComponentAmount = taxAmountMeasure.value().value();
                }

                if (taxDirection == taxDirection::IncomingTax)
                {
                    reverseChargeAmount = taxDocumentComponentLine.sumByTaxAccountingType(TaxAccountingPostingAccountType::TaxPayable, TaxAccountingPostingProfileDistributionSide::Credit).value();
                    reverseChargeAmount += taxDocumentComponentLine.sumByTaxAccountingType(TaxAccountingPostingAccountType::InterimTaxPayable, TaxAccountingPostingProfileDistributionSide::Credit).value();
                }
                else if (taxDirection == taxDirection::OutgoingTax)
                {
                    reverseChargeMeasure = taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxReverseChargeAmount);
                    if (reverseChargeMeasure)
                    {
                        reverseChargeAmount = reverseChargeMeasure.value().value();
                    }
                }
            }

            gstInvoiceTmp.TaxComponent = taxComponent;
            gstInvoiceTmp.TaxComponentRate = taxComponentRate;
            gstInvoiceTmp.TaxComponentAmount = taxComponentAmount;
            gstInvoiceTmp.ReverseChargeAmount = reverseChargeAmount;

            if (isPriceInclTax == NoYes::No)
            {
                grandTotal += gstInvoiceTmp.TaxComponentAmount;
            }

            this.insertIntoGSTInvoiceTmp(classStr(ITaxDocumentComponentLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGstInvoiceDPBase</Name>
				<Source><![CDATA[
    public GSTInvoiceDPBase_IN parmGstInvoiceDPBase(GSTInvoiceDPBase_IN _gstInvoiceDPBase = gstInvoiceDPBase)
    {
        gstInvoiceDPBase = _gstInvoiceDPBase;

        return gstInvoiceDPBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGstInvoiceDPBaseImp</Name>
				<Source><![CDATA[
    public GSTInvoiceDPBase_IN parmGstInvoiceDPBaseImp(GSTInvoiceDPBase_IN _gstInvoiceDPBaseImp = gstInvoiceDPBaseImp)
    {
        gstInvoiceDPBaseImp = _gstInvoiceDPBaseImp;

        return gstInvoiceDPBaseImp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJournal</Name>
				<Source><![CDATA[
    public Common parmInvoiceJournal(Common _invoiceJournal = invoiceJournal)
    {
        invoiceJournal = _invoiceJournal;

        return invoiceJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOnlineInvoicing</Name>
				<Source><![CDATA[
    public boolean parmIsOnlineInvoicing(boolean _isOnlineInvoicing = isOnlineInvoicing)
    {
        isOnlineInvoicing = _isOnlineInvoicing;

        return isOnlineInvoicing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNegativeLines</Name>
				<Source><![CDATA[
    protected void processNegativeLines()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        GSTInvoiceContract_IN   gstInvoiceContract;
        gstInvoiceContract = this.parmDataContract() as GSTInvoiceContract_IN;
        this.initGSInvoiceDP(gstInvoiceContract.parmGSTInvoiceControllerName());

        if (!gstInvoiceDPBaseImp.useExistingReportData())
        {
            gstInvoiceDPBaseImp.setTableConnections();
            gstInvoiceDPBaseImp.getDataFromContract();
            gstInvoiceDPBaseImp.initInventDimProduct();

            gstInvoiceDPBaseImp.createData();

            if (GSTInvoiceNegativeLinesCalculationFlight::instance().isEnabled() && isOnlineInvoicing)
            {
                gstInvoiceDPBaseImp.processNegativeLines();
            }
        }

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00146, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than
    /// default transaction.
    /// </remarks>
    public void setTableConnections()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is existing report data that will be used.
    /// </summary>
    /// <returns>
    /// true if there is existing report data; otherwise, false.
    /// </returns>
    protected boolean useExistingReportData()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>