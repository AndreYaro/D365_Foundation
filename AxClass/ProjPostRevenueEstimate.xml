<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostRevenueEstimate extends ProjPost
{
    ProjControlCalc         projControlCalc;
    ProjControlPeriodTrans  projControlPeriodTrans;
    ProjRevenueTrans        projRevenueTrans;
    ProjRevenueTransSale    projRevenueTransSale;
    ProjEmplTrans           projEmplTrans;
    ProjEmplTransSale       projEmplTransSale;
    ProjCostTrans           projCostTrans;
    ProjCostTransSale       projCostTransSale;
    ProjItemTrans           projItemTrans;
    ProjItemTransSale       projItemTransSale;
    ProjGroup projGroup;
    ProjRevenueProfile projRevProfile;
    boolean isMultipleContractLineFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    boolean isContractLineFeatureEnabled = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is nonzero and the <c>parmEnterSalesAccrued</c> method returns
    /// true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        return this.parmEnterSalesAccrued() && projTrans.transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContractFundingAllocationList</Name>
				<Source><![CDATA[
    private void createContractFundingAllocationList()
    {
        MapEnumerator           mapEnumerator;
        ProjSplitAllocation     allocation;
        ProjTable               projTable;
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;
        AmountCur               totalContractAmount;
        AmountCur               amountToMap;
        List                    fundingSourceAllocation;
        Map                     fundingList;
        boolean                 firstRecord = true;
        Map                     newOnAccountLines;
        ProjFundingEngine       projFundingEngine;
        MapEnumerator           enumerateMap;
        ProjRevRecContractLine revRecContractLine;

        fundingList = new Map(Types::Int64, Types::Real);
        fundingSourceAllocation = new List( Types::Class );
        ProjWIPTable wipProject = ProjWIPTable::find(projTrans.projId());

        if(wipProject.IsContractLineUsed)
        {
            select firstonly revRecContractLine
                where revRecContractLine.RevenueRecognitionId == wipProject.ProjId
            join  RecId from projOnAccTrans 
                where  projOnAccTrans.PSAContractLineNum == revRecContractLine.ContractLineNum;
        }
        else
        {
            select projTable where projTable.wipProject == this.projControlPeriodTable().ProjId;
            select firstOnly RecId from projOnAccTrans where  projOnAccTrans.ProjID == projTable.ProjId;
        }

        if (!projOnAccTrans.RecId)
        {
            projFundingEngine = ProjFundingEngine::construct(projTrans, 0 , 0);
            newOnAccountLines = projFundingEngine.parmSaleDistributions();
            if (projFundingEngine.allocate() && newOnAccountLines.elements() != 0)
            {
                enumerateMap = new MapEnumerator(newOnAccountLines);
                while (enumerateMap.moveNext())
                {
                    fundingList.insert(enumerateMap.currentKey(), amountToMap);
                }
            }
        }
        else
        {
            if(wipProject.IsContractLineUsed)
            {
                while select RecId from revRecContractLine
                    where revRecContractLine.RevenueRecognitionId   == wipProject.ProjId
                join RecId from projOnAccTrans
                    where projOnAccTrans.PSAContractLineNum     == revRecContractLine.ContractLineNum
                join Amount, FundingSource from projOnAccTransSale
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId
                {
                    totalContractAmount = totalContractAmount + projOnAccTransSale.Amount;
                    amountToMap = projOnAccTransSale.Amount;
                    if (fundingList.exists(projOnAccTransSale.FundingSource))
                    {
                        //Update value to map
                        amountToMap = fundingList.lookup(projOnAccTransSale.FundingSource) + amountToMap;
                        fundingList.remove(projOnAccTransSale.FundingSource);
                    }
                    fundingList.insert(projOnAccTransSale.FundingSource, amountToMap);
                }
            }
            else
            {
            while select RecId from projTable
                where projTable.wipProject      == this.projControlPeriodTable().ProjId
                join RecId from projOnAccTrans
                where projOnAccTrans.ProjID     == projTable.ProjId
                    join Amount, FundingSource from projOnAccTransSale
                        where projOnAccTransSale.TransId == projOnAccTrans.TransId
                {
                    totalContractAmount = totalContractAmount + projOnAccTransSale.Amount;
                    amountToMap = projOnAccTransSale.Amount;
                    if (fundingList.exists(projOnAccTransSale.FundingSource))
                    {
                        //Update value to map
                        amountToMap = fundingList.lookup(projOnAccTransSale.FundingSource) + amountToMap;
                        fundingList.remove(projOnAccTransSale.FundingSource);
                    }
                    fundingList.insert(projOnAccTransSale.FundingSource, amountToMap);
                }
            }
        }

        //Traverse the funding sources and create the list and percentages
        mapEnumerator = fundingList.getEnumerator();
        while ( mapEnumerator.moveNext() )
        {
            if (totalContractAmount != 0.00)
            {
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                             mapEnumerator.currentValue()/totalContractAmount * 100,
                                                             0,
                                                             firstRecord ? NoYes::Yes : NoYes::No );
            }
            else
            {
                //
                // This code should not be executed as contract values should not be 0.00.
                // Handle possible divide by zero error
                //
                ProjFundingRuleAllocation projFundingRuleAllocation;

                select firstOnly AllocationPercentage from projFundingRuleAllocation 
                    where ProjFundingRuleAllocation.FundingSource == mapEnumerator.currentKey();
                
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                             projFundingRuleAllocation.AllocationPercentage,
                                                             0,
                                                             firstRecord ? NoYes::Yes : NoYes::No );
            }
            fundingSourceAllocation.addEnd( allocation );
            firstRecord = false;
        }

        this.parmFundingSourceList(fundingSourceAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFundingAllocationList</Name>
				<Source><![CDATA[
    private void createFundingAllocationList(RefRecId _fundingSource)
    {
        ProjSplitAllocation     allocation;
        List                    fundingSourceAllocation;

        fundingSourceAllocation = new List( Types::Class );

        allocation = ProjSplitAllocation::construct( _fundingSource,
                                                     100,
                                                     0,
                                                     NoYes::Yes);
        fundingSourceAllocation.addEnd( allocation );

        this.parmFundingSourceList(fundingSourceAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        DimensionDefault ret;
        ProjFundingSource projFundingSource;

        ret = super();

        if (!ret)
        {
            projFundingSource = ProjFundingSource::find(projTrans.fundingSource());

            if (isContractLineFeatureEnabled)
            {
                ProjId wipProjId = projTrans.projId();
                ProjWIPTable projWIPTable = projTrans.getWIPProject();

                if (projWIPTable && projWipTable.IsContractLineUsed && projWIPTable.DefaultProject)
                {
                    if (ProjFeatureStateHelper::isProjDefaultDimensionRuleFeatureEnabled())
                    {
                        ProjTable projTable = ProjTable::find(projWIPTable.DefaultProject);
                        PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue);

                        ret = ProjDefaultDimensionRule::getDefaultDimension(projTable.ProjId, contractLine.ContractLineNum);
                    }
                    else
                    {
                        ret = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(ProjTable::find(projWIPTable.DefaultProject).DefaultDimension, projFundingSource.DefaultDimension);
                    }
                }
            }
            else
            {
                ret = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(ProjTable::find(projTrans.projId()).DefaultDimension, projFundingSource.DefaultDimension);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateCategory</Name>
				<Source><![CDATA[
    public ProjCategoryId estimateCategory()
    {
        return (isMultipleContractLineFeatureEnabled || (contractLineBasedRevRecFeature && isContractLineUsed)) ? projRevProfile.SalesValueCategoryId : projGroup.SalesvalueCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code for the sales transactions.
    /// </summary>
    /// <returns>
    ///    The currency code for sales transactions.
    /// </returns>
    public CurrencyCode currencyIdSales()
    {
        CurrencyCode currencyCode;

        if (this.parmElimination())
        {
            currencyCode = CompanyInfoHelper::standardCurrency();
        }
        else
        {
            currencyCode = super();
        }
        
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjControlCalc</Name>
				<Source><![CDATA[
    protected void initProjControlCalc()
    {
        ProjControlPeriodTable projControlPeriodTable = this.projControlPeriodTable();
        ProjTable projTableLoc = ProjTable::find(projControlPeriodTable.ProjId);
        ProjWIPTable wipProject = ProjWIPTable::find(projControlPeriodTable.ProjId);
        if(contractLineBasedRevRecFeature && wipProject.IsContractLineUsed)
        {
            projControlCalc = ProjControlCalc::constructFromWIPProjectOrRevenueProfile(wipProject, projControlPeriodTable.Elimination);
            projControlCalc.parmIsContractLineUsed(true);
        }
        else
        {
            projControlCalc = ProjControlCalc::constructFromProjGroupOrRevenueProfile(projTableLoc, projControlPeriodTable.Elimination, ProjContractBillingMethod::FixedPrice);
        }

        projControlCalc.parmProjId(projControlPeriodTable.ProjId);
        projControlCalc.parmControlId(projControlPeriodTable.ControlId);
        projControlCalc.parmPeriodFrom(projControlPeriodTable.PeriodFrom);
        projControlCalc.parmControlVersion(projControlPeriodTable.Version);
        projControlCalc.parmEliminate(projControlPeriodTable.Elimination);
        projControlCalc.parmCategoryId(this.estimateCategory());

    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales account to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    /// <remarks>
    /// If this transaction is a reversing entry, the value will be the negative value of the value that is
    /// returned by the <c>salesAmountMST</c> method; otherwise, the value will be the revenue amount of
    /// the transaction.
    /// </remarks>
    public AmountCur ledgerSalesAmount()
    {
        Integer wipFactor   = -1;

        if (this.parmElimination() && this.parmReverseAccrued())
        {
            wipFactor   = 1;
        }

        if (!this.parmElimination() && this.parmReverseAccrued())
        {
            wipFactor   = 1;
        }

        return projTrans.ledgerSalesAmountMST()*wipFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer, Common _bufferSale)
    {
        ProjEmplTransCost   projEmplTransCost;
        ProjEmplTrans       projEmplTransLocal;
        ProjCostTransCost   projCostTransCost;
        ProjItemTransCost   projItemTransCost;
        PSAIndirectComponentTrans   psaIndirectComponentTrans;
        ProjWIPTable  wipProject;

        super(_buffer);

        switch (_buffer.TableId)
        {
            case tableNum(ProjControlPeriodTrans)   :
                projControlPeriodTrans  = _buffer;
                projTrans   = ProjTrans::newprojControlPeriodTrans(projControlPeriodTrans);
                wipProject = ProjWIPTable::find(projTrans.projId());

                switch (projControlPeriodTrans.TransType)
                {
                    case ProjTransType::None:
                        this.createContractFundingAllocationList();
                        break;

                    case ProjTransType::Hour:
                        projEmplTransCost = ProjEmplTransCost::find(projControlPeriodTrans.CostRefRecId);
                        this.createFundingAllocationList(projEmplTransCost.FundingSource);
                        projEmplTransLocal = ProjEmplTrans::find(projEmplTransCost.TransId);
                        this.parmSplitTransQtyCon( ProjFundingEngine::distributeQty(projEmplTransLocal.fundingSourceList(), projEmplTransLocal.Qty).pack() );
                        break;

                    case ProjTransType::IndirectComponent:
                        psaIndirectComponentTrans = PSAIndirectComponentTrans::find(projControlPeriodTrans.CostRefRecId);
                        this.createFundingAllocationList(psaIndirectComponentTrans.ProjFundingSource);
                        projEmplTransLocal = ProjEmplTrans::find(psaIndirectComponentTrans.TransId);
                        this.parmSplitTransQtyCon( ProjFundingEngine::distributeQty(projEmplTransLocal.fundingSourceList(), projEmplTransLocal.Qty).pack() );
                        break;

                    case ProjTransType::Cost:
                        projCostTransCost = ProjCostTransCost::find(projControlPeriodTrans.CostRefRecId);
                        this.createFundingAllocationList(projCostTransCost.FundingSource);
                        break;

                    case ProjTransType::Item:
                        projItemTransCost = ProjItemTransCost::findRecId(projControlPeriodTrans.CostRefRecId);
                        this.createFundingAllocationList(projItemTransCost.FundingSource);
                        break;

                    default:
                        throw error(strFmt("@SYS22828",funcName()));
                }
                break;

            case tableNum(ProjRevenueTrans)         :
                projRevenueTrans        = _buffer;
                projRevenueTransSale = _bufferSale;
                projTrans   = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                this.createFundingAllocationList(projTrans.fundingSource());
                break;

            case tableNum(ProjEmplTrans)         :
                projEmplTrans       = _buffer;
                projEmplTransSale   = _bufferSale;
                projTrans   = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                this.createFundingAllocationList(projTrans.fundingSource());
                this.parmSplitTransQtyCon( ProjFundingEngine::distributeQty(projEmplTrans.fundingSourceList(), projEmplTrans.Qty).pack() );
                break;

            case tableNum(ProjCostTrans)         :
                projCostTrans       = _buffer;
                projCostTransSale   = _bufferSale;
                projTrans   = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                this.createFundingAllocationList(projTrans.fundingSource());
                break;

            case tableNum(ProjItemTrans)         :
                projItemTrans       = _buffer;
                projItemTransSale   = _bufferSale;
                projTrans   = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
                this.createFundingAllocationList(projTrans.fundingSource());
                break;

            default:
                throw error(strFmt("@SYS22828",funcName()));
        }
        
        ProjTable projTableLoc = ProjTable::find(projTrans.projId());
        wipProject = projTrans.getWIPProject();

        if(contractLineBasedRevRecFeature && wipProject.IsContractLineUsed)
        {
            projRevProfile = ProjRevRecHelper::getProfileForRevRecProjectContractLine(wipProject);
        }
        else if (isMultipleContractLineFeatureEnabled)
        {
            projRevProfile = ProjRevRecHelper::getProfileForRevRecProject(projTableLoc, ProjContractBillingMethod::FixedPrice);
        }
        else
        {
            projGroup = ProjGroup::find(projTableLoc.ProjGroupId);
        }

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodTable</Name>
				<Source><![CDATA[
    public ProjControlPeriodTable projControlPeriodTable()
    {
        ProjControlPeriodTable  projControlPeriodTable;
        ProjWIPTable wipProject;
        ProjId projId = projTrans.projId();
        
 
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            wipProject = projTrans.getWIPProject();
                
            if (this.parmElimination())
            {
                select firstonly projControlPeriodTable
                where projControlPeriodTable.ProjId == wipProject.ProjId &&
                      projControlPeriodTable.Elimination &&
                     !projControlPeriodTable.Reverse;
            }
            else
            {
                select firstonly projControlPeriodTable
                where projControlPeriodTable.ProjId     == wipProject.ProjId &&
                      projControlPeriodTable.ControlId  == projTrans.controlId() &&
                      projControlPeriodTable.Version    == projTrans.controlVersion() &&
                      projControlPeriodTable.PeriodTo   == projTrans.controlPeriodTo();
            }
        }
        else
        {

            if (this.parmElimination())
            {
                select projControlPeriodTable
                    where projControlPeriodTable.ProjId == ProjTable::find(projTrans.projId()).wipProject &&
                          projControlPeriodTable.Elimination                                              &&
                         !projControlPeriodTable.Reverse;
            }
            else
            {
                select projControlPeriodTable
                    where projControlPeriodTable.ProjId     == ProjTable::find(projTrans.projId()).wipProject &&
                          projControlPeriodTable.ControlId  == projTrans.controlId() &&
                          projControlPeriodTable.Version    == projTrans.controlVersion() &&
                          projControlPeriodTable.PeriodTo   == projTrans.controlPeriodTo();
            }
        }

        return projControlPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjTransIdBase         transIdBase;
        ProjTransactionOrigin   localTransactionOrigin;
        ListEnumerator          fundingAllocationEnumerator;
        ProjSplitAllocation     allocation;
        ProjFundingSourceRefId  projFundingSourceRefRecId;
        ProjFundingSource       projFundingSource;
        ProjEmplTransCost       projEmplTransCost;
        ProjCostTransCost       projCostTransCost;
        ProjItemTransCost       projItemTransCost;
        AmountCur               amount;
        AmountCur               amountAllocated;
        AmountCur               orgAmount;
        PSAIndirectComponentTrans   psaIndirectComponentTrans;

        void processItemSale()
        {
            projItemTransSale.clear();
            projItemTransSale.ProjTransId = projItemTrans.ProjTransId;
            projItemTransSale.DefaultDimension = projItemTrans.DefaultDimension;
            projItemTransSale.LedgerTransdate = ledgerVoucher.lastTransDate();
            if (projItemTrans.Qty)
            {
                projItemTransSale.SalesPrice = CurrencyExchangeHelper::curAmount2CurAmount((-this.ledgerSalesAmount() / projItemTrans.Qty), this.currencyIdSales(), projItemTrans.CurrencyId);
            }

            if (this.parmElimination())
            {
                projItemTransSale.LedgerSalesPosted = NoYes::No;
                projItemTransSale.TransStatus = ProjTransStatus::Eliminated;
                this.parmLedgerOrigin(ProjOrigin::EliminateEstimate);
            }
            else
            {
                projItemTransSale.LedgerSalesPosted = NoYes::Yes;
                projItemTransSale.TransStatus = ProjTransStatus::Estimated;
                this.parmLedgerOrigin(ProjOrigin::PostEstimate);
            }

            projItemTransSale.LineAmount = CurrencyExchangeHelper::curAmount2CurAmount(-this.ledgerSalesAmount(), this.currencyIdSales(), projItemTrans.CurrencyId);
            projItemTransSale.LedgerSalesAmount = -this.ledgerSalesAmount();

            projItemTransSale.ControlId         = projControlPeriodTrans.ControlId;
            projItemTransSale.wipPeriod         = projControlPeriodTrans.periodTable().PeriodTo;
            projItemTransSale.ControlVersion    = projControlPeriodTrans.Version;
            projItemTransSale.wipType           = projControlPeriodTrans.wipType;

            projItemTransCost = ProjItemTransCost::findRecId(projControlPeriodTrans.CostRefRecId);
            projItemTransSale.FundingSource = projItemTransCost.FundingSource;

            projItemTransSale.insert();

            projControlPeriodTrans.selectForUpdate(true);
            projControlPeriodTrans.SaleRefRecId = projItemTransSale.RecId;
            projControlPeriodTrans.update();
        }

    #localMacro.processSale
        %1.clear();
        %1.%3 = %2.%3;
        %1.DefaultDimension = %2.DefaultDimension;
        %1.LedgerTransdate = ledgerVoucher.lastTransDate();
        if (%2.Qty)
        {
            %1.SalesPrice = CurrencyExchangeHelper::price(-%4 / %2.Qty);
            %1.LineAmount = -%4;
        }
        if (this.parmElimination())
        {
            %1.LedgerSalesPosted = NoYes::No;
            %1.TransStatus = ProjTransStatus::Eliminated;
            this.parmLedgerOrigin(ProjOrigin::EliminateEstimate);
        }
        else
        {
            %1.LedgerSalesPosted = NoYes::Yes;
            %1.TransStatus = ProjTransStatus::Estimated;
            this.parmLedgerOrigin(ProjOrigin::PostEstimate);
        }

        %1.LedgerSalesAmount = -%4;
        %1.FundingSource     = %5;
        %1.ControlId         = projControlPeriodTrans.ControlId;
        %1.wipPeriod         = projControlPeriodTrans.periodTable().PeriodTo;
        %1.ControlVersion    = projControlPeriodTrans.Version;
        %1.wipType           = projControlPeriodTrans.wipType;
        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            if(%1.tableId == tableNum(ProjRevenueTransSale))
            {
                %1.%6 = projControlPeriodTrans.ProjId;
            }
        }

        %1.insert();

        projControlPeriodTrans.selectForUpdate(true);
        projControlPeriodTrans.SaleRefRecId = %1.RecId;
        projControlPeriodTrans.update();
    #endMacro

        container processRevenue()
        {
            //Create projRevenueTrans record
            projRevenueTrans.clear();

            projRevenueTrans  = ProjRevenueTrans::initTransFromEstimate(projControlPeriodTrans);

            projRevenueTrans.VoucherJournal     = ledgerVoucher.lastVoucher();
            projRevenueTrans.CategoryId         = this.estimateCategory();

            projRevenueTrans.TransactionOrigin = ProjOrigin::EstimateFee;

            if (! projRevenueTrans.validateWrite())
            {
                throw error("@SYS21628");
            }

            projRevenueTrans.insert();

            //Create ProjRevenueTransSale record based on funding of contract
            AmountCur totalSalesAmountLedger = this.ledgerSalesAmount();
            fundingAllocationEnumerator =  this.parmFundingSourceList().getEnumerator();
            
            while ( fundingAllocationEnumerator.moveNext() )
            {
                allocation = fundingAllocationEnumerator.current();
                if (allocation.parmIsAllocateRounding() == true)
                {
                    projFundingSourceRefRecId = allocation.parmFundingSourceRefRecId();
                }
                amount = CurrencyExchangeHelper::amount(allocation.parmPercent() / 100 * totalSalesAmountLedger, this.currencyIdSales());
                // Do not post Organization amounts
                projFundingSource = ProjFundingSource::find(allocation.parmFundingSourceRefRecId());
                if (projFundingSource.FundingType != ProjFundingType::Organization)
                {
                    amountAllocated = amountAllocated + amount;
                    #processSale(projRevenueTransSale, projRevenueTrans, TransId, amount, allocation.parmFundingSourceRefRecId(), WIPProjId)
                }
                else
                {
                    orgAmount = orgAmount + amount;
                }
            }
            // Handle potential rounding differences
            amount = (-totalSalesAmountLedger + amountAllocated + orgAmount);
            if (amount != 0.00)
            {
                if (abs(amountAllocated) > abs(totalSalesAmountLedger))
                {
                    amount = abs(amount);
                }
                else
                {
                    amount = -abs(amount);
                }

                #processSale(projRevenueTransSale, projRevenueTrans, TransId, amount, projFundingSourceRefRecId, WIPProjId)
            }

            Docu::copy(projControlPeriodTrans,projRevenueTrans);

            return [projRevenueTrans.TransId, projRevenueTrans.TransactionOrigin];
        }

        container processHour()
        {
            projEmplTrans  = ProjEmplTrans::find(projControlPeriodTrans.TransId);

            //Create ProjEmplTransSale record
            projEmplTransCost = ProjEmplTransCost::find(projControlPeriodTrans.CostRefRecId);
            #processSale(projEmplTransSale, projEmplTrans, TransId, this.ledgerSalesAmount(), projEmplTransCost.FundingSource, TransId)
            return [projEmplTrans.TransId, projEmplTrans.TransactionOrigin];
        }

        container processIndirectCost()
        {
            projEmplTrans  = ProjEmplTrans::find(projControlPeriodTrans.TransId);

            //Create ProjEmplTransSale record
            psaIndirectComponentTrans = PSAIndirectComponentTrans::find(projControlPeriodTrans.CostRefRecId);
            amount =  CurrencyExchangeHelper::curAmount2CurAmount(this.ledgerSalesAmount(), this.currencyIdSales(), projEmplTrans.CurrencyId);
            #processSale(projEmplTransSale, projEmplTrans, TransId, amount, psaIndirectComponentTrans.ProjFundingSource, TransId)
            return [projEmplTrans.TransId, projEmplTrans.TransactionOrigin];
        }

        container processExpense()
        {
            projCostTrans  = ProjCostTrans::find(projControlPeriodTrans.TransId);

            //Create ProjCostTransSale record
            projCostTransCost = ProjCostTransCost::find(projControlPeriodTrans.CostRefRecId);

            #processSale(projCostTransSale, projCostTrans, TransId, this.ledgerSalesAmount(), projCostTransCost.FundingSource, TransId)

            return [projCostTrans.TransId, projCostTrans.TransactionOrigin];
        }

        container processItem()
        {
            projItemTrans  = ProjItemTrans::find(projControlPeriodTrans.TransId);

            //Create ProjItemTransSale record
            processItemSale();

            return [projItemTrans.ProjTransId, projItemTrans.TransactionOrigin];
        }

        orgAmount = 0;

        switch (projControlPeriodTrans.TransType)
        {
            case ProjTransType::None:
                [transIdBase, localTransactionOrigin] = processRevenue();
                break;

            case ProjTransType::Hour:
                [transIdBase, localTransactionOrigin] = processHour();
                break;

            case ProjTransType::IndirectComponent:
                [transIdBase, localTransactionOrigin] = processIndirectCost();
                break;

            case ProjTransType::Cost:
                [transIdBase, localTransactionOrigin] = processExpense();
                break;

            case ProjTransType::Item:
                [transIdBase, localTransactionOrigin] = processItem();
                break;

            default:
                throw error(strFmt("@SYS22828",funcName()));
        }

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(transIdBase);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(transIdBase);
        }

        this.parmTransactionOrigin(localTransactionOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        
    #localMacro.processSale
        %1.selectForUpdate(true);

        %1.LedgerSalesPosted = NoYes::No;

        if (this.checkEnterSalesAccrued())               // completed percentage
        {
            if (this.parmReverseAccrued() &&  this.parmElimination())            // reverse elimination
            {
                ProjCompletePrincip completePrinciple = ((isMultipleContractLineFeatureEnabled || (contractLineBasedRevRecFeature && isContractLineUsed))? projRevProfile.CompletePrinciple : projGroup.CompletePrincip);
                if (completePrinciple == ProjCompletePrincip::CompletedContract)
                {
                    if (isSystemGeneratedFee)
                    {
                        %1.TransStatus = ProjTransStatus::Adjusted;
                    }
                    else
                    {
                        %1.TransStatus = ProjTransStatus::Posted;
                    }
                }
                else
                {
                    %1.TransStatus = ProjTransStatus::Estimated;
                }
                %1.LedgerSalesPosted = NoYes::Yes;
            }
            else if ( this.parmReverseAccrued() && !this.parmElimination())     // reverse
            {
                %1.LedgerSalesPosted = NoYes::No;
                
                if (isSystemGeneratedFee)
                {
                    %1.TransStatus = ProjTransStatus::Adjusted;
                }
                else
                {
                    %1.TransStatus = ProjTransStatus::Posted;
                }
            }
            else if (!this.parmReverseAccrued() && this.parmElimination())      // elimination
            {
                %1.LedgerSalesPosted = NoYes::No;
                %1.TransStatus = ProjTransStatus::Eliminated;
            }
            else if (!this.parmReverseAccrued() && !this.parmElimination())     // ordinary period
            {
                %1.LedgerSalesPosted = NoYes::Yes;
                %1.TransStatus = ProjTransStatus::Estimated;
            }
        }
        else                                    // completed contract
        {
            if (this.parmReverseAccrued() &&  this.parmElimination())            // reverse elimination
            {
                if (isSystemGeneratedFee)
                {
                    %1.TransStatus = ProjTransStatus::Adjusted;
                }
                else
                {
                    %1.TransStatus = ProjTransStatus::Posted;
                }
            }
        }

        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            if(%1.tableId == tableNum(projRevenueTransSale))
            {
                %1.%2 = projTrans.getWIPProject().ProjId;
            }
        }
        %1.update();

        // Reverse original Sales value if the estimate is reversed.
        if (this.checkEnterSalesAccrued() && this.parmReverseAccrued() && !this.parmElimination())
        {
            %1.SalesPrice = -%1.SalesPrice;
            %1.LineAmount = -%1.LineAmount;
            %1.LedgerSalesAmount = -%1.LedgerSalesAmount;

            %1.insert();
        }
    #endMacro

    ProjRevenueTransSale    projRevenueTransSaleLoc;
    ProjEmplTransSale       projEmplTransSaleLoc;
    ProjCostTransSale       projCostTransSaleLoc;
    ProjItemTransSale       projItemTransSaleLoc;
    boolean isSystemGeneratedFee;
    
        if (projRevenueTransSale)
        {
            projRevenueTransSaleLoc.data(projRevenueTransSale);

            if (ProjRevenueTrans::find(projRevenueTransSaleLoc.TransId).TransactionOrigin == ProjOrigin::EstimateFee)
            {
                isSystemGeneratedFee = true;
            }

            #processSale(projRevenueTransSale, WIPProjId)
            projRevenueTransSale.data(projRevenueTransSaleLoc);
        }
        else if (projEmplTransSale)
        {
            projEmplTransSaleLoc.data(projEmplTransSale);
            #processSale(projEmplTransSale, TransId)
            projEmplTransSale.data(projEmplTransSaleLoc);
        }
        else if (projCostTransSale)
        {
            projCostTransSaleLoc.data(projCostTransSale);
            #processSale(projCostTransSale, TransId)
            projCostTransSale.data(projCostTransSaleLoc);
        }
        else if (projItemTransSale)
        {
            projItemTransSaleLoc.data(projItemTransSale);
            #processSale(projItemTransSale, ProjTransId)
            projItemTransSale.data(projItemTransSaleLoc);
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucherTransObjectForPostTurnoverAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>LedgerVoucherTransObject</c> given as first parameter based on the additional parameters.
    /// </summary>
    /// <param name = "_ledgerVoucherObject">
    ///     The ledger posting reference that is used.
    /// </param>
    /// <param name = "_mergedLedgerDimension">
    ///     The dimension attribute value combination of the general journal entry.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency code of the general journal entry.
    /// </param>
    /// <param name = "_fundingAllocationEnumerator">
    ///     The funding allocation map enumerator.
    /// </param>
    /// <param name = "_exchangeRateHelper">
    ///     The accounting currency amount and secondary currency amount exchange rates.
    /// </param>
    /// <param name = "_splitTransQty">
    ///     The quantity distribution map.
    /// </param>
    /// <param name = "_tmpProjLedger">
    ///     The related project ledger instance.
    /// </param>
    /// <returns>
    ///     The initialized object of <c>LedgerVoucherTransObject</c> class.
    /// </returns>
    protected LedgerVoucherTransObject initLedgerVoucherTransObjectForPostTurnoverAccrued(
        LedgerVoucherObject         _ledgerVoucherObject,
        LedgerDimensionAccount      _mergedLedgerDimension,
        CurrencyCode                _currencyCode,
        MapEnumerator               _fundingAllocationEnumerator,
        CurrencyExchangeHelper      _exchangeRateHelper,
        Map                         _splitTransQty,
        ProjLedger                  _tmpProjLedger
        )
    {
        LedgerVoucherTransObject ledgerVoucherTransObject = super(_ledgerVoucherObject, _mergedLedgerDimension, _currencyCode, _fundingAllocationEnumerator, _exchangeRateHelper, _splitTransQty, _tmpProjLedger);
        ProjInvoiceProjId projInvoiceProjId;
        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            projInvoiceProjId = PSAContractLineItems::find(projTrans.psaContractLineNum()).ProjInvoiceProjId;
        }
        else
        {
            projInvoiceProjId = ProjTable::find(projTrans.projId()).ProjInvoiceProjId;
        }
        if (projInvoiceProjId != '')
        {
            ProjInvoiceCurrency projInvoiceCurrency = ProjInvoiceCurrency::find(projInvoiceProjId, Ledger::reportingCurrency());

            if (projInvoiceCurrency)
            {
                // Reporting currency amount calculation by considering fixed exchange rate defined in contract when posting the estimate.
                AmountCur amountCur = CurrencyExchangeHelper::curAmount( _fundingAllocationEnumerator.currentValue(), projInvoiceCurrency.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, projInvoiceCurrency.ExchRate, 0, false);

                ledgerVoucherTransObject.parmReportingCurrencyAmount(CurrencyExchangeHelper::amount(amountCur, projInvoiceCurrency.CurrencyId));
            }
        }

        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>