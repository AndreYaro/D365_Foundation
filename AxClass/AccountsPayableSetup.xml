<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountsPayableSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccountsPayableSetup</c> class is a <c>SysSetup</c> implementation for loading the vendor invoice automation events.
/// </summary>
[SysSetupTable(tableStr(DocumentEvent))]
public final class AccountsPayableSetup extends SysSetupAsync implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadData()
    {
        AccountsPayableSetup::loadDocumentEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDocumentEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all document events for AP document event scenarios.
    /// </summary>
    [Hookable(false)]
    public static void loadDocumentEvents()
    {
        Set documentEventEnums = AccountsPayableSetup::getDocumentEventEnums();
        SetEnumerator enumEnumerator = documentEventEnums.getEnumerator();

        while (enumEnumerator.moveNext())
        {
            DocumentEventEnumsInfo enumInfo = enumEnumerator.current();
            AccountsPayableSetup::loadDocumentEvent(enumInfo.parmEventEnumId(), enumInfo.parmEventLabelId(), enumInfo.parmEventHelpTextLabelId(), enumInfo.parmIsDrillDownSupported());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentEventEnums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the set of <c>DocumentEvent</c> enums used for Accounts Payable.
    /// </summary>
    /// <returns>The set of the Enums used.</returns>
    [Hookable(false)]
    internal static Set getDocumentEventEnums()
    {
        Set documentEventEnumInfo = new Set(Types::Class);

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationPausedByRecallEvent),
            literalStr("@AccountsPayable:VendorInvoicePausedByRecallEventLabel")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationPausedByUserEvent),
            literalStr("@AccountsPayable:VendorInvoicePausedByUserEventLabel")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationPausedFailedStepEvent),
            literalStr("@AccountsPayable:VendorInvoiceEventPausedDueToFailedStep")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationResumedByUser),
            literalStr("@AccountsPayable:VendorInvoiceResumedByUserEventLabel")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationSubmitToWorkflow),
            literalStr("@AccountsPayable:VendorInvoiceEventAutomationSubmitToWorkflow")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceImportEvent),
            literalStr("@AccountsPayable:VendorInvoiceImportEvent")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceManualSubmissionToWorkflow),
            literalStr("@AccountsPayable:VendorInvoiceManualSubmissionToWorkflowLabel")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent),
            literalStr("@AccountsPayable:VendorInvoiceEventMatchProductReceiptToInvoiceLine"),
            literalStr("@AccountsPayable:VendorInvoiceEventMatchProductReceiptToInvoiceLineHelpText")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceWorkflowStatusEvent),
            literalStr("@AccountsPayable:VendInvoiceWorkflowStatusEvent"),
            literalStr("@AccountsPayable:VendInvoiceWorkflowStatusEventHelpText")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationHeaderWorkflowManualAction),
            literalStr("@AccountsPayable:VendInvoiceAutomationHeaderWorkflowManualAction"),
            literalStr("@AccountsPayable:VendInvoiceAutomationHeaderWorkflowManualAction_Help")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationLineWorkflowManualAction),
            literalStr("@AccountsPayable:VendInvoiceAutomationLineWorkflowManualAction"),
            literalStr("@AccountsPayable:VendInvoiceAutomationLineWorkflowManualAction_Help")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceWorkflowPostStatus),
            literalStr("@AccountsPayable:VendInvoiceWorkflowPostStatus"),
            literalStr("@AccountsPayable:VendInvoiceWorkflowPostStatus_Help")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationPrepaymentApplicationEvent),
            literalStr("@AccountsPayable:AutomationApplyPrepaymentToInvoice"),
            literalStr("@AccountsPayable:AutomationPrepaymentApplicationHelpText")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationCreateLinesEvent),
            literalStr("@AccountsPayable:VendInvoiceAutomationCreateLinesEvent"),
            literalStr("@AccountsPayable:VendInvoiceAutomationCreateLinesEventHelpText")));

        documentEventEnumInfo.add(DocumentEventEnumsInfo::newFromEnumId(enumNum(VendInvoiceAutomationManualInvoiceIncludedInAutomationByUser),
            literalStr("@AccountsPayable:ManuallyIncludedIntoAutomationEventLabel")));

        return documentEventEnumInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDocumentEvent</Name>
				<Source><![CDATA[
    private static void loadDocumentEvent(
        EnumId _eventEnumId,
        LabelId _eventLableId,
        LabelId _eventHelpTextLableId = '',
        NoYes _isDrillDownSupported = NoYes::No)
    {
        DocumentEvent documentEvent;

        select firstonly documentEvent
            where documentEvent.EventEnumId == _eventEnumId;

        if (documentEvent)
        {
            // If a document event already exists for this event enum, update
            // the existing DocumentEvent record to ensure referential integrity is
            // kept with any associated DocumentEventLog records.
            ttsbegin;
            documentEvent.selectForUpdate(true);
            documentEvent.EventEnumId = _eventEnumId;
            documentEvent.LabelId = _eventLableId;
            documentEvent.HelpTextLabelId = _eventHelpTextLableId;
            documentEvent.IsDrilldownSupported = _isDrillDownSupported;
            documentEvent.doUpdate();
            ttscommit;
        }
        else
        {
            // If not, insert a new DocumentEvent record for this event enum
            documentEvent.EventEnumId = _eventEnumId;
            documentEvent.LabelId = _eventLableId;
            documentEvent.HelpTextLabelId = _eventHelpTextLableId;
            documentEvent.IsDrilldownSupported = _isDrillDownSupported;
            documentEvent.doInsert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>