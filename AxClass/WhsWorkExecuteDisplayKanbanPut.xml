<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayKanbanPut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWorkExecuteDisplayKanbanPut</c> class builds and displays a form for processing
///    kanban receipts in an RF device.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::KanbanPut)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::KanbanPutAndLocate)]
public class WhsWorkExecuteDisplayKanbanPut extends WHSWorkExecuteDisplay
{
    #define.InitialStep(0)
    #define.DataStep(1)
    #define.NextFormStep(2)
    Kanban      kanban;
    KanbanJob   kanbanJob;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildKanbanPut</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a form to be displayed in the RF device.
    /// </summary>
    /// <param name="_con">
    ///    A container that holds form state information.
    /// </param>
    /// <param name="_licensePlateId">
    ///    A license plate ID; optional.
    /// </param>
    /// <param name="_extraText">
    ///    Extra text; optional.
    /// </param>
    /// <returns>
    ///    A container that defines the form.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container buildKanbanPut(
        container         _con,
        WHSLicensePlateId _licensePlateId = '',
        str               _extraText      = '')
    {
        WHSInventTable  whsInventTable;
        InventDim       inventDim;
        InventBatchId   inventBatchId;
        container       ret               = _con;
        boolean         hasKanbanOrCardId = false;

        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));

        ret += [this.buildControl(#RFLabel,'KanbanPutaway',WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle,1,'', #WHSRFUndefinedDataType,'',0)];

        if (pass.hasValue(#KanbanCardId))
        {
            ret += [this.buildControlForTableField(tableNum(Kanban),fieldNum(Kanban,KanbanCardId),#KanbanOrCardId,1,pass.lookup(#KanbanCardId),false)];
            hasKanbanOrCardId = true;
        }

        if (   !hasKanbanOrCardId
            && pass.hasValue(#KanbanId))
        {
            ret += [this.buildControlForTableField(tableNum(Kanban),fieldNum(Kanban,KanbanId),#KanbanOrCardId,1,pass.lookup(#KanbanId),false)];
            hasKanbanOrCardId = true;
        }

        if (!hasKanbanOrCardId)
        {
            ret += [this.buildControlForTableField(tableNum(Kanban),fieldNum(Kanban,KanbanId),#KanbanOrCardId,1,'',true)];
        }

        ItemId exisingItemId = hasKanbanOrCardId ? pass.lookup(#ItemId) : '';

        DictType dictType = WHSWorkExecuteDisplay::dictTypeForTableField(tableNum(Kanban), fieldNum(Kanban, ItemId));

        if (dictType)
        {
            ret += [this.buildControl(#RFText, #ItemId, dictType.label(), 1, '', extendedTypeNum(InventInventItemSearchItem) , exisingItemId , 0, false)];
        }

        if (pass.hasValue(#ItemId))
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            if (pass.exists(#KanbanId))
            {
                inventDim = InventDim::find(this.kanbanJob(pass.lookup(#KanbanId)).InventDimId);
            }

            inventBatchId = inventDim.InventBatchId ? inventDim.InventBatchId : kanbanJob.findBatchIdFromNotReceivedInventTrans();

            if (inventBatchId && !WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).OverrideInventBatchId)
            {
                ret += [this.buildControl(#RFLabel, #BatchId, strFmt("@WAX2228", inventBatchId), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(inventBatchId))];
            
                if (!pass.exists(#BatchId) 
                    && inventBatchId)
                {
                    pass.insert(#BatchId, inventBatchId);
                }
            }
        }

        ret += [this.buildControl(#RFText,#Qty,"@SYS105177",1,pass.lookupStr(#Qty), extendedTypeNum(Qty),'',0)];
        ret  = this.buildUOM(ret,'',false,false,false,pass.lookupStr(#SelectedValueUOM));

        // Builds the batch control elements
        ret = this.buildBatchOverrideIfMenuItemAllows(ret, inventBatchId, _licensePlateId);

        // Only adds the license plate control if it wasn't added via batch override.
        if (!this.getControlLocation(ret, #LicensePlateId))
        {
            ret += [this.buildControl(#RFText,#LicensePlateId,"@WAX1198",1,_licensePlateId, extendedTypeNum(WHSLicensePlateId),'',0)];

            if (menuItemTable.DisplayContainerTypeCode)
            {
                ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType));
            }
        }

        ret += [this.buildControl(#RFButton,#RFOK,"@SYS5473",1,'', #WHSRFUndefinedDataType,'',1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container of form layout information to be displayed on a RF device.
    /// </summary>
    /// <param name="_con">
    ///    A container of form state information.
    /// </param>
    /// <param name="_buttonClicked">
    ///    The name of a button that was clicked; optional.
    /// </param>
    /// <returns>
    ///    A container of form layout information to be displayed on a RF device.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The user is in a warehouse that is different from the warehouse where work is executed.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work class is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work class is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work line is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work line is invalid.
    /// </exception>
    public container displayForm(
        container _con,
        str       _buttonClicked = '')
    {
        Set                         setExcludeLocationId;
        WHSWorkExecuteDisplay       workExecuteDisplay    = WHSWorkExecuteDisplay::construct(mode);
        WHSWorkCreateKanbanPut      workCreateKanbanPut;
        WHSLicensePlateId           licensePlateId;
        WhsWorkExecute              workExecute = WhsWorkExecute::construct();
        WHSWorkBuildId              workBuildId;
        WMSLocationId               newLocationId;
        container                   ret = conNull();
        container                   tmpPass;
        container                   con = _con;
        container                   tmpCon;
        int                         hasError = 0;
        boolean                     recall;
        boolean                     addCancel = true;
        container                   tmpFieldValues;
        WHSRFPassthrough            fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                     complete;
        WHSRFPassthrough            globalPass;
        WHSLicensePlateLabelBuild   labelBuild;
        boolean                     displayContainerType;

        globalPass = pass;
        pass       = WHSRFPassthrough::create(conPeek(_con,2));
        pass       = this.combineMaps(globalPass,pass);

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        [newLocationId,tmpCon] = this.handleButtonClicked(workExecute,_buttonClicked);
        setExcludeLocationId   = Set::create(tmpCon);
        tmpCon                 = conNull();

        switch (step)
        {
            case #InitialStep,
                 #DataStep:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret,"@WAX866",WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                    addCancel = false;
                }

                if (step != #InitialStep)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processData(con,pass);
                    fieldValues           = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass,fieldValues);
                    hasError = this.hasError(con);

                    if (hasError)
                    {
                        ret       = con;
                        addCancel = false;
                        break;
                    }

                    displayContainerType = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).DisplayContainerTypeCode;

                    if (   !pass.lookup(#LicensePlateId)
                        && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP
                        && pass.exists(#ItemId))
                    {
                        licensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId),pass.lookup(#UOM));
                        pass.insert(#LicensePlateId, licensePlateId);
                        fieldValues.insert(#LicensePlateId,licensePlateId);
                    }
                }
                else
                {
                    if (   pass.hasValue(#KanbanId)
                        && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
                    {
                        licensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId),pass.lookup(#UOM));
                        pass.insert(#LicensePlateId,licensePlateId);
                        fieldValues.insert(#LicensePlateId,licensePlateId);
                    }
                    else if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
                    {
                        if (pass.hasValue(#LicensePlateId))
                        {
                            pass.remove(#LicensePlateId);
                            fieldValues.insert(#LicensePlateId,'');
                        }
                    }
                    step = #DataStep;
                }

                con = this.buildKanbanPut(ret,licensePlateId);

                if (!InventLocation::find(WHSWorkUserSession::find(userId).InventLocationId).DefaultKanbanFinishedGoodsLocation)
                {
                    throw error("@WAX5379");
                }

                if (pass.hasValue(#Qty))
                {
                    fieldValues.insert(#Qty,pass.lookup(#Qty));
                    fieldValues.insert(#SelectedValueUOM,pass.lookup(#SelectedValueUOM));
                }

                // If container type is displayed and the user has entered an LP into the mobile device, ensure that
                //  RAF screen is displayed once more to allow container type to be set.
                if (displayContainerType
                &&  this.displayContainerTypeDuringRAF(licensePlateId))
                {
                    // Reassign license plate Id to the one entered by the user
                    licensePlateId = pass.lookupStr(#LicensePlateId);
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con,fieldValues);
                    complete        = complete && licensePlateId ? false : complete;

                    if (complete)
                    {
                        if (this.kanbanJob(pass.lookup(#KanbanId)).inventDim().InventLocationId != pass.lookup(#InventLocationId))
                        {
                            addCancel = true;
                            throw error("@WAX1239");
                        }

                        WHSLicensePlate::createLicensePlate(pass.lookup(#LicensePlateId), true, this.getDefaultContainerTypeCode());
                        workCreateKanbanPut = WHSWorkCreateKanbanPut::construct(this.kanban(pass.lookup(#KanbanId)));
                        workCreateKanbanPut.parmCreatedBy(userId);

                        if (pass.hasValue(#BatchId))
                        {
                            // Pass in the batch and all assigned attributes.
                            workCreateKanbanPut.parmInventBatchId(pass.lookup(#BatchId));
                            workCreateKanbanPut.parmBatchExpDate(WHSRFControlData::convertDateFormatStr2Date(pass.lookupStr(#ExpDate), pass.lookupStr(#UserId)));
                            workCreateKanbanPut.parmBatchDispCode(pass.lookupStr(#BatchDisposition));
                            workCreateKanbanPut.parmBatchPotencyValue(pass.lookupStr(#Potency));

                            
                            InventDim inventDimWithBatch = InventDim::findOrCreate(workCreateKanbanPut.parmWorkInventDim());
                            inventDimWithBatch.inventBatchId = pass.lookup(#BatchId);
                            inventDimWithBatch = InventDim::findOrCreate(inventDimWithBatch);

                            workCreateKanbanPut.parmWorkInventDim(inventDimWithBatch);
                            
                        }

                        workCreateKanbanPut.parmTargetLicensePlateId(pass.lookup(#LicensePlateId));
                        workCreateKanbanPut.parmWorkTemplateCode(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkTemplateCode);
                        workCreateKanbanPut.parmInventQty(InventTableModule::unitConvert(pass.lookup(#ItemId),
                                                                                         ModuleInventPurchSales::Invent,
                                                                                         pass.lookup(#UOM),
                                                                                         pass.lookupNum(#Qty),
                                                                                         this.kanbanJob(pass.lookup(#KanbanId)).inventDim().InventDimId));
                        workBuildId = workCreateKanbanPut.createWork();

                        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PrintLabel)
                        {
                            labelBuild = new WHSLicensePlateLabelBuild(
                                                    WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId).WorkId,
                                                    null,
                                                    pass.lookup(#MenuItem),
                                                    pass.lookup(#UserId));

                            labelBuild.buildLicensePlateLabels();
                        }

                        switch (mode)
                        {
                            case WHSWorkExecuteMode::KanbanPutAndLocate:
                                workLine = WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId,userId);
                                if (   step != #Restart
                                    && workLine
                                    && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem),workLine.WorkClassId))
                                {
                                    throw error("@WAX1459");
                                }

                                workTable = workLine.whsWorkTable();

                                if (workLine)
                                {
                                    pass.insert(#DetermineStep,1);
                                    con = this.updateModeStepPass(con,mode,step,pass);
                                    [ret,step ,recall,tmpPass] =
                                        this.processWorkLine(workLine,con,mode,step,userId,newLocationId,_buttonClicked,false);

                                    pass = new WHSRFPassthrough(Types::String,Types::String);
                                    pass = WHSRFPassthrough::create(tmpPass);

                                    if (step == #Restart)
                                    {
                                        step = #InitialStep;
                                    }
                                    else if (step == #StepOne)
                                    {
                                        step = #NextFormStep;
                                        pass.insert(#DetermineStep,1);
                                    }

                                    con = this.updateModeStepPass(ret,mode,step,pass);
                                    con = conPoke(con,1,[mode, step]);
                                    workExecuteDisplay.setGlobals(mode,step,userId,pass,null);

                                    ret = workExecuteDisplay.displayForm(con, _buttonClicked);

                                    pass = new WHSRFPassthrough(Types::String,Types::String);
                                    pass = WHSRFPassthrough::create(conPeek(ret,2));

                                    if (   pass.exists(#WorkId)
                                        && pass.exists(#LineNum))
                                    {
                                        workLine  = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                        workTable = workLine.whsWorkTable();
                                    }
                                }
                                break;

                            case WHSWorkExecuteMode::KanbanPut:
                                pass.insert(#WorkComplete,1);
                                con  = conPoke(con,2, pass.pack());
                                step = #InitialStep;

                                workExecuteDisplay.setGlobals(mode,step,userId,pass,null);

                                ret  = workExecuteDisplay.displayForm(con,_buttonClicked);
                                pass = new WHSRFPassthrough(Types::String,Types::String);
                                pass = WHSRFPassthrough::create(conPeek(ret,2));
                                break;
                        }
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            default:
                if (pass.exists(#WorkId))
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId),userId);
                    }

                    if (   step != #Restart
                        && workLine
                        && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem),workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine)
                    {
                        workTable = workLine.whsWorkTable();
                        con       = conPoke(con, 2, pass.pack());

                        [ret,step,recall,tmpPass] = this.processWorkLine(workLine,con,mode,step,userId,newLocationId,_buttonClicked,false);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);

                        if (step == #Restart)
                        {
                            step = #InitialStep;
                        }
                        else if (step == #StepOne)
                        {
                            step = #NextFormStep;
                            pass.insert(#DetermineStep, 1);
                        }

                        if (recall)
                        {
                            con = this.updateModeStepPass(con,mode,step,pass);
                            con = conPoke(con,1,[mode,step]);
                            workExecuteDisplay.setGlobals(mode,step,userId,pass,null);

                            ret  = workExecuteDisplay.displayForm(con,_buttonClicked);
                            pass = new WHSRFPassthrough(Types::String,Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret,2));

                            if (   pass.exists(#WorkId)
                                && pass.exists(#LineNum))
                            {
                                workLine  = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                workTable = workLine.whsWorkTable();
                            }
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }

        if (step > #DataStep)
        {
            ret = this.addButtons(ret);
        }
        else if (addCancel)
        {
            ret = this.addCancelButton(ret,1,true);
        }

        ret = this.updateModeStepPass(ret,mode,step,pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a button clicked event in the RF display form.
    /// </summary>
    /// <param name="_workExecute">
    ///    A <c>WHSWorkExecute</c> object.
    /// </param>
    /// <param name="_buttonClicked">
    ///    The name of the button that was clicked.
    /// </param>
    /// <returns>
    ///    A container with two elements.
    /// </returns>
    /// <remarks>
    ///    The first element in the result container is the new location Id.
    ///    The second element is a packed set of excluded locations.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container handleButtonClicked(
        WHSWorkExecute _workExecute,
        str            _buttonClicked = '')
    {
        WMSLocationId   newLocationId;
        container       tmpCon;
        Set             excludeLocationId  = new Set(Types::String);

        switch (_buttonClicked)
        {
            case #RFOverride:
                // Override
                step = #OverrideStep1;
                break;
            case #RFFull:
                // Full (Split)
                step = step != #InitialStep ? #SplitWork : 0;
                break;
            case #RFNoLocation:
                // Suggest Location (NoLocation)
                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                if (pass.exists(#ExcludedLocations))
                {
                    excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
                }
                else
                {
                    excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
                }
                [newLocationId, tmpCon] = _workExecute.findNewLocation(workLine,excludeLocationId);
                excludeLocationId       = Set::create(tmpCon);
                pass.insert(#SuggestLocation,1);
                pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
                if (pass.exists(#PrevStep))
                {
                    step = pass.lookup(#PrevStep);
                }
                else
                {
                    pass.insert(#NoValidation,'1');
                }
                break;
            case #RFSplitPut:
                this.validateSplitPutAllowed();
                step = #SplitPutWork;
                break;
        }

        return [newLocationId,excludeLocationId.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban for a given kanban ID.
    /// </summary>
    /// <param name="_kanbanId">
    ///    The kanban ID.
    /// </param>
    /// <returns>
    ///    The kanban; otherwise an empty table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Kanban kanban(KanbanId _kanbanId)
    {
        if (!_kanbanId)
        {
            kanban = null;
        }
        else
        {
            if (   !kanban
                || kanban.KanbanId != _kanbanId)
            {
                kanban = Kanban::findKanbanId(_kanbanId);
            }
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last kanban job of a given kanban ID.
    /// </summary>
    /// <param name="_kanbanId">
    ///    The kanban ID.
    /// </param>
    /// <returns>
    ///    The last kanban job of the kanban; otherwise, an empty table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanJob kanbanJob(KanbanId _kanbanId)
    {
        if (   !kanban
            || !kanbanJob
            || kanbanJob.Kanban != kanban.RecId
            || kanban.KanbanId  != _kanbanId)
        {
            kanban    = this.kanban(_kanbanId);
            kanbanJob = kanban.lastKanbanJob();
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>