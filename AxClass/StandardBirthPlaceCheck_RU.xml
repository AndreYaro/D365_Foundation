<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StandardBirthPlaceCheck_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class StandardBirthPlaceCheck_RU
{
     RHRMPersonTable personTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBirthPlace</Name>
				<Source><![CDATA[
        public boolean checkBirthPlace()
    {
        boolean checkState,
                checkCounty,
                checkTown;
        if (personTable.BirthPlaceType == RHRMBirthPlaceType::Special)
        {
            return true;
        }
        if (personTable.CountyBirth && !personTable.StateBirth)
        {
            error("@RUP1188");
            return false;
        }

        checkState  = this.checkStateBirth();
        checkCounty = this.checkCountyBirth();
        checkTown   = this.checkTownBirth();

        return (checkState && checkCounty && checkTown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountyBirth</Name>
				<Source><![CDATA[
        #define.invalidCountyWords("'РАЙОН', 'РАЙОНА', 'Р-Н', 'Р-НА', 'Р-ОН', 'Р-ОНА','РАЙ', 'РАЙ.'")
    #define.SingleQuote("'")
    #define.CountyEnding("й")
    public boolean checkCountyBirth()
    {
        int       i;
        str       currentWord;

        if (personTable.BirthPlaceType == RHRMBirthPlaceType::Special || !personTable.CountyBirth)
        {
            return true;
        }

        if (subStr(personTable.CountyBirth, strLen(personTable.CountyBirth), 1) != #CountyEnding)
        {
            error("@RUP1186");
            return false;
        }

        i = strScan(personTable.CountyBirth,' ', 1, strLen(personTable.CountyBirth));
        if (! i)
        {
            return true;
        }
        currentWord = subStr(personTable.CountyBirth, 1, i - 1);
        if (strScan(#InvalidCountyWords, #SingleQuote + currentWord + #SingleQuote, 1, strLen(#InvalidCountyWords)))
        {
            error(strFmt("@RUP1185", #InvalidCountyWords));
            return false;
        }

        i = strScan(personTable.CountyBirth,' ', strLen(personTable.CountyBirth), -strLen(personTable.CountyBirth));
        currentWord = subStr(personTable.CountyBirth, i+1, strLen(personTable.CountyBirth) - i);
        if (strScan(#InvalidCountyWords, #SingleQuote + currentWord + #SingleQuote, 1, strLen(#InvalidCountyWords)))
        {
            error(strFmt("@RUP1185", #InvalidCountyWords));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStateBirth</Name>
				<Source><![CDATA[
        #define.necessaryStateWords("'ОБЛАСТЬ', 'КРАЙ', 'АССР', 'ССР', 'АО', 'РЕСПУБЛИКА'")
    #define.SingleQuote("'")
    public boolean checkStateBirth()
    {
        int i, len = strLen(#NecessaryStateWords);
        str        currentWord,
                   residuaryWord;

        if (personTable.BirthPlaceType == RHRMBirthPlaceType::Special || !personTable.StateBirth)
        {
            return true;
        }

        residuaryWord = personTable.StateBirth;
        i = strScan(residuaryWord,' ', 1, strLen(residuaryWord));
        if (! i)
        {
            error(strFmt("@RUP1184",#necessaryStateWords));
            return false;
        }
        while (i)
        {
            currentWord = subStr(residuaryWord, 1, i - 1);
            residuaryWord = subStr(residuaryWord, i + 1 ,strLen(residuaryWord) - 1);
            if (strScan(#NecessaryStateWords, #SingleQuote + currentWord + #SingleQuote, 1, len))
            {
                return true;
            }
            i = strScan(residuaryWord,' ', 1, strLen(residuaryWord));
        }
        if (! strScan(#NecessaryStateWords, #SingleQuote + residuaryWord + #SingleQuote, 1, len))
        {
            error(strFmt("@RUP1184",#necessaryStateWords));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTownBirth</Name>
				<Source><![CDATA[
        #define.invalidTownWords("'Г','Г.','ГОР','ГОР.','ГОРОД','С','С.','СЕЛО','Д','Д.','ДЕР','ДЕР.','ДЕРЕВНЯ','ПГТ','ПОС','ПОС.','ПОСЕЛОК','С/Х','СОВХОЗ','К/Х','КОЛХОЗ','СТ','СТ.','СТАНЦИЯ','СТАНИЦА','Х-Р','ХУТОР','ИМ','ИМ.','ИМЕНИ'")
    #define.SingleQuote("'")
    public boolean checkTownBirth()
    {
        str       firstWord;
        int       i;

        if (personTable.BirthPlaceType == RHRMBirthPlaceType::Special || !personTable.TownBirth)
        {
            return true;
        }
        i = strScan(personTable.TownBirth,' ', 1, strLen(personTable.TownBirth));
        if (! i)
        {
            return true;
        }
        firstWord = subStr(personTable.TownBirth, 1, i - 1);
        if (strScan(#InvalidTownWords, #SingleQuote + firstWord + #SingleQuote, 1, strLen(#InvalidTownWords)))
        {
            error(strFmt("@RUP1187", #invalidTownWords));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RHRMPersonTable _personTable)
    {
        personTable = _personTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>