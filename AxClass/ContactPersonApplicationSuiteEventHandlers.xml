<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ContactPersonApplicationSuiteEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ContactPersonApplicationSuiteEventHandlers</c> class contains ApplicationSuite specific event handlers for <c>ContactPerson</c> table events.
/// </summary>
public final class ContactPersonApplicationSuiteEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletingEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic before deleting a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Deleting)]
    public static void deletingEventHandler(Common _sender, DataEventArgs _e)
    {
        var contactPerson = _sender as ContactPerson;

        // Write to the CRM transaction log
        // This is done asynchronously, so make this the first action in the transaction
        smmTransLog::initTrans(contactPerson, smmLogAction::delete);

        // Mark the contact as deleted in Outlook synchronization entries
        contactPerson.markContactAsDeleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after deleting a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Deleted)]
    public static void deletedEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;
        VendUserRequest userRequest;

        delete_from userRequest where userRequest.Person == contactPerson.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after initializing a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::InitializedRecord)]
    public static void initializedEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;

        // Use employee mapped to the current user as default main responsible
        contactPerson.MainResponsibleWorker  = smmUtility::getCurrentContactWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertingEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic before inserting a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Inserting)]
    public static void insertingEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;

        if (contactPerson.ContactForParty)
        {
            if (!contactPerson.CustAccount)
            {
                contactPerson.CustAccount    = CustTable::findByPartyRecId(contactPerson.ContactForParty).AccountNum;
            }
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after inserting a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Inserted)]
    public static void insertedEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;

        smmTransLog::initTrans(contactPerson, smmLogAction::insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamingPrimaryKeyEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic before renaming the primary key on a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_args">The arguments for the event.</param>
    [PreHandlerFor(tableStr(ContactPerson), tableMethodStr(ContactPerson, renamePrimaryKey))]
    public static void renamingPrimaryKeyEventHandler(XppPrePostArgs _args)
    {
        var             contactPerson = _args.getThis() as ContactPerson;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(contactPerson);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic before updating a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Updating)]
    public static void updatingEventHandler(Common _sender, DataEventArgs _e)
    {
        var contactPerson = _sender as ContactPerson;

        // Is the synchronization principle that only main responsible can edit synchronize contacts?
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
        }
        else if(OutlookSyncParameters::find().OutlookSyncPrinciple == smmOutlookSyncPrinciple::MainReponsibleMaster)
        {
            smmOutlookSyncDeprecationHandler::showDeprecationMessage();

            ContactPerson contactPersonOrig = contactPerson.orig();

            // Is main responsible for the contact person changed
            if (contactPersonOrig.MainResponsibleWorker != contactPerson.MainResponsibleWorker)
            {
                smmContactPersonSynchronize smmContactPersonSynchronize;

                // Is contact edit synchronized by the old responsible employee
                select forupdate smmContactPersonSynchronize
                    where smmContactPersonSynchronize.ContactPersonId == contactPerson.ContactPersonId &&
                          smmContactPersonSynchronize.Worker          == contactPersonOrig.MainResponsibleWorker &&
                          smmContactPersonSynchronize.OutlookSyncType != smmOutlookSyncType::ViewContact;

                if (smmContactPersonSynchronize)
                {
                    // Change synchronization type to view for the old main responsible
                    smmContactPersonSynchronize.OutlookSyncType = smmOutlookSyncType::ViewContact;
                    smmContactPersonSynchronize.update();
                }
            }
        }    

        // Reset the vendor portal access for inactive contact
        if (contactPerson.orig().Inactive != contactPerson.Inactive && contactPerson.Inactive == true)
        {
            contactPerson.VendorPortalAccessAllowed = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after updating a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::Updated)]
    public static void updatedEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;

        // Update the CRM transaction log
        smmTransLog::initTrans(contactPerson, smmLogAction::update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedDeleteEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after validating the delete a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::ValidatedDelete)]
    public static void validatedDeleteEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;
        var             validateArgs = _e as ValidateEventArgs;
        
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
        }
        else
        {
            smmContactPersonSynchronize smmContactPersonSynchronize = smmContactPersonSynchronize::findCont(contactPerson.ContactPersonId);

            if (smmContactPersonSynchronize)
            {
                if (smmContactPersonSynchronize.OutlookSyncType == smmOutlookSyncType::EditContact)
                {
                    // Contact is synchronized to Outlook with edit right. Synchronization record will be removed. Proceed?
                    if (Box::yesNo("@SYS83571", DialogButton::Yes, "@SYS33774") == DialogButton::No)
                    {
                        validateArgs.parmValidateResult(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedFieldEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after validating the field on a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::ValidatedField)]
    public static void validatedFieldEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;
        var             validateFieldEventArgs = _e as ValidateFieldEventArgs;

        switch (validateFieldEventArgs.parmFieldId())
        {
            case fieldNum(ContactPerson, MainResponsibleWorker) :
                if (contactPerson.MainResponsibleWorker)
                {
                    validateFieldEventArgs.parmValidateResult(smmUtility::isValidWorkerInCurrentCompany(contactPerson.MainResponsibleWorker) && validateFieldEventArgs.parmValidateResult());
                }
                break;

            case fieldNum(ContactPerson, VendorPortalAccessAllowed) :
                if (contactPerson.orig().VendorPortalAccessAllowed != contactPerson.VendorPortalAccessAllowed
                    && contactPerson.Inactive == true
                    && contactPerson.VendorPortalAccessAllowed == NoYes::Yes)
                {
                    validateFieldEventArgs.parmValidateResult(checkFailed("@SCM:VendorPortalUserMustBeActiveContact") && validateFieldEventArgs.parmValidateResult());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedWriteEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after validating the write of a <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_sender">The <c>ContactPerson</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(ContactPerson), DataEventType::ValidatedWrite)]
    public static void validatedWriteEventHandler(Common _sender, DataEventArgs _e)
    {
        var             contactPerson = _sender as ContactPerson;
        var             validateArgs = _e as ValidateEventArgs;

        if (contactPerson.MainResponsibleWorker)
        {
            validateArgs.parmValidateResult(smmUtility::isValidWorkerInCurrentCompany(contactPerson.MainResponsibleWorker) && validateArgs.parmValidateResult());
        }

        if (contactPerson.RecId == 0 && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            CustTable custTable = CustTable::findByPartyRecId(contactPerson.ContactForParty);

            // Don't allow new contacts to be added to merged BR's/customers
            if (custTable.mcrMergedParent)
            {
                validateArgs.parmValidateResult(checkFailed(strFmt("@MCR25709",custTable.AccountNum, custTable.mcrMergedParent) )  && validateArgs.parmValidateResult());
            }
            // Don't allow new contacts to be added to deleted BR's
            else if (smmBusRelTable::findByParty(contactPerson.Party).mcrIsListDeleted() == NoYes::Yes)
            {
                validateArgs.parmValidateResult(checkFailed("@MCR26125") && validateArgs.parmValidateResult());
            }
        }

        if (contactPerson.Inactive == true && contactPerson.VendorPortalAccessAllowed == NoYes::Yes)
        {
            validateArgs.parmValidateResult(checkFailed("@SCM:VendorPortalUserMustBeActiveContact") && validateArgs.parmValidateResult());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFromCommonEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after initializing a <c>ContactPerson</c> record from another record.
    /// </summary>
    /// <param name="_args">The arguments for the event.</param>
    [PostHandlerFor(tableStr(ContactPerson), tableMethodStr(ContactPerson, initFromCommon))]
    public static void initializedFromCommonEventHandler(XppPrePostArgs _args)
    {
        var contactPerson = _args.getThis() as ContactPerson;
        var common = _args.getArgNum(1) as Common;

        switch (common.TableId)
        {
            case tableNum(smmBusRelTable) :
                contactPerson.initFromBusRel(common);
                break;

            case tableNum(SalesQuotationTable) :
                var salesQuotationTable = common as SalesQuotationTable;
                if (salesQuotationTable.BusRelAccount)
                {
                    contactPerson.initFromBusRel(smmBusRelTable::find(salesQuotationTable.BusRelAccount));
                }
                else if (salesQuotationTable.CustAccount)
                {
                    contactPerson.initFromCustTable(CustTable::find(salesQuotationTable.CustAccount));
                }
                break;

            case tableNum(CustTable) :
                contactPerson.initFromCustTable(common);
                break;

            case tableNum(SalesTable) :
                var salesTable = common as SalesTable;
                contactPerson.initFromCustTable(salesTable.custTable_CustAccount());
                break;

            case tableNum(VendTable) :
                contactPerson.initFromVendTable(common);
                break;

            case tableNum(PurchTable) :
                var purchTable = common as PurchTable;
                contactPerson.initFromVendTable(purchTable.vendTable_OrderAccount());
                break;

            case tableNum(smmLeadTable) :
                contactPerson.initFromLeadTable(common);
                break;

            case tableNum(smmOpportunityTable) :
                contactPerson.initFromOpportunityTable(common);
                break;

            case tableNum(smmQuotationCompetitorGroup) :
                contactPerson.initFromCompetitorTable(common);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFromPartyEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after initializing a <c>ContactPerson</c> record from a <c>DirPartyTable</c> record.
    /// </summary>
    /// <param name="_args">The arguments for the event.</param>
    [PostHandlerFor(tableStr(ContactPerson), tableMethodStr(ContactPerson, initFromParty))]
    public static void initializedFromPartyEventHandler(XppPrePostArgs _args)
    {
        var             contactPerson = _args.getThis() as ContactPerson;

        smmBusRelTable          smmBusRelTable  = smmBusRelTable::findByParty(contactPerson.ContactForParty);

        if (smmBusRelTable)
        {
            contactPerson.initFromBusRel(smmBusRelTable);
            return;
        }

        CustTable               custTable = CustTable::findByPartyRecId(contactPerson.ContactForParty);

        if (custTable)
        {
            contactPerson.initFromCustTable(custTable);
            return;
        }

        VendTable               vendTable = VendTable::findByPartyRecId(contactPerson.ContactForParty);
        if (vendTable)
        {
            contactPerson.initFromVendTable(vendTable);
            return;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>