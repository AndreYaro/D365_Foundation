<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchaseTaxReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxPurchaseTaxReportDP</c> class is the Report Data Provider class for the
///    <c>TaxPurchaseTaxReport</c> SRS Report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>TaxPurchaseTaxReport</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(TaxPurchaseTaxReportQuery)),
    SRSReportParameterAttribute(classstr(TaxPurchaseTaxReportContract))
]
public class TaxPurchaseTaxReportDP  extends SrsReportDataProviderPreProcessTempDB
{
    TaxPurchaseTaxReportTmp taxPurchaseTaxReportTmp;
    CompanyInfo             companyInfo;
    LogisticsPostalAddress  postalAddress;
    TaxPurchaseTaxTrans     taxPurchaseTaxTrans;
    TaxPurchaseTaxTable     taxPurchaseTaxTable;

    boolean                 ret;
    Addressing              companyAddress;
    Phone                   companyPhone;
    Name                    companyName;
    VATNum                  companyVATNum;
    TransDate               reportDate;
    Description             reportingQuarter;
    Integer                 quarter;
    Integer                 reportYear;
    TransDate               fromDate;
    Integer                 monthNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxPurchaseTaxReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>TaxPurchaseTaxReportTmp</c> Temporary Table.
    /// </summary>
    /// <returns>
    /// Data from the <c>TaxPurchaseTaxReportTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(TaxPurchaseTaxReportTmp))]
    public TaxPurchaseTaxReportTmp getTaxPurchaseTaxReportTmp()
    {
        select taxPurchaseTaxReportTmp;
        return taxPurchaseTaxReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to insert data into the <c>TaxPurchaseTaxReportTmp</c> temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        taxPurchaseTaxTable                      = TaxPurchaseTaxTable::find();
        taxPurchaseTaxReportTmp.Address          = TaxAuthorityAddress::address(taxPurchaseTaxTable.TaxAuthority);
        taxPurchaseTaxReportTmp.BaseAmountMST    = taxPurchaseTaxTrans.BaseAmountMST;
        taxPurchaseTaxReportTmp.CompanyAddress   = companyAddress;
        taxPurchaseTaxReportTmp.CompanyName      = companyName;
        taxPurchaseTaxReportTmp.CompanyPhone     = companyPhone;
        taxPurchaseTaxReportTmp.VATNum           = companyVATNum;
        if (taxPurchaseTaxTrans.Percent)
        {
            taxPurchaseTaxReportTmp.Percent = taxPurchaseTaxTrans.Percent * 10;
        }
        else
        {
            taxPurchaseTaxReportTmp.Percent = TaxPurchaseTaxValue::findByTaxDate(taxPurchaseTaxTrans.TransDate).Percent * 10;
        }
        taxPurchaseTaxReportTmp.TaxAmount        = taxPurchaseTaxTrans.TaxAmountMST;        
        taxPurchaseTaxReportTmp.TaxAuthorityName = TaxAuthorityAddress::taxAuthorityName(taxPurchaseTaxTable.TaxAuthority);
        taxPurchaseTaxReportTmp.TaxCode          = taxPurchaseTaxTrans.TaxCode;
        taxPurchaseTaxReportTmp.TaxName          = taxPurchaseTaxTrans.taxName();
        taxPurchaseTaxReportTmp.ReportingQuarter = reportingQuarter;
        taxPurchaseTaxReportTmp.ReportingYear    = year(reportDate);
        taxPurchaseTaxReportTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method should compute data and populate the data
    /// tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoAT, GlobalizationConstants::FeatureReferenceAT00003] ],
            funcName()
        );

        QueryRun    queryRun;

        TaxPurchaseTaxReportContract contract = this.parmDataContract() as TaxPurchaseTaxReportContract;

        reportDate          = contract.parmReportDate();
        queryRun            = new QueryRun(this.parmQuery());
        ret                 = false;
        companyInfo         = CompanyInfo::find();
        postalAddress       = companyInfo.postalAddress();
        companyName         = companyInfo.name();
        companyPhone        = companyInfo.phone();
        companyVATNum       = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, reportDate);
        companyAddress      = postalAddress.Address;

        while (queryRun.next())
        {
            taxPurchaseTaxTrans = queryRun.get(tablenum(TaxPurchaseTaxTrans));
            if (taxPurchaseTaxTrans.ReportVoucher != taxPurchaseTaxTrans.Voucher)
            {
                // If the report is called directly from the menu, the reportDate is
                // taken from the first taxPurchaseTaxTrans that is printed.
                if ( !ret && reportDate == dateNull())
                {
                    reportDate = taxPurchaseTaxTrans.ReportDate;
                }
                ret = true;
                fromDate            = TaxPurchaseTaxTrans::minTransdate(reportDate);
                reportYear          = year(fromDate);
                monthNumber         = mthofyr(fromDate);
                quarter             = ((monthNumber-1) div 3) + 1;
                reportingQuarter    = strfmt('0%1/%2', quarter, reportYear);
                this.insertIntoTempTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>