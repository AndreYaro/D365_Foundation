<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetWarehouseTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class will allow creation of Latvian packing slip documents for the warehouse transfer.
/// </summary>
public class AssetWarehouseTransfer
{
    private OMDepartmentRecId departmentId;
    private HcmResponsibleRecId responsibleId;
    private AssetLocationId location;
    private AssetTransDate transDate;
    private LtAssetPackingSlip packingSlipJour;
    private PackingSlipId packingSlipNum;
    private LtDocNumberingCode numberingCode;
    private List assetList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPackingSlip</Name>
				<Source><![CDATA[
    private LtAssetPackingSlip createPackingSlip()
    {
        TransportationDocument transportationDocument;
        NumberSequenceCode numberSeqCode;

        transportationDocument.initFromCommon(packingSlipJour);
        transportationDocument.insert();

        packingSlipJour.TrCreateTime        = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()));
        packingSlipJour.TrCreateDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        packingSlipJour.ResponsibleToId     = responsibleId;
        packingSlipJour.AssetLocationIdTo   = location;
        packingSlipJour.DepartmentToId      = departmentId;
        packingSlipJour.TransportationDocument = transportationDocument.RecId;
        packingSlipJour.RegisterById        = HcmWorker::userId2Worker(curUserId());

        if (packingSlipNum)
        {
            packingSlipJour.PackingSlipNo = packingSlipNum;
        }
        else if (numberingCode)
        {
            if (!LtInvoiceAutoNumberingTable::checkLastDate(numberingCode, packingSlipJour.TrCreateDate, true))
            {
                throw error("@SYS18447");
            }

            numberSeqCode = LtInvoiceAutoNumberingTable::find(numberingCode).NumberSequenceCode;
            packingSlipJour.PackingSlipNo = NumberSeq::newGetNumFromCode(numberSeqCode, NumberSeqScopeFactory::createDefaultScope(), true, false).num();
            packingSlipJour.NumberingCode = numberingCode;

            LtInvoiceAutoNumberingTable::updateLastDate(numberingCode, packingSlipJour.TrCreateDate);
        }

        packingSlipJour.insert();

        return packingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackingSlipLine</Name>
				<Source><![CDATA[
    private void createPackingSlipLine(
        AssetTable         _assetTable,
        LtAssetPackingSlip _packingSlipDraft)
    {
        LtAssetPackingSlipLine packingSlipLineTmp;

        packingSlipLineTmp.AssetId              = _assetTable.AssetId;
        packingSlipLineTmp.Description          = _assetTable.Name;
        packingSlipLineTmp.ResponsibleFromId    = _assetTable.WorkerResponsible;
        packingSlipLineTmp.AssetLocationIdFrom  = _assetTable.Location;
        packingSlipLineTmp.DepartmentFromId     = _assetTable.Department;
        packingSlipLineTmp.LtAssetPackingSlip   = _packingSlipDraft.RecId;
        packingSlipLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLtAssetPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LtAssetPackingSlip</c> record created during the transfer process.
    /// </summary>
    /// <returns>
    /// <c>LtAssetPackingSlip</c> buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LtAssetPackingSlip getLtAssetPackingSlip()
    {
        return packingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>AssetWarehouseTransfer</c> class.
    /// </summary>
    /// <param name="_assetList">
    /// A list of assets for which the packing slips will be generated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(List _assetList)
    {
        assetList = _assetList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepartmentId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public OMDepartmentRecId parmDepartmentId(OMDepartmentRecId _departmentId)
    {
        departmentId = _departmentId;
        return departmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetLocationId parmLocation(AssetLocationId _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberingCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LtDocNumberingCode parmNumberingCode(LtDocNumberingCode _numberingCode = numberingCode)
    {
        numberingCode = _numberingCode;
        return numberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PackingSlipId parmPackingSlipNum(PackingSlipId _packingSlipNum = packingSlipNum)
    {
        packingSlipNum = _packingSlipNum;
        return packingSlipNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponsibleId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmResponsibleRecId parmResponsibleId(HcmResponsibleRecId _responsibleId = responsibleId)
    {
        responsibleId = _responsibleId;
        return responsibleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransfer</Name>
				<Source><![CDATA[
    private void processTransfer()
    {
        #OCCRetryCount
        AssetTable assetTable;
        ListIterator iterator;
        LtAssetPackingSlip packingSlipDraft;

        if (assetList && !assetList.empty())
        {
            try
            {
                iterator = new ListIterator(assetList);

                ttsbegin;

                packingSlipDraft = this.createPackingSlip();
                while (iterator.more())
                {
                    assetTable = assetTable::findByRecId(iterator.value(), true);
                    if (assetTable)
                    {
                        this.createPackingSlipLine(assetTable, packingSlipDraft);

                        assetTable.Location     = location;
                        assetTable.Department   = departmentId;
                        assetTable.WorkerResponsible  = responsibleId;
                        assetTable.update();
                    }
                    iterator.next();
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the transfer process.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        this.processTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value entered by the user.
    /// </summary>
    /// <param name="calledFrom">
    /// The object that called this method; optional.
    /// </param>
    /// <returns>
    /// true if entered values are correct, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validate(Object calledFrom = null)
    {
        boolean returnValue = true;

        if (location && !AssetLocation::exist(location))
        {
            returnValue = checkFailed(strfmt("@GLS113510", location));
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>