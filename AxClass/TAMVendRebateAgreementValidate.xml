<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateAgreementValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateAgreementValidate</c> class serves to validate the vendor rebate agreemnet and all its lines
/// in order to avoid quantity and amount overlaps and invalid combinations of Units of measure.
/// </summary>
public class TAMVendRebateAgreementValidate extends RunBase
{
    RecId                   recId;

    PdsRebateVerifier       verifier;
    NoYes                   remove;
    NoYes                   isAlreadyValidated;

    DialogField             fieldVerifier;
    DialogField             fieldRemove;

    TAMVendRebateAgreement  vendRebateAgreement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog to be presented to the user.
    /// </summary>
    /// <returns>
    /// An object of the <c>DialogRunBase</c> Class.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        Object          fieldApproverControl;

        fieldVerifier = dialog.addFieldValue(extendedTypeStr(TAMRebateVerifier),
                                                verifier,
                                                "@PDS1418");

        fieldApproverControl = fieldVerifier.control();

        fieldApproverControl.registerOverrideMethod(identifierstr(LookupReference),
                                                    methodstr(TAMVendRebateAgreementValidate,
                                                    workerLookup),
                                                    this);

        fieldApproverControl.replacementFieldGroup(identifierstr(PersonnelNumber));

        if (this.isAlreadyValidated())
        {
            fieldRemove = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                remove,
                                                "@PDS1431");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the dialog <c>Remove Validation</c> field values.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        this.parmVerifier(fieldVerifier.value());

        if (fieldRemove)
        {
            remove = fieldRemove.value();
        }
        else
        {
            remove = NoYes::No;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <returns>
    /// true if there are no problems with the initialization; otherwise false.
    /// </returns>
    public boolean init()
    {
        boolean ret;
        ret = super();

        vendRebateAgreement = TAMVendRebateAgreement::find(recId);

        isAlreadyValidated = vendRebateAgreement.Validated;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor rebate agreement is already validated.
    /// </summary>
    /// <returns>
    /// true if already validated; otherwise, false.
    /// </returns>
    public boolean isAlreadyValidated()
    {
        return isAlreadyValidated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        verifier = HcmWorker::userId2Worker(curuserid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>RecId</c> of the vendor rebate agreement to Validate.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the vendor rebate agreement to validate.
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the vendor rebate agreement to validate.
    /// </returns>
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVerifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the verifier of the vendor rebate agreement to validate.
    /// </summary>
    /// <param name="_verifier">
    /// The verifier of the vendor rebate agreement to validate.
    /// </param>
    /// <returns>
    /// The verifier of the vendor rebate agreement to validate.
    /// </returns>
    public PdsRebateVerifier parmVerifier(PdsRebateVerifier _verifier = verifier)
    {
        verifier = _verifier;

        return verifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the selected vendor rebate agreement and validates the vendor rebate agreement.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid vendor rebate agreement.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid vendor rebate agreement.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// An update conflict is not recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// An update conflict is present.
    /// </exception>
    public void run()
    {
        #OCCRetryCount
        TAMVendRebateAgreement  tamVendRebateAgreement;

        if (!this.validate())
        {
            throw error("@PDS1427");
        }

        try
        {
            ttsbegin;

            tamVendRebateAgreement = TAMVendRebateAgreement::find(recId, true);

            if (!remove
                && !tamVendRebateAgreement.validateWrite())
            {
               throw error("@PDS1427");
            }

            if (remove)
            {
                tamVendRebateAgreement.invalidateRebateAgreement(true);
            }
            else
            {
               tamVendRebateAgreement.Validated         = true;
               tamVendRebateAgreement.Verifier          = verifier;
               tamVendRebateAgreement.WFApprovalStatus  = TAMVendRebateApprovalStatus::Approved;

               tamVendRebateAgreement.update(false);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor rebate agreement is validated.
    /// </summary>
    /// <param name="_calledFrom">
    /// The form that called the validation.
    /// </param>
    /// <returns>
    /// true if the vendor rebate agreement is validated; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!remove)
        {
            if (verifier)
            {
                ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(verifier);
                if (!ret)
                {
                    error(strfmt("@SYS39817", HcmWorker::find(verifier).PersonnelNumber));
                }
            }
            else
            {
                ret = checkFailed("@SYS8980");
            }

            if (!vendRebateAgreement)
            {
                vendRebateAgreement = TAMVendRebateAgreement::find(recId);
            }

            if (vendRebateAgreement)
            {
                ret = ret && vendRebateAgreement.checkIfLineExists();
                ret = ret && vendRebateAgreement.checkLineBreaks();
                ret = ret && vendRebateAgreement.checkUOMConvert();
            }
            else
            {
                throw error("@MCR27548");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for selecting a worker in the current legal entity.
    /// </summary>
    /// <param name="_callerControl">
    /// The control which called the validation.
    /// </param>
    /// <returns>
    /// The selected worker record.
    /// </returns>
    public Common workerLookup(Object _callerControl)
    {
        return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(_callerControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>TAMVendRebateAgreementValidate</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed from the calling form.
    /// </param>
    /// <returns>
    /// Returns an instance of the <c>TAMVendRebateAgreementValidate</c> class.
    /// </returns>
    static TAMVendRebateAgreementValidate construct(Args _args)
    {
        TAMVendRebateAgreementValidate  vendRebateAgreementValidate;
        TAMVendRebateAgreementLine      vendRebateAgreementLine;

        if (_args.record())
        {
            switch (_args.dataset())
            {
                case tablenum(TAMVendRebateAgreement):
                    return TAMVendRebateAgreementValidate::newRebateAgreement(_args.record());

                case tablenum(TAMVendRebateAgreementLine):
                    vendRebateAgreementLine = _args.record();
                    return TAMVendRebateAgreementValidate::newRebateAgreement(vendRebateAgreementLine.tamVendRebateAgreement());
            }

            throw error(strfmt("@SYS26273", classId2Name(classidget(vendRebateAgreementValidate))));
        }
        else
        {
            throw error("@MCR27548");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the <c>TAMVendRebateAgreementValidate</c> class.
    /// </summary>
    /// <returns>
    /// The description of the <c>TAMVendRebateAgreementValidate</c> class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@PDS1426";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the <c>TAMVendRebateAgreementValidate</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed from the calling form.
    /// </param>
    public static void main(Args _args)
    {
        TAMVendRebateAgreementValidate  tamVendRebateAgreementValidate;
        FormDataSource                  datasource;

        tamVendRebateAgreementValidate = TAMVendRebateAgreementValidate::construct(_args);

        if (tamVendRebateAgreementValidate.prompt())
        {
            tamVendRebateAgreementValidate.runOperation();

            if (_args.record() && FormDataUtil::getFormDataSource(_args.record()))
            {
                datasource = FormDataUtil::getFormDataSource(_args.record());
                datasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>TAMVendRebateAgreementValidate</c> class and sets the class parms with the
    /// information of the vendor rebate agreemnet.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// The <c>TAMVendRebateAgreement</c> record for which validation occurs.
    /// </param>
    /// <returns>
    /// A new instance of <c>TAmVendRebateAgreementValidate</c> class.
    /// </returns>
    public static TAMVendRebateAgreementValidate newRebateAgreement(TAMVendRebateAgreement _rebateAgreement)
    {
        TAMVendRebateAgreementValidate validate = new TAMVendRebateAgreementValidate();

        validate.getLast();
        validate.parmRecId(_rebateAgreement.RecId);
        validate.init();

        return validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>