<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanyDiscCalculationHelper_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntercompanyDiscCalculationHelper_PL</c> class is a helper class that works for Poland intercompany order line amount calculation.
/// </summary>
public final class IntercompanyDiscCalculationHelper_PL
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIntercompanySalesOrderRootDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A recursive method to get the data area ID of the root sales order of an intercompany sales order.
    /// </summary>
    /// <param name = "_salesTable">The sales order which we need to get the data area ID of its root sales order</param>
    /// <returns>The data area ID of the sales order's root sales order</returns>
    internal static DataAreaID getIntercompanySalesOrderRootDataAreaId(SalesTable _salesTable)
    {
        if (_salesTable.InterCompanyOriginalSalesId == '')
        {
            // This sales order is not generated in direct delivery and is an intercompany order
            // We reach the root sales order
            return curext();
        }
        else
        {
            // involved in direct delivery. Need to check origin sales order. Change company to direct delivery purchase order, which is the same company as origin sales order.
            changecompany(_salesTable.InterCompanyCompanyId)
            {
                SalesTable nextSalesTable = SalesTable::find(_salesTable.InterCompanyOriginalSalesId);
                return IntercompanyDiscCalculationHelper_PL::getIntercompanySalesOrderRootDataAreaId(nextSalesTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntercompanyPurchaseOrderRootDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A recursive method to get the data area ID of the root sales order of an intercompany purchase order.
    /// </summary>
    /// <param name = "_purchTable">The purchase order which we need to get the data area ID of its root sales order</param>
    /// <returns>The data area ID of the purchase order's root sales order</returns>
    public static DataAreaID getIntercompanyPurchaseOrderRootDataAreaId(PurchTable _purchTable)
    {
        if (_purchTable.InterCompanyOriginalSalesId == '')
        {
            // This is normal intercompany order and we should use the intercompany sales order
            return _purchTable.InterCompanyCompanyId;
        }
        else
        {
            // involved in direct delivery. Need to check origin sales order. 
            // Origin sales order is in the same company as direct delivery purchase order, so no need to change company.
            SalesTable salesTable = SalesTable::find(_purchTable.InterCompanyOriginalSalesId);
            return IntercompanyDiscCalculationHelper_PL::getIntercompanySalesOrderRootDataAreaId(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmountForPolIntercompanyOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// A wrapper of <c>PriceDisc::price2Amount</c> method, which provides the ability to use Poland line discount calculation method in non-Poland entity and vice versa.
    /// </summary>
    /// <param name = "_targetDataAreaIdToSwitchTo">The data area ID which we want to use the discount line amount calculation method of its region</param>
    /// <returns>The calculated line amount</returns>
    internal static AmountCur calculateLineAmountForPolIntercompanyOrder(
                                                  PriceCur                _price,
                                                  PriceUnit               _priceUnit,
                                                  DiscAmount              _discAmount,
                                                  Qty                     _qtyNow,
                                                  Qty                     _qty,
                                                  MarkupAmount            _markup,
                                                  DiscPct                 _discPercent,
                                                  CurrencyCode            _currencyCode,
                                                  Amount                  _amount,
                                                  boolean                 _forceAmountCalculation,
                                                  DataAreaId              _targetDataAreaIdToSwitchTo)
    {
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        AmountCur lineAmount;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL], _targetDataAreaIDToSwitchTo))
        {
            // if current is Poland and the root is not, do not use Poland calc method
            lineAmount = PriceDisc::intercompanyInvolvingPolPrice2Amount(_price,
                                                                         _priceUnit,
                                                                         _discAmount,
                                                                         _qtyNow,
                                                                         _qty,
                                                                         _markup,
                                                                         _discPercent,
                                                                         _currencyCode,
                                                                         _amount,
                                                                         _forceAmountCalculation,
                                                                         false);
        }
        else if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL], _targetDataAreaIDToSwitchTo))
        {
            // root is Poland and the current is not, need to check Poland line discount calculation method
            boolean shouldUsePolCalc = false;

            changecompany(_targetDataAreaIdToSwitchTo)   // switch to root which is Poland for the query below
            {
                shouldUsePolCalc = SalesParameters::find().LineDiscCalculation_PL == PlLineDiscCalcType::PcsPrice;
            }

            lineAmount = PriceDisc::intercompanyInvolvingPolPrice2Amount(_price,
                                                                         _priceUnit,
                                                                         _discAmount,
                                                                         _qtyNow,
                                                                         _qty,
                                                                         _markup,
                                                                         _discPercent,
                                                                         _currencyCode,
                                                                         _amount,
                                                                         _forceAmountCalculation,
                                                                         shouldUsePolCalc);
        }
        // current and root are the same OR neither of them are PL, use old logic
        else
        {
            lineAmount = PriceDisc::price2Amount(_price,
                                                 _priceUnit,
                                                 _discAmount,
                                                 _qtyNow,
                                                 _qty,
                                                 _markup,
                                                 _discPercent,
                                                 _currencyCode,
                                                 _amount,
                                                 _forceAmountCalculation);
        }

        return lineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>