<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaSubscriptionGenerator_ReductionDays</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaSubscriptionGenerator_ReductionDays extends SMASubscriptionGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        protected void createTrans()
    {
        ProjRevenueTrans            projRevenueTrans;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjPeriodLine              projPeriodLine;
        TransDate                   fromDate;
        TransDate                   toDate;
        TransDate                   parmFromDate;
        TransDate                   parmToDate;
        container                   closedPeriods;
        Amount                      salesPrice;
        Counter                     counter;

        while select PeriodId, PeriodFrom, PeriodTo from projPeriodLine
            where    projPeriodLine.PeriodId     == smaSubscriptionTable.invoicePeriodCode()                 &&
                     projPeriodLine.PeriodFrom   >= smaSubscriptionTable.invoiceperiodStart(this.fromDate()) &&
                     projPeriodLine.PeriodTo     <= smaSubscriptionTable.invoiceperiodEnd(this.toDate())
        {
            [parmFromDate, parmToDate] = this.getActualDates(projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo);
            closedPeriods = smaSubscriptionTable.findPeriods(parmFromDate, parmToDate, true);

            if (closedPeriods)
            {
                for (counter = 1; counter <= conlen(closedPeriods); counter++)
                {
                    [fromDate, toDate]  = conpeek(closedPeriods, counter);
                    [projRevenueTrans, projRevenueTransSale] = this.getLastProjRevenuetrans(fromDate, toDate);

                    if (projRevenueTrans && projRevenueTransSale)
                    {
                        salesPrice = this.getSalesprice(fromDate,
                                                        toDate,
                                                        projRevenueTrans.smaStartDate,
                                                        projRevenueTrans.smaEnddate,
                                                        projRevenueTransSale.SalesPrice);

                        this.postTrans(salesPrice,
                                       fromDate,
                                       toDate,
                                       SMASubscriptionPeriodType::ReductionDays);
                    }

                    while select projRevenueTrans
                        order by TransId
                        where    projRevenueTrans.smaSubscriptionId          == smaSubscriptionTable.SubscriptionId      &&
                                 projRevenueTrans.smaStartDate               <= fromDate                                 &&
                                 projRevenueTrans.smaEnddate                 >= toDate                                   &&
                                 projRevenueTrans.TransactionOrigin          == ProjOrigin::Subscription                 &&
                                 projRevenueTrans.smaSubscriptionPeriodType  == SMASubscriptionPeriodType::PriceChange
                        join     projRevenueTransSale
                        where    projRevenueTransSale.TransId                == projRevenueTrans.TransId
                                && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                                || projRevenueTransSale.TransStatus == ProjTransStatus::InvoiceProposal
                                || projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced
                                || projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditNote
                                || projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                    {
                        salesPrice = this.getSalesprice(fromDate,
                                                        toDate,
                                                        projRevenueTrans.smaStartDate,
                                                        projRevenueTrans.smaEnddate,
                                                        projRevenueTransSale.SalesPrice);
                        this.postTrans(salesPrice,
                                       fromDate,
                                       toDate,
                                       SMASubscriptionPeriodType::ReductionDays);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastProjRevenuetrans</Name>
				<Source><![CDATA[
        public container getLastProjRevenuetrans(TransDate _fromDate, TransDate _toDate)
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;

        select firstonly reverse projRevenueTrans
            order by TransId
            where    projRevenueTrans.smaSubscriptionId          == smaSubscriptionTable.SubscriptionId      &&
                     projRevenueTrans.smaStartDate               <= _fromDate                                &&
                     projRevenueTrans.smaEnddate                 >= _toDate                                  &&
                     projRevenueTrans.TransactionOrigin          == ProjOrigin::Subscription                 &&
                     projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::ReductionDays &&
                     projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::PriceChange
            join     projRevenueTransSale
            where    projRevenueTransSale.TransId                == projRevenueTrans.TransId
                                && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                                || projRevenueTransSale.TransStatus == ProjTransStatus::InvoiceProposal
                                || projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced
                                || projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditNote
                                || projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal);

        return [projRevenueTrans, projRevenueTransSale];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesprice</Name>
				<Source><![CDATA[
        public Amount getSalesprice(TransDate _subPeriodFrom, TransDate _subPeriodTo, TransDate _invPeriodFrom = dateNull(), TransDate _invPeriodTo = dateNull(), Amount _parentFeeTransaction = 0)
    {
        Amount              ret;
        Amount              numerator;
        Amount              denominator;
        Days                subscriptionDays    = (_subPeriodTo - _subPeriodFrom) + 1;
        Days                invoicePeriodDays   = (_invPeriodTo - _invPeriodFrom) + 1;

        numerator = (-1 * _parentFeeTransaction * subscriptionDays);

        denominator = invoicePeriodDays;

        ret = denominator ? numerator / denominator : 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageText</Name>
				<Source><![CDATA[
        public str messageText()
    {
        // Subscription %1 reduced from start date %2 to end date %3
        return "@SYS84245";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        super();

        this.setDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>