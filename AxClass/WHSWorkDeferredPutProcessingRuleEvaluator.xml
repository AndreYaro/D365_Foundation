<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutProcessingRuleEvaluator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkDeferredPutProcessingRuleEvaluator</c> class is responsible for determining if deferred put processing should be used.
/// </summary>
internal final class WHSWorkDeferredPutProcessingRuleEvaluator extends WHSWorkDeferredOperationProcessingRuleEvaluator
{
    private WHSWorkTable                    workTable;
    private WHSWorkLine                     workLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    private WHSWorkTable parmWorkTable(WHSWorkTable _workTable = workTable)
    {
        workTable = _workTable;
        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkLine parmWorkLine(WHSWorkLine _workLine = workLine)
    {
        workLine = _workLine;
        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseDeferredPutProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if deferred put processing can be used.
    /// </summary>
    /// <param name = "_workPutFlow">The <c>WHSWorkPutFlow</c> value used for the put operation.</param>
    /// <returns>true if deferred processing can be used; otherwise, false.</returns>
    [Hookable(false)]    
    internal boolean canUseDeferredPutProcessing(WHSWorkPutFlow _workPutFlow)
    {
        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingRuleEvaluator));
        
        using (var ruleEvaluationContext = logger.ruleEvaluation().evaluateCanUseDeferredProcessing())
        {
            logger.logRecordInformation(workTable);

            if (!this.validateWorkPutFlow(_workPutFlow))
            {
                logger.logInformation('validateWorkPutFlow: false');
                return false;
            }

            if (!this.validateWorkOperationProcessingRule())
            {
                logger.logInformation('validateWorkOperationProcessingRule: false');
                return false;
            }

            if (!this.validateProcessingThreshold())
            {
                logger.logInformation('validateProcessingThreshold: false');
                return false;
            }

            if (!this.validateNotRunningInBatch())
            {
                logger.logInformation('validateNotRunningInBatch: false');                
                return false;
            }

            if (!this.validateNextWorkLineWorkStop())
            {
                logger.logInformation('validateNextWorkLineWorkStop: false');
                return false;
            }

            logger.logInformation('rule evaluation : true');                
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkPutFlow</Name>
				<Source><![CDATA[
    private boolean validateWorkPutFlow(WHSWorkPutFlow _workPutFlow)
    {
        return (_workPutFlow == WHSWorkPutFlow::MoveAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkOperationProcessingRule</Name>
				<Source><![CDATA[
    protected void initWorkOperationProcessingRule()
    {
        workOperationProcessingRule = WHSWorkOperationProcessingRuleProvider::construct().workOperationProcessingRule(workTable, WHSWorkType::Put);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessingThreshold</Name>
				<Source><![CDATA[
    private boolean validateProcessingThreshold()
    {
        return WHSWorkOperationDeferredProcessingThresholdRule::newFromParameters(workTable, workOperationProcessingRule).useDeferredWorkProcessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkDeferredPutProcessingRuleEvaluator construct()
    {
        return new WHSWorkDeferredPutProcessingRuleEvaluator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the class.
    /// </summary>
    /// <param name = "_workLine">The work line that should be used when determining if the deferred processing can be used.</param>
    /// <param name = "_initProcessingRule">Determine whether to initialize the processing rule when creating an instance of the class.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSWorkDeferredPutProcessingRuleEvaluator newFromWorkLine(WHSWorkLine _workLine, boolean _initProcessingRule = false)
    {
        var evaluator = WHSWorkDeferredPutProcessingRuleEvaluator::construct();
        evaluator.parmWorkLine(_workLine);
        evaluator.parmWorkTable(_workLine.whsWorkTable());

        if (_initProcessingRule)
        {
            evaluator.initWorkOperationProcessingRule();
        }
        
        return evaluator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkIsNotUsingContainers</Name>
				<Source><![CDATA[
    private boolean validateWorkIsNotUsingContainers()
    {
        return workTable.hasWorkLinesWithContainer() == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNextWorkLineWorkStop</Name>
				<Source><![CDATA[
    private boolean validateNextWorkLineWorkStop()
    {
        WHSWorkLine nextWorkLine = WHSWorkLine::find(this.parmWorkLine().WorkId, WHSWorkLine::firstLineNumWithWorkStatusAfterLine(this.parmWorkLine().WorkId, WHSWorkStatus::Open,  this.parmWorkLine().LineNum));

        if (nextWorkLine.RecId && !nextWorkLine.WorkStop)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>