<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckUnPost_Dismiss</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckUnPost_Dismiss extends RHRMJournalCheckPost implements BatchRetryable
{
    boolean deleteEmplPeriods;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
        protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean             ret;
        RHRMOrderTrans      orderTrans;
        JournalTransData    journalTransData    = _journalTransList.journalTransData();
        boolean             emplPeriodsExit     = false;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        deleteEmplPeriods = false;

        if (ret && journalCheckPostType != JournalCheckPostType::Check)
        {
            _journalTransList.reset();

            while (_journalTransList.next())
            {
                orderTrans = journalTransData.journalTrans();

                if (RPayEmplParameters::exist(orderTrans.EmplId))
                {
                    emplPeriodsExit = true;
                    break;
                }
            }

            if (emplPeriodsExit)
            {
                if (Box::yesNo("@RUP2736",
                                DialogButton::Yes,
                                "@SYS11132",
                                "@GLS104152") == DialogButton::Yes)
                {
                    deleteEmplPeriods = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        RPayHistory                 rPayHistory;
        boolean                     ret;
        RHRMOrderTrans              rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;
        ;
        ret = super(_journalTransData);

        if (RPayHistory::find(rhrmOrderTrans.EmplId).RecId != RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId).RecId)
        {
            ret = ret && checkFailed(strFmt("@RUP1869",
                                            rhrmOrderTrans.EmplId,
                                            RHRMEmplTable::emplId2Name(rhrmOrderTrans.EmplId)));
        }

        if (!RHRMParameters::find().AllowOverdraft)
        {
            rPayHistory = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId, rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);

            if (rPayHistory.hrmStaffListRefRecId)
            {
                rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(rPayHistory.hrmStaffListRefRecId, maxDate());
                rhrmStaffListHistoryCheck.deleteHistory(rhrmOrderTrans);

                if (! rhrmStaffListHistoryCheck.historyIsCorrect())
                {
                    ret = ret && checkFailed(strFmt("@RUP1909",
                                                    rhrmOrderTrans.EmplId,
                                                    RHRMEmplTable::emplId2Name(rhrmOrderTrans.EmplId)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
        protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans                  rhrmOrderTrans          = _journalTransData.journalTrans();
        RPayHistory                     rPayHistoryLast         = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId,
                                                                                                  rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);
        RHRMEmplTable                   emplTable               = RHRMEmplTable::find(rhrmOrderTrans.EmplId, true);
        RpayHRMOrganizationId           organizationId;

        RHRMVacationType                hrmVacationType;
        RPayAverageEarnEmplPeriodTable  payAverageEarnEmplPeriodTable;
        RPayEmplParameters              rPayEmplParameters;

        TransDate                       resignedDate;

        super(_journalTransData);

        resignedDate = emplTable.PayResignedDate;

        emplTable.PayResignedDate   = dateNull();
        emplTable.doUpdate();

        rPayHistoryLast = RPayHistory::findOrderTransRecId(rhrmOrderTrans.RecId, true);
        organizationId  = rPayHistoryLast.HrmOrganizationId;
        rPayHistoryLast.doDelete();

        if (updateTbl && isConfigurationkeyEnabled(configurationKeyNum(RPayTbl)))
        {
            RpayTblSpecTimeTrans::reCreateTbl(rhrmOrderTrans.EmplId,
                                              max(dateStartMth(RPayParameters::payPeriod()), dateStartMth(rhrmOrderTrans.StartDate)),
                                              dateNull(),
                                              organizationId);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(RpayAverageEarn)))
        {
            delete_from payAverageEarnEmplPeriodTable
                where payAverageEarnEmplPeriodTable.EmplId             == emplTable.EmployeeId                             &&
                      payAverageEarnEmplPeriodTable.StartDate          == resignedDate                                 &&
                      payAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation &&
                      payAverageEarnEmplPeriodTable.Included           == NoYes::No
            exists join hrmVacationType
                where hrmVacationType.VacationTypeId   == payAverageEarnEmplPeriodTable.VacationTypeId &&
                      hrmVacationType.CalcCompensation == NoYes::Yes;
        }

        if (deleteEmplPeriods && RPayEmplParameters::exist(emplTable.EmployeeId))
        {
            rPayEmplParameters = RPayEmplParameters::find(emplTable.EmployeeId, true);
            rPayEmplParameters.delete();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>