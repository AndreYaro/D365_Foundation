<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmMailingGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmMailingGenerate extends RunBase
{
    QueryRun                    mailingQR;

    DialogField                 dialogCategory;
    DialogField                 dialogItemId;
    DialogField                 dialogStatus;
    DialogField                 dialogPlanned;

    smmMailingCategoryId        category;
    smmMailingCategoryItemId    categoryItem;
    smmMailingStatus            mailingStatus;
    TransDate                   plannedDate;

    #define.CurrentVersion(4)
    #localMacro.CurrentList
        category,
        categoryItem,
        mailingStatus,
        plannedDate
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCategoryGroup</Name>
				<Source><![CDATA[
    public void createCategoryGroup()
    {
        smmMailingCategoryGroup smmMailingCategoryGroup;

        if (! smmMailingCategoryGroup::find(category))
        {
            smmMailingCategoryGroup.CategoryId = category;

            smmMailingCategoryGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMailingGroup</Name>
				<Source><![CDATA[
    public void createMailingGroup()
    {
        smmMailingGroup smmMailingGroup;

        if (! smmMailingGroup::find(category, categoryItem))
        {
            smmMailingGroup.CategoryId      = category;
            smmMailingGroup.CategoryItemId  = categoryItem;

            smmMailingGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        // Generate mailings
        DialogRunbase dialog = super();

        // New mailing
        dialog.addGroup("@SYS80065");

        dialogCategory      = dialog.addFieldValue(extendedTypeStr(smmMailingCategoryId), category);
        // Abbreviation/code for category of mailing to be made or appended to
        dialogCategory.helpText("@SYS80066");

        dialogItemId        = dialog.addFieldValue(extendedTypeStr(smmMailingCategoryItemId), categoryItem);
        // Abbreviation/code for type of mailing to be created or appended to
        dialogItemId.helpText("@SYS80067");

        // Status
        dialogStatus        = dialog.addFieldValue(enumStr(smmMailingStatus), mailingStatus);

        // Planned date
        dialogPlanned       = dialog.addFieldValue(extendedTypeStr(TransDate), plannedDate, "@SYS80063");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategory</Name>
				<Source><![CDATA[
    smmMailingCategoryId getCategory()
    {
        return dialogCategory.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        category        = dialogCategory.value();
        categoryItem    = dialogItemId.value();
        mailingStatus   = dialogStatus.value();
        plannedDate     = dialogPlanned.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        mailingQR = new QueryRun(querystr(smmMailingGenerate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, mailingQR.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>QueryRun</c> class that is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class.
    /// </returns>
    public QueryRun queryRun()
    {
        return mailingQR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        DirPartyTable           dirPartyTable;
        ContactPerson           contactPerson;
        smmMailings             smmMailings;
        boolean                 logTable;
        NumberSeq               numKeyId;
        CrmWorkerRecId          worker;
        smmSalesUnitId          salesUnitId;
        NumberSequenceReference numberSequenceReference;
        Set                     contactList;

        //  Prepare mailings parameter
        worker      = smmUtility::getCurrentContactWorker();
        salesUnitId = smmUtility::getCurrentSalesUnit();

        // Determine if CRM log should be updated when new mailings are created
        logTable    = smmParameters::logAction(smmLogAction::insert) && smmParameters::logTable(tablenum(smmMailings));

        ttsbegin;

        // Create mailing category if not exist
        this.createCategoryGroup();

        // Create mailing item if not exist
        this.createMailingGroup();

        contactList = new Set(Types::String);

        numberSequenceReference = smmParameters::numBusRelSectorKeyId();

        numKeyId = NumberSeq::newGetNum(numberSequenceReference, false, false);

        while (mailingQR.next())
        {
            dirPartyTable   = mailingQR.get(tablenum(DirPartyTable));
            contactPerson   = mailingQR.get(tablenum(ContactPerson));

            if (contactPerson && dirPartyTable && !contactList.in(contactPerson.ContactPersonId))
            {
                // Find next number in number sequence
                smmMailings.KeyId           = numKeyId.num();

                // Insert mailing record
                smmMailings.ContactPersonId = contactPerson.ContactPersonId;
                smmMailings.Party           = dirPartyTable.RecId;
                smmMailings.CategoryId      = category;
                smmMailings.CategoryItemId  = categoryItem;
                smmMailings.MailingDate     = plannedDate;
                smmMailings.Status          = mailingStatus;

                smmMailings.insert(logTable, worker, salesUnitId);

                contactList.add(contactPerson.ContactPersonId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    /// button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int             version     = RunBase::getVersion(packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery)
                {
                    mailingQR = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        // Check that a category is filled in
        if (! dialogCategory.value() )
        {
            // Category group is not specified correctly
            ret = checkFailed("@SYS80595") && ret;
        }

        // Check that an item is filled in and that the item is a member of the selected category
        if (! dialogItemId.value())
        {
            // Category item is not specified correctly
            ret = checkFailed("@SYS80594") && ret;
        }

        // Is planned date filled in
        if (! dialogPlanned.value())
        {
            // Planned date is not specified
            ret = checkFailed("@SYS80593") && ret;
        }

        // Is category group and item filled out
        if (dialogCategory.value() && dialogItemId.value())
        {
            // Check that item is part of the category group
            if (! smmMailingGroup::find(dialogCategory.value(), dialogItemId.value()))
            {
                // Category item is not specified correctly. Select an item that corresponds to the selected category
                ret = checkFailed(strfmt("@SYS80592", dialogCategory.value())) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static smmMailingGenerate construct()
    {
        return new smmMailingGenerate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Generate mailings
        return "@SYS80064";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmMailingGenerate smmMailingGenerate = smmMailingGenerate::construct();

        if (smmMailingGenerate.prompt())
        {
            smmMailingGenerate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>