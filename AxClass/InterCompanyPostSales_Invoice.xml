<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostSales_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice)]
[DocumentStatusFactoryAttribute(DocumentStatus::ApproveJournal)]
class InterCompanyPostSales_Invoice extends InterCompanyPostSales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
        DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternalJournalsToTransfer</Name>
				<Source><![CDATA[
        protected void findInternalJournalsToTransfer()
    {
        InventTransOrigin inventTransOriginVend;
        InventTransOrigin inventTransOriginCust;
        InventTrans inventTransVend;
        InventTrans inventTransCust;
        boolean inventTransCustFound;
        CustPackingSlipJour custPackingSlipJour;
        CustPackingSlipTrans custPackingSlipTrans;
        SalesQty qty;
        VendInvoiceTrans vendInvoiceTrans;

        if (transferFromJournal)
        {
            while select TableId from inventTransOriginVend
                where inventTransOriginVend.InventTransId == interCompanyTrans.InventTransId
                join markingRefInventTransOrigin, datePhysical, qty, inventDimId from inventTransVend
                    where inventTransVend.InventTransOrigin == inventTransOriginVend.RecId
                      && inventTransVend.InvoiceId == interCompanyJour.DocumentNum
                      && inventTransVend.DateFinancial >= interCompanyJour.DocumentDate
            {
                if (transferFromJournal)
                {
                    inventTransCustFound = false;

                    while select packingslipId, datePhysical from inventTransCust
                        where inventTransCust.InventTransOrigin == inventTransVend.MarkingRefInventTransOrigin
                           && inventTransCust.DatePhysical == inventTransVend.DatePhysical
                           && inventTransCust.Qty == -inventTransVend.Qty
                           && inventTransCust.InventDimId == inventTransVend.InventDimId
                        join InventTransId from inventTransOriginCust
                            where inventTransOriginCust.RecId == inventTransCust.InventTransOrigin
                    {
                        inventTransCustFound = true;

                        select firstonly custPackingSlipTrans
                            index hint TransIdIdx
                            where custPackingSlipTrans.InventTransId == inventTransOriginCust.InventTransId
                               && custPackingSlipTrans.PackingSlipId == inventTransCust.PackingSlipId
                               && custPackingSlipTrans.DeliveryDate == inventTransCust.DatePhysical;

                        custPackingSlipJour = custPackingSlipTrans.custPackingslipJour();

                        if (custPackingSlipJour)
                        {
                            this.insertTmpFrmVirtual(custPackingSlipJour);
                        }
                        else
                        {
                            tmpFrmVirtual = null;
                            transferFromJournal = false;
                            warning(strfmt("@SYS106123",interCompanyJour.InterCompanyId));
                        }
                    }

                    if (!inventTransCustFound)
                    {
                        tmpFrmVirtual = null;
                        transferFromJournal = false;
                        warning(strfmt("@SYS106123",interCompanyJour.InterCompanyId));
                    }
                }
            }
        }

        if (transferFromJournal)
        {
            while select Qty from custPackingSlipTrans
                where custPackingSlipTrans.InventTransId == interCompanyTrans.InventRefTransId
            join TableId, RecId from custPackingSlipJour
                where custPackingSlipJour.SalesId == custPackingSlipTrans.SalesId
                   && custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId
                   && custPackingSlipJour.DeliveryDate == custPackingSlipTrans.DeliveryDate
            {
                select tmpFrmVirtual
                     where tmpFrmVirtual.TableNum == custPackingSlipJour.TableId
                        && tmpFrmVirtual.RecordNo == custPackingSlipJour.RecId;

                if (tmpFrmVirtual)
                {
                    qty += custPackingSlipTrans.Qty;
                }
            }
            vendInvoiceTrans = interCompanyTrans;
            if (qty != vendInvoiceTrans.Qty)
            {
                tmpFrmVirtual = null;
                transferFromJournal = false;
                if (vendInvoiceTrans.isStocked())
                {
                    warning(strfmt("@SYS106257",interCompanyJour.InterCompanyId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
        void formLetterUpdate()
    {
        formletterPrintout = interCompanyJour.interCompanyEndpointActionPolicy().PrintSalesInvoice;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromParmId</Name>
				<Source><![CDATA[
        ParmId fromParmId()
    {
        ParmId parmId = "";

        if (!interCompanyJour.interCompanyDerivedActionPolicy().InvoiceOriginalSales)
            parmId = super();

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUpdate</Name>
				<Source><![CDATA[
        SalesUpdate salesUpdate()
    {
        SalesUpdate salesUpdate;

        if (interCompanyJour.interCompanyDerivedActionPolicy().InvoiceOriginalSales)
            salesUpdate = SalesUpdate::PackingSlip;
        else
            salesUpdate = super();

        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyMarkupAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the invoice that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the invoice that triggers the allocation.
    /// </param>
    internal static void intercompanyMarkupAllocation(SalesTable _salesTable, Num _docNum, TransDate _transDate)
    {
        MarkupAllocation                    markupAllocation;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        interCompanyEndpointActionPolicy = _salesTable.interCompanyEndpointActionPolicy();

        markupAllocation = MarkupAllocation::newMarkupAllocation(_salesTable);
        markupAllocation.parmAllocateAfter(interCompanyEndpointActionPolicy.MarkupAllocateAfter);
        markupAllocation.parmAllocateInventoried(interCompanyEndpointActionPolicy.MarkupInventoriedOnly);
        markupAllocation.parmInterCompanyCompanyId(_salesTable.InterCompanyCompanyId);
        markupAllocation.parmInterCompanyInvoiceId(_docNum);
        markupAllocation.parmInterCompanyInvoiceDate(_transDate);
        markupAllocation.parmInterCompanyDirectDelivery(_salesTable.InterCompanyDirectDelivery);
        markupAllocation.parmSkipWarning(true);
        markupAllocation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForSO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    The sales order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the invoice that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the invoice that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForSO(SalesTable _salesTable, Num _docNum, TransDate _transDate)
    {
        InterCompanyPostSales_Invoice::intercompanyMarkupAllocation(_salesTable, _docNum, _transDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>