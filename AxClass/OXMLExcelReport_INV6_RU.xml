<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_INV6_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class prints INV-6 report to excel.
/// </summary>
class OXMLExcelReport_INV6_RU extends XMLExcelReport_RU implements InventJournalReportPackable_RU, BatchRetryable, ERIReportPostProcessingSupported
{
    protected const str REPORT_HEADER = 'REPORT_HEADER';
    protected const str PAGE_TITLE = 'PAGE_TITLE';
    protected const str PAGE_HEADER = 'PAGE_HEADER';
    protected const str BODY = 'BODY';
    protected const str PAGE_FOOTER = 'PAGE_FOOTER';
    protected const str REPORT_FOOTER = 'REPORT_FOOTER';

    //report header
    protected const str OrderNum = 'orderNum';
    protected const str OrderDate = 'orderDate';
    protected const str StatementNum = 'statementNum';
    protected const str StatementDate = 'statementDate';
    protected const str CompanyName = 'companyName';
    protected const str CountingStartDateBookMark = 'countingStartDate';
    protected const str CountingEndDateBookMark = 'countingEndDate';
    protected const str CompanyOKPO = 'companyOKPO';
    protected const str CountingListDay = 'countingListDay';
    protected const str CountingListMonth = 'countingListMonth';
    protected const str CountingListYear = 'countingListYear';

    // page title
    protected const str PageTitleString = 'PageTitleString';
    //body
    protected const str LineNumBookMark = "LineNum";
    protected const str ProductName = "ProductName";
    protected const str ItemId = "ItemId";
    protected const str OKEI = "OKEI";
    protected const str Symbol = "Symbol";
    protected const str ReceiptDateBookmark = "ReceiptDate";
    protected const str VendName = "VendName";
    protected const str VendOKPO = "VendOKPO";
    protected const str ReceiptDocName = "ReceiptDocName";
    protected const str ReceiptDocDate = "ReceiptDocDate";
    protected const str ReceiptDocId = "ReceiptDocId";
    protected const str Counted = "Counted";
    protected const str CountedAmountBookmark = "CountedAmount";
    protected const str InventOnHand = "InventOnHand";
    protected const str OnHandAmountBookmark = "OnHandAmount";
    //page footer
    protected const str CountedPageTotalCell = "TotalCountedAmount";
    protected const str OnHandPageTotalCell = "TotalOnHandAmount";
    //report footer
    protected const str Chairman = 'chairman';
    protected const str Member1 = 'member1';
    protected const str Member2 = 'member2';
    protected const str Controller = 'controller';
    protected const str ChairmanPosition = 'chairmanPosition';
    protected const str Member1Position = 'member1Position';
    protected const str Member2Position = 'member2Position';
    protected const str ControllerPosition = 'controllerPosition';
    protected const str CountedTotalCell = 'CountedReportTotal';
    protected const str OnHandTotalCell = 'OnHandReportTotalCell';
    protected const str CountedTxtBegin = 'countedTxtBegin';
    protected const str CountedTxt = 'countedTxt';
    protected const str CountedCent = 'countedCent';
    protected const str CountingListDay2 = 'countingListDay2';
    protected const str CountingListMonth2 = 'countingListMonth2';
    protected const str CountingListYear2 = 'countingListYear2';
    protected const int ReceiptDatePos = 1;
    protected const int InvoiceIdPos = 2;
    protected const int InvoiceDatePos = 3;
    protected const int PageWidth = 25;
    protected const Version CurrentVersion = 1;

    QueryRun                    queryRun;
    JournalId                   journalId;

    DialogField                 countingListDateField;
    DialogField                 countingStartDateField;
    DialogField                 countingEndDateField;
    DialogField                 countingOrderNumField;
    DialogField                 countingOrderDateField;

    TransDate                   countingListDate;
    TransDate                   countingStartDate;
    TransDate                   countingEndDate;

    DocumentNum                 countingOrderNum;
    TransDate                   countingOrderDate;

    int                         numOfLinesTotal;
    int                         numOfSheetsTotal;
    int                         currentPage;

    List                        inventReportsList;
    InventJournalReportType_RU  reportType;
    InventJournalProforma_RU    report;

    Amount                      onHandTotalAmount;
    Amount                      countedTotalAmount;
    Amount                      onHandPageTotalAmount;
    Amount                      countedPageTotalAmount;

    int                         lineNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of section.
    /// </param>
    /// <returns>
    ///     Height of body section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 15.0;

        InventTable            inventTable;
        InventJournalTrans     inventJournalTrans;
        switch (_bookmark)
        {
            case BODY:
                inventJournalTrans = queryRun.get(tableNum(InventJournalTrans));
                inventTable        = inventJournalTrans.inventTable();
                return max(document.getNamedRangeHeightWrapped(ProductName, inventTable.defaultProductName()),
                           document.getNamedRangeHeightWrapped(ItemId, inventTable.ItemId),
                           minHeight);
        }
        return minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes report.
    /// </summary>
    protected void createReport()
    {
        this.initQuery();
        this.updateQuery();

        numOfLinesTotal = SysQuery::countLoops(this.queryRun());

        if ( !numOfLinesTotal)
        {
            return;
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00052, funcName());

        this.initSectionMap();
        this.setCurrentWorksheetNum(1, pageWidth);
        currentPage = 1;
        lineNum     = 1;

        this.execute(REPORT_HEADER);
        this.execute(PAGE_HEADER);
        while (queryRun.next())
        {
            if (this.mustCreateNewPage())
            {
                this.execute(PAGE_FOOTER);
                document.insertPageBreak(currentRow);
                currentPage++;
                currentHeight = 0;
                this.execute(PAGE_TITLE);
                this.execute(PAGE_HEADER);
            }
            this.execute(BODY);
        }
        this.execute(PAGE_FOOTER);
        this.execute(REPORT_FOOTER);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog = super();
        ;

        if (dialog)
        {
            dialog.addGroup("@GLS113056");
            countingListDateField = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@GLS115816");

            dialog.addGroup("@SYS25001");
            countingStartDateField = dialog.addFieldValue(extendedTypeStr(StartDate), countingStartDate, "@SYS81006");
            countingEndDateField   = dialog.addFieldValue(extendedTypeStr(EndDate), countingEndDate, "@SYS22882");

            dialog.addGroup("@GLS115817");
            countingOrderNumField  = dialog.addFieldValue(extendedTypeStr(DocumentNum), countingOrderNum, "@GLS114049");
            countingOrderDateField = dialog.addFieldValue(extendedTypeStr(TransDate), countingOrderDate, "@GLS113092");

            dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(InventJournalPrint_RU), DialogMenuItemGroup::BottomGrp);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Name of the new file.
    /// </summary>
    /// <returns>
    ///     Name of the new file.
    /// </returns>
    protected Filename fileName()
    {
        return 'INV-6';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Postfix for a new file.
    /// </summary>
    /// <returns>
    ///     Postfix for a new file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return "@GLS111325" + journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV6';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        InventJournalTrans     inventJournalTrans;
        InventDim              inventDim;
        InventDimParm          inventDimParm;
        InventTable            inventTable;
        InventTableModule      inventTableModule;
        InventSumDateValueReportDim inventSumDateValueReport;
        UnitOfMeasure          unit;
        InventOwner_RU         inventOwner;
        VendTable              vendTable;

        Amount                 onHandAmount;
        Amount                 countedAmount;

        container              receiptInfoCon;

        InventQty   costInventQty;
        AmountCur   costInventValue;

        void updateTotals()
        {
            onHandPageTotalAmount  += onHandAmount;
            onHandTotalAmount      += onHandAmount;

            countedPageTotalAmount += countedAmount;
            countedTotalAmount     += countedAmount;
        }

        inventJournalTrans = queryRun.get(tableNum(InventJournalTrans));
        inventDim          = queryRun.get(tableNum(InventDim));
        inventOwner        = inventDim.inventOwner_RU();

        vendTable = (inventOwner && inventOwner.AccountType == InventOwnerAccountType_RU::Vend) ?
                    VendTable::find(inventOwner.AccountNum) :
                    null;

        inventTable        = inventJournalTrans.inventTable();
        inventTableModule  = inventTable.inventTableModuleInvent();
        unit               = UnitOfMeasure::findBySymbol(inventTableModule.UnitId);

        onHandAmount  = 0;
        countedAmount = 0;

        if (inventJournalTrans.InventOnHand)
        {
            inventDimParm.initFromInventDim(inventDim);
            inventSumDateValueReport = InventSumDateValueReportDim::newParameters(countingListDate,
                                                                                    inventJournalTrans.ItemId,
                                                                                    inventDim,
                                                                                    inventDimParm);
            if (inventSumDateValueReport.postedQty())
            {
                onHandAmount  = CurrencyExchangeHelper::amount(inventJournalTrans.InventOnHand * inventSumDateValueReport.postedValue() / inventSumDateValueReport.postedQty());
                countedAmount = CurrencyExchangeHelper::amount(inventJournalTrans.Counted * inventSumDateValueReport.postedValue() / inventSumDateValueReport.postedQty());
            }
        }

        [costInventQty, costInventValue] = InventTrans::calcCostValue(InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransId).RecId);

        if (inventJournalTrans.Qty > 0 && costInventValue == 0)
        {
            costInventValue = inventJournalTrans.CostAmount;
        }

        if (costInventQty)
        {
            countedAmount = onHandAmount + CurrencyExchangeHelper::amount(inventJournalTrans.Qty * costInventValue / costInventQty);
        }

        receiptInfoCon = this.getReceiptInfo(inventJournalTrans, inventDim);

        updateTotals();
        this.insertValueToSection(LineNumBookmark, lineNum);
        this.insertValueToSection(ProductName, inventTable.defaultProductName());
        this.insertValueToSection(ItemId, inventJournalTrans.ItemId);
        this.insertValueToSection(OKEI, UnitOfMeasure_RU::codeOKEI_RU(unit));

        str unitOfMeasureTranslation = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(inventJournalTrans.unitId()).RecId, CompanyInfo::find().LanguageId).Description;
        str translation = unitOfMeasureTranslation ? unitOfMeasureTranslation : unit.Symbol;
        this.insertValueToSection(Symbol, translation);

        this.insertValueToSection(ReceiptDateBookmark, conPeek(receiptInfoCon, ReceiptDatePos) ? strFmt("%1", conPeek(receiptInfoCon, ReceiptDatePos)) : "");
        this.insertValueToSection(VendName, vendTable.name());
        this.insertValueToSection(VendOKPO, vendTable.partyOKPOasOfDate_RU(countingOrderDate));

        this.insertValueToSection(ReceiptDocName, conPeek(receiptInfoCon, InvoiceIdPos) ? "@SYS14204" : "");
        this.insertValueToSection(ReceiptDocDate, conPeek(receiptInfoCon, InvoiceDatePos) ? strFmt("%1", conPeek(receiptInfoCon, InvoiceDatePos)) : "");
        this.insertValueToSection(ReceiptDocId, conPeek(receiptInfoCon, InvoiceIdPos));

        this.insertValueToSection(Counted, inventJournalTrans.Counted);
        this.insertValueToSection(CountedAmountBookmark, countedAmount);
        this.insertValueToSection(InventOnHand, inventJournalTrans.InventOnHand);
        this.insertValueToSection(OnHandAmountBookmark, onHandAmount);

        lineNum++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills specified report section with data.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case REPORT_HEADER:
                this.fillReportHeader();
                break;

            case PAGE_TITLE:
                this.fillPageTitle(currentPage);
                break;

            case BODY:
                this.fillBody();
                break;

            case PAGE_FOOTER:
                this.fillPageFooter();
                break;

            case REPORT_FOOTER:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    private void fillPageFooter()
    {
        this.insertValueToSection(CountedPageTotalCell, countedPageTotalAmount);
        this.insertValueToSection(OnHandPageTotalCell, onHandPageTotalAmount);

        onHandPageTotalAmount  = 0;
        countedPageTotalAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageTitle</Name>
				<Source><![CDATA[
    private void fillPageTitle( int pageNum )
    {
        this.insertValueToSection(PageTitleString, strFmt("@GLS115818",pageNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    private void fillReportFooter()
    {
        const int Two = 2;
        const int CountOfMemberConst = 2;

        TempStr    text;
        TempStr    firstPartText;
        OfficialsTrans_RU    officialsTrans;
        int                  countOfController;
        int                  countOfMember;
        int                  countOfChairman;

        //fill statements total
        this.insertValueToSection(CountedTotalCell, countedTotalAmount);
        this.insertValueToSection(OnHandTotalCell, onHandTotalAmount);

        text          = RNumDateInWordConverter::construct().numeralsToTxt(countedTotalAmount);
        firstPartText = this.getTotalStrFirstPart(text);

        this.insertValueToSection(CountedTxtBegin, firstPartText);
        this.insertValueToSection(CountedTxt, strLen(firstPartText) ? subStr(text, strLen(firstPartText) + Two, strLen(text) - strLen(firstPartText) - 1) : text);
        this.insertValueToSection(CountedCent, frac(countedTotalAmount) * 100);
        //fill officials
        while select officialsTrans
            where officialsTrans.ReportType   == OffReportType_RU::InventINV6 &&
                  officialsTrans.OffSessionId == report.getOffSessionId()
        {
            switch (officialsTrans.Position)
            {
                case OffPosition_RU::Controller :
                    if (! countOfController)
                    {
                        this.insertValueToSection(ControllerPosition, officialsTrans.Title);
                        this.insertValueToSection(Controller, officialsTrans.Name);
                        countOfController ++;
                    }
                    break;

                case OffPosition_RU::Chairman :
                    if (! countOfChairman)
                    {
                        this.insertValueToSection(ChairmanPosition, officialsTrans.Title);
                        this.insertValueToSection(Chairman, officialsTrans.Name);
                        countOfChairman ++;
                    }
                    break;

                case OffPosition_RU::Member:
                    if (! countOfMember)
                    {
                        this.insertValueToSection(Member1Position, officialsTrans.Title);
                        this.insertValueToSection(Member1, officialsTrans.Name);
                        countOfMember ++;
                    }
                    else
                    if (countOfMember < CountOfMemberConst)
                    {
                        this.insertValueToSection(Member2Position, officialsTrans.Title);
                        this.insertValueToSection(Member2, officialsTrans.Name);
                        countOfMember ++;
                    }
                    break;

                default:
                    break;
            }
        }
        //fill report footer date
        if (countingListDate)
        {
            this.insertValueToSection(CountingListDay2,   dayOfMth(countingListDate));
            this.insertValueToSection(CountingListMonth2, strLwr(RNumDateInWordConverter::construct().date2strMonth(countingListDate)));
            this.insertValueToSection(CountingListYear2,  year(countingListDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        this.insertValueToSection(OrderNum,          countingOrderNum);
        this.insertValueToSection(OrderDate,         date2str(countingOrderDate, 123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        this.insertValueToSection(StatementNum,      journalId);
        this.insertValueToSection(StatementDate,     date2str(countingListDate,  123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        this.insertValueToSection(CompanyName,       companyInfo.Name);
        this.insertValueToSection(CountingStartDateBookmark, date2str(countingStartDate, 123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        this.insertValueToSection(CountingEndDateBookmark,   date2str(countingEndDate,   123, DateDay::Digits2, DateSeparator::Auto, DateMonth::Digits2, DateSeparator::Auto, DateYear::Digits4, DateFlags::None));
        this.insertValueToSection(CompanyOKPO,       CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, countingOrderDate));

        if (countingListDate)
        {
            this.insertValueToSection(CountingListDay,   dayOfMth(countingListDate));
            this.insertValueToSection(CountingListMonth, strLwr(RNumDateInWordConverter::construct().date2strMonth(countingListDate)));
            this.insertValueToSection(CountingListYear,  year(countingListDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Saves values from dialog.
    /// </summary>
    /// <returns>
    ///     True if saving is successeful.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            countingListDate  = countingListDateField.value();
            countingStartDate = countingStartDateField.value();
            countingEndDate   = countingEndDateField.value();

            countingOrderNum  = countingOrderNumField.value();
            countingOrderDate = countingOrderDateField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInfo</Name>
				<Source><![CDATA[
    private container getReceiptInfo(InventJournalTrans _inventJournalTrans, InventDim _inventDimCriteria)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans       inventTrans;
        InventDim         inventDim;
        InventDimParm     inventDimParm;

        TransDate      receiptDate;
        InvoiceId      invoiceId;
        TransDate      invoiceDate;

        boolean        isFirst = true;

        container      ret;

        inventDimParm.initFromInventDim(_inventDimCriteria);

        while select ReferenceCategory from inventTransOrigin
            where inventTransOrigin.ItemId == _inventJournalTrans.ItemId
        join DateFinancial, DatePhysical, InvoiceId from inventTrans
            where inventTrans.InventTransOrigin  == inventTransOrigin.RecId &&
                 (inventTrans.StatusReceipt == StatusReceipt::Received ||
                  inventTrans.StatusReceipt == StatusReceipt::Purchased) &&
                  inventTrans.StatusIssue   == StatusIssue::None &&
                  inventTrans.DatePhysical  <= _inventJournalTrans.TransDate
        #InventDimJoin(inventTrans.inventDimId, inventDim, _inventDimCriteria, inventDimParm, InventOwnerIdx_RU)
        {
            if (! isFirst)
            {
                receiptDate = dateNull();
                invoiceId   = '';
                invoiceDate = dateNull();

                break;
            }

            receiptDate = inventTrans.DatePhysical;

            if (inventTransOrigin.ReferenceCategory == InventTransType::Purch)
            {
                invoiceId   = inventTrans.InvoiceId;
                invoiceDate = inventTrans.DateFinancial;
            }

            isFirst = false;
        }

        ret = conIns(ret, ReceiptDatePos, receiptDate);
        ret = conIns(ret, InvoiceIdPos, invoiceId);
        ret = conIns(ret, InvoiceDatePos, invoiceDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalStrFirstPart</Name>
				<Source><![CDATA[
    private TempStr getTotalStrFirstPart(TempStr _text)
    {
        const int FirstLineSymbols = 51;
        const str Delimiter = ' ';

        int    posResult;
        int    posCheck = 0;
        int    startPos = 1;
        int    searchLength = strLen(_text);

        if (searchLength <= FirstLineSymbols)
            return _text;

        while (posCheck - 1 <= FirstLineSymbols)
        {
            posResult = posCheck ? posCheck - 1 : 0;
            posCheck  = strScan(_text, Delimiter, startPos, searchLength);

            if (! posCheck)
                break;

            startPos     = posCheck + 1;
            searchLength = strLen(_text) - startPos + 1;
        }

        return posResult ? subStr(_text, 1, posResult) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        query = new Query();
        qbds = query.addDataSource(tableNum(InventJournalTrans));
        qbds.addRange(fieldNum(InventJournalTrans, JournalId));

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventJournalTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(InventProfile_RU));
        qbds.addLink(fieldNum(InventDim, InventProfileId_RU), fieldNum(InventProfile_RU, InventProfileId));
        qbds.joinMode(JoinMode::InnerJoin);

        qbr = qbds.addRange(fieldNum(InventProfile_RU, StockInTransit));
        qbr.value(queryValue(StockInTransit_RU::BoughtInTransit));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    private void initReportData(InventJournalTable _inventJournalTable, InventJournalReportType_RU _reportType)
    {
        reportType        = _reportType;
        inventReportsList = new List(Types::Class);
        report            = InventJournalProforma_RU::construct(reportType);

        if ( !_inventJournalTable.OffSessionId_RU)
        {
            _inventJournalTable.OffSessionId_RU = new OfficialsServ_RU().getNewSessionId();
        }

        report.initOfficialsDefault(_inventJournalTable.OffSessionId_RU);

        inventReportsList.addEnd(report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes sections map by report sections.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(REPORT_HEADER);
        this.addSection(PAGE_TITLE);
        this.addSection(PAGE_HEADER);
        this.addSection(BODY, true);
        this.addSection(PAGE_FOOTER);
        this.addSection(REPORT_FOOTER);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method checks whether report should create new page.
    /// </summary>
    /// <returns>
    ///     Whether last fetched record should be printed on current page.
    /// </returns>
    private boolean mustCreateNewPage()
    {
        const int PosSectionHeight = 4;
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(body);
        requiredHeight += conPeek(mapSections.lookup(PAGE_FOOTER), PosSectionHeight);

        if (lineNum >= numOfLinesTotal)
        {
            requiredHeight += conPeek(mapSections.lookup(REPORT_FOOTER), PosSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, countingListDate, countingStartDate, countingEndDate, countingOrderNum, countingOrderDate, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns packed reports list.
    /// </summary>
    /// <returns>
    ///     Packed reports list.
    /// </returns>
    public container packReportList()
    {
        if (inventReportsList)
            return inventReportsList.pack();

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    private JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns name of report template.
    /// </summary>
    /// <returns>
    ///     Name of report template.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(INV6_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns aproximated number of report cells for progress bar calculation.
    /// </summary>
    /// <returns>
    ///     Aproximated number of report cells.
    /// </returns>
    protected Counter totalCells()
    {
        const int OtherCells = 27;
        const int LineCells = 15;

        int actualLines = SysQuery::countLoops(this.queryRun());
        return OtherCells + LineCells * actualLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Version      version = RunBase::getVersion(_packedClass);
        container    packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, countingListDate, countingStartDate, countingEndDate, countingOrderNum, countingOrderDate, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;
            default :
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        QueryBuildRange qbr;

        queryRun = this.queryRun();

        qbr = SysQuery::findOrCreateRange(this.queryRun().query().dataSourceTable(tableNum(InventJournalTrans)), fieldNum(InventJournalTrans, JournalId));
        qbr.value(journalId);
        qbr.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation of inputs.
    /// </summary>
    /// <param name="calledFrom">
    /// Object that called this class.
    /// </param>
    /// <returns>
    /// False if the end date is before the start date; true otherwise.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (countingEndDate < countingStartDate)
            {
                ret = checkFailed("@GLS115820");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115821";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OXMLExcelReport_INV6_RU OXMLExcelReport_INV6_RU;

        if (! _args || _args.dataset() != tableNum(InventJournalTable))
            throw error(strFmt("@SYS25516", OXMLExcelReport_INV6_RU::description()));

        OXMLExcelReport_INV6_RU = OXMLExcelReport_INV6_RU::newFromArgs(_args);

        if (OXMLExcelReport_INV6_RU.prompt())
        {
            OXMLExcelReport_INV6_RU.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new <c>OXML_ExcelReport_INV6_RU</c> object and initializes private values.
    /// </summary>
    /// <param name="_args">
    ///     <c>Args</c> object for initializing.
    /// </param>
    /// <returns>
    ///     Created <c>OXML_ExcelReport_INV6_RU</c> object.
    /// </returns>
    static OXMLExcelReport_INV6_RU newFromArgs(Args _args)
    {
        OXMLExcelReport_INV6_RU         countingListPrint  = new OXMLExcelReport_INV6_RU();
        InventJournalTable               inventJournalTable = _args.record();

        countingListPrint.parmJournalId(inventJournalTable.JournalId);

        countingListPrint.initReportData(inventJournalTable, InventJournalReportType_RU::CountingListInTransit);

        return countingListPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>