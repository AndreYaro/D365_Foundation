<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_TORG3</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Receipt list for goods (TORG-3) report to excel.
/// </summary>
[PackingSlipReportAttribute(PrintoutTypeTable_RU::PurchReceiptTORG3)]
class OxmlExcelReport_TORG3 extends OXMLExcelReport_PackingSlip implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    #define.pageHeader('PAGEHEADER')
    #define.body('BODY')
    #define.pageFooter('PAGEFOOTER')
    #define.page1('PAGE1')
    #define.page3('PAGE3')

    #define.widthPage1(107)
    #define.widthPage2(166)

    #define.Comma(", ")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(12.00)

        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName),
                   document.getNamedRangeHeightWrapped('ItemId'  , line.ItemId),
                   #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        this.initSectionMap();

        //page1
        this.setCurrentWorksheetNum(1, #widthPage1);
        this.execute(#page1);
        this.setPrintArea();

        //page2
        this.setCurrentWorksheetNum(2, #widthPage2);
        this.execute(#pageHeader);

        // Body -->
        while select line
            where line.InternalId       == subHeader.InternalId       &&
                  line.InventLocationId == subHeader.InventLocationId &&
                  line.DeviationQty     != 0
        {
            if (this.mustCreateNewPage())
            {
                this.execute(#pageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(#pageHeader);
            }

            this.execute(#body);
        }

        this.execute(#pageFooter);

        document.insertPageBreak(currentRow, curWorksheetNum);

        this.execute(#page3);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'TORG3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + subHeader.DocumentId + '_' + header.DocumentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection('ItemName'  ,      line.ItemName);
        this.insertValueToSection('ItemId'    ,      line.ItemId);
        this.insertValueToSection('Unit'      ,      line.Unit);
        this.insertValueToSection('OKEI'      ,      line.CodeOKEI);

        this.insertValueToSection('DocQty'      ,      line.Qty - line.DeviationQty);
        this.insertValueToSection('DocPrice'    ,      line.Price);
        this.insertValueToSection('DocAmount'   ,      line.LineAmount - line.DeviationAmount);

        this.insertValueToSection('FactQty'     ,      line.Qty);
        this.insertValueToSection('FactPrice'   ,      line.Price);
        this.insertValueToSection('FactAmount'  ,      line.LineAmount);

        if (line.DeviationQty < 0)
        {
            this.insertValueToSection('LossQty'     , -line.DeviationQty);
            this.insertValueToSection('LossAmount'  , -line.DeviationAmount);
            this.insertValueToSection('ExcessQty'   ,  #blank);
            this.insertValueToSection('ExcessAmount',  #blank);
        }
        else
        {
            this.insertValueToSection('LossQty'     , #blank);
            this.insertValueToSection('LossAmount'  , #blank);
            this.insertValueToSection('ExcessQty'   ,  line.DeviationQty);
            this.insertValueToSection('ExcessAmount',  line.DeviationAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #page1:
                this.fillPage1();
                break;
            case #page3:
                this.fillPage3();
                break;
            case #pageHeader:
                this.fillPageHeader();
                break;
            case #body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills first page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage1()
    {
        RNumDateInWordConverter rNumDateInWordConverter = RNumDateInWordConverter::construct(header.LanguageId);
        ;

        this.insertValueToSection('OKPO',                  header.CustOKPO);
        this.insertValueToSection('CompanyName',           header.CustName + #Comma + CompanyInfo::find().postalAddress().Address);
        this.insertValueToSection('DepartmentName',        subHeader.InventLocationName);

        this.insertValueToSection('DirectorPosition',      header.DirectorTitle);
        this.insertValueToSection('DocumentNumber',        subHeader.DocumentId);
        this.insertValueToSection('DocumentDate',          header.InvoiceDate);
        this.insertValueToSection('DirectorName',          header.DirectorName);
        this.insertValueToSection('CompanyAddress',        header.CustBankAddress);

        this.insertValueToSection('InvoiceAccountName',    header.VendName + #Comma + header.VendBankAddress);
        this.insertValueToSection('VendAccountName',       header.ConsignorBankAddress);

        this.insertValueToSection('ContractNumber',        header.AgreementDocumentTitle);
        if (header.AgreementDate != dateNull())
        {
            this.insertValueToSection('ContractDateDay',   dayOfMth(header.AgreementDate));
            this.insertValueToSection('ContractDateMonth', rNumDateInWordConverter.date2strMonth(header.AgreementDate));
            this.insertValueToSection('ContractDateYear',  year(header.AgreementDate));
        }

        this.insertValueToSection('DirectorPosition2',     header.DirectorTitle);
        this.insertValueToSection('DirectorName2',         header.DirectorName);
        this.insertValueToSection('DeliveryDateDay',       dayOfMth(header.InvoiceDate));
        this.insertValueToSection('DeliveryDateMonth',     rNumDateInWordConverter.date2strMonth(header.InvoiceDate));
        this.insertValueToSection('DeliveryDateYear',      year(header.InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills third page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage3()
    {
        OfficialsTrans_RU officialsTrans;
        Counter           i;
        str               stri;
        str               companyData = header.CustName + #Comma;
        RecordSortedList  list = OfficialsTrans_RU::findMulti(header.OffSessionId,
                                                              OffReportType_RU::PurchM4M7,
                                                              OffPosition_RU::Member,
                                                              header.VendAccount,
                                                              subHeader.InventLocationId,
                                                              InventParameters::inventReceiptsListMembersNumber_RU());
        ;
        list.first(officialsTrans);
        while (officialsTrans)
        {
            i++;
            stri = int2str(i);

            this.insertValueToSection('CommissionMember' + stri + 'Name',  officialsTrans.Name);
            this.insertValueToSection('CommissionMember' + stri + 'Title', companyData + #space + officialsTrans.Title);

            if (! list.next(officialsTrans))
                break;
        }

        officialsTrans = OfficialsTrans_RU::find(header.OffSessionId,
                                                 OffReportType_RU::PurchM4M7,
                                                 OffPosition_RU::Chairman,
                                                 header.VendAccount,
                                                 subHeader.InventLocationId);
        if (officialsTrans)
        {
            this.insertValueToSection('CommissionHeadName',  officialsTrans.Name);
            this.insertValueToSection('CommissionHeadTitle', companyData + #Blank + officialsTrans.Title);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        str         currencyLong;
        str         priceStr;
        str         amountStr;

        #define.TwoWithSep(",    \%1, \%2")
        #define.OneWithSep(",    \%1")

        if (header.CurrencyShortName && header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(#TwoWithSep, header.CurrencyShortName, header.CurrencyShortNamePenny);
        }
        else if (header.CurrencyShortName || header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(#OneWithSep, header.CurrencyShortName + header.CurrencyShortNamePenny);
        }
        priceStr     = new Label(header.LanguageId).extractString("@SYS11865");
        amountStr    = new Label(header.LanguageId).extractString("@GLS101909");

        this.insertValueToSection('PriceCurrency_1',   priceStr  + currencyLong);
        this.insertValueToSection('PriceCurrency_2',   priceStr  + currencyLong);
        this.insertValueToSection('AmountCurrency_1',  amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_2',  amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_4',  amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_5',  amountStr + currencyLong);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#page1);
        this.addSection(#pageHeader);
        this.addSection(#body, true);
        this.addSection(#pageFooter);
        this.addSection(#page3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#body);

        requiredHeight += conPeek(mapSections.lookup(#pageFooter), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(TORG_3_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.cellsBody(14)
    #define.cellsOther(30)
    protected Counter totalCells()
    {
        TmpSalesPurchReportLine_RU      lineLocal;

        lineLocal.setTmpData(line);

        select count(RecId) from lineLocal
            where lineLocal.InternalId       == subHeader.InternalId       &&
                  lineLocal.InventLocationId == subHeader.InventLocationId &&
                  lineLocal.DeviationQty     != 0;

        return #cellsOther + (int642int(lineLocal.RecId) * #cellsBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_TORG3 construct()
    {
        return new OXMLExcelReport_TORG3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>