<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationWizardTableCtrl_Location</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WmsLocationWizardTableCtrl_Location extends WMSLocationWizardTableCtrl
{
    WMSLocation                 buffer;

    WMSLocation                 bufferInboundDock;
    WMSLocation                 bufferOutputPort;
    WMSLocation                 bufferPick;
    WMSLocation                 bufferBuffer;

    WMSHeight                   wmsHeight;
    WMSWidth                    wmsWidth;
    WMSDepth                    wmsDepth;

    #localmacro.currentList
        WMSHeight,
        WMSWidth,
        WMSDepth
    #endmacro

    #WMSLocationDefaultData
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aisleSettingsModified</Name>
				<Source><![CDATA[
    void aisleSettingsModified()
    {
        this.deleteTable(true);
        lastParms = conNull();
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table buffer that is declared in the <c>classDeclaration</c> method.
    /// </summary>
    /// <returns>
    /// The table buffer that is used for the default data.
    /// </returns>
    public Common buffer()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdNumDB</Name>
				<Source><![CDATA[
    public int64 createdNumDB(InventLocationId _inventLocationId = this.inventLocationId())
    {
        int64   recCount;

        if (existingRecordCountMap.exists(_inventLocationId))
        {
            return existingRecordCountMap.lookup(_inventLocationId);
        }

        recCount = WMSLocationWizardTableCtrl_Location::existingNumDB(_inventLocationId, this.wmsLocationType());

        existingRecordCountMap.insert(_inventLocationId, recCount);
        return recCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParmTab</Name>
				<Source><![CDATA[
    /*
    This method is to be used in the wizard form to test if a parameter tabpage is enabled.
    */
    public boolean enableParmTab()
    {
        boolean ret = super();

        if (ret)
        {
            if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate())
            {
                if (!this.wmsLocationWizardTableCtrl_Aisle().normalAisleExists())
                {
                    return NoYes::No;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDB</Name>
				<Source><![CDATA[
    protected boolean existDB()
    {
        return WMSLocation::exist(buffer.wmsLocationId, this.inventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDBKey</Name>
				<Source><![CDATA[
    protected boolean existDBKey(Num key)
    {
        return WMSLocation::exist(key, this.inventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _bufferToCheck = null)
    {
        WMSLocation bufferToCheck = _bufferToCheck as WMSLocation;
        WMSLocation wmsLocation;

        wmsLocation = this.makeTmp();

        select firstonly RecId from wmsLocation
            where wmsLocation.wmsLocationId == bufferToCheck.wmsLocationId    &&
                  wmsLocation.RecId         != bufferToCheck.RecId;

        return wmsLocation.RecId
            ? true
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(boolean _reinit = false)
    {
        super();
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    protected void initDimensions()
    {
        wmsHeight   = wmsParameters.DefaultHeight;
        wmsWidth    = wmsParameters.DefaultWidth;
        wmsDepth    = wmsParameters.DefaultDepth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    public void initRecord()
    {
        WMSLocation wmsLocation = this.buffer();

        wmsLocation.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    protected void initValues()
    {
        this.initDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseInformation</Name>
				<Source><![CDATA[
    public void initWarehouseInformation(InventLocationId _inventLocationId, container _values)
    {
        int64                   existingRecCount;
        container               warehouseInformation;

        [warehouseInformation, existingRecCount] = _values;
        existingRecordCountMap.insert(_inventLocationId, existingRecCount);

        super(_inventLocationId, warehouseInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDB</Name>
				<Source><![CDATA[
    public void insertDB()
    {
        WMSLocation         wmsLocationDB, wmsLocationFile;
        WMSAisleId          wmsAisleId;

        wmsLocationFile = this.makeTmp();

        ttsbegin;

        while select wmsLocationFile
            index CoordinateIdx
        {
            if (wmsAisleId != wmsLocationFile.AisleId)
            {
                this.testCreateAisle(wmsLocationFile.AisleId);
            }
            wmsAisleId = wmsLocationFile.AisleId;

            wmsLocationDB.data(wmsLocationFile);
            wmsLocationDB.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBufferBuffer</Name>
				<Source><![CDATA[
    WMSLocation parmBufferBuffer(WMSLocation _bufferBuffer = bufferBuffer)
    {
        bufferBuffer = _bufferBuffer;
        return bufferBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBufferInboundDock</Name>
				<Source><![CDATA[
    WMSLocation parmBufferInboundDock(WMSLocation _bufferInboundDock = bufferInboundDock)
    {
        bufferInboundDock = _bufferInboundDock;
        return bufferInboundDock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBufferOutboundDock</Name>
				<Source><![CDATA[
    WMSLocation parmBufferOutboundDock(WMSLocation _bufferOutputPort = bufferOutputPort)
    {
        bufferOutputPort = _bufferOutputPort;
        return bufferOutputPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBufferPick</Name>
				<Source><![CDATA[
    WMSLocation parmBufferPick(WMSLocation _bufferPick = bufferPick)
    {
        bufferPick = _bufferPick;
        return bufferPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    protected void setBuffer()
    {
        if (form_DS)
        {
            buffer = form_DS.cursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestNum</Name>
				<Source><![CDATA[
    public Integer suggestNum()
    {
        if (this.createdNumDB() > 0)
        {
            return 1;
        }
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestUpdate</Name>
				<Source><![CDATA[
    public NoYes suggestUpdate()
    {
        if (! super())
        {
            return false;
        }

        if (! this.inventLocationId())
        {
            return false;
        }

        if (this.createdNumDB(this.inventLocationId()) > 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testCreateAisle</Name>
				<Source><![CDATA[
    protected void testCreateAisle(WMSAisleId _wmsAisleId, WMSAisleNo _wmsAisleNo = #SPECIAL_AISLENO, WMSSortCode wmsSortCode = 99999)
    {
        WMSAisle    wmsAisle;

        if (!WMSAisle::exist(_wmsAisleId, this.inventLocationId()))
        {
            wmsAisle.InventLocationId   = this.inventLocationId();
            wmsAisle.AisleId            = _wmsAisleId;
            wmsAisle.AisleNo            = _wmsAisleNo;
            wmsAisle.Name               = strFmt('%1, %2', this.inventLocationId(), _wmsAisleId);
            wmsAisle.SortCode           = wmsSortCode;
            wmsAisle.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container values)
    {
        container base;

        [#currentList,base] = values;

        return super(base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationType</Name>
				<Source><![CDATA[
    abstract WMSLocationType wmsLocationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_Aisle</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_Aisle wmsLocationWizardTableCtrl_Aisle()
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        return  localLocationWizard.wmsLocationWizardTableCtrl_Aisle();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingNumDB</Name>
				<Source><![CDATA[
    static protected int64 existingNumDB(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        WMSLocation wmsLocation;

        select count(RecId) from wmsLocation
            where wmsLocation.LocationType      == _wmsLocationType     &&
                  wmsLocation.InventLocationId  == _inventLocationId;
        return wmsLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
    public static container getWarehouseInformation(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        container   res;

        res = [WMSLocationWizardTableCtrl::getWarehouseInformation(_inventLocationId, _wmsLocationType)
              ,WMSLocationWizardTableCtrl_Location::existingNumDB(_inventLocationId, _wmsLocationType)
              ];
        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>