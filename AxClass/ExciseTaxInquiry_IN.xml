<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseTaxInquiry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the tax inquiry.
/// </summary>
class ExciseTaxInquiry_IN
{
    TmpExciseInquiryTable_IN       tmpExciseInquiryTable;

    #DEFINE.FIELD1 (1)
    #DEFINE.FIELD2 (2)
    #DEFINE.FIELD3 (3)
    #DEFINE.FIELD4 (4)
    #DEFINE.FIELD5 (5)
    #DEFINE.FIELD6 (6)
    #DEFINE.FIELD7 (7)
    #DEFINE.FIELD8 (8)
    #DEFINE.FIELD9 (9)
    #DEFINE.FIELD10 (10)
    #DEFINE.FIELD11 (11)
    #DEFINE.FIELD12 (12)
    #DEFINE.FIELD13 (13)
    #DEFINE.FIELD14 (14)
    #DEFINE.FIELD15 (15)
    #DEFINE.FIELD16 (16)
    #DEFINE.FIELD17 (17)
    #DEFINE.FIELD18 (18)
    #DEFINE.FIELD19 (19)
    #DEFINE.FIELD20 (20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the <c>ExciseTaxInquiry</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The query statement.
    /// </param>
    /// <param name="_fieldValues">
    /// The values of the fields.
    /// </param>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_taxPeriod">
    /// The period of the tax.
    /// </param>
    /// <returns>
    /// The isntance of the <c>TmpExciseInquiryTable_IN</c> class.
    /// </returns>
    public TmpExciseInquiryTable_IN execute(
        QueryRun    _queryRun,
        container   _fieldValues,
        RefRecId    _eccNumber,
        TaxPeriod   _taxPeriod)
    {
        Counter     fieldCount;
        TaxTrans_IN taxTrans;
        TaxTrans_IN taxTransLoc;
        fieldName   fieldName;
        boolean     transactionField;
        boolean     invoiceField;
        RefRecId    eccNumberRecId;
        boolean     miscChargeField;
        ExciseInquiryView_IN exciseTaxInquiryView;

        for (fieldCount = 1;fieldCount <= conlen(_fieldValues);fieldCount++)
        {
            fieldName = conpeek(_fieldValues, fieldCount);

            if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, TransactionAmount)))
            {
                transactionField = true;
            }
            else if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, InvoiceAmount)))
            {
                invoiceField = true;
            }
            else if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, MiscChargeAmount)))
            {
                miscChargeField = true;
            }
        }

        while (_queryRun.next())
        {
            tmpExciseInquiryTable.clear();

            exciseTaxInquiryView = _queryRun.getNo(1);
            taxTrans = TaxTrans_IN::findRecId(exciseTaxInquiryView.TaxTrans_INRecId);

            eccNumberRecId = taxTrans.CompanyRegistrationNumber;

            if (eccNumberRecId      == _eccNumber &&
                taxTrans.TaxPeriod  == _taxPeriod)
            {
                if (taxTrans.Source == TaxModuleType::Voucher || taxTrans.Source == TaxModuleType::StockTransfer_IN)
                {
                    ttsbegin;
                    taxTransLoc.clear();
                    select forupdate taxTransLoc
                        where taxTransLoc.RecId    == taxTrans.RecId ;
                    taxTransLoc.update();
                    taxTrans.data(taxTransLoc);
                    ttscommit;
                }

                ttsbegin;
                tmpExciseInquiryTable.TransDate                     = taxTrans.TransDate;
                tmpExciseInquiryTable.Voucher                       = taxTrans.Voucher;
                tmpExciseInquiryTable.CostLedgerVoucher             = taxTrans.CostLedgerVoucher;
                tmpExciseInquiryTable.TaxComponentTable             = taxTrans.TaxComponentTable;
                tmpExciseInquiryTable.SourceTaxAmountCur            = taxTrans.SourceTaxAmountCur;
                tmpExciseInquiryTable.eccTaxRegistrationNumberTable = eccNumberRecId;
                tmpExciseInquiryTable.TaxSettlementPeriod           = taxTrans.TaxPeriod ? taxTrans.TaxPeriod : _taxPeriod;
                tmpExciseInquiryTable.LineNum                       = taxTrans.LineNum;
                tmpExciseInquiryTable.TransTableId                  = taxTrans.TransTableId;
                tmpExciseInquiryTable.TransRecId                    = taxTrans.TransRecId;
                tmpExciseInquiryTable.SourceCurrencyCode            = taxTrans.SourceCurrencyCode;
                tmpExciseInquiryTable.TransactionAmount             = transactionField ? taxTrans.TransactionAmount : 0;
                tmpExciseInquiryTable.InvoiceAmount                 = invoiceField ? taxTrans.InvoiceAmount : 0;
                tmpExciseInquiryTable.MiscChargeAmount              = ! miscChargeField ? 0 :taxTrans.MiscChargeAmount;
                tmpExciseInquiryTable.TaxAmount                     = taxTrans.PostedTaxAmout;
                tmpExciseInquiryTable.TaxAmountSecondary            = taxTrans.TaxAmountSecondary;

                tmpExciseInquiryTable.Sort1                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field1));
                tmpExciseInquiryTable.Sort2                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field2));
                tmpExciseInquiryTable.Sort3                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field3));
                tmpExciseInquiryTable.Sort4                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field4));
                tmpExciseInquiryTable.Sort5                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field5));
                tmpExciseInquiryTable.Sort6                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field6));
                tmpExciseInquiryTable.Sort7                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field7));
                tmpExciseInquiryTable.Sort8                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field8));
                tmpExciseInquiryTable.Sort9                         = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field9));
                tmpExciseInquiryTable.Sort10                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field10));
                tmpExciseInquiryTable.Sort11                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field11));
                tmpExciseInquiryTable.Sort12                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field12));
                tmpExciseInquiryTable.Sort13                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field13));
                tmpExciseInquiryTable.Sort14                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field14));
                tmpExciseInquiryTable.Sort15                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field15));
                tmpExciseInquiryTable.Sort16                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field16));
                tmpExciseInquiryTable.Sort17                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field17));
                tmpExciseInquiryTable.Sort18                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field18));
                tmpExciseInquiryTable.Sort19                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field19));
                tmpExciseInquiryTable.Sort20                        = TaxTrans_IN::getFieldValues(taxTrans, conpeek(_fieldValues, #Field20));
                tmpExciseInquiryTable.insert();

                this.insertIntoMarkupTrans(tmpExciseInquiryTable.TransTableId ,
                                        tmpExciseInquiryTable.TransRecId,
                                        tmpExciseInquiryTable.TableId,
                                        tmpExciseInquiryTable.RecId);
                ttscommit;
            }
        }

        return tmpExciseInquiryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new data into markup transaction.
    /// </summary>
    /// <param name="_transTableId">
    /// The trans table id.
    /// </param>
    /// <param name="_transRecId">
    /// The trans rec id.
    /// </param>
    /// <param name="_tmpTableId">
    /// The temporary table id.
    /// </param>
    /// <param name="_tmpRecId">
    /// The temporary rec id.
    /// </param>
    public void insertIntoMarkupTrans(
        tableId  _transTableId,
        RecId    _transRecId,
        tableId  _tmpTableId,
        RecId    _tmpRecId )
    {
        MarkupTrans         markupTrans;
        MarkupTrans         markUpTransLoc;
        MarkupTrans         markUpTransCopy;
        RecordInsertList    insertList;

        if (_transTableId && _transRecId)
        {
            markUpTransLoc.skipDataMethods(true);
            delete_from markUpTransLoc
                where markUpTransLoc.TransTableId == _tmpTableId
                   && markUpTransLoc.TransRecId   == _tmpRecId;

            ttsbegin;
            insertList = new RecordInsertList(tableNum(MarkupTrans));
            while select markUpTransCopy
                where markUpTransCopy.TransTableId == _transTableId
                   && markUpTransCopy.TransRecId   == _transRecId
            {
                markupTrans = markUpTransCopy.data();
                markupTrans.TransTableId    = _tmpTableId;
                markupTrans.TransRecId      = _tmpRecId;
                insertList.add(markupTrans);
            }
            insertList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpExciseInquiryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set current instance of the <c>ExciseInquiryTable_IN</c> class.
    /// </summary>
    /// <param name="_tmpExciseInquiryTable">
    /// The instance of the <c>TmpExciseInquiryTable_IN</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpExciseInquiryTable_IN</c> class.
    /// </returns>
    public TmpExciseInquiryTable_IN tmpExciseInquiryTable(TmpExciseInquiryTable_IN _tmpExciseInquiryTable = tmpExciseInquiryTable)
    {
        tmpExciseInquiryTable = _tmpExciseInquiryTable;

        return tmpExciseInquiryTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>