<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPackagePurchManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailPackagePurchManagement</c> class creates purchase order lines
/// from retail package.
/// </summary>
class RetailPackagePurchManagement
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new record in <c>RetailPackagePurch</c> and <c>PurchLine</c> based on value <c>VendAccount</c>
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> for which the Lines is to be created.
    /// </param>
    /// <param name="_tmpPackagePurch">
    /// The values of <c>TmpRetailPackagePurch</c>
    /// </param>
    /// <param name="_purchTableDataSource">
    /// The <c>Object</c> of PurchTableDataSource
    /// </param>
    public void createLines(PurchTable              _purchTable,
                            TmpRetailPackagePurch   _tmpPackagePurch,
                            Object                  _purchTableDataSource)
    {
        RetailPackagePurch  packagePurch;
        VendAccount         packageVendAccount;
        LineNum             lineNum = 0;

        ttsbegin;
        while select _tmpPackagePurch
                where _tmpPackagePurch.Qty
        {
            try
            {
                packageVendAccount = RetailPackageTable::find(_tmpPackagePurch.PackageId).VendAccount;
                // If package is connected to a vendor, an instance of the package should be connected to the purchase order and order lines should be created according to the package lines
                if (packageVendAccount)
                {
                    packagePurch.clear();
                    packagePurch.initFromPurchTable(_purchTable);
                    packagePurch.initFromTmpRetailPackagePurch(_tmpPackagePurch);

                    // Finds the largest linenumber connected to the package on the purchase order
                    lineNum = RetailPackagePurch::highestPackageLineNum(_purchTable.PurchId, _tmpPackagePurch.PackageId);
                    packagePurch.LineNum = lineNum + 1;
                    packagePurch.insert();

                    // Create purchase lines for each package line
                    this.createPurchLineFromPackage(_tmpPackagePurch,
                                                    _purchTable.PurchId,
                                                    _tmpPackagePurch.Qty,
                                                    packageVendAccount,
                                                    _tmpPackagePurch.PackageId,
                                                    packagePurch.LineNum);
                }
                // If package is not connected to a vendor, order lines should be created according to the package lines without connecting to a package
                else
                {
                    this.createPurchLineFromPackage(_tmpPackagePurch,
                                                    _purchTable.PurchId,
                                                    _tmpPackagePurch.Qty,
                                                    packageVendAccount,
                                                    _tmpPackagePurch.PackageId);
                }
                _tmpPackagePurch.Qty = 0;
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            _tmpPackagePurch.delete();
        }
        ttscommit;

        if (_purchTableDataSource)
        {
            this.rereadDatasource(_purchTableDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLineFromPackage</Name>
				<Source><![CDATA[
private void createPurchLineFromPackage(TmpRetailPackagePurch   _tmpPackagePurch,
                                    PurchId                 _purchId,
                                    Qty                     _qty,
                                    VendAccount             _vendAccount,
                                    RetailPackageId         _packageId,
                                    LineNum                 _packageLineNum = 0)
    {
        PurchLine           purchLine;
        RetailPackageLines  packageLines;
        InventDim           inventDim;

        using(var telemetry = RetailInstrumentationSegment::construct('RetailPackagePurchManagement', funcName()))
        {
            while select packageLines
            where packageLines.PackageId == _tmpPackagePurch.PackageId
            {
                // If package is connected to vendor, check if there is a relevant purchase order line connected to the package in question
                if (_vendAccount)
                {
                    select firstonly forupdate purchLine
                    where purchLine.PurchId           == _purchId               &&
                          purchLine.RBOPackageLineNum == _packageLineNum        &&
                          purchLine.RetailPackageId   == packageLines.PackageId &&
                          purchLine.ItemId            == packageLines.ItemId    &&
                          purchLine.InventDimId       == packageLines.InventDimId;
                }
                // If package is not connected to vendor, check if there is a relevant purchase order line not connected
                else
                {
                    select firstonly forupdate purchLine
                    where purchLine.PurchId           == _purchId               &&
                          purchLine.RBOPackageLineNum == 0                      &&
                          purchLine.RetailPackageId   == ''                     &&
                          purchLine.ItemId            == packageLines.ItemId    &&
                          purchLine.InventDimId       == packageLines.InventDimId;
                }

                // If a relevant purchase order line is found it should be updated
                if (purchLine)
                {
                    purchLine.PurchQty += (_qty * packageLines.Qty);
                    purchLine.update();
                }
                // If a relevant purchase order is not found it should be created
                else
                {
                    purchLine.clear();
                    purchLine.initValue();
                    purchLine.PurchId           = _purchId;
                    purchLine.ItemId            = packageLines.ItemId;
                    purchLine.itemIdChanged(); // it allows to determine whether the product should be tracked in inventory
                    purchLine.PurchQty          = (_qty * packageLines.Qty);

                    // Find the working inventDim
                    inventDim                   = InventDim::find(packageLines.InventDimId);

                    // Init the inventDim for the purchLine.ItemId
                    inventDim.initFromInventTable(
                    InventTable::find(purchLine.ItemId),
                    InventItemOrderSetupType::Purch,
                    inventDim);

                    // Create or find the matching inventDim in DB
                    inventDim = inventDim::findOrCreate(inventDim);

                    purchLine.setInventDimId(inventDim.inventDimId);
                    purchLine.initBarcode(inventDim);
                    purchLine.VariantId         = packageLines.VariantId;
                    purchLine.PurchUnit         = packageLines.PurchUnit;

                    //If package is connected to vendor, the purchase order line should be connected to the package
                    if (_vendAccount)
                    {
                        purchLine.RetailPackageId      = packageLines.PackageId;
                        purchLine.RBOPackageLineNum = _packageLineNum;
                    }

                    purchLine.createLine(true,   //  validation
                                     true,   //  initFromPurchTable
                                     false,  //  initFromInventTableModule
                                     true,   //  calcInventQty
                                     true,   //  searchMarkup
                                     true,   //  searchPrice
                                     false); //  ignorePurchTableInventDim

                    if (RetailPackagePurchManagementRespectVendExternalItemDescriptionFlight::instance().isEnabled())
                    {
                        purchLine.initFromVendExternalItemDescription();
                        purchLine.update();
                    }

                    eventSource.EventWriteMerchandisingRetailPackagePurchManagmentCreatedNewLine(classId2Name(ClassIdGet(this)), funcName(), purchLine.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadDatasource</Name>
				<Source><![CDATA[
    private void rereadDatasource(FormRun _purchTable)
    {
        Object purchTable_ds = SysFormDataSource::findDataSource(_purchTable, tableNum(PurchTable));

        purchTable_ds.reRead();
        purchTable_ds.reReadLines();
        purchTable_ds.reReadPackages();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>