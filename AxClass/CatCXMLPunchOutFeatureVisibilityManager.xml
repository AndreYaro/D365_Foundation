<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPunchOutFeatureVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatCXMLPunchOutFeatureVisibilityManager</c> class handles event to hide or show cxml punchout forms/controls/menu items.
/// </summary>
public static class CatCXMLPunchOutFeatureVisibilityManager
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuItemFeatureHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides or show cxml punchout menu items.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_visible">Whether or not the submenu should be visible.</param>
    /// <remarks>This will only hide the individual menu items if they are contained in a group that we will also be hiding.</remarks>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFeatureHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null)
            {
                switch (metaElement.Name)
                {
                    case menuItemDisplayStr(CatCXMLCartLogList):
                    case menuItemDisplayStr(CatCXMLParameters):
                    case menuItemDisplayStr(CatCXMLPurchRequest):
                    case menuItemActionStr(CatCXMLPurchRequestBatch):
                        {
                            _visible.value = isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog));
                            break;
                        }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeatureState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to default dashboard when feature is not enabled
    /// </summary>
    /// <param name = "_sender">The form.</param>
    private static void checkFeatureState(xFormRun _sender)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)))
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@CXM:CatCXMLPunchOutFeatureErrorMessage");

            _sender.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCatCXMLCartLogListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>CatCXMLCartLogList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(CatCXMLCartLogList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCatCXMLCartLogListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        CatCXMLPunchOutFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCatCXMLParametersFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>CatCXMLParameters</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(CatCXMLParameters), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCatCXMLParametersFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        CatCXMLPunchOutFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCatCXMLPurchRequestFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>CatCXMLPurchRequest</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(CatCXMLPurchRequest), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCatCXMLPurchRequestFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        CatCXMLPunchOutFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the Supplier Auxiliary Id control in PurchTable form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(PurchTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void PurchTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(PurchTable, PurchReq_SupplierAuxId)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));

    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchReqTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the Supplier Auxiliary Id control in PurchReqTable form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(PurchReqTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void PurchReqTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(PurchReqTable, Item_SupplierAuxId)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));

    }

]]></Source>
			</Method>
			<Method>
				<Name>VendTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the CXMLOrderEnable control in VendTable form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(VendTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void VendTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(VendTable, Purch_CatCXMLOrderEnable)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));

    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPurchOrderJournal_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the PurchRequest tab page in VendPurchOrderJournal form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(VendPurchOrderJournal), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void VendPurchOrderJournal_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(VendPurchOrderJournal, PurchRequest)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatExternalCatalogConfiguration_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the OrderProperties tab page and the CatCXMLCartLogList form button in CatExternalCatalogConfiguration form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(CatExternalCatalogConfiguration), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void CatExternalCatalogConfiguration_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(CatExternalCatalogConfiguration, OrderProperties)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));
        _sender.design().controlName(formControlStr(CatExternalCatalogConfiguration, CatCXMLCartLogList)).visible(isConfigurationkeyEnabled(configurationKeyNum(ProcCatalog)));
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>