<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReportTuning_ReportP4_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayReportTuning_ReportP4_2013 extends RPayReportTuning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1, 2:
                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);
                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));

                sysTableLookup.parmQuery(query);
                _lookupCtrl.replaceOnLookup(true);
                sysTableLookup.performFormLookup();
                break;

            case 3:
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedTypeNum(RpayTimeGroupCode), _lookupCtrl);
                break;

            case 4, 5, 6:
                _lookupCtrl.replaceOnLookup(true);
                this.lookupEDT(extendedTypeNum(RPayGroup), _lookupCtrl);
                break;

            case 7, 8:
                _lookupCtrl.replaceOnLookup(false);
                this.lookupEDT(extendedTypeNum(RHRMReasonCodeId), _lookupCtrl);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RPayReportName _reportName, FormRun _formRun)
    {
        parameterName = [literalStr("@RUP2132"),
                         literalStr("@RUP2133"),
                         literalStr("@RUP2134"),
                         literalStr("@RUP2137"),
                         literalStr("@RUP2138"),
                         literalStr("@RUP2139")];

        super(_reportName,_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
        public void openReportTemplate()
    {
        ComExcelDocument_RU doc = new ComExcelDocument_RU();

        doc.open(TemplateProvider_RU::getFor(new RPayReportP4_2013()).get(resourceStr(RPayReportP4_2013)), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        public void printReport()
    {
        new MenuFunction(menuitemOutputStr(RPayReportP4_2013), MenuItemType::Output).run(new Args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryRun                queryRun;
        ;
        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1, 2:
                if ((select firstfast rpayCounterTable
                            where rpayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                  rpayCounterTable.CounterType == RPayCounterType::Fund).RecId == 0 &&
                    rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }
                break;

            case 3:
                if ((select firstfast rPayTimeGroupTable
                           where rPayTimeGroupTable.TimeGroup == rPayReportTuningTable.Parameter).RecId == 0 &&
                    rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayTimeGroupTable, TimeGroup),
                                       tablePName(RPayTimeGroupTable)));
                }
                break;

            case 4, 5, 6:
                if ((select firstfast rpayGroupTable
                         where rpayGroupTable.PayGroup == rPayReportTuningTable.Parameter &&
                               rpayGroupTable.Blocked  == NoYes::No).RecId == 0           &&
                   rPayReportTuningTable.Parameter)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayGroupTable, PayGroup),
                                       tablePName(RPayGroupTable)));
                }
                break;

            case 9, 10:
                query = new Query();
                qbds = query.addDataSource(tableNum(RHRMReasonCode));

                qbds.addRange(fieldNum(RHRMReasonCode, ReasonCodeId)).value(rPayReportTuningTable.Parameter);
                qbds.addSelectionField(fieldNum(RHRMReasonCode, RecId), SelectionField::Count);

                queryRun = new QueryRun(query);
                queryRun.next();

                if (queryRun.get(tableNum(RHRMReasonCode)).RecId == 0)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RHRMReasonCode, ReasonCodeId),
                                       tablePName(RHRMReasonCode)));
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>