<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdvRuleUIBuilder_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset advanced rule UI builder
/// </summary>
class AssetAdvRuleUIBuilder_JP
{
    AssetAdvRuleType_JP     ruleType;

    FormGroupControl        ruleEditorGroupRoot;
    FormStaticTextControl   staticTextRulePreview;
    Map                     controlId2ItemId;
    Array                   itemIdCounter;
    int                     stringControlId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addControlForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds control for ttem
    /// </summary>
    /// <param name="_parentGroup">
    /// The parent group
    /// </param>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// Returns form control
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exceptions when base type not correct
    /// </exception>
    protected FormControl addControlForItem(FormGroupControl _parentGroup, int _itemId)
    {
        DictType            dictType;
        ExtendedTypeId      edtId;
        str                 newCtrlName;
        str                 newCtrlLabel;

        FormControl         formControl;
        FormStringControl   formStringCtrl;
        FormIntControl      formIntCtrl;
        FormRealControl     formRealCtrl;
        FormComboBoxControl formComboBoxCtrl;

        if (_parentGroup)
        {
            edtId           = ruleType.getItemEDTId(_itemId);
            newCtrlLabel    = ruleType.getItemLabel(_itemId);

            if (edtId)
            {
                newCtrlName = this.createNewItemCtrlName(_itemId);

                dictType = new DictType(edtId);
                switch (dictType.baseType())
                {
                    case Types::Enum:
                        formControl         = _parentGroup.addControl(FormControlType::ComboBox, newCtrlName);
                        formComboBoxCtrl    = formControl as FormComboBoxControl;
                        formComboBoxCtrl.label(newCtrlLabel);
                        formComboBoxCtrl.extendedDataType(edtId);
                        formComboBoxCtrl.selection(ruleType.getItemValue(_itemId));
                        formComboBoxCtrl.registerOverrideMethod(
                            methodStr(FormComboBoxControl, modified),
                            methodStr(AssetAdvRuleUIBuilder_JP, modifiedControl),
                            this);
                        break;

                    case Types::String:
                        formControl         = _parentGroup.addControl(FormControlType::String, newCtrlName);
                        formStringCtrl      = formControl as FormStringControl;
                        formStringCtrl.label(newCtrlLabel);
                        formStringCtrl.extendedDataType(edtId);
                        formStringCtrl.text(ruleType.getItemValue(_itemId));
                        formStringCtrl.registerOverrideMethod(
                            methodStr(FormStringControl, modified),
                            methodStr(AssetAdvRuleUIBuilder_JP, modifiedControl),
                            this);
                        break;

                    case Types::Integer:
                        formControl         = _parentGroup.addControl(FormControlType::Integer, newCtrlName);
                        formIntCtrl         = formControl as FormIntControl;
                        formIntCtrl.label(newCtrlLabel);
                        formIntCtrl.extendedDataType(edtId);
                        formIntCtrl.value(ruleType.getItemValue(_itemId));
                        formIntCtrl.registerOverrideMethod(
                            methodStr(FormIntControl, modified),
                            methodStr(AssetAdvRuleUIBuilder_JP, modifiedControl),
                            this);
                        break;

                    case Types::Real:
                        formControl         = _parentGroup.addControl(FormControlType::Real, newCtrlName);
                        formRealCtrl        = formControl as FormRealControl;
                        formRealCtrl.label(newCtrlLabel);
                        formRealCtrl.extendedDataType(edtId);
                        formRealCtrl.realValue(ruleType.getItemValue(_itemId));
                        formRealCtrl.registerOverrideMethod(
                            methodStr(FormRealControl, modified),
                            methodStr(AssetAdvRuleUIBuilder_JP, modifiedControl),
                            this);
                        break;

                    default:
                        throw error(error::wrongUseOfFunction(funcName()));
                }
            }
        }

        if (formControl)
        {
            controlId2ItemId.insert(formControl.id(), _itemId);
        }

        return formControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlForStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add control for string
    /// </summary>
    /// <param name="_parentGroup">
    /// The parent group
    /// </param>
    /// <param name="_strToShow">
    /// String to show
    /// </param>
    /// <returns>
    /// Returns form static text control
    /// </returns>
    protected FormStaticTextControl addControlForStr(FormGroupControl _parentGroup, str _strToShow)
    {
        FormStaticTextControl   newControl;

        if (_parentGroup && _strToShow)
        {
            stringControlId++;
            newControl = _parentGroup.addControl(FormControlType::StaticText, int2Str(stringControlId));
            newControl.text(_strToShow);
        }

        return newControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds user interface
    /// </summary>
    public void build()
    {
        FormGroupControl    currentRuleEditorGroup;

        System.Text.RegularExpressions.Regex    itemRegex = new System.Text.RegularExpressions.Regex('(%[1-9][0-9]*)');
        System.String[]                         subStrList;
        str                                     subString;
        int                                     i;
        int                                     itemId;

        ruleEditorGroupRoot.lock();

        // Clear the previous rule editor
        this.clear();

        currentRuleEditorGroup = ruleEditorGroupRoot.addControl(FormControlType::Group, '');

        // Split the rule format to build the UI
        subStrList = itemRegex.Split(ruleType.ruleFormat());
        for (i = 0; i < CLRInterop::getAnyTypeForObject(subStrList.get_Count()); i++)
        {
            subString = CLRInterop::getAnyTypeForObject(subStrList.get_Item(i));

            if (i mod 2 == 1)
            {
                // As the index of the list start from 0, the odd index sub string is the rule item.
                // Note: even for the rule format like "%1 xxx", the first split result is empty string,
                // '%1' is in the second (index=1) split result.
                itemId = str2int(strReplace(subString, '%', ''));
                if (itemId)
                {
                    this.addControlForItem(currentRuleEditorGroup, itemId);
                }
            }
        }

        this.updatePreview();

        ruleEditorGroupRoot.unLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears controls
    /// </summary>
    public void clear()
    {
        while (ruleEditorGroupRoot.controlCount() > 0)
        {
            ruleEditorGroupRoot.formRun().design().removeControl(ruleEditorGroupRoot.controlNum(1).id());
        }

        controlId2ItemId    = new Map(Types::Integer, Types::Integer);
        itemIdCounter       = new Array(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewItemCtrlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new item control name
    /// </summary>
    /// <param name="_itemId">
    /// The item id
    /// </param>
    /// <returns>
    /// The created name
    /// </returns>
    protected str createNewItemCtrlName(int _itemId)
    {
        str     ret;
        int     curCount = 0;

        #define.ItemCtrlNameFormat('RuleItemCtrl_\%1_\%2')

        if (_itemId > 0)
        {
            if (itemIdCounter.lastIndex() >= _itemId)
            {
                curCount = itemIdCounter.value(_itemId);
            }
            curCount++;
            itemIdCounter.value(_itemId, curCount);

            ret = strFmt(#ItemCtrlNameFormat, _itemId, curCount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes for construct
    /// </summary>
    /// <param name="_ruleType">
    /// The rule type
    /// </param>
    /// <param name="_ruleEditorGroup">
    /// The rule editor group
    /// </param>
    /// <param name="_StaticTextRulePreview">
    /// The static text rule preview
    /// </param>
    protected void initForConstruct(
        AssetAdvRuleType_JP     _ruleType,
        FormGroupControl        _ruleEditorGroup,
        FormStaticTextControl   _StaticTextRulePreview)
    {
        ruleType                = _ruleType;
        ruleEditorGroupRoot     = _ruleEditorGroup;
        staticTextRulePreview   = _StaticTextRulePreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the control is modified
    /// </summary>
    /// <param name="_formControl">
    /// The form control
    /// </param>
    /// <returns>
    /// Returns true if modified otherwise false
    /// </returns>
    protected boolean modifiedControl(FormControl _formControl)
    {
        boolean     ret = false;
        anytype     newValue;
        int         itemId;

        FormStringControl   formStringCtrl;
        FormIntControl      formIntCtrl;
        FormRealControl     formRealCtrl;
        FormComboBoxControl formComboBoxCtrl;

        if (_formControl)
        {
            switch (classIdGet(_formControl))
            {
                case classNum(FormComboBoxControl):
                    formComboBoxCtrl    = _formControl as FormComboBoxControl;
                    newValue            = formComboBoxCtrl.selection();
                    ret                 = formComboBoxCtrl.modified();
                    break;

                case classNum(FormStringControl):
                    formStringCtrl  = _formControl as FormStringControl;
                    newValue        = formStringCtrl.text();
                    ret             = formStringCtrl.modified();
                    break;

                case classNum(FormIntControl):
                    formIntCtrl     = _formControl as FormIntControl;
                    newValue        = formIntCtrl.value();
                    ret             = formIntCtrl.modified();
                    break;

                case classNum(FormRealControl):
                    formRealCtrl    = _formControl as FormRealControl;
                    newValue        = formRealCtrl.realValue();
                    ret             = formRealCtrl.modified();
                    break;
            }
        }

        if (ret)
        {
            itemId = controlId2ItemId.lookup(_formControl.id());
            if (itemId)
            {
                ruleType.setItemValue(itemId, newValue);

                if (ruleType.parmNeedsToUpdateLayout())
                {
                    this.build();
                }

                this.updatePreview();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        controlId2ItemId    = new Map(Types::Integer, Types::Integer);
        itemIdCounter       = new Array(Types::Integer);
        stringControlId     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves current settings
    /// </summary>
    public void save()
    {
        ruleType.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates preview
    /// </summary>
    protected void updatePreview()
    {
        if (staticTextRulePreview && ruleType)
        {
            staticTextRulePreview.text(ruleType.overview());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetAdvRuleUIBuilder_JP</C>
    /// </summary>
    /// <param name="_ruleType">
    /// The rule type
    /// </param>
    /// <param name="_ruleEditorGroup">
    /// The rule editor group
    /// </param>
    /// <param name="_staticTextRulePreview">
    /// The static text rule preview
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    public static AssetAdvRuleUIBuilder_JP construct(
        AssetAdvRuleType_JP     _ruleType,
        FormGroupControl        _ruleEditorGroup,
        FormStaticTextControl   _staticTextRulePreview)
    {
        AssetAdvRuleUIBuilder_JP    ret;

        if (_ruleEditorGroup && _staticTextRulePreview)
        {
            ret = new AssetAdvRuleUIBuilder_JP();
        }

        if (ret)
        {
            ret.initForConstruct(_ruleType, _ruleEditorGroup, _staticTextRulePreview);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>