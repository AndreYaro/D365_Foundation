<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityCalcOrderDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>MCRContinuityCalcOrderDate</c> class is used to determine the ship dates for each
///  event in a continuity schedule.
/// </summary>
class MCRContinuityCalcOrderDate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOrderDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the continuity cust line's order date base on the schedule set for that
    ///  continuity schedule.
    /// </summary>
    /// <param name="_mcrContinuityScheduleLine">
    /// The continuity sehcudle line to find the order date.
    /// </param>
    /// <param name="_mcrContinuityCustLine_Prev">
    /// The continuity cust line previous.
    /// </param>
    /// <returns>
    /// The order date.
    /// </returns>
    public TransDate getOrderDate(
        MCRContinuityScheduleLine _mcrContinuityScheduleLine,
        MCRContinuityCustLine _mcrContinuityCustLine_Prev)
    {
        TransDate orderDate, daysFromLastEventDate, periodCodeDate;
        int headerDaysAfter;

        if (_mcrContinuityScheduleLine.PeriodCode)
        {
            periodCodeDate = this.GetPeriodCodeShipDate(_mcrContinuityScheduleLine.PeriodCode, _mcrContinuityCustLine_Prev.StartDate);
        }
        if (_mcrContinuityScheduleLine.DaysFromLastEvent)
        {
            // Find the previous Continuity Cust Line so that the days from last can be
            // calculated off of the last event's ship date.
            daysFromLastEventDate = _mcrContinuityCustLine_Prev.StartDate + _mcrContinuityScheduleLine.DaysFromLastEvent;
        }

        if (_mcrContinuityScheduleLine.StartOrderDate < daysFromLastEventDate)
        {
            orderDate = daysFromLastEventDate;
        }
        else
        {
            orderDate = _mcrContinuityScheduleLine.StartOrderDate;
        }
        if (periodCodeDate && (periodCodeDate > orderDate))
        {
            orderDate = periodCodeDate;
        }

        if (_mcrContinuityScheduleLine.EventID == 1)
        {
            headerDaysAfter = MCRContinuityScheduleHeader::find(_mcrContinuityScheduleLine.ScheduleID).DaysAfter;
            orderDate += headerDaysAfter;
            // Schedule date cannot be before today's date.
            if (orderDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                // CSN continuity enhancements, start the schedule the number of days after
                // today specified in the schdedule.
                orderDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + headerDaysAfter;
            }
        }
        return orderDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCodeShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the from date using the period code.
    /// </summary>
    /// <param name="_shipDateCode">
    /// The ship date.
    /// </param>
    /// <param name="_previousStartOrderDate">
    /// The previous start order date.
    /// </param>
    /// <returns>
    /// The transaction from date.
    /// </returns>
    protected TransDate getPeriodCodeShipDate(
        DateCode _shipDateCode,
        TransDate _previousStartOrderDate)
    {
        LedgerPeriodCode   ledgerPeriodCode;
        TransDate ledgerDate;
        TransDate fromDate;
        ledgerPeriodCode = LedgerPeriodCode::find(_shipDateCode);

        ledgerDate = ledgerPeriodCode.dateFunction(
            (_previousStartOrderDate ? _previousStartOrderDate: DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
            1,
            ledgerPeriodCode.StartPeriod1);

        fromDate = ledgerPeriodCode.fromDate(ledgerDate);

        return fromDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>