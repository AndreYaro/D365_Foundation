<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesDelete extends RunBaseBatch implements BatchRetryable
{
    Counter                 progressCounter;

    boolean                 multiForm;

    ParmId                  parmId;
    TransDate               transDate;

    QueryRun                chooseLines;
    boolean                 showQueryForm;
    boolean                 showDialog;

    SalesTable              salesTable;
    SalesParmTable          salesParmTable;

    SalesId                 salesId;
    ReturnDeleteSource      source;

    container               chooseLinesPacked;

    #define.currentVersion(2)
    #LOCALMACRO.ParmList
        parmId,
        showQueryForm,
        chooseLinesPacked
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchType</Name>
				<Source><![CDATA[
    protected SalesBatch batchType()
    {
        return SalesBatch::Delete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSelectOrder</Name>
				<Source><![CDATA[
    public boolean canSelectOrder(SalesTable _salesTable)
    {
        return !(_salesTable.returnItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    public void  chooseLines()
    {
        SalesId         salesIdLocal = '';
        SalesParmTable  salesParmTableLocal;

        while (chooseLines.next())
        {
            SalesLine salesLineLocal = chooseLines.get(tablenum(SalesLine));
            SalesTable salesTableLocal = chooseLines.get(tablenum(SalesTable));

            if (this.canSelectOrder(salesTableLocal))
            {
                if (salesIdLocal != salesTableLocal.SalesId)
                {
                    salesParmTableLocal.clear();
                    this.createParmTable(salesParmTableLocal, salesTableLocal);
                    salesParmTableLocal.insert();
                }

                if (salesLineLocal)
                {
                    this.createParmLine(salesLineLocal, salesParmTableLocal.TableRefId);
                }

                salesIdLocal = salesTableLocal.SalesId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    public void  cleanupDialog()
    {
        SalesParmTable::deleteWithoutUpdate(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected void  createParmLine(SalesLine  _salesLine, TradeLineRefId _tableRefId)
    {
        SalesParmLine       salesParmLineLocal;

        if (_salesLine.RecId)
        {
            salesParmLineLocal.clear();
            salesParmLineLocal.initFromSalesLine(_salesLine);

            salesParmLineLocal.ParmId = parmId;
            salesParmLineLocal.TableRefId = _tableRefId;

            salesParmLineLocal.DeliverNow = _salesLine.SalesQty;
            salesParmLineLocal.setLineAmount(_salesLine);
            salesParmLineLocal.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected void createParmTable(SalesParmTable    _salesParmTable,
                         SalesTable        _salesTable)
    {
        _salesParmTable.initFromSalesTable(_salesTable);

        _salesParmTable.Transdate              = this.transDate();
        _salesParmTable.ParmId                 = parmId;
        _salesParmTable.Ordering               = this.documentStatus();
        _salesParmTable.BatchType              = this.batchType();
        _salesParmTable.BatchAdministration    = multiForm;
        _salesParmTable.ParmJobStatus          = ParmJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrders</Name>
				<Source><![CDATA[
    protected boolean  deleteOrders()
    {
        boolean deleted = false;

        this.displayProgress();

        if (salesTable.validateDelete())
        {
            ttsbegin;

            salesTable.delete();
            this.postUpdate();
            deleted=true;

            ttscommit;
        }
        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Args            parameters = new Args();

        parameters.name(formstr(SalesDeleteOrder));
        parameters.caller(this);
        FormRun salesDelete = classfactory.formRunClass(parameters);

        if (salesTable)
        {
            this.showQueryForm(false);
            this.initLinesQuery();
        }
        else
        {
             this.showQueryForm(true);
        }

        salesDelete.init();

        if (showDialog)
        {
            return salesDelete;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    void displayProgress()
    {
        this.progressUpdate(strfmt("@SYS50878",salesTable.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    public void  initLinesQuery()
    {
        this.updateQueryBuild();

        if (chooseLines.prompt())
        {
            SalesParmTable::deleteWithoutUpdate(parmId);
            this.chooseLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSalesTable</Name>
				<Source><![CDATA[
    protected void  initParmSalesTable(SalesTable  _salesTable)
    {
        salesTable = _salesTable;

        if (! salesTable)
        {
            multiForm = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiForm</Name>
				<Source><![CDATA[
    public boolean  multiForm(boolean  _multiForm = multiForm)
    {
        multiForm = _multiForm;
        return multiForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean  getParmId = true)
    {
        super();

        showQueryForm       = false;
        showDialog          = true;

        if (getParmId)
        {
            parmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (chooseLines)
            chooseLinesPacked = chooseLines.pack();

        return [#CurrentVersion,#ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public ParmId  parmId(ParmId  _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    protected void  postUpdate()
    {
        SalesParmTable parmTable = SalesParmTable::find(salesParmTable.ParmId, salesParmTable.TableRefId, true);
        parmTable.updateParmJobStatusExecuted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun  queryBuild()
    {
        QueryRun build = new QueryRun(querystr(SalesParmLine));

        if (salesTable)
        {
            build.query().dataSourceTable(tablenum(SalesParmLine)).rangeField(fieldnum(SalesParmLine, OrigSalesId)).value(queryValue(salesTable.SalesId));
        }

        build.query().dataSourceTable(tablenum(SalesParmLine)).rangeField(fieldnum(SalesParmLine, ParmId)).value(queryValue(parmId));

        return build;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void  run()
    {
        #OCCRetryCount
        Counter                 infoLogCounter = infolog.num();

        if (chooseLines != null && !SalesParmTable::existParmIdJobWaiting(parmId))
        {
            this.chooseLines();
        }

        select count(RecId) from salesParmTable
            where salesParmTable.ParmId == parmId &&
            salesParmTable.ParmJobStatus    == ParmJobStatus::Waiting;

        if (SalesParameters::find().CancelSales == NoYes::Yes)
        {
            this.progressInit("@SYS50873", salesParmTable.RecId, #AviFileDel);
        }
        else
        {
            this.progressInit("@SYS50873", salesParmTable.RecId, #AviFileDelr);
        }

        progress.setText("@SYS26577");

        QueryRun query = new QueryRun(querystr(SalesParmTable));
        query.query().dataSourceTable(tablenum(SalesParmTable)).rangeField(fieldnum(SalesParmTable, ParmId)).value(queryValue(parmId));
        query.query().dataSourceTable(tablenum(SalesParmTable)).addRange(fieldnum(SalesParmTable, ParmJobStatus)).value(queryValue(ParmJobStatus::Waiting));

        setprefix("@SYS23355");

        while (query.next())
        {
            salesParmTable     = query.get(tablenum(SalesParmTable));
            salesTable         = SalesTable::find(salesParmTable.salesId, true, ConcurrencyModel::Optimistic);

            if (salesTable)
            {
                setprefix(#PreFixField(SalesTable, SalesId));

                try
                {
                    if (!this.deleteOrders())
                    {
                        this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
                        infoLogCounter = infolog.num();
                    }
                }

                catch (Exception::Deadlock)
                {
                    retry;
                }

                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }

                catch (Exception::Error)
                {
                    this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
                    infoLogCounter = infolog.num();
                }
            }
        }

        progress = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryForm</Name>
				<Source><![CDATA[
    public boolean  showQueryForm(boolean  _showQueryForm = showQueryForm)
    {
        showQueryForm = _showQueryForm;

        return showQueryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>source</Name>
				<Source><![CDATA[
    public ReturnDeleteSource source()
    {
        return ReturnDeleteSource::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate(TransDate  _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion  :
                [version,#ParmList] = packedClass;
                break;
            default :
                return false;
        }

        if (chooseLinesPacked)
            chooseLines = new QueryRun(chooseLinesPacked);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    protected void updateParmJobStatusContainErrors(container errorText)
    {
        ttsbegin;

        salesParmTable = SalesParmTable::find(salesParmTable.ParmId, salesParmTable.TableRefId, true);
        salesParmTable.Log =  Info::infoCon2Str(errorText);
        salesParmTable.updateParmJobStatusContainErrors();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild()
    {
        chooseLines = new QueryRun(querystr(SalesUpdate));

        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, CreatedDateTime));
        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, Deadline));
        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, CustAccount));
        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, SalesType)).value(queryValue(SalesType::Sales));
        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, SalesStatus)).value(queryValue(SalesStatus::Backorder));
        chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, DocumentStatus));

        if (salesTable)
        {
            chooseLines.query().dataSourceTable(tablenum(SalesTable)).addRange(fieldnum(SalesTable, SalesId)).value(queryValue(salesTable.SalesId));
            chooseLines.query().dataSourceTable(tablenum(SalesTable)).rangeField(fieldnum(SalesTable, CustAccount)).value(queryValue(salesTable.CustAccount));
        }

        chooseLines.query().dataSourceTable(tablenum(SalesLine)).joinMode(JoinMode::OuterJoin);
        chooseLines.query().dataSourceTable(tablenum(InventDim)).joinMode(JoinMode::OuterJoin);

        chooseLines.query().dataSourceTable(tablenum(SalesLine)).addSortField(fieldnum(SalesLine, SalesId));
        chooseLines.query().dataSourceTable(tablenum(SalesLine)).addSortField(fieldnum(SalesLine, LineNum));

        chooseLines.query().interactive(showQueryForm);
        chooseLines.saveUserSetup(false);

        chooseLines.title("@SYS23355");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesDelete construct(boolean _getParmId = true, ReturnDeleteSource _source = ReturnDeleteSource::Sales)
    {
        switch (_source)
        {
            case ReturnDeleteSource::Sales :
                return new SalesDelete(_getParmId);

            case ReturnDeleteSource::ReturnOrder :
                return new SalesDelete_Returns(_getParmId);

            default :
                // Function %1 has been used incorrectly.
                throw error(strfmt("@SYS19306", funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS23355";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        int                 parmEnum;

        if (_args)
        {
            parmEnum = _args.parmEnum();
        }
        SalesDelete salesDelete = SalesDelete::construct(true, parmEnum);
        ParmId parmId = salesDelete.parmId();

        salesDelete.getLast();
        salesDelete.parmId(parmId);
        salesDelete.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (salesDelete.prompt())
        {
            salesDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>