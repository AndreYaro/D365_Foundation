<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetValueGroupValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains business logic for handling dimension value group
/// validation specific for budget ledger dimensions.
/// </summary>
[System.ComponentModel.Composition.ExportMetadataAttribute(enumstr(LedgerDimensionType), LedgerDimensionType::Budget),
 System.ComponentModel.Composition.ExportAttribute(identifierstr(Dynamics.AX.Application.DimensionAttributeValueGroupValidation))]
public class BudgetValueGroupValidation extends DimensionAttributeValueGroupValidation
{
    // Value: [DimensionAttribute.RecId, DimensionAttribute localized name]
    List dimensionAttributesBudgetEnabled;

    LedgerRecId ledgerRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findConstraintNodeByParentIsOptional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>DimensionConstraintNode</c> record for the specified parent where the value is optional.
    /// </summary>
    /// <param name="_parentConstraintNode">
    /// The record ID of the parent <c>DimensionConstraintNode</c> record.
    /// </param>
    /// <param name="_minOrdinal">
    /// The minimum <c>DimensionOrdinal</c> value for which to find the <c>DimensionConstraintNode</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>DimensionConstraintNode</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// Includes check to determine whether the dimension is enabled for budget.
    /// </remarks>
    protected DimensionConstraintNode findConstraintNodeByParentIsOptional(
        DimensionConstraintNodeRecId    _parentConstraintNode,
        DimensionOrdinal                _minOrdinal)
    {
        DimensionConstraintNode parentDimensionConstraintNode;
        DimensionConstraintNode dimensionConstraintNode;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        // Get the dimension hierarchy level for the parent constraint node
        parentDimensionConstraintNode = DimensionConstraintNode::find(_parentConstraintNode);
        dimensionHierarchyLevel = DimensionHierarchyLevel::find(parentDimensionConstraintNode.DimensionHierarchyLevel);

        // Get the current dimension hierarchy level
        dimensionHierarchyLevel = this.getDimensionHierarchyLevel(dimensionHierarchyLevel.Level + 1);

        if (this.isDimensionAttributeEnabledForBudget(dimensionHierarchyLevel.DimensionAttribute))
        {
            dimensionConstraintNode = super(_parentConstraintNode, _minOrdinal);
        }
        else
        {
            // Get the existing constraint node for the specified parent and minimum ordinal
            // No constraint node restrictions are needed for dimensions not enabled for budget.
            dimensionConstraintNode = DimensionConstraintNode::findByConstraintOrdinal(this.getConstraintTreeRecId(), _parentConstraintNode, _minOrdinal);
        }

        return dimensionConstraintNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusForLevelSegmentAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validation status for the dimension attributes of the specified segment,
    /// at the specified hierarchy level.
    /// </summary>
    /// <param name="_validationRequest">
    /// The validation request.
    /// </param>
    /// <param name="_dimensionHierarchyLevel">
    /// The dimension hierarchy level record.
    /// </param>
    /// <param name="_segment">
    /// The dimension storage segment.
    /// </param>
    /// <returns>
    /// A <c>DimensionValidationStatusContract</c> object.
    /// </returns>
    /// <remarks>
    /// Includes check to determine whether the dimension is enabled for budget.
    /// </remarks>
    protected DimensionValidationStatusContract getStatusForLevelSegmentAttribute(
        DimensionValidationRequest  _validationRequest,
        DimensionHierarchyLevel     _dimensionHierarchyLevel,
        DimensionStorageSegment     _segment)
    {
        DimensionValidationStatusContract attributeValidationStatus;

        if (this.isDimensionAttributeEnabledForBudget(_dimensionHierarchyLevel.DimensionAttribute))
        {
            attributeValidationStatus = super(_validationRequest, _dimensionHierarchyLevel, _segment);
        }
        else
        {
            attributeValidationStatus = DimensionValidationStatusContract::newForValidationRequest(_validationRequest);
            attributeValidationStatus.parmValidationStatus(DimensionValidationStatus::StructureChanged);
            attributeValidationStatus.parmStructureChangedError(DimensionStructureChangedError::DimensionNotEnabledForBudget);
        }

        return attributeValidationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        super();

        dimensionAttributesBudgetEnabled = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForValidationRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>BudgetValueGroupValidation</c> class instance.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The record ID of the dimension hierarchy.
    /// </param>
    protected void initializeForValidationRequest(DimensionValidationRequest _validationRequest, DimensionHierarchyId _dimensionHierarchyId)
    {
        super(_validationRequest, _dimensionHierarchyId);

        LedgerDimensionValidationRequest ledgerValidationRequest = _validationRequest as LedgerDimensionValidationRequest;

        if (ledgerValidationRequest)
        {
            ledgerRecId = ledgerValidationRequest.parmLedgerRecId();
        }
        else
        {
            // Should be a LedgerDimensionValidationRequest
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeEnabledForBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified dimension attribute is enabled for budget.
    /// </summary>
    /// <param name="_dimensionAttributeRecId">
    /// The record ID of the dimension attribute.
    /// </param>
    /// <returns>
    /// true if the dimension attribute is enabled for budget; otherwise, false.
    /// </returns>
    protected final boolean isDimensionAttributeEnabledForBudget(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        if (!dimensionAttributesBudgetEnabled)
        {
            dimensionAttributesBudgetEnabled = BudgetPrimaryLedgerDimensionAttribute::budgetDimensionsList(ledgerRecId);
        }

        return BudgetPrimaryLedgerDimensionAttribute::isDimensionAttributeInList(_dimensionAttributeRecId, dimensionAttributesBudgetEnabled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>