<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqSourceDocument</c> class provides information to handle the distributions and
/// sub-ledger journal lines of a <c>PurchReqTable</c> record.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition, tableStr(PurchReqTable))]
public class PurchReqSourceDocument extends SourceDocument
    implements SourceDocumentIBusinessEvent
{
    PurchReqTable    purchReqTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the documented business event.
    /// </summary>
    /// <returns>
    /// A <c>BusinessEvent</c> class.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>SourceDocumentHeaderImplementation</c> class.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// The source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        purchReqTable = _sourceDocumentImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        NumberSeq               numberSeq;
        Voucher                 voucher;
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTable;

        // Try to pull from cache first
        voucher = SysTransactionScopeCache::get(classStr(PurchReqSourceDocument), [purchReqTable.recid, _dataAreaId], null);

        if (!voucher)
        {
            changeCompany(_dataAreaId)
            {
                // Validate voucher settings
                numberSequenceReference = PurchParameters::numRefPurchReqVoucher();
                if (!numberSequenceReference)
                {
                    this.throwError("@SYS53912");
                }
                numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
                if (!numberSequenceTable)
                {
                    this.throwError(strfmt("@SYS53911", numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
                }

                numberSeq   = PurchReqPreEncumber::allocateVoucher();
                voucher     = numberSeq.voucher();
                // Cache value for subsequent use
                if (purchReqTable.recid)
                {
                    SysTransactionScopeCache::set(classStr(PurchReqSourceDocument), [purchReqTable.recid], voucher);
                }
            }
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return purchReqTable.PurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentEditable()
    {
        boolean ret;

        ret = super();
        ret = ret && purchReqTable.checkUpdate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        TransactionTxt transactionTxt;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setDate(this.parmAccountingDate());
        transactionTxt.setFormLetter("@SYS114136");
        transactionTxt.setVoucher(this.parmCurrentVoucher(curext()));
        transactionTxt.setType(LedgerTransTxt::PurchaseRequisition);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwError</Name>
				<Source><![CDATA[
    private void throwError(str _message)
    {
        PurchReqLine                purchReqLine;

        UserConnection              connection;
        PurchReqLineProcessingError purchReqLineProcessingError;

        connection = new UserConnection();
        try
        {
            connection.ttsbegin();

            purchReqLineProcessingError.setConnection(connection);

            while select RecId from purchReqLine
            where purchReqLine.PurchReqTable == purchReqTable.recId
            {
                purchReqLineProcessingError.PurchReqLine = purchReqLine.RecId;
                purchReqLineProcessingError.Type         = purchReqLineProcessingErrorType::PreEncumbranceError;
                purchReqLineProcessingError.Description  = _message;
                purchReqLineProcessingError.insert();
            }
            connection.ttscommit();
        }
        finally
        {
            connection.finalize();
        }

        throw error(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>LegalEntity</c>s for the document.
    /// </summary>
    /// <returns>A <c>List</c> containing the RecIds of the <c>LegalEntity</c>s.</returns>
    protected List getLegalEntities()
    {
        var legalEntityList = new List(Types::Int64);
        PurchReqLine purchReqLine;

        while select BuyingLegalEntity from purchReqLine
            group by BuyingLegalEntity
            where purchReqLine.PurchReqTable == purchReqTable.RecId
        {
            legalEntityList.addEnd(purchReqLine.BuyingLegalEntity);
        }

        return legalEntityList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>