<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalReportJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymProposalReportJournal extends PaymProposalReport
{
    protected LedgerJournalTrans ledgerJournalTrans;
    protected QueryBuildDataSource qbdsLedgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for the report.
    /// </summary>
    protected void initQuery()
    {
        query = new Query();
        qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, JournalNum)).value(journalId);

        if (rangeCustVendACStart || rangeCustVendACEnd)
        {
            qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, AccountType)).value(
                queryValue(LedgerJournalACType::Cust));
            qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, AccountType)).value(
                queryValue(LedgerJournalACType::Vend));

            this.addJoinToDAVCAndQueryRange(
                qbdsLedgerJournalTrans,
                fieldNum(LedgerJournalTrans, LedgerDimension),
                rangeCustVendACStart,
                rangeCustVendACEnd);
        }

        if (rangeCompanyBankAccountIdStart || rangeCompanyBankAccountIdEnd)
        {
            qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, OffsetAccountType)).value(
                queryValue(LedgerJournalACType::Bank));

            this.addJoinToDAVCAndQueryRange(
                qbdsLedgerJournalTrans,
                fieldNum(LedgerJournalTrans, OffsetLedgerDimension),
                rangeCompanyBankAccountIdStart,
                rangeCompanyBankAccountIdEnd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for the report, and inserts the data into the temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">An instance of the report temp table.</param>
    public void createTmpTable(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        CustVendTransOpen custVendTransOpen;
        CustVendTrans custVendTrans;
        CustVendTransStatic custVendTransStatic;
        ModuleCustVend accountType;
        boolean mayHaveInvoiceLines;

        CustVendTransOpenData custVendTransOpenData;
        CustVendTable custVendTable;

        ledgerJournalTrans.recordLevelSecurity(true);
        custVendTrans.recordLevelSecurity(true);
        custVendTransOpen.recordLevelSecurity(true);

        this.initQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                accountType = ModuleCustVend::Cust;
                mayHaveInvoiceLines = true;
            }
            else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                accountType = ModuleCustVend::Vend;
                mayHaveInvoiceLines = true;
            }
            else
            {
                mayHaveInvoiceLines = false;
            }

            if (printPaymLines)
            {
                this.journalInsertPayment(_custVendPaymProposalTmp);
            }

            if (printInvoiceLines && mayHaveInvoiceLines)
            {
                custVendTransStatic = CustVendTransStatic::newModuleCustVend(accountType);
                custVendTransOpen = custVendTransStatic.custVendTransOpen();
                custVendTrans = custVendTransStatic.custVendTrans();
                this.journalInsertInvoice(_custVendPaymProposalTmp, accountType, custVendTable, custVendTrans, custVendTransOpen, custVendTransOpenData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalInsertInvoice</Name>
				<Source><![CDATA[
    private void journalInsertInvoice(
        CustVendPaymProposalTmp _custVendPaymProposalTmp,
        ModuleCustVend _accountType,
        CustVendTable _custVendTable,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        CustVendTransOpenData _custVendTransOpenData)
    {
        SpecTrans specTrans;
        AmountCur invoiceAmountPaymCur;
        AmountMST invoiceAmountMST;
        AmountCur possibleCashDisc;
        AmountCur cashDiscToTake;
        DiscGraceDays discGraceDays;
        CustVendTransOpenData custVendTransOpenData;
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode);

        while select crosscompany SpecCompany, RefCompany, Balance01 from specTrans
            where specTrans.SpecTableId == ledgerJournalTrans.TableId
               && specTrans.SpecRecId == ledgerJournalTrans.RecId
               && specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
            join _custVendTransOpen
                where _custVendTransOpen.RecId == specTrans.RefRecId
                    && _custVendTransOpen.TableId == specTrans.RefTableId
                    && _custVendTransOpen.DataAreaId == specTrans.RefCompany
        {
            this.checkForCrossCompanySettlement(specTrans.SpecCompany, specTrans.RefCompany);
            this.checkForIntercompanyAccount(_custVendTransOpen.company());

            changecompany (_custVendTransOpen.company())
            {                            
                _custVendTransOpenData = CustVendTransOpenData::construct(_custVendTransOpen);
                _custVendTable = _custVendTransOpenData.transData().custVendTable();
                _custVendTrans = _custVendTransOpenData.custVendTrans();

                invoiceAmountPaymCur = CurrencyExchangeHelper::curAmount2CurAmount(specTrans.Balance01, _custVendTrans.CurrencyCode, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
                invoiceAmountMST = CurrencyExchangeHelper::amountCur2MST(invoiceAmountPaymCur, ledgerJournalTrans.CurrencyCode, exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate()));

                _custVendPaymProposalTmp.initFromCustVendTrans(_custVendTrans);
                _custVendPaymProposalTmp.initFromCustVendTransOpen(_custVendTransOpen);

                _custVendPaymProposalTmp.AmountCur = specTrans.Balance01;
                _custVendPaymProposalTmp.AmountMST = invoiceAmountMST;
                _custVendPaymProposalTmp.Company = _custVendTransOpen.company();

                custVendTransOpenData = CustVendTransOpenData::construct(_custVendTransOpen);
                discGraceDays = CustVendPaymModeTable::findModule(_accountType, _custVendTrans.PaymMode).DiscGraceDays;

                possibleCashDisc = CustVendTransCashDisc::findByUseCashDisc(
                    _accountType,
                    _custVendTransOpen.TableId,
                    _custVendTransOpen.RecId,
                    _custVendTransOpen.UseCashDisc,
                    ledgerJournalTrans.TransDate,
                    discGraceDays).CashDiscAmount;

                cashDiscToTake = _custVendTransOpen.getCashDiscAmountToTake(possibleCashDisc);

                _custVendPaymProposalTmp.DiscAmountMST = CurrencyExchangeHelper::mstAmount(cashDiscToTake, _custVendTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            }

            this.insertInvoice(_custVendPaymProposalTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalInsertPayment</Name>
				<Source><![CDATA[
    protected boolean journalInsertPayment(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        _custVendPaymProposalTmp.initFromLedgerJournalTrans(ledgerJournalTrans);
        this.checkForIntercompanyAccount(ledgerJournalTrans.Company);
        this.insertPayment(_custVendPaymProposalTmp);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>