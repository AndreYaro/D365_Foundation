<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAGenerateQuotationLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaGenerateQuotationLines
{
    SalesQuotationLine      salesQuotationLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDeleteQuotationLines</Name>
				<Source><![CDATA[
    public void checkDeleteQuotationLines(SalesQuotationTable _salesQuotationTable)
    {
        while select forupdate salesQuotationLine
            where salesQuotationLine.QuotationId == _salesQuotationTable.QuotationId
                && salesQuotationLine.psaRefRecId
        {
            salesQuotationLine.delete(null, true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetActivityEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the base query to select all <c>PSAActivityEstimates</c> records for the specific sales quotation.
    /// </summary>
    /// <param name = "_salesQuotationTable">
    /// A record of the <c>SalesQuotationTable</c> table.
    /// </param>
    /// <returns>
    /// Returns query instance to select all <c>PSAActivityEstimates</c> records for the specific sales quotation.
    /// </returns>
    protected Query buildQueryToGetActivityEstimates(SalesQuotationTable _salesQuotationTable)
    {
        Query query = new Query();

        QueryBuildDataSource psaActivityEstimatesQbds = query.addDataSource(tableNum(PSAActivityEstimates));
        QueryBuildDataSource smmActivitiesQbds = psaActivityEstimatesQbds.addDataSource(tableNum(smmActivities));
        smmActivitiesQbds.joinMode(JoinMode::InnerJoin);
        smmActivitiesQbds.addLink(fieldNum(PSAActivityEstimates, ActivityNumber),fieldNum(smmActivities, ActivityNumber));
        smmActivitiesQbds.addSelectionField(fieldNum(smmActivities, ActivityNumber));
        smmActivitiesQbds.addSelectionField(fieldNum(smmActivities, RecId));

        QueryBuildDataSource hierarchyTreeTableQbds = smmActivitiesQbds.addDataSource(tableNum(HierarchyTreeTable));
        hierarchyTreeTableQbds.joinMode(JoinMode::InnerJoin);
        hierarchyTreeTableQbds.addLink(fieldNum(smmActivities, RecId),fieldNum(HierarchyTreeTable, RefRecId));
        hierarchyTreeTableQbds.addSelectionField(fieldNum(HierarchyTreeTable, HierarchyId));
        hierarchyTreeTableQbds.addSelectionField(fieldNum(HierarchyTreeTable, ElementNumber));

        QueryBuildDataSource hierarchyLinkTableQbds = hierarchyTreeTableQbds.addDataSource(tableNum(HierarchyLinkTable));
        hierarchyLinkTableQbds.joinMode(JoinMode::InnerJoin);
        hierarchyLinkTableQbds.addLink(fieldNum(HierarchyTreeTable, HierarchyId),fieldNum(HierarchyLinkTable, HierarchyId));
        hierarchyLinkTableQbds.addSelectionField(fieldNum(HierarchyLinkTable, HierarchyId));
        hierarchyLinkTableQbds.addSelectionField(fieldNum(HierarchyLinkTable, RefTableId));
        hierarchyLinkTableQbds.addSelectionField(fieldNum(HierarchyLinkTable, RefRecId));

        hierarchyLinkTableQbds.addRange(fieldNum(HierarchyLinkTable,RefTableId)).value(SysQuery::value(_salesQuotationTable.TableId));
        hierarchyLinkTableQbds.addRange(fieldNum(HierarchyLinkTable,RefRecId)).value(SysQuery::value(_salesQuotationTable.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating sales quotation lines from activity estimates for the specific sales quotation..
    /// </summary>
    /// <param name = "_salesQuotationTable">
    /// A record of the <c>SalesQuotationTable</c> table.
    /// </param>
    public void createSalesQuotationLines(SalesQuotationTable _salesQuotationTable)
    {
        PSAActivityEstimates                    psaActivityEstimates;
        SalesQuotationLineForeignTradeCategory  salesQuotationLineForeignTradeCategory;

        QueryRun queryRun = new QueryRun(this.buildQueryToGetActivityEstimates(_salesQuotationTable));
        while(queryRun.next())
        {
            psaActivityEstimates = queryRun.get(tableNum(PSAActivityEstimates));

            if (!psaActivityEstimates.checkInventDim())
            {
                throw error("@SYS319221");
            }

            this.copyFromPSAActivityEstimates(_salesQuotationTable, psaActivityEstimates);

            if (salesQuotationLine.validateWrite())
            {
                salesQuotationLine.insert();
            }

            if (salesQuotationLine.RecId && salesQuotationLine.isCategoryBased())
            {
                salesQuotationLineForeignTradeCategory.initFromSalesQuotationLine(salesQuotationLine);
                if (salesQuotationLineForeignTradeCategory.validateWrite())
                {
                    salesQuotationLineForeignTradeCategory.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromPSAActivityEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales quotation line with data from a work breakdown structure task (activity) estimate.
    /// </summary>
    /// <param name = "_salesQuotationTable">The sales quotation containing this sales quotation line.</param>
    /// <param name = "_psaActivityEstimates">The <c>PSAActivityEstimates</c> record to copy.</param>
    protected void copyFromPSAActivityEstimates(SalesQuotationTable _salesQuotationTable, PSAActivityEstimates _psaActivityEstimates)
    {
        salesQuotationLine.clear();

        salesQuotationLine.QuotationType    = QuotationType::Project;
        salesQuotationLine.initValue();
        salesQuotationLine.initFromSalesQuotationTable(_salesQuotationTable);
        salesQuotationLine.LineNum          = SalesQuotationLine::lastLineNum(_salesQuotationTable.QuotationId) + 1;

        salesQuotationLine.ProjActivity     = _psaActivityEstimates.ActivityNumber;
        salesQuotationLine.ProjTransType    = _psaActivityEstimates.ProjTransType;

        if (_psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour ||
                _psaActivityEstimates.ProjTransType == QuotationProjTransType::Expense)
        {
            salesQuotationLine.ProjectResource    = _psaActivityEstimates.Resource;
            salesQuotationLine.initFromResource();
        }

        salesQuotationLine.SalesQty         = _psaActivityEstimates.Quantity;
        salesQuotationLine.ProjCategoryId   = _psaActivityEstimates.ProjCategoryId;
        salesQuotationLine.SalesCategory    = _psaActivityEstimates.SalesCategory;

        InventTable inventTable;
        if (_psaActivityEstimates.ProjTransType == QuotationProjTransType::Item &&
                _psaActivityEstimates.ItemId != '')
        {
            salesQuotationLine.ItemId       = _psaActivityEstimates.ItemId;
            salesQuotationLine.InventDimId  = _psaActivityEstimates.InventDimId;

            inventTable = InventTable::find(_psaActivityEstimates.ItemId);
            salesQuotationLine.SalesUnit    = inventTable.salesUnitId();

            SalesQuotationLine.initName(inventTable, salesQuotationLine.SalesCategory);
            salesQuotationLine.DeliveryDateControlType = InventItemSalesSetup::find(salesQuotationLine.ItemId, salesQuotationLine.InventDimId).DeliveryDateControlType;

            SalesQuotationLineType salesQuotationLineType = SalesQuotationLineType::construct(salesQuotationLine);
            salesQuotationLineType.setStockedProduct();
            if (salesQuotationLine.StockedProduct)
            {
                salesQuotationLine.QtyOrdered = _psaActivityEstimates.Quantity;
                salesQuotationLine.RemainInventPhysical = _psaActivityEstimates.Quantity;
                salesQuotationLine.RemainSalesPhysical = _psaActivityEstimates.Quantity;
            }

            salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());
            salesQuotationLine.TaxItemGroup = ProjParameters::taxItemGroupItem(_psaActivityEstimates.ProjCategoryId, _psaActivityEstimates.ItemId);
        }
        else if (salesQuotationLine.SalesCategory)
        {
            SalesCategoryItemTaxGroup salesCategoryItemTaxGroup;
            select firstonly TaxItemGroup from salesCategoryItemTaxGroup
                where salesCategoryItemTaxGroup.SalesCategory == _psaActivityEstimates.SalesCategory
                    && salesCategoryItemTaxGroup.TaxItemGroupDataAreaId == _psaActivityEstimates.DataAreaId;
            salesQuotationLine.TaxItemGroup     = salesCategoryItemTaxGroup.TaxItemGroup;
            SalesQuotationLine.initName(inventTable, salesQuotationLine.SalesCategory);
        }

        if (!_psaActivityEstimates.ItemId &&
                !_psaActivityEstimates.SalesCategory &&
                !salesQuotationLine.TaxItemGroup)
        {
            salesQuotationLine.initFromProjCategoryId();
        }

        salesQuotationLine.SalesPrice       = _psaActivityEstimates.UnitSalesPrice;
        salesQuotationLine.LineAmount       = _psaActivityEstimates.TotalSalesPrice;
        salesQuotationLine.CostPrice        = _psaActivityEstimates.UnitCostPrice;
        salesQuotationLine.psaRefRecId      = _psaActivityEstimates.RecId;
        salesQuotationLine.LinePropertyId   = _psaActivityEstimates.LinePropertyId;
        salesQuotationLine.ProjDescription  = _psaActivityEstimates.Description;

        PSAActivitySetup    psaActivitySetup = PSAActivitySetup::findActivityNumber(_psaActivityEstimates.ActivityNumber);
        TransDate           projectDate;

        if (psaActivitySetup.psaSchedEnd)
        {
            projectDate = psaActivitySetup.psaSchedEnd;
        }
        else if (psaActivitySetup.psaSchedStart)
        {
            projectDate = psaActivitySetup.psaSchedStart;
        }
        else if (_salesQuotationTable.psaEstProjEndDate)
        {
            projectDate = _salesQuotationTable.psaEstProjEndDate;
        }
        else if (_salesQuotationTable.psaEstProjStartDate)
        {
            projectDate = _salesQuotationTable.psaEstProjStartDate;
        }
        else
        {
            projectDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        salesQuotationLine.TransDate = projectDate;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            salesQuotationLine.updateAndPackAccessableValue_IN(salesQuotationLine.orig(), salesQuotationLine.salesQuotationLineTaxExtensionIN().orig());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PSAGenerateQuotationLines       generateQuotationLines;
        Common                          record;
        FormDataSource                  recordDataSource;

        generateQuotationLines = new PSAGenerateQuotationLines();

        if (_args.dataset() == tableNum(SalesQuotationTable))
        {
            record              = _args.record();
            recordDataSource    = FormDataUtil::getFormDataSource(record);

            ttsbegin;

            generateQuotationLines.checkDeleteQuotationLines(record);

            generateQuotationLines.createSalesQuotationLines(record);

            ttscommit;

            // Use the existing query and position to current record.
            recordDataSource.research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>