<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBlockWorkForSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSBlockWorkForSplit</c> class handles the blocking of a work to be split.
/// </summary>
internal final class WHSBlockWorkForSplit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tryBlockWorkBeingSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to block the passed work for for splitting.
    /// </summary>
    /// <param name = "_workId">The id of the work that should be blocked</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work is being split already by another user.
    /// </exception>
    [Hookable(false)]
    internal static void tryBlockWorkBeingSplit(WHSWorkId _workId)
    {
        try
        {
            ttsbegin;

            WHSActiveWorkSplit activeWorkSplit = WHSActiveWorkSplit::find(_workId);

            if (activeWorkSplit)
            {
                WHSBlockWorkForSplit::validateWorkIsNotBeingSplitByAnotherUser(activeWorkSplit);
            }
            else
            {
                WHSBlockWorkForSplit::tryBlockWorkForSplitWorkBlockingReason(_workId);
            }
           
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            // Deletes the DuplicateKeyException log so it will not be displayed on the UI.
            infolog.clear(Global::infologLine() - 1);
            throw error("@WAX:WorkBeingSplitByAnotherUser");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkIsNotBeingSplitByAnotherUser</Name>
				<Source><![CDATA[
    private static void validateWorkIsNotBeingSplitByAnotherUser(WHSActiveWorkSplit _activeWorkSplit)
    {
        if (_activeWorkSplit.RecId != 0)
        {
            if (!WHSBlockWorkForSplit::isWorkBeingSplitByCurrentUser(_activeWorkSplit))
            {
                throw error("@WAX:WorkBeingSplitByAnotherUser");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkForSplitWorkBlockingReason</Name>
				<Source><![CDATA[
    private static void tryBlockWorkForSplitWorkBlockingReason(WHSWorkId _workId)
    {
        // If two users concurrently try to block the work that it is being split,
        // the creation of a WHSSplitWorkBlock record will fail for one of the users
        // with a DuplicateKeyException.
        WHSActiveWorkSplit::create(_workId);

        WHSWorkBlockingValidationResult blockingResult = WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(_workId)
                .tryBlockWorkWithReasonType(WHSWorkBlockingReasonType::SplitWork);

        if (!blockingResult.parmCanBlockResult())
        {
            throw error(blockingResult.errorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkBeingSplitByCurrentUser</Name>
				<Source><![CDATA[
    private static boolean isWorkBeingSplitByCurrentUser(WHSActiveWorkSplit _activeWorkSplit)
    {
        str currentUser = curUserId();

        return _activeWorkSplit.isWorkSplitByUser(currentUser);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>