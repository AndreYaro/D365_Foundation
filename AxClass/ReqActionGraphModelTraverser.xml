<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionGraphModelTraverser</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Knows how to traverse action graph model and generates action graph data contract out of it (used by action graph control on client side to draw a graph).
/// </summary>
class ReqActionGraphModelTraverser
{
    private const int maxLevelsToDisplay = 3;

    private ReqActionGraphModel reqActionGraphModel;
    private boolean             showOnlyActionable;
    private boolean             showOnlyRelated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFilteredActionGraphModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs filtered action graph model based on provided currently selected requirement transaction record.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// Selected requirement transaction record.
    /// </param>
    /// <returns>The created action graph model.</returns>
    public ReqActionGraphModel constructFilteredActionGraphModel(RefRecId _reqTransRecId)
    {
        ReqActionGraphModel actionGraphModelFiltered = ReqActionGraphModel::construct();

        this.addNodeToFilteredModel(actionGraphModelFiltered, reqActionGraphModel.getNode(_reqTransRecId));

        return actionGraphModelFiltered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructActionGraphDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates action graph data contract based on action graph model.
    /// </summary>
    /// <returns>The created action graph data contract.</returns>
    public ReqActionGraphDataContract constructActionGraphDataContract()
    {
        ReqActionGraphDataContract actionGraphData = new ReqActionGraphDataContract();

        Map processedNodes = new Map(Types::Int64, Types::Class);
        Map aggregatedRelations = new Map(Types::Int64, Types::Class);

        var nodesEnumerator = reqActionGraphModel.getNodes();
        while (nodesEnumerator.moveNext())
        {
            ReqActionGraphNode node = nodesEnumerator.currentValue();

            if (this.canShowNode(node))
            {
                this.processNode(node, node, processedNodes, aggregatedRelations, actionGraphData);
            }
        }

        this.processAggregatedRelations(aggregatedRelations, actionGraphData);

        return actionGraphData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromModel</Name>
				<Source><![CDATA[
    public static ReqActionGraphModelTraverser constructFromModel(ReqActionGraphModel _actionGraphModel, boolean _showOnlyActionable, boolean _showOnlyRelated)
    {
        ReqActionGraphModelTraverser traverser = new ReqActionGraphModelTraverser();

        traverser.reqActionGraphModel   = _actionGraphModel;
        traverser.showOnlyActionable    = _showOnlyActionable;
        traverser.showOnlyRelated       = _showOnlyRelated;

        return traverser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeToFilteredModel</Name>
				<Source><![CDATA[
    private void addNodeToFilteredModel(ReqActionGraphModel _actionGraphModelFiltered, ReqActionGraphNode _actionGraphNode, int _level = 0, boolean _allowParentRelations = true, boolean _allowChildRelations = true)
    {
        ReqTrans    reqTransRelated;
        ReqTransCov reqTransCov;
        ReqTrans    reqTransDerived;
        ReqTrans    reqTransParent;

        if (_actionGraphModelFiltered.reqTransExists(_actionGraphNode.getReqTrans()))
        {
            return;
        }

        // Add the node
        _actionGraphModelFiltered.addNode(_actionGraphNode);

        if (showOnlyRelated && abs(_level) == maxLevelsToDisplay)
        {
            return;
        }

        // Add derived transactions
        if (!showOnlyRelated || _allowChildRelations)
        {
            var childRelationsEnumerator = _actionGraphNode.getChildRelations();
            while (childRelationsEnumerator.moveNext())
            {
                ReqActionGraphRelation relation = childRelationsEnumerator.currentValue();

                this.addNodeToFilteredModel(_actionGraphModelFiltered, relation.getToActionGraphNode(), _level + 1, false, true);
                _actionGraphModelFiltered.addRelation(_actionGraphNode.getReqTrans(), relation.getToActionGraphNode().getReqTrans(), relation.getRelationType(), relation.getReqTransCovQty());
            }
        }

        // Add parent transactions
        if (!showOnlyRelated || _allowParentRelations)
        {
            if (_actionGraphNode.getReqTrans().RefType != _actionGraphNode.getReqTrans().parentReqRefType())
            {
                var parentRelationsEnumerator = _actionGraphNode.getParentRelations();
                while (parentRelationsEnumerator.moveNext())
                {
                    ReqActionGraphRelation relation = parentRelationsEnumerator.currentValue();

                    this.addNodeToFilteredModel(_actionGraphModelFiltered, relation.getFromActionGraphNode(), _level - 1, true, false);
                    _actionGraphModelFiltered.addRelation(relation.getFromActionGraphNode().getReqTrans(), _actionGraphNode.getReqTrans(), relation.getRelationType(), relation.getReqTransCovQty());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowNode</Name>
				<Source><![CDATA[
    private boolean canShowNode(ReqActionGraphNode _actionGraphNode)
    {
        return !showOnlyActionable || _actionGraphNode.isActionable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(
        ReqActionGraphNode _node,
        ReqActionGraphNode _parentNode,
        Map _processedNodes,
        Map _aggregatedRelations,
        ReqActionGraphDataContract _actionGraphData)
    {
        if (_processedNodes.exists(_node.getReqTrans().RecId))
        {
            return;
        }

        _processedNodes.insert(_node.getReqTrans().RecId, _node);

        if (this.canShowNode(_node))
        {
            _actionGraphData.parmNodes().addEnd(this.createActionGraphNodeContract(_node));
        }

        MapEnumerator childRelationsEnumerator = _node.getChildRelations();
        while (childRelationsEnumerator.moveNext())
        {
            ReqActionGraphRelation  relation    = childRelationsEnumerator.currentValue();
            ReqActionGraphNode      toNode      = relation.getToActionGraphNode();

            if (this.canShowNode(toNode))
            {
                this.registerRelation(_aggregatedRelations, _parentNode.getReqTrans(), relation);
                this.processNode(toNode, toNode, _processedNodes, _aggregatedRelations, _actionGraphData);
            }
            else
            {
                this.processNode(toNode, _parentNode, _processedNodes, _aggregatedRelations, _actionGraphData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRelation</Name>
				<Source><![CDATA[
    private void registerRelation(Map _aggregatedRelations, ReqTrans _fromReqTrans, ReqActionGraphRelation _relation)
    {
        Map aggregatedChildRelations;
        List childRelations;

        ReqTrans toReqTrans = _relation.getToActionGraphNode().getReqTrans();

        if (_aggregatedRelations.exists(_fromReqTrans.RecId))
        {
            aggregatedChildRelations = _aggregatedRelations.lookup(_fromReqTrans.RecId);

            if (aggregatedChildRelations.exists(toReqTrans.RecId))
            {
                childRelations = aggregatedChildRelations.lookup(toReqTrans.RecId);
            }
            else
            {
                childRelations = new List(Types::Class);
                aggregatedChildRelations.insert(toReqTrans.RecId, childRelations);
            }
        }
        else
        {
            childRelations = new List(Types::Class);

            aggregatedChildRelations = new Map(Types::Int64, Types::Class);
            aggregatedChildRelations.insert(toReqTrans.RecId, childRelations);

            _aggregatedRelations.insert(_fromReqTrans.RecId, aggregatedChildRelations);
        }

        childRelations.addEnd(_relation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAggregatedRelations</Name>
				<Source><![CDATA[
    private void processAggregatedRelations(Map _aggregatedRelations, ReqActionGraphDataContract _actionGraphData)
    {
        var aggregatedRelationsEnumerator = _aggregatedRelations.getEnumerator();
        while (aggregatedRelationsEnumerator.moveNext())
        {
            ReqTrans fromReqTrans = reqActionGraphModel.getReqTrans(aggregatedRelationsEnumerator.currentKey());

            Map aggregatedChildRelations = aggregatedRelationsEnumerator.currentValue();

            var aggregatedChildRelationsEnumerator = aggregatedChildRelations.getEnumerator();
            while (aggregatedChildRelationsEnumerator.moveNext())
            {
                ReqTrans toReqTrans = reqActionGraphModel.getReqTrans(aggregatedChildRelationsEnumerator.currentKey());

                List childRelations = aggregatedChildRelationsEnumerator.currentValue();

                ReqQtySettled combinedQty = 0;

                var childRelationsEnumerator = childRelations.getEnumerator();
                while (childRelationsEnumerator.moveNext())
                {
                    ReqActionGraphRelation relation = childRelationsEnumerator.current();

                    if (relation.getRelationType() == ReqGraphEdgeType::ParentChild)
                    {
                        combinedQty = 0;
                        break;
                    }

                    combinedQty -= relation.getReqTransCovQty();
                }

                _actionGraphData.parmEdges().addEnd(this.createActionGraphEdgeContract(fromReqTrans, toReqTrans, combinedQty));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActionGraphNodeContract</Name>
				<Source><![CDATA[
    private ReqActionGraphNodeContract createActionGraphNodeContract(ReqActionGraphNode _node)
    {
        var node = new ReqActionGraphNodeContract();

        ReqTrans reqTrans = _node.getReqTrans();

        node.parmId(any2Str(reqTrans.RecId));
        node.parmItemId(reqTrans.ItemId);
        node.parmItemName(reqTrans.itemName());
        node.parmRefType(enum2str(reqTrans.RefType));
        node.parmRefTypeTrunc(enum2Str(reqTrans.refType2RefTypeTrunc()));
        node.parmRefId(reqTrans.RefId);
        node.parmActionDays(reqTrans.ActionDays);
        node.parmIsActionable(_node.isActionable());
        node.parmIsActionApplied(_node.parmIsActionApplied());
        node.parmRequestedDate(date2strUsr(reqTrans.displayReqDateDlv()));
        node.parmRequirementDate(date2strUsr(reqTrans.ReqDate));
        node.parmRequirementTime(time2Str(reqTrans.ReqTime, TimeSeparator::Colon, TimeFormat::AMPM));
        node.parmToDate(date2strUsr(reqTrans.displayActionDate()));
        node.parmRequestedQty(reqTrans.OriginalQuantity);
        node.parmCoveragePlannedQty(reqTrans.CovQty);
        node.parmReqQty(reqTrans.Qty);
        node.parmWithQty(reqTrans.ActionQtyAdd);
        node.parmToQty(reqTrans.displayActionSum());
        node.parmUnit(reqTrans.unitOfMeasure());
        node.parmCovStatus(enum2str(reqTrans.OpenStatus));
        node.parmSuborder(reqTrans.IsDerivedDirectly);
        node.parmActionType(enum2Str(reqTrans.ActionType));
        node.parmInventDims(this.createInventDimsContract(reqTrans.inventDim()));
        node.parmIsPlanned(reqTrans.isPlannedOrder());
        node.parmActionTypeEnumValue(enum2int(reqTrans.ActionType));
        node.parmVersion(1);

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimsContract</Name>
				<Source><![CDATA[
    private ReqActionGraphInventDimContract createInventDimsContract(InventDim _inventDim)
    {
        var inventDims = new ReqActionGraphInventDimContract();

        inventDims.parmConfig(_inventDim.ConfigId);
        inventDims.parmSize(_inventDim.InventSizeId);
        inventDims.parmColor(_inventDim.InventColorId);
        inventDims.parmStyle(_inventDim.InventStyleId);
        inventDims.parmVersion(_inventDim.InventVersionId);
        inventDims.parmSite(_inventDim.InventSiteId);
        inventDims.parmWarehouse(_inventDim.InventLocationId);
        inventDims.parmLocation(_inventDim.WMSLocationId);
        inventDims.parmBatch(_inventDim.InventBatchId);
        inventDims.parmPallet(_inventDim.WMSPalletId);
        inventDims.parmSerial(_inventDim.inventSerialId);
        inventDims.parmLicensePlate(_inventDim.LicensePlateId);

        return inventDims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActionGraphEdgeContract</Name>
				<Source><![CDATA[
    private ReqActionGraphEdgeContract createActionGraphEdgeContract(ReqTrans _fromReqTrans, ReqTrans _toReqTrans, ReqQtySettled _qty)
    {
        var edge = new ReqActionGraphEdgeContract();

        edge.parmFromNode(any2Str(_fromReqTrans.RecId));
        edge.parmToNode(any2Str(_toReqTrans.RecId));
        edge.parmCovQty(_qty);

        return edge;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>