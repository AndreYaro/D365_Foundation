<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator</c> class is used
/// to create the attribute values for the attributes specified by the <c>ProductEntityAttributeTableFieldAssociation</c> table.
/// </summary>
public class EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator
{
    private InventDistinctProduct product;
    private EcoResProductDisplayProductNumber productNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator construct()
    {
        return new EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProduct</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a new <c>EcoResProductEntityAttributeValuesCreator</c> class based on the specified product.
    /// </summary>
    /// <param name = "_product">The distinct product to create the attribute values for.</param>
    /// <returns>A new instance of the <c>EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator</c> class.</returns>
    public static EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator newFromProduct(InventDistinctProduct _product, EcoResProductDisplayProductNumber _productNumber)
    {
        if (!_product)
        {
            throw error(Error::missingRecord(tableStr(InventDistinctProduct)));
        }

        EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator creator = EcoResProductEntityAttributeTableFieldAssociationAttributeValuesCreator::construct();

        creator.parmProduct(_product);
        
        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduct</Name>
				<Source><![CDATA[
    private InventDistinctProduct parmProduct(InventDistinctProduct _product = product)
    {
        product = _product;

        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductNumber</Name>
				<Source><![CDATA[
    private EcoResProductDisplayProductNumber parmProductNumber(EcoResProductDisplayProductNumber _productNumber = productNumber)
    {
        productNumber = _productNumber;

        return productNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateAttributeValues</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates or updates the attributes values. 
    /// </summary>
	public void createOrUpdateAttributeValues()
    {
        ttsbegin;

        EcoResProductInstanceValue productInstanceValue = EcoResProductInstanceValue::findByProduct(product.Product);
        productInstanceValue.Product = product.Product;

        EcoResProductEntityAttributeTableFieldAssociation attributeTableFieldAssociationRecord;
        EcoResAttribute attribute;
        EcoResAttributeType attributeType;
        EcoResProductEntityAttributeTableField attributeTableFieldRecord;

        while select attributeTableFieldAssociationRecord
            join attribute
                where attribute.RecId == attributeTableFieldAssociationRecord.Attribute
            join attributeType
                where attributeType.RecId == attribute.AttributeType
            join attributeTableFieldRecord
                where attributeTableFieldRecord.RecId == attributeTableFieldAssociationRecord.ProductEntityAttributeTableField
        {
            AttributeValueText textValue;

            switch (attributeTableFieldRecord.ApplicationTableId)
            {
                case tableNum(InventDim):
                    InventProductDimension productDim = InventDimension::singletonFromInventDimFieldId(attributeTableFieldRecord.ApplicationTableFieldId) as InventProductDimension;
                    if (productDim)
                    {
                        textValue = this.productDimension2Str(productDim, product);
                    }
                    break;
            }

			if (textValue && !productInstanceValue.RecId)
            {
                productInstanceValue.insert();
            }

            this.createOrUpdateAttributeTextValue(attribute, attributeType, productInstanceValue, textValue);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimension2Str</Name>
				<Source><![CDATA[
    private str productDimension2Str(InventProductDimension _productDim, InventDistinctProduct _product)
    {
        FieldId inventDistinctProductFieldId = InventDistinctProduct::productDimensionFieldId(_productDim);

        switch (_productDim.baseType())
        {
            case Types::String:
                return product.(inventDistinctProductFieldId);

            case Types::Real:
            case Types::UtcDateTime:
                return this.convertValueToLocalizedString(product.(inventDistinctProductFieldId));
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValueToLocalizedString</Name>
				<Source><![CDATA[
    private str convertValueToLocalizedString(anytype _value)
    {
        System.Globalization.CultureInfo culture = System.Globalization.CultureInfo::CreateSpecificCulture(this.systemLanguage());
        return System.Convert::ToString(_value, culture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemLanguage</Name>
				<Source><![CDATA[
    private LanguageId systemLanguage()
    {
        return SystemParameters::getSystemLanguageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateAttributeTextValue</Name>
				<Source><![CDATA[
    private void createOrUpdateAttributeTextValue(
									EcoResAttribute				_attribute,
									EcoResAttributeType			_attributeType,	
                                    EcoResProductInstanceValue	_productInstanceValue,
									AttributeValueText			_textValue)
    {
        if (_textValue)
        {
            EcoResAttributeValue attributeValue = EcoResAttributeValue::findByInstanceAttribute(_productInstanceValue.RecId, _attribute.RecId, true);
            EcoResTextValue textValue = EcoResTextValue::find(attributeValue.Value);

            if (textValue.TextValue != _textValue)
            {
                textValue.TextValue = _textValue;
                textValue.insert();

                EcoResEnumerationAttributeTypeValue enumerationAttributeTypeValue;

                enumerationAttributeTypeValue.AttributeType = _attributeType.RecId;
                enumerationAttributeTypeValue.setNextOrdinalNumber();
                enumerationAttributeTypeValue.Value = textValue.RecId;
                enumerationAttributeTypeValue.insert();

                if (attributeValue)
                {
                    attributeValue.Value = textValue.RecId;
                    attributeValue.update();
                }
				else
                {
                    attributeValue.Value = textValue.RecId;
                    attributeValue.InstanceValue = _productInstanceValue.RecId;
                    attributeValue.Attribute = _attribute.RecId;
                    attributeValue.insert();
                }
               
                EcoResTextValueTranslation ecoResTextValueTranslation;

                ecoResTextValueTranslation.TextValueTable = textValue.RecId;
                ecoResTextValueTranslation.Language = this.systemLanguage();
                ecoResTextValueTranslation.TextValue = textValue.TextValue;
                ecoResTextValueTranslation.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>