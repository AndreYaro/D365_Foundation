<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for budget control association data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationAssociationProvider))]
[DimensionStructureSynchronizationProviderCaption("@Budget:BudgetControlDimensionStructureSynchronizationProviderCaption")]
public class BudgetControlDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationAssociationProvider, DimensionStructureISynchronizationAssociationProviderV2
{
    private const str InstrumentationNamespace = classStr(BudgetControlDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(BudgetControlDimensionStructureSynchronizationProvider),
            staticMethodStr(BudgetControlDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(BudgetControlDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            BudgetControlConfiguration budgetControlConfiguration;

            // Note: This is a quick check without having to check every single transaction record for reference to the structure
            select firstonly RecId from budgetControlConfiguration
            where budgetControlConfiguration.PrimaryLedger == _ledger.RecId
                && budgetControlConfiguration.DimensionHierarchyAccountStructure == _dimensionHierarchy.RecId;

            if (budgetControlConfiguration.RecId)
            {
                // The account structure is referenced by a budget control configuration.
                checkFailed(strfmt("@SYS329542", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest && BudgetControlConfiguration::isControlConfigured())
        {
            this.updateBudgetSourceTrackingDetail(synchronizationRequest);
            this.updateBudgetCheckResultErrWarningDetail(synchronizationRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
        
        if (BudgetControlConfiguration::isControlConfigured())
        {
            try
            {
                ttsbegin;

                this.updateBudgetSourceTrackingDetailV2(batchJobId, _synchronizationRequest.parmProviderStatusTrackingId());
                this.updateBudgetCheckResultErrWarningDetailV2(batchJobId, _synchronizationRequest.parmProviderStatusTrackingId());

                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() > MaxRetryCount)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetSourceTrackingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all pertinent <c>BudgetSourceTrackingDetail</c> records with updated ledger dimensions.
    /// </summary>
    /// <param name="_synchronizationRequest">
    /// The ledger dimension structure synchronization request.
    /// </param>
    private void updateBudgetSourceTrackingDetail(DimensionStructureSynchronizationRequest _synchronizationRequest)
    {
        DimensionSynchronize        dimSynchronize;
        DimensionSynchronizeLedger  dimSynchronizeLedger;

        dimSynchronize.linkPhysicalTableInstance(_synchronizationRequest.getDimensionSynchronize());
        dimSynchronizeLedger.linkPhysicalTableInstance(_synchronizationRequest.getDimensionSynchronizeLedger());

        BudgetTransactionLine       budgetTransactionLine;
        BudgetTransactionHeader     budgetTransactionHeader;
        BudgetSource                budgetSource;
        BudgetSourceTracking        budgetSourceTracking;
        BudgetSourceTrackingDetail  budgetSourceTrackingDetail;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTable          ledgerJournalTable;
        CompanyInfo                 companyInfo;
        DataArea                    company;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetControlDimensionStructureSynchronizationProvider, updateBudgetSourceTrackingDetail));

        budgetSourceTrackingDetail.skipDataMethods(true);
        budgetSourceTrackingDetail.skipDeleteActions(true);

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
        unchecked(Uncheck::XDS)
        {
            // Update BudgetSourceLedgerDimension on tracking details for draft BudgetTransactionLine update.
            // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)

            update_recordset budgetSourceTrackingDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
            join dimSynchronizeLedger
                where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
            join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
            join budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                    budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
            join budgetTransactionLine
                where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
            join budgetTransactionHeader
                where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                    budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
            join dimSynchronize
                where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

            activityContext.addCustomProperty('MethodName', 'updateBudgetSourceTrackingDetail');
            activityContext.addCustomProperty('WereRecordsUpdated_InBudgetSourceTrackingDetail', int2str(budgetSourceTrackingDetail.rowCount() > 0));

            // ****  Non-BudgetSourceType::BudgetTransactionLine records should always be updated  ****
            // All of the following code falls under these cases:

            // Update BudgetSourceLedgerDimension on tracking details for unposted journal update.
            // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)

            while select Id from company where company.IsVirtual == NoYes::No
            {
                if (BudgetControlConfiguration::existActiveForPrimaryLedger(Ledger::primaryLedger(CompanyInfo::current(company.Id))))
                {
                    changecompany(company.Id)
                    {
                        // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                        ledgerJournalTrans.clear();
                        ledgerJournalTable.clear();
                        companyInfo.skipPostLoad(true);

                        // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                        update_recordset budgetSourceTrackingDetail
                            setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                        join dimSynchronizeLedger
                            where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
                        join budgetSourceTracking
                            where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                                budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                        join budgetSource
                            where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                                budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                        join companyInfo
                            where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                companyInfo.DataArea == company.Id
                        join ledgerJournalTrans
                            where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                ledgerJournalTrans.Cancel == NoYes::No
                        join ledgerJournalTable
                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                ledgerJournalTable.Posted == NoYes::No &&
                                ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                        join dimSynchronize
                            where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                    dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

                            activityContext.addCustomProperty('WereCombinationRecordsUpdated', int2str(budgetSourceTrackingDetail.rowCount() > 0));
                        }
                    }
                }
            }

            // Update BudgetSourceLedgerDimension on tracking details for unposted accounting distributions update.
            // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)
            // Note: the restriction for reversing accounting distributions is handled via IsReturnOfBudgetFunds.
            // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

            update_recordset budgetSourceTrackingDetail
                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                    where budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No
            join dimSynchronizeLedger
                where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
            join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
            join budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                    budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
            join dimSynchronize
                where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

            activityContext.addCustomProperty('WereRecordsUpdated_InBudgetSourceTrackingDetail', int2str(budgetSourceTrackingDetail.rowCount() > 0));

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetSourceTrackingDetailV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all pertinent <c>BudgetSourceTrackingDetail</c> records with updated ledger dimensions.
    /// </summary>
    private void updateBudgetSourceTrackingDetailV2(RecId _batchJobId, RefRecId _correlationId)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;

        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CompanyInfo companyInfo;
        DataArea company;
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetControlDimensionStructureSynchronizationProvider, updateBudgetSourceTrackingDetailV2));

        budgetSourceTrackingDetail.skipDataMethods(true);
        budgetSourceTrackingDetail.skipDeleteActions(true);

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            unchecked(Uncheck::XDS)
            {
                // Update BudgetSourceLedgerDimension on tracking details for draft BudgetTransactionLine update.
                // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)

                update_recordset budgetSourceTrackingDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
                        && dimSynchronizeLedger.BatchJobId == _batchJobId
                join budgetSourceTracking
                    where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                        budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                join budgetSource
                    where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                        budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                        dimSynchronize.ProviderStatusTrackingId == _correlationId;

                activityContext.addCustomProperty('MethodName', 'updateBudgetSourceTrackingDetailV2');
                activityContext.addCustomProperty('WereRecordsUpdated_InBudgetSourceTrackingDetailV2', int2str(budgetSourceTrackingDetail.rowCount() > 0));

                // ****  Non-BudgetSourceType::BudgetTransactionLine records should always be updated  ****
                // All of the following code falls under these cases:

                // Update BudgetSourceLedgerDimension on tracking details for unposted journal update.
                // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)

                while select Id from company where company.IsVirtual == NoYes::No
                {
                    if (BudgetControlConfiguration::existActiveForPrimaryLedger(Ledger::primaryLedger(CompanyInfo::current(company.Id))))
                    {
                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            ledgerJournalTrans.clear();
                            ledgerJournalTable.clear();
                            companyInfo.skipPostLoad(true);

                            // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                            update_recordset budgetSourceTrackingDetail
                                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
                                    && dimSynchronizeLedger.BatchJobId == _batchJobId
                            join budgetSourceTracking
                                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                            join budgetSource
                                where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                                    budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                            join companyInfo
                                where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                    companyInfo.DataArea == company.Id
                            join ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                    ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

                            activityContext.addCustomProperty('WereCombinationRecordsUpdated', int2str(budgetSourceTrackingDetail.rowCount() > 0));
                        }
                    }
                }
            }

            // Update BudgetSourceLedgerDimension on tracking details for unposted accounting distributions update.
            // (BudgetControlLedgerDimension and Summary are not affected by source ledger dimension updates)
            // Note: the restriction for reversing accounting distributions is handled via IsReturnOfBudgetFunds.
            // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

            update_recordset budgetSourceTrackingDetail
                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                    where budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No
            join dimSynchronizeLedger
                where dimSynchronizeLedger.Ledger == budgetSourceTrackingDetail.PrimaryLedger
                    && dimSynchronizeLedger.BatchJobId == _batchJobId
            join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
            join budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                    budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
            join dimSynchronize
                where dimSynchronize.OriginalLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension &&
                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                    dimSynchronize.ProviderStatusTrackingId == _correlationId;

            activityContext.addCustomProperty('WereRecordsUpdated_InBudgetSourceTrackingDetail', int2str(budgetSourceTrackingDetail.rowCount() > 0));

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetCheckResultErrWarningDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all pertinent <c>BudgetCheckResultErrorWarningDetail</c> records with updated ledger dimensions.
    /// </summary>
    /// <param name="_synchronizationRequest">
    /// The ledger dimension structure synchronization request.
    /// </param>
    private void updateBudgetCheckResultErrWarningDetail(DimensionStructureSynchronizationRequest _synchronizationRequest)
    {
        DimensionSynchronize                dimSynchronize;
        DimensionSynchronizeLedger          dimSynchronizeLedger;

        dimSynchronize.linkPhysicalTableInstance(_synchronizationRequest.getDimensionSynchronize());
        dimSynchronizeLedger.linkPhysicalTableInstance(_synchronizationRequest.getDimensionSynchronizeLedger());

        BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;
        BudgetTransactionLine               budgetTransactionLine;
        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetSource                        budgetSource;
        BudgetSourceTracking                budgetSourceTracking;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTable                  ledgerJournalTable;
        CompanyInfo                         companyInfo;
        DataArea                            company;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetControlDimensionStructureSynchronizationProvider, updateBudgetCheckResultErrWarningDetail));

        budgetCheckResultErrorWarningDetail.skipDataMethods(true);
        budgetCheckResultErrorWarningDetail.skipDeleteActions(true);

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            unchecked(Uncheck::XDS)
            {
                // Update BudgetSourceLedgerDimension on error-warning details for draft BudgetTransactionLine update.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                        budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                        budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

                activityContext.addCustomProperty('MethodName', 'updateBudgetCheckResultErrWarningDetail');
                activityContext.addCustomProperty('WereRecordsUpdated_InBudgetTransactionHeaderWithBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // Update BudgetSourceLedgerDimension on error-warning details for failed BudgetTransactionLine budget check (no BudgetSourceTracking exists).
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                        budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget)
                notexists join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                activityContext.addCustomProperty('WereRecordsUpdated_InBudgetTransactionHeaderMissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // ****  Non-BudgetSourceType::BudgetTransactionLine records should always be updated  ****
                // All of the following code falls under these cases:

                // Update BudgetSourceLedgerDimension on error-warning details for unposted journals update.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                while select Id from company where company.IsVirtual == NoYes::No
                {
                    if (BudgetControlConfiguration::existActiveForPrimaryLedger(Ledger::primaryLedger(CompanyInfo::current(company.Id))))
                    {
                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            ledgerJournalTrans.clear();
                            ledgerJournalTable.clear();
                            companyInfo.skipPostLoad(true);

                            // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                            // for draft BudgetSourceType::LedgerJournalEntry updates.
                            update_recordset budgetCheckResultErrorWarningDetail
                                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                            join budgetSource
                                where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                                    budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                            join budgetSourceTracking
                                where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                            join companyInfo
                                where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                    companyInfo.DataArea == company.Id
                            join ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                    ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

                            activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTransWithBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                            // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                            // for failed BudgetSourceType::LedgerJournalEntry budget check (no BudgetSourceTracking exists)
                            update_recordset budgetCheckResultErrorWarningDetail
                                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                            join budgetSource
                                where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                                    budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                            join companyInfo
                                where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                    companyInfo.DataArea == company.Id
                            join ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                    ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget)
                            notexists join budgetSourceTracking
                                where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                            activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTransMissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));
                        }
                    }           
                }


                // Update BudgetSourceLedgerDimension on error-warning details for unposted accounting distributions.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)
                // Note: Reversing accounting distributions are not checked because error-warning details will not be associated to them.
                // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                        budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget);

                activityContext.addCustomProperty('WereRecordsUpdated_WithBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // Update BudgetSourceLedgerDimension on error-warning details for unposted accounting distributions
                // for failed BudgetTransactionLine budget check (no BudgetSourceTracking exists).
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)
                // Note: Reversing accounting distributions are not checked because error-warning details will not be associated to them.
                // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget)
                notexists join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                activityContext.addCustomProperty('WereRecordsUpdated_MissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetCheckResultErrWarningDetailV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all pertinent <c>BudgetCheckResultErrorWarningDetail</c> records with updated ledger dimensions.
    /// </summary>
    private void updateBudgetCheckResultErrWarningDetailV2(RecId _batchJobId, RefRecId _correlationId)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;

        BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CompanyInfo companyInfo;
        DataArea company;
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetControlDimensionStructureSynchronizationProvider, updateBudgetCheckResultErrWarningDetailV2));

        budgetCheckResultErrorWarningDetail.skipDataMethods(true);
        budgetCheckResultErrorWarningDetail.skipDeleteActions(true);

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            unchecked(Uncheck::XDS)
            {
                // Update BudgetSourceLedgerDimension on error-warning details for draft BudgetTransactionLine update.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                        && dimSynchronizeLedger.BatchJobId == _batchJobId
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                        budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                        budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                        dimSynchronize.ProviderStatusTrackingId == _correlationId;

                activityContext.addCustomProperty('MethodName', 'updateBudgetCheckResultErrWarningDetailV2');
                activityContext.addCustomProperty('WereRecordsUpdated_InBudgetTransactionHeaderWithBudgetSourceTrackingV2', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // Update BudgetSourceLedgerDimension on error-warning details for failed BudgetTransactionLine budget check (no BudgetSourceTracking exists).
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                        && dimSynchronizeLedger.BatchJobId == _batchJobId
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine
                join budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                        budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                        dimSynchronize.ProviderStatusTrackingId == _correlationId
                notexists join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                activityContext.addCustomProperty('WereRecordsUpdated_InBudgetTransactionHeaderMissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // ****  Non-BudgetSourceType::BudgetTransactionLine records should always be updated  ****
                // All of the following code falls under these cases:

                // Update BudgetSourceLedgerDimension on error-warning details for unposted journals update.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)

                while select Id from company where company.IsVirtual == NoYes::No
                {
                    if (BudgetControlConfiguration::existActiveForPrimaryLedger(Ledger::primaryLedger(CompanyInfo::current(company.Id))))
                    {
                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            ledgerJournalTrans.clear();
                            ledgerJournalTable.clear();
                            companyInfo.skipPostLoad(true);

                            // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                            // for draft BudgetSourceType::LedgerJournalEntry updates.
                            update_recordset budgetCheckResultErrorWarningDetail
                                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger &&
                                    dimSynchronizeLedger.BatchJobId == _batchJobId
                            join budgetSource
                                where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                                    budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                            join budgetSourceTracking
                                where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                                    budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                            join companyInfo
                                where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                    companyInfo.DataArea == company.Id
                            join ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                    ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                                    dimSynchronize.ProviderStatusTrackingId == _correlationId;

                            activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTransWithBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                            // Updates combinations associated to either the LedgerDimension and OffsetLedgerDimension from the journal trans record
                            // for failed BudgetSourceType::LedgerJournalEntry budget check (no BudgetSourceTracking exists)
                            update_recordset budgetCheckResultErrorWarningDetail
                                setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger
                            join budgetSource
                                where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                                    budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                            join companyInfo
                                where companyInfo.RecId == budgetSource.LedgerEntryJournalLegalEntity &&
                                    companyInfo.DataArea == company.Id
                            join ledgerJournalTrans
                                where ledgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber &&
                                    ledgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget)
                            notexists join budgetSourceTracking
                                where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                            activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTransMissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));
                        }
                    }
                }


                // Update BudgetSourceLedgerDimension on error-warning details for unposted accounting distributions.
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)
                // Note: Reversing accounting distributions are not checked because error-warning details will not be associated to them.
                // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger &&
                        dimSynchronizeLedger.BatchJobId == _batchJobId
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId &&
                        budgetSourceTracking.Status == BudgetSourceTrackingStatus::Draft
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                        dimSynchronize.ProviderStatusTrackingId == _correlationId;

                activityContext.addCustomProperty('WereRecordsUpdated_WithBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));

                // Update BudgetSourceLedgerDimension on error-warning details for unposted accounting distributions
                // for failed BudgetTransactionLine budget check (no BudgetSourceTracking exists).
                // (BudgetControlLedgerDimension is not affected by source ledger dimension updates)
                // Note: Reversing accounting distributions are not checked because error-warning details will not be associated to them.
                // (The join to AccountingDistribution is omitted as it is not necessary, and also "impossible" because of markup records...")

                update_recordset budgetCheckResultErrorWarningDetail
                    setting BudgetSourceLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                join dimSynchronizeLedger
                    where dimSynchronizeLedger.Ledger == budgetCheckResultErrorWarningDetail.PrimaryLedger &&
                        dimSynchronizeLedger.BatchJobId == _batchJobId
                join budgetSource
                    where budgetSource.RecId == budgetCheckResultErrorWarningDetail.BudgetSource &&
                        budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                join dimSynchronize
                    where dimSynchronize.OriginalLedgerDimension == budgetCheckResultErrorWarningDetail.BudgetSourceLedgerDimension &&
                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                        (dimSynchronize.LedgerDimensionType == LedgerDimensionType::Account ||
                            dimSynchronize.LedgerDimensionType == LedgerDimensionType::Budget) &&
                        dimSynchronize.ProviderStatusTrackingId == _correlationId
                notexists join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId;

                activityContext.addCustomProperty('WereRecordsUpdated_MissingBudgetSourceTracking', int2str(budgetCheckResultErrorWarningDetail.rowCount() > 0));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>