<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOfflineDefaultProfileCreatorAX63</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
/// <summary>
/// The class <c>RetailOfflineDefaultProfileCreator</c> creates an offline profile for AX7.
/// </summary>
class RetailOfflineDefaultProfileCreatorAX63
{
    RetailConnSchedulerSubjobFieldList  subjobFieldList;

    RetailOfflineProfile                offlineProfile;
    RetailOfflineScope                  offlineScope;
    RetailOfflineProfileScopes          offlineProfile2Scope;
    RetailOfflineTable                  offlineTable, offlineTableExisting;
    RetailOfflineScopeTables            offlineScope2Table;
    RetailOfflineProfileName            cu8OfflineProfileName;

    #define.DefaultLocation("0001")
    #define.AJobPrefix("A-")
    #define.NJobPrefix("N-")
    #define.CJobPrefix("C-")
    #define.PJobPrefix("P-")
    #define.OfflineJobId("N-1095")
    #define.NJobType("3")
    #define.ReplicationCounter("ReplicationCounter")

    #define.AXSchema("AX")
    #define.DBOSchema("DBO")
    #define.CRTSchema("CRT")
    #define.OpeningSquareBracket("[")
    #define.ClosingSquareBracket("]")
    #define.DOT(".")

    #define.POSSeedValues("POSSeedValues")
    #define.SeedValues("Seed values")
    #define.SeedValues2("Seed values 2")

    #define.RetailSuspendedTransactions("RetailSuspendedTransactions")
    #define.SuspendedTransactions("Suspended Transactions")

    #define.RetailSerializedTransactions("RetailTransactionTableEx5")
    #define.SerializedTransactions("Serialized Transactions")

    #define.RetailPosBatchStagingTable("RetailShiftStagingTable")
    #define.PosBatchStaging("PosBatch Staging")

    // We want to make sure we don't sync records extremely frequently because Offline Sync machine doesn't have CPU power to process all scopes very frequently
    // So here we are spacing out scope to sync in mins instead of in seconds.
    #define.DefaultSyncFrequencyMasterData("00:18:00") // Sync frequency for all master except products and customers
    #define.DefaultSyncFrequencyProductsMasterData("00:14:00") // Sync Frequency only for "Products, prices, and bar codes" Scope
    #define.DefaultSyncFrequencyCustomersMasterData("00:11:00") // Sync Frequency only for "Customer, prices, and bar codes" Scope
    #define.DefaultSyncFrequencyTransactions("00:02:00") // Sync Frequency of POS Offline mode Transaction
    // Sync frequency for all Bidirectional sync scopes. Bidirectional sync should be frequent enough so that bidirectional sync tables in store DB
    // and offline DB are in sync before we do any transactions in the following 2 cases:
    // (1) POS switches from offline DB to online DB
    // (2) POS switches from online DB to offline DB
    #define.DefaultSyncFrequencyBidirectional("00:00:10")
    #define.DefaultSyncFrequencyOfflineScope("01:00:00")

    #define.DataAreaId("DataAreaId")
    #define.RetailTransactionLoyaltyPointTrans("RetailTransactionLoyaltyPointTrans")
    #define.CreatedDate("CREATEDDATE")

    // Define all Offline Scopes here.
    #define.Currency("Currency")
    #define.Customers("Customers")
    #define.Customers2("Customers 2")
    #define.Discount("Discount")
    #define.POSTransactions("POS transactions")
    #define.POSTransactions2("POS transactions 2")
    #define.PosBatchStaging("PosBatch Staging")
    #define.Productspricesandbarcodes("Products, prices, and bar codes")
    #define.ReasonCodeInformation("Reason code information")
    #define.Registers("Registers")
    #define.Registers2("Registers 2")
    #define.SeedValues("Seed values")
    #define.SerializedTransactions("Serialized Transactions")
    #define.Staff("Staff")
    #define.Storesandtenders("Stores and tenders")
    #define.Storesandtenders2("Stores and tenders 2")
    #define.SuspendedTransactions("Suspended Transactions")
    #define.Tax("Tax")
    #define.Tax2("Tax 2")
    #define.DeliveryMode("Modes of delivery")
    #define.Loyalty("Loyalty")
    #define.BrazilianAuditing("Brazilian auditing")
    #define.NFCeContingency_BR("NFC-e Contingency")
    #define.OfflineScope("Offline scope")
    #define.FiscalPrinters("Fiscal printers")
    #define.GTE("Generic tax engine")

    // Defines Table Names that are not in AX but will be in CRT DB or POS DB for Offline Sync.
    #define.SerializedTransactions_RETAILTRANSACTIONTABLEEX5("RETAILTRANSACTIONTABLEEX5")
    #define.SuspendedTransactions_SALESTRANSACTION("SALESTRANSACTION")
    #define.BrazilianAuditing_RETAILMANUALCHANGESLOG_BR("RETAILMANUALCHANGESLOG_BR")
    #define.POSTransactions_RETAILCARDPAYMENT_BR("RETAILCARDPAYMENT_BR")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an offline profile for AX7.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        ttsBegin;

        cu8OfflineProfileName = 'AX6 CU8';
        this.createOfflineProfile();

        ApplicationEventSource::EventWriteRetailOfflineDefaultProfileCreatorStart('POSProfiles', funcName(), 'Initiating offline profile created and all stores mapped to it.');
        this.createAllOfflineScopesAndTableLines();
        ApplicationEventSource::EventWriteRetailOfflineDefaultProfileCreatorStop('POSProfiles', funcName(), 'Offline profile has been added to offline profiles.');
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOfflineProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates CU8 offline profile.
    /// </summary>
    private void createOfflineProfile()
    {
        RetailOfflineDataExportSchedule offlineScopeTime;

        select firstOnly RecId from offlineProfile where offlineProfile.Name == cu8OfflineProfileName;
        if (!offlineProfile)
        {
            ApplicationEventSource::EventWriteRetailOfflineDefaultProfileCreatorStart('POSProfiles', funcName(), 'Creating offline profile');

            offlineProfile.clear();
            offlineScopeTime.clear();

            // Insert an offline-profile.
            offlineProfile.Name = cu8OfflineProfileName;
            offlineProfile.Description = '@Retail:DynamicsR3CU8';
            offlineProfile.insert();

            select firstonly OfflineProfile from offlineScopeTime
                where offlineScopeTime.OfflineProfile == offlineProfile.RecId;
            if(!offlineScopeTime)
            {
                //28800 is the number of seconds after midnight, required for the timeofday data type. Represents 8 am here.
                // create RetailOfflineDataExportSchedule
                offlineScopeTime.ExportTime = 28800;
                offlineScopeTime.OfflineProfile = offlineProfile.RecId;
                offlineScopeTime.insert();
            }
            ApplicationEventSource::EventWriteRetailOfflineDefaultProfileCreatorStop('POSProfiles', funcName(), 'Offline profile has been added to offline profiles.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllOfflineScopesAndTableLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create all scopes and it's tables.
    /// </summary>
    /// <remarks>
    /// Add each offline scope
    /// Add tables for each offline scope
    /// </remarks>
    private void createAllOfflineScopesAndTableLines()
    {
        int syncFrequencyMasterData = str2time(#DefaultSyncFrequencyMasterData);
        int syncFrequencyProductsMasterData = str2time(#DefaultSyncFrequencyProductsMasterData);
        int syncFrequencyCustomersMasterData = str2time(#DefaultSyncFrequencyCustomersMasterData);
        int syncFrequencyTransactions = str2time(#DefaultSyncFrequencyTransactions);
        int syncFrequencySeedData = str2time(#DefaultSyncFrequencyBidirectional);
        int syncFrequencySuspendedTrans = str2time(#DefaultSyncFrequencyBidirectional);
        int syncFrequencyBrazilianAuditing_BR = str2time(#DefaultSyncFrequencyBidirectional);
        int syncFrequencyretailEFDocContingencyMode = str2time(#defaultSyncFrequencyBidirectional);
        int syncFrequencyOfflineScope = str2time(#DefaultSyncFrequencyOfflineScope);
        int syncFrequencyFiscalPrinters = str2time(#defaultSyncFrequencyBidirectional);
        int syncGenericTaxEngine = str2time(#defaultSyncFrequencyBidirectional);

        // Adding "Currency" Offline Scope
        this.createScope(syncFrequencyMasterData, #Currency, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Currency, cu8OfflineProfileName);

        // Adding Tables for "Currency" Offline Scope
        this.addAXSchemaTableToScope(tableStr(CURRENCY), #Currency);
        this.addAXSchemaTableToScope(tableStr(EXCHANGERATECURRENCYPAIR), #Currency);
        this.addAXSchemaTableToScope(tableStr(EXCHANGERATE), #Currency);
        this.addAXSchemaTableToScope(tableStr(EXCHANGERATETYPE), #Currency);

        // Adding "Customers" Offline Scope
        this.createScope(syncFrequencyCustomersMasterData, #Customers, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Customers, cu8OfflineProfileName);

        // Adding Tables for "Customer" Offline Scope
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSSCITY), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSCOUNTY), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSCOUNTRYREGION), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSCOUNTRYREGIONTRANSLATION), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSPOSTALADDRESS), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSDISTRICT), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSELECTRONICADDRESS), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSLOCATION), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSLOCATIONROLE), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSLOCATIONEXT), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSSTATE), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSZIPCODE), #Customers);
        this.addAXSchemaTableToScope(tableStr(CUSTGROUP), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILCUSTTABLE), #Customers);
        this.addAXSchemaTableToScope(tableStr(CUSTTABLE), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRADDRESSBOOKPARTY), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRADDRESSBOOK), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRPARTYLOCATION), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRPARTYLOCATIONROLE), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRPARTYTABLE), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSFORMATLINES), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILSTOREADDRESSBOOK), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTSTAFF), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTSTORE), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTBUTTONGRIDZONE), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTIMAGEZONE), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTZONE), #Customers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTZONEREFERENCE), #Customers);
        this.addAXSchemaTableToScope(tableStr(DIRPERSONNAME), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSLOCATIONROLETRANSLATION), #Customers);
        this.addAXSchemaTableToScope(tableStr(LOGISTICSADDRESSFORMATHEADING), #Customers);

        // Adding "Customers2" Offline Scope
        this.createScope(syncFrequencyCustomersMasterData, #Customers2, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Customers2, cu8OfflineProfileName);

        // Adding Tables for "Customer2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(DOCUREF), #Customers2);
        this.addAXSchemaTableToScope(tableStr(DOCUVALUE), #Customers2);
        this.addAXSchemaTableToScope(tableStr(CUSTPARAMETERS), #Customers2);

        // Adding "Discount" Offline Scope
        this.createScope(syncFrequencyMasterData, #Discount, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Discount, cu8OfflineProfileName);

        // Adding Tables for "Discount" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTCODE), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTVALIDATIONPERIOD), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILMULTIBUYDISCOUNTLINE), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTLINEMULTIBUY), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILMIXANDMATCHLINEGROUPS), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILPERIODICDISCOUNT), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTMULTIBUY), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTLINEMIXANDMATCH), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTLINEOFFER), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTMIXANDMATCH), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTOFFER), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILPERIODICDISCOUNTLINE), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILGROUPMEMBERLINE), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTPRICEGROUP), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTTHRESHOLD), #Discount);
        this.addAXSchemaTableToScope(tableStr(RETAILDISCOUNTTHRESHOLDTIERS), #Discount);

        // Adding "POS transactions" Offline Scope
        this.createScope(syncFrequencyTransactions, #POSTransactions, RetailOfflineSyncDirectionBase::UploadOnly);
        this.mapScopeToProfile(#POSTransactions, cu8OfflineProfileName);

        // Adding Tables for "POS transactions" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILPOSBATCHACCOUNTTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILPOSBATCHTABLE), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILPOSBATCHTENDERTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTMODEL2_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTMODEL2LINE_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTMODEL2TAXTRANS_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALRECEIPT_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALRECEIPTLINE_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALRECEIPTTAXTRANS_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONPAYMENTTRANS_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONBANKEDTENDERTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTENDERDECLARATIONTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONDISCOUNTTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONINCOMEEXPENSETRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONINFOCODETRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONLOYALTYREWARDPOINTTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONORDERINVOICETRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONPAYMENTTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONSAFETENDERTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONSALESTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTABLE), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTAXTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTAXTRANSGTE), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILZREPORT_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILZREPORTTOTALIZER_BR), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONADDRESSTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONAFFILIATIONTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONATTRIBUTETRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONKITSDISASSEMBLYTRANS), #POStransactions);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONMARKUPTRANS), #POStransactions);
        //this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTABLE_RU), #POStransactions);

        // Adding "POS transactions 2" Offline Scope
        this.createScope(syncFrequencyTransactions, #POSTransactions2, RetailOfflineSyncDirectionBase::UploadOnly);
        this.mapScopeToProfile(#POSTransactions2, cu8OfflineProfileName);

        // Adding Tables for "POS transactions 2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILZREPORTTOTALIZERTAXTRANS_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENT_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTLINE_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTPAYMENTTRANS_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTTAXTRANS_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTCANCEL_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTREFERENCE_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALDOCUMENTLEGALTEXT_BR), #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILLOG), #POSTransactions2);

        this.addAXSchemaTableToScope(tableStr(NOSALEFISCALDOCUMENTTRANSACTION_BR), #POSTransactions2);
        // Table that only exists at EPOS DBO schema and used for temporary info for EFT payments
        this.addDBOSchemaTableToScope(#POSTransactions_RETAILCARDPAYMENT_BR, #POSTransactions2);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONFISCALTRANS), #POSTransactions2);

        // Table for GTE
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONTAXMEASURE), #POSTransactions2);

        // Remove PosBatch Staging scope if it exists.
        select forupdate offlineScope where offlineScope.Description == #PosBatchStaging;

        if(offlineScope)
        {
            offlineScope.delete();
        }

        // Adding "Products, prices, and bar codes" Offline Scope
        this.createScope(syncFrequencyProductsMasterData, #Productspricesandbarcodes, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Productspricesandbarcodes, cu8OfflineProfileName);

        // Adding Tables for "Products, prices, and bar codes" Offline Scope
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTETRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTETYPE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTEVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILBARCODEMASKTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILBARCODEMASKSEGMENT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESBOOLEANVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORY), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORYHIERARCHY), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORYHIERARCHYROLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILCATEGORYCONTAINMENTLOOKUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORYTRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELPRICEGROUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCURRENCYVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESDATETIMEVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCOLOR), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCONFIGURATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERCOLOR), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERCONFIGURATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERSTYLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERSIZE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERDIMENSIONVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESSIZE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESSTYLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESFLOATVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTDIM), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTITEMGTIN), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTITEMBARCODE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILINVENTLINKEDITEM), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(PRICEDISCTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(PRICEPARAMETERS), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILINVENTTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESINSTANCEVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTTABLEMODULE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESTRACKINGDIMENSIONGROUPITEM), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTITEMGROUPITEM), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTSERIAL), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESINTVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(PRICEDISCGROUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTCATEGORY), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTIMAGE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTINSTANCEVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTTRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESTRACKINGDIMENSIONGROUPFLDSETUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESREFERENCEVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESTEXTVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESTEXTVALUETRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(UNITOFMEASURE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(UNITOFMEASURECONVERSION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(UNITOFMEASURETRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILASSORTMENTLOOKUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILASSORTMENTLOOKUPCHANNELGROUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTEDEFAULTVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESATTRIBUTEGROUPATTRIBUTE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORYATTRIBUTELOOKUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESCATEGORYATTRIBUTEGROUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESDISTINCTPRODUCTVARIANT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTMASTERDIMVALUETRANSLATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTRELATIONTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTRELATIONTYPE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTVARIANTDIMENSIONVALUE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTVARIANTSIZE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTVARIANTSTYLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESTRACKINGDIMENSIONGROUPPRODUCT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTDIMCOMBINATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTITEMSALESSETUP), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTLOCATIONLOGISTICSLOCATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(MARKUPAUTOLINE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(MARKUPAUTOTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(MARKUPTABLE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(MARKUPTABLE_IN), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILBARCODEMASKCHARACTER), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILKIT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILKITCOMPONENT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILKITCOMPONENTSUBSTITUTE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILKITRELEASEDSUBSTITUTECHARGE), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILKITVARIANTCOMPONENT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILSPECIALCATEGORYMEMBER), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILUNIT), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILINVENTAVAILABILITY), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONORDERSTATUS), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTVARIANTCOLOR), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(ECORESPRODUCTVARIANTCONFIGURATION), #Productspricesandbarcodes);
        this.addAXSchemaTableToScope(tableStr(INVENTITEMGROUP), #Productspricesandbarcodes);

        // Adding "Reason code information" Offline Scope
        this.createScope(syncFrequencyMasterData, #ReasonCodeInformation, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#ReasonCodeInformation, cu8OfflineProfileName);

        // Adding Tables for "Reason code information" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODETABLESPECIFIC), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFORMATIONSUBCODETABLE), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODETABLE), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODE), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODEGROUP), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODEGROUPSPECIFIC), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFOCODETRANSLATION), #Reasoncodeinformation);
        this.addAXSchemaTableToScope(tableStr(RETAILINFORMATIONSUBCODETRANSLATION), #Reasoncodeinformation);

        // Adding "Registers" Offline Scope
        this.createScope(syncFrequencyMasterData, #Registers, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Registers, cu8OfflineProfileName);

        // Adding Tables for "Registers" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILKEYBOARDMAPPINGTRANS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILPARAMETERS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILBUTTONGRID), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILFORMLAYOUT), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILLANGUAGETEXT), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILBUTTONGRIDBUTTONS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILIMAGES), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILOPERATIONS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILPERMISSIONS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILHARDWAREPROFILE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTRANSACTIONSERVICEPROFILE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILVISUALPROFILE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUT), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILRECEIPTMASKS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILRECEIPTPROFILE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILRECEIPTPROFILELINE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTERMINALCUSTOMFIELD), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILSHAREDPARAMETERS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTERMINALTABLE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILDEVICE), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERFRAMEWORK), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERINDUSTRY), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERFRAMEWORKINDUSTRYMAP), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERFRAMEWORKLEVEL), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERFRAMEWORKLINE), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERLINEARTIFACT), #Registers);
        this.addAXSchemaTableToScope(tableStr(SYSTASKRECORDERPARAMETERS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILKEYBOARDMAPPINGTABLE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTERMINALDEVICE), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTILLLAYOUTREPORTZONE), #Registers);
        this.addAXSchemaTableToScope(tableStr(SALESPARAMETERS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILPOSTHEME), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILSHAREDBINGPARAMETERS), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTHEMEACCENT), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTHEMEACCENTCOLOR), #Registers);
        this.addAXSchemaTableToScope(tableStr(RETAILTHEMEPALLET), #Registers);

        // Adding "Registers 2" Offline Scope
        this.createScope(syncFrequencyMasterData, #Registers2, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Registers2, cu8OfflineProfileName);

        // Adding Tables for "Registers 2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(EFDOCAUTHORITY_BR), #Registers2);
        this.addAXSchemaTableToScope(tableStr(EFDOCWEBSERVICEPARAMETERS_BR), #Registers2);
        this.addAXSchemaTableToScope(tableStr(EFDRETURNCODE_BR), #Registers2);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALPRINTERCONFIGTABLE), #Registers2);
        this.addAXSchemaTableToScope(tableStr(RETAILDRAWERPOOL), #Registers2);
        this.addAXSchemaTableToScope(tableStr(RETAILDRAWERPOOLDEVICE), #Registers2);
        //this.addAXSchemaTableToScope(tableStr(EFRSatHardware_BR), #Registers2);
        this.addAXSchemaTableToScope(tableStr(CardProcessor_BR), #Registers2);

        // Adding "Seed values" Offline Scope
        this.createScope(syncFrequencySeedData, #SeedValues, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#SeedValues, cu8OfflineProfileName);

        // Adding Tables for "Seed values" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILPOSSEEDDATA), #Seedvalues);

        // Adding "Seed values 2" Offline Scope
        this.createScope(syncFrequencySeedData, #SeedValues2, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#SeedValues2, cu8OfflineProfileName);

        // Adding Tables for "Seed values 2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILTERMINALCOUNTER), #Seedvalues2);

        // Adding Tables for "Seed values 2" Offline Scope
        //this.addAXSchemaTableToScope(tableStr(RETAILFISCALREGISTRATIONSEQUENCE), #Seedvalues2);

        // Adding "Serialized Transactions" Offline Scope
        this.createScope(syncFrequencyTransactions, #SerializedTransactions, RetailOfflineSyncDirectionBase::UploadOnly);
        this.mapScopeToProfile(#SerializedTransactions, cu8OfflineProfileName);

        // Adding Tables for "Serialized Transactions" Offline Scope
        this.addDBOSchemaTableToScope(#SerializedTransactions_RETAILTRANSACTIONTABLEEX5, #SerializedTransactions);

        // Adding "Staff" Offline Scope
        this.createScope(syncFrequencyMasterData, #Staff, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Staff, cu8OfflineProfileName);

        // Adding Tables for "Staff" Offline Scope
        this.addAXSchemaTableToScope(tableStr(HCMJOB), #Staff);
        this.addAXSchemaTableToScope(tableStr(HCMPOSITIONDETAIL), #Staff);
        this.addAXSchemaTableToScope(tableStr(HCMPOSITION), #Staff);
        this.addAXSchemaTableToScope(tableStr(HCMWORKER), #Staff);
        this.addAXSchemaTableToScope(tableStr(HCMPOSITIONWORKERASSIGNMENT), #Staff);
        this.addAXSchemaTableToScope(tableStr(JMGIPCACTIVITY), #Staff);
        this.addAXSchemaTableToScope(tableStr(RETAILJOBPOSPERMISSIONGROUP), #Staff);
        this.addAXSchemaTableToScope(tableStr(RETAILPOSPERMISSIONGROUP), #Staff);
        this.addAXSchemaTableToScope(tableStr(RETAILPOSITIONPOSPERMISSION), #Staff);
        this.addAXSchemaTableToScope(tableStr(RETAILSTAFFEXTENDEDLOGON), #Staff);
        this.addAXSchemaTableToScope(tableStr(RETAILSTAFFTABLE), #Staff);

        // Adding "Stores and tenders" Offline Scope
        this.createScope(syncFrequencyMasterData, #Storesandtenders, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Storesandtenders, cu8OfflineProfileName);

        // Adding Tables for "Stores and tenders" Offline Scope
        this.addAXSchemaTableToScope(tableStr(ACCOUNTANT_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(ACCOUNTANTLOGISTICSLOCATION_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(ACCOUNTANTLOGISTICSLOCATIONROLE_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(BRAZILPARAMETERS), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELCURRENCY), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(FISCALESTABLISHMENT_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(FISCALESTABLISHMENTINVENTSITE_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILINCOMEEXPENSEACCOUNTTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(INVENTLOCATION), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(LANGUAGETABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(LEDGER), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILFUNCTIONALITYPROFILE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORETABLE_IN), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORETENDERTYPECARDTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILTENDERTYPECARDNUMBERS), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILTENDERTYPECARDTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORECASHDECLARATIONTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORETABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORETENDERTYPETABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELREPORT), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILREPORTLOCALIZEDSTRING), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILREPORTPERMISSIONGROUP), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCDXDATASTORECHANNEL), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCONNDATABASEPROFILE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(OMOPERATINGUNIT), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(COMPANYINFO), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(OMEXPLODEDORGANIZATIONSECURITYGRAPH), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(OMHIERARCHYPURPOSE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(OMINTERNALORGANIZATION), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELPAYMENTCONNECTORLINE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELPROFILE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELPROFILEPROPERTY), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCONFIGURATION_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCONFIGURATIONSTORETABLE_BR), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILINTERNALORGANIZATION), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILONLINECHANNELPUBLISHSTATUS), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBRETAILCHANNELTABLE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTANDARDATTRIBUTE), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORELOCATORGROUP), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORELOCATORGROUPMEMBER), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILSTORELOCATORGROUPOWNER), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELTABLEEXT), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILDEVICETYPES), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILKEYBOARDBUTTONCONTROL), #Storesandtenders);
        this.addAXSchemaTableToScope(tableStr(RETAILKEYBOARDBUTTONCONTROLB), #Storesandtenders);

        // Adding "Stores and tenders 2" Offline Scope
        this.createScope(syncFrequencyMasterData, #Storesandtenders2, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Storesandtenders2, cu8OfflineProfileName);

        // Adding Tables for "Stores and tenders 2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(TIMEZONEINFO), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOG), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGINTERNALORG), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGPRODUCT), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGPRODUCTCATEGORY), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGPRODUCTRELATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGPRODUCTRELATIONEXCLUSION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCATALOGTRANSLATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBCHANNELATTRIBUTE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBECORESCATEGORY), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBECORESCATEGORYTRANSLATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBINTERNALORGATTRIBUTEGROUP), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBINTORGINHERITANCEEXPLODED), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBPRODUCTATTRIBUTECHANNELMETADATA), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBPRODUCTATTRIBUTEVALUE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBRETAILCATALOGPRICEGROUP), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBRETAILCHANNELCATEGORYATTRIBUTE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBRETAILSTORETABLE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(COMPANYDEFAULTLOCATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(COMPANYIMAGE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTLOCATIONDEFAULTLOCATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTLOCATIONLOGISTICSLOCATIONROLE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTSITEDEFAULTLOCATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTSITELOGISTICSLOCATION), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTSITELOGISTICSLOCATIONROLE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILCHANNELTABLE_IN), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILLABELCHANGEJOURNALTRANS), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILPUBINVENTDIMCHANNELMETADATA), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(INVENTSITE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETAILATTRIBUTEFILTER), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETURNREASONCODE), #Storesandtenders2);
        this.addAXSchemaTableToScope(tableStr(RETURNREASONCODEGROUP), #Storesandtenders2);

        // Adding "Suspended Transactions" Offline Scope
        this.createScope(syncFrequencySuspendedTrans, #SuspendedTransactions, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#SuspendedTransactions, cu8OfflineProfileName);

        // Adding Tables for "Suspended Transactions" Offline Scope
        this.addCRTSchemaTableToScope(#SuspendedTransactions_SALESTRANSACTION, #SuspendedTransactions);

        // Adding "Tax" Offline Scope
        this.createScope(syncFrequencyMasterData, #Tax, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Tax, cu8OfflineProfileName);

        // Adding Tables for "Tax" Offline Scope
        this.addAXSchemaTableToScope(tableStr(FORMULADESIGNER_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(PLFISCALTAXTABLE), #Tax);
        this.addAXSchemaTableToScope(tableStr(RETAILSALESTAXOVERRIDEGROUP), #Tax);
        this.addAXSchemaTableToScope(tableStr(RETAILSALESTAXOVERRIDEGROUPMEMBER), #Tax);
        this.addAXSchemaTableToScope(tableStr(RETAILSALESTAXOVERRIDE), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXCOLLECTLIMIT), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXCOMPONENTTABLE_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXATIONCODETABLE_BR), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXDATA), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXGROUPDATA), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXGROUPHEADING), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXINFORMATIONLEGALENTITY_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXINFORMATION_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXONITEM), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXPARAMETERS), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXREGISTRATIONNUMBERS_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXTABLE), #Tax);
        this.addAXSchemaTableToScope(tableStr(EXCEPTIONCODETABLE_BR), #Tax);
        this.addAXSchemaTableToScope(tableStr(RETAILTAXFILTERS), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXATIONCODESETUP_BR), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXFISCALCLASSIFICATION_BR), #Tax);
        this.addAXSchemaTableToScope(tableStr(HSNCODETABLE_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(SERVICEACCOUNTINGCODETABLE_IN), #Tax);
        this.addAXSchemaTableToScope(tableStr(TAXINFORMATIONCUSTTABLE_IN), #Tax);

        // Adding "Tax 2" Offline Scope
        this.createScope(syncFrequencyMasterData, #Tax2, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Tax2, cu8OfflineProfileName);

        // Adding Tables for "Tax 2" Offline Scope
        this.addAXSchemaTableToScope(tableStr(CFOPTABLE_BR), #Tax2);
        this.addAXSchemaTableToScope(tableStr(FISCALDOCUMENTSOURCETEXT_BR), #Tax2);
        this.addAXSchemaTableToScope(tableStr(TAXBURDEN_BR), #Tax2);

        // Adds "Modes of delivery" offline scope.
        this.createScope(syncFrequencyMasterData, #DeliveryMode, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#DeliveryMode, cu8OfflineProfileName);

        // Adding Tables for "Modes of delivery" Offline Scope
        this.addAXSchemaTableToScope(tableStr(DLVMODE), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(RETAILDLVMODEADDRESSEXPLODED), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(RETAILDLVMODECHANNELEXPLODED), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(RETAILDLVMODEPRODUCTEXPLODED), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(RETAILSHIPCARRIERACCOUNTCONFIGURATION), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(RETAILSHIPCARRIERINTERFACE), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(SHIPCARRIERCOMPANYACCOUNTS), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(SHIPCARRIERTABLE), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(CUSTPACKINGSLIPJOUR), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(CUSTPACKINGSLIPTRANS), #DeliveryMode);
        this.addAXSchemaTableToScope(tableStr(SHIPCARRIERSTAGING), #DeliveryMode);

        // Adding "Loyalty" Offline Scope
        this.createScope(syncFrequencyMasterData, #Loyalty, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#Loyalty, cu8OfflineProfileName);

        // Adding Tables for "Loyalty" Offline Scope
        this.addAXSchemaTableToScope(tableStr(RETAILAFFILIATION), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILAFFILIATIONTRANSLATION), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYCARD), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYCARDTIER), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYEARNSCHEMELINE), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYREDEEMSCHEMELINE), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYREWARDPOINT), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYREWARDPOINTTRANSLATION), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYSCHEME), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYSCHEMECHANNEL), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYSCHEMECHANNELEXPLODED), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYTIER), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILLOYALTYTIERTRANSLATION), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILAFFILIATIONPRICEGROUP), #Loyalty);
        this.addAXSchemaTableToScope(tableStr(RETAILCUSTAFFILIATION), #Loyalty);

        // Adding "Offline scope"
        this.createScope(syncFrequencyOfflineScope, #OfflineScope, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#OfflineScope, cu8OfflineProfileName);

        // Adding tables for "Offline scope"
        this.addAXSchemaTableToScope(tableStr(RETAILOFFLINEPROFILE), #OfflineScope);
        this.addAXSchemaTableToScope(tableStr(RETAILOFFLINEPROFILESCOPES), #OfflineScope);
        this.addAXSchemaTableToScope(tableStr(RETAILOFFLINESCOPE), #OfflineScope);
        this.addAXSchemaTableToScope(tableStr(RETAILOFFLINESCOPETABLES), #OfflineScope);
        this.addAXSchemaTableToScope(tableStr(RETAILOFFLINETABLE), #OfflineScope);

        // Adding "Brazilian auditing" offline scope
        this.createScope(syncFrequencyBrazilianAuditing_BR, #BrazilianAuditing, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#BrazilianAuditing, cu8OfflineProfileName);

        // Adding tables for "Brazilian auditing" offline Scope
        this.addAXSchemaTableToScope(#BrazilianAuditing_RETAILMANUALCHANGESLOG_BR, #BrazilianAuditing);

        // Adding "NFCeContingency_BR" Offline Scope
        this.createScope(syncFrequencyRetailEFDocContingencyMode, #NFCeContingency_BR, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#NFCeContingency_BR, cu8OfflineProfileName);

        // Adding tables for "Brazilian NFC-e Contingency Mode"
        this.addAXSchemaTableToScope(tableStr(RETAILEFDOCCONTINGENCYMODE), #NFCeContingency_BR);

        // Adding "Fiscal Printers" Offline Scope
        this.createScope(syncFrequencyFiscalPrinters, #FiscalPrinters, RetailOfflineSyncDirectionBase::Bidirectional);
        this.mapScopeToProfile(#FiscalPrinters, cu8OfflineProfileName);

        // Adding tables for "Fiscal Printers"
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALPRINTER_BR), #FiscalPrinters);
        this.addAXSchemaTableToScope(tableStr(RETAILFISCALPRINTERREPORT_BR), #FiscalPrinters);
        //this.addAXSchemaTableToScope(tableStr(RETAILFISCALAUDITINGREPORTS_BR), #FiscalPrinters);
        //this.addAXSchemaTableToScope(tableStr(RETAILFISCALAUDITINGAUTHORITY_BR), #FiscalPrinters);


        // Adding "GTE scope" Offline Scope
        this.createScope(syncGenericTaxEngine, #GTE, RetailOfflineSyncDirectionBase::DownloadOnly);
        this.mapScopeToProfile(#GTE, cu8OfflineProfileName);

        // Adding tables for "GTE"
        this.createGTEOfflineTables();

    }

]]></Source>
			</Method>
			<Method>
				<Name>createGTEOfflineTables</Name>
				<Source><![CDATA[
    private void createGTEOfflineTables()
    {
        this.addAXSchemaTableToScope(tableStr(ERSOLUTIONTABLE), #GTE);
        //this.addAXSchemaTableToScope(tableStr(ERSOLUTIONVERSIONCOMPONENTTABLE), #GTE);
        this.addAXSchemaTableToScope(tableStr(ERSOLUTIONVERSIONTABLE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXDOCUMENTROWDETERMINEDCOMPONENT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXDOCUMENTROWMEASUREADJUSTMENT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXDOCUMENTROWTAXDETERMINEDINFO), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXENGINESQLDICTIONARY), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXMEASURETYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXMEASURETYPEDETAIL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRTDOCCOMPPOSTINGPROFDETVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRTDOCCOMPPOSTINGPROFVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRTLOOKUPSTRUCTFIELDBINDINGVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRTLOOKUPSTRUCTFIELDCONDCOLUMNLINK), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMECOMPONENT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMECOMPONENTMEASURE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMECOMPONENTMEASUREVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMECOMPONENTVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDEFCONTEXT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDEFCONTEXTVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTMEASURE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTMEASUREVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTPOSTINGPROFILE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTPOSTINGPROFILEDET), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTPOSTINGTYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCOMPONENTVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCONTEXT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCCONTEXTVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODEL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODELATTR), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODELATTRVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODELROW), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODELROWVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCMODELVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCTAXTYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCTAXTYPEPOSTINGTYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEDOCTAXTYPEVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUP), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPACCOUNTINGRESULT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPACCOUNTINGRESULTDETAIL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPCONDITION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPMEASURERESULT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPMEASURERESULTDETAIL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTURE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREBINDING), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREBINDINGVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREFIELD), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREFIELDBINDING), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREFIELDVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPSTRUCTUREVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPTAXPERIODRESULT), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMELOOKUPVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMEASURE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMEASUREVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMODEL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMODELATTR), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMODELATTRVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMODELROW), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEMODELROWVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEPOSTINGTYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEPOSTINGTYPEVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODEL), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODELATTR), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODELATTRVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODELROW), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODELROWVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMEREFERENCEMODELVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMETAXTYPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXRUNTIMETAXTYPEVERSION), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXSOLUTIONSCOPE), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXSOLUTIONSCOPESETUP), #GTE);
        this.addAXSchemaTableToScope(tableStr(TAXDOCUMENTJSON), #GTE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new offline scope with the given description, sync frequency and direction
    /// and associates it with the default offline profile.
    /// </summary>
    /// <param name="_syncFrequency">
    /// The scope's synchronization frequency.
    /// </param>
    /// <param name="_scopeDescription">
    /// The scope's description.
    /// </param>
    /// <param name="_direction">
    /// The scope's synchronization direction.
    /// </param>
    private void createScope(int _syncFrequency, RetailOfflineScopeDescription _scopeDescription, RetailOfflineSyncDirectionBase _direction)
    {
        select firstonly RecId from offlineScope where offlineScope.Description == _scopeDescription;

        if (!offlineScope)
        {
            offlineScope.clear();

            offlineScope.SyncDirection = _direction;
            offlineScope.Description = _scopeDescription;
            offlineScope.SyncFrequency = _syncFrequency;

            offlineScope.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapScopeToProfile</Name>
				<Source><![CDATA[
    private void mapScopeToProfile(RetailOfflineScopeDescription _scopeDescription, RetailOfflineProfileName _offlineProfileName)
    {
        // Links scope to offline profile.
        offlineProfile2Scope.clear();
        offlineProfile.clear();
        offlineScope.clear();

        select RecId from offlineProfile where offlineProfile.Name == _offlineProfileName;
        select RecId from offlineScope where offlineScope.Description == _scopeDescription;

        if (offlineProfile && offlineScope)
        {
            select firstonly RecId from offlineProfile2Scope where offlineProfile2Scope.ScopeID == offlineScope.RecId && offlineProfile2Scope.ProfileID == offlineProfile.RecId;

            if (!offlineProfile2Scope)
            {
                offlineProfile2Scope.clear();

                offlineProfile2Scope.ProfileID = offlineProfile.RecId;
                offlineProfile2Scope.ScopeID = offlineScope.RecId;

                offlineProfile2Scope.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAXSchemaTableToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given AX Schema table to an existing offline scope.
    /// </summary>
    /// <param name="_table">
    /// The table to be added to the offline scope with AX Schema.
    /// </param>
    /// <param name="_scope">
    /// The offline scope the table should be added to.
    /// </param>
    /// <remarks>
    /// Format table name and then call addTableToScope to rest.
    /// </remarks>
    private void addAXSchemaTableToScope(RetailOfflineScopeTableName _table, RetailOfflineScopeDescription _scope)
    {
        str AXSchemaOfflineTable = this.FormatOfflineTableName(#AXSchema, _table);
        this.addTableToScope(AXSchemaOfflineTable, _scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatOfflineTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format Table name with [Schema Name].[Table Name]
    /// </summary>
    /// <param name="_schema">
    /// Schema Name [It can be AXNameSpace, DBONameSpace or any new schema name].
    /// </param>
    /// <param name="_tablename">
    /// Offline Table Name without any square brackets.
    /// </param>
    /// <returns>
    ///  Return Formated table Name
    /// </returns>
    /// <remarks>
    /// Format Offline Table Name with prefix of AX Schema Name.
    /// </remarks>
    private str FormatOfflineTableName(str _schema, str _tablename)
    {
        // Here _schema should have format of "[<Schema Name>]." and table will be Offline Table to Sync without any square bracket.
        return #OpeningSquareBracket + _schema + #ClosingSquareBracket + #DOT + #OpeningSquareBracket + _tablename + #ClosingSquareBracket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTableToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given table to an existing offline scope.
    /// </summary>
    /// <param name="_table">
    /// The table to be added to the offline scope.
    /// </param>
    /// <param name="_scope">
    /// The offline scope the table should be added to.
    /// </param>
    /// <remarks>
    /// If the given offline scope doesn't exist, nothing is done.
    /// If the given table is already mapped to another scope, the mapping will be updated to the given scope.
    /// </remarks>
    private void addTableToScope(RetailOfflineScopeTableName _table, RetailOfflineScopeDescription _scope)
    {
        // Inserts record into RetailOfflineTable if it does not exist.
        select firstonly RecId from offlineTable
        where offlineTable.TableName == _table;

        if (!offlineTable)
        {
            offlineTable.clear();
            offlineTable.TableName = _table;
            offlineTable.insert();
        }

        // Maps table to scope.
        select firstonly RecId from offlineScope2Table where offlineScope2Table.SyncTableID == offlineTable.RecId;
        select firstonly RecId from offlineScope where offlineScope.Description == _scope;

        if (offlineScope && !offlineScope2Table)
        {
            offlineScope2Table.clear();

            offlineScope2Table.ScopeID = offlineScope.RecId;
            offlineScope2Table.SyncTableID = offlineTable.RecId;

            offlineScope2Table.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDBOSchemaTableToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given DBO Schema table to an existing offline scope.
    /// </summary>
    /// <param name="_table">
    /// The table to be added to the offline scope with DBO Schema.
    /// </param>
    /// <param name="_scope">
    /// The offline scope the table should be added to.
    /// </param>
    /// <remarks>
    /// Format table name and then call addTableToScope to rest.
    /// </remarks>
    private void addDBOSchemaTableToScope(RetailOfflineScopeTableName _table, RetailOfflineScopeDescription _scope)
    {
        str DBOSchemaOfflineTable = this.FormatOfflineTableName(#DBOSchema, _table);
        this.addTableToScope(DBOSchemaOfflineTable, _scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCRTSchemaTableToScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given CRT Schema table to an existing offline scope.
    /// </summary>
    /// <param name="_table">
    /// The table to be added to the offline scope with CRT Schema.
    /// </param>
    /// <param name="_scope">
    /// The offline scope the table should be added to.
    /// </param>
    /// <remarks>
    /// Format table name and then call addTableToScope to rest.
    /// </remarks>
    private void addCRTSchemaTableToScope(RetailOfflineScopeTableName _table, RetailOfflineScopeDescription _scope)
    {
        str CRTSchemaOfflineTable = this.FormatOfflineTableName(#CRTSchema, _table);
        this.addTableToScope(CRTSchemaOfflineTable, _scope);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>