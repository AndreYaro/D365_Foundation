<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAgingDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for report <c>VendAging_CN</c>.
/// </summary>
public class VendAgingDP_CN
{
    VendAgingContract_CN contract;
    AgingAndDueAmountTmp_CN  tmpVendorAging_CN;

    VendTable vendTable;
    VendTrans vendTrans;
    VendGroup vendGroup;
    InventBuyerGroup buyerGroup;
    AmountMST amountArray[6];

    const int AgingPeriodOne = 1;
    const int AgingPeriodTwo = 2;
    const int AgingPeriodThree = 3;
    const int AgingPeriodFour = 4;
    const int AgingPeriodFive = 5;
    const int AgingPeriodSix = 6;
    const int DefaultPeriod = 30;
    const int AmountOver = 7;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to calculate Balance for Aging periods.
    /// </summary>
    /// <param name="timeArray">
    /// Contains the time left for the vendor to pay the amount.
    /// </param>
    /// <param name="amountMst">
    /// Amount under transaction.
    /// </param>
    /// <param name="settledAmountMst">
    /// Amount for settlement.
    /// </param>
    /// <param name="dates">
    /// Due date for the customer.
    /// </param>
    private void calcAmount(TransDate timeArray[], AmountMST amountMst, AmountMST settledAmountMst, TransDate dates)
    {
        boolean isAdded = false;
        Integer agingPeriodCounter;
        for (agingPeriodCounter = AgingPeriodOne; agingPeriodCounter < AgingPeriodSix; agingPeriodCounter++)
        {
            if (dates >= timeArray[agingPeriodCounter])
            {
                amountArray[agingPeriodCounter] += amountMst - settledAmountMst;
                isAdded = true;
                break;
            }
        }

        if (!isAdded)
        {
            amountArray[AgingPeriodSix] += amountMst - settledAmountMst;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAgingTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to store the customer data buffer for the report.
    /// </summary>
    /// <returns>
    /// Returns the Temperory table <c>tmpVendorAging_CN</c> to the report for displaying vendor data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AgingAndDueAmountTmp_CN))
    ]
    public AgingAndDueAmountTmp_CN getVendAgingTmp_CN()
    {
        return tmpVendorAging_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    private AgingAndDueAmountTmp_CN insertIntoTmpTable(
        VendAccount         _accountNum,
        AccountName         _name,
        AmountMST           _creditLimit,
        AmountMST           _balance,
        AmountMST           _inDueAmount,
        AmountMST           _amountMST[],
        VendGroupId         _vendGroupId,
        Description         _vendGroupName,
        ItemBuyerGroupId    _buyerGroupId,
        Name                _buyerGroupName)
    {
        tmpVendorAging_CN.AccountNum = _accountNum;
        tmpVendorAging_CN.AccountName = _name;
        tmpVendorAging_CN.AccountGroup = _vendGroupId;
        tmpVendorAging_CN.AccountGroupName = _vendGroupName;
        tmpVendorAging_CN.OperatorGroup = _buyerGroupId;
        tmpVendorAging_CN.OperatorGroupName = _buyerGroupName;
        tmpVendorAging_CN.CreditLimit = _creditLimit;
        tmpVendorAging_CN.BalanceAmount = _balance;
        tmpVendorAging_CN.UnDueAmount = _inDueAmount;
        tmpVendorAging_CN.Period1Amount = _amountMST[AgingPeriodOne];
        tmpVendorAging_CN.Period2Amount = _amountMST[AgingPeriodTwo];
        tmpVendorAging_CN.Period3Amount = _amountMST[AgingPeriodThree];
        tmpVendorAging_CN.Period4Amount = _amountMST[AgingPeriodFour];
        tmpVendorAging_CN.Period5Amount = _amountMST[AgingPeriodFive];
        tmpVendorAging_CN.DueAmount = _amountMST[AgingPeriodSix];
        tmpVendorAging_CN.insert();

        return tmpVendorAging_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    /// <param name = "_contract">Instance of <c>VendAgingContract_CN</c>.</param>
    /// <param name = "_query">The query</param>
    /// <returns>buffer of <c>AgingAndDueAmountTmp_CN</c></returns>
    public AgingAndDueAmountTmp_CN processReport(VendAgingContract_CN _contract, Query _query)
    {
        Query query;
        QueryRun qr;
        QueryBuildDataSource qbdsVendTrans;

        Integer periodOne;
        Integer periodTwo;
        Integer periodThree;
        Integer periodFour;
        Integer periodFive;
        Integer periodArray[AgingPeriodFive];
        TransDate timeArray[AgingPeriodFive];

        Integer counter;

        AmountMST amountMST;
        LedgerTransType transType;
        VendAccount accountNum;
        AmountMST settledAmountMst;
        TransDate transDate;
        TransDate dueDate;
        boolean indx;
        AccountNum lastVendNum;
        Name lastName;
        AmountMSt lastCreditLimit, Balance;
        CustVendAgingType_CN agingType;
        AmountMST inDueAmount;
        CurrencyCode currencyCode;

        TransDate dueDay,dueDayRange, temp;

        VendGroupId lastVendGroupId;
        Description lastVendGroupName;
        ItemBuyerGroupId lastBuyerGroupId;
        Name lastBuyerGroupName;

        contract = _contract;
        indx = true;

        dueDay = contract.parmDueDate();
        agingType = contract.parmAgingType();

        currencyCode = CompanyInfoHelper::standardCurrency();
        contract.parmCurrencyCode(currencyCode);

        if (contract.parmPeriodOne() <=0)
        {
            contract.parmPeriodOne(DefaultPeriod);
        }
        if (contract.parmPeriodTwo() <= 0)
        {
            contract.parmPeriodTwo(DefaultPeriod);
        }
        if (contract.parmPeriodThree() <= 0)
        {
            contract.parmPeriodThree(DefaultPeriod);
        }
        if (contract.parmPeriodFour() <= 0)
        {
            contract.parmPeriodFour(DefaultPeriod);
        }
        if (contract.parmPeriodFive() <= 0)
        {
            contract.parmPeriodFive(DefaultPeriod);
        }

        if (dueDay == dateNull())
        {
            dueDay = DateTimeUtil::date(DateTimeUtil::utcNow());
        }

        periodArray[AgingPeriodOne] = contract.parmPeriodOne();
        periodArray[AgingPeriodTwo] = contract.parmPeriodTwo();
        periodArray[AgingPeriodThree] = contract.parmPeriodThree();
        periodArray[AgingPeriodFour] = contract.parmPeriodFour();
        periodArray[AgingPeriodFive] = contract.parmPeriodFive();

        temp = dueDay;
        for (counter = AgingPeriodOne; counter < AgingPeriodSix; counter++)
        {
            timeArray[counter] = temp-periodArray[counter];
            temp = timeArray[counter];
        }

        dueDayRange = dueDay;
        query = _query;
        qbdsVendTrans = query.dataSourceTable(tableNum(VendTrans));
        qbdsVendTrans.addOrderByField(fieldNum(vendTrans, AccountNum));

        SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(vendTrans, TransDate)).value(SysQuery::range(dateNull(), dueDayRange));

        qr=new QueryRun(query);

        while (qr.next())
        {
            vendTable = qr.get(tableNum(VendTable));
            vendTrans = qr.get(tableNum(VendTrans));
            vendGroup = qr.get(tableNum(VendGroup));
            buyerGroup = qr.get(tableNum(InventBuyerGroup));

            amountMst = vendTrans.AmountMST;
            settledAmountMst = vendTrans.SettleAmountMST;
            accountNum = vendTable.AccountNum;
            transType = vendTrans.TransType;

            if (amountMst != settledAmountMst && (transType == LedgerTransType::Vend || transType == LedgerTransType::Purch || (transType == LedgerTransType::None && amountMst < 0)))
            {
                transDate = vendTrans.TransDate;
                if (vendTrans.DueDate == dateNull())
                {
                    continue;
                }
                dueDate =vendTrans.DueDate;

                if (indx)
                {
                    lastVendNum = accountNum;
                    lastName = DirPartyTable::getName(vendTable.Party);
                    lastCreditLimit = vendTable.CreditMax;
                    lastVendGroupId = vendGroup.VendGroup;
                    lastVendGroupName = vendGroup.Name;
                    lastBuyerGroupId = buyerGroup.Group;
                    lastBuyerGroupName = buyerGroup.Description;
                    indx = false;
                }
                if (lastVendNum == accountNum)
                {
                    Balance += amountMst - settledAmountMst;
                    if (agingType == CustVendAgingType_CN::Payment)
                    {
                        if (dueDate >= dueDay)
                        {
                            inDueAmount += amountMst - settledAmountMst;
                        }
                        else
                        {
                            this.calcAmount(timeArray, amountMst, settledAmountMst, dueDate);
                        }
                    }
                    else
                    {
                        this.calcAmount(timeArray, amountMst, settledAmountMst, transDate);
                    }
                }
                else
                {
                    this.insertIntoTmpTable(lastVendNum, lastName, lastCreditLimit, Balance, inDueAmount, amountArray, lastVendGroupId, lastVendGroupName, lastBuyerGroupId, lastBuyerGroupName);

                    lastVendNum = accountNum;
                    lastName = DirPartyTable::getName(vendTable.Party);
                    lastCreditLimit = vendTable.CreditMax;
                    lastVendGroupId = vendGroup.VendGroup;
                    lastVendGroupName = vendGroup.Name;
                    lastBuyerGroupId = buyerGroup.Group;
                    lastBuyerGroupName = buyerGroup.Description;
                    Balance = 0;
                    inDueAmount = 0;

                    for (counter = 1; counter < AmountOver; counter++)
                    {
                        amountArray[counter] = 0;
                    }

                    Balance += amountMst - settledAmountMst;
                    if (agingType == CustVendAgingType_CN::Payment)
                    {
                        if (dueDate >= dueDay)
                        {
                            inDueAmount += amountMst - settledAmountMst;
                        }
                        else
                        {
                            this.calcAmount(timeArray, amountMst, settledAmountMst, dueDate);
                        }
                    }
                    else
                    {
                        this.calcAmount(timeArray, amountMst, settledAmountMst, transDate);
                    }
                }
            }
        }

        return this.insertIntoTmpTable(lastVendNum, lastName, lastCreditLimit, Balance, inDueAmount, amountArray, lastVendGroupId, lastVendGroupName, lastBuyerGroupId, lastBuyerGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>VendAgingDP_CN</C> class.
    /// </summary>
    /// <returns>The initialized <C>VendAgingDP_CN</C> class</returns>
    public static VendAgingDP_CN construct()
    {
        VendAgingDP_CN  dataProvider;

        dataProvider = new VendAgingDP_CN();

        return dataProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>