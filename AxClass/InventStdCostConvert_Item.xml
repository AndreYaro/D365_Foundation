<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvert_Item</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvert_Item</c> class converts one single item to standard cost.
/// </summary>
class InventStdCostConvert_Item extends InventStdCostConvert implements BatchRetryable
{
    InventStdCostConvItem       inventStdCostConvItem;
    RecId                       inventStdCostConvItemRecId;

    InventModelGroupId          prevModelGroupId;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        inventStdCostConvItemRecId
    #ENDMACRO
    /// <summary>
    ///    Activates all the prices for the item.
    /// </summary>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateItemPrice</Name>
				<Source><![CDATA[
    protected void activateItemPrice()
    {
        InventItemPriceSim              inventItemPriceSim;
        InventItemPrice                 inventItemPrice;

        // Transfer all the prices for this item
        while select * from inventItemPriceSim
        where inventItemPriceSim.VersionId == this.inventStdCostConv().CostingVersionId
           && inventItemPriceSim.ItemId == inventStdCostConvItem.ItemId
        {
            InventItemPriceActivationJob::activateInventItemPriceSimExt(inventItemPriceSim);
        }

        // Now update the created price to be sure it holds the date of the conversion
        inventItemPrice.skipDataMethods(true);
        update_recordset inventItemPrice
            setting ActivationDate = this.inventStdCostConv().TransitionEndDate
            where inventItemPrice.ItemId    == inventStdCostConvItem.ItemId
               && inventItemPrice.VersionId == this.inventStdCostConv().CostingVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the status of the inventory standard cost conversion record that should be processed.
    /// </summary>
    /// <returns>
    ///    false if the conversion record is not yet in progress, or if there is no item specified for
    ///    conversion; otherwise, true.
    /// </returns>
    protected boolean checkStatus()
    {
        boolean ret = super();

        // Check if a valid ledger account for the revaluation does exist
        if (this.inventStdCostConv().Status != InventStdCostConvStatus::InProgress)
        {
            ret = checkFailed("@SYS121568");
        }

        if (! inventStdCostConvItem)
        {
            ret = checkFailed("@SYS121588");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToStdCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the <see cref="T:InventStdCostAdjust_StdCostConvert" /> which will convert the item to
    ///    standard cost.
    /// </summary>
    protected void convertToStdCost()
    {
        InventItemPrice                    inventItemPrice;

        // Settle the old model transactions down to std cost
        // No extra validation is necessary here.
        // This has been done before

        InventStdCostAdjust_StdCostConvert inventStdCostAdjust_StdCostConvert = InventStdCostAdjust_StdCostConvert::newStdCost(InventTable::find(inventStdCostConvItem.ItemId),
                                                                                                                               this.inventStdCostConv(),
                                                                                                                               this.inventStdCostConv().InventTransCurrency_RU);
        inventStdCostAdjust_StdCostConvert.updateNow();

        // Now I need to update the voucher and transDate in the prices
        // that I have used to convert to std cost
        Voucher stdCostConvVoucher = inventStdCostAdjust_StdCostConvert.parmVoucher();
        TransDate stdCostConvTransDate = inventStdCostAdjust_StdCostConvert.parmTransDate();

        inventItemPrice.skipDeleteMethod(true);
        update_recordset inventItemPrice
        setting StdCostVoucher   = stdCostConvVoucher,
                StdCostTransDate = stdCostConvTransDate
        where inventItemPrice.ItemId    == inventStdCostConvItem.ItemId
           && inventItemPrice.VersionId == this.inventStdCostConv().CostingVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the conversion of a single item.
    /// </summary>
    /// <remarks>
    ///    The following sequence will be executed:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Update the item to the standard cost.</description>
    ///       </item>
    ///       <item>
    ///          <description>Activate the prices.</description>
    ///       </item>
    ///       <item>
    ///          <description>Trigger the conversion class.</description>
    ///       </item>
    ///       <item>
    ///          <description>Mark the item as converted.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An OCC conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    When an OCC conflict cannot be recovered.
    /// </exception>
    protected void execute()
    {
        #OCCRetryCount

        setPrefix(strFmt("@SCM:StdCostConversionInfoHeader", int642Str(InventTable::find(inventStdCostConvItem.ItemId).RecId)));

        try
        {
            ttsbegin;
            // Lock the inventItemStdCostConv record
            this.lockInventStdCostConvItem();

            if (this.inventStdCostConv() && inventStdCostConvItem)
            {
                // 1.) Flip the item to std cost
                this.updateItem();

                // 2.) Activate the price
                this.activateItemPrice();

                // 3.) Adjust inventory to std cost
                this.convertToStdCost();

                // 4.) Mark the record as converted
                this.markAsConverted();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            if (stopOnError == true)
            {
                // I have to abort, if an error is raised
                throw error("@SYS121579");
            }
            else
            {
                if (this.isInBatch())
                {
                    // I am running in batch, so throw an error
                    // that the status of the batch job is sett corresponding
                    throw error("@SYS121580");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = InventStdCostConvert_Item::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockInventStdCostConvItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Locks the inventory standard cost conversion item record.
    /// </summary>
    protected void lockInventStdCostConvItem()
    {
        select pessimisticLock * from inventStdCostConvItem
            where inventStdCostConvItem.RecId  == inventStdCostConvItemRecId
               && inventStdCostConvItem.Status == InventStdCostConvItemStatus::Checked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsConverted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the inventory standard cost conversion item record as converted.
    /// </summary>
    protected void markAsConverted()
    {
        InventStdCostConvItemConverted      inventStdCostConvItemConverted;

        // Mark the item as converted
        inventStdCostConvItem.Status = InventStdCostConvItemStatus::Converted;
        inventStdCostConvItem.update();

        // Insert itemConverted record
        inventStdCostConvItemConverted.initFromInventStdCostConvItem(inventStdCostConvItem);

        // Set the previous model group id (it has been saved in the update item method)
        inventStdCostConvItemConverted.PreviousModelGroupId = prevModelGroupId;

        inventStdCostConvItemConverted.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStdCostConvItemRecId</Name>
				<Source><![CDATA[
    public RecId parmInventStdCostConvItemRecId(RecId _inventStdCostConvItemRecId = inventStdCostConvItemRecId)
    {
        inventStdCostConvItemRecId = _inventStdCostConvItemRecId;

        return inventStdCostConvItemRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Re-reads, in additional to the parent class, the inventory standard cost conversion item record.
    /// </summary>
    protected void rereadRecords()
    {
        super();

        // Additionally to the header record, read the record that represents the item
        // that should be processed now
        select firstonly * from inventStdCostConvItem
            where inventStdCostConvItem.RecId     == inventStdCostConvItemRecId
               && inventStdCostConvItem.Status    == InventStdCostConvItemStatus::Checked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, #CurrentList, base] = packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the model group of the item to the new standard cost model group.
    /// </summary>
    protected void updateItem()
    {
        // Read inventModelGroupItem forupdate
        InventModelGroupItem inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(inventStdCostConvItem.ItemId, inventStdCostConvItem.DataAreaId, true);

        // Save the previous model group id
        prevModelGroupId = inventModelGroupItem.ModelGroupId;

        // Now update the model group to the new std cost model group
        inventModelGroupItem.ModelGroupId = inventStdCostConvItem.ModelGroupId;
        inventModelGroupItem.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventStdCostConvert_Item</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventStdCostConvert_Item</c> class from the inventory standard cost
    ///    convert work type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function is called by using an invalid conversion work type.
    /// </exception>
    public static InventStdCostConvert_Item construct()
    {
        return new InventStdCostConvert_Item();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS121590";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>