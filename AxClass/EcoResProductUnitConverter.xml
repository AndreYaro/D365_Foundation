<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductUnitConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles conversion between units for a product (distinct product or variant).
/// It should always be used when converting in a product context, instead of going directly to the UnitOfMeasureConverter.
/// </summary>
public class EcoResProductUnitConverter
{
    ItemId                  itemId;
    InventDimId             inventDimId;
    RefRecId                distinctProduct;
    UnitOfMeasureFromRecId  fromUnitOfMeasureRecId;
    UnitOfMeasureToRecId    toUnitOfMeasureRecId;
    NoYes                   roundAbsoluteValue;
    NoYes                   applyRounding;
    boolean                 skipException;

    EcoResReleasedProductUnitConverter  releasedProductUnitConverter;
    UnitOfMeasureConverter              unitOfMeasureConverter;
    boolean                             isConverterInitialized;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProductUnitConversionPerVariantEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product unit conversion per variant is enabled.
    /// </summary>
    /// <returns>true if the product unit conversion per variant is enabled; otherwise, false.</returns>
    [Hookable(false)]
    public final static boolean isProductUnitConversionPerVariantEnabled()
    {
        return EcoResProductUnitConverter::isProductUnitConversionPerVariantFlightEnabled()
            && EcoResProductUnitConverter::mustValidateProductVariantUnitConversionProcesses();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProductVariantUnitConversionProcesses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product unit conversion per variant feature is enabled through feature management.
    /// </summary>
    /// <returns>true if the product unit conversion validation succeeded; otherwise, false.</returns>
    protected static boolean mustValidateProductVariantUnitConversionProcesses()
    {
        return EcoResProductUnitConversionPerVariantFeatureExposure::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductUnitConversionPerVariantFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product unit conversion per variant is enabled in flight mode.
    /// </summary>
    /// <returns>true if the product unit conversion per variant is enabled in flight mode; otherwise, false.</returns>
    [Hookable(false), SysObsolete('isProductUnitConversionPerVariantFlightEnabled is obsolete, as the feature is now controlled through the feature management.', false, 30\06\2020)]
    public final static boolean isProductUnitConversionPerVariantFlightEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a real value between two units of measures.
    /// </summary>
    /// <param name="_value">
    ///    A real value to convert.
    /// </param>
    /// <returns>
    ///    The converted real value.
    /// </returns>
    public real convertValue(real _value)
    {
        if (!UnitOfMeasureConverter::isConversionNeeded(fromUnitOfMeasureRecId, toUnitOfMeasureRecId, applyRounding))
        {
            return _value;
        }

        this.initConverter();

        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
        {
            return releasedProductUnitConverter.convert(_value, fromUnitOfMeasureRecId, toUnitOfMeasureRecId, roundAbsoluteValue, itemId, inventDimId, applyRounding);
        }
        else
        {
            return unitOfMeasureConverter.convertValue(_value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canValueBeConverted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether conversion can be performed between the from and to units of measures.
    /// </summary>
    /// <returns>
    ///    true if conversion can be performed between two units of measure; otherwise, false.
    /// </returns>
    public boolean canValueBeConverted()
    {
        if (UnitOfMeasureConverter::canBeConvertedWithoutLookup(fromUnitOfMeasureRecId, toUnitOfMeasureRecId))
        {
            return true;
        }

        this.initConverter();

        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
        {
            return releasedProductUnitConverter.canBeConverted(fromUnitOfMeasureRecId, toUnitOfMeasureRecId, itemId, inventDimId);
        }
        else
        {
            return unitOfMeasureConverter.canValueBeConverted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cachedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>UnitOfMeasureConversionCache</c> object containing cached conversions.
    /// </summary>
    /// <returns>
    ///  The <c>UnitOfMeasureConversionCache</c> object.
    /// </returns>
    public UnitOfMeasureConversionCache cachedConversion()
    {
        if (unitOfMeasureConverter != null)
        {
            return unitOfMeasureConverter.cachedConversion();
        }

        if (releasedProductUnitConverter != null)
        {
            return releasedProductUnitConverter.cachedConversion();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeConvertedForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether conversion can be performed between two specified units of measures in the context of a released product.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_value">The value to convert</param>
    /// <param name = "_fromUnitOfMeasure">The unit of measure to convert from.</param>
    /// <param name = "_toUnitOfMeasure">The unit of measure to convert to.</param>
    /// <returns>
    ///    true if conversion can be performed between two units of measure; otherwise, false.
    /// </returns>
    public static boolean canBeConvertedForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure)
    {
        return EcoResProductUnitConverter::newForReleasedProduct(_itemId, _inventDimId, _fromUnitOfMeasure, _toUnitOfMeasure, false, true)
                                            .canValueBeConverted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeConvertedGivenUnitSymbolsForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether conversion can be performed between two specified units of measures in the context of a released product.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_fromUnitOfMeasureSymbol">The unit of measure to convert from.</param>
    /// <param name = "_toUnitOfMeasureSymbol">The unit of measure symbol to convert to.</param>
    /// <returns>
    ///    true if conversion can be performed between two units of measure; otherwise, false.
    /// </returns>
    public static boolean canBeConvertedGivenUnitSymbolsForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        UnitOfMeasureSymbol     _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol     _toUnitOfMeasureSymbol)
    {
        return EcoResProductUnitConverter::canBeConvertedForReleasedProduct(
            _itemId,
            _inventDimId,
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasureSymbol),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasureSymbol));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value between two units of measure in the context of a released product.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_value">The value to convert</param>
    /// <param name = "_fromUnitOfMeasure">The unit of measure to convert from.</param>
    /// <param name = "_toUnitOfMeasure">The unit of measure to convert to.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>The converted value.</returns>
    public static real convertForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        real                    _value,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        return EcoResProductUnitConverter::newForReleasedProduct(_itemId, _inventDimId, _fromUnitOfMeasure, _toUnitOfMeasure, _roundAbsoluteValue, _applyRounding)
                                            .convertValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertGivenUnitSymbolsForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value between two units of measure in the context of a released product.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_value">The value to convert</param>
    /// <param name = "_fromUnitOfMeasureSymbol">The unit of measure symbol to convert from.</param>
    /// <param name = "_toUnitOfMeasureSymbol">The unit of measure symbol to convert to.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>The converted value.</returns>
    public static real convertGivenUnitSymbolsForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        real                    _value,
        UnitOfMeasureSymbol     _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol     _toUnitOfMeasureSymbol,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        return EcoResProductUnitConverter::convertForReleasedProduct(
            _itemId,
            _inventDimId,
            _value,
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasureSymbol),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasureSymbol),
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductUnitConverter construct()
    {
        return new EcoResProductUnitConverter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new converter in the context of a released product and from/to unit of measures.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_fromUnitOfMeasure">The unit of measure to convert from.</param>
    /// <param name = "_toUnitOfMeasure">The unit of measure to convert to.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>A new converter.</returns>
    public static EcoResProductUnitConverter newForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        EcoResProductUnitConverter converter = EcoResProductUnitConverter::construct();
        converter.parmItemId(_itemId);
        converter.parmInventDimId(_inventDimId);
        converter.parmFromUnitOfMeasureRecId(_fromUnitOfMeasure);
        converter.parmToUnitOfMeasureRecId(_toUnitOfMeasure);
        converter.parmRoundAbsoluteValue(_roundAbsoluteValue);
        converter.parmApplyRounding(_applyRounding);
        return converter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGivenUnitSymbolsForReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new converter in the context of a released product and from/to unit of measures.
    /// </summary>
    /// <param name = "_itemId">The item to convert for.</param>
    /// <param name = "_inventDimId">The dimension to convert for.</param>
    /// <param name = "_fromUnitOfMeasureSymbol">The unit of measure symbol to convert from.</param>
    /// <param name = "_toUnitOfMeasureSymbol">The unit of measure symbol to convert to.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>A new converter.</returns>
    public static EcoResProductUnitConverter newGivenUnitSymbolsForReleasedProduct(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        UnitOfMeasureSymbol     _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol     _toUnitOfMeasureSymbol,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        return EcoResProductUnitConverter::newForReleasedProduct(
            _itemId,
            _inventDimId,
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasureSymbol),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasureSymbol),
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new converter in the context of a distinct product and from/to unit of measures.
    /// </summary>
    /// <param name = "_distinctProduct">The distinct product record id.</param>
    /// <param name = "_fromUnitOfMeasure">The unit of measure to convert from.</param>
    /// <param name = "_toUnitOfMeasure">The unit of measure to convert to.</param>
    /// <param name = "_roundAbsoluteValue">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>A new converter.</returns>
    /// <remarks>The distinct product record parameter should not reference a product master.</remarks>
    public static EcoResProductUnitConverter newForDistinctProduct(
        RefRecId                 _distinctProduct,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        EcoResProductUnitConverter converter = EcoResProductUnitConverter::construct();
        converter.parmDistinctProduct(_distinctProduct);
        converter.parmFromUnitOfMeasureRecId(_fromUnitOfMeasure);
        converter.parmToUnitOfMeasureRecId(_toUnitOfMeasure);
        converter.parmRoundAbsoluteValue(_roundAbsoluteValue);
        converter.parmApplyRounding(_applyRounding);
        return converter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGivenUnitSymbolsForDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new converter in the context of a distinct product and from/to unit of measures.
    /// </summary>
    /// <param name = "_distinctProduct">The distinct product record id.</param>
    /// <param name = "_fromUnitOfMeasure">The unit of measure symbol to convert from.</param>
    /// <param name = "_fromUnitOfMeasureSymbol">The unit of measure symbol to convert to.</param>
    /// <param name = "_toUnitOfMeasureSymbol">A Boolean that determines if rounding should be done according to the absolute value; optional.</param>
    /// <param name = "_applyRounding">A Boolean that determines if rounding should be performed after conversion; optional.</param>
    /// <returns>A new converter.</returns>
    /// <remarks>The distinct product record parameter should not reference a product master.</remarks>
    public static EcoResProductUnitConverter newGivenUnitSymbolsForDistinctProduct(
        RefRecId                 _distinctProduct,
        UnitOfMeasureSymbol     _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol     _toUnitOfMeasureSymbol,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        return EcoResProductUnitConverter::newForDistinctProduct(
            _distinctProduct,
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasureSymbol),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasureSymbol),
            _roundAbsoluteValue,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConverter</Name>
				<Source><![CDATA[
    private void initConverter()
    {
        if(!isConverterInitialized)
        {
            if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
            {
                // EcoResReleasedProductUnitConverter doesn't have a constructor that take all parameter the convert,
                // instead the instance method take all the parameters.
                releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
                releasedProductUnitConverter.parmSkipException(skipException);

                if (distinctProduct)
                {
                    InventDistinctProduct inventDistinctProduct = InventDistinctProduct::findByProduct(distinctProduct);
                    if (inventDistinctProduct)
                    {
                        this.parmItemId(inventDistinctProduct.ItemId);
                        this.parmInventDimId(inventDistinctProduct.InventDimId);
                    }
                    else
                    {
                        throw error(strFmt("@SYS113080", distinctProduct, tableStr(InventDistinctProduct)));
                    }
                }
            }
            else
            {
                RefRecId localProductRecordId;
                if (distinctProduct)
                {
                    EcoResProduct ecoResProduct = EcoResProduct::find(distinctProduct);
                    if (ecoResProduct.isDistinctProductVariant())
                    {
                        EcoResDistinctProductVariant ecoResProductVariant = ecoResProduct as EcoResDistinctProductVariant;
                        localProductRecordId = ecoResProductVariant.ProductMaster;
                    }
                    else
                    {
                        throw error(strFmt("@SYS113080", distinctProduct, tableStr(EcoResDistinctProductVariant)));
                    }
                }
                else
                {
                    localProductRecordId = InventTable::find(itemId).Product;
                }
                
                unitOfMeasureConverter = UnitOfMeasureConverter::newFromConversionParameters(
                    fromUnitOfMeasureRecId,
                    toUnitOfMeasureRecId,
                    roundAbsoluteValue,
                    localProductRecordId,
                    applyRounding);

                unitOfMeasureConverter.parmSkipException_LV(skipException);
                
                if (!UnitOfMeasureConverter::canBeConvertedWithoutLookup(fromUnitOfMeasureRecId, toUnitOfMeasureRecId))
                {
                    unitOfMeasureConverter.checkProductConversionRule();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmIsDefault(_itemId))
        {
            isConverterInitialized = false;
        }

        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        if (!prmIsDefault(_inventDimId))
        {
            isConverterInitialized = false;
        }

        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistinctProduct</Name>
				<Source><![CDATA[
    public RefRecId parmDistinctProduct(RefRecId _distinctProduct = distinctProduct)
    {
        if (!prmIsDefault(_distinctProduct))
        {
            isConverterInitialized = false;
        }

        distinctProduct = _distinctProduct;
        return distinctProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromUnitOfMeasureRecId</Name>
				<Source><![CDATA[
    public UnitOfMeasureFromRecId parmFromUnitOfMeasureRecId(UnitOfMeasureFromRecId _fromUnitOfMeasureRecId = fromUnitOfMeasureRecId)
    {
        if (!prmIsDefault(_fromUnitOfMeasureRecId))
        {
            isConverterInitialized = false;
        }

        fromUnitOfMeasureRecId = _fromUnitOfMeasureRecId;
        return fromUnitOfMeasureRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmFromUnitOfMeasureSymbol(UnitOfMeasureSymbol _fromUnitOfMeasureSymbol = '')
    {
        if (!prmIsDefault(_fromUnitOfMeasureSymbol))
        {
            this.parmFromUnitOfMeasureRecId(EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasureSymbol));

            isConverterInitialized = false;
            return _fromUnitOfMeasureSymbol;
        }

        return UnitOfMeasure::find(fromUnitOfMeasureRecId).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToUnitOfMeasureRecId</Name>
				<Source><![CDATA[
    public UnitOfMeasureToRecId parmToUnitOfMeasureRecId(UnitOfMeasureToRecId _toUnitOfMeasureRecId = toUnitOfMeasureRecId)
    {
        if (!prmIsDefault(_toUnitOfMeasureRecId))
        {
            isConverterInitialized = false;
        }

        toUnitOfMeasureRecId = _toUnitOfMeasureRecId;
        return toUnitOfMeasureRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmToUnitOfMeasureSymbol(UnitOfMeasureSymbol _toUnitOfMeasureSymbol = '')
    {
        if (!prmIsDefault(_toUnitOfMeasureSymbol))
        {
            this.parmToUnitOfMeasureRecId(EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasureSymbol));

            isConverterInitialized = false;
            return _toUnitOfMeasureSymbol;
        }

        return UnitOfMeasure::find(toUnitOfMeasureRecId).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoundAbsoluteValue</Name>
				<Source><![CDATA[
    public NoYes parmRoundAbsoluteValue(NoYes _roundAbsoluteValue = roundAbsoluteValue)
    {
        if (!prmIsDefault(_roundAbsoluteValue))
        {
            isConverterInitialized = false;
        }

        roundAbsoluteValue = _roundAbsoluteValue;
        return roundAbsoluteValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplyRounding</Name>
				<Source><![CDATA[
    public NoYes parmApplyRounding(NoYes _applyRounding = applyRounding)
    {
        if (!prmIsDefault(_applyRounding))
        {
            isConverterInitialized = false;
        }

        applyRounding = _applyRounding;
        return applyRounding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipException</Name>
				<Source><![CDATA[
    /// <summary>
    /// When parameter <c>_skipException</c> is true then exceptions will not be generated when converting value.
    /// </summary>
    /// <param name = "_skipException">A Boolean parameter that specifies if exception should be skipped; optional.</param>
    /// <returns>true if the exception should be skipped; otherwise, false.</returns>
    boolean parmSkipException(boolean _skipException = skipException)
    {
        if (!prmIsDefault(_skipException))
        {
            isConverterInitialized = false;
        }

        skipException = _skipException;
        
        return skipException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRequiredProductDimensionsForUnitConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the item has product variants,
    /// that the dimension has all the necessary dimensions set.
    /// </summary>
    /// <param name = "_itemId">
    /// The item ID that is being validated.
    /// </param>
    /// <param name = "_inventDim">
    /// The dimension set being checked as a valid product variant combination.
    /// </param>
    /// <returns>
    /// true if the product does not have variants or the dimensions provided are a valid combination;
    /// otherwise, false
    /// </returns>
    public static boolean hasRequiredProductDimensionsForUnitConversion(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        EcoResProduct product = EcoResProduct::find(InventTable::find(_itemId).Product);

        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled()
            && product.isProductMasterWithProductVariantConversionEnabled()
            && !InventDimCombination::existByInventDim(_itemId, _inventDim))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductMasterWithProductVariantConversionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the product is a product master with variant conversion is enabled.
    /// </summary>
    /// <param name = "_itemId">The item ID for conversions.</param>
    /// <returns>true if the product is a product master with variant conversion is enabled.; otherwise, false</returns>
    public static boolean isProductMasterWithProductVariantConversionEnabled(ItemId _itemId)
    {
        return EcoResProductUnitConverter::mustProductVariantsHaveSpecificConversion(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProductVariantsHaveSpecificConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the product is a product master with variant conversion is enabled.
    /// </summary>
    /// <param name = "_itemId">The item ID for conversions.</param>
    /// <returns>true if the product is a product master with variant conversion is enabled.; otherwise, false</returns>
    public static boolean mustProductVariantsHaveSpecificConversion(ItemId _itemId)
    {
        return EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled()
            && EcoResProduct::find(InventTable::find(_itemId).Product).isProductMasterWithProductVariantConversionEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existConversionForAllVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all variants have conversions setup.
    /// </summary>
    /// <param name = "_fromUnitOfMeasureSymbol">The from unit for conversion.</param>
    /// <param name = "_toUnitOfMeasureSymbol">The to unit for conversion.</param>
    /// <param name = "_productMaster">The product master of the variants to check if all conversions are setup.</param>
    /// <returns>true if all variants have conversions; otherwise, false</returns>
    public static boolean existConversionForAllVariants(
        UnitOfMeasureSymbol _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol _toUnitOfMeasureSymbol,
        EcoResProductRecId  _productMaster)
    {
        UnitOfMeasureFromRecId fromRecId = UnitOfMeasure::findBySymbol(_fromUnitOfMeasureSymbol).RecId;
        UnitOfMeasureToRecId   toRecId   = UnitOfMeasure::findBySymbol(_toUnitOfMeasureSymbol).RecId;

        if (UnitOfMeasureConverter::canBeConverted(fromRecId, toRecId, 0, true))
        {
            return true;
        }

        ItemId                          item = InventTable::findByProduct(_productMaster).ItemId;
        InventDimCombination            dimCombination;
        EcoResDistinctProductVariant    distinctProductVariant;
        boolean                         canConvert;

        while select InventDimId from dimCombination
            exists join distinctProductVariant
                where distinctProductVariant.RecId          == dimCombination.DistinctProductVariant
                &&    distinctProductVariant.ProductMaster  == _productMaster
        {
            canConvert = EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(item,
                                                                                                      dimCombination.InventDimId,
                                                                                                      _fromUnitOfMeasureSymbol,
                                                                                                      _toUnitOfMeasureSymbol);

            if (!canConvert)
            {
                break;
            }
        }

        return canConvert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existConversionForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if product has conversions setup.
    /// </summary>
    /// <param name = "_fromUnitOfMeasureSymbol">The from unit for conversion.</param>
    /// <param name = "_toUnitOfMeasureSymbol">The to unit for conversion.</param>
    /// <param name = "_productMaster">The product master of the variants to check if all conversions are setup.</param>
    /// <returns>true if all variants have conversions; otherwise, false</returns>
    public static boolean existConversionForProductMaster(
        UnitOfMeasureSymbol _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol _toUnitOfMeasureSymbol,
        EcoResProductRecId  _productMaster)
    {
        UnitOfMeasureFromRecId fromRecId = UnitOfMeasure::findBySymbol(_fromUnitOfMeasureSymbol).RecId;
        UnitOfMeasureToRecId   toRecId   = UnitOfMeasure::findBySymbol(_toUnitOfMeasureSymbol).RecId;

        ItemId item = InventTable::findByProduct(_productMaster).ItemId;

        if (EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(item, InventDim::inventDimIdBlank(), _fromUnitOfMeasureSymbol, _toUnitOfMeasureSymbol))
        {
            return true;
        }

        return EcoResProductUnitConverter::existConversionForAllVariants(_fromUnitOfMeasureSymbol, _toUnitOfMeasureSymbol, _productMaster);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>