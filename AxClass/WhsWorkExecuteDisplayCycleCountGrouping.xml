<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayCycleCountGrouping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle cycle count grouping.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::CycleCountGrouping)]
public class WhsWorkExecuteDisplayCycleCountGrouping extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCycleCountGrouping</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for screen of cycle count grouping.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    private container buildCycleCountGrouping(container _con)
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, "@SYS53388", WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #StartLocationId, "@WAX4083", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
        ret += [this.buildControl(#RFText, #ZoneId, "@WAX250", 1, '', extendedTypeNum(WHSZoneId), '', 0)];
        ret = this.buildWorkPoolId(ret, '', true, pass.lookupStr(#SelectedWorkPoolId));

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkPoolId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Adds controls to form state for selecting work pool id.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_label">
	/// Label text.
	/// </param>
	/// <param name="_showBlank">
	/// Determines whether the combobox for work pool allow blank, false by default.
	/// </param>
	/// <param name="_selected">
	/// Selected combobox element, empty string by default.
	/// </param>
	/// <param name="_enabled">
	/// Determines whether the combobox is enabled, true by default.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    private container buildWorkPoolId(container    _con,
                              str          _label = '',
                              boolean      _showBlank = false,
                              str          _selected = '',
                              boolean      _enabled = true)
    {
        WHSWorkPool         workPool;
        container           ret = _con;
        boolean             first = true;
        str                 elements;
        str                 label = _label ? _label : "@WAX4084";   // Work Pool

        if (_showBlank)
        {
            elements = '||';
        }

        while select WorkPoolId from workPool
        {
            if (first)
            {
                elements += workPool.WorkPoolId;
                first = false;
            }
            else
            {
                elements = elements + '||' + workPool.WorkPoolId;
            }
        }

        if (!_enabled && _selected)
        {
            ret += [this.buildControl(#RFCombobox, #WorkPoolId, label, 1, _selected, #WHSRFUndefinedDataType, '', 0, _enabled, _selected, WHSRFColorText::Default, extendedTypeNum(WHSWorkPoolId))];
        }
        else
        {
            ret += [this.buildControl(#RFCombobox, #WorkPoolId, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected ? _selected : '', WHSRFColorText::Default, extendedTypeNum(WHSWorkPoolId))];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container                       ret = conNull();
        container                       con = _con;
        int                             hasError;
        boolean                         complete;
        Map                             fieldValues;
        Map                             globalPass;
        container                       tmpFieldValues;
        WHSWorkId                       cycleCountWorkId;
        WHSWorkExecuteDisplayCycleCount workExecuteDisplayCycleCount;
        WHSZoneId                       tmpZoneId;
        WMSLocationId                   tmpStartLocationId;
        WHSWorkPoolId                   tmpWorkPoolId;
        InventLocationId                tmpInventLocationId;

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(_con);

        switch (step)
        {
            case 0:
                ret = this.buildCycleCountGrouping(ret);
                pass.insert(#Initiation, 1);
                step = 1;
                break;

            case 1:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                con = this.buildCycleCountGrouping(ret);

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (!pass.exists(#Initiation))
                {
                    cycleCountWorkId = this.findCycleCountWork().WorkId;

                    if (!cycleCountWorkId)
                    {
                        ret = conNull();
                        ret = this.addErrorLabel(ret, "@WAX1834", WHSRFColorText::Error);
                        ret = this.buildCycleCountGrouping(ret);
                        pass.insert(#Initiation, 1);
                        step = 1;
                        break;
                    }
                    else
                    {
                        pass.insert(#WorkId, cycleCountWorkId);
                        pass.parmLineNum(1);
                        workExecuteDisplayCycleCount = WHSWorkExecuteDisplay::construct(WhsWorkExecuteMode::CycleCounting);
                        ret = this.updateModeStepPass(ret, mode, step, pass);
                        ret = workExecuteDisplayCycleCount.displayForm(ret, _buttonClicked);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    }
                }
                else
                {
                    pass.remove(#Initiation);
                }
                break;

            default:
                workExecuteDisplayCycleCount = WHSWorkExecuteDisplay::construct(WhsWorkExecuteMode::CycleCounting);
                ret = this.updateModeStepPass(con, WHSWorkExecuteMode::CycleCountGrouping, step, pass);

                tmpZoneId           = pass.lookup(#ZoneId);
                tmpStartLocationId  = pass.lookup(#StartLocationId);
                tmpWorkPoolId       = pass.lookup(#SelectedWorkPoolId);
                tmpInventLocationId = pass.lookup(#InventLocationId);

                ret = workExecuteDisplayCycleCount.displayForm(ret, _buttonClicked);
                pass = WHSRFPassthrough::create(conPeek(ret, 2));

                if (!pass.exists(#WorkId))
                {
                    pass.insert(#ZoneId, tmpZoneId);
                    pass.insert(#StartLocationId, tmpStartLocationId);
                    pass.insert(#SelectedWorkPoolId, tmpWorkPoolId);
                    pass.insert(#InventLocationId, tmpInventLocationId);

                    cycleCountWorkId = this.findCycleCountWork().WorkId;

                    if (!cycleCountWorkId)
                    {
                        ret = conNull();
                        ret = this.addErrorLabel(ret, "@WAX1834", WHSRFColorText::Error);
                        ret = this.buildCycleCountGrouping(ret);
                        pass.insert(#Initiation, 1);
                        step = 1;
                        break;
                    }
                    else
                    {
                        pass.insert(#WorkId, cycleCountWorkId);
                        pass.parmLineNum(1);
                        ret = this.updateModeStepPass(ret, mode, step, pass);
                        ret = workExecuteDisplayCycleCount.displayForm(ret);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    }
                }
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCycleCountWorkIdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for selecting the cycle count work id.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query buildCycleCountWorkIdQuery()
    {
        WMSLocationId           startLocationId = pass.lookupStr(#StartLocationId);
        InventLocationId        warehouseId = pass.lookup(#InventLocationId);
        WHSMenuItemName         menuItemName = pass.lookup(#MenuItem);
        WHSWorkPoolId           workPoolId = pass.lookupStr(#SelectedWorkPoolId);
        WHSZoneId               zoneId = pass.lookupStr(#ZoneId);
        Query                   query = new Query();
        WHSRFMenuItemLine       menuItemLine;

        QueryBuildDataSource qbdsWorkTable = query.addDataSource(tableNum(WHSWorkTable));
        qbdsWorkTable.firstOnly(true);

        if (!startLocationId)
        {
            qbdsWorkTable.addSortField(fieldNum(WHSWorkTable, WorkPriority), SortOrder::Ascending);
        }

        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, InventLocationId)).value(queryValue(warehouseId));
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, WorkTransType)).value(queryValue(WHSWorkTransType::CycleCount));
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, WorkStatus)).value(queryValue(WHSWorkStatus::Open));
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, WorkStatus)).value(queryValue(WHSWorkStatus::InProcess));
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, LockedUser)).value(queryValue(''));
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, LockedUser)).value(queryValue(userId));

        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, Frozen)).value(queryValue(NoYes::No));
        if (workPoolId)
        {
            qbdsWorkTable.addRange(fieldNum(WHSWorkTable, WorkPoolId)).value(queryValue(workPoolId));
        }

        QueryBuildDataSource qbdsWorkLine = qbdsWorkTable.addDataSource(tableNum(WHSWorkLine));
        qbdsWorkLine.relations(true);

        qbdsWorkLine.addSortField(fieldNum(WHSWorkLine, wmsLocationId), SortOrder::Ascending);

        if (startLocationId)
        {
            qbdsWorkLine.addRange(fieldNum(WHSWorkLine, wmsLocationId)).value(SysQuery::range(startLocationId, ''));
        }

        if (zoneId)
        {
            var qbdsWMSLocation = qbdsWorkLine.addDataSource(tableNum(WMSLocation));
            qbdsWMSLocation.relations(true);
            qbdsWMSLocation.fetchMode(QueryFetchMode::One2One);
            // Since the relation from WHSWorkLine to WMSLocation lacks InventLocationId, add an explicit range here.
            qbdsWMSLocation.addRange(fieldNum(WMSLocation, inventLocationId)).value(queryValue(warehouseId));

            qbdsWMSLocation.addRange(fieldNum(WMSLocation, ZoneId)).value(queryValue(zoneId));
        }

        select firstonly RecId from menuItemLine
            where menuItemLine.MenuItemName == menuItemName;

        if (menuItemLine.RecId != 0)
        {
            var qbdsWorkClass = qbdsWorkLine.addDataSource(tableNum(WHSWorkClassTable));
            qbdsWorkClass.addLink(fieldNum(WHSWorkLine, WorkClassId), fieldNum(WHSWorkClassTable, WorkClassId));
            qbdsWorkClass.fetchMode(QueryFetchMode::One2One);

            var qbdsRFMenuItemLine = qbdsWorkClass.addDataSource(tableNum(WHSRFMenuItemLine));
            qbdsRFMenuItemLine.relations(true);
            qbdsRFMenuItemLine.fetchMode(QueryFetchMode::One2One);

            qbdsRFMenuItemLine.addRange(fieldNum(WHSRFMenuItemLine, MenuItemName)).value(queryValue(menuItemName));
        }

        this.excludePartialCycleCountWorkForBlindCycleCount(qbdsWorkTable, menuItemName);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCycleCountWork</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds cycle count work.
	/// </summary>
	/// <returns>
	/// The cycle count work.
	/// </returns>
    protected WHSWorkTable findCycleCountWork()
    {
        var queryRun = new QueryRun(this.buildCycleCountWorkIdQuery());

        queryRun.next();

        return queryRun.get(tableNum(WHSWorkTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludePartialCycleCountWorkForBlindCycleCount</Name>
				<Source><![CDATA[
    private void excludePartialCycleCountWorkForBlindCycleCount(QueryBuildDataSource _qbdsWorkTable, WHSMenuItemName _menuItemName)
    {
        if (!WHSRFMenuItemCycleCount::find(_menuItemName).BlindItem)
        {
            _qbdsWorkTable.addRange(fieldNum(WHSWorkTable, IsPartialCycleCountWork)).value(SysQuery::value(NoYes::No));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>