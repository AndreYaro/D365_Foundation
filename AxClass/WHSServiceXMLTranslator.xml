<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSServiceXMLTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EnvironmentFactory = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory;

/// <summary>
/// Parent class for serializing and deserializing the xml received from external warehouse devices
/// </summary>
public class WHSServiceXMLTranslator
{
    #WHSWorkExecuteControlElements
    #WHSWorkExecuteDisplayCases
    #WHSRF
    #XmlDocumentation


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readXMLDoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the xml information into a container.
    /// </summary>
    /// <param name = "_xmlString">xml to be parsed.</param>
    /// <returns>
    /// Container with parsed data.
    /// </returns>
    public container readXMLDoThrow(XML _xmlString)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the container information into xml.
    /// </summary>
    /// <param name = "_con">
    /// Container to be read.
    /// </param>
    /// <returns>
    /// The serialized xml string.
    /// </returns>
    public XML createXML(container _con)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromXMLDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for Constructing an xml translator class.
    /// </summary>
    /// <param name = "_xmlString">The current form state as XML</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where a subclass of <c>WHSServiceXMLTranslator</c> can be returned.</param>
    static delegate void constructFromXMLDelegate(XML _xmlString, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs xml translator class based on the xml schema
    /// </summary>
    /// <param name = "_xmlString">The current form state as XML</param>
    /// <returns>
    /// An object of the subclasses of <c>WHSServiceXMLTranslator</c>.
    /// </returns>
    public static WHSServiceXMLTranslator constructFromXML(XML _xmlString)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        WHSServiceXMLTranslator::constructFromXMLDelegate(_xmlString, result);
        if (result.hasResult())
        {
            return result.result() as WHSServiceXMLTranslator;
        }

        if (strContains(_xmlString, #XMLControlPagePattern) > 0)
        {
            return WHSMobileAppServiceXMLTranslator::construct();
        }
        else
        {
            return WHSMobileDeviceServiceXMLTranslator::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAuthenticationNode</Name>
				<Source><![CDATA[
    protected void addAuthenticationNode(System.Xml.XmlTextWriter _xmlTextWriter, WhsrfPassthrough _pass)
    {
        if (_pass)
        {
            if (_pass.exists(#UserId) && _pass.exists(#UserSessionId))
            {
                _xmlTextWriter.WriteStartElement(#XMLAuthenticationNode);
                _xmlTextWriter.WriteAttributeString(#XMLAuthNodeUserId, _pass.lookup(#UserId));
                _xmlTextWriter.WriteAttributeString(#XMLAuthNodeUserGUID, WHSWorkUser::getTelemetryId(_pass.lookup(#UserId)));
                _xmlTextWriter.WriteAttributeString(#XMLAuthNodeSessionId, _pass.lookup(#UserSessionId));

                if (_pass.parmSessionToken() != emptyGuid())
                {
                    _xmlTextWriter.WriteAttributeString(#XMLSessionToken, guid2Str(_pass.parmSessionToken()));
                }

                _xmlTextWriter.WriteEndElement();
            }

            // The user language and date format settings are updated at session authentication
            _xmlTextWriter.WriteStartElement(#XMLUserCulture);
            _xmlTextWriter.WriteString(infolog.language());
            _xmlTextWriter.WriteEndElement();
            _xmlTextWriter.WriteStartElement(#XMLUserDateCulture);
            _xmlTextWriter.WriteString(WHSParameters::getCurrentUserDateCulture(_pass.lookupStr(#UserId)));
            _xmlTextWriter.WriteEndElement();
            
            boolean connectionStringProvided = false;
            if (WHSApplicationInsightsConnectionStringProviderFlight::instance().isEnabled() &&
                SysIntParameters::find().CaptureWarehouseEvents)
            {
                str connectionString = SysApplicationInsightsConnectionstringProvider::connectionString();
                if (connectionString)
                {
                    _xmlTextWriter.WriteStartElement(#XMLApplicationInsightsConnectionString);
                    _xmlTextWriter.WriteString(connectionString);
                    _xmlTextWriter.WriteEndElement();
                    connectionStringProvided = true;
                }
            }

            if (!connectionStringProvided && 
                WHSOperationInsightsKeyProviderV2Flight::instance().isEnabled())
            {
                _xmlTextWriter.WriteStartElement(#XMLOperationalInsightsInstrumentationKey);
                _xmlTextWriter.WriteString(WHSOperationInsightsKeyProvider::instrumentationKey());
                _xmlTextWriter.WriteEndElement();
            }

            var environment = EnvironmentFactory::GetApplicationEnvironment();

            _xmlTextWriter.WriteStartElement(#XMLServerAadTenantId);
            _xmlTextWriter.WriteString(environment.Aad.TenantDomainGUID);
            _xmlTextWriter.WriteEndElement();
            _xmlTextWriter.WriteStartElement(#XMLServerEnvironmentId);
            _xmlTextWriter.WriteString(environment.LCS.LCSEnvironmentId);
            _xmlTextWriter.WriteEndElement();

            _xmlTextWriter.WriteStartElement(#XMLServerAzureRegion);
            _xmlTextWriter.WriteString(environment.Common.AzureRegion);
            _xmlTextWriter.WriteEndElement();
            _xmlTextWriter.WriteStartElement(#XMLServerVersion);
            _xmlTextWriter.WriteString(this.versionNumber());
            _xmlTextWriter.WriteEndElement();

            if (Global::isOnPremEnvironment())
            {
                _xmlTextWriter.WriteStartElement(#XMLServerOnPrem);
                _xmlTextWriter.WriteString('true');
                _xmlTextWriter.WriteEndElement();
            }

            _xmlTextWriter.WriteStartElement(#XMLBatchFlightsEnabled);
            _xmlTextWriter.WriteEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>versionNumber</Name>
				<Source><![CDATA[
    private str versionNumber()
    {
        Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider provider = Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::get_Provider();
        return provider.get_ApplicationVersion();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>