<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlWFResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlWFResolver</c> class is an abstract class that is used to resolve a
///    <c>WorkflowContext</c> object to a set of primary ledger and source ledger dimension combinations
///    to be budget checked.
/// </summary>
abstract class BudgetControlWFResolver
{
    WorkflowContext context;

    // Set used to track the resolved PrimaryLedger + SourceLedgerDimension combinations to be budget checked.
    // The combinations are stored as a container.
    Set primaryLedgerSourceDimensions;
    SetEnumerator primaryLedgerSourceDimensionsEnumerator;

    // Indexes for the elements within the combination container.
    #define.PrimaryLedgerIndex(1)
    #define.SourceLedgerDimensionIndex(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the primary ledger and source ledger dimension to be budget checked to the resolved set.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimensionRecId">
    ///    The record ID of the source ledger dimension record.
    /// </param>
    public final void add(RecId _primaryLedgerRecId, RecId _ledgerDimensionRecId)
    {
        container combination;

        if (primaryLedgerSourceDimensions &&
            _primaryLedgerRecId &&
            _ledgerDimensionRecId)
        {
            combination = conIns(combination, #PrimaryLedgerIndex, _primaryLedgerRecId);
            combination = conIns(combination, #SourceLedgerDimensionIndex, _ledgerDimensionRecId);

            primaryLedgerSourceDimensions.add(combination);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current primary ledger reference.
    /// </summary>
    /// <returns>
    ///    The current primary ledger reference.
    /// </returns>
    public final LedgerRecId currentPrimaryLedger()
    {
        LedgerRecId primaryLedger;

        if (primaryLedgerSourceDimensionsEnumerator)
        {
            primaryLedger = conPeek(primaryLedgerSourceDimensionsEnumerator.current(), #PrimaryLedgerIndex);
        }

        return primaryLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSourceLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current source ledger dimension reference.
    /// </summary>
    /// <returns>
    ///    The current source ledger dimension reference.
    /// </returns>
    public final LedgerDimensionBase currentSourceLedgerDimension()
    {
        LedgerDimensionBase sourceLedgerDimension;

        if (primaryLedgerSourceDimensionsEnumerator)
        {
            sourceLedgerDimension = conPeek(primaryLedgerSourceDimensionsEnumerator.current(), #SourceLedgerDimensionIndex);
        }

        return sourceLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetControlWFResolver</c> class.
    /// </summary>
    /// <param name="_context">
    ///    The instance of the <c>WorkflowContext</c> class.
    /// </param>
    protected void initialize(WorkflowContext _context)
    {
        context = _context;

        primaryLedgerSourceDimensions = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the enumerator for the <c>BudgetControlWFResolver</c> class instance.
    /// </summary>
    protected void initializeEnumerator()
    {
        if (primaryLedgerSourceDimensions)
        {
            primaryLedgerSourceDimensionsEnumerator = primaryLedgerSourceDimensions.getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next primary ledger and source ledger dimension combination.
    /// </summary>
    /// <returns>
    ///    A Boolean that indicates whether the enumerator successfully advances to the next primary ledger
    ///    and source ledger dimension combination.
    /// </returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (primaryLedgerSourceDimensionsEnumerator)
        {
            hasItem = primaryLedgerSourceDimensionsEnumerator.moveNext();
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the specified instance of the <c>WorkflowContext</c> class into a set of primary ledger and
    ///    source ledger dimension combinations to be budget checked.
    /// </summary>
    /// <param name="_context">
    ///    The instance of the <c>WorkflowContext</c> class to process.
    /// </param>
    protected abstract void process(WorkflowContext _context)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves the <c>WorkflowContext</c> class into the set of primary ledger and source ledger
    ///    dimension combinations to be budget checked.
    /// </summary>
    /// <remarks>
    ///    The enumerator for the set is initialized after the combinations have been resolved.
    /// </remarks>
    public void resolve()
    {
        // Process the workflow context.
        this.process(context);

        // Initialize the enumerator after processing the workflow context which populated the set.
        this.initializeEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetControlWFResolver</c> class.
    /// </summary>
    /// <param name="_context">
    ///    The instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlWFResolver</c> class when the workflow type is supported; otherwise, null.
    /// </returns>
    public static BudgetControlWFResolver construct(WorkflowContext _context)
    {
        BudgetControlWFResolver resolver;

        switch (_context.parmTableId())
        {
            case tablenum(BudgetTransactionHeader):
                resolver = new BudgetControlWFResolverBudgetTrans();
                break;

            case tablenum(BudgetTransactionLine):
                resolver = new BudgetControlWFResolverBudgetTransLine();
                break;

            case tablenum(TrvExpTable):
            case tablenum(TrvExpTrans):
            case tablenum(TrvRequisitionTable):
            case tablenum(TrvRequisitionLine):
                resolver = new TrvExpenditureBudgetControlWFResolver();
                break;
        }

        if (resolver)
        {
            // Initialize the class.
            resolver.initialize(_context);
        }

        return resolver;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>