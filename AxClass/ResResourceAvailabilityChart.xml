<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceAvailabilityChart</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the base chart for all resources chart.
/// </summary>
class ResResourceAvailabilityChart extends AVChartController implements IAVChartController
{
    private const str cacheScope = 'RM';
    private real aggregationFactor;
    private const str collectionKeyDelimiter = '-';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveChartQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the chart query name.
    /// </summary>
    /// <param name = "_timescale">Chart item timescale.</param>
    /// <returns>Chart query name.</returns>
    protected str resolveChartQueryName(AVTimeframeType _timescale)
    {
        return enum2Symbol(enumNum(AVTimeframeType), _timescale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the chart query to be used to get Resource availability chart data.
    /// </summary>
    /// <param name = "_timescale">Chart data aggregation level.</param>
    /// <param name = "_activityResourceId">Resource identifiers.</param>
    /// <param name = "_start">Starting time period.</param>
    /// <param name = "_end">Ending time period.</param>
    /// <returns>Assignment chart data query object.</returns>
    public Query getChartQuery(AVTimeframeType _timescale, str _activityResourceId, utcdatetime _start, utcdatetime _end)
    {
        Query query = new Query(this.resolveChartQueryName(_timescale));

        // set activity resource id
        QueryBuildDataSource dataSource = query.dataSourceNo(1);
        dataSource.range(2).value(curExt());
        if (_activityResourceId)
        {
            dataSource.range(1).value(_activityResourceId);
        }

        // set timeframe
        dataSource = dataSource.childDataSourceNo(1);
        dataSource.range(1).value(queryRange(_start, _end));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Resource availability chart data.
    /// </summary>
    /// <param name = "_collectionKey">Resource id.</param>
    /// <param name = "_start">Starting time period.</param>
    /// <param name = "_end">Ending time period.</param>
    /// <returns>Instance of <c>AvailabilityViewChartDataContract</c>.</returns>
    public AvailabilityViewChartDataContract getChart(str _collectionKey, str _start, str _end)
    {
        AvailabilityView avControl = this.control();
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        container afCache = cache.find(cacheScope, ['AggFtr']);
        aggregationFactor = conPeek(afCache, 1);

        if (!aggregationFactor)
        {
            ResAvailabilityViewContext context = avControl.controlContext();
            aggregationFactor = context ? ResUtil::getCapacityAggregationFactor(context.capacityAggregation()) : 1;
            cache.insert(cacheScope, ['AggFtr'], [aggregationFactor]);
        }

        AVTimeframeType timescale = avControl.timescale();
        utcdatetime start = AVUtil::getDateTime(_start);
        AVTimeframe timeframe = AVTimeframe::getTimeframe(start, timescale);
        start = timeframe.Start();
        utcdatetime end = AVUtil::getDateTime(_end);
        timeframe = AVTimeframe::getTimeframe(end, timescale);
        end = timeframe.End();

        Query query = this.getChartQuery(timescale, _collectionKey, start, end);

        List chartItems = new List(Types::Class);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            chartItems.addEnd(this.resolveEntity(queryRun, _collectionKey));
        }

        AvailabilityViewChartDataContract chart = AvailabilityViewChartDataContract::construct();
        chart.Items(chartItems);
        return chart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves availability view chart item data.
    /// </summary>
    /// <param name = "_itemKey">Chart item id.</param>
    /// <returns>Instance of <c>ChartItemDataContract</c> class.</returns>
    public ChartItemDataContract getChartItem(str _itemKey)
    {
        AvailabilityView avControl = this.control();
        ResAvailabilityViewContext context = avControl.controlContext();
        aggregationFactor = context ? ResUtil::getCapacityAggregationFactor(context.capacityAggregation()) : 1;

        ChartItemDataContract chartItem = ChartItemDataContract::construct();
        chartItem.itemKey(_itemKey);
        chartItem.getKeyFactors();

        utcdatetime startDateTime = AVUtil::getDateTime(chartItem.timelineKey());
        AVTimeframeType timescale = avControl.timescale();

        AVTimeframe timeframe = AVTimeframe::getTimeframe(startDateTime, timescale);
        utcdatetime start = timeframe.Start();
        utcdatetime end = timeframe.End();

        Query query = this.getChartQuery(timescale, chartItem.collectionKey(), start, end);
        QueryRun queryRun = new QueryRun(query);
        queryRun.next();

        chartItem = this.resolveEntity(queryRun, chartItem.collectionKey());

        return chartItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the external Id of the chart item.
    /// </summary>
    /// <param name = "_internalId">activityResourceId of the Chart item.</param>
    /// <returns>External identifier of the Chart item.</returns>
    public str getExternalId(str _internalId)
    {
        str collectionKey;
        str timelineKey;
        [collectionKey, timelineKey] = str2con(_internalId, this.control().delimiter());

        container keys = str2con(collectionKey, collectionKeyDelimiter);
        str name;

        ResourceRecId resource = conPeek(keys, 2);
        if (resource)
        {
            name = ResResourceDataEntity::find(resource).Name;
        }
        else
        {
            name = ActivityResourceFacade::getName(conPeek(keys, 3));
        }

        return strFmt('%1%2%3', name, ResUtil::chartDelimiter, timelineKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the activityResourceId of the chart item.
    /// </summary>
    /// <param name = "_externalId">External identifier of the Chart item.</param>
    /// <returns>Internal identifier of the Chart item.</returns>
    public str getInternalId(str _externalId)
    {
        str internalId = _externalId;
        container chartKeys = str2con(_externalId, ResUtil::chartDelimiter);

        str activityResourceName = conPeek(chartKeys, 1);
        str timelineKey = conPeek(chartKeys, 2);

        ResAvailabilityViewContext context = this.control().controlContext();
        ActivityRecId activity = context.activity();
        PSARSEntityType activityType = context.activityType();
        PSAProjSchedRole activityResource = ActivityResourceFacade::findByName(activity, activityType, activityResourceName);

        ActivityResourceId activityResourceId;

        if (activityResource.RecId)
        {
            activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                activity, activityResource.Resource, activityResource.RecId);
        }
        else
        {
            ResCompanyResourceView resource = ResourceFacade::findByNameV2(activityResourceName);
            activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, 0, resource.Resource, 0);
        }

        internalId = strFmt('%1%2%3', activityResourceId, this.control().delimiter(), timelineKey);
        return internalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the assignment chart item entity.
    /// </summary>
    /// <param name = "_record">Record identifier.</param>
    /// <param name = "_collectionKey">Activity resource identifier.</param>
    /// <returns>Instance of <c>ChartItemDataContract</c>.</returns>
    public ChartItemDataContract resolveEntity(QueryRun _record, str _collectionKey = '')
    {
        return ChartItemDataContract::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCollectionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve chart data item collection key.
    /// </summary>
    /// <param name = "_entity">Chart item record.</param>
    /// <returns>Collection key string value.</returns>
    protected str resolveCollectionKey(Common _entity)
    {
        return _entity.getFieldValue('ActivityResourceId');
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveTimelineKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve chart data item timeline key.
    /// </summary>
    /// <param name = "_entity">Chart item record.</param>
    /// <returns>Timeline key string value.</returns>
    protected str resolveTimelineKey(Common _entity)
    {
        return AVUtil::getDateTimeStr(_entity.getFieldValue('Timeframe'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAggregationFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve factor to use in capacity aggregation.
    /// </summary>
    /// <returns>Real aggregation factor.</returns>
    protected real resolveAggregationFactor()
    {
        return aggregationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ResResourceAvailabilityBaseChart</c>.
    /// </summary>
    /// <returns>Instance of <c>ResResourceAvailabilityBaseChart</c>.</returns>
    public static ResResourceAvailabilityChart construct()
    {
        ResResourceAvailabilityChart controller = new ResResourceAvailabilityChart();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>