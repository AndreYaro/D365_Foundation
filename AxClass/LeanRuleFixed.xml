<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleFixed</c> class represents a fixed rule.
/// </summary>
class LeanRuleFixed extends LeanRuleKanban
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowManualKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the replenishment strategy allows for creating manual kanbans.
    /// </summary>
    /// <returns>
    ///    true if the replenishment strategy allows for creating manual kanbans; otherwise, false.
    /// </returns>
    public boolean allowManualKanbans()
    {
        // fixed rules allow creation of manual kanbans
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a rule can be triggered.
    /// </summary>
    /// <returns>
    ///    true if the rule can be triggered; otherwise, false.
    /// </returns>
    public boolean canTrigger()
    {
        return leanRuleData.parmKanbanRule().LegalEntity == CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the duplication of the <c>Kanban</c>.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> to be duplicated.
    /// </param>
    /// <remarks>
    ///    Opens the <c>KanbanCreate</c> dialog box.
    /// </remarks>
    public void duplicateKanban(Kanban _kanban)
    {
        Args args = new Args();
        args.name(formStr(KanbanCreate));
        args.caller();
        args.record(_kanban.kanbanRule());

        FormRun formRun = classfactory.formRunClass(args);
        formRun.parmCreateManualKanbans(NoYes::Yes);
        formRun.parmNewKanbansCount(1);

        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOk())
        {
            int numberOfKanbans = formRun.parmNewKanbansCount();
            if (numberOfKanbans)
            {
                KanbanCreate::newKanban(_kanban,
                                        KanbanCreate::makeListQuantities(numberOfKanbans,_kanban.QuantityOrdered),
                                        formRun.parmCreateManualKanbans()).create();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanCreationForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form for manually creating kanbans.
    /// </summary>
    /// <returns>
    ///    The name of the kanban creation form.
    /// </returns>
    /// <remarks>
    ///    Must be implemented in the subclasses.
    /// </remarks>
    public str getKanbanCreationForm()
    {
        return formStr(KanbanCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the maximum kanban quantity that is allowed by the rule.
    /// </summary>
    /// <returns>
    ///    The maximum kanban quantity allowed by the rule.
    /// </returns>
    /// <remarks>
    ///    Used during kanban creation.
    /// </remarks>
    public KanbanQuantity getMaxKanbanQty()
    {
        return leanRuleData.parmKanbanRule().Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the minimum kanban quantity that is allowed by the rule.
    /// </summary>
    /// <returns>
    ///    The minimum kanban quantity allowed by the rule.
    /// </returns>
    /// <remarks>
    ///    Used during kanban creation.
    /// </remarks>
    public KanbanQuantity getMinKanbanQty()
    {
        return leanRuleData.parmKanbanRule().Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default data of the fields.
    /// </summary>
    /// <remarks>
    ///    This method is created to support the effect of calls to the <c>modifiedField</c> method during
    ///    data initialization.
    /// </remarks>
    public void initFields()
    {
        super();

        this.setEnforcedValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a rule of the required type in the rule entities hierarchy.
    /// </summary>
    /// <remarks>
    ///    Called by the <c>LeanRulesEngine::createRule</c> method.
    /// </remarks>
    public void insert()
    {
        KanbanRuleFixed kanbanRuleFixed = leanRuleData.parmKanbanRuleFixed();

        ttsbegin;

        // make sure the lead time has the correct precision
        kanbanRuleFixed.adjustPrecision();

        // first insert the parent record
        super();

        // initialize link to parent
        kanbanRuleFixed.ParentRecId = leanRuleData.parmKanbanRule().RecId;

        // insert the corresponding record
        kanbanRuleFixed.doInsert();
        leanRuleData.parmKanbanRuleFixed(kanbanRuleFixed);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualKanbansNeedCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the manual kanbans require circulating cards.
    /// </summary>
    /// <returns>
    ///    true if the circulating cards are required for manual kanbans; otherwise, false.
    /// </returns>
    public boolean manualKanbansNeedCards()
    {
        KanbanRule      kanbanRule      = leanRuleData.parmKanbanRule();
        KanbanRuleFixed kanbanRuleFixed = leanRuleData.parmKanbanRuleFixed();

        return kanbanRule.UsesCirculatingCards          == NoYes::Yes
               && kanbanRuleFixed.AssignManualKanbans   == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the change in the value of a field.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    ///    The ID of the field that has a changed value.
    /// </param>
    public void modifiedField(tableId _tableId, fieldId _fieldId)
    {
        super(_tableId, _fieldId);

        if (   _tableId == tableNum(KanbanRule)
            && _fieldId == fieldNum(KanbanRule, ReplenishmentStrategy))
        {
            this.setEnforcedValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsReprint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Kanban Card must be reprinted if it is reassigned to the <paramref
    ///    name="_newKanbanRule" />.
    /// </summary>
    /// <param name="_newKanbanRule">
    ///    The new target rule of a Kanban Card.
    /// </param>
    /// <returns>
    ///    true if there are differences that need the reprint of the card; otherwise, false.
    /// </returns>
    public boolean needsReprint(KanbanRule _newKanbanRule)
    {
        LeanRuleData    newLeanRuleData     = _newKanbanRule.ruleData();
        KanbanRule      currKanbanRule      = leanRuleData.parmKanbanRule();
        KanbanRuleFixed currKanbanRuleFixed = leanRuleData.parmKanbanRuleFixed();
        KanbanRuleFixed newKanbanRuleFixed  = _newKanbanRule.ruleData().parmKanbanRuleFixed();
        boolean         result              = false;

        // get the checks executed for the parent buffer
        result = result || super(_newKanbanRule);

        // cards need to be reprinted if the level or the quantity changed
        result = result ||
                 (currKanbanRuleFixed.Level    != newKanbanRuleFixed.Level
                  || currKanbanRule.Quantity   != _newKanbanRule.Quantity);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the lead time for the kanban rule.
    /// </summary>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether user interaction should be skipped.
    /// </param>
    public void refreshLeadTime(boolean _silent = false)
    {
        KanbanRule              kanbanRule        = leanRuleData.parmKanbanRule();
        KanbanRuleFixed         kanbanRuleFixed   = leanRuleData.parmKanbanRuleFixed();
        LeanCoverage            leanCoverage      = leanRuleData.parmLeanCoverage();
        KanbanFlowWrapper       kanbanFlowWrapper = leanRuleData.parmKanbanFlowWrapper();
        boolean                 shouldUpdate      = _silent;

        if (kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure)
        {
            if (!_silent)
            {
                shouldUpdate = (DialogButton::Yes == Box::yesNo("@SYS304710", DialogButton::Yes));
            }

            if (shouldUpdate)
            {
                LeanAverageTakt replenishmentLeadTime = kanbanFlowWrapper.replenishmentLeadTime(leanCoverage.ItemId,
                                                                                                kanbanRule.Quantity,
                                                                                                kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure,
                                                                                                leanCoverage.productDimensionsInventDimId());

                if (kanbanRuleFixed.ReplenishmentLeadTime != replenishmentLeadTime)
                {
                    if (kanbanRuleFixed.RecId)
                    {
                        ttsbegin;
                        kanbanRuleFixed = KanbanRuleFixed::find(kanbanRuleFixed.RecId,true);
                        kanbanRuleFixed.ReplenishmentLeadTime = replenishmentLeadTime;
                        kanbanRuleFixed.update();
                        ttscommit;
                    }
                    else
                    {
                        kanbanRuleFixed.ReplenishmentLeadTime = replenishmentLeadTime;
                    }
                    leanRuleData.parmKanbanRuleFixed(kanbanRuleFixed);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnforcedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enforces the data values that are required for this rule type.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setEnforcedValues()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
        kanbanRule.HandlingUnitEmptyPolicy = LeanHandlingUnitEmptyPolicy::Manual;
        leanRuleData.parmKanbanRule(kanbanRule);

        LeanCoverage leanCoverage = leanRuleData.parmLeanCoverage();
        leanCoverage.RuleCoverageType = LeanRuleCoverageType::Product;
        leanRuleData.parmLeanCoverage(leanCoverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record of the rule in the database.
    /// </summary>
    public void update()
    {
        KanbanRuleFixed kanbanRuleFixed = leanRuleData.parmKanbanRuleFixed();

        // make sure the lead time has the correct precision
        kanbanRuleFixed.adjustPrecision();

        ttsbegin;
        // update parent
        super();

        // update the corresponding record
        kanbanRuleFixed.selectForUpdate(true);
        kanbanRuleFixed.doUpdate();
        leanRuleData.parmKanbanRuleFixed(kanbanRuleFixed);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the Integer fields of the <c>KanbanRuleFixed</c> buffer.
    /// </summary>
    /// <returns>
    ///    true if the fields are valid; otherwise, false.
    /// </returns>
    protected boolean validateFields()
    {
        boolean         result = true;
        KanbanRule      kanbanRule = leanRuleData.parmKanbanRule();
        KanbanRuleFixed kanbanRuleFixed = leanRuleData.parmKanbanRuleFixed();

        #timeConstants

        // call the generic checks
        result = result && super();

        if (kanbanRuleFixed.Level == 0)
        {
            result = checkFailed(strFmt("@SYS26332", "@SYS131993"));
        }

        if (kanbanRule.Quantity == 0)
        {
            result = checkFailed(strFmt("@SYS26332", "@SYS313581"));
        }

        // check the trigger level
        if (kanbanRule.TriggerLevel > kanbanRuleFixed.Level)
        {
            // Rule %1 cannot be saved
            result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));

            // The automatic planning kanban quantity cannot be greater than the fixed number of bins
            checkFailed("@SYS133251");
        }

        // check deviating quantities
        if (kanbanRule.AllowDeviatingQuantity)
        {
            if (   kanbanRule.MinimumDeviatingQuantity < 0
                || kanbanRule.MinimumDeviatingQuantity > kanbanRule.Quantity)
            {
                result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));
                checkFailed(strFmt("@SYS343828",fieldPName(KanbanRule,MinimumDeviatingQuantity)));
            }

            if (kanbanRule.MaximumDeviatingQuantity < 0)
            {
                result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));
                checkFailed(strFmt("@SYS343829",fieldPName(KanbanRule,MaximumDeviatingQuantity)));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the potential change in the fixed quantity is acceptable.
    /// </summary>
    /// <returns>
    ///    true if the quantity is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateQuantity()
    {
        boolean         result              = true;
        LeanRuleData    originalData        = leanRuleData.orig();
        KanbanRule      kanbanRule          = leanRuleData.parmKanbanRule();
        KanbanRule      origKanbanRule      = originalData.parmKanbanRule();

        if (kanbanRule.Quantity != origKanbanRule.Quantity &&
            leanRuleData.hasActiveKanbans())
        {
            // The kanban quantity cannot be changed for rules with active kanbans
            result = checkFailed("@SYS133245");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of a particular type object.
    /// </summary>
    /// <param name="_showWarnings">
    /// Boolean value indicating whether optional warnings should be shown.
    /// </param>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        boolean result = false;

        // get the default type validation done
        result = super();

        // validate if the fixed quantity kan be changed
        result = this.validateQuantity() && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanRuleFixed construct()
    {
        return new LeanRuleFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleFixed newStandard()
    {
        return LeanRuleFixed::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
