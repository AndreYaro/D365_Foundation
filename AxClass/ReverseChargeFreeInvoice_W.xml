<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargeFreeInvoice_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>ReverseChargeFreeInvoice_W</c> contains logic of appliyng reverse charge tax groups to free text invoice lines.
/// </summary>
public class ReverseChargeFreeInvoice_W extends ReverseCharge_W
{
    private CustInvoiceTable    custInvoiceTable;
    private CustInvoiceLine     custInvoiceLine;

    private CustAccount             lastInvoiceAccount;
    private LogisticsLocationRecId  lastLogisticsLocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    protected ReverseChargeDocumentType_W documentType()
    {
        return ReverseChargeDocumentType_W::FreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerChanged</Name>
				<Source><![CDATA[
    protected void headerChanged()
    {
        super();

        partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(custInvoiceTable.custTable_InvoiceAccount().postalAddress());

        if (custInvoiceTable.DeliveryLocation)
        {
            deliveryCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(LogisticsPostalAddress::findByLocation(custInvoiceTable.DeliveryLocation));
        }
        else
        {
            deliveryCountryRegionType = partnerCountryRegionType;
        }

        lastInvoiceAccount    = custInvoiceTable.InvoiceAccount;
        lastLogisticsLocation = custInvoiceTable.DeliveryLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderChanged</Name>
				<Source><![CDATA[
    protected boolean isHeaderChanged()
    {
        boolean ret;

        if (super()
            || lastInvoiceAccount    != custInvoiceTable.InvoiceAccount
            || lastLogisticsLocation != custInvoiceTable.DeliveryLocation)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeGroupSet</Name>
				<Source><![CDATA[
    protected boolean isReverseChargeGroupSet()
    {
        return custInvoiceLine.TaxGroup == salesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected AmountMST lineAmount(RecId _lineRecId, Common _line = null)
    {
        AmountMST lineAmount;
        CustInvoiceLine custInvoiceLineLocal;

        if (_lineRecId
            && _lineRecId != custInvoiceLine.RecId
            && lineAmountMap.exists(_lineRecId))
        {
            lineAmount = lineAmountMap.lookup(_lineRecId);
        }
        else
        {
            if (prmisDefault(_line))
            {
                custInvoiceLineLocal = CustInvoiceLine::find(_lineRecId);
            }
            else
            {
                custInvoiceLineLocal = _line as CustInvoiceLine;
            }

            lineAmount = CurrencyExchangeHelper::mstAmount(custInvoiceLineLocal.amountExclTax_W(), custInvoiceTable.CurrencyCode);

            if (_lineRecId)
            {
                lineAmountMap.insert(_lineRecId, lineAmount);
            }
            else
            {
                currentlineAmount = lineAmount;
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderRecord</Name>
				<Source><![CDATA[
    protected void setHeaderRecord(Common _headerRecord)
    {
        super(_headerRecord);

        custInvoiceTable = _headerRecord as CustInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineRecord</Name>
				<Source><![CDATA[
    protected void setLineRecord(Common _lineRecord)
    {
        super(_lineRecord);

        custInvoiceLine = _lineRecord as CustInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroup</Name>
				<Source><![CDATA[
    protected void setReverseChargeGroup()
    {
        custInvoiceLine.TaxGroup = salesTaxGroup;
        this.setOverrideSalesTax(custInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupMatchingLines</Name>
				<Source><![CDATA[
    public void setReverseChargeGroupMatchingLines(boolean _fromHeader = false)
    {
        #OCCRetryCount
        CustInvoiceLine      custInvoiceLineLocal;

        if (updateMatchingLines)
        {
            boolean researchDS = false;

            try
            {
                if (custInvoiceTable.isTaxIntegrationEnabled())
                {
                    while select forupdate custInvoiceLineLocal
                        where custInvoiceLineLocal.ParentRecId == custInvoiceLine.ParentRecId
                            && (custInvoiceLineLocal.TaxGroup  != salesTaxGroup || this.needSetOverrideSalesTax(custInvoiceLineLocal))
                            && (_fromHeader || custInvoiceLineLocal.RecId != custInvoiceLine.RecId)
                    {
                        custInvoiceLineLocal.TaxGroup = salesTaxGroup;
                        this.setOverrideSalesTax(custInvoiceLineLocal);
                        custInvoiceLineLocal.update();

                        researchDS = true;
                    }
                }
                else
                {
                    update_recordSet custInvoiceLineLocal
                        setting TaxGroup = salesTaxGroup
                        where custInvoiceLineLocal.ParentRecId == custInvoiceLine.ParentRecId   &&
                                custInvoiceLineLocal.TaxGroup  != salesTaxGroup                 &&
                                (_fromHeader || custInvoiceLineLocal.RecId     != custInvoiceLine.RecId);
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }

            if (!_fromHeader && researchDS)
            {
                FormObjectSet dataSource = FormDataUtil::getFormDataSource(custInvoiceLine);
                if (dataSource)
                {
                    dataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseDB</Name>
				<Source><![CDATA[
    protected AmountMST thresholdByGroupUseDB(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
        CustInvoiceLine             custInvoiceLineLocal;
        AmountMST                   threshold;

        while select custInvoiceLineLocal
        where custInvoiceLineLocal.ParentRecId == custInvoiceLine.ParentRecId &&
              custInvoiceLineLocal.RecId       != custInvoiceLine.RecId
        {
            threshold += this.lineAmount(custInvoiceLineLocal.RecId, custInvoiceLineLocal);
        }

        return threshold;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>