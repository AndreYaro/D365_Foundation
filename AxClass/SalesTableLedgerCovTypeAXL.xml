<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableLedgerCovTypeAXL</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SalesTableLedgerCovTypeAXL implements SalesPurchTableLedgerCovIUpdateLedgerCov
{
    private LedgerCoverage ledgerCoverage;
    private SalesTable salesTable;
    private SalesTotals salesTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void init(SalesPurchTableLedgerCovContract _contract)
    {
        ledgerCoverage = _contract.parmLedgerCoverage();
        salesTable = _contract.parmSalesPurchTableInterface().parmSalesPurchTable();
        salesTotals = _contract.parmSalesTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts.
    /// </summary>
    [Wrappable(false)]
    public void updateLedgerCov()
    {
        #ISOCountryRegionCodes


        SalesLine           salesLine;

        TransDate           deliveryDate;
        AmountCur           discValue;

        Delivery2Invoice    delivery2Invoice    = SalesParameters::find().Delivery2Invoice;

        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;
        CustInvoiceJour     tmpInvoiceJour;

        int                 dateDifference;

        BankLC              bankLC;

        AmountCur           lineValueTmp, lineValueToExcl;
        Map                 lineValueDetails = new Map(Types::Container, Types::Real);
        Map                 lineValueDetailsMarkup = new Map(Types::Container, Types::Real);
        Map                 lineValueDetailsMarkupAllowCustVend = new Map(Types::Container, Types::Real);
        container           markupTaxDetailsTable;
        container           markupTaxDetailsLine;
        int                 i;
        CustPaymSchedLine   custPaymSchedLineTotals;
        AmountCur           amount, totalAmount, remainTotalAmount;
        AmountCur           taxAmount, totalTaxAmount, remainTaxAmount;
        AmountCur           markupAmount, totalMarkupAmount, remainMarkupAmount;
        AmountCur           markupTableAmount, totalMarkupTableAmount, remainMarkupTableAmount;
        AmountCur           markupLineAmount, totalMarkupLineAmount, remainMarkupLineAmount;
        AmountCur           markupTableTaxAmount, totalMarkupTableTaxAmount, remainMarkupTableTaxAmount;
        AmountCur           markupLineTaxAmount, totalMarkupLineTaxAmount, remainMarkupLineTaxAmount;
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        AmountCur           dummy;


        void ledgerCoverageUpdate_RU(AmountCur  _totalAmount,
                                     AmountCur  _taxAmount,
                                     AmountCur  _markupAmount,
                                     AmountCur  _markupTableAmount,
                                     AmountCur  _markupLineAmount,
                                     AmountCur  _markupTableTaxAmount,
                                     AmountCur  _markupLineTaxAmount,
                                     TransDate  _futuresDate)
        {
            RefRecId accountCustRecID, accountClearingRecID;
            if (! _totalAmount)
            {
                return;
            }

            accountCustRecID     = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.accountCustLedgerDimension());
            accountClearingRecID = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.clearingLedgerDimension());

            ledgerCoverage.splitLinesMap_RU(lineValueDetails);
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::CustBalance,
                                     accountCustRecID,
                                     salesTable.DefaultDimension,
                                     salesTable.CurrencyCode,
                                     _totalAmount - _taxAmount - _markupAmount - lineValueToExcl /*- _markupLineTaxAmountToExcl*/,
                                     0,
                                     accountClearingRecID,
                                     salesTable.Payment,
                                     salesTable.clearingPeriod(),
                                     salesTable.paymDayId(),
                                     _futuresDate);
            ledgerCoverage.splitLinesClear_RU();

            if (lineValueDetailsMarkupAllowCustVend.elements())
            {
                ledgerCoverage.copyLinesMap_RU(lineValueDetailsMarkupAllowCustVend);

                ledgerCoverage.updateSum(deliveryDate,
                                         LedgerPostingType::CustBalance,
                                         accountCustRecID,
                                         salesTable.DefaultDimension,
                                         salesTable.CurrencyCode,
                                         _markupTableAmount,
                                         0,
                                         accountClearingRecID,
                                         salesTable.Payment,
                                         salesTable.clearingPeriod(),
                                         salesTable.paymDayId(),
                                         _futuresDate);

                if (_markupTableTaxAmount)
                {
                    ledgerCoverage.updateSum(deliveryDate,
                                         LedgerPostingType::CustBalance,
                                         accountCustRecID,
                                         salesTable.DefaultDimension,
                                         salesTable.CurrencyCode,
                                         _markupTableTaxAmount,
                                         0,
                                         accountClearingRecID,
                                         salesTable.Payment,
                                         salesTable.clearingPeriod(),
                                         salesTable.paymDayId(),
                                         _futuresDate);
                }
                ledgerCoverage.copyLinesClear_RU();
            }

            if (_markupLineTaxAmount)
            {
                ledgerCoverage.splitLinesMap_RU(Map::create(markupTaxDetailsLine));
                ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::CustBalance,
                                     accountCustRecID,
                                     salesTable.DefaultDimension,
                                     salesTable.CurrencyCode,
                                     _markupLineTaxAmount,
                                     0,
                                     accountClearingRecID,
                                     salesTable.Payment,
                                     salesTable.clearingPeriod(),
                                     salesTable.paymDayId(),
                                     _futuresDate);
            }

            ledgerCoverage.splitLinesMap_RU(Map::create(salesTotals.tax().totalTaxDetailsExclMarkup_RU(NoYes::Yes)));
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::CustBalance,
                                     accountCustRecID,
                                     salesTable.DefaultDimension,
                                     salesTable.CurrencyCode,
                                     _taxAmount - _markupTableTaxAmount - _markupLineTaxAmount,
                                     0,
                                     accountClearingRecID,
                                     salesTable.Payment,
                                     salesTable.clearingPeriod(),
                                     salesTable.paymDayId(),
                                     _futuresDate);

            ledgerCoverage.splitLinesMap_RU(salesTotals.totalMarkupLineDetails_RU());
            ledgerCoverage.updateSum(deliveryDate,
                                     LedgerPostingType::CustBalance,
                                     accountCustRecID,
                                     salesTable.DefaultDimension,
                                     salesTable.CurrencyCode,
                                     _markupLineAmount,
                                     0,
                                     accountClearingRecID,
                                     salesTable.Payment,
                                     salesTable.clearingPeriod(),
                                     salesTable.paymDayId(),
                                     _futuresDate);
            ledgerCoverage.splitLinesClear_RU();
        }

        if (salesTable.mustBeCovPlanned())
        {
            if (BankLCExportFeatureChecker::checkBankLCExportEnabled()
                && salesTable.isMarkedForBankLC())
            {
                bankLC = BankLCExport::findBySalesTable(salesTable.SalesId);
                if (bankLC.hasLine())
                {
                    delivery2Invoice = '';
                }
            }

            if (salesTable.PaymentSched &&
                salesTable.createCustTrans_BR() &&
                ! CustPaymSched::exist(salesTable.TableId,
                                       salesTable.RecId))
            {
                salesTable.createPaymentSched();

                tmpInvoiceJour.initFromSalesTable(salesTable);
                tmpInvoiceJour.initFromSalesTotals(salesTotals);

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                {
                    PaymTerm paymTerm = salesTable.payment();

                    tmpInvoiceJour.FixedDueDate = max(
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        paymTerm.due(
                            paymTerm.UseDeliveryDateForDueDate_ES ? salesTable.ReceiptDateConfirmed : salesTable.DeliveryDate,
                            salesTable.paymDayId(),
                            false,
                            PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES)));

                    tmpInvoiceJour.DueDate = tmpInvoiceJour.FixedDueDate;
                }
                else
                {
                    tmpInvoiceJour.FixedDueDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), salesTable.DeliveryDate);
                    tmpInvoiceJour.DueDate = tmpInvoiceJour.FixedDueDate;
                }
                tmpInvoiceJour.CashDiscDate     = tmpInvoiceJour.DueDate;
                tmpInvoiceJour.InvoiceDate      = tmpInvoiceJour.DueDate;

                tmpInvoiceJour.insert();

                salesTable.copyPaymentSched(tmpInvoiceJour);
                tmpInvoiceJour.createPaymentSched();

                select firstonly custPaymSched
                    where custPaymSched.ExtTableId  == tmpInvoiceJour.TableId &&
                          custPaymSched.ExtRecId    == tmpInvoiceJour.RecId;
            }

            Markup markup = new Markup(salesTable.CurrencyCode);
            markup.setTax(salesTotals.tax());
            TaxCov taxCov = new TaxCov(ledgerCoverage);
            if (countryRegion_RU)
            {
                markup.parmCustInvoiceAccount_RU(salesTable.InvoiceAccount);
            }

            if (salesTable.createCustTrans_BR())
            {
                while select salesLine
                index hint SalesLineIdx
                where salesLine.SalesId     == salesTable.SalesId
                {
                    if (salesLine.mustBeCovPlanned())
                    {
                        deliveryDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), salesLine.deliveryDate());
                        TransDate oldDate = deliveryDate;

                        if (delivery2Invoice)
                        {
                            deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);
                        }

                        dateDifference = deliveryDate - oldDate;

                        SalesQty qtySales = salesLine.RemainSalesFinancial + salesLine.RemainSalesPhysical;

                        if (qtySales)
                        {
                            AmountCur lineValue = salesLine.calcLineAmountExclTax(qtySales, deliveryDate, salesTotals.tax());
                            if (countryRegion_RU)
                            {
                                ledgerCoverage.parmPostingProfile_RU(salesLine.PostingProfile_RU ? salesLine.PostingProfile_RU : salesTable.PostingProfile);
                                ledgerCoverage.parmInventProfileType_RU(salesLine.inventProfileType_RU());
                            }

                            markup.cov(deliveryDate,
                                   qtySales,
                                   lineValue,
                                   salesLine,
                                   ledgerCoverage,
                                   salesLine.DefaultDimension
                                   );

                            if (TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
                            {
                                lineValue += - salesTotals.tax().taxPrLine(tableNum(SalesLine), salesLine.RecId);
                            }

                            if (salesLine.accountDiscLedgerDimension())
                            {
                                discValue   = salesLine.calcLineDiscExclTax(qtySales, deliveryDate, salesTotals.tax());
                                lineValue   = lineValue + discValue;
                            }

                            if (salesLine.inventProfileType_RU() == InventProfileType_RU::CommissionPrincipalAgent)
                            {
                                lineValueToExcl += lineValue;
                                lineValue = 0;
                            }

                            if (lineValue)
                            {
                                ledgerCoverage.updateSum(deliveryDate,
                                                     salesLine.postingSales(),
                                                     LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesLine.accountSalesLedgerDimension()),
                                                     salesLine.DefaultDimension,
                                                     salesLine.CurrencyCode,
                                                   - lineValue);
                            }

                            if (discValue)
                            {
                                ledgerCoverage.updateSum(deliveryDate,
                                                     LedgerPostingType::SalesDisc,
                                                     LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesLine.accountDiscLedgerDimension()),
                                                     salesLine.DefaultDimension,
                                                     salesLine.CurrencyCode,
                                                     discValue);
                            }

                            if (countryRegion_RU)
                            {
                                lineValueTmp = 0;
                                if (lineValueDetails.exists([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()]))
                                {
                                    lineValueTmp = lineValueDetails.lookup([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()]);
                                }
                                if (TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
                                {
                                    lineValueTmp += lineValue - (-salesTotals.tax().taxPrLine(tableNum(SalesLine), salesLine.RecId));
                                }
                                else
                                {
                                    lineValueTmp += lineValue;
                                }
                                lineValueDetails.insert([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()], lineValueTmp);
                                lineValueDetailsMarkup.insert([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()], lineValueTmp);

                                if (! salesLine.inventDim().inventProfile_RU().LockMarkupCustVend)
                                {
                                    lineValueDetailsMarkupAllowCustVend.insert([ledgerCoverage.parmPostingProfile_RU(), ledgerCoverage.parmInventProfileType_RU()], lineValueTmp);
                                }
                            }
                        }
                    }
                }
            }

            deliveryDate = max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), salesTable.DeliveryDate);

            if (delivery2Invoice)
            {
                deliveryDate = PaymTerm::advanceDate(delivery2Invoice, deliveryDate);
            }

            if (countryRegion_RU)
            {
                ledgerCoverage.copyLinesMap_RU(lineValueDetailsMarkup);
                markup.covMarkupCustVendMap_RU(lineValueDetailsMarkupAllowCustVend);
            }

            markup.cov(deliveryDate,
                       1,
                       salesTotals.totalBalance(),
                       salesTable,
                       ledgerCoverage,
                       salesTable.DefaultDimension);

            if (countryRegion_RU)
            {
                ledgerCoverage.copyLinesClear_RU();
                ledgerCoverage.splitLinesMap_RU(lineValueDetails);
            }

            if (salesTable.createCustTrans_BR())
            {
                if (salesTable.PaymentSched)
                {
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
                    {
                        totalAmount             = salesTotals.totalAmount();
                        totalTaxAmount          = salesTotals.totalTaxAmount();
                        totalMarkupAmount       = salesTotals.totalMarkup();
                        totalMarkupTableAmount  = salesTotals.totalMarkupTable();
                        totalMarkupLineAmount   = salesTotals.totalMarkupLine();
                        [markupTaxDetailsTable,
                     totalMarkupTableTaxAmount,
                     dummy,
                     markupTaxDetailsLine,
                     totalMarkupLineTaxAmount] = salesTotals.tax().totalTaxDetailsMarkup_RU();

                        remainTotalAmount       = totalAmount;
                        remainTaxAmount         = totalTaxAmount;
                        remainMarkupAmount      = totalMarkupAmount;
                        remainMarkupTableAmount = totalMarkupTableAmount;
                        remainMarkupLineAmount  = totalMarkupLineAmount;
                        remainMarkupTableTaxAmount = totalMarkupTableTaxAmount;
                        remainMarkupLineTaxAmount  = totalMarkupLineTaxAmount;

                        select count(RecId), sum(DueAmount) from custPaymSchedLineTotals
                        where custPaymSchedLineTotals.ParentRecID == custPaymSched.RecId;

                        if (custPaymSchedLineTotals.DueAmount)
                        {
                            while select custPaymSchedLine
                            where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                            {
                                i++;
                                if (i < custPaymSchedLineTotals.RecId)
                                {
                                    amount                  = CurrencyExchangeHelper::amount(totalAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    taxAmount               = CurrencyExchangeHelper::amount(totalTaxAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    markupAmount            = CurrencyExchangeHelper::amount(totalMarkupAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    markupTableAmount       = CurrencyExchangeHelper::amount(totalMarkupTableAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    markupLineAmount        = CurrencyExchangeHelper::amount(totalMarkupLineAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    markupTableTaxAmount    = CurrencyExchangeHelper::amount(totalMarkupTableTaxAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    markupLineTaxAmount     = CurrencyExchangeHelper::amount(totalMarkupLineTaxAmount * custPaymSchedLine.DueAmount / custPaymSchedLineTotals.DueAmount, salesTable.CurrencyCode);
                                    remainTotalAmount       -= amount;
                                    remainTaxAmount         -= taxAmount;
                                    remainMarkupAmount      -= markupAmount;
                                    remainMarkupTableAmount -= markupTableAmount;
                                    remainMarkupLineAmount  -= markupLineAmount;
                                    remainMarkupTableTaxAmount -= markupTableTaxAmount;
                                    remainMarkupLineTaxAmount  -= markupLineTaxAmount;
                                }
                                else
                                {
                                    amount              = remainTotalAmount;
                                    taxAmount           = remainTaxAmount;
                                    markupAmount        = remainMarkupAmount;
                                    markupTableAmount   = remainMarkupTableAmount;
                                    markupLineAmount    = remainMarkupLineAmount;
                                    markupTableTaxAmount = remainMarkupTableTaxAmount;
                                    markupLineTaxAmount  = remainMarkupLineTaxAmount;
                                }

                                ledgerCoverageUpdate_RU(amount,
                                                    taxAmount,
                                                    markupAmount,
                                                    markupTableAmount,
                                                    markupLineAmount,
                                                    -markupTableTaxAmount,
                                                    -markupLineTaxAmount,
                                                    custPaymSchedLine.DueDate + dateDifference);

                                ledgerCoverage.splitLinesMap_RU(lineValueDetails);
                                if (custPaymSchedLine.DiscAmount && discValue)
                                {
                                    ledgerCoverage.updateSum(custPaymSchedLine.DueDate + dateDifference,
                                                         LedgerPostingType::CustBalance,
                                                 LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::CustInvoiceDisc)),
                                                         salesTable.DefaultDimension,
                                                         salesTable.CurrencyCode,
                                                         custPaymSchedLine.DiscAmount);
                                }
                                ledgerCoverage.splitLinesClear_RU();
                            }
                        }
                    }
                    else
                    {
                        while select DueAmount, DiscAmount, DueDate from custPaymSchedLine
                        where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                        {
                            if (custPaymSchedLine.DueAmount)
                            {
                                ledgerCoverage.updateSum(deliveryDate,
                                                 LedgerPostingType::CustBalance,
                                                 LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.accountCustLedgerDimension()),
                                                 salesTable.DefaultDimension,
                                                 salesTable.CurrencyCode,
                                                 custPaymSchedLine.DueAmount,
                                                 0,
                                                 LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.clearingLedgerDimension()),
                                                 salesTable.Payment,
                                                 salesTable.clearingPeriod(),
                                                 salesTable.paymDayId(),
                                                 custPaymSchedLine.DueDate + dateDifference);
                            }

                            if (custPaymSchedLine.DiscAmount && discValue)
                            {
                                ledgerCoverage.updateSum(custPaymSchedLine.DueDate + dateDifference,
                                                 LedgerPostingType::CustBalance,
                                                 LedgerDimensionFacade::getMainAccountFromLedgerDimension(LedgerSystemAccounts::defaultAccount(LedgerPostingType::CustInvoiceDisc)).RecId,
                                                 salesTable.DefaultDimension,
                                                 salesTable.CurrencyCode,
                                                 custPaymSchedLine.DiscAmount);
                            }
                        }
                    }
                    //
                }
                else if (bankLC.RecId != 0
                && bankLC.hasLine())
                {
                    if (salesTotals.totalEndDisc())
                    {
                        ledgerCoverage.updateSum(deliveryDate,
                                             LedgerPostingType::CustInvoiceDisc,
                                             LedgerDimensionFacade::getMainAccountFromLedgerDimension(LedgerSystemAccounts::defaultAccount(LedgerPostingType::CustInvoiceDisc)).RecId,
                                             salesTable.DefaultDimension,
                                             salesTable.CurrencyCode,
                                             salesTotals.totalEndDisc());
                    }

                    bankLC.updateLedgerCov(ledgerCoverage);
                }
                else
                {
                    if (salesTotals.totalEndDisc())
                    {
                        ledgerCoverage.updateSum(deliveryDate,
                                             LedgerPostingType::CustInvoiceDisc,
                                             LedgerDimensionFacade::getMainAccountFromLedgerDimension(LedgerSystemAccounts::defaultAccount(LedgerPostingType::CustInvoiceDisc)).RecId,
                                             salesTable.DefaultDimension,
                                             salesTable.CurrencyCode,
                                             salesTotals.totalEndDisc());
                    }

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
                    {
                        [markupTaxDetailsTable,
                     totalMarkupTableTaxAmount,
                     dummy,
                     markupTaxDetailsLine,
                     totalMarkupLineTaxAmount] = salesTotals.tax().totalTaxDetailsMarkup_RU();
                        ledgerCoverageUpdate_RU(salesTotals.totalAmount(),
                                            salesTotals.totalTaxAmount(),
                                            salesTotals.totalMarkup(),
                                            salesTotals.totalMarkupTable(),
                                            salesTotals.totalMarkupLine(),
                                            -totalMarkupTableTaxAmount,
                                            -totalMarkupLineTaxAmount,
                                            salesTable.FixedDueDate);
                    }
                    else
                    {
                        if (salesTotals.totalAmount())
                        {
                            ledgerCoverage.updateSum(deliveryDate,
                                             LedgerPostingType::CustBalance,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.accountCustLedgerDimension()),
                                             salesTable.DefaultDimension,
                                             salesTable.CurrencyCode,
                                             salesTotals.totalAmount(),
                                             0,
                                             LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.clearingLedgerDimension()),
                                             salesTable.Payment,
                                             salesTable.clearingPeriod(),
                                             salesTable.paymDayId(),
                                             salesTable.FixedDueDate);
                        }
                    }
                    //
                }
            }

            if (countryRegion_RU)
            {
                ledgerCoverage.splitLinesClear_RU();
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            {
                if (totalMarkupTableTaxAmount)
                {
                    if (lineValueDetailsMarkupAllowCustVend.elements())
                    {
                        ledgerCoverage.copyLinesMap_RU(lineValueDetailsMarkupAllowCustVend);
                        taxCov.taxLedgerCov(salesTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(salesTotals.tax().tmpTaxWorkTransMarkup_RU(UnknownNoYes::Yes,
                                                                                                                                                 UnknownNoYes::Unknown,
                                                                                                                                                 UnknownNoYes::Yes),
                                                                                                      [InventProfileType_RU::CommissionAgent,
                                                                                                       InventProfileType_RU::CommissionPrincipalAgent,
                                                                                                       InventProfileType_RU::Bailee]),
                                            deliveryDate);
                    }

                    ledgerCoverage.copyLinesClear_RU();
                    taxCov.taxLedgerCov(salesTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(salesTotals.tax().tmpTaxWorkTransMarkup_RU(UnknownNoYes::No),
                                                                                                  [InventProfileType_RU::CommissionAgent,
                                                                                                   InventProfileType_RU::CommissionPrincipalAgent,
                                                                                                   InventProfileType_RU::Bailee]),
                                        deliveryDate);
                }
                else
                {
                    taxCov.taxLedgerCov(salesTotals.tax().tmpTaxWorkTransExclInventProfileType_RU(salesTotals.tax().tmpTaxWorkTrans(),
                                                                                              [InventProfileType_RU::CommissionAgent,
                                                                                               InventProfileType_RU::CommissionPrincipalAgent,
                                                                                               InventProfileType_RU::Bailee]),
                                    deliveryDate);
                }
            }
            else
            {
                taxCov.taxLedgerCov(salesTotals.tax().tmpTaxWorkTrans(), deliveryDate);
            }

            if (tmpInvoiceJour)
            {
                tmpInvoiceJour.delete();
            }

            delete_from custPaymSched
                where custPaymSched.ExtTableId  == salesTable.TableId &&
                      custPaymSched.ExtRecId    == salesTable.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>