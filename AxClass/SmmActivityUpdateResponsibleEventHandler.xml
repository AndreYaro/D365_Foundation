<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmActivityUpdateResponsibleEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This <c>SmmActivityUpdateResponsibleEventHandler</c> class handles the delegates for SmmActivityUpdateResponsible.
/// </summary>
class smmActivityUpdateResponsibleEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateResponsible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the responsible employee for the synchronized activity.
    /// </summary>
    /// <param name = "_activityId">The activity id.</param>
    /// <param name = "_newResponsible">The new worker responsible for the activity</param>
    [SubscribesTo(classstr(SmmActivityUpdateResponsible), delegatestr(SmmActivityUpdateResponsible, updateResponsibleForSynchronizedActivity))]
    public static void updateResponsible(smmActivityId _activityId, HcmWorkerRecId _newResponsible)
    {
        smmDeletedActivities smmDeletedActivities = smmDeletedActivities::find(_activityId, _newResponsible);

        if (smmDeletedActivities)
        {
            throw error(strFmt("@SYS90215", HcmWorker::worker2Name(_newResponsible)));
        }
        else
        {
            ttsbegin;

            smmActivities smmActivities = smmActivities::find(_activityId, true);

            // Is acitivty synchronized to Outlook and have responsible changed
            if (smmActivities.OutlookEntryID && smmActivities.ResponsibleWorker != _newResponsible)
            {
                smmDeletedActivities.ActivityNumber        = smmActivities.ActivityNumber;
                smmDeletedActivities.OutlookEntryID        = smmActivities.OutlookEntryID;
                smmDeletedActivities.OutlookGlobalObjectID = smmActivities.OutlookGlobalObjectID;
                smmDeletedActivities.Category              = smmActivities.Category;
                smmDeletedActivities.ResponsibleWorker     = smmActivities.ResponsibleWorker;

                smmDeletedActivities.OriginalAppointmentStartDateTime  = smmActivities.OriginalAppointmentStartDateTime;
                smmDeletedActivities.RecurrenceState                   = smmActivities.RecurrenceState;
                smmDeletedActivities.IsMasterAppointment               = smmActivities.IsMasterAppointment;

                if (smmDeletedActivities.validateWrite(true))
                {
                    smmDeletedActivities.insert();
                }

                smmActivities smmAttendeeActivities;
                smmAttendeeTable smmAttendeeTable;
                // Update attendee activities (if they were syncrhonized with outlook)
                while select AttendeeActivityId from smmAttendeeTable
                       where smmAttendeeTable.OrganizerActivityId == smmActivities.ActivityNumber &&
                             smmAttendeeTable.AttendeeActivityId &&
                             smmAttendeeTable.AttendeeActivityId != smmActivities.ActivityNumber
                   join forupdate smmAttendeeActivities
                       where smmAttendeeActivities.ActivityNumber == smmAttendeeTable.AttendeeActivityId &&
                             smmAttendeeActivities.OutlookEntryID
                {
                    smmDeletedActivities.clear();
                    smmDeletedActivities.ActivityNumber        = smmAttendeeActivities.ActivityNumber;
                    smmDeletedActivities.OutlookEntryID        = smmAttendeeActivities.OutlookEntryID;
                    smmDeletedActivities.OutlookGlobalObjectID = smmAttendeeActivities.OutlookGlobalObjectID;
                    smmDeletedActivities.Category              = smmAttendeeActivities.Category;
                    smmDeletedActivities.ResponsibleWorker     = smmAttendeeActivities.ResponsibleWorker;

                    smmDeletedActivities.OriginalAppointmentStartDateTime  = smmAttendeeActivities.OriginalAppointmentStartDateTime;
                    smmDeletedActivities.RecurrenceState                   = smmAttendeeActivities.RecurrenceState;
                    smmDeletedActivities.IsMasterAppointment               = smmAttendeeActivities.IsMasterAppointment;

                    if (smmDeletedActivities.validateWrite(true))
                    {
                        smmDeletedActivities.insert();
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>