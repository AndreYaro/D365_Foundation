<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationProductDimensionMixingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationProductDimensionMixingValidator</c> class is responsible for verifying that
/// location product dimension mixing rules are respected.
/// </summary>
internal class WHSLocationProductDimensionMixingValidator
{
    private WMSLocation         location;
    private InventDimParm       allowedProductDimensionMixingParm;
    private ItemId              itemId;
    private InventDim           productDims;
    private boolean             allowMixingAllProductDimensions;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateExistingInventoryWithMixingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the given dimension set can be mixed with items currently on hand in the given location.
    /// </summary>
    /// <returns>
    /// True if no on hand items are prohibiting the inventory to go into the location; otherwise, false.
    /// </returns>
    private boolean validateExistingInventoryWithMixingRules()
    {   
        if (allowMixingAllProductDimensions)
        {
            return true;
        }

        InventSum   inventSum;
        InventDim   inventDim;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId, #InventDimGroupAllFields from inventSum
            where inventSum.ItemId              == itemId                       &&
                  inventSum.ClosedQty           == NoYes::No                    &&
                  inventSum.PhysicalInvent      != 0                            &&
                  inventSum.InventLocationId    == location.inventLocationId    &&
                  inventSum.wMSLocationId       == location.wMSLocationId
            {
                inventDim.clear();
                inventDim.initFromInventSum(inventSum);

                if (!allowedProductDimensionMixingParm.areUnsetProductDimensionsEqual(inventDim, productDims))
                {
                    return false;
                }
            }
        }
        else
        {
            while select ItemId from inventSum
            where inventSum.ItemId == itemId          &&
                  inventSum.ClosedQty == NoYes::No    &&
                  inventSum.PhysicalInvent != 0
            join inventDim
                where inventDim.InventDimId         == inventSum.inventDimId     &&
                      inventDim.InventLocationId    == location.inventLocationId &&
                      inventDim.wMSLocationId       == location.wMSLocationId
            {
                if (!allowedProductDimensionMixingParm.areUnsetProductDimensionsEqual(inventDim, productDims))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingWorkWithMixingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the given dimension set can be mixed with items going to the location on already created <c>WHSWorkLine</c> records.
    /// </summary>
    /// <returns>
    /// True if no <c>WHSWorkLine</c> records are prohibiting the inventory to go into the location; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateExistingWorkWithMixingRules()
    {
        if (allowMixingAllProductDimensions)
        {
            return true;
        }
        
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;
        InventDim       inventDim;
        
        while select InventDimId from workLine
            group by InventDimId
            where workLine.WMSLocationId  == location.wMSLocationId
                && workLine.WorkStatus    <= WHSWorkStatus::InProcess
                && workLine.WorkType      == WHSWorkType::Put
                && workLine.ItemId        != itemId
            join inventDim
                where inventDim.inventDimId == workLine.InventDimId
            exists join workTable
                where workTable.WorkId           == workLine.WorkId
                &&    workTable.InventLocationId == location.inventLocationId
                &&    workTable.WorkStatus       <= WHSWorkStatus::InProcess
        {
            if (!allowedProductDimensionMixingParm.areUnsetProductDimensionsEqual(inventDim, productDims))
            {
                return false;
            }
        }

        return true;  
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationProductDimensionMixingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the given dimension set can be moved into the given location.
    /// </summary>
    /// <returns>
    /// True if the given dimension set can be moved into the given location; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateLocationProductDimensionMixingParameters()
    {
        boolean             ret = true;
        
        if (!allowMixingAllProductDimensions)
        {
            ret = this.validateExistingInventoryWithMixingRules()
                && this.validateExistingWorkWithMixingRules()
                && this.validateTmpWorkLinesWithMixingRules();
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmpWorkLinesWithMixingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the given dimension set can be mixed with items going to the location on already created <c>WHSTmpWorkLine</c> records.
    /// </summary>
    /// <returns>
    /// True if no <c>WHSTmpWorkLine</c> records are prohibiting the inventory to go into the location; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateTmpWorkLinesWithMixingRules()
    {
        InventDim           inventDim;
        WHSTmpWorkLine      tmpWorkLine;
        boolean             ret = true;

        while select ItemId from tmpWorkLine
            where tmpWorkLine.WMSLocationId     == location.wMSLocationId    &&
                  tmpWorkLine.InventLocationId  == location.inventLocationId &&
                  tmpWorkLine.WorkType          == WHSWorkType::Put          &&
                  tmpWorkLine.ItemId            == itemId
            join inventDim
                where inventDim.inventDimId == tmpWorkLine.InventDimId
        {
            if (!allowedProductDimensionMixingParm.areUnsetProductDimensionsEqual(inventDim, productDims))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductAndLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSLocationProductDimensionMixingValidator</c> class.
    /// </summary>
    /// <param name = "_location">
    /// The location to validate against.
    /// </param>
    /// <param name = "_itemId">
    /// The item going into the location.
    /// </param>
    /// <param name = "_productDims">
    /// The dimension set to validate against.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>WHSLocationProductDimensionMixingValidator</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSLocationProductDimensionMixingValidator newFromProductAndLocation(
        WMSLocation _location,
        ItemId      _itemId,
        InventDim   _productDims)
    {
        WHSLocationProductDimensionMixingValidator productDimensionMixingValidator = new WHSLocationProductDimensionMixingValidator();

        productDimensionMixingValidator.location          = _location;
        productDimensionMixingValidator.itemId            = _itemId;
        productDimensionMixingValidator.productDims       = _productDims;
        productDimensionMixingValidator.initAllowedProductDimensionMixing(productDimensionMixingValidator.location);

        return productDimensionMixingValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllowedProductDimensionMixing</Name>
				<Source><![CDATA[
    private void initAllowedProductDimensionMixing(WMSLocation _location)
    {
        WHSLocationProfile locationProfile = _location.whsLocationProfile();

        allowMixingAllProductDimensions = !locationProfile.EnableLocationProductDimensionSpecificMixing;
        allowedProductDimensionMixingParm.initFromInventDimFixed(locationProfile.ProductDimFixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>