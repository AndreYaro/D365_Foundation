<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>formletterProvider</c> class provides the caller with module specific data that can be used
///    across multiple journals in a module.
/// </summary>
/// <remarks>
///    It is required that there is one child class for each module that uses this framework.
/// </remarks>
public abstract class FormletterProvider
{
    Common          sourceLine;
    Common          sourceTable;
    Common          journalTable;
    Common          parmUpdate;
    Common          parmTable;
    InventTable     inventTable;
    Object          totals;
    DocumentStatus  documentStatus;
    boolean         skipCreditMaxCheck;
    UserId          batchCreatedBy;
    VersioningUpdateType versioningUpdateType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension default account that is used for posting cash discount.
    /// </summary>
    /// <returns>
    ///    The ledger dimension default account that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount cashDiscountLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the journal.
    /// </summary>
    /// <returns>
    ///   true if the journal is valid; otherwise, false.
    /// </returns>
    public boolean checkJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the currency code.
    /// </summary>
    /// <returns>
    ///   A currency code.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of either a customer or a vendor group.
    /// </summary>
    /// <returns>
    ///    The ID of either a customer or a vendor group.
    /// </returns>
    public CustVendGroupId custVendGroupId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default ledger transaction text that is used during posting.
    /// </summary>
    /// <returns>
    ///    The default ledger transaction text that is used during posting.
    /// </returns>
    public TransTxt defaultLedgerTransactionText()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whatever posting mode will be used in ledger.
    /// </summary>
    /// <returns>
    ///    The posting mode that will be used in ledger.
    /// </returns>
    public DetailSummary detailSummary()
    {
        return DetailSummary::Summary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the original order ID in the posting parameter line
    /// table.
    /// </summary>
    /// <returns>
    /// A field ID.
    /// </returns>
    abstract public FieldId fieldIdParmLine_OrigOrderId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the order ID in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// A field ID.
    /// </returns>
    abstract public FieldId fieldIdParmTable_OrderId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the fixed euro triangulation value.
    /// </summary>
    /// <returns>
    ///   The fixed euro triangulation value.
    /// </returns>
    public UnknownNoYes  fixedEuroTriangulation()
    {
        return UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the fixed exchange rate.
    /// </summary>
    /// <returns>
    ///   A fixed exchange rate.
    /// </returns>
    public ExchRate fixedExchRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the fixed secondary exchange rate.
    /// </summary>
    /// <returns>
    ///   A fixed secondary exchange rate.
    /// </returns>
    public ExchrateSecondary fixedExchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate reportingCurrencyFixedExchangeRate()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the source line is inventoried.
    /// </summary>
    /// <returns>
    ///    true if the source line is inventoried; otherwise, false.
    /// </returns>
    public boolean isStocked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelPostingOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting text for an order.
    /// </summary>
    /// <param name="_orderId">
    /// An order ID.
    /// </param>
    /// <returns>
    /// A String that has posting text
    /// </returns>
    public str labelPostingOrder(Num _orderId)
    {
        return strFmt('%1', _orderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension default account that is used for posting line amount.
    /// </summary>
    /// <returns>
    ///    The ledger dimension default account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension default account that is used for posting line amount.
    /// </summary>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>
    /// The ledger dimension default account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount_IT(boolean _creditNote = false)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger transaction text to use for posting an end discount amount.
    /// </summary>
    /// <returns>
    /// The ledger transaction text to use for posting an end discount amount.
    /// </returns>
    public LedgerTransTxt ledgerTransactionTextEndDisc()
    {
        return LedgerTransTxt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger transaction text to use for posting roundings.
    /// </summary>
    /// <returns>
    /// The ledger transaction text to use for posting roundings.
    /// </returns>
    public LedgerTransTxt ledgerTransactionTextRoundOff()
    {
        return LedgerTransTxt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a ledger transaction type.
    /// </summary>
    /// <returns>
    ///    A ledger transaction type.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ledger account that is used for posting line amount.
    /// </summary>
    /// <returns>
    ///    The ledger account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineAmountLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>LedgerDimensionDefaultAccount</c> that is used for posting cash discount.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerDimensionDefaultAccount</c> that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineDiscountLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchCreatedBy</Name>
				<Source><![CDATA[
    public UserId parmBatchCreatedBy(UserId _batchCreatedBy = batchCreatedBy)
    {
        batchCreatedBy = _batchCreatedBy;
        return batchCreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = journalTable)
    {
        journalTable = _journalTable;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = parmTable)
    {
        parmTable = _parmTable;
        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = parmUpdate)
    {
        parmUpdate = _parmUpdate;
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCreditMaxCheck</Name>
				<Source><![CDATA[
    public boolean parmSkipCreditMaxCheck(boolean _skipCreditMaxCheck = skipCreditMaxCheck)
    {
        skipCreditMaxCheck = _skipCreditMaxCheck;
        return skipCreditMaxCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLine</Name>
				<Source><![CDATA[
    public Common parmSourceLine(Common _sourceLine = sourceLine)
    {
        sourceLine = _sourceLine;

        return sourceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = sourceTable)
    {
        sourceTable = _sourceTable;

        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotals</Name>
				<Source><![CDATA[
    public Object parmTotals(Object _totals = totals)
    {
        totals = _totals;
        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningUpdateType</Name>
				<Source><![CDATA[
    public VersioningUpdateType parmVersioningUpdateType(VersioningUpdateType _versioningUpdateType = versioningUpdateType)
    {
        versioningUpdateType = _versioningUpdateType;
        return versioningUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the posting module.
    /// </summary>
    /// <returns>
    ///    The posting module.
    /// </returns>
    abstract public SysModule postingModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCashDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger posting type for a cash discount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for a cash discount.
    /// </returns>
    abstract public LedgerPostingType postingTypeCashDiscount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeEndDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ledger posting type for end discount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for end discount.
    /// </returns>
    abstract public LedgerPostingType postingTypeEndDiscount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger posting type for line amount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for a line amount.
    /// </returns>
    abstract public LedgerPostingType postingTypeLineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger posting type for a line discount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for a line discount.
    /// </returns>
    abstract public LedgerPostingType postingTypeLineDiscount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ledger posting type for round off.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for round off.
    /// </returns>
    abstract public LedgerPostingType postingTypeRoundOff()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger account used for posting round off.
    /// </summary>
    /// <returns>
    /// The ledger account used for posting round off.
    /// </returns>
    public LedgerDimensionDefaultAccount roundOffLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>FormletterProvider</c> class by using the <c>formletterType</c>
    /// parameter.
    /// </summary>
    /// <param name="_formletterType">
    /// A <c>FormletterType</c> enumeration value.
    /// </param>
    /// <param name="_sourceTable">
    /// A source table record.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormletterProvider</c> class.
    /// </returns>
    public static FormletterProvider newFormletterType(FormletterType   _formletterType,
                                                       Common           _sourceTable)
    {
        FormletterProvider  formletterProvider;
        var formLetterType = FormletterTypeBase::singletonFromFormletterType(_formletterType);
        if (formLetterType)
        {
            formletterProvider = formLetterType.formletterProvider();
            if (formletterProvider)
            {
                formletterProvider.parmSourceTable(_sourceTable);
                return formletterProvider;
            }
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>