<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineType_WithMultipleDlvs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationLineType_WithMultipleDlvs</c> class controls the behavior of order lines with
/// multiple deliveries.
/// </summary>
/// <remarks>
/// Order line acts as a header of a delivery schedule which always stores total delivery schedule
/// quantity and minimum dates. It can be used to manage commercial attributes of delivery lines. In
/// particular, when order line starts to use a new trade agreement the user is prompted whether they
/// want new commercial attributes like price and discount to be copied to all the delivery lines.
/// </remarks>
class SalesQuotationLineType_WithMultipleDlvs
extends SalesQuotationLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line can be reserved.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventBeReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line can be financially updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line can be physically updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdPhysical()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        SalesQuotationDeliverySchedule   salesQuotationDeliverySchedule;
        SalesQuotationLine               deliveryLine;

        // delete all delivery lines
        while select forupdate deliveryLine
            join salesQuotationDeliverySchedule
            where salesQuotationDeliverySchedule.OrderLine    == salesQuotationLine.InventTransId
                && salesQuotationDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            if (deliveryLine.validateDelete())
            {
                deliveryLine.deleteWithoutUpdatingDeliveryScheduleLines();
            }
            else
            {
                // The deletion of the delivery line failed.
                throw error("@SYS131423");
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the alternative warning message for deleting the quotationline.
    /// </summary>
    /// <returns>
    ///     The alternative warning message. If an empty string is returned the standard message should be used.
    /// </returns>
    str getDeleteWarning()
    {
        // You are about to delete the entire delivery schedule. Do you want to proceed?
        return "@SYS136387";
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can have miscellaneous charges associated with it.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory movement that is associated with the line has to be updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean mustInventUpdEstimated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    public void recalculateDeliveryScheduleOrderLine(SalesQuotationLine _salesQuotationLineOrig)
    {
        SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;
        SalesQuotationLine              deliveryLine;

        select sum(SalesQty), count(RecId), minof(ShippingDateRequested), minof(ReceiptDateRequested)
            , sum(PdsCWQty),sum(PdsCWRemainInventPhysical)
            from deliveryLine
            exists join salesQuotationDeliverySchedule
                  where salesQuotationDeliverySchedule.OrderLine    == salesQuotationLine.InventTransId
                     && salesQuotationDeliverySchedule.DeliveryLine == deliveryLine.InventTransId;

        if (deliveryLine.RecId)
        {
            salesQuotationLine.SalesQty = deliveryLine.SalesQty;

            salesQuotationLine.PdsCWQty = deliveryLine.PdsCWQty;
            salesQuotationLine.PdsCWRemainInventPhysical = deliveryLine.PdsCWRemainInventPhysical;

            if (deliveryLine.ShippingDateRequested)
            {
                salesQuotationLine.ShippingDateRequested = deliveryLine.ShippingDateRequested;
            }
            salesQuotationLine.ReceiptDateRequested  = deliveryLine.ReceiptDateRequested;

            if (salesQuotationLine.SalesQty != _salesQuotationLineOrig.SalesQty)
            {
                // SalesQty changed so looking for TA
                SalesShippingDateRequested shippingDateRequestedOrig = salesQuotationLine.ShippingDateRequested;

                salesQuotationLine.salesPurchLineInterface().resetPriceAgreement();
                salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());

                if (salesQuotationLine.DeliveryDateControlType == SalesDeliveryDateControlType::None)
                {
                    // new TA might have changed dates, but since DDC is off we revert that not to run out of sync with the DS lines.
                    salesQuotationLine.ReceiptDateRequested  = deliveryLine.ReceiptDateRequested;
                    salesQuotationLine.ShippingDateRequested = shippingDateRequestedOrig;
                }
            }
        }
        else
        {
            // no delivery line exist, converting to an order line without delivery lines
            salesQuotationLine.SalesQty = 0;
            salesQuotationLine.PdsCWQty = 0;
            salesQuotationLine.PdsCWRemainInventPhysical = 0;
            this.initSalesQty();
            // store QtyOrdered 0 so that orig() will return 0 and diff will be 0 when updating as an order line without delivery lines later on
            salesQuotationLine.updateWithoutUpdatingDeliveryScheduleLines(true);

            salesQuotationLine.LineDeliveryType = LineDeliveryType::OrderLine;
            salesQuotationLine.SalesQty = _salesQuotationLineOrig.SalesQty;

            salesQuotationLine.PdsCWQty = _salesQuotationLineOrig.PdsCWQty;
            salesQuotationLine.PdsCWRemainInventPhysical = _salesQuotationLineOrig.PdsCWRemainInventPhysical;

            salesQuotationLine.salesQtyModified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Quantity field can be edited.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean salesQtyAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        SalesQuotationLine salesQuotationLine_orig = salesQuotationLine.orig();

        if (salesQuotationLine.SalesQty  != salesQuotationLine_orig.SalesQty && !salesQuotationLine.SkipDeliveryScheduleUpdate)
        {
            // Quantity cannot be changed on an order line with multiple deliveries.
            throw error("@SYS131424");
        }

        if (salesQuotationLine.SalesUnit != salesQuotationLine_orig.SalesUnit)
        {
            // Unit cannot be changed on a Delivery Schedule.
            throw error("@SYS131415");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationLineType construct(SalesQuotationLine salesQuotationLine)
    {
        return new SalesQuotationLineType_WithMultipleDlvs(salesQuotationLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
