<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineCopyFromCustConfirmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineCopyFromSource</c> class is responsible for copying <c>SalesLine</c> from a <c>CustConfirmTrans</c>.
/// </summary>
[SalesLineCopyFromSourceFactory(tableStr(CustConfirmTrans))]
class SalesLineCopyFromCustConfirmTrans extends SalesLineCopyFromSource
{
    #ISOCountryRegionCodes

    CustconfirmTrans sourceCustConfirmTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateTaxInformation_IN</Name>
				<Source><![CDATA[
    public void updateTaxInformation_IN()
    {
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(sourceCustConfirmTrans, salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
    public boolean canCopy()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDiscLineChangePolicy</Name>
				<Source><![CDATA[
    protected void updatePriceDiscLineChangePolicy()
    {
        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    protected void copyFromSource()
    {
        super();

        salesLine.initFromCustConfirmTrans(sourceCustConfirmTrans, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLine.Qty,
                                                       #PdsCatchWeightEnabled ? tmpFrmVirtualLine.PdsCWQty : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode retrieveCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (salesLine.currencyCode != sourceCustConfirmTrans.currencyCode)
        {
            currencyCode = sourceCustConfirmTrans.currencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    public Qty retrieveSourceQty()
    {
        return sourceCustConfirmTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    public InventTransId retrieveSourceInventTransId()
    {
        return sourceCustConfirmTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSalesLineLoc</Name>
				<Source><![CDATA[
    public SalesLine retrieveSalesLineLoc()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH, #isoSA, #isoGB, #isoIE]))
        {
            return SalesLine::findInventTransId(sourceCustConfirmTrans.InventTransId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    protected void copyCategoryRelatedData()
    {
        if (salesLine.isCategoryBased())
        {
            salesLineForeignTradeCategory.initFromSalesLineForeignTradeCategory(
                            SalesLineForeignTradeCategory::find(sourceCustConfirmTrans.InventTransId, sourceCustConfirmTrans.DataAreaId));
            copyForeignTradeRecord = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtualLines, SalesCopying _salesCopying)
    {
        super(_salesLine, _salesTable, _tmpFrmVirtualLines, _salesCopying);
        sourceCustConfirmTrans = CustConfirmTrans::findRecId(_tmpFrmVirtualLines.RecordNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
    public Common retrieveSource()
    {
        return this.sourceCustConfirmTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>