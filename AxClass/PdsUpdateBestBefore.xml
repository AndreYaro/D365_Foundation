<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsUpdateBestBefore</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Update batch best before date. This class updates the best before date.
/// </summary>
/// <remarks>
/// The class will use either an active inventBatch record or the values used
/// in the last instance of the class.
/// </remarks>
public class PdsUpdateBestBefore extends RunBaseBatch implements BatchRetryable
{
    QueryRun        queryRun;

    PdsDateCalcType calcType;
    TransDate       bestBeforeDate;

    DialogField     fieldCalcType;
    DialogField     fieldBestBeforeDate;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        calcType,
        bestBeforeDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// May the class run as part of a batch operation
    /// </summary>
    /// <returns>
    /// Returns true.
    /// </returns>
    /// <remarks>
    /// As the class my be run as a batch job, method returns true.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// User dialog for collection of best before date information
    /// </summary>
    /// <returns>
    /// Initialized user dialog
    /// </returns>
    /// <remarks>
    /// The user is presented a dialog to provide a new best before date.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        fieldCalcType       = dialog.addFieldValue(
                                enumstr(PdsDateCalcType),calcType);
        fieldBestBeforeDate = dialog.addFieldValue(
                                extendedtypestr(PdsBestBeforeDate),bestBeforeDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get infromation entered by user
    /// </summary>
    /// <returns>
    /// Super call returns value from <c>RunBaseBatch</c> class.
    /// </returns>
    /// <remarks>
    /// Method retreives the information entered by user and set the class
    /// variables calcType and bestBeforeDate.
    /// </remarks>
    public boolean getFromDialog()
    {
        calcType       = fieldCalcType.value();
        bestBeforeDate = fieldBestBeforeDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.newQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new query
    /// </summary>
    /// <param name="_batchId">
    /// InventBatchId for which to search
    /// </param>
    /// <param name="_itemId">
    /// ItemId for which to search
    /// </param>
    /// <remarks>
    /// The method will create a new query based on the provided batchId and
    /// or itemId
    /// </remarks>
    private void newQuery(InventBatchId _batchId = '', ItemId _itemId = '')
    {
        Query   query = new Query(querystr(PdsInventBatchQuery));

        query.dataSourceNo(1).update(true);
        if (_batchId)
        {
            query.dataSourceNo(1).addRange(
                fieldnum(InventBatch, InventBatchId)).value(_batchId);
        }
        if (_itemId)
        {
            query.dataSourceNo(1).addRange(
                fieldnum(InventBatch, ItemId)).value(_itemId);
        }
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBestBeforeDate</Name>
				<Source><![CDATA[
    public TransDate parmBestBeforeDate(TransDate _bestBeforeDate = bestBeforeDate)
    {
        bestBeforeDate = _bestBeforeDate;

        return bestBeforeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcType</Name>
				<Source><![CDATA[
    public PdsDateCalcType parmCalcType(PdsDateCalcType _calcType = calcType)
    {
        calcType = _calcType;

        return calcType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Current QueryRun Object
    /// </summary>
    /// <returns>
    /// Method returns current QueryRun Object
    /// </returns>
    /// <remarks>
    /// The current queryRun object is return without any modifications
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBestBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the batch's best before date.
    /// </summary>
    /// <param name="_inventBatch">
    /// The Invent batch for getting the best before date.
    /// </param>
    /// <returns>
    /// The calculated best before date.
    /// </returns>
    protected PdsBestBeforeDate getBestBeforeDate(InventBatch _inventBatch)
    {
        switch (calcType)
        {
            case PdsDateCalcType::System :
                return _inventBatch.ExpDate - InventTable::find(_inventBatch.ItemId).PdsBestBefore;

            case PdsDateCalcType::Fixed :
            default:
                return bestBeforeDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the batch best before date.
    /// </summary>
    /// <remarks>
    /// The method will update the batch which are found as part of the queryrun, to
    /// the value entered entered by the user using the specified calculation method.
    /// </remarks>
    public void run()
    {
        Counter             progressTotal;
        InventBatch         inventBatch;

        if (calcType == PdsDateCalcType::Fixed
            && !bestBeforeDate)
        {
            error("@PRO932");
            return;
        }

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@PRO959", progressTotal, #AviUpdate);
        progress.setCount(0);

        ttsbegin;
        while (queryRun.next())
        {
            inventBatch = queryRun.getNo(1);
            progress.setText(strfmt("@PRO56", inventBatch.InventBatchId));
            
            inventBatch.PdsBestBeforeDate = this.getBestBeforeDate(inventBatch);
            if (PdsDateCalcType::Fixed == calcType && !inventBatch.pdsValidateBestBeforeDate(bestBeforeDate))
            {
                ttsabort;
                return;
            }

            inventBatch.update();

            progress.incCount();
        }
        ttscommit;

        info("@PRO2036");
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define if query values should be displayed
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// The method will always return true as the values will be shown.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        container   packedQuery;
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsUpdateBestBefore construct()
    {
        return new PdsUpdateBestBefore();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PRO951";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsUpdateBestBefore     pdsUpdateBestBefore;
        InventBatch             inventBatch;

        if (_args && _args.record()
            && _args.record().TableId == tablenum(InventBatch))
        {
            inventBatch = _args.record();
            pdsUpdateBestBefore = PdsUpdateBestBefore::newBuffer(
                                    inventBatch.InventBatchId,
                                    inventBatch.ItemId);
        }
        else
        {
            pdsUpdateBestBefore = PdsUpdateBestBefore::construct();
            pdsUpdateBestBefore.getLast();
        }

        if (!pdsUpdateBestBefore.prompt())
        {
            return;
        }

        pdsUpdateBestBefore.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of <c>pdsUpdateBestBefore</c> class
    /// </summary>
    /// <param name="_batchId">
    /// InventBatchId for which to retreive new buffer
    /// </param>
    /// <param name="_itemId">
    /// ItemId for which to retreive new buffer
    /// </param>
    /// <returns>
    /// New instance of <c>pdsUpdateBestBefore</c>
    /// </returns>
    /// <remarks>
    /// The new instance will based on the inventBatchId and itemid provided.
    /// </remarks>
    public static PdsUpdateBestBefore newBuffer(
        InventBatchId   _batchId,
        ItemId          _itemId)
    {
        PdsUpdateBestBefore  pdsUpdateBestBefore = PdsUpdateBestBefore::construct();

        pdsUpdateBestBefore.getLast();
        pdsUpdateBestBefore.newQuery(_batchId, _itemId);

        return pdsUpdateBestBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>