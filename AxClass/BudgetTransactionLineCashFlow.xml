<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionLineCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetTransactionLineCashFlow</c> class is the implementation between open budget transaction line transactions and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'BudgetTransactionLine'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class BudgetTransactionLineCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.generateCashFlowForProcessSet();
            this.deleteCompletedRows();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet()
    {
        const int SetSize = 1000;

        RecId lastRecId;
        RecId fromRecId;
        RecId toRecId;

        BudgetTransactionLine budgetTransactionLine;
        SysDaQueryObject countByRecIdQueryObject = this.buildRecIdQuery(budgetTransactionLine);
        SysDaSearchStatement countBySearchStatement = new SysDaSearchStatement();
        SysDaSearchObject countBySearchObject = new SysDaSearchObject(countByRecIdQueryObject);

        int i = 0;
        while (countBySearchStatement.next(countBySearchObject))
        {
            i++;

            RecId currentRecId = budgetTransactionLine.RecId;

            if (i == 1)
            {
                fromRecId = currentRecId;
            }

            if (i == SetSize)
            {
                toRecId = currentRecId;

                this.processCashFlowForProcessSet(fromRecId, toRecId);

                i = 0;
                fromRecId = 0;
                toRecId = 0;
            }

            lastRecId = currentRecId;
        }

        if (i > 0 )
        {
            toRecId = lastRecId;

            this.processCashFlowForProcessSet(fromRecId, toRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(RecId _fromRecId, RecId _toRecId)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowBudgetLine))
        {
            System.Exception exception;
            RecId budgetTransactionLineRecId;
            try
            {
                BudgetTransactionLine budgetTransactionLine;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(budgetTransactionLine, NoYes::Yes);

                SysDaQueryObject queryObject = this.buildGenerateCashFlowQueryForSet(budgetTransactionLine, _fromRecId, _toRecId);
                SysDaSearchStatement searchStatement= new SysDaSearchStatement();
                SysDaSearchObject searchObject = new SysDaSearchObject(queryObject);

                while (searchStatement.next(searchObject))
                {
                    budgetTransactionLineRecId = budgetTransactionLine.RecId;
                    budgetTransactionLine.updateLedgerCashflow(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(BudgetTransactionLine), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(BudgetTransactionLine), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(BudgetTransactionLine), budgetTransactionLineRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(BudgetTransactionLine), budgetTransactionLineRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        #OCCRetryCount
        try
        {
            ttsbegin;

            this.deleteCompletedLedgerCovRows();
            this.deleteCompletedLedgerCovDocumentRows();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows()
    {
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionLineReverse budgetTransactionLineReverse;
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(BudgetTransactionLine)
                notexists join budgetTransactionLine
                    where budgetTransactionLine.IncludeInCashFlowForecast == NoYes::Yes
                        && ledgerCov.TransRecId == budgetTransactionLine.RecId
                notexists join budgetTransactionLineReverse
                    where budgetTransactionLineReverse.ReversedBudgetTransactionLine == budgetTransactionLine.RecId
                        || budgetTransactionLineReverse.ReversingBudgetTransactionLine == budgetTransactionLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows()
    {
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionLineReverse budgetTransactionLineReverse;
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(BudgetTransactionLine)
                notexists join budgetTransactionLine
                    where budgetTransactionLine.IncludeInCashFlowForecast == NoYes::Yes
                        && ledgerCovDocument.TransRecId == budgetTransactionLine.RecId
                notexists join budgetTransactionLineReverse
                    where budgetTransactionLineReverse.ReversedBudgetTransactionLine == budgetTransactionLine.RecId
                        || budgetTransactionLineReverse.ReversingBudgetTransactionLine == budgetTransactionLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildGenerateCashFlowQueryForSet(BudgetTransactionLine _budgetTransactionLine, RecId _fromRecId, RecId _toRecId)
    {
        SysDaQueryObject query = this.buildGenerateCashFlowQuery(_budgetTransactionLine);

        SysDaQueryExpression whereClause = query.whereClause();
        whereClause = whereClause.and(new SysDaGreaterThanOrEqualsExpression(
                    new SysDaFieldExpression(_budgetTransactionLine, fieldStr(BudgetTransactionLine, RecId)),
                    new SysDaValueExpression(_fromRecId))
                .and(new SysDaLessThanOrEqualsExpression(
                    new SysDaFieldExpression(_budgetTransactionLine, fieldStr(BudgetTransactionLine, RecId)),
                    new SysDaValueExpression(_toRecId))));

        query.whereClause(whereClause);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecIdQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildRecIdQuery(BudgetTransactionLine _budgetTransactionLine)
    {
        SysDaQueryObject queryObject = this.buildGenerateCashFlowQuery(_budgetTransactionLine);

        queryObject.projection().add(fieldStr(BudgetTransactionLine, RecId));
        queryObject.orderByClause().add(fieldStr(BudgetTransactionLine, RecId));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildGenerateCashFlowQuery(BudgetTransactionLine _budgetTransactionLine)
    {
        SysDaQueryObject queryBudgetTransactionLine = new SysDaQueryObject(_budgetTransactionLine);
        queryBudgetTransactionLine.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetTransactionLine, fieldstr(BudgetTransactionLine, IncludeInCashFlowForecast)),
                new SysDaValueExpression(enum2int(NoYes::Yes))));

        BudgetTransactionLineReverse budgetTransactionLineReverse;
        SysDaQueryObject queryBudgetTransactionLineReverse = new SysDaQueryObject(budgetTransactionLineReverse);
        queryBudgetTransactionLineReverse.whereClause(new SysDaOrExpression(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetTransactionLine, fieldStr(BudgetTransactionLine, RecId)),
                new SysDaFieldExpression(budgetTransactionLineReverse, fieldStr(BudgetTransactionLineReverse, ReversedBudgetTransactionLine))),
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetTransactionLine, fieldStr(BudgetTransactionLine, RecId)),
                new SysDaFieldExpression(budgetTransactionLineReverse, fieldStr(BudgetTransactionLineReverse, ReversingBudgetTransactionLine)))));

        queryBudgetTransactionLine.joinClause(SysDaJoinKind::NotExistsJoin, queryBudgetTransactionLineReverse);

        BudgetTransactionHeader budgetTransactionHeader;
        SysDaQueryObject queryBudgetTransactionHeader = new SysDaQueryObject(budgetTransactionHeader);
        queryBudgetTransactionHeader.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_budgetTransactionLine, fieldStr(BudgetTransactionLine, BudgetTransactionHeader)),
                new SysDaFieldExpression(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, RecId))),
            new SysDaEqualsExpression(
                new SysDaFieldExpression(budgetTransactionHeader, fieldStr(BudgetTransactionHeader, PrimaryLedger)),
            new SysDaValueExpression(Ledger::current()))));

        queryBudgetTransactionLine.joinClause(SysDaJoinKind::ExistsJoin, queryBudgetTransactionHeader);

        return queryBudgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowBudgetLine))
        {
            System.Exception exception;
            RecId budgetTransactionLineRecId;
            try
            {
                BudgetTransactionLine budgetTransactionLine;
                BudgetTransactionLineReverse budgetTransactionLineReverse;
                BudgetTransactionHeader budgetTransactionHeader;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(budgetTransactionLine, NoYes::Yes);
                LedgerRecId currentLedger = Ledger::current();

                // Update the cash flow information for all budget transaction lines that are marked for inclusion
                // in cash flow and not a reversed or reversal line.
                while select budgetTransactionLine
                    where budgetTransactionLine.IncludeInCashFlowForecast == NoYes::Yes
                notexists join budgetTransactionLineReverse
                    where budgetTransactionLineReverse.ReversedBudgetTransactionLine == budgetTransactionLine.RecId
                        || budgetTransactionLineReverse.ReversingBudgetTransactionLine == budgetTransactionLine.RecId
                exists join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader
                        && budgetTransactionHeader.PrimaryLedger == currentLedger
                {
                    budgetTransactionLineRecId = budgetTransactionLine.RecId;
                    budgetTransactionLine.updateLedgerCashflow(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableId(tableNum(BudgetTransactionLine));
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableId(tableNum(BudgetTransactionLine));
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(BudgetTransactionLine), budgetTransactionLineRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(BudgetTransactionLine), budgetTransactionLineRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        BudgetTransactionLineView budgetTransactionLineView;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;

        TableId budgetTransactionLineTableId = tableNum(BudgetTransactionLine);
        LedgerCovDocumentType type = LedgerCovDocumentType::BudgetTransactionLine;
        Name number;
        Voucher voucher;
        DueDate dueDate;
        DirPartyName accountName;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            DueDate,
            AccountName,
            AccountNumber)
            select budgetTransactionLineTableId,
                RecId,
                TransactionDate
                from budgetTransactionLineView
            join _filter
                where budgetTransactionLineView.RecId == _filter.RefRecId
            join type,
                accountingCurrency,
                number,
                voucher,
                dueDate,
                accountName
                from budgetTransactionLine
                    where budgetTransactionLine.RecId == budgetTransactionLineView.RecId
            join TransactionNumber
                from budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@SYS339215";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;

        select TransactionNumber
            from budgetTransactionHeader
            join budgetTransactionLine
                where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId
                    && budgetTransactionLine.RecId == _recId;

        return budgetTransactionHeader.TransactionNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>