<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_InventReceiptMultiply</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25RegCalc_InventReceiptMultiply extends RunBaseBatch implements BatchRetryable
{
    str                         separator;
    ItemId                      itemFrom, itemTo;
    TransDate                   dateFrom, dateTo, batchDate;
    RTax25RegisterId            registerId;
    boolean                     defineSources, isInventCalc;

    InventTrans                 inventTrans;
    InventTransOrigin           inventTransOrigin;
    RTax25LedgerRun             ledgerRun;
    str                         batchDescription;
    RTax25Query                 regQuery;
    int                         startCount;
    RefRecId                    journalTransRecId;
    RefRecId                    profitTableRecId;
    CostAmountPosted            currentValue;
    InventQty                   currentQty;
    Map                         batchQty;
    RTax25RegisterJournalTrans  registerJournalTrans;
    InventTable                 inventTable;
    RTax25PeriodIterator        rTax25PeriodIterator;

    InventTransPostingReportingView_RU  inventTransPosting;

    #DEFINE.CurrentVersion(11)
    #LOCALMACRO.CurrentList
        startCount,
        journalTransRecId,
        inBatch,
        itemFrom,
        itemTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    private void addLine()
    {
        CostAmountPosted        incomingValue, issuedValue, receivedValue, costValue;
        InventQty               incomingQty, issuedQty, receivedQty;
        CostPrice               costPrice;
    
        RefTableId              refTableId;
        RefRecId                refRecId;
        Description             paymDesc;
        Description             objectDesc;
    
        InventJournalReportTable_RU inventJournalRepTable;
        str                     documentType;
        str                     documentNum  = inventTransOrigin.ReferenceId;
        TransDate               documentDate = inventTransPosting.ReportingDate;
        LabelString             inventTransTypeLabel = new DictEnum(enumnum(InventTransType)).value2Label(enum2int(inventTransOrigin.ReferenceCategory));
    
        #localmacro.calcInventQty
            if (inventTrans.StatusReceipt == StatusReceipt::Purchased)
            {
                receivedQty   = inventTrans.Qty;
                receivedValue = costValue;
            }
            else
            if (inventTrans.StatusIssue == StatusIssue::Sold)
            {
                issuedQty   = - inventTrans.Qty;
                issuedValue = - costValue;
            }
        #endmacro
        ;
    
        if (defineSources)
        {
            [refTableId, refRecId, paymDesc, objectDesc] = RTax25RegCalc_InventReceiptMultiply::defineSources(inventTrans, inventTransOrigin);
        }
        else
        {   // The sources, PaymDescr and assets are defined on the register form by clicking the source button.
            refTableId = tablenum(InventTrans);
            refRecId   = inventTrans.RecId;
        }
        costValue  = inventTrans.costValue();
        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch :
                receivedQty   = inventTrans.Qty;
                receivedValue = costValue;
                if (inventTrans.StatusIssue == StatusIssue::Sold)
                {
                    documentType = "@SYS8125";
                }
                else if (inventTrans.StatusReceipt == StatusReceipt::Purchased)
                {
                    documentType = "@SYS12128";
                }
                documentNum  = inventTrans.InvoiceId;
                break;
    
            case InventTransType::Sales :
                issuedQty   = - inventTrans.Qty;
                issuedValue = - costValue;
                if (inventTrans.StatusIssue == StatusIssue::Sold)
                {
                    documentType = "@SYS12128";
                }
                else if (inventTrans.StatusReceipt == StatusReceipt::Purchased)
                {
                    documentType = "@SYS8125";
                }
                documentNum  = inventTrans.InvoiceId;
                break;
    
            case InventTransType::InventCounting    :
            case InventTransType::InventLossProfit  :
            case InventTransType::InventTransaction :
            case InventTransType::InventTransfer    :
            case InventTransType::BOMLine           :
                select firstonly ReportTypeInvent, ReportId from inventJournalRepTable
                    where inventJournalRepTable.JournalId   == inventTransOrigin.ReferenceId &&
                          inventJournalRepTable.TransDate   == inventTransPosting.AccountingDate;
                if (inventJournalRepTable)
                {
                    documentType = new DictEnum(enumnum(InventJournalReportType_RU)).value2Label(inventJournalRepTable.ReportTypeInvent);
                    documentNum  = inventJournalRepTable.ReportId;
                    documentDate = inventTransPosting.ReportingDate;
                }
                else
                {
                    documentType = "@SYS6790" + "@GLS102908" + inventTransTypeLabel;
                }
                #calcInventQty
                break;
    
            case InventTransType::FixedAssets_RU:
                #calcInventQty
                documentType = inventTransTypeLabel;
                documentNum = (select firstonly AssetId from rAssetScrap
                                   where rassetScrap.InventTransId == inventTransOrigin.InventTransId).AssetId;
                if (! documentNum)
                    documentNum = inventTable.AssetId_RU;
                break;
    
            case InventTransType::ProdLine :
                documentType = "@SYS7767";
                #calcInventQty
                break;
    
            case InventTransType::Production,
                 InventTransType::BOMMain :
                documentType = "@SYS8188";
                #calcInventQty
                break;
    
            default :
                #calcInventQty
                documentType = inventTransTypeLabel;
        }
    
        if (isInventCalc)
        {
            incomingQty   = currentQty;
            incomingValue = currentValue;
            currentQty   += (issuedQty - receivedQty);
            currentValue += (issuedValue - receivedValue);
        }
    
        costPrice = inventTrans.costPrice();
        regQuery.addBodyRecord(profitTableRecId,
                               [inventTransPosting.ItemId,
                                inventTransPosting.ReportingDate,
                                strfmt("@GLS103885", documentType, documentNum, documentDate),
                                batchDescription,
                                batchDate,
                                objectDesc,
                                currentQty,
                                currentValue,
                                paymDesc,
                                RTax25ProfitTable::find(profitTableRecId).Description,
                                receivedQty,
                                receivedQty ? costPrice : 0.0,
                                receivedQty ? receivedValue : 0.0,
                                issuedQty,
                                issuedQty ? costPrice : 0.0,
                                issuedQty ? issuedValue : 0.0,
                                incomingQty,
                                incomingValue], refTableId, refRecId, "", -startCount);
        startCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRollLine</Name>
				<Source><![CDATA[
    private void addRollLine(ItemId  _lastItemId, TransDate   _lastDate)
    {
        CostAmountPosted        incomingValue, issuedValue, receivedValue;
        InventQty               incomingQty, issuedQty, receivedQty;
    
        MapEnumerator           loop = new MapEnumerator(batchQty);
    
        while (loop.moveNext())
        {
            [receivedQty, receivedValue, issuedQty, issuedValue]  = loop.currentValue();
    
            if (isInventCalc)
            {
                incomingQty   = currentQty;
                incomingValue = currentValue;
    
                currentQty   += (issuedQty - receivedQty);
                currentValue += (issuedValue - receivedValue);
            }
    
            regQuery.addBodyRecord(loop.currentKey(),
                                   [_lastItemId,
                                    _lastDate,
                                    '',
                                    '',
                                    batchDate,
                                    '',
                                    currentQty,
                                    currentValue,
                                    '',
                                    RTax25ProfitTable::find(loop.currentKey()).Description,
                                    receivedQty,
                                    0.0,
                                    receivedQty ? receivedValue : 0.0,
                                    issuedQty,
                                    0.0,
                                    issuedQty ? issuedValue : 0.0,
                                    incomingQty,
                                    incomingValue], tablenum(InventTrans), 0, "", -startCount);
            startCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query createQuery()
    {
        QueryBuildDataSource qbdsInventTransPosting, qbdsInventTrans, qbdsInventTransOrigin;
    
        Query query = new Query();
    
        qbdsInventTransPosting = query.addDataSource(tableNum(InventTransPostingReportingView_RU));
    
        qbdsInventTransPosting.addSelectionField(fieldNum(InventTransPostingReportingView_RU, LedgerDimension));
        qbdsInventTransPosting.addSelectionField(fieldNum(InventTransPostingReportingView_RU, OffsetLedgerDimension));
        qbdsInventTransPosting.addSelectionField(fieldNum(InventTransPostingReportingView_RU, ItemId));
        qbdsInventTransPosting.addSelectionField(fieldNum(InventTransPostingReportingView_RU, ReportingDate));
    
        qbdsInventTransPosting.addSortField(fieldNum(InventTransPostingReportingView_RU, ItemId), SortOrder::Ascending);
        qbdsInventTransPosting.addSortField(fieldNum(InventTransPostingReportingView_RU, ReportingDate), SortOrder::Descending);
        qbdsInventTransPosting.addSortField(fieldNum(InventTransPostingReportingView_RU, Voucher), SortOrder::Descending);
        qbdsInventTransPosting.addSortField(fieldNum(InventTransPostingReportingView_RU, InventTransOrigin), SortOrder::Descending);
    
        if (itemFrom)
        {
            qbdsInventTransPosting.addRange(fieldNum(InventTransPostingReportingView_RU, ItemId)).value(queryRange(itemFrom, itemTo));
        }
    
        qbdsInventTransPosting.addRange(fieldNum(InventTransPostingReportingView_RU, InventTransPostingType)).value(queryValue(InventTransPostingType::Financial));
        rTax25PeriodIterator.applyExtendedRange(qbdsInventTransPosting);
    
        qbdsInventTransOrigin = qbdsInventTransPosting.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::InnerJoin);
        qbdsInventTransOrigin.fetchMode(QueryFetchMode::One2One);
        qbdsInventTransOrigin.addLink(fieldNum(InventTransPostingReportingView_RU, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
    
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ReferenceCategory));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ReferenceId));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, InventTransId));
    
        qbdsInventTrans = qbdsInventTransPosting.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.fetchMode(QueryFetchMode::One2One);
    
        qbdsInventTrans.addLink(fieldNum(InventTransPostingReportingView_RU, AccountingDate), fieldNum(InventTrans, DateFinancial));
        qbdsInventTrans.addLink(fieldNum(InventTransPostingReportingView_RU, Voucher), fieldNum(InventTrans, Voucher));
        qbdsInventTrans.addLink(fieldNum(InventTransPostingReportingView_RU, InventTransOrigin), fieldNum(InventTrans, InventTransOrigin));
    
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, DateFinancial));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Voucher));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, InventDimId));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, CostAmountPosted));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, CostAmountAdjustment));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, InvoiceId));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, StatusReceipt));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, StatusIssue));
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initRunItem()
    {
        registerId     = registerJournalTrans.RegisterId;
        dateFrom       = registerJournalTrans.fromDate();
        dateTo         = registerJournalTrans.toDate();
        separator      = RTax25RegisterParameters::find(registerId, 1).Parameter;
        separator      = separator ? separator : ',';
        defineSources  = RTax25RegisterParameters::find(registerId, 5).Parameter ?
                         new DictEnum(enumnum(NoYes)).name2Value(RTax25RegisterParameters::find(registerId, 5).Parameter) :
                         false;
        isInventCalc   = RTax25RegisterParameters::find(registerId, 4).Parameter ?
                        ! new DictEnum(enumnum(NoYes)).name2Value(RTax25RegisterParameters::find(registerId, 4).Parameter) :
                        true;
    
        ledgerRun      = RTax25LedgerRun::newRegisterId(this, "", registerId);
    
        rTax25PeriodIterator = RTax25PeriodFactory::createIteratorJournal(registerJournalTrans.registerJournalTable());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmItemRange(ItemId           _itemFrom,
                              ItemId           _itemTo)
    {
        ;
        itemFrom = _itemFrom;
        itemTo = _itemTo;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTransRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmJournalTransRecId(RefRecId _journalTransRecId = journalTransRecId)
    {
        ;
        journalTransRecId = _journalTransRecId;
        return journalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmStartCount(int _startCount = startCount)
    {
        ;
        startCount = _startCount;
        return startCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        select firstonly registerJournalTrans
            where registerJournalTrans.RecId == journalTransRecId;
    
        regQuery = RTax25Query::newParameters(RTax25RegisterType::InventReceipt, registerJournalTrans, true);
    
        if (startCount)
        {
            this.initRunItem();
            this.runItem();
        }
        else
        {
            this.runFinal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runFinal()
    {
        ttsbegin;
    
        this.sortRegisterTrans();
    
        registerJournalTrans.selectForUpdate(true);
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
        registerJournalTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runItem()
    {
        #OCCRetryCount
        InventSumFinancial      inventSumFinancial;
        InventTrans             inventTransReceipt;
    
        InventTransPostingReportingView_RU inventTransPostingReceipt;
        RTax25RegisterJournalTable         registerJournalTable = registerJournalTrans.registerJournalTable();
        RTax25PeriodIterator               periodIterator;
        LedgerVoucherReportDate_RU         ledgerVoucherReportDate;
        boolean                            isCorrectiveJournal = registerJournalTable.Version > 0;
    
        InventDimParm           batchDimParm;
        InventDim               inventDimBatch, inventDim;
        LedgerDimensionAccount  ledgerDimension,  offsetLedgerDimension;
        RecId                   mainAccountId,    offsetMainAccountId;
        DimensionDefault        defaultDimension, offsetDefaultDimension;
        Map                     exceptions;
        ItemId                  lastItemId = '';
        DateFinancial           lastDate   = dateNull();
        InventSum               inventSum;
        InventSettlement        inventSettlement;
        boolean                 isRoll;
        container               rollType;
        FieldId                 dimFieldId;
        ListEnumerator          dimFieldList = InventDim::dimFieldListEnumerator();
        QueryRun                queryRun;
    
        try
        {
            rollType       = RTax25RegisterParameters::find(registerId, 2).Parameter ?
                             RTax25RegParametersEngine::parameters2Con(RTax25RegisterParameters::find(registerId, 2).Parameter):
                             connull();
            exceptions = new Map(Types::Container, Types::Int64);
    
            this.progressInit('',
                              (select count(RecId) from InventTable
                                   where ! itemFrom                      ||
                                         (InventTable.ItemId >= itemFrom &&
                                          InventTable.ItemId <= itemTo)).RecId,
                              #AviUpdate);
            progress.updateInterval(10);
    
            if (isInventCalc)
            {
                periodIterator = rTax25PeriodIterator.clone();
                periodIterator.parmCorrectiveOnly(true);
            }
    
            queryRun = new QueryRun(this.createQuery());
    
            while(queryRun.next())
            {
                inventTransPosting = queryRun.get(tableNum(InventTransPostingReportingView_RU));
                inventTrans = queryRun.get(tableNum(InventTrans));
                inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
    
                // Define profit code and check
                // Notice purchases have no correct operation account
                if (inventTrans.Qty > 0)
                {
                    ledgerDimension       = inventTransPosting.LedgerDimension;
                    offsetLedgerDimension = inventTransPosting.OffsetLedgerDimension;
                }
                else
                {
                    ledgerDimension       = inventTransPosting.OffsetLedgerDimension;
                    offsetLedgerDimension = inventTransPosting.LedgerDimension;
                }
    
                mainAccountId          = LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerDimension).RecId;
                defaultDimension       = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
                offsetMainAccountId    = LedgerDimensionFacade::getMainAccountFromLedgerDimension(offsetLedgerDimension).RecId;
                offsetDefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetLedgerDimension);
    
                if (exceptions.exists([ledgerDimension, offsetLedgerDimension]))
                {
                    profitTableRecId = exceptions.lookup([ledgerDimension, offsetLedgerDimension]);
                }
                else
                {
                    profitTableRecId = 0;
                    if (ledgerRun.checkException(registerId, mainAccountId, offsetMainAccountId, defaultDimension, offsetDefaultDimension))
                    {
                        profitTableRecId = RTax25ProfitTable::findDefaultDimension(defaultDimension, false, registerId).RecId;
                        if (!profitTableRecId)
                        {
                            profitTableRecId = RTax25ProfitTable::findDefaultDimension(offsetDefaultDimension, false, registerId).RecId;
                        }
                        if (!profitTableRecId)
                        {
                            if (!defaultDimension && !offsetDefaultDimension)  // AX6_300566
                            {
                                profitTableRecId = ledgerRun.checkAccountsInRange(mainAccountId, defaultDimension, offsetMainAccountId, offsetDefaultDimension);
                            }
                        }
                    }
                    exceptions.insert([ledgerDimension, offsetLedgerDimension], profitTableRecId);
                }
    
                if (! profitTableRecId)
                    continue;
    
                if (inventTransPosting.ItemId != lastItemId)
                {
                    if (isRoll && lastItemId)
                    {
                        this.addRollLine(lastItemId, lastDate);
                    }
    
                    select firstonly ItemType, AssetId_RU, Product, DataAreaId, ItemId from inventTable
                        where inventTable.ItemId == inventTransPosting.ItemId;
                    isRoll   = confind(rollType, new SysDictEnum(enumnum(ItemType)).value2Name(inventTable.ItemType));
                    lastDate = datenull();
                }
    
                if (isRoll)
                {
                    if (inventTransPosting.ReportingDate != lastDate || inventTransPosting.ItemId != lastItemId)
                    {
                        if (lastDate && lastItemId)
                        {
                            this.addRollLine(lastItemId, lastDate);
                        }
                        if (inventTransPosting.ItemId != lastItemId)
                        {
                            lastItemId = inventTransPosting.ItemId;
                            progress.setText(strfmt("@SYS58436", lastItemId));
                            progress.incCount();
    
                            if (isInventCalc)
                            {
                                // Batch receipt
                                select minOf(ReportingDate) from inventTransPostingReceipt
                                    where inventTransPostingReceipt.InventTransPostingType == InventTransPostingType::Financial
                                exists join inventTransReceipt
                                    where inventTransReceipt.DateFinancial == inventTransPostingReceipt.AccountingDate        &&
                                            inventTransReceipt.InventTransOrigin == inventTransPostingReceipt.InventTransOrigin &&
                                            inventTransReceipt.ItemId        == lastItemId                                      &&
                                            inventTransReceipt.StatusReceipt == StatusReceipt::Purchased;
    
                                batchDate = inventTransPostingReceipt.ReportingDate;
    
                                select sum(PostedQty), sum(PostedValue) from inventSum
                                    where inventSum.ItemId == lastItemId;
    
                                select sum(CostAmountPosted),sum(Qty) from inventTransReceipt
                                    where inventTransReceipt.ItemId        == lastItemId &&
                                            inventTransReceipt.DateFinancial >  dateTo;
    
                                currentQty   = inventSum.PostedQty - inventTransReceipt.Qty;
                                currentValue = inventSum.PostedValue - inventTransReceipt.CostAmountPosted;
    
                                select sum(CostAmountAdjustment) from inventSettlement
                                    where inventSettlement.ItemId       == lastItemId                &&
                                            inventSettlement.Cancelled    == NoYes::No                 &&
                                            inventSettlement.TransDate    >  dateTo                    &&
                                            inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur &&
                                            inventSettlement.SettleModel  != InventSettleModel::PhysicalValue;
    
                                currentValue -= inventSettlement.CostAmountAdjustment;
    
                                if (isCorrectiveJournal)
                                {
                                    periodIterator.first(true);
    
                                    do
                                    {
                                        //Adding corrective transactions
                                        select sum(CostAmountPosted),sum(Qty) from inventTransReceipt
                                            where inventTransReceipt.ItemId        == lastItemId
                                            exists join ledgerVoucherReportDate
                                                where ledgerVoucherReportDate.Voucher          == inventTransReceipt.Voucher                             &&
                                                        ledgerVoucherReportDate.AccountingDate   == inventTransReceipt.DateFinancial                     &&
                                                        ledgerVoucherReportDate.AccountingDate   >= max(periodIterator.fromDateAccounting(), dateTo + 1) &&
                                                        ledgerVoucherReportDate.AccountingDate   <= periodIterator.toDateAccounting()                    &&
                                                        ledgerVoucherReportDate.ReportingDate    >= periodIterator.fromDateReporting()                   &&
                                                        ledgerVoucherReportDate.ReportingDate    <= periodIterator.toDateReporting();
    
    
                                        currentQty   += inventTransReceipt.Qty;
                                        currentValue += inventTransReceipt.CostAmountPosted;
    
                                        //Adding corrective inventSettlements
                                        select sum(CostAmountAdjustment) from inventSettlement
                                            where inventSettlement.ItemId       == lastItemId                &&
                                                    inventSettlement.Cancelled    == NoYes::No                 &&
                                                    inventSettlement.TransDate    >  dateTo                    &&
                                                    inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur &&
                                                    inventSettlement.SettleModel  != InventSettleModel::PhysicalValue
                                            exists join ledgerVoucherReportDate
                                                        where ledgerVoucherReportDate.Voucher        == inventSettlement.Voucher                             &&
                                                            ledgerVoucherReportDate.AccountingDate   == inventSettlement.TransDate                           &&
                                                            ledgerVoucherReportDate.AccountingDate   >= max(periodIterator.fromDateAccounting(), dateTo + 1) &&
                                                            ledgerVoucherReportDate.AccountingDate   <= periodIterator.toDateAccounting()                    &&
                                                            ledgerVoucherReportDate.ReportingDate    >= periodIterator.fromDateReporting()                   &&
                                                            ledgerVoucherReportDate.ReportingDate    <= periodIterator.toDateReporting();
    
                                        currentValue += inventSettlement.CostAmountAdjustment;
                                    }
                                    while (periodIterator.next());
                                }
                            }
                        }
                        lastDate   = inventTrans.DateFinancial;
    
                        batchQty = new Map(Types::Int64, Types::Container);
                    }
                    this.updateRollLine();
                }
                else
                {
                    if (inventTransPosting.ItemId != lastItemId)
                    {
                        if (lastItemId)
                        {
                            ttsbegin;
                            regQuery.insertDatabase();
                            ttscommit;
                            regQuery.initRegBuffer();
                        }
    
                        lastItemId = inventTransPosting.ItemId;
                        progress.setText(strfmt("@SYS58436", lastItemId));
                        progress.incCount();
    
                        InventDimGroupSetup::newInventTable(inventTable).inventDimParmActiveFinancialInventory(batchDimParm);
                        if (isInventCalc)
                            batchQty = new Map(Types::String, Types::Container);
                    }
    
                    batchDescription = '';
                    select firstonly inventDimBatch
                        where inventDimBatch.InventDimId  == inventTrans.InventDimId;
    
                    dimFieldList.reset();
                    while (dimFieldList.moveNext())
                    {
                        dimFieldId = dimFieldList.current();
                        if (inventDimBatch.(dimFieldId))
                        {
                            if (batchDimParm.(InventDim::dim2dimParm(dimFieldId)))
                                batchDescription += (batchDescription ? separator : "") + inventDimBatch.(dimFieldId);
                            else
                                inventDimBatch.(dimFieldId) = InventDim::emptyDimField(dimFieldId);
                        }
                    }
    
                    if (isInventCalc)
                    {
                        if (batchQty.exists(batchDescription))
                        {
                            [currentQty, currentValue, batchDate]  = batchQty.lookup(batchDescription);
                        }
                        else
                        {
                            [currentQty, currentValue, batchDate]  = [0., 0., dateNull()];
    
                            // Batch receipt
                            select minof(ReportingDate) from inventTransPostingReceipt
                                where inventTransPostingReceipt.InventTransPostingType == InventTransPostingType::Financial
                            exists join inventTransReceipt
                                where inventTransReceipt.Voucher             == inventTransPostingReceipt.Voucher           &&
                                        inventTransReceipt.DateFinancial       == inventTransPostingReceipt.AccountingDate    &&
                                        inventTransReceipt.InventTransOrigin   == inventTransPostingReceipt.InventTransOrigin &&
                                        inventTransReceipt.ItemId              == lastItemId                                  &&
                                        inventTransReceipt.StatusReceipt       == StatusReceipt::Purchased
                            #inventDimJoin(inventTransReceipt.InventDimId, inventDim, inventDimBatch, batchDimParm, dimIdIdx);
    
                            batchDate = inventTransPostingReceipt.ReportingDate;
    
                            inventSumFinancial = new InventSumFinancial(dateTo, lastItemId, inventDimBatch, batchDimParm);
                            currentQty   = inventSumFinancial.qty();
                            currentValue = inventSumFinancial.value();
    
                            if (isCorrectiveJournal)
                            {
                                periodIterator.first(true);
    
                                do
                                {
                                    //Adding corrective transactions
                                    select sum(CostAmountPosted),sum(Qty) from inventTransReceipt
                                        where inventTransReceipt.ItemId        == lastItemId
                                        #inventDimJoin(inventTransReceipt.InventDimId, inventDim, inventDimBatch, batchDimParm, dimIdIdx)
                                        exists join ledgerVoucherReportDate
                                            where ledgerVoucherReportDate.Voucher        == inventTransReceipt.Voucher                              &&
                                                    ledgerVoucherReportDate.AccountingDate == inventTransReceipt.DateFinancial                      &&
                                                    ledgerVoucherReportDate.AccountingDate >= max(periodIterator.fromDateAccounting(), dateTo + 1)  &&
                                                    ledgerVoucherReportDate.AccountingDate <= periodIterator.toDateAccounting()                     &&
                                                    ledgerVoucherReportDate.ReportingDate  >= periodIterator.fromDateReporting()                    &&
                                                    ledgerVoucherReportDate.ReportingDate  <= periodIterator.toDateReporting();
    
                                    currentQty   += inventTransReceipt.Qty;
                                    currentValue += inventTransReceipt.CostAmountPosted;
    
                                    //Adding corrective inventSettlements
                                    select sum(CostAmountAdjustment) from inventSettlement
                                        where inventSettlement.ItemId       == lastItemId                                     &&
                                                inventSettlement.Cancelled    == NoYes::No                                    &&
                                                inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur &&
                                                inventSettlement.SettleModel  != InventSettleModel::PhysicalValue
                                        join TableId from ledgerVoucherReportDate
                                            where ledgerVoucherReportDate.AccountingDate   == inventSettlement.TransDate                            &&
                                                    ledgerVoucherReportDate.Voucher        == inventSettlement.Voucher                              &&
                                                    ledgerVoucherReportDate.AccountingDate >= max(periodIterator.fromDateAccounting(), dateTo + 1)  &&
                                                    ledgerVoucherReportDate.AccountingDate <= periodIterator.toDateAccounting()                     &&
                                                    ledgerVoucherReportDate.ReportingDate  >= periodIterator.fromDateReporting()                    &&
                                                    ledgerVoucherReportDate.ReportingDate  <= periodIterator.toDateReporting()
                                    exists join inventTransReceipt
                                        where inventTransReceipt.RecId == inventSettlement.TransRecId
                                    #inventDimJoin(inventTransReceipt.InventDimId, inventDim, inventDimBatch, batchDimParm, dimIdIdx);
    
                                    currentValue += inventSettlement.CostAmountAdjustment;
                                }
                                while (periodIterator.next());
                            }
                        }
                    }
                    this.addLine();
                    if (isInventCalc)
                        batchQty.insert(batchDescription, [currentQty, currentValue, batchDate]);
                }
            }
    
            if (isRoll)
            {
                this.addRollLine(lastItemId, lastDate);
            }
            ttsbegin;
            regQuery.insertDatabase();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    private void sortRegisterTrans()
    {
        RTax25RegisterTrans_InventReceipt registerTrans;
    
        Amount              totalReceiptQty, totalReceiptValue, totalIssueQty, totalIssueValue;
        Set                 sortSet;
        MapEnumerator       mapLoop;
        SetEnumerator       setLoop;
        Map                 sort    = new Map(Types::Integer, Types::Class);
        int                 i;
    
        registerTrans.skipDataMethods(true);
        registerTrans.skipDatabaseLog(true);
        registerTrans.skipEvents(true);
    
        this.progressInit("@SYS4138",
                          (select count(RecId) from RTax25RegisterTrans_InventReceipt
                               where RTax25RegisterTrans_InventReceipt.JournalTransRefRecId == journalTransRecId).RecId,
                          #AviUpdate);
        progress.updateInterval(10);
    
        while select RecId, DateFinancial, ReceivedQty, ReceivedAmount, IssuedQty, IssuedAmount from registerTrans
            where registerTrans.JournalTransRefRecId == journalTransRecId
        {
            i = date2num(registerTrans.DateFinancial);
            if (sort.exists(i))
            {
                 sortSet = sort.lookup(i);
            }
            else
            {
                 sortSet = new Set(Types::Int64);
            }
            sortSet.add(registerTrans.RecId);
            sort.insert(i, sortSet);
    
            totalReceiptQty   += registerTrans.ReceivedQty;
            totalReceiptValue += registerTrans.ReceivedAmount;
            totalIssueQty     += registerTrans.IssuedQty;
            totalIssueValue   += registerTrans.IssuedAmount;
        }
    
        mapLoop = sort.getEnumerator();
        i       = 2;
        while (mapLoop.moveNext())
        {
            sortSet = mapLoop.currentValue();
            setLoop = sortSet.getEnumerator();
            while (setLoop.moveNext())
            {
                select firstonly forupdate registerTrans
                    where registerTrans.RecId == setLoop.current();
                registerTrans.LineNumber = i;
                registerTrans.doUpdate();
                progress.setText(strFmt("@SYS26913", i));
                progress.incCount();
                i++;
            }
        }
        if (i > 2)
        {
            regQuery.addHeaderRecord(0, conNull(), 0, "@SYS4925", 1);
            regQuery.addFooterRecord(0,
                                    ["", dateNull(), "", "", dateNull(), "", 0.0, 0.0, "", "", totalReceiptQty, 0.0, totalReceiptValue, totalIssueQty, 0.0, totalIssueValue, 0.0, 0.0],
                                     0,
                                     "@SYS7446",
                                     i);
        }
        regQuery.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRollLine</Name>
				<Source><![CDATA[
    private void updateRollLine()
    {
        CostAmountPosted        issuedValue, receivedValue, costValue;
        InventQty               issuedQty, receivedQty;
        ;
    
        if (batchQty.exists(profitTableRecId))
        {
            [receivedQty, receivedValue, issuedQty, issuedValue]  = batchQty.lookup(profitTableRecId);
        }
    
        costValue  = inventTrans.costValue();
    
        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch :
                receivedQty   += inventTrans.Qty;
                receivedValue += costValue;
                break;
    
            case InventTransType::Sales :
                issuedQty   -= inventTrans.Qty;
                issuedValue -= costValue;
                break;
    
            default :
                if (inventTrans.StatusReceipt == StatusReceipt::Purchased)
                {
                    receivedQty   += inventTrans.Qty;
                    receivedValue += costValue;
                }
                if (inventTrans.StatusIssue  == StatusIssue::Sold)
                {
                    issuedQty   -= inventTrans.Qty;
                    issuedValue -= costValue;
                }
        }
    
        batchQty.insert(profitTableRecId, [receivedQty, receivedValue, issuedQty, issuedValue]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc_InventReceiptMultiply construct(int          _startCount,
                                                                       RefRecId     _journalTransRecId,
                                                                       boolean      _isInBatch)
    {
        RTax25RegCalc_InventReceiptMultiply calc = new RTax25RegCalc_InventReceiptMultiply();
        ;
    
        calc.parmStartCount(_startCount);
        calc.parmJournalTransRecId(_journalTransRecId);
        calc.parmInBatch(_isInBatch);
    
        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineSources</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container defineSources(InventTrans        _inventTrans,
                                                 InventTransOrigin  _inventTransOrigin)
    {
        VendInvoiceJour     vendInvoiceJour;
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        RAssetPurchTrans    rassetPurchTrans;
        RAssetTable         rassetTable;
        InventJournalTrans  inventJournalTrans;
        Description         paymDesc;
        Description         objectDesc;
        RefTableId          refTableId;
        RefRecId            refRecId;
    
        switch (_inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch :
                select firstonly vendInvoiceJour
                        where vendInvoiceJour.PurchId       == _inventTransOrigin.ReferenceId &&
                              vendInvoiceJour.InvoiceId     == _inventTrans.InvoiceId         &&
                              vendInvoiceJour.InvoiceDate   == _inventTrans.DateFinancial;
    
                refTableId = vendInvoiceJour.TableId;
                refRecId   = vendInvoiceJour.RecId;
    
                paymDesc = VendPaymModeTable::find(vendInvoiceJour.vendTrans().PaymMode).Name;
    
                while select AccountNum, Name from rassetTable
                    where rassetTable.PurchID             == _inventTransOrigin.ReferenceId &&
                          rassetTable.InventTransId       == _inventTransOrigin.InventTransId
                exists join rassetPurchTrans
                    where rassetPurchTrans.AssetId        == rassetTable.AccountNum     &&
                          rassetPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine
                {
                    objectDesc += objectDesc ? "@SYS35667"+"@GLS102908" : "";
                    objectDesc += (rassetTable.Name ? rassetTable.Name : rassetTable.AccountNum);
                }
                break;
    
            case InventTransType::Sales :
                select firstonly custInvoiceJour
                    where custInvoiceJour.SalesId       == _inventTransOrigin.ReferenceId   &&
                          custInvoiceJour.InvoiceId     == _inventTrans.InvoiceId    &&
                          custInvoiceJour.InvoiceDate   == _inventTrans.DateFinancial;
    
                refTableId = custInvoiceJour.TableId;
                refRecId   = custInvoiceJour.RecId;
    
                paymDesc = CustPaymModeTable::find(custInvoiceJour.paymMode()).Name;
                select firstonly AssetId_RU from custInvoiceTrans_RU
                    join RecId from custInvoiceTrans
                    where custInvoiceTrans.RecId         == custInvoiceTrans_RU.CustInvoiceTrans &&
                            custInvoiceTrans.SalesId     == custInvoiceJour.SalesId &&
                            custInvoiceTrans.InvoiceId   == custInvoiceJour.InvoiceId &&
                            custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate;
    
                objectDesc = RAssetTable::find(custInvoiceTrans_RU.AssetId_RU).Name;
                break;
    
            case InventTransType::InventCounting    :
            case InventTransType::InventLossProfit  :
            case InventTransType::InventTransaction :
            case InventTransType::InventTransfer    :
            case InventTransType::BOMLine           :
                select firstonly TableId, RecId from inventJournalTrans
                    where (inventJournalTrans.InventTransId   == _inventTransOrigin.InventTransId  ||
                           inventJournalTrans.ToInventTransId == _inventTransOrigin.InventTransId) &&
                          inventJournalTrans.JournalId        == _inventTransOrigin.ReferenceId    &&
                          inventJournalTrans.Voucher          == _inventTrans.Voucher;
                refTableId = inventJournalTrans.TableId;
                refRecId   = inventJournalTrans.RecId;
                break;
    
            case InventTransType::FixedAssets_RU:
                rassetTable = RAssetTable::find((select firstonly AssetId from rAssetScrap
                                                     where rassetScrap.InventTransId == _inventTransOrigin.InventTransId).AssetId);
                if (! rassetTable)
                {
                    if (! _inventTrans.ItemId)
                        _inventTrans = InventTrans::findRecId(_inventTrans.RecId);
                    rassetTable = RAssetTable::find(InventTable::find(_inventTrans.ItemId).AssetId_RU);
                }
                objectDesc = (rassetTable.Name ? rassetTable.Name : rassetTable.AccountNum);
                refTableId = rassetTable.TableId;
                refRecId   = rassetTable.RecId;
                break;
    
            case InventTransType::ProdLine :
                if (! _inventTrans.InventTransOrigin)
                    _inventTrans = InventTrans::findRecId(_inventTrans.RecId);
                objectDesc = _inventTrans.assemblyInventTransOrigin().ItemId;
                break;
        }
    
        return [refTableId, refRecId, paymDesc, objectDesc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>