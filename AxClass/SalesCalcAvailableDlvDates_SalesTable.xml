<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_SalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_SalesTable extends SalesCalcAvailableDlvDates
{
    SalesTable      salesTable;
    SalesTable      salesTableOrig;
    SalesTable      salesTableCaller;
    SalesTableType  salesTableType;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        salesTable,
        salesTableOrig,
        salesTableCaller
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deliveryDateControlActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery date control is active or not.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is active; otherwise, false.
    /// </returns>
    protected boolean deliveryDateControlActive()
    {
        boolean ok = super();

        if (ok)
        {
            if (!salesTableType)
                salesTableType = salesTable.type();

            if (!salesTableType.doDeliveryDateControl())
                ok = false;
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (salesTableOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != salesTableOrig.DlvMode                 ||
                deliveryDateControlMap.InventSiteId            != salesTableOrig.InventSiteId            ||
                deliveryDateControlMap.InventLocationId        != salesTableOrig.InventLocationId        ||
                deliveryDateControlMap.ShippingDateRequested   != salesTableOrig.ShippingDateRequested   ||
                deliveryDateControlMap.ShippingDateConfirmed   != salesTableOrig.ShippingDateConfirmed   ||
                deliveryDateControlMap.ReceiptDateRequested    != salesTableOrig.ReceiptDateRequested    ||
                deliveryDateControlMap.ReceiptDateConfirmed    != salesTableOrig.ReceiptDateConfirmed)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (salesTable.DlvMode                 != salesTableOrig.DlvMode
         || salesTable.InventLocationId        != salesTableOrig.InventLocationId
         || salesTable.DeliveryPostalAddress   != salesTableOrig.DeliveryPostalAddress
         || salesTable.DeliveryDateControlType != salesTableOrig.DeliveryDateControlType)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(FieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;

        switch (_fieldId)
        {
            case fieldNum(SalesTable,ReceiptDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldNum(SalesTable,ShippingDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            case fieldNum(SalesTable,ShippingDateConfirmed) :
                dlvDateType = SalesDlvDateType::ConfirmedShipping;
                break;
            case fieldNum(SalesTable,ReceiptDateConfirmed) :
                dlvDateType = SalesDlvDateType::ConfirmedReceipt;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDerivedOrder</Name>
				<Source><![CDATA[
    public boolean interCompanyDerivedOrder()
    {
        return salesTable.InterCompanyOrder && salesTable.InterCompanyOrigin == InterCompanyOrigin::Derived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDirectDeliveryOrig</Name>
				<Source><![CDATA[
    public boolean interCompanyDirectDeliveryOrig()
    {
        return salesTable.InterCompanyDirectDelivery && salesTable.existInterCompanySales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOrder</Name>
				<Source><![CDATA[
    public boolean interCompanyOrder()
    {
        return salesTable.InterCompanyOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = salesTable.InventLocationId)
    {
        deliveryDateControlMap.InventLocationId = _inventLocationId;
        salesTable.InventLocationId             = _inventLocationId;
        return salesTable.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = salesTable.InventSiteId)
    {
        deliveryDateControlMap.InventSiteId = _inventSiteId;
        salesTable.InventSiteId             = _inventSiteId;
        return salesTable.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        deliveryDateControlMap = _salesTable.data();
        salesTable             = _salesTable.data();
        salesTableOrig         = _salesTable.orig();
        salesTableCaller       = _salesTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer and returns it.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = LogisticsLocationExt::find(salesTable.deliveryLocation()).SalesCalendarId;

        if (!receiptCalendarId && salesTable.AddressRefTableId && salesTable.AddressRefRecId )
        {
            switch (salesTable.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(salesTable.AddressRefRecId).SalesCalendarId;
                    break;

                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == salesTable.AddressRefTableId && custTable.RecId == salesTable.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = CustTable::find(salesTable.CustAccount).SalesCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on the delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        super();

        switch (salesTable.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                salesLeadTime = 0;
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime = SalesParameters::find().LeadTimeSalesDefault;
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
            return;

        if (_record.TableId != tableNum(SalesTable))
            throw error("@SYS18626");

        SalesTable salesTableCallerLocal = _record;

        if (this.parmCancelModifiedField())
        {
            if (salesTableCallerLocal.RecId)
            {
                salesTableCallerLocal.ShippingDateConfirmed   = salesTableOrig.ShippingDateConfirmed;
                salesTableCallerLocal.ShippingDateRequested   = salesTableOrig.ShippingDateRequested;
                salesTableCallerLocal.ReceiptDateConfirmed    = salesTableOrig.ReceiptDateConfirmed;
                salesTableCallerLocal.ReceiptDateRequested    = salesTableOrig.ReceiptDateRequested;
                salesTableCallerLocal.DeliveryDateControlType = salesTableOrig.DeliveryDateControlType;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            salesTableCallerLocal.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
        else
        {
            salesTableCallerLocal.DlvMode               = deliveryDateControlMap.DlvMode;
            salesTableCallerLocal.InventLocationId      = deliveryDateControlMap.InventLocationId;
            salesTableCallerLocal.InventSiteId          = deliveryDateControlMap.InventSiteId;
            salesTableCallerLocal.ShippingDateRequested = deliveryDateControlMap.ShippingDateRequested;
            salesTableCallerLocal.ShippingDateConfirmed = deliveryDateControlMap.ShippingDateConfirmed;

            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                salesTableCallerLocal.ReceiptDateRequested  = deliveryDateControlMap.ReceiptDateRequested;
                salesTableCallerLocal.ReceiptDateConfirmed  = deliveryDateControlMap.ReceiptDateConfirmed;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_SalesTable construct()
    {
        return new SalesCalcAvailableDlvDates_SalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesTable</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_SalesTable newSalesTable(SalesTable  _salesTable,
                                                                      FieldId     _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_SalesTable salesCalc = SalesCalcAvailableDlvDates_SalesTable::construct();

        SalesDlvDateType masterDateType = salesCalc.fieldId2DlvDateType(_fieldId);
        salesCalc.parmSalesTable(_salesTable);
        salesCalc.parmInventLocationIdSelected(_salesTable.InventLocationId);
        salesCalc.parmDlvModeIdSelected(_salesTable.DlvMode);
        salesCalc.parmInventSiteIdSelected(_salesTable.InventSiteId);
        salesCalc.parmInventLocationTransportShipping(_salesTable.InventLocationId);
        salesCalc.parmOrderEntryDeadlineGroupId(CustTable::find(_salesTable.CustAccount).OrderEntryDeadlineGroupId);
        salesCalc.parmRecalculateShippingDate(_salesTable.RecId == 0);
        salesCalc.initMaster(masterDateType);
        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>