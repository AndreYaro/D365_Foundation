<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralBundle_Insert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransNeutralBundle_Insert</c> does not insert transactions untill the <c>insertRemainingRecords</c> method is
/// called. The class tracks transactions, and neutralizes as soon as it determines that a set of transactions
/// can be neutralized, by dropping the reference to them, thereby not inserting them in the end.
/// </summary>
public class ReqTransNeutralBundle_Insert extends ReqTransNeutralBundle
{
    private System.Collections.ArrayList reqTransList;
    private Qty totalQty;
    private int neutralizedRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReqTrans</Name>
				<Source><![CDATA[
    internal int addReqTrans(ReqTrans _reqTrans)
    {
        totalQty += _reqTrans.Qty;

        if (totalQty == 0)
        {
            int numberOfRemovedTransactions = reqTransList != null ? reqTransList.Count : 0;

            reqTransList = null;

            neutralizedRecords += numberOfRemovedTransactions;
            return -numberOfRemovedTransactions;
        }
        else
        {
            this.addReqTransToBundle(_reqTrans);
            return 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRemainingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the non-neutralized transactions in the bundle.
    /// </summary>
    /// <param name = "_insertList">
    /// A record insert list to use for inserting <c>ReqTrans</c> records.
    /// </param>
    /// <param name = "_reqPlanData">
    /// The plan data to use with the insertion of the records.
    /// </param>
    /// <returns>An integer indicating the number of transactions that were neutralized.</returns>
    internal int insertRemainingRecords(RecordInsertList _insertList, ReqPlanData _reqPlanData)
    {
        if (reqTransList != null)
        {
            var nonNeutralTransactionsEnumerator = reqTransList.getEnumerator();

            while (nonNeutralTransactionsEnumerator.moveNext())
            {
                ReqTrans trans = nonNeutralTransactionsEnumerator.Current;
                trans.insertUsingInsertList(_insertList, _reqPlanData);
            }
        }

        return neutralizedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReqTransToBundle</Name>
				<Source><![CDATA[
    private void addReqTransToBundle(ReqTrans _reqTrans)
    {
        if (!reqTransList)
        {
            reqTransList = new System.Collections.ArrayList();
        }

        reqTransList.Add(_reqTrans.data());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>