<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPrepaymentHandling_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class VendPrepaymentHandling_W extends CustVendPrepaymentHandling_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditTaxCreditMemo</Name>
				<Source><![CDATA[
    final public boolean allowEditTaxCreditMemo()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditTaxDocument</Name>
				<Source><![CDATA[
    final public boolean allowEditTaxDocument()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    final public boolean check()
    {
        boolean         ret = super();
        VendTransOpen   vendTransOpen = VendTransOpen::findRefId(custVendTrans.RecId);

        if (SpecTrans::existByRef(vendTransOpen.company(), tablenum(VendTransOpen), vendTransOpen.RecId))
        {
            ret = checkFailed("@GLS109869");
        }

        // <GEECZ>
        if (createTaxDocument && !taxDocumentNum)
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.TaxGroup &&
                      ledgerJournalTrans.TaxItemGroup &&
                     (ledgerJournalTrans.AmountCurCredit ||
                      ledgerJournalTrans.AmountCurDebit);

            if (ledgerJournalTrans.RecId)
            {
                ret = checkFailed("@GLS111693");
            }
        }
        // </GEECZ>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFacture</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    protected void createFacture()
    {
        FactureJour_RU   factureJour;
        FactureDelete_RU factureDelete;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            return;

        // delete old facture
        factureJour = FactureJour_RU::find(custVendTrans.CustVendTrans::getCustVendTrans_W().PrepaymentFactureId_W,
                                           FactureModule_RU::Vend,
                                           true);
        if (factureJour)
        {
            factureDelete = FactureDelete_RU::construct(factureJour);
            factureDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    final public void init()
    {
        super();

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            this.parmCreateTaxDocument(isConfigurationkeyEnabled(configurationkeynum(CZCustVendAdvanceInvoices)) &&
                !CzTaxDocumentTable::exist(custVendTrans.Voucher, custVendTrans.TransDate));
            this.parmCreateTaxCreditMemo(isConfigurationkeyEnabled(configurationkeynum(CZCustVendAdvanceInvoices)) &&
                !this.parmCreateTaxDocument());
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPaymentValue</Name>
				<Source><![CDATA[
    protected void initDefaultPaymentValue()
    {
        this.parmPostingProfile(VendParameters::find().PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPrepaymentValue</Name>
				<Source><![CDATA[
    protected void initDefaultPrepaymentValue()
    {
        VendParameters vendParameters = VendParameters::find();

        ledgerJournalTrans.TaxGroup        = vendParameters.TaxGroup_W;
        ledgerJournalTrans.TaxItemGroup    = vendParameters.TaxItemGroup_W;
        this.parmPostingProfile(vendParameters.PrepaymentPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    final protected void initLedgerVoucher()
    {
        NumberSeq numberSeq = NumberSeq::newGetVoucher(VendParameters::numRefVendPaymentVoucher());
        ;
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     this.sysModule(),
                                                     numberSeq.parmVoucherSequenceCode());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeBalance</Name>
				<Source><![CDATA[
    final protected LedgerPostingType ledgerPostingTypeBalance()
    {
        return LedgerPostingType::VendBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypePayment</Name>
				<Source><![CDATA[
    final protected LedgerPostingType ledgerPostingTypePayment()
    {
        return LedgerPostingType::VendPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxt</Name>
				<Source><![CDATA[
    final protected LedgerTransTxt ledgerTransTxt()
    {
        return LedgerTransTxt::VendPaymentVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtReverse</Name>
				<Source><![CDATA[
    final protected LedgerTransTxt ledgerTransTxtReverse()
    {
        return LedgerTransTxt::PurchCreditNoteVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentExists</Name>
				<Source><![CDATA[
    final protected boolean prepaymentExists(CustVendTrans _custVendTrans)
    {
        VendTrans      vendTransPaym, vendTransInvoice;
        VendSettlement vendSettlement;

        // partial settlements combined with prepayment handling can create
        // situation when part of voucher is prepayment and part is not

        // if prepayment is open
        select firstonly RecId from vendTransPaym
            where vendTransPaym.Voucher   == _custVendTrans.Voucher   &&
                  vendTransPaym.TransDate == _custVendTrans.TransDate &&
                  vendTransPaym.Prepayment                            &&
                ! vendTransPaym.Closed;
        if (vendTransPaym.RecId)
            return true;

        // if prepayment is settled with invoice
        select firstonly RecId from vendTransPaym
            where vendTransPaym.Voucher   == _custVendTrans.Voucher   &&
                  vendTransPaym.TransDate == _custVendTrans.TransDate &&
                  vendTransPaym.Prepayment
        exists join vendSettlement
            where (vendSettlement.TransRecId  == vendTransPaym.RecId ||
                   vendSettlement.OffsetRecid == vendTransPaym.RecId) &&
                  vendSettlement.CanBeReversed
        exists join vendTransInvoice
            where (vendTransInvoice.RecId == vendSettlement.TransRecId ||
                   vendTransInvoice.RecId == vendSettlement.OffsetRecid) &&
                  vendTransInvoice.Invoice;
        if (vendTransPaym.RecId)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseVATonDate</Name>
				<Source><![CDATA[
    final protected boolean reverseVATonDate()
    {
        return VendParameters::find().ReversePrepayment_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournaValue</Name>
				<Source><![CDATA[
    final protected void setLedgerJournaValue(AmountCur _amountCur)
    {
        ;
        ledgerJournalTrans.AccountType    = LedgerJournalACType::Vend;
        ledgerJournalTrans.AmountCurDebit = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxCreditMemo</Name>
				<Source><![CDATA[
    final public boolean showTaxCreditMemo()
    {
        return CzTaxDocumentTable::exist(custVendTrans.Voucher, custVendTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxDocument</Name>
				<Source><![CDATA[
    final public boolean showTaxDocument()
    {
        return !CzTaxDocumentTable::exist(custVendTrans.Voucher, custVendTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    protected SysModule sysModule()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatPrepaymentsLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the offset account for calculated sales tax on prepayments.
    /// </summary>
    /// <param name="_custVendTrans">
    ///     Vendor transactions.
    /// </param>
    /// <returns>
    ///     Default main account used for posting in ledger.
    /// </returns>
    protected LedgerDimensionDefaultAccount vatPrepaymentsLedgerDimension(CustVendTrans _custVendTrans)
    {
        return VendLedgerAccounts::vatPrepaymentsLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>