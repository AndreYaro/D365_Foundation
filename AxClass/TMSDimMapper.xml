<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSDimMapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TMSDimMapper</c> class is used to map a list of query range values specified by the consumer,
///   with the list of physial dimension fields on a table.
/// </summary>
public abstract class TMSDimMapper
{
    Map     fieldsMap;
    Map     valuesMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDifferentThanRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds a 'different than' query range to a specific dimension field.
    /// </summary>
    /// <param name="_DimNumber">
    ///   The number of field for which to add the range value; 1-based;
    /// </param>
    /// <param name="_value">
    ///   The value from which the specific dimension field is expected to be different.
    /// </param>
    public void addDifferentThanRange(int _DimNumber, str _value)
    {
        this.addRange(_DimNumber, _value, '!= "%1"');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionsRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds dimension ranges mapped by the current instance of the <c>TMSDimensionMapper</c> class
    ///   to an instance of <c>QueryBuildDataSource</c>.
    /// </summary>
    /// <param name="_qbds">
    ///   The query build data source to be populated with the query ranges.
    /// </param>
    /// <exception cref="Exception::Error">
    ///   Thrown when trying to add a range to a dimension field that not exist on the mapped table.
    /// </exception>
    public void addDimensionsRanges(QueryBuildDataSource _qbds)
    {
        MapEnumerator   valuesEnumerator = valuesMap.getEnumerator();
        Map             fields = this.getFieldsMap();
        int             dimFieldNum;
        FieldId         fieldId;
        str             value;

        valuesEnumerator.reset();

        while (valuesEnumerator.moveNext())
        {
            dimFieldNum = valuesEnumerator.currentKey();

            if (!fields.exists(dimFieldNum))
            {
                throw error(strFmt("@WAX5728", dimFieldNum));
            }

            fieldId = fields.lookup(dimFieldNum);
            value = valuesEnumerator.currentValue();
            _qbds.addRange(fieldId).value(value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEqualsRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds a 'equals' query range to a specific dimension field.
    /// </summary>
    /// <param name="_DimNumber">
    ///   The number of field for which to add the range value; 1-based;
    /// </param>
    /// <param name="_value">
    ///   The value to which the specific dimension field is expected to be equal.
    /// </param>
    public void addEqualsRange(int _DimNumber, str _value)
    {
        this.addRange(_DimNumber, _value, '%1');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds a query range string to a specific dimension field.
    /// </summary>
    /// <param name="_DimNumber">
    ///   The number of field for which to add the range value; 1-based;
    /// </param>
    /// <param name="_value">
    ///   The value of the range.
    /// </param>
    /// <param name="_valueFormat">
    ///   The range value format.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Thrown when trying to add a range to a dimension field that not exist on the mapped table.
    /// </exception>
    /// <remarks>
    ///    The format of the <paramref name="_valueFormat"/> expects to match the format of the value consumed by <c>QueryBuildRange</c> object.
    ///    The format string expects %1 to be the value in the filter expression for the field for which the range is created.
    /// </remarks>
    protected void addRange(
        int _DimNumber,
        str _value,
        str _valueFormat)
    {
        Map             fields = this.getFieldsMap();
        str             value;

        if (!fields.exists(_DimNumber))
        {
            throw error(strFmt("@WAX5728", _DimNumber));
        }

        value = strFmt(_valueFormat, _value);

        valuesMap.insert(_DimNumber, value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the number of mappable fields.
    /// </summary>
    /// <returns>
    ///   The number of mappable fields.
    /// </returns>
    public int fieldsCount()
    {
        Map fieldsMapLocal = this.getFieldsMap();
        return fieldsMapLocal.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the map of the fields IDs for the mapped table.
    ///   The key of the map are 1-based indexes of the fields in the order as presented in the sequence.
    /// </summary>
    /// <returns>
    ///   The map of the index-to-table field ID of the mapped table.
    /// </returns>
    protected Map getFieldsMap()
    {
        if (fieldsMap == null)
        {
            fieldsMap = new Map(Types::Integer, Types::Integer);
            this.loadFieldsMap(fieldsMap);
        }

        return fieldsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the ID of the mapped table.
    /// </summary>
    /// <returns>
    ///  The ID of the mapped table.
    /// </returns>
    protected abstract TableId getTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFieldsMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the map of the fields IDs for the mapped table.
    ///   The key of the map are 1-based indexes of the fields in the order as presented in the sequence.
    /// </summary>
    /// <param name="_fieldsMap">
    ///   The map object to be populated.
    /// </param>
    protected abstract void loadFieldsMap(Map _fieldsMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        valuesMap = new Map(Types::Integer, Types::String);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>