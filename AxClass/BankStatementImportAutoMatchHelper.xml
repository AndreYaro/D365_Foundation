<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementImportAutoMatchHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementImportAutoMatchHelper</c> class provides helpers for
/// processing match rules during bank statement import.
/// </summary>
public class BankStatementImportAutoMatchHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processAutomaticMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes matching rule set automatically.
    /// </summary>
    /// <param name="_importedBankAccounts">
    /// A list containing the bank statements imported.
    /// </param>
    public void processAutomaticMatch(List _importedBankAccounts)
    {
        ListEnumerator enumerator = _importedBankAccounts.getEnumerator();
        while (enumerator.moveNext())
        {
            BankStatementImportData importData = enumerator.current();

            BankAccountTable bankAccountTable = importData.parmBankAccountTable();
            List listOfStatementIds = importData.parmImportedStatements();
            List listOfStatementRecIds = importData.parmImportedStatementsRecIds();

            ListEnumerator statementEnumerator;
            // listOfStatementRecIds is not empty only for GER imort, keep DMF import behavior unchanged
            if (!listOfStatementRecIds.empty())
            {
                statementEnumerator = listOfStatementRecIds.getEnumerator();
            }
            else
            {
                statementEnumerator = listOfStatementIds.getEnumerator();
            }

            changecompany(bankAccountTable.company())
            {
                if (bankAccountTable.isMatchAutoAfterImport())
                {
                    ttsbegin;
                    boolean isStatementValidated = true;
                    while (statementEnumerator.moveNext())
                    {
                        BankStmtISOAccountStatement statement;
                        if (!listOfStatementRecIds.empty())
                        {
                            statement = BankStmtISOAccountStatement::find(statementEnumerator.current());
                        }
                        else
                        {
                            statement = BankStmtISOAccountStatement::findByBankAccountAndStatementId(bankAccountTable.AccountID, statementEnumerator.current());
                        }

                        if (!BankStatementValidate::processValidate(statement.RecId))
                        {
                            isStatementValidated = false;
                            break;
                        }
                    }

                    if (isStatementValidated)
                    {
                        this.processMatchAutomaticByBankAccount(bankAccountTable.AccountID);
                    }
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMatchAutomaticByBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes matching rule set automatically for given bank account.
    /// </summary>
    /// <param name="_bankAccountId">
    /// Given bank account.
    /// </param>
    protected void processMatchAutomaticByBankAccount(CompanyBankAccountId _bankAccountId)
    {
        if (BankAdvancedReconciliationLockFlight::instance().isEnabled())
        {
            BankReconciliationHeader header = BankReconciliationHeader::createNewReconciliation(_bankAccountId);
            if (header)
            {
                BankAdvancedReconciliationLock lock = new BankAdvancedReconciliationLock(_bankAccountId);
                SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::AdvancedBankReconciliationLock, BankInstrumentationConstants::BankNamespace);

                try
                {
                    using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationEnterLock))
                    {
                        activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(_bankAccountId).RecId));
                        lock.enterLock();
                    }

                    if (lock.isLockAcquired())
                    {
                        BankReconciliationMatchRuleSetRefRecId matchRuleSetRecId = BankAccountTable::find(_bankAccountId).BankReconciliationMatchRuleSet;
                        if (matchRuleSetRecId)
                        {
                            BankReconMatchingRuleAutoProcessor::processMatchRuleSet(
                                header.RecId,
                                matchRuleSetRecId);
                        }
                    }
                }
                finally
                {
                    using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BankInstrumentationConstants::AdvancedBankReconciliationExitLock))
                    {
                        activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationBankAccountTableRecId, int642Str(BankAccountTable::find(_bankAccountId).RecId));
                        activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationLockAcquired, strFmt("%1", lock.isLockAcquired()));
                        lock.exitLock();
                    }
                }
            }
        }
        else
        {
            try
            {
                BankAccountTable::updateIsRunMatchingRule(_bankAccountId, true);

                BankReconciliationHeader header = BankReconciliationHeader::createNewReconciliation(_bankAccountId);
                if (header)
                {
                    BankReconciliationMatchRuleSetRefRecId matchRuleSetRecId = BankAccountTable::find(_bankAccountId).BankReconciliationMatchRuleSet;
                    if (matchRuleSetRecId)
                    {
                        BankReconMatchingRuleAutoProcessor::processMatchRuleSet(
                            header.RecId,
                            matchRuleSetRecId);
                    }
                }
            }
            finally
            {
                BankAccountTable::updateIsRunMatchingRule(_bankAccountId, false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>