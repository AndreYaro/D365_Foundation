<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyLocationEx</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DirPartyLocationEx
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePrimaryTaxRegistrationLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains change of primary tax registration flag.
    /// </summary>
    /// <remarks>
    /// Make link of tax registration to the marked <c>DirPartyLocation</c> record.
    /// </remarks>
    [SubscribesTo(tablestr(DirPartyLocation), delegatestr(DirPartyLocation, updating)),
        SubscribesTo(tablestr(DirPartyLocation), delegatestr(DirPartyLocation, inserting))]
    public static void updatePrimaryTaxRegistrationLocation(DirPartyLocation target)
    {
        DirPartyLocation            dirPartyLocation;
        LogisticsPostalAddress      logisticsPostalAddress;

        if (target.IsPrimaryTaxRegistration && target.IsPostalAddress)
        {
            select forupdate dirPartyLocation
                where dirPartyLocation.Party                    == target.Party
                   && dirPartyLocation.Location                 != target.Location
                   && dirPartyLocation.IsPrimaryTaxRegistration == true
                   && dirPartyLocation.IsPostalAddress          == true
                exists join logisticsPostalAddress
                    where logisticsPostalAddress.Location == dirPartyLocation.Location
                       && logisticsPostalAddress.CountryRegionId == LogisticsPostalAddress::findByLocation(target.Location).CountryRegionId;

            if (dirPartyLocation)
            {
                DirPartyLocationEx::movePrimaryTaxRegistrations(dirPartyLocation, target);

                dirPartyLocation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                dirPartyLocation.IsPrimaryTaxRegistration = false;
                dirPartyLocation.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePrimaryTaxRegistrations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the <c>DirPartyLocation</c> field to new value for all records in the
    /// <c>TaxRegistration</c> tabled with specified old value of the <c>DirPartyLocation</c> field and
    /// related to specific tax registration rule.
    /// </summary>
    /// <param name="_dirPartyLocationOld">
    /// The old value of the <c>DirPartyLocation</c> parameter.
    /// </param>
    /// <param name="_dirPartyLocationNew">
    /// The new value of the <c>DirPartyLocation</c> parameter.
    /// </param>
    private static void movePrimaryTaxRegistrations(DirPartyLocation _dirPartyLocationOld, DirPartyLocation _dirPartyLocationNew)
    {
        TaxRegistration                      taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        taxRegistration.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        update_recordset taxRegistration
            setting DirPartyLocation = _dirPartyLocationNew.RecId
            where taxRegistration.DirPartyLocation == _dirPartyLocationOld.RecId
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.RecId                      == taxRegistration.TaxRegistrationTypeApplicabilityRule
                   && taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrivacyExtended</Name>
				<Source><![CDATA[

    /// <summary>
    /// Gets the default location privacy depending on the entity type.
    /// </summary>
    /// <param name="_entityTableId">
    /// The <c>TableId</c> value of the entity, that is, <c>CustTable</c>, <c>HcmWorker</c>, and so on.
    /// </param>
    /// <returns>
    /// Boolean value.
    /// </returns>
    [SubscribesTo(classstr(DirPartyLocationDefaultPrivacy), delegatestr(DirPartyLocationDefaultPrivacy, getDefaultPrivacy))]
    public static void getDefaultPrivacyExtended(TableId _entityTableId, EventHandlerResult result)
    {
        switch (_entityTableId)
        {
            case tableNum(HcmWorker) :
            case tableNum(HcmApplicant) :
            case tableNum(HRMApplicationBasket) :
                result.result(true);
                break;

            default :
                result.result(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cnpjCPFNum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the party if the adddress is a primary address.
    /// Returns the CNPJ or CPF related to <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public static CNPJCPFNum_BR cnpjCPFNum_BR(DirPartyLocation target)
    {
        if (target.IsPrimary)
        {
            return DirPartyTableHelper::cnpjCPFNum_BR(target.Party);
        }
        else
        {
            return (select cnpjcpfNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == target.Location).cnpjcpfNum_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ieNum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the party if the adddress is a primary address.
    /// Returns the IE related to <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public static IENum_BR ieNum_BR(DirPartyLocation target)
    {
        if (target.IsPrimary)
        {
            return DirPartyTableHelper::ieNum_BR(target.Party);
        }
        else
        {
            return (select ieNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == target.Location).ieNum_BR;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>