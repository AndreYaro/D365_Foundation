<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransCache_Periodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransCache_Periodic</c> class manages items during a periodic scheduling process.
/// </summary>
class ReqTransCache_Periodic extends ReqTransCache
{
    #Req

    Set                         itemIdMarkedForProcessingSet;

    ReqProcessStatus            currentStatus;

    ReqProcessThreadId          threadId;

    ReqProcessNumThreads        maxChildThreads;

    boolean                     thisIsChildThread;

    Set                         itemIdSet;

    ReqProcessSort              reqProcessSort;

    Set                         plannedProdOrderIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an item to the <c>ReqProcessItemList</c> table and to the local set variables.
    /// </summary>
    /// <param name="_reqTrans">
    ///    The <c>ReqTrans</c> record that should be added to the cache.
    /// </param>
    public void add(ReqTrans    _reqTrans)
    {
        super(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemToCache</Name>
				<Source><![CDATA[
    public void addItemToCache(Set _itemSet, ReqTrans _reqTrans)
    {
        this.insertItemIfNotExists(_reqTrans.ItemId, _reqTrans.Level);
        _itemSet.add(_reqTrans.ItemId);
        mapLevelItem.insert(_reqTrans.Level, _itemSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the items to be processed.
    /// </summary>
    /// <returns>
    /// The list of all the items to be processed.
    /// </returns>
    public Set getAllItems()
    {
        ReqProcessItem reqProcessItem;
        Set            itemsSet = new Set(Types::String);
        while select ItemId from reqProcessItem
            where   reqProcessItem.ProcessId    == processId
        {
            itemsSet.add(reqProcessItem.ItemId);
        }

        return itemsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the log and cleans up after all external threads exit if this is the main thread.
    /// </summary>
    public void endProcess()
    {
        if (!thisIsChildThread)
        {
            ReqProcessList::setStatus(processId, ReqProcessStatus::Ended);
         
            ReqTransCache::deleteProcessData(processId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items in a given item list.
    /// </summary>
    /// <param name="_level">
    ///    The BOM level for which to retrieve items.
    /// </param>
    /// <returns>
    ///    A <c>Set</c> with the items in an item list.
    /// </returns>
    public Set getItems(BOMLevel    _level)
    {
        ReqProcessItem  reqProcessItem;
        InventDistinctProduct    inventDistinctProduct;
        Set             items = new Set(Types::String);

        while select ItemId from reqProcessItem
            exists join inventDistinctProduct
            where   reqProcessItem.ProcessId == processId
            &&      inventDistinctProduct.ItemId      == reqProcessItem.ItemId
            &&      inventDistinctProduct.Level       == _level
        {
            items.add(reqProcessItem.ItemId);
        }

        return items;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRerunFromLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BOM level from which coverage should be re-run.
    /// </summary>
    /// <returns>
    /// The BOM level from which coverage should be re-run
    /// </returns>
    public BOMLevel getRerunFromLevel()
    {
        return ReqProcessList::findWithoutParameters(processId, false).PmfRerunFromLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemIfNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new record into the <c>ReqProcessItem</c> table.
    /// </summary>
    /// <param name="_itemId">
    ///    The item to insert.
    /// </param>
    /// <param name="_level">
    ///    The processing item level.
    /// </param>
    protected void insertItemIfNotExists(ItemId     _itemId,
                                         BOMLevel   _level)
    {
        ReqProcessList  reqProcessList;
        ReqProcessItem  reqProcessItem;
        Connection      connection;

        //initial check for level, for most of the items the record will be found
        select firstonly forceselectorder forceplaceholders RecId from reqProcessItem
            where reqProcessItem.ProcessId == processId
               && reqProcessItem.ItemId    == _itemId;

        if (!reqProcessItem)
        {
            connection = new UserConnection();
            try
            {
                reqProcessItem.setConnection(connection);
                reqProcessList.setConnection(connection);
                connection.ttsbegin();

                //stop other process from inserting this item
                select firstonly pessimisticlock RecId from reqProcessList where reqProcessList.ProcessId == processId;

                //make sure that some other process has not inserted this item
                //while this process has been waiting for the lock.
                select firstonly RecId from reqProcessItem where
                    reqProcessItem.ProcessId == processId &&
                    reqProcessItem.ItemId    == _itemId;

                if (!reqProcessItem)
                {
                    reqProcessItem.ProcessId    = processId;
                    reqProcessItem.ItemId       = _itemId;
                    reqProcessItem.Level        = _level;
                    reqProcessItem.insert();
                }

                connection.ttscommit();
            }
            finally
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInsertProcessItemsQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>QueryRun</c> object from a packed query.
    /// </summary>
    /// <param name = "_con">
    /// A container that has a <c>QueryRun</c> object with all the items to process.
    /// </param>    
    /// <returns>
    /// The <c>QueryRun</c> object.
    /// </returns>
    protected QueryRun initializeInsertProcessItemsQueryRun(container _con)
    {
        QueryRun                runQuery            = new QueryRun(_con);

        runQuery.query().dataSourceTable(tablenum(InventTable)).fields().clearFieldList();
        runQuery.query().dataSourceTable(tablenum(InventTable)).addOrderByField(fieldnum(InventTable, bomLevel));
        runQuery.query().dataSourceTable(tablenum(InventTable)).fields().addField(fieldnum(InventTable, bomLevel));
        runQuery.query().dataSourceTable(tablenum(InventTable)).fields().addField(fieldnum(InventTable, ItemId));

        return runQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProcessItemsFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the items to be processed in the <c>ReqProcessItem</c> table.
    /// </summary>
    /// <param name="_con">
    ///    A container that has a <c>QueryRun</c> object with all the items to process.
    /// </param>
    public void insertProcessItemsFromQuery(container _con)
    {
        QueryRun                runQuery            = this.initializeInsertProcessItemsQueryRun(_con);
        ReqProcessItem          reqProcessItem;
        InventTable             inventTable;
        RecordInsertList        itemRecordInsertList    = new RecordInsertList(tablenum(ReqProcessItem));

        ttsbegin;

        while (runQuery.next())
        {
            inventTable = runQuery.get(tablenum(InventTable));

            reqProcessItem.ProcessId   = processId;
            reqProcessItem.Level       = inventTable.bomLevel;
            reqProcessItem.ItemId      = inventTable.ItemId;

            itemRecordInsertList.add(reqProcessItem);
        }

        itemRecordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMarkedForProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified item is marked for processing.
    /// </summary>
    /// <param name="_itemId">
    ///    The item to search for.
    /// </param>
    /// <returns>
    ///    true if the specified item is marked for processing; otherwise, false.
    /// </returns>
    public boolean isItemMarkedForProcessing(ItemId _itemId)
    {
        ReqProcessItem reqProcessItem;

        if (!itemIdMarkedForProcessingSet)
        {
            itemIdMarkedForProcessingSet = new Set(Types::String);
        }

        if (itemIdMarkedForProcessingSet.in(_itemId))
        {
            return true;
        }

        select firstonly ItemId from reqProcessItem where
            reqProcessItem.ProcessId == processId &&
            reqProcessItem.ItemId    == _itemId;

        if (reqProcessItem.ItemId)
        {
            itemIdMarkedForProcessingSet.add(reqProcessItem.ItemId);
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of BOM levels of the items being processed.
    /// </summary>
    /// <returns>
    /// The number of BOM levels.
    /// </returns>
    public int levelCount()
    {
        ReqProcessItemDistinctLevelView reqProcessItemDistinctLevelView;

        select count(Level) from reqProcessItemDistinctLevelView
            where reqProcessItemDistinctLevelView.ProcessId == processId;

        return reqProcessItemDistinctLevelView.Level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageItemError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles item processing errors.
    /// </summary>
    /// <param name="_itemId">
    ///    The item with error.
    /// </param>
    /// <param name="_errors">
    ///    A Boolean value that specifies whether an error has occurred.
    /// </param>
    public void manageItemError(ItemId _itemId, boolean _errors)
    {
        WrkCtrCapRes    wrkCtrCapRes;
        SetEnumerator   se;
        ReqProcessItem  reqProcessItem;

        if (_itemId)
        {
            delete_from reqProcessItem where reqProcessItem.ProcessId == processId &&
                                             reqProcessItem.ItemId    == _itemId;
        }

        if (!_errors)
        {
            this.markProcessWithError();
        }

        if (maxChildThreads == 0 || !plannedProdOrderIdSet)
        {
            return;
        }

        se = plannedProdOrderIdSet.getEnumerator();

        while (se.moveNext())
        {
            ttsbegin;
            delete_from wrkCtrCapRes
                where wrkCtrCapRes.PlanVersion              == this.parmReqPlanVersionRefRecId()  &&
                      wrkCtrCapRes.RefType                  == WrkCtrCapRefType::PlannedOrder &&
                      wrkCtrCapRes.RefId                    == se.current();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProcessWithError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the current process with error status.
    /// </summary>
    public void markProcessWithError()
    {
        ReqProcessList reqProcessList;

        ttsbegin;

        update_recordset reqProcessList setting Errors = true
            where reqProcessList.ProcessId == processId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Advances the current BOM level that is used by the <c>ReqTransCache</c> class to the next level
    /// </summary>
    /// <returns>
    ///    true if the next level exists; otherwise, false.
    /// </returns>
    public boolean moveNextLevel()
    {
        ReqProcessItem  reqProcessItem;
        InventDistinctProduct    inventDistinctProduct;

        select firstonly reqProcessItem
            join inventDistinctProduct
            group by inventDistinctProduct.Level
            order by inventDistinctProduct.Level
            where   reqProcessItem.ProcessId == processId &&
                    reqProcessItem.ItemId == inventDistinctProduct.ItemId &&
                    inventDistinctProduct.Level > currentLevel;

        if (reqProcessItem)
        {
            this.setCurrentLevel(inventDistinctProduct.Level);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>noteDownPlannedProdOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the planned production order to the <c>plannedProdOrderIdSet</c> class variable.
    /// </summary>
    /// <param name="_refId">
    ///    The <c>InventTransRefId</c> to save.
    /// </param>
    public void noteDownPlannedProdOrderId(InventTransRefId _refId)
    {
        if (maxChildThreads == 0)
        {
            return;
        }

        plannedProdOrderIdSet.add(_refId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshReqProcessList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the <c>ReqProcessList</c> table to determine whether the process should continue.
    /// </summary>
    /// <returns>
    ///    The active <c>ReqProcessList</c> record for this scheduling process.
    /// </returns>
    /// <exception cref="M:exception::error">
    ///    No main process record is available.
    /// </exception>
    /// <exception cref="M:exception::error">
    ///    The status of the <c>ReqProcessList</c> record has been set to Error.
    /// </exception>
    protected ReqProcessList refreshReqProcessList()
    {
        ReqProcessList  reqProcessList;

        reqProcessList = ReqProcessList::find(processId, false);

        if (!reqProcessList)
        {
            throw error("@SYS107510");
        }

        if (reqProcessList.Status == ReqProcessStatus::Error)
        {
            throw error("@SYS107511");
        }

        return reqProcessList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqProcessList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the active <c>ReqProcessList</c> record if threads are used.
    /// </summary>
    /// <returns>
    ///    The active <c>ReqProcessList</c> record.
    /// </returns>
    public ReqProcessList reqProcessList()
    {
        ReqProcessList  reqProcessList;

        if (maxChildThreads > 0)
        {
            return this.refreshReqProcessList();
        }
        else
        {
            return reqProcessList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentItem</Name>
				<Source><![CDATA[
    public void setCurrentItem(ItemId _itemId)
    {
        if (!_itemId)
        {
            return;
        }

        plannedProdOrderIdSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the level of the scheduling process.
    /// </summary>
    /// <param name="_level">
    ///    The BOM Level number to change to.
    /// </param>
    public void setCurrentLevel(BOMLevel _level)
    {
        super(_level);

        if (!thisIsChildThread)
        {
            ReqProcessList::setLevel(processId, _level);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRerunFromLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the level from which coverage planning should be re-run.
    /// </summary>
    /// <param name="_fromLevel">
    /// The level from which coverage planning should be re-run.
    /// </param>
    public void setRerunFromLevel(BOMLevel _fromLevel)
    {
        ReqProcessList::setReRunFromLevel(processId, _fromLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThreadParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets parameters for thread usage and marks the main process as started.
    /// </summary>
    /// <param name="_threadId">
    ///    The ID of the current thread.
    /// </param>
    /// <param name="_thisIsChildThread">
    ///    A Boolean value that specifies whether this thread is a child (helper) thread.
    /// </param>
    /// <param name="_maxChildThreads">
    ///    The maximum number of helpers used.
    /// </param>
    public void setThreadParameters(ReqProcessThreadId      _threadId,
                                    boolean                 _thisIsChildThread,
                                    ReqProcessNumThreads    _maxChildThreads)
    {
        threadId            = _threadId;
        maxChildThreads     = _maxChildThreads;
        thisIsChildThread   = _thisIsChildThread;

        ReqProcessThreadList::beginProcess(processId, threadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startExternThreads</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the required number of helper threads as new batch tasks.
    /// </summary>
    /// <param name="_batch">
    ///    The batch instance of the calling class.
    /// </param>
    public void startExternThreads(Batch _batch)
    {
        if (currentStatus > ReqProcessStatus::Actions)
        {
            return;
        }

        if (maxChildThreads < 1)
        {
            return;
        }

        this.createExternThreads(_batch, maxChildThreads);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExternThreads</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Starts the required number of helper threads as new batch tasks.
    /// </summary>
    /// <param name = "_batch">
    ///     The batch instance of the calling class.
    /// </param>
    /// <param name = "_numberOfThreads">
    ///     The number of threads to create.
    /// </param>
    internal void createExternThreads(Batch _batch, ReqProcessNumThreads _numberOfThreads)
    {
        ReqProcessExternThread reqProcessExternThread;
        BatchHeader batchHeader;
        int i;

        if (_numberOfThreads < 1)
        {
            return;
        }

        if (_batch.BatchJobId)
        {
            batchHeader = BatchHeader::construct(_batch.BatchJobId);
        }
        else
        {
            batchHeader = BatchHeader::construct();
        }

        for (i = 0; i < _numberOfThreads; i++)
        {
            reqProcessExternThread = ReqProcessExternThread::newProcessId(processId);
            reqProcessExternThread.batchInfo().resetBatchHeader();
            reqProcessExternThread.batchInfo().parmGroupId(_batch.GroupId);
            reqProcessExternThread.batchInfo().parmCritical(batchHeader.parmCritical());
            reqProcessExternThread.batchInfo().parmPrivateBatch(_batch.PrivateTask);

            if (ReqCalcRestartResumeNativeToggle::isEnabled())
            {
                reqProcessExternThread.batchInfo().parmRetriesOnFailure(ReqCalcScheduleItemTable::ThreadRetriesOnFailure);
            }

            if (_batch.BatchJobId)
            {
                RecId inheritFromTaskId = ReqTransBatchCustomJobRerunFlight::instance().isEnabled() ? 0 : _batch.RecId;
                batchHeader.addRuntimeTask(reqProcessExternThread, inheritFromTaskId);
            }
            else
            {
                batchHeader.addTask(reqProcessExternThread);
            }
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqProcessItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list of items in the database for the specified level.
    /// </summary>
    /// <param name="_level">
    ///    The BOM level to update.
    /// </param>
    /// <remarks>
    ///    It is not necessary to update anything for a periodic process, all the items are already in the
    ///    <c>ReqProcessItemListLine</c> table.
    /// </remarks>
    public void updateReqProcessItems(BOMLevel _level)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqProcessItemsAllLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list of items in the database for all level.
    /// </summary>
    /// <remarks>
    ///    It is not necessary to update anything for a periodic process, all the items are already in the
    ///    <c>ReqProcessItemListLine</c> table.
    /// </remarks>
    public void updateReqProcessItemsAllLevels()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqTransCache_Periodic construct()
    {
        return new ReqTransCache_Periodic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqTransCache_Periodic</c> class.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The plan ID to use for filtering cached data.
    /// </param>
    /// <param name="_processId">
    ///    The master planning process ID that is using the cache object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqTransCache_Periodic</c> class.
    /// </returns>
    public static ReqTransCache_Periodic newProcessId(ReqPlanId   _reqPlanId, ReqProcessId _processId)
    {
        ReqTransCache_Periodic reqTransCache = ReqTransCache_Periodic::construct();

        reqTransCache.parmReqPlanId(_reqPlanId);
        reqTransCache.parmProcessId(_processId);

        return reqTransCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessMultithreaded</Name>
				<Source><![CDATA[
    public boolean isProcessMultithreaded()
    {
        return maxChildThreads > 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>