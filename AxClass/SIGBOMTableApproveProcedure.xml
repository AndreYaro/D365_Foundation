<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SigbomTableApproveProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SIGBOMTableApproveProcedure</c> class that uses a signature procedure for the BOM approval
/// process.
/// </summary>
class SigbomTableApproveProcedure extends SIGBOMRouteApproveProcedure
{
    BOMTable    table;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendProcedureGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds the necessary controls to the procedure group control.
    /// </summary>
    /// <param name="_fr">
    ///   The form run that the group control belongs to.
    /// </param>
    /// <param name="_ctrl">
    ///   The group control to add the controls to.
    /// </param>
    /// <returns>
    ///   True if a control is being added; otherwise, false.
    /// </returns>
    public boolean extendProcedureGroup(FormRun _fr, FormGroupControl _ctrl)
    {
        boolean ret = super(_fr,_ctrl);

        if (ret)
        {
            _ctrl.caption("@SYS29117");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a list of signature controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///   The list of fields required for this BOM approve procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                 [DatabaseLogType::Update,tablenum(BOMTable),fieldnum(BOMTable,Approved)],
                 [DatabaseLogType::Update,tablenum(BOMTable),fieldnum(BOMTable,Approver)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the BOM table record is currently approved.
    /// </summary>
    /// <returns>
    ///   True if the record is currently approved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   This method has a value that is switched upon initialization and returns the inverse of the current
    /// value.
    /// </remarks>
    public boolean isAlreadyApproved()
    {
        return !table.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMTable</Name>
				<Source><![CDATA[
    public BOMTable parmBOMTable(BOMTable _table = table)
    {
        table = _table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtCtrlEmplId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Modified method for the added employee ID control.
    /// </summary>
    /// <param name="_callerControl">
    ///   The calling form control.
    /// </param>
    /// <returns>
    ///   The return values of the <c>super</c> method.
    /// </returns>
    public boolean rtCtrlEmplId_modified(FormStringControl _callerControl)
    {
        ListEnumerator  iter;
        boolean         ret = super(_callerControl);

        table.Approver = HcmWorker::findByPersonnelNumber(_callerControl.valueStr()).RecId;
        iter = docList.getEnumerator();
        if (iter.moveNext())
        {
            SIGBaseDocument doc = iter.current();
            doc.initDatabaseLog(DatabaseLogType::Update,table,table.orig());
            Object formRunObject = formRun;
            formRunObject.refreshDocList();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Runs the signing of the documents.
    /// </summary>
    public void run()
    {
        super();

        if (signed)
        {
            BOMApprove approve = BOMApprove::newBOMTable(table);
            approve.parmApprover(table.Approver);
            approve.parmRemove(!table.Approved);

            approve.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the procedure is included in the signature setup.
    /// </summary>
    /// <returns>
    ///   True if the procedure is checked; otherwise, false.
    /// </returns>
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Starts the signature dialog box with the implementing provider.
    /// </summary>
    /// <returns>
    ///   True if the documents of the provider have been signed; otherwise, false.
    /// </returns>
    public boolean sign()
    {
        table = BOMTable::find(table.bomId);
        if (table.Approved)
        {
            SIGBOMRouteApproveProcedure::checkIfRemoveOfApprovalIsBlocked(BOMParameters::find().BlockRemoveApproval);
            table.Approved = NoYes::No;
            table.Approver = 0;
        }
        else
        {
            table.Approved = NoYes::Yes;
            table.Approver = HcmWorker::userId2Worker(curuserid());
        }

        docList = new List(Types::Class);
        docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, table));

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the signature for a procedure is required.
    /// </summary>
    /// <returns>
    ///   True if the built in signature requirement is enabled or one of the fields requires a signature; otherwise, false.
    /// </returns>
    public boolean signatureRequired()
    {
        classId classId = classnum(SIGBOMTableApproveProcedure);

        return SIGProcSetup::classIdEnabled(classId)
               || SIGProcSetupField::classIdFieldsEnabled(classId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SIGBOMTableApproveProcedure construct()
    {
        return new SIGBOMTableApproveProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS29117";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a new instance of the <c>SIGBOMTableApproveProcedure</c> class from a <c>BOMTable</c> record.
    /// </summary>
    /// <param name="_table">
    ///   The record to which to create the instance.
    /// </param>
    /// <returns>
    ///   A new instance of the <c>SIGBOMTableApproveProcedure</c> class.
    /// </returns>
    public static SIGBOMTableApproveProcedure newBOMTable(BOMTable _table)
    {
        SIGBOMTableApproveProcedure procedure = SIGBOMTableApproveProcedure::construct();
        procedure.parmBOMTable(_table);

        return procedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>