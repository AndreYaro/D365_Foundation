<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetLineEntityCollectionWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Xrm.Sdk;

internal class ProjBudgetLineEntityCollectionWriter implements ProjEntityCollectionWriter
{
    private ICollection entities;
    private ProjId projId;
    private ProjForecastEmpl projForecastEmpl;
    private ProjForecastCost projForecastCost;
    private ForecastSales projForecastSale;

    private const str TRANSACTION_CLASSIFICATION = "msdyn_budgetline.msdyn_transactionclassification";
    private const str BUDGET_FORECASTMODEL_ID = 'BUDGET';
    private const str BUDGET_FORECASTMODEL_TXT = 'Budget based forecasts from customer engagement.';
    private static ProjOpsInstrumentationLogger logger = ProjOpsInstrumentationLogger::createLogger(classStr(ProjBudgetLineEntityCollectionWriter));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ICollection _entities, ProjId _projId)
    {
        this.entities = _entities;
        this.projId = _projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deletes the existing forecastModel from BUDGET ForecastModel and writes the passed entites to ForecastTables.
    /// </summary>
    /// <param name = "_isBatch">Set true if the caller is a batch job</param>
    public void writeToDatabase(boolean _isBatch = false)
    {
        if ( !this.validateEntities(entities) )
        {
            throw warning(strFmt("@Proj:ProjBudgetEmptyEntityCollection", projId));
        }
        else
        {
            ForecastModel forecastModel = ProjBudgetLineEntityCollectionWriter::getBudgetForecastModel();
            
            var entityEnumerator = entities.GetEnumerator();
            ttsbegin;
            projForecastEmpl.deleteForProjIdAndModelId(projId, forecastModel.ModelId);
            projForecastCost.deleteForProjIdAndModelId(projId, forecastModel.ModelId);
            projForecastSale.deleteForProjIdAndModelId(projId, forecastModel.ModelId);
            while(entityEnumerator.MoveNext())
            {
                Entity budgetLineEntity = entityEnumerator.get_Current();
                ProjEntityTableMapper mapper = this.createEntityMapper(budgetLineEntity);
                mapper.writeTableToDatabase();
            }
            logger.logInformation(strFmt("@Proj:ProjBudgetLineImportComplete", projId));
            if (!_isBatch)
            {
                info(strFmt("@Proj:ProjBudgetLineImportComplete", projId));
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEntities</Name>
				<Source><![CDATA[
    private boolean validateEntities(ICollection _entities)
    {
        boolean result = false;
        if ( _entities && _entities.Count )
        {
            result = true;
        }
        else 
        {
            result = false;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntityMapper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the corresponding ProjEntityTableMapper for the given entity as per transaction classification
    /// </summary>
    /// <param name = "_entity">Entity is the single object of the collection</param>
    /// <returns>a class object that implements ProjEntityTableMapper class which implements the mapper logic</returns>
    public ProjEntityTableMapper createEntityMapper(Entity _entity)
    {
        if ( !_entity || !_entity.Attributes )
        {
            throw error(strFmt("@Proj:ProjBudgetEmptyEntityPassed"));
        }

        ProjOpsBudgetingInstrumentationActivites activities = ProjOpsBudgetingInstrumentationActivites::construct(logger);
        using (SysInstrumentationActivityContext activityContext = activities.activityContext(ProjOpsBudgetingInstrumentationActivites::ProjBudgetManagementBatchIntegration))
        {
            ProjEntityTableMapper mapper;
            var attributes = _entity.Attributes;
       
            AliasedValue transactionClassification = attributes.Contains(TRANSACTION_CLASSIFICATION) ? attributes.get_Item(TRANSACTION_CLASSIFICATION) : null;
            OptionSetValue setValue = transactionClassification ? transactionClassification.Value : null;
            int forecastType = setValue ? setValue.Value : 0;

            activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::ForecastTypeInCE, any2Str(forecastType));

            switch(forecastType)
            {
                case ProjBudgetDataverseConstants::EMPL_DATAVERSE_CLASSIFICATION:
                    activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::ForecastClassificationInFNO, "ProjForecastEmpl");
                    mapper = new ProjBudgetLineToForecastEmplMapper(_entity);
                    break;
                case ProjBudgetDataverseConstants::COST_DATAVERSE_CLASSIFICATION:
                    activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::ForecastClassificationInFNO, "ProjForecastCost");
                    mapper = new ProjBudgetLineToForecastCostMapper(_entity);
                    break;
                case ProjBudgetDataverseConstants::ITEM_DATAVERSE_CLASSIFICATION:
                    activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::ForecastClassificationInFNO, "ForecastSales");
                    mapper = new ProjBudgetLineToForecastSaleMapper(_entity);
                    break;
                default:
                    logger.logError(strFmt("Forecast classification type %1 is not valid.", forecastType));
                    throw error(strFmt("@Proj:ProjBudgetEntityMissingClassification"));
            }
        
            return mapper;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetForecastModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Budget forecast model if exist or will create it.
    /// </summary>
    /// <returns>a BUDGET forecastModel</returns>
    public static ForecastModel getBudgetForecastModel()
    {
        ForecastModel forecastModel = ForecastModel::find(HeadingSub::Heading, BUDGET_FORECASTMODEL_ID);
        if ( !forecastModel && ProjBudgetManagementFeatureHelper::isFeatureEnabled())
        {
            forecastModel.selectForUpdate(true);
            forecastModel.ModelId = BUDGET_FORECASTMODEL_ID;
            forecastModel.SubModelId = BUDGET_FORECASTMODEL_ID;
            forecastModel.Txt = BUDGET_FORECASTMODEL_TXT;
            forecastModel.insert();
        }
        return forecastModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>