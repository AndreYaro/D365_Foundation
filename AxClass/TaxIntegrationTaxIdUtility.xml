<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxIdUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationTaxIdUtility</c> class is utility class for tax id related operation.
/// </summary>
public class TaxIntegrationTaxIdUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveTaxIDFromDocumentToTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists VAT number to table.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c> to persist from.</param>
    /// <param name = "_vatMap">The table to persist VAT number to.</param>
    public static void saveTaxIDFromDocumentToTable(TaxIntegrationDocumentObject _document, TaxExemptVATNumMap _vatMap)
    {
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(_document.getBusinessProcess()))
        {
            TaxIntegrationSkipUpdateContext taxIntegrationSkipUpdateContext = TaxIntegrationSkipUpdateContext::current();

            if (taxIntegrationSkipUpdateContext && taxIntegrationSkipUpdateContext.parmSkipUpdate())
            {
                return;
            }

            if (_vatMap.TableId == tableNum(LedgerJournalTrans))
            {
                LedgerJournalTrans ledgerJournalTrans = _vatMap as LedgerJournalTrans;
                TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToLedgerJournalTrans(_document, ledgerJournalTrans);
                return;
            }

            // Neither VAT ID returned or default VAT number is valid, write 0.
            ttsbegin;
            if (_vatMap.VATNumTableType != TaxExemptNumberSourceType::TaxRegistration && !_document.getPartyTaxRecId())
            {
                _vatMap.VATNum = '';
                _vatMap.VATNumTableType = TaxExemptNumberSourceType::None;
                _vatMap.VATNumRecId = 0;
                _vatMap.doUpdate();
            }
            // The VAT ID returned by service is valid.
            else if ((_document.getPartyTaxRecId()
                        && _vatMap.VATNumTableType == TaxExemptNumberSourceType::TaxRegistration
                        && _document.getPartyTaxRecId() != _vatMap.VATNumRecId)
                        || (_document.getPartyTaxRecId()
                            // to avoide duplicate RecId between <c>TaxRegistration</c> and <c>TaxVATNumTable</c>
                            && _vatMap.VATNumTableType != TaxExemptNumberSourceType::TaxRegistration))
            {
                _vatMap.VATNum = _document.getPartyTaxId();
                _vatMap.VATNumTableType = TaxExemptNumberSourceType::TaxRegistration;
                _vatMap.VATNumRecId = _document.getPartyTaxRecId();
                _vatMap.doUpdate();
            }
            // Else use default value.
            ttscommit;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxIDFromDocumentToLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists VAT number to <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c> to persist from.</param>
    /// <param name = "_ledgerJournalTrans">The table to persist VAT number to.</param>
    public static void saveTaxIDFromDocumentToLedgerJournalTrans(TaxIntegrationDocumentObject _document, LedgerJournalTrans _ledgerJournalTrans)
    {
        ttsbegin;
        LedgerJournalTransTaxExtension extensionTable = _ledgerJournalTrans.ledgerJournalTransTaxExtension();

        // Neither VAT ID returned nor default VAT number is valid, write 0.
        if (extensionTable.VATNumTableType != TaxExemptNumberSourceType::TaxRegistration && !_document.getPartyTaxRecId())
        {
            _ledgerJournalTrans.VATNumJournal = '';
            extensionTable.VATNumTableType = TaxExemptNumberSourceType::None;
            extensionTable.VATNumRecId = 0;
        }
        // The VAT ID returned by service is valid.
        else if ((_document.getPartyTaxRecId()
                    && extensionTable.VATNumTableType == TaxExemptNumberSourceType::TaxRegistration
                    && _document.getPartyTaxRecId() != extensionTable.VATNumRecId)
                    || (_document.getPartyTaxRecId()
                        // to avoide duplicate RecId between <c>TaxRegistration</c> and <c>TaxVATNumTable</c>
                        && extensionTable.VATNumTableType != TaxExemptNumberSourceType::TaxRegistration))
        {
            _ledgerJournalTrans.VATNumJournal = _document.getPartyTaxId();
            extensionTable.VATNumTableType = TaxExemptNumberSourceType::TaxRegistration;
            extensionTable.VATNumRecId = _document.getPartyTaxRecId();
        }
        else
        {
            // Else use default value, do not update
            ttscommit;
            return;
        }

        _ledgerJournalTrans.doUpdate();

        if (extensionTable)
        {
            extensionTable.selectForUpdate(true);
            extensionTable.doUpdate();
        }
        else
        {
            extensionTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateTaxExemptNumberFromCustomerAddressEnabledForBusinessProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if update VAT number based on customer address change is enabled for certain business process.
    /// </summary>
    /// <param name = "_process">The business process.</param>
    internal static boolean isUpdateTaxExemptNumberFromCustomerAddressEnabledForBusinessProcess(TaxIntegrationBusinessProcess _process)
    {
        if (_process == TaxIntegrationBusinessProcess::Sales
            || _process == TaxIntegrationBusinessProcess::FTI 
            || _process == TaxIntegrationBusinessProcess::Project)
        {
            return Tax::isTaxIntegrationEnabledForBusinessProcess(_process) && TaxIntegrationTaxServiceParameters::find().IsUpdateTaxExemptNumberFromCustomerAddrEnabled;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxExemptNumberFromCustomerAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates VAT number based on customer address change.
    /// </summary>
    /// <param name = "_updateTable">The table to be updated, in the form of a map.</param>
    /// <param name = "_address">The new customer address.</param>
    /// <param name = "_custAccount">The customer account.</param>
    internal static void updateTaxExemptNumberFromCustomerAddress(TaxExemptVatNumMap _updateTable, LogisticsPostalAddress _address, CustAccount _custAccount)
    {
        CustTable cust = CustTable::find(_custAccount);
        TaxRegistrationTypesList type = TaxRegistrationTypesList::TAXID;
        date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // Find from delivery address
        TaxRegistration taxRegistration = TaxRegistration::categoryTaxRegistration(cust.Party, type, _address.CountryRegionId, _date, _address.RecId);
        TaxRegistrationNumber vatNum = taxRegistration.RegistrationNumber;
        TaxRegistrationRecId vatNumRecId = taxRegistration.RecId;
        TaxExemptNumberSourceType vatNumTableType = TaxExemptNumberSourceType::TaxRegistration;

        // Find from customer data if not found in previous steps
        if (!vatNum)
        {
            vatNum = cust.VATNum;
            vatNumRecId = cust.VATNumRecId;
            vatNumTableType = cust.VATNumTableType;
        }

        // Find from primary address if not found in previous steps
        if (!vatNum)
        {
            taxRegistration = TaxRegistration::getPrimaryAddressTaxRegistration(cust, type, _date);
            vatNum = taxRegistration.RegistrationNumber;
            vatNumRecId = taxRegistration.RecId;
            vatNumTableType = TaxExemptNumberSourceType::TaxRegistration;
        }

        // update tax Exempt Number
        if (vatNum && vatNum != _updateTable.VATNum)
        {
            info(strFmt("@TaxIntegration:UpdateTaxExemptNumberFromCustomerAddrMessage", vatNum));
            _updateTable.VATNum = VATNum;
            _updateTable.VATNumRecId = vatNumRecId;
            _updateTable.VATNumTableType = vatNumTableType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceGroupIdByTaxId</Name>
				<Source><![CDATA[
    internal static NumberSequenceGroupId getNumberSequenceGroupIdByTaxId(TaxRegistrationRecId _taxId)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_taxId);
        if (taxRegistration
            && !taxRegistration.DisregardNumberSequenceGroupId
            && taxRegistration.NumberSequenceGroupId)
        {
            return taxRegistration.NumberSequenceGroupId;
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>