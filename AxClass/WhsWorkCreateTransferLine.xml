<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateTransferLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateTransferLine</c> class creates warehouse work for transfer order line.
/// </summary>
class WhsWorkCreateTransferLine extends WHSWorkCreateReceiving
{
    InventTransferLine              transferLine;
    WHSWorkCreateId                 workCreateId;
    WHSLicensePlateGroupingPolicy   unitization;
    InventQty                       inventQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Establishes temporary work line in creation process
    /// </summary>
    public void createTempTable()
    {
        TMSInventTransferTable  inventTransferTable;
        MapEnumerator           dimQtyEnumerator;

        ttsbegin;

        // Get the first Pick location based on the TransferLine.InventDimId.
        startLocationId = InventLocation::find(InventTransferTable::find(transferLine.TransferId).InventLocationIdTo).wmsLocationIdDefaultReceipt;

        // Register the Transfer Order Lines and create batches if we need to.
        this.processTransferLines();

        inventTransferTable = TMSInventTransferTable::find(transferLine.TransferId);

        // Create map to track above location dimensions and qty, based off registered inventory
        this.createReceiptDimQtyMap(transferLine.ItemId);

        // Fill the Transfer specific fields on the Temp Work Line.
        tmpWorkLine.WorkType             = WHSWorkType::Put;
        tmpWorkLine.OriginType           = WHSOriginType::Load;
        tmpWorkLine.OriginRefId          = transferLine.TransferId;
        tmpWorkLine.OrderNum             = transferLine.TransferId;
        tmpWorkLine.WorkCreateId         = workCreateId;
        tmpWorkLine.WorkTransType        = WHSWorkTransType::TransferReceipt;
        tmpWorkLine.InventTransId        = transferLine.InventTransId;
        tmpWorkLine.ItemId               = transferLine.ItemId;
        tmpWorkLine.RefTableId           = tableNum(InventTransferLine);
        tmpWorkLine.RefRecId             = transferLine.RecId;
        tmpWorkLine.StartLocationId      = startLocationId;
        tmpWorkLine.InventUnitizeQty     = unitizeQty;
        tmpWorkLine.ToWarehouse          = transferLine.inventTransferTable().InventLocationIdTo;
        tmpWorkLine.CarrierCode          = inventTransferTable.CarrierCode;
        tmpWorkLine.CarrierServiceCode   = inventTransferTable.CarrierServiceCode;
        tmpWorkLine.ModeCode             = inventTransferTable.ModeCode;

        this.setGlobals();

        InventQty       qtyToCreateWork;
        WHSWorkBuildId  crossDockWorkBuildId;
        InventDim       crossDockInventDim;

        // Create the Temp Work Line record(s).
        if (!dimQty.empty())
        {
            dimQtyEnumerator = dimQty.getEnumerator();

            while (dimQtyEnumerator.moveNext())
            {
                workInventDim = InventDim::find(dimQtyEnumerator.currentKey());

                qtyToCreateWork = dimQtyEnumerator.currentValue();

                crossDockInventDim.data(workInventDim);
                crossDockInventDim.InventStatusId = transferLine.inventDim().InventStatusId;

                crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);
				qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(qtyToCreateWork,
																			crossDockWorkBuildId,
																			transferLine.ItemId,
																			targetLicensePlateId,
																			crossDockInventDim);
                tmpWorkLine.WorkCreateId = workCreateId;

                if (qtyToCreateWork > 0)
                {
                    this.createTempLine(tmpWorkLine, dimQtyEnumerator.currentValue());
                }
            }
        }
        else
        {
            crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);
			qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(inventQty,
																		crossDockWorkBuildId,
																		transferLine.ItemId,
																		targetLicensePlateId,
																		transferLine.inventDimReceive(transferLine.inventTransferTable()));
            tmpWorkLine.WorkCreateId = workCreateId;

            if (qtyToCreateWork > 0)
            {
                this.createTempLine(tmpWorkLine, qtyToCreateWork);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        transferLine = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(transferLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferLine</Name>
				<Source><![CDATA[
    InventTransferLine parmInventTransferLine(InventTransferLine _transferLine = transferLine)
    {
        transferLine = _transferLine;

        return transferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitization</Name>
				<Source><![CDATA[
    public WHSLicensePlateGroupingPolicy parmUnitization(WHSLicensePlateGroupingPolicy _unitization = unitization)
    {
        unitization = _unitization;

        return unitization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferLines</Name>
				<Source><![CDATA[
	/// <summary>
	/// Processes inventory transfer lines.
	/// </summary>
    void processTransferLines()
    {
        WHSReceiptDetails   receiptDetails;
        InventDim           inventDim;

        boolean isCWItem = PdsGlobal::pdsIsCWItem(transferLine.ItemId);
        boolean mustReceiveTransferOrderLine = this.mustReceiveTransferOrderLine();

        // This is a perf optimization. We can only be in this flow if we shipped using non-WHS flow, so we do not have a WHSUOMStructure behind
        this.setMustCleanupUOMStructure(false);

        if (WHSReceiptDetails::existByReceiptIdLicensePlate(receiptId, targetLicensePlateId))
        {
            // Default receipt location specified on the warehouse should always be used when registering transfer line using WHS processes.
            WHSUpdateReceivingTransReceiptLocation updateReceivingTransReceiptLocation = WHSUpdateReceivingTransReceiptLocation::newFromTransferLineAndStartLocationId(transferLine, startLocationId);
            updateReceivingTransReceiptLocation.updateReceivingTransReceiptLocation();

            while select receiptDetails
                where receiptDetails.ReceiptId == receiptId
                join inventDim
                    where inventDim.InventDimId     == receiptDetails.InventDimId
                    &&    inventDim.LicensePlateId  == targetLicensePlateId
            {
                this.registerInventTransferLineNonLicensePlate(transferLine,
                                                    targetLicensePlateId,
                                                    receiptDetails.InventQty,
                                                    InventDim::find(receiptDetails.InventDimId),
                                                    receiptDetails.CapturedWeight);
                if (mustReceiveTransferOrderLine)
                {
                    this.receiveTransferLineNonLP(transferLine);
                }
            }
        }
        else
        {
            this.registerInventTransferLineNonLicensePlate(transferLine, targetLicensePlateId, inventQty, null, 0);
            if (mustReceiveTransferOrderLine)
            {
                this.receiveTransferLineNonLP(transferLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReceiveTransferOrderLine</Name>
				<Source><![CDATA[
    private boolean mustReceiveTransferOrderLine()
    {
        return !(WHSWorkCreateTransferLineSplitRegistrationAndReceivingForAllFlowsFlight::instance().isEnabled()
                && WHSParameters::find().TransferOrderReceivingProcess == WHSTransferOrderReceivingProcess::SplitRegistrationAndReceivingAllFlows);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method for the class instances.
	/// </summary>
	/// <param name="_common">
	/// Common record to be used to construct instance.
	/// </param>
	/// <param name="_workCreateId">
	/// Work creation id to be used to construct instance.
	/// </param>
	/// <returns>
	/// The <c>WHSWorkCreateTransferLine</c> instance.
	/// </returns>
    static WHSWorkCreateTransferLine construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateTransferLine   workCreateTransferLine;

        workCreateTransferLine = new WHSWorkCreateTransferLine(_common, _workCreateId);

        return workCreateTransferLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>