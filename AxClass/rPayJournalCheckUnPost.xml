<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalCheckUnPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An abstract class for unposting posted journals.
/// </summary>
abstract class rPayJournalCheckUnPost extends JournalCheckPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTransferErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows transfer errors to new journal.
    /// </summary>
    /// <returns>
    /// True if transferring errors to new journal is allowed, otherwise false.
    /// </returns>
    protected boolean allowTransferErrors()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return strFmt("@SYS62637", this.parmJournalId());
        }

        return strFmt("@RUP6023", this.parmJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        RHRMOrderTable   orderTable;
        boolean ret;

        ret = super(_journalTransList);

        if (ret)
        {
            orderTable = this.orderTable();

            if (!this.isHRMOrderOpen())
            {
                ret = checkFailed(strFmt("@RUP6147", orderTable.JournalId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the information message.
    /// </summary>
    protected void infoResult()
    {
        int x;
        if (! showInfoResult)
        {
            return;
        }

        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            if (! journalTableData.journalErrorTransList().count() && checkJournalResult)
            {
                info("@SYS17146");
            }
            else
            {
                info("@SYS62651");
                x = journalTableData.journalErrorTransList().count();
                if (journalTableData.journalErrorTransList().count())
                {
                    info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
            }
        }
        else
        {
            if (journalTableData.journalErrorTransList().count() || !checkJournalResult)
            {
                info("@RUP1960");
                if (journalTableData.journalErrorTransList().count())
                {
                    info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
            }
            else
            {
                info("@RUP1961");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHRMOrderOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if order is opened.
    /// </summary>
    /// <returns>
    /// True if journal is not posted.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isHRMOrderOpen()
    {
        RHRMOrderTable  orderTable = this.orderTable();

        if (!orderTable)
        {
            return true;
        }

        if (orderTable.PayJournalNum == journalTableData.journalTable().JournalId)
        {
            return true;
        }

        if (!orderTable.PayJournalNum)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets resolution journal order table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// An indicator, if true returned record will be selected for update.
    /// </param>
    /// <returns>
    /// An order table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RHRMOrderTable orderTable(boolean _forUpdate = false)
    {
        RHRMOrderTable   orderTable;
        RPayJournalTable payJournal;

        payJournal = RPayJournalTable::find(journalTableData.journalTable().JournalId);

        if (payJournal.rhrmOrderTable)
        {
            orderTable = RHRMOrderTable::find(payJournal.rhrmOrderTable, _forUpdate);
        }

        return orderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets journal record to unposted.
    /// </summary>
    /// <param name="_journalTable">
    /// A resolution journal table record.
    /// </param>
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        _journalTable.Posted             = NoYes::No;
        _journalTable.PostedDateTime     = DateTimeUtil::getSystemDateTime();
        _journalTable.PostedUserId       = curUserId();
        _journalTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates resolution journal.
    /// </summary>
    /// <param name="_journalTable">
    /// A resolution journal table record.
    /// </param>
    /// <returns>
    /// True if no errors in journal found.
    /// </returns>
    public boolean validateJournalTable(JournalTableMap _journalTable)
    {
        if (! journalId)
        {
            return checkFailed("@SYS19282");
        }

        if (! _journalTable.RecId)
        {
            return checkFailed(strFmt("@SYS62511", journalId));
        }

        if (!_journalTable.Posted)
        {
            return checkFailed(strFmt("@RUP1959", journalId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of journal type handling class.
    /// </summary>
    /// <param name="_journalTable">
    /// A journal table record.
    /// </param>
    /// <returns>
    /// An instance of constructed journal handling class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayJournalCheckUnPost construct(RPayJournalTable _journalTable)
    {
        RPayJournalCheckUnPost checkUnpost;

        switch (true)
        {
            case _journalTable.isReversalJournal():
                checkUnpost = new RPayJournalCheckUnPost_RestoreTrans();
                break;

            case _journalTable.isPastPeriodTransPosted():
                checkUnpost = new RPayJournalCheckUnPost_ReverseTrans();
                break;

            default:
                checkUnpost = new RPayJournalCheckUnpost_DeleteTrans();
        }

        return checkUnpost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayJournalCheckUnPost      journalCheckPost;
        JournalForm                 journalForm;

        journalForm      = JournalForm::fromArgs(args);
        journalCheckPost = RPayJournalCheckUnPost::newFromForm(args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }

            return;
        }

        try
        {
            journalCheckPost.runOperation();
            journalForm.runbaseMainEnd(journalCheckPost,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    private static RPayJournalCheckUnPost newFromForm(Args _args, JournalForm _journalForm)
    {
        RPayJournalCheckUnPost      journalCheckPost;
        JournalTableMap             journalTable = _journalForm.journalTableData().journalTable();

        journalCheckPost = RPayJournalCheckUnPost::construct(journalTable);
        journalCheckPost.getLast();

        journalCheckPost.parmAutoBlock(false);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmJournalCheckPostType(_args.parmEnum());
        journalCheckPost.parmJournalTableId(journalTable.TableId);
        journalCheckPost.parmJournalId(journalTable.JournalId);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>