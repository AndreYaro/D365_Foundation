<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleVendPaymentReqExpProdExtPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccJourRuleVendPaymentReqExpProdExtPrice</c> class controls various posting attributes that
///    are used during the posting of a vendor invoice line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentApplication, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentReverseApplication, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::PriceVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::QuantityVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::RoundingAmount)
]
public class AccJourRuleVendPaymentReqExpProdExtPrice extends AccountingJournalizingRule
{
    VendInvoiceInfoLine    vendInvoiceInfoLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseInventMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a fixed monetary amount specific main account dimension list provider can be used to
    /// derive main account dimension values that are required for classifying the financial consequences
    /// of source document amounts that are assigned to inventoried products.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUseInventMainAccDimensionListProvider()
    {
        boolean canUseInventMainAccDimensionListProvider;
        // <GEERU>
        if (this.parmLedgerPostingType() == LedgerPostingType::EmplBalance_RU)
        {
            return false;
        }
        // </GEERU>

        if (this.parmLedgerPostingType() == LedgerPostingType::VendBalance)
        {
            canUseInventMainAccDimensionListProvider = false;
        }
        else
        {
            canUseInventMainAccDimensionListProvider = super();
        }

        return canUseInventMainAccDimensionListProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUsePartyMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a party amount specific main account dimension list provider can be used to
    /// derive main account dimension values required for classifying the financial consequences of source
    /// document amounts assigned to a party in an economic exchange.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUsePartyMainAccDimensionListProvider()
    {
        boolean ret;

        ret = super() && !AccountingRule_RU::canUseEmplMainAccDimListProviderFromAccountingRule_RU(this);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        // <GEERU>
        if (this.parmIsCountryRegionEEandRU())
        {
            if (AccountingRule_RU::canUseEmplMainAccDimListProvider_RU(sourceDocumentLineItem))
            {
                return LedgerPostingType::EmplBalance_RU;
            }
        }
        // </GEERU>
        return LedgerPostingType::VendBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit     side;

        if (!vendInvoiceInfoLine)
        {
            vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(this.parmSourceDocumentLineItem().parmSourceDocumentLine().RecId);
        }

        switch (vendInvoiceInfoLine.LineType)
        {
            case PurchInvoiceLineType::AdvanceApplication:
                side = DebitCredit::Debit;
                break;

            case PurchInvoiceLineType::ReverseAdvanceApplication:
                side = DebitCredit::Credit;
                break;

            default:
                if (accountingDistribution.TransactionCurrencyAmount <= 0)
                {
                    side = DebitCredit::Debit;
                }
                else
                {
                    side = DebitCredit::Credit;
                }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>