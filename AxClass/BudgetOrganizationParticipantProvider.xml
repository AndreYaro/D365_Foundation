<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetOrganizationParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetOrganizationParticipantProvider</c> class implements the
/// <c>WorkflowParticipantProvider</c> interface that resolves the assignment of approvers based on the
/// responsible organization of a budget plan.
/// </summary>
public class BudgetOrganizationParticipantProvider implements WorkflowParticipantProvider
{
    #Define.BudgetPlanPreparer('BudgetPlanPreparer')
    #Define.BudgetingOrganizationManager('BudgetingOrganizationManager')
    #Define.ParentBudgetPlanPreparer('ParentBudgetPlanPreparer')
    #Define.ParentBudgetingOrganizationManager('ParentBudgetingOrganizationManager')
    #Define.BudgetOrganizationStructureManager('BudgetOrganizationStructureManager')

    WorkflowUserList userList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValidWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a valid <c>HcmWorker</c> record to the list of participants.
    /// </summary>
    /// <param name="_hcmWorker">
    /// The ID of a <c>HcmWorker</c> record .
    /// </param>
    /// <param name="_budgetPlanHeader">
    /// A <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The <c>HcmWorker</c> record is not valid in an organization.
    /// </exception>
    private void addValidWorker(HcmWorkerRecId _hcmWorker, BudgetPlanHeader _budgetPlanHeader)
    {
        if (_hcmWorker && _budgetPlanHeader)
        {
            if (BudgetPlan::isOrganizationVisibleToWorker(
                _budgetPlanHeader.BudgetPlanningProcess,
                _budgetPlanHeader.BudgetingOrganization,
                _hcmWorker))
            {
                userList.add(DirPersonUserEx::worker2UserId(_hcmWorker));
            }
            else
            {
                throw error(strFmt("@GLS150023", HcmWorker::worker2Name(_hcmWorker), _budgetPlanHeader.DocumentNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of participant tokens for display in the workflow configuration UI.
    /// </summary>
    /// <returns>
    /// An instance of the <c>WorkflowParticipantTokenList</c> class that contains the list of participant
    /// tokens.
    /// </returns>
    public WorkflowParticipantTokenList getParticipantTokens()
    {
        WorkflowParticipantTokenList userGroups = WorkflowParticipantTokenList::construct();

        userGroups.add(#BudgetPlanPreparer, "@GLS70428");
        userGroups.add(#BudgetingOrganizationManager, "@GLS70561");
        userGroups.add(#ParentBudgetPlanPreparer, "@GLS70562");
        userGroups.add(#ParentBudgetingOrganizationManager, "@GLS70563");
        userGroups.add(#BudgetOrganizationStructureManager, "@GLS70564");

        return userGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Protected default constructor that Construct factory methods used to instantiate the
    /// <c>BudgetOrganizationParticipantProvider</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves a <c>WorkflowContext</c> class to a list of budget plan responsible users.
    /// </summary>
    /// <param name="_context">
    /// An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name="_participantTokenName">
    /// The <c>BudgetOrganizationParticipantProvider</c> class participant token.
    /// </param>
    /// <returns>
    /// An instance of a <c>WorkflowUserList</c> list that contains all enabled users from the token.
    /// </returns>
    public WorkflowUserList resolve(WorkflowContext _context, WorkflowParticipantToken _participantTokenName)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        userList = WorkflowUserList::construct();
        budgetPlanHeader = BudgetPlanHeader::find(_context.parmRecId());

        if (budgetPlanHeader.RecId)
        {
            switch (_participantTokenName)
            {
                case #BudgetPlanPreparer:
                    this.resolveByBudgetPlanPreparer(budgetPlanHeader.RecId);
                    break;

                case #ParentBudgetPlanPreparer:
                    this.resolveByBudgetPlanPreparer(budgetPlanHeader.ParentBudgetPlanHeader);
                    break;

                case #BudgetingOrganizationManager:
                    this.resolveByBudgetOrgManager(budgetPlanHeader.RecId);
                    break;

                case #ParentBudgetingOrganizationManager:
                    this.resolveByBudgetOrgManager(budgetPlanHeader.ParentBudgetPlanHeader);
                    break;

                case #BudgetOrganizationStructureManager:
                    this.resolveByBudgetOrgStructureManager(budgetPlanHeader.RecId);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        if (userList.getCount() == 0)
        {
            throw error(strFmt("@SYS313866", _participantTokenName));
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByBudgetOrgManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the budget organization manager of the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The ID of a <c>BudgetPlanHeader</c> record.
    /// </param>
    private void resolveByBudgetOrgManager(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader        budgetPlanHeader;
        OMInternalOrganization  omInternalOrganization;
        OMOperatingUnit         omOperatingUnit;

        if (_budgetPlanHeaderRecId)
        {
            select firstonly budgetPlanHeader
                where budgetPlanHeader.RecId == _budgetPlanHeaderRecId
                join RecId from omInternalOrganization
                    where omInternalOrganization.RecId == budgetPlanHeader.BudgetingOrganization
                join RecId, HcmWorker from omOperatingUnit
                    where omOperatingUnit.RecId == omInternalOrganization.RecId;

            if (BudgetPlan::isOrganizationInBudgetPlanningHierarchy(
                budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.BudgetingOrganization))
            {
                this.addValidWorker(omOperatingUnit.HcmWorker, budgetPlanHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByBudgetOrgStructureManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the budget organization structure manager of the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The ID of a <c>BudgetPlanHeader</c> record.
    /// </param>
    private void resolveByBudgetOrgStructureManager(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader        budgetPlanHeader;
        BudgetPlanningProcess   budgetPlanningProcess;
        OMHierarchyType         omHierarchyType;
        OMHierarchyRelationship omHierarchyRelationship;
        OMInternalOrganization  omInternalOrganization;
        OMOperatingUnit         omOperatingUnit;

        if (_budgetPlanHeaderRecId)
        {
            select firstonly budgetPlanHeader
                where budgetPlanHeader.RecId == _budgetPlanHeaderRecId
                join OrganizationHierarchyType from budgetPlanningProcess
                    where budgetPlanningProcess.RecId == budgetPlanHeader.BudgetPlanningProcess
                join RecId from omHierarchyType
                    where omHierarchyType.RecId == budgetPlanningProcess.OrganizationHierarchyType
                join HierarchyType, ParentOrganization, ChildOrganization from omHierarchyRelationship
                    where omHierarchyRelationship.HierarchyType == omHierarchyType.RecId
                        && omHierarchyRelationship.ParentOrganization == 0
                join RecId from omInternalOrganization
                    where omInternalOrganization.RecId == omHierarchyRelationship.ChildOrganization
                join HcmWorker from omOperatingUnit
                    where omOperatingUnit.RecId == omInternalOrganization.RecId;

            this.addValidWorker(omOperatingUnit.HcmWorker, budgetPlanHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveByBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the budget plan preparer of the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The ID of a <c>BudgetPlanHeader</c> record.
    /// </param>
    private void resolveByBudgetPlanPreparer(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (_budgetPlanHeaderRecId)
        {
            select firstonly budgetPlanHeader
                where budgetPlanHeader.RecId == _budgetPlanHeaderRecId;

            this.addValidWorker(budgetPlanHeader.BudgetPlanPreparer, budgetPlanHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetOrganizationParticipantProvider construct()
    {
        return new BudgetOrganizationParticipantProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>