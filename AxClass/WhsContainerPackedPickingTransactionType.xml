<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsContainerPackedPickingTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsContainerPackedPickingTransactionType</c> class handles logic specific to the packed container picking work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::PackedContainerPicking)]
class WhsContainerPackedPickingTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLPWithTargetLPForNoStopWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustUpdateLPWithTargetLPForNoStopWorkLine(WHSWorkLine _workLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentAllowed</Name>
				<Source><![CDATA[
    public boolean isReplenishmentAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeAllowed</Name>
				<Source><![CDATA[
    public boolean isNegativeAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canMoveReservationFromWorkLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        if (_locationProfile.LocType != WhsParameters::find().ShipFinalLocType)
        {
            return strFmt("@WAX:FinalPutLocationMustBeFinalShippingLoc", _location.wmsLocationId, workTransType);
        }
        if (_locationProfile.checkIfLocationIsFinalShippingLocationAndNonLPControlled())
        {
            return strFmt("@WAX:FinalPutLocationMustBeLPControlled",_location.wmsLocationId, workTransType);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable  _whsWorkTable)
    {
        WHSWorkTransType originWorkTransType = _whsWorkTable.getOriginWorkTransType();
        
        WhsWorkTransactionType::singletonFromTypeOrDefault(originWorkTransType).openSourceOrder(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        WHSWorkTable workTable = _workOrder.buffer() as WHSWorkTable;
        if (!workTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSWorkTransType originWorkTransType = workTable.getOriginWorkTransType();
        return WhsWorkTransactionType::singletonFromTypeOrDefault(originWorkTransType).findSourceOrderByWorkOrder(_workOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirpackedContainerPicking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplatePackedContainerPicking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Shipping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkTypeValid</Name>
				<Source><![CDATA[
    public boolean isWorkTypeValid(WHSWorkType _workType)
    {
        return _workType == WHSWorkType::Pick || _workType == WHSWorkType::Put;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        WHSContainerTable::setContainerReleasedToNo(_workTable.TargetLicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInitialPickDimTrackingRecords</Name>
				<Source><![CDATA[
    public void insertInitialPickDimTrackingRecords(
        WHSWorkTable _workTable,
        WHSWorkLine _workLine,
        WHSWorkInventTrans _workInventTrans,
        InventDim _inventDim,
        Map _usedDimQuantities,
        Map _itemId2FieldIdList)
    {
        WHSContainerLine containerLine;
        WHSLoadLine      loadLine;

        InventDim        inventDimCriteria = InventDim::find(_workInventTrans.InventDimIdFrom);

        inventDimCriteria.clearTrackingDimensions();
        inventDimCriteria.LicensePlateId = _inventDim.LicensePlateId;

        InventDimParm inventDimParmTrackingDims;
        inventDimParmTrackingDims.setAllTrackingDimensions();

        if (_workTable.ContainerId)
        {
            while select containerLine
                where containerLine.ContainerId == _workTable.ContainerId
                exists join loadLine
                    where loadLine.InventTransId    == _workInventTrans.InventTransIdParent
                       && loadLine.RecId            == containerLine.LoadLine
            {
                inventDimCriteria.copyDimParmDim(InventDimGroupSetup::newItemId(_workInventTrans.ItemId), containerLine.inventDim(), inventDimParmTrackingDims);
                inventDimCriteria = InventDim::findOrCreate(inventDimCriteria);

                this.createDimTrackingRecordsAndUpdateUsedDimHandlingQty(
                    _workInventTrans.ItemId,
                    containerLine.getInventoryHandlingQuantity(),
                    containerLine.CapturedWeight,
                    _workInventTrans.InventTransIdParent,
                    _workLine,
                    _workTable.workTransType,
                    inventDimCriteria,
                    _usedDimQuantities);
            }
        }
        else
        {
            WHSContainerTable containerTable;

            while select containerLine
                exists join containerTable
                    where containerLine.ContainerId == containerTable.ContainerId
                       && containerTable.ContainerGroupingLicensePlateId == _inventDim.LicensePlateId
                exists join loadLine
                    where loadLine.InventTransId    == _workInventTrans.InventTransIdParent
                       && loadLine.RecId            == containerLine.LoadLine
            {
                inventDimCriteria.LicensePlateId = containerLine.ContainerId;

                inventDimCriteria.copyDimParmDim(InventDimGroupSetup::newItemId(_workInventTrans.ItemId), containerLine.inventDim(), inventDimParmTrackingDims);
                inventDimCriteria = InventDim::findOrCreate(inventDimCriteria);

                this.createDimTrackingRecordsAndUpdateUsedDimHandlingQty(
                    _workInventTrans.ItemId,
                    containerLine.getInventoryHandlingQuantity(),
                    containerLine.CapturedWeight,
                    _workInventTrans.InventTransIdParent,
                    _workLine,
                    _workTable.workTransType,
                    inventDimCriteria,
                    _usedDimQuantities);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsContainerLine = _query.dataSourceTable(tableNum(WHSContainerLine));
        QueryBuildDataSource qbdsInventDim = qbdsContainerLine.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>