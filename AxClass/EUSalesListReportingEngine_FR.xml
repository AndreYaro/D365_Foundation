<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_FR</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// France.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoFR)]
class EuSalesListReportingEngine_FR extends EUSalesListReportingEngine implements BatchRetryable
{
    MonthsOfYear lastMonth;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record in the <c>EUSalesListReportingLine</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    /// The record to which the line to add belongs.
    /// </param>
    /// <returns>
    /// A <c>EUSalesListReportingLine</c> table buffer.
    /// </returns>
    /// <remarks>
    /// Override this method to initialize the <c>DeclarationMonth_FR</c> field which is used in group
    /// post-processing.The value is based on the transaction date of the record that is inserted.
    /// </remarks>
    protected EUSalesListReportingLine addLine(RefRecId _euSalesListReportingGroupRecId)
    {
        EUSalesListReportingLine    euSalesListReportingLine;
        EUSalesList                 euSalesList;

        euSalesListReportingLine = super(_euSalesListReportingGroupRecId);
        euSalesList = queryRun.get(tableNum(EUSalesList));
        euSalesListReportingLine.DeclarationMonth_FR = mthOfYr(euSalesList.TransDate);
        euSalesListReportingLine.update();

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drives the calculation and preparation of data to be consumed by either SSRS or GER.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>EUSalesListReportingHeader</c> record.
    /// </returns>
    /// <remarks>
    /// Override this method to add the post-processing logic for groups.
    /// </remarks>
    public RefRecId calculate()
    {
        RefRecId euSalesListReportingHeaderRecIdLocal;

        euSalesListReportingHeaderRecIdLocal = super();

        this.postProcessGroups(euSalesListReportingHeaderRecIdLocal);

        return euSalesListReportingHeaderRecIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a new record is created in the <c>EUSalesListReportingLine</c> table.
    /// </summary>
    /// <returns>
    /// true if a new line is created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Override this method to add a month change as additional criteria for the line.
    /// </remarks>
    protected boolean isNewLine()
    {
        boolean         isNewLine;
        EUSalesList     euSalesList;
        MonthsOfYear    month;

        isNewLine = super();

        euSalesList = queryRun.get(tableNum(EUSalesList));

        month = mthOfYr(euSalesList.TransDate);

        isNewLine = isNewLine || (lastMonth != month);

        lastMonth = month;

        return isNewLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>EUSalesListReportingLine</c> records and groups them based on the month.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The header record to which the groups belong to.
    /// </param>
    protected void postProcessGroups(RefRecId _euSalesListReportingHeaderRecId)
    {
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesListReportingGroup   originalReportingGroup;
        EUSalesListReportingLine    euSalesListReportingLine;
        EUSalesListReportingLine    euSalesListReportingLineMonths;
        Counter                     groupCount;

        select forupdate firstonly originalReportingGroup
            where originalReportingGroup.euSalesListReportingHeader == _euSalesListReportingHeaderRecId;

        while select DeclarationMonth_FR from euSalesListReportingLineMonths
            group by euSalesListReportingLineMonths.DeclarationMonth_FR
            order by euSalesListReportingLineMonths.DeclarationMonth_FR
            where euSalesListReportingLineMonths.euSalesListReportingGroup == originalReportingGroup.RecId
        {
            groupCount++;

            euSalesListReportingGroup.PeriodValue                   = euSalesListReportingLineMonths.DeclarationMonth_FR;
            euSalesListReportingGroup.PeriodType                    = EUSalesListReportingPeriodType::Monthly;
            euSalesListReportingGroup.euSalesListReportingHeader    = _euSalesListReportingHeaderRecId;
            euSalesListReportingGroup.Group_FR                      = groupCount;
            euSalesListReportingGroup.insert();

            update_recordset euSalesListReportingLine
                setting euSalesListReportingGroup = euSalesListReportingGroup.RecId
                where euSalesListReportingLine.DeclarationMonth_FR == euSalesListReportingLineMonths.DeclarationMonth_FR
                    && euSalesListReportingLine.euSalesListReportingGroup == originalReportingGroup.RecId;
        }

        originalReportingGroup.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies runtime filters on the query for data selection.
    /// </summary>
    /// <remarks>
    /// For France, only lines with non-zero service amounts are selected.
    /// </remarks>
    protected void prepareQuery()
    {
        super();

        queryRun.query().dataSourceTable(tableNum(EUSalesList)).
            addRange(fieldNum(EUSalesList, ServiceAmountMST)).value(SysQuery::valueNot(0));

        queryRun.query().dataSourceTable(tableNum(EUSalesList)).addOrderByField(fieldNum(EUSalesList, TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item amounts to zero before the parent method is called to commit the record.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <remarks>
    /// For France, only services are reported via EU sales list and not item (EU or triangular) sales.
    /// </remarks>
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        _euSalesListReportingLine.ItemAmountMST       = 0;
        _euSalesListReportingLine.TriangularAmountMST = 0;

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEUSalesListReportingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the grouped EU sales list reporting lines that are specific to France.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Only amounts for services are reported for France. Lines with zero services amounts should be
    /// skipped even if the item or triangular amount is nonzero.
    /// </remarks>
    protected boolean validateEUSalesListReportingLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        boolean isValid;

        isValid = super(_euSalesListReportingLine);

        isValid = isValid && (_euSalesListReportingLine.ServiceAmountMST != 0);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>