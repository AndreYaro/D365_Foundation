<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC2_MoveHist</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC2_MoveHist extends RAssetReport_OC2_Base
{
    protected RAssetMoveHist rAssetMoveHist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();

        this.documentDate(rAssetMoveHist.AttachDocumentDate ? rAssetMoveHist.AttachDocumentDate : rAssetMoveHist.ChangeDate);
        this.documentNumber(rAssetMoveHist.AttachDocumentNumber);

        assetStandardField.visible(false);
        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employee</Name>
				<Source><![CDATA[
    protected void employee(TransDate _tekdate)
    {
        newEmployee = EmployeeTable_RU::findByEmployeeId(rAssetMoveHist.NewEmployee);
        oldEmployee = EmployeeTable_RU::findByEmployeeId(RAssetMoveHist::findLastOperation(rAssetMoveHist.AccountNum,
            rAssetMoveHist.MoveType,
            NoYes::No,
            rAssetMoveHist.ChangeDate - 1).NewEmployee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, assetStandardField.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        this.employee(this.transDate());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (_args.dataset() != tableNum(RAssetMoveHist))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetMoveHist = _args.record();
        rAssetTable = RAssetTable::find(rAssetMoveHist.AccountNum);

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLocation</Name>
				<Source><![CDATA[
    protected RAssetLocationName newLocation()
    {
        return RAssetLocation::find(rAssetMoveHist.NewLocation).Name
            ? RAssetLocation::find(rAssetMoveHist.NewLocation).Name
            : rAssetMoveHist.NewLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldLocation</Name>
				<Source><![CDATA[
    protected RAssetLocationName oldLocation()
    {
        RAssetMoveHist moveHistPrev = RAssetMoveHist::findLastOperation(rAssetMoveHist.AccountNum,
            rAssetMoveHist.MoveType,
            NoYes::No,
            rAssetMoveHist.ChangeDate - 1);

        return RAssetLocation::find(moveHistPrev.NewLocation).Name
            ? RAssetLocation::find(moveHistPrev.NewLocation).Name
            : moveHistPrev.NewLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // This report should be linked with given asset movement history item
    public Common relatedRecord()
    {
        return rAssetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        super();

        this.insertValueIntoDoc('A22', 1);
        this.insertValueIntoDoc('K22', rAssetTable.Name);
        if (this.dateToBusinessAccounting())
        {
            this.insertValueIntoDoc('BH22', date2str(this.dateToBusinessAccounting(),123,2,2,2,2,4,DateFlags::None));
        }
        this.insertValueIntoDoc('CC22', rAssetTable.AccountNum);
        this.insertValueIntoDoc('CX22', 1);
        this.insertValueIntoDoc('DN22', this.netBookValue(this.transDate()));
        this.insertValueIntoDoc('EK22', this.netBookValue(this.transDate()));
        this.insertValueIntoDoc(ConstSum, this.netBookValue(this.transDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return rAssetMoveHist.ChangeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetMoveHist = RAssetMoveHist::findRecID(rAssetMoveHist.RecId, true);
        rAssetMoveHist.AttachDocumentDate = documentDate;
        rAssetMoveHist.AttachDocumentNumber = documentNumber;
        rAssetMoveHist.doUpdate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>