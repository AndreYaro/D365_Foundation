<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQConsistencyCheck</c> class is responsible for identifying 
/// and fixing corrupted <c>PurchReqLine</c> records that are referencing non-existing <c>PurchRFQCaseTable</c> records.
/// </summary>
public class PurchRFQConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(ProcEssentials);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        CheckFix checkFix = this.checkFix();

        setPrefix(strFmt("@SYS26373", tableStr(PurchReqLine)));

        try
        {
            PurchReqLine purchReqLine;
            PurchRFQCaseTable purchRFQCaseTable;

            while select purchReqLine
                where purchReqLine.PurchRFQCaseId
                notexists join purchRFQCaseTable
                    where purchRFQCaseTable.RFQCaseId == purchReqLine.PurchRFQCaseId
                        && purchRFQCaseTable.DataAreaId == purchReqLine.PurchRFQCaseIdDataArea
            {
                if (checkFix == CheckFix::Fix)
                {
                    ttsBegin;

                    purchreqline.selectForUpdate(true);
                    purchreqline.PurchRFQCaseId = '';
                    purchreqline.PurchRFQCaseIdDataArea = '';
                    purchreqline.doUpdate();

                    ttsCommit;

                    warning(strFmt("@SCM:PurchRFQConsistencyCheckRelationToPurchaseRequisitionIsUpdated", purchreqline.purchReqId()));

                    this.updateCorrected();
                }
                else
                {
                    warning(strFmt("@SCM:PurchRFQConsistencyCheckRelationToPurchaseRequisitionMustBeUpdated", purchreqline.purchReqId()));
                }
            }

            // While one might think that the updateNotCorrected method updates the number of not corrected records
            // it actually populates the number of found errors based on the number of warnings in the infolog.
            this.updateNotCorrected();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(SysConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the consistency check.
    /// </summary>
    /// <returns>The description of the consistency check.</returns>
    public static ClassDescription description()
    {
        return "@SYS114136";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the help text of the consistency check.
    /// </summary>
    /// <returns>The help text of the consistency check.</returns>
    public static HelpTxt helpText()
    {
        return "@SCM:PurchRFQConsistencyCheckHelpText";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>