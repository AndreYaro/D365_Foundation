<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportComponentHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportComponentHandler extends PCImportNodeHandlerWithAttributes
{
    PCClass                 component;
    PCClass                 currentComponentBeingUpdated;

    Map                     deletedSubComponentsUsedInAttributePaths;
    Map                     deletedAttributesUsedInAttributePaths;
    Map                     componentAttributes;

    EcoResCategoryName      name;

    boolean                 attributePathsUpdated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the flag marking that the attribute paths were updated.
    /// </summary>
    protected void clearState()
    {
        super();

        attributePathsUpdated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>component</Name>
				<Source><![CDATA[
    public RefRecId component()
    {
        return this.recordRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the cache of the imported attributes for either storing new ones or searching for already stored.
    /// </summary>
    /// <returns>
    /// A map from string attribute names to int64 RecIds.
    /// </returns>
    public Map componentAttributes()
    {
        return componentAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentComponentBeingUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PCClass</c> record representing the old version of the component.
    /// </summary>
    /// <returns>
    /// The previously found record.
    /// </returns>
    public PCClass currentComponentBeingUpdated()
    {
        return currentComponentBeingUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the attribute cache and the temporary data structures, imports the component,
    /// updates the references and, if needed, updates the attribute paths. Attribute paths are
    /// considered being ready for update if the type of the next <c>XmlNode</c> suggests that no
    /// updates to the attributes or subcomponents will follow.
    /// </summary>
    protected void importData()
    {
        deletedSubComponentsUsedInAttributePaths    = new Map(Types::String, Types::Int64);
        deletedAttributesUsedInAttributePaths       = new Map(Types::String, Types::Int64);
        componentAttributes                         = new Map(Types::String, Types::Int64);
        name                                        = this.getFieldByName(fieldStr(PCClass, Name));

        this.prepareForComponentImport();

        component = PCModelingLibrary::createComponent(name, '');
        component.selectForUpdate(true);

        this.copyIntField(fieldStr(PCClass, ReuseEnabled));

        component.update();

        this.updateComponentReferences();

        this.updateAttributePaths(this.node().childNodes().nextNode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected void postProcess()
    {
        PCImportXmlDocumentHandler root = this.root();

        root.importedComponents().insert(component.Name, component.RecId);

        if (currentComponentBeingUpdated.RecId != 0)
        {
            currentComponentBeingUpdated.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForComponentImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for import of a component
    /// </summary>
    /// <remarks>
    /// The maps are from names to record IDs.
    /// </remarks>
    protected void prepareForComponentImport()
    {
        // find any existing component with the same name
        select forupdate firstonly currentComponentBeingUpdated
            where currentComponentBeingUpdated.Name                == name
            &&    currentComponentBeingUpdated.CategoryHierarchy   == PCModelingLibrary::findOrCreateCategoryHierarchy().RecId;

        PCAttributePathFacade::getSubComponentsUsedInAttributePaths(currentComponentBeingUpdated.RecId, deletedSubComponentsUsedInAttributePaths);
        PCAttributePathFacade::getAttributesUsedInAttributePaths(currentComponentBeingUpdated.RecId, deletedAttributesUsedInAttributePaths);

        if (currentComponentBeingUpdated.RecId != 0)
        {
            currentComponentBeingUpdated.Name = #tempImportPrefix + int642str(currentComponentBeingUpdated.RecId);
            currentComponentBeingUpdated.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return component;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateAttrPathsBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the update of the attribute paths must happen exactly before the specified XML node.
    /// </summary>
    /// <param name="_node">
    /// The specified node. Should be the first child in case of the <c>PCComponentHandler</c> or the next sibling in case of its children.
    /// </param>
    /// <returns>
    /// True if there is not children or next sibling, or if the type of next node suggests that it should be processed before the update;
    /// false otherwise.
    /// </returns>
    protected boolean shouldUpdateAttrPathsBefore(XmlNode _node)
    {
        if (null == _node)
        {
            return true;
        }

        switch (_node.name())
        {
            case tableStr(EcoResCategoryTranslation):
            case tableStr(EcoResAttribute):
            case tableStr(PCSubComponent):
                return false;
            default:
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributePaths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates attribute paths to reference new sub-component records and category attribute records after import of a component if needed.
    /// </summary>
    /// <param name="_nextNode">
    /// The next XML node to be processed, defined as the first child in case of the component handler or the next sibling in case of one of the children.
    /// </param>
    public void updateAttributePaths(XmlNode _nextNode)
    {
        RefRecId newCategoryAttributeRecId;

        if (this.shouldUpdateAttrPathsBefore(_nextNode))
        {
            if (!attributePathsUpdated)
            {
                // Update all references to deleted sub-components
                var me = deletedSubComponentsUsedInAttributePaths.getEnumerator();
                while (me.moveNext())
                {
                    PCAttributePathFacade::updateReferencesToSubComponent(
                        me.currentValue(),
                        PCSubComponent::findByNameAndParent(me.currentKey(), component.RecId).RecId);
                }

                // Update all references to deleted attributes.
                me = deletedAttributesUsedInAttributePaths.getEnumerator();
                while (me.moveNext())
                {
                    if (componentAttributes.exists(me.currentKey()))
                    {
                        newCategoryAttributeRecId = componentAttributes.lookup(me.currentKey());
                    }
                    else
                    {
                        newCategoryAttributeRecId = 0;
                    }
                    PCAttributePathFacade::updateReferencesToCategoryAttribute(
                        me.currentValue(),
                        newCategoryAttributeRecId);
                }

                attributePathsUpdated = true;
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComponentReferences</Name>
				<Source><![CDATA[
    protected void updateComponentReferences()
    {
        // tables where references have to be updated on delete
        PCComponentInstanceRootComponent    instanceRootComponent;
        PCComponentControlRootComponent     componentControlRootComponent;
        PCProductConfigurationModel         productConfigurationModel;
        PCSubComponent                      subComponentChild;

        if (currentComponentBeingUpdated.RecId != 0)
        {
            update_recordset instanceRootComponent
                setting RootComponentClass = component.RecId
                where instanceRootComponent.RootComponentClass == currentComponentBeingUpdated.RecId;

            update_recordset componentControlRootComponent
                setting RootComponent = component.RecId
                where componentControlRootComponent.RootComponent == currentComponentBeingUpdated.RecId;

            update_recordset productConfigurationModel
                setting RootComponentClass = component.RecId
                where productConfigurationModel.RootComponentClass == currentComponentBeingUpdated.RecId;

            subComponentChild.skipDeleteMethod(true);

            update_recordset subComponentChild
                setting ChildComponentClass = component.RecId
                where subComponentChild.ChildComponentClass == currentComponentBeingUpdated.RecId;

            this.copyExistingTemplateComponentChildrenFromUnselectedCompanies();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExistingTemplateComponentChildrenFromUnselectedCompanies</Name>
				<Source><![CDATA[
    private void copyExistingTemplateComponentChildrenFromUnselectedCompanies()
    {
        PCTemplateComponent templateComponent;
        PCImportXmlDocumentHandler root = this.root();

        // Delete PCTemplateComponent in old component for selected legal entities
        // since they will be recreated during the import
        var se = root.selectedLegalEntities().getEnumerator();
        while (se.moveNext())
        {
            delete_from templateComponent
                where templateComponent.ComponentClass == currentComponentBeingUpdated.RecId
                && templateComponent.LegalEntity == se.current();
        }

        // Move the remaining ones (from unselected legal entities) to the new component
        update_recordset templateComponent
            setting ComponentClass = component.RecId
            where templateComponent.ComponentClass == currentComponentBeingUpdated.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportComponentHandler construct()
    {
        return new PCImportComponentHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>