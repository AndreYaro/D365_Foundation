<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementPaymentJournalGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankStatementPaymentJournalGenerator
{
    private BankPaymentType bankPaymentType;
    private BankStatementLinePaymentInformation paymentInfo;
    private LedgerJournalEngine ledgerJournalEngine;
    private LedgerJournalTrans ledgerJournalTrans;

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generatePaymentForStmtLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates payment journals for a given bank statement lines list.
    /// </summary>
    /// <param name = "_bankAccountTable">The BankAccountTable.</param>
    /// <param name = "_bankStmtISOReportEntryRecIdList">The statement lines RecId list.</param>
    /// <param name = "_bankPaymentType">The payment type.</param>
    /// <param name = "_paymentInfo">The payment information.</param>
    internal static void generatePaymentForStmtLineList(
        BankAccountTable _bankAccountTable,
        List _bankStmtISOReportEntryRecIdList,
        BankPaymentType _bankPaymentType,
        BankStatementLinePaymentInformation _paymentInfo)
    {
        BankStatementPaymentJournalGenerator generator = BankStatementPaymentJournalGenerator::constructFromPaymentInfo(_bankPaymentType, _paymentInfo);
        TransDate inputTransDate = _paymentInfo.TransDate;
        ListEnumerator statementLineEnumerator = _bankStmtISOReportEntryRecIdList.getEnumerator();
        while (statementLineEnumerator.moveNext())
        {
            BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineEnumerator.current());
            generator.createPostPaymentJournalForStmtLine(_bankAccountTable, inputTransDate, statementLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentForStmtLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates payment journal for a given bank statement line.
    /// </summary>
    /// <param name = "_bankAccountTable">The BankAccountTable.</param>
    /// <param name = "_statementLine">The statement lines.</param>
    /// <param name = "_bankPaymentType">The payment type.</param>
    /// <param name = "_paymentInfo">The payment information.</param>
    internal static LedgerJournalTrans generatePaymentForStmtLine(
        BankAccountTable _bankAccountTable,
        BankStmtISOReportEntry _statementLine,
        BankPaymentType _bankPaymentType,
        BankStatementLinePaymentInformation _paymentInfo)
    {
        BankStatementPaymentJournalGenerator generator = BankStatementPaymentJournalGenerator::constructFromPaymentInfo(_bankPaymentType, _paymentInfo);
        generator.createPostPaymentJournalForStmtLine(_bankAccountTable, _paymentInfo.TransDate, _statementLine);
        return generator.ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPaymentInfo</Name>
				<Source><![CDATA[
    private static BankStatementPaymentJournalGenerator constructFromPaymentInfo(BankPaymentType _bankPaymentType, BankStatementLinePaymentInformation _paymentInfo)
    {
        BankStatementPaymentJournalGenerator generator = new BankStatementPaymentJournalGenerator();
        generator.bankPaymentType = _bankPaymentType;
        generator.paymentInfo =  _paymentInfo;

        switch (_bankPaymentType)
        {
            case BankPaymentType::CustPayment:
                generator.ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::CustPayment);
                break;

            case BankPaymentType::VendPayment:
                generator.ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Payment);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostPaymentJournalForStmtLine</Name>
				<Source><![CDATA[
    private void createPostPaymentJournalForStmtLine(
        BankAccountTable _bankAccountTable,
        TransDate _inputTransDate,
        BankStmtISOReportEntry _statementLine)
    {
        #OCCRetryCount
        LedgerJournalTable ledgerJournalTable;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadlockException;
        System.Exception systemException;

        BankStatementGeneratePaymentLogger logger = new BankStatementGeneratePaymentLogger(bankPaymentType);
        try
        {
            ttsbegin;

            TransDate newTransDate = _inputTransDate != dateNull() ? _inputTransDate : _statementLine.getBookingDate();

            if (!_statementLine.allowGeneratePaymentJournal())
            {
                throw error("@CashManagement:BankStatementGeneratePaymentInvalidStatementLine");
            }
            else
            {
                _statementLine.selectForUpdate(true);
                _statementLine.updateStatementLinePayment(bankPaymentType);
            }

            ledgerJournalTable = this.createPaymentJournal(_bankAccountTable);
            ledgerJournalEngine.ledgerJournalTable(ledgerJournalTable);
            ledgerJournalEngine.newJournalActive(ledgerJournalTable);

            RecId ledgerJournalTransRecId = this.createPaymentLine(_statementLine, _bankAccountTable, ledgerJournalTable.JournalNum, newTransDate);
            BankStatementLinePaymentInformation::insertFromStatementLinePayment(paymentInfo, _statementLine.RecId, ledgerJournalTable.JournalNum, ledgerJournalTransRecId, newTransDate);

            if (paymentInfo.Posted)
            {
                BankStatementPaymentJournalGenerator::postPaymentJournal(ledgerJournalTable);
            }

            this.displayInfo(paymentInfo.Posted, ledgerJournalTable.JournalNum);

            ttscommit;
        }
        catch (deadlockException)
        {
            if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            else
            {
                logger.logException(deadlockException);
                throw;
            }
        }
        catch (updateConflictException)
        {
            if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            else
            {
                logger.logException(updateConflictException);
                throw;
            }
        }
        catch (systemException)
        {
            logger.logException(systemException);
            throw;
        }
        finally
        {
            logger.logPosted(paymentInfo.Posted);
            logger.logJournalRecId(ledgerJournalTable.RecId);
            logger.finishActivity();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentJournal</Name>
				<Source><![CDATA[
    private LedgerJournalTable createPaymentJournal(BankAccountTable _bankAccountTable)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalNameId paymentJournalName = this.getPaymentJournalName(_bankAccountTable);
        ledgerJournalTable.JournalName = paymentJournalName;
        ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        ledgerJournalTable.initFromLedgerJournalName();

        ledgerJournalTable.CurrencyCode = '';
        ledgerJournalTable.ExchRate = 0;
        ledgerJournalTable.ExchrateSecondary = 0;
        ledgerJournalTable.ReportingCurrencyExchRate = 0;
        ledgerJournalTable.ReportingCurrencyExchRateSecondary = 0;
        ledgerJournalTable.FixedExchRate = NoYes::No;
        ledgerJournalTable.ReportingCurrencyFixedExchRate = NoYes::No;

        ledgerJournalTable.insert();
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentLine</Name>
				<Source><![CDATA[
    private RecId createPaymentLine(BankStmtISOReportEntry _statementLine, BankAccountTable _bankAccountTable, LedgerJournalId _journalNum, TransDate _transDate)
    {
        ledgerJournalEngine.preCreate(ledgerJournalTrans);
        ledgerJournalTrans.clear();
        ledgerJournalEngine.initValue(ledgerJournalTrans);

        if (bankPaymentType == BankPaymentType::CustPayment)
        {
            CustTable custTable = CustTable::find(paymentInfo.CustAccount);
            ledgerJournalTrans.LedgerDimension = this.findLedgerDimensionByAccount(custTable.AccountNum, LedgerJournalACType::Cust, ModuleInventCustVend::Cust);
            ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfile;
            ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
        }
        else
        {
            VendTable vendTable = VendTable::find(paymentInfo.VendAccount);
            ledgerJournalTrans.LedgerDimension = this.findLedgerDimensionByAccount(vendTable.AccountNum, LedgerJournalACType::Vend, ModuleInventCustVend::Vend);
            ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfile;
            ledgerJournalTrans.DefaultDimension = vendTable.DefaultDimension;
        }

        ledgerJournalTrans.TransDate = _transDate;
        ledgerJournalTrans.Due = _transDate;
        ledgerJournalTrans.BankTransType = paymentInfo.BankTransType;
        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Recieved;
        ledgerJournalTrans.PaymReference = _statementLine.ReferenceNumber;
        ledgerJournalTrans.PaymMode = paymentInfo.PaymMode;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
        ledgerJournalTrans.OffsetLedgerDimension = this.findLedgerDimensionByAccount(_bankAccountTable.AccountID, LedgerJournalACType::Bank, ModuleInventCustVend::Invent);
        ledgerJournalTrans.OffsetDefaultDimension = _bankAccountTable.DefaultDimension;
        ledgerJournalTrans.Txt = paymentInfo.Txt;

        // FinTag
        if (isFinTagConfigurationSetForCurrent && BankStmtGeneratePaymentFinTagFlight::instance().isEnabled())
        {
            ledgerJournalTrans.FinTag = paymentInfo.FinTag;
            ledgerJournalTrans.OffsetFinTag = paymentInfo.FinTagOffset;
        }

        // Financial Dimension
        if (BankStmtGeneratePaymentFinDimensionFlight::instance().isEnabled())
        {
            if (paymentInfo.DefaultDimension)
            {
                ledgerJournalTrans.DefaultDimension = paymentInfo.DefaultDimension;
            }

            if (paymentInfo.DefaultDimensionOffset)
            {
                ledgerJournalTrans.OffsetDefaultDimension = paymentInfo.DefaultDimensionOffset;
            }
        }

        this.setPaymentLineAmount(ledgerJournalTrans, _statementLine.AmountCreditDebitIndicator, _statementLine.Amount);
        this.setPaymentCurrencyExchRate(ledgerJournalTrans, _bankAccountTable.CurrencyCode, _transDate);
        ledgerJournalTrans.insert();
        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPaymentJournal</Name>
				<Source><![CDATA[
    internal static void postPaymentJournal(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(_ledgerJournalTable, NoYes::Yes, NoYes::No);
        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentCurrencyExchRate</Name>
				<Source><![CDATA[
    private void setPaymentCurrencyExchRate(LedgerJournalTrans _ledgerJournalTrans, CurrencyCode _currencyCode, TransDate _transDate)
    {
        _ledgerJournalTrans.CurrencyCode = _currencyCode;
        _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_currencyCode, _transDate);
        _ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(_currencyCode, _transDate);

        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation= ExchangeRateCalculation::newExchangeDate(
                Ledger::reportingCurrencyExchangeRateType(),
                _currencyCode,
                Ledger::reportingCurrency(),
                _transDate);
            _ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateCalculation.getExchangeRate1();
            _ledgerJournalTrans.ReportingCurrencyExchRateSecondary = exchangeRateCalculation.getExchangeRate2();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInfo</Name>
				<Source><![CDATA[
    private void displayInfo(NoYes _isPost, LedgerJournalNameId _journalNum)
    {
        str successLabel = _isPost ? "@CashManagement:BankStatementGeneratePostCustVendPaymentJournalSuccessInfo" : "@CashManagement:BankStatementGenerateCustVendPaymentJournalSuccessInfo";
        str journalName = bankPaymentType == BankPaymentType::CustPayment ? "@CashManagement:BankStatementGenerateCustPaymentJournal" : "@CashManagement:BankStatementGenerateVendPaymentJournal";
        info(strFmt(successLabel, journalName, _journalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerDimensionByAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount findLedgerDimensionByAccount(str _account, LedgerJournalACType _accountType, ModuleInventCustVend _module)
    {
        LedgerDimensionAccount ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumberEnumModule(_account, _accountType, enumName2Id(enumStr(LedgerJournalACType)), _module);
        return DimensionAttributeValueCombination::find(ledgerDimension).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentLineAmount</Name>
				<Source><![CDATA[
    private void setPaymentLineAmount(LedgerJournalTrans _ledgerJournalTrans, DebitCredit _debitCredit, BankStmtISODecimal _statementAmount)
    {
        if (_debitCredit == DebitCredit::Credit)
        {
            _ledgerJournalTrans.AmountCurDebit = _statementAmount;
        }
        else
        {
            _ledgerJournalTrans.AmountCurCredit = _statementAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentJournalName</Name>
				<Source><![CDATA[
    private LedgerJournalNameId getPaymentJournalName(BankAccountTable _bankAccountTable)
    {
        LedgerJournalNameId paymentJournalName;
        switch (bankPaymentType)
        {
            case BankPaymentType::CustPayment:
                paymentJournalName = _bankAccountTable.CustPaymentJournalName;
                break;
            case BankPaymentType::VendPayment:
                paymentJournalName = _bankAccountTable.VendPaymentJournalName;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.validatePaymentJournalName(paymentJournalName);
        return paymentJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentJournalName</Name>
				<Source><![CDATA[
    private void validatePaymentJournalName(LedgerJournalNameId _journalName)
    {
        if (!_journalName)
        {
            throw error("@CashManagement:BankStatementGeneratePaymentJournalErrorMissJournalNum");
        }
        else
        {
            LedgerJournalName journalName = LedgerJournalName::find(_journalName);
            if (journalName.BankTransSummarizationEnabled == NoYes::Yes && journalName.BankTransSummarizationCriteria != BankTransSummarizationCriteria::NoSummarization)
            {
                throw error("@CashManagement:BankStatementGenerateEnableSummarizationError");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>