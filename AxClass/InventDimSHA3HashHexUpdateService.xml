<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimSHA3HashHexUpdateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
public class InventDimSHA3HashHexUpdateService 
{     
    private System.Diagnostics.Stopwatch stopwatch;
    private int64 maximumExecutionTimeInMilliseconds;
    private real maximumExecutionTimeInHours;
    private boolean exitProcess;

    private InventInstrumentationLogger logger;  

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(InventDimSHA3HashHexUpdateContract _dataContract)
    {
        #OCCRetryCount
        #TimeConstants

        if (!isConfigurationkeyEnabled(configurationKeyNum(LedgerBasic)))
        {
            return;
        }

        this.checkSystem();

        if (_dataContract)
        {
            maximumExecutionTimeInHours = _dataContract.parmMaximumExecutionTimeInHours();
        }
        else
        {
            maximumExecutionTimeInHours = 0;
        }

        maximumExecutionTimeInMilliseconds = any2Int64(maximumExecutionTimeInHours * #MillisecondsPerHour);
        logger = InventInstrumentationLogger::createLogger(classStr(InventDimSHA3HashHexUpdateService));

        this.checkAndFixInconsistentData();

        if (maximumExecutionTimeInMilliseconds > 0)
        {
            stopwatch = System.Diagnostics.Stopwatch::StartNew();
        }
        
        exitProcess = false;
        
        DataArea dataArea;
        while select Id from dataArea
            where !dataArea.isVirtual
        {
            changecompany(dataArea.Id)
            {
                if (!InventDimSHAHash3UpgradeCompleted::hasDataUpgradeCompleted())
                {
                    try
                    {
                        using (var activityContext = logger.inventDimSHA3HashHexUpdateService().logMeasure(funcName(), dataArea.Id))
                        {
                            this.updateSHA3HashHexInInventDim();
                            if (exitProcess)
                            {
                                return;
                            }
                        }
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Deadlock;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    catch (Exception::TransientSqlConnectionError)
                    {
                        if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                        {
                            retry;
                        }
                        else
                        {
                            throw;
                        }
                    }
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSystem</Name>
				<Source><![CDATA[
    private void checkSystem()
    {
        Batch batch = BatchHeader::getCurrentBatchTask();
        if (batch && InventDimSHA3HashHexUpdateService::existsAnotherInventDimSHA3HashHexUpdateJobRunning(batch.RecId))
        {
            throw error("@SCM:AnotherInventDimSHA3HashHexUpdateNotFinished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnotherInventDimSHA3HashHexUpdateJobRunning</Name>
				<Source><![CDATA[
    private static boolean existsAnotherInventDimSHA3HashHexUpdateJobRunning(RecId _batchRecId = 0)
    {
        Batch    batch;
        BatchJob batchJob;

        select firstOnly RecId from batchJob
            exists join batch
            where batch.BatchJobId   == batchJob.RecId
               && (batch.Status      == BatchStatus::Executing || batch.Status == BatchStatus::Waiting)
               && (!_batchRecId      || batch.RecId != _batchRecId)
               && batch.ClassNumber == classNum(InventDimSHA3HashHexUpdateController);

        return batchJob.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSHA3HashHexInInventDim</Name>
				<Source><![CDATA[
    public void updateSHA3HashHexInInventDim()
    {
        InventDimSHA3HashHexCodeUpdateTask inventDimSHA3HashHexCodeUpdateTask = new InventDimSHA3HashHexCodeUpdateTask();
        if (InventDim::isInventDimUpgradeHash3CodePendingUpgrade())
        {
            inventDimSHA3HashHexCodeUpdateTask.updateSHA3HashHexFromInventDimUpgradeHash3CodeToInventDim();
        }        
        else
        {
            InventDimUpgradeHash3Code inventDimUpgradeHash3Code;
            delete_from inventDimUpgradeHash3Code;
        }

        if (InventDim::isInventDimSHA3HashUpgradeFinished())
        {
            InventDimSHAHash3UpgradeCompleted::markDataUpgradeComplete();
            return;
        }
          
        while (!this.isMaxExecutionTimeReached())
        {
            inventDimSHA3HashHexCodeUpdateTask.updateSHA3HashHexInInventDim();
               
            if (InventDim::isInventDimSHA3HashUpgradeFinished())
            {
                InventDimSHAHash3UpgradeCompleted::markDataUpgradeComplete();
                break;
            }
        }
   
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxExecutionTimeReached</Name>
				<Source><![CDATA[
    private boolean isMaxExecutionTimeReached()
    {
        if (maximumExecutionTimeInMilliseconds > 0 && maximumExecutionTimeInMilliseconds < stopwatch.ElapsedMilliseconds)
        {
            info(strFmt("@SCM:OnlyPartialSHA3HashHexUpdatedAsTheAllocatedMaximumExecutionTimeOfHoursIsReached", maximumExecutionTimeInHours));
            info("@SCM:GenerateSHA3HashStringForInventDimAutoScheduled");
           
            exitProcess = true;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndFixInconsistentData</Name>
				<Source><![CDATA[
    private void checkAndFixInconsistentData()
    {
        DataArea dataArea;

        var activity = logger.inventDimSHA3HashHexUpdateService();
        while select Id from dataArea
            where !dataArea.isVirtual
        {
            changecompany(dataArea.Id)
            {
                if (InventDimSHAHash3UpgradeCompleted::hasDataUpgradeCompleted() && !InventDim::isInventDimSHA3HashUpgradeFinished())
                {
                    using (var activityContext = activity.logMeasure(funcName(), dataArea.Id))
                    {
                        InventDimSHAHash3UpgradeCompleted::markDataUpgradeIncomplete(); 
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>