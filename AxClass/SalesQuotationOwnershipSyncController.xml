<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationOwnershipSyncController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SalesQuotationOwnershipSyncController extends SysOperationServiceController
{
    private SalesQuotationOwnershipSyncDataContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeServiceParameter</Name>
				<Source><![CDATA[
    protected Object initializeServiceParameter(DictMethod dictMethod, int parameterIndex)
    {
        if (contract)
        {
            return contract;
        }

        return super(dictMethod, parameterIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return strFmt("@SalesAndMarketing:SalesQuotationOwnershipSyncCaption", contract ? contract.parmQuotationId() : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSyncOwnership</Name>
				<Source><![CDATA[
    internal void scheduleSyncOwnership(SalesQuotationId _quotationId)
    {
        contract = new SalesQuotationOwnershipSyncDataContract();
        contract.parmQuotationId(_quotationId);

        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncOwnership</Name>
				<Source><![CDATA[
    internal void syncOwnership(SalesQuotationOwnershipSyncDataContract _contract)
    {
        using (var context = SalesInstrumentationLogger::createLogger(classStr(SalesQuotationOwnershipSyncController)).salesQuotationActivities().quotationOwnershipSync())
        {
            SalesQuotationHeaderD365SalesEntity quotationEntity;

            select firstonly * from quotationEntity
                where quotationEntity.SalesQuotationNumber == _contract.parmQuotationId();

            context.addCustomProperty(dataEntityViewStr(SalesQuotationHeaderD365SalesEntity), int642Str(quotationEntity.RecId));

            if (quotationEntity)
            {
                List records = new List(Types::Record);
                records.addEnd(quotationEntity);

                DualWriteSyncHelper::forceSyncRecordsToCDS(records);
            }
            else
            {
                throw error(strFmt("@SalesAndMarketing:SalesQuotationOwnershipSyncRecordNotFound", _contract.parmQuotationId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SalesQuotationOwnershipSyncController construct()
    {
        SalesQuotationOwnershipSyncController controller = new SalesQuotationOwnershipSyncController();

        controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        controller.parmClassName(classStr(SalesQuotationOwnershipSyncController));
        controller.parmMethodName(methodStr(SalesQuotationOwnershipSyncController, syncOwnership));

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>