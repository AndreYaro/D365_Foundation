<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPaySheetCalcReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPaySheetCalcReport extends XMLExcelReport_RU implements BatchRetryable
{
    ReportPeriod_RU rPayPeriod;
    DialogField     dialogPayPeriod;

    RPaySheetTable rPaySheetTable;
    RPaySheetTable rPaySheetTableFromArgs;

    QueryRun        queryRun;

    Counter         pageNumber;
    date            reportDate;
    utcdatetime     reportTime;

    RPayAmount      addSum, deductionSum, sumOnHand,
                    emplDebt, companyDebt;

    RPayAmount      addSumTotal, deductionSumTotal, sumOnHandTotal,
                    emplDebtTotal, companyDebtTotal;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rPayPeriod
    #endmacro

    #define.FileName('RPaySheetCalcReport')

    #define.WidthPage(116)

    #define.StateStart  (1)
    #define.StatePrint  (2)
    #define.StateEnd    (3)

    #define.NewPage("NewPage") //pseudo section used to define new page action
    #define.PageHeader('PageHeader')
    #define.ReportTitle('ReportTitle')
    #define.TableHeader('TableHeader')
    #define.Body('Body')
    #define.Total('Total')

    #define.CompanyName('CompanyName')
    #define.PageNo('PageNo')
    #define.ReportDate('ReportDate')
    #define.ReportTime('ReportTime')
    #define.ReportName('ReportName')

    #define.Title('Title')
    #define.For('For')
    #define.PayPeriod('PayPeriod')

    #define.OrganizationIdColName('OrganizationIdColName')
    #define.AddSumColName('AddSumColName')
    #define.DeductionSumColName('DeductionSumColName')
    #define.SumOnHandColName('SumOnHandColName')
    #define.EmplDebtColName('EmplDebtColName')
    #define.CompanyDebtColName('CompanyDebtColName')

    #define.OrganizationId('OrganizationId')
    #define.AddSum('AddSum')
    #define.DeductionSum('DeductionSum')
    #define.SumOnHand('SumOnHand')
    #define.EmplDebt('EmplDebt')
    #define.CompanyDebt('CompanyDebt')

    #define.TotalName('TotalName')
    #define.AddSumTotal('AddSumTotal')
    #define.DeductionSumTotal('DeductionSumTotal')
    #define.SumOnHandTotal('SumOnHandTotal')
    #define.EmplDebtTotal('EmplDebtTotal')
    #define.CompanyDebtTotal('CompanyDebtTotal')

    int stateCurrent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBody</Name>
				<Source><![CDATA[
    private void calcBody()
    {
        RpayHRMOrganization     rPayHRMOrganization;
        RPayTrans               payTrans;
        RHRMEmplTable           emplTable;
        RPayAmount              addSumEmpl,deductionSumEmpl;
        RPayHistory             rPayHistory1, rPayHistory2;

        while select HrmOrganizationId from rPayHRMOrganization
            where rPayHRMOrganization.HrmOrganizationId == rPaySheetTable.HrmOrganisationId ||
                  (rPaySheetTable.HrmOrganisationId ? false : true)
        {
            while select EmployeeId from emplTable
            exists join StartDate from rPayHistory1
                where  rPayHistory1.StartDate           <= endmth(rPaySheetTable.PayPeriod)  &&
                       (rPayHistory1.OperationType      == RHRMJournalType::Receive          ||
                        rPayHistory1.OperationType      == RHRMJournalType::Transfer)        &&
                       rPayHistory1.Number              == emplTable.EmployeeId              &&
                       rPayHistory1.HrmOrganizationId   == rPayHRMOrganization.HrmOrganizationId
            notexists join StartDate from rPayHistory2
                where rPayHistory2.Number           == rPayHistory1.Number                  &&
                      rPayHistory2.StartDate        >  rPayHistory1.StartDate               &&
                      (rPayHistory2.OperationType   == RHRMJournalType::Receive             ||
                       rPayHistory2.OperationType   == RHRMJournalType::Transfer)           &&
                      rPayHistory2.StartDate        <= endmth(rPaySheetTable.PayPeriod)     &&
                      rPayHistory2.Number           == emplTable.EmployeeId
            {
                addSumEmpl          = 0;
                deductionSumEmpl    = 0;

                while select PayCtype,Amount from payTrans
                    where payTrans.Emplid    == emplTable.EmployeeId &&
                          payTrans.PayPeriod == rPaySheetTable.PayPeriod
                {
                    if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::AddSum)
                    {
                       addSumEmpl       += payTrans.Amount;
                    }
                    else
                    {
                       deductionSumEmpl +=  payTrans.Amount * -1;
                    }
                }

                addSum         += addSumEmpl;
                deductionSum   += deductionSumEmpl;

                if (addSumEmpl - deductionSumEmpl < 0)
                {
                    emplDebt    += deductionSumEmpl - addSumEmpl;
                }
                else
                {
                    companyDebt    += (addSumEmpl - deductionSumEmpl) - roundDown(addSumEmpl - deductionSumEmpl, rPaySheetTable.PaySheetRound);
                    sumOnHand      += roundDown(addSumEmpl - deductionSumEmpl, rPaySheetTable.PaySheetRound);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(14.4)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        boolean dataExists;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #WidthPage);

        this.initData();

        while (queryRun.next())
        {
            if (!dataExists)
            {
                stateCurrent = #StateStart;
                dataExists = true;
            }

            rPaySheetTable = queryRun.get(tableNum(RPaySheetTable));

            this.handleAction(this.defineActionSeq());
        }

        if (dataExists)
        {
            stateCurrent = #StateEnd;
            this.handleAction(this.defineActionSeq());
        }
        else
        {
            document.closeDocument(false);
            throw info("@GLS101555");
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container   con;

        if (stateCurrent == #StateStart)
        {
            pageNumber = 1;
            con = [#PageHeader, #ReportTitle, #TableHeader, #Body];

            stateCurrent = #StatePrint;
        }
        else if (stateCurrent == #StatePrint)
        {
            if (this.mustCreateNewPage())
            {
                pageNumber++;
                con = [#NewPage, #PageHeader, #TableHeader];
            }

            con += [#Body];
        }
        else if (stateCurrent == #StateEnd)
        {
            con = [#Total];
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@SYS2163");
        dialogPayPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU),
            rPayPeriod ? rPayPeriod : RPayParameters::payPeriod());

        if (rPaySheetTableFromArgs)
        {
            dialogPayPeriod.allowEdit(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report body.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.calcBody();

        this.insertValueToSection(#OrganizationId, rPaySheetTable.HrmOrganisationId);
        this.insertValueToSection(#AddSum, addSum);
        this.insertValueToSection(#DeductionSum, deductionSum);
        this.insertValueToSection(#SumOnHand, sumOnHand);
        this.insertValueToSection(#EmplDebt, emplDebt);
        this.insertValueToSection(#CompanyDebt, companyDebt);

        addSumTotal += addSum;
        deductionSumTotal += deductionSum;
        sumOnHandTotal += sumOnHand;
        emplDebtTotal += emplDebt;
        companyDebtTotal += companyDebt;

        addSum = 0;
        deductionSum = 0;
        sumOnHand = 0;
        emplDebt = 0;
        companyDebt = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #PageHeader:
                this.fillPageHeader();
                break;
            case #ReportTitle:
                this.fillReportTitle();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Total:
                this.fillTotal();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report page header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        this.insertValueToSection(#CompanyName, CompanyInfo::find().Name);
        this.insertValueToSection(#PageNo, strFmt("@SYS24160", pageNumber));
        this.insertValueToSection(#ReportDate, reportDate);
        this.insertValueToSection(#ReportTime, reportTime);
        this.insertValueToSection(#ReportName, "@RUP714");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report title.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportTitle()
    {
        this.insertValueToSection(#Title, "@RUP714");
        this.insertValueToSection(#For, "@GLS105864");
        this.insertValueToSection(#PayPeriod, rPayPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report table header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTableHeader()
    {
        this.insertValueToSection(#OrganizationIdColName, "@GLS100681");
        this.insertValueToSection(#AddSumColName, "@RUP395");
        this.insertValueToSection(#DeductionSumColName, "@RUP396");
        this.insertValueToSection(#SumOnHandColName, "@RUP715");
        this.insertValueToSection(#EmplDebtColName, "@RUP716");
        this.insertValueToSection(#CompanyDebtColName, "@RUP643");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report total.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTotal()
    {
        this.insertValueToSection(#TotalName, "@SYS58659");
        this.insertValueToSection(#AddSumTotal, addSumTotal);
        this.insertValueToSection(#DeductionSumTotal, deductionSumTotal);
        this.insertValueToSection(#SumOnHandTotal, sumOnHandTotal);
        this.insertValueToSection(#EmplDebtTotal, emplDebtTotal);
        this.insertValueToSection(#CompanyDebtTotal, companyDebtTotal);

        addSumTotal = 0;
        deductionSumTotal = 0;
        sumOnHandTotal = 0;
        emplDebtTotal = 0;
        companyDebtTotal = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        rPayPeriod = endmth(dialogPayPeriod.value());
        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    private void initData()
    {
        reportDate   = DateTimeUtil::date(DateTimeUtil::utcNow());
        reportTime   = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getClientMachineTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        if (_args && _args.dataset() == tablenum(RPaySheetTable))
        {
            rPaySheetTableFromArgs = _args.record();
            this.rPayPeriod(rPaySheetTableFromArgs.PayPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query = new Query();

        queryBuildDataSource = query.addDataSource(tableNum(RPaySheetTable));

        queryBuildRange = findOrCreateRange_W(queryBuildDataSource, fieldnum(RPaySheetTable, PaySheetType));
        queryBuildRange.value(enum2str(RPaySheetType::Payment));

        query.userUpdate(false);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#PageHeader);
        this.addSection(#ReportTitle);
        this.addSection(#TableHeader);
        this.addSection(#Body);
        this.addSection(#Total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private void modifyQuery()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource = this.queryRun().query().dataSourceTable(tablenum(RPaySheetTable));

        queryBuildRange = findOrCreateRange_W(queryBuildDataSource, fieldnum(RPaySheetTable, PayPeriod));
        queryBuildRange.value(queryValue(rPayPeriod));
        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if new page should be created.
    /// </summary>
    /// <returns>
    /// True if new page must be created.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage()
    {
        real        requiredHeight;

        requiredHeight = conPeek(mapSections.lookup(#Body), #posSectionHeight);
        requiredHeight += conPeek(mapSections.lookup(#Total), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayPeriod</Name>
				<Source><![CDATA[
    private ReportPeriod_RU rPayPeriod(ReportPeriod_RU _rPayPeriod = rPayPeriod)
    {
        rPayPeriod = _rPayPeriod;
        return rPayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPaySheetCalcReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.ColsInTable(6)
    #define.Other(19)
    protected Counter totalCells()
    {
        return SysQuery::countTotal(queryRun) * #ColsInTable + #Other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQR] = packedClass;

                if (SysQuery::isPackedOk(packedQR))
                {
                    queryRun = new QueryRun(packedQR);
                }
                else
                {
                    this.initQueryRun();
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP714";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPaySheetCalcReport rPaySheetCalcReport = new RPaySheetCalcReport();

        rPaySheetCalcReport.initFromArgs(_args);

        if (rPaySheetCalcReport.prompt())
        {
            rPaySheetCalcReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>