<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGlobalTableConstraintCellEditor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class supports editing of table constraint cell values.
/// </summary>
class PcGlobalTableConstraintCellEditor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an enumeration value.
    /// </summary>
    /// <param name="_columnDefinition">
    ///    A column definition.
    /// </param>
    /// <param name="_solverValue">
    ///    A solver value.
    /// </param>
    /// <returns>
    ///    A <c>EcoResValueRecId</c> value.
    /// </returns>
    public RefRecId findEnumValue(PCTableConstraintColumnDefinition _columnDefinition, PCSolverValue _solverValue)
    {
        RefRecId textValueRecId = this.findEnumValueNoThrow(_columnDefinition, _solverValue);

        if (textValueRecId == 0)
        {
            throw Exception::Error;
        }
        return textValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEnumValueNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an enumeration value.
    /// </summary>
    /// <param name="_columnDefinition">
    ///    A column definition.
    /// </param>
    /// <param name="_solverValue">
    ///    A solver value.
    /// </param>
    /// <returns>
    ///    A <c>EcoResValueRecId</c> value.
    /// </returns>
    protected RefRecId findEnumValueNoThrow(PCTableConstraintColumnDefinition _columnDefinition, PCSolverValue _solverValue)
    {
        EcoResEnumerationAttributeTypeValue enumRelation;
        EcoResTextValue                     textValue;
        PCSolverTextValue                   solverValue;

        select firstonly RecId from solverValue
            where solverValue.Value == _solverValue
            join RecId from textValue
                where textValue.RecId == solverValue.TextValue
                join RecId from enumRelation
                where   enumRelation.Value  == textValue.RecId  &&
                        enumRelation.AttributeType == _columnDefinition.AttributeType;

        if (textValue.RecId == 0)
        {
            checkFailed(strFmt("@SYS191258", _solverValue, _columnDefinition.Name));
        }

        return textValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a table constraint cell value.
    /// </summary>
    /// <param name="_columnId">
    /// A column ID.
    /// </param>
    /// <param name="_tempCellValue">
    /// A temporary cell value buffer.
    /// </param>
    /// <returns>
    /// The record ID of the found or created <c>EcoResValue</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// throws an error if any unsupported attribute data type is encountered.
    /// </exception>
    protected RefRecId findOrCreateCellValue(PCTableConstraintColumnDefinitionRecId _columnId, PCGlobalTableConstraintEditTmp _tempCellValue)
    {
        EcoResBooleanValue  booleanValue;
        EcoResIntValue      integerValue;
        RecId               ret;

        PCTableConstraintColumnDefinition columnDefinition = PCTableConstraintColumnDefinition::find(_columnId);

        switch (columnDefinition.getDataType())
        {
            case AttributeDataType::Integer :
                this.validateIntegerValue(_columnId, _tempCellValue.IntValue);
                integerValue.IntValue = _tempCellValue.IntValue;
                integerValue.insert();
                ret = integerValue.RecId;
                break;
            case AttributeDataType::Text :
                ret = this.findEnumValue(columnDefinition, _tempCellValue.TextValue);
                break;
            case AttributeDataType::TrueFalse :
                booleanValue.BooleanValue = _tempCellValue.BooleanValue;
                booleanValue.insert();
                ret = booleanValue.RecId;
                break;
            default:
                ret = this.findOrCreateCellValueDefault(_columnId, _tempCellValue);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCellValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates a table constraint cell value for default value.
    /// </summary>
    /// <param name="_columnId">
    /// A column ID.
    /// </param>
    /// <param name="_tempCellValue">
    /// A temporary cell value buffer.
    /// </param>
    /// <returns>
    ///     The record ID of the found or created <c>EcoResValue</c> record.
    /// </returns>
    [Replaceable]
    protected RefRecId findOrCreateCellValueDefault(PCTableConstraintColumnDefinitionRecId _columnId, PCGlobalTableConstraintEditTmp _tempCellValue)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a table constraint cell value.
    /// </summary>
    /// <param name="_columnId">
    /// A column ID.
    /// </param>
    /// <param name="_rowId">
    /// A row ID.
    /// </param>
    /// <param name="_tempCellValue">
    /// A temporary cell value record buffer.
    /// </param>
    public void updateCell(PCTableConstraintColumnDefinitionRecId _columnId, PCTableConstraintRowRecId _rowId, PCGlobalTableConstraintEditTmp _tempCellValue)
    {
        PCTableConstraintCell tableConstraintCell;

        ttsbegin;
        tableConstraintCell = PCTableConstraintCell::findByColumnAndRow(_columnId, _rowId, true);

        tableConstraintCell.TableConstraintColumnDefinition    = _columnId;
        tableConstraintCell.TableConstraintRow                 = _rowId;
        tableConstraintCell.Value = this.findOrCreateCellValue(_columnId, _tempCellValue);
        tableConstraintCell.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a table constraint cell value.
    /// </summary>
    /// <param name="_columnId">
    /// A column ID.
    /// </param>
    /// <param name="_tempCellValue">
    /// A temporary cell value buffer.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateCellValue(PCTableConstraintColumnDefinitionRecId _columnId, PCGlobalTableConstraintEditTmp _tempCellValue)
    {
        RecId ret = true;
        PCTableConstraintColumnDefinition columnDefinition = PCTableConstraintColumnDefinition::find(_columnId);

        switch (columnDefinition.getDataType())
        {
            case AttributeDataType::Integer :
                ret = this.validateIntegerValueNoThrow(_columnId, _tempCellValue.IntValue);
                break;
            case AttributeDataType::Text :
                ret = this.findEnumValueNoThrow(columnDefinition, _tempCellValue.TextValue) != 0;
                break;
            case AttributeDataType::TrueFalse :
                break;
            default:
                ret = this.validateCellValueDefault(_columnId, _tempCellValue);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCellValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates a table constraint cell for default value.
    /// </summary>
    /// <param name="_columnId">
    /// A column ID.
    /// </param>
    /// <param name="_tempCellValue">
    /// A temporary cell value buffer.
    /// </param>
    /// <returns>
    ///     true if the default value is valid; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean validateCellValueDefault(PCTableConstraintColumnDefinitionRecId _columnId, PCGlobalTableConstraintEditTmp _tempCellValue)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntegerValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given Integer value is in the accepted bounds that are defined by the associated
    /// attribute type.
    /// </summary>
    /// <param name="_columnRecId">
    /// The record ID of the table constraint column.
    /// </param>
    /// <param name="_intValue">
    /// An Integer value.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// No bounds can be found for the associated attribute type.
    /// </exception>
    public void validateIntegerValue(RecId _columnRecId, int _intValue)
    {
        if (!this.validateIntegerValueNoThrow(_columnRecId, _intValue))
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntegerValueNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given Integer value is in the accepted bounds that are defined by the associated
    /// attribute type.
    /// </summary>
    /// <param name="_columnRecId">
    /// The record ID of the table constraint column.
    /// </param>
    /// <param name="_intValue">
    /// An Integer value.
    /// </param>
    /// <returns>
    /// true if the validation passes; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// No bounds can be found for the associated attribute type.
    /// </exception>
    protected boolean validateIntegerValueNoThrow(RecId _columnRecId, int _intValue)
    {
        PCTableConstraintColumnDefinition   columnDefinition;
        EcoResAttributeType                 attributeType;
        EcoResBoundedAttributeTypeValue     attributeTypeIntegerBounds;
        EcoResIntValue                      lowerBound;
        EcoResIntValue                      upperBound;
        EcoResEnumerationAttributeTypeValue attributeTypeEnumerationValue;
        EcoResIntValue                      intSetValue;
        boolean                             ret = true;

        select firstonly RecId, Name from columnDefinition
            where columnDefinition.RecId == _columnRecId
                  join attributeType
            where attributeType.RecId == columnDefinition.AttributeType;

        select firstonly RecId from attributeTypeIntegerBounds
            where attributeTypeIntegerBounds.AttributeType == columnDefinition.AttributeType
                join RecId, IntValue from lowerBound
                    where lowerBound.RecId == attributeTypeIntegerBounds.LowerBound
                join RecId, IntValue from upperBound
                    where upperBound.RecId == attributeTypeIntegerBounds.UpperBound;

        if ( (lowerBound.RecId == 0 || upperBound.RecId == 0) && !attributeType.IsEnumeration )
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (attributeType.IsEnumeration)
        {
            select firstonly RecId from intSetValue
                where intSetValue.IntValue == _intValue
                exists join attributeTypeEnumerationValue
                where   attributeTypeEnumerationValue.Value            == intSetValue.RecId
                &&      attributeTypeEnumerationValue.AttributeType    == attributeType.RecId;

            if (intSetValue.RecId == 0)
            {
                checkFailed(strFmt("@SYS191258", _intValue, columnDefinition.Name));
            }
        }
        else if ( lowerBound.IntValue > _intValue || upperBound.IntValue < _intValue )
        {
            ret = checkFailed(strFmt("@SYS344093", columnDefinition.Name, lowerBound.IntValue, upperBound.IntValue));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGlobalTableConstraintCellEditor construct()
    {
        return new PCGlobalTableConstraintCellEditor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>