<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_FinancialLiteTransCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventUpd_FinancialLiteTransCreator</c> class create inventory transactions without financial impact in final states.
/// Note that this API should be used only if InventUpd_FinancialLiteTransCreator::canUseApiForMovement() method return true.
/// </summary>
internal class InventUpd_FinancialLiteTransCreator extends InventUpdate implements WHSILocationLoadTrackingContext, WMSILocationLoadTrackingContext
{
    private InventQty                                    updQty;
    private DateInvent                                   dateInvent;
    private CurrencyCode                                 currencyCode;                                  

    private InventUpd_FinancialLiteTransCreatorStrategy  strategy;
    private InventUpd_FinancialLiteTransCreatorValidator validator;

    private WMSLocationLoadCreateManager                 wmsLocationLoadCreateManager;
    private WHSLocationLoadChangeTracker                 whsLocationLoadChangeTracker;
    private boolean                                      adjustWMSLocationLoad;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(InventMovement  _inventMovement)
    {
        super(_inventMovement);
        adjustWMSLocationLoad = true;
        updQty = movement.remainPhysical();
        this.initDefault();
        strategy = InventUpd_FinancialLiteTransCreatorStrategy::newFromMovement(_inventMovement);
        validator = InventUpd_FinancialLiteTransCreatorValidator::construct(_inventMovement, dateInvent, updQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefault</Name>
				<Source><![CDATA[
    private void initDefault()
    {
        dateInvent = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        currencyCode = CompanyInfoHelper::standardCurrency();

        this.setParmAllowDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of <c>InventUpd_FinancialLiteTransCreator</c> from <c>InventMovement</c>
    /// </summary>
    /// <param name = "_inventMovement"><c>InventMovement</c> to create </c>InventUpd_FinancialLiteTransCreator<c> instance from.</param>
    /// <returns>New instance of <c>InventUpd_FinancialLiteTransCreator</c> class.</returns>
    internal static InventUpd_FinancialLiteTransCreator newInventMovement(InventMovement _inventMovement)
    {
        return new InventUpd_FinancialLiteTransCreator(_inventMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustWMSLocationLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to adjust the load on a <c>wmsLocation</c> location when a physical transaction occurs.
    /// </summary>
    /// <param name="_adjustWMSLocationLoad">
    /// A Boolean value that determines whether to adjust the load on a <c>wmsLocation</c> location; optional.
    /// </param>
    /// <returns>
    /// true if the load on a <c>wmsLocation</c> location should be adjusted; otherwise, false.
    /// </returns>
    public boolean parmAdjustWMSLocationLoad(boolean _adjustWMSLocationLoad = adjustWMSLocationLoad)
    {
        adjustWMSLocationLoad = _adjustWMSLocationLoad;
        return adjustWMSLocationLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLocationLoadChangeTracker</Name>
				<Source><![CDATA[
    public WHSLocationLoadChangeTracker parmWHSLocationLoadChangeTracker(WHSLocationLoadChangeTracker _whsLocationLoadChangeTracker = whsLocationLoadChangeTracker)
    {
        if (prmisDefault(_whsLocationLoadChangeTracker))
        {
            if (!whsLocationLoadChangeTracker)
            {
                whsLocationLoadChangeTracker = WHSLocationLoadChangeTracker::construct();
            }
        }
        else
        {
            whsLocationLoadChangeTracker = _whsLocationLoadChangeTracker;
        }

        return whsLocationLoadChangeTracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationLoadCreateManager</Name>
				<Source><![CDATA[
    public WMSLocationLoadCreateManager parmWMSLocationLoadCreateManager(WMSLocationLoadCreateManager _wmsLocationLoadCreateManager = wmsLocationLoadCreateManager)
    {
        wmsLocationLoadCreateManager = _wmsLocationLoadCreateManager;

        return wmsLocationLoadCreateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform creation of new financial lite transaction(s) from <c>InventMovement</c>
    /// </summary>
    [Hookable(false)]
    internal void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
            ttsbegin;

            if (updQty != 0)
            {
                if (!validator.performValidations())
                {
                    throw error("@SYS18447");
                }

                if (adjustWMSLocationLoad)
                {
                    wmsLocationLoadCreateManager = WMSLocationLoadCreateManager::construct();
                }

                this.createInventoryTransactions();

                if (adjustWMSLocationLoad)
                {
                    wmsLocationLoadCreateManager.insertRecords();
                }
                
                if (movement.canUpdateInventStatusBlocking())
                {
                    InventBlockingInventStatusSync::newStandardHandlingQuantities(movement, updQty, 0).postSync();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryTransactions</Name>
				<Source><![CDATA[
    private void createInventoryTransactions()
    {
        if (updQty != 0)
        {
            this.createInventTransOriginAndReferences();

            InventTrans inventTrans = movement.initInventTrans();

            this.updateInventTransFields(inventTrans);

            if (updQty > 0)
            {
                this.insertStatusReceiptTransaction(inventTrans);
            }
            else
            {
                this.insertStatusIssueTransaction(inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatusReceiptTransaction</Name>
				<Source><![CDATA[
    private void insertStatusReceiptTransaction(InventTrans _inventTrans)
    {
        InventTransAutoNumberHandler inventTransAutoNumberHandler;

        if (movement.isItemWHSEnabled())
        {
            inventTransAutoNumberHandler = InventTransAutoNumberHandler::newParameters(movement, _inventTrans, _inventTrans.inventDim(), true);
        }

        if (inventTransAutoNumberHandler && inventTransAutoNumberHandler.useAutoNumbering())
        {
            // We need to insert InventTrans here before splitting it, as further in call stack
            // InventSplitTrans.update() method expects that transaction already has RecId.
            _inventTrans.insert();

            ListEnumerator le = inventTransAutoNumberHandler.prepareInventTransForAutoNumberingTrackingDimensions(updQty, 0).getEnumerator();

            while (le.moveNext())
            {
                InventDimId autoNumInvetDimId;
                RecId inventTransRecId;
                [inventTransRecId, autoNumInvetDimId] = le.current();
                InventTrans inventTransAutoNumber = InventTrans::findRecId(inventTransRecId, true);
                inventTransAutoNumber.inventDimId = autoNumInvetDimId;
                this.insertInventTrans(inventTransAutoNumber);
            }
        }
        else
        {
            this.insertInventTrans(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatusIssueTransaction</Name>
				<Source><![CDATA[
    private void insertStatusIssueTransaction(InventTrans _inventTrans)
    {
        this.insertInventTrans(_inventTrans);
        InventUpdate::updateTransDimTransferReceipt(movement, _inventTrans, _inventTrans.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTrans</Name>
				<Source><![CDATA[
    private void insertInventTrans(InventTrans _inventTrans)
    {
        this.raiseOnHandChangingOnPhysicalStatusUpd(_inventTrans);

        boolean isPhysical = true;
        this.writeInventTransAutoDim(_inventTrans, null, isPhysical);

        InventDim inventDim = _inventTrans.inventDim();
        if (!movement.checkDimPhysical(_inventTrans.Qty, inventDim, true, true))
        {
            throw error("@SYS18447");
        }

        this.markTransactionAsClosed(_inventTrans, strategy.getPostingDate(_inventTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransactionAsClosed</Name>
				<Source><![CDATA[
    private void markTransactionAsClosed(InventTrans _inventTrans, date _postingDate)
    {
        _inventTrans.ValueOpen                      = InventTransOpen::No;
        _inventTrans.ValueOpenSecCur_RU             = InventTransOpen::No;
        _inventTrans.DateClosed                     = _postingDate;
        _inventTrans.DateClosedSecCur_RU            = _postingDate;

        _inventTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventTransReceiptStatus</Name>
				<Source><![CDATA[
    private StatusReceipt retrieveInventTransReceiptStatus(InventQty _inventQty)
    {
        return _inventQty > 0
            ? StatusReceipt::Purchased
            : StatusReceipt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventTransIssueStatus</Name>
				<Source><![CDATA[
    private StatusIssue retrieveInventTransIssueStatus(InventQty _inventQty)
    {
        return _inventQty > 0
            ? StatusIssue::None
            : StatusIssue::Sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransFields</Name>
				<Source><![CDATA[
    private void updateInventTransFields(InventTrans _inventTrans)
    {
        StatusReceipt statusReceipt = this.retrieveInventTransReceiptStatus(updQty);
        StatusIssue statusIssue = this.retrieveInventTransIssueStatus(updQty);

        _inventTrans.updateQty(movement.mustAggregateExpectedTransactions(), updQty, 0);
        movement.transIdSum().setInventTransStatus(_inventTrans, statusReceipt, statusIssue);

        _inventTrans.InventDimId = movement.inventDimId();
        if (movement.isItemWHSEnabled())
        {
            WHSParameters::validateLicensePlateTracking(_inventTrans.InventDimId);
            _inventTrans.InventDimId = this.whsAdjustInventDimFromMovementTransaction(_inventTrans.InventDimId);
        }

        _inventTrans.DateInvent = dateInvent;

        InventUpd_FinancialLite::updateInventTransCostFieldsAsNoFinancialImpact(_inventTrans, strategy.getPostingDate(_inventTrans), currencyCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>