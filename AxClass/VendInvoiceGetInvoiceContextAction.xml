<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceGetInvoiceContextAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[DataContract]
[SysCopilotChatGlobalAction]
[SysCopilotChatActionDefinition(
    identifierStr(MS.ServerForm.VendInvoiceCopilot.GetVendInvoiceContext),
    'Get vendor invoice context',
    'Get the vendor invoice context such as vendor name for internal/external communication',
    'VendInvoiceGetInvoiceContextAction',
    MenuItemType::Action)]
    public final class VendInvoiceGetInvoiceContextAction extends SysCopilotChatAction
{
    private const str metricNamespace = 'VendorInvoiceCopilot';
    private const str actionName = 'MS.ServerForm.VendInvoiceCopilot.GetVendInvoiceContext';
    private str invoiceId;
    private str vendAccount;
    private str vendName;
    private str employeeResponsible;
    private str purchId;
    private str itemList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    [DataMember('invoiceId'),
    SysCopilotChatActionInputParameter('The vendor invoice number', true)]
    public str parmInvoiceId(str _vendInvoiceId = invoiceId)
    {
        invoiceId = _vendInvoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [DataMember('vendAccount'),
    SysCopilotChatActionInputParameter('The vendor account number', true)]
    public str parmVendAccount(str _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendName</Name>
				<Source><![CDATA[
    [DataMember('vendName'),
    SysCopilotChatActionOutputParameter('Name of the given vendor account')]
    public str parmVendName(str _vendName = vendName)
    {
        vendName = _vendName;
        return vendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployeeResponsible</Name>
				<Source><![CDATA[
    [DataMember('employeeResponsible'),
    SysCopilotChatActionOutputParameter('Name of the vendor responsible employee')]
    public str parmEmployeeResponsible(str _employeeResponsible = employeeResponsible)
    {
        employeeResponsible = _employeeResponsible;
        return employeeResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    [DataMember('purchId'),
    SysCopilotChatActionOutputParameter('Purch Id of the vendor invoice')]
    public str parmPurchId(str _purchId = purchId)
    {
        purchId = _purchId;
        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemList</Name>
				<Source><![CDATA[
    [DataMember('itemList'),
    SysCopilotChatActionOutputParameter('Item list to be received')]
    public str parmItemList(str _itemList = itemList)
    {
        itemList = _itemList;
        return itemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public void executeAction(SysCopilotChatActionDefinitionAttribute _actionDefinition, object _context)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(VendInvoiceGetInvoiceContextAction));

        using (var context = logger.activityContext(actionName, metricNamespace))
        {
            if (VendInvoiceCopilotMatchProductReceiptFlight::instance().isEnabled())
            {
                VendInvoiceInfoTable vendInvoiceInfoTable;
                VendInvoiceInfoLine vendInvoiceInfoLine;
                VendInvoiceInfoSubLineSumAll vendInvoiceInfoSubLineSumAll;
                VendTable vendTable = VendTable::find(this.parmVendAccount());
                str itemsToReceive = '';
                str purchIdLists = '';
                Map purchIdsMap = new Map(Types::String, Types::Integer);
                Map itemsMap = new Map(Types::String, Types::Real);

                while select vendInvoiceInfoLine
                    where vendInvoiceInfoLine.ReceiveNow != 0
                        && vendInvoiceInfoLine.PurchLineRecId != 0
                    join vendInvoiceInfoTable
                        where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                            && vendInvoiceInfoTable.OrderAccount == this.parmVendAccount()
                            && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                            && vendInvoiceInfoTable.Num == this.parmInvoiceId()
                {
                    select SumOfReceiveNow from vendInvoiceInfoSubLineSumAll
                        where vendInvoiceInfoSubLineSumAll.LineRefRecId == vendInvoiceInfoLine.RecId;

                    real localQtyToReceive = vendInvoiceInfoSubLineSumAll.SumOfReceiveNow;

                    if (localQtyToReceive != 0)
                    {
                        str localPurchId = any2str(vendInvoiceInfoLine.OrigPurchId);
                        str localItemToReceive = vendInvoiceInfoLine.ItemName();

                        if (!purchIdsMap.exists(localPurchId))
                        {
                            if (purchIdLists != '')
                            {
                                purchIdLists += ', ';
                            }
                            purchIdLists += localPurchId;
                            purchIdsMap.insert(localPurchId, 1);
                        }

                        if (!itemsMap.exists(localItemToReceive))
                        {
                            itemsMap.insert(localItemToReceive, localQtyToReceive);
                        }
                        else
                        {
                            itemsMap.insert(localItemToReceive, itemsMap.lookup(localItemToReceive) + localQtyToReceive);
                        }
                    }
                }

                MapEnumerator enumerator = itemsMap.getEnumerator();
                while (enumerator.moveNext())
                {
                    if (itemsToReceive != '')
                    {
                        itemsToReceive += ', ';
                    }
                    itemsToReceive += strfmt("%1: %2",enumerator.currentKey(),enumerator.currentValue());
                }

                this.parmVendName(vendTable.name());
                this.parmEmployeeResponsible(HcmWorker::find(vendTable.MainContactWorker).name());
                this.parmPurchId(purchIdLists);
                this.parmItemList(itemsToReceive);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>