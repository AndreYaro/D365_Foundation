<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job class for posting multiple adjusted voucher entries.
/// </summary>
public class  ProjAdjustAccounting_PostService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newProjAdjustAccounting</Name>
				<Source><![CDATA[
	/// <summary>
    ///  Creates a new derived class instance of type <c>ProjAdjustAccounting_Post</c>.
    /// </summary>
    /// <param name = "_postedTrans">
    /// Project posted transaction.
	/// </param>
    /// <returns>
    /// A <c>ProjAdjustAccounting_Post</c> instance.
	/// </returns>
	public ProjAdjustAccounting_Post newProjAdjustAccounting(Common _postedTrans)
    {
        ProjAdjustAccounting_Post projAdjustAccounting;

        switch (_postedTrans.TableId)
        {
            case tableNum(ProjEmplTrans):
                projAdjustAccounting = new ProjAdjustAccounting_PostEmpl(_postedTrans);
                break;
            case tableNum(ProjCostTrans):
                projAdjustAccounting = new ProjAdjustAccounting_PostCost(_postedTrans);
                break;
            case tableNum(ProjItemTrans):
                projAdjustAccounting = new ProjAdjustAccounting_PostItem(_postedTrans);
                break;
            case tableNum(ProjRevenueTrans):
                projAdjustAccounting = new ProjAdjustAccounting_PostFee(_postedTrans);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return projAdjustAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAccounting</Name>
				<Source><![CDATA[
	/// <summary>
    /// Entry point for this service. 
    /// This method is responsible for posting adjusted vouchers.
    /// </summary>
    /// <param name = "_datacontract">
    /// An instance of <c>ProjAdjustAccountingPostDataContract</c> data contract.
	/// </param>
    public void postAccounting(ProjAdjustAccountingPostDataContract _datacontract)
    {
        boolean postSuccessful = true;
        
        Set recordSet = new Set(Types::Record);
        recordSet = Set::create(_datacontract.parmRecordSetContainer());
        ProjAdjustAccounting_Post projAdjustAccounting;
        
		try
        {
            TransDate adjustmentDate = _dataContract.parmAdjustmentDate();
            Common postedTrans = _datacontract.parmProjTransPostedBuffer();
            projAdjustAccounting = this.newProjAdjustAccounting(postedTrans);
            projAdjustAccounting.parmDataContract(_datacontract);
			ttsbegin;
            projAdjustAccounting.post(recordSet, adjustmentDate);
            ttscommit;
        }
        catch
        {
            postSuccessful = false;
        }

        if (!postSuccessful)
        {
            // reset ttsLevel in case of unbalanced transactions
            while (appl.ttsLevel() > 0)
            {
                ttsAbort;
            }

            if (this.isExecutingInBatch())
            {
                BatchJob batchJob;
                select firstonly forUpdate Status from batchJob
                    where batchJob.RecId == this.getCurrentBatchTask().BatchJobId;

                if (batchJob)
                {
                    ttsBegin;
                    batchJob.Status = BatchStatus::Error;
                    batchJob.update();
                    ttsCommit;
                }
            }
            throw error("@SYS25904");
        }
        else
        {
            Map ledgerMap = projAdjustAccounting.parmledgerVoucherMap();
			if (ledgerMap && ledgerMap.elements())
            {
                MapEnumerator voucherEnumerator = ledgerMap.getEnumerator();
                LedgerVoucher ledgerVoucher;
				while (voucherEnumerator.moveNext())
                {
                    ledgerVoucher = voucherEnumerator.currentValue().value(2);
                    info(strFmt('@Proj:ProjAdjustAccountingPostSuccessful', ledgerVoucher.lastVoucher()));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>