<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCashCollDeclarationCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailCashCollDeclarationCreate_RU</c> used for creating cash collection declaration.
/// </summary>
class RetailCashCollDeclarationCreate_RU extends RunBase
{
    LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cash collection declaration.
    /// </summary>
    private void createDeclaration()
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        RetailStoreCashDeclarationTable         cashDeclarationSetup;
        RetailCashCollDeclarationJourTrans_RU   cashCollDeclarationJourTrans;
        RecordInsertList                        recordInsertList;

        if (ledgerJournalTrans_RCash.RefRecId && ledgerJournalTrans_RCash.CashCollStoreId_RU)
        {
            RetailCashCollDeclarationCreate_RU::clearDeclaration(ledgerJournalTrans_RCash.RefRecId);

            select firstOnly CurrencyCode from ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_RCash.RefRecId;

            recordInsertList = new RecordInsertList(tableNum(RetailCashCollDeclarationJourTrans_RU));

            while select @Type, Amount from cashDeclarationSetup group by @Type, Amount
                where cashDeclarationSetup.storeId          == ledgerJournalTrans_RCash.CashCollStoreId_RU
                   && (   cashDeclarationSetup.Currency     == ledgerJournalTrans.CurrencyCode
                       || cashDeclarationSetup.Currency     == "")
            {
                cashCollDeclarationJourTrans.CashType                   = cashDeclarationSetup.@Type;
                cashCollDeclarationJourTrans.DenominationAmount         = cashDeclarationSetup.amount;
                cashCollDeclarationJourTrans.CurrencyCode               = ledgerJournalTrans.CurrencyCode;
                cashCollDeclarationJourTrans.LedgerJournalTrans_RCash   = ledgerJournalTrans_RCash.RefRecId;

                recordInsertList.add(cashCollDeclarationJourTrans);
            }

            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        if (!_args || _args.dataset() != tableNum(LedgerJournalTrans_RCash))
        {
            throw error(error::missingRecord(funcName()));
        }

        ledgerJournalTrans_RCash = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.createDeclaration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears cash collection declaration.
    /// </summary>
    /// <param name="_ledgerJournalTrans_RCashId">
    /// The primary key value of the <c>LedgerJournalTrans_RCash</c> table.
    /// </param>
    public static void clearDeclaration(RefRecId _ledgerJournalTrans_RCashId)
    {
        RetailCashCollDeclarationJourTrans_RU cashCollDeclarationJourTrans;

        if (_ledgerJournalTrans_RCashId)
        {
            delete_from cashCollDeclarationJourTrans
                where cashCollDeclarationJourTrans.LedgerJournalTrans_RCash == _ledgerJournalTrans_RCashId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCashCollDeclarationCreate_RU construct()
    {
        return new RetailCashCollDeclarationCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailCashCollDeclarationCreate_RU cashCollDeclarationCreate = RetailCashCollDeclarationCreate_RU::construct();

        cashCollDeclarationCreate.initFromArgs(_args);
        cashCollDeclarationCreate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>