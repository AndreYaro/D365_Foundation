<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransSetBasedDeleteProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransSetBasedDeleteProcessor</c> class provides a unified API for deleting <c>SpecTrans</c> records
/// as a set by a variety of reference data.
/// </summary>
internal final class SpecTransSetBasedDeleteProcessor
{
    private Set refCompanySet = new Set(Types::String);
    private Set specCompanySet = new Set(Types::String);

    private SpecTransISetBasedDeleteProcessor processorInterface;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    internal void delete(SpecTransSetBasedDeleteProcessorParams _params)
    {
        processorInterface = SpecTransSetBasedDeleteProcessorFactory::newForDelete(_params);

        if (processorInterface != null)
        {
            if (processorInterface.hasRecordsToDelete())
            {
                ttsbegin;

                this.populateRelatedRecordCompaniesForSpecTrans();

                this.deleteRefCompanyRelatedRecords();

                this.deleteSpecCompanyRelatedRecords();

                if (SpecTransSetBasedDeleteProcessorRemoveSpecContextFlight::instance().isEnabled())
                {
                    this.deleteSpecContext();
                }

                this.deleteSpecTrans();

                ttscommit;
            }
            else
            {
                SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(SpecTransSetBasedDeleteProcessor));

                using (SysInstrumentationActivityContext context = logger.activityContext(CustVendInstrumentationConstants::ActivityNameSpecTransSetBasedDelete, CustVendInstrumentationConstants::InstrumentationNamespace))
                {
                    context.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyDeleteWithNoRecords, '');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRelatedRecordCompaniesForSpecTrans</Name>
				<Source><![CDATA[
    private void populateRelatedRecordCompaniesForSpecTrans()
    {
        SpecTrans specTransByCompany;

        SysDaQueryObject specTransByCompanySDQO = new SysDaQueryObject(specTransByCompany);
        specTransByCompanySDQO.projection().add(fieldStr(SpecTrans, RefCompany));
        specTransByCompanySDQO.projection().add(fieldStr(SpecTrans, SpecCompany));
        specTransByCompanySDQO.groupByClause().add(fieldStr(SpecTrans, RefCompany));
        specTransByCompanySDQO.groupByClause().add(fieldStr(SpecTrans, SpecCompany));

        this.addSpecTransFilter(specTransByCompanySDQO, specTransByCompany);

        SysDaSearchObject searchObject = new SysDaSearchObject(specTransByCompanySDQO);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.findNext(searchObject))
        {
            if (specTransByCompany.RefCompany != '')
            {
                refCompanySet.add(specTransByCompany.RefCompany);
            }

            if (specTransByCompany.SpecCompany != '')
            {
                specCompanySet.add(specTransByCompany.SpecCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRefCompanyRelatedRecords</Name>
				<Source><![CDATA[
    private void deleteRefCompanyRelatedRecords()
    {
        #ISOCountryRegionCodes
        SetEnumerator refCompanySetEnumerator = refCompanySet.getEnumerator();

        while (refCompanySetEnumerator.moveNext())
        {
            CompanyId refCompany = refCompanySetEnumerator.current();

            changecompany(refCompany)
            {
                this.deleteCustTransMarkedOpenLine();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    this.deleteTaxWithholdTransExtensionTH();
                }

                this.deleteTaxWithholdTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecCompanyRelatedRecords</Name>
				<Source><![CDATA[
    private void deleteSpecCompanyRelatedRecords()
    {
        SetEnumerator specCompanySetEnumerator = specCompanySet.getEnumerator();

        while (specCompanySetEnumerator.moveNext())
        {
            CompanyId specCompany = specCompanySetEnumerator.current();

            changecompany(specCompany)
            {
                this.deleteCustInterestWriteOffUnPostedJournal();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustTransMarkedOpenLine</Name>
				<Source><![CDATA[
    private void deleteCustTransMarkedOpenLine()
    {
        SpecTrans specTransToDelete;
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        this.initializeBufferForSetBasedDelete(custTransMarkedOpenLine);

        SysDaQueryObject custTransMarkedOpenLineSDQO = new SysDaQueryObject(custTransMarkedOpenLine);

        SysDaQueryObject specTransToDeleteSDQO = new SysDaQueryObject(specTransToDelete);
        specTransToDeleteSDQO.joinClauseKind(SysDaJoinKind::ExistsJoin);
        specTransToDeleteSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, RecId)),
                new SysDaFieldExpression(custTransMarkedOpenLine, fieldStr(CustTransMarkedOpenLine, SpecTrans))));

        custTransMarkedOpenLineSDQO.joinClause(SysDaJoinKind::ExistsJoin, specTransToDeleteSDQO);

        this.addSpecTransFilter(specTransToDeleteSDQO, specTransToDelete);

        this.executeDeleteStatement(custTransMarkedOpenLineSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxWithholdTrans</Name>
				<Source><![CDATA[
    private void deleteTaxWithholdTrans()
    {
        SpecTrans specTransToDelete;
        TaxWithholdTrans taxWithholdTrans;

        this.initializeBufferForSetBasedDelete(taxWithholdTrans);

        SysDaQueryObject taxWithholdTransSDQO = new SysDaQueryObject(taxWithholdTrans);
        taxWithholdTransSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(taxWithholdTrans, fieldStr(TaxWithholdTrans, Posted)),
                new SysDaValueExpression(NoYes::No)));

        SysDaQueryObject specTransToDeleteSDQO = new SysDaQueryObject(specTransToDelete);
        specTransToDeleteSDQO.joinClauseKind(SysDaJoinKind::ExistsJoin);
        specTransToDeleteSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, RecId)),
                new SysDaFieldExpression(taxWithholdTrans, fieldStr(TaxWithholdTrans, SpecTransId))));

        taxWithholdTransSDQO.joinClause(SysDaJoinKind::ExistsJoin, specTransToDeleteSDQO);

        this.addSpecTransFilter(specTransToDeleteSDQO, specTransToDelete);

        this.executeDeleteStatement(taxWithholdTransSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxWithholdTransExtensionTH</Name>
				<Source><![CDATA[
    private void deleteTaxWithholdTransExtensionTH()
    {
        SpecTrans specTransToDelete;
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdTransExtensionTH taxWithholdTransExtensionTH;

        this.initializeBufferForSetBasedDelete(taxWithholdTransExtensionTH);

        SysDaQueryObject taxWithholdTransExtensionTHSDQO = new SysDaQueryObject(taxWithholdTransExtensionTH);

        SysDaQueryObject taxWithholdTransSDQO = new SysDaQueryObject(taxWithholdTrans);
        taxWithholdTransSDQO.joinClause(SysDaJoinKind::ExistsJoin);
        taxWithholdTransSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(taxWithholdTrans, fieldStr(TaxWithholdTrans, Posted)),
                new SysDaValueExpression(NoYes::No))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(taxWithholdTrans, fieldStr(TaxWithholdTrans, RecId)),
                new SysDaFieldExpression(taxWithholdTransExtensionTH, fieldStr(TaxWithholdTransExtensionTH, TaxWithholdTrans)))));

        taxWithholdTransExtensionTHSDQO.joinClause(SysDaJoinKind::ExistsJoin, taxWithholdTransSDQO);

        SysDaQueryObject specTransToDeleteSDQO = new SysDaQueryObject(specTransToDelete);
        specTransToDeleteSDQO.joinClauseKind(SysDaJoinKind::ExistsJoin);
        specTransToDeleteSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, RecId)),
                new SysDaFieldExpression(taxWithholdTrans, fieldStr(TaxWithholdTrans, SpecTransId))));

        taxWithholdTransSDQO.joinClause(SysDaJoinKind::ExistsJoin, specTransToDeleteSDQO);

        this.addSpecTransFilter(specTransToDeleteSDQO, specTransToDelete);

        this.executeDeleteStatement(taxWithholdTransExtensionTHSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustInterestWriteOffUnPostedJournal</Name>
				<Source><![CDATA[
    private void deleteCustInterestWriteOffUnPostedJournal()
    {
        SpecTrans specTransToDelete;
        CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;

        this.initializeBufferForSetBasedDelete(custInterestWriteOffUnPostedJournal);

        SysDaQueryObject custInterestWriteOffSDQO = new SysDaQueryObject(custInterestWriteOffUnPostedJournal);

        SysDaQueryObject specTransToDeleteSDQO = new SysDaQueryObject(specTransToDelete);
        specTransToDeleteSDQO.joinClauseKind(SysDaJoinKind::ExistsJoin);
        specTransToDeleteSDQO.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, SpecCompany)),
                new SysDaFieldExpression(custInterestWriteOffUnPostedJournal, fieldStr(CustInterestWriteOffUnPostedJournal, DataAreaId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, SpecTableId)),
                new SysDaValueExpression(tableNum(ledgerJournalTrans))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDelete, fieldStr(SpecTrans, SpecRecId)),
                new SysDaFieldExpression(custInterestWriteOffUnPostedJournal, fieldStr(CustInterestWriteOffUnPostedJournal, LedgerJournalTrans)))));

        custInterestWriteOffSDQO.joinClause(SysDaJoinKind::ExistsJoin, specTransToDeleteSDQO);

        this.addSpecTransFilter(specTransToDeleteSDQO, specTransToDelete);

        this.executeDeleteStatement(custInterestWriteOffSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransToDeleteQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getSpecTransToDeleteQueryObject(SpecTrans _specTransToDelete)
    {
        SysDaQueryObject specTransSDQO = new SysDaQueryObject(_specTransToDelete);
        this.addSpecTransFilter(specTransSDQO, _specTransToDelete);

        return specTransSDQO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTrans</Name>
				<Source><![CDATA[
    private void deleteSpecTrans()
    {
        SpecTrans specTransToDelete;
        this.initializeBufferForSetBasedDelete(specTransToDelete);

        this.executeDeleteStatement(this.getSpecTransToDeleteQueryObject(specTransToDelete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpecTransFilter</Name>
				<Source><![CDATA[
    private void addSpecTransFilter(SysDaQueryObject _queryObject, SpecTrans _specTransToFilter)
    {
        SysDaQueryObject specTransFilterSDQO = processorInterface.getSpecTransFilter(_specTransToFilter);

        _queryObject.joinClause(SysDaJoinKind::ExistsJoin, specTransFilterSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecContext</Name>
				<Source><![CDATA[
    private void deleteSpecContext()
    {
        SpecTrans specTransToDelete;
        SysDaQueryObject specTransSDQO = this.getSpecTransToDeleteQueryObject(specTransToDelete);

        SpecContext specContextToDelete;
        this.initializeBufferForSetBasedDelete(specContextToDelete);

        SysDaQueryObject specContextSDQO = new SysDaQueryObject(specContextToDelete);
        this.addSpecContextFilter(specContextSDQO, specTransSDQO, specTransToDelete, specContextToDelete);

        this.executeDeleteStatement(specContextSDQO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpecContextFilter</Name>
				<Source><![CDATA[
    private void addSpecContextFilter(SysDaQueryObject _queryObject, SysDaQueryObject _joinedQueryObject, SpecTrans _specTrans, SpecContext _specContext)
    {
        _joinedQueryObject.joinClauseKind(SysDaJoinKind::ExistsJoin);
        _joinedQueryObject.whereClause(
            new SysDaAndExpression(
                new SysDaAndExpression(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecCompany)),
                        new SysDaFieldExpression(_specContext, fieldStr(SpecContext, DataAreaId))),
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecRecId)),
                        new SysDaFieldExpression(_specContext, fieldStr(SpecContext, RecId)))),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecTableId)),
                    new SysDaFieldExpression(_specContext, fieldStr(SpecContext, TableId)))));
        _queryObject.joinClause(SysDaJoinKind::ExistsJoin, _joinedQueryObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDeleteStatement</Name>
				<Source><![CDATA[
    private void executeDeleteStatement(SysDaQueryObject _queryObject)
    {
        new SysDaDeleteStatement().delete(new SysDaDeleteObject(_queryObject));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBufferForSetBasedDelete</Name>
				<Source><![CDATA[
    private void initializeBufferForSetBasedDelete(Common _common)
    {
        _common.skipDeleteActions(true);
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SpecTransSetBasedDeleteProcessor construct()
    {
        return new SpecTransSetBasedDeleteProcessor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>