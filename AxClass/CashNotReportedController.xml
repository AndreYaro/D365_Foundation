<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashNotReportedController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashNotReportedController</c> class is the controller class for the
/// <c>CashReport_NotReported_PL</c> report.
/// </summary>
class CashNotReportedController extends SrsReportRunController implements BatchRetryable
{
    RCashTable cashTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ranges on the query before it is used to fetch data for the report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRanges()
    {
        Query query = this.getFirstQuery();

        QueryBuildDataSource queryDataSource = query.dataSourceTable(tablenum(RCashTrans));

        findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, AccountNum), cashTable.AccountNum);
        findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, ReportNum_PL), SysQuery::valueEmptyString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (args && args.record() && args.dataset() == tablenum(RCashTable))
        {
            cashTable = args.record();
        }
        else
        {
            throw error(strfmt("@GLS110030", tablestr(RCashTable)));
        }

        this.initQueryRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'PL-00021';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
        CashNotReportedController controller = new CashNotReportedController();
        controller.parmReportName(ssrsReportStr(CashReport_NotReported_PL, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>