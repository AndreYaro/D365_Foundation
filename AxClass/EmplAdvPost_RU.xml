<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EmplAdvPost_RU</c> handles the logic for posting Advance report to ledger.
/// </summary>
public class EmplAdvPost_RU
{
    EmplAdvTable_RU         advanceTable;
    EmplParameters_RU       emplParm;
    LedgerVoucher           ledgerVoucher;
    AmountCur               taxAmount, taxBaseAmount;
    TaxAmountCur            taxAmountInCostPrice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the necessary checks before Advance report posting.
    /// </summary>
    /// <returns>
    /// true if the check succeeded; false - otherwise.
    /// </returns>
    protected boolean check()
    {
        if (advanceTable.Status == EmplAdvStatus_RU::Posted ||
            advanceTable.Status == EmplAdvStatus_RU::Rejected)
        {
            return checkFailed("@SYS23024");
        }

        if (! advanceTable.EmplAccount)
        {
            return checkFailed("@SYS36796");
        }

        if ((select firstonly RecId from emplAdvLine_RU
                 where emplAdvLine_RU.AdvanceId == advanceTable.AdvanceId  &&
                       ! emplAdvLine_RU.AmountCurApproved).RecId)
        {
            return checkFailed("@GLS105770");
        }

        if ((select firstonly RecId from emplAdvLine_RU
                 where emplAdvLine_RU.AdvanceId == advanceTable.AdvanceId  &&
                       ! (emplAdvLine_RU.DocumentDate &&
                          emplAdvLine_RU.DocumentNum)).RecId)
        {
            return checkFailed("@SYS24569");
        }

        if (! advanceTable.validatePostForBudgetCheck())
        {
            return false;
        }

        HcmEmploymentRecId employmentRecId = EmployeeTable_RU::findByEmployeeId(advanceTable.EmplAccount).HcmEmployment;

        if (!HcmEmployment::findByTimeState(
            employmentRecId,
            advanceTable.TransDate,
            advanceTable.TransDate))
        {
            return checkFailed(strFmt(
                "@ApplicationSuite_Localization:AdvanceHolderNotEmployed",
                advanceTable.EmplAccount,
                advanceTable.TransDate));
        }

        if (! LedgerFiscalCalendar::checkModuleIsOpen(
            SysModule::Purch,
            advanceTable.TransDate,
            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                advanceTable.TransDate,
                FiscalPeriodType::Operating
            )
        ))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>EmplTrans_RU</c> transaction record for the given <c>EmplAdvLine_RU</c>.
    /// </summary>
    /// <param name="_line">
    /// The source Advance report line.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The current <c>LedgerVoucher</c> object.
    /// </param>
    /// <param name="_baseAmount">
    /// The base line amount.
    /// </param>
    /// <returns>
    /// RecId of the newly created <c>EmplTrans_RU</c>.
    /// </returns>
    private RefRecId createEmplTrans(EmplAdvLine_RU _line,
                                     LedgerVoucher  _ledgerVoucher,
                                     AmountCur      _baseAmount)
    {
        EmplVoucher_RU  emplVoucher;
        EmplTrans_RU    emplTrans;

        emplVoucher = new EmplVoucher_RU (_ledgerVoucher,
                                          advanceTable.EmplAccount,
                                          -_baseAmount,
                                          _line.CurrencyCode,
                                          LedgerTransTxt::EmplAdvanceLedger_RU,
                                          advanceTable.DefaultDimension,
                                          advanceTable.PostingProfile,
                                          advanceTable.NotesLine);

        emplVoucher.setSourceTable(_line);
        emplVoucher.parmSkipAdvanceTableUpdate(true);
        emplVoucher.post(emplTrans,
                         NoYes::No,
                         Currency::noYes2UnknownNoYes(_line.Triangulation),
                         NoYes::No,
                         _line.Qty,
                         _line.ExchRate,
                         _line.ExchRateSecond);

        return emplVoucher.parmEmplRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add new LedgerVoucherObject to the ledgerVoucher.
    /// </summary>
    protected void createLedgerVoucherObject()
    {
        NumberSeq numberSeq = NumberSeq::newGetVoucherFromCode(ledgerVoucher.parmVoucherSeriesCode());

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(numberSeq.voucher(),
                                                                 advanceTable.TransDate,
                                                                 SysModule::Employee_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayTrans</Name>
				<Source><![CDATA[
    protected void createPayTrans(AmountCurCredit  _amount,
                                  RPayCostType     _costType,
                                  dimensiondefault _dimension)
    {
        RPayTrans           rPayTrans;
        ReportPeriod_RU     payPeriod = RPayParameters::payPeriod(advanceTable.EmplAccount);

        if (! _costType)
            throw error("@RUP32");

        payPeriod = payPeriod > advanceTable.TransDate ?
                                        payPeriod :
                                        endmth(advanceTable.TransDate);
        rPayTrans.clear();

        rPayTrans.Amount                 = RPayTable::find(_costType).PayChargeType == RPayChargeType::AddSum ?
                                           _amount :
                                           - _amount;
        rPayTrans.Emplid                 = advanceTable.EmplAccount;
        rPayTrans.PayCtype               = _costType;
        rPayTrans.PayPeriod              = payPeriod;
        rPayTrans.SourceDate             = payPeriod;
        rPayTrans.CorrectedPeriod        = payPeriod;
        rPayTrans.TransDate              = advanceTable.TransDate;
        rPayTrans.SourceTableId          = advanceTable.TableId;
        rPayTrans.SourceRecId            = advanceTable.RecId;

        rpayTrans.AccountType             = LedgerJournalACType::Employee_RU;

        rPayTrans.setLedgerDimension(LedgerJournalACType::Employee_RU,
                                     LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(advanceTable.EmplAccount, rPayTrans.AccountType),
                                     _dimension,
                                     advanceTable.EmplAccount);
        rPayTrans.HrmOrganisationId      = RPayHistory::getHistoryLineByDate(rPayTrans.Emplid, rPayTrans.TransDate).HrmOrganizationId;
        rPayTrans.OffsetAccountType      = rPayTrans.offsetAccountTypeDisplay();
        rPayTrans.OffsetDefaultDimension = rPayTrans.offsetDefaultDimensionDisplay();
        rPayTrans.OffsetLedgerDimension  = rPayTrans.offsetLedgerDimensionDisplay();
        rPayTrans.Correct                = (rPayTrans.LedgerDimension && rPayTrans.OffsetLedgerDimension);

        rPayTrans.insert();

        if (!rPayTrans)
        {
            throw error("@RUP6186");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayTrans_OverNorm</Name>
				<Source><![CDATA[
    protected void createPayTrans_OverNorm(boolean _storno = false)
    {
        EmplAdvLine_RU              lineTableExt;
        EmplAdvExpendTable_RU       rateTable;

        KeySum                      buffer;
        int                         idx;
        AmountMST                   amount;
        DimensionDefault            dimension;
        RefRecId                    expendId;

        setprefix("@RUP22");

        if (!RPayController::canModuleChanged(true, advanceTable.EmplAccount))
        {
            error("@RUP6186");
            throw error("@RUP6187");
        }

        buffer = KeySum::construct(1, 1);

        while select LedgerDimension, EmplAdvExpendTable_RU, AmountMst, DocumentNum from lineTableExt
            where lineTableExt.AdvanceId  == advanceTable.AdvanceId &&
                  lineTableExt.Taxed
        {
            buffer.updateNow([lineTableExt.LedgerDimension, lineTableExt.EmplAdvExpendTable_RU], _storno                  ?
                                                                              - lineTableExt.AmountMst :
                                                                              lineTableExt.AmountMst);

            if (! lineTableExt.EmplAdvExpendTable_RU)
            {
                warning(strFmt("@RUP6188", lineTableExt.DocumentNum));
            }
        }

        if (buffer.numOfTrans())
        {
            ttsbegin;
            idx = 1;
            do
            {
                [dimension, expendId]   = buffer.index2Key(idx);
                amount                  = buffer.index2Data(idx);

                if (amount)
                {
                    rateTable   =  EmplAdvExpendTable_RU::find(expendId);

                    this.createPayTrans(amount,
                                        rateTable.PayCostTypeAdd_OverNorm,
                                        dimension);
                    this.createPayTrans(amount,
                                        rateTable.PayCostTypeDeduct_OverNorm,
                                        dimension);
                }
                idx++;
            }
            while (idx <= buffer.numOfTrans());
            ttscommit;
        }

        buffer.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits ledgerVoucher processing.
    /// </summary>
    protected void endLedgerVoucher()
    {
        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current <c>LedgerVoucher</c> instance.
    /// </summary>
    protected void initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Employee_RU,
                                                     EmplParameters_RU::numRefEmplAdvVoucher().numberSequenceTable().NumberSequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>EmplAdvPost_RU</c> class.
    /// </summary>
    /// <param name="_advanceTable">
    /// Advance report to be posted.
    /// </param>
    public void new(EmplAdvTable_RU    _advanceTable)
    {
        advanceTable  = _advanceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes Advance report line posting to ledger.
    /// </summary>
    /// <param name="_line">
    /// The line to be posted.
    /// </param>
    protected void post(EmplAdvLine_RU    _line)
    {
        LedgerDimensionDefaultAccount defaultAccount = _line.LedgerDimension;
        AmountCur                     lineAmountCur;

        lineAmountCur        = _line.AmountCurApproved;
        taxAmount            = 0;
        taxBaseAmount        = 0;
        taxAmountInCostPrice = 0;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00058, funcName());

        if (_line.TaxGroup && _line.TaxItemGroup)
        {
            this.taxCalc(_line, ledgerVoucher);
            lineAmountCur  = this.taxBaseAmount() ? this.taxBaseAmount() : lineAmountCur;
        }

        _line.EmplTransRecId = this.createEmplTrans(_line,
                                                    ledgerVoucher,
                                                    lineAmountCur + this.taxAmount());

        TaxPost_EmplAdvance_RU::doUpdateAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher), _line);

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(_line, false, SourceDocumentAccountingStatus::Completed);

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(_line, false, SourceDocumentLineAccountingStatus::Completed);

        _line.update(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates <c>EmplAdvLine_RU</c> amount in accounting currency.
    /// </summary>
    /// <param name="_line">
    /// Advance report line to process.
    /// </param>
    /// <returns>
    /// Advance report line with recalculated amount in accounting currency.
    /// </returns>
    protected EmplAdvLine_RU recalcAmountMst(EmplAdvLine_RU _line)
    {
        EmplAdvTable_RU    emplAdvTable;

        if (_line.CurrencyCode != CompanyInfoHelper::standardCurrency())
        {
            emplAdvTable = _line.advTable();

            _line.AmountCur         = _line.AmountCur ?
                                      _line.AmountCur :
                                      _line.AmountCurApproved;

            _line.AmountCurApproved = _line.AmountCurApproved ?
                                      _line.AmountCurApproved :
                                      _line.AmountCur;

            _line.AmountMst         = CurrencyExchangeHelper::amountCur2MST(_line.AmountCurApproved, _line.CurrencyCode, _line.ExchRate, emplAdvTable.TransDate, _line.ExchRateSecond, _line.Triangulation);
        }

        return _line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the processing logic for posting Advance report to ledger.
    /// </summary>
    protected void run()
    {
        EmplAdvLine_RU          line;

        try
        {
            ttsbegin;

            advanceTable = EmplAdvTable_RU::find(advanceTable.AdvanceId, true);
            this.initLedgerVoucher();
            while select forupdate line
                where line.AdvanceId == advanceTable.AdvanceId   &&
                      (line.LineType == EmplAdvLineType_RU::None ||
                       line.LineType == EmplAdvLineType_RU::Expend)
            {
                this.createLedgerVoucherObject();
                this.post(this.recalcAmountMst(line));
            }
            // <RUPAY>
            this.createPayTrans_OverNorm();
            // </RUPAY>
            this.endLedgerVoucher();

            advanceTable.Status   =  EmplAdvStatus_RU::Posted;
            advanceTable.AmountMST = (
                select sum(AmountMST) from EmplAdvLine_RU
                    where EmplAdvLine_RU.AdvanceId == advanceTable.AdvanceId).AmountMst;
            advanceTable.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch
        {
            error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tax amount.
    /// </summary>
    /// <returns>
    /// Tax amount value.
    /// </returns>
    protected AmountCur taxAmount()
    {
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns base amount value for tax calculation.
    /// </summary>
    /// <returns>
    /// Base amount for tax calculation.
    /// </returns>
    protected AmountCur taxBaseAmount()
    {
        return taxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amounts for the given Advance report line.
    /// </summary>
    /// <param name="_line">
    /// The Advance report line to handle.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The current <c>LedgerVoucher</c> instance.
    /// </param>
    /// <param name="_post">
    /// A Boolean value determining whether to update the values on Advance report line.
    /// </param>
    private void taxCalc(EmplAdvLine_RU _line,
                         LedgerVoucher  _ledgerVoucher,
                         boolean        _post = true)
    {
        TaxEmplAdvance_RU   taxCalc = new TaxEmplAdvance_RU(false,
                                                            _line,
                                                            advanceTable,
                                                            null,
                                                            true,
                                                            _line.RecId
                                                             );

        TmpTaxWorkTrans     tmpTrans;
        CalcTaxes_RU        calc;

        taxCalc.calcAndPost();

        if (! _post)
            return;

        _line.TaxAmount        = taxCalc.taxAmount();
        _line.TaxAmountMST     = taxCalc.taxAmountMst();
        _line.AmountCurExclTax = taxCalc.baseAmount();
        _line.AmountMstExclTax = taxCalc.baseAmountMst();
        _line.AmountMst        = _line.AmountMstExclTax + _line.TaxAmountMST;

        tmpTrans               = taxCalc.tmpTaxWorkTrans();
        select tmpTrans;
        calc                   = CalcTaxes_RU::construct(tmpTrans);
        calc.calc();

        _line.TaxAmountExcise_RU    = calc.taxAmountCur_Excise();
        _line.TaxAmountVAT_RU       = calc.taxAmountCur_VAT()        +
                                      calc.taxAmountCur_VATReduced() +
                                      calc.taxAmountCur_VATZero();
        _line.TaxVATType_RU         = calc.taxBaseAmountCur_VAT()         ? VATType_RU::Full    :
                                      (calc.taxBaseAmountCur_VATReduced() ? VATType_RU::Reduced :
                                       (calc.taxBaseAmountCur_VATZero()   ? VATType_RU::Zero    :
                                                                            VATType_RU::NonLiable));

        _line.TaxValueVAT_RU        = this.taxValue_VAT(_line, tmpTrans);

        _line.doUpdate();

        taxAmount               = _line.TaxAmount;
        taxBaseAmount           = _line.AmountCurExclTax;
        taxAmountInCostPrice    = taxCalc.taxInCostPrice(_line.TableId, _line.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValue_VAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the VAX Tax amount value.
    /// </summary>
    /// <param name="_emplAdvLine">
    /// The current Advance report line.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The current <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// Tax amount value.
    /// </returns>
    protected TaxValue taxValue_VAT(EmplAdvLine_RU _emplAdvLine, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxTable    taxTable;

        select firstonly TaxCode from taxTable
            join _tmpTaxWorkTrans
            where taxTable.TaxCode   == _tmpTaxWorkTrans.TaxCode &&
                 (taxTable.TaxType_W == TaxType_W::VAT        ||
                  taxTable.TaxType_W == TaxType_W::VATReduced ||
                  taxTable.TaxType_W == TaxType_W::VATZero);

        return TaxData::percent(taxTable.TaxCode, _emplAdvLine.DocumentDate, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EmplAdvTable_RU  advTable = _args.record();

        if (Box::confirm("@GLS104816"))
        {
            EmplAdvPost_RU::postIL(advTable.AdvanceId);
            EmplAdvPost_RU::refreshFormData(_args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the EmplAdvPost_RU.postServer method, ensuring it is executed under Xpp IL.
    /// </summary>
    /// <param name = "_advanceID"> The Advance id parameters to pass to the method. </param>
    /// <returns> Null container. </returns>
    public static container postIL(EmplAdvanceId_RU _advanceID)
    {
        container   con;

        new XppILExecutePermission().assert();
        con = EmplAdvPost_RU::postServer([_advanceID]);
        CodeAccessPermission::revertAssert();

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts advance report on server side.
    /// </summary>
    /// <param name="_post">
    /// A container with Advance id value.
    /// </param>
    /// <returns>
    /// Null container.
    /// </returns>
    public static container postServer(container _post)
    {
        EmplAdvTable_RU record = EmplAdvTable_RU::find(conPeek(_post, 1));
        EmplAdvPost_RU  advPost = new EmplAdvPost_RU(record);

        if (advPost.check())
        {
            advPost.run();
        }
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the data sources of the caller form.
    /// </summary>
    /// <param name="_emplAdvTable">
    /// The cursor that points to the <c>emplAdvTable</c> record currently selected on the form.
    /// </param>
    protected static void refreshFormData(EmplAdvTable_RU _emplAdvTable)
    {
        Object emplAdvTable_ds = FormDataUtil::isFormDataSource(_emplAdvTable) ? FormDataUtil::getFormDataSource(_emplAdvTable) : null;

        // This code was moved from the main method to its current location to reduce RPC
        // calls to the client. The original code made calls out to the form datasource
        // from the server, which caused approximately five unecessary RPC calls.

        if (_emplAdvTable && emplAdvTable_ds)
        {
                emplAdvTable_ds.reRead();
                emplAdvTable_ds.reFresh();
                emplAdvTable_ds.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>