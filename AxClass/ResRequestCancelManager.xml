<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRequestCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ResRequestCancelManager</c> class manages the workflow cancellation event for resource request.
/// </summary>
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
class ResRequestCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the resource request workflow status for the cancel action.
    /// </summary>
    /// <param name = "_args">The arguments for the <c>ResRequestCancelManager</c> class.</param>
    public void updateDocument(Args _args)
    {
        ResRequest resRequest = _args.record() as ResRequest;

        if (resRequest)
        {
            ttsbegin;
            resRequest.selectForUpdate(true);
            resRequest.ApprovalStatus = ResApprovalStatus::Draft;
            resRequest.update();

            ResRequestLine resRequestLine;

            resRequestLine.skipDataMethods(true);
            resRequestLine.skipDatabaseLog(true);
            resRequestLine.skipEvents(true);

            update_recordset resRequestLine
                setting ApprovalStatus = ResApprovalStatus::Draft
                where resRequestLine.Request == resRequest.RecId;
            ttscommit;

            FormDataSource   resResourceWorkflow_ds = FormDataUtil::getFormDataSource(resRequest);
            if (resResourceWorkflow_ds)
            {
                resResourceWorkflow_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of workflow correlation IDs to cancel.
    /// </summary>
    /// <param name="_resRequestRecId">
    /// The header resource request record ID.
    /// </param>
    /// <returns>
    /// The list of workflow correlation IDs to cancel.
    /// </returns>
    private List getWorkflowsToCancel(ResRequestRecId _resRequestRecId)
    {
        List                        workflowsToCancel = new List(Types::Guid);
        ResRequestLine              resRequestLine;
        WorkflowWorkItemTable       workflowWorkItemTable;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        while select CorrelationId from workflowTrackingStatusTable
        exists join resRequestLine
            where resRequestLine.RecId == workflowTrackingStatusTable.ContextRecId
                 && resRequestLine.Request == _resRequestRecId
        notexists join workflowWorkItemTable
            where workflowWorkItemTable.CorrelationId == workflowTrackingStatusTable.CorrelationId
        {
            workflowsToCancel.addEnd(workflowTrackingStatusTable.CorrelationId);
        }

        while select CorrelationId from workflowWorkItemTable
            exists join resRequestLine
                where resRequestLine.RecId == workflowWorkItemTable.RefRecId
                    && resRequestLine.Request == _resRequestRecId
        {
            workflowsToCancel.addEnd(workflowWorkItemTable.CorrelationId);
        }

        return workflowsToCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>ResRequestCancelManager</c> class.
    /// </summary>
    /// <returns>An instance of the <c>ResRequestCancelManager</c> class.</returns>
    public static ResRequestCancelManager construct()
    {
        return new ResRequestCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the main method.
    /// </summary>
    /// <param name = "_args">Command argument to use.</param>
    public static void main(Args _args)
    {
        ResRequestCancelManager workflowCancelManager = ResRequestCancelManager::construct();
        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run an instance of the class.
    /// </summary>
    /// <param name = "_args">Command argument to use.</param>
    public void run(Args _args)
    {
        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LabelString cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt;

        List workflowsToCancelList =  this.getWorkflowsToCancel(_args.record().RecId);
        if (workflowsToCancelList.empty())
        {
            Warning("@Res:ResRequestCancelNoWorkflowItem");
        }
        else
        {
            [cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt] = WorkflowCancelManager::getDialogContent(_args);

            WorkflowCancelDialog workflowCancelDialog = WorkflowCancelDialog::construct(cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt);
            workflowCancelDialog.run();

            if (workflowCancelDialog.parmIsClosedOK())
            {
                WorkflowCancelManager::cancelWorkflows(workflowsToCancelList, workflowCancelDialog.parmWorkflowComment());

                this.updateDocument(_args);

                _args.caller().updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>