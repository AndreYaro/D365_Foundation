<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementWriteOffAdjustment</c> class tracks marked transactions and adjustment amounts per company context for the settle remainder feature.
/// Adjustment amounts may be found by aggregate or by company context.
/// </summary>
internal final class SettlementWriteOffAdjustment
{
    private Map adjustmentAmounts;
    private Set adjustmentLegalEntities;
    private CurrencyCode adjustmentCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an adjustment amount for summarization in a company context.
    /// </summary>
    /// <param name = "_company">The company context for the summed adjustment amount.</param>
    /// <param name = "_adjustmentAmount">The amount to add.</param>
    internal void addAdjustmentAmount(DataAreaId _company, AmountCur _adjustmentAmount)
    {
        if (_company && _adjustmentAmount)
        {
            AmountCur calculatedAdjustmentAmount = _adjustmentAmount;

            if (adjustmentAmounts.exists(_company))
            {
                calculatedAdjustmentAmount += adjustmentAmounts.lookup(_company);
            }

            adjustmentAmounts.insert(_company, calculatedAdjustmentAmount);

            adjustmentLegalEntities.add(_company);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the summarized adjustment amount for a given company.
    /// </summary>
    /// <param name = "_company">The company context.</param>
    /// <returns>The adjustment amount.</returns>
    internal AmountCur findAdjustmentAmount(DataAreaId _company)
    {
        AmountCur adjustmentAmount;

        if (adjustmentAmounts.exists(_company))
        {
            adjustmentAmount = adjustmentAmounts.lookup(_company);
        }

        return adjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total adjustment amount across all company contexts.
    /// </summary>
    /// <returns>The total adjustment amount.</returns>
    internal AmountCur getTotalAdjustmentAmount()
    {
        MapEnumerator adjustAmountEnumerator = adjustmentAmounts.getEnumerator();
        AmountCur totalAdjustmentAmount;

        while (adjustAmountEnumerator.moveNext())
        {
            totalAdjustmentAmount += adjustAmountEnumerator.currentValue();
        }

        return totalAdjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        adjustmentAmounts = new Map(Types::String, Types::Real);
        adjustmentLegalEntities = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the write off adjustment class.
    /// </summary>
    /// <returns>The new instance of the class.</returns>
    internal static SettlementWriteOffAdjustment construct()
    {
        return new SettlementWriteOffAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the write off adjustment class.
    /// </summary>
    /// <param name = "_currencyCode">The adjustment currency code.</param>
    /// <returns>The new instance of the write off adjustment class.</returns>
    internal static SettlementWriteOffAdjustment newFromCurrency(CurrencyCode _currencyCode)
    {
        SettlementWriteOffAdjustment writeOffAdjustment = new SettlementWriteOffAdjustment();
        writeOffAdjustment.init();

        writeOffAdjustment.adjustmentCurrency = _currencyCode;

        return writeOffAdjustment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>