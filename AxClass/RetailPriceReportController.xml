<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPriceReportController</c> class is the controller for the <c>RetailPriceList</c> SSRS report.
/// </summary>
internal class RetailPriceReportController extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure that this report always goes in batch mode.
    /// </summary>
    /// <returns>True, which indicates this report must go batch.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Class description.
    /// </summary>
    /// <returns>A label describes the class.</returns>
    public static ClassDescription description()
    {
        return "@RetailPricing:PriceReportBatchJobClassDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the controller, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        RetailPriceReportController controller = new RetailPriceReportController();

        controller.setupParameters(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up parameters for contract.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    private void setupParameters(Args _args)
    {
        // parmReportName should precede getting of contract and should always be called.
        this.parmReportName(ssrsReportStr(RetailPriceReport, Report));

        SRSPrintDestinationSettings printSettings = this.parmReportContract().parmPrintSettings();
        printSettings.printMediumType(SRSPrintMediumType::File);
        printSettings.fileFormat(SRSReportFileFormat::Excel);

        RetailPriceReportRDPContract contract = this.parmReportContract().parmRdpContract();
        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        date nextDate = currentDate + 1;
        contract.parmCalculationStartDate(currentDate);
        contract.parmCalculationEndDate(nextDate);

        RetailStoreId storeNumber = '';

        OMOperatingUnit operatingUnitRecord = _args.record();

        if (operatingUnitRecord)
        {
            RetailStoreTable store;
            select firstonly StoreNumber from store where store.OMOperatingUnitID == operatingUnitRecord.RecId;
            contract.parmStoreNumber(store.StoreNumber);
            storeNumber = store.StoreNumber;
        }

        printSettings.fileName(strFmt("@RetailPricing:PriceReportFileDefaultName", storeNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        RetailPriceReportRDPContract contract = this.parmReportContract().parmRdpContract();

        RetailStoreTable store = RetailStoreTable::find(contract.parmStoreNumber());
        OMOperatingUnit ou = RetailStoreTable::findOperatingUnit(store.RecId);

        // Update in case user changes store in the dialog.
        contract.parmInventLocation(store.inventLocation);
        str defaultStoreName = ou.Name == '' ? ou.NameAlias : ou.Name;
        contract.parmStoreName(defaultStoreName);

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>