<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataInvoiceApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class complements the logic of <c>PurchFormletterParmDataInvoice</c> in order to pass additional field when form letter is initialized via <c>VendInvoiceInfoTableTmp</c>.
/// </summary>
[ExtensionOf(classStr(PurchFormletterParmDataInvoice))]
internal final class PurchFormletterParmDataInvoiceApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeParmTable</Name>
				<Source><![CDATA[
    protected VendDocumentTableMap initializeParmTable(
        VendDocumentTableMap  _parmTable,
        PurchLine             _purchLine,
        PurchTable            _purchTable,
        TradeLineRefId        _tableRefId,
        boolean               _hold,
        boolean               _notApproved,
        Num                   _purchSummaryFormLetterId,
        VendPostingProfile    _postingProfile,
        InventProfileType_RU  _inventProfileType
       )
    {
        VendDocumentTableMap parmTable = next initializeParmTable(
            _parmTable,
            _purchLine,
            _purchTable,
            _tableRefId,
            _hold,
            _notApproved,
            _purchSummaryFormLetterId,
            _postingProfile,
            _inventProfileType);

        if (this.parmSkipParmTableDefaulting()
            && _purchTable
            && parmTable.TableId == tableNum(VendInvoiceInfoTable)
            && IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            this.updateTransportationDocument(_purchTable, parmTable);
        }

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransportationDocument</Name>
				<Source><![CDATA[
    private boolean updateTransportationDocument(
        PurchTable _purchTable,
        VendInvoiceInfoTable _vendInvoiceInfoTable,
        boolean _skipValidation = false)
    {
        boolean isUpdated;

        //In case when VendInvoiceInfoTable was removed and restored we need to restore TransportationDocument
        if (_vendInvoiceInfoTable.TransportationDocument
            && (_skipValidation || !TransportationDocument::exist(_vendInvoiceInfoTable.TransportationDocument)))
        {
            _vendInvoiceInfoTable.TransportationDocument = 0;
            TransportationDocument::copy(_purchTable, _vendInvoiceInfoTable);
            isUpdated = true;
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeEnd</Name>
				<Source><![CDATA[
    protected void reArrangeEnd()
    {
        next reArrangeEnd();

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            VendInvoiceInfoTable vendInvoiceInfoTable;
            PurchTable purchTable;
            TransportationDocument transportationDocument;

            while select forupdate vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId
                    && vendInvoiceInfoTable.TransportationDocument
                join purchTable 
                    where purchTable.PurchId == vendInvoiceInfoTable.PurchId
                notexists join transportationDocument
                    where transportationDocument.RecId == vendInvoiceInfoTable.TransportationDocument
            {
                if (this.updateTransportationDocument(purchTable, vendInvoiceInfoTable, true))
                {
                    vendInvoiceInfoTable.update();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>