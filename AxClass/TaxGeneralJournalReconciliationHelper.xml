<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGeneralJournalReconciliationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Base Class containing helper methods for processing TaxGeneralJournalReconciliation report.
/// </summary>
public class TaxGeneralJournalReconciliationHelper
{
    Connection                                          userConnection;
    TaxGeneralJournalReconciliationTmp                  reportTable;
    TaxGeneralJournalReconciliationContract             contract;
    TransDate                                           fromDate, toDate;
    MainAccountNum                                      fromMainAccount, toMainAccount;
    TaxCode                                             fromTaxCode, toTaxCode;
    LedgerRecId                                         ledgerRecId;
    Query                                               reportQuery;
    TaxGeneralJournalReconciliationRelationshipFilter   taxRelationshipFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctForFixedChargeOnPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update the records in reportTable created for fixed charge on purchase price to have 0 tax amount.
    /// </summary>
    /// <remarks>
    ///  Without this correction the tax amount shown in the report will be duplicated for each line that
    ///  contains a fixed charge on purchase price.
    /// </remarks>
    protected void correctForFixedChargeOnPurchPrice()
    {
        TaxTransGeneralJournalAccountEntry          taxTransGeneralJournalAccountEntry, taxTransGeneralJournalAccountEntryParent;
        TaxTrans                                    taxTrans;

        update_recordset reportTable
            setting AmountTaxReceivable = 0, AmountTaxPayable = 0, AmountUseTax = 0, ModifiesTaxBaseForPreviousLine = NoYes::Yes
            // Get all the charge parent line taxlinks
            join taxTransGeneralJournalAccountEntry
                where reportTable.TaxTransGeneralJournalAccountEntry == taxTransGeneralJournalAccountEntry.RecId
                    && taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
            join taxTrans
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
            // Find if there exists a non-charge parent line related to the same tax transaction as the charge parent line taxlink.
            // If so then the charge parent line taxlink is a fixed charge on purchase price taxlink.
            join taxTransGeneralJournalAccountEntryParent
                where taxTransGeneralJournalAccountEntryParent.TaxTrans == taxTrans.RecId
                    && taxTransGeneralJournalAccountEntryParent.MonetaryAmountType != MonetaryAmount::Charge
                    && taxTransGeneralJournalAccountEntryParent.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fill the report temp table.
    /// </summary>
    protected void fillReportTable()
    {
        TaxGeneralJournalReconciliationParentTmp    taxLinkChildParentRelation;
        GeneralJournalEntry                         generalJournalEntry;
        GeneralJournalAccountEntry                  generalJournalAccountEntry;
        MainAccountLedgerDimensionView              mainAccountLedgerDimensionView, mainAccountLedgerDimensionViewParent;
        TaxTransGeneralJournalAccountEntry          taxTransGeneralJournalAccountEntry, taxTransGeneralJournalAccountEntryParent, taxTransGeneralJournalAccountEntryLoc;
        TaxTrans                                    taxTrans;
        TaxTable                                    taxTable;
        RecordInsertList                            recordInsertList;
        TaxAmount                                   taxAmount;
        AllocationFactor                            allocationFactor;

        taxLinkChildParentRelation = this.findTaxLinkChildParentRelation();

        reportTable.setConnection(userConnection);

        recordInsertList = new RecordInsertList(reportTable.TableId, true, true, true, true, true, reportTable);
        new SkipAOSValidationPermission().assert();

        while select taxLinkChildParentRelation
            // Get child taxlink
            join AccountingCurrencyAmount, RecId, SubledgerJournalAccountEntry, AllocationFactor, MonetaryAmountType, TaxTrans from taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.RecId == taxLinkChildParentRelation.TaxTransGeneralJournalAccountEntryChild
            // Get child main account details
            join MainAccount, Name from mainAccountLedgerDimensionView
                where mainAccountLedgerDimensionView.LedgerDimensionId == taxTransGeneralJournalAccountEntry.LedgerDimension
            // Get child general journal details
            join IsCredit, AccountingCurrencyAmount from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry
            join AccountingDate, JournalNumber, SubledgerVoucher, RecId from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            // Get child tax transaction details
            join TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TransDate, Voucher, SourceDocumentLine, SourceTableId from taxTrans
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
            join TaxName from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
            // Get parent taxlink
            join RecId, MonetaryAmountType from taxTransGeneralJournalAccountEntryParent
                where taxTransGeneralJournalAccountEntryParent.RecId == taxLinkChildParentRelation.TaxTransGeneralJournalAccountEntryParent
            // Get parent main account details
            join MainAccount, Name from mainAccountLedgerDimensionViewParent
                where mainAccountLedgerDimensionViewParent.LedgerDimensionId == taxTransGeneralJournalAccountEntryParent.LedgerDimension
        {
            taxAmount = 0;
            allocationFactor = 0;
            reportTable.clear();

            reportTable.MainAccountPrimary = mainAccountLedgerDimensionViewParent.MainAccount;
            reportTable.MainAccountPrimaryName = mainAccountLedgerDimensionViewParent.Name;
            reportTable.MainAccountSecondary = mainAccountLedgerDimensionView.MainAccount;
            reportTable.MainAccountSecondaryName = mainAccountLedgerDimensionView.Name;

            reportTable.AccountingDate = taxTrans.TransDate;
            reportTable.JournalNumber = generalJournalEntry.JournalNumber;
            reportTable.Voucher = taxTrans.Voucher;
            reportTable.GeneralJournalEntry = generalJournalEntry.RecId;

            if (generalJournalAccountEntry.IsCredit)
            {
                reportTable.AmountCredit = taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount * -1;
            }
            else
            {
                reportTable.AmountDebit = taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount;
            }

            if (generalJournalAccountEntry.AccountingCurrencyAmount != taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount
                && taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry != 0)
            {
                reportTable.AmountIsFromSubledger = NoYes::Yes;
            }

            reportTable.TaxCode = taxTrans.TaxCode;
            reportTable.TaxCodeName = taxTable.TaxName;

            // Only fill out the tax amount on the parent taxlink record
            if (taxTransGeneralJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntryParent.RecId)
            {
                if (taxTransGeneralJournalAccountEntry.AllocationFactor != 1)
                {
                    reportTable.AmountIsFromAllocationFactor = NoYes::Yes;
                }

                // Don't fill out tax amount for base amount variance records
                if (taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::CashDiscountVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::DiscountVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceAdjustmentVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::TotalDiscountVariance
                    || (FeatureStateProvider::isFeatureEnabled(TaxGenJourReconRepIncPOInvDiscountAmtFlighting::instance())
                        && taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::QuantityVariance))
                {
                    reportTable.ModifiesTaxBaseForPreviousLine = NoYes::Yes;
                }
                else
                {
                    // For tax lines, tax amount should be itself
                    if (taxRelationshipFilter == TaxGeneralJournalReconciliationRelationshipFilter::Tax)
                    {
                        taxAmount = taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount;
                        allocationFactor = 1;
                    }
                    else
                    {
                        if (taxTrans.TaxDirection == TaxDirection::UseTax)
                        {
                            if (taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::QuantityVariance
                                || taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::PriceVariance)
                            {
                                while select sum(AccountingCurrencyAmount), sum(AllocationFactor) from taxTransGeneralJournalAccountEntryLoc
                                    group by taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans                                    
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
                                        && (taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType == MonetaryAmount::TaxVariance
                                           || taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType == MonetaryAmount::TaxNonRecoverableVariance)
                                {
                                    taxAmount += taxTransGeneralJournalAccountEntryLoc.AccountingCurrencyAmount;
                                    allocationFactor = taxTransGeneralJournalAccountEntryLoc.AllocationFactor;
                                }
                            }
                            else
                            {
                                // For normal tax link of source document
                                // For non-source document 
                                while select sum(AccountingCurrencyAmount), sum(AllocationFactor) from taxTransGeneralJournalAccountEntryLoc
                                    group by taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
                                        && taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType != MonetaryAmount::TaxVariance
                                        && taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType != MonetaryAmount::TaxNonRecoverableVariance
                                {
                                    taxAmount += taxTransGeneralJournalAccountEntryLoc.AccountingCurrencyAmount;
                                    allocationFactor = taxTransGeneralJournalAccountEntryLoc.AllocationFactor;
                                }
                            }
                        }
                        else
                        {
                            if (taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::QuantityVariance
                                || taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::PriceVariance)
                            {
                                select sum(AccountingCurrencyAmount), sum(AllocationFactor) from taxTransGeneralJournalAccountEntryLoc
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::Tax
                                        && taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType == MonetaryAmount::TaxVariance;
                                taxAmount = taxTransGeneralJournalAccountEntryLoc.AccountingCurrencyAmount;
                                allocationFactor = taxTransGeneralJournalAccountEntryLoc.AllocationFactor;
                            }
                            else if (taxTrans.SourceDocumentLine != 0
                                && taxTrans.TaxDirection == TaxDirection::IncomingTax
                                && taxTrans.SourceTableId == tableNum(VendInvoiceTrans)
                                && FeatureStateProvider::isFeatureEnabled(TaxGenJourReconRepIncPOInvDiscountAmtFlighting::instance()))
                            {
                                //For source document with tax variance, and tax variance is generated by discount on PO invoice
                                select sum(AccountingCurrencyAmount) from taxTransGeneralJournalAccountEntryLoc
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::Tax;
                                taxAmount = taxTransGeneralJournalAccountEntryLoc.AccountingCurrencyAmount;

                                select sum(AllocationFactor) from taxTransGeneralJournalAccountEntryLoc
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::Tax
                                        && taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType != MonetaryAmount::TaxVariance;
                                allocationFactor = taxTransGeneralJournalAccountEntryLoc.AllocationFactor;
                            }
                            else
                            {
                                // For normal tax link of source document
                                // For non-source document
                                select sum(AccountingCurrencyAmount), sum(AllocationFactor) from taxTransGeneralJournalAccountEntryLoc
                                    where taxTransGeneralJournalAccountEntryLoc.TaxTrans == taxTransGeneralJournalAccountEntry.TaxTrans
                                        && taxTransGeneralJournalAccountEntryLoc.TaxTransRelationship == TaxTransRelationshipType::Tax
                                        && taxTransGeneralJournalAccountEntryLoc.MonetaryAmountType != MonetaryAmount::TaxVariance;
                                taxAmount = taxTransGeneralJournalAccountEntryLoc.AccountingCurrencyAmount;
                                allocationFactor = taxTransGeneralJournalAccountEntryLoc.AllocationFactor;
                            }
                        }
                    }
                    if (allocationFactor)
                    {
                        if (taxTrans.TaxDirection == TaxDirection::IncomingTax)
                        {
                            reportTable.AmountTaxReceivable =
                            CurrencyExchangeHelper::amount(taxAmount * taxTransGeneralJournalAccountEntry.AllocationFactor / allocationFactor);
                        }
                        else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                        {
                            reportTable.AmountTaxPayable =
                            CurrencyExchangeHelper::amount(taxAmount * taxTransGeneralJournalAccountEntry.AllocationFactor / allocationFactor) * -1;
                        }
                        else if (taxTrans.TaxDirection == TaxDirection::UseTax)
                        {
                            reportTable.AmountUseTax = CurrencyExchangeHelper::amount(taxAmount * taxTransGeneralJournalAccountEntry.AllocationFactor / allocationFactor) * -1;
                        }
                    }
                }
            }

            // Neccesary for fixed charge on purchase price modification of report data
            reportTable.TaxTransGeneralJournalAccountEntry = taxTransGeneralJournalAccountEntry.RecId;

            recordInsertList.add(reportTable);
        }

        recordInsertList.insertDatabase();
        CodeAccessPermission::revertAssert();

        this.correctForFixedChargeOnPurchPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLinkChildParentRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Find all the parent child taxlink relations.
    /// </summary>
    /// <returns>
    ///  Temp table containing records that map the parent and child taxlink records.
    /// </returns>
    protected TaxGeneralJournalReconciliationParentTmp findTaxLinkChildParentRelation()
    {
        TaxGeneralJournalReconciliationParentTmp taxLinkChildParentRelation, taxLinkChildParentRelationProcessing;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryParent, taxTransGeneralJournalAccountEntryChild;
        TaxTrans taxTrans;

        taxLinkChildParentRelation = this.findTaxLinkParent();

        // Find all the child records that are related to a parent.
        // This only applies when the report is printing for taxRelationshipFilter TransactionLineAccount.
        if (taxRelationshipFilter == TaxGeneralJournalReconciliationRelationshipFilter::TransactionLineAccount)
        {
            taxLinkChildParentRelationProcessing.setConnection(userConnection);

            insert_recordset taxLinkChildParentRelationProcessing (TaxTransGeneralJournalAccountEntryParent, TaxTransGeneralJournalAccountEntryChild)
                // Get the parent taxlink
                select taxLinkChildParentRelation
                join RecId from taxTransGeneralJournalAccountEntryParent
                    where taxTransGeneralJournalAccountEntryParent.RecId == taxLinkChildParentRelation.TaxTransGeneralJournalAccountEntryParent
                        && ((taxTransGeneralJournalAccountEntryParent.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                                // child discount taxlinks do not apply against parent charge taxlinks
                                && taxTransGeneralJournalAccountEntryParent.MonetaryAmountType != MonetaryAmount::Charge)
                            || taxTransGeneralJournalAccountEntryParent.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
                join taxTrans
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntryParent.TaxTrans
                // Get the children taxlinks
                join RecId from taxTransGeneralJournalAccountEntryChild
                    where taxTransGeneralJournalAccountEntryChild.TaxTrans == taxTrans.RecId
                        && taxTransGeneralJournalAccountEntryChild.RecId != taxTransGeneralJournalAccountEntryParent.RecId
                        // Restrict to the child taxlink records (tax base taxlink records)
                        && (taxTransGeneralJournalAccountEntryChild.TaxTransRelationship == TaxTransRelationshipType::LineDiscount
                            || taxTransGeneralJournalAccountEntryChild.TaxTransRelationship == TaxTransRelationshipType::TotalDiscount)
                        && ((taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::ExtendedPrice
                                && (taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::Discount
                                    || (taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::PriceAdjustment
                                        || taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::TotalDiscount)
                                    || (FeatureStateProvider::isFeatureEnabled(TaxGenJourReconRepIncPOInvDiscountAmtFlighting::instance())
                                        && (taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::PriceAdjustmentVariance
                                            || taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::DiscountVariance))))
                            || (taxTransGeneralJournalAccountEntryParent.MonetaryAmountType == MonetaryAmount::QuantityVariance
                                && taxTransGeneralJournalAccountEntryChild.MonetaryAmountType == MonetaryAmount::DiscountVariance)
                            || (!taxTransGeneralJournalAccountEntryParent.SubledgerJournalAccountEntry
                                && !taxTransGeneralJournalAccountEntryChild.SubledgerJournalAccountEntry));

            taxLinkChildParentRelation.setConnection(userConnection);

            // Merge the above table of child records with the already found table of parent records
            insert_recordset taxLinkChildParentRelation (TaxTransGeneralJournalAccountEntryParent, TaxTransGeneralJournalAccountEntryChild)
                select TaxTransGeneralJournalAccountEntryParent, TaxTransGeneralJournalAccountEntryChild from taxLinkChildParentRelationProcessing;
        }

        return taxLinkChildParentRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLinkParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Find all the parent taxlink records and add them to the child parent relation table as self referencing.
    /// </summary>
    /// <returns>
    ///  Temp table containing records that map the parent taxlink records to themselves.
    /// </returns>
    /// <remarks>
    ///  Customizations such as parameter filters and extensions to the report are only expected to affect the parent
    ///  records that are to be found for the report.
    /// </remarks>
    protected TaxGeneralJournalReconciliationParentTmp findTaxLinkParent()
    {
        TaxGeneralJournalReconciliationParentTmp    taxLinkChildParentRelation;
        QueryBuildDataSource                        taxLinkParent;
        QueryRun                                    queryRun;
        RecordInsertList                            recordInsertList;

        // Populate the query with the values from the dialog parameters
        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(ledgerRecId));
        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(fromDate, toDate));

        reportQuery.dataSourceTable(tableNum(MainAccountLedgerDimensionView)).addRange(fieldNum(MainAccountLedgerDimensionView, MainAccount)).value(SysQuery::range(fromMainAccount, toMainAccount));

        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxCode)).value(SysQuery::range(fromTaxCode, toTaxCode));
        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxOrigin)).value(SysQuery::valueNot(enum2int(TaxOrigin::TaxReporting)));
        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TransDate)).value(SysQuery::range(fromDate, toDate));

        // Build the query object from user provided modifications to select the parent taxlink records.
        taxLinkParent = reportQuery.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry));

        // Tax amount taxlink records
        // (taxLinkParent.TaxTransRelationship == TaxTransRelationshipType::Tax
        //  || taxLinkParent.TaxTransRelationship == TaxTransRelationshipType::TaxInCostPrice
        //  || taxLinkParent.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable))
        if (taxRelationshipFilter == TaxGeneralJournalReconciliationRelationshipFilter::Tax)
        {
            taxLinkParent.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(
                strFmt('((%1.%2 == %3) || (%1.%2 == %4) || (%1.%2 == %5))',
                    taxLinkParent.name(), fieldStr(TaxTransGeneralJournalAccountEntry, TaxTransRelationship), enum2int(TaxTransRelationshipType::Tax),
                    enum2int(TaxTransRelationshipType::TaxInCostPrice), enum2int(TaxTransRelationshipType::UseTaxPayable)));
        }
        // Tax base taxlink records
        // (taxLinkParent.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
        //  || taxLinkParent.TaxTransRelationship == TaxTransRelationshipType::CashDiscount)
        else if (taxRelationshipFilter == TaxGeneralJournalReconciliationRelationshipFilter::TransactionLineAccount)
        {
            taxLinkParent.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(
                strFmt('((%1.%2 == %3) || (%1.%2 == %4))',
                    taxLinkParent.name(), fieldStr(TaxTransGeneralJournalAccountEntry, TaxTransRelationship),
                    enum2int(TaxTransRelationshipType::TransactionLineAccount), enum2int(TaxTransRelationshipType::CashDiscount)));
        }

        reportQuery.clearAllFields();
        Map fieldMapping = new Map(Types::String, Types::Container);

        taxLinkParent.addSelectionField(fieldNum(TaxTransGeneralJournalAccountEntry, RecId));
        fieldMapping.insert(fieldStr(TaxGeneralJournalReconciliationParentTmp, TaxTransGeneralJournalAccountEntryChild),
            [taxLinkParent.uniqueId(), fieldStr(TaxTransGeneralJournalAccountEntry, RecId)]);

        taxLinkChildParentRelation.setConnection(userConnection);
        Query::insert_recordset(taxLinkChildParentRelation, fieldMapping, reportQuery);

        update_recordset taxLinkChildParentRelation
            setting TaxTransGeneralJournalAccountEntryParent = taxLinkChildParentRelation.TaxTransGeneralJournalAccountEntryChild;

        return taxLinkChildParentRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes ranges with default values if values are not provided.
    /// </summary>
    protected void initializeRanges()
    {
        MainAccount mainAccount;
        TaxTable taxTable;

        toDate = contract.parmToDate();

        if (toDate == dateNull())
        {
            toDate = dateMax();
        }

        fromDate = contract.parmFromDate();

        fromMainAccount = contract.parmFromMainAccount();

        if (fromMainAccount == '')
        {
            select firstonly MainAccountId from mainAccount
                order by MainAccountId asc;

            fromMainAccount = mainAccount.MainAccountId;
        }

        toMainAccount = contract.parmToMainAccount();

        if (toMainAccount == '')
        {
            select firstonly MainAccountId from mainAccount
                order by MainAccountId desc;

            toMainAccount = mainAccount.MainAccountId;
        }

        fromTaxCode = contract.parmFromTaxCode();

        if (fromTaxCode == '')
        {
            select firstonly TaxCode from taxTable
                order by TaxCode asc;

            fromTaxCode = taxTable.TaxCode;
        }

        toTaxCode = contract.parmToTaxCode();

        if (toTaxCode == '')
        {
            select firstonly TaxCode from taxTable
                order by TaxCode desc;

            toTaxCode = taxTable.TaxCode;
        }

        ledgerRecId = Ledger::current();

        taxRelationshipFilter = contract.parmRelationshipFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportContract</Name>
				<Source><![CDATA[
    public TaxGeneralJournalReconciliationContract parmReportContract(TaxGeneralJournalReconciliationContract _contract = contract)
    {
        contract = _contract;
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportQuery</Name>
				<Source><![CDATA[
    public Query parmReportQuery(Query _query = reportQuery)
    {
        reportQuery = _query;
        return reportQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTable</Name>
				<Source><![CDATA[
    public TaxGeneralJournalReconciliationTmp parmReportTable(TaxGeneralJournalReconciliationTmp _temp = reportTable)
    {
        reportTable = _temp;
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public Connection parmUserConnection(Connection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Process the business logic for the report and fill the report temp table.
    /// </summary>
    public void process()
    {
        reportTable.setConnection(userConnection);

        this.initializeRanges();
        this.fillReportTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>