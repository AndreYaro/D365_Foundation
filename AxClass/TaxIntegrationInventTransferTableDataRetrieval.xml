<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationInventTransferTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationInventTransferTableDataRetrieval</c> class retrieves data from <c>InventTransferTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(InventTransferTable))]
public class TaxIntegrationInventTransferTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected InventTransferTable inventTransferTable;

    protected InventTransferLine inventTransferLine;

    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordInventoryFlight::instance().isEnabled()
             && document.getLocalRecord())
        {
            inventTransferTable = document.getLocalRecord();
            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.inventTransferTable)
               .where(this.inventTransferTable, fieldStr(InventTransferTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.inventTransferLine)
            .where(this.inventTransferLine, fieldStr(InventTransferLine, TransferId))
                .isEqualToLiteral(this.inventTransferTable.TransferId)
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.inventTransferLine, fieldStr(InventTransferLine, InventDimId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.inventTransferTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.inventTransferTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.inventTransferLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.inventTransferLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.inventTransferLine.TableId,
            this.inventTransferLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document by default.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                document.setDirection(TaxIntegrationDirection::Sales);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                document.setDirection(TaxIntegrationDirection::Purchase);
                break;
            default:
                break;
        }
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>InventTransferTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                document.getInventory().setWarehouse(this.inventTransferTable.InventLocationIdFrom);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                document.getInventory().setWarehouse(this.inventTransferTable.InventLocationIdTo);
                break;
            default:
                break;
        }

        document.setDeliveryTerm(this.inventTransferTable.DlvTermId);
        document.setListCode(this.inventTransferTable.Listcode);
        document.setReasonTableRefRecId(this.inventTransferTable.ReasonTableRef);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setShipDate(this.inventTransferTable.ShipDate);
            document.setReceiveDate(this.inventTransferTable.ReceiveDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.inventTransferTable.FromPostalAddress);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.inventTransferTable.ToPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>InventTransferLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromInventDim(_line, this.inventDim);

        _line.setItemId(this.inventTransferLine.ItemId);
        this.copyToLineFromInventTable(_line, InventTable::find(this.inventTransferLine.ItemId));
        _line.setIntrastatCommodityId(this.inventTransferLine.IntrastatCommodity);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }
        _line.setText(_line.getItemId());
        _line.setUnit(this.inventTransferLine.UnitId);
        _line.setTransactionCurrencyCode(document.getAccountingCurrencyCode());
        _line.setInventoryTransactionId(this.inventTransferLine.InventTransId);

        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                _line.setDeliveryDate(this.inventTransferLine.getDeliveryDate(document.getInvoiceDate()));
                _line.setLedgerDimension(this.inventTransferLine.DimensionDefaultShipFrom);
                _line.setTaxGroup(this.inventTransferLine.TaxGroupShipment);
                _line.setTaxItemGroup(this.inventTransferLine.TaxItemGroupShipment);
                _line.setOverrideSalesTax(this.inventTransferLine.OverrideSalesTaxShipment);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                _line.setDeliveryDate(this.inventTransferLine.getDeliveryDate(document.getInvoiceDate()));
                _line.setLedgerDimension(this.inventTransferLine.DimensionDefaultShipTo);
                _line.setTaxGroup(this.inventTransferLine.TaxGroupReceipt);
                _line.setTaxItemGroup(this.inventTransferLine.TaxItemGroupReceipt);
                _line.setOverrideSalesTax(this.inventTransferLine.OverrideSalesTaxReceipt);
                break;
            default:
                break;
        }

        InventMovement inventMovement = InventMovement::construct(this.inventTransferLine, InventMovSubType::TransferOrderTo);
        _line.setOperationLedgerDimension(inventMovement.accountBalanceSheet());

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _line.setShipDate(this.inventTransferLine.ShipDate);
            _line.setReceiveDate(this.inventTransferLine.ReceiveDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        switch (document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                _line.setQuantity(this.inventTransferLine.QtyRemainShip);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                _line.setQuantity(this.inventTransferLine.QtyRemainReceive);
                break;
            default:
                break;
        }

        _line.setLineAmount(PriceDisc::price2Amount(
            this.inventTransferLine.UnitPrice,
            1,
            0,
            _line.getQuantity(),
            this.inventTransferLine.QtyTransfer,
            0,
            0,
            _line.getTransactionCurrencyCode(),
            this.inventTransferLine.NetAmount));
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.inventTransferTable.FromPostalAddress);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.inventTransferTable.ToPostalAddress);

        this.copyToLineFromShipmentAddressWithCountryRegionType(
            _line,
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>