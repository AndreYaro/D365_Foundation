<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTransApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the complement for <c>CustInvoiceTrans</c> methods behavior.
/// </summary>
public static class CustInvoiceTransApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustInvoiceTrans_Post_initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the specific <c>CustInvoiceTrans</c> field value according to sales order settings.
    /// </summary>
    /// <param name = "args">The event arguments.</param>
    [PostHandlerFor(tableStr(CustInvoiceTrans), tableMethodStr(CustInvoiceTrans, initFromSalesLine))]
    public static void CustInvoiceTrans_Post_initFromSalesLine(XppPrePostArgs _args)
    {
        const str SalesLineArgName = 'salesLine';

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            CustInvoiceTrans custInvoiceTrans = _args.getThis() as CustInvoiceTrans;

            if (custInvoiceTrans)
            {
                SalesLine salesLine = _args.getArg(SalesLineArgName) as SalesLine;

                if (salesLine)
                {
                    custInvoiceTrans.GoodsForFree_IT = salesLine.GoodsForFree_IT;
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CustInvoiceTrans_Post_insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes notes attachment according to feature setup.
    /// </summary>
    /// <param name = "_args">The event arguments.</param>
    [PostHandlerFor(tableStr(CustInvoiceTrans), tableMethodStr(CustInvoiceTrans, insert))]
    public static void CustInvoiceTrans_Post_insert(XppPrePostArgs _args)
    {
        if (CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            CustInvoiceTrans custInvoiceTrans = _args.getThis() as CustInvoiceTrans;

            if (custInvoiceTrans)
            {
                FreeNotesTable_IT::insertDocumentRef(custInvoiceTrans);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CustInvoiceTrans_Post_update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes notes attachment according to feature setup.
    /// </summary>
    /// <param name = "_args">The event arguments.</param>
    [PostHandlerFor(tableStr(CustInvoiceTrans), tableMethodStr(CustInvoiceTrans, update))]
    public static void CustInvoiceTrans_Post_update(XppPrePostArgs _args)
    {
        if (CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            CustInvoiceTrans custInvoiceTrans = _args.getThis() as CustInvoiceTrans;

            if (custInvoiceTrans)
            {
                FreeNotesTable_IT::updateDocumentRef(custInvoiceTrans);
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>