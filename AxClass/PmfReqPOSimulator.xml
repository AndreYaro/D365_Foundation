<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfReqPOSimulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Production or batch order creation simulator.
/// </summary>
abstract class PmfReqPOSimulator extends PmfSimulator
{
    InventLocationId fromInventLocationId, toInventLocationId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _actual)
    {
        super(_actual as ReqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Supply a source warehouse for Transfer type production or batch
    /// orders.
    /// </summary>
    /// <param name="_from">
    /// The warehouse to transfer from.
    /// </param>
    /// <returns>
    /// The current warehouse to transfer from.
    /// </returns>
    public InventLocationId parmFromInventLocationId(InventLocationId _from = '')
    {
        if (!prmisDefault(_from))
        {
            fromInventLocationid = _from;
        }

        return fromInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Supply a destination warehouse for Transfer type production or batch
    /// orders.
    /// </summary>
    /// <param name="_to">
    /// A destination warehouse for Transfer type production or batch
    /// </param>
    /// <returns>
    /// Current destination warehouse for Transfer type production or batch
    /// </returns>
    public InventLocationId parmToInventLocationId(InventLocationId _to = '')
    {
        if (!prmisDefault(_to))
        {
            toInventLocationid = _to;
        }

        return toInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPOType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The type of production or batch order. Must be implemented by a derived class.
    /// </summary>
    /// <returns>
    /// The type of production or batch order.
    /// </returns>
    abstract protected ReqPOType reqPOType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actual simulation.
    /// </summary>
    protected void run()
    {
        ReqPO   simulatedPO = simulatedRecord as ReqPO;

        ReqPlannedOrder::construct().insertFromForm(
            simulatedPO,
            simulatedPO.inventDim(),
            this.parmFromInventLocationId(),
            this.parmToInventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Special handling when updating the simulated record field with the
    /// actual record's corresponding field.
    /// </summary>
    /// <param name="_actual">
    /// The actual record to update the simulated record with.
    /// </param>
    /// <param name="_fieldId">
    /// The field Id of the actual record's field to update the simulated
    /// record's corresponding field with.
    /// </param>
    protected void updateField(Common _actual, fieldId _fieldId)
    {
        ReqPO   simulatedPO = simulatedRecord as ReqPO;
        ReqPO   actualPO    = _actual as ReqPO;

        if (_fieldId == fieldNum(ReqPO, Qty)
            && PdsGlobal::pdsIsCWItem(actualPO.ItemId))
        {
            _fieldId = fieldNum(ReqPO, PdsCWReqQty);
        }

        super(_actual, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the simulated record from the actual record. Any special
    /// initializations can occur here.
    /// </summary>
    /// <param name="_actualRecord">
    /// The actual record to update the simulated record with.
    /// </param>
    protected void updateRecord(Common _actualRecord)
    {
        ReqPO   simulatedPO = simulatedRecord as ReqPO;
        ReqPO   actualPO    = _actualRecord as ReqPO;

        simulatedPO.initValue();
        simulatedPO.initReqPOType(actualPO.PlanVersion, this.reqPOType());
        this.updateField(_actualRecord, fieldNum(ReqPO, ItemId));
        simulatedPO.initReqPOType(actualPO.PlanVersion, this.reqPOType());

        this.updateField(_actualRecord, fieldNum(ReqPO, CovInventDimId));
        this.updateField(_actualRecord, fieldNum(ReqPO, ReqDateOrder));

        if (!PdsGlobal::pdsIsCWItem(actualPO.ItemId))
            this.updateField(_actualRecord, fieldNum(ReqPO, Qty));
        else
            this.updateField(_actualRecord, fieldNum(ReqPO, PdsCWReqQty));

        simulatedPO.setMinMaxQty(simulatedPO.CovInventDimId);

        this.updateField(_actualRecord, fieldNum(ReqPO, VendId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a production or batch order simulator.
    /// </summary>
    /// <param name="_actualReqPO">
    /// An actual (i.e., existing) production or batch order to simulate.
    /// </param>
    /// <param name="_reqPOType">
    /// The type of production or batch order to simulate. This will determine the
    /// type of simulator to construct.
    /// </param>
    /// <returns>
    /// A production or batch order simulator.
    /// </returns>
    public static PmfReqPOSimulator construct(ReqPO _actualReqPO, ReqPOType _reqPOType)
    {
        PmfReqPOSimulator   simulator;

        if (_reqPOType == ReqPOType::Production)
        {
            simulator = PmfPlannedOrderSimulator::construct(_actualreqPO);
        }

        return simulator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the simulation is equal to the actual production or batch order.
    /// The simulation is considered equal to actual if both have the same quantity,
    /// CW quantity, BOM or formula version, and route version.
    /// </summary>
    /// <param name="_actualReqPO">
    /// The actual production or batch order.
    /// </param>
    /// <param name="_reqPOType">
    /// Type of production or batch order to simulate.
    /// </param>
    /// <param name="_from">
    /// If the production or batch order is of type transfer, the warehouse to transfer
    /// from.
    /// </param>
    /// <param name="_to">
    /// If the production or batch order is of type transfer, the warehouse to transfer
    /// to.
    /// </param>
    /// <returns>
    /// True if equal; otherwise, false.
    /// </returns>
    public static boolean isEqual(ReqPO _actualReqPO, ReqPOType _reqPOType, InventLocationId _from = '', InventLocationId _to = '')
    {
        PmfReqPOSimulator   simulator   = PmfReqPOSimulator::construct(_actualReqPO, _reqPOType);
        ReqPO               simulatedPO;

        if (!prmisDefault(_from))
            simulator.parmFromInventLocationId(_from);
        if (!prmisDefault(_to))
            simulator.parmToInventLocationId(_to);

        simulatedPO = simulator.execute();

        return simulatedPO.Qty == _actualReqPO.Qty
            && simulatedPO.PdsCWReqQty == _actualReqPO.PdsCWReqQty
            && simulatedPO.ItemBomId == _actualReqPO.ItemBomId
            && simulatedPO.ItemRouteId == _actualReqPO.ItemRouteId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>