<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerBalanceReportingDimensionProviderSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class GeneralLedgerBalanceReportingDimensionProviderSim_IT
{
    private GeneralLedgerBalanceProcessContract contract;
    private GeneralLedgerBalanceInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForContract</Name>
				<Source><![CDATA[
    internal static GeneralLedgerBalanceReportingDimensionProviderSim_IT newForContract(GeneralLedgerBalanceProcessContract _contract)
    {
        GeneralLedgerBalanceReportingDimensionProviderSim_IT reportingDimensionProvider = new GeneralLedgerBalanceReportingDimensionProviderSim_IT();
        reportingDimensionProvider.contract = _contract;

        return reportingDimensionProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = GeneralLedgerBalanceInstrumentationLogger::createLogger(classStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdateAllReportingStructureDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes delta <c>GeneralLedgerBalanceReportingDimensionReferenceSim_IT</c> and <c>GeneralLedgerBalanceReportingDimension</c> table
    /// record creation which link original <c>DimensionAttributeValueCombination</c> tables records with flattened structured
    /// dimension value records (GeneralLedgerBalanceReportingDimension).
    /// </summary>
    /// <param name = "_unprocessedGeneralJournalEntryRecIds">A <c>GeneralLedgerBalanceRecIdTmp</c> temp table reference with
    /// <c>GeneralLedgerBalanceUnprocessedTransactionsSim_IT</c> records updated for delta processing.
    /// </param>
    internal void processUpdateAllReportingStructureDimensions(GeneralLedgerBalanceRecIdTmp _unprocessedGeneralJournalEntryRecIds)
    {
        using (var activityContext = logger.processActivities().getActivityContextForBalanceProcess(contract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, processUpdateAllReportingStructureDimensions)))
        {
            GeneralLedgerBalanceRecIdTmp generalLedgerBalanceLedgerDimensionRecIdTmp;

            try
            {
                if (appl.ttsLevel() == 0)
                {
                    throw error("@GeneralLedger:GeneralLedgerBalanceUpdateProcessRequiresTransaction");
                }

                generalLedgerBalanceLedgerDimensionRecIdTmp = this.createLedgerDimensionSourceUpdateTmp(_unprocessedGeneralJournalEntryRecIds);

                DimensionHierarchy dimensionHierarchy;
                GeneralLedgerBalanceDimensionHierarchyState dimensionHierarchyState;

                while select dimensionHierarchy
                    where dimensionHierarchy.StructureType == DimensionHierarchyType::Focus
                    join dimensionHierarchyState
                        where dimensionHierarchyState.DimensionHierarchy == dimensionHierarchy.RecId
                            && dimensionHierarchyState.Tracking == NoYes::Yes
                {
                    GeneralLedgerBalanceContract balanceContract = GeneralLedgerBalanceContract::newForProcessContract(
                        contract,
                        dimensionHierarchy.RecId);

                    this.createReportingStructureDimensions(generalLedgerBalanceLedgerDimensionRecIdTmp, balanceContract);
                }
            }
            finally
            {
                generalLedgerBalanceLedgerDimensionRecIdTmp.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingStructureDimensions</Name>
				<Source><![CDATA[
    public void createReportingStructureDimensions(
        GeneralLedgerBalanceRecIdTmp _generalLedgerBalanceLedgerDimensionRecIdTmp,
        GeneralLedgerBalanceContract _balanceContract)
    {
        System.Exception ex;

        if (contract.parmIsUpdate())
        {
            if (appl.ttsLevel() == 0)
            {
                throw error("@GeneralLedger:GeneralLedgerBalanceUpdateProcessRequiresTransaction");
            }
        }

        using (var activityContext = logger.processActivities().getActivityContextForReportingDimensions(_balanceContract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, createReportingStructureDimensions)))
        {
            try
            {
                this.processGenerateAccountReferencesChunks(_generalLedgerBalanceLedgerDimensionRecIdTmp, _balanceContract);
                this.processCreateOriginalAccountToReportingStructureDimensionsChunks(_balanceContract);
                this.processUpdateOriginalAccountToDimensionsMappingChunks(_balanceContract);
            }
            catch (ex)
            {
                if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
                {
                    retry;
                }

                throw ex;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInitializeReportingStructureDimensions</Name>
				<Source><![CDATA[
    internal void processInitializeReportingStructureDimensions(DimensionHierarchyId _dimensionHierarchyRecId)
    {
        using (var activityContext = logger.processActivities().getActivityContextForBalanceProcess(contract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, processInitializeReportingStructureDimensions)))
        {
            GeneralLedgerBalanceRecIdTmp generalLedgerBalanceRecIdTmp;

            try
            {
                generalLedgerBalanceRecIdTmp = this.createLedgerDimensionSourceRebuildTmp();

                GeneralLedgerBalanceContract balanceContract = GeneralLedgerBalanceContract::newForProcessContract(
                    contract,
                    _dimensionHierarchyRecId);

                this.createReportingStructureDimensions(generalLedgerBalanceRecIdTmp, balanceContract);
            }
            finally
            {
                generalLedgerBalanceRecIdTmp.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccountReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>GeneralLedgerBalanceReportingDimensionReferenceSim_IT</c> to link original <c>DimensionAttributeValueCombination</c> tables records
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <param name = "_generalLedgerBalanceLedgerDimensionRecIdTmp">A <c>GeneralLedgerBalanceRecIdTmp</c> temp table instance containing
    /// GeneralLedgerAccountEntrySim_IT.LedgerDimesion values to process.
    /// </param>
    /// <returns>The inserted record count.</returns>
    private int64 generateAccountReferences(GeneralLedgerBalanceContract _balanceContract, GeneralLedgerBalanceRecIdTmp _generalLedgerBalanceLedgerDimensionRecIdTmp)
    {
        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = this.getGeneralLedgerBalanceSqlStatementProvider(_balanceContract);

        GeneralLedgerBalanceSqlStatement sqlStatement = statementProvider.buildGenerateAccountReferencesSimITSqlStatement(_generalLedgerBalanceLedgerDimensionRecIdTmp);

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGenerateAccountReferencesChunks</Name>
				<Source><![CDATA[
    private void processGenerateAccountReferencesChunks(
        GeneralLedgerBalanceRecIdTmp _generalLedgerBalanceLedgerDimensionRecIdTmp,
        GeneralLedgerBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(
            _balanceContract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, processGenerateAccountReferencesChunks)))
        {
            int64 recordCount = 1;

            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.generateAccountReferences(_balanceContract, _generalLedgerBalanceLedgerDimensionRecIdTmp);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionSourceRebuildTmp</Name>
				<Source><![CDATA[
    private GeneralLedgerBalanceRecIdTmp createLedgerDimensionSourceRebuildTmp()
    {
        GeneralLedgerBalanceRecIdTmp generalLedgerBalanceRecIdTmp;

        GeneralJournalAccountEntrySim_IT generalJournalAccountEntry;
        System.Exception ex;

        try
        {
            insert_recordset generalLedgerBalanceRecIdTmp (RecordId)
                select LedgerDimension from generalJournalAccountEntry
                    group by generalJournalAccountEntry.LedgerDimension;

            return generalLedgerBalanceRecIdTmp;
        }
        catch (ex)
        {
            if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
            {
                retry;
            }

            throw ex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalAccountToReportingStructureDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>GeneralLedgerBalanceReportingDimension</c> records from the original <c>DimensionAttributeValueCombination</c> tables records
    /// in a flattened structure format.
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <returns>The inserted record count.</returns>
    private int64 createOriginalAccountToReportingStructureDimensions(GeneralLedgerBalanceContract _balanceContract)
    {
        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = this.getGeneralLedgerBalanceSqlStatementProvider(_balanceContract);

        GeneralLedgerBalanceSqlStatement sqlStatement = statementProvider.buildOriginalAccountToReportingStructureDimensionsSqlStatement(
            tableStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT));

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCreateOriginalAccountToReportingStructureDimensionsChunks</Name>
				<Source><![CDATA[
    private void processCreateOriginalAccountToReportingStructureDimensionsChunks(
        GeneralLedgerBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(
            _balanceContract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, processCreateOriginalAccountToReportingStructureDimensionsChunks)))
        {
            int64 recordCount = 1;

            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.createOriginalAccountToReportingStructureDimensions(_balanceContract);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalAccountToDimensionsMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>GeneralLedgerBalanceReportingDimensionReferenceSim_IT</c> to link original <c>DimensionAttributeValueCombination</c> tables records
    /// to the <c>GeneralLedgerBalanceReportingDimension</c> table records.
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <returns>The updated record count.</returns>
    private int64 updateOriginalAccountToDimensionsMapping(GeneralLedgerBalanceContract _balanceContract)
    {
        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = this.getGeneralLedgerBalanceSqlStatementProvider(_balanceContract);

        GeneralLedgerBalanceSqlStatement sqlStatement = statementProvider.buildUpdateOriginalAccountToDimensionsMappingSqlStatement();

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdateOriginalAccountToDimensionsMappingChunks</Name>
				<Source><![CDATA[
    private void processUpdateOriginalAccountToDimensionsMappingChunks(
        GeneralLedgerBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(
            _balanceContract,
            methodStr(GeneralLedgerBalanceReportingDimensionProviderSim_IT, processUpdateOriginalAccountToDimensionsMappingChunks)))
        {
            int64 recordCount = 1;

            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.updateOriginalAccountToDimensionsMapping(_balanceContract);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionSourceUpdateTmp</Name>
				<Source><![CDATA[
    private GeneralLedgerBalanceRecIdTmp createLedgerDimensionSourceUpdateTmp(GeneralLedgerBalanceRecIdTmp _unprocessedGeneralJournalEntryRecIds)
    {
        GeneralLedgerBalanceRecIdTmp generalLedgerBalanceRecIdTmp;

        GeneralJournalAccountEntrySim_IT generalJournalAccountEntry;
        System.Exception ex;

        try
        {
            insert_recordset generalLedgerBalanceRecIdTmp (RecordId)
                select LedgerDimension from generalJournalAccountEntry
                    group by generalJournalAccountEntry.LedgerDimension
                join _unprocessedGeneralJournalEntryRecIds
                    where generalJournalAccountEntry.GeneralJournalEntry == _unprocessedGeneralJournalEntryRecIds.RecordId;

            return generalLedgerBalanceRecIdTmp;
        }
        catch (ex)
        {
            if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
            {
                retry;
            }

            throw ex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralLedgerBalanceSqlStatementProvider</Name>
				<Source><![CDATA[
    private GeneralLedgerBalanceSqlStatementProviderSim_IT getGeneralLedgerBalanceSqlStatementProvider(GeneralLedgerBalanceContract _balanceContract)
    {
        GeneralLedgerBalanceSqlStatementContract statementContract = GeneralLedgerBalanceSqlStatementContract::newFromBalanceContract(_balanceContract);

        return GeneralLedgerBalanceSqlStatementProviderSim_IT::newForContract(statementContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>