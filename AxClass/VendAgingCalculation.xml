<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAgingCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAgingCalculation</c> class runs aging process for vendors.
/// </summary>
/// <remarks>
/// Aging is a process which provides the way to analyze how big and/or old are the unpaid amounts of the specific vendor.
/// This class and it's derivatives provide the set-based calculation of unpaid amounts per aging buckets which are built either based on system-defined aging period definition or custom settings.
/// The result is saved in the table buffer which then is used for other functionalities like reporting.
/// </remarks>
class VendAgingCalculation extends CustVendAgingCalculation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomerOrVendorTableId</Name>
				<Source><![CDATA[
    protected TableId getCustomerOrVendorTableId()
    {
        return tableNum(VendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTableId</Name>
				<Source><![CDATA[
    protected TableId getTransactionTableId()
    {
        return tableNum(VendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected CustVendAgingCalculatedTmp postProcess()
    {
        var totalBalances = super();

        if (excludeNegativeBalance || excludeZeroBalance)
        {
            delete_from agingCalculatedTmp
                exists join totalBalances
                    where agingCalculatedTmp.AccountNum == totalBalances.AccountNum
                            && ((totalBalances.Amount == 0 && excludeZeroBalance) || (totalBalances.Amount > 0 && excludeNegativeBalance));
        }

        if (!excludeZeroBalance)
        {
            insert_recordset agingCalculatedTmp (AccountNum, Txt)
                select AccountNum, Name from customersVendors
                    notExists join totalBalances
                        where customersVendors.AccountNum == totalBalances.AccountNum;
        }

        return totalBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDetailsOfTransactions</Name>
				<Source><![CDATA[
    protected CustVendAgingProcessingDetailsTmp selectDetailsOfTransactions(CustVendAgingProcessingTmp _agingProcessingTmp)
    {
        var agingProcessingDetailsTmp = super(_agingProcessingTmp);

        // The update below cannot be done in super because super works with maps (CustVendTransOpen and CustVendSettlement).
        // Compile error pops up when update_recordset is called with a map joined to the updated table.

        switch (agedBy)
        {
            case DateTransactionDuedate::DueDate:
                VendSettlement vendSettlement;

                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = vendSettlement.DueDate
                    join _agingProcessingTmp
                        where agingProcessingDetailsTmp.ProcessingRecId == _agingProcessingTmp.RecId
                    join vendSettlement
                        where _agingProcessingTmp.SettlementRecId == vendSettlement.RecId
                                && vendSettlement.TransDate > balanceAsOfDate
                                && vendSettlement.DueDate > dateNull();

                VendTransOpen vendTransOpen;

                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = vendTransOpen.DueDate
                    join _agingProcessingTmp
                        where agingProcessingDetailsTmp.ProcessingRecId == _agingProcessingTmp.RecId
                    join vendTransOpen
                        where _agingProcessingTmp.TransOpenRecId == vendTransOpen.RecId
                                && vendTransOpen.TransDate <= balanceAsOfDate
                                && vendTransOpen.DueDate > dateNull();
                break;
            case DateTransactionDuedate::DocumentDate:
                VendTrans vendTrans;

                update_recordSet agingProcessingDetailsTmp
                    setting
                        TransDate = vendTrans.DocumentDate
                    join _agingProcessingTmp
                        where agingProcessingDetailsTmp.ProcessingRecId == _agingProcessingTmp.RecId
                    join vendTrans
                        where _agingProcessingTmp.TransRecId == vendTrans.RecId
                                && vendTrans.TransDate <= balanceAsOfDate
                                && (!vendTrans.Closed || vendTrans.Closed >= balanceAsOfDate)
                                && vendTrans.DocumentDate > dateNull()
                    exists join customersVendors
                        where vendTrans.AccountNum == customersVendors.AccountNum;
                break;
        }

        return agingProcessingDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTransactions</Name>
				<Source><![CDATA[
    protected CustVendAgingProcessingTmp selectTransactions()
    {
        var agingProcessingTmp = super();

        VendTrans vendTrans;
        update_recordset agingProcessingTmp
            setting
                IsPayment = true
            exists join vendTrans
                where vendTrans.RecId == agingProcessingTmp.TransRecId
                   && vendTrans.AmountCur > 0
                   && !vendTrans.Invoice;

        return agingProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    protected CustVendSettlement setCustVendSettlementBuffer()
    {
        return CustVendSettlement::getEmptyTableBuffer(ModuleCustVend::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransBuffer</Name>
				<Source><![CDATA[
    protected CustVendTrans setCustVendTransBuffer()
    {
        return CustVendTrans::getEmptyTableBuffer(ModuleCustVend::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenBuffer</Name>
				<Source><![CDATA[
    protected CustVendTransOpen setCustVendTransOpenBuffer()
    {
        return CustVendTransOpen::getEmptyTableBuffer(ModuleCustVend::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldMapping</Name>
				<Source><![CDATA[
    protected Map generateFieldMapping()
    {
        var insertRecordsetMap = new Map(Types::String, Types::Container);
        var vendTableId = this.getCustomerOrVendorTableId();
        var dataSourceId = custVendQuery.query().dataSourceTable(vendTableId).uniqueId();

        custVendQuery.query().clearAllFields();

        var fieldList = custVendQuery.query().dataSourceTable(vendTableId).fields();

        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        vendTableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldStr(VendTable, AccountNum),
                        fieldStr(CustVendTransAging, AccountNum));

        this.addDestinationFieldToFieldMapping(
                        fieldList,
                        vendTableId,
                        insertRecordsetMap,
                        dataSourceId,
                        fieldStr(VendTable, VendGroup),
                        fieldStr(CustVendTransAging, GroupId));

        return insertRecordsetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderByFieldsForDatasource</Name>
				<Source><![CDATA[
    protected str addOrderByFieldsForDatasource(QueryBuildDataSource _qbds, str _orderByStr)
    {
        str ret = _orderByStr;

        ret = super(_qbds, _orderByStr);

        if (_qbds.table() == tableNum(VendTable))
        {
            for (int i=1; i<=_qbds.sortFieldCount(); i++)
            {
                switch (_qbds.sortField(i))
                {
                    case fieldNum(VendTable, AccountNum):
                        ret = ret + ' ' + fieldStr(CustVendTransAging, AccountNum) + this.getSortingDirection(_qbds, i);
                        break;
                    case fieldNum(VendTable, VendGroup):
                        ret = ret + ' ' + fieldStr(CustVendTransAging, GroupId) + this.getSortingDirection(_qbds, i);
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>