<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoicePrintJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoicePrintJob</c> class enables users to print invoices by using ranges and also
///    handles batch invoice printing.
/// </summary>
class CustInvoicePrintJob extends RunBaseBatch implements BatchRetryable
{
    // Class variables
    CustInvoicesToPrint custInvoicesToPrint;
    CustInvoicePrintAccount accountType;
    CustAccount fromAccount;
    CustAccount toAccount;
    CustInvoicePrintDate invoiceDateType;
    TransDate fromTransDate;
    TransDate toTransDate;
    PrintCopyOriginal printCopyOriginal;

    // <GEERU>
    NoYes acceptanceReport;
    // </GEERU>

    container printerSettingsCopy;
    container printerSettingsOriginal;
    NoYes usePrintManagementDest;

    // <GEERU>
    #DEFINE.CurrentVersion(2)
    // </GEERU>
    #LOCALMACRO.CurrentList
        accountType,
        fromAccount,
        toAccount,
        invoiceDateType,
        fromTransDate,
        toTransDate,
        printCopyOriginal,
        printerSettingsCopy,
        printerSettingsOriginal,
        usePrintManagementDest,
        custInvoicesToPrint
    // <GEERU>
        ,
        acceptanceReport
    // </GEERU>
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForFreeText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query by using the ranges that are defined by the user.
    /// </summary>
    /// <returns>
    ///    A query object that is used to get the free text invoice records based on the user-defined ranges.
    /// </returns>
    /// <remarks>
    ///    The query object is used to pull the invoices from the <c>CustInvoiceTable</c> table.
    /// </remarks>
    final protected Query buildQueryForFreeText()
    {
        Query query;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRangeAccount;
        QueryBuildRange queryBuildRangeTransDate;

        query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(CustInvoiceTable));

        if (this.parmAccountType() == CustInvoicePrintAccount::InvoiceAccount)
        {
            queryBuildRangeAccount = queryBuildDataSource.addRange(fieldnum(CustInvoiceTable, InvoiceAccount));
        }
        else
        {
            queryBuildRangeAccount = queryBuildDataSource.addRange(fieldnum(CustInvoiceTable, OrderAccount));
        }

        if (this.parmFromAccount() || this.parmToAccount())
        {
            queryBuildRangeAccount.value(queryRange(this.parmFromAccount(), this.parmToAccount()));
        }

        if (this.parmInvoiceDateType() == CustInvoicePrintDate::InvoiceDate)
        {
            queryBuildRangeTransDate = queryBuildDataSource.addRange(fieldnum(CustInvoiceTable, InvoiceDate));
        }
        else
        {
            queryBuildRangeTransDate = queryBuildDataSource.addRange(fieldnum(CustInvoiceTable, DueDate));
        }

        if (this.parmFromTransDate() || this.parmToTransDate())
        {
            queryBuildRangeTransDate.value(queryRange(this.parmFromTransDate(), this.parmToTransDate()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query by using the ranges defined by the user.
    /// </summary>
    /// <returns>
    ///    A query object based on the user-defined ranges.
    /// </returns>
    /// <remarks>
    ///    The query object is used to pull the invoices from the <c>CustTrans</c> and <c>CustTransOpen</c> tables.
    /// </remarks>
    protected Query buildQueryForInvoices()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(CustTransOpen));

        QueryBuildDataSource queryBuildDataSourceCustTrans = queryBuildDataSource.addDataSource(tablenum(CustTrans));
        queryBuildDataSourceCustTrans.relations(true);

        queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, TransType)).value(queryValue(LedgerTransType::Cust));
        queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, TransType)).value(queryValue(LedgerTransType::Sales));
        queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, TransType)).value(queryValue(LedgerTransType::Project));

        QueryBuildRange queryBuildRangeInvoice = queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, Invoice));
        queryBuildRangeInvoice.value(SysQuery::valueNot(''));

        QueryBuildRange queryBuildRangeAccount = queryBuildDataSource.addRange(fieldnum(CustTransOpen, AccountNum));

        if (this.parmFromAccount() != this.parmToAccount())
        {
            queryBuildRangeAccount = queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, OrderAccount));
            queryBuildRangeAccount.value(queryRange(this.parmFromAccount(), this.parmToAccount()));
        }
        else
        {
            queryBuildRangeAccount.value(queryRange(this.parmFromAccount(), this.parmToAccount()));
        }

        QueryBuildRange queryBuildRangeTransDate;

        if (this.parmInvoiceDateType() == CustInvoicePrintDate::InvoiceDate)
        {
            queryBuildRangeTransDate = queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, TransDate));
        }
        else
        {
            queryBuildRangeTransDate = queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, DueDate));
        }

        if (this.parmFromTransDate() || this.parmToTransDate())
        {
            queryBuildRangeTransDate.value(queryRange(this.parmFromTransDate(), this.parmToTransDate()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the dialog box to display for this instance of the <c>RunBaseBatch</c> class.
    /// </summary>
    /// <param name="_dialog">
    ///    A reference to the instance of the dialog box that will be displayed.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that specifies whether the dialog box must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    An instance of the dialog box to display.
    /// </returns>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        return Dialog::newFormnameRunbase(formstr(CustInvoicePrintJob), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the identifier name.
    /// </summary>
    /// <returns>
    ///    The identifier name.
    /// </returns>
    /// <remarks>
    ///    This method will set the identifier name for a particular <c>runbase</c> object so that it can pack
    ///    and unpack the respected values depending on the caller.
    /// </remarks>
    public identifierName lastValueDesignName()
    {
        identifierName ret;

        if (custInvoicesToPrint == CustInvoicesToPrint::FreeText)
        {
            ret = formstr(CustFreeInvoice);
        }
        else
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public NoYes parmAcceptanceReport_RU(NoYes _acceptanceReport = acceptanceReport)
    {
        acceptanceReport = _acceptanceReport;
        return acceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>AccountType</c> parameter.
    /// </summary>
    /// <param name="_accountType">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>AccountType</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>AccountType</c> parameter will contain the <c>CustInvoicePrintAccount</c> enumeration value.
    ///    When the <c>AccountType</c> is customer account then it will limit the free text invoices that will
    ///    be printed based on customer accounts.When the <c>AccountType</c> is invoice account then it will
    ///    limit the free text invoices that will be printed based on invoice accounts.
    /// </remarks>
    public CustInvoicePrintAccount parmAccountType(CustInvoicePrintAccount _accountType = accountType)
    {
        accountType = _accountType;
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicesToPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the value of the <c>CustInvoicesToPrint</c> parameter.
    /// </summary>
    /// <param name="_custInvoicesToPrint">
    ///    The <c>CustInvoicesToPrint</c> enumeration value.
    /// </param>
    protected void parmCustInvoicesToPrint(CustInvoicesToPrint _custInvoicesToPrint)
    {
        custInvoicesToPrint = _custInvoicesToPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    public CustAccount parmFromAccount(CustAccount _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;
        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FromTransDate</c> parameter.
    /// </summary>
    /// <param name="_fromTransDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>FromTransDate</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>FromTransDate</c> represents the range start value of the date range that is used to print
    ///    invoices.An empty value indicates that there is no range start limitation.
    /// </remarks>
    public TransDate parmFromTransDate(TransDate _fromTransDate = fromTransDate)
    {
        fromTransDate = _fromTransDate;
        return fromTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>InvoiceDateType</c> parameter.
    /// </summary>
    /// <param name="_invoiceDateType">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>InvoiceDateType</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>InvoiceDateType</c> value will contain the <c>CustInvoicePrintDate</c> enumeration value.
    ///    When the <c>InvoiceDateType</c> value is invoice date then it will limit the free text invoices
    ///    that will be printed based on the invoice date. When the <c>InvoiceDateType</c> value is invoice
    ///    due date then it will limit the free text invoices that will be printed based on invoice due date.
    /// </remarks>
    public CustInvoicePrintDate parmInvoiceDateType(CustInvoicePrintDate _invoiceDateType = invoiceDateType)
    {
        invoiceDateType = _invoiceDateType;
        return invoiceDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PrintCopyOriginal</c> parameter.
    /// </summary>
    /// <param name="_printCopyOriginal">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PrintCopyOriginal</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The property will contain the <c>PrintCopyOriginal</c> enumeration value. When the property
    ///    contains a <c>PrintCopyOriginal::Copy</c> enumeration value it will print the invoices as a copy.
    ///    When the property contains a <c>PrintCopyOriginal::Original</c> enumeration value it will print the
    ///    invoices as original. When the property contains a <c>PrintCopyOriginal::OriginalPrint</c>
    ///    enumeration value it will print the invoices using the default print management settings.
    /// </remarks>
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsCopy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PrinterSettingsCopy</c> parameter.
    /// </summary>
    /// <param name="_printerSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PrinterSettingsCopy</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>PrinterSettingsCopy</c> parameter will contain the user-defined printer destinations for
    ///    copy invoices. If no user-defined destinations are found then copy invoices will be printed by
    ///    using the screen as the default destination.
    /// </remarks>
    public container parmPrinterSettingsCopy(container _printerSettings = printerSettingsCopy)
    {
        printerSettingsCopy = _printerSettings;
        return printerSettingsCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PrinterSettingsOriginal</c> parameter.
    /// </summary>
    /// <param name="_printerSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PrinterSettingsOriginal</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>PrinterSettingsOriginal</c> will contain the user-defined printer destinations for original
    ///    invoices. If no user-defined destinations are found then original invoices will be printed by using
    ///    the screen as the default destination.
    /// </remarks>
    public container parmPrinterSettingsOriginal(container _printerSettings = printerSettingsOriginal)
    {
        printerSettingsOriginal = _printerSettings;
        return printerSettingsOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    public CustAccount parmToAccount(CustAccount _toAccount = toAccount)
    {
        toAccount = _toAccount;
        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ToTransDate</c> parameter.
    /// </summary>
    /// <param name="_toTransDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ToTransDate</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>ToTransDate</c> parameter represents the range end value of the date range that is used to
    ///    print invoices.An empty value indicates that there is no range end limitation.
    /// </remarks>
    public TransDate parmToTransDate(TransDate _toTransDate = toTransDate)
    {
        toTransDate = _toTransDate;
        return toTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintManagementDest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>UsePrintManagementDest</c> parameter.
    /// </summary>
    /// <param name="_usePrintManagementDest">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>UsePrintManagementDest</c> parameter.
    /// </returns>
    /// <remarks>
    ///    The <c>UsePrintManagementDest</c> parameter will contain a <c>NoYes</c> enumeration value. When the
    ///    <c>UsePrintManagementDest</c> parameter is <c>NoYes::Yes</c> then the default print management
    ///    destinations will be used for printing invoices. When the <c>UsePrintManagementDest</c> parameter
    ///    is <c>NoYes::No</c> then the user-defined printer destinations will be used; otherwise, invoices
    ///    will be printed by using the screen as the default destination.
    /// </remarks>
    public NoYes parmUsePrintManagementDest(NoYes _usePrintManagementDest = usePrintManagementDest)
    {
        usePrintManagementDest = _usePrintManagementDest;
        return usePrintManagementDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the invoice printing process, which includes validation of data, setting up the printing
    ///    settings, pulling up the invoice records to print, and finally print the invoices.
    /// </summary>
    /// <remarks>
    ///    This method uses the query build by the <c>buildQueryForFreeText</c> method to pull the invoice
    ///    records.
    /// </remarks>
    private void process()
    {
        if (custInvoicesToPrint == CustInvoicesToPrint::FreeText)
        {
            this.processFreeText();
        }
        else
        {
            this.processAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the printing logic for the sales order, project, and posted free text invoices.
    /// </summary>
    /// <remarks>
    ///    This method uses the query build by the <c>buildQueryForInvoices</c> method to pull the invoice
    ///    records.
    /// </remarks>
    private void processAll()
    {
        RecordSortedList recordSortedListFreeText;
        RecordSortedList recordSortedListProjInvoice;
        RecordSortedList recordSortedListSalesInvoice;

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        // <GEERU>
        RecordSortedList custInvoiceJourList;
        // </GEERU>

        QueryRun queryRun;
        Args args;
        FormLetterServiceController formLetterServiceController;
        FormLetter formLetter;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustTrans custTrans;

        void printCopyOriginal(PrintCopyOriginal _action, str _copy, str _original, str _originalPrint, Args _args)
        {
            str menuItem;

            switch (_action)
            {
                case PrintCopyOriginal::Copy :
                    menuItem = _copy;
                    break;
                case PrintCopyOriginal::Original :
                    menuItem = _original;
                    break;
                case PrintCopyOriginal::OriginalPrint :
                    menuItem = _originalPrint;
                    break;
            }

            _args.name(menuItem);
            new MenuFunction(menuItem, MenuItemType::Output).run(_args);
        }

        FormLetter initFormLetter(FormLetter _formLetter)
        {
            _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsOriginal(), PrintSetupOriginalCopy::Original);
            _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsCopy(), PrintSetupOriginalCopy::Copy);
            _formLetter.usePrintManagement(this.parmUsePrintManagementDest());
            _formLetter.parmUseUserDefinedDestinations(true);

            return _formLetter;
        }

        FormLetterServiceController initFormLetterServiceController(FormLetterServiceController _formLetter)
        {
            _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsOriginal(), PrintSetupOriginalCopy::Original);
            _formLetter.updatePrinterSettingsFormLetter(this.parmPrinterSettingsCopy(), PrintSetupOriginalCopy::Copy);
            _formLetter.usePrintManagement(this.parmUsePrintManagementDest());
            _formLetter.parmUseUserDefinedDestinations(true);

            return _formLetter;
        }

        args = new Args();
        queryRun = new QueryRun(this.buildQueryForInvoices());

        recordSortedListFreeText = new RecordSortedList(tablenum(CustInvoiceJour));
        recordSortedListFreeText.sortOrder(fieldnum(CustInvoiceJour,RecId));
        recordSortedListProjInvoice = new RecordSortedList(tablenum(ProjInvoiceJour));
        recordSortedListProjInvoice.sortOrder(fieldnum(ProjInvoiceJour,RecId));
        recordSortedListSalesInvoice = new RecordSortedList(tablenum(CustInvoiceJour));
        recordSortedListSalesInvoice.sortOrder(fieldnum(CustInvoiceJour,RecId));

        // <GEERU>
        if (this.parmAcceptanceReport_RU())
        {
            custInvoiceJourList = new RecordSortedList(tablenum(CustInvoiceJour));
            custInvoiceJourList.sortOrder(fieldnum(CustInvoiceJour, RecId));
        }
        // </GEERU>

        while (queryRun.next())
        {
            custTrans = queryRun.get(tablenum(CustTrans)) as CustTrans;
            switch (custTrans.TransType)
            {
                case LedgerTransType::Sales :
                    // Sales order invoice
                    custInvoiceJour = CustInvoiceJour::findFromCustTrans(custTrans.Invoice, custTrans.TransDate, custTrans.AccountNum);
                    recordSortedListSalesInvoice.ins(custInvoiceJour);

                    // <GEERU>
                    if (custInvoiceJourList)
                        custInvoiceJourList.ins(custInvoiceJour);
                    // </GEERU>
                    break;

                case LedgerTransType::Cust :
                    // Free text invoice
                    custInvoiceJour = CustInvoiceJour::findFromCustTrans(custTrans.Invoice, custTrans.TransDate, custTrans.AccountNum);
                    recordSortedListFreeText.ins(custInvoiceJour);
                    // <GEERU>
                    if (custInvoiceJourList)
                        custInvoiceJourList.ins(custInvoiceJour);
                    // </GEERU>
                    break;

                case LedgerTransType::Project :
                    projInvoiceJour = ProjInvoiceJour::find(custTrans.Invoice, custTrans.TransDate);
                    recordSortedListProjInvoice.ins(projInvoiceJour);
                    break;
            }
        }

        // <GEERU>
        if (custInvoiceJourList)
        {
            if (custInvoiceJourList.len())
            {
                args.object(custInvoiceJourList);
                new MenuFunction(menuitemoutputstr(SalesAcceptanceReport_RU), MenuItemType::Output).run(args);
            }
        }
        else
        {
        // </GEERU>
            if (recordSortedListFreeText.len() > 0)
            {
                formLetterServiceController = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
                args.caller(initFormLetterServiceController(formLetterServiceController));
                args.object(recordSortedListFreeText);

                printCopyOriginal(
                    this.parmPrintCopyOriginal(),
                    menuitemoutputstr(FreeTextInvoiceCopy),
                    menuitemoutputstr(FreeTextInvoiceOriginal),
                    menuitemoutputstr(FreeTextInvoice),
                    args);
            }

            if (recordSortedListSalesInvoice.len() > 0)
            {
                formLetterServiceController = SalesFormLetter::construct(DocumentStatus::Invoice);
                args.caller(initFormLetterServiceController(formLetterServiceController));
                args.object(recordSortedListSalesInvoice);

                printCopyOriginal(
                    this.parmPrintCopyOriginal(),
                    menuitemoutputstr(SalesInvoiceCopy),
                    menuitemoutputstr(SalesInvoiceOriginal),
                    menuitemoutputstr(SalesInvoice),
                    args);
            }

            if (recordSortedListProjInvoice.len() > 0)
            {
                formLetter = new ProjFormLetter_Invoice();
                args.caller(initFormLetter(formLetter));
                args.object(recordSortedListProjInvoice);

                printCopyOriginal(
                    this.parmPrintCopyOriginal(),
                    menuitemoutputstr(ProjInvoiceCopy),
                    menuitemoutputstr(ProjInvoice),
                    menuitemoutputstr(ProjInvoiceOriginalPrint),
                    args);
            }

        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFreeText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the printing logic for the free text invoices.
    /// </summary>
    /// <remarks>
    ///    This method uses the query build by the <c>buildQueryForFreeText</c> method to pull the invoice
    ///    records.
    /// </remarks>
    final protected void processFreeText()
    {
        CustPrintOutInvoice custPrintOutInvoice;
        CustInvoiceTable custInvoiceTable;
        RecordSortedList recordSortedListFreeText;
        QueryRun queryRun;

        // <GEERU>
        CustInvoiceJour custInvoiceJour;
        RecordSortedList custInvoiceJourList;
        Args args = new Args();

        if (this.parmAcceptanceReport_RU())
        {
            custInvoiceJourList = new RecordSortedList(tablenum(CustInvoiceJour));
            custInvoiceJourList.sortOrder(fieldnum(CustInvoiceJour, RecId));
        }
        // </GEERU>

        custPrintOutInvoice = CustPrintOutInvoice::construct();
        queryRun = new QueryRun(this.buildQueryForFreeText());

        recordSortedListFreeText = new RecordSortedList(tablenum(CustInvoiceTable));
        recordSortedListFreeText.sortOrder(fieldnum(CustInvoiceTable,RecId));

        while (queryRun.next())
        {
            custInvoiceTable = queryRun.get(tablenum(CustInvoiceTable)) as CustInvoiceTable;
            recordSortedListFreeText.ins(custInvoiceTable);

            // <GEERU>
            if (custInvoiceJourList)
            {
                custInvoiceJour = custInvoiceTable.custInvoiceJour();
                if (custInvoiceJour.RecId)
                {
                    custInvoiceJourList.ins(custInvoiceJour);
                }
            }
            // </GEERU>
        }

        // <GEERU>
        if (custInvoiceJourList)
        {
            if (custInvoiceJourList.len())
            {
                args.object(custInvoiceJourList);
                new MenuFunction(menuitemoutputstr(SalesAcceptanceReport_RU), MenuItemType::Output).run(args);
            }
        }
        else
        {
            custPrintOutInvoice.parmPrintFormLetter_RU(NoYes::Yes);
        // </GEERU>

            custPrintOutInvoice.parmPrinterSettingsFreeText(this.parmPrinterSettingsOriginal());
            custPrintOutInvoice.parmPrinterSettingsFreeTextCopy(this.parmPrinterSettingsCopy());
            custPrintOutInvoice.parmIsBatched(true);

            custPrintOutInvoice.printOut(
                NoYes::Yes,
                recordSortedListFreeText,
                NoYes::No,
                Printout::Current,
                this.parmUsePrintManagementDest(),
                this.parmPrintCopyOriginal(),
                false,
                true);
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the invoice printing process which includes validation of data, setting up the printing
    ///    settings, pulling up the invoice records to print, and printing the invoices.
    /// </summary>
    public void run()
    {
        super();
        CustInvoicePrintJob::runOnServer(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Drives the validation logic for the parameters of the <c>CustInvoicePrintJob</c> class.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The reference to the caller.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Validates the values in the <c>fromAccount</c>, <c>toAccount</c>, <c>fromTransDate</c>, and
    ///    <c>toTransDate</c> fields.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = true;

        if (this.parmFromTransDate() > this.parmToTransDate() && this.parmToTransDate() && this.parmFromTransDate())
        {
            error(strfmt("@SYS184271",this.parmToTransDate(),this.parmFromTransDate()));
            ret = false;
        }

        if ((!CustTable::exist(this.parmFromAccount()) && this.parmFromAccount())
            || (!CustTable::exist(this.parmToAccount()) && this.parmToAccount())
            || (this.parmToAccount() < this.parmFromAccount() && this.parmFromAccount() && this.parmToAccount()))
        {
            if (this.parmToAccount() < this.parmFromAccount())
            {
                error("@SYS97748");
            }
            else
            {
                error("@SYS184270");
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CustInvoicePrintJob</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CustInvoicePrintJob</c> class.
    /// </returns>
    public static CustInvoicePrintJob construct()
    {
        return new CustInvoicePrintJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS191694";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustInvoicePrintJob custInvoicePrintJobRunBase = CustInvoicePrintJob::newCustInvoicesToPrint(_args.parmEnum());

        if (custInvoicePrintJobRunBase.prompt())
        {
            custInvoicePrintJobRunBase.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoicesToPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>CustInvoicePrintJob</c> class by setting the value of the
    ///    <c>CustInvoicesToPrint</c> field.
    /// </summary>
    /// <param name="_custInvoicesToPrint">
    ///    The <c>CustInvoicesToPrint</c> enumeration value.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustInvoicePrintJob</c> class.
    /// </returns>
    public static CustInvoicePrintJob newCustInvoicesToPrint(CustInvoicesToPrint _custInvoicesToPrint)
    {
        CustInvoicePrintJob custInvoicePrintJob;

        custInvoicePrintJob = CustInvoicePrintJob::construct();

        custInvoicePrintJob.parmCustInvoicesToPrint(_custInvoicesToPrint);

        return custInvoicePrintJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the provided packed instance of the <c>CustInvoicePrintJob</c> class on the server.
    /// </summary>
    /// <param name="_packedcustInvoicePrintJob">
    ///    The packed instance of the <c>CustInvoicePrintJob</c> class to use.
    /// </param>
    /// <remarks>
    ///    This method should only be called internally.
    /// </remarks>
    protected static void runOnServer(container _packedcustInvoicePrintJob)
    {
        CustInvoicePrintJob custInvoicePrintJob = CustInvoicePrintJob::construct();

        custInvoicePrintJob.unpack(_packedcustInvoicePrintJob);

        custInvoicePrintJob.process();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>