<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalDeleteLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Delete cash flow management journal lines class.
/// </summary>
public final class CFMJournalDeleteLines extends RunBase implements JournalRunbaseCallbackable
{
    CFMJournalId journalId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        journalId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        JournalForm journalForm = JournalForm::fromArgs(args);
        CFMJournalDeleteLines deleteLines = CFMJournalDeleteLines::newFromForm(args, journalForm);

        journalForm.runbaseMainStart();

        if (deleteLines.prompt())
        {
            try
            {
                deleteLines.runOperation();
                journalForm.runbaseMainEnd(deleteLines, false);
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(deleteLines, true);
            }
        }
        else
        {
            journalForm.runbaseMainCancel(deleteLines.parmJournalId());
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    private static CFMJournalDeleteLines newFromForm(Args _args, JournalForm _journalForm)
    {
        JournalTableMap journalTable = _journalForm.journalTableData().journalTable();
        CFMJournalDeleteLines deleteLines = new CFMJournalDeleteLines();
        deleteLines.parmJournalId(journalTable.JournalId);

        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS303335";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase  dialogRunbase  = new DialogRunbase("@SYS28500", this);

        dialogRunbase.addText("@SYS138664");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCFMJournalTable</Name>
				<Source><![CDATA[
    private void initFromCFMJournalTable(CFMJournalTable _journalTable)
    {
        this.parmJournalId(_journalTable.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfTransferLines</Name>
				<Source><![CDATA[
    public int numOfTransferLines()
    {
        return CFMJournalTable::find(journalId).numOfLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packResult</Name>
				<Source><![CDATA[
    public container packResult()
    {
        return [this.numOfTransferLines(),
                this.transferJournalId(),
                false,
                false,
                false,
                conNull(),
                conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        super();

        try
        {
            if (this.validate())
            {
                ttsbegin;
                CFMJournalTrans journalTrans;

                delete_from journalTrans
                    where journalTrans.JournalId == journalId;

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalId</Name>
				<Source><![CDATA[
    public JournalId transferJournalId()
    {
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a journal for lines deleting.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    /// true if the journal is valid for lines deleting; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid = true;

        CFMJournalTable journalTable = CFMJournalTable::find(journalId);

        if (!journalTable.JournalId)
        {
            isValid = checkFailed(strFmt("@SYS21496", journalId));
        }

        isValid = isValid && JournalTableData::newTable(journalTable).checkOpen();

        if (isValid)
        {
            CFMJournalTrans trans;

            select firstonly RecId from trans
                where trans.JournalId == journalId;

            if (!trans.RecId)
            {
                isValid = checkFailed("@SYS59010");
            }
        }

        if (isValid && CFMAnalyticDataEditUncommitted::isJournalExistUncommittedValues(journalTable.RecId))
        {
            isValid = checkFailed("@Cashflowmanagement:JourContainsUncommittedChanges");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>