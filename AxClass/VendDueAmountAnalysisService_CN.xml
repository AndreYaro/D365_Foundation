<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDueAmountAnalysisService_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The service class for generating vendor due amount analysis report.
/// </summary>
public class VendDueAmountAnalysisService_CN extends SysOperationServiceBase
{
    public const str ERFormatModelName = 'model';
    public const str ERModelDataSourceName = 'Contract';

    private const str  ReportName = "@AccountsPayable:VendDueAmountAnalysis_CN";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateReportByGER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates report by generic electronic reporting
    /// </summary>
    /// <param name = "_contract">Instance of <c>VendDueAmountAnalysisContract_CN</c>.</param>
    public void generateReportByGER(VendDueAmountAnalysisContract_CN _contract)
    {
        TransDate							toPeriod;
        ERFormatMappingId					erBinding;
        VendDueAmountAnalysisDP_CN			dataProvider;
        AgingAndDueAmountTmp_CN 			vendDueAmountAnalysisTmp_CN;
        Query                               query;
        QueryBuildDataSource                qbdsVendTrans;
        QueryBuildRange                     qbr;
        QueryFilter                         queryFilter;
        String255                           vendRange;

        dataProvider = new VendDueAmountAnalysisDP_CN();

        toPeriod = _contract.parmAsOn();
        erBinding = _contract.parmERBinding();
        query = new Query(SysOperationHelper::base64Decode(_contract.parmQuery()));
        qbdsVendTrans = query.dataSourceTable(tableNum(VendTrans));

        // Gets vendor account range from query range if it's in query range, else gets it from query filter.
        if (qbdsVendTrans.findRange(fieldNum(VendTrans, AccountNum)))
        {
            qbr = qbdsVendTrans.rangeField(fieldNum(VendTrans, AccountNum));
            vendRange = qbr.value();
        }
        else
        {
            queryFilter = query.findQueryFilter(qbdsVendTrans, fieldStr(VendTrans, AccountNum));
            if (queryFilter)
            {
                vendRange = queryFilter.value();
            }
        }

        vendDueAmountAnalysisTmp_CN = dataProvider.prepareData(_contract);

        AgingAndDueAmountContract_CN _reportParameter = new AgingAndDueAmountContract_CN();
        _reportParameter.parmAsOfDate(_contract.parmAsOn());

        if (vendDueAmountAnalysisTmp_CN)
        {
            try
            {
                ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
                    .add(
                        new ERModelDefinitionDatabaseContext()
                            .addTemporaryTable(vendDueAmountAnalysisTmp_CN))
                    .add(
                        new ERModelDefinitionDatabaseContext()
                            .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()))
                    .add(
                        new ERModelDefinitionObjectParameterAction(ERFormatModelName, ERModelDataSourceName, _reportParameter))
                    .add(
                        new ERModelDefinitionInputParametersAction()
                            .addParameter('ParameterVendRange', vendRange));

                // Call ER to generate the report.
                ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding, ReportName)
                    .withParameter(parameters)
                    .withFileDestination(_contract.getFileDestination())
                    .run();
            }
            catch
            {
                // An error occurred while exporting data.
                error("@SYP4861341");
            }
        }
        else
        {
            // There is no data available.
            checkFailed("@SYS300117");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>