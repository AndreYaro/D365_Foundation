<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventMov_ContainerTo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventMov_ContainerTo</c> class is used as a data carrier when updating inbound container transactions.
/// </summary>
[InventMovementFactoryAttribute(tableStr(WHSContainerTrans),InventMovSubType::TransferReceipt)]
class WHSInventMov_ContainerTo extends WHSInventMov_Container
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty  _inventQty)
    {
        // Need to preserve method to avoid breaking changes
        super(_inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && containerTrans.RecId)
        {
            WHSInventTransOriginContainerTo::writeOriginOwnerRelationship(containerTrans.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (containerTrans.RecId)
        {
            WHSInventTransOriginContainerTo::deleteOwnerRelationship(containerTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the final dimensions of the transaction.
	/// </summary>
	/// <returns>
	/// The final dimensions of the transaction.
	/// </returns>
    public InventDimId inventDimId()
    {
        return containerTrans.InventDimIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = WHSInventTransOriginContainerTo::findInventTransOriginId(containerTrans.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a new <c>WHSInventMov_Container</c> instance with original values.
	/// </summary>
	/// <returns>
	/// New <c>WHSInventMov_Container</c> instance with original values from current instance.
	/// </returns>
    public InventMovement newMovement_Orig()
    {
        if (containerTrans.RecId)
        {
            return new WHSInventMov_Container(containerTrans.orig(), inventType);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the balance sheet posting type.
	/// </summary>
	/// <returns>
	/// The posting type.
	/// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::InventReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets final dimensions for the transaction.
	/// </summary>
	/// <param name="_dimId">
	/// Id of the dimensions to be set.
	/// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        containerTrans.InventDimIdTo = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the direction of the transfer movements.
    /// </summary>
    /// <returns>
    ///    The direction of the transfer movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the transfer counterpart inventory transaction originator that corresponds to
    ///    the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the transfer counterpart inventory transaction originator that corresponds to the
    ///    movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId() 
    { 
        return InventTransOrigin::findByInventTransId(containerTrans.InventTransIdFrom).RecId; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the container transaction id.
	/// </summary>
	/// <returns>
	/// The container transaction id.
	/// </returns>
    public InventTransId transId()
    {
        return containerTrans.InventTransIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the transaction signature.
	/// </summary>
	/// <returns>
	/// The signature of the transaction.
	/// </returns>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>