<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymId_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankPaymId_NO
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustPaymId</Name>
				<Source><![CDATA[
    public PaymId createCustPaymId(CustAccount         _custAccount,
                                   InvoiceId           _invoice,
                                   boolean             _showError = true,
                                   int                 _preFix = 0,
                                   int                 _sufFix = 0,
                                   CustAccountExt      _extRef = '',
                                   NumberSequenceCode  _numSeqCode = '',
                                   Common              _common = null)
    {
        BankCustPaymIdTable   paymIdTable;
        PaymId                paymId;
        CustTable             custTable;
        int                   moduloPos;
        int64                 invoice;
        str                   moduloStr;

        if (_common.RecId)
        {
            paymIdTable = _common;
        }
        else
        {
            paymIdTable = BankCustPaymIdTable::findOnAccount(_custAccount,false,_numSeqCode);
        }

        if (paymIdTable)
        {
            paymId = strrep('0',paymIdTable.Length);
            if (paymIdTable.AccountFromPos)
            {
                str custAccountKeepNumber = strkeep(_custAccount, '0123456789');

                paymId = this.createPaymIdPos(
                    paymId,
                    BankPaymIdExtendAccountRangeFlight::instance().isEnabled() ? str2Int64(custAccountKeepNumber) : str2Int(custAccountKeepNumber),
                    paymIdTable.AccountFromPos,
                    paymIdTable.AccountToPos,
                    _showError);
            }
            if (paymIdTable.InvoiceFromPos)
            {
                invoice = str2int64(strkeep (_invoice, '0123456789'));
                paymId = this.createPaymIdPos(paymId,
                                              invoice,
                                              paymIdTable.InvoiceFromPos,
                                              paymIdTable.InvoiceToPos,
                                              _showError);
            }
            if (paymIdTable.PrefixFromPos && (paymIdTable.PrefixValue || _preFix))
            {
                paymId = this.createPaymIdPos(paymId,
                                              paymIdTable.PrefixValue,
                                              paymIdTable.PrefixFromPos,
                                              paymIdTable.PrefixToPos,
                                              _showError,
                                              _preFix);
            }
            if (paymIdTable.SuffixFromPos && (paymIdTable.SuffixValue || _sufFix))
            {
                paymId = this.createPaymIdPos(paymId,
                                              paymIdTable.SuffixValue,
                                              paymIdTable.SuffixFromPos,
                                              paymIdTable.SuffixToPos,
                                              _showError,
                                              _sufFix);
            }
            if (paymIdTable.ExtRefFromPos)
            {
                custTable = CustTable::find(_custAccount);
                if (custTable.OurAccountNum || _extRef)
                {
                    paymId = this.createPaymIdPos(paymId,
                                                  str2int(strkeep(custTable.OurAccountNum, '0123456789')),
                                                  paymIdTable.ExtRefFromPos,
                                                  paymIdTable.ExtRefToPos,
                                                  _showError,
                                                  str2int(strkeep(_extRef, '0123456789')));
                }
            }

            moduloPos = strlen(paymId) - strlen(paymIdTable.SuffixStrValue);
            moduloStr = substr(paymId,strlen(paymIdTable.PreFixStrValue)+1,strlen(paymId)-strlen(paymIdTable.PreFixStrValue)-strlen(paymIdTable.SuffixStrValue)-1);

            paymId = this.setPaymIdByModulo(paymId, paymIdTable.Modulo, moduloStr, moduloPos);

            if (paymIdTable.PreFixStrValue)
            {
                paymId = this.createPaymIdPosTxt(paymId,
                                                 paymIdTable.PreFixStrValue,
                                                 1);
            }
            if (paymIdTable.SuffixStrValue)
            {
                paymId = this.createPaymIdPosTxt(paymId,
                                                 paymIdTable.SuffixStrValue,
                                                 strlen(paymId)-strlen(paymIdTable.SuffixStrValue)+1);
            }
        }
        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymIdByModulo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>PaymId</c> value depending on other parameters.
    /// </summary>
    /// <param name = "_paymId">The current paymId value.</param>
    /// <param name = "_modulo">The modulo value.</param>
    /// <param name = "_moduloStr">The string with modulo value.</param>
    /// <param name = "_moduloPos">The position in string.</param>
    /// <returns>The processed <c>PaymId</c> value.</returns>
    protected PaymId setPaymIdByModulo(PaymId _paymId, BankModuloCheck_NO _modulo, str _moduloStr, int _moduloPos)
    {
        PaymId paymId;

        switch (_modulo)
        {
            case BankModuloCheck_NO::Modulo10:
                paymId = strpoke(_paymId, int2str(modulo10(_moduloStr, true)), _moduloPos);
                break;
            case BankModuloCheck_NO::Modulo11:
                paymId = strpoke(_paymId, BankPaymId_NO::modulo11str(_moduloStr), _moduloPos);
                break;
            case BankModuloCheck_NO::None:
                paymId = _paymId;
                break;
            case BankModuloCheck_NO::Modulo10Recursive:
                paymId = strpoke(_paymId, int2str(BankPaymId_NO::modulo10Recursive(_moduloStr)), _moduloPos);
                break;
            case BankModuloCheck_NO::Module731:
                paymId = strpoke(_paymId, int2Str(BankPaymId_NO::modulo731(_moduloStr)), _moduloPos);
                break;
            default :
                paymId = strpoke(_paymId, int2str(modulo10(_moduloStr, true)), _moduloPos);
                break;
        }

        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymIdPos</Name>
				<Source><![CDATA[
    public PaymId createPaymIdPos(PaymId _paymId, int64 _value, int _fromPos, int _toPos, boolean _error = true, int _value2 = 0)
    {
        return strpoke(_paymId,this.trimValue2Str0(_value, (_toPos - _fromPos +1), _error, _value2),_fromPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymIdPosTxt</Name>
				<Source><![CDATA[
    public PaymId createPaymIdPosTxt(PaymId _paymId, str _value, int _fromPos)
    {
        return strpoke(_paymId,_value,_fromPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trimValue2Str0</Name>
				<Source><![CDATA[
    public str trimValue2Str0(int64 _value,
        int _length,
        boolean _error = true,
        int _value2 = 0)
    {
        str tmpStr = int642str(_value ? _value : _value2);

        if (strlen(tmpStr) > _length)
        {
            if (_error)
            {
                info(strfmt("@SYS119796",tmpStr));
            }

            tmpStr = strLFix(tmpStr, _length);
        }

        tmpStr = strRep('0', _length - strLen(tmpStr)) + tmpStr;

        return tmpStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankPaymId_NO construct()
    {
        return new BankPaymId_NO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modulo11str</Name>
				<Source><![CDATA[
    static str modulo11str(str _numeralsTxt)
    {
        int numerals;
        int vector = 2;
        int sumNumerals;
        int modulo11;
        str control;
        str numeralsTxt = strkeep(_numeralsTxt,'0123456789-');

        while (numeralsTxt)
        {
            numerals    = str2Int(substr(numeralsTxt,999,-2)) * vector;
            numeralsTxt =         strdel(numeralsTxt,999,-2);

            sumNumerals += numerals;
            vector     += 1;

            if (vector > 7)
            {
                vector = 2;
            }
        }

        modulo11 = (11 - sumNumerals mod 11);

        if (modulo11 == 11)
        {
            control = '0';
        }
        else if (modulo11 == 10)
        {
            control = '-';
        }
        else
        {
            control = int2str(modulo11);
        }

        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modulo10Recursive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check digit generation by Modulo 10 recursive.
    /// </summary>
    /// <param name="_numeralsTxt">
    /// The text of numerals to calculate check digits for.
    /// </param>
    /// <returns>
    /// The check digit calculated by Modulo 10 recursive.
    /// </returns>
    /// <remarks>
    /// All non-numeric symbols are ignored.
    /// </remarks>
    public static int modulo10Recursive(str _numeralsTxt)
    {
        int ret;
        container series = [0,9,4,6,8,2,7,1,3,5];
        int carryIdx;
        str numeralsTxt = strKeep(_numeralsTxt, '0123456789');

        for (int i = 1; i <= strLen(numeralsTxt); i++)
        {
            int numIdx = str2int(subStr(numeralsTxt, i, 1));
            carryIdx = conPeek(series, (numIdx + carryIdx) mod 10 + 1);
        }

        ret = (10 - carryIdx) mod 10;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modulo731</Name>
				<Source><![CDATA[
    private static int modulo731(str _numeralsTxt)
    {
        container factor = [7,3,1];
        int factorCursor;
        int tmpSum;

        for (int i = strLen(_numeralsTxt); i >= max(1, strLen(_numeralsTxt) - 19); i--)
        {
            tmpSum += (str2int(subStr(_numeralsTxt, i, 1)) * conPeek(factor, factorCursor + 1));
            factorCursor++;
            factorCursor = factorCursor mod 3;
        }
        int step = tmpSum mod 10 ? 1 : 0;
        int closest10 = (tmpSum div 10 + step) * 10;

        return closest10 - tmpSum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>