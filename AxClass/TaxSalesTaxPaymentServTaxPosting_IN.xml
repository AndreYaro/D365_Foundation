<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPaymentServTaxPosting_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posts the total tax amount to Vendor/PLA based on the CanPost field.
/// </summary>
class TaxSalesTaxPaymentServTaxPosting_IN extends TaxSalesTaxPaymentPosting_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processLedgerVoucher</Name>
				<Source><![CDATA[
protected void processLedgerVoucher()
    {
        TaxSalesTaxPaymentHistoryDetails_IN         canPostHistoryDetail, historyDetail;
        TaxReportHierarchyNode_IN                   canPostTableNode, tableNode;
        TaxAmount                                   totalTaxAmount, totalGTARecAmount;
        TaxSalesTaxPymHistoryDetailsTransView_IN    detailTransView;

        //Post the total tax amount to Vendor/PLA based on the CanPost field
        while select TaxReportHierarchyNode_IN from canPostHistoryDetail
            order by canPostTableNode.Level asc
                where canPostHistoryDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                   && canPostHistoryDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
            join canPostTableNode
                where canPostHistoryDetail.TaxReportHierarchyNode_IN == canPostTableNode.RecId
                &&    canPostTableNode.CanPost == NoYes::Yes
        {
            totalTaxAmount = 0;
            totalGTARecAmount = 0;

            //Post each node for this settlement process that has balance
            while select historyDetail
                order by tableNode.Level desc
                    where historyDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                    &&    historyDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
                    &&    (historyDetail.RecoverableAmountToSettle != 0 ||
                           historyDetail.PayableAmountToSettle != 0 ||
                           historyDetail.PreSettledRecAmountMST != 0 ||
                           historyDetail.PreSettledPayAmountMST != 0)
                join  tableNode
                    where historyDetail.TaxReportHierarchyNode_IN == tableNode.RecId
                    &&    tableNode.LeftId >= canPostTableNode.LeftId
                    &&    tableNode.RightId <= canPostTableNode.RightId
                    &&    tableNode.TaxReportHierarchyVersion_IN == canPostTableNode.TaxReportHierarchyVersion_IN
            {
                this.parmHasLedgerVoucherTrans(true);

                if (tableNode.RecId == canPostTableNode.RecId || tableNode.CanPost == NoYes::No)
                {
                    //Post balance
                    if (historyDetail.Balance <= 0)
                    {
                        this.processTaxAmount(historyDetail);
                        select TotalPayableAmountMST from detailTransView
                            where detailTransView.Mark == NoYes::Yes
                            &&    detailTransView.TaxSalesTaxPaymentHistoryDetails_IN == historyDetail.RecId;

                        if (historyDetail.PayableAmountToSettle != 0)
                        {
                            totalGTARecAmount += (detailTransView.TotalPayableAmountMST * -1);
                        }
                        totalTaxAmount += historyDetail.Balance;
                    }
                    else
                    {
                        this.processExcessRecAmount(historyDetail);
                    }
                }
            }

            //generate vendTrans
            paymentPostingHandler = new TaxReportPostingVendPaymentHandler_IN();
            paymentPostingHandler.parmBalance(totalTaxAmount);
            if (canPostTableNode.RefClassId == classNum(TaxReportHrchyTaxComponentNode_IN))
            {
                paymentPostingHandler.parmTaxComponentRecId(canPostTableNode.RefTableRecId);
            }
            paymentPostingHandler.parmGTAAmount(totalGTARecAmount);
            paymentPostingHandler.process(taxPaymentDoc);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs TaxSalesTaxPaymentServTaxPosting_IN object.
    /// </summary>
    /// <param name="_history">
    /// The TaxSalesTaxPaymentHistory_IN that is used to process the sales tax payment.
    /// </param>
    /// <param name="_profile">
    /// The TaxSalesTaxPaymentProfile_IN that contains the form setup.
    /// </param>
    /// <returns>
    /// The TaxSalesTaxPaymentServTaxPosting_IN.
    /// </returns>
    public static TaxSalesTaxPaymentServTaxPosting_IN construct(TaxSalesTaxPaymentHistory_IN _history,
                                                               TaxSalesTaxPaymentProfile_IN _profile)
    {
        TaxSalesTaxPaymentServTaxPosting_IN paymentPosting = new TaxSalesTaxPaymentServTaxPosting_IN(_history, _profile);

        return paymentPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>