<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationHierarchyElementPolicyProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReservationHierarchyElementPolicyProvider</c> class is responsible for providing information for reservation hierarchy element policies.
/// </summary>
public class WHSReservationHierarchyElementPolicyProvider
{
    private WhsReservationHierarchyProvider reservationHierarchyProvider;
    private WHSReservationHierarchyCache    reservationHierarchyCache;
    private static WHSReservationHierarchyElementPolicyProvider reservationHierarchyElementPolicyProvider;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSReservationHierarchyElementPolicyProvider</c> class.
    /// </summary>
    /// <returns>The instance of the <c>WHSReservationHierarchyElementPolicyProvider</c> class.</returns>
    internal static WHSReservationHierarchyElementPolicyProvider construct()
    {
        return new WHSReservationHierarchyElementPolicyProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a singleton instance of the <c>WHSReservationHierarchyElementPolicyProvider</c> class.
    /// </summary>
    /// <returns>The singleton instance of the <c>WHSReservationHierarchyElementPolicyProvider</c> class.</returns>
    static public WHSReservationHierarchyElementPolicyProvider singleton()
    {
        if (!reservationHierarchyElementPolicyProvider)
        {
            reservationHierarchyElementPolicyProvider = WHSReservationHierarchyElementPolicyProvider::construct();
        }

        return reservationHierarchyElementPolicyProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchyProvider</Name>
				<Source><![CDATA[
    internal WhsReservationHierarchyProvider parmReservationHierarchyProvider()
    {
        if (!reservationHierarchyProvider)
        {
            reservationHierarchyProvider = WhsReservationHierarchyProvider::construct();
        }

        return reservationHierarchyProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchyCache</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyCache parmReservationHierarchyCache()
    {
        if (!reservationHierarchyCache)
        {
            reservationHierarchyCache = WHSReservationHierarchyCache::construct();
        }

        return reservationHierarchyCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldCanUseReservationOnDemandOrder</Name>
				<Source><![CDATA[
    private boolean dimFieldCanUseReservationOnDemandOrder(FieldId _inventDimFieldId)
    {
        if (WHSInventDimensionFlexibleReservationFlight::instance().isEnabled())
        {
            switch(_inventDimFieldId)
            {
                // Storage dimensions are hard coded, as they are not extensible via InventDimension classes.
                #InventDimDevelop
                case fieldNum(InventDim, LicensePlateId):
                    return true;
            }

            InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(_inventDimFieldId);
            if (inventDimension)
            {
                return inventDimension.isSupportingFlexibleReservationsOfDemandOrders();
            }

            return false;
        }
        else
        {
            boolean ret;

            switch(_inventDimFieldId)
            {
                case fieldNum(InventDim, inventBatchId):
                case fieldNum(InventDim, LicensePlateId):
                    ret = true;
                    break;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationOnDemandOrderCanBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order can be enabled.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    /// True if the reservation on demand order can be enabled; otherwise, false.
    /// </returns>
    internal boolean reservationOnDemandOrderCanBeEnabled(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId)
    {
        ConfigurationKeyId configKeyId = new DictField(tableNum(InventDim), _inventDimFieldId).configurationKeyId();

        if ((configKeyId && !isConfigurationkeyEnabled(configKeyId)) ||
            WhsReservationHierarchyInventDimUtil::isFieldIdAboveLocationFromResHierRecId(_reservationHierarchyRecId, _inventDimFieldId))
        {
            return false;
        }

        FieldId bottomHierarchyLevelDimFieldId = this.parmReservationHierarchyProvider().getDimFieldIdForBottomHierarchyLevelFromResHierRecId(_reservationHierarchyRecId);

        boolean allowFlexResevationOnLevel = bottomHierarchyLevelDimFieldId == _inventDimFieldId;

        if (!allowFlexResevationOnLevel)
        {
            WHSReservationHierarchyLevel batchLevel  = this.parmReservationHierarchyProvider().getDimLevelFromReservationHierarchy(_reservationHierarchyRecId, fieldNum(InventDim, inventBatchId));
            WHSReservationHierarchyLevel serialLevel = this.parmReservationHierarchyProvider().getDimLevelFromReservationHierarchy(_reservationHierarchyRecId, fieldNum(InventDim, inventSerialId));

            allowFlexResevationOnLevel = bottomHierarchyLevelDimFieldId == fieldNum(InventDim, inventSerialId)
                                      && _inventDimFieldId == fieldNum(InventDim, inventBatchId)
                                      && serialLevel == batchLevel + 1; // no gaps between batch and serial
        }

        if (!allowFlexResevationOnLevel
            && _inventDimFieldId == fieldNum(InventDim, LicensePlateId))
        {
            allowFlexResevationOnLevel = true;
        }

        if (allowFlexResevationOnLevel &&
            this.dimFieldCanUseReservationOnDemandOrder(_inventDimFieldId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReservationOnDemandOrderEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order is enabled.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    /// True if the reservation on demand order is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isReservationOnDemandOrderEnabled(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId)
    {
        WHSReservationHierarchyElementPolicy reservationHierarchyElementPolicy = WHSReservationHierarchyElementPolicy::findByHierarchyFieldId(_reservationHierarchyRecId, _inventDimFieldId);

        return reservationHierarchyElementPolicy && reservationHierarchyElementPolicy.AllowReservationOnDemandOrder == WHSAllowReservationOnDemandOrder::Flexible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReservationOnDemandOrderEnabledOnAnyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order is enabled on any dimension.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <returns>
    /// True if the reservation on demand order is enabled; otherwise, false.
    /// </returns>
    internal boolean isReservationOnDemandOrderEnabledOnAnyField(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        return this.getLowestLevelWithEnabledReservationOnDemandOrder(_reservationHierarchyRecId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReservationOnDemandOrderEnabledOnThisOrLowerLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order is enabled on specified level or lower.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation hierarchy level to check.
    /// </param>
    /// <returns>
    /// True if the reservation on demand order is enabled on specified level or lower; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isReservationOnDemandOrderEnabledOnThisOrLowerLevel(WHSReservationHierarchyRecId _reservationHierarchyRecId, WHSReservationHierarchyLevel _reservationHierarchyLevel)
    {
        return this.getLowestLevelWithEnabledReservationOnDemandOrder(_reservationHierarchyRecId) >= _reservationHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowestLevelWithEnabledReservationOnDemandOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the lowest hierarchy level with enabled reservation on demand order.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <returns>
    /// The lowest hierarchy level with enabled reservation on demand order. If no level is added 0 is returned.
    /// </returns>
    [Hookable(false)]
    internal WHSReservationHierarchyLevel getLowestLevelWithEnabledReservationOnDemandOrder(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        WHSReservationHierarchyElement       reservationHierarchyElement;
        WHSReservationHierarchyElementPolicy reservationHierarchyElementPolicy;

        select firstonly ReservationHierarchyLevel from reservationHierarchyElement
            order by ReservationHierarchyLevel desc
            where reservationHierarchyElement.ReservationHierarchy == _reservationHierarchyRecId
        exists join reservationHierarchyElementPolicy
            where reservationHierarchyElementPolicy.ReservationHierarchyElement   == reservationHierarchyElement.RecId
            &&    reservationHierarchyElementPolicy.AllowReservationOnDemandOrder == WHSAllowReservationOnDemandOrder::Flexible;

        return reservationHierarchyElement.ReservationHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReservationOnDemandOrderCanBeEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean checkReservationOnDemandOrderCanBeEnabled(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId, boolean _enable)
    {
        boolean ret = true;

        if (_enable)
        {
            if (!this.reservationOnDemandOrderCanBeEnabled(_reservationHierarchyRecId, _inventDimFieldId))
            {
                ret = checkFailed(strFmt("@WAX:Error_ReservationOnDemandOrderCanNotBeEnabledForTheDimension", fieldId2PName(tableNum(InventDim), _inventDimFieldId)));
            }
        }
        else
        {
            WHSReservationHierarchyItem reservationHierarchyItem;
            InventTrans                 inventTrans;
            WHSInventReserve            inventReserve;

            select firstonly RecId from inventTrans
                where (inventTrans.StatusIssue  == StatusIssue::ReservOrdered
                ||    inventTrans.StatusIssue   == StatusIssue::ReservPhysical
                ||    inventTrans.StatusReceipt == StatusReceipt::Ordered)
            exists join reservationHierarchyItem
                where reservationHierarchyItem.ItemDataAreaId       == inventTrans.DataAreaId
                &&    reservationHierarchyItem.ItemId               == inventTrans.ItemId
                &&    reservationHierarchyItem.ReservationHierarchy == _reservationHierarchyRecId;

            // The warehouse inventory transactions modify the WHSInventReserve. So we can rely on WHSInventReserve modifications.
            if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
            {
                select firstonly RecId from inventReserve
                    where inventReserve.ReservPhysical != 0
                exists join reservationHierarchyItem
                    where reservationHierarchyItem.ItemDataAreaId       == inventReserve.DataAreaId
                    &&    reservationHierarchyItem.ItemId               == inventReserve.ItemId
                    &&    reservationHierarchyItem.ReservationHierarchy == _reservationHierarchyRecId;
            }

            if (inventTrans.RecId || inventReserve.RecId)
            {
                ret = checkFailed("@WAX:Error_TransactionExistsInReservedOrderedReservedPhysicalOrderedStatusForItem");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReservationOnDemandOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables a reservation on demand order.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The field ID of the inventory dimension to check.
    /// </param>
    /// <param name="_enable">
    /// If it is true, the reservation on demand order will be enabled; otherwise, will be disabled.
    /// </param>
    internal void enableReservationOnDemandOrder(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId, boolean _enable)
    {
        if (!_reservationHierarchyRecId)
        {
            throw error("@SYS6144");
        }

        WHSReservationHierarchyElement reservationHierarchyElement;

        select firstonly RecId
            from reservationHierarchyElement
            where reservationHierarchyElement.ReservationHierarchy == _reservationHierarchyRecId
            &&    reservationHierarchyElement.DimensionFieldId     == _inventDimFieldId;

        if (!reservationHierarchyElement)
        {
            throw error("@SYS6144");
        }

        if (!this.checkReservationOnDemandOrderCanBeEnabled(_reservationHierarchyRecId, _inventDimFieldId, _enable))
        {
            throw error(strFmt("@WAX:ReservationOnDemandOrderCanNotBeChanged", fieldId2PName(tableNum(InventDim), _inventDimFieldId)));
        }

        ttsbegin;

        WHSReservationHierarchyElementPolicy reservationHierarchyElementPolicy = WHSReservationHierarchyElementPolicy::findByElement(reservationHierarchyElement.RecId, true);

        if (!reservationHierarchyElementPolicy)
        {
            reservationHierarchyElementPolicy.initValue();
            reservationHierarchyElementPolicy.ReservationHierarchyElement = reservationHierarchyElement.RecId;
        }

        reservationHierarchyElementPolicy.AllowReservationOnDemandOrder = _enable ? WHSAllowReservationOnDemandOrder::Flexible : WHSAllowReservationOnDemandOrder::Default;
        reservationHierarchyElementPolicy.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReservationOnDemandOrderForHierarchy</Name>
				<Source><![CDATA[
    private void enableReservationOnDemandOrderForHierarchy(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId)
    {
        WHSReservationHierarchyListBuilder builder = WHSReservationHierarchyListBuilder::construct();
            
        List hierarchyList = builder.buildPartialHierarchyAbove(_reservationHierarchyRecId,
                                                                    WHSReservationHierarchySortOrder::BottomUp,
                                                                    _inventDimFieldId,
                                                                    false);

        ListEnumerator hierarchyListEnumerator = hierarchyList.getEnumerator();
        List           dimFieldList = new List(extendedTypeId2Type(extendedTypeNum(FieldId)));

        while (hierarchyListEnumerator.moveNext())
        {
            WHSReservationHierarchyElementData hierarcyElementData = hierarchyListEnumerator.current();

            if (!WhsReservationHierarchyInventDimUtil::isFieldIdAboveLocationFromResHierRecId(_reservationHierarchyRecId, hierarcyElementData.parmDimensionFieldId()) &&
				this.dimFieldCanUseReservationOnDemandOrder(hierarcyElementData.parmDimensionFieldId()))
            {
                this.enableReservationOnDemandOrder(_reservationHierarchyRecId, hierarcyElementData.parmDimensionFieldId(), true);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldListEnabledReservationOnDemandOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of dimension fields with enabled reservation on demand order value.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// The list of dimension fields with enabled reservation on demand order value.
    /// </returns>
    internal List dimFieldListEnabledReservationOnDemandOrder(WHSReservationHierarchyRecId _reservationHierarchyRecId, WHSReservationHierarchySortOrder _sortOrder = WHSReservationHierarchySortOrder::BottomUp)
    {
        List           hierarchyList = this.parmReservationHierarchyCache().getDimListLocationAndDown(_reservationHierarchyRecId, WHSReservationHierarchySortOrder::BottomUp);
        ListEnumerator hierarchyListEnumerator = hierarchyList.getEnumerator();
        List           dimFieldList = new List(extendedTypeId2Type(extendedTypeNum(FieldId)));

        while (hierarchyListEnumerator.moveNext())
        {
            WHSReservationHierarchyElementData hierarcyElementData = hierarchyListEnumerator.current();

            if (this.isReservationOnDemandOrderEnabled(_reservationHierarchyRecId, hierarcyElementData.parmDimensionFieldId()))
            {
                if (_sortOrder == WHSReservationHierarchySortOrder::BottomUp)
                {
                    dimFieldList.addEnd(hierarcyElementData.parmDimensionFieldId());
                }
                else
                {
                    dimFieldList.addStart(hierarcyElementData.parmDimensionFieldId());
                }
            }
            else
            {
                break;
            }
        }

        return dimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldsEnabledReservationOnDemandOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a FixedInventDim with dimension fields with enabled reservation on demand order value.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <returns>
    /// The FixedInventDim with dimension fields with enabled reservation on demand order value.
    /// </returns>
    internal InventDimFixed dimFieldsEnabledReservationOnDemandOrder(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        InventDimFixed enabledReservationOnDemandOrderDimFields;
        List           dimFieldList = this.dimFieldListEnabledReservationOnDemandOrder(_reservationHierarchyRecId);
        ListEnumerator dimFieldListEnumerator = dimFieldList.getEnumerator();

        while (dimFieldListEnumerator.moveNext())
        {
            FieldId dimFieldId = dimFieldListEnumerator.current();

            enabledReservationOnDemandOrderDimFields = InventDimFixedClass::setField(enabledReservationOnDemandOrderDimFields, InventDimFixedClass::fieldId2Idx(dimFieldId));
        }

        return enabledReservationOnDemandOrderDimFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlexibleReservationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order is enabled.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <returns>
    /// True if the reservation on demand order is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isFlexibleReservationEnabled(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        return this.isReservationOnDemandOrderEnabledOnAnyField(_reservationHierarchyRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlexibleReservationEnabledForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a reservation on demand order is enabled for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <returns>
    /// True if the reservation on demand order is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isFlexibleReservationEnabledForItem(ItemId _itemId)
    {
        return this.isFlexibleReservationEnabled(InventTable::find(_itemId).whsReservationHierarchy());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>