<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPoCostAmountCalculationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller for handling master plan cost calculation.
/// </summary>
class ReqPoCostAmountCalculationController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>ReqPoCostAmountCalculationController</c>.
    /// </summary>
    /// <param name = "_args">A set of arguments that contains the <c>ReqPlanId</c> for the cost calculation.</param>
    /// <returns>A new instance of the <c>ReqPoCostAmountCalculationController</c>.</returns>
    public static ReqPoCostAmountCalculationController construct(Args _args)
    {
        ReqPoCostAmountCalculationController controller = new ReqPoCostAmountCalculationController(
                classStr(ReqPoCostAmountCaclulationService),
                methodStr(ReqPoCostAmountCaclulationService, calculateCostAmount),
                SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);
        ReqPoCostAmountCalculationContract contract = controller.getDataContractObject();
        contract.parmPlanId(controller.parmArgs().parm());
        
        Query query = contract.parmQuery();

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ReqPO));
        SysQuery::findOrCreateRange(qbds, fieldNum(ReqPO, CostAmount)).value(queryValue(0));

        contract.parmQuery(query);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqPoCostAmountCalculationController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>