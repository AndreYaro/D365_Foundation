<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingLedgerBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingLedgerBalance</c> provides ledger balance functions to
/// the creation of the balance sheet and auxiliary ledger reports
/// </summary>
public abstract class ELedgerAccountingLedgerBalance extends ELedgerAccountingFormat
{
    LedgerBalanceMainAccountAmounts         ledgerBalanceOpened;
    LedgerBalanceMainAccountAmounts         ledgerBalanceOpening;
    LedgerBalanceMainAccountAmounts         ledgerBalanceDebitCredit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates main accoun ending balance
    /// </summary>
    /// <param name = "_mainAccount">Main account id</param>
    /// <param name = "_amountOpening">Opening amount</param>
    /// <param name = "_amountDebit">Debit</param>
    /// <param name = "_amountCredit">Credit</param>
    /// <returns>Ending balance</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST endingBalance(MainAccount   _mainAccount,
                                      AmountMST     _amountOpening,
                                      AmountMST     _amountDebit,
                                      AmountMST     _amountCredit)
    {
        AmountMST closingBalance;
        LedgerBalanceMainAccountAmounts ledgerBalanceClosing;
        
        if (contract.parmIncludeClosingPeriods())
        {
            ledgerBalanceClosing = this.getLedgerBalanceClosing();
            ledgerBalanceClosing.calculateBalance(_mainAccount);
            closingBalance = ledgerBalanceClosing.getAccountingCurrencyBalance();
        }
        return (_amountOpening + _amountDebit - _amountCredit + closingBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerBalanceClosing</Name>
				<Source><![CDATA[
    private LedgerBalanceMainAccountAmounts getLedgerBalanceClosing()
    {
        LedgerBalanceMainAccountAmounts ledgerBalanceClosing;

        ledgerBalanceClosing = LedgerBalanceMainAccountAmounts::construct();

        ledgerBalanceClosing.parmAccountingDateRange(toDate, toDate);
        ledgerBalanceClosing.parmIncludeClosingPeriodBySystem(true);
        ledgerBalanceClosing.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));

        return ledgerBalanceClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerBalanceDebitCredit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerBalanceDebitCredit()
    {
        ledgerBalanceDebitCredit = LedgerBalanceMainAccountAmounts::construct();
        
        ledgerBalanceDebitCredit.parmAccountingDateRange(FromDate, toDate);
        ledgerBalanceDebitCredit.parmIncludeRegularPeriod(true);
        ledgerBalanceDebitCredit.parmIncludeClosingPeriod(true);
        ledgerBalanceDebitCredit.parmSeparateDebitsAndCredits(true);
        ledgerBalanceDebitCredit.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerBalanceOpening</Name>
				<Source><![CDATA[
    private void initLedgerBalanceOpening()
    {
        ledgerBalanceOpened = LedgerBalanceMainAccountAmounts::construct();

        if (MexicanAuxiliaryLedgerXMLReportFlight::instance().isEnabled())
        {
            // Set date range from the start of the Opening period to the day before the start of the current period
            date yearStartDate = LedgerFiscalCalendar::findFirstDayOfYear(Ledger::fiscalCalendar(), fromDate);
            boolean isFirstOperatingPeriod = yearStartDate == fromDate;

            ledgerBalanceOpened.parmAccountingDateRange(
                yearStartDate,
                isFirstOperatingPeriod ? fromDate : fromDate -1);

            // Always include Opening period
            ledgerBalanceOpened.parmIncludeOpeningPeriod(true);

            // Include Operating period only when current period is not the first period of the fiscal year
            ledgerBalanceOpened.parmIncludeRegularPeriod(!isFirstOperatingPeriod);
        }
        else
        {
            ledgerBalanceOpened.parmIncludeOpeningPeriod(true);
            ledgerBalanceOpened.parmIncludeClosingPeriodBySystem(LedgerParameters::find().PeriodClosingPosting);
            ledgerBalanceOpened.parmIncludeClosingPeriod(true);
        }

        ledgerBalanceOpened.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerBalanceOpeningCurrent</Name>
				<Source><![CDATA[
    private void initLedgerBalanceOpeningCurrent()
    {
        ledgerBalanceOpening = LedgerBalanceMainAccountAmounts::construct();

        if (MexicanAuxiliaryLedgerXMLReportFlight::instance().isEnabled())
        {
            ledgerBalanceOpening.parmAccountingDateRange(fromDate, toDate);
            ledgerBalanceOpening.parmIncludeRegularPeriod(true);
        }
        else
        {
            ledgerBalanceOpening.parmAccountingDateRange(fromDate, fromDate);
        }

        ledgerBalanceOpening.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger balance variables
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initializeLedgerBalances()
    {
        this.initLedgerBalanceOpening();
        this.initLedgerBalanceOpeningCurrent();
        this.initLedgerBalanceDebitCredit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>