<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplExchAdj_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplExchAdj_RU  extends RunBaseBatch implements BatchRetryable
{
    EmplExchAdjTrans_RU     emplExchAdjTrans;

    EmplTrans_RU            emplTrans;

    TransDate               postingDate;
    TransDate               exchRateDate;
    NoneTableTrans          dimSpec;
    TransactionSelect       postingSpec;
    EmplPostingProfile_RU   postingProfile;
    DimensionDefault        defaultDimension;
    EmplExchPrinciples_RU   exchPrinciples;
    TransTxt                transExchAdjTxt;
    Notes                   notes;

    DialogField             dialogExchPrinciple;
    DialogField             dialogExchRateDate;
    DialogField             dialogPostingDate;
    DialogField             dialogDimSpec;
    DialogField             dialogPostingSpec;
    DialogField             dialogPostingProfile;
    DialogField             dialogTransExchAdjTxt;
    DialogField             dialogNotes;

    DialogRunbase           dialogRunbase;
    QueryRun                queryRun;

    protected const Version CurrentVersion_EmplExchAdj_RU = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns default dimension
    /// </summary>
    /// <returns>
    ///  <c>DimensionDefault</c>
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup     groupParameteres;
        #define.numOfColumns(2)

        dialogRunbase = super();

        groupParameteres = dialogRunbase.addGroup("@SYS7764");
        groupParameteres.columns(#numOfColumns);

        dialogRunbase.addGroup("@SYS7764",groupParameteres).frameType(FormFrameType::None);
        dialogExchPrinciple  = dialogRunbase.addFieldValue(enumStr(EmplExchPrinciples_RU), exchPrinciples, "@SYS15097","@SYS95474");
        dialogPostingDate    = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), postingDate, "@SYS95471","@SYS95470");
        dialogExchRateDate   = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), exchRateDate, "@SYS8879", "@SYS95473");

        dialogRunbase.addGroup("@SYS7764",groupParameteres).frameType(FormFrameType::None);

        dialogPostingSpec    = dialogRunbase.addFieldValue(enumStr(TransactionSelect), postingSpec, "@SYS26617", "@SYS95477");
        dialogPostingProfile = dialogRunbase.addFieldValue(extendedTypeStr(EmplPostingProfile_RU), postingProfile, "@SYS21530", "@SYS95476");
        dialogDimSpec        = dialogRunbase.addFieldValue(enumStr(NoneTableTrans), dimSpec, "@SYS14926","@SYS95475");

        dialogRunbase.addGroup("@SYS2595");
        dialogTransExchAdjTxt = dialogRunbase.addFieldValue(extendedTypeStr(TransTxt), transExchAdjTxt, "@SYS13566","");
        dialogNotes           = dialogRunbase.addFieldValue(extendedTypeStr(Notes), notes, "@SYS70989","@SYS95478");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimSpec</Name>
				<Source><![CDATA[
    public Integer dimSpec()
    {
        return dimSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchPrinciples</Name>
				<Source><![CDATA[
    public EmplExchPrinciples_RU exchPrinciples()
    {
        return exchPrinciples;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateDate</Name>
				<Source><![CDATA[
    public TransDate exchRateDate()
    {
        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        exchPrinciples  = dialogExchPrinciple.value();
        postingDate     = dialogPostingDate.value();
        exchRateDate    = dialogExchRateDate.value();

        if (!exchRateDate)
        {
            exchRateDate = postingDate;
        }

        dimSpec         = dialogDimSpec.value();
        postingSpec     = dialogPostingSpec.value();
        postingProfile  = dialogPostingProfile.value();
        transExchAdjTxt = dialogTransExchAdjTxt.value();
        notes           = dialogNotes.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun       = new QueryRun(queryStr(EmplRateAdjustment_RU));
        postingProfile = EmplParameters_RU::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notes</Name>
				<Source><![CDATA[
    public Notes notes()
    {
        return  notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequence</Name>
				<Source><![CDATA[
    public NumberSequenceReference numberSequence()
    {
        return EmplParameters_RU::numRefEmplExchAdjVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion_EmplExchAdj_RU, dimSpec, postingSpec, postingProfile, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _value=defaultDimension)
    {
        defaultDimension = _value;
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimSpec</Name>
				<Source><![CDATA[
    public NoneTableTrans parmDimSpec(NoneTableTrans _value=dimSpec)
    {
        dimSpec = _value;
        return dimSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchPrinciples</Name>
				<Source><![CDATA[
    public EmplExchPrinciples_RU parmExchPrinciples(EmplExchPrinciples_RU _value=exchPrinciples)
    {
        exchPrinciples = _value;
        return exchPrinciples;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRateDate</Name>
				<Source><![CDATA[
    public TransDate parmExchRateDate(TransDate _value=exchRateDate)
    {
        exchRateDate = _value;
        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    public Notes parmNotes(Notes _value=notes)
    {
        notes = _value;
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
    public TransDate parmPostingDate(TransDate _value=postingDate)
    {
        postingDate = _value;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile</Name>
				<Source><![CDATA[
    public EmplPostingProfile_RU parmPostingProfile(EmplPostingProfile_RU _value=postingProfile)
    {
        postingProfile = _value;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingSpec</Name>
				<Source><![CDATA[
    public TransactionSelect parmPostingSpec(TransactionSelect _value=postingSpec)
    {
        postingSpec = _value;
        return postingSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _value=queryRun)
    {
        queryRun = _value;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransExchAdjTxt</Name>
				<Source><![CDATA[
    public TransTxt parmTransExchAdjTxt(TransTxt _value=transExchAdjTxt)
    {
        transExchAdjTxt = _value;
        return transExchAdjTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingDate</Name>
				<Source><![CDATA[
    public TransDate postingDate()
    {
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    public TransStatusCode postingProfile()
    {
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSpec</Name>
				<Source><![CDATA[
    public Integer postingSpec()
    {
        return postingSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        emplExchAdjTrans = new EmplExchAdjTrans_RU(this);
        emplExchAdjTrans.update(queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transExchAdjTxt</Name>
				<Source><![CDATA[
    public TransTxt transExchAdjTxt()
    {
        return transExchAdjTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxtType</Name>
				<Source><![CDATA[
    public LedgerTransTxt transTxtType()
    {
        return LedgerTransTxt::LedgerExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case CurrentVersion_EmplExchAdj_RU:
                [version, dimSpec, postingSpec, postingProfile, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        if (! postingDate)
        {
            throw error(strFmt("@SYS84378","@SYS95471"));
        }

        ret = LedgerFiscalCalendar::checkDateIsValid(CompanyInfoHelper::fiscalCalendarRecId(), postingDate);

        if (exchRateDate != postingDate)
        {
            ret = (Box::yesNo("@SYS95677",DialogButton::Yes,"@SYS8879","@SYS95678") == DialogButton::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        EmplExchAdj_RU emplExchAdj = new EmplExchAdj_RU();

        if (emplExchAdj.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00064, funcName());

            emplExchAdj.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>