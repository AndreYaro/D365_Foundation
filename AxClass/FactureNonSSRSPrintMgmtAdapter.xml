<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FactureNonSSRSPrintMgmtAdapter</c> class used to allow
/// use of print management for non-SSRS (for example, Microsoft Office Excel) facture report.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesOrderFacture),
NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::PurchaseOrderFacture),
NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesFreeTextFacture)]
class FactureNonSSRSPrintMgmtAdapter extends NonSSRSPrintMgmtAdapter
{
    FormLetterJournalPrint      factureJournalPrint;
    SalesFormLetter_FreeText    salesFormLetter;
    RecordSortedList            journalList;
    FactureJour_RU              factureJour;

    //inner variables
    Common                  transTable;
    PrintMgmtNodeType       printMgmtNodeType;
    PrintMgmtHierarchyType  printMgmtHierarchyType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
        protected PrintMgmtNodeType getNodeType()
    {
        return printMgmtNodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this object.
    /// </summary>
    protected void initialize()
    {
        //Do nothing - printMgmtReportRun initialized depending on facture type and other parameters
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PrintMgmtReportRun</c> object according to setup of internal variables.
    /// </summary>
    /// <remarks>
    /// Internal variable values depend on distinct facture module and other facture parameters.
    /// </remarks>
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            printMgmtHierarchyType,
            printMgmtNodeType,
            printMgmtDocumentType);

        if (factureJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(factureJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(factureJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmForcePrintJobSettings(!factureJournalPrint.parmUsePrintManagement());
        }
        else if (salesFormLetter)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            printMgmtReportRun.parmForcePrintJobSettings(!salesFormLetter.usePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            //forcePrintJobSettings is reversal to usePrintManagement
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }

        printMgmtReportRun.parmSSRS(PrintMgmtSSRS::NonSSRS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for print management settings and then executes them.
    /// </summary>
    protected void runPrintMgmt()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }
        if (SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(FormletterJournalPrint)))
        {
            factureJournalPrint = args.caller();
        }
        else if (classIdGet(args.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = args.caller();
        }

        while (journalList.next(factureJour))
        {
            if (!factureJour)
            {
                throw error("@SYS26348");
            }

            this.setFactureJour(factureJour);

            this.initPrintMgmtReportRun();

            this.loadPrintSettings(factureJour, transTable, factureJour.LanguageId);
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFactureJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables with values from facture journal.
    /// </summary>
    /// <param name="_factureJour">
    /// The <c>FactureJour_RU</c> record which is the source of data.
    /// </param>
    private void setFactureJour(FactureJour_RU _factureJour)
    {
        FactureTrans_RU factureTrans;
        Counter         counter;
        boolean         freeTextInvoice;

        switch (_factureJour.Module)
        {
            case FactureModule_RU::Cust:
                while select SalesPurchId from factureTrans
                    group by SalesPurchId
                    where factureTrans.FactureId == _factureJour.FactureId &&
                          factureTrans.Module    == _factureJour.Module
                {
                    counter++;
                    if (!factureTrans.SalesPurchId)
                    {
                        freeTextInvoice = true;
                    }
                }
                if (counter == 1)
                {
                    select firstOnly factureTrans
                        where factureTrans.FactureId == _factureJour.FactureId &&
                                factureTrans.Module    == _factureJour.Module;

                    if (freeTextInvoice)
                    {
                        transTable = CustInvoiceTable::findPostedInvoice(
                            _factureJour.CustVendInvoiceAccount,
                            factureTrans.InvoiceId,
                            factureTrans.InvoiceDate);
                        printMgmtNodeType = PrintMgmtNodeType::CustInvoiceTable;
                        printMgmtDocumentType  = PrintMgmtDocumentType::SalesFreeTextFacture;
                    }
                    else
                    {
                        transTable = SalesTable::find(factureTrans.SalesPurchId);
                        printMgmtNodeType      = PrintMgmtNodeType::SalesTable;
                        printMgmtDocumentType  = PrintMgmtDocumentType::SalesOrderFacture;
                    }
                }
                else
                {
                    transTable = CustTable::find(_factureJour.CustVendInvoiceAccount);
                    printMgmtNodeType      = PrintMgmtNodeType::CustTable;
                    printMgmtDocumentType  = PrintMgmtDocumentType::SalesOrderFacture;
                }

                printMgmtHierarchyType = PrintMgmtHierarchyType::Sales;
                break;
            case FactureModule_RU::Vend:
                while select SalesPurchId from factureTrans
                    group by SalesPurchId
                    where factureTrans.FactureId == _factureJour.FactureId &&
                          factureTrans.Module    == _factureJour.Module
                {
                    counter++;
                }
                if (counter == 1)
                {
                    select firstOnly SalesPurchId from factureTrans
                        where factureTrans.FactureId == _factureJour.FactureId &&
                              factureTrans.Module    == _factureJour.Module;

                    transTable = PurchTable::find(factureTrans.SalesPurchId);
                    printMgmtNodeType = PrintMgmtNodeType::PurchTable;
                }
                else
                {
                    transTable = VendTable::find(_factureJour.CustVendInvoiceAccount);
                    printMgmtNodeType = PrintMgmtNodeType::VendTable;
                }
                printMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
            case FactureModule_RU::Empl:
                transTable = null;
                printMgmtNodeType      = PrintMgmtNodeType::Purch;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
            case FactureModule_RU::TaxCorrectionPurch_Cust:
            case FactureModule_RU::TaxCorrectionSales:
                transTable = CustTable::find(_factureJour.CustVendInvoiceAccount);

                printMgmtNodeType      = PrintMgmtNodeType::CustTable;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::SalesOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Sales;
                break;
            case FactureModule_RU::TaxCorrectionPurch:
            case FactureModule_RU::TaxCorrectionSales_Vend:
                transTable = VendTable::find(_factureJour.CustVendInvoiceAccount);

                printMgmtNodeType      = PrintMgmtNodeType::VendTable;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
        }
        args.record(factureJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set record ID parameter of record being processed.
    /// </summary>
    protected void setRecordId()
    {
        recordId = factureJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>