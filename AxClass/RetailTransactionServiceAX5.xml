<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceAX5</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceAX5</c> class is used as a service class between the Ax and the POS 2009.
/// </summary>
class RetailTransactionServiceAX5
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLoyaltyTrans</Name>
				<Source><![CDATA[
    private container fillLoyaltyTrans(RetailTransactionLoyaltyRewardPointTrans transactionLoyaltyTrans)
{
    container   c;
    ;

    c = [transactionLoyaltyTrans.cardNumber];

    return c;
}

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesTrans</Name>
				<Source><![CDATA[
    private container fillSalesTrans(RetailTransactionSalesTrans transactionSalesTrans)
{
    // NOTE:
    // All three tables must be mapped to the same data:
    // POS - ReturnTranscation CreateItemDataTable()
    // TS  - GetTranscation() table
    // AX  - fillSalesTrans() container

    container   salesTrans;
    ;
    salesTrans = [transactionSalesTrans.transactionId,
                  transactionSalesTrans.receiptId,
                  transactionSalesTrans.lineNum,
                  transactionSalesTrans.barcode,
                  transactionSalesTrans.itemId,
                  "", // Deprecated - DEL_itemDepartmentId,
                  "", // Deprecated - DEL_itemGroupId,
                  transactionSalesTrans.variantId,
                  transactionSalesTrans.transactionStatus,
                  transactionSalesTrans.comment,
                  transactionSalesTrans.InventBatchId,
                  transactionSalesTrans.returnQty,
                  transactionSalesTrans.price,
                  transactionSalesTrans.netPrice,
                  transactionSalesTrans.qty,
                  transactionSalesTrans.taxGroup,
                  transactionSalesTrans.taxAmount,
                  transactionSalesTrans.totalDiscAmount,
                  transactionSalesTrans.totalDiscPct,
                  transactionSalesTrans.lineDscAmount,
                  transactionSalesTrans.periodicDiscAmount,
                  transactionSalesTrans.discAmount,
                  transactionSalesTrans.unit,
                  transactionSalesTrans.unitQty,
                  transactionSalesTrans.InventSerialId,
                  "", // Deprecated transactionSalesTrans.RFIDTagId
                  transactionSalesTrans.OriginalTaxGroup,
                  transactionSalesTrans.TaxItemGroup,
                  transactionSalesTrans.OriginalTaxItemGroup,
                  transactionSalesTrans.periodicDiscType];

    return salesTrans;
}

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactionTable</Name>
				<Source><![CDATA[
    private container fillTransactionTable(RetailTransactionTable transactionTable)
{
    container   transTable;
    ;
    transTable = [transactionTable.transactionId,
                  transactionTable.receiptId,
                  transactionTable.store,
                  transactionTable.terminal,
                  transactionTable.staff,
                  transactionTable.transDate,
                  transactionTable.shift,
                  transactionTable.shiftDate,
                  transactionTable.custAccount,
                  transactionTable.entryStatus,
                  transactionTable.currency];

    return transTable;

}

]]></Source>
			</Method>
			<Method>
				<Name>createAddress</Name>
				<Source><![CDATA[
    /// <summary>
/// Create address for customer.
/// </summary>
/// <param name="_paramList">
/// Container.
/// </param>
/// <returns>
/// Container with entity keys
/// </returns>
public static container createAddress(container _paramList)
{
    container                   addressNew;
    container ret;
    DirPartyLocation            dirPartyLocation;
    RecId                       party;
    RecId                       postalPartyLocation;
    DirPartyTable               dirPartyTable;

    CustAccount                 custAccount = conpeek(_paramList,1);
    CustName                    custName    = conpeek(_paramList,2);
    AddressStreet               street      = conpeek(_paramList,3);
    AddressCity                 city        = conpeek(_paramList,4);
    AddressCountyId             county      = conpeek(_paramList,5);
    AddressStateId              state       = conpeek(_paramList,6);
    AddressZipCodeId            zip         = conpeek(_paramList,7);
    AddressCountryRegionId      country     = conpeek(_paramList,8);
    Phone                       phone       = conpeek(_paramList,9);
    PhoneMobile                 cellPhone   = conpeek(_paramList,10);
    EMail                       eMail       = conpeek(_paramList,11);
    URL                         uRL         = conpeek(_paramList,12);
    TaxGroup                    taxGroup    = conpeek(_paramList,13);
    LogisticsLocationRoleType   role        = conpeek(_paramList,14);

    ret = RetailTransactionService::CreateAddress(custAccount, custName, street, city, county, state, zip, country, phone, eMail, uRL,
    taxGroup, role);

    party = conPeek(ret, 3);  // custTable.Party
    select firstOnly PartyNumber from dirPartyTable where dirPartyTable.RecId == party;

    postalPartyLocation = conPeek(ret, 8);

    select firstOnly IsPrimary from dirPartyLocation where dirPartyLocation.RecId == postalPartyLocation;

    addressNew = [
        conPeek(ret, 1),
        conPeek(ret, 2),
        conPeek(ret, 6),  // postal address RecID
        conPeek(ret, 7),  // postal address logistica location RecID
        postalPartyLocation,  // postal address party location RecID
        dirPartyTable.PartyNumber,
        dirPartyLocation.IsPrimary
    ];

    return addressNew;
}

]]></Source>
			</Method>
			<Method>
				<Name>createPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the PackingSlip for sales order transaction.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <returns>
/// <c>Container</c> with the value true and empty string if the PackingSlip creation is success; else false wih the appropriate string message.
/// </returns>
public static container createPackingSlip(SalesId _salesId)
{
    container printSuccess = [true,""];

    printSuccess = RetailTransactionService::CreatePackingSlip(_salesId);

    return printSuccess;
}

]]></Source>
			</Method>
			<Method>
				<Name>createPickingList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the PickingList for sales order transaction.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <param name="_inventLocationId">
/// Warehouse for which to create the picking list.
/// </param>
/// <returns>
/// <c>Container</c> with the value true and empty string if the PickingList creation is success; else false wih the appropriate string message.
/// </returns>
public static container createPickingList(SalesId           _salesId,
                                          InventLocationId  _inventLocationId)
{
    container printSuccess = [true,""];

    printSuccess = RetailTransactionService::CreatePickingList(_salesId, _inventLocationId);

    return printSuccess;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherCreate</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates new record in the table <c>RetailCreditVoucherTable</c>.
/// </summary>
/// <param name="_storeId">
/// The store Id to be inserted to the new record.
/// </param>
/// <param name="_terminalId">
/// The terminal Id to be inserted to the new record.
/// </param>
/// <param name="_staffId">
/// The staff Id to be inserted to the new record.
/// </param>
/// <param name="_transactionId">
/// The transaction Id to be inserted to the new record.
/// </param>
/// <param name="_receiptId">
/// The receipt Id to be inserted to the new record.
/// </param>
/// <param name="_lineNum">
/// The line num to be inserted to the new record.
/// </param>
/// <param name="_currencyCode">
/// The currency code to be inserted to the new record.
/// </param>
/// <param name="_amountMST">
/// The amount MST to be inserted to the new record.
/// </param>
/// <param name="_transDate">
/// The trans date to be inserted to the new record.
/// </param>
/// <param name="_transTime">
/// The trans time to be inserted to the new record.
/// </param>
/// <param name="_dateSequence">
/// The format of the date.
/// </param>
/// <returns>
/// A container with a boolean value along with message to indicate if the record is created successfully.
/// </returns>
public static container creditVoucherCreate(RetailStoreId       _storeId,
                                            RetailTerminalId    _terminalId,
                                            RetailStaffId       _staffId,
                                            RetailTransactionId _transactionId,
                                            RetailReceiptId     _receiptId,
                                            RetailLineNum       _lineNum,
                                            CurrencyCode        _currencyCode,
                                            AmountMST           _amountMST,
                                            str                 _transDate,
                                            str                 _transTime,
                                            int                 _dateSequence = 123)
{
    container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::IssueCreditMemo(_storeId, _terminalId, _staffId, _transactionId, _receiptId,
                                                     _lineNum, _currencyCode, _amountMST, _transDate, _transTime,
                                                     _dateSequence);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Updates a record in the table <c>RetailCreditVoucherTable</c>.
/// </summary>
/// <param name="_dataEntryId">
/// The data entry Id to be updated to the new record.
/// </param>
/// <param name="_storeId">
/// The store Id to be updated to the new record.
/// </param>
/// <param name="_terminalId">
/// The terminal Id to be updated to the new record.
/// </param>
/// <param name="_staffId">
/// The staff Id to be updated to the new record.
/// </param>
/// <param name="_transactionId">
/// The transaction Id to be updated to the new record.
/// </param>
/// <param name="_receiptId">
/// The receipt Id to be updated to the new record.
/// </param>
/// <param name="_lineNum">
/// The line num to be updated to the new record.
/// </param>
/// <param name="_amountMST">
/// The amount MST to be updated to the new record.
/// </param>
/// <param name="_transDate">
/// The trans date to be updated to the new record.
/// </param>
/// <param name="_transTime">
/// The trans time to be updated to the new record.
/// </param>
/// <param name="_dateSequence">
/// The format of the date.
/// </param>
/// <returns>
/// A boolean to indicate if the record is updated successfully.
/// </returns>
public static container creditVoucherUpdate(RetailCreditVoucherId   _dataEntryId,
                                            RetailStoreId           _storeId,
                                            RetailTerminalId        _terminalId,
                                            RetailStaffId           _staffId,
                                            RetailTransactionId     _transactionId,
                                            RetailReceiptId         _receiptId,
                                            RetailLineNum           _lineNum,
                                            AmountMST               _amountMST,
                                            str                     _transDate,
                                            str                     _transTime,
                                            int                     _dateSequence = 123)
{
    container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::UpdateCreditMemo(_dataEntryId, _storeId, _terminalId, _staffId, _transactionId,
                                                      _receiptId, _lineNum, _amountMST, _transDate, _transTime, _dateSequence);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherValidate</Name>
				<Source><![CDATA[
    /// <summary>
/// Validates the credit voucher for the given credit memo number.
/// </summary>
/// <param name="_dataEntryId">
/// The data entry Id to be updated to the new record.
/// </param>
/// <param name="_storeId">
/// The store Id to be updated to the new record.
/// </param>
/// <param name="_terminalId">
/// The terminal Id to be updated to the new record.
/// </param>
/// <returns>
/// A boolean to indicate if the record is validated.
/// </returns>
public static container creditVoucherValidate(RetailCreditVoucherId _dataEntryId,
                                              RetailStoreId         _storeId,
                                              RetailTerminalId      _terminalId)
{
    Container creditVoucherStatus = [false,"",0,0];

    creditVoucherStatus = RetailTransactionService::ValidateCreditMemo(_dataEntryId, _storeId, _terminalId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherVoid</Name>
				<Source><![CDATA[
    /// <summary>
/// Checks the status of <c>Voided</c> of table <c>RetailCreditVoucherTable</c>.
/// </summary>
/// <param name="_dataEntryId">
/// The data entry Id to be updated to the new record.
/// </param>
/// <returns>
/// A boolean value to indicate if the credit voucher is voided or no.
/// </returns>
public static container creditVoucherVoid(RetailCreditVoucherId _dataEntryId)
{
    container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::VoidCreditMemo(_dataEntryId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherVoidPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Voids the payment for the credit voucher.
/// </summary>
/// <param name="_dataEntryId">
/// The data entry Id to be updated to the new record.
/// </param>
/// <param name="_storeId">
/// The store Id to be updated to the new record.
/// </param>
/// <param name="_terminalId">
/// The terminal Id to be updated to the new record.
/// </param>
/// <returns>
/// A boolean value to indicate if the credit voucher payment is voided.
/// </returns>
 public static container creditVoucherVoidPayment(RetailCreditVoucherId     _dataEntryId,
                                                  RetailStoreId             _storeId,
                                                  RetailTerminalId          _terminalId)
{
    Container creditVoucherStatus = [false,""];

    creditVoucherStatus = RetailTransactionService::VoidCreditMemoPayment(_dataEntryId, _storeId, _terminalId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>customerNew</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating new customer.
/// </summary>
/// <param name="_paramList">
/// Container.
/// </param>
/// <returns>
/// Container with entity keys
/// </returns>
public static container customerNew(container _paramList)
{
    container customerNew;
    container ret;

    CustName                    custName                    = conpeek(_paramList,1);
    CustTableAlias              custTableAlias              = conpeek(_paramList,2);
    CustGroupId                 custGroup                   = conpeek(_paramList,3);
    CustCurrencyCode            currency                    = conpeek(_paramList,4);
    CustLanguageId              languageId                  = conpeek(_paramList,5);
    AddressStreet               street                      = conpeek(_paramList,6);
    AddressZipCodeId            zipCode                     = conpeek(_paramList,7);
    AddressStateId              state                       = conpeek(_paramList,8);
    AddressCountyId             county                      = conpeek(_paramList,9);
    Phone                       phone                       = conpeek(_paramList,10);
    PhoneMobile                 cellularPhone               = conpeek(_paramList,11);
    Email                       email                       = conpeek(_paramList,12);
    URL                         url                         = conpeek(_paramList,13);
    CustMultiLineDiscCode       multiLineDisc               = conpeek(_paramList,14);
    CustEndDiscCode             endDisc                     = conpeek(_paramList,15);
    CustLineDiscCode            lineDisc                    = conpeek(_paramList,16);
    CustPriceGroup              priceGroup                  = conpeek(_paramList,17);
    TaxGroup                    taxGroup                    = conpeek(_paramList,18);
    CustCreditMaxMST            creditMax                   = conpeek(_paramList,19);
    CustBlocked                 blocked                     = conpeek(_paramList,20);
    OrgId                       orgId                       = conpeek(_paramList,21);
    RetailUsePurchRequest       usePurchRequest             = conpeek(_paramList,22);
    VATNum                      vatNum                      = conpeek(_paramList,23);
    CustInvoiceAccount          invoiceAccount              = conpeek(_paramList,24);
    MandatoryCreditLimit        mandatoryCreditLimit        = conpeek(_paramList,25);
    ContactPersonId             contactPersonId             = conpeek(_paramList,26);
    RetailUseOrderNumberReference   useOrderNumberReference = conpeek(_paramList,27);
    RetailReceiptOption            receiptOption            = conpeek(_paramList,28);
    RetailReceiptEmail             receiptEmail             = conpeek(_paramList,29);
    AddressCity                 city                        = conpeek(_paramList,30);
    AddressCountryRegionId      country                     = conpeek(_paramList,31);
    CustIdentificationNumber    identificationNumber        = conpeek(_paramList,32);
    int64                       storeRecId;
    DirPartyType                partyType = DirPartyType::Person;  // default to person

    RetailStoreTable store;
    RetailStoreAddressBook storeAddressBook;
    DirAddressBook dirAddressBook;
    DirPartyTable dirPartyTable;
    CustTable custTable;
    AccountNum accountNum;
    container storeAddressBooks;

    DataAreaId le = curext();

    ret = RetailTransactionService::NewCustomer(custName, custGroup, currency, languageId, street, zipCode, state, county, phone, cellularPhone, email, url, multiLineDisc, endDisc, lineDisc, priceGroup, taxGroup, creditMax, blocked, orgId, usePurchRequest, vatNum, invoiceAccount, mandatoryCreditLimit, contactPersonId, useOrderNumberReference, receiptOption, receiptEmail, city, country, identificationNumber, storeRecId, partyType);

    accountNum = conPeek(ret, 3);

    // set address book for this customer based on current LE
    while select RecId from dirAddressBook
        exists join storeAddressBook
            where storeAddressBook.AddressBook == dirAddressBook.RecId
               && storeAddressBook.AddressBookType == RetailAddressBookType::Customer
        exists join store
            where storeAddressBook.StoreRecId == store.RecId
               && store.inventLocationDataAreaId == le
    {
        storeAddressBooks += dirAddressBook.RecId;
    }

    select firstOnly RecId from dirPartyTable
        exists join custTable
            where custTable.AccountNum == accountNum
               && custTable.Party == dirPartyTable.RecId;

    if (conLen(storeAddressBooks) > 0 && dirPartyTable)
    {
        DirAddressBookParty::createPartyRelations(dirPartyTable.RecId, storeAddressBooks);
    }

    customerNew = [
        conPeek(ret, 1),
        conPeek(ret, 2),
        accountNum,
        conPeek(ret, 4),
        conPeek(ret, 5)
    ];

    return customerNew;
}

]]></Source>
			</Method>
			<Method>
				<Name>customerStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for checking the status of the customer account i.e.,
/// 1.Existence of the customer
/// 2.Blocked/Unblocked
/// 3.Credit limit
/// </summary>
/// <param name="_custAccount">
/// ID of the CustTable.AccountNum field.
/// </param>
/// <param name="_salesAmount">
/// <c>AmountMST</c>
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container customerStatus(custAccount _custAccount, AmountMST  _salesAmount, CurrencyCode _currencyCode)
{
    container customerStatus = [false,0];

    customerStatus = RetailTransactionService::ValidateCustomerStatus(_custAccount, _salesAmount, _currencyCode);

    return customerStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>getLoyaltyPointStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// The function calculates the used, issued, expired points, depending on the table and baseEnum (Used; Issued; Expired).
/// </summary>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <returns>
/// <c>Container</c> having calculated points.
/// </returns>
public static container getLoyaltyPointStatus(RetailCardNumber _pLoyaltyCardNo)
{
    container loyaltyPoinstStatus = [true,"",0,0];

    loyaltyPoinstStatus = RetailTransactionService::GetLoyaltyPointsStatus(_pLoyaltyCardNo);

    return loyaltyPoinstStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </summary>
/// <param name="_invoiceId">
/// ID of the CustTrans.Invoice field.
/// </param>
/// <returns>
/// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </returns>
public static container getSalesInvoice(InvoiceId _invoiceId)
{
    container salesInvoice = [false,"","","","","","",""];

    salesInvoice = RetailTransactionService::GetSalesInvoice(_invoiceId);

    return salesInvoice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>CustTrans</c> table to get the list of the sales invoices.
/// </summary>
/// <param name="_custAccount">
/// ID of the CustTrans.AccountNum field.
/// </param>
/// <returns>
/// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </returns>
/// <remarks>
/// RetailTransactionService::getSalesInvoice method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and
/// <c>CustTable</c>.
/// </remarks>
public static container getSalesInvoiceList(CustAccount _custAccount)
{
    CustTrans           custTrans;
    CustTransOpen       custTransOpen;
    container           salesInvoice = [true,''];
    ;

    while select RecId, Invoice, AccountNum, TransType, AmountCur from custTrans
    where custTrans.AccountNum == _custAccount
       && custTrans.Invoice
       && custTrans.TransType == LedgerTransType::Sales
       && custTrans.AmountCur > 0
    {
        custTransOpen = CustTransOpen::findRefId(custTrans.RecId);

        if (custTransOpen)
        {
            salesInvoice += [RetailTransactionServiceAx5::getSalesInvoice(custTrans.Invoice)];
        }
    }

    return salesInvoice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>
public static container getSalesOrder(SalesId _salesId)
{
    container salesOrder = [false,"","","","","","","","", "", "", 0, true, "", 0];

    salesOrder = RetailTransactionService::GetSalesOrder(_salesId);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>SalesTable</c> to get the list of the sales orders.
/// </summary>
/// <param name="_custAccount">
/// ID of the SalesTable.CustAccount field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>
public static container getSalesOrderList(CustAccount _custAccount)
{
    SalesTable          salesTable;

    container           salesOrder = [true,''];
    ;

    while select SalesType, CustAccount, SalesStatus, SalesId from salesTable
    where salesTable.SalesType == SalesType::Sales
       && salesTable.CustAccount == _custAccount
       && (salesTable.SalesStatus == SalesStatus::None ||
           salesTable.SalesStatus == SalesStatus::Backorder ||
           salesTable.SalesStatus == SalesStatus::Delivered)
    {
        salesOrder += [RetailTransactionService::GetSalesOrder(salesTable.SalesId)];
    }

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderListForPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>SalesTable</c> to get the list of the sales orders for prepayments.
/// </summary>
/// <param name="_custAccount">
/// ID of the SalesTable.CustAccount field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>
public static container getSalesOrderListForPrepayments(CustAccount _custAccount)
{
    container salesOrder = [true,''];

    salesOrder = RetailTransactionService::GetSalesOrderListForPrepayments(_custAccount);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the list of transaction sales trans.
/// </summary>
/// <param name="receiptId">
/// Transaction receipt idf.
/// </param>
/// <param name="storeId">
/// Transaction store id.
/// </param>
/// <param name="terminalId">
/// Transaction terminal id.
/// </param>
/// <returns>
/// Continer, which has list of transaction sales trans.
/// </returns>
public static container getTransactionSalesTrans(RetailReceiptId   receiptId,
                                                 RetailStoreId     storeId    = '',
                                                 RetailTerminalId  terminalId = '')
{
    RetailTransactionServiceAX5            transactionService = new RetailTransactionServiceAX5();
    RetailTransactionTable                 transactionTable;
    RetailTransactionSalesTrans            transactionSalesTrans;
    RetailTransactionLoyaltyRewardPointTrans    transactionLoyaltyTrans;
    container                           output = [true,''];
    container                           conItems;
    ;

    if (storeId && terminalId)
    {
        select count(RecId) from transactionTable
        where transactionTable.receiptId   == receiptId
           && transactionTable.store       == storeId
           && transactionTable.terminal    == terminalId
           && transactionTable.entryStatus != RetailEntryStatus::Voided;
    }
    else
    {
        select count(RecId) from transactionTable
        where transactionTable.receiptId   == receiptId
           && transactionTable.entryStatus != RetailEntryStatus::Voided;
    }

    if (transactionTable.RecId == 0)
    {
        // No transactions for receipt ID.
        output = [false,strfmt("@RET4544",receiptId),transactionTable.RecId];
    }
    else if (transactionTable.RecId > 1)
    {
        // Too many transactions were found for receipt ID.
        output = [false,strfmt("@RET4545",receiptId),transactionTable.RecId];
    }
    else if (transactionTable.RecId == 1)
    {
        // Add count of transactions to container, which is always 1.
        output = conins(output,conlen(output)+1,transactionTable.RecId);

        if (storeId && terminalId)
        {
            // Add transaction detail as a container.
            select firstonly transactionTable
            where transactionTable.store       == storeId
               && transactionTable.terminal    == terminalId
               && transactionTable.receiptId   == receiptId
               && transactionTable.entryStatus != RetailEntryStatus::Voided;

            output = conins(output,conlen(output)+1,transactionService.fillTransactionTable(transactionTable));

            // Add item details as container of containers.
            while select transactionSalesTrans
            where transactionSalesTrans.transactionId   == transactionTable.transactionId
               && transactionSalesTrans.store           == transactionTable.store
               && transactionSalesTrans.terminalId      == transactionTable.terminal
               && transactionSalesTrans.receiptId       == transactionTable.receiptId
            {
                conItems = conins(conItems,conlen(conItems)+1,transactionService.fillSalesTrans(transactionSalesTrans));
            }

            output = conins(output,conlen(output)+1,conItems);

            // Add loyalty as container.
            select firstonly transactionLoyaltyTrans
            where transactionLoyaltyTrans.transactionId   == transactionTable.transactionId
               && transactionLoyaltyTrans.storeId           == transactionTable.store
               && transactionLoyaltyTrans.terminalId      == transactionTable.terminal
               && transactionLoyaltyTrans.receiptId       == transactionTable.receiptId;

            output = conins(output,conlen(output)+1,transactionService.fillLoyaltyTrans(transactionLoyaltyTrans));
        }
        else
        {
            select firstonly transactionTable
            where transactionTable.receiptId   == receiptId
               && transactionTable.entryStatus != RetailEntryStatus::Voided;

            output = conins(output,conlen(output)+1,transactionService.fillTransactionTable(transactionTable));

            while select transactionSalesTrans
            where transactionSalesTrans.transactionId == transactionTable.transactionId
               && transactionSalesTrans.receiptId     == transactionTable.receiptId
            {
                conItems = conins(conItems,conlen(conItems)+1,transactionService.fillSalesTrans(transactionSalesTrans));
            }

            output = conins(output,conlen(output)+1,conItems);

            select firstonly transactionLoyaltyTrans
            where transactionLoyaltyTrans.transactionId == transactionTable.transactionId
               && transactionLoyaltyTrans.receiptId     == transactionTable.receiptId;

            output = conins(output,conlen(output)+1,transactionService.fillLoyaltyTrans(transactionLoyaltyTrans));
        }
    }

    return output;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardAddTo</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardAddTo(RetailGiftCardId      _cardNumber,
                                      RetailStoreId         _storeId,
                                      RetailTerminalId      _terminalId,
                                      RetailStaffId         _staffId,
                                      RetailTransactionId   _transactionId,
                                      RetailReceiptId       _receiptId,
                                      CurrencyCode          _currencyCode,
                                      AmountMST             _amountMST,
                                      str                   _transDate,
                                      str                   _transTime,
                                      int                   _dateSequence = 123)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::AddToGiftCard(_cardNumber, _storeId, _terminalId, _staffId, _transactionId,
                                                             _receiptId, _currencyCode, _amountMST, _transDate, _transTime,
                                                             _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardGetBalance</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the status of the gift card.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardGetBalance(RetailGiftCardId _cardNumber)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::GetGiftCardBalance(_cardNumber);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardIssue</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardIssue(RetailGiftCardId      _cardNumber,
                                      RetailStoreId         _storeId,
                                      RetailTerminalId      _terminalId,
                                      RetailStaffId         _staffId,
                                      RetailTransactionId   _transactionId,
                                      RetailReceiptId       _receiptId,
                                      CurrencyCode          _currencyCode,
                                      AmountMST             _amountMST,
                                      str                   _transDate,
                                      str                   _transTime,
                                      int                   _dateSequence = 123)
{
    container giftCardStatus = [false, "", ""];

    giftCardStatus = RetailTransactionService::IssueGiftCard(_cardNumber, _storeId, _terminalId, _staffId, _transactionId,
                                                             _receiptId, _currencyCode, _amountMST, _transDate, _transTime,
                                                             _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardPayment(RetailGiftCardId    _cardNumber,
                                        RetailStoreId       _storeId,
                                        RetailTerminalId    _terminalId,
                                        RetailStaffId       _staffId,
                                        RetailTransactionId _transactionId,
                                        RetailReceiptId     _receiptId,
                                        CurrencyCode        _currencyCode,
                                        AmountMST           _amountMST,
                                        str                 _transDate,
                                        str                 _transTime,
                                        int                 _dateSequence = 123)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::GiftCardPayment(_cardNumber, _storeId, _terminalId, _staffId, _transactionId, _receiptId, _currencyCode, _amountMST, _transDate, _transTime, _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardValidate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for validating the gift cards.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardValidate(RetailGiftCardId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::ValidateGiftCard(_dataEntryId, _storeId, _terminalId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardVoid</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used to check the status of the gift card i.e., card exists or voided or not voided.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardVoid(RetailGiftCardId _dataEntryId)
{
    Container giftCardStatus = [false, ""];

    giftCardStatus = RetailTransactionService::VoidGiftCard(_dataEntryId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardVoidPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Method checks for the status of the gift card i.e., card exists or the gift card has any errors.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardVoidPayment(RetailGiftCardId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container giftCardStatus = [false, ""];

    giftCardStatus = RetailTransactionService::VoidGiftCardPayment(_dataEntryId, _storeId, _terminalId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>inventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for initializing the fields of <c>InventDim</c> with the values of <c>InventDimCombination</c> fields. Method checks for the
/// available physical inventory.
/// </summary>
/// <param name="_itemId">
/// <c>ItemId</c>
/// </param>
/// <param name="_variantId">
/// ID of the inventDimCombination.RetailVariantId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container inventoryStatus(ItemId _itemId, RetailVariantId _variantId = '')
{
    container output = [true,''];

    output = RetailTransactionService::InventoryLookup(_itemId, _variantId);

    return output;
}

]]></Source>
			</Method>
			<Method>
				<Name>LoyaltyIssuedPointsUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailLoyaltyMSRCardTrans</c> table for Issued points.
/// </summary>
/// <param name="_pTransactionId">
/// ID of the RetailLoyaltyMSRCardTrans.transactionId field.
/// </param>
/// <param name="_pLineNum">
/// ID of the RetailLoyaltyMSRCardTrans.loyaltyPointTranslineNum field.
/// </param>
/// <param name="_pStoreId">
/// ID of the RetailLoyaltyMSRCardTrans.storeId field.
/// </param>
/// <param name="_pTerminalId">
/// ID of the RetailLoyaltyMSRCardTrans.terminalId field.
/// </param>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <param name="_pTransDate">
/// Transaction date for the RetailLoyaltyMSRCardTrans.dateOfIssue field.
/// </param>
/// <param name="_pDateSequence">
/// Format of the date.
/// </param>
/// <param name="_pIssuedPoints">
/// Loyalty points of the RetailLoyaltyMSRCardTrans.points field.
/// </param>
/// <param name="_pReceiptId">
/// ID of the RetailLoyaltyMSRCardTrans.receiptId field.
/// </param>
/// <param name="_pStaffId">
/// ID of the RetailLoyaltyMSRCardTrans.staffId field.
/// </param>
/// <param name="_pTime">
/// Time value for the RetailLoyaltyMSRCardTrans.timeOfIssue field.
/// </param>
/// <returns>
/// Container with the true and string message if the record is created in <c>RetailLoyaltyMSRCardTrans</c> table successfully; else false with
/// appropriate string message.
/// </returns>
public static container LoyaltyIssuedPointsUpdate(RetailTransactionId   _pTransactionId,
                                                  LineNum               _pLineNum,
                                                  RetailStoreId         _pStoreId,
                                                  RetailTerminalId      _pTerminalId,
                                                  RetailCardNumber      _pLoyaltyCardNo,
                                                  str                   _pTransDate,
                                                  int                   _pDateSequence = 123,
                                                  RetailLoyaltyPoints   _pIssuedPoints = 0,
                                                  RetailReceiptId       _pReceiptId = "",
                                                  RetailStaffId         _pStaffId = "",
                                                  str                   _pTime = "00:00:00")
{
    container ret = [true, ""];

    ret = RetailTransactionService::UpdateIssuedLoyaltyPoints(_pTransactionId,
                                                               _pLineNum,
                                                               _pStoreId,
                                                               _pTerminalId,
                                                               _pLoyaltyCardNo,
                                                               _pTransDate,
                                                               _pDateSequence,
                                                               _pIssuedPoints,
                                                               _pReceiptId,
                                                               _pStaffId,
                                                               _pTime);

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>LoyaltyPointStatusGet</Name>
				<Source><![CDATA[
    /// <summary>
/// The function calculates the used, issued, expired points, depending on the table and baseEnum (Used; Issued; Expired).
/// </summary>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <returns>
/// <c>Container</c> having calculated points.
/// </returns>
public static container LoyaltyPointStatusGet(RetailCardNumber _pLoyaltyCardNo)
{
    container ret = [true, "", 0 , 0];

    ret = RetailTransactionService::GetLoyaltyPointsStatus(_pLoyaltyCardNo);

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>LoyaltyUsedPointsUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailLoyaltyMSRCardTrans</c> table for Issued points.
/// </summary>
/// <param name="_pTransactionId">
/// ID of the RetailLoyaltyMSRCardTrans.transactionId field.
/// </param>
/// <param name="_pLineNum">
/// ID of the RetailLoyaltyMSRCardTrans.loyaltyPointTranslineNum field.
/// </param>
/// <param name="_pStoreId">
/// ID of the RetailLoyaltyMSRCardTrans.storeId field.
/// </param>
/// <param name="_pTerminalId">
/// ID of the RetailLoyaltyMSRCardTrans.terminalId field.
/// </param>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <param name="_pTransDate">
/// Transaction date for the RetailLoyaltyMSRCardTrans.dateOfIssue field.
/// </param>
/// <param name="_pDateSequence">
/// Format of the date.
/// </param>
/// <param name="_pUsedPoints">
/// Loyalty points. of the RetailLoyaltyMSRCardTrans.points field.
/// </param>
/// <param name="_pReceiptId">
/// ID of the RetailLoyaltyMSRCardTrans.receiptId field.
/// </param>
/// <param name="_pStaffId">
/// ID of the RetailLoyaltyMSRCardTrans.staffId field.
/// </param>
/// <param name="_pTime">
/// Time value for the RetailLoyaltyMSRCardTrans.timeOfIssue field.
/// </param>
/// <returns>
/// Container with the true and string message if the record is created in <c>RetailLoyaltyMSRCardTrans</c> table successfully; else false with
/// appropriate string message.
/// </returns>
public static container LoyaltyUsedPointsUpdate(RetailTransactionId _pTransactionId,
                                                LineNum             _pLineNum,
                                                RetailStoreId       _pStoreId,
                                                RetailTerminalId    _pTerminalId,
                                                RetailCardNumber    _pLoyaltyCardNo,
                                                str                 _pTransDate,
                                                int                 _pDateSequence = 123,
                                                RetailLoyaltyPoints _pUsedPoints = 0,
                                                RetailReceiptId     _pReceiptId = "",
                                                RetailStaffId       _pStaffId = "",
                                                str                 _pTime = "00:00:00")
{
    container ret = [true, ""];

    ret = RetailTransactionService::UpdateUsedLoyaltyPoints(_pTransactionId,
                                                             _pLineNum,
                                                             _pStoreId,
                                                             _pTerminalId,
                                                             _pLoyaltyCardNo,
                                                             _pTransDate,
                                                             _pDateSequence,
                                                             _pUsedPoints,
                                                             _pReceiptId,
                                                             _pStaffId,
                                                             _pTime);

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>paySalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for calculating the payment for the sales invoice. Method performs the following;
/// 1.Creates and posts the payment journal.
/// 2.Marks the Sale Order to be retail sale if it is paid at store.
/// 3.Marks sales order as retail sales.
/// 4.Marks this invoice as retail sales.
/// </summary>
/// <param name="_invoiceId">
/// ID of the CustTrans.Invoice field.
/// </param>
/// <param name="_paymentAmount">
/// Amount stored in LedgerJournalTrans.AmountCurDebit if <c>_paymentAmount</c> is less than 0; else LedgerJournalTrans.AmountCurCredit.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailTerminalTable.TerminalId field.
/// </param>
/// <param name="_storeId">
/// <c>RetailStoreId</c>
/// </param>
/// <param name="_transactionId">
/// <c>RetailTransactionId</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container paySalesInvoice(InvoiceId           _invoiceId,
                                        AmountCur           _paymentAmount,
                                        RetailTerminalId    _terminalId,
                                        RetailStoreId       _storeId,
                                        RetailTransactionId _transactionId)
{
    container paymentSuccess = [true,""];

    paymentSuccess = RetailTransactionService::PaySalesInvoice(_invoiceId, _paymentAmount, _terminalId, _storeId, _transactionId);

    return paymentSuccess;
}

]]></Source>
			</Method>
			<Method>
				<Name>paySalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for payment of sales order. Method performs the following:
/// 1.Creates and posts payment journal.
/// 2.Return error if the total prepayment exceed the sales order total.
/// 3.Marks Sale Order to be retail sale if it is paid at store.
/// 4.Marks sales order as retail sales.
/// 5.Marks newly created invoice as retail sales.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId firld.
/// </param>
/// <param name="_paymentAmount">
/// Amount stored in LedgerJournalTrans.AmountCurDebit if <c>_paymentAmount</c> is less than 0; else LedgerJournalTrans.AmountCurCredit.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailTerminalTable.TerminalId field.
/// </param>
/// <param name="_storeId">
/// <c>RetailStoreId</c>
/// </param>
/// <param name="_transactionId">
/// <c>RetailTransactionId</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container paySalesOrder(SalesId               _salesId,
                                      AmountCur             _paymentAmount,
                                      RetailTerminalId      _terminalId,
                                      RetailStoreId         _storeId,
                                      RetailTransactionId   _transactionId)
{
    container paymentSuccess = [true,""];

    paymentSuccess = RetailTransactionService::PaySalesOrder(_salesId,
                                                   _paymentAmount,
                                                   _terminalId,
                                                   _storeId,
                                                   _transactionId);

    return paymentSuccess;
}

]]></Source>
			</Method>
			<Method>
				<Name>returnTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method updates the RetailTransactionSalesTrans.returnQty with the value in <c>returnQty</c> if the RetailTransactionSalesTrans.returnQty + returnQty > RetailTransactionSalesTrans.qty field.
/// </summary>
/// <param name="_transactionList">
/// Container having transactionid, storeid, terminalid, linenum and quantity.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container returnTransactionSalesTrans(container _transactionList)
{
    RetailTransactionSalesTrans transactionSalesTrans;
    RetailTransactionId         transactionId;
    RetailStoreId               storeId;
    RetailTerminalId            terminalId;
    LineNum                     lineNum;
    Qty                         returnQty;
    container                   ret = [true,""];
    int                         transaction;
    container                   returnedItem;

    while (transaction < conlen(_transactionList))
    {
        returnedItem = conpeek(_transactionList,transaction+1);

        transactionId = conpeek(returnedItem,1);
        storeId       = conpeek(returnedItem,2);
        terminalId    = conpeek(returnedItem,3);
        lineNum       = conpeek(returnedItem,4);
        returnQty     = conpeek(returnedItem,5);

        transactionSalesTrans = RetailTransactionSalesTrans::find(transactionId,
                                                               storeId,
                                                               terminalId,
                                                               lineNum,
                                                               true);

        if (transactionSalesTrans)
        {
            if (transactionSalesTrans.returnQty + returnQty < transactionSalesTrans.qty)
            {
                ret += [strfmt("@RET4546",transactionSalesTrans.itemId + num2char(10),
                                               num2str(abs(transactionSalesTrans.qty),4,0,0,0) + num2char(10),
                                               num2str(abs(transactionSalestrans.returnQty),4,0,0,0) + num2char(10))];
                ret = conpoke(ret, 1, false);
            }
            else
            {
                try
                {
                    ttsbegin;
                    transactionSalesTrans.returnQty += returnQty;
                    transactionSalesTrans.update();
                    ttscommit;
                }
                catch
                {
                    ret += [strfmt("@RET4547",transactionId,storeId,terminalId,lineNum)];
                    ret = conpoke(ret, 1, false);
                    ttsabort;
                }
            }
        }
        else
        {
            ret += [strfmt("@RET4548",transactionId,storeId,terminalId,lineNum)];
            ret = conpoke(ret, 1, false);
        }

        transaction += 1;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>staffLogin</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for updating the RetailStaffLoginLog.staffId with the value in <c>_staffId</c> if the record exists in <c>RetailStaffLoginLog</c>;
/// else creates the record in <c>RetailStaffLoginLog</c>table.
/// </summary>
/// <param name="_staffId">
/// ID of the RetailStaffLoginLog.staffId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailStaffLoginLog.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailStaffLoginLog.terminalId field.
/// </param>
/// <param name="_password">
/// <c>RetailStaffPassword</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fails to create/update.
/// </exception>
public static container staffLogin(RetailStaffId _staffId, RetailStoreId _storeId, RetailTerminalId _terminalId, RetailStaffPassword _password)
{
    return RetailTransactionService::StaffLogOn(_staffId, _storeId, _terminalId, _password);
}

]]></Source>
			</Method>
			<Method>
				<Name>staffLogout</Name>
				<Source><![CDATA[
    /// <summary>
/// Method deletes the record from <c>RetailStaffLoginLog</c> table.
/// </summary>
/// <param name="_staffId">
/// ID of the RetailStaffLoginLog.staffId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailStaffLoginLog.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailStaffLoginLog.terminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fails to delete.
/// </exception>
public static container staffLogout(RetailStaffId _staffId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    return RetailTransactionService::StaffLogOff(_staffId,_storeId,_terminalId);
}

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAddress</Name>
				<Source><![CDATA[
    /// <summary>
/// Update address
/// </summary>
/// <param name="_paramList">
/// Container.
/// </param>
/// <returns>
/// Container with entity keys
/// </returns>
public static container UpdateAddress(container _paramList)
{
    LogisticsElectronicAddress    electronicAddress;
    LogisticsPostalAddress        postalAddress;
    LogisticsLocation             logisticsLocation, parentLocation;

    container ret;
    container addressUpdate;

    RefRecId                    addressRecId    = conpeek(_paramList,1);
    CustName                    custName        = conpeek(_paramList,2);
    AddressStreet               street          = conpeek(_paramList,3);
    AddressCity                 city            = conpeek(_paramList,4);
    AddressCountyId             county          = conpeek(_paramList,5);
    AddressStateId              state           = conpeek(_paramList,6);
    AddressZipCodeId            zip             = conpeek(_paramList,7);
    AddressCountryRegionId      country         = conpeek(_paramList,8);
    Phone                       phone           = conpeek(_paramList,9);
    PhoneMobile                 cellPhone       = conpeek(_paramList,10);
    EMail                       eMail           = conpeek(_paramList,11);
    URL                         uRL             = conpeek(_paramList,12);
    TaxGroup                    taxGroup        = conpeek(_paramList,13);
    LogisticsLocationRoleType   role            = conpeek(_paramList,14);
    int64                       phoneRecId;
    int64                       emailRecId;
    int64                       urlRecId;

    select firstOnly RecId from parentLocation
        exists join postalAddress
            where parentLocation.RecId == postalAddress.Location
               && postalAddress.RecId == addressRecId;

    select firstOnly RecId from electronicAddress
        where electronicAddress.IsPrimary == NoYes::Yes
           && electronicAddress.IsPrivate == NoYes::No
           && electronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
        exists join logisticsLocation
            where logisticsLocation.ParentLocation == parentLocation.RecId
               && logisticsLocation.RecId == electronicAddress.Location;

    phoneRecId = electronicAddress.RecId;

    select firstOnly RecId from electronicAddress
        where electronicAddress.IsPrimary == NoYes::Yes
           && electronicAddress.IsPrivate == NoYes::No
           && electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
        exists join logisticsLocation
            where logisticsLocation.ParentLocation == parentLocation.RecId
               && logisticsLocation.RecId == electronicAddress.Location;

    emailRecId = electronicAddress.RecId;

    select firstOnly RecId from electronicAddress
        where electronicAddress.IsPrimary == NoYes::Yes
           && electronicAddress.IsPrivate == NoYes::No
           && electronicAddress.Type == LogisticsElectronicAddressMethodType::URL
        exists join logisticsLocation
            where logisticsLocation.ParentLocation == parentLocation.RecId
               && logisticsLocation.RecId == electronicAddress.Location;

    urlRecId = electronicAddress.RecId;

    ret = RetailTransactionService::UpdateAddress(addressRecId, custName, street, city, county, state, zip, country, phone, eMail, uRL, taxGroup, role, phoneRecId, emailRecId, urlRecId);

    addressUpdate = [conPeek(ret, 1), conPeek(ret, 2)];
    return addressUpdate;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>