<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanResetEmptyValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanResetEmptyValidate</c> class validates if a kanban status can be reset with a provided set of parameters.
/// </summary>
public class KanbanResetEmptyValidate
{
    Kanban                  kanban;
    KanbanRule              kanbanRule;
    TransDate               minTransDate;
    boolean                 mustBeInventoryControlled;
    boolean                 kanbanValid;
    boolean                 cachedMinTransDate;
    str                     validationMessage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHaveInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an invalid kanban can be specified.
    /// </summary>
    /// <returns>
    /// true if an invalid kanban can be specified; otherwise, false.
    /// </returns>
    /// <remarks>
    /// An invalid kanban can only be specified, if the kanban to be reverted is based on a fixed kanban
    /// rule and is not a single use kanban.
    /// </remarks>
    public boolean canHaveInvalidKanban()
    {
        return    kanbanValid
               && kanban.Manual == NoYes::No
               && this.kanbanRule().RecId != 0
               && kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Fixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>KanbanResetEmptyValidate</c> class.
    /// </summary>
    protected void init()
    {
        kanbanValid               =    kanban.RecId != 0
                                    && kanban.Status == LeanKanbanStatus::Emptied;

        mustBeInventoryControlled =    kanbanValid
                                    && kanban.type().mustBeInventoryControlled();

        cachedMinTransDate        = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the validation message.
    /// </summary>
    private void initValidationMessage()
    {
        validationMessage = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the kanban status can be reset with the specified parameters.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date that is used for the status reset.
    /// </param>
    /// <param name="_kanbanCard">
    /// The kanban card that is used for the status reset.
    /// </param>
    /// <param name="_invalidKanban">
    /// The invalid kanban that is used for the status reset; optional.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates if the validation should be performed silently; optional.
    /// </param>
    /// <returns>
    /// true if the status can be reset; otherwise, false.
    /// </returns>
    public boolean isValid(
        TransDate  _transDate,
        KanbanCard _kanbanCard,
        Kanban     _invalidKanban = null,
        boolean    _silent        = false)
    {
        boolean result = this.validateKanban()
                 && this.validateTransDate(_transDate)
                 && this.validateKanbanCard(_kanbanCard)
                 && this.validateInvalidKanban(_invalidKanban);

        if (!result)
        {
            result = _silent ? false : checkFailed(this.validationMessage());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban rule.
    /// </summary>
    /// <returns>
    /// The kanban rule.
    /// </returns>
    protected KanbanRule kanbanRule()
    {
        if (!kanbanRule.RecId)
        {
            kanbanRule = kanban.kanbanRule();
        }

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the minimum transaction date for the status reset.
    /// </summary>
    /// <returns>
    ///    The minimum transaction date.
    /// </returns>
    public TransDate minTransDate()
    {
        if (   kanbanValid
            && !cachedMinTransDate)
        {
            minTransDate = kanban.status().minStatusTransactionDate();

            if (mustBeInventoryControlled)
            {
                minTransDate = max(minTransDate,LeanCosting::lastToDate() + 1);
                minTransDate = max(minTransDate,InventClosing::closingDate() + 1);
            }
        }

        cachedMinTransDate = true;

        return minTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
        public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the validation message.
    /// </summary>
    /// <param name="_message">
    /// The message to set.
    /// </param>
    private void setValidationMessage(str _message)
    {
        validationMessage = _message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCirculatingCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether circulating cards are used for kanban.
    /// </summary>
    /// <returns>
    /// true if circulating cards are used; otherwise, false.
    /// </returns>
    public boolean useCirculatingCard()
    {
        return    kanbanValid
               && this.kanbanRule().RecId != 0
               && kanbanRule.UsesCirculatingCards
               && (kanban.Manual == NoYes::No
               ||  kanbanRule.type().manualKanbansNeedCards());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified kanban can be used as invalid kanban.
    /// </summary>
    /// <param name="_invalidKanban">
    /// A <c>Kanban</c> table record.
    /// </param>
    /// <param name="_invalidKanbanId">
    /// The kanban ID that belongs to the <c>Kanban</c> record; optional.
    /// </param>
    /// <returns>
    /// true if the kanban can be used as invalid kanban; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The invalid kanban will be deleted when the kanban status is reset.
    /// </remarks>
    public boolean validateInvalidKanban(
        Kanban   _invalidKanban,
        KanbanId _invalidKanbanId = _invalidKanban.KanbanId)
    {
        this.initValidationMessage();

        boolean result = _invalidKanban.RecId == 0
                 || this.canHaveInvalidKanban();

        if (result)
        {
            // if a kanban ID was specified it must exist
            result =    !_invalidKanbanId
                     || _invalidKanban.RecId;

            if (!result)
            {
                this.setValidationMessage(strFmt(Kanban::txtNotExist(),_invalidKanbanId));
            }
        }

        if (result)
        {
            // must be 'not assigned'
            result =    _invalidKanban.RecId  == 0
                     || _invalidKanban.Status == LeanKanbanStatus::NotAssigned;

            if (!result)
            {
                this.setValidationMessage("@GLS180233");
            }
        }

        if (result)
        {
            // cannot be a single use kanban
            result =    _invalidKanban.RecId  == 0
                     || _invalidKanban.Manual == NoYes::No;

            if (!result)
            {
                this.setValidationMessage("@GLS180234");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the kanban status can be reset.
    /// </summary>
    /// <returns>
    /// true if the kanban status can be reset; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validation is cached when the instance is initialized.
    /// </remarks>
    public boolean validateKanban()
    {
        this.initValidationMessage();

        return kanbanValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified kanban card can be used to reset the kanban status.
    /// </summary>
    /// <param name="_kanbanCard">
    /// A <c>KanbanCard</c> record.
    /// </param>
    /// <param name="_kanbanCardId">
    /// The kanban card ID that belongs to the <c>KanbanCard</c> record; optional.
    /// </param>
    /// <returns>
    /// true if the kanban card can be used for the status reset; otherwise, false.
    /// </returns>
    public boolean validateKanbanCard(
        KanbanCard   _kanbanCard,
        KanbanCardId _kanbanCardId = _kanbanCard.CardId)
    {
        Kanban  kanbanConflicting;

        this.initValidationMessage();

        boolean result = _kanbanCard.RecId != 0
                 && _kanbanCardId;

        if (!result)
        {
            this.setValidationMessage(strFmt(KanbanCard::txtNotExist(),_kanbanCardId));
        }

        if (result)
        {
            // no further checks if the kanban assigned to the card is the kanban to be reset
            if (_kanbanCard.Kanban != kanban.RecId)
            {
                // check card type
                result =    (this.useCirculatingCard()
                         && _kanbanCard.CardType == KanbanCardType::Circulating)
                         || (!this.useCirculatingCard()
                         &&  _kanbanCard.CardType != KanbanCardType::Circulating);

                if (result)
                {
                    // check conflicting kanban
                    kanbanConflicting = Kanban::find(_kanbanCard.Kanban);
                    result =    kanbanConflicting.RecId  == 0
                             || kanbanConflicting.Status == LeanKanbanStatus::NotAssigned;
                }

                if (result)
                {
                    // check that the rule is the same or in replacement chain
                    result =    kanban.KanbanRule     == _kanbanCard.KanbanRule
                             || (_kanbanCard.CardType == KanbanCardType::Circulating
                             &&  LeanCoverageKanbanRule::belongToTheSameReplacementChain(kanban.KanbanRule,
                                                                                         _kanbanCard.KanbanRule,
                                                                                         true));
                }

                if (!result)
                {
                    kanbanConflicting = kanbanConflicting.RecId ? kanbanConflicting : Kanban::find(_kanbanCard.Kanban);

                    if (    kanbanConflicting
                        &&  kanbanConflicting.Status != LeanKanbanStatus::NotAssigned)
                    {
                        this.setValidationMessage(strFmt("@GLS180235",kanbanConflicting.KanbanId,kanbanConflicting.Status));
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified transaction date is valid.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// true if the transaction date is valid; otherwise, false.
    /// </returns>
    public boolean validateTransDate(TransDate _transDate)
    {
        this.initValidationMessage();

        boolean result = kanbanValid
                 && _transDate >= this.minTransDate();

        if (!result)
        {
            this.setValidationMessage("@GLS180236");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the message that is the result of the validation.
    /// </summary>
    /// <returns>
    /// A message.
    /// </returns>
    public str validationMessage()
    {
        return validationMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanResetEmptyValidate construct()
    {
        return new KanbanResetEmptyValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidKanbanStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified <c>KanbanStatusUpdate</c> record is valid.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    /// A <c>KanbanStatusUpdate</c> record.
    /// </param>
    /// <param name="_kanban">
    /// The <c>Kanban</c> record that is related to the status update; optional.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates if the validation should be performed silently; optional.
    /// </param>
    /// <returns>
    /// true if the status update record is valid; otherwise, false.
    /// </returns>
    public static boolean isValidKanbanStatusUpdate(
        KanbanStatusUpdate _kanbanStatusUpdate,
        Kanban             _kanban = _kanbanStatusUpdate.kanban(),
        boolean            _silent = false)
    {
        return    _kanbanStatusUpdate.Kanban       == _kanban.RecId
               && _kanbanStatusUpdate.WantedStatus == LeanKanbanStatus::Received
               && KanbanResetEmptyValidate::newKanban(_kanban).isValid(_kanbanStatusUpdate.transDate(),
                                                                       _kanbanStatusUpdate.kanbanCard(),
                                                                       _kanbanStatusUpdate.deleteKanban(),
                                                                       _silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanResetEmptyValidate</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> record that is used to initialize the instance.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanResetEmptyValidate</c> instance.
    /// </returns>
    public static KanbanResetEmptyValidate newKanban(Kanban _kanban)
    {
        KanbanResetEmptyValidate    kanbanResetEmptyValidate = KanbanResetEmptyValidate::construct();

        kanbanResetEmptyValidate.parmKanban(_kanban);
        kanbanResetEmptyValidate.init();

        return kanbanResetEmptyValidate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
