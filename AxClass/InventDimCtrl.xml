<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class InventDimCtrl
{
    Set                                     validDataSources;

    InventDimControlsCollect                inventDimControls;
    EcoResProductDimensionGroupRecId        productDimensionGroup;
    EcoResStorageDimensionGroupRecId        storageDimensionGroup;
    EcoResTrackingDimensionGroupRecId       trackingDimensionGroup;
    List                                    dimFields;
    InventDimParm                           dimParmVisible;
    InventDimGroupSetup                     inventDimGroupSetup;

    private InventDimGroupFieldSetup inventDimGroupFieldSetupCached;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearDimParmBuffer</Name>
				<Source><![CDATA[
    protected void clearDimParmBuffer(InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = this.dim2dimParm(dimFieldId);
            _inventDimParm.(dimParmFieldId) = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFields</Name>
				<Source><![CDATA[
    protected List dimFields()
    {
        if (!dimFields)
        {
            dimFields = InventDim::dimFieldsList();
        }
        return dimFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dim2dimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an <c>InventDim</c> field ID to an <c>InventDimParm</c> field ID.
    /// </summary>
    /// <param name="_fieldId">
    ///    The <c>InventDim</c> field ID.
    /// </param>
    /// <returns>
    ///   A field ID.
    /// </returns>
    protected FieldId dim2dimParm(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InventDim, TableId))
        {
            return _fieldId;
        }
        return InventDim::dim2dimParm(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldsActive</Name>
				<Source><![CDATA[
    public container dimFieldsActive(InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();
        container       visibleGrid;

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = this.dim2dimParm(dimFieldId);
            if (_inventDimParm.(dimParmFieldId))
            {
                visibleGrid += dimFieldId;
            }
        }
        return visibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>InventDimGroupFieldSetup</c> class that matches a specified buffer.
    /// </summary>
    /// <param name="_dimensionFieldId">
    ///    Specifies a dimension field ID for which a record is to be found.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetup</c> class.
    /// </returns>
    /// <remarks>
    ///    The class that is returned is never null, but may not have a dimension field ID.
    /// </remarks>
    public InventDimGroupFieldSetup getFieldSetup(FieldId _dimensionFieldId)
    {
        if (!inventDimGroupFieldSetupCached || inventDimGroupFieldSetupCached.dimFieldId() != _dimensionFieldId)
        {
            inventDimGroupFieldSetupCached = this.inventDimGroupSetup().getFieldSetup(_dimensionFieldId);
        }

        return inventDimGroupFieldSetupCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideAll</Name>
				<Source><![CDATA[
    public void hideAll()
    {
        InventDimControlInterface fc;

        for (fc=inventDimControls.first(); fc; fc=inventDimControls.next())
        {
            fc.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    This method should always be called from the constructing new method.
    /// </remarks>
    public void init()
    {
        inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(productDimensionGroup, storageDimensionGroup, trackingDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmVisible</Name>
				<Source><![CDATA[
    public InventDimParm initDimParmVisible()
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = this.dim2dimParm(dimFieldId);
            dimParmVisible.(dimParmFieldId) = this.mustShowField(dimFieldId);
        }

        return dimParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimControls</Name>
				<Source><![CDATA[
    public InventDimControlsCollect inventDimControls()
    {
        return inventDimControls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the setup of the dimension fields.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventDimGroupSetup</c> class.
    /// </returns>
    public InventDimGroupSetup inventDimGroupSetup()
    {
        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified dimension setup is valid and active.
    /// </summary>
    /// <param name="_dimensionFieldId">
    ///    Specifies a dimension field ID for which record is to be found.
    /// </param>
    /// <returns>
    ///    true if the dimension is valid and active; otherwise, false.
    /// </returns>
    public boolean isDimensionActive(FieldId _dimensionFieldId)
    {
        return this.inventDimGroupSetup().isDimensionActive(_dimensionFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowControl</Name>
				<Source><![CDATA[
    protected boolean mustShowControl(InventDimControlInterface _rc)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowField</Name>
				<Source><![CDATA[
    protected NoYes mustShowField(FieldId _dimFieldId)
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmVisible</Name>
				<Source><![CDATA[
    public InventDimParm parmDimParmVisible(InventDimParm _dimParmVisible = dimParmVisible)
    {
        dimParmVisible = _dimParmVisible;
        return dimParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimGroupSetup</Name>
				<Source><![CDATA[
    public InventDimGroupSetup parmInventDimGroupSetup(InventDimGroupSetup _inventDimGroupSetup = inventDimGroupSetup)
    {
        inventDimGroupSetup = _inventDimGroupSetup;

        if (inventDimGroupSetup)
        {
            productDimensionGroup   = inventDimGroupSetup.getProductDimensionGroup();
            storageDimensionGroup   = inventDimGroupSetup.getStorageDimensionGroup();
            trackingDimensionGroup  = inventDimGroupSetup.getTrackingDimensionGroup();
        }
        else
        {
            productDimensionGroup   = 0;
            storageDimensionGroup   = 0;
            trackingDimensionGroup  = 0;
            inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(0, 0, 0);
        }
        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResProductDimensionGroupRecId parmProductDimensionGroup(EcoResProductDimensionGroupRecId _productDimensionGroup = productDimensionGroup)
    {
        if (productDimensionGroup != _productDimensionGroup)
        {
            productDimensionGroup   = _productDimensionGroup;
            inventDimGroupSetup     = InventDimGroupSetup::newDimensionGroups(productDimensionGroup, storageDimensionGroup, trackingDimensionGroup);
        }
        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResStorageDimensionGroupRecId parmStorageDimensionGroup(EcoResStorageDimensionGroupRecId _storageDimensionGroup = storageDimensionGroup)
    {
        if (storageDimensionGroup != _storageDimensionGroup)
        {
            storageDimensionGroup   = _storageDimensionGroup;
            inventDimGroupSetup     = InventDimGroupSetup::newDimensionGroups(productDimensionGroup, storageDimensionGroup, trackingDimensionGroup);
        }
        return storageDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResTrackingDimensionGroupRecId parmTrackingDimensionGroup(EcoResTrackingDimensionGroupRecId _trackingDimensionGroup = trackingDimensionGroup)
    {
        if (trackingDimensionGroup != _trackingDimensionGroup)
        {
            trackingDimensionGroup   = _trackingDimensionGroup;
            inventDimGroupSetup     = InventDimGroupSetup::newDimensionGroups(productDimensionGroup, storageDimensionGroup, trackingDimensionGroup);
        }
        return trackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidDataSources</Name>
				<Source><![CDATA[
    public Set parmValidDataSources(Set _validDataSources = validDataSources)
    {
        validDataSources = _validDataSources;
        return validDataSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasource to which the controller is applicable.
    /// </summary>
    /// <param name = "_validDataSourceName">The name of the data source.</param>
    public void setValidDataSourceName(str _validDataSourceName)
    {
        Set set = new Set(Types::String);
        set.add(_validDataSourceName);
        this.parmValidDataSources(set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisible</Name>
				<Source><![CDATA[
    protected void setControlVisible(InventDimControlInterface _control)
    {
        _control.visible(this.mustShowControl(_control));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible</Name>
				<Source><![CDATA[
    protected void setVisible()
    {
        InventDimControlInterface  c;

        for (c=inventDimControls.first(); c; c=inventDimControls.next())
        {
            this.setControlVisible(c);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the controls in the user interface, such as a form or report, based on current parameter
    ///    values.
    /// </summary>
    /// <remarks>
    ///    Hides or shows controls. Also responsible for enabling and disabling controls.
    /// </remarks>
    abstract public void updateControls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the default <see cref="T:InventDimCtrl" /> handler for forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    A standard <see cref="T:InventDimCtrl" /> instance to use in a form.
    /// </returns>
    /// <remarks>
    ///    All inventory dimension data sources in the form will be controlled by this class.
    /// </remarks>
    public static InventDimCtrl newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm   inventDimCtrl_Frm = InventDimCtrl_Frm::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl_Frm.parmCallingElement(adapter);
        inventDimCtrl_Frm.init();
        return inventDimCtrl_Frm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the default <see cref="T:InventDimCtrl" /> handler for a specific form data source.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    A standard <see cref="T:InventDimCtrl" /> instance to use in a form.
    /// </returns>
    /// <remarks>
    ///    All inventory dimension data sources in the form will be controlled by this class.
    /// </remarks>
    public static InventDimCtrl newFromFormDataSource(FormDataSource _formDataSource)
    {
        InventDimCtrl_Frm inventDimCtrl_Frm = InventDimCtrl_Frm::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formDataSource.formRun());

        inventDimCtrl_Frm.parmCallingElement(adapter);
        inventDimCtrl_Frm.setValidDataSourceName(_formDataSource.name());
        inventDimCtrl_Frm.init();
        return inventDimCtrl_Frm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormValidDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the default <see cref="T:InventDimCtrl" /> class handler for
    /// forms.
    /// </summary>
    /// <param name="_formRun">
    /// The form where controls are maintained.
    /// </param>
    /// <param name="_validDataSourceName">
    /// A data source name in the form to be controlled by this class.
    /// </param>
    /// <param name="_inventDimControlIdCollection">
    /// An instance of the <c>InventDimControlIdCollection</c> class; optional.
    /// </param>
    /// <returns>
    /// An instance of the <see cref="T:InventDimCtrl" /> class to be used in a form
    /// </returns>
    public static InventDimCtrl newFromFormValidDataSource(
        FormRun        _formRun,
        DataSourceName _validDataSourceName,
        InventDimControlIdCollection _inventDimControlIdCollection = null)
    {
        Set set = new Set(Types::String);

        set.add(_validDataSourceName);
        return InventDimCtrl::newFromFormValidDataSources(_formRun, set, _inventDimControlIdCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormValidDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the default <see cref="T:InventDimCtrl" /> handler for forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form to be controlled by this class.
    /// </param>
    /// <param name="_inventDimControlIdCollection">
    /// An instance of the <c>InventDimControlIdCollection</c> class; optional.
    /// </param>
    /// <returns>
    ///    A standard <see cref="T:InventDimCtrl" /> instance to use in a form
    /// </returns>
    public static InventDimCtrl newFromFormValidDataSources(
        FormRun _formRun,
        Set     _validDataSources,
        InventDimControlIdCollection _inventDimControlIdCollection = null)
    {
        InventDimCtrl_Frm   inventDimCtrl_Frm = InventDimCtrl_Frm::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl_Frm.parmCallingElement(adapter);
        inventDimCtrl_Frm.parmValidDataSources(_validDataSources);

        if (_inventDimControlIdCollection)
        {
            inventDimCtrl_Frm.parmControlIdCollectionEnumerator(_inventDimControlIdCollection.getEnumerator());
        }

        inventDimCtrl_Frm.init();
        return inventDimCtrl_Frm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the default <see cref="T:InventDimCtrl" /> handler for
    ///    reports.
    /// </summary>
    /// <param name="_reportRun">
    ///    The report where controls are maintained.
    /// </param>
    /// <returns>
    ///    A standard <see cref="T:InventDimCtrl" /> instance to use in a report.
    /// </returns>
    /// <remarks>
    ///    All inventory dimension sources in the report will be controlled by this class.
    /// </remarks>
    public static InventDimCtrl newFromReport(ReportRun _reportRun)
    {
        InventDimCtrl_Rep   inventDimCtrl_Rep = InventDimCtrl_Rep::construct();
        InventDimAXReportAdapter adapter = InventDimAXReportAdapter::newFromReport(_reportRun);

        inventDimCtrl_Rep.parmCallingElement(adapter);
        inventDimCtrl_Rep.init();
        return inventDimCtrl_Rep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visibility of the specified controls in a report.
    /// </summary>
    /// <param name="_reportRun">
    ///    The report where controls are maintained.
    /// </param>
    /// <param name="_inventDimParmVisible">
    ///    Contains information about which controls should be visible and which should be hidden.
    /// </param>
    public static void updateReportVisible(
        ReportRun       _reportRun,
        InventDimParm   _inventDimParmVisible)
    {
        InventDimCtrl inventDimCtrl = InventDimCtrl::newFromReport(_reportRun);
        inventDimCtrl.parmDimParmVisible(_inventDimParmVisible);
        inventDimCtrl.updateControls();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
