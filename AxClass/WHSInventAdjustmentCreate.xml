<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventAdjustmentCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventAdjustmentCreate</c> class is used to create an inventory adjustment journal from a warehouse mobile flow.
/// </summary>
public class WHSInventAdjustmentCreate
{
    WHSInventAdjustmentCreateParameters params;

    utcdatetime                         adjustmentTimeStamp = DateTimeUtil::utcNow();

    WHSWorkTable                        createdWorkTable;
    WHSWorkLine                         createdWorkLine;

    EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

    private boolean isCWItem;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdWorkId</Name>
				<Source><![CDATA[
    public WHSWorkId createdWorkId()
    {
        return createdWorkTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSInventAdjustmentCreate construct()
    {
        return new WHSInventAdjustmentCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    public static WHSInventAdjustmentCreate newFromParams(WHSInventAdjustmentCreateParameters _params)
    {
        WHSInventAdjustmentCreate createEngine = WHSInventAdjustmentCreate::construct();
        createEngine.params = _params;

        return createEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTable</Name>
				<Source><![CDATA[
    protected void initWorkTable()
    {
        InventSiteId inventSiteId = InventLocation::find(params.InventLocationId).InventSiteId;

        createdWorkTable.clear();
        createdWorkTable.setWorkId();
        createdWorkTable.WorkStatus                = WHSWorkStatus::Closed;
        createdWorkTable.WorkTransType             = params.WorkTransType;
        createdWorkTable.InventSiteId              = inventSiteId;
        createdWorkTable.InventLocationId          = params.InventLocationId;
        createdWorkTable.WorkInProcessUTCDateTime  = adjustmentTimeStamp;
        createdWorkTable.WorkClosedUTCDateTime     = adjustmentTimeStamp;
        createdWorkTable.TargetLicensePlateId      = params.LicensePlateId;
        createdWorkTable.WorkCreatedBy             = DirPersonUserEx::findWorker(params.WorkCreatedBy).User;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTable</Name>
				<Source><![CDATA[
    protected void createWorkTable()
    {
        this.initWorkTable();
        createdWorkTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkLine</Name>
				<Source><![CDATA[
    protected void initWorkLine(InventDim _workLineInventDim, InventQty _inventQtyWork)
    {
        createdWorkLine.clear();
        createdWorkLine.WorkId                     = createdWorkTable.WorkId;
        createdWorkLine.LineNum                    = 1;
        createdWorkLine.WorkStatus                 = WHSWorkStatus::Closed;
        createdWorkLine.WorkType                   = params.WorkType;
        createdWorkLine.wmsLocationId              = params.WmsLocationId;
        createdWorkLine.ItemId                     = params.ItemId;
        createdWorkLine.InventDimId                = _workLineInventDim.InventDimId;
        createdWorkLine.InventQtyRemain            = 0;
        createdWorkLine.InventQtyWork              = _inventQtyWork;
        createdWorkLine.QtyWork                    = params.AdjustmentQty;
        createdWorkLine.UnitId                     = params.AdjustmentUnit;
        createdWorkLine.UserId                     = params.WorkUserId;
        createdWorkLine.WorkInProcessUTCDateTime   = adjustmentTimeStamp;
        createdWorkLine.WorkClosedUTCDateTime      = adjustmentTimeStamp;
        createdWorkLine.CapturedWeight             = params.AdjustmentCatchWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLine</Name>
				<Source><![CDATA[
    protected void createWorkLine(InventDim _inventDim, InventQty _inventQtyWork)
    {
        InventDim workLineInventDim = _inventDim.data();
        workLineInventDim.clearLocationAndBelowDim(params.ItemId);
        workLineInventDim = inventDim::findOrCreate(workLineInventDim);

        this.initWorkLine(workLineInventDim, _inventQtyWork);
        createdWorkLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventDim</Name>
				<Source><![CDATA[
    protected InventDim prepareInventDim()
    {
        InventDim inventDim = params.InventDim;
        inventDim.LicensePlateId = params.LicensePlateId;

        if (!InventTable::find(params.ItemId).whsItemInventoryOwnershipEnabled())
        {
            inventDim.setInventoryOwnerItemId(params.ItemId);
        }

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTrans</Name>
				<Source><![CDATA[
    protected void initWorkTrans(WHSWorkTrans _workTrans, InventDim _inventDim)
    {
        _workTrans.setWorkTransId();
        _workTrans.InventDimId   = _inventDim.InventDimId;
        _workTrans.ItemId        = params.ItemId;
        _workTrans.Qty           = params.AdjustmentQty;
        _workTrans.uom           = params.AdjustmentUnit;
        _workTrans.TransDateTime = adjustmentTimeStamp;
        _workTrans.WorkId        = createdWorkLine.WorkId;
        _workTrans.LineNum       = createdWorkLine.LineNum;
        _workTrans.UserId        = params.WorkUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTrans</Name>
				<Source><![CDATA[
    protected void createWorkTrans(InventDim _inventDim)
    {
        WHSWorkTrans workTrans;

        this.initWorkTrans(workTrans, _inventDim);
        workTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservation</Name>
				<Source><![CDATA[
    private void removeReservation(InventHandlingQty _handlingQty)
    {
        if (params.InventTransId)
        {            
            WHSRemoveReservationParameters tempParams = WHSRemoveReservationParameters::construct();

            tempParams.parmInventTransId(params.InventTransId);
            tempParams.parmItemId(params.ItemId);
            tempParams.parmInventDimId(params.InventDim.InventDimId);
            tempParams.parmQty(-_handlingQty);
            tempParams.parmSourceType(InventTransType::WHSWork);
            tempParams.parmSourceRefId(createdWorkTable.WorkId);
            tempParams.parmSourceTransId('');
            tempParams.parmReservationRemovalStrategyType(WHSAdjustmentType::find(params.AdjustmentTypeCode).ReservationRemovalStrategy);            

            WHSReservation::staticRemoveReservationForParams(tempParams);
        }
        else
        {
            WHSReservation::staticRemoveReservation(params.ItemId, params.InventDim.InventDimId, -_handlingQty, InventTransType::WHSWork, createdWorkTable.WorkId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        isCWItem = PdsGlobal::pdsIsCWItem(params.ItemId);

        InventDim inventDim = this.prepareInventDim();
        InventHandlingQty inventHandlingQty = WHSCatchWeightHelper::convertInventQuantity(params.ItemId, params.AdjustmentUnit, params.AdjustmentQty, inventDim.inventDimId);
        params.WorkUserWorkerRecId = WHSWorker::find(WHSWorkUser::find(params.WorkUserId).Worker).Worker;

        this.createWorkTable();

        this.createWorkLine(inventDim, inventHandlingQty);

        this.createWorkTrans(inventDim);

        if (this.mustRemoveReservation())
        {
            this.removeReservation(inventHandlingQty);
        }

        this.performInventoryAdjustment();

        // Update location status fields based on adjustment.
        WHSLocationWorkUpdater::updateLocationInfoFromAdjustment(params.InventLocationId, params.WmsLocationId, this.getWorkTypeFromAdjustmentQty());

        this.handleLocationLicensePlatePositioning(this.getWorkTypeFromAdjustmentQty(), inventDim.wmsLocation());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRemoveReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation must be removed.
    /// </summary>
    /// <returns>true if the reservation must be removed; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean mustRemoveReservation()
    {
        return params.AdjustmentQty < 0 && WHSAdjustmentType::find(params.AdjustmentTypeCode).RemoveReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTypeFromAdjustmentQty</Name>
				<Source><![CDATA[
    private WHSWorkType getWorkTypeFromAdjustmentQty()
    {
        return params.AdjustmentQty < 0 ? WHSWorkType::Pick : WHSWorkType::Put;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLocationLicensePlatePositioning</Name>
				<Source><![CDATA[
    private void handleLocationLicensePlatePositioning(WHSWorkType _workType, WMSLocation _wmsLocation)
    {
        if (!params.SkipLocationLicensePlatePositionSequencing)
        {
            if (_workType == WHSWorkType::Pick)
            {
                WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(params.LicensePlateId, _wmsLocation).pickLicensePlateFromCurrentPosition();
            }
            else if (_workType == WHSWorkType::Put)
            {
                WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(params.LicensePlateId, _wmsLocation).putLicensePlateAtPosition(params.LocationLicensePlatePosition);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performInventoryAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actual inventory adjustment.
    /// </summary>
    private void performInventoryAdjustment()
    {
        if (this.useCountingJournalForInventoryAdjustment())
        {
            createdWorkTable.InventJournalId = this.createCountingJournal();
            createdWorkTable.update();
        }
        else
        {
            this.performCustomInventoryAdjustment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCountingJournalForInventoryAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the counting journal should be used as a mechanism to perform inventory adjustment.
    /// </summary>
    /// <returns>true if counting journal should be used; false, otherwise.</returns>
    [Wrappable(true)]
    internal boolean useCountingJournalForInventoryAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCustomInventoryAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// A hook point to execute an alternative implementation of the inventory adjustment logic.
    /// </summary>
    [Wrappable(true)]
    internal void performCustomInventoryAdjustment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCountingJournal</Name>
				<Source><![CDATA[
    protected InventJournalId createCountingJournal()
    {        
        ttsbegin;

        InventJournalTable  journalTable = this.createJournalHeader();

        WHSWorkTrans        workTrans;
        InventHandlingQty   movementQty;
        Counter             lineNum;

        if (params.AdjustmentQty)
        {
            movementQty = params.AdjustmentQty;

            while select workTrans
                where workTrans.WorkId  == createdWorkLine.WorkId
                    && workTrans.LineNum == createdWorkLine.LineNum
            {
                lineNum++;
                this.createJournalLineHandlingQty(journalTable, workTrans, lineNum, movementQty);
            }
        }
        else
        {
            InventSum   inventSum;
            WHSWorkLine workLine;

            while select workTrans
                where workTrans.WorkId  == createdWorkLine.WorkId
                    && workTrans.LineNum == createdWorkLine.LineNum
                join PhysicalInvent, PdsCWPhysicalInvent from inventSum
                    where inventSum.InventDimId == workTrans.InventDimId
                        && inventSum.ItemId    == workTrans.ItemId
                        && inventSum.ClosedQty == NoYes::No
                join WorkType from workLine
                    where workLine.WorkId       == createdWorkLine.WorkId
                        && workLine.LineNum      == createdWorkLine.LineNum
            {
                InventHandlingQty differenceQty = (isCWItem ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent) - workTrans.Qty;
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    differenceQty = -differenceQty;
                }
                else
                {
                    differenceQty = abs(differenceQty);
                }
                movementQty = differenceQty;

                if (movementQty)
                {
                    lineNum++;
                    this.createJournalLineHandlingQty(journalTable, workTrans, lineNum, movementQty);
                }
            }
        }

        if (lineNum > 1)
        {
            journalTable.NumOfLines = lineNum;
            journalTable.write();
        }

        if (lineNum > 0)
        {
            JournalCheckPost journalPost = InventJournalCheckPost::newPostJournal(journalTable);
            journalPost.runOperation();
        }
        else
        {
            journalTable.delete();
        }

        ttscommit;

        return journalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTable</Name>
				<Source><![CDATA[
    protected void initJournalTable(InventJournalTable _inventJournalTable)
    {
        _inventJournalTable.InventDimFixed   = InventDimParm::allInventDim().inventDimFixed();
        _inventJournalTable.NumOfLines       = 1;
        _inventJournalTable.Description      = params.Description != '' ? params.Description : createdWorkTable.WorkId;
        _inventJournalTable.Worker           = params.WorkCreatedBy;
        _inventJournalTable.InventLocationId = params.InventLocationId;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalHeader</Name>
				<Source><![CDATA[
    internal InventJournalTable createInventJournalHeader() 
    {
        return this.createJournalHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected InventJournalTable createJournalHeader()
    {
        ttsbegin;

        WHSAdjustmentType adjustmentType = WHSAdjustmentType::find(params.AdjustmentTypeCode);
        if (!adjustmentType)
        {
            throw error("@WAX1473");
        }

        InventJournalName journalName = InventJournalName::find(adjustmentType.InventJournalNameId);

        InventJournalTable journalTable;
        journalTable.initFromInventJournalName(journalName);
        journalTable.initValue();
        this.initJournalTable(journalTable);
        journalTable.insert();

        ttscommit;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLineFromParams</Name>
				<Source><![CDATA[
    protected void initJournalLineFromParams(WHSInventAdjustmentCreateParameters _params, InventJournalTrans _inventJournalTrans)
    {
        if (_params.TransDate)
        {
            _inventJournalTrans.TransDate = _params.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    protected void initJournalLine(InventJournalTrans _inventJournalTrans)
    {
        _inventJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the createJournalLineHandlingQty method. Extenders should move their logic to wrap or override the createJournalLineHandlingQuantity method.', false, 30\9\2019)]
    protected void createJournalLine(
        InventJournalTable _journalTable, 
        WHSWorkTrans       _workTrans, 
        LineNum            _journalLineNum,
        Qty                _journalLineQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), params.ItemId);

        this.createJournalLineHandlingQuantity(_journalTable, _workTrans, _journalLineNum, _journalLineQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLineHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventory adjustment journal line from a work transaction.
    /// </summary>
    /// <param name = "_journalTable">
    /// An inventory adjustement journal to add the line to.
    /// </param>
    /// <param name = "_workTrans">
    /// A work transaction to initialize the line from.
    /// </param>
    /// <param name = "_journalLineNum">
    /// A journal line number to assign to the journal line.
    /// </param>
    /// <param name = "_journalLineHandlingQty">
    /// A handling quantity to be create the journal line for.
    /// </param>
    [Hookable(false)]
    final protected void createJournalLineHandlingQty(
        InventJournalTable _journalTable,
        WHSWorkTrans       _workTrans,
        LineNum            _journalLineNum,
        InventHandlingQty  _journalLineHandlingQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), params.ItemId))
        {
            this.createJournalLineHandlingQuantity(_journalTable, _workTrans, _journalLineNum, _journalLineHandlingQty);
        }
        else
        {
            this.createJournalLine(_journalTable, _workTrans, _journalLineNum, _journalLineHandlingQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLineHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventory adjustment journal line from a work transaction.
    /// </summary>
    /// <param name = "_journalTable">
    /// An inventory adjustement journal to add the line to.
    /// </param>
    /// <param name = "_workTrans">
    /// A work transaction to initialize the line from.
    /// </param>
    /// <param name = "_journalLineNum">
    /// A journal line number to assign to the journal line.
    /// </param>
    /// <param name = "_journalLineHandlingQty">
    /// A handling quantity to be create the journal line for.
    /// </param>
    /// <remarks>
    /// The method is an extension point and is not meant to be called directly. Callers should call the createJournalLineHandlingQty method.
    /// </remarks>
    [Wrappable(true)]
    protected void createJournalLineHandlingQuantity(
        InventJournalTable _journalTable,
        WHSWorkTrans       _workTrans,
        LineNum            _journalLineNum,
        InventHandlingQty  _journalLineHandlingQty)
    {
        WHSInventAdjustmentCreateParameters journalLineCreationParams = WHSInventAdjustmentCreateParameters::construct();
        journalLineCreationParams.InventDim = InventDim::find(_workTrans.InventDimId);
        journalLineCreationParams.ItemId = _workTrans.ItemId;
        journalLineCreationParams.AdjustmentUnit = _workTrans.uom;
        journalLineCreationParams.AdjustmentQty = _journalLineHandlingQty;
        journalLineCreationParams.InventCountingReasonCode = params.InventCountingReasonCode;
        journalLineCreationParams.AdjustmentCatchWeight = params.AdjustmentCatchWeight;
        journalLineCreationParams.IsCatchWeight = isCWItem;
        journalLineCreationParams.LineNum = _journalLineNum;
        journalLineCreationParams.InventJournalTable = _journalTable;

        this.createJournalLineHandlingQuantityFromParams(journalLineCreationParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLineHandlingQuantityFromParams</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransId createJournalLineHandlingQuantityFromParams(WHSInventAdjustmentCreateParameters _params)
    {
        using (var activityContextExecute = this.instrumentationLogger().inventAdjustmentCreateActivities().createJournalLineHandlingQuantityFromParams())
        {
            ttsbegin;

            InventTable inventTable = InventTable::find(_params.ItemId);

            InventJournalTrans journalTrans;
            journalTrans.initFromInventJournalTable(_params.InventJournalTable);
            journalTrans.initFromInventTable(inventTable);
            journalTrans.setInventDimId(_params.inventDim.inventDimId);
            journalTrans.LineNum = _params.LineNum;
            this.initJournalLine(journalTrans);
            this.initJournalLineFromParams(_params, journalTrans);

            InventHandlingQty handlingQty = releasedProductUnitConverter.convert(_params.AdjustmentQty,
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(_params.AdjustmentUnit),
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(WHSCatchWeightHelper::inventHandlingUnitId(_params.ItemId)),
                                                                                            NoYes::No,
                                                                                            _params.ItemId,
                                                                                            _params.inventDim.inventDimId,
                                                                                            NoYes::No);

            if (_params.IsCatchWeight)
            {
                journalTrans.Qty                = _params.AdjustmentCatchWeight;
                journalTrans.PdsCWQty           = handlingQty;
            }
            else
            {
                journalTrans.Qty                = handlingQty;
            }

            if (_params.MustIncludeExistingOnHandCalculation)
            {
                // perf: If we do not need to get the on-hand quantity per specific date that is in the past, we can use a cheaper API
                if (this.isCurrentDateOnHand(journalTrans))
                {
                    InventOnhand inventOnHand = InventOnhand::newParameters(journalTrans.ItemId, journalTrans.inventDim(), InventDimParm::allInventDim());
            
                    //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                    inventOnhand.parmDelayAvailabilityCalculation(true);
            
                    journalTrans.InventOnHand = inventOnHand.physicalInvent();
                    journalTrans.PdsCWInventOnHand = _params.IsCatchWeight ? inventOnHand.pdsCWPhysicalInvent() : 0;
                }
                else
                {
                    InventSumDateDim inventSumDateDim = InventSumDateDim::newParameters(journalTrans.TransDate, journalTrans.ItemId, journalTrans.inventDim(), InventDimParm::allInventDim());
                    journalTrans.InventOnHand = inventSumDateDim.postedQty();
                    journalTrans.PdsCWInventOnHand = _params.IsCatchWeight ? inventSumDateDim.pdsCWPostedQty() : 0;
                }

                journalTrans.Counted                = journalTrans.InventOnHand + journalTrans.Qty;
                journalTrans.PdsCWInventQtyCounted  = journalTrans.PdsCWInventOnHand + journalTrans.PdsCWQty;
            }
            else
            {
                journalTrans.UnitQty = _params.AdjustmentQty;
            }

            journalTrans.CountingReasonCode     = _params.InventCountingReasonCode;

            if (this.mustSetLedgerDimensionOnCountingJournalTrans(_params))
            {
                journalTrans.setLedgerDimensionFromReasonCode();
            }

            journalTrans.setCostPrice(journalTrans.InventDimId);
            journalTrans.insert();

            ttscommit;

            return journalTrans.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetLedgerDimensionOnCountingJournalTrans</Name>
				<Source><![CDATA[
    private boolean mustSetLedgerDimensionOnCountingJournalTrans(WHSInventAdjustmentCreateParameters _params)
    {
        return _params.WorkTransType == WHSWorkTransType::Invent
            && _params.WorkType == WHSWorkType::Adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentDateOnHand</Name>
				<Source><![CDATA[
    private boolean isCurrentDateOnHand(InventJournalTrans _journalTrans)
    {
        // There is a chance this will not return true if we went to next day, but it's not worth fixing by making the code more complex
        return _journalTrans.TransDate == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>