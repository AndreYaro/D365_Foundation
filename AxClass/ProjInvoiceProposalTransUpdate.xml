<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalTransUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>ProjInvoiceProposalTransUpdate</c> class is the base class for all project transaction update classes.
/// </summary>
/// <remarks>
/// This class provides some functionality of its own, and also defines abstract methods that must be implemented in subclasses.
/// </remarks>
public abstract class ProjInvoiceProposalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProposalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method to create a new line on invoice proposal
    /// </summary>
    /// <param name="_projProposalJour">
    /// Projproposal Jour instance.
    /// </param>
    /// <param name="_newSalesPrice">
    /// Line amount for which proposal line needs to be created.
    /// </param>
    /// <param name="_projId">
    /// Proj id
    /// </param>
    /// <param name="_projCategoryId">
    /// Category Id
    /// </param>
    /// <param name="_transDate">
    /// Trans Date
    /// </param>
    /// <param name="_transTxt">
    /// Txt
    /// </param>
    public abstract void addProposalLine(ProjProposalJour      _projProposalJour,
                                         AmountCur             _newSalesPrice,
                                         ProjId                _projId,
                                         ProjCategoryId        _projCategoryId,
                                         TransDate             _transDate,
                                         TransTxt              _transTxt)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a specific transaction class.
    /// </summary>
    /// <param name="_projTransType">
    /// Project Transaction type.
    /// </param>
    /// <returns>
    /// The new class.
    /// </returns>
    /// <remarks>
    /// returns null if transaction type is not hour,fee,expense or item.
    /// </remarks>
    public static ProjInvoiceProposalTransUpdate construct(ProjTransType  _projTransType)
    {
        switch (_projTransType)
        {
            case ProjTransType::Revenue:
                return new ProjInvoiceProposalTransUpdateRevenue();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProposalSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Invoice Proposal Summary tables according to new sales price.
    /// </summary>
    /// <param name="_projProposalId">
    /// Proposal Id.
    /// </param>
    /// <param name="_newSalesPrice">
    /// New Sales price.
    /// </param>
    /// <param name="_origSalesPrice">
    /// Old sales price.
    /// </param>
    /// <param name="_projId">
    /// ProjectId of the invoice proposal which needs to be updated.
    /// </param>
    /// <remarks>
    /// Updates Invoice Proposal Summary tables according to new sales price.
    /// </remarks>
    [SysObsoleteAttribute('This method does not consider the transaction category to update retention amounts. Use updateProposalSummaryWithCategory instead.', false, 22\05\2019)]
    public static void updateProposalSummary(ProjProposalId        _projProposalId,
                                             AmountCur             _newSalesPrice,
                                             AmountCur             _origSalesPrice,
                                             ProjId                _projId = '')
    {
        ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(_projProposalId, _newSalesPrice, _origSalesPrice, _projId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProposalSummaryWithCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Invoice Proposal Summary tables according to new sales price.
    /// </summary>
    /// <param name="_projProposalId">
    /// Proposal Id.
    /// </param>
    /// <param name="_newSalesPrice">
    /// New Sales price.
    /// </param>
    /// <param name="_origSalesPrice">
    /// Old sales price.
    /// </param>
    /// <param name="_projId">
    /// ProjectId of the invoice proposal which needs to be updated.
    /// </param>
    /// <param name="_transCategory">
    /// Category of the transaction that triggered the update.
    /// </param>
    /// <remarks>
    /// Updates Invoice Proposal Summary tables according to new sales price.
    /// </remarks>
    public static void updateProposalSummaryWithCategory(ProjProposalId _projProposalId, 
                                                        AmountCur _newSalesPrice, 
                                                        AmountCur _origSalesPrice,
                                                        ProjId _projId, 
                                                        CategoryId _transCategory)
    {
        PSAProjProposalProj projProposalProj;

        ttsbegin;
        select forupdate firstonly projProposalProj
            where projProposalProj.ProjProposalId == _projProposalId
                && (!_projId || projProposalProj.ProjId == _projId);

        if (projProposalProj)
        {
            projProposalProj.InvoicedNow = projProposalProj.InvoicedNow + (_newSalesPrice - _origSalesPrice);
            
            if (projProposalProj.RetainedPercent)
            {
                projProposalProj.ReleasedAmount = projProposalProj.InvoicedNow;

                projProposalProj.RetainedNow = ((projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj)) * projProposalProj.RetainedPercent / 100);
            }
            else if (!_transCategory || ProjCategory::find(_transCategory).PSACustPaymentRetention == NoYes::Yes)
            {
                projProposalProj.ReleasedAmount = projProposalProj.InvoicedNow;  

                AmountMST totalRevenue;
              
                if (FeatureStateProvider::IsFeatureEnabled(ProjInvoiceProposalSkipTotalsFeature::instance()))
                {
                    totalRevenue = projProposalProj.totalReveneueMst();
                }
                else
                {
                    totalRevenue = projProposalProj.TotalRevenueMst;
                }

                // Either transCategory is not provided (for backward compatibility) or the category has payment retention on in which case we should update the RetainedNow amount even when RetainedPercent is 0.
                projProposalProj.RetainedNow = (totalRevenue - projProposalProj.Invoiced) - (projProposalProj.InvoicedNow + projProposalProj.calcTotalIndirectComponentInvoice(projProposalProj));
            }
            projProposalProj.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Proposal Summary/Transaction header/Transaction details tables for this transaction id.
    /// </summary>
    /// <param name="_projTransType">
    /// Project Transaction type.
    /// </param>
    /// <param name="_projProposalId">
    /// Proposal Id.
    /// </param>
    /// <param name="_transId">
    /// Transaction id.
    /// </param>
    /// <param name="_projFundingSource">
    /// Contract funding source.
    /// </param>
    /// <param name="_newSalesPrice">
    /// New sales price.
    /// </param>
    /// <param name="_origSalesPrice">
    /// Original sales price
    /// </param>
    /// <param name="_totalLineAmount">
    /// New line amount.
    /// </param>
    /// <param name="_projId">
    /// ProjectId of the invoice proposal which needs to be updated.
    /// </param>
    /// <remarks>
    /// Updates Proposal Summary/Transaction header/Transaction details tables for this transaction id.
    /// </remarks>
    public static void updateTransSalesAmount(ProjTransType           _projTransType,
                                              ProjProposalId          _projProposalId,
                                              TransactionId           _transId,
                                              ProjFundingSourceRefId  _projFundingSource,
                                              AmountCur               _newSalesPrice,
                                              AmountCur               _origSalesPrice,
                                              AmountCur               _totalLineAmount,
											  ProjId                  _projId = '')
    {
        ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(_projProposalId,
                                                              _newSalesPrice,
                                                              _origSalesPrice,
                                                              _projId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies is the new line amount is within funding limits of the contract.
    /// </summary>
    /// <param name="_finalLineAmount">
    /// New line amount.
    /// </param>
    /// <param name="_projTrans">
    /// ProjTrans instance for the relevant proj transaction.
    /// </param>
    /// <param name="_fundingSource">
    /// Contract funding source.
    /// </param>
    /// <returns>
    /// Returns true if the new line amount is within contract funding limits, else returns false.
    /// </returns>
    /// <remarks>
    /// If no funding limit is attached to a contract always returns true.
    /// </remarks>
    public static boolean validateFundingLimit(AmountCur              _finalLineAmount,
                                               ProjTrans              _projTrans,
                                               ProjFundingSourceRefId _fundingSource)

    {
        //Line Amount should be positive.
        if (!ProjFundingEngine::isAmountWithinFundingLimits(_projTrans, _fundingSource, _finalLineAmount))
        {
            return false;
        }

        //If Amount is within funding limits update Funding limit Spent on the contract.
        ProjFundingEngine::updateFundingLimits(_projTrans,
                                               _fundingSource,
                                               _finalLineAmount,
                                                true,
                                                false);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>