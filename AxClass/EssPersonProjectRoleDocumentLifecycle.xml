<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EssPersonProjectRoleDocumentLifecycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
//-----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
/// <summary>
/// EssPersonProjectRole data entity state machine.
/// </summary>
public final class
EssPersonProjectRoleDocumentLifecycle extends StateMachine
{
    #define.GraphSize(8)
    boolean graph[#GraphSize * #GraphSize];
    str transitionDescriptionGraph[#GraphSize * #GraphSize];
    str transitionLabelGraph[#GraphSize * #GraphSize];
    str description;
    str label;
    Set finalStates;
    Map indexesToStates;
    Map stateNamesToStates;
    Map statesToDescriptions;
    Map statesToIndexes;
    Map statesToLabels;
    EssPersonProjectRole dataEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Enter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occures when a data entity instance state is entered.
    /// </summary>
    /// <param name="_eventArgs">
    /// The enter event arguments.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void Enter(EssPersonProjectRoleDocumentLifecycleEnterEventArgs _eventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>Exit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occures when a data entity instance state is exited.
    /// </summary>
    /// <param name="_eventArgs">
    /// The exit event arguments.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void Exit(EssPersonProjectRoleDocumentLifecycleExitEventArgs _eventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>Transition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occures when a data entity instance state is transitioned.
    /// </summary>
    /// <param name="_eventArgs">
    /// The transition event arguments.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void Transition(EssPersonProjectRoleDocumentLifecycleTransitionEventArgs _eventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static main supports action menu binding
    /// </summary>
    /// <param name="_args">
    /// The action menu Args instance.
    /// </param>
    public static void main(Args _args)
    {
        EssPersonProjectRoleDocumentLifecycle stateMachine;
        HcmApprovalStatus state;

        if (!_args.record())
        {
            throw error(strfmt('@SYS:StateMachineTableSaveRequired', classStr(EssPersonProjectRoleDocumentLifecycle), staticmethodstr(EssPersonProjectRoleDocumentLifecycle, main), tableid2name(_args.record().TableId)));
        }

        if (!(_args.record() is EssPersonProjectRole))
        {
            throw error(strfmt('@StateMachine:InvalidDataEntityType', tableStr(EssPersonProjectRole), tableid2name(_args.record().TableId)));
        }

        stateMachine = new EssPersonProjectRoleDocumentLifecycle(_args.record());
        state = stateMachine.GetStateFromStateName(_args.stateMachineTransitionTo());
        ttsbegin;
        stateMachine.TransitionTo(state);
        if (FormDataUtil::getFormDataSource(_args.record()))
        {
            FormDataUtil::getFormDataSource(_args.record()).write();
        }
        else
        {
            _args.record().update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssPersonProjectRoleDocumentLifecycle constructor
    /// </summary>
    /// <param name="_dataEntity">
    /// The data entity instance.
    /// </param>
    /// <remarks>
    /// Creates an instance of EssPersonProjectRoleDocumentLifecycle.
    /// </remarks>
    public void new(EssPersonProjectRole _dataEntity)
    {
        super('DocumentLifecycle');
        dataEntity = _dataEntity;
        this.BuildGraph();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DescriptionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state machine description label id.
    /// </summary>
    /// <returns>
    /// The state machine description label id.
    /// </returns>
    public LabelId DescriptionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitialState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initial state.
    /// </summary>
    /// <returns>
    /// The initial state of the state machine.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmApprovalStatus InitialState()
    {
        return this.InitialStateGetter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFinalState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the input enum value is a final state.
    /// </summary>
    /// <param name="_state">
    /// The enum value.
    /// </param>
    /// <returns>
    /// true if the enum value is a final state, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean IsFinalState(HcmApprovalStatus _state)
    {
        return finalStates.in(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the input enum value is a state.
    /// </summary>
    /// <param name="_state">
    /// The enum value.
    /// </param>
    /// <returns>
    /// true if the enum value is a state, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean IsState(HcmApprovalStatus _state)
    {
        return statesToIndexes.exists(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsValidTransition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the transition from the exit state to the enter state is valid.
    /// </summary>
    /// <param name="_exitState">
    /// The exit state.
    /// </param>
    /// <param name="_enterState">
    /// The exit state.
    /// </param>
    /// <returns>
    /// true if the transition from the exit state to the enter state is valid, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean IsValidTransition(HcmApprovalStatus _exitState, HcmApprovalStatus _enterState)
    {
        if (this.IsState(_exitState) && this.IsState(_enterState))
        {
            return this.IsTransitionValid(_exitState, _enterState);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStateDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state description label id for the input state.
    /// </summary>
    /// <param name="_state">
    /// The state value.
    /// </param>
    /// <returns>
    /// The description label id if the state exists, otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LabelId GetStateDescriptionLabelId(HcmApprovalStatus _state)
    {
        if (this.IsState(_state))
        {
            return statesToDescriptions.lookup(_state);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromStateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state from the state.
    /// </summary>
    /// <param name="_stateName">
    /// The state name.
    /// </param>
    /// <returns>
    /// The state if the state name exists, otherwise it throws value not found exception.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmApprovalStatus GetStateFromStateName(SysElementName _stateName)
    {
        return stateNamesToStates.lookup(_stateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStateLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state label id for the input state.
    /// </summary>
    /// <param name="_state">
    /// The state value.
    /// </param>
    /// <returns>
    /// The label id if the state exists, otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LabelId GetStateLabelId(HcmApprovalStatus _state)
    {
        if (this.IsState(_state))
        {
            return statesToLabels.lookup(_state);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transition description label id for the input exit and enter state values.
    /// </summary>
    /// <param name="_exitState">
    /// The exit state value.
    /// </param>
    /// <param name="_enterState">
    /// The enter state value.
    /// </param>
    /// <returns>
    /// The description label id if the transtion exists, otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LabelId GetTransitionDescriptionLabelId(HcmApprovalStatus _exitState, HcmApprovalStatus _enterState)
    {
        if (this.IsState(_exitState) && this.IsState(_enterState))
        {
            return transitionDescriptionGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transition label id for the input exit and enter state values.
    /// </summary>
    /// <param name="_exitState">
    /// The exit state value.
    /// </param>
    /// <param name="_enterState">
    /// The enter state value.
    /// </param>
    /// <returns>
    /// The label id if the transtion exists, otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LabelId GetTransitionLabelId(HcmApprovalStatus _exitState, HcmApprovalStatus _enterState)
    {
        if (this.IsState(_exitState) && this.IsState(_enterState))
        {
            return transitionLabelGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>LabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state machine label id.
    /// </summary>
    /// <returns>
    /// The state machine label id.
    /// </returns>
    public LabelId LabelId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>NextStates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of next states for a given source state.
    /// </summary>
    /// <param name="_state">
    /// The source state.
    /// </param>
    /// <returns>
    /// The list of next states for the given source state.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List NextStates(HcmApprovalStatus _state)
    {
        List nextStates = new List(Types::Enum);
        int rowIndex;
        int columnIndex;

        if (this.IsState(_state))
        {
            rowIndex = this.GetRowIndexFromState(_state);
            for (columnIndex = 1; columnIndex <= #GraphSize; columnIndex++)
            {
                if (graph[rowIndex + columnIndex])
                {
                    nextStates.addEnd(this.GetStateFromColumnIndex(columnIndex));
                }
            }
        }
        return nextStates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>State</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current state of the data entity instance.
    /// </summary>
    /// <returns>
    /// The current state of the data entity instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmApprovalStatus State()
    {
        return this.StateGetter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data entity instance.
    /// </summary>
    /// <returns>
    /// The data entity instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EssPersonProjectRole DataEntity()
    {
        return this.DataEntityGetter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransitionTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transitions the data entity instance to the input state.
    /// </summary>
    /// <param name="_state">
    /// The enter state value.
    /// </param>
    /// <remarks>
    /// InvalidOperationException is thrown when the transition from the exit state to the enter state is invalid.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void TransitionTo(HcmApprovalStatus _state)
    {
        this.TransitionToState(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitialStateGetter</Name>
				<Source><![CDATA[
    protected int InitialStateGetter()
    {
        return HcmApprovalStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InvalidStateTransitionMessage</Name>
				<Source><![CDATA[
    protected str InvalidStateTransitionMessage()
    {
        return strfmt('@StateMachine:InvalidTransition',
        enum2Symbol(enumNum(HcmApprovalStatus), this.ExitState()),
        enum2Symbol(enumNum(HcmApprovalStatus), this.EnterState()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsTransitionValid</Name>
				<Source><![CDATA[
    protected boolean IsTransitionValid(int _exitState, int _enterState)
    {
        if (this.IsState(_exitState) && this.IsState(_enterState))
        {
            return graph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnEnter</Name>
				<Source><![CDATA[
    protected void OnEnter()
    {
        EssPersonProjectRoleDocumentLifecycleEnterEventArgs eventArgs = new EssPersonProjectRoleDocumentLifecycleEnterEventArgs(this.DataEntity(), this.StateMachineName(), this.EnterState());
        super();
        this.Enter(eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnExit</Name>
				<Source><![CDATA[
    protected void OnExit()
    {
        EssPersonProjectRoleDocumentLifecycleExitEventArgs eventArgs = new EssPersonProjectRoleDocumentLifecycleExitEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState());
        super();
        this.Exit(eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnTransition</Name>
				<Source><![CDATA[
    protected void OnTransition()
    {
        EssPersonProjectRoleDocumentLifecycleTransitionEventArgs eventArgs = new EssPersonProjectRoleDocumentLifecycleTransitionEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState(), this.EnterState());
        super();
        this.Transition(eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>StateDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateDescriptionLabelIdGetter(int _state)
    {
        return this.GetStateDescriptionLabelId(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>StateGetter</Name>
				<Source><![CDATA[
    protected int StateGetter()
    {
        return dataEntity.ApprovalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>StateKindGetter</Name>
				<Source><![CDATA[
    protected StateMachineStateKind StateKindGetter(int _state)
    {
        if (this.InitialState() == _state)
        {
            return StateMachineStateKind::Initial;
        }
        else if (this.IsFinalState(_state))
        {
            return StateMachineStateKind::Final;
        }
        return StateMachineStateKind::Intermediate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>StateLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateLabelIdGetter(int _state)
    {
        return this.GetStateLabelId(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>StateSetter</Name>
				<Source><![CDATA[
    protected void StateSetter(int _state)
    {
        dataEntity.ApprovalStatus = _state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DataEntityGetter</Name>
				<Source><![CDATA[
    protected Common DataEntityGetter()
    {
        return dataEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransitionDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionDescriptionLabelIdGetter(int _exitState, int _enterState)
    {
        return this.GetTransitionDescriptionLabelId(_exitState, _enterState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransitionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionLabelIdGetter(int _exitState, int _enterState)
    {
        return this.GetTransitionLabelId(_exitState, _enterState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildFinalStates</Name>
				<Source><![CDATA[
    private void BuildFinalStates()
    {
        finalStates = new Set(Types::Enum);
        finalStates.add(HcmApprovalStatus::Cancelled);
        finalStates.add(HcmApprovalStatus::Completed);
        finalStates.add(HcmApprovalStatus::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildGraph</Name>
				<Source><![CDATA[
    private void BuildGraph()
    {
        graph[2] = true;
        graph[11] = true;
        graph[12] = true;
        graph[14] = true;
        graph[16] = true;
        graph[26] = true;
        graph[42] = true;
        graph[61] = true;
        graph[63] = true;
        this.BuildTransitionDescriptionGraph();
        this.BuildTransitionLabelGraph();
        this.BuildIndexesToStates();
        this.BuildStatesToIndexes();
        this.BuildStatesToDescriptions();
        this.BuildStatesToLabels();
        this.BuildStateNamesToStates();
        this.BuildFinalStates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildIndexesToStates</Name>
				<Source><![CDATA[
    private void BuildIndexesToStates()
    {
        indexesToStates = new Map(Types::Integer, Types::Enum);
        indexesToStates.insert(1, HcmApprovalStatus::Draft);
        indexesToStates.insert(2, HcmApprovalStatus::InReview);
        indexesToStates.insert(3, HcmApprovalStatus::Cancelled);
        indexesToStates.insert(4, HcmApprovalStatus::Rejected);
        indexesToStates.insert(5, HcmApprovalStatus::Completed);
        indexesToStates.insert(6, HcmApprovalStatus::ChangeRequested);
        indexesToStates.insert(7, HcmApprovalStatus::Failed);
        indexesToStates.insert(8, HcmApprovalStatus::Processing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildStateNamesToStates</Name>
				<Source><![CDATA[
    private void BuildStateNamesToStates()
    {
        stateNamesToStates = new Map(Types::String, Types::Enum);
        stateNamesToStates.insert('Draft', HcmApprovalStatus::Draft);
        stateNamesToStates.insert('InReview', HcmApprovalStatus::InReview);
        stateNamesToStates.insert('Cancelled', HcmApprovalStatus::Cancelled);
        stateNamesToStates.insert('Rejected', HcmApprovalStatus::Rejected);
        stateNamesToStates.insert('Completed', HcmApprovalStatus::Completed);
        stateNamesToStates.insert('ChangeRequested', HcmApprovalStatus::ChangeRequested);
        stateNamesToStates.insert('Failed', HcmApprovalStatus::Failed);
        stateNamesToStates.insert('Processing', HcmApprovalStatus::Processing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToDescriptions</Name>
				<Source><![CDATA[
    private void BuildStatesToDescriptions()
    {
        statesToDescriptions = new Map(Types::Integer, Types::String);
        statesToDescriptions.insert(HcmApprovalStatus::Draft, '');
        statesToDescriptions.insert(HcmApprovalStatus::InReview, '');
        statesToDescriptions.insert(HcmApprovalStatus::Cancelled, '');
        statesToDescriptions.insert(HcmApprovalStatus::Rejected, '');
        statesToDescriptions.insert(HcmApprovalStatus::Completed, '');
        statesToDescriptions.insert(HcmApprovalStatus::ChangeRequested, '');
        statesToDescriptions.insert(HcmApprovalStatus::Failed, '');
        statesToDescriptions.insert(HcmApprovalStatus::Processing, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToIndexes</Name>
				<Source><![CDATA[
    private void BuildStatesToIndexes()
    {
        statesToIndexes = new Map(Types::Enum, Types::Integer);
        statesToIndexes.insert(HcmApprovalStatus::Draft, 1);
        statesToIndexes.insert(HcmApprovalStatus::InReview, 2);
        statesToIndexes.insert(HcmApprovalStatus::Cancelled, 3);
        statesToIndexes.insert(HcmApprovalStatus::Rejected, 4);
        statesToIndexes.insert(HcmApprovalStatus::Completed, 5);
        statesToIndexes.insert(HcmApprovalStatus::ChangeRequested, 6);
        statesToIndexes.insert(HcmApprovalStatus::Failed, 7);
        statesToIndexes.insert(HcmApprovalStatus::Processing, 8);
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToLabels</Name>
				<Source><![CDATA[
    private void BuildStatesToLabels()
    {
        statesToLabels = new Map(Types::Integer, Types::String);
        statesToLabels.insert(HcmApprovalStatus::Draft, literalStr('@SYS319508'));
        statesToLabels.insert(HcmApprovalStatus::InReview, literalStr('@HCM:InReview'));
        statesToLabels.insert(HcmApprovalStatus::Cancelled, literalStr('@HCM:Canceled'));
        statesToLabels.insert(HcmApprovalStatus::Rejected, literalStr('@HCM:Rejected'));
        statesToLabels.insert(HcmApprovalStatus::Completed, literalStr('@HCM:Completed'));
        statesToLabels.insert(HcmApprovalStatus::ChangeRequested, literalStr('@SYS107953'));
        statesToLabels.insert(HcmApprovalStatus::Failed, literalStr('@HCM:Failed'));
        statesToLabels.insert(HcmApprovalStatus::Processing, literalStr('@HCM:ProcessingAction'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionDescriptionGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionDescriptionGraph()
    {
        transitionDescriptionGraph[2] = '';
        transitionDescriptionGraph[11] = '';
        transitionDescriptionGraph[12] = '';
        transitionDescriptionGraph[14] = '';
        transitionDescriptionGraph[16] = '';
        transitionDescriptionGraph[26] = '';
        transitionDescriptionGraph[42] = '';
        transitionDescriptionGraph[61] = '';
        transitionDescriptionGraph[63] = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionLabelGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionLabelGraph()
    {
        transitionLabelGraph[2] = literalStr('InReviewLabel');
        transitionLabelGraph[11] = literalStr('CancelledLabel');
        transitionLabelGraph[12] = literalStr('RejectedLabel');
        transitionLabelGraph[14] = literalStr('ChangeRequestedLabel');
        transitionLabelGraph[16] = '';
        transitionLabelGraph[26] = literalStr('InReviewLabel');
        transitionLabelGraph[42] = literalStr('InReviewLabel');
        transitionLabelGraph[61] = '';
        transitionLabelGraph[63] = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetColumnIndexFromState</Name>
				<Source><![CDATA[
    private int GetColumnIndexFromState(int _state)
    {
        return statesToIndexes.lookup(_state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRowIndexFromState</Name>
				<Source><![CDATA[
    private int GetRowIndexFromState(int _state)
    {
        return #GraphSize * (statesToIndexes.lookup(_state) - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromColumnIndex</Name>
				<Source><![CDATA[
    private HcmApprovalStatus GetStateFromColumnIndex(int _index)
    {
        return indexesToStates.lookup(_index);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
