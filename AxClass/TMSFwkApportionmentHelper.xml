<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkApportionmentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The class <c>TMSFwkApportionmentHelper</c> exposes helper methods for the apportionment task.
/// </summary>
public class TMSFwkApportionmentHelper
{
    private const str apportionmentEngineName = "ApportionmentEngine";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkApportionmentHelper construct()
    {
        return new TMSFwkApportionmentHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>apportionCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the apportionment for a given transaction payload.
    /// </summary>
    /// <param name = "_tmsTransactionFacade">The transaction payload.</param>
    public void apportionCharges(TmsTransactionFacade _tmsTransactionFacade)
    {
        str							apportionmentEngineCode = '';
        str							carrier					= '';
        XElement					carrierElement			= null;
        System.Object	            apportionmentEngine		= null;

        var ratingEntities = _tmsTransactionFacade.parmRequestXml().RetrieveListMatchingNodes(EntityXmlConstants::RatingEntity).GetListEnumerator();
        while (ratingEntities.MoveNext())
        {
            XElement re = ratingEntities.Current();
            str elementStr = re.GetString(apportionmentEngineName);
            if (apportionmentEngineCode != elementStr || apportionmentEngineCode == '')
            {
                apportionmentEngineCode = elementStr;
                carrierElement = re;
                if (apportionmentEngineCode == '')
                {
                    while (carrier == '' && carrierElement.Parent != null)
                    {
                        carrierElement = carrierElement.Parent;
                        carrier = carrierElement.GetString(ElementXmlConstants::CarrierCode);
                    }

                    var shipDate = clrSystemDateTime2UtcDateTime(re.RetrieveFirstInstanceEffectiveUpDateTime(ElementXmlConstants::ShipDate,
                        _tmsTransactionFacade.getCurrentDateTime()));

                    apportionmentEngineCode = this.retrieveApportionmentEngineCode(_tmsTransactionFacade, carrier, shipDate);
                }

                if (apportionmentEngineCode)
                {
                    TMSFwkApportionmentEngineFactory factory = TMSFwkApportionmentEngineFactory::construct();
                    apportionmentEngine = factory.create(apportionmentEngineCode);
                }
            }

            if (apportionmentEngine != null)
            {
                TMSFwkIApportionmentEngine appEngineInstance = apportionmentEngine;
                appEngineInstance.process(_tmsTransactionFacade, re);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveApportionmentEngineCode</Name>
				<Source><![CDATA[
    private str retrieveApportionmentEngineCode(TmsTransactionFacade _tmsTransactionFacade, TMSCarrierCode _carrierCode, TMSEffectiveUTCDateTimeFrom _scheduledShipDate)
    {
        str					appEngine = '';
        TMSRatingProfile	ratingProfile;
        TMSCarrierCode		currentCarrierCode = '';

        select firstonly RateEngineCode from ratingProfile
            order by ratingProfile.EffectiveUTCDateTimeFrom desc, ratingProfile.InventSiteId desc, ratingProfile.InventLocationId desc
            where ratingProfile.CarrierCode == _carrierCode
                && (ratingProfile.InventSiteId == _tmsTransactionFacade.parmInventSiteId() || ratingProfile.InventSiteId == '')
                && (ratingProfile.InventLocationId == _tmsTransactionFacade.parmInventoryLocationId() || ratingProfile.InventLocationId == '')
                && (ratingProfile.EffectiveUTCDateTimeFrom <= _scheduledShipDate || ratingProfile.EffectiveUTCDateTimeFrom == DateTimeUtil::newDateTime(dateNull(), 0))
				&& (ratingProfile.EffectiveUTCDateTimeTo >= _scheduledShipDate || ratingProfile.EffectiveUTCDateTimeTo == DateTimeUtil::newDateTime(dateNull(), 0));

        if (ratingProfile.RateEngineCode)
        {
            TMSFwkRateEngineParameters parameters = TMSFwkRateEngineParameters::newFromEngineParameters(TMSEngine::RateEngine, ratingProfile.RateEngineCode);
            if (parameters != null)
            {
                appEngine = parameters.ApportionmentEngine();
            }
        }
        else
        {
            // no rating profile, now lets go see if there are any parameters out with a default set to yes
            TMSGenericEngine genericEngine;
            select firstonly GenericEngineCode from genericEngine
                where genericEngine.DefaultEngine == NoYes::Yes
                && genericEngine.Engine == TMSEngine::ApportionmentEngine;
            if (genericEngine.GenericEngineCode)
            {
                appEngine = genericEngine.GenericEngineCode;
            }
        }

        return appEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>apportion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the apportionment for a given engine code and a given element.
    /// </summary>
    /// <param name = "_tmsTransactionFacade">The transaction payload.</param>
    /// <param name = "_re">The element that needs processing.</param>
    /// <param name = "_apportionmentEngineCode">The given engine code to process.</param>
    public void apportion(TmsTransactionFacade _tmsTransactionFacade, XElement _re, TMSGenericEngineCode _apportionmentEngineCode)
    {
        System.Exception ex;
        TMSFwkIApportionmentEngine apportionmentEngine = null;
        try
        {
            if (!_apportionmentEngineCode)
            {
                TMSFwkApportionmentEngineFactory factory = TMSFwkApportionmentEngineFactory::construct();
                apportionmentEngine = factory.create(_apportionmentEngineCode);
            }

            if (apportionmentEngine != null)
            {
                apportionmentEngine.process(_tmsTransactionFacade, _re);
            }
        }
        catch (ex)
        {
            _re.AddError(TMSFwkErrorDtoBuilder::technicalError());
            TMSException::ThrowException("@TRX2573", ex);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>