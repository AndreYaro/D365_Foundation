<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReserveTransactionsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetReserveTransactionsDP</c> class is an RDP class that is used in
///    <c>AssetReserveTransactions</c> reports to retrieve data.
/// </summary>

[
    SRSReportQueryAttribute(querystr(AssetReserveTransactions)),
    SRSReportParameterAttribute(classstr(AssetReserveTransactionsContract))
]
class AssetReserveTransactionsDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetTrans assetTransLocal;
    AssetTrans assetTransReversal;
    AssetTrans assetTrans;
    AssetReserveTransactionsTmp assetReserveTransactionsTmp;
    private RecordInsertList recordInsertList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetReserveTransactionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>AssetReserveTransactionsTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data that is required for the report.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetReserveTransactionsTmp))]
    public AssetReserveTransactionsTmp getAssetReserveTransactionsTmp()
    {
        select assetReserveTransactionsTmp;
        return assetReserveTransactionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetReserveTransactionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records in to the temporary <c>AssetReserveTransactionsTmp</c> table.
    /// </summary>
    public void insertAssetReserveTransactionsTmp()
    {
        this.insertAssetReserveTransactionsRecords(enum2str(assetTransReversal.ReserveTransferDone));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetTransReversalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records in to the temporary <c>AssetReserveTransactionsTmp</c> table.
    /// </summary>
    public void insertAssetTransReversalTmp()
    {
        this.insertAssetReserveTransactionsRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetReserveTransactionsRecords</Name>
				<Source><![CDATA[
    private void insertAssetReserveTransactionsRecords(AssetReserveTypeId _assetReserveTypeId = '')
    {
        assetReserveTransactionsTmp.clear();

        assetReserveTransactionsTmp.AssetId                 = assetTrans.AssetId;
        assetReserveTransactionsTmp.AssetGroup              = assetTrans.AssetGroup;
        assetReserveTransactionsTmp.BookId                  = assetTrans.BookId;
        assetReserveTransactionsTmp.Voucher                 = assetTrans.Voucher;
        assetReserveTransactionsTmp.TransDate               = assetTrans.TransDate;
        assetReserveTransactionsTmp.ReserveTransferDone     = _assetReserveTypeId;
        assetReserveTransactionsTmp.CurrencyCode            = assetTrans.CurrencyCode;
        assetReserveTransactionsTmp.AmountCur               = assetTrans.AmountCur;
        assetReserveTransactionsTmp.AmountMST               = assetTrans.AmountMST;
        assetReserveTransactionsTmp.ReportingCurrencyAmount = assetTrans.ReportingCurrencyAmount;
        assetReserveTransactionsTmp.Txt                     = assetTrans.Txt;
        assetReserveTransactionsTmp.TransType               = enum2str(assetTrans.TransType);

        recordInsertList.add(assetReserveTransactionsTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query                   query    = new Query(this.parmQuery());
        QueryRun                queryRun;
        QueryBuildRange         qr_Range;

        qr_Range = query.dataSourceTable(tablenum(AssetTrans)).addRange(fieldnum(AssetTrans, TransType));
        qr_Range.value(queryValue(AssetTransType::CapitalReserve));
        qr_Range.status(RangeStatus::Locked);

        recordInsertList = new RecordInsertList(tableNum(AssetReserveTransactionsTmp), true, true, true, false, true, assetReserveTransactionsTmp);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetTrans = queryRun.get(tablenum(AssetTrans));
            this.insertAssetReserveTransactionsTmp();

            //
            //  Due to the possibility of a "RecId" being used in both the
            //  AssetTrans and AssetDepBookTrans tables for the same transaction type
            //  for the same Company Id any referencing data must also be from the same
            //  "uABranchId" as the originating transaction. This should prevent the accidental
            //  inclusion of transactional information originating from one of the transaction
            //  tables with data being reported from the other.
            //

            assetTransReversal.clear();
            while select AssetId, AssetGroup, BookId, Voucher, TransDate, TransType,
                    Txt, AmountMST, AmountCur, ReportingCurrencyAmount, CurrencyCode, UnionAllBranchId
                    from assetTransReversal
                    where assetTransReversal.ReserveTransId   ==  assetTrans.RecId &&
                        assetTransReversal.UnionAllBranchId ==  assetTrans.UnionAllBranchId
            {
                this.insertassetTransReversalTmp();
            }
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>