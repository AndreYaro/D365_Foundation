<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the tax assessment details
/// </summary>
public class FBTaxAssessmentDetailCreator_BR
{
    FBTaxAssessment_BR fbTaxAssessment;
    FBBookingPeriod_BR bookingPeriod;
    boolean            mustCreatePaymentsByDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookPostedTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books all tax adjustments to the current tax assessemnt period that are not booked
    /// or with orphan tax assessment
    /// </summary>
    /// <remarks>
    /// Orphan tax assessment may occur when the tax assessment was deleted, we ned to re-link them
    /// </remarks>
    protected void bookPostedTaxAdjustments()
    {
        FBTaxAssessmentAdjustment_BR    taxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR   fiscalDocumentAdjustment;

        update_recordSet taxAssessmentAdjustment
        setting FBTaxAssessment_BR = fbTaxAssessment.recId
            where taxAssessmentAdjustment.VoucherDataArea           == bookingPeriod.FiscalEstablishmentDataArea
                && taxAssessmentAdjustment.TaxType_BR               == fbTaxAssessment.TaxType
                && taxAssessmentAdjustment.TransDate                >= fbTaxAssessment.FromDate
                && taxAssessmentAdjustment.TransDate                <= fbTaxAssessment.ToDate
                && taxAssessmentAdjustment.FBTaxAssessment_BR       != fbTaxAssessment.recId
                && taxAssessmentAdjustment.FiscalEstablishmentId    == bookingPeriod.FiscalEstablishmentId
                && taxAssessmentAdjustment.State                    == fbTaxAssessment.State
                && taxAssessmentAdjustment.Voucher                  != '';

        update_recordSet fiscalDocumentAdjustment
        setting FBTaxAssessment_BR = fbTaxAssessment.recId
            where fiscalDocumentAdjustment.VoucherDataArea          == bookingPeriod.FiscalEstablishmentDataArea
                && fiscalDocumentAdjustment.TaxType_BR              == fbTaxAssessment.TaxType
                && fiscalDocumentAdjustment.TransDate               <= fbTaxAssessment.ToDate
                && fiscalDocumentAdjustment.TransDate               >= fbTaxAssessment.FromDate
                && fiscalDocumentAdjustment.FBTaxAssessment_BR      != fbTaxAssessment.recId
                && fiscalDocumentAdjustment.FiscalEstablishmentId   == bookingPeriod.FiscalEstablishmentId
                && fiscalDocumentAdjustment.State                   == fbTaxAssessment.State
                && fiscalDocumentAdjustment.Voucher                 != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all tax assessment detail for the given tax.
    /// </summary>
    /// <remarks>
    /// The subclasses might implement this behavior in case it is appropriate for the tax type being handled
    /// </remarks>
    public void createAllAssessmentDetails()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the credit balance amount from previous period
    /// </summary>
    /// <returns>
    /// The credit balance amount from previous period
    /// </returns>
    protected AmountMST getCreditBalanceFromPreviousPeriod()
    {
        AmountMST                       previousCreditBalance = 0;
        FBTaxAssessmentCalculator_BR    taxAssessmentCalculator;
        FBTaxAssessment_BR              previousTaxAssessment;

        previousTaxAssessment = fbTaxAssessment.previousTaxAssessment();

        if (previousTaxAssessment)
        {
            taxAssessmentCalculator = previousTaxAssessment.getCalculator();
            taxAssessmentCalculator.calculate();

            previousCreditBalance = taxAssessmentCalculator.getCreditBalanceAtEndOfThePeriod();
        }

        return previousCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FBTaxAssessmentDetailCreator_BR</c> class
    /// </summary>
    /// <param name="_fbTaxAssessment">
    /// A <c>FBTaxAssessment_BR</c> table record
    /// </param>
    protected void new(FBTaxAssessment_BR _fbTaxAssessment)
    {
        fbTaxAssessment = _fbTaxAssessment;
        mustCreatePaymentsByDocument = fbTaxAssessment.mustCreatePaymentsByFiscalDocument();
        bookingPeriod = fbTaxAssessment.bookingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceAmountPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the credit balance amount from previous period
    /// </summary>
    /// <param name="_creditBalanceAmountPreviousPeriod">
    /// The credit balance amount from previous period
    /// </param>
    /// <remarks>
    /// The subclasses may override this behavior in case it is appropriate for the tax type being handled
    /// </remarks>
    public void updateCreditBalanceAmountPreviousPeriod(AmountMST _creditBalanceAmountPreviousPeriod)
    {
        FBTaxTrans_BR       fbTaxTrans;

        ttsBegin;

        select forupdate firstOnly fbTaxTrans
            where   fbTaxTrans.Classification       == FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod
                &&  fbTaxTrans.FBTaxAssessment_BR   == fbTaxAssessment.RecId;

        fbTaxTrans.TaxAmount = _creditBalanceAmountPreviousPeriod;

        if (fbTaxTrans)
        {
            fbTaxTrans.update();
        }
        else
        {
            fbTaxTrans.TaxType            = fbTaxAssessment.TaxType;
            fbTaxTrans.Classification     = FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod;
            fbTaxTrans.FBTaxAssessment_BR = fbTaxAssessment.RecId;
            
            fbTaxTrans.FiscalEstablishmentId       = bookingPeriod.FiscalEstablishmentId;
            fbTaxTrans.FiscalEstablishmentDataArea = bookingPeriod.FiscalEstablishmentDataArea;

            fbTaxTrans.insert();
        }
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the credit balance from previous period, gets the credit balance from the previous tax assessment
    /// </summary>
    /// <remarks>
    /// The subclasses may override this behavior in case it is appropriate for the tax type being handled
    /// </remarks>
    public void updateCreditBalanceFromPreviousPeriod()
    {
        FBTaxTrans_BR       fbTaxtrans;

        ttsBegin;

        select forupdate firstOnly fbTaxtrans
            where   fbTaxtrans.Classification       == FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod
                &&  fbTaxtrans.FBTaxAssessment_BR   == fbTaxAssessment.RecId;

        fbTaxtrans.TaxAmount = this.getCreditBalanceFromPreviousPeriod();

        if (fbTaxtrans)
        {
            fbTaxtrans.update();
        }
        else
        {
            fbTaxTrans.TaxType            = fbTaxAssessment.TaxType;
            fbTaxtrans.Classification     = FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod;
            fbTaxtrans.FBTaxAssessment_BR = fbTaxAssessment.RecId;

            fbTaxTrans.FiscalEstablishmentId       = bookingPeriod.FiscalEstablishmentId;
            fbTaxTrans.FiscalEstablishmentDataArea = bookingPeriod.FiscalEstablishmentDataArea;

            fbTaxtrans.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransCreditBalFromPrevPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>FBTaxTrans_BR</c> that is a credit balance from previous period.
    /// </summary>
    /// <param name="_creditBalanceAmountPreviousPeriod">
    ///     The credit balance amount from previous period.
    /// </param>
    protected void updateTaxTransCreditBalFromPrevPeriod(AmountMST _creditBalanceAmountPreviousPeriod)
    {
        FBTaxTrans_BR       fbTaxTrans;
        FBBookingPeriod_BR  fbBookingPeriod;

        ttsBegin;

        select forupdate firstOnly fbTaxTrans
            where fbTaxTrans.Classification      == FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod
                && fbTaxTrans.FBTaxAssessment_BR == fbTaxAssessment.RecId;

        fbTaxTrans.TaxAmount = _creditBalanceAmountPreviousPeriod;

        if(fbTaxTrans)
        {
            fbTaxTrans.update();
        }
        else
        {
            fbTaxTrans.TaxType            = fbTaxAssessment.TaxType;
            fbTaxTrans.Classification     = FBTaxAssessmentClassification_BR::CreditBalanceFromPreviousPeriod;
            fbTaxTrans.FBTaxAssessment_BR = fbTaxAssessment.RecId;

            fbBookingPeriod                        = fbTaxAssessment.bookingPeriod();
            fbTaxTrans.FiscalEstablishmentId       = fbBookingPeriod.FiscalEstablishmentId;
            fbTaxTrans.FiscalEstablishmentDataArea = fbBookingPeriod.FiscalEstablishmentDataArea;

            fbTaxTrans.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object of the <c>FBTaxAssessmentCalculator_BR</c> class.
    /// </summary>
    /// <param name="_fbTaxAssessment">
    /// A buffer of <c>FBTaxAssessment_BR</c> referring to the tax assessment period for which the tax should be calculated.
    /// </param>
    /// <returns>
    /// A concrete instance of the base class <c>FBTaxAssessmentDetailCreator_BR</c>
    /// </returns>
    public static FBTaxAssessmentDetailCreator_BR construct(FBTaxAssessment_BR _fbTaxAssessment)
    {
        FBTaxAssessmentDetailCreator_BR taxAssessmentDetailCreator;
    
        switch (_fbTaxAssessment.TaxType)
        {
            case TaxType_BR::IPI:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorIpi_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::ICMS:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorIcms_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::ICMSST:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorIcmsSt_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::ICMSDiff:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorICMSDIF_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::ISS:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorISS_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::PIS:
            case TaxType_BR::COFINS:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorPISCOFINS_BR(_fbTaxAssessment);
                break;
    
            case TaxType_BR::INSSCPRB:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreatorINSSCPRB_BR(_fbTaxAssessment);
                break;

            default:
                taxAssessmentDetailCreator = new FBTaxAssessmentDetailCreator_BR(_fbTaxAssessment);
        }
    
        return taxAssessmentDetailCreator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>