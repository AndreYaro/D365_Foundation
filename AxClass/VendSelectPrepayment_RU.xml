<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSelectPrepayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendSelectPrepayment_RU extends RunBaseBatch implements BatchRetryable
{
    VendTmpPrepaymentTrans_RU   prepaymentTrans;
    Set                         transQuerySet;

    FromDate                    fromDate;
    EndDate                     endDate;
    VendAccount                 vendAccount;
    DialogField                 dlgFromDate;
    DialogField                 dlgEndDate;
    DialogField                 dlgVendAccount;

    QueryRun                    qrPosted;

    protected const date vendorPrepaymentDateFrom = 01\01\2009;
    protected const int currentVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTrans</Name>
				<Source><![CDATA[
    protected void createTmpTrans(Common    _trans)
    {
        prepaymentTrans.clear();

        switch (_trans.TableId)
        {
            case tablenum(LedgerJournalTrans):
                prepaymentTrans.initFromLedgerJournalTrans(_trans);
                prepaymentTrans.insert();
                break;
            case tablenum(VendTrans):
                prepaymentTrans.initFromVendTrans(_trans);
                prepaymentTrans.insert();
                break;
            case tablenum(CommReportTransPrepayment_RU):
                prepaymentTrans.initFromCommReportTrans(_trans);
                prepaymentTrans.insert();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        ;
        dialog = super();

        dlgFromDate     = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        dlgEndDate      = dialog.addFieldValue(extendedtypestr(EndDate), endDate);
        dlgVendAccount  = dialog.addFieldValue(extendedtypestr(VendAccount), vendAccount);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        fromDate    = dlgFromDate.value();
        endDate     = dlgEndDate.value();
        vendAccount = dlgVendAccount.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        fromDate = vendorPrepaymentDateFrom;

        qrPosted = new QueryRun(this.qrPostedTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuerySet</Name>
				<Source><![CDATA[
    protected boolean initQuerySet()
    {
        transQuerySet = new Set(Types::Container);

        this.modifyPostedQuery();
        transQuerySet.add([this.queryRun().query().pack(), tablenum(VendTrans)]);

        if(VendParameters::find().CreateFactureUnpostPrepayment_RU)
        {
            transQuerySet.add([this.qrUnpostedTrans().pack(), tablenum(LedgerJournalTrans)]);
        }

        transQuerySet.add([this.qrCommReportTrans().pack(), tablenum(CommReportTransPrepayment_RU)]);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPostedQuery</Name>
				<Source><![CDATA[
    protected void  modifyPostedQuery()
    {
        QueryBuildDataSource qbdsTrans, qbdsVend;

        qbdsTrans = this.queryRun().query().dataSourceTable(tablenum(VendTrans));
        qbdsVend  = this.queryRun().query().dataSourceTable(tablenum(VendTable));

        if (!endDate)
            endDate = dateMax();

        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, TransDate),
                            SysQuery::range(fromDate, endDate));
        findOrCreateRange_W(qbdsVend, fieldnum(VendTable, AccountNum), vendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion,
                fromDate,
                endDate,
                vendAccount, 
                this.queryRun().query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrPostedTrans</Name>
				<Source><![CDATA[
    protected Query qrPostedTrans()
    {
        Query                   q;
        QueryBuildDataSource    qbdsTrans, qbdsTransOffset, qbdsVend;
        QueryBuildDataSource    qbdsVendTrans_W;

        q = new Query();

        qbdsVend = q.addDataSource(tablenum(VendTable));
        findOrCreateRange_W(qbdsVend, fieldnum(VendTable, vatTaxAgent_RU), queryValue(NoYes::No)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbdsVend, fieldnum(VendTable, AccountNum)).status(RangeStatus::Hidden);

        qbdsTrans = qbdsVend.addDataSource(tablenum(VendTrans));
        qbdsTrans.relations(true);

        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, Prepayment),  SysQuery::value(NoYes::Yes)).status(RangeStatus::Hidden);
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, Correct),     SysQuery::value(NoYes::No)).status(RangeStatus::Hidden);
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, TransType),   SysQuery::valueNot(LedgerTransType::ExchAdjustment)).status(RangeStatus::Hidden);
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, PaymReference));
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, DocumentNum));
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, DocumentDate));

        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, TransDate),
                            SysQuery::range(fromDate, endDate)).status(RangeStatus::Hidden);
        findOrCreateRange_W(qbdsTrans, fieldnum(VendTrans, AccountNum), vendAccount).status(RangeStatus::Hidden);

        // Add VendTrans_W
        qbdsVendTrans_W = VendTrans_W::addToQuery(qbdsTrans);
        findOrCreateRange_W(qbdsVendTrans_W, fieldnum(VendTrans_W, PrepaymentFactureId_W), SysQuery::valueEmptyString()).status(RangeStatus::Hidden);

        qbdsTransOffset = qbdsTrans.addDataSource(tablenum(VendTrans));
        qbdsTransOffset.joinMode(JoinMode::NoExistsJoin);
        qbdsTransOffset.addLink(fieldnum(VendTrans, OffsetRecid), fieldnum(VendTrans, RecId));
        qbdsTransOffset.addLink(fieldnum(VendTrans, LastSettleVoucher), fieldnum(VendTrans, Voucher));

        findOrCreateRange_W(qbdsTransOffset, fieldnum(VendTrans, Correct), SysQuery::value(NoYes::Yes)).status(RangeStatus::Locked);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrCommReportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for report for principal lines related to prepayments.
    /// </summary>
    /// <returns>
    /// Query for report for principal lines related to prepayments
    /// </returns>
    protected Query qrCommReportTrans()
    {
        Query                   q;
        QueryBuildDataSource    qbdsTrans;
        QueryBuildDataSource    qbdsJour;
        QueryBuildDataSource    qbdsFacture;

        q = new Query();
        qbdsTrans = q.addDataSource(tablenum(CommReportTransPrepayment_RU));
        findOrCreateRange_W(qbdsTrans, fieldnum(CommReportTransPrepayment_RU, Approved), SysQuery::value(NoYes::Yes));
        findOrCreateRange_W(qbdsTrans, fieldnum(CommReportTransPrepayment_RU, TransDate), SysQuery::range(fromDate, endDate));

        qbdsFacture = qbdsTrans.addDataSource(tablenum(FactureJour_RU));
        qbdsFacture.relations(true);
        qbdsFacture.joinMode(JoinMode::NoExistsJoin);

        qbdsJour = qbdsTrans.addDataSource(tablenum(CommReportJour_RU));
        qbdsJour.relations(true);
        qbdsJour.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbdsJour, fieldnum(CommReportJour_RU, PartnerType), SysQuery::value(ModuleCustVend::Vend));
        findOrCreateRange_W(qbdsJour, fieldnum(CommReportJour_RU, PartnerCode), vendAccount);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrUnpostedTrans</Name>
				<Source><![CDATA[
    protected Query qrUnpostedTrans()
    {
        Query                   q;
        QueryBuildDataSource    qbdsTrans;
        QueryBuildDataSource    qbdsJour;
        QueryBuildDataSource    qbdsFacture;

        q = new Query();
        qbdsTrans = q.addDataSource(tablenum(LedgerJournalTrans));
        findOrCreateRange_W(qbdsTrans, fieldnum(LedgerJournalTrans, AccountType), SysQuery::value(LedgerJournalACType::Vend));
        findOrCreateRange_W(qbdsTrans, fieldnum(LedgerJournalTrans, Prepayment), SysQuery::value(NoYes::Yes));

        if (vendAccount)
        {
            SysQuery::addDimensionAttributeRange(q, qbdsTrans.name(), fieldstr(LedgerJournalTrans, LedgerDimension), DimensionComponent::LedgerDimensionDisplayValue, vendAccount);
        }

        findOrCreateRange_W(qbdsTrans, fieldnum(LedgerJournalTrans, TransDate),
                            SysQuery::range(fromDate, endDate));

        qbdsTrans.addRange(fieldnum(LedgerJournalTrans, PaymentStatus)).value(SysQuery::value(CustVendPaymStatus::Sent));
        qbdsTrans.addRange(fieldnum(LedgerJournalTrans, PaymentStatus)).value(SysQuery::value(CustVendPaymStatus::Confirmed));

        qbdsJour = qbdsTrans.addDataSource(tablenum(LedgerJournalTable));
        qbdsJour.relations(true);
        qbdsJour.fetchMode(0);

        findOrCreateRange_W(qbdsJour, fieldnum(LedgerJournalTable, JournalType), SysQuery::value(LedgerJournalType::Payment));
        findOrCreateRange_W(qbdsJour, fieldnum(LedgerJournalTable, Posted), SysQuery::value(NoYes::No));

        qbdsFacture = qbdsTrans.addDataSource(tablenum(FactureTrans_RU));
        qbdsFacture.addLink(fieldnum(LedgerJournalTrans, RecId), fieldnum(FactureTrans_RU, MarkupRefRecId));
        findOrCreateRange_W(qbdsFacture, fieldnum(FactureTrans_RU, FactureLineType), SysQuery::value(FactureLineType_RU::Prepayment));
        findOrCreateRange_W(qbdsFacture, fieldnum(FactureTrans_RU, Module), SysQuery::value(FactureModule_RU::Vend));
        qbdsFacture.fetchMode(0);
        qbdsFacture.joinMode(JoinMode::NoExistsJoin);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return qrPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        QueryRun        qr;
        SetEnumerator   queryEnum;
        tableId       refTableId;
        container     packedQuery;
        ;
        this.initQuerySet();

        queryEnum = transQuerySet.getEnumerator();

        while (queryEnum.moveNext())
        {
            [packedQuery, refTableId] = queryEnum.current();
            qr = new QueryRun(packedQuery);

            while (qr.next())
            {
                this.createTmpTrans(qr.get(refTableId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpPrepaymentTrans</Name>
				<Source><![CDATA[
    VendTmpPrepaymentTrans_RU tmpPrepaymentTrans()
    {
        return prepaymentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container   conQuery;
        Query       query;

        switch (version)
        {
            case currentVersion:
                [version,
                 fromDate,
                 endDate,
                 vendAccount, 
                 conQuery] = packedClass;

                query    = new Query(conQuery);
                qrPosted = new QueryRun(query);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (!fromDate)
        {
            ret = checkFailed("@SYS15885");
        }

        if (endDate && (fromDate > endDate))
        {
            ret = checkFailed("@SYS15885");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static VendSelectPrepayment_RU construct()
    {
        return new VendSelectPrepayment_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS113550";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>