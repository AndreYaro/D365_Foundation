<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustTransSettlement</c> class is used to manage a collection of <c>CustTrans</c> records and
///    <c>CustSettlement</c> records.
/// </summary>
public class CustTransSettlement extends CustVendTransSettlement
{
    Set custTransOpenLinesToDelete;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteCustTransOpenLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the settled open transaction line from the <c>CustTransOpenLine</c> table.
    /// </summary>
    protected void deleteCustTransOpenLine()
    {
        // Refactor: Move to private
        CustTransOpenLine   custTransOpenLine;
        SetEnumerator       setEnumerator;

        setEnumerator = custTransOpenLinesToDelete.getEnumerator();

        ttsbegin;

        while (setEnumerator.moveNext())
        {
            custTransOpenLine = setEnumerator.current();
            custTransOpenLine.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransTypeValidForInsertSettlementLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for valid trans type on <c>CustTrans</c>.
    /// </summary>
    /// <param name = "_custTrans">
    ///     A <c>CustTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if trans type is customer or interest; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isTransTypeValidForInsertSettlementLines(CustTrans _custTrans)
    {
        return _custTrans.TransType == LedgerTransType::Cust || _custTrans.TransType == LedgerTransType::Interest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified <c>CustTransOpen</c> record and moves the associated
    ///    <c>CustTransCashDisc</c> records to the specified <c>CustSettlement</c> record.
    /// </summary>
    /// <param name = "_custTransOpenRecIdToDelete">The record ID of the <c>CustTransOpen</c> record that will be deleted.</param>
    /// <param name = "_custVendSettlement">The <c>CustSettlement</c> record to move <c>CustTransCashDisc</c> records.</param>
    protected void deleteCustVendTransOpen(RecId _custVendTransOpenRecIdToDelete, CustVendSettlement _custVendSettlement)
    {
        if (_custVendTransOpenRecIdToDelete != 0)
        {
            CustTransOpen custTransOpen;

            CustTransCashDisc::moveCashDisc(tableNum(CustTransOpen),
                _custVendTransOpenRecIdToDelete,
                tableNum(CustSettlement),
                _custVendSettlement.RecId);

            delete_from custTransOpen
                where custTransOpen.RecId == _custVendTransOpenRecIdToDelete;
        }

        this.deleteCustTransOpenLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a properly initialized CustVendSettlement map.
    /// </summary>
    /// <param name="_company">
    /// The company used to initialize the record.
    /// </param>
    /// <returns>
    /// A CustSettlement table.
    /// </returns>
    protected CustVendSettlement initCustVendSettlementMap(dataAreaId _company)
    {
        CustSettlement custSettlement;

        changecompany(_company)
        {
            custSettlement.clear();
        }
        return custSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransMap</Name>
				<Source><![CDATA[
    protected CustVendTrans initCustVendTransMap(DataAreaId _company)
    {
        CustTrans custTrans;

        changecompany(_company)
        {
            custTrans.clear();
        }
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSettlementLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a <c>CustSettlementLine</c> record.
    /// </summary>
    /// <param name="_custSettlement">
    ///    The current <c>CustVendSettlement</c> map.
    /// </param>
    /// <param name="_previousCustSettlement">
    ///    The settled <c>CustVendSettlement</c> map; optional.
    /// </param>
    protected void insertSettlementLines(CustVendSettlement _custSettlement,
        CustVendSettlement _previousCustSettlement = null)
    {
        CustTrans                   custTrans;
        CustTransOpen               custTransOpen;
        CustTransOpenLine           custTransOpenLine;
        CustTransMarkedOpenLine     custTransMarkedOpenLine;
        CustSettlementLine          custSettlementLine;
        CustSettlementLine          reverseSettlementLine;
        money                       lineDiscount;
        money                       amountToSettleOnLine;
        SpecTrans                   specTrans;
        real                        lineDistributionFactor;
        money                       remainingAmountToSettle;
        money                       remainingCashDiscToSettle;
        int64                       distributionCounter;
        int64                       distributionsProcessed;
        money                       markedLineValuesTotal;
        money                       roundingDiffAmount;

        ttsbegin;

        // Initialize a set object to store open transaction lines to be deleted.
        custTransOpenLinesToDelete = new Set(Types::Record);

        if (_previousCustSettlement.RecId == 0)
        {
            // Get the custTransOpen buffer for the transaction which is going to be settled.
            select custTransOpen
                where custTransOpen.RefRecId == _custSettlement.TransRecId &&
                custTransOpen.DueDate == _custSettlement.DueDate
                    join custTrans
                    where custTrans.RecId == custTransOpen.RefRecId;

            if (custTransOpen && this.isTransTypeValidForInsertSettlementLines(custTrans))
            {
                specTrans = SpecTrans::find(
                    specCompany,
                    specTable,
                    specRecId,
                    custTransOpen.DataAreaId,
                    tableNum(CustTransOpen),
                    custTransOpen.RecId);

                markedLineValuesTotal       = CustTransMarkedOpenLine::getTotalAmountToSettle(specTrans.RecId);
                remainingAmountToSettle     = _custSettlement.SettleAmountCur - _custSettlement.UtilizedCashDisc;
                remainingCashDiscToSettle   = _custSettlement.UtilizedCashDisc;
                distributionCounter         = (select count(RecId) from custTransMarkedOpenLine
                                                where custTransMarkedOpenLine.SpecTrans == specTrans.RecId).RecId;

                TaxWithholdTrans taxWithholdTrans;

                while select custTransMarkedOpenLine
                    join forupdate custTransOpenLine
                        where custTransMarkedOpenLine.SpecTrans == specTrans.RecId
                            && custTransOpenLine.RecId == custTransMarkedOpenLine.CustTransOpenLine
                {
                    distributionsProcessed ++;

                    custSettlementLine.clear();

                    // Calculate the distribution factor for the settlement line.
                    if (markedLineValuesTotal != 0.0)
                    {
                        lineDistributionFactor = (custTransMarkedOpenLine.AmountToSettle / markedLineValuesTotal);
                    }

                    if (distributionsProcessed == distributionCounter)
                    {
                        amountToSettleOnLine = remainingAmountToSettle;
                        lineDiscount         = remainingCashDiscToSettle;
                    }
                    else
                    {
                        // Calculate the line settlement amount
                        amountToSettleOnLine =  CurrencyExchange::round(lineDistributionFactor * (_custSettlement.SettleAmountCur - _custSettlement.UtilizedCashDisc),
                                                                            custTrans.CurrencyCode);

                        if (_custSettlement.UtilizedCashDisc != 0.0)
                        {
                            // Calculate the cash discount amount
                            lineDiscount = CurrencyExchange::round(lineDistributionFactor * _custSettlement.UtilizedCashDisc,
                                                                        custTrans.CurrencyCode);
                        }
                        else
                        {
                            lineDiscount = 0.0;
                        }
                    }

                    if (abs(amountToSettleOnLine + lineDiscount)  > abs(custTransOpenLine.AmountCur))
                    {
                        roundingDiffAmount   = (amountToSettleOnLine + lineDiscount) - custTransOpenLine.AmountCur;
                        amountToSettleOnLine -= roundingDiffAmount;
                    }

                    remainingAmountToSettle   -= amountToSettleOnLine;
                    remainingCashDiscToSettle -= lineDiscount;

                    // Set settled amount and utilized cash discount.
                    custSettlementLine.UtilizedCashDisc = lineDiscount;
                    custSettlementLine.SettledAmountCur = amountToSettleOnLine + lineDiscount;

                    // Insert record in settlement line table.
                    custSettlementLine.CustInvoiceLineIdRef = custTransOpenLine.CustInvoiceLineIdRef;
                    custSettlementLine.CustSettlement       = _custSettlement.RecId;
                    custSettlementLine.insert();

                    // Calculate withholding tax for each marked custtransopenline
                    select InvoiceTaxWithholdAmount from taxWithholdTrans
                        where taxWithholdTrans.SpecTransId == specTrans.RecId
                        && taxWithholdTrans.CustTransInvoiceId == custTrans.RecId;

                    TaxWithholdAmount taxWithholdAmount = CurrencyExchange::round(taxWithholdTrans.InvoiceTaxWithholdAmount * lineDistributionFactor, custTrans.CurrencyCode);;

                    // If line is completely settled, add this line in a set to delete it later.
                    if (abs(amountToSettleOnLine + lineDiscount - taxWithholdAmount)  >= abs(custTransOpenLine.AmountCur))
                    {
                        custTransOpenLinesToDelete.add(custTransOpenLine);
                    }
                    else
                    {
                        // In case of partial settlement, update open trans line with remaining settlement amount.
                        custTransOpenLine.AmountCur -= (custSettlementLine.SettledAmountCur - taxWithholdAmount);
                        custTransOpenLine.update();
                    }
                }
            }
        }
        else
        {
            custTrans = CustTrans::find(_previousCustSettlement.TransRecId);

            if (this.isTransTypeValidForInsertSettlementLines(custTrans))
            {
                while select custSettlementLine
                    where custSettlementLine.CustSettlement == _previousCustSettlement.RecId
                {
                    reverseSettlementLine.clear();
                    reverseSettlementLine.CustSettlement = _custSettlement.RecId;
                    reverseSettlementLine.SettledAmountCur = - custSettlementLine.SettledAmountCur;
                    reverseSettlementLine.UtilizedCashDisc =  - custSettlementLine.UtilizedCashDisc;
                    reverseSettlementLine.CustInvoiceLineIdRef = custSettlementLine.CustInvoiceLineIdRef;
                    reverseSettlementLine.insert();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSettlementOffsetRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the OffsetRecId field on the CustVendTrans table and CustVendSettlement table.
    /// </summary>
    /// <param name="_recIdOfTransaction">
    /// The record ID of the transaction to update.
    /// </param>
    /// <param name="_offsetRecId">
    /// The record ID value used to update the OffsetRecId field.
    /// </param>
    /// <param name="_offsetVoucher">
    /// The voucher value used to update the LastSettleVoucher field and OffsetTransVoucher field.
    /// </param>
    /// <param name="_companyOfTransaction">
    /// The company of the records to update.
    /// </param>
    protected void updateTransSettlementOffsetRecId(
        RefRecId _recIdOfTransaction,
        RefRecId _offsetRecId,
        Voucher _offsetVoucher,
        CompanyId _companyOfTransaction)
    {
        CustSettlement  custSettlement;
        CustTrans       custTrans;

        changecompany(_companyOfTransaction)
        {
            update_recordset custTrans
                setting OffsetRecid = _offsetRecId,
                LastSettleVoucher = _offsetVoucher
                where custTrans.RecId == _recIdOfTransaction;

            update_recordset custSettlement
                setting OffsetRecid = _offsetRecId,
                OffsetTransVoucher = _offsetVoucher
                where custSettlement.TransRecId == _recIdOfTransaction;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>