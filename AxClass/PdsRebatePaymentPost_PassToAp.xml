<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebatePaymentPost_PassToAp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that holds the rebate specific information for a vendor payment.
/// </summary>
class PdsRebatePaymentPost_PassToAp extends PdsRebatePaymentPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endInfoLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog message when rebate posting succeeds.
    /// </summary>
    protected void endInfoLog()
    {
        info("@PRO1183");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTable</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> table record.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTable</c> table record.
    /// </returns>
    protected LedgerJournalTable initLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTable ledgerJournalTable = super(_ledgerJournalTable);

        ledgerJournalTable.CurrencyCode = VendTable::find(custVendAccount).Currency;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTrans</c> table record.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        DimensionDynamicAccount dimensionAccount;

        VendTable   vendTable = VendTable::find(custVendAccount);

        LedgerJournalTrans ledgerJournalTrans   = super(_ledgerJournalTrans);

        ledgerJournalTrans.AccountType          = LedgerJournalACType::Vend;

        ledgerJournalTrans.Invoice              = _ledgerJournalTrans.Voucher;

        ledgerJournalTrans.Due                  = ledgerJournalTrans.DocumentDate + PaymTerm::find(ledgerJournalTrans.Payment).NumOfDays;

        ledgerJournalTrans.PaymMode             = vendTable.PaymMode;

        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;

        ledgerJournalTrans.PostingProfile       = VendParameters::find().PostingProfile;

        ledgerJournalTrans.Txt                  = "@PRO1192";

        ledgerJournalTrans.LedgerDimension      = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(custVendAccount, LedgerJournalACType::Vend);

        ledgerJournalTrans.pdsCalcAmt(true, rebateTableForPostingInfo.PdsCorrectedRebateAmt);

        dimensionAccount = this.dimensionAccount();

        if (dimensionAccount)
        {
            ledgerJournalTrans.OffsetLedgerDimension = dimensionAccount;
        }
        else
        {
            throw error("@SYS25236");
        }

        ledgerJournalTrans.DefaultDimension   = this.getDefaultDimension();

        ledgerJournalTrans.TaxGroup     = rebateTableForPostingInfo.TaxGroup;
        ledgerJournalTrans.TaxItemGroup = rebateTableForPostingInfo.TaxItemGroup;

        return ledgerJournalTrans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalName</c> table record used for payment posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalName()
    {
        return LedgerJournalName::find(PdsRebateParameters::find().PdsInvoiceJournalNameId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerTransType</c> of the payment posting.
    /// </summary>
    /// <returns>
    /// The <c>ledgerTransType</c> of the payment posting.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::PdsRebatePassToAP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the  rebate transaction type as 'PassToAp'.
    /// </summary>
    /// <returns>
    /// The rebate transaction type.
    /// </returns>
    public PdsRebateTransaction pdsRebateTransaction()
    {
        return PdsRebateTransaction::PassToAP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the ledger posting.
    /// </summary>
    protected void postLedger()
    {
        super();

        info(strfmt("@PRO1200", ledgerJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public void prompt()
    {
        PdsRebateAgreement pdsRebateAgreement = PdsRebateAgreement::find(callerRebateTable.PdsRebateAgreementRefRecId);

        if (pdsRebateAgreement.TAMVendPayTo)
        {
            custVendAccount = pdsRebateAgreement.TAMVendPayTo;
        }
        else
        {
            custVendAccount = callerRebateTable.type().custVendAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the customer vendor account.
    /// </summary>
    /// <returns>
    /// true if vendor account is set for the customer; otherwise false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = super();

        if (ret && !custVendAccount)
        {
            ret = checkFailed(strfmt("@PRO1179", callerRebateTable.CustAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    /// A new class instance.
    /// </returns>
    public static PdsRebatePaymentPost_PassToAp construct()
    {
        return new pdsRebatePaymentPost_PassToAp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the class.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed.
    /// </param>
    public static void main(Args _args)
    {
        PdsRebatePaymentPost pdsRebatePaymentPost = PdsRebatePaymentPost_PassToAp::newFromForm(_args, _args.record());

        pdsRebatePaymentPost.prompt();

        if (pdsRebatePaymentPost.validate())
        {
            pdsRebatePaymentPost.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PdsRebatePaymentPost_PassToAp</c> class.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed.
    /// </param>
    /// <param name="_buffer">
    /// A record buffer on which rebate payment posting is performing.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsRebatePaymentPost_PassToAp</c> class.
    /// </returns>
    public static PdsRebatePaymentPost_PassToAp newFromForm(
        Args    _args,
        Common  _buffer)
    {
        PdsRebatePaymentPost_PassToAp pdsRebatePaymentPost_PassToAp;

        pdsRebatePaymentPost_PassToAp = PdsRebatePaymentPost::construct(PdsRebateTransaction::PassToAP);
        pdsRebatePaymentPost_PassToAp.parmArgs(_args);
        pdsRebatePaymentPost_PassToAp.parmPdsRebateTable(_buffer);

        return pdsRebatePaymentPost_PassToAp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>