<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorProjInv_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Fiscal document parm data creator for project invoices
/// </summary>
public class FiscalDocParmDataCreatorProjInv_BR extends FiscalDocumentParmDataCreator_BR
{
    ProjInvoiceJour         projInvoiceJour;
    ProjProposalTotals      projProposalTotals;
    CustTable               custTable;
    ProjInvoiceTable        projInvoicetable;
    FiscalDocumentType_BR   fiscalDocumentType;
    ProjProposalJour        projProposalJour;
    FiscalEstablishment_BR  fiscalEstablishment;
    CustTrans               custTrans;

    CFOPId_BR               projInvoiceTransCFOP;

    SalesCarrier            salesCarrier;

    LogisticsPostalAddress          logisticsPostalAddress;
    taxBenefitCodeSetupHeading_BR   taxBenefitCodeSetupHeading;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxWithholdTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a Fiscal document text to list from Witholding tax TextID.
    /// </summary>
    /// <returns>
    /// Returns Fiscal document texts list.
    /// </returns>
    private FiscalDocumentTextListParmData_BR addTaxWithholdTexts()
    {
        FiscalDocumenttextId_BR             textId = BrazilParameters::find().TaxWithholdFiscalDocumentTextID;
        FiscalDocumentTextTagReplacer_BR    taxReplacer = FiscalDocumentTextTagReplacer_BR::construct();
        FiscalDocumentTextListParmData_BR   textList;
        TmpTaxWithhold                      tmpTaxWithhold;

        textList  = FiscalDocumentTextListParmData_BR::construct();

        tmpTaxWithhold = TaxWithhold::calculateTmpTaxWithhold(custTrans, custTrans.TransDate);

        while select tmpTaxWithhold
        {
            taxReplacer.parmTaxWithhold_Code(tmpTaxWithhold.TaxWithholdCode);
            taxReplacer.parmTaxWithhold_Value(tmpTaxWithhold.TaxWithholdValue);
            taxReplacer.parmTaxWithhold_Amount(tmpTaxWithhold.TaxWithholdAmount);

            textList.addText(textId, FiscalDocumentTextType_BR::Blank, taxReplacer);
        }

        return textList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateProjInvoiceTrans</Name>
				<Source><![CDATA[
    private Map aggregateProjInvoiceTrans(List _recordList)
    {
        ProjInvoiceTransMap_MX          projInvoiceTransMap;
        FiscalDocumentLineParmData_BR   lineParmData;
        ProjInvoiceTransAggregator_BR   aggregator = ProjInvoiceTransAggregator_BR::construct();
        Map                             aggregation = new Map(Types::String, Types::Class);
        str                             key;
        ListEnumerator                  le;

        le = _recordList.getEnumerator();

        while (le.moveNext())
        {
            projInvoiceTransMap = le.current();

            key = aggregator.key(projInvoiceTransMap);

            if (!aggregation.exists(key))
            {
                lineParmData = new FiscalDocumentLineParmData_BR();
                aggregator.beginNewAggregation(projInvoiceTransMap, lineParmData);

                aggregation.insert(key, lineParmData);
            }
            else
            {
                lineParmData = aggregation.lookup(key);
            }

            aggregator.aggregate(projInvoiceTransMap, lineParmData);
            lineParmData.parmCFOP(projInvoiceTransCFOP);
            lineParmData.parmFinancialLedgerDimension(FiscalDocParmDataCreatorProjInv_BR::getFinancialDimension(projInvoiceJour));
            this.setSourceLineReference(lineParmData, projInvoiceTransMap);
        }

        return aggregation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjInvoiceSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a list of <c>FiscalDocumentLineParmData_BR</c> for project sales lines
    /// </summary>
    /// <param name="_recordList">
    ///     List of <c>ProjInvoiceItem</c> containing sales project transactions
    /// </param>
    /// <returns>
    ///     list of <c>FiscalDocumentLineParmData_BR</c>
    /// </returns>
    private List createProjInvoiceSalesLine(RecordSortedList _recordList)
    {
        FiscalDocumentLineParmData_BR   lineParmData;
        AmountCur                       lineGrossAmount;
        AmountMST                       lineGrossAmountMST;
        AmountMST                       lineDiscountMST;
        ProjInvoiceItem                 projInvoiceItem_sales;
        SalesLine                       salesLine;
        SalesLine_BR                    salesLine_BR;
        CFOPTable_BR                    cfopTable;

        List lines = new List(Types::Class);

        _recordList.first(projInvoiceItem_sales);
        logisticsPostalAddress = fiscalEstablishment.postalAddress();
        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        while (projInvoiceItem_sales)
        {
            lineParmData = new FiscalDocumentLineParmData_BR();
            lines.addEnd(lineParmData);

            select firstonly RecId from salesLine
                where salesLine.SalesId == projInvoiceItem_sales.SalesId
                    && salesLine.InventTransId == projInvoiceItem_sales.InventTransId;

            if (salesLine.RecId != 0)
            {
                lineParmData.parmListOfTextsParmData().appendList(this.addTexts(SalesLine::findRecId(salesLine.RecId)));
            }

            salesLine_BR = salesLine.salesLine_BR();

            select firstonly CFOPId from cfopTable
                    where cfopTable.RecId == salesLine_BR.CFOPTable_BR;

            lineGrossAmount = PriceDisc::price2Amount(salesLine.SalesPrice,
                                                      projInvoiceItem_sales.PriceUnit,
                                                      0,
                                                      projInvoiceItem_sales.Qty,
                                                      projInvoiceItem_sales.Qty,
                                                      0,
                                                      0,
                                                      salesLine.CurrencyCode,
                                                      projInvoiceItem_sales.LineAmount);

            lineGrossAmountMST  = this.mstAmount(lineGrossAmount);

            lineDiscountMST = lineGrossAmountMST - this.mstAmount(projInvoiceItem_sales.lineAmountDetailSum());

            lineParmData.parmItemId                 (projInvoiceItem_sales.ItemId);
            lineParmData.parmCFOP                   (cfopTable.CFOPId);

            InventTable inventTable = InventTable::find(projInvoiceItem_sales.ItemId);

            if (inventTable.RecId)
            {
                this.initParmLineFromInventTable(lineParmData, inventTable);

                lineParmData.parmApproximateTaxAmount(round(inventTable.approximateTaxValue_BR() *  projInvoiceItem_Sales.LineAmount/ 100, 0.01));
                totalApproxTaxAmount += lineParmData.parmApproximateTaxAmount();

                lineParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextLine(inventTable, lineParmData));
            }

            lineParmData.parmDescription            (projInvoiceItem_sales.Txt);
            lineParmData.parmInventTransId          (projInvoiceItem_sales.InventTransId);
            lineParmData.parmUnit                   (projInvoiceItem_sales.SalesUnit);
  
            lineParmData.parmLineAmount             (lineGrossAmountMST);
            lineParmData.parmLineDiscount           (lineDiscountMST);
            lineParmData.parmQuantity               (projInvoiceItem_sales.Qty);

            if (lineParmData.parmQuantity())
            {
                lineParmData.parmUnitPrice(lineParmData.parmLineAmount() / lineParmData.parmQuantity());
            }

            if (lineParmData.parmItemType() == FiscalDocumentLineItemType_BR::Product)
            {
                this.setTaxationOriginAndFciNumber(lineParmData);

                if (lineParmData.parmFciNumber() != '')
                {
                    lineParmData.parmListOfTextsParmData().appendList(this.addFciTextLine(lineParmData, lineParmData.parmTextTagReplacer()));
                }
            }

            lineParmData.parmFinancialLedgerDimension       (FiscalDocParmDataCreatorProjInv_BR::getFinancialDimension(projInvoiceJour));
            lineParmData.parmRefRecId                       (projInvoiceItem_sales.RecId);
            lineParmData.parmRefTableId                     (projInvoiceItem_sales.TableId);

            this.setSourceLineReference(lineParmData, projInvoiceItem_sales);

            if (!_recordList.next(projInvoiceItem_sales))
                break;
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a list of <c>FiscalDocumentLineParmData_BR</c> for project transactions not related to sales orders
    /// </summary>
    /// <param name="_recordList">
    ///     List of <c>ProjInvoiceItem</c> containing project transactions
    /// </param>
    /// <returns>
    ///     list of <c>FiscalDocumentLineParmData_BR</c>
    /// </returns>

    private List createProjInvoiceTrans(List _recordList)
    {
        MapEnumerator                   mapEnumerator;
        List                            fiscalDocLinesList = new List(Types::Class);

        mapEnumerator = this.aggregateProjInvoiceTrans(_recordList).getEnumerator();

        while (mapEnumerator.moveNext())
        {
            fiscalDocLinesList.addEnd(mapEnumerator.currentValue());
        }

        return fiscalDocLinesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the recId of the payment schedule source record
    /// </summary>
    /// <returns>
    ///     The recId of the payment schedule source record
    /// </returns>

    protected RecId custPaymSchedRefRecId()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the tableId of the payment schedule source record
    /// </summary>
    /// <returns>
    ///     The tableId of the payment schedule source record
    /// </returns>
    ///
    protected TableId custPaymSchedRefTableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return projInvoiceJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected RecId fiscalReferenceSourceRecId()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected TableId fiscalReferenceSourceTableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>FiscalDocParmDataCreatorProjInv_BR</c> object
    /// </summary>
    /// <param name="_projInvoiceJour">
    ///     The <c>ProjInvoiceJour</c> record
    /// </param>
    /// <param name="_projProposalTotals">
    ///     The <c>ProjProposalTotals</c> object
    /// </param>
    /// <param name="_projInvoicetable">
    ///     The <c>ProjInvoiceTable</c> record
    /// </param>
    /// <param name="_projProposalJour">
    ///     The <c>ProjProposalJour</c> record
    /// </param>

    public void init(ProjInvoiceJour _projInvoiceJour, ProjProposalTotals _projProposalTotals, ProjInvoiceTable _projInvoicetable, ProjProposalJour _projProposalJour)
    {
        projInvoiceJour         = _projInvoiceJour;
        projProposalTotals      = _projProposalTotals;
        projInvoicetable        = _projInvoicetable;
        projProposalJour        = _projProposalJour;

        custTable               = CustTable::find(projInvoiceJour.InvoiceAccount);
        fiscalDocumentType      = FiscalDocumentType_BR::findRecId(projProposalJour.FiscalDocumentType_BR);
        fiscalEstablishment     = FiscalEstablishment_BR::find(projProposalJour.FiscalEstablishment_BR);
        custTrans               = custTrans::findVoucherDate(projInvoiceJour.LedgerVoucher, projInvoiceJour.InvoiceDate);

        salesCarrier            = SalesCarrier::find(projProposalJour.BOLCarrierName);

        this.initCFOP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCFOP</Name>
				<Source><![CDATA[
    private void initCFOP()
    {
        RefRecId                  cfopRecId;
        CFOPAddressInformation_BR fromAddressInformation;
        CFOPAddressInformation_BR toAddressInformation;

        fromAddressInformation =    new CFOPAddressInformation_BR(fiscalEstablishment.postalAddress());
        toAddressInformation =      new CFOPAddressInformation_BR(LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress));

        switch (fromAddressInformation.getLocationRelativeTo(toAddressInformation))
        {
            case CustVendLocation_BR::OtherState :
                cfopRecId = ProjParameters::find().ProjTransCFOPOtherState_BR;
                break;

            case CustVendLocation_BR::OutsideCountry :
                cfopRecId = ProjParameters::find().ProjTransCFOPOutsideCountry_BR;
                break;

            case CustVendLocation_BR::SameState :
                cfopRecId = ProjParameters::find().ProjTransCFOPSameState_BR;
                break;
        }

        projInvoiceTransCFOP = CFOPTable_BR::find(cfopRecId).CFOPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        List    installments = new List(Types::Class);

        FiscalDocumentCustVendTransParmData_BR custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();

        custVendTransParmData.parmAmount(custTrans.AmountMST);
        custVendTransParmData.parmDocumentType(CustPaymModeTable::find(custTrans.paymMode).PrimaryMethod_BR);
        custVendTransParmData.parmDueDate(custTrans.DueDate);

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentSeries_BR   series = FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId);
        SalesTable_BR             salesTableBR  = projInvoiceJour.getSalesTable().salesTable_BR();

        FiscalDocumentParmData_BR parmData = new FiscalDocumentParmData_BR();
        AmountMST totalAmountMST = this.mstAmount(projInvoiceJour.InvoiceAmount);

        // fiscal info
        parmData.parmVoucher                                (projInvoiceJour.LedgerVoucher);
        parmData.parmAccountingDate                         (projInvoiceJour.InvoiceDate);
        parmData.parmDirection                              (FiscalDocDirection_BR::Outgoing);
        parmData.parmFinalUser                              (salesTableBR.CustFinalUser_BR);
        if (parmData.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00087, funcName());
        }
        parmData.parmPresenceType                           (salesTableBR.PresenceType);
        parmData.parmPaymentMethod                          (projInvoiceJour.getSalesTable().nfePaymentMethod_BR());
        parmData.parmPaymentAmount                          (totalAmountMST);
    
        parmData.parmFiscalDocumentIssuer                   (FiscalDocumentIssuer_BR::OwnEstablishment);
        parmData.parmFiscalDocumentDate                     (projInvoiceJour.InvoiceDate);
        parmData.parmFiscalDocumentNumber(this.getInvoiceIdWithoutSeriesPrefix(projInvoiceJour.ProjInvoiceId, series));
        parmData.parmFiscalDocumentSeries                   (series);
        parmData.parmModel                                  (fiscalDocumentType.FiscalDocumentModel);
        parmData.parmSpecie                                 (fiscalDocumentType.FiscalDocumentSpecie);

        parmData.parmDeliveryMode                           (projInvoicejour.DlvMode);
        parmData.parmDeliveryTerm                           (projInvoicejour.DlvTerm);
        parmData.parmPackingBrand                           (projProposalJour.DlvTransportBrand_BR);

        var freightTerms = FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(projProposalJour.SalesFreightChargeTerms_BR);
        parmData.parmFreightChargeTerms                     (freightTerms);

        parmData.parmSalesCarrier                           (salesCarrier.RecId);
        parmData.parmSalesCarrierPostalAddress              (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);
        parmData.parmVehicleLicensePlateNumber              (projProposalJour.VehicleLicensePlate_BR);
        parmData.parmVehicleLicensePlateState               (projProposalJour.VehicleLicensePlateState_BR);

        // fiscal establishment info
        parmData.parmFiscalEstablishmentCCMNum              (fiscalEstablishment.CCMNum_BR);
        parmData.parmFiscalEstablishmentCNPJCPF             (fiscalEstablishment.CNPJCPFNum_BR);
        parmData.parmFiscalEstablishmentID                  (fiscalEstablishment.FiscalEstablishmentId);
        parmData.parmFiscalEstablishmentIE                  (fiscalEstablishment.IENum_BR);
        parmData.parmFiscalEstablishmentName                (fiscalEstablishment.Name);
        parmData.parmFiscalEstablishmentPhone               (fiscalEstablishment.phone());
        parmData.parmFiscalEstablishmentPostalAddress       (fiscalEstablishment.postalAddress().RecId);

        // third party info
        parmData.parmFiscalDocumentAccountNum               (custTable.AccountNum);
        parmData.parmFiscalDocumentAccountType              (CustVendType_BR::Customer);
        parmData.parmThirdPartyCCMNum                       (custTable.CCMNum_BR);
        parmData.parmThirdPartyCNPJCPF                      (custTable.CNPJCPFNum_BR);
        parmData.parmThirdPartyFax                          (custTable.telefax());
        parmData.parmThirdPartyIE                           (custTable.IENum_BR);
        parmData.parmThirdPartyName                         (custTable.name());
        parmData.parmThirdPartyPhone                        (custTable.phone());
        parmData.parmThirdPartyPostalAddress                (custTable.postalAddress().RecId);
        parmData.parmThirdPartyEmail                        (custTable.email());
        parmData.parmThirdPartyIcmsContributor              (custTable.ICMSContributor_BR);

        // fiscal document totals
        parmData.parmTotalAmount                            (totalAmountMST);
        parmData.parmTotalDiscountAmount                    (projProposalTotals.projInvoiceEndDisc());
        parmData.parmTotalMarkupFreightAmount               (projProposalTotals.markupFreightAmountMST_BR());
        parmData.parmTotalMarkupInsuranceAmount             (projProposalTotals.markupInsuranceAmountMST_BR());
        parmData.parmTotalMarkupOtherAmount                 (projProposalTotals.markupOthersAmountMST_BR());

        // other
        parmData.parmFiscalDocumentType                     (fiscalDocumentType);
        parmData.parmRefRecId                               (projInvoiceJour.RecId);
        parmData.parmRefTableId                             (projInvoiceJour.TableId);

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        RecordSortedList        salesLineRecordList;
        ProjInvoiceItem         projInvoiceItem_Sales;

        List list = new List(Types::Class);

        salesLineRecordList = new RecordSortedList(tableNum(ProjInvoiceItem));
        salesLineRecordList.sortOrder(fieldNum(ProjInvoiceItem, RecId));

        if (ProjFilterSalesOrderByFiscalEstablishment_BRFlight::instance().isEnabled())
        {
            SalesLine salesLine;
            InventDim inventDim;
            FiscalEstablishmentInventSite_BR inventSiteBr;

            while select projInvoiceItem_Sales
                where projInvoiceItem_Sales.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceItem_Sales.InvoiceDate == projInvoiceJour.InvoiceDate
                    && projInvoiceItem_Sales.ItemType == ProjItemType::SalesOrder
            exists join salesLine
                where salesLine.InventTransId == projInvoiceItem_Sales.InventTransId
            exists join inventDim
                where inventDim.inventDimId == salesLine.InventDimId
            exists join inventSiteBr
                where inventSiteBr.InventSite == inventDim.InventSiteId
                    && inventSiteBr.FiscalEstablishment_BR == fiscalEstablishment.RecId
            {
                salesLineRecordList.ins(projInvoiceItem_Sales);
            }
        }
        else
        {
            while select projInvoiceItem_Sales
                where projInvoiceItem_Sales.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceItem_Sales.InvoiceDate == projInvoiceJour.InvoiceDate
                    && projInvoiceItem_Sales.ItemType == ProjItemType::SalesOrder
            {
                salesLineRecordList.ins(projInvoiceItem_Sales);
            }
        }

        list.appendList(this.createProjInvoiceSalesLine(salesLineRecordList));

        list.appendList(this.createProjInvoiceTrans(this.initProjInvoiceTransRecordList()));

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        CustPaymSched                               custPaymSched;
        CustPaymSchedLine                           custPaymSchedLine;
        FiscalDocumentInstallmentParmData_BR        installmentParmData;
        int                                         installmentNumber;
        List                                        list = new List(Types::Class);

        select firstonly recId from custPaymSched
            where custPaymSched.ExtRecId    == this.custPaymSchedRefRecId()
                && custPaymSched.ExtTableId == this.custPaymSchedRefTableId();

        while select DueDate, DueAmount from custPaymSchedLine
            join recId from custPaymSched
            where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                && custPaymSched.ExtRecId       == this.custPaymSchedRefRecId()
                && custPaymSched.ExtTableId     == this.custPaymSchedRefTableId()
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            installmentNumber++;

            installmentParmData.parmDueDate(custPaymSchedLine.DueDate);
            installmentParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate));
            installmentParmData.parmInstallmentNumber(installmentNumber);

            list.addEnd(installmentParmData);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        VolumeType_BR volumeType;
        VolumeQty_BR volumeQty;

        List shipmentStatList = new List(Types::Class);

        FiscalDocumentShipmentStatParmData_BR shipmentStatParmData;

        shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();

        volumeQty = projProposalJour.VolumeQty_BR ? projProposalJour.VolumeQty_BR : BrazilParameters::find().VolumeQty_BR;
        shipmentStatParmData.parmVolumeQuantity(volumeQty);

        volumeType = projProposalJour.VolumeType_BR ? projProposalJour.VolumeType_BR : BrazilParameters::find().VolumeType_BR;
        shipmentStatParmData.parmVolumeType(volumeType);

        shipmentStatParmData.parmGrossWeight(projProposalTotals.projInvoiceItemGrossWeight());
        shipmentStatParmData.parmNetWeight(projProposalTotals.projInvoiceItemWeight());

        shipmentStatList.addEnd(shipmentStatParmData);

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the taxes incurred for a given Fiscal Document line.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing the header for the given Fiscal Document line.
    /// </param>
    /// <param name="_fiscalDocumentLineParmData">
    ///     An instance of <c>FiscalDocumentLineParmData_BR</c> representing a specific Fiscal Document line.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentTaxTransParmData_BR</c> representing the taxes incurred for
    ///     the Fiscal Document line passed in as parameter.
    /// </returns>
    protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR      _fiscalDocumentParmData,
                                                     FiscalDocumentLineParmData_BR  _fiscalDocumentLineParmData)
    {
        List                                listOfTaxParmData = new List(Types::Class);

        TaxTrans                            taxTrans;
        TaxTrans_BR                         taxTrans_BR;

        ListEnumerator                      listEnumeradortSourceRecords;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        FiscalDocumentLineSourceParmData_BR fiscalDocumentLineSourceParmData;

        listEnumeradortSourceRecords = _fiscalDocumentLineParmData.parmListOfSourceRecords().getEnumerator();

        while (listEnumeradortSourceRecords.moveNext())
        {
            fiscalDocumentLineSourceParmData = listEnumeradortSourceRecords.current();

            while select taxTrans
                where taxTrans.SourceRecId == fiscalDocumentLineSourceParmData.parmRefRecId()
                    && taxTrans.SourceTableId == fiscalDocumentLineSourceParmData.parmRefTableId()
                join taxTrans_BR
                    where taxTrans_BR.TaxTrans == taxTrans.RecId
            {
                taxTransParmData = new FiscalDocumentTaxTransParmData_BR();

                this.initTaxTransParmDataFromTaxTrans(_fiscalDocumentParmData,
                                                       taxTransParmData,
                                                       taxTrans,
                                                       taxTrans_BR);

                listOfTaxParmData.addEnd(taxTransParmData);
            }
        }

        return FiscalDocumentParmDataCreator_BR::aggregateFiscalDocLineTaxes(listOfTaxParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmLineFromInventTable</Name>
				<Source><![CDATA[
    private void initParmLineFromInventTable(FiscalDocumentLineParmData_BR _lineParmData, InventTable _inventTable)
    {
        switch (_inventTable.ItemType)
        {
            case ItemType::Item     :
                _lineParmData.parmItemType(FiscalDocumentLineItemType_BR::Product);
                break;

            case ItemType::Service  :
                _lineParmData.parmItemType(FiscalDocumentLineItemType_BR::Service);
                break;
        }

        _lineParmData.parmExceptionCode         (_inventTable.ExceptionCode_BR);
        _lineParmData.parmScaleIndicator        (_inventTable.ScaleIndicator_BR);
        _lineParmData.parmCNPJ                  (_inventTable.CNPJ_BR);

        _lineParmData.parmBenefitCode           (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                    taxBenefitCodeSetupHeading.RecId,
                                                    _lineParmData.parmItemId(),
                                                    CustVendType_BR::Customer,
                                                    custTable.AccountNum,
                                                    _lineParmData.parmCFOP(),
                                                    SalesPurchTrntype_BR::Sales));
        _lineParmData.parmAdjustmentCode53      (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                    taxBenefitCodeSetupHeading.RecId,
                                                    _lineParmData.parmItemId(),
                                                    CustVendType_BR::Customer,
                                                    custTable.AccountNum,
                                                    _lineParmData.parmCFOP(),
                                                    SalesPurchTrntype_BR::Sales));
        _lineParmData.parmObservationCode       (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                    taxBenefitCodeSetupHeading.RecId,
                                                    _lineParmData.parmItemId(),
                                                    CustVendType_BR::Customer,
                                                    custTable.AccountNum,
                                                    _lineParmData.parmCFOP(),
                                                    SalesPurchTrntype_BR::Sales));
        
        _lineParmData.parmFiscalClassification  (_inventTable.TaxFiscalClassification_BR);
        _lineParmData.parmServiceCode           (_inventTable.serviceCode_BR().ServiceCodeId);
        _lineParmData.parmOrigin                (_inventTable.TaxationOrigin_BR);
        _lineParmData.parmUnit                  (_inventTable.salesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceTransRecordList</Name>
				<Source><![CDATA[
    private List initProjInvoiceTransRecordList()
    {
        List                    projTransRecordList;
        ProjInvoiceCost         projInvoiceCost;
        ProjInvoiceEmpl         projInvoiceEmpl;
        ProjInvoiceItem         projInvoiceItem;
        ProjInvoiceOnAcc        projinvoiceOnAcc;
        ProjInvoiceRevenue      projInvoiceRevenue;

        void AddLine(ProjInvoiceTransMap_MX  _projInvoiceTrans)
        {
            projTransRecordList.addEnd(_projInvoiceTrans);
        }

        projTransRecordList = new List(Types::Record);

        while select InvoiceDate, ProjInvoiceId, CurrencyId, LineAmount, Qty, Txt, TransId, CategoryId from projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceCost.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            AddLine(projInvoiceCost);
        }

        while select InvoiceDate, ProjInvoiceId, CurrencyId, LineAmount, Qty, Txt, InventTransId, CategoryId from projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
               && projInvoiceItem.ItemType      != ProjItemType::SalesOrder
        {
            AddLine(projInvoiceItem);
        }

        while select InvoiceDate, ProjInvoiceId, CurrencyId, LineAmount, Qty, Txt, TransId, CategoryId from projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceEmpl.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            AddLine(projInvoiceEmpl);
        }

        while select InvoiceDate, ProjInvoiceId, CurrencyId, Amount, Txt, TransId from projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceOnAcc.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            AddLine(projInvoiceOnAcc);
        }

        while select InvoiceDate, ProjInvoiceId, CurrencyId, LineAmount, Qty, Txt, TransId, CategoryId from projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                && projInvoiceRevenue.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            AddLine(projInvoiceRevenue);
        }

        return projTransRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mstAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the amount in project invoice currency to accounting currency
    /// </summary>
    /// <param name="_amountCur">
    ///     The amount in project invoice currency
    /// </param>
    /// <returns>
    ///     Thr amount in accounting currency
    /// </returns>

    protected AmountMST mstAmount(AmountCur _amountCur)
    {
        return CurrencyExchangeHelper::amountCur2MST(_amountCur, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceLineReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the source records to the <c>FiscalDocumentLineParmData_BR</c>
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The <c>FiscalDocumentLineParmData_BR</c> object
    /// </param>
    /// <param name="_projInvoice">
    ///     The project invoice transaction table map
    /// </param>

    protected void setSourceLineReference(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, ProjInvoiceTransMap_MX _projInvoice)
    {
        _fiscalDocumentLineParmData.addSourceReference(_projInvoice.TableId, _projInvoice.RecId, _projInvoice.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxationOriginAndFciNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches and set for FCI information if required
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Line that may be updated
    /// </param>
    protected void setTaxationOriginAndFciNumber(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        ImportedContentPerItem_BR importedContent;

        importedContent = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalEstablishment.FiscalEstablishmentId,
                                                                    fiscalDocumentType.FiscalDocumentModel,
                                                                    FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                    FiscalDocDirection_BR::Outgoing,
                                                                    projInvoiceJour.InvoiceDate,
                                                                    _fiscalDocumentLineParmData.parmCFOP(),
                                                                    _fiscalDocumentLineParmData.parmItemId());

        if (importedContent)
        {
            _fiscalDocumentLineParmData.parmOrigin            (importedContent.TaxationOrigin);
            _fiscalDocumentLineParmData.parmFciNumber         (importedContent.FCINumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return FiscalDocumentPurpose_BR::Regular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addTaxWithholdTexts());
        super(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given project invoice.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// The ProjInvoiceJour record.
    /// </param>
    /// <returns>
    /// The ledger dimension record id.
    /// </returns>
    public static RecId getFinancialDimension(ProjInvoiceJour _projInvoiceJour)
    {
        str cacheScopeName = strFmt('%1Cache',classId2Name(classNum(FiscalDocParmDataCreatorProjInv_BR)));
        SysGlobalObjectCache cache = new SysGlobalObjectCache();

        container cachedDimensionCon = cache.find(cacheScopeName, [_projInvoiceJour.RecId]);

        if (cachedDimensionCon == conNull())
        {
            GeneralJournalAccountEntry accountEntry;
            GeneralJournalEntry journalEntry;

            select firstOnly LedgerDimension from accountEntry
                where (accountEntry.PostingType == LedgerPostingType::ProjTurnover
                    || accountEntry.PostingType == LedgerPostingType::ProjOnAccount)
                exists join journalEntry
                    where journalEntry.RecId == accountEntry.GeneralJournalEntry
                        && journalEntry.AccountingDate == _projInvoiceJour.InvoiceDate
                        && journalEntry.SubledgerVoucher == _projInvoiceJour.LedgerVoucher;

            cachedDimensionCon = [accountEntry.LedgerDimension];
            cache.insert(cacheScopeName, [_projInvoiceJour.RecId], cachedDimensionCon );
        }

        return conPeek(cachedDimensionCon, 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>