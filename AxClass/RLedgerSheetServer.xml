<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerSheetServer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RLedgerSheetServer
{
    QueryRun                 queryRun;

    LedgerBalanceBase        ledgerBalance;

    CurrencyType_RU          currencyType;
    boolean                  deleteZero, showSumAccount;
    DimensionDefault         dimensionCriteria;
    TransDate                fromDate;
    TransDate                toDate;
    OperationsTax            operationsTax;
    CurrencyCode             currencyCode;
    container                selectedFieldsOrder;
    const int value2 = 2;
    const int value3 = 3;
    const int value4 = 4;
    const int value5 = 5;
    const int value6 = 6;
    const int value7 = 7;
    const int value8 = 8;
    const int value9 = 9;
    const int value321 = 321;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumAccount</Name>
				<Source><![CDATA[
        protected void calcSumAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroLine</Name>
				<Source><![CDATA[
        protected void deleteZeroLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastOpeningBalanceDate</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsolete, it will be changed to internal use only in the future.', false, 16\8\2023)]
    public PeriodStart findLastOpeningBalanceDate(PeriodStart _periodStart = fromDate)
    {
        GeneralJournalEntry generalJournalEntry;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        select firstonly AccountingDate from generalJournalEntry
            order by generalJournalEntry.AccountingDate desc
            where generalJournalEntry.AccountingDate <= _periodStart
                && generalJournalEntry.Ledger == Ledger::current()
            join RecId from fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening;

        return generalJournalEntry.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGlobalMap</Name>
				<Source><![CDATA[
        public Map getGlobalMap()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmount</Name>
				<Source><![CDATA[
        protected Amount getTransAmount(Common _generalJournalAccountEntry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry = _generalJournalAccountEntry;

        Amount      amount;
        switch (currencyType)
        {
            case CurrencyType_RU::Standard:
                amount = generalJournalAccountEntry.AccountingCurrencyAmount;
                break;
            case CurrencyType_RU::Secondary:
                amount = generalJournalAccountEntry.ReportingCurrencyAmount;
                break;
            case CurrencyType_RU::Currency:
                amount = generalJournalAccountEntry.TransactionCurrencyAmount;
                break;
        }

        return generalJournalAccountEntry.IsCredit ? - amount : amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
        protected void initAccounts()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(QueryRun             _queryRun,
                               container            _cont)
    {

        queryRun            = _queryRun;
        currencyType        = conpeek(_cont, 1);
        deleteZero          = conpeek(_cont, value2);
        showSumAccount      = conpeek(_cont, value3);
        dimensionCriteria   = conpeek(_cont, value4);
        fromDate            = conpeek(_cont, value5);
        toDate              = conpeek(_cont, value6);
        operationsTax       = conpeek(_cont, value7);
        currencyCode        = conpeek(_cont, value8);
        selectedFieldsOrder = conpeek(_cont, value9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        protected void initValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopAction</Name>
				<Source><![CDATA[
    protected void loopAction(QueryRun  _queryRun)
    {
        GeneralJournalAccountEntry parentEntry, childEntry;

        parentEntry = _queryRun.get(tablenum(GeneralJournalAccountEntry), 1);
        childEntry  = _queryRun.get(tablenum(GeneralJournalAccountEntry), value2);

        this.updateAccounts(parentEntry, childEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run(Query _query)
    {
        QueryRun     runQuery;

        this.initAccounts();
        this.setDimensionRange(_query);

        runQuery = new QueryRun(_query);

        while (runQuery.next())
        {
            this.loopAction(runQuery);
        }

        if (deleteZero)
        {
            this.deleteZeroLine();
        }

        if (showSumAccount)
        {
             this.calcSumAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets dimension range in the query.
    /// </summary>
    /// <param name="_query">
    /// The query object to update.
    /// </param>
    protected void setDimensionRange(Query _query)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        int                  idx;
        str                  range;
        Name                 dimensionAttributeName;
        QueryBuildDataSource qbds;

        if (dimensionCriteria && _query)
        {
            qbds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
            if (qbds)
            {
                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(dimensionCriteria);

                for (idx = 1; idx <= dimAttrValueSetStorage.elements(); idx++)
                {
                    dimensionAttributeName = DimensionAttribute::find(dimAttrValueSetStorage.getAttributeByIndex(idx)).Name;
                    range                  = dimAttrValueSetStorage.getDisplayValueByIndex(idx);

                    SysQuery::addDimensionAttributeRange(_query,
                        qbds.name(),
                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                        DimensionComponent::DimensionAttribute,
                        range,
                        dimensionAttributeName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccounts</Name>
				<Source><![CDATA[
        protected void updateAccounts(GeneralJournalAccountEntry _parentEntry,
                                  GeneralJournalAccountEntry _childEntry)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RLedgerSheetServer construct(RLedgerSheetType _rLedgerSheetType)
    {
        RLedgerSheetServer rLedgerSheetServer;
        switch (_rLedgerSheetType)
        {
            case RLedgerSheetType::TurnoverBond  :
                rLedgerSheetServer = new RLedgerSheetServer_TurnOverBond();
                break;

            case RLedgerSheetType::ActAdjustCust  :
                rLedgerSheetServer = new RLedgerSheetServer_ActAdjustCust();
                break;

            case RLedgerSheetType::ActAdjustVend  :
                rLedgerSheetServer = new RLedgerSheetServer_ActAdjustVend();
                break;

            default                                :
                throw error("@GLS103799");
        }

        rLedgerSheetServer.initValue();

        return rLedgerSheetServer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>