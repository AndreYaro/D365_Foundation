<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSApplicationInsightsEventTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventTelemetry = Microsoft.ApplicationInsights.DataContracts.EventTelemetry;
using EnvironmentFactory = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory;

internal final class WHSApplicationInsightsEventTelemetry
{
    private static readonly str aadTenantId = EnvironmentFactory::GetApplicationEnvironment().Aad.TenantDomainGUID;
    private static readonly str lcsEnvironmentId = EnvironmentFactory::GetApplicationEnvironment().LCS.LCSEnvironmentId;
    private static readonly str activityId = System.Diagnostics.Tracing.EventSource::CurrentThreadActivityId.ToString();

    private static readonly boolean allowCustomerContent    = WHSApplicationInsightsAllowCustomerContentFlight::instance().isEnabled();
    private static readonly boolean allowEUPI               = WHSApplicationInsightsAllowEUPIFlight::instance().isEnabled();

    private EventTelemetry eventTelemetry;
    private str name;
    private Map properties;
    private WHSSysApplicationInsightsEventTelemetryDuplicate sysApplicationInsightsEventTelemetry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (WHSApplicationInsightsTelemetryLogger::mustUseGlobalTelemetry)
        {
            if (!WHSApplicationInsightsTelemetryLogger::mustUseSysApplicationInsightsTelemetry)
            {
                properties = new Map(Types::String, Types::String);
            }
        }
        else
        {
            eventTelemetry = new EventTelemetry();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEventIdName</Name>
				<Source><![CDATA[
    internal final static WHSApplicationInsightsEventTelemetry newFromEventIdName(str _eventId, str _name)
    {
        var eventTelemetry = new WHSApplicationInsightsEventTelemetry();

        eventTelemetry.initName(_name);

        if (WHSApplicationInsightsTelemetryLogger::mustUseSysApplicationInsightsTelemetry)
        {
            eventTelemetry.sysApplicationInsightsEventTelemetry = WHSSysApplicationInsightsEventTelemetryDuplicate::newFromEventIdName(_eventId, _name);
        }
        else
        {
            eventTelemetry.addPropertyAadTenantId();
            eventTelemetry.addPropertyActivityId();
            eventTelemetry.addPropertyEnvironmentId();
            eventTelemetry.addPropertyEventId(_eventId);
        }

        return eventTelemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventTelemetry</Name>
				<Source><![CDATA[
    internal final EventTelemetry eventTelemetry()
    {
        return eventTelemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    internal final str name()
    {
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>properties</Name>
				<Source><![CDATA[
    internal final Map properties()
    {
        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysApplicationInsightsEventTelemetry</Name>
				<Source><![CDATA[
    internal final WHSSysApplicationInsightsEventTelemetryDuplicate parmSysApplicationInsightsEventTelemetry()
    {
        return sysApplicationInsightsEventTelemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    private void initName(str 512 _name)
    {
        if (WHSApplicationInsightsTelemetryLogger::mustUseGlobalTelemetry)
        {
            name = _name;
        }
        else
        {
            eventTelemetry.Name = _name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    internal final WHSApplicationInsightsEventTelemetry addProperty(SysApplicationInsightsProperty _property)
    {
        this.addPropertyInternal(_property.key(), _property.parmValue(), _property.dataClassification());

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyInternal</Name>
				<Source><![CDATA[
    private void addPropertyInternal(str 150 _key, str 8192 _value, SysApplicationInsightsComplianceDataType _dataClassification)
    {
        if (this.isDataClassificationSupported(_dataClassification))
        {
            if (!_value)
            {
                _value = '<empty>'; // This is needed, because the property would otherwise not be present in the telemetry results.
            }

            if (sysApplicationInsightsEventTelemetry)
            {                
                sysApplicationInsightsEventTelemetry.addProperty(WHSApplicationInsightsPropertyFacade::newFromArgs(_key, _value, _dataClassification));
            }
            else if (properties)
            {
                properties.Add(_key, _value);
            }
            else
            {
                var eventTelemetryProperties = eventTelemetry.Properties;

                if (eventTelemetryProperties.ContainsKey(_key))
                {
                    eventTelemetryProperties.Remove(_key); // This is needed as the Add method would throw an exception if the key already exists.
                }

                eventTelemetryProperties.Add(_key, _value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataClassificationSupported</Name>
				<Source><![CDATA[
    private boolean isDataClassificationSupported(SysApplicationInsightsComplianceDataType _dataClassification)
    {
        return _dataClassification == SysApplicationInsightsComplianceDataType::SystemMetadata
            || _dataClassification == SysApplicationInsightsComplianceDataType::OII
            || ((_dataClassification == SysApplicationInsightsComplianceDataType::EUPI) && allowEUPI)
            || ((_dataClassification == SysApplicationInsightsComplianceDataType::CustomerContent) && allowCustomerContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyActivityId</Name>
				<Source><![CDATA[
    private void addPropertyActivityId()
    {
        this.addProperty(WHSApplicationInsightsActivityIdEventProperty::newFromValue(activityId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyEnvironmentId</Name>
				<Source><![CDATA[
    private void addPropertyEnvironmentId()
    {
        this.addProperty(WHSApplicationInsightsEnvironmentIdEventProperty::newFromValue(lcsEnvironmentId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyEventId</Name>
				<Source><![CDATA[
    private void addPropertyEventId(str _eventId)
    {
        this.addProperty(WHSApplicationInsightsEventIdEventProperty::newFromValue(_eventId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyAadTenantId</Name>
				<Source><![CDATA[
    private void addPropertyAadTenantId()
    {
        this.addProperty(WHSApplicationInsightsAadTenantIdEventProperty::newFromValue(aadTenantId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>