<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSEditQueryBrowser</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSEditQueryBrowser
{
    private const int FormWidth = 500;
    private const int FormHeight = 300;
    private const str AllFieldsGrid = 'AllFieldsGrid';

    private Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var editQueryForm = args.caller();

        if (!editQueryForm)
        {
            // The form cannot be called directly.
            throw error("@SYS96590");
        }


        WHSEditQueryBrowser editQueryBrowser = new WHSEditQueryBrowser();
        editQueryBrowser.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDesign</Name>
				<Source><![CDATA[
    private FormBuildDesign initFormDesign(Form _form)
    {
        FormBuildDesign formBuildDesign = _form.design();
        formBuildDesign.caption("@WAX:PreviewEditQueryDataFormTitle");
        formBuildDesign.widthMode(-1);
        formBuildDesign.widthValue(FormWidth);
        formBuildDesign.heightMode(-1);
        formBuildDesign.heightValue(FormHeight);

        return formBuildDesign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGridControl</Name>
				<Source><![CDATA[
    private void buildGridControl(FormBuildGridControl _gridControl, Form _form)
    {
        FormBuildGridControl allfieldsGridControl = _gridControl;
        boolean allowCrossCompany = query.allowCrossCompany();

        int idx = allfieldsGridControl.id();
        
        for (int i = 1; i <= query.dataSourceCount(); i++)
        {
            QueryBuildDataSource qbds = query.dataSourceNo(i);

            if (qbds && qbds.enabled())
            {
                FormBuildDataSource formBuildDataSource = _form.dataSource(i);

                if (!formBuildDataSource)
                {
                    formBuildDataSource = _form.addDataSource(qbds.name());
                }

                formBuildDataSource.name(qbds.name());
                formBuildDataSource.table(qbds.table());
                formBuildDataSource.autoQuery(false);
                formBuildDataSource.linkType(0);
                formBuildDataSource.allowCheck(false);
                formBuildDataSource.allowCreate(false);
                formBuildDataSource.allowDelete(false);
                formBuildDataSource.allowEdit(false);
                formBuildDataSource.onlyFetchActive(true);
                formBuildDataSource.crossCompanyAutoQuery(allowCrossCompany);

                if (qbds.joined())
                {
                    formBuildDataSource.linkType(joinMode2LinkType(qbds.joinMode()));
                    formBuildDataSource.joinSource(qbds.parentDataSource().name());
                }

                if (i == 1
                    || ((qbds.joinMode() == JoinMode::InnerJoin || qbds.joinMode() == JoinMode::OuterJoin)))
                {
                    QueryBuildFieldList queryBuildFieldList = qbds.fields();
                    queryBuildFieldList.clearFieldList();

                    this.fetchFieldList(qbds.table(), queryBuildFieldList);

                    for (int j = 1; j <= queryBuildFieldList.fieldCount(); j++)
                    {
                        fieldId fieldId = queryBuildFieldList.field(j);

                        if (fieldId)
                        {
                            if (i == 1 && j == 1)
                            {
                                allfieldsGridControl.dataSource(qbds.name());
                            }

                            allfieldsGridControl.addDataField(formBuildDataSource.id(), fieldId);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openForm</Name>
				<Source><![CDATA[
    private void openForm(FormRun _editQueryBrowserFormRun, Form _form)
    {
        Args args = new Args();
        args.object(_form);
        args.parmObject(this);
        _editQueryBrowserFormRun = classfactory.formRunClass(args);

        _editQueryBrowserFormRun.enableCountryRegion(false);
        _editQueryBrowserFormRun.init();
        _editQueryBrowserFormRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Args browserArgs = new Args();
        browserArgs.name(formstr(WHSEditQueryBrowser));
        FormRun editQueryBrowserFormRun = classfactory.formRunClass(browserArgs);
        Form editQueryBrowserForm = editQueryBrowserFormRun.form();

        FormBuildDesign formBuildDesign = this.initFormDesign(editQueryBrowserForm);

        this.buildGridControl(formBuildDesign.control(AllFieldsGrid), editQueryBrowserForm);

        this.openForm(editQueryBrowserFormRun, editQueryBrowserForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFieldGroup</Name>
				<Source><![CDATA[
    private boolean hasFieldGroup(TableId _tableId, str _groupName)
    {
        DictFieldGroup dictFieldGroup = new DictFieldGroup(_tableId, _groupName);
        if (dictFieldGroup)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchFieldList</Name>
				<Source><![CDATA[
    private void fetchFieldList(TableId _tableId, QueryBuildFieldList _queryBuildFieldList)
    {
        if (this.hasFieldGroup(_tableId, identifierStr(PreviewQuery)))
        {
            this.fetchFieldsFromFieldGroup(_tableId, _queryBuildFieldList, identifierStr(PreviewQuery));
        }
        else
        {
            this.fetchFieldsFromFieldGroup(_tableId, _queryBuildFieldList, identifierStr(AutoReport));
        }

        if (!_queryBuildFieldList.fieldCount())
        {
            this.fetchTitleFields(_tableId, _queryBuildFieldList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchFieldsFromFieldGroup</Name>
				<Source><![CDATA[
    private void fetchFieldsFromFieldGroup(TableId _tableId, QueryBuildFieldList _queryBuildFieldList, str _groupName)
    {
        DictFieldGroup dictFieldGroup = new DictFieldGroup(_tableId, _groupName);

        if (dictFieldGroup)
        {
            for (Counter idx = 1; idx <= dictFieldGroup.numberOfFields(); idx++)
            {
                _queryBuildFieldList.addField(dictFieldGroup.field(idx));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTitleFields</Name>
				<Source><![CDATA[
    private void fetchTitleFields(TableId _tableId, QueryBuildFieldList _queryBuildFieldList)
    {
        DictTable dTable = new DictTable(_tableId);

        if (dTable.titleField1())
        {
            _queryBuildFieldList.addField(dTable.titleField1());
        }

        if (dTable.titleField2())
        {
            _queryBuildFieldList.addField(dTable.titleField2());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>