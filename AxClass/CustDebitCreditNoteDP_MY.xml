<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDebitCreditNoteDP_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustDebitCreditNoteDP_MY</c> class is the report data provider class that supports the <c>CustDebitCreditNote_MY</c>
/// report.
/// </summary>
/// <remarks>
/// This class provides the methods that are used by the <c>CustDebitCreditNote_MY</c> report that lists items and
/// </remarks>
[SRSReportParameterAttribute(classStr(CustDebitCreditNoteContract_MY))]
public class CustDebitCreditNoteDP_MY extends SRSReportDataProviderBase
{
    CustDebitCreditNoteTmp_MY   custDebitCreditNoteTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustDebitCreditNoteTmp_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>CustDebitCreditNoteTmp_MY</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustDebitCreditNoteTmp_MY</c> table.
    /// </returns>
    [SRSReportDataSet(tableStr(CustDebitCreditNoteTmp_MY))]
    public CustDebitCreditNoteTmp_MY getCustDebitCreditNoteTmp_MY()
    {
        return custDebitCreditNoteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        CustDebitCreditNoteContract_MY  contract;
        CustInvoiceTrans                custInvoiceTrans;
        CustInvoiceJour                 custInvoiceJour;
        CustInvoiceJour_W               custInvoiceJour_W;
        CustInvoiceTrans_W              custInvoiceTrans_W;
        ProjInvoiceJour                 projInvoiceJour;
        ProjInvoiceEmpl                 projInvoiceEmpl;
        ProjInvoiceCost                 projInvoiceCost;
        ProjInvoiceItem                 projInvoiceItem;
        ProjInvoiceRevenue              projInvoiceRevenue;
        ProjInvoiceOnAcc                projInvoiceOnAcc;
        ProjProposalJour                projProposalJour;

        TaxTrans                        taxTrans;
        FromDate                        fromDate;
        ToDate                          toDate;
        CustAccount                     custAcc;
        SysDictEnum                     sysDictEnumNoteType_MY = new SysDictEnum(enumNum(NoteType_MY));
        RecordInsertList                custDebitCreditNoteTmpInsertList = new RecordInsertList(
                                                                                tableNum(CustDebitCreditNoteTmp_MY),
                                                                                false,
                                                                                false,
                                                                                false,
                                                                                false,
                                                                                true,
                                                                                custDebitCreditNoteTmp);

        contract    = this.parmDataContract() as CustDebitCreditNoteContract_MY;

        fromDate    = contract.parmFromDate();
        toDate      = contract.parmToDate();
        custAcc     = contract.parmCustomerAccount();

        // For sales order and customer invoice
        while select CurrencyCode, InvoiceDate, LineAmount, LineAmountMST, InvoiceId, SalesId from custInvoiceTrans
            where custInvoiceTrans.InvoiceDate  >= fromDate
                && custInvoiceTrans.InvoiceDate <= toDate
            join InvoiceDate, InvoiceId, ReasonTableRef, OrderAccount from custInvoiceJour
                where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId
                    && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                    && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                    && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                    && (!custAcc || custInvoiceJour.OrderAccount == custAcc)
                join NoteType_MY from custInvoiceJour_W
                    where custInvoiceJour.RecId == custInvoiceJour_W.CustInvoiceJour
                        && custInvoiceJour_W.NoteType_MY != 0
            join RefInvoiceDate_MY, RefInvoiceID_MY from custInvoiceTrans_W
                where custInvoiceTrans.recId == custInvoiceTrans_W.CustInvoiceTrans
        {
            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   custInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       custInvoiceJour_W.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(custInvoiceJour_W.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    custInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      custInvoiceJour.InvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      custInvoiceJour.debitCreditNoteReasonCode_MY();
            custDebitCreditNoteTmp.LineAmountMST =                  custInvoiceTrans.LineAmountMST;
            custDebitCreditNoteTmp.TaxAmountMST =                   custInvoiceTrans.taxAmountMST_MY();
            custDebitCreditNoteTmp.CurrencyCode =                   custInvoiceTrans.CurrencyCode;
            custDebitCreditNoteTmp.LineAmount =                     custInvoiceTrans.LineAmount;
            custDebitCreditNoteTmp.TaxAmount =                      custInvoiceTrans.displayTaxAmount();
            custDebitCreditNoteTmp.RefInvoiceID =                   custInvoiceTrans_W.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 custInvoiceTrans_W.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        // For project hour invoice
        while select CurrencyId, InvoiceDate, LineAmount, RefInvoiceID_MY, RefInvoiceDate_MY from projInvoiceEmpl
            where projInvoiceEmpl.InvoiceDate  >= fromDate
                && projInvoiceEmpl.InvoiceDate <= toDate
            join InvoiceDate, ProjInvoiceId, OrderAccount, NoteType_MY, ReasonTableRef from projInvoiceJour
                where projInvoiceEmpl.ProjInvoiceId     == projInvoiceJour.ProjInvoiceId
                    && projInvoiceEmpl.InvoiceDate      == projInvoiceJour.InvoiceDate
                    && projInvoiceJour.NoteType_MY      != 0
                    && (!custAcc || projInvoiceJour.OrderAccount == custAcc)
        {
            select sum(SourceRegulateAmountCur), sum(TaxAmount) from taxTrans
                where taxTrans.SourceTableId    == projInvoiceEmpl.TableId
                    && taxTrans.SourceRecId     == projInvoiceEmpl.RecId;

            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   projInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       projInvoiceJour.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(projInvoiceJour.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    projInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      projInvoiceJour.ProjInvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
            custDebitCreditNoteTmp.LineAmount =                     projInvoiceEmpl.lineAmount;
            custDebitCreditNoteTmp.TaxAmount =                      -taxTrans.SourceRegulateAmountCur;
            custDebitCreditNoteTmp.CurrencyCode =                   projInvoiceEmpl.CurrencyId;
            custDebitCreditNoteTmp.LineAmountMST =                  CurrencyExchangeHelper::amountCur2MST(projInvoiceEmpl.lineAmount, projInvoiceEmpl.CurrencyId);
            custDebitCreditNoteTmp.TaxAmountMST =                   -taxTrans.TaxAmount;
            custDebitCreditNoteTmp.RefInvoiceID =                   projInvoiceEmpl.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 projInvoiceEmpl.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        // For project item invoice
        while select CurrencyId, InvoiceDate, LineAmount, RefInvoiceID_MY, RefInvoiceDate_MY from projInvoiceItem
            where projInvoiceItem.InvoiceDate  >= fromDate
                && projInvoiceItem.InvoiceDate <= toDate
            join InvoiceDate, ProjInvoiceId, OrderAccount, NoteType_MY, ReasonTableRef from projInvoiceJour
                where projInvoiceItem.ProjInvoiceId     == projInvoiceJour.ProjInvoiceId
                    && projInvoiceItem.InvoiceDate      == projInvoiceJour.InvoiceDate
                    && projInvoiceJour.NoteType_MY      != 0
                    && (!custAcc || projInvoiceJour.OrderAccount == custAcc)
        {
            select sum(SourceRegulateAmountCur), sum(TaxAmount) from taxTrans
                where taxTrans.SourceTableId    == projInvoiceItem.TableId
                    && taxTrans.SourceRecId     == projInvoiceItem.RecId;

            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   projInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       projInvoiceJour.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(projInvoiceJour.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    projInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      projInvoiceJour.ProjInvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
            custDebitCreditNoteTmp.LineAmount =                     projInvoiceItem.lineAmount;
            custDebitCreditNoteTmp.TaxAmount =                      -taxTrans.SourceRegulateAmountCur;
            custDebitCreditNoteTmp.CurrencyCode =                   projInvoiceItem.CurrencyId;
            custDebitCreditNoteTmp.LineAmountMST =                  CurrencyExchangeHelper::amountCur2MST(projInvoiceItem.lineAmount, projInvoiceItem.CurrencyId);
            custDebitCreditNoteTmp.TaxAmountMST =                   -taxTrans.TaxAmount;
            custDebitCreditNoteTmp.RefInvoiceID =                   projInvoiceItem.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 projInvoiceItem.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        // For project expense invoice
        while select CurrencyId, InvoiceDate, LineAmount, RefInvoiceID_MY, RefInvoiceDate_MY from projInvoiceCost
            where projInvoiceCost.InvoiceDate  >= fromDate
                && projInvoiceCost.InvoiceDate <= toDate
            join InvoiceDate, ProjInvoiceId, OrderAccount, NoteType_MY, ReasonTableRef from projInvoiceJour
                where projInvoiceCost.ProjInvoiceId     == projInvoiceJour.ProjInvoiceId
                    && projInvoiceCost.InvoiceDate      == projInvoiceJour.InvoiceDate
                    && projInvoiceJour.NoteType_MY      != 0
                    && (!custAcc || projInvoiceJour.OrderAccount == custAcc)
        {
            select sum(SourceRegulateAmountCur), sum(TaxAmount) from taxTrans
                where taxTrans.SourceTableId    == projInvoiceCost.TableId
                    && taxTrans.SourceRecId     == projInvoiceCost.RecId;

            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   projInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       projInvoiceJour.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(projInvoiceJour.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    projInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      projInvoiceJour.ProjInvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
            custDebitCreditNoteTmp.LineAmount =                     projInvoiceCost.lineAmount;
            custDebitCreditNoteTmp.TaxAmount =                      -taxTrans.SourceRegulateAmountCur;
            custDebitCreditNoteTmp.CurrencyCode =                   projInvoiceCost.CurrencyId;
            custDebitCreditNoteTmp.LineAmountMST =                  CurrencyExchangeHelper::amountCur2MST(projInvoiceCost.lineAmount, projInvoiceCost.CurrencyId);
            custDebitCreditNoteTmp.TaxAmountMST =                   -taxTrans.TaxAmount;
            custDebitCreditNoteTmp.RefInvoiceID =                   projInvoiceCost.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 projInvoiceCost.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        // For project fee invoice
        while select CurrencyId, InvoiceDate, LineAmount, RefInvoiceID_MY, RefInvoiceDate_MY from projInvoiceRevenue
            where projInvoiceRevenue.InvoiceDate  >= fromDate
                && projInvoiceRevenue.InvoiceDate <= toDate
            join InvoiceDate, ProjInvoiceId, OrderAccount, NoteType_MY, ReasonTableRef from projInvoiceJour
                where projInvoiceRevenue.ProjInvoiceId  == projInvoiceJour.ProjInvoiceId
                    && projInvoiceRevenue.InvoiceDate   == projInvoiceJour.InvoiceDate
                    && projInvoiceJour.NoteType_MY      != 0
                    && (!custAcc || projInvoiceJour.OrderAccount == custAcc)
        {
            select sum(SourceRegulateAmountCur), sum(TaxAmount) from taxTrans
                where taxTrans.SourceTableId    == projInvoiceRevenue.TableId
                    && taxTrans.SourceRecId     == projInvoiceRevenue.RecId;

            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   projInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       projInvoiceJour.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(projInvoiceJour.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    projInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      projInvoiceJour.ProjInvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
            custDebitCreditNoteTmp.LineAmount =                     projInvoiceRevenue.lineAmount;
            custDebitCreditNoteTmp.TaxAmount =                      -taxTrans.SourceRegulateAmountCur;
            custDebitCreditNoteTmp.CurrencyCode =                   projInvoiceRevenue.CurrencyId;
            custDebitCreditNoteTmp.LineAmountMST =                  CurrencyExchangeHelper::amountCur2MST(projInvoiceRevenue.lineAmount, projInvoiceRevenue.CurrencyId);
            custDebitCreditNoteTmp.TaxAmountMST =                   -taxTrans.TaxAmount;
            custDebitCreditNoteTmp.RefInvoiceID =                   projInvoiceRevenue.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 projInvoiceRevenue.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        // For project on account invoice
        while select CurrencyId, InvoiceDate, Amount, AmountMST, RefInvoiceID_MY, RefInvoiceDate_MY from projInvoiceOnAcc
            where projInvoiceOnAcc.InvoiceDate  >= fromDate
                && projInvoiceOnAcc.InvoiceDate <= toDate
            join InvoiceDate, ProjInvoiceId, OrderAccount, NoteType_MY, ReasonTableRef from projInvoiceJour
                where projInvoiceOnAcc.ProjInvoiceId    == projInvoiceJour.ProjInvoiceId
                    && projInvoiceOnAcc.InvoiceDate     == projInvoiceJour.InvoiceDate
                    && projInvoiceJour.NoteType_MY      != 0
                    && (!custAcc || projInvoiceJour.OrderAccount == custAcc)
                join InvoiceType from projProposalJour
                    where projProposalJour.InvoiceType != ProjInvoiceType::OnAccount
                    && projProposalJour.ProposalId == projInvoiceJour.ProposalId
        {
            select sum(SourceRegulateAmountCur), sum(TaxAmount) from taxTrans
                where taxTrans.SourceTableId    == projInvoiceOnAcc.TableId
                    && taxTrans.SourceRecId     == projInvoiceOnAcc.RecId;

            custDebitCreditNoteTmp.clear();
            custDebitCreditNoteTmp.OrderAccount =                   projInvoiceJour.OrderAccount;
            custDebitCreditNoteTmp.NoteType =                       projInvoiceJour.NoteType_MY;
            custDebitCreditNoteTmp.NoteTypeLabel =                  sysDictEnumNoteType_MY.value2Label(projInvoiceJour.NoteType_MY);
            custDebitCreditNoteTmp.InvoiceDate =                    projInvoiceJour.InvoiceDate;
            custDebitCreditNoteTmp.InvoiceId =                      projInvoiceJour.ProjInvoiceId;
            custDebitCreditNoteTmp.DebitCreditNoteReasonCode =      ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;
            custDebitCreditNoteTmp.LineAmount =                     projInvoiceOnAcc.Amount;
            custDebitCreditNoteTmp.TaxAmount =                      -taxTrans.SourceRegulateAmountCur;
            custDebitCreditNoteTmp.CurrencyCode =                   projInvoiceOnAcc.CurrencyId;
            custDebitCreditNoteTmp.LineAmountMST =                  projInvoiceOnAcc.AmountMST;
            custDebitCreditNoteTmp.TaxAmountMST =                   -taxTrans.TaxAmount;
            custDebitCreditNoteTmp.RefInvoiceID =                   projInvoiceOnAcc.RefInvoiceID_MY;
            custDebitCreditNoteTmp.RefInvoiceDate =                 projInvoiceOnAcc.RefInvoiceDate_MY;
            custDebitCreditNoteTmpInsertList.add(custDebitCreditNoteTmp);
        }

        custDebitCreditNoteTmpInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>