<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalWFApprovalDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalWFApprovalDocument</c> class provides a workflow document class for financial
///    journals.
/// </summary>
/// <remarks>
///    This query wrapper class provides access to the query that defines the fields that are available
///    for condition values on workflow configurations. It also provides several methods that perform
///    aggregation, which are also available as condition values.
/// </remarks>
public class LedgerJournalWFApprovalDocument extends WorkflowDocument
{
    // These local variables are used to manage the state for calculating
    // and caching the max/min voucher amounts and journal totals.  They are
    // used by the following methods:
    //      calculateAmounts, parmMaxVoucherCreditAmount, parmMaxVoucherDebitAmount,
    //      parmMinVoucherCreditAmount, parmMinVoucherDebitAmount, and updateMinMaxAndTotalValues.
    boolean                     isAmountsCalculated;
    RecId                       recIdForMaxVoucherAmounts;
    utcdatetime                 cacheStampForMaxVoucherAmounts;
    AmountCreditMaxVoucher      amountCreditMaxVoucher;
    AmountDebitMaxVoucher       amountDebitMaxVoucher;
    AmountCreditMinVoucher      amountCreditMinVoucher;
    AmountDebitMinVoucher       amountDebitMinVoucher;
    TotalJournalCreditAmount    totalJournalCreditAmount;
    TotalJournalDebitAmount     totalJournalDebitAmount;

    // These local variables are used to manage the state for calculating
    // and caching the max/min amounts for Vouchers.
    //  They are used by the following methods:
    //      calculateAmounts, updateDebitCreditForVoucher, and updateMinMaxAndTotalValues.
    Map                         totalCreditAmountByVoucher;
    MapEnumerator               creditAmountMapEnumerator;
    Map                         totalDebitAmountByVoucher;
    MapEnumerator               debitAmountMapEnumerator;
    boolean                     isMaxMinDebitAmountUndefined;
    boolean                     isMaxMinCreditAmountUndefined;
    AmountMST                   maxCreditAmount;
    AmountMST                   maxDebitAmount;
    AmountMST                   minCreditAmount;
    AmountMST                   minDebitAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areAllRequestersTheSame</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the requester is the same for the purchase order associated with each ledger journal
    ///    transaction record for the corresponding ledger journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID corresponding to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID corresponding to the ledger journal.
    /// </param>
    /// <param name="_recId">
    ///    The record ID corresponding to the ledger journal.
    /// </param>
    /// <returns>
    ///    true if the requester is the same for the purchase order associated with each ledger journal
    ///    transaction; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    public LedgerJournalAreAllRequestersSame areAllRequestersTheSame(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        QueryRun                queryRun;
        QueryBuildRange         queryBuildRange;
        Query                   query;
        PurchTable              purchTable;
        NoYes                   allSame = NoYes::Yes;
        PurchRequester          firstRequester;
        boolean                 firstPO = true;

        if (_tableId != tablenum(LedgerJournalTable))
        {
            // Document table id reference: %1 is not valid.
            throw error(strfmt("@SYS112754", _tableId));
        }

        if (_recId == 0)
        {
            // Document record id is zero.
            throw error("@SYS112755");
        }

        // make sure to change company before reading the record
        changecompany(_companyId)
        {
            query = this.getQuery();
            if (query)
            {
                queryBuildRange = SysQuery::findOrCreateRange(query.dataSourceNo(1), fieldnum(LedgerJournalTable, RecId));
                queryBuildRange.value(int642str(_recId));
                queryBuildRange = SysQuery::findOrCreateRange(query.dataSourceNo(1), fieldnum(LedgerJournalTable, TableId));
                queryBuildRange.value(int642str(_tableId));
                queryBuildRange = SysQuery::findOrCreateRange(query.dataSourceNo(1), fieldnum(LedgerJournalTable, DataAreaId));
                queryBuildRange.value(_companyId);

                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    purchTable = queryRun.get(tablenum(PurchTable));
                    if (purchTable)
                    {
                        // if this is not the first PO we're processing, verify requisitioner matches the first
                        if (!firstPO)
                        {
                            if (purchTable.Requester != firstRequester)
                            {
                                allSame = NoYes::No;
                            }
                        }
                        // first PO we're processing, cache the requisitioner
                        else
                        {
                            firstRequester = purchTable.Requester;
                            firstPO = false;
                        }
                    }
                }
            }
            else
            {
                throw error("@SYS96001");
            }
        }

        return allSame;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines total journal amounts and maximum/minimum voucher amounts.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <remarks>
    ///    A voucher by voucher query is used to calculate the aggregate voucher and journal total amounts.
    ///    This will match this totaling pattern used by the journal forms.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>LedgerJournalTable</c>. The record ID cannot be zero.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>LedgerJournalTable</c>. The record ID cannot be zero.
    /// </exception>
    private void calculateAmounts(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        // 5 minutes is the time span that the cached values are considered valid.
        #DEFINE.MaxElapsedSeconds(300)

        int64 secondsElapsed;

        if (_tableId != tablenum(LedgerJournalTable))
        {
            // Document table id reference: %1 is not valid.
            throw error(strfmt("@SYS112754", _tableId));
        }

        if (_recId == 0)
        {
            // Document record id is zero.
            throw error("@SYS112755");
        }

        if (isAmountsCalculated && (_recId == recIdForMaxVoucherAmounts))
        {
            secondsElapsed = DateTimeUtil::getDifference(DateTimeUtil::utcNow(), cacheStampForMaxVoucherAmounts);

            if (secondsElapsed < #MaxElapsedSeconds)
            {
                // Previously calculated values are available and are current.
                return;
            }
        }

        // Initialize the Debit and Credit total by voucher maps.
        totalCreditAmountByVoucher  = new Map(Types::String, Types::Real);
        totalDebitAmountByVoucher   = new Map(Types::String, Types::Real);

        // Set max\min comparison trigger.
        isMaxMinDebitAmountUndefined    = true;
        isMaxMinCreditAmountUndefined   = true;

        this.calculateDocumentSpecificAmounts(_companyId, _recId);

        // Cache the results
        this.updateMinMaxAndTotalValues();
        isAmountsCalculated = true;
        recIdForMaxVoucherAmounts = _recId;
        cacheStampForMaxVoucherAmounts = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDocumentSpecificAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the credit and debit voucher amounts.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    protected void calculateDocumentSpecificAmounts(CompanyId _companyId, RecId _recId)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        // Set the overall process focus to the id of the passed in journal's company.
        changecompany(_companyId)
        {
            while select Voucher, TransDate, CurrencyCode, Triangulation, ExchRate, JournalNum,
                    ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary, OffsetLedgerDimension, AmountCurCredit, AmountCurDebit,
                    Company, OffsetCompany
                from ledgerJournalTrans
                order by Voucher
                exists join ledgerJournalTable
                    where ledgerJournalTable.RecId == _recId
                        && ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            {
                // Update the debit and credit voucher amounts cached for
                // max/min voucher and journal totals.
                this.updateDebitCreditForVoucher(ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the query to use for the document.
    /// </summary>
    /// <returns>
    /// The name of the query to use for the document.
    /// </returns>
    public queryName getQueryName()
    {
        return querystr(LedgerJournalWFApprovals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>LedgerJournalWFApprovalDocument</c> class.
    /// </summary>
    protected void new()
    {
        isAmountsCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalWFApprovalDocument</c> object.
    /// </summary>
    /// <returns>A new instance of the <cLedgerJournalWFApprovalDocument>  object.</returns>
    public static LedgerJournalWFApprovalDocument construct()
    {
        return new LedgerJournalWFApprovalDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxVoucherCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the maximum voucher credit amount on the journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The maximum voucher credit amount on the journal.
    /// </returns>
    /// <remarks>
    ///    The credit amount is summed for each voucher on the journal and the maximum value is returned.
    ///    Implicit amounts associated with offset accounts are included in the summation.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>. The record ID in the
    ///    workflow context is zero.
    /// </exception>
    public AmountCreditMaxVoucher parmMaxVoucherCreditAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return amountCreditMaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxVoucherDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the maximum voucher debit amount on the journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The maximum voucher debit amount on the journal.
    /// </returns>
    /// <remarks>
    ///    The debit amount is summed for each voucher on the journal and the maximum value is returned.
    ///    Implicit amounts associated with offset accounts are included in the summation.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>. The record ID in the
    ///    workflow context is zero.
    /// </exception>
    public AmountDebitMaxVoucher parmMaxVoucherDebitAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return amountDebitMaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinVoucherCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the minimum voucher credit amount on the journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The minimum voucher credit amount on the journal.
    /// </returns>
    /// <remarks>
    ///    The credit amount is summed for each voucher on the journal and the minimum value is returned.
    ///    Implicit amounts associated with offset accounts are included in the summation.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>. The record ID in the
    ///    workflow context is zero.
    /// </exception>
    public AmountCreditMinVoucher parmMinVoucherCreditAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return amountCreditMinVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinVoucherDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the minimum voucher debit amount on the journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The minimum voucher debit amount on the journal.
    /// </returns>
    /// <remarks>
    ///    The debit amount is summed for each voucher on the journal and the minimum value is returned.
    ///    Implicit amounts associated with offset accounts are included in the summation.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID in the workflow context is not <c>LedgerJournalTable</c>. The record ID in the
    ///    workflow context is zero.
    /// </exception>
    public AmountDebitMinVoucher parmMinVoucherDebitAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return amountDebitMinVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalJournalCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total credit amount for the whole journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total credit MST amount for the whole journal.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table ID is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID is not <c>LedgerJournalTable</c>. The record ID is zero.
    /// </exception>
    public TotalJournalCreditAmount parmTotalJournalCreditAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return totalJournalCreditAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalJournalDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total debit amount for the whole journal.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total debit MST amount for the whole journal.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table ID is not <c>LedgerJournalTable</c>.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table ID is not <c>LedgerJournalTable</c>. The record ID is zero.
    /// </exception>
    public TotalJournalDebitAmount parmTotalJournalDebitAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.calculateAmounts(_companyId, _tableId, _recId);

        return totalJournalDebitAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDebitCreditForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the debit and credit totals by voucher in the that corresponds class <c> Map </c> objects.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c> LedgerJournalTrans </c> table row selected for processing.
    /// </param>
    /// <remarks>
    ///    Converts the local debit and credit values into default currency amounts (AmountMST) before
    ///    updating the maps.All the currency conversions for intercompany transactions will use the journal
    ///    company's exchange rate for the currency code indicated on the transaction regardless of the
    ///    indicated exchange rate.
    /// </remarks>
    protected void updateDebitCreditForVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        AmountMST   creditAmountMST;
        AmountMST   debitAmountMST;
        AmountMST   voucherCreditAmount;
        AmountMST   voucherDebitAmount;

        creditAmountMST = 0;
        debitAmountMST  = 0;

        creditAmountMST = _ledgerJournalTrans.calcCreditMST();
        debitAmountMST = _ledgerJournalTrans.calcDebitMST();

        if (_ledgerJournalTrans.AmountCurCredit && _ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            debitAmountMST = creditAmountMST;
        }

        if (_ledgerJournalTrans.AmountCurDebit && _ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            creditAmountMST = debitAmountMST;
        }

        if (totalCreditAmountByVoucher.exists(_ledgerJournalTrans.Voucher))
        {
            voucherCreditAmount = totalCreditAmountByVoucher.lookup(_ledgerJournalTrans.Voucher);
            voucherCreditAmount += creditAmountMST;
            totalCreditAmountByVoucher.insert(_ledgerJournalTrans.Voucher, voucherCreditAmount);
        }
        else
        {
            totalCreditAmountByVoucher.insert(_ledgerJournalTrans.Voucher, creditAmountMST);
        }

        if (totalDebitAmountByVoucher.exists(_ledgerJournalTrans.Voucher))
        {
            voucherDebitAmount = totalDebitAmountByVoucher.lookup(_ledgerJournalTrans.Voucher);
            voucherDebitAmount += debitAmountMST;
            totalDebitAmountByVoucher.insert(_ledgerJournalTrans.Voucher, voucherDebitAmount);
        }
        else
        {
            totalDebitAmountByVoucher.insert(_ledgerJournalTrans.Voucher, debitAmountMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMinMaxAndTotalValues</Name>
				<Source><![CDATA[
    private void updateMinMaxAndTotalValues()
    {
        AmountMST   voucherAmount;

        totalJournalDebitAmount     = 0;
        totalJournalCreditAmount    = 0;
        amountDebitMinVoucher       = 0;
        amountDebitMaxVoucher       = 0;
        amountCreditMinVoucher      = 0;
        amountCreditMaxVoucher      = 0;

        debitAmountMapEnumerator    = totalDebitAmountByVoucher.getEnumerator();

        while (debitAmountMapEnumerator.moveNext())
        {
            voucherAmount = debitAmountMapEnumerator.currentValue();

            if (isMaxMinDebitAmountUndefined)
            {
                amountDebitMinVoucher = voucherAmount;
                amountDebitMaxVoucher = voucherAmount;
                isMaxMinDebitAmountUndefined = false;
            }
            else
            {
                amountDebitMinVoucher = min(voucherAmount, amountDebitMinVoucher);
                amountDebitMaxVoucher = max(voucherAmount, amountDebitMaxVoucher);
            }

            totalJournalDebitAmount += voucherAmount;
        }

        creditAmountMapEnumerator   = totalCreditAmountByVoucher.getEnumerator();

        while (creditAmountMapEnumerator.moveNext())
        {
            voucherAmount = creditAmountMapEnumerator.currentValue();

            if (isMaxMinCreditAmountUndefined)
            {
                amountCreditMinVoucher = voucherAmount;
                amountCreditMaxVoucher = voucherAmount;
                isMaxMinCreditAmountUndefined = false;
            }
            else
            {
                amountCreditMinVoucher = min(voucherAmount, amountCreditMinVoucher);
                amountCreditMaxVoucher = max(voucherAmount, amountCreditMaxVoucher);
            }

            totalJournalCreditAmount += voucherAmount;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>