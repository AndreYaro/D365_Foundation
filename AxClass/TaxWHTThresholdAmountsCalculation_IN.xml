<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWHTThresholdAmountsCalculation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TaxWHTThresholdAmountsCalculation_IN</c> provides the cumulative value, transaction value, and transaction line value
///     for withhold tax transactions. These three values are used when check whether the threshold section is the targe threshold
///     section to be targeted.
/// </summary>
[ThresholdValueCalculationAttribute_IN(enumStr(TaxThresholdSourceLineType_IN), TaxThresholdSourceLineType_IN::TaxWithhold)]
class TaxWHTThresholdAmountsCalculation_IN extends ThresholdAmountsCalculation_IN
{
    TaxWHTThresholdSourceLineImpl_IN    taxWHTThresholdSourceLineImpl;
    TaxWithholdComponentTable_IN        taxWithholdComponentTable;
    TaxWithholdCalculation_IN           taxWithholdCalculation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCumulativeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates cumulative value of withhold tax trans.
    /// </summary>
    protected void calcCumulativeValue()
    {
        TaxWithholdTrans_IN             taxWithholdTransloc;
        TaxWithholdUncommitted_IN       taxWithHoldUncommittedLoc;
        TaxWithholdTable                taxWithholdTableLoc;
        PANNumber_IN                    pAN;
        boolean isThresholdBasedOnPaymentOnly = FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance());

        NoYes isPANBased = taxWHTThresholdSourceLineImpl.isPANBasedAccumulation();
        
        // Get PAN number if PAN based accumulation is activated.
        if (isPANBased == NoYes::Yes)
        {
            pAN = taxWHTThresholdSourceLineImpl.getPANNumber();
        }

        FromDate validFrom = thresholdSection.ValidFrom;
        ToDate validTo = thresholdSection.ValidTo;
        AmountCur historyTurnOver;
        // Only available when Tax Liability on Payment is enabled on the tax group.
        if ((isThresholdBasedOnPaymentOnly
                && TaxWithholdGroupHeading::find(taxWHTThresholdSourceLineImpl.parmTaxWithholdGroup()).TaxLiabilityOnPayment_IN
                && taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust)
            || (FeatureStateProvider::isFeatureEnabled(TaxWHTHistoryTurnOverForVendFeature::instance())
                && taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Vend))
        {
            CustVendACType custVendType = taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust ?
                CustVendACType::Cust :
                CustVendACType::Vend;

            historyTurnOver = TaxWithholdHistoryTurnOverUtils_IN::getTaxWithholdHistoryTurnOver(
                validFrom,
                validTo,
                taxWHTThresholdSourceLineImpl,
                custVendType);
            validFrom = TaxWithholdHistoryTurnOverUtils_IN::getAdjustedFromDateBasedOnHistoryTurnOver(
                validFrom,
                validTo,
                custVendType,
                taxWHTThresholdSourceLineImpl);
        }

        // determine whether accumulate by PAN.
        if (pAN && isPANBased == NoYes::YES)
        {
            TaxInformationVendTable_IN taxInfoVendTable;
            TaxInformationCustTable_IN taxInfoCustTable;
            Debug::assert(taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust ||
                taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Vend);
            if (taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Vend)
            {
                select sum(AmountOriginMST) from taxWithholdTransLoc
                    where taxWithholdTransLoc.VendAccount
                        && taxWithholdTransLoc.TaxWithholdComponent == taxWithholdComponentTable.RecId
                        && (taxWithholdTransLoc.TransDate           >= thresholdSection.ValidFrom
                            || !thresholdSection.ValidFrom)
                        && (taxWithholdTransLoc.TransDate           <= thresholdSection.ValidTo
                            || !thresholdSection.ValidTo)
                        && taxWithholdTransloc.IsPartOfTurnOver
                    exists join RecId from taxInfoVendTable
                        where taxInfoVendTable.VendTable == taxWithholdTransloc.VendAccount
                            && taxInfoVendTable.PANStatus == PANStatus_IN::Received
                            && taxInfoVendTable.PANNumber == pAN;
            }
            else
            {
                select sum(AmountOriginMST) from taxWithholdTransLoc
                    where taxWithholdTransLoc.CustAccount
                        && taxWithholdTransLoc.TaxWithholdComponent == taxWithholdComponentTable.RecId
                        && (taxWithholdTransLoc.TransDate >= validFrom
                            || !validFrom)
                        && (taxWithholdTransLoc.TransDate <= validTo
                            || !validTo)
                        && taxWithholdTransloc.IsPartOfTurnOver
                        && (!isThresholdBasedOnPaymentOnly || !taxWithholdTransloc.IsTaxInterim)
                    exists join RecId from taxInfoCustTable
                        where taxInfoCustTable.CustTable == taxWithholdTransloc.CustAccount
                            && taxInfoCustTable.PANStatus == PANStatus_IN::Received
                            && taxInfoCustTable.PANNumber == pAN;
            }
        }
        else
        {
            // Account-based accumulation.
            select sum(AmountOriginMST) from taxWithholdTransLoc
                where ((taxWHTThresholdSourceLineImpl.parmAccountType()     == AccountType_IN::Vend
                            && taxWithholdTransLoc.VendAccount              == taxWHTThresholdSourceLineImpl.parmAccountNum())
                        || (taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust
                            && taxWithholdTransLoc.CustAccount              == taxWHTThresholdSourceLineImpl.parmAccountNum()
                            && (!isThresholdBasedOnPaymentOnly || !taxWithholdTransLoc.IsTaxInterim)))
                    && taxWithholdTransLoc.TaxWithholdComponent             == taxWithholdComponentTable.RecId
                    && (taxWithholdTransLoc.TransDate >= validFrom
                        || !validFrom)
                    && (taxWithholdTransLoc.TransDate <= validTo
                        || !validTo)
                    && taxWithholdTransloc.IsPartOfTurnOver;
        }

        // unposted transactions for the component, it is used for Journals containing different Vouchers
        select sum(AmountOriginMST) from taxWithHoldUncommittedLoc
            where taxWithHoldUncommittedLoc.Voucher                         != taxWithholdCalculation.parmVoucher()
                && (taxWithHoldUncommittedLoc.CalculationDate               >= thresholdSection.ValidFrom || !thresholdSection.ValidFrom)
                && (taxWithHoldUncommittedLoc.CalculationDate               <= thresholdSection.ValidTo || !thresholdSection.ValidTo)
                && taxWithHoldUncommittedLoc.HeadingTableId                 == taxWithholdCalculation.parmHeadingTableID()
                && taxWithHoldUncommittedLoc.HeadingRecId                   == taxWithholdCalculation.parmHeadingRecID()
                && taxWithHoldUncommittedLoc.IsPartOfTurnOver
                && taxWithHoldUncommittedLoc.AccountNumber                  == taxWHTThresholdSourceLineImpl.parmAccountNum()
                && (taxWHTThresholdSourceLineImpl.parmAccountType() != AccountType_IN::Cust || !isThresholdBasedOnPaymentOnly || !taxWithHoldUncommittedLoc.IsTaxInterim)
                exists join taxWithholdTableLoc
                    where taxWithholdTableLoc.TaxWithholdCode               == taxWithHoldUncommittedLoc.TaxWithholdCode
                        && taxWithholdTableLoc.TaxWithholdComponent_IN      == taxWithholdComponentTable.RecId;

        cumulativeValue = taxWithholdTransLoc.AmountOriginMST + taxWithHoldUncommittedLoc.AmountOriginMST + this.getTransValue() + historyTurnOver;
        if (isThresholdBasedOnPaymentOnly && !taxWHTThresholdSourceLineImpl.parmIsProgressiveApplicable())
        {
            cumulativeValue -= this.getTransValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransLineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates transaction line value of withhold tax trans.
    /// </summary>
    protected void calcTransLineValue()
    {
        transLineValue =  taxWHTThresholdSourceLineImpl.parmCurTransLineAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates transaction value of withhold tax trans.
    /// </summary>
    protected void calcTransValue()
    {
        TaxWithholdTable                taxWithholdTableLoc;
        TmpTransLineWithholdGrossAmount_IN  tmpTransLineWithholdGrossAmount;
        TaxWithholdGroupData            taxWithholdGroupDataLoc;

        tmpTransLineWithholdGrossAmount.setTmpData(taxWithholdCalculation.parmTmpTransLineWithholdGrossAmount());

        select sum(AmountOriginMST) from tmpTransLineWithholdGrossAmount
            where (taxWithholdCalculation.parmTaxModuleType()               != TaxModuleType::Voucher
                    || tmpTransLineWithholdGrossAmount.Voucher              == taxWithholdCalculation.parmVoucher())
                    && tmpTransLineWithholdGrossAmount.AccountType          == taxWHTThresholdSourceLineImpl.parmAccountType()
                    && tmpTransLineWithholdGrossAmount.AccountNumber        == taxWHTThresholdSourceLineImpl.parmAccountNum()
                    && (tmpTransLineWithholdGrossAmount.TransDate           >= thresholdSection.ValidFrom || !thresholdSection.ValidFrom)
                    && (tmpTransLineWithholdGrossAmount.TransDate           <= thresholdSection.ValidTo || !thresholdSection.ValidTo)
                    && tmpTransLineWithholdGrossAmount.HeadingTableId       == taxWithholdCalculation.parmHeadingTableID()
                    && tmpTransLineWithholdGrossAmount.HeadingRecId         == taxWithholdCalculation.parmHeadingRecID()
                    exists join taxWithholdGroupDataLoc
                        where taxWithholdGroupDataLoc.TaxWithholdGroup      == tmpTransLineWithholdGrossAmount.TaxWithholdGroup
                    exists join taxWithholdTableLoc
                        where taxWithholdTableLoc.TaxWithholdCode           == taxWithholdGroupDataLoc.TaxWithholdCode
                            && taxWithholdTableLoc.TaxWithholdComponent_IN  == taxWithholdComponentTable.RecId;

        transValue = tmpTransLineWithholdGrossAmount.AmountOriginMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>TaxWHTThresholdAmountsCalculation_IN</c> instance.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     The <c>ThresholdSections_IN</c> buffer.
    /// </param>
    /// <param name="_thresholdSourceLine">
    ///     The application <c>ThresholdSourceLine_IN</c> buffer.
    /// </param>
    public void initialize(ThresholdSections_IN _thresholdSection, ThresholdSourceLine_IN _thresholdSourceLine)
    {
        super(_thresholdSection, _thresholdSourceLine);
        taxWHTThresholdSourceLineImpl   = _thresholdSourceLine;
        taxWithholdComponentTable       = TaxWithholdComponentTable_IN::find(
            TaxWithholdTable::find(taxWHTThresholdSourceLineImpl.parmTaxWithholdCode()).TaxWithholdComponent_IN);
        taxWithholdCalculation          = taxWHTThresholdSourceLineImpl.parmTaxWithholdCalculation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>