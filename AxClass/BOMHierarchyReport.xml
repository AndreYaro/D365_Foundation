<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomHierarchyReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomHierarchyReport extends BOMHierarchy
{
    BOMBOMVersion           show;
    Object                  srsReportRDPClass;

    List                    list;
    Map                     circularBOMMap;
    Map                     circularBOMVersionMap;
    private boolean         filterOnProdDim;

    #localmacro.versionUpList
        %1Level,%1version
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemPartOf</Name>
				<Source><![CDATA[
    public boolean itemPartOf(
                                ItemId                      _itemId,
                                EcoResItemConfigurationName _configId       = '',
                                Level                       _maxLevels      = 0,
                                TransDate                   _fromDate       = dateNull(),
                                TransDate                   _toDate         = dateMax(),
                                InventSiteId                _siteId         = ''
                            )

    {
        boolean ret;

        if (show == BOMBOMVersion::Version)
        {
            list = new List(Types::Container);
        }

        ret = super(_itemId, _configId, _maxLevels, _fromDate, _toDate, _siteId);

        if (ret)
        {
            this.sendVersions();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseRLS</Name>
				<Source><![CDATA[
    public boolean mustUseRLS()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRDPClass</Name>
				<Source><![CDATA[
    protected Object parmRDPClass(Object _rdpClassObject = srsReportRDPClass)
    {
        srsReportRDPClass = _rdpClassObject;
        return srsReportRDPClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShow</Name>
				<Source><![CDATA[
    public BOMBOMVersion parmShow(BOMBOMVersion _show = show)
    {
        show = _show;

        return show;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownBOM</Name>
				<Source><![CDATA[
protected boolean scanDownBOM(
        BOMVersion                  version,
        EcoResItemConfigurationName fatherConfigId,
        TransDate                   fromDate,
        TransDate                   toDate,
        guid                        bomVersionIdentifier = newGuid()
        )
    {
        boolean ret;

        // The BOMConsistOf report should always print BOM version in order to separate item and BOM items
        if (show == BOMBOMVersion::Version ||
            this.parmRDPClass() is BOMConsistOfDP)
        {
            if (presLevel == 0 ||
                !circularBOMVersionMap)
            {
                circularBOMVersionMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Enum);
            }

            if (srsReportRDPClass is BOMConsistOfDP)
            {
                srsReportRDPClass.parmDataIdentifier(bomVersionIdentifier);
            }

            this.sendData(version);

            if (circularBOMVersionMap.exists(version.RecId))
            {
                warning(strFmt("@SYS18964",version.ItemId));
                return true;
            }
            circularBOMVersionMap.insert(version.RecId, NoYes::No);
        }

        ret = super(version,fatherConfigId,fromDate,toDate, bomVersionIdentifier);

        if (circularBOMVersionMap)
        {
            circularBOMVersionMap.remove(version.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownVersion</Name>
				<Source><![CDATA[
    public boolean scanDownVersion(
        BOM                         _bom,
        ItemId                      _fatherItemId,
        EcoResItemConfigurationName _fatherConfigId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        boolean ret;

        if (show == BOMBOMVersion::BOM
            || show == BOMBOMVersion::PmfFormula
            )
        {
            if (presLevel == 0 ||
                !circularBOMMap)
            {
                circularBOMMap = new Map(typeName2Type(extendedtypestr(recId)), Types::Enum);
            }

            if (srsReportRDPClass is BOMConsistOfDP)
            {
                srsReportRDPClass.parmDataIdentifier(_bomIdentifier);
            }

            this.sendData(_bom);

            if (circularBOMMap.exists(_bom.RecId))
            {
                warning(strfmt("@SYS18964", _fatherItemId));
                return true;
            }
            circularBOMMap.insert(_bom.RecId, NoYes::Yes);
        }

        ret = super(_bom, _fatherItemId, _fatherConfigId, _fromDate, _toDate, _siteId, _bomIdentifier);

        if (circularBOMMap)
        {
            circularBOMMap.remove(_bom.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownVersion</Name>
				<Source><![CDATA[
    protected boolean searchDownVersion(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMId                       _itemBOMId,
        date                        _fromDate,
        date                        _toDate,
        BOM                         _bom = null,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        InventDim       inventDim;
        BOMVersion      version;
        date            searchToDate;
        boolean         constructionSelected;
        InventDim       bomDimCriteria;
        InventDimParm   bomProdDimParm;

        if (filterOnProdDim && _bom)
        {
            bomDimCriteria = _bom.inventDim();
            bomProdDimParm = InventDimParm::andParms(InventDimParm::allProductDim(), InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_bom.ItemId)));
        }
        searchToDate = _toDate ? _toDate : dateMax();
        version.recordLevelSecurity(this.mustUseRLS());
        while select version
            order Construction desc, Active desc
            join  recId, configId from inventDim
                order by configId desc
            where   version.InventDimId == inventDim.inventDimId
            &&      version.ItemId    == _itemId                              &&
                  (
                   (_itemBOMId                                              &&
                    version.bomId   == _itemBOMId
                   )                                                        ||
                   !_itemBOMId
                  )                                                         &&
                  (
                   _itemBOMId ||
                   (
                    (versionSelect   == BOMRouteVersionSelectAll::Active     && // If only active then only the active
                     version.Active
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::Selected   &&
                     version.Construction
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::SelectedActive &&
                     (version.Construction || version.Active)
                    )                                        ||
                    versionSelect    == BOMRouteVersionSelectAll::All
                   )
                  )                                         &&
                  (
                   (searchInterval                          &&
                    version.FromDate    <= searchToDate     &&
                    (version.ToDate     >= _fromDate        ||
                     !version.ToDate
                    )
                   )                                        ||
                   (!searchInterval                         ||
                    _itemBOMId                              ||
                    (versionSelect != BOMRouteVersionSelectAll::Active  &&
                     version.Construction
                    )
                   )
                  )                                         &&
                  (version.Approved || !onlyApproved)
            && (!filterOnConfigId
                || InventDim.configId == _configId
                || InventDim.configId == ''
                || !_configId )

            && (!filterOnSiteId
                || inventDim.InventSiteId == _siteId
                || inventDim.InventSiteId == ''
                || _siteId == '')
            && (presLevel !=0  || inventDimCriteriaParm.isAllFlagNo() || (#InventDimBOM(inventDim, inventDimCriteria, inventDimCriteriaParm, inventDimCriteriaParm)))
            && (this.ignoreBOMProdDimConstraint(_bom, bomProdDimParm) || (#InventDimBOM(inventDim, bomDimCriteria, bomProdDimParm, bomProdDimParm)))

        {
            if (versionSelect == BOMRouteVersionSelectAll::SelectedActive)
            {
                if (constructionSelected)
                {
                    break;
                }
                if (version.Construction)
                {
                    constructionSelected = true;
                }
            }

            setprefix(strfmt("@SYS25823",version.bomId, date2StrUsr(version.FromDate, DateFlags::FormatAll), date2StrUsr(version.ToDate, DateFlags::FormatAll)));

            this.parmParentBom(_bom);
            this.parmParentBOMIdentifier(_bomIdentifier);
            if (! this.scanDownBOM(
                    version,
                    _configId,
                    BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                    BOMHierarchy::setValidToDate(_toDate,version.ToDate))
                   )
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownVersionCoProduct</Name>
				<Source><![CDATA[
    protected boolean searchDownVersionCoProduct(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMId                       _itemBOMId,
        date                        _fromDate,
        date                        _toDate,
        BOM                         _bom = null,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        if (!#PmfEnabled)
        {
            return true;
        }

        InventDim       inventDim;
        BOMVersion      version;
        PmfFormulaCoBy  formulaCoBy;
        date            searchToDate;
        boolean         constructionSelected;
        InventDim       bomDimCriteria;
        InventDimParm   bomProdDimParm;

        if (filterOnProdDim && _bom)
        {
            bomDimCriteria = _bom.inventDim();
            bomProdDimParm = InventDimParm::andParms(InventDimParm::allProductDim(), InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_bom.ItemId)));
        }
        searchToDate = _toDate ? _toDate : dateMax();
        version.recordLevelSecurity(this.mustUseRLS());

        while select recId from formulaCoBy
            join version
            order Construction desc, Active desc
            join  recId, configId from inventDim
                order by configId desc
            where  formulaCoBy.ItemId   == _itemId
                && formulaCoBy.ProductType == PmfProductType::Co_Product
                && version.RecId        == formulaCoBy.BOMVersionRefRecId
                && formulaCoBy.InventDimId  == inventDim.inventDimId    &&
                  (
                   (
                    (versionSelect   == BOMRouteVersionSelectAll::Active     && // If only active then only the active
                     ( version.Active )
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::Selected   &&
                     version.Construction
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::SelectedActive &&
                     (version.Construction || version.Active)
                    )                                        ||
                    versionSelect    == BOMRouteVersionSelectAll::All
                   )
                  )                                         &&
                  (
                   (searchInterval                          &&
                    version.FromDate    <= searchToDate     &&
                    (version.ToDate     >= _fromDate        ||
                     !version.ToDate
                    )
                   )                                        ||
                   (!searchInterval                         ||
                    _itemBOMId                              ||
                    (versionSelect != BOMRouteVersionSelectAll::Active  &&
                     version.Construction
                    )
                   )
                  )                                         &&
                  (version.Approved || !onlyApproved)
                && (!filterOnConfigId
                    || InventDim.configId == _configId
                    || InventDim.configId == ''
                    || !_configId )

                && (!filterOnSiteId
                    || inventDim.InventSiteId == _siteId
                    || inventDim.InventSiteId == ''
                    || _siteId == '')
                && (presLevel !=0  || inventDimCriteriaParm.isAllFlagNo() || (#InventDimBOM(inventDim, inventDimCriteria, inventDimCriteriaParm, inventDimCriteriaParm)))
                && (this.ignoreBOMProdDimConstraint(_bom, bomProdDimParm) || (#InventDimBOM(inventDim, bomDimCriteria, bomProdDimParm, bomProdDimParm)))

        {
            if (versionSelect == BOMRouteVersionSelectAll::SelectedActive)
            {
                if (constructionSelected)
                {
                    break;
                }
                if (version.Construction)
                {
                    constructionSelected = true;
                }
            }

            setprefix(strfmt("@SYS25823",version.bomId, date2StrUsr(version.FromDate, DateFlags::FormatAll), date2StrUsr(version.ToDate, DateFlags::FormatAll)));

            this.parmParentBom(_bom);
            this.parmParentBOMIdentifier(_bomIdentifier);
            if (! this.scanDownBOM(
                    version,
                    _configId,
                    BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                    BOMHierarchy::setValidToDate(_toDate,version.ToDate))
                   )
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpBOM</Name>
				<Source><![CDATA[
    public boolean scanUpBOM(
        BOMVersion                  presVersion,
        EcoResItemConfigurationName config,
        TransDate                   fromDate,
        TransDate                   toDate,
        PmfFormulaCoBy              _coBy = null
        )
    {
        if (show == BOMBOMVersion::Version)
        {
            if (list)
            {
                list.addEnd([#versionUpList(pres)]);
            }
            else
            {
                if (_coBy.ItemId)
                {
                    srsReportRDPClass.send(_coBy);
                }
                else
                {
                    this.sendData(presVersion);
                }
            }
        }

        return super(presVersion, config, fromDate, toDate, _coBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpVersion</Name>
				<Source><![CDATA[
    protected boolean scanUpVersion(
        BOM             bom,
        TransDate       fromDate,
        TransDate       toDate
        )
    {
        if (show == BOMBOMVersion::BOM
            || show == BOMBOMVersion::PmfFormula
            )
        {
            this.sendData(bom);
        }
        return super(bom,fromDate,toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendData</Name>
				<Source><![CDATA[
    protected void sendData(Common _common)
    {
        //send data to SSRS report
        srsReportRDPClass.parmInsertFlag(false);
        srsReportRDPClass.sendDataToTmpTable(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendVersions</Name>
				<Source><![CDATA[
    public void sendVersions()
    {
        ListEnumerator  le;
        List            cleanList;
        Level           curLevel;
        BOMVersion      curVersion;

        Level           lastLevel;
        BOMVersion      lastVersion;

        void setVars()
        {
            lastLevel           = curLevel;
            lastVersion         = curVersion;
        }

        void insert()
        {
            boolean add = true;

            if (!lastVersion.RecId)
            {
                setVars();
                return;
            }

            if (add)
            {
                cleanList.addEnd([#versionUpList(last)]);
            }
            setVars();
        }

        if (! list)
        {
            return;
        }

        cleanList = new List(Types::Container);

        le = list.getEnumerator();
        while (le.moveNext())
        {
            [#versionUpList(cur)] = le.current();

            insert();
        }
        insert();

        le = cleanList.getEnumerator();
        while (le.moveNext())
        {
            [#versionUpList(cur)] = le.current();

            presLevel       = curLevel;

            this.sendData(curVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMHierarchyReport construct()
    {
        return new BOMHierarchyReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReport</Name>
				<Source><![CDATA[
    public static BOMHierarchyReport newReport(Object _reportObject = null)
    {
        BOMHierarchyReport bomHierarchyReport = BOMHierarchyReport::construct();

        bomHierarchyReport.parmRDPClass(_reportObject);
        bomHierarchyReport.parmVersionSelect(_reportObject.parmVersionSelect());
        bomHierarchyReport.parmSearchInterval(_reportObject.parmSearchInterval());
        bomHierarchyReport.parmSearchIntervalBOM(_reportObject.parmSearchIntervalBOM());
        bomHierarchyReport.parmShow(_reportObject.parmShow());
        bomHierarchyReport.parmFilterOnSiteId(true);
        bomHierarchyReport.parmFilterOnConfigId(true);
        bomHierarchyReport.parmFilterOnProdDim(true);

        return bomHierarchyReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterOnProdDim</Name>
				<Source><![CDATA[
    internal boolean parmFilterOnProdDim(boolean _filterOnProdDim = filterOnProdDim)
    {
        filterOnProdDim = _filterOnProdDim;
        return filterOnProdDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreBOMProdDimConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ignore BOM production dimension constraint in following conditions:
    ///    1. filter is off.
    ///    2. search from item. not BOM.
    ///    3. BOM has no production dimension.
    /// </summary>
    /// <param name="_bom">
    ///    A bom line
    /// </param>
    /// <param name="_bomProdDimParm">
    ///    An inventory dimensions selection
    /// </param>
    /// <returns>
    ///    true if a BOM production dimension constraint is ignored; otherwise, false.
    /// </returns>
    private boolean ignoreBOMProdDimConstraint(BOM _bom, InventDimParm _bomProdDimParm)
    {
        return !filterOnProdDim || !_bom || _bomProdDimParm.isAllFlagNo();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>