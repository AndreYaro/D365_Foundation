<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalChargeCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalChargeCalc_RU extends RunBase
{
    CustomJournalTable_RU           customJournalTable;
    Set                             markedSet;
    CurrencyCode                    customCurrencyCode;

    CustomChargeEscortCount_RU      escortCount;
    CustomChargeEscortDistance_RU   escortDistance;
    CustomChargeStoragePeriod_RU    storagePeriod;
    TaxCode                         escortTaxCode;
    TaxCode                         storageTaxCode;

    DialogField                     fieldEscortCount;
    DialogField                     fieldEscortDistance;
    DialogField                     fieldEscortTaxCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcChargeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcChargeAmount(CustomJournalCharge_RU _customJournalCharge)
    {
        TaxTable                taxTable;

        CustomChargeAmount_RU   chargeAmount;
        CustomAmount_RU         chargeRate;
        ItemGrossWeight         storageWeight;
        TaxValueDuty_RU         customRateAmount;
        TaxData                 taxData;
        CustomJournalTrans_RU   customJournalTrans;
        SetEnumerator           setEnumerator;
        real                    valueConvert;
        real                    totalAmount, amountEstimated;
        TaxBase                 taxBase;

        switch (_customJournalCharge.ChargeType)
        {
            case CustomChargeTypeCalc_RU::Escort:
                taxTable = TaxTable::find(escortTaxCode ? escortTaxCode : _customJournalCharge.TaxCode);
                chargeRate   = Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode,
                                                                        customJournalTable.PlanArrivalDate,
                                                                        customCurrencyCode,
                                                                        _customJournalCharge.EscortDistance,
                                                                        (customJournalTable.CustomJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                        _customJournalCharge.EscortDistance ? 1 : 0);

                chargeAmount = CurrencyExchangeHelper::amount(_customJournalCharge.EscortCount * chargeRate, customCurrencyCode);
                taxBase = abs(_customJournalCharge.EscortDistance);
                taxBase = taxTable.TaxValueQty_RU ? taxBase / taxTable.TaxValueQty_RU : taxBase;

                select firstonly taxData
                    where taxData.TaxCode     == taxTable.TaxCode                       &&
                       (! taxData.TaxFromDate                                           ||
                         (taxData.TaxFromDate <= customJournalTable.PlanArrivalDate     &&
                          taxData.TaxToDate   >= customJournalTable.PlanArrivalDate))   &&
                        ((taxData.TaxLimitMin <= taxBase                                &&
                         (taxData.TaxLimitMax >= taxBase)                               ||
                         (taxData.TaxLimitMin <= taxBase                                &&
                         !taxData.TaxLimitMax)));

                customRateAmount = taxData.TaxValue;
                break;

            case CustomChargeTypeCalc_RU::Storage:
                if (!markedSet.elements())
                    return [_customJournalCharge.Amount, _customJournalCharge.TaxAmountCur];

                taxTable = TaxTable::find(storageTaxCode ? storageTaxCode : _customJournalCharge.TaxCode);
                storageWeight = _customJournalCharge.StorageWeight;

                if (taxTable.TaxValueQty_RU)
                {
                    storageWeight = roundUp(storageWeight, taxTable.TaxValueQty_RU);
                }
                chargeRate = Tax::construct().taxCalcWithoutSource_RU(taxTable.TaxCode, customJournalTable.PlanArrivalDate, customCurrencyCode, storageWeight,
                                                                      (customJournalTable.CustomJournalType == CustomJournalType_RU::Export) ? TaxModuleType::Sales : TaxModuleType::Purch,
                                                                      storageWeight, taxTable.TaxUnit, '');

                chargeAmount = CurrencyExchangeHelper::amount(_customJournalCharge.StoragePeriod * chargeRate, customCurrencyCode);

                //proportional calc of storage amount per marked customJournalTrans begin -->
                //total amount for distribution
                totalAmount = _customJournalCharge.StorageWeight;

                // distribution per line
                setEnumerator   = markedSet.getEnumerator();
                amountEstimated = chargeAmount;

                while (setEnumerator.moveNext())
                {
                    customJournalTrans = CustomJournalTrans_RU::findRecId(setEnumerator.current(), true);
                    valueConvert = customJournalTrans.ItemGrossWeight;

                    if (totalAmount)
                    {
                        customJournalTrans.CustomAmountStorage = chargeAmount * valueConvert / totalAmount;
                        amountEstimated -= customJournalTrans.CustomAmountStorage;
                    }
                    else
                    {
                        customJournalTrans.CustomAmountStorage = 0;
                    }
                    customJournalTrans.doUpdate();
                }

                if (amountEstimated)
                {
                    customJournalTrans.CustomAmountStorage += amountEstimated;
                    customJournalTrans.doUpdate();
                }
                //<-- end

                select firstonly TaxValue from taxData
                    where taxData.TaxCode     == taxTable.TaxCode                       &&
                       (! taxData.TaxFromDate                                           ||
                         (taxData.TaxFromDate <= customJournalTable.PlanArrivalDate     &&
                          taxData.TaxToDate   >= customJournalTable.PlanArrivalDate))   &&
                        ((taxData.TaxLimitMin <= abs(storageWeight)                     &&
                         (taxData.TaxLimitMax >= abs(storageWeight))                    ||
                         (taxData.TaxLimitMin <= abs(storageWeight)                     &&
                         !taxData.TaxLimitMax)));

                customRateAmount = taxData.TaxValue;
                break;
        }

        return [chargeAmount, customRateAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEscort</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createEscort()
    {
        CustomJournalCharge_RU    customJournalCharge;

        customJournalCharge.clear();
        customJournalCharge.initValue();
        customJournalCharge.initFromCustomJournalTable(customJournalTable);

        customJournalCharge.ChargeType      = CustomChargeTypeCalc_RU::Escort;
        customJournalCharge.EscortCount     = escortCount;
        customJournalCharge.EscortDistance  = escortDistance;
        customJournalCharge.TaxCode         = escortTaxCode;
        [customJournalCharge.Amount, customJournalCharge.TaxAmountCur] = this.calcChargeAmount(customJournalCharge);

        customJournalCharge.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStorage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createStorage()
    {
        CustomJournalCharge_RU  customJournalCharge;
        CustomJournalTrans_RU   customJournalTrans;

        ItemGrossWeight         storageWeight = 0;
        ItemGrossWeight         itemWeight;
        SetEnumerator           setEnumerator;

        setEnumerator = markedSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            customJournalTrans = CustomJournalTrans_RU::findRecId(setEnumerator.current());
            itemWeight         = customJournalTrans.ItemGrossWeight;

            if (itemWeight)
                storageWeight += itemWeight;
            else
                throw error(strFmt("@GLS115440", customJournalTrans.ItemId));
        }

        customJournalCharge.clear();
        customJournalCharge.initValue();
        customJournalCharge.initFromCustomJournalTable(customJournalTable);

        customJournalCharge.ChargeType      = CustomChargeTypeCalc_RU::Storage;
        customJournalCharge.StoragePeriod   = storagePeriod;
        customJournalCharge.StorageWeight   = storageWeight;
        customJournalCharge.TaxCode         = storageTaxCode;
        [customJournalCharge.Amount, customJournalCharge.TaxAmountCur] = this.calcChargeAmount(customJournalCharge);

        customJournalCharge.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        dialog = Dialog::newFormnameRunbase(formStr(CustomJournalChargeCalcDialog_RU), this);
        dialog.caption("@GLS115952");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marked</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes marked(boolean                 _set,
                        CustomJournalTrans_RU   _customJournalTrans,
                        NoYes                   _mark)
    {
        if (_set)
        {
            if (_mark)
                markedSet.add(_customJournalTrans.RecId);
            else
                markedSet.remove(_customJournalTrans.RecId);
        }

        return markedSet.in(_customJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        markedSet          = new Set(Types::Int64);
        customCurrencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEscortCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomChargeEscortCount_RU parmEscortCount(CustomChargeEscortCount_RU _escortCount = escortCount)
    {
        escortCount = _escortCount;
        return escortCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEscortDistance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomChargeEscortDistance_RU parmEscortDistance(CustomChargeEscortDistance_RU _escortDistance = escortDistance)
    {
        escortDistance = _escortDistance;
        return escortDistance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEscortTaxCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TaxCode parmEscortTaxCode(TaxCode _escortTaxCode = escortTaxCode)
    {
        escortTaxCode = _escortTaxCode;
        return escortTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoragePeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomChargeStoragePeriod_RU parmStoragePeriod(CustomChargeStoragePeriod_RU _storagePeriod = storagePeriod)
    {
        storagePeriod = _storagePeriod;
        return storagePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageTaxCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TaxCode parmStorageTaxCode(TaxCode _storageTaxCode = storageTaxCode)
    {
        storageTaxCode = _storageTaxCode;
        return storageTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (escortCount && escortDistance)
                this.createEscort();

            if (storagePeriod && markedSet && markedSet.elements())
                this.createStorage();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! escortCount && ! escortDistance && ! storagePeriod)
                ret = checkFailed("@GLS115383");

            if ((! escortCount && escortDistance) || (escortCount && ! escortDistance))
                ret = checkFailed("@GLS115384");

            if ((! storagePeriod && markedSet && markedSet.elements()) || (storagePeriod && (! markedSet || ! markedSet.elements())))
                ret = checkFailed("@GLS115385");

            if (escortCount && ! escortTaxCode)
                ret = checkFailed("@GLS115386");

            if (storagePeriod && markedSet && markedSet.elements() && !storageTaxCode)
                ret = checkFailed("@GLS115387");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalChargeCalc_RU construct()
    {
        return new CustomJournalChargeCalc_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalChargeCalc_RU  customJournalChargeCalc;
        FormRun                     callerFormRun;
        FormDataSource              callerFormDataSource;

        if (! _args || _args.dataset() != tableNum(CustomJournalTable_RU))
            throw error(strFmt("@SYS25516", CustomJournalChargeCalc_RU::description()));

        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
            throw error("@SYS82774");

        customJournalChargeCalc = CustomJournalChargeCalc_RU::construct();

        customJournalChargeCalc.parmCustomJournalTable(_args.record());

        if (customJournalChargeCalc.prompt())
        {
            customJournalChargeCalc.runOperation();
        }
        if (_args.caller() &&
            SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)) &&
            _args.caller().name() == formStr(CustomJournalTable_RU))
        {
            callerFormRun = _args.caller();

            if (formHasMethod(callerFormRun, identifierStr(transFormDataSource)))
            {
                callerFormDataSource = _args.caller().tableFormDataSource();
                callerFormDataSource.reread();
                callerFormDataSource.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>