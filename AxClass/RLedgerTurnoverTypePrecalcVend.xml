<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverTypePrecalcVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverTypeVend</c> class implements logic for vendor turnover statements.
/// </summary>
class RLedgerTurnoverTypePrecalcVend extends RLedgerTurnoverTypeVend
{
    RLedgerTurnoverParamTransLink paramTransLink;
    Map                           mapParamValues;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>groupParamValues</Name>
				<Source><![CDATA[
        public container groupParamValues(Common    _trans,
                                      container _key,
                                      Common    _transHeader = null,
                                      Common    _transSplit  = null)
    {
        int                         idx;
        container                   value;
        container                   paramValues;
        str                         paramName;
        str                         valueStr;
        RLedgerTurnoverParamValue   paramValue;
        container                   paramNames = this.groupParamNames();

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            paramName = conpeek(_key, idx);

            if (mapParamValues.exists(paramName))
            {
                value = mapParamValues.lookup(paramName);
                value = [con2Str(value, newLine)];
            }
            else
            {
                value = [''];
            }

            if (paramName == conpeek(paramNames, glAccount) && value == [''])
            {
                ttsBegin;

                this.getMainAccountNum(_trans);
                valueStr = mainAccountNum;
                value = [valueStr];

                if (valueStr)
                {
                    paramValue = RLedgerTurnoverParamValue::find(paramTransLink.ParamValueCombination, paramName, true);
                    if (paramValue)
                    {
                        paramValue.Value = valueStr;
                        paramValue.update();
                    }
                    else
                    {
                        RLedgerTurnoverParamValue::create(paramName, valueStr, paramTransLink.ParamValueCombination);
                    }
                }

                ttsCommit;
            }

            paramValues = conins(paramValues, conlen(paramValues) + 1, value);
        }

        return paramValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransIncluded</Name>
				<Source><![CDATA[
        public boolean isTransIncluded(Common           _trans,
                                   Common           _subtrans,
                                   CurrencyType_RU  _currencyType,
                                   TransDate        _fromDate = dateNull(),
                                   TransDate        _toDate   = dateNull())
    {
        str                         mainAccountName = conpeek(this.groupParamNames(), glAccount);
        TransactionReversalTrans    reversalTrans;
        TransactionReversalTrans    reversalTransOffset;
        Common                      transOffset    = _trans.data();
        FieldId                     fieldTransDate = conPeek(this.fieldTransDate(), 2);

        if (_trans.(this.fieldAmount(_currencyType)) == 0)
        {
            return false;
        }

        if (_fromDate && _toDate)
        {
            reversalTrans = TransactionReversalTrans::findTransactionReversalTrans(_trans.TableId, _trans.RecId);
            if (reversalTrans.Reversed)
            {
                select firstonly reversalTransOffset
                    where reversalTransOffset.TraceNum == reversalTrans.TraceNum
                       && reversalTransOffset.RecId    != reversalTrans.RecId
                exists join transOffset
                    where  transOffset.TableId           == reversalTransOffset.RefTableId
                       &&  transOffset.RecId             == reversalTransOffset.RecId
                       && (transOffset.(fieldTransDate)  <  _fromDate
                       ||  transOffset.(fieldTransDate)  >  _toDate);

                if (! reversalTransOffset)
                {
                    return false;
                }
            }
        }

        if (paramTransLink.RefRecId != _trans.RecId)
        {
            paramTransLink = RLedgerTurnoverParamTransLink::find(_trans.TableId, _trans.RecId);
            mapParamValues = RLedgerTurnoverParamValue::getValues(paramTransLink.ParamValueCombination);
        }

        if (! paramTransLink)
        {
            throw error("@SYS4081703");
        }

        if (mapParamValues.exists(mainAccountName))
        {
            mainAccountNum = con2Str(mapParamValues.lookup(mainAccountName));

            if (accountNumSet.elements() && ! accountNumSet.in(mainAccountNum))
            {
                return false;
            }
        }
        else
        {
            throw error("@SYS4081703");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>