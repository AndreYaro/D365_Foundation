<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnhandReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>InventOnhandReserve</c> is a class used as a form controller for the reservation form.
/// </summary>
public class InventOnhandReserve extends InventOnHandReserveBase
{
    const int MarkRecordFlag = 1;

    [SysObsolete("sourceToTargetUnitConverter is deprecated, use productSourceToTargetUnitConverter instead.", false, 30\06\2020)] 
    UnitOfMeasureConverter      sourceToTargetUnitConverter;
    [SysObsolete("targetToSourceUnitConverter is deprecated, use productTargetToSourceUnitConverter instead.", false, 30\06\2020)]
    UnitOfMeasureConverter      targetToSourceUnitConverter;

    EcoResProductUnitConverter  productSourceToTargetUnitConverter;
    EcoResProductUnitConverter  productTargetToSourceUnitConverter;
    [FormObservable]
    UnitOfMeasureSymbol         sourceUnitId;
    [FormObservable]
    UnitOfMeasureSymbol         targetUnitId;
    ItemId                      itemId;

    InventTransSum              transSumBuffer;
    InventTransSum              transSumLine1;
    InventTransSum              transSumLine2;

    boolean                     useLineCache2;
    boolean                     unitConverterResetNeeded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearLineCache</Name>
				<Source><![CDATA[
    protected void clearLineCache(
        InventMovement  _movement,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        if (_movement)
        {
            if (transSumLine1.equalCriteria(_movement.inventTransOriginId(),
                                            _movement.transChildType(),
                                            _movement.transChildRefId(),
                                            _inventDim,
                                            _inventDimParm))
            {
                transSumLine1.reset();
            }
            else if (transSumLine2.equalCriteria(_movement.inventTransOriginId(),
                                                    _movement.transChildType(),
                                                    _movement.transChildRefId(),
                                                    _inventDim,
                                                    _inventDimParm))
            {
                transSumLine2.reset();
            }
        }
        else
        {
            transSumLine1.reset();
            transSumLine2.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyBetweenUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the inventory quantity value from one unit of measure to another by using the conversion
    ///    rules that are defined for an item.
    /// </summary>
    /// <param name="_value">
    ///    The value to convert.
    /// </param>
    /// <param name="_fromUnitId">
    ///    The unit of measure of the input quantity.
    /// </param>
    /// <param name="_toUnitId">
    ///    The unit of measure of the result quantity.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item to convert.
    /// </param>
    /// <returns>
    ///    The converted inventory quantity.
    /// </returns>
    public InventQty convertQtyBetweenUnits(
        InventQty _value,
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        ItemId              _itemId)
    {
        if (_fromUnitId == _toUnitId)
        {
            return _value;
        }

        this.setupUnitConversion(_itemId, _fromUnitId, _toUnitId);

        if (sourceUnitId == _fromUnitId && targetUnitId == _toUnitId)
        {
            return productSourceToTargetUnitConverter.convertValue(_value);
        }

        return productTargetToSourceUnitConverter.convertValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventMovSubType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the InventMovSubType that should be used when constructing InventMovements.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> for which the subtype should be returned. This parameter is optional.
    /// </param>
    /// <returns>
    /// InventMovSubType
    /// </returns>
    protected InventMovSubType getInventMovSubType(InventMovement _movement = inventDimFormSetup.movement())
    {
        return super(_movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSOrderTransForOutputOrder</Name>
				<Source><![CDATA[
    private WMSOrderTrans getWMSOrderTransForOutputOrder(WMSOrder _wmsOrder)
    {
        WMSOrderTrans wmsOrderTrans;

        select firstonly wmsOrderTrans where
                    wmsOrderTrans.OrderId == _wmsOrder.OrderId;

        return wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    public InventMovement movement()
    {
        return inventDimFormSetup.movement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementOnOrderInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity on order in the inventory unit.
    /// </summary>
    /// <param name="_movement">
    ///    The <c>InventMovement</c> used for the calculations; optional.
    /// </param>
    /// <returns>
    ///    The quantity on order in the inventory unit.
    /// </returns>
    public InventQtyOnOrder movementOnOrderInvent(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.originOnOrder(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementOnOrderUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is on order in the secondary unit.
    /// </summary>
    /// <returns>
    ///    The quantity that is on order in the secondary unit.
    /// </returns>
    public InventQtyOnOrder movementOnOrderUnit()
    {
        InventMovement movement = inventDimFormSetup.movement();

        if (!movement)
        {
            return 0;
        }

        return this.convertQtyBetweenUnits(this.movementOnOrderInvent(movement), sourceUnitId, targetUnitId, movement.itemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementReservOrderedInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is reserve ordered in the inventory unit.
    /// </summary>
    /// <param name="_movement">
    ///    The <c>InventMovement</c> used for the calculations; optional.
    /// </param>
    /// <returns>
    ///    The quantity that is reserve ordered in the inventory unit.
    /// </returns>
    public InventQtyReservOrdered  movementReservOrderedInvent(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.originReservOrdered(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementReservOrderedUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity reserve ordered in the secondary unit.
    /// </summary>
    /// <returns>
    ///    The quantity reserve ordered in the secondary unit.
    /// </returns>
    public InventQtyReservOrdered  movementReservOrderedUnit()
    {
        InventMovement movement = inventDimFormSetup.movement();

        if (!movement)
        {
            return 0;
        }

        return this.convertQtyBetweenUnits(this.movementReservOrderedInvent(movement), sourceUnitId, targetUnitId, movement.itemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementReservPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is physically reserved in the inventory unit.
    /// </summary>
    /// <param name="_movement">
    ///    The <c>InventMovement</c> used for the calculations; optional.
    /// </param>
    /// <returns>
    ///    The quantity that is physically reserved in the inventory unit.
    /// </returns>
    public InventQtyReservPhysical  movementReservPhysicalInvent(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.originReservPhysical(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementReservPhysicalUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is reserved in the secondary unit.
    /// </summary>
    /// <returns>
    ///    The quantity that is physically reserved in the secondary unit.
    /// </returns>
    public InventQtyReservPhysical  movementReservPhysicalUnit()
    {
        InventMovement movement = inventDimFormSetup.movement();

        if (!movement)
        {
            return 0;
        }

        return this.convertQtyBetweenUnits(this.movementReservPhysicalInvent(movement), sourceUnitId, targetUnitId, movement.itemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        transSumBuffer      = InventTransSum::newChildType();
        transSumLine1       = InventTransSum::newChildTypeInventDim();
        transSumLine2       = InventTransSum::newChildTypeInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onhandReservedInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory quantity that is reserved for a lot ID with the specified inventory
    ///    dimensions.
    /// </summary>
    /// <param name="_movement">
    ///    An <c>InventMovement</c> that is used for the quantity calculations.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimensions for which the quantity calculations should be done.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The dimension parameters that are used to control which inventory dimensions should be considered
    ///    for the calculations.
    /// </param>
    /// <returns>
    ///    The quantity that is reserved in the inventory unit of measure.
    /// </returns>
    public
    InventQty onhandReservedInvent(
        InventMovement      _movement,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm)
    {
        if (!_movement)
        {
            return 0;
        }

        if (transSumLine1.equalCriteria(_movement.inventTransOriginId(),_movement.transChildType(),_movement.transChildRefId(),_inventDim,_inventDimParm))
        {
            return -transSumLine1.originReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
        }

        if (transSumLine2.equalCriteria(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm))
        {
            return -transSumLine2.originReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim,_inventDimParm);
        }

        useLineCache2 = ! useLineCache2;

        if (useLineCache2)
        {
            return -transSumLine1.originReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
        }

        return -transSumLine2.originReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetup</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_OnHand parmInventDimFormSetup(InventDimCtrl_Frm_OnHand _inventDimFormSetup = inventDimFormSetup)
    {
        inventDimFormSetup = _inventDimFormSetup;

        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmSourceUnitId(UnitOfMeasureSymbol _sourceUnitId = sourceUnitId)
    {
        if (!prmisDefault(_sourceUnitId))
        {
            sourceUnitId                = _sourceUnitId;
            unitConverterResetNeeded    = true;
        }

        return sourceUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmTargetUnitId(UnitOfMeasureSymbol _targetUnitId = targetUnitId)
    {
        if (!prmisDefault(_targetUnitId))
        {
            targetUnitId                = _targetUnitId;
            unitConverterResetNeeded    = true;
        }

        return targetUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransSumBuffer</Name>
				<Source><![CDATA[
    public InventTransSum parmTransSumBuffer(InventTransSum _transSumBuffer = transSumBuffer)
    {
        transSumBuffer = _transSumBuffer;

        return transSumBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMovementOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantity on order.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> that should be used for the calculations. This parameter is optional.
    /// </param>
    /// <returns>
    /// The CW quantity of the material on order if the item is catch weight; otherwise zero(0).
    /// </returns>
    public PdsCWOnOrder pdsCWMovementOnOrder(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.pdsCWidOnOrder(_movement.inventTransOriginId(),_movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMovementReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantity reserved ordered.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> that should be used for the calculations. This parameter is optional.
    /// </param>
    /// <returns>
    /// The catch weight quantity of the material on reserve if the item is catch weight; otherwise zero.
    /// </returns>
    public PdsCWOnOrder pdsCWMovementReservOrdered(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.pdsCWidReservOrdered(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMovementReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantity of physical inventory reserved.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> that should be used for the calculations. This parameter is optional.
    /// </param>
    /// <returns>
    /// The catch weight quantity of the inventory reserved if item is catch weight; otherwise zero(0).
    /// </returns>
    public PdsCWReservPhysical pdsCWMovementReservPhysical(InventMovement _movement = inventDimFormSetup.movement())
    {
        if (!_movement)
        {
            return 0;
        }

        return transSumBuffer.pdsCWidReservPhysical(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOnhandReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantity of the on-hand inventory reserved.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> class instance.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension to evaluate.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> record for which to evaluate inventory.
    /// </param>
    /// <returns>
    /// The catch weight quantity of the on-hand inventory that can be reserved.
    /// </returns>
    public PdsCWInventQty pdsCWOnhandReserved(
        InventMovement  _movement,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        if (!_movement)
        {
            return 0;
        }

        if (transSumLine1.equalCriteria(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm))
        {
            return -transSumLine1.pdsCWidReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
        }

        if (transSumLine2.equalCriteria(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim,_inventDimParm))
        {
            return -transSumLine2.pdsCWidReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
        }

        useLineCache2 = ! useLineCache2;

        if (useLineCache2)
        {
            return -transSumLine1.pdsCWidReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
        }

        return -transSumLine2.pdsCWidReserved(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), _inventDim, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set and/or get the catch weight quantity which will be reserved.
    /// </summary>
    /// <param name="_set">
    /// Whether to attempt to reserve inventory or not.
    /// </param>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record to be used in the reservation process.
    /// </param>
    /// <param name="_reserveNow">
    /// The quantity which to attempt to reserve.
    /// </param>
    /// <param name="_cwReserveNow">
    /// The catch weight quantity which to attempt to reserve.
    /// </param>
    /// <param name="_cwForceActual">
    /// Whether to force the reservation or not; default false.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record to reserve the quantity from.
    /// </param>
    /// <returns>
    /// The catch weight quantity reserved.
    /// </returns>
    public PdsCWInventQty pdsCWReserveNow(
        boolean         _set,
        InventSum       _inventSum,
        InventQty       _reserveNow,
        PdsCWInventQty  _cwReserveNow,
        boolean         _cwForceActual = false,
        InventDim       _inventDim = _inventSum.joinChild())
    {
        InventQty       qty;

        if (_set)
        {
            if (InventOnhandReserveCWReserveNowQtyNotConvertUnitFlight::instance().isEnabled())
            {
                qty = _reserveNow;
            }
            else
            {
                qty = this.convertQtyBetweenUnits(_reserveNow, sourceUnitId, targetUnitId, _inventSum.ItemId);
            }

            this.updateReserveNow(_inventSum, _inventDim, qty, _cwReserveNow, _cwForceActual);
        }

        qty = this.pdsCWOnhandReserved(inventDimFormSetup.movement(), _inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveNowParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set and/or get the catch weight quantity which will be reserved with dimension as parent.
    /// </summary>
    /// <param name="_set">
    /// Whether to attempt to reserve inventory or not.
    /// </param>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record to be used in the reservation process.
    /// </param>
    /// <param name="_reserveNow">
    /// The quantity which to attempt to reserve.
    /// </param>
    /// <param name="_cwReserveNow">
    /// The catch weight quantity which to attempt to reserve.
    /// </param>
    /// <param name="_cwForceActual">
    /// Whether to force the reservation or not; default false.
    /// </param>
    /// <returns>
    /// The catch weight quantity reserved.
    /// </returns>
    public PdsCWInventQty pdsCWReserveNowParent(
        boolean         _set,
        InventSum       _inventSum,
        InventQty       _reserveNow,
        PdsCWInventQty  _cwReserveNow,
        boolean         _cwForceActual = false)
    {
        InventQty       qty;

        if (_set)
        {
            if (InventOnhandReserveCWReserveNowQtyNotConvertUnitFlight::instance().isEnabled())
            {
                qty = _reserveNow;
            }
            else
            {
                qty = this.convertQtyBetweenUnits(_reserveNow, sourceUnitId, targetUnitId, _inventSum.ItemId);
            }

            this.updateReserveNow(_inventSum, _inventSum.joinParent(), qty, _cwReserveNow, _cwForceActual);
        }

        qty = this.pdsCWOnhandReserved(inventDimFormSetup.movement(), _inventSum.joinParent(), inventDimFormSetup.parmDimParmVisibleGrid().data());

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity that is reserved in the secondary unit.
    /// </summary>
    /// <param name="_set">
    ///    true if the quantity passed in <paramref name="_reserveNow" /> is reserved; otherwise, false.
    /// </param>
    /// <param name="_inventSum">
    ///    An <c>InventSum</c> record required to determine the quantity reserved.
    /// </param>
    /// <param name="_reserveNow">
    ///    The quantity that is reserved in the secondary unit.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record to reserve the quantity from.
    /// </param>
    /// <returns>
    ///    The quantity that is reserved in the secondary unit.
    /// </returns>
    public InventQty reserveNow(
        boolean         _set,
        InventSum       _inventSum,
        InventQty       _reserveNow,
        InventDim       _inventDim)
    {
        InventQty qty;

        boolean checkSameLotAndUpdateQty()
        {
            PmfQtyDataCarrier qtyDataCarrier;

            qtyDataCarrier = this.pdsCheckSameLotQuantities(_inventDim, qty);
            if (qtyDataCarrier)
            {
                qty = qtyDataCarrier.parmInventQty();
            }

            return qtyDataCarrier != null;
        }

        if (_set)
        {
            qty = this.convertQtyBetweenUnits(_reserveNow, targetUnitId, sourceUnitId, _inventSum.ItemId);

            if (qty <= this.onhandReservedInvent(
                        inventDimFormSetup.movement(),
                        _inventDim,
                        inventDimFormSetup.parmDimParmVisibleGrid().data())
                || checkSameLotAndUpdateQty())
            {
                this.updateReserveNow(_inventSum, _inventDim, qty);
            }
        }

        qty = this.onhandReservedInvent(inventDimFormSetup.movement(), _inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());

        return this.convertQtyBetweenUnits(qty, sourceUnitId, targetUnitId, _inventSum.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupUnitConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the unit of measure conversion.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item to convert.
    /// </param>
    /// <param name="_sourceUnitId">
    ///    The source unit of measure.
    /// </param>
    /// <param name="_targetUnitId">
    ///    The target unit of measure.
    /// </param>
    private void setupUnitConversion(
        ItemId              _itemId,
        UnitOfMeasureSymbol _sourceUnitId,
        UnitOfMeasureSymbol _targetUnitId)
    {
        if (   !unitConverterResetNeeded
            && (itemId == _itemId)
            && ((sourceUnitId == _sourceUnitId && targetUnitId == _targetUnitId)
            ||  (sourceUnitId == _targetUnitId && targetUnitId == _sourceUnitId)))
        {
            return;
        }

        unitConverterResetNeeded = false;

        itemId       = _itemId;
        sourceUnitId = _sourceUnitId;
        targetUnitId = _targetUnitId;

        InventDimId inventDimId;
        if (inventDimFormSetup)
        {
            inventDimId = inventDimFormSetup.movement().inventDimId();
        }
        else
        {          
            inventDimId = InventDim::findOrCreateBlank().inventDimId;
        }

        productSourceToTargetUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                               inventDimId,
                                                                                                               sourceUnitId,
                                                                                                               targetUnitId,
                                                                                                               NoYes::Yes);

        productTargetToSourceUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                               inventDimId,
                                                                                                               targetUnitId,
                                                                                                               sourceUnitId,
                                                                                                               NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitCallerByInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This is used to call back to caller in case the caller must be split based on changes to the
    ///    <c>InventTrans</c> table.
    /// </summary>
    private void splitCallerByInventTrans()
    {
        switch (onHandReserveFormCallerRecord.TableId)
        {
            case tableNum(WMSOrderTrans):
                WMSOrderTrans wmsOrderTrans = onHandReserveFormCallerRecord as wmsOrderTrans;
                wmsOrderTrans.splitByInventTrans();
                break;

            case tableNum(WMSOrder):
                WMSOrder wmsOrder = onHandReserveFormCallerRecord as WMSOrder;
                wmsOrderTrans = this.getWMSOrderTransForOutputOrder(wmsOrder);

                if (wmsOrderTrans)
                {
                    wmsOrderTrans.splitByInventTrans();
                }
                break;

            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCache</Name>
				<Source><![CDATA[
    private void updateFormCache(InventSum _inventSum, InventDim _inventDim)
    {
        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_inventSum.ItemId, _inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());

        FormDataSource formInventSum = FormDataUtil::getFormDataSource(_inventSum);
        formInventSum.mark(MarkRecordFlag);

        InventSum cacheInventSum = formInventSum.getFirst(MarkRecordFlag);

        cacheInventSum.OnOrder          = inventOnHandQty.onOrder();
        cacheInventSum.ReservOrdered    = inventOnHandQty.reservOrdered();
        cacheInventSum.ReservPhysical   = inventOnHandQty.reservPhysical();

        cacheInventSum.PdsCWOnOrder         = inventOnHandQty.pdsCWOnOrder();
        cacheInventSum.PdsCWReservOrdered   = inventOnHandQty.pdsCWReservOrdered();
        cacheInventSum.PdsCWReservPhysical  = inventOnHandQty.pdsCWReservPhysical();

        _inventSum.OnOrder              = cacheInventSum.OnOrder;
        _inventSum.ReservOrdered        = cacheInventSum.ReservOrdered;
        _inventSum.ReservPhysical       = cacheInventSum.ReservPhysical;

        _inventSum.PdsCWOnOrder         = cacheInventSum.PdsCWOnOrder;
        _inventSum.PdsCWReservOrdered   = cacheInventSum.PdsCWReservOrdered;
        _inventSum.PdsCWReservPhysical  = cacheInventSum.PdsCWReservPhysical;

        formInventSum.mark(0);
        formInventSum.reread();
        formInventSum.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves the most possible for the order line.
    /// </summary>
    /// <param name="_inventSum">
    ///    An <c>InventSum</c> record that is required to do the reservation.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions on which the reservation should be done.
    /// </param>
    public void updateReserveLine(InventSum _inventSum,
                                  InventDim _inventDim = _inventSum.joinChild()
        )
    {
        InventQty           qty = this.movementOnOrderInvent();
        PdsCWInventQty      cwQty = this.pdsCWMovementOnOrder();
        boolean             reserveSerialNum;
        NoYes               reserveOnOrdered = InventParameters::find().ReserveOnOrdered;
        InventIAvailability availability = InventAvailabilityProvider::findBySumDim(_inventSum, _inventDim).parmInventAvailability();

        qty = min(-qty, availability.availReservation(reserveOnOrdered));

        if (qty > 0)
        {
            cwQty = min(-cwQty,_inventSum.pdsCWAvailReservation(reserveOnOrdered));

            PmfQtyDataCarrier qtyDataCarrier = this.pdsCheckSameLotQuantities(_inventDim, qty, cwQty);
            if (!qtyDataCarrier)
            {
                return;
            }
            qty     = qtyDataCarrier.parmInventQty();
            cwQty   = qtyDataCarrier.parmCwQty();

            if (   #PdsCatchWeightEnabled
                && cwQty > 0)
            {
                if (_inventDim.InventSerialId
                            && _inventSum.PdsCWPhysicalInvent == 1
                            && cwQty == 1)
                {
                    qty = availability.availPhysical();

                    InventQty onOrder = -this.movementOnOrderInvent();
                    if (qty > onOrder)
                    {
                        ttsbegin;
                        InventMovement inventMov = inventDimFormSetup.movement();
                        inventMov.pdsAdjustInventoryQuantity(-(qty - onOrder));
                        inventMov.pdsUpdateBufferWithAdjustedQuantity();
                        ttscommit;
                    }
                    reserveSerialNum = true;
                }
                if (!reserveSerialNum)
                {
                    qty = PdsCatchWeight::minInventQty(_inventSum.ItemId,cwQty);
                }
            }
            this.updateReserveNow( _inventSum,
                                   _inventDim,
                                   this.reserveNow(false, _inventSum, 0, _inventDim) + qty,
                                   this.pdsCWReserveNow(false, _inventSum, 0, 0, false, _inventDim) + cwQty,
                                   reserveSerialNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves the whole quantity for the order line.
    /// </summary>
    /// <param name="_attrSel">
    /// A <c>TmpPdsBatchAttribSelect</c> record for which to validate the inventory.
    /// </param>
    public void updateReserveLot(
        TmpPdsBatchAttribSelect _attrSel = null
        )
    {
        InventMovement              movement = inventDimFormSetup.movement();

        boolean                     allow = true;
        PdsCWInventQty              cwQty;
        InventDim                   inventDim;
        TmpPdsBatchAttribSelect     attrSel;

        if (!movement)
        {
            return;
        }
        inventDim.data(movement.inventdim());

        if (movement.pdsCWItem())
        {
            //
            // Remove already existing reservations, to enable reserving the lot with the right CW quantity.
            //
            InventQty preReserveNow = this.onhandReservedInvent(movement, inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());
            PdsCWInventQty preCWReserveNow = this.pdsCWOnhandReserved(movement, inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());

            InventUpd_Reservation::updateReserveFromForm(
                movement.childBuffer().RecId
                    ? movement.childBuffer()
                    : movement.buffer(),
                inventDim,
                inventDimFormSetup.parmDimParmVisibleGrid().data(),
                - preReserveNow,
                InventMovSubType::None,
                - preCWReserveNow);

            transSumBuffer.reset();
        }

        InventQty qty = this.movementOnOrderInvent(movement);

        if (#PdsCatchWeightEnabled)
        {
            cwQty = this.pdsCWMovementOnOrder(movement);
        }

        if (qty < 0
            || (#PdsCatchWeightEnabled && cwQty < 0)
            )
        {
            this.updateReserveLotForNegativeQuantity(movement, qty, cwQty, _attrSel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateReserveLotForNegativeQuantity</Name>
				<Source><![CDATA[
    protected boolean allowUpdateReserveLotForNegativeQuantity(InventMovement _movement)
    {
        boolean allow = true;
        if (#PdsEnabled && _movement.inventTable().isItemBatchActivated())
        {
            PdsBatchDispCheck_Reserve pdsDispCheck = PdsBatchDispCheck_Reserve::construct();

            if (!pdsDispCheck.validateTransCheck(InventTrans::findTransId(_movement.transId())))
            {
                allow = false;
            }
        }
        return allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveLotForNegativeQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles reservation for negative quantities.
    /// </summary>
    /// <param name = "_movement">
    ///     An <c>InventMovement</c> that is used for calculations.
    /// </param>
    /// <param name = "_qty">
    ///     The quantity on order in the inventory unit.
    /// </param>
    /// <param name = "_cwQty">
    ///     The catch weight quantity on order.
    /// </param>
    /// <param name = "_attrSel">
    ///     A <c>TmpPdsBatchAttribSelect</c> record for which to validate the inventory.
    /// </param>
    protected void updateReserveLotForNegativeQuantity(
        InventMovement _movement,
        InventQty _qty,
        PdsCWInventQty _cwQty,
        TmpPdsBatchAttribSelect _attrSel
        )
    {
        TmpPdsBatchAttribSelect     attrSel;
        if (this.allowUpdateReserveLotForNegativeQuantity(_movement))
        {
            if (_movement.pdsSameLotReservation())
            {
                // pass positive quantities to same batch check
                PmfQtyDataCarrier qtyDataCarrier = this.pdsCheckSameLotQuantities(_movement.inventdim(), -_qty, -_cwQty);
                if (!qtyDataCarrier)
                {
                    return;
                }

                // switch the sign back; same batch check should return positive quantities, and
                // pdsUpdSameLotReserve expects negative ones for increasing the reservation
                _qty     = -qtyDataCarrier.parmInventQty();
                _cwQty   = -qtyDataCarrier.parmCwQty();
                if (_qty < 0 || (#PdsCatchWeightEnabled && _cwQty < 0))
                {
                    InventUpd_Reservation::pdsUpdSameLotReserve(
                            _movement.childBuffer().RecId    ?
                                _movement.childBuffer()      :
                                _movement.buffer(),
                            _qty,
                            this.getInventMovSubType(_movement),
                            _cwQty);
                }
            }
            else
            {
                attrSel.setTmpData(_attrSel);
                select firstonly attrSel;
                InventUpd_Reservation::updateReserveBuffer(_movement.childBuffer().RecId ?
                                                               _movement.childBuffer()       :
                                                               _movement.buffer(),
                                                               _qty,
                                                               this.getInventMovSubType(_movement),
                                                               _cwQty,
                                                               attrSel ? true : false,
                                                               _attrSel
                                                               );
            }
            this.splitCallerByInventTrans();
        }
        this.clearLineCache(null,null,null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves the quantity that is specified in the <paramRef cref="_reserveNow"/> parameter.
    /// </summary>
    /// <param name="_inventSum">
    ///    An <c>InventSum</c> record that is required for performance reasons.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimensions on which the reservation should be done.
    /// </param>
    /// <param name="_reserveNow">
    ///    The quantity that should be reserved. This quantity should be in the inventory unit of measure.
    /// </param>
    /// <param name="_cwReserveNow">
    ///    The catch weight quantity that should be reserved; optional.
    /// </param>
    /// <param name="_cwForceActual">
    ///    Boolean indicating whether the <parmRef cref="_reserveNow"/> quantity should be reserved instead of the minimum.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    The record was updated by another user. Therefore, an update conflict occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    The method could not recover from an update conflict.
    /// </exception>
    void updateReserveNow(
        InventSum _inventSum,
        InventDim _inventDim,
        InventQty _reserveNow,
        PdsCWInventQty  _cwReserveNow = 0,
        boolean         _cwForceActual = false
        )
    {
        #OCCRetryCount

        if (_reserveNow < 0)
        {
            error("@SYS4200");
            return;
        }

        if (_cwReserveNow < 0)
        {
            error("@PDS57");  //A negative catch weight quantity cannot be reserved
            return;
        }

        InventMovement movement = inventDimFormSetup.movement();

        if (!movement)
        {
            return;
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        InventQty       preReserveNow   = this.onhandReservedInvent(movement, _inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());
        PdsCWInventQty  preCWReserveNow = this.pdsCWOnhandReserved(inventDimFormSetup.movement(), _inventDim, inventDimFormSetup.parmDimParmVisibleGrid().data());

        if (_reserveNow == preReserveNow  && _cwReserveNow == preCWReserveNow)
        {
            return;
        }

        try
        {
            this.performReserveNow(movement,_inventSum, _inventDim, _reserveNow, preReserveNow, preCWReserveNow, _cwReserveNow, _cwForceActual);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performReserveNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reserves the quantity that is specified in the <paramRef cref="_reserveNow"/> parameter.
    /// </summary>
    /// <param name="_movement">
    ///    The <c>InventMovement</c> used for the calculations.
    /// </param>
    /// <param name="_inventSum">
    ///    An <c>InventSum</c> record that is required for performance reasons.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimensions on which the reservation should be done.
    /// </param>
    /// <param name="_reserveNow">
    ///    The quantity that should be reserved. This quantity should be in the inventory unit of measure.
    /// </param>
    /// <param name="_preReserveNow">
    ///    The quantity that is already reserved. This quantity should be in the inventory unit of measure.
    /// </param>
    /// <param name="_preCWReserveNow">
    ///    The catch weight quantity that is already reserved.
    /// </param>
    /// <param name="_cwReserveNow">
    ///    The catch weight quantity that should be reserved; optional.
    /// </param>
    /// <param name="_cwForceActual">
    ///    Boolean indicating whether the <parmRef cref="_reserveNow"/> quantity should be reserved instead of the minimum.
    /// </param>
    [Wrappable]
    final protected void performReserveNow(
        InventMovement _movement,
        InventSum _inventSum,
        InventDim _inventDim,
        InventQty _reserveNow,
        InventQty       _preReserveNow,
        PdsCWInventQty  _preCWReserveNow,
        PdsCWInventQty  _cwReserveNow,
        boolean         _cwForceActual
        )
    {
        this.performReservation(
                _inventDim,
                _preReserveNow,
                _reserveNow,
                _preCWReserveNow,
                _cwReserveNow,
                _cwForceActual);

        this.splitCallerByInventTrans();
        this.clearLineCache(_movement,_inventDim,inventDimFormSetup.parmDimParmVisibleGrid().data());
        this.updateFormCache(_inventSum,_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserves the quantity that is specified in the <paramRef cref="_reserveNow"/> parameter taking into account already reserved quantity specified in the <paramRef cref="_preReserveNow"/> parameter.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimensions on which the reservation should be done.
    /// </param>
    /// <param name="_preReserveNow">
    ///    The quantity that is already reserved. This quantity should be in the inventory unit of measure.
    /// </param>
    /// <param name="_reserveNow">
    ///    The quantity that should be reserved. This quantity should be in the inventory unit of measure.
    /// </param>
    /// <param name="_preCWReserveNow">
    ///    The catch weight quantity that is already reserved.
    /// </param>
    /// <param name="_cwReserveNow">
    ///    The catch weight quantity that should be reserved.
    /// </param>
    /// <param name="_cwForceActual">
    ///    Boolean indicating whether the <parmRef cref="_reserveNow"/> quantity should be reserved instead of the minimum.
    /// </param>
    protected void performReservation(
        InventDim       _inventDim,
        InventQty       _preReserveNow,
        InventQty       _reserveNow,
        PdsCWInventQty  _preCWReserveNow,
        PdsCWInventQty  _cwReserveNow,
        boolean         _cwForceActual)
    {
        if (inventDimFormSetup.movement().pdsCWItem())
        {
            InventUpd_Reservation::updateReserveFromForm(
                inventDimFormSetup.movement().childBuffer().RecId
                    ? inventDimFormSetup.movement().childBuffer()
                    : inventDimFormSetup.movement().buffer(),
                _inventDim,
                inventDimFormSetup.parmDimParmVisibleGrid().data(),
                - _preReserveNow,
                InventMovSubType::None,
                - _preCWReserveNow,
                _cwForceActual);

            InventUpd_Reservation::updateReserveFromForm(
                inventDimFormSetup.movement().childBuffer().RecId
                    ? inventDimFormSetup.movement().childBuffer()
                    : inventDimFormSetup.movement().buffer(),
                _inventDim,
                inventDimFormSetup.parmDimParmVisibleGrid().data(),
                _reserveNow,
                InventMovSubType::None,
                _cwReserveNow,
                _cwForceActual);
        }
        else
        {
            InventUpd_Reservation::updateReserveFromForm(inventDimFormSetup.movement().childBuffer().RecId ?
                inventDimFormSetup.movement().childBuffer()       :
                inventDimFormSetup.movement().buffer(),
                _inventDim,
                inventDimFormSetup.parmDimParmVisibleGrid().data(),
                _reserveNow - _preReserveNow,
                this.getInventMovSubType(inventDimFormSetup.movement()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventOnhandReserve construct()
    {
        return new InventOnhandReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>InventOnHandReserve</c> class for use in a form.
    /// </summary>
    /// <param name="_formRun">
    ///    The form to use with the class
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventOnHandReserve</c> class.
    /// </returns>
    static public InventOnhandReserve newFromFormRun(FormRun _formRun)
    {
        InventOnhandReserve inventOnhandReserve = InventOnhandReserve::construct();

        inventOnhandReserve.parmFormRun(_formRun);

        return inventOnhandReserve;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>