<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JournalCheckPost</c> class is used to check and post a journal.
/// </summary>
/// <remarks>
/// The <c>JournalCheckPost</c> class only posts in inventory. The module specific implementation must
/// inherit either the <c>JournalCheckPost</c> or the <c>JournalCheckPostLedger</c> class depending on
/// whether ledger posting is required.
/// </remarks>
// This class is used to check or post journals that dosen't have to be posted in the ledger module
abstract class JournalCheckPost extends JournalRunBaseBatch
{
    #define.runInit(0)
    #define.runLoad(1)
    #define.runCheck(2)
    #define.runPostInit(5)
    #define.runPost(6)
    #define.runPostEnd(7)
    #define.runEnd(8)

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        journalCheckPostType,
        autoBlock,
        journalId,
        transferErrors,
        showInfoResult,
        throwCheckFailed,
        numOfPostedLines,
        numOfTransferLines,
        numOfDeletedLines,
        checkJournalResult,
        transferJournalId
    #ENDMACRO

    // parameters
    JournalCheckPostType    journalCheckPostType;
    boolean                 autoBlock;
    tableId                 journalTableId;
    JournalId               journalId;
    JournalTransferErrors   transferErrors;
    boolean                 showInfoResult;
    boolean                 throwCheckFailed;
    boolean                 deleteErrors;
    internal protected boolean skipBatchRetryable;

    // Dialog
    Dialog                  dialog;
    DialogField             dialogTransferErrors;

    // Global objects
    JournalTableData        journalTableData;
    JournalTransData        journalTransDataThrow;

    // status variable
    Integer                 progressCounter;
    Integer                 logPoint;
    JournalId               transferJournalId;

    // Update result
    Integer                 numOfPostedLines;
    Integer                 numOfTransferLines;
    Integer                 numOfDeletedLines;
    boolean                 checkJournalResult;

    int64                   runInitElapsedMilliseconds;
    int64                   runLoadElapsedMilliseconds;
    int64                   runCheckElapsedMilliseconds;
    int64                   runPostInitElapsedMilliseconds;
    int64                   runPostElapsedMilliseconds;
    int64                   runPostEndElapsedMilliseconds;
    int64                   runEndElapsedMilliseconds;
    int64                   commitElapsedMilliseconds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTransferErrors</Name>
				<Source><![CDATA[
    protected boolean allowTransferErrors()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return strFmt("@SYS62637",this.parmJournalId());
        }

        return strFmt("@SYS62638",this.parmJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the journal.
    /// </summary>
    /// <param name="_journalTransList">
    ///    A list of journal lines.
    /// </param>
    /// <returns>
    ///    true if the journal is valid; otherwise, false.
    /// </returns>
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        JournalTransData    journalTransData = _journalTransList.journalTransData();
        boolean             ok = true;
        // <GIN>
        ProjJournalTable    projJournalTableLoc;
        InventJournalTable  inventJournalTableLoc;
        JournalTransMap     journalTrans;
        boolean             canContinue = true;
        boolean             isTaxParametersMarked = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        while (_journalTransList.next())
        {
            setPrefix(this.prefixJournalTransLine(journalTransData));

            if (! this.checkTrans(journalTransData))
            {
                journalTableData.journalErrorTransList().addInfolog(this,journalTransData);

                if (journalTableData.journalVoucherNum() && journalTransData.journalTrans().Voucher)
                {
                    if (! journalTableData.journalErrorVoucherList().find(journalTransData.journalTrans().Voucher))
                    {
                        checkFailed("@SYS69030");
                        journalTableData.journalErrorVoucherList().addInfolog(this,journalTransData);
                    }
                }

                ok = false;
            }

            //<GIN>
            if (ok && isTaxParametersMarked)
            {
                projJournalTableLoc   = ProjJournalTable::find(journalTableData.journalTable().JournalId);
                inventJournalTableLoc = InventJournalTable::find(journalTableData.journalTable().JournalId);
                journalTrans          = journalTransData.journalTrans();
                if (projJournalTableLoc && journalTrans.TableId == tableNum(ProjJournalTrans) && (projJournalTableLoc.JournalType == ProjJournalType::Hour || projJournalTableLoc.JournalType == ProjJournalType::Revenue))
                {
                    canContinue = ProjJournalCheckPost::validate_IN(_journalTransList, journalTableData);
                }
                else if ( inventJournalTableLoc && journalTrans.TableId == tableNum(InventJournalTrans) && (inventJournalTableLoc.JournalType == InventJournalType::project || inventJournalTableLoc.JournalType == InventJournalType::Movement))
                {
                    canContinue = InventJournalCheckPost::validate_IN(_journalTransList, journalTableData);
                }
            }
            //</GIN>

            if (ok)
            {
                ok = InventJournalCheckPost::validateCountingReasonCode(_journalTransList, journalTableData);
            }
        }

        // <GIN>
        if (isTaxParametersMarked && !canContinue)
        {
            this.parmThrowCheckFailed(true);
            ok = false;
        }
        // </GIN>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData  _journalTransData)
    {
        this.progressUpdate(_journalTransData);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTransfer</Name>
				<Source><![CDATA[
    protected void createJournalTransfer()
    {
        JournalTableData    toJournalTableData;
        JournalTableMap     fromJournalTable;
        JournalTableMap     toJournalTable;
        JournalTransMap     journalTrans;

        if (transferErrors && this.journalErrorListCount() > 0)
        {
            fromJournalTable    = journalTableData.journalTable();

            toJournalTable      = fromJournalTable.data();                                  // copy
            toJournalTableData  = JournalTableData::newTable(journalTableData.journalStatic().journalTable());
            toJournalTableData.copyTotalTo(toJournalTable);                                 // clear total fields
            toJournalTableData.journalTable(toJournalTable);

            toJournalTable.JournalId  = toJournalTableData.nextJournalId();

            if (journalTableData.journalTransList().first())
            {
                do
                {
                    journalTrans = journalTableData.journalTransList().item();
                    if (this.hasTransError(journalTrans))
                    {
                        this.transferErrorJournalLine(journalTrans, toJournalTableData, toJournalTable);
                    }
                }
                while (journalTableData.journalTransList().next());
            }

            toJournalTable.JournalIdOriginal = fromJournalTable.JournalId;
            toJournalTable.SystemBlocked     = NoYes::No;
            toJournalTable.insert();

            transferJournalId = toJournalTable.JournalId;

            toJournalTableData.journalErrorTransList().insertDb();

            this.updateTransferRelations(toJournalTableData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePostedLines</Name>
				<Source><![CDATA[
    protected void deletePostedLines()
    {
        JournalTransList journalTransList;
        JournalTransMap  journalTrans;

        if (this.mustDeletePostedLines(journalTableData.journalTable()))
        {
            journalTransList = journalTableData.journalTransList();

            if (journalTransList.first())
            {
                do
                {
                    journalTrans = journalTransList.item().data();
                    if (! this.hasTransError(journalTrans))
                    {
                        journalTableData.addTotal(journalTrans,true);
                        journalTrans.reread();
                        journalTrans.delete();

                        numOfDeletedLines += 1;
                    }
                }
                while (journalTransList.next());
            }

            if (numOfDeletedLines)
            {
                journalTableData.journalTable().doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeletePostedLines</Name>
				<Source><![CDATA[
    internal boolean mustDeletePostedLines(JournalTableMap _jourTable)
    {
        return _jourTable.DeletePostedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            dialogTransferErrors    = dialog.addField(extendedTypeStr(JournalTransferErrors));

            if (this.allowTransferErrors())
            {
                dialogTransferErrors.value(transferErrors);
            }
            else
            {
                dialog.dialogForm().tab().tabAutoChange(false);
                dialogTransferErrors.allowEdit(false);
                dialogTransferErrors.value(false);
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dialogTransferErrors)
        {
            this.parmTransferErrors(dialogTransferErrors.value());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedErrorList</Name>
				<Source><![CDATA[
    protected boolean hasChangedErrorList()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedNumOfLines</Name>
				<Source><![CDATA[
    protected boolean hasChangedNumOfLines()
    {
        return (this.numOfTransferLines() > 0 || this.numOfDeletedLines() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransError</Name>
				<Source><![CDATA[
    protected boolean hasTransError(JournalTransMap _journalTrans)
    {
        return (journalTableData.journalErrorTransList().find(_journalTrans.LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoResult</Name>
				<Source><![CDATA[
    protected void infoResult()
    {
        int x;
        if (! showInfoResult)
        {
            return;
        }

        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            if (! journalTableData.journalErrorTransList().count() && checkJournalResult)
            {
                info("@SYS17146");
            }
            else
            {
                info("@SYS62651");
                x = journalTableData.journalErrorTransList().count();
                if (journalTableData.journalErrorTransList().count())
                {
                    info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
            }
        }
        else
        {
            if (journalTableData.journalTable().Posted)
            {
                info("@SYS5815");
            }
            else
            {
                info("@SYS23002");
                if (journalTableData.journalErrorTransList().count())
                {
                    info(strFmt("@SYS62650",journalTableData.journalErrorTransList().count()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalErrorListCount</Name>
				<Source><![CDATA[
    public Integer journalErrorListCount()
    {
        return journalTableData.journalErrorTransList().count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPoint</Name>
				<Source><![CDATA[
    public Integer logPoint(Integer _logPoint = logPoint)
    {
        logPoint  = _logPoint;
        return logPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        autoBlock       = true;
        showInfoResult  = false;
        deleteErrors    = true;
        skipBatchRetryable = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfDeletedLines</Name>
				<Source><![CDATA[
    protected Integer numOfDeletedLines()
    {
        return numOfDeletedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPostedLines</Name>
				<Source><![CDATA[
    protected Integer numOfPostedLines()
    {
        if (this.journalErrorListCount() ==  0 || transferErrors)
        {
            return numOfPostedLines;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfTransferLines</Name>
				<Source><![CDATA[
    public Integer numOfTransferLines()
    {
        return numOfTransferLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        TableName   journalTableName = tableId2name(journalTableId);    // Store element names and not IDs in packed data
        return [#CurrentVersion, #CurrentList, journalTableName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packJournalErrorTransList</Name>
				<Source><![CDATA[
    protected container packJournalErrorTransList()
    {
        return journalTableData ? journalTableData.journalErrorTransList().pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packJournalErrorVoucherList</Name>
				<Source><![CDATA[
    protected container packJournalErrorVoucherList()
    {
        return journalTableData ? journalTableData.journalErrorVoucherList().pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoBlock</Name>
				<Source><![CDATA[
    public boolean parmAutoBlock(boolean _autoBlock = autoBlock)
    {
        autoBlock = _autoBlock;
        return autoBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckJournalResult</Name>
				<Source><![CDATA[
    public boolean parmCheckJournalResult()
    {
        return checkJournalResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalCheckPostType</Name>
				<Source><![CDATA[
    public JournalCheckPostType parmJournalCheckPostType(JournalCheckPostType _journalCheckPostType = journalCheckPostType)
    {
        journalCheckPostType = _journalCheckPostType;
        return journalCheckPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableId</Name>
				<Source><![CDATA[
    public TableId parmJournalTableId(TableId _tableId = journalTableId)
    {
        journalTableId = _tableId;
        return journalTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoResult</Name>
				<Source><![CDATA[
    public boolean parmShowInfoResult(boolean _showInfoResult = showInfoResult)
    {
        showInfoResult = _showInfoResult;
        return showInfoResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowCheckFailed</Name>
				<Source><![CDATA[
    public boolean parmThrowCheckFailed(boolean _throwCheckFailed = throwCheckFailed)
    {
        throwCheckFailed = _throwCheckFailed;
        return throwCheckFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferErrors</Name>
				<Source><![CDATA[
    public JournalTransferErrors parmTransferErrors(JournalTransferErrors _transferErrors = transferErrors)
    {
        transferErrors = _transferErrors;
        return transferErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes any additional state variables based on the journal header.
    /// </summary>
    /// <param name="_journalTable">The record to initialize the instance from.</param>
    public void initFromJournalTable(Common _journalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JournalCheckPost</c> class used for posting or validating a journal.
    /// </summary>
    /// <param name="_autoBlock">A Boolean value that indicates whether the journal should be automatically blocked during posting.</param>
    /// <param name="_showInfoResult">A Boolean value that indicates whether any errors should be shown in the Infolog.</param>
    /// <param name="_journalCheckPostType">A <c>JournalCheckPostType</c> enumeration value that indicates whether the new instance is used for posting or validating the journal.</param>
    /// <param name="_tableId">The table ID of the journal table.</param>
    /// <param name="_journalId">The ID of the journal to validate or post.</param>
    /// <param name="_journalTransData">An instance of <c>JournalTransData</c> class referencing the journal line records; optional.</param>
    public void initializeJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        TableId                 _tableId,
        JournalId               _journalId,
        JournalTransData        _journalTransData = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    protected void postJournal(JournalTransList _journalTransList)
    {
        JournalTransData    journalTransData = _journalTransList.journalTransData();

        while (_journalTransList.next())
        {
            if (! journalTableData.journalErrorTransList().find(_journalTransList.item().LineNum))
            {
                setPrefix(this.prefixJournalTransLine(journalTransData));

                this.setJournalTransDataThrow(journalTransData);

                this.postTrans(journalTransData);

                numOfPostedLines++;
            }
        }

        this.setJournalTransDataThrow(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        this.progressUpdate(_journalTransData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefix</Name>
				<Source><![CDATA[
    protected str prefix()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return "@SYS28450" + ' - ' + "@SYS6790";
        }

        return "@SYS5943" + ' - ' + "@SYS6790";
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressCaptionCheck</Name>
				<Source><![CDATA[
    protected str progressCaptionCheck()
    {
        return strFmt("@SYS26909",this.parmJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressCaptionPost</Name>
				<Source><![CDATA[
    protected str progressCaptionPost()
    {
        return strFmt("@SYS26910",this.parmJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    /*MAN
    This method is called to initialize the Progress object in runbase.
    */
    public void progressInit(
        str         _caption,
        int64       _total,
        str         _animation      = '',
        int         _numOfBars      = 1,
        FormBuildControl _embedded  = null)
    {
        super(_caption,_total,_animation,_numOfBars);

        progress.updateInterval(3);
        progressCounter = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressText</Name>
				<Source><![CDATA[
    protected str progressText(JournalTransData _journalTransData)
    {
        return strFmt("@SYS26913",_journalTransData.journalTrans().LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(
        JournalTransData _journalTransData,
        str              _text   = this.progressText(_journalTransData))
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(this.progressText(_journalTransData));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        Integer runLevel;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(JournalCheckPost));
        using (var runActivityContext = instrumentationLogger.journalCheckPostActivities().run())
        {
            try
            {
                setPrefix(this.prefix());
                setPrefix(this.prefixJournalTable(journalId));

                numOfPostedLines = 0;
                numOfTransferLines = 0;
                numOfDeletedLines = 0;
                checkJournalResult = false;
                transferJournalId = '';

                ttsbegin;
                if (runLevel == #runInit)
                {
                    using (var runInitContext = instrumentationLogger.journalCheckPostActivities().runInit())
                    {
                        runLevel = this.runInit();
                    }
                }

                if (this.isInBatch())
                {
                    CostManagementInstrumentationJournalCheckPostActivities::batchJobId(runActivityContext, this.parmCurrentBatch().BatchJobId);
                }
                CostManagementInstrumentationJournalCheckPostActivities::journalRecId(runActivityContext, journalTableData.journalTable().RecId);

                if (runLevel == #runLoad)
                {
                    using (var runLoadContext = instrumentationLogger.journalCheckPostActivities().runLoad())
                    {
                        runLevel = this.runLoad();
                    }
                }

                if (runLevel == #runCheck)
                {
                    using (var runCheckContext = instrumentationLogger.journalCheckPostActivities().runCheck())
                    {
                        runLevel = this.runCheck();
                    }
                }

                if (runLevel == #runPostInit)
                {
                    using (var runPostInitContext = instrumentationLogger.journalCheckPostActivities().runPostInit())
                    {
                        runLevel = this.runPostInit();
                    }
                }

                if (runLevel == #runPost)
                {
                    using (var runPostContext = instrumentationLogger.journalCheckPostActivities().runPost())
                    {
                        runLevel = this.runPost();
                    }
                }

                if (runLevel == #runPostEnd)
                {
                    using (var runPostEndContext = instrumentationLogger.journalCheckPostActivities().runPostEnd())
                    {
                        runLevel = this.runPostEnd();
                    }
                }

                if (runLevel == #runEnd)
                {
                    using (var runEndContext = instrumentationLogger.journalCheckPostActivities().runEnd())
                    {
                        runLevel = this.runEnd();
                    }
                }
                ttscommit;
                this.logMeasures(instrumentationLogger);
                this.infoResult();

                // <GEERU>
                this.runPrint_RU();
                // </GEERU>
            }
            catch (Exception::Deadlock)
            {
                runLevel = this.runDeadLock();
                this.logMeasures(instrumentationLogger);
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                this.logMeasures(instrumentationLogger);
                this.checkIsJournalTableModified();
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        runLevel = this.runUpdateConflict();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                this.logMeasures(instrumentationLogger);
                if (journalTransDataThrow)
                {
                    error("@SYS69433");
                    journalTableData.journalErrorTransList().addInfolog(this,journalTransDataThrow);
                }

                throw Exception::Error;
            }
            finally
            {
                var journalTable = journalTableData.journalTable();

                journalTable.reread();
                if (journalTable.RecId)
                {
                    this.unBlockJournal();
                    this.writeErrors();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCheck</Name>
				<Source><![CDATA[
    protected Integer runCheck()
    {
        checkJournalResult = this.checkJournal(journalTableData.journalTransList());

        if (! checkJournalResult)
        {
            if (throwCheckFailed)
            {
                throw error("@SYS18447");
            }

            if (! transferErrors)
            {
                return #runEnd;
            }
        }

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            return #runPostInit;
        }

        return  #runEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeadLock</Name>
				<Source><![CDATA[
    protected Integer runDeadLock()
    {
        return #runInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockJournal</Name>
				<Source><![CDATA[
    private void unBlockJournal()
    {
        if (autoBlock || this.isInBatch())
        {
            journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeErrors</Name>
				<Source><![CDATA[
    protected void writeErrors()
    {
        if (deleteErrors)
        {
            journalTableData.journalErrorTransList().deleteDb();
        }

        journalTableData.journalErrorTransList().insertDb();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    protected Integer runEnd(boolean _deleteErrors = true)
    {
        deleteErrors = _deleteErrors;

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInit</Name>
				<Source><![CDATA[
    protected Integer runInit()
    {
        journalTableData = JournalTableData::newTable(JournalStatic::findJournalTableId(journalTableId,journalId,true));

        if (! this.validate() || !this.validateJournalTable(journalTableData.journalTable()))
        {
            throw error("@SYS21628");
        }

        if (autoBlock)
        {
            journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::System);
        }

        journalTableData.journalErrorTransList().selectDbCalled(true);
        journalTableData.journalErrorVoucherList().selectDbCalled(true);

        logPoint     = infologLine();

        return #runLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLoad</Name>
				<Source><![CDATA[
    protected Integer runLoad(Voucher _voucher = '')
    {
        journalTableData.journalTransList().initDb(_voucher);

        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            this.progressInit(this.progressCaptionCheck(),journalTableData.journalTransList().count(),#AviFindFile);
        }
        else
        {
            this.progressInit(this.progressCaptionPost(),journalTableData.journalTransList().count()*2,#AviUpdate);
        }

        return #runCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    protected Integer runPost()
    {
        journalTableData.journalTransList().reset();

        this.postJournal(journalTableData.journalTransList());

        return #runPostEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEnd</Name>
				<Source><![CDATA[
    protected Integer runPostEnd()
    {
        if (this.numOfPostedLines() > 0)
        {
            this.createJournalTransfer();
            this.updateJournalTablePosted(journalTableData.journalTable());       // update journaltable with posted data

            this.deletePostedLines();
        }

        return #runEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostInit</Name>
				<Source><![CDATA[
    protected Integer runPostInit()
    {
        journalTableData.journalTransList().reset();

        numOfPostedLines = 0;

        return #runPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrint_RU</Name>
				<Source><![CDATA[
    protected void runPrint_RU()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdateConflict</Name>
				<Source><![CDATA[
    protected Integer runUpdateConflict()
    {
        return #runInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTransDataThrow</Name>
				<Source><![CDATA[
    protected void setJournalTransDataThrow(JournalTransData _journalTransData)
    {
        journalTransDataThrow = _journalTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorJournalLine</Name>
				<Source><![CDATA[
    protected void transferErrorJournalLine(
        JournalTransMap     _journalTrans,
        JournalTableData    _toJournalTableData,
        JournalTableMap     _toJournalTable)
    {
        JournalError        journalError;
        JournalInfoAction   journalInfoAction;
        Integer             x;

        journalTableData.addTotal(_journalTrans,true);

        _journalTrans.JournalId = _toJournalTable.JournalId;
        _journalTrans.doUpdate();

        numOfTransferLines++;

        _toJournalTableData.addTotal(_journalTrans,false);

        // copy infolog

        if (journalTableData.journalErrorTransList().find(_journalTrans.LineNum))
        {
            journalError = journalTableData.journalErrorTransList().item().data();

            journalInfoAction = new JournalInfoAction();
            journalInfoAction.unpack(journalError.InfologAction);

            for (x=journalInfoAction.infoLineFrom(); x<= journalInfoAction.infoLineTo();x++)
            {
                infolog.setAction(x);
            }

            journalError.JournalId      = _toJournalTable.JournalId;
            journalError.Infolog        = JournalError::replacePrefix(journalError.Infolog,this.prefixJournalTable(journalId),this.prefixJournalTable(journalError.JournalId));
            journalError.InfologAction  = JournalInfoAction::newJournalTrans(_journalTrans).pack();
            _toJournalTableData.journalErrorTransList().add(journalError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalId</Name>
				<Source><![CDATA[
    JournalId transferJournalId()
    {
        return transferJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        TableName       journalTableName;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, journalTableName] = _packedClass;
                journalTableId      = tableName2id(journalTableName);
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        _journalTable.Posted             = NoYes::Yes;
        _journalTable.PostedDateTime     = DateTimeUtil::getSystemDateTime();
        _journalTable.PostedUserId       = curUserId();
        _journalTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferRelations</Name>
				<Source><![CDATA[
    protected void updateTransferRelations(JournalTableData _toJournalTableData)
    {
        info(strFmt("@SYS62654",journalTableData.journalErrorTransList().count(),_toJournalTableData.journalTable().JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalTable</Name>
				<Source><![CDATA[
    public boolean validateJournalTable(JournalTableMap _journalTable)
    {
        if (! journalId)
        {
            return checkFailed("@SYS19282");
        }

        if (! _journalTable.RecId)
        {
            return checkFailed(strFmt("@SYS62511",journalId));
        }

        if (_journalTable.Posted)
        {
            return checkFailed(strFmt("@SYS25365",journalId));
        }

        if (! autoBlock && ! _journalTable.SystemBlocked)
        {
            return checkFailed(strFmt("@SYS21619",journalId));
        }
        
        if (journalTableData)
        {
            return journalTableData.validateWorkflowStatus(this.journalCheckPostType);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25837";
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologPack</Name>
				<Source><![CDATA[
    public static container infologPack(
        JournalTransMap     _journalTrans,
        Integer             _logPoint)
    {
        container               c;
        Integer                 line;
        Exception               exceptionNow;
        Exception               exceptionHigh;

        JournalInfoAction       infoActionLine;
        SysInfologEnumerator    enum;
        SysInfoAction           sysInfoAction;

        line = infologLine();

        infoActionLine  = JournalInfoAction::newInfologPack(_journalTrans,_logPoint+1,line);

        c = infolog.cut(_logPoint+1,line);
        enum = SysInfologEnumerator::newData(c);

        while (enum.moveNext())
        {
            exceptionNow = enum.currentException();
            if (exceptionNow > exceptionHigh)
            {
                exceptionHigh = exceptionNow;
            }

            sysInfoAction = JournalCheckPost::makeSysInfoAction(enum, infoActionLine);

            infolog.add(exceptionNow, enum.currentMessage(), enum.currentHelpUrl(), sysInfoAction, false);
        }

        return [exceptionHigh, c, infoActionLine.pack(),line];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInstrumentationMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs instrumentation measures.
    /// </summary>
    [SysObsolete('This method is obsolete and should not be used anymore.', false, 30\06\2020)]
    protected void logInstrumentationMeasures()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs measures.
    /// </summary>
    /// <param name = "_instrumentationLogger">The logger for instrumentation purposes.</param>
    private void logMeasures(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        Set instrumentationPropertyCollection = new Set(Types::Class);
        var loggerProperties = _instrumentationLogger.properties();

        instrumentationPropertyCollection.add(loggerProperties.addCount(staticMethodStr(xSession, currentRetryCount), xSession::currentRetryCount()));
        instrumentationPropertyCollection.add(loggerProperties.addCount(methodStr(JournalCheckPost, numOfPostedLines), this.numOfPostedLines()));
        instrumentationPropertyCollection.add(loggerProperties.addCount(methodStr(JournalCheckPost, numOfTransferLines), this.numOfTransferLines()));

        _instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeSysInfoAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Make SysInfoAction object based on the current action class.
    /// </summary>
    /// <param name="enum">
    /// SysInfolog enumerator
    /// </param>
    /// <param name="infoActionLine">
    ///  A <c>JournalInfoAction</c> object
    /// </param>
    /// <returns>
    /// A  <c>SysInfoAction</c> object
    /// </returns>
    public static SysInfoAction makeSysInfoAction(SysInfologEnumerator enum, JournalInfoAction infoActionLine)
    {
        ClassId         classId = enum.currentActionClassId();
        SysInfoAction   sysInfoAction;

        if (classId && classId != classNum(SysInfoAction_Editor))
        {
            if (classId == classNum(AifFault))
            {
                sysInfoAction = new AifFault(1, "", "");
            }
            else
            {
                DictClass dictClass = new DictClass(classId);
                sysInfoAction = dictClass.makeObject();
            }

            if (sysInfoAction)
            {
                sysInfoAction.unpack(enum.currentActionClassData());
            }
        }
        else
        {
            sysInfoAction = infoActionLine;
        }

        return sysInfoAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsJournalTableModified</Name>
				<Source><![CDATA[
    protected void checkIsJournalTableModified()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>