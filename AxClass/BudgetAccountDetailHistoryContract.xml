<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAccountDetailHistoryContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAccountDetailHistoryContract</c> class is used as a data contract for <c>BundgetControlAccountDetailHistory</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(BudgetAccountDetailHistoryUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly),
    SysOperationGroupAttribute('ViewByGroup', "@SYS307661", '1'),
    SysOperationGroupAttribute('BudgetCycleGroup', "@SYS314460", '2'),
    SysOperationGroupAttribute('FiscalPeriodGroup', "@SYS41297", '3'),
    SysOperationGroupAttribute('MainAccountGroup', "@SYS129875", '4')
]
class BudgetAccountDetailHistoryContract implements SysOperationValidatable
{
    Name                                budgetDimensionFocus;
    BudgetModelId                       budgetModel;
    boolean                             includeCarryForward;
    TransDate                           budgetFiscalPeriodStart;
    TransDate                           budgetFiscalPeriodEnd;
    MainAccountNum                      fromAccount;
    MainAccountNum                      toAccount;
    RefRecId                            budgetCycleTimeSpanRecId;
    BudgetCycleName                     budgetCycleName;
    BudgetCycleTimeSpanName             budgetCycleTimeSpanName;
    BudgetControlStatisticsPeriodOption budgetPeriodType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBudgetCycleName</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BudgetCycleName'),
        SysOperationLabelAttribute(literalStr("@SYS314460")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020053")),
        SysOperationGroupMemberAttribute('BudgetCycleGroup'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public BudgetCycleName parmBudgetCycleName(BudgetCycleName _budgetCycleName = budgetCycleName)
    {
        budgetCycleName = _budgetCycleName;
        return budgetCycleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleTimeSpanName</Name>
				<Source><![CDATA[
        [   DataMemberAttribute('BudgetCycleTimeSpanName'),
        SysOperationLabelAttribute(literalStr("@SYS314453")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020051")),
        SysOperationDisplayOrderAttribute('3')
    ]
    public BudgetCycleTimeSpanName parmBudgetCycleTimeSpanName(BudgetCycleTimeSpanName _budgetCycleTimeSpanName = budgetCycleTimeSpanName)
    {
        budgetCycleTimeSpanName = _budgetCycleTimeSpanName;
        return budgetCycleTimeSpanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleTimeSpanRecId</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BudgetCycleTimeSpanRecId')
    ]
    public RefRecId parmBudgetCycleTimeSpanRecId(RefRecId _budgetCycleTimeSpanRecId = budgetCycleTimeSpanRecId)
    {
        budgetCycleTimeSpanRecId = _budgetCycleTimeSpanRecId;
        return budgetCycleTimeSpanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetDimensionFocus</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BudgetDimensionFocus'),
        SysOperationLabelAttribute(literalStr("@SPS781")),
        SysOperationHelpTextAttribute(literalStr("@SYS328569")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public Name parmBudgetDimensionFocus(Name _budgetDimensionFocus = budgetDimensionFocus)
    {
        budgetDimensionFocus = _budgetDimensionFocus;
        return budgetDimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetFiscalPeriodEnd</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('budgetFiscalPeriodEnd'),
        SysOperationLabelAttribute(literalStr("@SYS14656")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020055")),
        SysOperationGroupMemberAttribute('FiscalPeriodGroup'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public TransDate parmBudgetFiscalPeriodEnd(TransDate _budgetFiscalPeriodEnd = budgetFiscalPeriodEnd)
    {
        budgetFiscalPeriodEnd = _budgetFiscalPeriodEnd;
        return budgetFiscalPeriodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetFiscalPeriodStart</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BudgetFiscalPeriodStart'),
        SysOperationLabelAttribute(literalStr("@SYS24050")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020054")),
        SysOperationGroupMemberAttribute('FiscalPeriodGroup'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TransDate parmBudgetFiscalPeriodStart(TransDate _budgetFiscalPeriodStart = budgetFiscalPeriodStart)
    {
        budgetFiscalPeriodStart = _budgetFiscalPeriodStart;
        return budgetFiscalPeriodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModel</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BudgetModel'),
        SysOperationLabelAttribute(literalStr("@SYS1966")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020050")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public BudgetModelId parmBudgetModel(BudgetModelId _budgetModel = budgetModel)
    {
        budgetModel = _budgetModel;
        return budgetModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPeriodType</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('budgetPeriodType'),
        SysOperationLabelAttribute(literalStr("@SYS129875"))
    ]
    public BudgetControlStatisticsPeriodOption parmBudgetPeriodType(BudgetControlStatisticsPeriodOption _budgetPeriodType = budgetPeriodType)
    {
        budgetPeriodType = _budgetPeriodType;
        return budgetPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('FromAccount'),
        SysOperationLabelAttribute(literalStr("@SPS2418")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020056")),
        SysOperationGroupMemberAttribute('MainAccountGroup'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public MainAccountNum parmFromAccount(MainAccountNum _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;
        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCarryForward</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('IncludeCarryForward'),
        SysOperationLabelAttribute(literalStr("@SPS783")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020052")),
        SysOperationDisplayOrderAttribute('4')
    ]
    public boolean parmIncludeCarryForward(boolean _includeCarryForward = includeCarryForward)
    {
        includeCarryForward = _includeCarryForward;
        return includeCarryForward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ToAccount'),
        SysOperationLabelAttribute(literalStr("@SPS2419")),
        SysOperationHelpTextAttribute(literalStr("@SYS4020057")),
        SysOperationGroupMemberAttribute('MainAccountGroup'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public MainAccountNum parmToAccount(MainAccountNum _toAccount = toAccount)
    {
        toAccount = _toAccount;
        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid. Otherwise, false.
    /// </returns>
    public boolean validate()
    {
        FiscalCalendar      fiscalCalendar;
        FiscalPeriodEnd     fiscalPeriodEndLocal;
        FiscalPeriodStart   fiscalPeriodStartLocal;
        BudgetCycleTimeSpan budgetCycleTimeSpanLocal;
        BudgetCycle         budgetCycle;
        boolean             isValid = true;

        if (this.parmBudgetDimensionFocus() == '')
        {
            // Dimension focus was not entered.
            isValid = checkFailed("@SPS867");
        }
        else if (DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, this.parmBudgetDimensionFocus()).RecId == 0 && this.parmBudgetDimensionFocus() != '')
        {
            isValid = checkFailed("@SPS868");
        }

        if (this.parmBudgetModel() == '')
        {
            // Budget model was not entered.
            isValid = checkFailed("@SPS1035");
        }

        if (this.parmBudgetCycleTimeSpanRecId() == 0)
        {
            // Budget cycle times span was not entered.
            isValid = checkFailed("@SPS1026");
        }

        if (this.parmFromAccount() == "")
        {
            isValid = checkFailed(strFmt("@SYS331078", "@SPS2418"));
        }

        if (this.parmToAccount() == "")
        {
            isValid = checkFailed(strFmt("@SYS331078", "@SPS2419"));
        }

        if (this.parmFromAccount() != "" && this.parmToAccount() != "")
        {
            if (MainAccount::findByMainAccountId(this.parmFromAccount()).RecId == 0)
            {
                isValid = checkFailed("@SPS1025");
            }
            if (MainAccount::findByMainAccountId(this.parmToAccount()).RecId == 0)
            {
                isValid = checkFailed("@SPS1025");
            }
            if (this.parmToAccount() < this.parmFromAccount())
            {
                isValid = checkFailed("@SPS1027");
            }
        }

        if (this.parmBudgetPeriodType())
        {
            if (this.parmBudgetPeriodType() == BudgetControlStatisticsPeriodOption::FiscalPeriod)
            {
                if (this.parmBudgetFiscalPeriodStart() == dateNull() || this.parmBudgetFiscalPeriodEnd() == dateNull())
                {
                    isValid = checkFailed("@SPS869");
                }

                if (this.parmBudgetFiscalPeriodStart() != dateNull() && this.parmBudgetFiscalPeriodEnd() != dateNull())
                {
                    if (this.parmBudgetFiscalPeriodStart() > this.parmBudgetFiscalPeriodEnd())
                    {
                        isValid = checkFailed("@SYS304912");
                    }
                    else
                    {
                        budgetCycleTimeSpanLocal = BudgetCycleTimeSpan::find(this.parmBudgetCycleTimeSpanRecId());
                        fiscalCalendar = FiscalCalendar::find(budgetCycleTimeSpanLocal.FiscalCalendar);
                        fiscalPeriodStartLocal = LedgerFiscalCalendar::findPeriodStartDateByDate(fiscalCalendar.RecId, this.parmBudgetFiscalPeriodStart());
                        fiscalPeriodEndLocal = LedgerFiscalCalendar::findPeriodStartDateByDate(fiscalCalendar.RecId, this.parmBudgetFiscalPeriodEnd());

                        if (fiscalPeriodStartLocal == dateNull())
                        {
                            isValid = checkFailed("@SPS1023");
                        }
                        else if (fiscalPeriodEndLocal == dateNull())
                        {
                            isValid = checkFailed("@SPS1023");
                        }
                    }
                }
            }
            else
            {
                if (this.parmBudgetCycleTimeSpanRecId())
                {
                    budgetCycle = BudgetCycle::findByNameAndTimeSpan(this.parmBudgetCycleName(), this.parmBudgetCycleTimeSpanRecId());

                    if (!budgetCycle.RecId)
                    {
                        // BudgetCycle with the name the user entered was not found.
                        isValid = checkFailed("@SPS1024");
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BudgetAccountDetailHistoryContract construct()
    {
        return new BudgetAccountDetailHistoryContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>