<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransTmpCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections.Generic;
using System.Collections;

/// <summary>
///    The <c>AssetTransTmpCache</c> class implements logic to work with the <c>AssetTransTmp</c> table as the asset trans cache.
/// </summary>
public class AssetTransTmpCache implements SysPackable
{
    AssetTransTmp cacheTrans;
    private AssetTrans assetTrans;
    private AssetId assetId;
    private AssetBookId bookId;
    private boolean isAssetDocumentEnabled_JP = AssetDocumentUtility_JP::isAssetDocumentEnabled();
    private AssetDocumentTrans_JP assetDocumentTrans_JP;
    private AssetDocumentEntry_JP assetDocumentEntry_JP;
    private AssetDocumentTable_JP assetDocumentTable_JP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        container ret;
        while select cacheTrans
        {
            ret += [cacheTrans.buf2con()];
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _pack)
    {
        int64 len = conLen(_pack);
        for (int i = 1; i <= len; i++)
        {
            cacheTrans.con2buf(conPeek(_pack, i));
            cacheTrans.insert();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal void init(AssetId _assetId, AssetBookId _bookId)
    {
        assetId = _assetId;
        bookId = _bookId;

        this.fillCacheTransBy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheAssetTrans</Name>
				<Source><![CDATA[
    internal AssetTransTmp getCacheAssetTrans()
    {
        return cacheTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCacheTransBy</Name>
				<Source><![CDATA[
    private void fillCacheTransBy()
    {
        using (SysInstrumentationActivityContext activityContext = this.getActivityContextForAssetTransCacheTelemetry())
        {
            SysDaInsertObject insertObject = this.getAssetTransTmpInsertObject(cacheTrans);
            SysDaQueryObject queryObject = this.getQueryObject();
            insertObject.query(queryObject);

            SysDaInsertStatement assetTransTmpInsertStatement = new SysDaInsertStatement();
            assetTransTmpInsertStatement.insert(insertObject);

            select count(RecId) from cacheTrans;
            activityContext.addCustomProperty(AssetInstrumentationConstants::AssetTransCacheFillingNoOfRecords, int642Str(cacheTrans.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransTmpInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>AssetTransTmp</c> table fields to an Insert object.
    /// </summary>
    /// <param name = "_assetTransTmp">
    /// The <c>AssetTransTmp</c> buffer.
    /// </param>
    /// <returns>
    /// The insert object with the fields added.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaInsertObject getAssetTransTmpInsertObject(AssetTransTmp _assetTransTmp)
    {
        SysDaInsertObject assetTransTmpInsertObject = new SysDaInsertObject(_assetTransTmp);

        assetTransTmpInsertObject.fields()
            .add(fieldStr(AssetTransTmp, AmountCur))
            .add(fieldStr(AssetTransTmp, AmountMST))
            .add(fieldStr(AssetTransTmp, AssetGroup))
            .add(fieldStr(AssetTransTmp, AssetId))
            .add(fieldStr(AssetTransTmp, BookId))
            .add(fieldStr(AssetTransTmp, TransDate))
            .add(fieldStr(AssetTransTmp, TransType))
            .add(fieldStr(AssetTransTmp, IsPriorYear))
            .add(fieldStr(AssetTransTmp, Reclassification))
            .add(fieldStr(AssetTransTmp, RevaluationAmount))
            .add(fieldStr(AssetTransTmp, Txt))
            .add(fieldStr(AssetTransTmp, Voucher))
            .add(fieldStr(AssetTransTmp, ReportingCurrencyAmount));

        if (isAssetDocumentEnabled_JP)
        {
            assetTransTmpInsertObject.fields()
                .add(fieldStr(AssetTransTmp, AssetDocumentEntry_JP))
                .add(fieldStr(AssetTransTmp, Type_JP));
        }
        else
        {
            assetTransTmpInsertObject.fields()
                .add(fieldStr(AssetTransTmp, InterestAmount))
                .add(fieldStr(AssetTransTmp, LowValuePoolType_AU));
        }

        return assetTransTmpInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getQueryObject()
    {
        SysDaQueryObject assetTransQueryObject = this.getAssetTransQueryObject();

        if (isAssetDocumentEnabled_JP)
        {
            AssetDocumentTable_JP documentTable;

            SysDaQueryObject assetDocumentTransJPQueryObject = this.getAssetDocumentTransJPQueryObject();
            assetTransQueryObject.joinClause(SysDaJoinKind::OuterJoin, assetDocumentTransJPQueryObject);

            SysDaQueryObject assetDocumentEntryJPQueryObject = this.getAssetDocumentEntryJPQueryObject();
            assetDocumentTransJPQueryObject.joinClause(SysDaJoinKind::OuterJoin, assetDocumentEntryJPQueryObject);

            SysDaQueryObject assetDocumentTableJPQueryObject = this.getAssetDocumentTableJPQueryObject();
            assetDocumentEntryJPQueryObject.joinClause(SysDaJoinKind::OuterJoin, assetDocumentTableJPQueryObject);
        }

        return assetTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getAssetTransQueryObject()
    {
        SysDaQueryObject assetTransQueryObject = new SysDaQueryObject(assetTrans);

        this.addFieldsToAssetTransQueryObject(assetTransQueryObject);
        this.addWhereClauseToAssetTransQueryObject(assetTransQueryObject);

        return assetTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToAssetTransQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>AssetTrans</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_assetTransQueryObject">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToAssetTransQueryObject(SysDaQueryObject _assetTransQueryObject)
    {
        _assetTransQueryObject.projection()
            .add(fieldStr(AssetTrans, AmountCur))
            .add(fieldStr(AssetTrans, AmountMST))
            .add(fieldStr(AssetTrans, AssetGroup))
            .add(fieldStr(AssetTrans, AssetId))
            .add(fieldStr(AssetTrans, BookId))
            .add(fieldStr(AssetTrans, TransDate))
            .add(fieldStr(AssetTrans, TransType))
            .add(fieldStr(AssetTrans, IsPriorYear))
            .add(fieldStr(AssetTrans, Reclassification))
            .add(fieldStr(AssetTrans, RevaluationAmount))
            .add(fieldStr(AssetTrans, Txt))
            .add(fieldStr(AssetTrans, Voucher))
            .add(fieldStr(AssetTrans, ReportingCurrencyAmount));

        if (!isAssetDocumentEnabled_JP)
        {
            _assetTransQueryObject.projection()
                .add(fieldStr(AssetTrans, InterestAmount))
                .add(fieldStr(AssetTrans, LowValuePoolType_AU));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToAssetTransQueryObject</Name>
				<Source><![CDATA[
    private void addWhereClauseToAssetTransQueryObject(SysDaQueryObject _assetTransQueryObject)
    {
        _assetTransQueryObject.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(assetTrans, fieldStr(AssetTrans, AssetId)),
                new SysDaValueExpression(assetId)),
            new SysDaEqualsExpression(new SysDaFieldExpression(assetTrans, fieldStr(AssetTrans, BookId)),
                new SysDaValueExpression(bookId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentTransJPQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getAssetDocumentTransJPQueryObject()
    {
        SysDaQueryObject assetDocumentTransJPQueryObject = new SysDaQueryObject(assetDocumentTrans_JP);

        this.addFieldsToAssetDocumentTransJPQueryObject(assetDocumentTransJPQueryObject);
        this.addWhereClauseToAssetDocumentTransJPQueryObject(assetDocumentTransJPQueryObject);

        return assetDocumentTransJPQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToAssetDocumentTransJPQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>AssetDocumentTrans_JP</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_assetDocumentTransJPQueryObject">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToAssetDocumentTransJPQueryObject(SysDaQueryObject _assetDocumentTransJPQueryObject)
    {
        _assetDocumentTransJPQueryObject.projection()
            .add(fieldStr(AssetDocumentTrans_JP, AssetDocumentEntry_JP));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToAssetDocumentTransJPQueryObject</Name>
				<Source><![CDATA[
    private void addWhereClauseToAssetDocumentTransJPQueryObject(SysDaQueryObject _assetDocumentTransJPQueryObject)
    {
        _assetDocumentTransJPQueryObject.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(assetDocumentTrans_JP, fieldStr(AssetDocumentTrans_JP, RefRecId)),
                new SysDaFieldExpression(assetTrans, fieldStr(AssetTrans, RecId))),
            new SysDaEqualsExpression(new SysDaFieldExpression(assetDocumentTrans_JP, fieldStr(AssetDocumentTrans_JP, RefTableId)),
                new SysDaValueExpression(tableNum(AssetTrans)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentEntryJPQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getAssetDocumentEntryJPQueryObject()
    {
        SysDaQueryObject assetDocumentEntryJPQueryObject = new SysDaQueryObject(assetDocumentEntry_JP);

        this.addFieldsToAssetDocumentEntryJPQueryObject(assetDocumentEntryJPQueryObject);
        this.addWhereClauseToAssetDocumentEntryJPQueryObject(assetDocumentEntryJPQueryObject);

        return assetDocumentEntryJPQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToAssetDocumentEntryJPQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>AssetDocumentEntry_JP</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_assetDocumentEntryJPQueryObject">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToAssetDocumentEntryJPQueryObject(SysDaQueryObject _assetDocumentEntryJPQueryObject)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToAssetDocumentEntryJPQueryObject</Name>
				<Source><![CDATA[
    private void addWhereClauseToAssetDocumentEntryJPQueryObject(SysDaQueryObject _assetDocumentEntryJPQueryObject)
    {
        _assetDocumentEntryJPQueryObject.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(assetDocumentEntry_JP, fieldStr(AssetDocumentEntry_JP, RecId)),
                new SysDaFieldExpression(assetDocumentTrans_JP, fieldStr(AssetDocumentTrans_JP, AssetDocumentEntry_JP))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentTableJPQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getAssetDocumentTableJPQueryObject()
    {
        SysDaQueryObject assetDocumentTableJPQueryObject = new SysDaQueryObject(assetDocumentTable_JP);

        this.addFieldsToAssetDocumentTableJPQueryObject(assetDocumentTableJPQueryObject);
        this.addWhereClauseToAssetDocumentTableJPQueryObject(assetDocumentTableJPQueryObject);

        return assetDocumentTableJPQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToAssetDocumentTableJPQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>AssetDocumentTable_JP</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_assetDocumentTableJPQueryObject">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToAssetDocumentTableJPQueryObject(SysDaQueryObject _assetDocumentTableJPQueryObject)
    {
        _assetDocumentTableJPQueryObject.projection()
            .add(fieldStr(AssetDocumentTable_JP, Type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToAssetDocumentTableJPQueryObject</Name>
				<Source><![CDATA[
    private void addWhereClauseToAssetDocumentTableJPQueryObject(SysDaQueryObject _assetDocumentTableJPQueryObject)
    {
        _assetDocumentTableJPQueryObject.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(assetDocumentTable_JP, fieldStr(AssetDocumentTable_JP, RecId)),
                new SysDaFieldExpression(assetDocumentEntry_JP, fieldStr(AssetDocumentEntry_JP, AssetDocumentTable_JP))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForAssetTransCacheTelemetry</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForAssetTransCacheTelemetry()
    {
        var logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AssetTransTmpCache));
        var activity = SysInstrumentationActivity::construct(AssetInstrumentationConstants::AssetCache, AssetInstrumentationConstants::InstrumentationNameSpace);
        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of <c>AssetTransTmpCache</c>.
    /// </summary>
    /// <param name = "_assetId">An asset id.</param>
    /// <param name = "_bookId">A book id.</param>
    /// <returns>The instance of <c>AssetTransTmpCache</c>.</returns>
    internal static AssetTransTmpCache newFromAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetTransTmpCache ret = AssetTransTmpCache::construct();
        ret.init(_assetId, _bookId);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of <c>AssetTransTmpCache</c> by the given container.
    /// </summary>
    /// <param name = "_assetTransTmpBuffer">A buffer contains inmemory asset transactions.</param>
    /// <returns>The instance of <c>AssetTransTmpCache</c>.</returns>
    internal static AssetTransTmpCache newFromContainer(container _assetTransTmpBuffer)
    {
        AssetTransTmpCache ret = AssetTransTmpCache::construct();
        ret.unpack(_assetTransTmpBuffer);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static AssetTransTmpCache construct()
    {
        return new AssetTransTmpCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetTransChanged</Name>
				<Source><![CDATA[
    internal static boolean isAssetTransChanged(AssetTrans _trans)
    {
        AssetTrans transOrig = _trans.orig();
        return transOrig.AmountCur != _trans.AmountCur
            || transOrig.AmountMST != _trans.AmountMST
            || transOrig.RevaluationAmount != _trans.RevaluationAmount
            || transOrig.Voucher != _trans.Voucher
            || transOrig.ReportingCurrencyAmount != _trans.ReportingCurrencyAmount
            || transOrig.Txt != _trans.Txt
            || transOrig.Reclassification != _trans.Reclassification
            || transOrig.IsPriorYear != _trans.IsPriorYear
            || transOrig.TransType != _trans.TransType
            || transOrig.TransDate != _trans.TransDate
            || transOrig.InterestAmount != _trans.InterestAmount
            || transOrig.LowValuePoolType_AU != _trans.LowValuePoolType_AU
            || transOrig.AssetGroup != _trans.AssetGroup
            || transOrig.AssetId != _trans.AssetId
            || transOrig.BookId != _trans.BookId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>