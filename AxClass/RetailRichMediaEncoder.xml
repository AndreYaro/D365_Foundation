<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRichMediaEncoder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides methods to encode into and decode from
/// the special format in which a list of media is stored
/// as a text.
///
/// A list of media is encoded into a xml format as follows
/// <RichMediaLocations>
///    <RichMediaLocation>
///        <Url>http://bing.com</Url>
///        <AltText>The Bing images ^\^</AltText>
///    </RichMediaLocation>
///    <RichMediaLocation>
///        <Url>http://www.contoso.com</Url>
///        <AltText>Contoso Inc. ^\\go\there\^ and see!</AltText>
///    </RichMediaLocation>
/// </RichMediaLocations>
/// </summary>
/// <remarks>
/// The xml header is removed due to BP violations,
/// but it will be present in the output with utf-8 encoding
/// </remarks>
class RetailRichMediaEncoder
{
    #define.XmlRoot('RichMediaLocations')
    #define.RecordTag('RichMediaLocation')
    #define.Url('Url')
    #define.AltText('AltText')
    #define.IsDefault('IsDefault')
    #define.ImageId('ImageId')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine appends a new RetailRichMedia element in the RetailRichMedia xml document.
    /// </summary>
    /// <param name = "_xmlDocument">The XmlDocument instance.</param>
    /// <param name = "_url">The media url.</param>
    /// <param name = "_altText">The alternative text of the media.</param>
    /// <param name = "_isDefault">Indicates whether the current media is default or not.</param>
    /// <param name = "_imageId">The media identifier.</param>
    private static void appendRecord(XmlDocument _xmlDocument, str _url, str _altText, str _isDefault, str _imageId)
    {
        XmlNode richMediaNode;
        XmlNode urlNode;
        XmlNode altTextNode;
        XmlNode isDefaultNode;
        XmlNode imageIdNode;
        XmlNode isGalleryResourceNode;
        XmlNode isSelfHostedNode;
        XmlNode nodeRoot;

        nodeRoot = _xmlDocument.documentElement();
        if (!nodeRoot)
        {
            nodeRoot = _xmlDocument.appendChild(_xmlDocument.createElement(#XmlRoot));
        }

        richMediaNode = nodeRoot.appendChild(_xmlDocument.createElement(#RecordTag));

        urlNode = richMediaNode.appendChild(_xmlDocument.createElement(#Url));
        urlNode.text(_url);

        altTextNode = richMediaNode.appendChild(_xmlDocument.createElement(#AltText));
        altTextNode.text(_altText);

        if (_isDefault != null)
        {
            isDefaultNode = richMediaNode.appendChild(_xmlDocument.createElement(#IsDefault));
            isDefaultNode.text(_isDefault);
        }

        if (_imageId != null)
        {
            imageIdNode = richMediaNode.appendChild(_xmlDocument.createElement(#ImageId));
            imageIdNode.text(_imageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Decode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes a list of medias from the supplied string representation into
    /// the supplied <c>RetailRichMediaTmp</c> table.
    /// The method returns the id of the first media record.
    /// For the information on the encoding format, please see the class
    /// description.
    /// </summary>
    /// <param name="_encodedData">
    /// The string representation of a list of media.
    /// </param>
    /// <param name="_store">
    /// The <c>RetailRichMediaTmp</c> table to store the decoded media list into.
    /// </param>
    /// <returns>
    /// The id of the default media record.
    /// </returns>
    /// <remarks>
    /// The method does not check how many fields are there in every tuple it finds,
    /// nor it checks the values anyhow.
    /// </remarks>
    public static RecId Decode(str _encodedData, RetailRichMediaTmp _store)
    {
        RecId defaultRecId, firstRecId;
        int i;
        XmlDocument doc;
        XmlNode rootNode;
        XmlNode recordNode;
        XmlNodeList  locations;

        doc = new XmlDocument();
        doc.loadXml(_encodedData);
        rootNode = doc.documentElement();
        if (rootNode)
        {
            // Select all the locations into a nodelist
            locations = rootNode.selectNodes(#RecordTag);
            for (i = 0; i < locations.length(); i++)
            {
                recordNode = locations.item(i);
                _store.clear();
                _store.initValue();
                _store.AltText =  recordNode.selectSingleNode(#AltText).text();
                _store.Url = recordNode.selectSingleNode(#Url).text();

                if (recordNode.selectSingleNode(#IsDefault) != null)
                {
                    var isDefaultVal = recordNode.selectSingleNode(#IsDefault).text();
                    if (isDefaultVal != null)
                    {
                        _store.IsDefault = str2Int(isDefaultVal);
                    }
                }

                if (recordNode.selectSingleNode(#ImageId) != null)
                {
                    var imageId = recordNode.selectSingleNode(#ImageId).text();
                    if (imageId != null)
                    {
                        _store.ImageId = str2Int(imageId);
                    }
                }

                _store.insert();

                if (!firstRecId)
                {
                    firstRecId = _store.RecId;
                }

                if (defaultRecId == 0 && _store.IsDefault)
                {
                    defaultRecId = _store.RecId;
                }
            }
        }

        if (!defaultRecId)
        {
            defaultRecId = firstRecId;
        }

        return defaultRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DecodeXMLIntoGalleryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes a list of medias from the supplied string representation into
    /// the supplied <c>RetailRichMediaTmp</c> table.
    /// The method returns the id of the first media record.
    /// For the information on the encoding format, please see the class
    /// description.
    /// </summary>
    /// <param name="_encodedData">
    /// The string representation of a list of media.
    /// </param>
    /// <param name="_galleryTable">
    /// The <c>RetailRichMediaTmp</c> table to store the decoded media list into.
    /// </param>
    /// <param name="_checkForDupes">
    /// Whether to check for the duplicates records.
    /// </param>
    /// <remarks>
    /// The method does not check how many fields are there in every tuple it finds,
    /// nor it checks the values anyhow.
    /// </remarks>
    public static void DecodeXMLIntoGalleryTable(str _encodedData, RetailRichMediaTmp _galleryTable, boolean _checkForDupes = false)
    {
        RecId defaultRecId;
        int i;
        XmlDocument doc;
        XmlNode rootNode;
        XmlNode recordNode;
        XmlNodeList  locations;

        doc = new XmlDocument();
        doc.loadXml(_encodedData);
        rootNode = doc.documentElement();
        RetailRichMediaTmp table = _galleryTable;

        if (rootNode)
        {
            // Select all the locations into a nodelist
            locations = rootNode.selectNodes(#RecordTag);
            for (i = 0; i < locations.length(); i++)
            {
                boolean matchFound = false;
                recordNode = locations.item(i);
                str url = recordNode.selectSingleNode(#Url).text();

                if (_checkForDupes)
                {
                    //Check duplicate records
                    while select * from table
                    {
                        if (url == table.Url)
                        {
                            matchFound = true;
                            break;
                         }
                     }
                }

                if (!matchFound)
                {
                    table.clear();
                    table.initValue();
                    table.AltText =  recordNode.selectSingleNode(#AltText).text();
                    table.Url = url;

                    if (recordNode.selectSingleNode(#IsDefault) != null)
                    {
                        var isDefaultVal = recordNode.selectSingleNode(#IsDefault).text();
                        if (isDefaultVal != null)
                        {
                            table.IsDefault = str2Int(isDefaultVal);
                        }
                    }

                    if (recordNode.selectSingleNode(#ImageId) != null)
                    {
                        var imageId = recordNode.selectSingleNode(#ImageId).text();
                        if (imageId != null)
                        {
                            table.ImageId = str2Int(imageId);
                        }
                    }

                    table.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Encode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the supplied <c>RetailRichMediaTmp</c> table
    /// with a list of media into a string putting the record
    /// with the id of <c>_defaultRecId</c> first.
    /// For the information on the encoding format, please see the class
    /// description.
    /// </summary>
    /// <param name="_sourceData">
    /// The <c>RetailRichMediaTmp</c> table with a list of media to encode into a string.
    /// </param>
    /// <param name="_defaultRecId">
    /// The id of the record that must be stored first.
    /// </param>
    /// <returns>
    /// The encoded list of media.
    /// </returns>
    public static str Encode(RetailRichMediaTmp _sourceData, RecId _defaultRecId)
    {
        XmlDocument xmlDocument = XmlDocument::newBlank();
        boolean hasData = false;

        select _sourceData where _sourceData.RecId == _defaultRecId;
        if (_sourceData)
        {
            hasData = true;
            RetailRichMediaEncoder::appendRecord(xmlDocument, _sourceData.Url, _sourceData.AltText, int2Str(_sourceData.IsDefault), int2Str(_sourceData.ImageId));
        }

        while select _sourceData
            where _sourceData.RecId != _defaultRecId
        {
            hasData = true;
            RetailRichMediaEncoder::appendRecord(xmlDocument, _sourceData.Url, _sourceData.AltText,  int2Str(_sourceData.IsDefault), int2Str(_sourceData.ImageId));
        }

        return hasData ? xmlDocument.xml() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeGallery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encode the Gallery and External data into XML and return the XML.
    /// </summary>
    /// <param name = "_galleryData">Media gallery data.</param>
    /// <param name = "_selectedEntity">Currently selected entity.</param>
    /// <param name = "_checkImplicitUrl">Indicates whether to check for the implicit url exists in the passed gallery data.</param>
    /// <returns>The media gallery data encoded into Xml.</returns>
    public static str encodeGallery(RetailRichMediaTmp _galleryData, RetailMediaMasterEntity _selectedEntity, boolean _checkImplicitUrl = true)
    {
        XmlDocument xmlDocument = XmlDocument::newBlank();

        while select _galleryData
        {
            if (_checkImplicitUrl)
            {
                if (!RetailRichMediaEncoder::isImplicitUrl(_galleryData.Url, _selectedEntity))
                {
                    //Only persist the explicitly added/edited url into the media association information.
                    RetailRichMediaEncoder::appendRecord(xmlDocument, _galleryData.Url, _galleryData.AltText,  int2Str(_galleryData.IsDefault), int2Str(_galleryData.ImageId));
                }
            }
            else
            {
                RetailRichMediaEncoder::appendRecord(xmlDocument, _galleryData.Url, _galleryData.AltText,  int2Str(_galleryData.IsDefault), int2Str(_galleryData.ImageId));
            }
        }

        return xmlDocument.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImplicitUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the media url is implicit url or not.
    /// </summary>
    /// <param name = "url">The media url.</param>
    /// <param name = "selectedEntity">The current selected entity.</param>
    /// <returns>True if the url is the implicit url as mentioned in the media template otherwise false.</returns>
    private static boolean isImplicitUrl(str url, RetailMediaMasterEntity selectedEntity)
    {
        boolean result = false;
        RetailRichMediaTmp retailRichMediaTmpForGallery;
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
        str imageXml;
        if (selectedEntity == RetailMediaMasterEntity::Product)
        {
            imageXml = RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.ProductDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);
        }
        else if (selectedEntity == RetailMediaMasterEntity::Catalog)
        {
            imageXml = RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CatalogDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);
        }
        else if (selectedEntity == RetailMediaMasterEntity::Category)
        {
            imageXml = RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CategoryDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);
        }
        else if (selectedEntity == RetailMediaMasterEntity::Customer)
        {
            imageXml = RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.CustomerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);
        }
        else if (selectedEntity == RetailMediaMasterEntity::Worker)
        {
            imageXml = RetailAttributeHelper::getDefaultTextValue(retailSharedParameters.WorkerDefaultAttributeGroup, retailSharedParameters.ImagesAttributeType);
        }

        if (imageXml)
        {
            RetailRichMediaEncoder::DecodeXMLIntoGalleryTable(imageXml, retailRichMediaTmpForGallery);

            while select * from retailRichMediaTmpForGallery
            {
                if (retailRichMediaTmpForGallery.Url == url)
                {
                    result = true;
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EncodeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the supplied values for _url and _altText
    /// and formats them as an xml string.
    /// The method will add a emoty value for 'Alt text' field,
    /// if supplied _altText is not send.
    /// For the information on the encoding format, please see the class
    /// description.
    /// </summary>
    /// <param name="_url">
    /// The url to be added to the encoded return xml string.
    /// </param>
    /// <param name="_altText">
    /// The optional alt text for the media to be encoded in the xml string.
    /// </param>
    /// <returns>
    /// The encoded list of media.
    /// </returns>
    public static str EncodeValues(str _url, str _altText = '')
    {
        XmlDocument xmlDocument = XmlDocument::newBlank();
        str isDefault = '0';
        str imageId = '0';

        if (_url)
        {
            RetailRichMediaEncoder::appendRecord(xmlDocument, _url, _altText, isDefault, imageId);
        }

        return xmlDocument.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes a list of medias from the supplied string representation and
    /// returns the URL of image
    /// </summary>
    /// <param name="_encodedData">
    /// The string representation of a list of media.
    /// </param>
    /// <returns>
    /// The url of the first media record.
    /// </returns>
    public static str getURL(str _encodedData)
    {
        str url;
        int i;
        XmlDocument doc;
        XmlNode rootNode;
        XmlNode recordNode;
        XmlNodeList  locations;

        doc = new XmlDocument();
        doc.loadXml(_encodedData);
        rootNode = doc.documentElement();

        if (rootNode)
        {
            // Select all the locations into a nodelist
            locations = rootNode.selectNodes(#RecordTag);
            for (i = 0; i < locations.length(); i++)
            {
                recordNode = locations.item(i);
                url = recordNode.selectSingleNode(#Url).text();
            }
        }

        return url;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>