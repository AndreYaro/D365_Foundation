<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalDataInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalDataInitializer</c> class handles the initial data creation for the bank - foreign currency revaluation process.
/// </summary>
public final class BankCurrencyRevalDataInitializer
{
    private BankCurrencyRevalContract bankCurrencyReval;
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContractAndBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalDataInitializer</c> class given an instance of the <c>BankCurrencyRevalContract</c> class and
    /// a <c>BankCurrencyRevalTmp</c> table buffer to use for the data initialization.
    /// </summary>
    /// <param name = "_bankCurrencyReval">An instance of the <c>BankCurrencyRevalContract</c> class holding the settings for the currency revaluation process.</param>
    /// <param name = "_bankCurrencyRevalTmp">A <c>BankCurrencyRevalTmp</c> table buffer used for storing the initialized data.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalDataInitializer</c> class</returns>
    internal static BankCurrencyRevalDataInitializer newFromContractAndBankCurrencyRevalTmp(BankCurrencyRevalContract _bankCurrencyReval, BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalDataInitializer dataInitializer = new BankCurrencyRevalDataInitializer();
        dataInitializer.bankCurrencyReval = _bankCurrencyReval;
        dataInitializer.bankCurrencyRevalTmp = _bankCurrencyRevalTmp;

        return dataInitializer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyRevalContract</Name>
				<Source><![CDATA[
    protected BankCurrencyRevalContract getBankCurrencyRevalContract()
    {
        return bankCurrencyReval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    protected BankCurrencyRevalTmp getBankCurrencyRevalTmp()
    {
        return bankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankCurrencyRevalData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the initial revaluation data for each selected bank account.
    /// </summary>
    internal void createBankCurrencyRevalData()
    {
        ListEnumerator bankAccountListEnumerator = bankCurrencyReval.parmSelectedBankAccounts().getEnumerator();

        while (bankAccountListEnumerator.moveNext())
        {
            BankAccountTable bankAccountTable = BankAccountTable::findByRecId(bankAccountListEnumerator.current());

            if (BankCurrencyRevalHistory::checkIsEligibleForRevaluation(
                bankAccountTable.DataAreaId,
                bankAccountTable.AccountID,
                bankCurrencyReval.parmTransDate()))
            {
                changecompany(bankAccountTable.DataAreaId)
                {
                    this.insertBankCurrencyRevalTmp(bankAccountTable);
                }
            }
            else
            {
                warning(strFmt("@CashManagement:BankCurrencyRevalProcessedOnFutureDate", bankAccountTable.AccountID, bankAccountTable.DataAreaId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    private void insertBankCurrencyRevalTmp(BankAccountTable _bankAccountTable)
    {
        this.populateBankCurrencyRevalTmp(_bankAccountTable);
        bankCurrencyRevalTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    protected void populateBankCurrencyRevalTmp(BankAccountTable _bankAccountTable)
    {
        BankAccountBalance bankAccountBalance = _bankAccountTable.balancesAsOfDate(bankCurrencyReval.parmTransDate());

        bankCurrencyRevalTmp.clear();
        bankCurrencyRevalTmp.LegalEntity = CompanyInfo::findDataArea(_bankAccountTable.DataAreaId).RecId;
        bankCurrencyRevalTmp.BankAccountId = _bankAccountTable.AccountID;
        bankCurrencyRevalTmp.BankCurrencyAmount = bankAccountBalance.parmAmountCurBalance();
        bankCurrencyRevalTmp.BankCurrencyCode = _bankAccountTable.CurrencyCode;
        bankCurrencyRevalTmp.AccountingCurrencyAmount = bankAccountBalance.parmAmountMstBalance();
        bankCurrencyRevalTmp.ReportingCurrencyAmount = bankAccountBalance.parmReportingCurrencyBalance();
        bankCurrencyRevalTmp.BankLedgerDimension = _bankAccountTable.LedgerDimension;
        bankCurrencyRevalTmp.ExchangeRateDate = bankCurrencyReval.parmExchangeRateDate();
        bankCurrencyRevalTmp.TransDate = bankCurrencyReval.parmTransDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>