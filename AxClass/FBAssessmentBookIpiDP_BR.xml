<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBAssessmentBookIpiDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBAssessmentBookIpiDP_BR</c> class is the Report Data Provider class for the <c>FBAssessmentBookIpi_BR</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBAssessmentBookContract_BR))]
class FBAssessmentBookIpiDP_BR extends SRSReportDataProviderBase
{
    TmpFBAssessmentBook_BR tmpAssessmentBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        FBAssessmentBookContract_BR contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        query = new Query();

        qbds = query.addDataSource(tableNum(FBBookingPeriod_BR));
        qbds.addRange(fieldNum(FBBookingPeriod_BR, FiscalEstablishmentId)).value(SysQuery::value(contract.parmFiscalEstablishmentId()));

        //FBBookingPeriodFiscalDocument_BR
        qbds = qbds.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR));

        //FiscalDocument_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, Direction));
        qbds.addRange(fieldNum(FiscalDocument_BR, AccountingDate)).value(SysQuery::range(contract.parmFromDate(), contract.parmToDate()));

        //FIscalDocumentLine_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(FiscalDocumentLine_BR, AccountingAmount), SelectionField::Sum);

        //FiscalDocumentTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(FiscalDocumentTaxTrans_BR, FiscalDocumentMiscCharge)).value(SysQuery::value(0));

        // FBTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FBTaxTrans_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FBTaxTrans_BR, CFOP));
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds.addRange(fieldNum(FBTaxTrans_BR, FBTaxAssessment_BR)).value(SysQuery::value(contract.parmTaxAssessmentRecId()));
        qbds.addRange(fieldNum(FBTaxTrans_BR, TaxType)).value(SysQuery::value(TaxType_BR::IPI));

        // CFOPTable_BR
        qbds = qbds.addDataSource(tableNum(CFOPTable_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addGroupByField(fieldNum(CFOPTable_BR, Name));
        qbds.addLink(fieldnum(FBTaxTrans_BR, CFOP), fieldNum(CFOPTable_BR, CFOPId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxMiscChargesByCfop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for Misc charges
    /// </summary>
    /// <param name="_taxAssessmentRecId">
    /// RecId of the TaxAssessment_BR table
    /// </param>
    /// <param name="_taxType">
    /// Tax Type to filter calculator
    /// </param>
    /// <param name="_cfop">
    /// cfop to filter calculator
    /// </param>
    /// <returns>
    /// The <c>FiscalDocumentTaxTrans_BR</c> calculated for tax type and cfop
    /// </returns>
    protected FiscalDocumentTaxTrans_BR getTaxMiscChargesByCfop(RefRecId _taxAssessmentRecId,
        TaxType_BR _taxType,
        SalesPurchCFOPId_BR _cfop)
    {
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FiscalDocumentMiscCharge_BR         fiscalDocumentMiscCharges;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;
        FBTaxAssessment_BR                  taxAssessment;

        select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxBaseAmountExempt), sum(taxbaseAmountOther)
            from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.Type == _taxType
            exists join fiscalDocumentMiscCharges
                where fiscalDocumentTaxTrans.FiscalDocumentMiscCharge == fiscalDocumentMiscCharges.RecId
            exists join fiscalDocumentLine
                where fiscalDocumentMiscCharges.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentLine.CFOP == _cfop
            exists join fiscalDocument
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
            exists join taxAssessment
                where taxAssessment.FBBookingPeriod_BR == bookingPeriodFiscalDocument.FBBookingPeriod_BR
                    && taxAssessment.RecId == _taxAssessmentRecId;

        return fiscalDocumentTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBAssessmentBook_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBAssessmentBook_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBAssessmentBook_BR))]
    public TmpFBAssessmentBook_BR getTmpAssessmentBook()
    {
        select tmpAssessmentBook;
        return tmpAssessmentBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBAssessmentBook_BR</c>
    /// </summary>
    private void insertTmpAssessmentBook()
    {
        tmpAssessmentBook.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        #define.Position001("001")
        #define.Position002("002")
        #define.Position003("003")
        #define.Position004("004")
        #define.Position005("005")
        #define.Position007("007")
        #define.Position009("009")
        #define.Position010("010")
        #define.Position011("011")
        #define.Position012("012")

        Query       query;
        QueryRun    queryRun;

        FiscalDocument_BR               fiscalDocument;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR       fiscalDocumentTaxTransMiscCharges;
        FBTaxTrans_BR                   fbTaxTrans;
        CFOPTable_BR                    cfopTable;
        FBTaxAssessmentCalculatorIPI_BR taxAssessmentCalculatorIpi;
        FBTaxAssessment_BR              fbTaxAssessment;

        real                        value001, value002, value009;

        FBAssessmentBookContract_BR  contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        fbTaxAssessment = FBTaxAssessment_BR::find(contract.parmTaxAssessmentRecId());

        changeCompany(fbTaxAssessment.bookingPeriod().FiscalEstablishmentDataArea)
        {
            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fiscalDocument          = queryRun.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine      = queryRun.get(tableNum(FiscalDocumentLine_BR));
                fbTaxTrans              = queryRun.get(tableNum(FBTaxTrans_BR));
                cfopTable               = queryRun.get(tableNum(CFOPTable_BR));

                tmpAssessmentBook.Direction             = enum2int(fiscalDocument.Direction);

                tmpAssessmentBook.CFOP                  = fbTaxTrans.CFOP;
                tmpAssessmentBook.CFOPValue             = str2int(strReplace(fbTaxTrans.CFOP, ".", ""));

                tmpAssessmentBook.Description           = cfopTable.Name;
                tmpAssessmentBook.ItemAmount            = fiscalDocumentLine.AccountingAmount;

                fiscalDocumentTaxTransMiscCharges = this.getTaxMiscChargesByCfop(contract.parmTaxAssessmentRecId(), TaxType_BR::IPI, fbTaxTrans.CFOP);

                tmpAssessmentBook.TaxBaseAmount         = fbTaxTrans.TaxBaseAmount + fiscalDocumentTaxTransMiscCharges.TaxBaseAmount;
                tmpAssessmentBook.TaxAmount             = fbTaxTrans.TaxAmount + fiscalDocumentTaxTransMiscCharges.TaxAmount;
                tmpAssessmentBook.TaxBaseAmountExempt   = fbTaxTrans.TaxBaseAmountExempt + fiscalDocumentTaxTransMiscCharges.TaxBaseAmountExempt;
                tmpAssessmentBook.TaxBaseAmountOther    = fbTaxTrans.TaxBaseAmountOther + fiscalDocumentTaxTransMiscCharges.TaxBaseAmountOther;

                if (tmpAssessmentBook.CFOPValue >= 1000 && tmpAssessmentBook.CFOPValue <= 2999)
                    value001 += tmpAssessmentBook.TaxAmount;

                if (tmpAssessmentBook.CFOPValue >= 3000 && tmpAssessmentBook.CFOPValue <= 3999)
                    value002 += tmpAssessmentBook.TaxAmount;

                if (tmpAssessmentBook.CFOPValue >= 5000 && tmpAssessmentBook.CFOPValue <= 6999)
                    value009 += tmpAssessmentBook.TaxAmount;

                this.insertTmpAssessmentBook();
            }
        }

        taxAssessmentCalculatorIpi = FBTaxAssessment_BR::find(contract.parmTaxAssessmentRecId()).getCalculator();
        taxAssessmentCalculatorIpi.calculate();

        tmpAssessmentBook.FooterPosition    = #Position001;
        tmpAssessmentBook.FooterValue       = value001;
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position002;
        tmpAssessmentBook.FooterValue       = value002;
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position003;
        tmpAssessmentBook.FooterValue       = 0;
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position004;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getDebitReversals();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position005;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getCreditsByGeneralAdjustment() + taxAssessmentCalculatorIpi.getCreditsByDocumentAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position007;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getCreditBalanceFromPreviousPeriod();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position009;
        tmpAssessmentBook.FooterValue       = value009;
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position010;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getCreditReversals();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position011;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getTaxRefund();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = #Position012;
        tmpAssessmentBook.FooterValue       = taxAssessmentCalculatorIpi.getDebitsByGeneralAdjustment() + taxAssessmentCalculatorIpi.getDebitsByDocumentAdjustment();
        this.insertTmpAssessmentBook();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>