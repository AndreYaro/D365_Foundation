<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentVendorImportService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.IO;
using System.Text;
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics365.LocalizationFramework;
using System.Collections;
using System.Diagnostics;
using System.Linq;

final internal class BusinessDocumentVendorImportService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>import</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void import(BusinessDocumentVendorImportContract _dataContract)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSRV00001, funcName());

        container channels = BusinessDocumentVendorImportService::getChannelsForImport();
        int documentCount;

        if (ERForInvoicingRouteSwitch::shouldUseV2())
        {
            documentCount = BusinessDocumentVendorImportService::updateDocumentsStateV2();

            this.runChannels(channels);
            documentCount += BusinessDocumentVendorImportService::importDocumentsFromChannelsV2();
        }
        else
        {
            documentCount = BusinessDocumentVendorImportService::updateDocumentsState();

            this.runChannels(channels);
            documentCount += BusinessDocumentVendorImportService::importDocumentsFromChannels(channels);
        }
        
        BusinessDocumentVendorImportService::showDocumentImportMessage(documentCount);

        if (_dataContract.parmReimport())
        {
            documentCount = BusinessDocumentVendorImportService::reimportDocumentsForState(BusinessDocumentState::Failed);
            documentCount += BusinessDocumentVendorImportService::reimportDocumentsForState(BusinessDocumentState::PostProcessFailed);

            info(strFmt("@BusinessDocumentSubmissionService:NumReImportedDocuments", documentCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method update document state.
    /// Clarifies the status of the document and, if necessary, makes an import.
    /// </summary>
    /// <param name = "businessDocumentSubmissionExternal">Document to update</param>
    /// <param name = "documentInfo">Information about the document from the E-Invoicing service</param>
    /// <returns>Indicates whether the import has been completed</returns>
    internal static boolean updateDocumentState(BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal, BusinessDocumentInfo documentInfo)
    {
        if (!documentInfo)
        {
            return false;
        }

        BusinessDocumentState state = symbol2Enum(
                    enumNum(BusinessDocumentState),
                    documentInfo.getState());

        boolean isSuccess = false;

        switch (state)
        {
            case BusinessDocumentState::Pending:
                if (BusinessDocumentVendorImportService::importDocument(null, documentInfo))
                {
                    isSuccess = true;
                }
                break;
            case BusinessDocumentState::Failed:
                ttsbegin;
                businessDocumentSubmissionExternal.selectForUpdate(true);
                businessDocumentSubmissionExternal.State = BusinessDocumentState::Failed;
                businessDocumentSubmissionExternal.update();
                ttscommit;
                break;
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStateV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method update document state.
    /// Clarifies the status of the document and, if necessary, makes an import.
    /// </summary>
    /// <param name = "businessDocumentSubmissionExternal">Document to update.</param>
    /// <param name = "businessDocument">Document to update.</param>
    /// <returns>Indicates whether the import has been completed</returns>
    internal static boolean updateDocumentStateV2(BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal, BusinessDocument businessDocument)
    {
        boolean isSuccess = false;

        switch (businessDocument.State)
        {
            case BusinessDocumentState::Pending:
                if (BusinessDocumentVendorImportService::importDocument(businessDocument))
                {
                    isSuccess = true;
                }
                break;
            case BusinessDocumentState::Failed:
                ttsbegin;
                businessDocumentSubmissionExternal.selectForUpdate(true);
                businessDocumentSubmissionExternal.State = BusinessDocumentState::Failed;
                businessDocumentSubmissionExternal.update();
                ttscommit;
                break;
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importAndUpdateDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method imports the documents and updates the state for the documents.
    /// For which the process of importing from channels has already been started.
    /// </summary>
    internal static void importAndUpdateDocuments()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSRV00001, funcName());
        int documentCount;
        if (ERForInvoicingRouteSwitch::shouldUseV2())
        {
            documentCount = BusinessDocumentVendorImportService::updateDocumentsStateV2();
            documentCount += BusinessDocumentVendorImportService::importDocumentsFromChannelsV2();
        }
        else
        {
            container channels = BusinessDocumentVendorImportService::getChannelsForImport();
            documentCount = BusinessDocumentVendorImportService::updateDocumentsState();
            documentCount += BusinessDocumentVendorImportService::importDocumentsFromChannels(channels);
        }

        BusinessDocumentVendorImportService::showDocumentImportMessage(documentCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChannels</Name>
				<Source><![CDATA[
    private void runChannels(container channels)
    {
        for (int idx = 1; idx <= conLen(channels); idx++)
        {
            BusinessDocumentExternalAgents channel = BusinessDocumentExternalAgents::findByAgentId(conPeek(channels, idx));
            BusinessDocumentServiceController controller = BusinessDocumentServiceController::newChannel(channel);
            controller.runChannel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocumentImportMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method displays a message about importing documents.
    /// </summary>
    /// <param name = "documentCount">Number of imported documents</param>
    private static void showDocumentImportMessage(int documentCount)
    {
        if (documentCount > 0)
        {
            info(strFmt("@BusinessDocumentSubmissionService:NumImportedDocuments", documentCount));
        }
        else
        {
            info("@BusinessDocumentSubmissionService:NoDocumentsFoundForImport");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelsForImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns channels for importing documents for the agent.
    /// </summary>
    /// <returns>Channels for importing document</returns>
    private static container getChannelsForImport()
    {
        boolean ok = true;
        container channels = BusinessDocumentExternalAgents::getAgenIdsByType(BusinessDocumentChannelType::Import);

        if (!channels)
        {
            ok = checkFailed("@BusinessDocumentSubmissionService:ExternalAgentsIsNotSetup_Validation");
        }


        if (!(select firstonly RecId from businessDocumentImportSource).RecId)
        {
            ok = checkFailed("@BusinessDocumentSubmissionService:InvoiceVariableNotSetup_Validation");
        }

        if (!ok)
        {
            throw error("@SYS83964");
        }

        return channels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDocumentsFromChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method imports new documents from channels.
    /// </summary>
    /// <param name = "_channels">Channels from which to import</param>
    /// <returns>Number of imported documents</returns>
    private static int importDocumentsFromChannels(container _channels)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        int documentCount = 0;

        select firstonly crosscompany TimestampTicks from businessDocumentSubmissionExternal
            order TimestampTicks desc;

        int64 ticks = businessDocumentSubmissionExternal.TimestampTicks;
        str timestampStr = BusinessDocumentSubmissionFunctions::getTimestampUtcFromTicks(ticks);

        JObject documents = BusinessDocumentServiceController::requestByChannels(_channels, timestampStr);

        if (BusinessDocumentVendorImportService::checkDocuments(documents))
        {
            JArray elements = documents.SelectToken(BusinessDocumentServiceController::PayloadToken);

            ttsbegin;

            for (int idx = 0; idx < elements.Count; idx++)
            {
                JObject document = elements.get_Item(idx);
                BusinessDocumentInfo documentInfo = BusinessDocumentInfo::newFromJSON(document);
                BusinessDocumentState state = symbol2Enum(
                    enumNum(BusinessDocumentState),
                    documentInfo.getState());

                var submissionExternal = BusinessDocumentSubmissionExternal::insertByDocumentInfo(documentInfo, state, true);

                BusinessDocumentExternalAgentExecutions::insertByDocumentInfo(documentInfo, submissionExternal);
            }
            
            ttscommit;
            
            documentCount += BusinessDocumentVendorImportService::importDocuments(documents);
        }

        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDocumentsFromChannelsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method imports new documents from channels.
    /// </summary>
    /// <returns>Number of imported documents</returns>
    private static int importDocumentsFromChannelsV2()
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        int documentCount = 0;

        select firstonly crosscompany TimestampTicks from businessDocumentSubmissionExternal
            order TimestampTicks desc;

        int64 ticks = businessDocumentSubmissionExternal.TimestampTicks;
        utcdatetime timestamp = BusinessDocumentSubmissionFunctions::getUtcsDatetimeFromTicks(ticks);

        BusinessDocument businessDocument;
        BusinessDocumentExternalAgents channels;

        while select businessDocument
            where businessDocument.CreatedDateTime > timestamp
            && businessDocument.Direction == BusinessDocumentDirection::Incoming
            join channels
            where channels.AgentId == businessDocument.Channel
        {            
            var submissionExternal = BusinessDocumentSubmissionExternal::insertByBusinessDocument(businessDocument, true);

            if (businessDocument.State == BusinessDocumentState::Pending)
            {
                try
                {
                    var isSuccess = BusinessDocumentVendorImportService::importDocument(businessDocument);

                    if (isSuccess)
                    {
                        documentCount++;
                    }
                }
                catch
                {
                    Error(strFmt("@BusinessDocumentSubmissionService:ErrorOccuredDuringTheImport", businessDocument.UID));
                }
            }
        }

        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentsState</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method updates the state for documents.
    /// Clarifies the status of the document and, if necessary, makes an import.
    /// </summary>
    /// <returns>Number of imported documents</returns>
    private static int updateDocumentsState()
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        int documentCount = 0;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.updateDocumentStatus())
        {
            while select businessDocumentSubmissionExternal
                where businessDocumentSubmissionExternal.State == BusinessDocumentState::Scheduled
                    || businessDocumentSubmissionExternal.State == BusinessDocumentState::Executing
            {
                BusinessDocumentInfo documentInfo = BusinessDocumentExternalController::newSubmission(businessDocumentSubmissionExternal)
                    .lookupDocumentInfo();

                if (BusinessDocumentVendorImportService::updateDocumentState(businessDocumentSubmissionExternal, documentInfo))
                {
                    documentCount++;
                }
            }
        }

        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentsStateV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method updates the state for documents.
    /// Clarifies the status of the document and, if necessary, makes an import.
    /// </summary>
    /// <returns>Number of imported documents</returns>
    private static int updateDocumentsStateV2()
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        BusinessDocument businessDocument;
        int documentCount = 0;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.updateDocumentStatus())
        {
            while select businessDocumentSubmissionExternal
                where businessDocumentSubmissionExternal.State == BusinessDocumentState::Scheduled
                    || businessDocumentSubmissionExternal.State == BusinessDocumentState::Executing
                join businessDocument
                where businessDocument.UID == businessDocumentSubmissionExternal.UID
            {
                if (BusinessDocumentVendorImportService::updateDocumentStateV2(businessDocumentSubmissionExternal, businessDocument))
                {
                    documentCount++;
                }
            }
        }

        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocuments</Name>
				<Source><![CDATA[
    private static boolean checkDocuments(JObject documents)
    {
        JArray documentsPayload = documents.SelectToken(BusinessDocumentServiceController::PayloadToken);

        return documentsPayload
            && documentsPayload.Count > 0
            && !BusinessDocumentSubmissionFunctions::hasException(documents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reimportDocumentsForState</Name>
				<Source><![CDATA[
    private static int reimportDocumentsForState(BusinessDocumentState _state)
    {
        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
        int documentCount;

        while select businessDocumentSubmissionExternal
            where businessDocumentSubmissionExternal.State == _state
        {
            if (ERForInvoicingRouteSwitch::shouldUseV2())
            {
                BusinessDocument document = BusinessDocument::findByUID(businessDocumentSubmissionExternal.UID);

                if (BusinessDocumentVendorImportService::importDocument(document, null, true))
                {
                    documentCount++;
                }
            }
            else
            {
                BusinessDocumentInfo documentInfo = BusinessDocumentExternalController::newSubmission(businessDocumentSubmissionExternal)
                .lookupDocumentInfo();

                if (BusinessDocumentVendorImportService::importDocument(null, documentInfo, true))
                {
                    documentCount++;
                }
            }
        }

        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDocuments</Name>
				<Source><![CDATA[
    private static int importDocuments(JObject documents)
    {
        int documentCount;
        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.importDocuments())
        {
            JArray elements = documents.SelectToken(BusinessDocumentServiceController::PayloadToken);

            for (int idx = 0; idx < elements.Count; idx++)
            {
                boolean isSuccess = false;
                JObject document = elements.get_Item(idx);

                BusinessDocumentInfo documentInfo = BusinessDocumentInfo::newFromJSON(document);
                BusinessDocumentState state = symbol2Enum(
                    enumNum(BusinessDocumentState),
                    documentInfo.getState());

                if (state == BusinessDocumentState::Pending)
                {
                    try
                    {
                        BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;
                        
                        select firstonly businessDocumentSubmissionExternal
                            where businessDocumentSubmissionExternal.UID == str2Guid(documentInfo.getId());

                        documentInfo = BusinessDocumentExternalController::newSubmission(businessDocumentSubmissionExternal).lookupDocumentInfo();

                        // import document
                        isSuccess = BusinessDocumentVendorImportService::importDocument(null, documentInfo, false);

                        if (isSuccess)
                        {
                            documentCount++;
                        }
                    }
                    catch
                    {
                        Error(strFmt("@BusinessDocumentSubmissionService:ErrorOccuredDuringTheImport", documentInfo.getId()));
                    }
                }
            }
        }
        
        return documentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDocument</Name>
				<Source><![CDATA[
    private static boolean importDocument(BusinessDocument businessDocument, BusinessDocumentInfo documentInfo = null, boolean isReimport = false)
    {
        str operationName = isReimport
            ? ERForInvoicingInstrumentationConstants::ReimportDocument
            : ERForInvoicingInstrumentationConstants::ImportDocument;

        boolean isV2Api = ERForInvoicingRouteSwitch::shouldUseV2() && businessDocument.RecId != 0;

        if (!isV2Api && !documentInfo)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        str event;
        str documentUidStr;
        guid documentUid;
        boolean isSuccess = true;
        container importLog;
        str value;
        str agentId = isV2Api ? businessDocument.Channel : documentInfo.getAgentId();
        BusinessDocumentExternalAgents businessDocumentExternalAgents = BusinessDocumentExternalAgents::findByAgentId(agentId);
        BusinessDocumentImportSource businessDocumentImportSource;

        while select businessDocumentImportSource
            where businessDocumentImportSource.BusinessDocumentExternalAgents == businessDocumentExternalAgents.RecId
        {
            if (isV2Api)
            {
                documentUidStr = strLwr(guid2StrWithoutBraces(businessDocument.UID));
                documentUid = businessDocument.UID;
                value = BusinessDocumentSubmissionFunctions::getOutgoingVariableValueByBusinessDocument(
                    businessDocument,
                    businessDocumentImportSource.Name);
            } else
            {
                documentUidStr = documentInfo.getId();
                documentUid = str2Guid(documentUidStr);
                value = BusinessDocumentSubmissionFunctions::getOutgoingVariableValueByDocInfo(documentInfo, businessDocumentImportSource.Name);
            }


            if (!value)
            {
                if (businessDocumentImportSource.IsOptional)
                {
                    continue;
                }
                else
                {
                    Error("@BusinessDocumentSubmissionService:CouldNotDownloadFile");
                    return false;
                }
            }

            // run import in context of specified legal entity
            changecompany(businessDocumentExternalAgents.LegalEntityId)
            {
                Stopwatch stopwatch = Stopwatch::StartNew();
                // run import
                try
                {
                    event = strFmt(operationName, documentUidStr);
                    BusinessDocumentTelemetry::startEvent(event, funcName());

                    ERIRunResult result = BusinessDocumentVendorImportService::runERImport(
                        value,
                        documentUidStr,
                        businessDocumentImportSource);
               
                    isSuccess = isSuccess && result.IsSuccess();

                    importLog += BusinessDocumentSubmissionFunctions::getLogFromErrorCollection(result.SolutionErrors) +
                    BusinessDocumentSubmissionFunctions::getLogFromErrorCollection(result.ValidationErrors);
                }
                catch
                {
                    Error(strFmt("@BusinessDocumentSubmissionService:ErrorOccuredDuringTheImport", documentUidStr));
                }
                finally
                {
                    BusinessDocumentTelemetry::finishEvent(
                            event,
                            funcName(),
                            isSuccess,
                            stopwatch.ElapsedMilliseconds);
                }
            }

            BusinessDocumentSubmissionExternal businessDocumentSubmissionExternal;

            select firstonly businessDocumentSubmissionExternal
                    where businessDocumentSubmissionExternal.UID == documentUid;

            if (isSuccess)
            {
                BusinessDocumentExternalController::newSubmission(businessDocumentSubmissionExternal).setDocumentCompleted();
            }
            else
            {
                Error(strFmt("@BusinessDocumentSubmissionService:ImportFailures", documentUidStr));

                if (!isReimport)
                {
                    BusinessDocumentExternalController::newSubmission(businessDocumentSubmissionExternal).setDocumentPostProcessFailed();
                }

                if (importLog)
                {
                    ttsbegin;
                    businessDocumentSubmissionExternal.selectForUpdate(true);
                    businessDocumentSubmissionExternal.Log += importLog;
                    businessDocumentSubmissionExternal.update();
                    ttscommit;
                }
            }
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runERImport</Name>
				<Source><![CDATA[
    private static ERIRunResult runERImport(
        str _file,
        str _documentUID,
        BusinessDocumentImportSource _importSource)
    {
        boolean bRes = false;
        str integrationPoint = classStr(ERTableDestination) + '#' + _importSource.DataEntityName;

        using (var stream = new MemoryStream(Encoding::UTF8.GetBytes(_file)))
        {
            var runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(
                                _importSource.ERModelMappingTable,
                                integrationPoint,
                                true);

            ERmodelDefinitionInputParametersAction inputParameters = new ERmodelDefinitionInputParametersAction();
                             
            inputParameters
                .addParameter('$BusinessDocumentId', strUpr(_documentUID));

            runner.withParameter(inputParameters);
            runner.init();

            ERModelDefinitionParameters parameters = runner.getParameters();
            ERModelDefinitionParametersTraverser traverser = new ERModelDefinitionParametersTraverser(parameters);
            while (traverser.moveNext())
            {
                ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
                if (current)
                {
                    current.parmInputDataStream(stream);
                    break;
                }
            }

            ERIRunResult result = runner.runAndReturnResult();
            return result;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>