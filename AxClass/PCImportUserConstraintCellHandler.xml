<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportUserConstraintCellHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportUserConstraintCellHandler extends PCImportModelNodeHandler
{
    PCTableConstraintCell               cell;
    PCSolverValue                       value;

    RefRecId                            columnRecId;
    RefRecId                            attributeTypeRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEnumValueFromSolverValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an enumeration value given an attribute type and a solver value.
    /// </summary>
    /// <returns>
    /// The record ID of an enumeration value record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// T enumeration value is not found.
    /// </exception>
    protected RefRecId findEnumValueFromSolverValue()
    {
        EcoResTextValue                         textValue;
        EcoResEnumerationAttributeTypeValue     enumerationValue;
        PCSolverTextValue                       solverTextValue;

        select firstonly RecId from textValue
            join RecId from enumerationValue
                where   enumerationValue.AttributeType  == attributeTypeRecId
                &&      enumerationValue.Value          == textValue.RecId
            join RecId from solverTextValue
                where solverTextValue.TextValue == textValue.RecId
                &&    solverTextValue.Value     == value;

        if (textValue.RecId == 0)
        {
            throw error(Error::missingRecord(tableStr(EcoResTextValue)));
        }

        return textValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets value based on <c>AttributeDataType</c>.
    /// </summary>
    /// <returns>
    ///     The record ID for know attribute data types.
    /// </returns>
    private RefRecId getValue()
    {
        RefRecId ret;
        EcoResBooleanValue                  booleanValue;
        EcoResIntValue                      intValue;

        switch (EcoResAttributeType::find(attributeTypeRecId).DataType)
        {
            case AttributeDataType::Text:
                ret                             = this.findEnumValueFromSolverValue();
                break;

            case AttributeDataType::Integer:
                intValue.IntValue               = str2int(value);
                intValue.insert();
                ret = intValue.RecId;
                break;

            case AttributeDataType::TrueFalse:
                booleanValue.BooleanValue       = this.xml2EcoResBool(value);
                booleanValue.insert();
                ret = booleanValue.RecId;
                break;

            default:
                ret = this.getValueDefault();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets default value based on <c>AttributeDataType</c>.
    /// </summary>
    /// <returns>
    ///     The record ID for default attribute data type.
    /// </returns>
    [Replaceable]
    protected RefRecId getValueDefault()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    protected void importData()
    {
        PCImportUserConstraintRowHandler parent = this.parent();

        [columnRecId, attributeTypeRecId]       = parent.nextColumnDefinition();

        value                                   = this.getFieldByName(fieldStr(PCTableConstraintCell, Value));

        cell.TableConstraintRow                 = this.parent().recordRecId();
        cell.TableConstraintColumnDefinition    = columnRecId;
        cell.Value                              = this.getValue();
        cell.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return cell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportUserConstraintCellHandler construct()
    {
        return new PCImportUserConstraintCellHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>