<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWFormCtrl_WMSPickingRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Classes adds a new layer below the PdsCWFormCtrl to allow the independent call
/// to valiadtion of CW qtys
/// </summary>
/// <remarks>
/// This class extends the parent PdsCWFormCtrl class. The class will call the
/// standard catch weight validation
/// </remarks>
class PdsCWFormCtrl_WMSPickingRegistration extends PdsCWFormCtrl_Std
{
    Map field_M_map;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update form datasource after 'active' call for datasource
    /// </summary>
    /// <remarks>
    /// Method also calls the Form control button manager.
    /// </remarks>
    public void dataSourceActivePost()
    {
        super();

        this.updateFormControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the datasource has been initialized
    /// </summary>
    /// <param name="_buffer">
    /// the buffer related to the datasource
    /// </param>
    /// <remarks>
    /// Adding the query range to filter the lines for catch weight items, that
    /// have a 0 catch weight quantity.
    /// </remarks>
    public void dataSourceInitPost(Common _buffer)
    {
        FormDataSource          ds;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        super(_buffer);

        ds = FormDataUtil::getFormDataSource(_buffer);
        qbds = ds.query().dataSourceTable(_buffer.TableId);
        qbr = SysQuery::findOrCreateRange(
                            qbds,
                            fieldnum(WMSOrderTrans,PdsCWZeroCWLine));
        qbr.value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdFormControlMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets teh field_M_map map.
    /// </summary>
    /// <returns>The field_M_map map.</returns>
    /// <remarks>
    /// <syntax>
    /// public Map fieldIdFormControlMap()
    /// </syntax>
    /// </remarks>
    public Map fieldIdFormControlMap()
    {
        return field_M_map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete the standard field modified functionality
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of modified field
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        this.updateFormControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    public void initPost()
    {
        #define.TransQtyCtrl('Qty')
        #define.TransCWQtyCtrl('PdsCWQty')
        Map ctrlMap = this.fieldIdFormControlMap();

        super();

        ctrlMap.insert(fieldNum(WMSOrderTrans, Qty), formRun.design().controlName(#TransQtyCtrl));
        ctrlMap.insert(fieldNum(WMSOrderTrans, PdsCWQty), formRun.design().controlName(#TransCWQtyCtrl));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new isntance of the PdsCWFormCtrl_WMSPickingRegistration class.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();

        this.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
            [[fieldnum(WMSOrderTrans, Qty),
              fieldnum(WMSOrderTrans, PdsCWQty),
              false]]));

        this.parmItemFieldId(fieldnum(WMSOrderTrans, ItemId));
        this.parmUnitMethodStr(tablemethodstr(WMSOrderTrans, pdsCWUnitId));

        field_M_map = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControls</Name>
				<Source><![CDATA[
    protected void updateFormControls()
    {
        MapEnumerator mapEnum = this.fieldIdFormControlMap().getEnumerator();
        FormControl fc;

        while (mapEnum.moveNext())
        {
            fc = mapEnum.currentValue();
            fc.allowEdit(formDS.object(mapEnum.currentKey()).allowEdit());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instance of class.
    /// </summary>
    /// <returns>
    /// New instance of PdsCWFormCtrl_WMSPickingRegistration class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsCWFormCtrl_WMSPickingRegistration construct()
    /// </syntax>
    /// </remarks>
    public static PdsCWFormCtrl_WMSPickingRegistration construct()
    {
        return new PdsCWFormCtrl_WMSPickingRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of thelass PdsCWFormCtrl_WMSPickingRegistration
    /// using the FormRun parameter.
    /// </summary>
    /// <param name="_fr">
    /// FormRun object that the class controls.
    /// </param>
    /// <returns>
    /// New instance of PdsCWFormCtrl_WMSPickingRegistration class.
    /// </returns>
    public static PdsCWFormCtrl_WMSPickingRegistration newFromForm(
        FormRun _fr)
    {
        PdsCWFormCtrl_WMSPickingRegistration cwCtrl;

        cwCtrl = PdsCWFormCtrl_WMSPickingRegistration::construct();
        cwCtrl.parmFormRun(_fr);

        return cwCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>