<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionJourDP_CH_QRBill_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension class of Cust collection report data provider to fill QR-Bill specific fields in the GIRO report.
/// </summary>
[ExtensionOf(classStr(CustCollectionJourDP))]
public final class CustCollectionJourDP_CH_QRBill_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    protected void initGiro(CustCollectionLetterJour _custCollectionLetterJour)
    {
        next initGiro(_custCollectionLetterJour);

        if (giroType == PaymentStub::QRBill)
        {
            moneyTransferSlip.bankAccountId(_custCollectionLetterJour.paymentBankAccountId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustCollectionJourTmp</Name>
				<Source><![CDATA[
    protected void initCustCollectionJourTmp(
        CustCollectionLetterJour    _custCollectionLetterJour,
        CustTable                   _custTable,
        CustCollectionLetterTrans   _custCollectionLetterTrans)
    {
        next initCustCollectionJourTmp(_custCollectionLetterJour, _custTable, _custCollectionLetterTrans);

        if (giroType == PaymentStub::QRBill)
        {
            custCollectionJourTmp.CollectionAmount_CH = _custCollectionLetterJour.sumCollectionAmountFee() +
                    (_custCollectionLetterJour.Status == PrintPostCancel::Posted
                        ? 0
                        : _custCollectionLetterJour.taxAmountCur());
            custCollectionJourTmp.IBAN_CH = moneyTransferSlip.getQRIBANOrIBAN(_custCollectionLetterJour.PaymId);
            custCollectionJourTmp.currencyCodeISO_CH = Currency::currencyCodeISO(_custCollectionLetterJour.CurrencyCode);
            custCollectionJourTmp.CollectionName = _custTable.name();

            LogisticsPostalAddress collectionAddress = LogisticsPostalAddress::findRecId(_custCollectionLetterJour.PostalAddress);
            custCollectionJourTmp.CollectionAddressLine1_CH = strRemoveCr(collectionAddress.Street);
            custCollectionJourTmp.CollectionAddressLine2_CH = strFmt('%1 %2', collectionAddress.ZipCode, collectionAddress.City);
            custCollectionJourTmp.CollectionCountryRegionId_CH = collectionAddress.CountryRegionId;
            custCollectionJourTmp.CollectionLetterOCRField = _custCollectionLetterJour.PaymId;

            custCollectionJourTmp.BillInformation_CH = CustQRBillQRCodeCreator_CH::getBillInformation(_custCollectionLetterJour);
            custCollectionJourTmp.LanguageId_CH = _custCollectionLetterJour.LanguageId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>