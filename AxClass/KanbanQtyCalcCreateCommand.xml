<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQtyCalcCreateCommand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanQtyCalcCreateCommand</c> class creates <c>KanbanQuantityCalculationProposal</c> records.
/// </summary>
public class KanbanQtyCalcCreateCommand extends KanbanQtyCalcCommand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>KanbanQuantityCalculationProposal</c> records by selecting specific kanban rules.
    /// </summary>
    protected void execute()
    {
        KanbanRule                              kanbanRule;
        KanbanRuleFixed                         kanbanRuleFixed;
        LeanCoverageKanbanRule                  leanCoverageKanbanRule;
        KanbanQuantityPolicyKanbanRuleFixed     kanbanQuantityPolicyKanbanRuleFixed;
        RefRecId                                kanbanQuantityCalculationRecId = kanbanQuantityCalculation.RecId;

        KanbanQuantityCalculationProposal       kanbanQuantityCalculationProposal;

        ttsbegin;

        // delete existing proposal lines first.
        kanbanQuantityCalculationProposal.skipDeleteMethod(true);
        delete_from kanbanQuantityCalculationProposal
            where kanbanQuantityCalculationProposal.KanbanQuantityCalculation == kanbanQuantityCalculation.RecId;

        // create new lines
        insert_recordset kanbanQuantityCalculationProposal (KanbanQuantityCalculation, KanbanRuleFixed, KanbanQuantityProposal, kanbanProductQuantity)
            select kanbanQuantityCalculationRecId, RecId, Level from kanbanRuleFixed
                join Quantity from kanbanRule
                    where kanbanRule.RecId == kanbanRuleFixed.ParentRecId
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanRuleFixed.ParentRecId
                       && leanCoverageKanbanRule.ValidFrom  <= kanbanQuantityCalculation.KanbanRuleActiveAsOfDate
                       && (! leanCoverageKanbanRule.ValidTo || leanCoverageKanbanRule.ValidTo >= kanbanQuantityCalculation.KanbanRuleActiveAsOfDate)
                exists join kanbanQuantityPolicyKanbanRuleFixed
                    where kanbanQuantityPolicyKanbanRuleFixed.KanbanRuleFixed       == kanbanRuleFixed.RecId
                       && kanbanQuantityPolicyKanbanRuleFixed.KanbanQuantityPolicy  == kanbanQuantityCalculation.KanbanQuantityPolicy;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CalculationStatus</c> field for the <c>KanbanQuantityCalculation</c> record.
    /// </summary>
    public void updateStatus()
    {
        kanbanQuantityCalculationLock.CalculationStatus = KanbanQuantityCalculationStatus::Created;
        kanbanQuantityCalculationLock.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcCreateCommand</c> class.
    /// </summary>
    /// <returns>
    /// A <c>KanbanQtyCalcCreateCommand</c> object.
    /// </returns>
    private static KanbanQtyCalcCreateCommand construct()
    {
        return new KanbanQtyCalcCreateCommand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        KanbanQuantityCalculation kanbanQuantityCalculation = KanbanQtyCalcCommand::getKanbanQuantityCalculationFromArgs(_args);

        KanbanQtyCalcCreateCommand kanbanQtyCalcCreateCommand = KanbanQtyCalcCreateCommand::newStandard(kanbanQuantityCalculation.data());
        kanbanQtyCalcCreateCommand.saveLast();

        // no prompt - just execute

        kanbanQtyCalcCreateCommand.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcCreateCommand</c> class.
    /// </summary>
    /// <param name="_kanbanQuantityCalculation">
    /// A <c>KanbanQuantityCalculation</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanQtyCalcCreateCommand</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanQtyCalcCreateCommand    newStandard(
        KanbanQuantityCalculation   _kanbanQuantityCalculation)
    {
        KanbanQtyCalcCreateCommand kanbanQtyCalcCreateCommand = KanbanQtyCalcCreateCommand::construct();
        kanbanQtyCalcCreateCommand.parmKanbanQuantityCalculation(_kanbanQuantityCalculation);

        return kanbanQtyCalcCreateCommand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
