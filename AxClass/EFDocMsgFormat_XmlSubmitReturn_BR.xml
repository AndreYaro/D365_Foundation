<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlSubmitReturn_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the submit return web service.
/// </summary>
class EFDocMsgFormat_XmlSubmitReturn_BR extends EFDocMsgFormat_XmlBase_BR implements IEFDocMsgFormat
{
    EFiscalDocument_BR      fiscalDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from <c>EFiscalDocVersion_BR</c> enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the XML returned by the submit return web service.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str         content;
        str         batchReturnCode;
        str         returnCode;
        str         returnCodeDescription;
        str         returnReceptNumber;
        str         returnProtocolNumber;
        str         returnDateTime;
        str         returnMessage;

        utcdatetime dateTime;
        ;

        content = conpeek(_stream.read(),1);
        xmlDoc.loadXml(content);

        batchReturnCode         = this.getNodeContent('/x:retConsReciNFe/x:cStat');
        returnReceptNumber      = this.getNodeContent('/x:retConsReciNFe/x:nRec');

        returnMessage           = this.existsNode('/x:retConsReciNFe/x:xMsg') ? this.getNodeContent('/x:retConsReciNFe/x:xMsg') : '';

        if (batchReturnCode == #BatchProcessed)
        {
            returnCode              = this.getNodeContent('/x:retConsReciNFe/x:protNFe/x:infProt/x:cStat');
            returnCodeDescription   = this.getNodeContent('/x:retConsReciNFe/x:protNFe/x:infProt/x:xMotivo');
            returnDateTime          = this.getNodeContent('/x:retConsReciNFe/x:protNFe/x:infProt/x:dhRecbto');

            if (returnCode == #Authorized)
            {
                returnProtocolNumber    = this.getNodeContent('/x:retConsReciNFe/x:protNFe/x:infProt/x:nProt');
            }
        }
        else
        {
            returnCode              = this.getNodeContent('/x:retConsReciNFe/x:cStat');
            returnCodeDescription   = this.getNodeContent('/x:retConsReciNFe/x:xMotivo');
        }

        dateTime = DateTimeUtil::parse(returnDateTime);

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmReceiptNumber(returnReceptNumber);
        _returnInfo.parmProtocolNumber(returnProtocolNumber);
        _returnInfo.parmProcessDateTime(dateTime);
        _returnInfo.parmReturnMessage(returnMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        return '2.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which web service this format is to be sent to.
    /// </summary>
    /// <returns>A web service from <c>EFDocWebService_BR</c> enumerator.</returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::SubmitReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
/// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        XmlElement      consReciNFeElement;

        if (_documentList.moveNext())
        {
            fiscalDocument = _documentList.current();

            consReciNFeElement  = this.createElement('consReciNFe');
            consReciNFeElement.setAttribute('versao', this.version());

            consReciNFeElement.appendChild(this.createElementWithValue('tpAmb', fiscaldocument.fiscalEstablishment().webServiceEnvironment(fiscaldocument.fiscalDocument()) == EFDocEnvironment_BR::Production ? '1' : '2' ));
            consReciNFeElement.appendChild(this.createElementWithValue('nRec', fiscalDocument.receiptNumber()));

            xmlDoc = XmlDocument::newXml(consReciNFeElement.outerXml());
            xmlDoc.insertBefore(xmlDoc.createXmlDeclaration('1.0', 'UTF-8', ''), xmlDoc.documentElement());

            _stream.write(xmlDoc.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlSubmitReturn_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlSubmitReturn_BR</c> object.</returns>
    public static EFDocMsgFormat_XmlSubmitReturn_BR construct()
    {
        return new EFDocMsgFormat_XmlSubmitReturn_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>