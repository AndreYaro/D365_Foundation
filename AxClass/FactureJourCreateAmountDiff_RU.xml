<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateAmountDiff_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureJourCreateAmountDiff_RU extends FactureJourCreate_RU
{
    FactureId_RU  newFactureId;
    CustVendTrans custVendTrans;
    AmountMST     totalFactureAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMap</Name>
				<Source><![CDATA[
    protected boolean checkMap()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        LedgerJournalTrans localLedgerJournalTrans;
        ;

        localLedgerJournalTrans = _trans as LedgerJournalTrans;

        return LedgerJournalTable::find(localLedgerJournalTrans.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return LedgerJournalTrans_RU_Extension::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        super();

        factureJour.FactureId            = newFactureId;
        factureJour.Voucher              = custVendTrans.Voucher;
        factureJour.CustVendTransRecId   = custVendTrans.RecId;
        factureJour.CustVendTransTableId = custVendTrans.TableId;
        factureJour.FactureAmount        = custVendTrans.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        FactureLineType_RU factureLineType;

        factureTrans = holder.factureTrans();

        select sum(LineAmount),
               sum(TaxAmount)
            from  factureTrans
            where factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module    == factureJour.Module;

        factureJour.FactureTax     = factureTrans.TaxAmount;
        factureJour.FactureAmount -= factureTrans.TaxAmount;

        if (factureType == FactureType_RU::AmoutDifference)
        {
            if (abs(factureJour.FactureAmount) != abs(factureTrans.LineAmount))
            {
                factureJour.newTrans(factureJour.FactureAmount - factureTrans.LineAmount,
                                     0,
                                     0,
                                     FactureLineType_RU::AmountDifference,
                                     ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, custVendTrans.TransDate),
                                     0,
                                     0,
                                     0,
                                     0,
                                     VATType_RU::NonLiable,
                                     "@GLS101335",
                                     custVendTrans.DefaultDimension);
            }
        }

        if (factureType == FactureType_RU::ExchAdj           ||
            factureType == FactureType_RU::AdvanceAdjustment ||
            factureType == FactureType_RU::VATAdjustment)
        {
            select sum(LineAmountMST),
                   sum(TaxAmountMST)
                from  factureTrans
                where factureTrans.FactureId == factureJour.FactureId &&
                      factureTrans.Module    == factureJour.Module;

            if (abs(totalFactureAmountMST) != abs(factureTrans.LineAmountMST + factureTrans.TaxAmountMST))
            {
                switch (factureType)
                {
                    case FactureType_RU::ExchAdj :
                        factureLineType = FactureLineType_RU::ExchAdj;
                        break;

                    case FactureType_RU::AdvanceAdjustment :
                        factureLineType = FactureLineType_RU::AdvanceAdjustment;
                        break;

                    case FactureType_RU::VATAdjustment :
                        factureLineType = FactureLineType_RU::VATAdjustment;
                        break;
                }

                factureJour.newTrans(0,
                                     0,
                                     0,
                                     factureLineType,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     VATType_RU::NonLiable,
                                     enum2str(factureLineType) + (custVendTrans.Invoice ? "@GLS102908" + "@SYS34952" + "@SYS14204" + "@GLS102908" + custVendTrans.Invoice + "@SYS34953" : "@GLS102908"),
                                     custVendTrans.DefaultDimension,
                                     (abs(totalFactureAmountMST) - abs(factureTrans.LineAmountMST + factureTrans.TaxAmountMST)) * sign(factureTrans.LineAmountMST));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    public void parmCustVendTrans(CustVendTrans _custVendTrans)
    {
        ;
        custVendTrans = _custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureExtId</Name>
				<Source><![CDATA[
    public FactureExternalId_RU parmFactureExtId(FactureExternalId_RU _factureExtId = factureExtId)
    {
        ;
        factureExtId = _factureExtId;

        return factureExtId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureId</Name>
				<Source><![CDATA[
    public void parmFactureId(FactureId_RU  _factureId)
    {
        newFactureId = _factureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalFactureAmountMST</Name>
				<Source><![CDATA[
    public AmountMST parmTotalFactureAmountMST(AmountMST _totalFactureAmountMST = totalFactureAmountMST)
    {
        totalFactureAmountMST = _totalFactureAmountMST;
        return totalFactureAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullyFacturedInvoices</Name>
				<Source><![CDATA[
    protected void updateFullyFacturedInvoices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureJourCreateAmountDiff_RU construct(CustVendTrans _custVendTrans)
    {
        FactureJourCreateAmountDiff_RU  ret;

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                ret = new FactureJourCreateAmountDiffCust_RU();
                break;
            case tablenum(VendTrans) :
                ret = new FactureJourCreateAmountDiffVend_RU();
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        ret.parmCustVendTrans(_custVendTrans);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>