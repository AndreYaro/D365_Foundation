<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalAcquisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetProposalAcquisition</c> class is used to create fixed asset acquisition proposals for
///    the asset journal.
/// </summary>
public class AssetProposalAcquisition extends AssetProposal implements BatchRetryable
{
    private DialogField dialogRunDate;
    private const Version ProposalAcquisitionVersion = 100;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the acquisition for the proposal.
    /// </summary>
    /// <returns>
    ///    The <c>AcquisionAdj</c> value.
    /// </returns>
    public AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::Acquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform actions required after the modification of the journal name field.
    /// </summary>
    /// <param name = "_control">The control that has been modified.</param>
    /// <returns>true if operation was successful; otherwise false.</returns>
    public boolean journalNameModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret && dialogVoucherType_CN)
        {
            dialogVoucherType_CN.allowEdit(_control.valueStr() != "");
            dialogVoucherType_CN.value("");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the acquisition proposal selection dialog box.
    /// </summary>
    /// <returns>
    ///    The dialog box for the acquisition proposal.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog;

        dialog = super();

        dialog.caption("@SYS67582");

        if (this.parmBatchEnabled() && dialog.dialogForm())
        {
            // Make Batch processing as the default option.
            this.batchInfo().parmBatchExecute(true);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            dialogRunDate = dialog.addFieldValue(extendedTypeStr(AssetTransDate), runDate, "@SYS14656", "@ApplicationSuite_Localization:AcquisitionProposalToDate");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query           query = new Query(queryStr(assetproposal));
        QueryBuildRange qr;

        super();

        query.name("@FixedAssets:FA_QueryTitle_ValueModelAcquisition");
        qr = query.dataSourceTable(tableNum(AssetBookTable)).addRange(fieldNum(AssetBookTable,CurrentOperationsTax));
        qr.status(RangeStatus::Locked);

        qr = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook,Status));

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoCZ, #IsoHU]))
        {
            str queryRangeValue = queryValue(AssetStatus::Acquired_CZ);

            if (AssetParameters::find().AllowPreAcquisition_CZ == AssetAllowPreAcquisition_CZ::No)
            {
                queryRangeValue = queryRangeConcat(queryRangeValue, queryValue(AssetStatus::NoAcquisition));
            }

            qr.value(queryRangeValue);
        }
        else
        {
        // </GEEU>
            qr.value(queryValue(AssetStatus::NoAcquisition));
        // <GEEU>
        }
        // </GEEU>

        qr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
        this.updatePostingLayer(LedgerJournalTable::find(journalNum).CurrentOperationsTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBundleReady</Name>
				<Source><![CDATA[
    public boolean isBundleReady(int _bookCount)
    {
        return (_bookCount >= this.getMaxBooksInTaskBoundry());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the asset acquisition journal lines for the outstanding invoices that are associated with
    /// the asset that have not been acquired.
    /// </summary>
    /// <remarks>
    ///    The asset journal line entry is created by using the line amount and offset account from the
    ///    corresponding invoice line.
    /// </remarks>
    public void run()
    {
        AssetJournal        assetJournal;
        AssetBook           assetBook;
        AssetTable          assetTable;
        AssetTransDate      transDate;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        VendInvoiceJour     vendInvoiceJour;
        InventTable         inventTable;
        InventModelGroup    inventModelGroup;
        ItemGroupId         itemGroupId;
        LedgerDimensionDefaultAccount defaultLedgerDimension;
        VendInvoiceTrans    vendorInvoiceTrans;
        AmountMST           itemMiscChargesAmount;
        AmountMST           lineAmount;
        AmountMST           totalAcquisitionAmount;
        CurrencyExchangeHelper transExchRateHelper;
        boolean             isFromAP = false;
        // <GIN>
        TaxTrans            taxTransLoc;
        TaxTrans_IN         taxTransInLoc;
        PurchLine           purchLineLoc;
        AmountCur           loadOnInventorySum, purchValueLoc;
        TaxTrans_W          taxTransLoc_W;
        // </GIN>

        LedgerJournalTable journalTable;

        // Running as a periodic batch task.
        if (this.parmBatchEnabled() && this.isInBatch())
        {
            this.buildTasks();
        }
        else
        {
            // User can overwrite the posting layer on the proposal form.
            // Making sure that the query matches the layer of the journal.
            if (this.parmBatchEnabled() && journalName)
            {
                this.updatePostingLayer(journalName.CurrentOperationsTax, RangeStatus::Hidden);
            }

            this.createAndLockJournalForBatchProcessing();

            assetJournal = this.createAssetJournal();

            // <GCN>
            if (assetJournal && LedgerParameters::isChineseVoucher_CN())
            {
                // Set the voucher type for asset journal with the value user selected.
                assetJournal.parmVoucherType_CN(voucherType_CN);
            }
            // </GCN>

            boolean hasSameAccoutingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
            boolean executeReportingCurrencyLogic;

            if (!hasSameAccoutingAndReportingCurrency)
            {
                executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
            }

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(AssetBook)))
                {
                    assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
                    assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
                    fiscalCalendarPeriod = null;

                    if (this.isBookCalculatedInPreviousRun(assetBook))
                    {
                        continue;
                    }

                    AssetCacheManager::removeCacheAssetTrans(assetBook.AssetId, assetBook.BookId);

                    if (assetBook.AcquisitionPrice && !assetBook.IsDerogatoryBook_FR)
                    {
                        ttsbegin;

                        // if it is purchase, acquisition date must be used
                        transDate = this.initFirstDate(assetBook.AcquisitionDate, assetBook.AssetId);

                        // If this asset proposal is related to an invoice detail line, use net price
                        // rather than acquisition price.
                        // Note that there may be multiple lines, so must be a loop.
                        // Select only active lines
                        while
                            select AssetId, AssetBookId, VendInvoiceInfoLineRecId
                                from vendInvoiceInfoLine_Asset
                                // <GCN><GEERU>
                                join LineAmount, ItemId, InventTransId, ParmId, InventDimId, SourceDocumentLine, ProcurementCategory, OrderAccount, TaxGroup from vendInvoiceInfoLine
                                // </GEERU></GCN>
                                where
                                    vendInvoiceInfoLine_Asset.AssetId == assetBook.AssetId
                                    && vendInvoiceInfoLine_Asset.AssetAcquired == NoYes::No
                                    && vendInvoiceInfoLine_Asset.AssetTransTypePurch == AssetTransTypePurch::Acquisition
                                    && vendInvoiceInfoLine_Asset.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
                                    && vendInvoiceInfoLine.ParmId != ''
                        {
                            isFromAP = true;

                            // If the item group does not have PostOnHandFinancial set, then
                            // we need to get the account from the PurchConsump
                            inventTable         = InventTable::find(vendInvoiceInfoLine.ItemId);
                            inventModelGroup    = inventTable.modelGroup();
                            itemGroupId         = inventTable.itemGroupId();

                            if (inventModelGroup.PostOnhandFinancial)
                            {
                                // we get the ledgerAccount from the invent issue FA account when
                                // we do the acquisition, and the invent issue account if we don't have that
                                defaultLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                                            this.buildItemLedgerDimensionParameter(
                                                                                    InventAccountType::InventIssueFixedAsset,
                                                                                    vendInvoiceInfoLine,
                                                                                    itemGroupId));
                                // </GEERU>
                                if (defaultLedgerDimension == 0)
                                {
                                    // <GCN>
                                    if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                                    {
                                        defaultLedgerDimension = InventPosting::itemLedgerDimensionExtendParm_CN(
                                                        InventAccountType::InventIssue,
                                                        InventPostingExtendParm_CN::constructInventDim(vendInvoiceInfoLine.inventDim()),
                                                        vendInvoiceInfoLine.ItemId,
                                                        vendInvoiceInfoLine.inventTable().itemGroupId());
                                    }
                                    else
                                    {
                                        // </GCN>
                                        defaultLedgerDimension = InventPosting::itemLedgerDimensionFromParameter(
                                                                                    this.buildItemLedgerDimensionParameter(
                                                                                    InventAccountType::InventIssue,
                                                                                    vendInvoiceInfoLine,
                                                                                    itemGroupId));
                                        // <GCN>
                                    }
                                    // </GCN>
                                }
                            }
                            else
                            {
                                defaultLedgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(
                                    this.buildAccountItemLedgerDimensionParameter(
                                        vendInvoiceInfoLine,
                                        vendInvoiceInfoLine.inventDim()));
                            }
                            assetJournal.parmLedgerJournalOffsetLedgerDimension(defaultLedgerDimension);

                            // Transaction date must be based on the inventory transaction
                            select firstonly InvoiceDate from vendInvoiceJour where
                                            vendInvoiceJour.ParmId == vendInvoiceInfoLine.ParmId;

                            // <GIN>
                            if (TaxParameters::checkTaxParameters_IN())
                            {
                                while select sum(TaxInCostPrice), sum(TaxInCostPriceRegulated)
                                                from taxTransLoc
                                                group by TaxAutogenerated
                                                exists join purchLineLoc
                                                exists join taxTransInLoc
                                                where taxTransLoc.RecId == taxTransInLoc.RefRecId
                                                    && taxTransInLoc.SourceRecId == purchLineLoc.RecId
                                                    && taxTransInLoc.SourceTableId == purchLineLoc.TableId
                                                    && purchLineLoc.RecId == assetTable.PurchLineRecId
                                                join RecId from taxTransLoc_W
                                                    where taxTransLoc_W.TaxTrans == taxTransLoc.RecId
                                                    && taxTransLoc_W.TaxType_IN != TaxType_IN::None
                                {
                                    if (taxTransLoc.TaxAutogenerated)
                                    {
                                        loadOnInventorySum = taxTransLoc.TaxInCostPrice;
                                    }
                                    else
                                    {
                                        loadOnInventorySum = taxTransLoc.TaxInCostPriceRegulated;
                                    }
                                }

                                purchValueLoc = vendInvoiceInfoLine.LineAmount + loadOnInventorySum;
                                if (!this.checkTransAlreadyPosted(assetBook, purchValueLoc, vendInvoiceJour.InvoiceDate, assetTransType::Acquisition))
                                {
                                    assetJournal.createTrans(purchValueLoc, assetBook, vendInvoiceJour.InvoiceDate);
                                }
                            }
                            else
                            {
                                // </GIN>

                                select firstonly RecId, InvoiceDate, CurrencyCode, LineAmount from vendorInvoiceTrans
                                                where vendorInvoiceTrans.SourceDocumentLine == vendInvoiceInfoLine.SourceDocumentLine;
                                Debug::assert(vendorInvoiceTrans.RecId);

                                transExchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                                                Ledger::current(),
                                                vendorInvoiceTrans.InvoiceDate);

                                // Asset APIs require amounts to be in accounting currency
                                lineAmount = transExchRateHelper.calculateTransactionToAccounting(
                                                                                    vendorInvoiceTrans.CurrencyCode,
                                                                                    vendorInvoiceTrans.LineAmount,
                                                                                    true);

                                itemMiscChargesAmount = MarkupTrans::getItemMiscChargesAmount(vendorInvoiceTrans.TableId, vendorInvoiceTrans.RecId);
                                totalAcquisitionAmount = lineAmount + itemMiscChargesAmount + this.getTaxInCostPriceMST(vendorInvoiceTrans.TableId, vendorInvoiceTrans.RecId);
                                if (!this.checkTransAlreadyPosted(assetBook, totalAcquisitionAmount, vendInvoiceJour.InvoiceDate, assetTransType::Acquisition))
                                {
                                    assetJournal.createTrans(totalAcquisitionAmount, assetBook, vendInvoiceJour.InvoiceDate);
                                }

                                // <GIN>
                            }
                            // </GIN>
                            assetJournal.parmLedgerJournalOffsetLedgerDimension(0);

                            AssetTransVendInvoiceTrans::createAssetTransVendInvoiceTrans(
                                vendInvoiceInfoLine_Asset,
                                assetJournal.parmVoucher(), 
                                vendInvoiceJour,
                                vendorInvoiceTrans);
                        }

                        if (!isFromAP)
                        {
                            AssetAmount acquisitionPrice = assetBook.AcquisitionPrice;
                            transDate = assetBook.AcquisitionDate;

                            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                            {
                                if (AssetCategorizationDate_CZFlight::instance().isEnabled())
                                {
                                    transDate = transDate ? transDate : runDate;
                                }
                                else
                                {
                                    AssetAmount preAcquisitionPrice = AssetTrans::amountMSTPerDateTransTypes(
                                        assetBook.AssetId,
                                        assetBook.BookId,
                                        [AssetTransType::PreAcquisition_CZ],
                                        dateNull(),
                                        runDate ? runDate : maxDate());

                                    if (preAcquisitionPrice)
                                    {
                                        acquisitionPrice = preAcquisitionPrice;

                                        transDate = runDate ? runDate : transDate;
                                    }
                                }
                            }

                            // If not related to invoice line, create using acquisition price.
                            // if it is purchase, acquisition date must be used.
                            transDate = this.initFirstDate(transDate, assetBook.AssetId);
                            assetJournal.createTrans(acquisitionPrice, assetBook, transDate);
                        }

                        // <GEEHU>
                        if (AssetBookTable::find(assetBook.BookId).LowCostAsset_HU)
                        {
                            assetJournal.parmAssetTransType(AssetTransTypeJournal::Depreciation);
                            AssetAmount depreciationAmount = assetBook.AcquisitionPrice * (-1);

                            if (executeReportingCurrencyLogic)
                            {
                                assetJournal.parmReportingCurrencyAmount(this.getAmountInReportingCurrency(depreciationAmount, transDate, hasSameAccoutingAndReportingCurrency));
                            }

                            assetJournal.createTrans(depreciationAmount, assetBook, transDate);
                            assetJournal.parmAssetTransType(this.assetTransType());
                        }
                        // </GEEHU>
                        // <GEEPL>
                        if (assetBook.DeprPrevPeriods_PL)
                        {
                            assetJournal.parmAssetTransType(AssetTransTypeJournal::AccumulatedDepreciation_PL);
                            assetJournal.parmLedgerJournalOffsetLedgerDimension(0);
                            assetJournal.createTrans(-assetBook.DeprPrevPeriods_PL, assetBook, transDate);
                            assetJournal.parmAssetTransType(this.assetTransType());
                        }
                        // </GEEPL>

                        ttscommit;
                    }
                }

                isFromAP = false;
            }

            this.updateJournalTotals();
            this.unlockJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>AssetJournal</c>.
    /// </summary>
    /// <returns>An instance of <c>AssetJournal</c>.</returns>
    protected AssetJournal createAssetJournal()
    {
        return new AssetJournal(journalNum, this.assetTransType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
   /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <param name="_vendInvoiceInfoLine">The vendor invoice line.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        ItemGroupId         _itemGroupId)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _vendInvoiceInfoLine.ItemId,
            _itemGroupId);

        searchParameters.InventDim_RU = _vendInvoiceInfoLine.inventDim();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS67582";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxBooksInTaskBoundry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets maximum number of books in acquisition proposal journal lines.
    /// </summary>
    /// <returns>Maximum number of books.</returns>
    public int getMaxBooksInTaskBoundry()
    {
        int ret = AssetParameters::find().MaxBooksInAcquisitionProposalJournal;

        return ret ? ret : FixedAssetsConstants::MaxBooksInAcquisitionProposalJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean retValue = super();

        if (retValue && this.parmBatchEnabled())
        {
            ledgerNameId = dialogJournalName.value();
            postingLayer = dialogPostingLayer.value();
            journalName = LedgerJournalName::find(ledgerNameId);
            this.updatePostingLayer(journalName.CurrentOperationsTax, RangeStatus::Hidden);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            runDate = dialogRunDate.value();
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (ret && this.parmBatchEnabled())
        {
            ret = LedgerJournalName::checkExist(dialogJournalName.value());

            if (ret)
            {
                ret = AssetProposal::isValidJournalNameAndPostingLayer(
                    dialogJournalName.value(),
                    AssetPostingLayerXdsTmp::getValueByString(dialogPostingLayer.value()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns acquisition asset transaction type associated with this class.
    /// </summary>
    /// <returns>Acquisition asset transaction</returns>
    public AssetTransType getAssetTransType()
    {
        return AssetTransType::Acquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ProposalAcquisitionVersion, runDate, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            //version of the base class
            case CurrentVersion:
                ret = super(_packedClass);
                break;

            case ProposalAcquisitionVersion:
                container base;
                [version, runDate, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInReportingCurrency</Name>
				<Source><![CDATA[
    internal AssetAmountReportingCurrency getAmountInReportingCurrency(
        AssetAmount _assetAmount,
        TransDate _transDate,
        boolean _hasSameAccoutingAndReportingCurrency)
    {
        AssetAmountReportingCurrency depreciationAmountReportingCurrency = _assetAmount;

        if (!_hasSameAccoutingAndReportingCurrency)
        {
            CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _transDate);
            depreciationAmountReportingCurrency = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(), _assetAmount);
        }

        return depreciationAmountReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>