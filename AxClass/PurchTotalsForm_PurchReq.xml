<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsForm_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTotalsForm_PurchReq  extends PurchtotalsForm
{
    CurrencyCode currencyCode;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        currencyCode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add2DisplayFields</Name>
				<Source><![CDATA[
    protected void add2DisplayFields(container _displayFieldsCompany, CurrencyCode _baseCurrency)
    {
        int             maxPos          = conLen(_displayFieldsCompany);
        int             pos             = 1;
        real            realValue;
        CurrencyCode    companyCurrency = conPeek(_displayFieldsCompany, TradeTotals::posCurrency());

        while (pos <= maxPos)
        {
            switch (pos)
            {
                case  TradeTotals::posCashDisc():
                case  TradeTotals::posCostValue():
                case  TradeTotals::posLineDisc():
                case  TradeTotals::posEndDisc():
                case  TradeTotals::posBalance():
                case  TradeTotals::posMarkup():
                case  TradeTotals::posTaxTotal():
                case  TradeTotals::posRoundOff():
                // <GBR>
                case TradeTotals::posICMSTotal_BR():
                case TradeTotals::posIPITotal_BR():
                case TradeTotals::posPISTotal_BR():
                case TradeTotals::posCOFINSTotal_BR():
                case TradeTotals::posImportTaxTotal_BR():
                case TradeTotals::posISSTotal_BR():
                case TradeTotals::posINSSTotal_BR():
                case TradeTotals::posIRRFTotal_BR():
                case TradeTotals::posRetainedINSSTotal_BR():
                case TradeTotals::posMarkupFreight_BR():
                case TradeTotals::posMarkupInsurance_BR():
                case TradeTotals::posMarkupOther_BR():
                // </GBR>
                case  TradeTotals::posTotalAmount():
                    realValue =  conPeek(displayFields, pos);
                    realValue += this.convertAmount2BaseCurrency(companyCurrency, _baseCurrency, conPeek(_displayFieldsCompany, pos));
                    displayFields = conPoke(displayFields, pos, realValue);
                    break;

                case  TradeTotals::posCurrency():
                    displayFields = conPoke(displayFields, pos, _baseCurrency);
                    break;

                case  TradeTotals::posExchRate():
                    if (conPeek(displayFields, pos) == 0)
                    {
                        displayFields = conPoke(displayFields, pos, ExchangeRateHelper::exchRate(this.currencyCodeValue()));
                    }
                    break;

                case  TradeTotals::posQty():
                case  TradeTotals::posWeight():
                case  TradeTotals::posVolume():
                case  TradeTotals::posCreditMax():
                case  TradeTotals::posFreeValue():
                case  TradeTotals::posContributionMargin():
                case  TradeTotals::posContributionRatio():
                    // these fields are not used in purchase requisition totals
                    displayFields = conPoke(displayFields, pos, 0);
                    // <GBR>
                    break;
                    // </GBR>
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to make the currency code control of the <c>PurchTotals</c> form editable.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean allowEditCurrencyCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calctotals</Name>
				<Source><![CDATA[
    public void calctotals()
    {
        TradeTotals     totals;
        Set             buyingLegalEntitySet    = new Set(Types::Int64);
        PurchReqLine    purchReqLine;
        SetEnumerator   se;
        dataAreaId      lineDataAreaId;
        PurchReqTable   purchReqTable           = callingTable;

        this.initDisplayFields();

        if (purchReqTable.isConsumption())
        {
            while select BuyingLegalEntity from purchReqLine group by BuyingLegalEntity where purchReqLine.PurchReqTable == callingTable.RecId
            {
                buyingLegalEntitySet.add(purchReqLine.BuyingLegalEntity);
            }

            se = buyingLegalEntitySet.getEnumerator();

            while (se.moveNext())
            {
                lineDataAreaId = CompanyInfo::findRecId(se.current()).DataArea;

                changecompany(lineDataAreaId)
                {
                    if (Currency::find(this.currencyCode()))
                    {
                        totals = this.constructTotals();
                        totals.setCurrencyCode(this.currencyCode());
                        totals.calc();
                        this.add2DisplayFields(totals.displayFields(), this.currencyCode());
                    }
                    else
                    {
                        warning(strFmt("@SYS117888", this.currencyCode()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the packed content to be saved in the <c>SysLastvalue</c> table.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean canUseSysLastValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDisc</Name>
				<Source><![CDATA[
    public boolean cashDisc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCreditPrepayDataGroup</Name>
				<Source><![CDATA[
    public boolean showCreditPrepayDataGroup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTotals</Name>
				<Source><![CDATA[
    protected TradeTotalsBase constructTotals()
    {
        PurchUpdate purchReqUpdate = any2Enum(specQty);

        return PurchReqTotals_Trans_LineTax_PurchTotalsForm::construct(this.parmCallingTable(), purchReqUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmount2BaseCurrency</Name>
				<Source><![CDATA[
    private AmountCur convertAmount2BaseCurrency(CurrencyCode _fromCurrency, CurrencyCode _toCurrency, AmountCur _amountCur)
    {
        ExchRate exchRateFromCurrency;
        ExchRate exchRateToCurrency;

        exchRateFromCurrency = ExchangeRateHelper::getExchangeRate1_Static(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            _fromCurrency,
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        exchRateToCurrency = ExchangeRateHelper::getExchangeRate1_Static(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            _toCurrency,
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return _amountCur *  exchRateToCurrency / exchRateFromCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    ///    The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        if (!currencyCode)
        {
            currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscValueVisible</Name>
				<Source><![CDATA[
    public boolean endDiscValueVisible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDisplayFields</Name>
				<Source><![CDATA[
    protected
    void initDisplayFields()
    {
        int maxPos = 18;
        int pos    = 1;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            maxPos += 13;
        }
        // </GBR>

        while (pos <= maxPos)
        {
            switch (pos)
            {
                case  TradeTotals::posQty():
                case  TradeTotals::posWeight():
                case  TradeTotals::posVolume():
                case  TradeTotals::posCashDisc():
                case  TradeTotals::posCostValue():
                case  TradeTotals::posContributionMargin():
                case  TradeTotals::posContributionRatio():
                case  TradeTotals::posExchRate():
                case  TradeTotals::posCreditMax():
                case  TradeTotals::posFreeValue():
                case  TradeTotals::posLineDisc():
                case  TradeTotals::posEndDisc():
                case  TradeTotals::posBalance():
                case  TradeTotals::posMarkup():
                case  TradeTotals::posTaxTotal():
                case  TradeTotals::posRoundOff():
                case  TradeTotals::posTotalAmount():
                 // <GBR>
                case TradeTotals::posICMSTotal_BR():
                case TradeTotals::posIPITotal_BR():
                case TradeTotals::posPISTotal_BR():
                case TradeTotals::posCOFINSTotal_BR():
                case TradeTotals::posImportTaxTotal_BR():
                case TradeTotals::posISSTotal_BR():
                case TradeTotals::posINSSTotal_BR():
                case TradeTotals::posIRRFTotal_BR():
                case TradeTotals::posRetainedINSSTotal_BR():
                case TradeTotals::posMarkupFreight_BR():
                case TradeTotals::posMarkupInsurance_BR():
                case TradeTotals::posMarkupOther_BR():
                // </GBR>
                    displayFields += [0];
                    break;
                case  TradeTotals::posCurrency():
                    displayFields += [""];
                    break;
            }
            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default values of the fields if the unpack is not successful.
    /// </summary>
    void initParmDefault()
    {
        this.setCurrencyCode(Ledger::accountingCurrency(CompanyInfo::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCount</Name>
				<Source><![CDATA[
    public NumberOfRecords lineCount()
    {
        PurchReqLine    reqLine;
        PurchReqTable   reqTable;

        reqTable.data(callingTable.data());

        select count(RecId) from reqLine where reqLine.PurchReqTable == reqTable.RecId;

        return reqLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountVisible</Name>
				<Source><![CDATA[
    boolean lineCountVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalsTabCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caption that is displayed on the Totals tab on the <c>PurchTotals</c> form.
    /// </summary>
    /// <returns>
    /// The caption that is displayed on the Totals tab on the <c>PurchTotals</c> form.
    /// </returns>
    public str totalsTabCaption()
    {
        return "@SCM:PurchReqTotals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFreightAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Freight</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Freight</c> markup type.
    /// </returns>
    public MarkupAmount markupFreightAmountMST_BR()
    {
        return conpeek(displayFields, TradeTotals::posMarkupFreight_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInsuranceAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Insurance</c> markup type in accounting currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Insurance</c> markup type.
    /// </returns>
    public MarkupAmount markupInsuranceAmountMST_BR()
    {
        return conpeek(displayFields, TradeTotals::posMarkupInsurance_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupOthersAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>Other</c> markup type in transaction currency.
    /// </summary>
    /// <returns>
    ///    The value of the <c>Other</c> markup type.
    /// </returns>
    public MarkupAmount markupOthersAmountMST_BR()
    {
        return conpeek(displayFields, TradeTotals::posMarkupOther_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTotalAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total markup value in the accounting currency.
    /// </summary>
    /// <returns>
    /// Total markup value.
    /// </returns>
    public MarkupSumPurch markupTotalAmount_BR()
    {
        return this.sumMarkUpValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PurchTotalsForm_PurchReq</c> class and initializes the currency code
    ///    with the currency code of the company.
    /// </summary>
    protected void new()
    {
        super();

        this.setCurrencyCode(Ledger::accountingCurrency(CompanyInfo::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a container that contains the version and the value of the persisted fields.
    /// </summary>
    /// <returns>
    ///    A container of the packed contents.
    /// </returns>
    public container pack()
    {
        container con;

        con = [#CurrentVersion,#CurrentList];

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCOFINSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the COFINS tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the COFINS tax type.
    /// </returns>
    public TaxAmount purchCOFINSTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posCOFINSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchICMSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the ICMS tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the ICMS tax type.
    /// </returns>
    public TaxAmount purchICMSTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posICMSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchImportTaxTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the ImportTax tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the ImportTax tax type.
    /// </returns>
    public TaxAmount purchImportTaxTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posImportTaxTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSRetainedTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the INSSRetained tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the INSSRetained tax type.
    /// </returns>
    public TaxAmount purchINSSRetainedTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posRetainedINSSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchINSSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the INSS tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the INSS tax type.
    /// </returns>
    public TaxAmount purchINSSTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posINSSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIPITotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the IPI tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the IPI tax type.
    /// </returns>
    public TaxAmount purchIPITotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posIPITotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIRRFTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the IRRF tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the IRRF tax type.
    /// </returns>
    public TaxAmount purchIRRFTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posIRRFTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchISSTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the ISS tax type from the <c>displayFields</c> container.
    /// </summary>
    /// <returns>
    ///    The the value of the ISS tax type.
    /// </returns>
    public TaxAmount purchISSTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posISSTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPISTotal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the PIS tax type from the displayFields container.
    /// </summary>
    /// <returns>
    ///    The the value of the PIS tax type.
    /// </returns>
    public TaxAmount purchPISTotal_BR()
    {
        return conpeek(displayFields, TradeTotals::posPISTotal_BR());
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if Qty field should be displayed in <c>PurchTotals</c> form.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    public boolean qty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns a specified currency code.
    /// </summary>
    /// <param name="_targetCurrencyCode">
    ///    The currency code of a record in the <c>Currency</c> table.
    /// </param>
    public void setCurrencyCode(CurrencyCode _targetCurrencyCode)
    {
        currencyCode = _targetCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the values from the packed class container to the fields.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container that contains the version and the values for the fields.
    /// </param>
    /// <returns>
    ///    true if the unpack is successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelection</Name>
				<Source><![CDATA[
    public boolean updateSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectionType</Name>
				<Source><![CDATA[
    public int updateSelectionType()
    {
        return enumNum(PurchUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCreditMax</Name>
				<Source><![CDATA[
    public boolean vendCreditMax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendFreeValue</Name>
				<Source><![CDATA[
    public boolean vendFreeValue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volume</Name>
				<Source><![CDATA[
    public boolean volume()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weight</Name>
				<Source><![CDATA[
    public boolean weight()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchTotalsForm_PurchReq construct()
    {
        return new PurchTotalsForm_PurchReq();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>