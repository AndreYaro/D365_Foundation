<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailScaleUnitRegistrationUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailScaleUnitRegistrationUtility</c> class is responsible to configure a Retail Scale Unit.
/// </summary>
public class RetailScaleUnitRegistrationUtility
{
    RetailCDXServiceScaleUnitContract   scaleUnitContract;
    RetailScaleUnit                     retailScaleUnit;
    RetailConnDatabaseProfile           channelDatabase;
    RetailChannelProfile                channelProfile;
    const str                           DefaultName = 'Default';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailScaleUnitRegistrationUtility</c>.
    /// </summary>
    /// <param name = "_scaleUnitContract">The contract object representing the Retail Scale Unit.</param>
    protected void new(RetailCDXServiceScaleUnitContract _scaleUnitContract)
    {
        scaleUnitContract = _scaleUnitContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRetailScaleUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a Retail Scale Unit, either by creating a new entry or updating an existing one.
    /// </summary>
    /// <param name = "_scaleUnitContract">The contract object representing the Retail Scale Unit.</param>
    public static void registerRetailScaleUnit(RetailCDXServiceScaleUnitContract _scaleUnitContract)
    {
        RetailScaleUnitRegistrationUtility utility = new RetailScaleUnitRegistrationUtility(_scaleUnitContract);

        utility.register();
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the Retail Scale Unit.
    /// </summary>
    protected void register()
    {
        boolean existsAnyRcsu = RetailScaleUnitRegistrationUtility::existsAnyScaleUnitOfType(RetailScaleUnitType::RCSU);

        ttsbegin;

        this.saveRetailScaleUnit();
        this.saveRetailChannelDatabase();
        this.saveRetailChannelProfile();
        this.saveRetailIdentityProvider();

        if (!existsAnyRcsu)
        {
            RetailScaleUnitRegistrationUtility::updateChannelsFromDefault(channelDatabase, channelProfile);
        }

        this.mapChannelsToScaleUnit();

        this.withholdDataWritingBatchJobs();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailScaleUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>RetailScaleUnit</c> record.
    /// </summary>
    protected void saveRetailScaleUnit()
    {   
        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveScaleUnitStart(scaleUnitContract.parmScaleUnitId(), 'Begin saving retail scale unit of retail scale unit.');

        retailScaleUnit = RetailScaleUnit::findByFriendlyName(scaleUnitContract.parmFriendlyName(), true);

        // If there is a scale unit with same name, but different ID
        if (retailScaleUnit.RecId && retailScaleUnit.Id != scaleUnitContract.parmScaleUnitId())
        {
            // Then probably the unregister of the previous ID failed, so we do it now
            RetailScaleUnitUnregistrationUtility::unregisterRetailScaleUnit(retailScaleUnit.Id);
            retailScaleUnit = null;
        }

        retailScaleUnit.Id              = scaleUnitContract.parmScaleUnitId();
        retailScaleUnit.Name            = scaleUnitContract.parmFriendlyName();
        retailScaleUnit.Type            = RetailScaleUnitRegistrationUtility::getRetailScaleUnitType(scaleUnitContract.parmType());
        retailScaleUnit.IsSystemRecord  = NoYes::Yes;

        if (!retailScaleUnit.validateWrite())
        {
            throw Exception::Error;
        }
        
        retailScaleUnit.write();

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveScaleUnitStop(scaleUnitContract.parmScaleUnitId(), 'End saving retail scale unit of retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailChannelDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>RetailConnDatabaseProfile</c> record.
    /// </summary>
    protected void saveRetailChannelDatabase()
    {
        boolean isNewChannelDatabase;

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveChannelDatabaseStart(scaleUnitContract.parmScaleUnitId(), 'Begin saving channel database of retail scale unit.');

        channelDatabase = RetailConnDatabaseProfile::find(scaleUnitContract.parmScaleUnitId(), true);

        if (!channelDatabase.RecId)
        {
            isNewChannelDatabase        = true;
            channelDatabase.Name        = scaleUnitContract.parmScaleUnitId();
            channelDatabase.DataGroup   = RetailScaleUnitRegistrationUtility::getDefaultDataGroup();
        }

        channelDatabase.DataStoreType = RetailCDXDataStoreType::ChannelDatabase;

        // If the RetailCDXServiceChannelDatabaseConnectionContract is null, we set the connection string and data writing batch job to null.
        // By doing so, we are relying on Cloud Async CLient to sync the data instead of the AX batch job.
        if (scaleUnitContract.parmChannelDB() == null)
        {
            channelDatabase.ConnectionString = null;
            channelDatabase.DataWritingBatchJob = 0;
        }
        else
        {
            RetailCDXServiceChannelDatabaseConnectionContract   channelDBContract           = scaleUnitContract.parmChannelDB();
            str                                                 trustServerCertificateStr   = channelDBContract.parmTrustServerCertificate() ? 'True' : 'False';
            str                                                 connectionString            = RetailConnDatabaseProfile::buildCustomConnectionString(
                                                                                            channelDBContract.parmDatabaseServerName(),
                                                                                            channelDBContract.parmDatabaseName(),
                                                                                            channelDBContract.parmUserName(),
                                                                                            channelDBContract.parmPassword(),
                                                                                            trustServerCertificateStr);
            channelDatabase.connectionStringEdit(true, connectionString);
        }

        if (!channelDatabase.validateWrite())
        {
            throw Exception::Error;
        }

        channelDatabase.write();

        this.saveRetailScaleUnitConfiguration(channelDatabase, isNewChannelDatabase);

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveChannelDatabaseStop(scaleUnitContract.parmScaleUnitId(), 'End saving channel database of retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailChannelProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>RetailChannelProfile</c> record and the related <c>RetailChannelProfileProperty</c> records.
    /// </summary>
    protected void saveRetailChannelProfile()
    {
        boolean isNewChannelProfile;
        boolean hasError;

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveChannelProfileStart(scaleUnitContract.parmScaleUnitId(), 'Begin saving channel profile of retail scale unit.');

        if (scaleUnitContract.parmChannelProfile() == null)
        {
            return;
        }

        RetailCDXServiceChannelProfileContract channelProfileContract = scaleUnitContract.parmChannelProfile();

        select firstonly forupdate channelProfile where channelProfile.Name == scaleUnitContract.parmScaleUnitId();

        channelProfile.Name                 = scaleUnitContract.parmScaleUnitId();
        channelProfile.ChannelProfileType   = RetailChannelProfileType::RetailServer;
        
        if (!channelProfile.RecId)
        {
            isNewChannelProfile             = true;
            channelProfile.IsSystemRecord   = true;
        }
        
        if (!channelProfile.validateWrite())
        {
            hasError = true;
        }
        else
        {
            channelProfile.write();

            this.saveRetailScaleUnitConfiguration(channelProfile, isNewChannelProfile);
        }

        // Retail Server
        if (!this.saveRetailChannelProfileProperty(RetailServerProfilePropertyKey::InternalUrl, channelProfileContract.parmRetailServerUrl()))
        {
            hasError = true;
        }
        
        // Cloud POS
        if (!this.saveRetailChannelProfileProperty(RetailServerProfilePropertyKey::CloudPOSUrl, channelProfileContract.parmCloudPosUrl()))
        {
            hasError = true;
        }
        
        if (hasError)
        {
            throw Exception::Error;
        }

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveChannelProfileStop(scaleUnitContract.parmScaleUnitId(), 'End saving channel profile of retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailIdentityProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>RetailIdentityProvider</c> record and the related <c>RetailRelyingParty</c> records.
    /// </summary>
    protected void saveRetailIdentityProvider()
    {
        RetailIdentityProvider  identityProvider;
        boolean                 hasError;
        boolean                 isNewIdentityProvider;

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveIdentityProviderStart(scaleUnitContract.parmScaleUnitId(), 'Begin saving retail identity provider of retail scale unit.');

        if (scaleUnitContract.parmIdentityProvider() == null)
        {
            return;
        }

        RetailCDXServiceIdentityProviderContract identityProviderContract = scaleUnitContract.parmIdentityProvider();

        select firstonly forupdate identityProvider where identityProvider.Issuer == identityProviderContract.parmIssuerUrl();

        identityProvider.Issuer = identityProviderContract.parmIssuerUrl();
        identityProvider.Name   = identityProviderContract.parmName();
        identityProvider.Type   = RetailIdentityProviderType::OpenIdConnect;

        if (!identityProvider.RecId)
        {
            isNewIdentityProvider = true;
        }

        if (!identityProvider.validateWrite())
        {
            hasError = true;
        }
        else
        {
            identityProvider.write();

            this.saveRetailScaleUnitConfiguration(identityProvider, isNewIdentityProvider);
        }

        if (identityProviderContract.parmRelyingParties() == null)
        {
            return;
        }

        ListEnumerator  listEnumerator = identityProviderContract.parmRelyingParties().getEnumerator();

        while (listEnumerator.moveNext())
        {
            RetailCDXServiceRelyingPartyContract    relyingPartyContract = listEnumerator.current();
            RetailRelyingParty                      relyingParty;
            boolean                                 isNewRelyingParty;

            select firstonly forupdate relyingParty
                where   relyingParty.ProviderId == identityProvider.RecId
                    &&  relyingParty.ClientId   == relyingPartyContract.parmClientId();

            if (!relyingParty.RecId)
            {
                isNewRelyingParty = true;
            }

            relyingParty.ProviderId = identityProvider.RecId;
            relyingParty.ClientId   = relyingPartyContract.parmClientId();
            relyingParty.Type       = RetailRelyingPartyType::Public;
            relyingParty.UserType   = RetailRelyingPartyUserType::Worker;

            if (!relyingParty.validateWrite())
            {
                hasError = true;
            }
            else
            {
                relyingParty.write();

                this.saveRetailScaleUnitConfiguration(relyingParty, isNewRelyingParty);
            }
        }

        if (hasError)
        {
            throw Exception::Error;
        }

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationSaveIdentityProviderStop(scaleUnitContract.parmScaleUnitId(), 'End saving retail identity provider of retail scale unit.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapChannelsToScaleUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the provided list of channels to the current scale unit.
    /// </summary>
    protected void mapChannelsToScaleUnit()
    {
        List            channelList             = scaleUnitContract.parmChannelList();

        if (channelList == null)
        {
            return;
        }

        ListEnumerator  channelListEnumerator   = channelList.getEnumerator();

        while (channelListEnumerator.moveNext())
        {
            RetailCDXServiceScaleUnitChannelContract channelContract = channelListEnumerator.current();

            RetailCDXDataStoreChannel   dataStoreChannel;
            RetailChannelTable          channelTable;
            RetailChannelTableExt       channelTableExt;
            RetailConnDatabaseProfile   liveChannelDatabase;

            // looking if the channel is already mapped to the current scale unit database
            select firstonly dataStoreChannel
                where dataStoreChannel.DatabaseProfile  == channelDatabase.RecId
                    exists join channelTable
                        where   channelTable.RecId              == dataStoreChannel.Channel
                            &&  channelTable.RetailChannelId    == channelContract.parmChannelId();

            if (!dataStoreChannel)
            {
                select firstonly channelTable where channelTable.RetailChannelId == channelContract.parmChannelId();

                if (channelTable)
                {
                    dataStoreChannel.Channel            = channelTable.RecId;
                    dataStoreChannel.DatabaseProfile    = channelDatabase.RecId;
                    dataStoreChannel.insert();

                    // making the new scale unit database as the live database for the channel
                    select forupdate channelTableExt where channelTableExt.Channel == channelTable.RecId;

                    channelTableExt.Channel             = channelTable.RecId;
                    channelTableExt.LiveChannelDatabase = channelDatabase.RecId;

                    channelTableExt.write();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>withholdDataWritingBatchJobs</Name>
				<Source><![CDATA[
    protected void withholdDataWritingBatchJobs()
    {
        BatchJob					batchJob;
        Batch						batch;
        RetailConnDatabaseProfile	databaseProfile;
        RetailConnSchedule          schedule;

        ttsbegin;

		while select forupdate batchJob 
			exists join batch
				where	batch.BatchJobId	== batchJob.RecId
					&&	batch.ClassNumber	== classNum(RetailCdxChannelDbDirectAccess)
			notexists join databaseProfile
				where	databaseProfile.DataWritingBatchJob	== batchJob.RecId
        {
            // a second notexists join is not supported so looking for related Distribution Schedule here
            select schedule where schedule.BatchJobId == batchJob.RecId;

            if (schedule)
            {
                continue;
            }

            // check if the current batch job is upload job, skip for upload job
            Batch uploadBatch;

            select RecId from uploadBatch
                where uploadBatch.ClassNumber == classNum(RetailCDXDataUpload_AX7)
                   && uploadBatch.BatchJobId == batchJob.RecId;

            if (uploadBatch)
            {
                continue;
            }

            if (batchJob.Status == BatchStatus::Waiting || batchJob.Status == BatchStatus::Executing || batchJob.Status == BatchStatus::Ready)
            {
                batchJob.Status = BatchStatus::Hold;

                RetailScaleUnitRegistrationUtility::saveBatchJobWithRetry(batchJob);

                ApplicationEventSource::EventWriteRetailScaleUnitRegistrationHoldDataWritingBatchJob(scaleUnitContract.parmScaleUnitId(), batchJob.RecId);
            }            
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailChannelProfileProperty</Name>
				<Source><![CDATA[
    private boolean saveRetailChannelProfileProperty(RetailServerProfilePropertyKey _key, str _value)
    {
        RetailChannelProfileProperty    channelProfileProperty;
        boolean                         isSuccess = true;
        boolean                         isNewChannelProfileProperty;

        select firstonly forupdate channelProfileProperty
            where   channelProfileProperty.ChannelProfile   == channelProfile.RecId
                &&  channelProfileProperty.Key              == _key;

        if (!channelProfileProperty.RecId)
        {
            isNewChannelProfileProperty = true;
        }

        channelProfileProperty.ChannelProfile   = channelProfile.RecId;
        channelProfileProperty.Key              = _key;
        channelProfileProperty.Value            = _value;
        
        if (!channelProfileProperty.RecId)
        {
            channelProfileProperty.IsSystemRecord = true;
        }

        if (!channelProfileProperty.validateWrite())
        {
            isSuccess = false;
        }
        else
        {
            channelProfileProperty.write();

            this.saveRetailScaleUnitConfiguration(channelProfileProperty, isNewChannelProfileProperty);
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailScaleUnitConfiguration</Name>
				<Source><![CDATA[
    private void saveRetailScaleUnitConfiguration(RetailScaleUnitConfigurationMap _map, boolean _isNewRecord)
    {
        RetailScaleUnitConfiguration configuration;

        if (!_map.RecId)
        {
            return;
        }

        select firstonly forupdate configuration
            where   configuration.RetailScaleUnit   == retailScaleUnit.RecId
                &&  configuration.RefTableId        == _map.TableId
                &&  configuration.RefRecId          == _map.RecId;

        configuration.RetailScaleUnit   = retailScaleUnit.RecId;
        configuration.RefTableId        = _map.TableId;
        configuration.RefRecId          = _map.RecId;

        if (!configuration.RecId && _isNewRecord)
        {
            configuration.IsSystemRecord    = NoYes::Yes;
        }

        configuration.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMigrationScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the registration is a migration scenario.
    /// </summary>
    /// <returns>True if the registration is a migration scenario; otherwise, false.</returns>
    internal static boolean isMigrationScenario()
    {
        RetailConnDatabaseProfile   defaultDatabase;
        #RetailCDX;

        boolean existsAnyRcsu = RetailScaleUnitRegistrationUtility::existsAnyScaleUnitOfType(RetailScaleUnitType::RCSU);

        select firstonly defaultDatabase
                where defaultDatabase.Name == #RetailConnDatabaseProfile_DefaultDBName;

        return !existsAnyRcsu && defaultDatabase;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannelsFromDefault</Name>
				<Source><![CDATA[
    private static void updateChannelsFromDefault(RetailConnDatabaseProfile _channelDatabase, RetailChannelProfile _channelProfile)
    {
        RetailConnDatabaseProfile   defaultDatabase;
        RetailCDXDataGroup          currentDataGroup;
        #RetailCDX;

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationUpdateChannelsFromDefaultStart(_channelDatabase.Name, 'Begin assigning channels from Default.');

        select firstonly defaultDatabase
            where defaultDatabase.Name == #RetailConnDatabaseProfile_DefaultDBName;

        if (defaultDatabase)
        {
            // Update the channels that were pointing to default channel DB and channel Profile to the new one.
            ttsbegin;            
            RetailDeploymentUtility::updateChannelDatabaseAndProfileReferences(defaultDatabase, _channelDatabase, _channelProfile);

            currentDataGroup = RetailCDXDataGroup::find(defaultDatabase.DataGroup);

            if(currentDataGroup.Name == #RetailCdxDataGroup_DefaultName)
            {
                RetailDeploymentUtility::addLegacyCDXDataGroup();
                RetailDeploymentUtility::updateDefaultDatabaseGroupMapping(#RetailCdxDataGroup_DefaultName, #RetailCdxDataGroup_LegacyName);
            }
            ttscommit;
        }

        ApplicationEventSource::EventWriteRetailScaleUnitRegistrationUpdateChannelsFromDefaultStop(_channelDatabase.Name, 'End assigning channels from Default.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDataGroup</Name>
				<Source><![CDATA[
    private static RetailCDXDataGroupRefRecId getDefaultDataGroup()
    {
        #RetailCDX

        RetailCDXDataGroup dataGroup;

        if (RetailCDXDataGroup::insertDefaultIfNotExists(RetailConnChannelSchemaTypeEnum::AX7))
        {
            RetailCDXDataGroup::associateDefaultDataGroupToDistributionSchedules(RetailConnChannelSchemaTypeEnum::AX7);
        }

        select firstonly dataGroup where dataGroup.Name == #RetailCdxDataGroup_DefaultName;

        return dataGroup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyScaleUnitOfType</Name>
				<Source><![CDATA[
    private static boolean existsAnyScaleUnitOfType(RetailScaleUnitType _type)
    {
        RetailScaleUnit retailScaleUnit;

        select firstonly retailScaleUnit where retailScaleUnit.Type == _type;

        return retailScaleUnit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailScaleUnitType</Name>
				<Source><![CDATA[
    private static RetailScaleUnitType getRetailScaleUnitType(str _type)
    {
        RetailScaleUnitType scaleUnitType;

        switch(_type)
        {
            case 'RSSU':
                scaleUnitType = RetailScaleUnitType::RSSU;
                break;
            default:
                scaleUnitType = RetailScaleUnitType::RCSU;
                break;
        }

        return scaleUnitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBatchJobWithRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the batch header and retries the operation if there is an update conflict or a deadlock.
    /// </summary>
    /// <param name = "_batchJob">The batch job being saved.</param>
    private static void saveBatchJobWithRetry(BatchJob _batchJob)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;
            _batchJob.update();
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry; // retry if there is an update conflic while saving the batch job.
            }
            else
            {
                throw Exception::UpdateConflictNotRecovered;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;  // retry if there is a deadlock while saving the batch job.
            }
            else
            {
                throw Exception::Deadlock;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>