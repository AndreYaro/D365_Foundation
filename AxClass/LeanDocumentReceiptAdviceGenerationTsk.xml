<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentReceiptAdviceGenerationTsk</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentReceiptAdviceGenerationTsk</c> class provides a processor implementation which
///    is capable of creating receipt advices and receipt advice lines.
/// </summary>
public class LeanDocumentReceiptAdviceGenerationTsk extends LeanDocumentTask
{
    PurchFormLetter_PackingSlip     packingSlipGenerator;
    List                            purchLinesToPost;
    PurchTable                      purchTableToPost;
    LeanDocumentReceiptAdviceId     receiptAdviceId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>confirmPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a purchase order is confirmed, if not it tries to confirm it.
    /// </summary>
    /// <param name="_purchFormLetter">
    ///    The object used for the confirming of the purchase order.
    /// </param>
    /// <returns>
    ///    true if the order is or was confirmed, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean confirmPurchTable(PurchFormLetter _purchFormLetter = PurchFormLetter::construct(DocumentStatus::PurchaseOrder))
    {
        boolean         result = false;

        purchTableToPost    = PurchTable::find(processingData.parmSourceDocumentId());
        result              = purchTableToPost.DocumentState == VersioningDocumentState::Confirmed;

        // if the status was different and the record was found, try confirming it
        if (!result
            && purchTableToPost.RecId)
        {
            // no packing slip Id is needed for the confirmation
            _purchFormLetter.update(purchTableToPost, '');

            purchTableToPost.reread();
            result = purchTableToPost.DocumentState == VersioningDocumentState::Confirmed;
        }

        if (!result)
        {
            error(strfmt("@SYS335115", processingData.parmSourceDocumentId()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The object to compare.
    /// </param>
    /// <returns>
    ///    true if the two objects are equal; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentReceiptAdviceGenerationTsk otherTask = otherObject as LeanDocumentReceiptAdviceGenerationTsk;

        return  otherObject == this
                || (otherTask != null
                    && super(otherTask)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LeanDocumentReceiptAdviceGenerationTsk</c> class.
    /// </summary>
    protected void init()
    {
        super();

        purchLinesToPost        = new List(Types::Record);
        packingSlipGenerator    = PurchFormLetter::construct(DocumentStatus::PackingSlip);

        packingSlipGenerator.createFromLines(true);
        packingSlipGenerator.transDate(processingData.parmDeliveryDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchReceiptLinesToProcessingData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Matches the created receipt advice lines to the processing data so that it can be used later.
    /// </summary>
    /// <param name="_generatorOutputContract">
    ///    The output contract that contains the result of the posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void matchReceiptLinesToProcessingData(FormletterOutputContract _generatorOutputContract)
    {
        VendPackingSlipTrans            receiptAdviceLine, foundReceiptAdviceLine; 
        List                            receiptAdvices     = List::create(_generatorOutputContract.parmAllJournalsPacked());
        List                            receiptAdviceLines = List::create(_generatorOutputContract.parmJournalLinesPacked());
        Map                             processingDataLines = processingData.parmDocumentLines();

        // we only expect 1 journal created as all lines posted belong to the same purchase order
        Debug::assert(receiptAdvices.elements() == 1);

        ListEnumerator enumReceiptAdviceLines = receiptAdviceLines.getEnumerator();

        while (enumReceiptAdviceLines.moveNext())
        {
            receiptAdviceLine   = enumReceiptAdviceLines.current();

            // the line from the list has no RecId, so we need to reread it from the db
            select firstonly foundReceiptAdviceLine
                where      foundReceiptAdviceLine.DeliveryDate          == receiptAdviceLine.DeliveryDate
                        && foundReceiptAdviceLine.PackingSlipId         == receiptAdviceLine.PackingSlipId
                        && foundReceiptAdviceLine.LineNum               == receiptAdviceLine.LineNum
                        && foundReceiptAdviceLine.VendPackingSlipJour   == receiptAdviceLine.VendPackingSlipJour;

            if (processingDataLines.exists(foundReceiptAdviceLine.InventTransId))
            {
                LeanDocumentProcessingDataLine dataLine = processingDataLines.lookup(foundReceiptAdviceLine.InventTransId);
                dataLine.parmAdditionalValues().insert(foundReceiptAdviceLine.TableId, foundReceiptAdviceLine);
            }
            else
            {
                throw error("@SYS335116");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReceiptAdviceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Obtains a new receipt advice identifier.
    /// </summary>
    /// <returns>
    ///    A new receipt advice identifier.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanDocumentReceiptAdviceId newReceiptAdviceId()
    {
        return NumberSeq::newGetNum(ProdParameters::numRefLeanDocumentReceiptAdviceId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipGenerator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PurchFormLetter_PackingSlip parmPackingSlipGenerator(PurchFormLetter_PackingSlip _packingSlipGenerator = packingSlipGenerator)
    {
        packingSlipGenerator = _packingSlipGenerator;

        return packingSlipGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLinesToPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List parmPurchLinesToPost(List _purchLinesToPost = purchLinesToPost)
    {
        purchLinesToPost = _purchLinesToPost;

        return purchLinesToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableToPost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PurchTable parmPurchTableToPost(PurchTable _purchTableToPost = purchTableToPost)
    {
        purchTableToPost = _purchTableToPost;

        return purchTableToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptAdviceId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PackingSlipId parmReceiptAdviceId(PackingSlipId _receiptAdviceId = receiptAdviceId)
    {
        receiptAdviceId = _receiptAdviceId;

        return receiptAdviceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the purchase lines.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>FormletterOutputContract</c> class that contains the results of the posting.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormletterOutputContract postLines()
    {
        packingSlipGenerator.parmLineList(purchLinesToPost.pack());
        packingSlipGenerator.update(purchTableToPost,
                                receiptAdviceId,
                                packingSlipGenerator.transDate(),
                                PurchUpdate::ReceiveNow,
                                AccountOrder::None,
                                NoYes::No,
                                NoYes::No);

        return packingSlipGenerator.getOutputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLinesForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the purchase order lines for posting.
    /// </summary>
    /// <remarks>
    ///    This method sets the correct received quantity on the lines so that the posting can use it.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void prepareLinesForPosting()
    {
        MapEnumerator                   enumLines = processingData.parmDocumentLines().getEnumerator();

        while (enumLines.moveNext())
        {
            LeanDocumentProcessingDataLine lineData = enumLines.currentValue();
            Map lineDataValues = lineData.parmAdditionalValues();

            if (lineDataValues.exists(tablenum(PurchLine)))
            {
                PurchLine associatedPurchLine = lineDataValues.lookup(tablenum(PurchLine));
                associatedPurchLine = PurchLine::findRecId(associatedPurchLine.RecId, true);

                // set the qty by converting it from the aggregation group's UoM to
                // the purch line's UoM
                associatedPurchLine.PurchReceivedNow =
                    EcoResProductUnitConverter::convertForReleasedProduct(associatedPurchLine.ItemId,
																		  associatedPurchLine.InventDimId,
																		  lineData.parmLineQuantity(),
																		  lineData.parmLineUnitOfMeasure(),
																		  UnitOfMeasure::findBySymbol(associatedPurchLine.PurchUnit).RecId,
																		  NoYes::Yes);

                associatedPurchLine.setInventReceivedNow();
                associatedPurchLine.update();

                purchLinesToPost.addEnd(associatedPurchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///    Must be implemented in derived classes.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The base class implementation throws.
    /// </exception>
    public void run()
    {
        this.init();

        if (!this.canProceedWithTask())
        {
            return;
        }

        // make sure we can confirm the purchase order
        if (!this.confirmPurchTable())
        {
            return;
        }

        // set the quantities on the lines to be posted
        this.prepareLinesForPosting();

        if (purchLinesToPost.elements() > 0)
        {
            // do the posting
            receiptAdviceId = this.newReceiptAdviceId();
            FormletterOutputContract generatorOutputContract = this.postLines();

            // in case of success we need to match back the receipt advices to the processing data lines
            // so that the remaining part of the subcontracting creation pipeline can use that data
            if (generatorOutputContract.parmNumberOfOrdersPosted() > 0)
            {
                this.matchReceiptLinesToProcessingData(generatorOutputContract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and instance of the <c>LeanDocumentReceiptAdviceGenerationTsk</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LeanDocumentReceiptAdviceGenerationTsk</c> class .
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentReceiptAdviceGenerationTsk newStandard()
    {
        return new LeanDocumentReceiptAdviceGenerationTsk();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>