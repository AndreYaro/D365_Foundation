<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalcTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdCalcTransDP</c> class is the report data provider class for the <c>ProdCalcTrans</c>
///    report.
/// </summary>
[SRSReportQueryAttribute(queryStr(ProdCalcTrans))]
public class ProdCalcTransDP extends SrsReportDataProviderPreProcessTempDB
{
    ProdCalcTransTmp prodCalcTransTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProdCalcTransTmp</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute('ProdCalcTransTmp')
    ]
    public ProdCalcTransTmp getProdCalcTransTmp()
    {
        select prodCalcTransTmp;
        return prodCalcTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTransTmp</Name>
				<Source><![CDATA[
    private void initProdCalcTransTmp(ProdTable _prodTable, ProdCalcTrans _prodCalcTrans)
    {
        prodCalcTransTmp.ProdId = _prodTable.ProdId;
        prodCalcTransTmp.ItemId = _prodTable.ItemId;
        prodCalcTransTmp.Name = _prodTable.Name;
        prodCalcTransTmp.ProdStatus = _prodTable.ProdStatus;
        prodCalcTransTmp.SchedStart = _prodTable.SchedStart;
        prodCalcTransTmp.SchedEnd = _prodTable.SchedEnd;
        prodCalcTransTmp.CalcDate = _prodTable.CalcDate;
        prodCalcTransTmp.SchedDate = _prodTable.SchedDate;
        prodCalcTransTmp.StUpDate = _prodTable.StUpDate;
        prodCalcTransTmp.FinishedDate = _prodTable.FinishedDate;
        prodCalcTransTmp.RealDate = _prodTable.RealDate;
        prodCalcTransTmp.DlvDate = _prodTable.DlvDate;
        prodCalcTransTmp.QtyCalc = _prodTable.QtyCalc;
        prodCalcTransTmp.QtyStUp = _prodTable.QtyStUp;
        prodCalcTransTmp.ProdCreatedDateTime = _prodTable.CreatedDateTime;
        prodCalcTransTmp.TransRefId = _prodCalcTrans.TransRefId;
        prodCalcTransTmp.CostGroupId = _prodCalcTrans.CostGroupId;
        prodCalcTransTmp.CalcType = _prodCalcTrans.CalcType;
        prodCalcTransTmp.CollectRefLevel =_prodCalcTrans.CollectRefLevel;
        prodCalcTransTmp.Resource = _prodCalcTrans.Resource;
        prodCalcTransTmp.RealConsump = _prodCalcTrans.RealConsump;
        prodCalcTransTmp.historicalCostQtyGood = _prodTable.historicalCostQtyGood();
        prodCalcTransTmp.reportedFinishedGood = _prodTable.reportedFinishedGood();
        prodCalcTransTmp.consumptionSum = _prodCalcTrans.consumptionSum();
        prodCalcTransTmp.costPricePcs = _prodCalcTrans.costPricePcs();
        prodCalcTransTmp.costPriceSum = _prodCalcTrans.costPriceSum();
        prodCalcTransTmp.displayUnitId = _prodCalcTrans.displayUnitId();
        prodCalcTransTmp.itemResourceName = _prodCalcTrans.itemResourceName();
        prodCalcTransTmp.realCostAmountTotal = _prodCalcTrans.realCostAmountTotal();
        prodCalcTransTmp.realCostPricePcs = _prodCalcTrans.realCostPricePcs();
        prodCalcTransTmp.transRefName = _prodCalcTrans.transRefName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun qr = new QueryRun(this.parmQuery());
        prodCalcTransTmp.setConnection(this.parmUserConnection());
        RecordInsertList recordInsertList = new RecordInsertList(tablenum(prodCalcTransTmp), true, true, true, true, true, prodCalcTransTmp);
        while (qr.next())
        {
            ProdTable prodTable  = qr.get(tablenum(ProdTable));
            ProdCalcTrans prodCalcTrans = qr.get(tablenum(ProdCalcTrans));
            this.initProdCalcTransTmp(prodTable, prodCalcTrans);
            recordInsertList.add(prodCalcTransTmp);
        }
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>