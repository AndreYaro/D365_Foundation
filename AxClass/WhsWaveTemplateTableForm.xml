<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWaveTemplateTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWaveTemplateTableForm</c> class contains the business logic of the <c>WhsWaveTemplateTable</c> form.
/// </summary>
class WhsWaveTemplateTableForm
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performWaveStepCodeLookup</Name>
				<Source><![CDATA[
	/// <summary>
    /// Performs a lookup of the wave step code from the <c>WHSWaveStepCodeTable</c> if possible.
    /// </summary>
    /// <param name = "_postMethod">The post method that the wave step code is being applied to.</param>
    /// <param name = "_waveStepCodeControl">The wave step code control from the form.</param>
    /// <returns>true if the lookup was performed successfully; otherwise false</returns>
	[Hookable(false)]
	internal boolean performWaveStepCodeLookup(WHSPostMethod _postMethod, FormControl _waveStepCodeControl)
    {
        boolean performedLookup;

        WHSWaveStepMethod waveStepMethod;

        if (_postMethod.isBaseMethod())
        {
            waveStepMethod = WHSBaseWaveStepMethod::newFromName(_postMethod.PostMethodName);
        }
        else
        {
            waveStepMethod = WHSCustomWaveStepMethod::newFromName(_postMethod.PostMethodName);
        }

        if (waveStepMethod.hasWaveStepCode())
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSWaveStepCodeTable), _waveStepCodeControl);
            sysTableLookup.addLookupfield(fieldNum(WHSWaveStepCodeTable, WaveStepCode));

            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(WHSWaveStepCodeTable));

            queryBuildDataSource.addRange(fieldNum(WHSWaveStepCodeTable, WaveStepType)).value(SysQuery::value(waveStepMethod.waveStepType()));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
            performedLookup = true;
        }

        return performedLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveTemplateLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes wave template line record from database.
	/// </summary>
	/// <param name="_whsWaveTemplateLine">
	/// Record to be deleted.
	/// </param>
	/// <remarks>
	/// ttsbegin block should be declared before calling this method.
	/// </remarks>
    void deleteWaveTemplateLine(WHSWaveTemplateLine _whsWaveTemplateLine)
    {
        WHSWaveTemplateLine whsWaveTemplateLine = _whsWaveTemplateLine;

        whsWaveTemplateLine.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWHSPostMethod</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes a post method record from database.
	/// </summary>
	/// <param name="_whsPostMethod">
	/// Record to be deleted.
	/// </param>
    void deleteWHSPostMethod(WHSPostMethod _whsPostMethod)
    {
        WHSPostMethod whsPostMethod = _whsPostMethod;

        ttsbegin;

        whsPostMethod.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates wave template query defined by user.
    /// </summary>
    /// <param name="_waveTemplateTable">
    /// Wave template record that is updated.
    /// </param>
    /// <returns>true if changes are applied; otherwise false</returns>
    public boolean setEditQuery(WHSWaveTemplateTable _waveTemplateTable)
    {
        WHSWaveTemplateTable    waveTemplatetable = _waveTemplatetable;

        SysQueryRun queryRun = WHSFormHelper::initializeQueryRunForEditing(
                waveTemplatetable.WaveTemplateQuery,
                strFmt('%1', waveTemplatetable.RecId),
                waveTemplatetable.defaultWaveTemplateQueryRun());

        if (queryRun.prompt())
        {
            waveTemplatetable.WaveTemplateQuery = queryRun.pack();

            WHSWaveTemplateGroup::createGroups(waveTemplatetable.RecId, queryRun);

            if (FormDataUtil::isFormDataSource(waveTemplatetable))
            {
                FormDataUtil::getFormDataSource(waveTemplatetable).research(true);
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPostMethod</Name>
				<Source><![CDATA[
	/// <summary>
	/// Populates wave template with post methods with selected type.
	/// </summary>
	/// <param name="_waveTemplateTable">
	/// Wave template record.
	/// </param>
	/// <param name="_selectedType">
	/// Selected wave template type.
	/// </param>
	/// <returns>
	/// Temporary <c>WHSPostMethod</c> record used to populate.
	/// </returns>
    WHSPostMethod insertTmpPostMethod(WHSWaveTemplateTable  _waveTemplateTable,
                                      WHSWaveTemplateType   _selectedType)
    {
        WHSPostMethod                   tmpPostMethod;
        WHSPostMethod                   permPostMethod;
        WHSWaveTemplateLine             waveTemplateLine;
        WHSWaveTemplateType             selectedType = _selectedType;
        WHSWaveTemplateTable            waveTemplateTable = _waveTemplateTable;

        tmpPostMethod.setTmp();

        ttsbegin;

        while select permPostMethod
            where permPostMethod.WaveTemplateType == selectedType
        {
            select firstonly waveTemplateLine
                where waveTemplateLine.WaveTemplateName  == waveTemplateTable.WaveTemplateName &&
                      waveTemplateLine.PostMethodName    == permPostMethod.PostMethodName;

            if (!waveTemplateLine || permPostMethod.RepeatableStep)
            {
                tmpPostMethod.data(permPostMethod);
                tmpPostMethod.insert();
            }
        }

        ttscommit;

        return tmpPostMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsWaveTemplateTable_initValue</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes a wave template record.
	/// </summary>
	/// <param name="_waveTemplateTable">
	/// Wave template record.
	/// </param>
    void whsWaveTemplateTable_initValue(WHSWaveTemplateTable _waveTemplateTable)
    {
        _waveTemplateTable.initSequenceNumber();

        _waveTemplateTable.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTemplateTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Writes record to database.
	/// </summary>
	/// <param name="_whsWaveTemplateTable">
	/// The record to be written to database.
	/// </param>
    void writeTemplateTable(WHSWaveTemplateTable _whsWaveTemplateTable)
    {
        _whsWaveTemplateTable.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGroupButtonBeShown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if "Wave template grouping" should be visible.
    /// </summary>
    /// <param name = "_templateType">Type of wave template, chosen on form.</param>
    /// <returns>True, if should be visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean shouldGroupButtonBeShown(WHSWaveTemplateType _templateType)
    {
        switch(_templateType)
        {
            case WHSWaveTemplateType::Shipping:
                return true;

            case WHSWaveTemplateType::Kanban:
            case WHSWaveTemplateType::Production:
            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>