<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTasksBundleFirstLevelNotEndedColumnDefinitions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides the computed column definitions for <c>ReqCalcTasksBundleFirstLevelNotEnded</c>.
/// </summary>
final internal class ReqCalcTasksBundleFirstLevelNotEndedColumnDefinitions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computedColumnDefinition</Name>
				<Source><![CDATA[
    private static str computedColumnDefinition(FieldId _fieldId)
    {
        DictTable dictTable = new DictTable(tableNum(ReqCalcTasksBundle));

        str orderBy;

        // First field to order by: Status
        orderBy = dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, Status)).name(DbBackend::Sql);
            
        // The BOMLevel EDT is not available when the BOM configuration key is not enabled. Omit it in that case.
        if(isConfigurationkeyEnabled(configurationKeyNum(BOM)))
        {
            orderBy += strFmt(", %1",
                dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, Level)).name(DbBackend::Sql));
        }

        // Last field to order by: Level State
        orderBy += strFmt(", %1",
                dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, LevelState)).name(DbBackend::Sql));

        // Build the query
        str statement = strFmt("SELECT TOP(1) %1 FROM %2 SUBQUERY WHERE SUBQUERY.%3 = %4 and SUBQUERY.%5 = %6 and SUBQUERY.%7 = %8 and SUBQUERY.%9 = %10 ORDER BY %11",
            dictTable.fieldObject(_fieldId).name(DbBackend::Sql),
            dictTable.name(DbBackend::Sql),
            dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, Partition)).name(DbBackend::Sql),
            SysComputedColumn::returnField(viewstr(ReqCalcTasksBundleFirstLevelNotEnded), tableStr(ReqCalcTasksBundle), fieldStr(ReqCalcTasksBundle, Partition)),
            dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, ProcessDataAreaId)).name(DbBackend::Sql),
            SysComputedColumn::returnField(viewstr(ReqCalcTasksBundleFirstLevelNotEnded), tableStr(ReqCalcTasksBundle), fieldStr(ReqCalcTasksBundle, ProcessDataAreaId)),
            dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, ProcessId)).name(DbBackend::Sql),
            SysComputedColumn::returnField(viewstr(ReqCalcTasksBundleFirstLevelNotEnded), tableStr(ReqCalcTasksBundle), fieldStr(ReqCalcTasksBundle, ProcessId)),
            dictTable.fieldObject(fieldNum(ReqCalcTasksBundle, ProcessingState)).name(DbBackend::Sql),
            SysComputedColumn::returnLiteral(ReqCalcTaskState::Processing),
            orderBy);

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingStatusDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the computed column definition for ProcessingStatus field.
    /// </summary>
    /// <returns>String defining the computed column.</returns>
    public static str processingStatusDefinition()
    {
        return ReqCalcTasksBundleFirstLevelNotEndedColumnDefinitions::computedColumnDefinition(fieldNum(ReqCalcTasksBundle, Status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingLevelDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the computed column definition for ProcessingLevel field.
    /// </summary>
    /// <returns>String defining the computed column.</returns>
    public static str processingLevelDefinition()
    {
        return ReqCalcTasksBundleFirstLevelNotEndedColumnDefinitions::computedColumnDefinition(fieldNum(ReqCalcTasksBundle, Level));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingLevelStateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the computed column definition for ProcessingLevelState field.
    /// </summary>
    /// <returns>String defining the computed column.</returns>
    public static str processingLevelStateDefinition()
    {
        return ReqCalcTasksBundleFirstLevelNotEndedColumnDefinitions::computedColumnDefinition(fieldNum(ReqCalcTasksBundle, LevelState));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>