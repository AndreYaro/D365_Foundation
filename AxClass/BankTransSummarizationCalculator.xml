<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransSummarizationCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankTransSummarizationCalculator
{
    private BankTransSummarizationDataInitializer bankTransSummarizationDataInitializer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(List _ledgerJournalIdList)
    {
        bankTransSummarizationDataInitializer = BankTransSummarizationDataInitializer::construct(_ledgerJournalIdList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankTransSummarizationCalculator construct(List _ledgerJournalIdList)
    {
        return new BankTransSummarizationCalculator(_ledgerJournalIdList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransSummarizationDataInitializer</Name>
				<Source><![CDATA[
    internal BankTransSummarizationDataInitializer getBankTransSummarizationDataInitializer()
    {
        return bankTransSummarizationDataInitializer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runGrouping</Name>
				<Source><![CDATA[
    public List runGrouping()
    {
        Query sourceDataQuery = bankTransSummarizationDataInitializer.getSourceDataQuery();
        BankTransSummarizationCriteria criteria = bankTransSummarizationDataInitializer.getCriteria();

        List res = new List(Types::Class);
        if (sourceDataQuery)
        {
            switch(criteria)
            {
                case BankTransSummarizationCriteria::Default:
                    res = this.runGroupingDefault(sourceDataQuery);
                    break;
                case BankTransSummarizationCriteria::DefaultAndDocNum:
                    res = this.runGroupingDefaultAndDocNum(sourceDataQuery);
                    break;
                case BankTransSummarizationCriteria::DefaultAndPaymReference:
                    res = this.runGroupingDefaultAndPaymReference(sourceDataQuery);
                    break;
                default:
                    break;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runGroupingDefault</Name>
				<Source><![CDATA[
    private List runGroupingDefault(Query _sourceDataQuery)
    {
        List res = new List(Types::Class);

        Query groupingQuery = this.addGroupByDefault(new Query(_sourceDataQuery));
        QueryRun queryRunTmp = new QueryRun(groupingQuery);

        while (queryRunTmp.next())
        {
            BankTransSummarizationView ledgerJournalTransToSum = queryRunTmp.get(tableNum(BankTransSummarizationView));

            Query groupedQuery = this.addRangeDefault(new Query(_sourceDataQuery), ledgerJournalTransToSum);

            res.addEnd(this.getLedgerJournalTransFromQuery(groupedQuery));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runGroupingDefaultAndDocNum</Name>
				<Source><![CDATA[
    private List runGroupingDefaultAndDocNum(Query _sourceDataQuery)
    {
        List res = new List(Types::Class);

        Query groupingQuery = this.addGroupByDefaultAndDocNum(new Query(_sourceDataQuery));
        QueryRun queryRun = new QueryRun(groupingQuery);

        while (queryRun.next())
        {
            BankTransSummarizationView ledgerJournalTransToSum = queryRun.get(tableNum(BankTransSummarizationView));

            Query groupedQuery = this.addRangeDefaultAndDocNum(new Query(_sourceDataQuery), ledgerJournalTransToSum);

            res.addEnd(this.getLedgerJournalTransFromQuery(groupedQuery));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runGroupingDefaultAndPaymReference</Name>
				<Source><![CDATA[
    private List runGroupingDefaultAndPaymReference(Query _sourceDataQuery)
    {
        List res = new List(Types::Class);

        Query groupingQuery = this.addGroupByDefaultAndPaymReference(new Query(_sourceDataQuery));
        QueryRun queryRun = new QueryRun(groupingQuery);

        while (queryRun.next())
        {
            BankTransSummarizationView ledgerJournalTransToSum = queryRun.get(tableNum(BankTransSummarizationView));

            Query groupedQuery = this.addRangeDefaultAndPaymReference(new Query(_sourceDataQuery), ledgerJournalTransToSum);

            res.addEnd(this.getLedgerJournalTransFromQuery(groupedQuery));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTransFromQuery</Name>
				<Source><![CDATA[
    private List getLedgerJournalTransFromQuery(Query _sourceDataQuery)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_sourceDataQuery, tableNum(BankTransSummarizationView));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, JournalTransRecId));

        List res = new List(Types::Record);
        QueryRun queryRun = new QueryRun(_sourceDataQuery);

        while (queryRun.next())
        {
            BankTransSummarizationView sumView = queryRun.get(tableNum(BankTransSummarizationView));
            LedgerJournalTrans journalTrans;
            select firstonly journalTrans 
                where journalTrans.RecId == sumView.JournalTransRecId;
            
            res.addEnd(journalTrans);
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByDefault</Name>
				<Source><![CDATA[
    private Query addGroupByDefault(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(BankTransSummarizationView));

        qbds.addGroupByField(fieldNum(BankTransSummarizationView, AccountId));
        qbds.addGroupByField(fieldNum(BankTransSummarizationView, PaymMode));
        qbds.addGroupByField(fieldNum(BankTransSummarizationView, CurrencyCode));
        qbds.addGroupByField(fieldNum(BankTransSummarizationView, CustVendAccountType));
        qbds.addGroupByField(fieldNum(BankTransSummarizationView, TransDate));

        qbds.addSelectionField(fieldNum(BankTransSummarizationView, AccountId));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, PaymMode));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, CurrencyCode));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, CustVendAccountType));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, TransDate));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByDefaultAndDocNum</Name>
				<Source><![CDATA[
    private Query addGroupByDefaultAndDocNum(Query _query)
    {
        this.addGroupByDefault(_query);

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(BankTransSummarizationView));

        qbds.addGroupByField(fieldNum(BankTransSummarizationView, DocumentNum));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, DocumentNum));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByDefaultAndPaymReference</Name>
				<Source><![CDATA[
    private Query addGroupByDefaultAndPaymReference(Query _query)
    {
        this.addGroupByDefault(_query);

        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(BankTransSummarizationView));

        qbds.addGroupByField(fieldNum(BankTransSummarizationView, PaymReference));
        qbds.addSelectionField(fieldNum(BankTransSummarizationView, PaymReference));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeDefault</Name>
				<Source><![CDATA[
    private Query addRangeDefault(Query _query, BankTransSummarizationView _sumView)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(BankTransSummarizationView));

        qbds.addRange(fieldNum(BankTransSummarizationView, AccountId)).value(queryValue(_sumView.AccountId));
        qbds.addRange(fieldNum(BankTransSummarizationView, PaymMode)).value(queryValue(_sumView.PaymMode));
        qbds.addRange(fieldNum(BankTransSummarizationView, CurrencyCode)).value(queryValue(_sumView.CurrencyCode));
        qbds.addRange(fieldNum(BankTransSummarizationView, CustVendAccountType)).value(queryValue(_sumView.CustVendAccountType));
        qbds.addRange(fieldNum(BankTransSummarizationView, TransDate)).value(queryValue(_sumView.TransDate));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeDefaultAndDocNum</Name>
				<Source><![CDATA[
    private Query addRangeDefaultAndDocNum(Query _query, BankTransSummarizationView _sumView)
    {
        Query query = this.addRangeDefault(_query, _sumView);
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(query, tableNum(BankTransSummarizationView));
        qbds.addRange(fieldNum(BankTransSummarizationView, DocumentNum)).value(queryValue(_sumView.DocumentNum));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeDefaultAndPaymReference</Name>
				<Source><![CDATA[
    private Query addRangeDefaultAndPaymReference(Query _query, BankTransSummarizationView _sumView)
    {
        Query query = this.addRangeDefault(_query, _sumView);
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(query, tableNum(BankTransSummarizationView));
        qbds.addRange(fieldNum(BankTransSummarizationView, PaymReference)).value(queryValue(_sumView.PaymReference));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>