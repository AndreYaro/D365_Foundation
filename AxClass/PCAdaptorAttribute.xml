<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAdaptorAttribute</c> class provides an API method to manipulate an attribute.
/// </summary>
class PcAdaptorAttribute
{
    EcoResCategoryAttribute categoryAttribute;

    EcoResAttribute             attribute;
    EcoResAttributeValue        attributeValue;

    PCSolverVariable            solverVariable;

    AttributeValueBoolean       booleanValue;

    AttributeValueText          textValue;

    AttributeValueInt           integerValue;

    AttributeValueFloat         decimalValue;

    PCAttributeValueTranslation attributeValueTranslation;

    boolean                     isUserSelected;

    boolean                     dataTypeSet;
    AttributeDataType           dataType;

    str                         parsedValue;

    private LanguageId          languageId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a visitor.
    /// </summary>
    /// <param name = "_visitor">A visitor.</param>
    public void accept(PCAdaptorVisitor _visitor)
    {
        _visitor.visitAttribute(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguageId</Name>
				<Source><![CDATA[
    internal void setLanguageId(LanguageId _languageId)
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a value to the attribute.
    /// </summary>
    /// <param name = "_value">The value to assign.</param>
    public void assignValue(str _value)
    {
        #PC

        switch (this.getValueType())
        {
            case AttributeDataType::Integer:
                this.parmIntegerValue(str2Int(_value));

                break;
            case AttributeDataType::TrueFalse:
                this.parmBooleanValue(_value == #True);

                break;
            case AttributeDataType::Decimal:
                this.parmTextValue(_value);
                this.parmDecimalValue(str2num(_value));

                break;
            case AttributeDataType::Text:
                this.parmTextValue(_value);
                break;
            default:
                if (!this.assignValueDefault(_value))
                {
                    throw error(strFmt("@SYS89175", tableStr(EcoResAttribute)));
                }
        }

        this.parmParsedValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assigns a default value to the attribute.
    /// </summary>
    /// <param name = "_value">
    ///     The value to assign.
    /// </param>
    /// <returns>
    ///     true if the attribute was successfully assigned; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean assignValueDefault(str _value)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of an attribute.
    /// </summary>
    /// <returns>
    /// The localized name of an attribute.
    /// </returns>
    public PCName getLocalizedName()
    {
        LanguageId nameLanguageId = languageId ? languageId : LanguageTable::defaultLanguage();

        PCName localizedName = EcoResAttributeTranslation::findByAttributeAndLanguage(attribute.RecId, nameLanguageId).FriendlyName;

        return localizedName == '' ? this.getName() : localizedName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the <c>solverVariable</c> object.
    /// </summary>
    /// <returns>
    /// The name of the <c>solverVariable</c> object.
    /// </returns>
    public PCSolverName getName()
    {
        return solverVariable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueAsLocalizedString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value as a localized string.
    /// </summary>
    /// <returns>
    /// A localized string that represents the value.
    /// </returns>
    public str getValueAsLocalizedString()
    {
        if (this.hasValue())
        {
            switch (this.getValueType())
            {
                case AttributeDataType::Integer:
                    return int2str(this.parmIntegerValue());
                case AttributeDataType::Text:
                    return this.getValueAsLocalizedTextValue();
                case AttributeDataType::TrueFalse:
                    SysDictEnum dictEnum = new SysDictEnum(enumNum(AttributeValueBoolean));
                    var labelId = dictEnum.index2LabelId(enum2int(this.parmBooleanValue()));
                    return SysLabel::labelId2String2(labelId, languageId);
                case AttributeDataType::Decimal:
                    return strFmt('%1', this.parmDecimalValue());
                default:
                    return this.getValueAsLocalizedStringDefault();
            }
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueAsLocalizedStringDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets default value for a localized string.
    /// </summary>
    /// <returns>
    ///     Localized string value based on <c>AttributeDataType</c>.
    /// </returns>
    [Replaceable]
    protected str getValueAsLocalizedStringDefault()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueAsLocalizedTextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value as a localized string.
    /// </summary>
    /// <returns>
    ///  A localized string that represents the value.
    /// </returns>
    protected str getValueAsLocalizedTextValue()
    {
        attributeValueTranslation.setLanguageId(languageId);
        return attributeValueTranslation.getLocalizedValue(attribute, textValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>dataType</c> object.
    /// </summary>
    /// <returns>
    /// The value of the <c>dataType</c> object.
    /// </returns>
    public AttributeDataType getValueType()
    {
        return dataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the attribute has a value assigned.
    /// </summary>
    /// <returns>
    /// true if the attribute has a value; otherwise, false.
    /// </returns>
    public boolean hasValue()
    {
        return parsedValue != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the attribute has a user selected value.
    /// </summary>
    /// <param name="_isUserSelected">
    /// A Boolean value that indicates whether the attribute has a user selected value; optional.
    /// </param>
    /// <returns>
    /// true if the attribute has a value that is assigned by the user; otherwise, false.
    /// </returns>
    public boolean isUserSelected(boolean _isUserSelected = isUserSelected)
    {
        isUserSelected = _isUserSelected;

        return isUserSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        dataTypeSet     = false;
        isUserSelected  = false;

        attributeValueTranslation = PCAttributeValueTranslation::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttributeValueTranslation</Name>
				<Source><![CDATA[
    public PCAttributeValueTranslation parmAttributeValueTranslation(PCAttributeValueTranslation _attributeValueTranslation = attributeValueTranslation)
    {
        attributeValueTranslation = _attributeValueTranslation;

        return attributeValueTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBooleanValue</Name>
				<Source><![CDATA[
    public AttributeValueBoolean parmBooleanValue(AttributeValueBoolean _booleanValue = booleanValue)
    {
        booleanValue = _booleanValue;

        return booleanValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDecimalValue</Name>
				<Source><![CDATA[
    public AttributeValueFloat parmDecimalValue(AttributeValueFloat _decimalValue = decimalValue)
    {
        decimalValue = _decimalValue;

        return decimalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntegerValue</Name>
				<Source><![CDATA[
    public AttributeValueInt parmIntegerValue(AttributeValueInt _integerValue = integerValue)
    {
        integerValue = _integerValue;

        return integerValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIncludedInReuse</Name>
				<Source><![CDATA[
    public boolean parmIsIncludedInReuse(NoYes _isIncludedInReuse = solverVariable.IncludeInReuse)
    {
        solverVariable.IncludeInReuse = _isIncludedInReuse;

        return solverVariable.IncludeInReuse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParsedValue</Name>
				<Source><![CDATA[
    public str parmParsedValue(str _parsedValue = parsedValue)
    {
        parsedValue = _parsedValue;

        return parsedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTextValue</Name>
				<Source><![CDATA[
    public AttributeValueText parmTextValue(AttributeValueText _textValue = textValue)
    {
        textValue = _textValue;

        return textValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttibuteValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>attributeValue</c> object.
    /// </summary>
    /// <param name="_attributeValue">
    /// The value for which to set the <c>attributeValue</c> object.
    /// </param>
    public void setAttibuteValue(EcoResAttributeValue _attributeValue)
    {
        attributeValue = _attributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryAttribute</Name>
				<Source><![CDATA[
    protected void setCategoryAttribute(EcoResCategoryAttribute _categoryAttribute)
    {
        categoryAttribute = _categoryAttribute;

        attribute = EcoResAttribute::find(categoryAttribute.Attribute);

        solverVariable = PCSolverVariable::findByAttribute(attribute.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>dataType</c> object.
    /// </summary>
    /// <param name="_dataType">
    /// The value for which to set the <c>dataType</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Throws an error is the data type is called more than one time.
    /// </exception>
    public void setDataType(AttributeDataType _dataType)
    {
        if (!dataTypeSet)
        {
            dataType = _dataType;
            dataTypeSet = true;
        }
        else
        {
            throw error("@SYS335089");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the underlying <c>EcoResAttribute</c> record.
    /// </summary>
    /// <returns>A <c>EcoResAttribute</c> record.</returns>
    public EcoResAttribute getAttribute()
    {
        return attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorAttribute construct(EcoResCategoryAttribute _categoryAttribute)
    {
        PCAdaptorAttribute adaptorAttribute = new PCAdaptorAttribute();
        adaptorAttribute.setCategoryAttribute(_categoryAttribute);

        return adaptorAttribute;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>