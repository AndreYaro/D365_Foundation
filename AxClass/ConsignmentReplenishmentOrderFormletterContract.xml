<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentOrderFormletterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConsignmentReplenishmentOrderFormletterContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> service when you post replenishment order documents.
/// </summary>
[DataContractAttribute]
public abstract class ConsignmentReplenishmentOrderFormletterContract
extends FormLetterContract
{
    private ConsignmentReplenishmentOrderHeader             replenishmentOrderHeader;
    private ConsignmentDraftReplenishmentOrderJournalHeader draftReplenishmentOrderJournalHeader;

    #define.CurrentVersion(2)
    #define.Version1(1)

    #LOCALMACRO.ParmListReplenishment
        replenishmentOrderHeader,
        draftReplenishmentOrderJournalHeader
    #ENDMACRO

    #LOCALMACRO.ParmListReplenishmentV1
        replenishmentOrderHeader,
        draftReplenishmentOrderJournalHeader,
        callerMenuItem
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDraftReplenishmentOrderJournalHeader</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ConsignmentDraftReplenishmentOrderJournalHeader parmDraftReplenishmentOrderJournalHeader(ConsignmentDraftReplenishmentOrderJournalHeader _draftReplenishmentOrderJournalHeader = draftReplenishmentOrderJournalHeader)
    {
        draftReplenishmentOrderJournalHeader = _draftReplenishmentOrderJournalHeader;
        return draftReplenishmentOrderJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplenishmentOrderHeader</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ConsignmentReplenishmentOrderHeader parmReplenishmentOrderHeader(ConsignmentReplenishmentOrderHeader _replenishmentOrderHeader = replenishmentOrderHeader)
    {
        replenishmentOrderHeader = _replenishmentOrderHeader;
        return replenishmentOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormLetterType</Name>
				<Source><![CDATA[
    public FormletterType getFormLetterType()
    {
        return FormletterType::Consignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListReplenishment] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer         version = RunBase::getVersion(_packedClass);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListReplenishment, packedBase] = _packedClass;
                return super(packedBase);

            case #Version1:
                [version, #ParmListCommon, #ParmListReplenishmentV1, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ConsignmentReplenishmentOrderFormletterContract</c> object from the given container.
    /// </summary>
    /// <param name="_replenishmentOrderFormletterContract">
    /// A container that contains a packed <c>ConsignmentReplenishmentOrderFormletterContract</c> object.
    /// </param>
    /// <returns>
    /// An instance of the <c>ConsignmentReplenishmentOrderFormletterContract</c> class.
    /// </returns>
    public static ConsignmentReplenishmentOrderFormletterContract newFromPackedVersion(container _replenishmentOrderFormletterContract)
    {
        ConsignmentReplenishmentOrderFormletterContract replenishmentOrderFormletterContract;
        DocumentStatus          documentStatus = conPeek(_replenishmentOrderFormletterContract, #DocumentStatusPosition);

        switch (documentStatus)
        {
            case  DocumentStatus::PackingSlip:
                replenishmentOrderFormletterContract = ConsignmentReplenishmentOrderFormletterProductReceiptContract::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        replenishmentOrderFormletterContract.unpack(_replenishmentOrderFormletterContract);

        return replenishmentOrderFormletterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    public LateSelectionQuery getLateSelectionQuery()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>