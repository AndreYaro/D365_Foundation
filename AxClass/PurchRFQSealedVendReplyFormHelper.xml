<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedVendReplyFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSealedVendReplyFormHelper</c> is a helper class for the PurchRFQSealedVendReply form.
/// </summary>
internal final class PurchRFQSealedVendReplyFormHelper extends PurchRFQVendorReplyFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQSealedVendReplyFormHelper construct()
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        return new PurchRFQSealedVendReplyFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateBackToList</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void navigateBackToList(Common _record)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        formRun.close();
        
        new MenuFunction(menuItemDisplayStr(VendVendorRequestForQuotationsWorkspace), MenuItemType::Display)
            .run(new Args());        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignSealedBid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes formRun to the caller form and other form controls on the form.
    /// Also calls methods required for opening the form initially.
    /// </summary>
    /// <param name = "_formRun"> A variable pointing to the calling form </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    /// <param name = "_purchRFQReplyLine_ds"> <c>PurchRFQReplyLine</c> table form datasource </param>
    /// <param name = "_purchRFQTmpSealedReplyTable_ds"> <c>PurchRFQTmpSealedReplyTable</c> table form datasource </param>
    /// <param name = "_purchRFQTmpSealedReplyLine_ds"> <c>PurchRFQTmpSealedReplyLine</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void updateDesignSealedBid(
        FormRun _formRun,
        PurchRFQReplyTable _purchRFQReplyTable,
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQTable _purchRFQTable,
        FormDataSource _purchRFQReplyTable_ds,
        FormDataSource _purchRFQReplyLine_ds,
        FormDataSource _purchRFQTmpSealedReplyTable_ds,
        FormDataSource _purchRFQTmpSealedReplyLine_ds)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        this.setFormRun(_formRun);
        this.initControls();
        this.hideAttachmentButton();

        if (_purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::SubmittedByVendor)
        {
            info("@SCM:RecallBidToEditSubmittedValuesMessage");
        }

        this.setSealedBidActionPaneButtonsVisibility(_purchRFQTable, _purchRFQCaseTable, _purchRFQReplyTable.ReplyProgressStatus);
        this.setSealedBidFieldsVisibility(_purchRFQTable, _purchRFQTmpSealedReplyTable_ds);
        this.setFieldsEditability(_purchRFQTable, _purchRFQReplyTable, _purchRFQTmpSealedReplyTable_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allowEdit property for the reply table fields of the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    /// <param name = "_purchRFQTmpSealedReplyTable_ds"> <c>PurchRFQTmpSealedReplyTable</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void setFieldsEditability(PurchRFQTable _purchRFQTable, PurchRFQReplyTable _purchRFQReplyTable, FormDataSource _purchRFQTmpSealedReplyTable_ds)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        isEditAllowed = _purchRFQTable.IsBidInProgress 
            && (_purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::NotStarted
            || _purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::VendorEditing);
         
        _purchRFQTmpSealedReplyTable_ds.allowEdit(isEditAllowed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineFieldsEditability</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setLineFieldsEditability(PurchRFQLine _purchRFQLine, FormDataSource _purchRFQTmpSealedReplyLine_ds, FormDataSource _purchRFQLine_ds)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        boolean shouldLineEditable = _purchRFQLine.Status <=  PurchRFQStatus::Rejected;

        PurchRFQTmpSealedReplyLine purchRFQTmpSealedReplyLine = _purchRFQTmpSealedReplyLine_ds.cursor();

        _purchRFQTmpSealedReplyLine_ds.allowEdit(shouldLineEditable && isEditAllowed);
        _purchRFQTmpSealedReplyLine_ds.object(fieldNum(PurchRFQTmpSealedReplyLine, ItemName)).allowEdit(purchRFQTmpSealedReplyLine.IsAlternate);

        this.enableDisableSealedLineButtons(_purchRFQLine, purchRFQTmpSealedReplyLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableSealedLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the buttons on the action pane tab for the reply lines of the sealed bid form.
    /// </summary>
    /// <param name = "_purchRFQLine"> <c>PurchRFQLine</c> table record.</param>
    /// <param name = "_purchRFQTmpSealedReplyLine"> <c>PurchRFQTmpSealedReplyLine</c> table record.</param>
    [Hookable(false), Wrappable(false)]
    internal void enableDisableSealedLineButtons(PurchRFQLine _purchRFQLine, PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine)
    {
        purchRFQLineAddAlternate.enabled(_purchRFQLine.addAlternateAllowed() && !_purchRFQTmpSealedReplyLine.IsAlternate);
        purchRFQLineRemoveAlternate.enabled(_purchRFQTmpSealedReplyLine.IsAlternate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSealedBidFieldsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property for the reply table fields on the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void setSealedBidFieldsVisibility(PurchRFQTable _purchRFQTable, FormDataSource _purchRFQTmpSealedReplyTable_ds)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        boolean isPurchAgreementType = _purchRFQTable.RFQType == PurchRFQType::PurchAgreement;
        PurchRFQReplyTable_ValidityDateStart.visible(isPurchAgreementType);
        PurchRFQReplyTable_ValidityDateEnd.visible(isPurchAgreementType);
          
        _purchRFQTmpSealedReplyTable_ds.object(fieldNum(PurchRFQTmpSealedReplyTable, ValidityDateStart)).mandatory(isPurchAgreementType);
        _purchRFQTmpSealedReplyTable_ds.object(fieldNum(PurchRFQTmpSealedReplyTable, ValidityDateEnd)).mandatory(isPurchAgreementType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSealedBidActionPaneButtonsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property for the buttons on the action pane of the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    private void setSealedBidActionPaneButtonsVisibility(
        PurchRFQTable _purchRFQTable,
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQReplyProgressStatus _replyProgressStatus)
    {
        boolean isRFQExpired = _purchRFQCaseTable.isRFQExpiredForCurrentUser();

        PurchRFQReplyRecall.visible(_replyProgressStatus == PurchRFQReplyProgressStatus::SubmittedByVendor
                                    && _purchRFQTable.StatusHigh == PurchRFQStatus::Received
                                    && !isRFQExpired
                                    && _purchRFQTable.IsBidInProgress);

        boolean isRFQReplyEditAllowed = _purchRFQTable.IsBidInProgress
                                        && !isRFQExpired
                                        && _replyProgressStatus != PurchRFQReplyProgressStatus::SubmittedByVendor;

        this.showHideEditButton(isRFQReplyEditAllowed && formRun.viewEditModeHelper().isInViewMode());
        this.showHideSaveButton(isRFQReplyEditAllowed && formRun.viewEditModeHelper().isInEditMode());
        PurchRFQReplyReset.visible(isRFQReplyEditAllowed);
        PurchRFQReplyLineReset.visible(isRFQReplyEditAllowed);
        PurchRFQLineAddAlternate.visible(isRFQReplyEditAllowed && _purchRFQCaseTable.AllowAlternates);
        PurchRFQLineRemoveAlternate.visible(isRFQReplyEditAllowed && _purchRFQCaseTable.AllowAlternates);
        PurchRFQReplySend.visible(isRFQReplyEditAllowed);
        CompleteQuestionnaire.visible(isRFQReplyEditAllowed);
        PurchRFQVendQuestionAnswer.visible(_purchRFQCaseTable.IsVendorQuestionEnabled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>