<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendinvoiceCreateAndPostInvoiceRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class VendinvoiceCreateAndPostInvoiceRegister
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFirstJournalNameForType</Name>
				<Source><![CDATA[
    internal static LedgerJournalName getFirstJournalNameForType(LedgerJournalType _journalType)
    {
        LedgerJournalName journalName;
        select firstonly JournalName from journalName
            where journalName.JournalType == _journalType;
        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostInvoiceRegister</Name>
				<Source><![CDATA[
    internal static LedgerJournalTable createAndPostInvoiceRegister(VendInvoiceInfoTable _vendInvoice)
    {
        LedgerJournalTable ledgerjournalTableIR = VendinvoiceCreateAndPostInvoiceRegister::createInvoiceRegister(_vendInvoice);

        VendinvoiceCreateAndPostInvoiceRegister::postInvoiceRegister(ledgerjournalTableIR);

        return ledgerjournalTableIR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceRegister</Name>
				<Source><![CDATA[
    private static LedgerJournalTable createInvoiceRegister(VendInvoiceInfoTable _vendInvoice)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalEngine LedgerJournalEngine;

        ledgerJournalTable.clear();
        ledgerJournalTable.initValue();
        ledgerJournalTable.JournalName = VendinvoiceCreateAndPostInvoiceRegister::getFirstJournalNameForType(LedgerJournalType::PurchaseLedger).JournalName;
        ledgerJournalTable.initFromLedgerJournalName(ledgerJournalTable.JournalName);
        ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        ledgerJournalTable.LedgerJournalInclTax = _vendInvoice.InclTax;
        ledgerJournalTable.insert();

        LedgerJournalEngine  =  LedgerJournalEngine::construct(ledgerJournalTable.JournalType);
        ledgerJournalEngine.newJournalActive(ledgerJournalTable);

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        LedgerJournalEngine.initValue(ledgerJournalTrans);
        ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
        ledgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_vendInvoice.InvoiceAccount, LedgerJournalACType::Vend);
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerJournalTrans.purchOffsetLedgerDimension(), ledgerJournalTrans.getOffsetCompany());
        ledgerJournalEngine.accountModified(ledgerJournalTrans);
        ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans);

        ledgerJournalTrans.TransDate = _vendInvoice.TransDate;
        ledgerJournalTrans.DocumentNum = _vendInvoice.DocumentNum;
        ledgerJournalTrans.DocumentDate = _vendInvoice.DocumentDate;
        ledgerJournalTrans.InvoiceReleaseDate = _vendInvoice.InvoiceReleaseDate;
        if (ledgerJournalTable.LedgerJournalInclTax)
        {
            ledgerJournalTrans.AmountCurCredit = _vendInvoice.ImportedAmount;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = _vendInvoice.ImportedAmount - _vendInvoice.ImportedSalesTax;
        }
        ledgerJournalTrans.CashDiscCode = _vendInvoice.CashDiscCode;
        ledgerJournalTrans.CashDiscPercent = _vendInvoice.CashDiscPercent;
        ledgerJournalTrans.CashDiscAmount = _vendInvoice.CashDisc;
        ledgerJournalTrans.DateCashDisc = _vendInvoice.CashDiscDate;
        ledgerJournalTrans.Invoice  = _vendInvoice.Num;
        ledgerJournalTrans.Company = _vendInvoice.company();
        ledgerJournalTrans.Approver = _vendInvoice.Approver;
        if (!ledgerJournalTrans.Approver)
        {
            ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId()); 
        }

        ledgerJournalTrans.CurrencyCode = _vendInvoice.CurrencyCode;
        ledgerJournalTrans.ExchRate = _vendInvoice.ExchRate;
        ledgerJournalTrans.ExchRateSecond = _vendInvoice.ExchRateSecondary;
        ledgerJournalTrans.ReportingCurrencyExchRate = _vendInvoice.ReportingCurrencyExchangeRate;
        ledgerJournalTrans.Payment = _vendInvoice.Payment;
        ledgerJournalTrans.PaymId = _vendInvoice.PaymId;
        ledgerJournalTrans.PaymSched = _vendInvoice.PaymentSched;
        ledgerJournalTrans.PaymMode = _vendInvoice.PaymMode;
        ledgerJournalTrans.PaymSpec = _vendInvoice.PaymSpec;
        ledgerJournalTrans.CustVendBankAccountId = _vendInvoice.VendBankAccountID;
        ledgerJournalTrans.Due = _vendInvoice.FixedDueDate;
        ledgerJournalTrans.PostingProfile= _vendInvoice.PostingProfile;

        ledgerJournalTrans.TaxGroup = _vendInvoice.TaxGroup ? _vendInvoice.TaxGroup : VendTable::find(_vendInvoice.InvoiceAccount).TaxGroup;
        ledgerJournalTrans.TaxItemGroup = TaxParameters::find().TaxItemGroup;
        ledgerJournalEngine.calcVirtualCashDisc(ledgerJournalTrans);
        ledgerJournalTrans.defaultRow();

        ledgerJournalTrans.insert();
        ledgerJournalEngine.correctTaxAmount(ledgerJournalTrans, _vendInvoice.ImportedSalesTax, true, false);

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoiceRegister</Name>
				<Source><![CDATA[
    private static void postInvoiceRegister(LedgerJournalTable _ledgerJournalTableIR)
    {
        LedgerJournalPost::postJournal(_ledgerJournalTableIR, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicePoolRecId</Name>
				<Source><![CDATA[
    internal static RecID getInvoicePoolRecId (LedgerJournalTable _ledgerJournalTableIR)
    {
        LedgerJournalTrans      ledgerJournalTransPool;
        LedgerJournalTrans      ledgerJournalTransIR;
        LedgerJournalId         vendInvoicePoolJournalNum = LedgerJournalTable::findVendorInvoicePool().JournalNum;

        select firstonly ledgerJournalTransIR 
            where ledgerJournalTransIR.JournalNum == _ledgerJournalTableIR.JournalNum;

        select firstonly ledgerJournalTransPool
            where ledgerJournalTransPool.JournalNum   == vendInvoicePoolJournalNum
                && ledgerJournalTransPool.Voucher      == ledgerJournalTransIR.voucher
                && ledgerJournalTransPool.AccountType  == LedgerJournalACType::Vend
                && ledgerJournalTransPool.Invoice      == ledgerJournalTransIR.Invoice;

        return ledgerJournalTransPool.recid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>