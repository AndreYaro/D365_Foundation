<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransferTimecard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class transfers an employee's timecard registration from the <c>JmgTimecardTrans</c> table to
///    the <c>JmgStampJournalTrans</c> table.
/// </summary>
/// <remarks>
///    As a part of the transfer, the timecard registrations are validated using the <see
///    cref="T:JmgValidateTimecard" />.
/// </remarks>
class JmgTransferTimecard extends RunBase
{
    JmgTimecardTable    jmgTimecardTable;
    boolean             throwError;
    boolean             transferredOk;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <param name="dialog">
    ///    The dialog.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that specifies whether the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    A <c>runbaseDialogable</c>.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgTransferTimecard</c> class adds a caption, asking the user to confirm transfer of
    ///    timecard registrations.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);
        ret.caption("@SYS39810");
        ret.addText("@SYS39949"+'?');
        ret.parmIsModal(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39810";
    }

]]></Source>
			</Method>
			<Method>
				<Name>error</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows an error message to the user.
    /// </summary>
    /// <param name="_errorMessage">
    ///    The error message to show.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Throws the error message as an exception if the <c>ThrowError</c> parameter is set.
    /// </exception>
    private void error(str _errorMessage)
    {
        transferredOk = false;
        if (throwError)
        {
            throw error(_errorMessage);
        }
        else
        {
            checkFailed(_errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [jmgTimecardTable.Worker, jmgTimecardTable.ProfileDate, transferredOk];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowError</Name>
				<Source><![CDATA[
    public boolean parmThrowError(boolean _throwError = throwError)
    {
        throwError = _throwError;
        return throwError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers the <c>JmgTimecardTrans</c> registrations to the <c>JmgStampJournalTrans</c> table. The timecard registrations are validated using the <see cref="JmgValidateTimecard Class" />. If the
    ///    validation succeeds, the timecard registrations are created in the <see cref="JmgStampJournalTrans Table" />, ready for the supervisor to calculate. All existing <see cref="JmgStampJournalTrans
    ///    Table" /> lines on the day are deleted before the new ones are created.
    /// </summary>
    public void run()
    {
        JmgTimecardTrans        timecardTrans;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampJournalTable    jmgStampJournalTable;
        JmgValidateTimecard     jmgValidateTimecard;
        JmgCalcApproveForm      jmgCalcApproveForm;

        super();

        transferredOk = true;
        if (jmgTimecardTable.dateCalculated())
        {
            this.error(strfmt("@SYS39812", jmgTimecardTable.ProfileDate));
            return;
        }

        ttsbegin;

        jmgValidateTimecard = JmgValidateTimecard::construct();
        jmgValidateTimecard.parmJmgTimecardTable(jmgTimecardTable);
        jmgValidateTimecard.parmThrowError(throwError);
        jmgValidateTimecard.runOperation();

        if (!jmgValidateTimecard.validatedOk())
        {
            // Not validated ok
            transferredOk = false;
            ttsabort;
            return;
        }

        jmgCalcApproveForm = JmgCalcApproveForm::construct();
        jmgTimecardTable.selectForUpdate(true);

        // Transfer registrations.
        while select timecardTrans
            where timecardTrans.Worker      == jmgTimecardTable.Worker &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate
        {
            jmgStampJournalTrans.clear();

            select firstonly forupdate jmgStampJournalTrans
                where (timecardTrans.TermRegStartRecID && jmgStampJournalTrans.TermRegStartRecID == timecardTrans.TermRegStartRecID)
                   && (timecardTrans.TermRegStopRecID  && jmgStampJournalTrans.TermRegStopRecID  == timecardTrans.TermRegStopRecID);

            jmgStampJournalTrans.initFromTimecardTrans(timecardTrans);
            if (jmgStampJournalTrans.RecId != 0)
            {
                jmgStampJournalTrans.update();
                jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
            }
            else
            {
                jmgStampJournalTrans.insert();
                jmgCalcApproveForm.transactionInserted(jmgStampJournalTrans);
            }
        }
        jmgTimecardTable.RegistrationsTransferred = NoYes::Yes;
        jmgTimecardTable.update();

        // Set profile id on jmgStampJournalTable.
        jmgStampJournalTable = JmgStampJournalTable::find(jmgTimecardTable.Worker, jmgTimecardTable.ProfileDate, true);
        if (jmgStampJournalTable)
        {
            jmgStampJournalTable.Profile = jmgTimecardTable.ProfileId;
            jmgStampJournalTable.ProfileManual = NoYes::Yes;
            jmgStampJournalTable.update();
        }
        else
        {
            jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(JmgEmployee::find(jmgTimecardTable.Worker), jmgTimecardTable.ProfileDate);
            jmgStampJournalTable.Profile = jmgTimecardTable.ProfileId;
            jmgStampJournalTable.ProfileManual = NoYes::Yes;
            jmgStampJournalTable.insert();
        }
        JmgTransaction::postChanges(jmgStampJournalTable);

        // Promise the journal will be posted on approve form again.
        while select forupdate jmgStampJournalTrans
            where jmgStampJournalTrans.Worker       == jmgStampJournalTable.Worker
                && jmgStampJournalTrans.ProfileDate  == jmgStampJournalTable.ProfileDate
        {
            jmgStampJournalTrans.updateOriginalTransaction();
            jmgCalcApproveForm.transactionUpdated(jmgStampJournalTrans);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferredOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the timecard registrations were transferred correctly.
    /// </summary>
    /// <returns>
    ///    true if the timecard registrations were transferred correctly; otherwise, false.
    /// </returns>
    public boolean transferredOk()
    {
        return transferredOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        JmgWorkerRecId  worker;
        JmgProfileDate  profileDate;

        [worker, profileDate, transferredOk] = packedClass;

        if (!jmgTimecardTable)
        {
            jmgTimecardTable = JmgTimecardTable::find(worker, profileDate);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgTimecardTable</Name>
				<Source><![CDATA[
    public JmgTimecardTable parmJmgTimecardTable(JmgTimecardTable _jmgTimecardTable = jmgTimecardTable)
    {
        jmgTimecardTable = _jmgTimecardTable;

        return jmgTimecardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgTransferTimecard</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgTransferTimecard</c> class.
    /// </returns>
    public static JmgTransferTimecard construct()
    {
        return new JmgTransferTimecard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgTransferTimecard</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgTransferTimecard</c> class.
    /// </param>
    /// <remarks>
    ///       Use the
    ///    <c>
    ///       main
    ///    </c>
    ///       class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///       method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgTransferTimecard jmgTransferTimecard = JmgTransferTimecard::construct();

        if (_args && _args.dataset() == tablenum(JmgTimecardTable))
        {
            jmgTransferTimecard.getLast();
            jmgTransferTimecard.parmJmgTimecardTable(_args.record());
        }
        else
        {
            error(strfmt("@SYS19384", classstr(JmgValidateTimecard)));
        }

        if (_args.parmEnum() == NoYes::Yes || jmgTransferTimecard.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                jmgTransferTimecard.runOperation();
            }

            if (jmgTransferTimecard.transferredOk())
            {
                _args.parmEnum(NoYes::Yes);
            }
            else
            {
                _args.parmEnum(NoYes::No);
            }

            FormRun caller = _args.caller();
            if (caller && caller.dataSource())
            {
                caller.dataSource().research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>