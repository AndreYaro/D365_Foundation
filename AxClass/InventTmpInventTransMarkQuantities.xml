<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTmpInventTransMarkQuantities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTmpInventTransMarkQuantities</c> class is keeping track of quantites during the marking process.
/// </summary>
public class InventTmpInventTransMarkQuantities
{
    private Map mapConsumedQuantity = new Map(Types::Int64, Types::Container);
    private const int ConPositionQtyMarkNow = 1;
    private const int ConPositionQtyOrdered = 2;
    private const int ConPositionQtyMarkNowConsumed = 3;
    private const int ConPositionQtyOrderedConsumed = 4;

        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>quantityRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity that remains to be marked for a <c>TmpInventTransMark</c> record.
    /// </summary>
    /// <param name = "_tmpInventTransMark">A marking request buffer.</param>
    /// <param name = "_useMarkNowQuantity">true if marking is done based standard marking, false if marking is done based on pre-reservation.</param>
    /// <returns>
    /// The quantity that remains to be marked.
    /// </returns>    
    public InventQty quantityRemain(
        TmpInventTransMark _tmpInventTransMark, 
        boolean _useMarkNowQuantity)
    {
        if (!mapConsumedQuantity.exists(_tmpInventTransMark.RecId))
        {
            mapConsumedQuantity.insert(_tmpInventTransMark.RecId, [_tmpInventTransMark.qtyMarkNow, min(_tmpInventTransMark.qtyMarkNow, _tmpInventTransMark.QtyOrderedNotMarked), 0, 0]);
        }
        
        if (_useMarkNowQuantity)
        {
            return (conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyMarkNow) - conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyMarkNowConsumed));
        }
        
        return  (conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyOrdered) - conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyOrderedConsumed));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity that is consumed by the marking for a tmpInventTransMark record.
    /// </summary>
    /// <param name = "_tmpInventTransMark">A marking request buffer.</param>
    /// <param name = "_useMarkNowQuantity">true if marking is done based on standard marking, false if marking is done based on pre-reservation.</param>
    /// <returns>
    /// The quantity that is consumed by the marking.
    /// </returns>
    public InventQty quantityConsumed(
        TmpInventTransMark _tmpInventTransMark, 
        boolean _useMarkNowQuantity)
    {
        if (!mapConsumedQuantity.exists(_tmpInventTransMark.RecId))
        {
            mapConsumedQuantity.insert(_tmpInventTransMark.RecId, [_tmpInventTransMark.qtyMarkNow, _tmpInventTransMark.QtyOrderedNotMarked, _tmpInventTransMark.qtyMarkNow, max(_tmpInventTransMark.qtyMarkNow,_tmpInventTransMark.QtyOrderedNotMarked)]);
        }
        
        if (_useMarkNowQuantity)
        {
            return conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyMarkNowConsumed);
        }
        
        return conPeek(mapConsumedQuantity.lookup(_tmpInventTransMark.RecId), ConPositionQtyOrderedConsumed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeFromQuantityRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consumes marked quantity.
    /// </summary>
    /// <param name = "_tmpInventTransMark">The buffer to consume the quantity from.</param>
    /// <param name = "_qtyConsumedMarkNow">The quantity consumed from the Mark now quantity.</param>
    /// <param name = "_qtyConsumedOrdered">The quantity consumed from the ordered quantity.</param>
    public void consumeFromQuantityRemain(
        TmpInventTransMark _tmpInventTransMark, 
        InventQty _qtyConsumedMarkNow, 
        InventQty _qtyConsumedOrdered)
    {
        InventQty consumedMarkQty;
        InventQty consumedOrderedQty;
        InventQty markQty;
        InventQty markOrderedQty;
        
        if (!mapConsumedQuantity.exists(_tmpInventTransMark.RecId))
        {
            mapConsumedQuantity.insert(_tmpInventTransMark.RecId, [_tmpInventTransMark.qtyMarkNow,_tmpInventTransMark.QtyOrderedNotMarked, _qtyConsumedMarkNow,  _qtyConsumedOrdered]);
        }
        else
        {
            [markQty, markOrderedQty, consumedMarkQty, consumedOrderedQty] = mapConsumedQuantity.lookup(_tmpInventTransMark.RecId);
            mapConsumedQuantity.insert(_tmpInventTransMark.RecId, [_tmpInventTransMark.qtyMarkNow, _tmpInventTransMark.QtyOrderedNotMarked, _qtyConsumedMarkNow + consumedMarkQty, _qtyConsumedOrdered + consumedOrderedQty]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTmpInventTransMarkQuantities construct()
    {
        return new InventTmpInventTransMarkQuantities();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>