<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetOverviewDPBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetOverviewDPBE</c> class provides the report data for the <c>AssetOverviewBE</c> report.
/// </summary>
[SRSReportQueryAttribute(queryStr(AssetOverviewBE)), SRSReportParameterAttribute(classStr(AssetOverviewContractBE))]
public class AssetOverviewDPBE extends SrsReportDataProviderPreProcessTempDB
{
    private DialogField dialogYear;
    private Yr reportYear;
    private FiscalCalendarID fiscalCalendarID;
    private FiscalYearName fiscalYearName;
    private AssetSumCalc assetSumYear;
    private AssetSumCalc assetsumPriorYears;
    private TransDate assetYear;
    private AssetBook assetBook;
    private AssetGroup assetGroup;
    private AssetTable assetTable;
    private AssetOverviewTmpBE assetOverviewTmpBE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoBE, GlobalizationConstants::FeatureReferenceBE00023] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionPrior</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>AcquisitionPrior</c> value.
    /// </summary>
    /// <returns>
    /// The <c>acquisitionValue</c> and <c>acquisitionAdjValue</c> values.
    /// </returns>
    private AmountMST acquisitionPrior()
    {
        return assetsumPriorYears.acquisitionValue() + assetsumPriorYears.acquisitionAdjValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionYearMinus</Name>
				<Source><![CDATA[
    private AmountMST acquisitionYearMinus()
    {
        AmountMST amountMST;
        if(this.assetStatus())
        {
            amountMST = assetOverviewTmpBE.AcquisitionPrior + this.acquisitionYearPlus();
        }

        else
        {
            if (assetSumYear.acquisitionValue() < 0)
            {
                amountMST = -assetSumYear.acquisitionValue() - assetSumYear.disposalSaleValue() - assetSumYear.disposalScrapValue();
            }
            else
            {
                amountMST = -assetSumYear.disposalSaleValue() - assetSumYear.disposalScrapValue();
            }

            if (assetSumYear.acquisitionAdjValue() < 0)
            {
                amountMST -= assetSumYear.acquisitionAdjValue();
            }

            if (assetSumYear.writeDownAdjValue())
            {
                amountMST -= assetSumYear.writeDownAdjValue();
            }
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetStatus</Name>
				<Source><![CDATA[
    private boolean assetStatus()
    {
        return (assetBook.Status == AssetStatus::Scrapped || assetBook.Status == AssetStatus::Sold) && reportYear == year(assetBook.DisposalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionYearPlus</Name>
				<Source><![CDATA[
    private AmountMST acquisitionYearPlus()
    {
        AmountMST amountMST;

        if (assetSumYear.acquisitionValue() > 0)
        {
            amountMST = assetSumYear.acquisitionValue();
        }
        else
        {
            amountMST =  0;
        }

        if (assetSumYear.acquisitionAdjValue() > 0)
        {
            amountMST += assetSumYear.acquisitionAdjValue();
        }

        if (assetSumYear.writeUpAdjValue())
        {
            amountMST += assetSumYear.writeUpAdjValue();
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationPrior</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>DepreciationPrior</c> method is used to return the depreciation amount.
    /// </summary>
    /// <returns>
    /// The <c>depreciationValue</c> and <c>depreciationAdjValue</c> values from the <c>assetsumPriorYears</c> table.
    /// </returns>
    private AmountMST depreciationPrior()
    {
        return -assetsumPriorYears.depreciationValue() - assetsumPriorYears.depreciationAdjValue() - assetsumPriorYears.extraDepreciationValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationYearMinus</Name>
				<Source><![CDATA[
    private AmountMST depreciationYearMinus()
    {
        AmountMST amountMST;
        if(this.assetStatus())
        {
            amountMST = assetOverviewTmpBE.DepreciationPrior + this.depreciationYearPlus();
        }
        else
        {
            if (assetSumYear.depreciationValue() < 0)
            {
                amountMST = 0;
            }
            else
            {
                amountMST = assetSumYear.depreciationValue();
            }

            if (assetSumYear.depreciationAdjValue() > 0)
            {
                amountMST += assetSumYear.depreciationAdjValue();
            }

            if (assetSumYear.extraDepreciationValue() > 0)
            {
                amountMST += assetSumYear.extraDepreciationValue();
            }
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationYearPlus</Name>
				<Source><![CDATA[
    private AmountMST depreciationYearPlus()
    {
        AmountMST amountMST;

        if (assetSumYear.depreciationValue() < 0)
        {
            amountMST = - assetSumYear.depreciationValue();
        }
        else
        {
            amountMST =  0;
        }
        if (assetSumYear.depreciationAdjValue() < 0)
        {
            amountMST -= assetSumYear.depreciationAdjValue();
        }
        if (assetSumYear.extraDepreciationValue() < 0)
        {
            amountMST -= assetSumYear.extraDepreciationValue();
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetOverviewTmpBE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>AssetOverviewTmpBE</c> table.
    /// </summary>
    /// <returns>
    /// The populated <c>AssetOverviewTmpBE</c> object.
    /// </returns>
    /// <remarks>
    /// This is called from the  framework code.
    /// </remarks>
    [SRSReportDataSetAttribute(tableStr(AssetOverviewTmpBE))]
    public AssetOverviewTmpBE getAssetOverviewTmpBE()
    {
        select assetOverviewTmpBE;
        return assetOverviewTmpBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>assetOverviewTmpBE</c> table.
    /// </summary>
    private void insert()
    {
        assetOverviewTmpBE.Status                   = assetBook.Status;
        assetOverviewTmpBE.GroupId                  = assetGroup.GroupId;
        assetOverviewTmpBE.AssetGroupName           = assetGroup.Name;
        assetOverviewTmpBE.AssetId                  = assetTable.AssetId;
        assetOverviewTmpBE.Name                     = assetTable.Name;
        assetOverviewTmpBE.AcquisitionDate          = assetBook.AcquisitionDate;
        assetOverviewTmpBE.Percentage               = assetBook.depreciationPercentage();
        assetOverviewTmpBE.Method                   = assetBook.depreciationMethod();
        assetOverviewTmpBE.AcquisitionPrior         = assetsumPriorYears.acquisitionValue() + assetsumPriorYears.acquisitionAdjValue();
        assetOverviewTmpBE.AcquisitionYearMinus     = this.acquisitionYearMinus();
        assetOverviewTmpBE.AcquisitionYearPlus      = this.acquisitionYearPlus();
        assetOverviewTmpBE.TotalAcquisition         = assetOverviewTmpBE.AcquisitionPrior + assetOverviewTmpBE.AcquisitionYearPlus - assetOverviewTmpBE.AcquisitionYearMinus;
        assetOverviewTmpBE.DepreciationPrior        =  (- assetsumPriorYears.depreciationValue() - assetsumPriorYears.depreciationAdjValue() - assetsumPriorYears.extraDepreciationValue());
        assetOverviewTmpBE.DepreciationYearMinus    = this.depreciationYearMinus();
        assetOverviewTmpBE.DepreciationYearPlus     = this.depreciationYearPlus();
        assetOverviewTmpBE.TotalDepreciation        = assetOverviewTmpBE.DepreciationPrior + assetOverviewTmpBE.DepreciationYearPlus - assetOverviewTmpBE.DepreciationYearMinus;
        if (this.assetStatus())
        {
            assetOverviewTmpBE.Total               =  assetOverviewTmpBE.TotalAcquisition - assetOverviewTmpBE.TotalDepreciation;
        }
        else
        {
            assetOverviewTmpBE.Total               = assetOverviewTmpBE.TotalAcquisition - assetOverviewTmpBE.TotalDepreciation + assetSumYear.profitLossValue();
        }
        assetOverviewTmpBE.ProfitLoss               = assetSumYear.profitLossValue();

        assetOverviewTmpBE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the business logic processing to populate the temporary table buffer and sends it to the report to display.
    /// </summary>
    public void processReport()
    {
        if (FeatureStateProvider::isFeatureEnabled(AssetOverviewBEUseFiscalCalendarFeature::instance()))
        {
            this.processReportUsingFiscalCalendar();
        }
        else
        {
            this.processReportUsingGregorianCalendar();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportUsingFiscalCalendar</Name>
				<Source><![CDATA[
    private void processReportUsingFiscalCalendar()
    {
        AssetOverviewContractBE contract = this.parmDataContract() as AssetOverviewContractBE;
        
        fiscalCalendarID = contract.parmFiscalCalendar();
        fiscalYearName = contract.parmFiscalYearName();

        FiscalCalendar fc = FiscalCalendar::findByCalendarId(fiscalCalendarID);
        FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(fc.RecId, fiscalYearName);

        Query query = this.parmQuery();

        QueryBuildDataSource qbdsAB = query.dataSourceTable(tablenum(AssetBook));
        QueryBuildDataSource qbdsABT = qbdsAB.addDataSource(tableNum(AssetBookTable));
        qbdsABT.joinMode(JoinMode::InnerJoin);
        qbdsABT.relations(true);
        QueryBuildRange qbr = qbdsABT.addRange(fieldnum(AssetBookTable, FiscalCalendar));
        qbr = qbdsABT.findRange(fieldnum(AssetBookTable, FiscalCalendar));
        if (!qbr)
        {
            qbr = qbdsABT.addRange(fieldnum(AssetBookTable, FiscalCalendar));
        }
        qbr.value(queryValue(fc.RecId));

        if (contract.parmIncludeBooksWithoutFiscalCalendar() == NoYes::Yes)
        {
            qbdsABT.addRange(fieldnum(AssetBookTable, FiscalCalendar)).value(SysQuery::valueEmptyString());
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook));
            assetGroup = queryRun.get(tableNum(AssetGroup));
            assetTable = queryRun.get(tableNum(AssetTable));
            assetBook = AssetBook::find(assetTable.AssetId, assetBook.BookId);

            assetsumPriorYears = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId, fiscalCalendarYear.StartDate, AssetYear::PriorYears);
            assetSumYear = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId, fiscalCalendarYear.StartDate, AssetYear::ThisYear);

            if ((assetBook.AcquisitionDate <= fiscalCalendarYear.EndDate
                && assetBook.Status != AssetStatus::Sold
                && assetBook.Status != AssetStatus::Scrapped)
                || assetBook.DisposalDate >= fiscalCalendarYear.StartDate)
            {
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportUsingGregorianCalendar</Name>
				<Source><![CDATA[
    private void processReportUsingGregorianCalendar()
    {
        AssetOverviewContractBE contract = this.parmDataContract() as AssetOverviewContractBE;
        reportYear = contract.parmReportYear();
        assetYear = mkDate(1, 1, reportYear);

        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook));
            assetGroup = queryRun.get(tableNum(AssetGroup));
            assetTable = queryRun.get(tableNum(AssetTable));
            assetBook = AssetBook::find(assetTable.AssetId,assetBook.BookId);
            assetsumPriorYears = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId, assetYear, AssetYear::PriorYears);
            assetSumYear = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId, assetYear, AssetYear::ThisYear);

            if ((year(assetBook.AcquisitionDate) <= reportYear
                && assetBook.Status != AssetStatus::Sold
                && assetBook.Status != AssetStatus::Scrapped)
                || assetBook.DisposalDate >= assetYear)
            {
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>