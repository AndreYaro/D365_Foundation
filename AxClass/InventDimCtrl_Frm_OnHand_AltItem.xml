<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_OnHand_AltItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class extends the <c>InventDimCtrl_Frm_OnHand</c> class and is used to control how the
///    inventory on hand for an alternative item is displayed and totaled.
/// </summary>
class InventDimCtrl_Frm_OnHand_AltItem extends InventDimCtrl_Frm_OnHand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>formActiveSetup</c> method to create an <c>InventMovement</c> object.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    ///    setup for the alternative item.
    /// </param>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> record of the parent item; optional.
    /// </param>
    public void formActiveSetup(
        InventDimGroupSetup         _inventDimGroupSetup    = null,
        InventTable                 _inventTable            = null)
    {
        if (_inventTable)
        {
            InventDim inventDim;
            
            //Use the dimensions from the alternative item settings to create a new movement from
            var enumerator = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enumerator.moveNext())
            {
                InventProductDimension dimension = enumerator.current();
                inventDim.(dimension.parmInventDimFieldId()) = dimension.parmAlternativeValueForItem(_inventTable);
            }

            SalesLine salesLine;
            salesLine.ItemId = _inventTable.AltItemId;
            salesLine.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

            movement = InventMovement::constructNoThrow(salesLine);
        }

        super(_inventDimGroupSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>initQueryInventSum</c> method to avoid obtaining the <c>inventSum_DS</c> dataset
    ///    that is linked to the wrong table.
    /// </summary>
    /// <param name="_inventSum_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventSum</c> table.
    /// </param>
    /// <remarks>
    ///    The only thing from the overridden method that is used is the addition of the <c>SUM</c> fields to
    ///    the <c>inventSum_DS</c> dataset.
    /// </remarks>
    public void initQueryInventSum(FormDataSource _inventSum_DS)
    {
        InventSum::queryAddSumFields(_inventSum_DS.query().dataSourceTable(tableNum(InventSum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Limits the <c>inventSum_DS</c> dataset to the specific alternative item ID before the <c>super</c>
    ///    method is called.
    /// </summary>
    /// <param name="_inventSum_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDim_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventDim</c> table.
    /// </param>
    public void modifyQuery(
        FormDataSource  _inventSum_DS,
        FormDataSource  _inventDim_DS)
    {
        //Limit to only alternative item
        QueryBuildDataSource dsInventSumAltItem = _inventSum_DS.query().dataSourceName(_inventSum_DS.name());
        dsInventSumAltItem.clearDynalinks();
        dsInventSumAltItem.clearRanges();
        dsInventSumAltItem.addRange(fieldNum(InventSum,ItemId)).value(queryValue(movement.itemId()));

        super(_inventSum_DS, _inventDim_DS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_OnHand_AltItem construct()
    {
        return new InventDimCtrl_Frm_OnHand_AltItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormValidDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form that will be controlled by this class.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_OnHand_AltItem newFromFormValidDataSources(
        FormRun     _formRun,
        Set         _validDataSources)
    {
        InventDimCtrl_Frm_OnHand_AltItem    inventDimCtrl = InventDimCtrl_Frm_OnHand_AltItem::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmValidDataSources(_validDataSources);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
