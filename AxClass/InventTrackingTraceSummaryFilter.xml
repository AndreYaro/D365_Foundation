<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingTraceSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingTraceSummaryFilter</c> provides filtering for records related to a inventory tracing hierarchy.
/// </summary>
abstract class InventTrackingTraceSummaryFilter extends InventTrackingTraceFilter
{
    #define.CurrentVersion(1)

    InventTrackingDimTracingCriteria    tracingCriteria;
    InventTrackingDimTracingHierarchy   tracingHierarchy;

    Set                                 seenTransRecords;
    Set                                 filteredTransKeys;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the suffix string to add to the form caption.
    /// </summary>
    /// <returns>
    ///    The suffix string to add to the form caption.
    /// </returns>
    protected str captionSuffix()
    {
        return tracingCriteria.captionSuffix();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFilterTable</Name>
				<Source><![CDATA[
    protected void fillFilterTable()
    {
        this.loadUniqueKeysFromNodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        if (tracingCriteria)
        {
            formRun.design().caption(formRun.design().caption() + #CaptionSeparator + this.captionSuffix());
            formRun.design().useCaptionFromMenuItem(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInFilterDTO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicating if the transaction should be included in the filter.
    /// </summary>
    /// <param name="_inventTransDTO">
    ///    The information about an inventory transaction from the item tracing tree.
    /// </param>
    /// <param name="_inventTransOriginDTO">
    ///    The information about the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    true if the transaction should be included in the filter; otherwise, false.
    /// </returns>
    protected abstract boolean includeInFilterDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        seenTransRecords    = new Set(Types::String);
        filteredTransKeys   = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the key data into the filter table.
    /// </summary>
    /// <param name="_inventTransDTO">
    ///    The information about an inventory transaction from the item tracing tree.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The record from the <c>InventTransOrigin</c> table related to <paramref name="_inventTrans"/>.
    /// </param>
    /// <remarks>
    ///    Sub-classes must use the <c>filterTmp</c> object variable for creating and inserting the record.
    /// </remarks>
    protected abstract void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadUniqueKeysFromNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the unique keys for the type of summary from the nodes in the tracing hierarhcy.
    /// </summary>
    private void loadUniqueKeysFromNodes()
    {
        Set nodeSet = tracingHierarchy.parmInventTrackingDimTracingRelations().inventDimTrackingInventTransNodes();
        SetEnumerator nodeEnumerator = nodeSet.getEnumerator();
        while (nodeEnumerator.moveNext())
        {
            InventDimTrackingInventTransNode inventDimTrackingInventTransNode = nodeEnumerator.current();
            InventTrackingDimTracingInventTransDTO inventTransDTO = InventDimTrackingInventTransNode.parmInventTransDTO();
            if (inventTransDTO && inventTransDTO.recId())
            {
                str nodeKey = int642str(inventTransDTO.recId());
                if (!seenTransRecords.in(nodeKey))
                {
                    seenTransRecords.add(nodeKey);
                    InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO = InventDimTrackingInventTransNode.parmInventTransOriginDTO();

                    if (this.includeInFilterDTO(inventTransDTO, inventTransOriginDTO))
                    {
                        str transKey = this.transKeyDTO(inventTransDTO, inventTransOriginDTO);
                        if (!filteredTransKeys.in(transKey))
                        {
                            filteredTransKeys.add(transKey);
                            this.insertKeyDataDTO(inventTransDTO, inventTransOriginDTO);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container   packedCriteria;

        if (tracingCriteria)
        {
            packedCriteria = tracingCriteria.pack();
        }

        return [
            #currentVersion,
            tracingHierarchy.parmTraceDirection(),
            tracingHierarchy.parmInventTrackingDimTracingRelations().pack(),
            packedCriteria];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTracingCriteria</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingCriteria parmTracingCriteria(InventTrackingDimTracingCriteria _tracingCriteria = tracingCriteria)
    {
        tracingCriteria = _tracingCriteria;

        return tracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTracingHierarchy</Name>
				<Source><![CDATA[
    public InventTrackingDimTracingHierarchy parmTracingHierarchy(InventTrackingDimTracingHierarchy _tracingHierarchy = tracingHierarchy)
    {
        tracingHierarchy = _tracingHierarchy;

        return tracingHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a unique string key for the filtered data from an inventory transaction in the tracing hierarchy.
    /// </summary>
    /// <param name="_inventTransDTO">
    ///    The information about an inventory transaction from the item tracing tree.
    /// </param>
    /// <param name="_inventTransOriginDTO">
    ///    The information about the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    A string key value.
    /// </returns>
    protected abstract str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        ForwardBackward                     traceDirection;
        container                           packedRelations;
        container                           packedCriteria;

        switch (version)
        {
            case #CurrentVersion:
                [version, traceDirection, packedRelations, packedCriteria] = _packed;

                if (conLen(packedCriteria) > 0)
                {
                    this.parmTracingCriteria(InventTrackingDimTracingCriteria::newFromPacked(packedCriteria));
                }

                InventTrackingDimTracingHierarchy hierarchy = InventTrackingDimTracingHierarchy::construct();
                hierarchy.parmTraceDirection(traceDirection);
                hierarchy.parmInventTrackingDimTracingRelations(InventTrackingDimTracingRelations::create(packedRelations));
                this.parmTracingHierarchy(hierarchy);

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
