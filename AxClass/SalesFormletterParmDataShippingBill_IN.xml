<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataShippingBill_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormletterParmDataShippingBill_IN</c> class if the sales form letter parm data shipping bill.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::ShippingBill_IN)]
class SalesFormletterParmDataShippingBill_IN
    extends SalesFormletterParmData
{
    RecordInsertList        recordInsertParmSubLine;
    SalesQty                newPostingSalesQty;
    InventQty               newPostingInventQty;

    PaymentStub             giroType;
    Map                     salesParmSubTableMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupChooseLines_IN</Name>
				<Source><![CDATA[
    private void cleanupChooseLines_IN(SalesParmTable _salesParmTable)
    {
        ttsbegin;

        SalesParmTable salesParmTable = _salesParmTable;
        CustomsExportOrderLine_IN   customsExportOrderLineLoc;
        SalesParmTable              salesParmTableLoc;
        SalesParmLine               salesParmLineLoc;

        select count(RecId) from customsExportOrderLineLoc
            where customsExportOrderLineLoc.SalesId == salesParmTable.SalesId;

        if (customsExportOrderLineLoc.RecId > 1)
        {
            delete_from salesParmTableLoc
                where salesParmTableLoc.SalesId         == salesParmTable.SalesId               &&
                      salesParmTableLoc.ParmJobStatus   == ParmJobStatus::ContainErrors;

            while select forupdate salesParmTableLoc
                where salesParmTableLoc.SalesId         == salesParmTable.SalesId               &&
                      salesParmTableLoc.Ordering        == DocumentStatus::Invoice
            {
                delete_from salesParmLineLoc
                    where salesParmLineLoc.ParmId      == salesParmTableLoc.ParmId;
                salesParmTableLoc.delete();
            }

            select firstonly salesParmTableLoc
                where salesParmTableLoc.SalesId == salesParmTable.SalesId;
            salesParmLineLoc.clear();

            while select salesParmLineLoc
                where salesParmLineLoc.OrigSalesId == salesParmTable.SalesId                    &&
                      salesParmLineLoc.TableRefId  != salesParmTable.ParmId
            {
                salesParmLineLoc.selectForUpdate(true);
                salesParmLineLoc.TableRefId = salesParmTable.TableRefId;
                salesParmLineLoc.update();
            }

            salesParmTableLoc.clear();
            
            select salesParmLineLoc
                where salesParmLineLoc.OrigSalesId == salesParmTable.SalesId                    &&
                      salesParmLineLoc.TableRefId  == salesParmTable.TableRefId;

            delete_from salesParmTableLoc
                where salesParmTableLoc.TableRefId != salesParmLineLoc.TableRefId               &&
                      salesParmTableLoc.SalesId  == salesParmLineLoc.OrigSalesId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common         _salesLineOrig,
                                     TradeLineRefId _tableRefId,
                                     InventOwnerId_RU _inventOwnerId = '',
                                     boolean _shipAlone = false)
    {
        SalesLine       salesLineOrig = _salesLineOrig as SalesLine;
        SalesParmLine   localSalesParmLine;
        boolean         lineCreated = false;

        if (_salesLineOrig.RecId && this.mayJournalTransBePosted(_salesLineOrig))
        {
            localSalesParmLine.clear();
            [localSalesParmLine.DeliverNow, localSalesParmLine.RemainBefore      , localSalesParmLine.RemainAfter]        = this.qtySales  (_salesLineOrig, this.interCompanyParmLineQty(_salesLineOrig));
            [localSalesParmLine.InventNow , localSalesParmLine.RemainBeforeInvent, localSalesParmLine.RemainAfterInvent]  = this.qtyInvent (_salesLineOrig, this.interCompanyParmLineQty(_salesLineOrig, true));

            if (localSalesParmLine.DeliverNow)
            {
                localSalesParmLine.ParmId     = this.parmId();
                localSalesParmLine.initFromSalesLine(salesLineOrig);
                localSalesParmLine.setLineAmount(salesLineOrig);
                localSalesParmLine.calcPackingUnitQty();
                localSalesParmLine.TableRefId = _tableRefId;
                if (SalesTable::find(salesLineOrig.SalesId).CustomsExportOrder_IN == NoYes::Yes)
                {
                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        SalesParmLine_IN salesParmLineIN = localSalesParmLine.salesParmLine_IN();
                        CustomsExportOrderLine_IN custExportOrderLine = CustomsExportOrderLine_IN::findBySalesInvoiceIdTrans(localSalesParmLine.OrigSalesId, localSalesParmLine.salesParmTable().CustomsExportInvoiceId_IN, localSalesParmLine.InventTransId);
                        CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(custExportOrderLine.CustInvoiceTransRecId);
                        salesParmLineIN.AssessableValueTransactionCurrency = localSalesParmLine.getMiscChargesAmount_IN(custInvoiceTrans.TableId, custInvoiceTrans.RecId, this.parmDocumentStatus());
                        localSalesParmLine.packSalesParmLine_IN(salesParmLineIN);
                    }
                    else
                    {
                        this.updateAssessableValueForExportOrderLine(salesLineOrig, localSalesParmLine);
                    }
                }
                localSalesParmLine.insert();

                lineCreated = true;
                this.allowCreateParmTable(true);
                #if.never //#Speedtest
                if (speedExecute_Sales)
                {
                    speedExecute_Sales.timing(SpeedSalesTiming::ParmLineInsert, strfmt(salesParmLine.parmId, salesParmLine.itemId));
                }
                #endif
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromExportOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates parm line from export order line.
    /// </summary>
    /// <param name="_exportOrderLineOrig">
    /// The export order line original.
    /// </param>
    /// <param name="_tableRef">
    /// The trade line reference id.
    /// </param>
    /// <returns>
    /// Returns true if the creation succeed.
    /// </returns>
    protected boolean  createParmLineFromExportOrderLine(CustomsExportOrderLine_IN      _exportOrderLineOrig,
                                                         TradeLineRefId                 _tableRef   = '')
    {
        SalesParmLine       newSalesParmLine;
        boolean             lineCreated = false;

        if (_exportOrderLineOrig.RecId)
        {
            newSalesParmLine.clear();
            [newSalesParmLine.DeliverNow, newSalesParmLine.RemainBefore, newSalesParmLine.RemainAfter] = this.qtySales  (_exportOrderLineOrig, naReal());

            if (newSalesParmLine.DeliverNow)
            {
                SalesLine salesLineLoc = SalesLine::findInventTransId(_exportOrderLineOrig.InventTransId);
                newSalesParmLine.ParmId     = salesParmUpdate.ParmId;
                newSalesParmLine.initFromSalesLine_IN(_exportOrderLineOrig);
                newSalesParmLine.setLineAmount(salesLineLoc);
                newSalesParmLine.calcPackingUnitQty();
                newSalesParmLine.TableRefId = _tableRef;
                if (SalesTable::find(salesLineLoc.SalesId).CustomsExportOrder_IN == NoYes::Yes)
                {
                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(_exportOrderLineOrig.CustInvoiceTransRecId);
                        SalesParmLine_IN salesParmLine_IN = newSalesParmLine.salesParmLine_IN();
                        salesParmLine_IN.AssessableValueTransactionCurrency = newSalesParmLine.getMiscChargesAmount_IN(custInvoiceTrans.TableId, custInvoiceTrans.RecId, this.parmDocumentStatus());
                        newSalesParmLine.packSalesParmLine_IN(salesParmLine_IN);
                    }
                    else
                    {
                        this.updateAssessableValueForExportOrderLine(salesLineLoc, newSalesParmLine);
                    }
                }
                this.insertParmLine(newSalesParmLine);

                lineCreated = true;

                this.allowCreateParmTable(true);

                if (newSalesParmLine.DeliverNow > 0)
                {
                    this.insertEximSalesParmLine(_exportOrderLineOrig.CustInvoiceTransRecId, newSalesParmLine.RecId);
                }

                #if.never //#Speedtest
                if (speedExecute_Sales)
                {
                    speedExecute_Sales.timing(SpeedSalesTiming::ParmLineInsert, strfmt(salesParmLine.parmId, salesParmLine.itemId));
                }
                #endif
            }
        }
        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTableFromExportOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates parm table from export order table.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parm table.
    /// </param>
    /// <param name="_salesTable">
    /// The sales table.
    /// </param>
    /// <param name="_customsExportOrderTable">
    /// The customs export order table.
    /// </param>
    /// <param name="_salesName">
    /// The sales name.
    /// </param>
    /// <param name="_deliveryName">
    /// The delivery name.
    /// </param>
    /// <param name="_deliveryAddress">
    /// The delivery address.
    /// </param>
    /// <param name="_dlvMode">
    /// The cust dlv mode id.
    /// </param>
    void  createParmTableFromExportOrderTable(SalesParmTable                _salesParmTable,
                                              SalesTable                    _salesTable,
                                              CustomsExportOrderTable_IN    _customsExportOrderTable,
                                              Name                          _salesName          = _salesTable.SalesName,
                                              CustName                      _deliveryName       = _salesTable.DeliveryName,
                                              LogisticsPostalAddressRecId   _deliveryAddress    = _salesTable.DeliveryPostalAddress,
                                              CustDlvModeId                 _dlvMode            = _salesTable.DlvMode)
    {
        _salesParmTable.initFromSalesTable(_salesTable);

        _salesParmTable.SalesName                   = _salesName;
        _salesParmTable.DeliveryName                = _deliveryName;
        _salesParmTable.DeliveryPostalAddress       = _deliveryAddress;
        _salesParmTable.DlvMode                     = _dlvMode;
        _salesParmTable.Transdate                   = this.parmTransDate();
        _salesParmTable.ParmId                      = salesParmUpdate.ParmId;
        _salesParmTable.Ordering                    = this.parmDocumentStatus();
        _salesParmTable.BatchAdministration         = multiForm;
        _salesParmTable.ParmJobStatus               = ParmJobStatus::Waiting;
        _salesParmTable.CustBankAccountId           = this.custBankAccountId(_salesTable);
        _salesParmTable.CustomsExportInvoiceId_IN   = _customsExportOrderTable.InvoiceId;
        _salesParmTable.EximExportDateTime_IN      = DateTimeUtil::newDateTime(this.parmTransDate(), 0, DateTimeUtil::getUserPreferredTimeZone());

        if (_salesTable.GiroType != giroType)
        {
            giroAllSame = false;
        }

        this.insertParmTable(_salesParmTable);

        this.allowCreateParmTable(this.parmAllowEmptyParmTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccountInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the query contains cust account information.
    /// </summary>
    /// <returns>
    /// Returns true if the query contains cust account information.
    /// </returns>
    protected boolean custAccountInQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doChooseLines_IN</Name>
				<Source><![CDATA[
    // Method added to override standard doChooseLines functionality for ShippingBill Documents.
    protected void doChooseLines_IN(boolean _append = false)
    {
        SalesTable                  localSalesTable;
        SalesParmTable              salesParmTable;
        CustomsExportOrderTable_IN  localCustomsExportOrderTable;

        if (!_append && !this.allowChooseLines())
            return;

        this.initChooseLines();

        this.processAdditional();

        this.initRecordLists();

        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        chooseLines.reset();

        while (this.chooseLinesNext())
        {
            progressTotal++;

            if (chooseLines.changed(tablenum(CustomsExportOrderTable_IN)))
            {
                localCustomsExportOrderTable = chooseLines.get(tablenum(CustomsExportOrderTable_IN));
                localSalesTable = SalesTable::find(localCustomsExportOrderTable.SalesId);
            }
            CustomsExportOrderLine_IN localCustomsExportOrderLine = chooseLines.get(tablenum(CustomsExportOrderLine_IN));
            SalesLine localSalesLine = SalesLine::findInventTransId(localCustomsExportOrderLine.InventTransId);

            if (!parmTableMap.exists(this.parmTableMapKey(localSalesLine)))
            {
                salesParmTable.clear();
                salesParmTable.TableRefId = this.getTableRefId(localSalesLine);
            }

            boolean parmLineCreated = this.createParmLineFromExportOrderLine(localCustomsExportOrderLine, salesParmTable.TableRefId);

            if ((parmLineCreated
                || this.parmAllowEmptyParmTable())
                && !parmTableMap.exists(this.parmTableMapKey(localSalesLine))
                // Identifies summary updated SO.
                && (localCustomsExportOrderLine.SalesId == localSalesLine.SalesId))
            {
                this.createParmTableFromExportOrderTable(salesParmTable, localSalesTable, localCustomsExportOrderTable);
            }
        }

        this.insertRecordLists();

        if (this.lateSelection() && this.parmExecuteLateSelection())
        {
            if (numberOfLines < 1)
            {
                checkFailed("@SYS26185");
            }
        }
        this.cleanupChooseLines_IN(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEximSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into exim sales parm line.
    /// </summary>
    /// <param name="_custInvoiceTransRecId">
    /// The reference rec id of the cust invoice transaction.
    /// </param>
    /// <param name="_salesParmLineRecId">
    /// The sales parm line rec id.
    /// </param>
    protected void insertEximSalesParmLine(
        RefRecId              _custInvoiceTransRecId,
        SalesParmLineRefRecId _salesParmLineRecId)
    {
        EximCustInvoiceTrans_IN eximCustInvoiceTrans = EximCustInvoiceTrans_IN::findByCustInvoiceTransRecId(_custInvoiceTransRecId);
        EximSalesParmLine_IN eximSalesParmLine;

        eximSalesParmLine.SalesParmLineRecId     = _salesParmLineRecId;
        eximSalesParmLine.EximPorts              = eximCustInvoiceTrans.EximPorts;
        eximSalesParmLine.EximProductGroupTable  = eximCustInvoiceTrans.EximProductGroupTable;

        if (TaxParameters::isEximIncentiveSchemEnable_IN())
        {
            eximSalesParmLine.CustomsTariffCodeTable = eximCustInvoiceTrans.CustomsTariffCodeTable;

            if (EximParameters_IN::find().ActivateDEPB)
            {
                eximSalesParmLine.ApplyDEPB          = eximCustInvoiceTrans.ApplyDEPB;
                eximSalesParmLine.MarketValue        = eximCustInvoiceTrans.MarketValue;
                eximSalesParmLine.MarketValuePct     = EximParameters_IN::find().depbMarketValuePct;
                eximSalesParmLine.AllowedMarketValue = (eximSalesParmLine.MarketValue * eximSalesParmLine.MarketValuePct) / 100;
            }

            if (EximParameters_IN::find().ActivateDutyDrawback)
            {
                eximSalesParmLine.dbkCenvatStatus = eximCustInvoiceTrans.dbkCenvatStatus;
                eximSalesParmLine.dbkRateType     = eximCustInvoiceTrans.dbkRateType;
                eximSalesParmLine.dbkPercent      = eximCustInvoiceTrans.dbkPercent;
            }
        }

        eximSalesParmLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts parm lines.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parm table.
    /// </param>
    //No violation of naming convention, as this is a localization specific overridden method declared in parent class.
    public void insertParmLines_IN(SalesParmTable _salesParmTable)
    {
        TradeLineRefId              tableRef = '';
        boolean                     mayJournalBePosted  = false;
        boolean                     salesParmLinesExist;

        #Query

        chooseLines = new SysQueryRun(querystr(CustomsExportOrderUpdate_IN));
        chooseLines.query().dataSourceTable(tablenum(CustomsExportOrderTable_IN)).addRange(fieldnum(CustomsExportOrderTable_IN, SalesId)).value(queryValue(_salesParmTable.SalesId));
        chooseLines.query().dataSourceTable(tablenum(CustomsExportOrderTable_IN)).addRange(fieldnum(CustomsExportOrderTable_IN, InvoiceId)).value(queryValue(_salesParmTable.CustomsExportInvoiceId_IN));
        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
        if (_salesParmTable.RecId)
        {
            salesParmLinesExist = (select firstonly RecId from salesParmLine
                                    where salesParmLine.ParmId == parmId).RecId != 0;
        }

        while (chooseLines.next())
        {
            if (chooseLines.changed(tablenum(CustomsExportOrderTable_IN)))
            {
                CustomsExportOrderTable_IN customsExportOrderTableLoc = chooseLines.get(tablenum(CustomsExportOrderTable_IN));
                SalesTable localSalesTable = SalesTable::find(customsExportOrderTableLoc.SalesId);
            }

            CustomsExportOrderLine_IN customsExportOrderLineLoc = chooseLines.get(tablenum(CustomsExportOrderLine_IN));
            SalesLine localSalesLine = SalesLine::findInventTransId(customsExportOrderLineLoc.InventTransId);

            if (!salesParmLinesExist)
            {
                tableRef = _salesParmTable.TableRefId;

                if (!tableRef)
                {
                    tableRef = this.getTableRefId(localSalesLine);
                }

                this.createParmLineFromExportOrderLine(customsExportOrderLineLoc, tableRef);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the query contains the invoice account information.
    /// </summary>
    /// <returns>
    /// Returns true if the query contains the invoice account information.
    /// </returns>
    protected boolean  invoiceAccountInQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common _salesTable)
    {
        SalesTable localSalesTable = _salesTable as SalesTable;
        boolean ok = super(_salesTable);

        return ok && localSalesTable.mayInvoiceBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalTransBePosted(Common _salesLine)
    {
        SalesLine   salesLine = _salesLine as SalesLine;

        if (salesLine.isInterCompanyOrder() && salesLine.isCategoryBased())
        {
            return false;
        }

        boolean ok = super(_salesLine);

        if (ok)
        {
            ok = salesLine.mayInvoiceBeUpdated();
        }

        if (ok)
        {
            if (!interCompanyParmId
            &&  salesLine.InventRefType == InventRefType::Purch
            &&  salesLine.InventRefId
            &&  salesLine.salesTable().InterCompanyDirectDelivery)
            {
                PurchTable purchTable = PurchTable::find(salesLine.InventRefId);
                if (purchTable.InterCompanyOrder
                &&  purchTable.interCompanyEndpointActionPolicy().PostSalesInvoice)
                {
                    ok = checkFailed(strfmt("@SYS101046",salesLine.ItemId));
                }
            }

            if (salesLine.SalesType == SalesType::ReturnItem)
            {
                ok = ok && salesLine.ReturnStatus == ReturnStatusLine::Registered || salesLine.ReturnStatus == ReturnStatusLine::Received;
                ok = ok && !salesLine.isReturnReservationLine();
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return querystr(CustomsExportOrderUpdate_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    protected void selectChooseLines(boolean  _append = false)
    {
        this.doChooseLines_IN(_append);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    protected tableId sourceLineTableId()
    {
        return tablenum(CustomsExportOrderLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    protected tableId sourceTableTableId()
    {
        return tablenum(CustomsExportOrderTable_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        #Query

        if (this.useLateSelectionQuery())
        {
            chooseLines = this.lateSelectionQuery();
            return;
        }

        chooseLines = new SysQueryRun(querystr(CustomsExportOrderUpdate_IN));
        setprefix("@SYS25781");

        container salesRecordContainer = this.parmDatasourceRecordsPacked();
        if (salesRecordContainer)
        {
            Map mapSalesRecord = Map::create(salesRecordContainer);
            MapEnumerator mapSalesRecordEnumerator = mapSalesRecord.getEnumerator();

            while (mapSalesRecordEnumerator.moveNext())
            {
                CustomsExportOrderTable_IN localCustomsExportOrderTable = mapSalesRecordEnumerator.currentValue();

                chooseLines.query().dataSourceTable(tablenum(CustomsExportOrderTable_IN)).addRange(fieldnum(CustomsExportOrderTable_IN, SalesId)).value(queryValue(localCustomsExportOrderTable.SalesId));
                chooseLines.query().dataSourceTable(tablenum(CustomsExportOrderTable_IN)).addRange(fieldnum(CustomsExportOrderTable_IN, InvoiceId)).value(queryValue(localCustomsExportOrderTable.InvoiceId));
            }
        }
        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServerShippingBill</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize the SalesFormletterParmDataShippingBill_IN class and create the query for ShippingBill posting.
    /// </summary>
    /// <param name="_salseFormletterShipBillContractPacked">
    ///    The _salseFormletterShipBillContractPacked packed contract class for posting ShippingBill.
    /// </param>
    /// <param name="_append">
    ///    The _append to the existing query.
    /// </param>
    /// <param name="_salesParmTablePacked">
    ///    The _salesParmTablePacked container of salesParmTable.
    /// </param>
    /// <param name="_reuseParmUpdate">
    ///    The _reuseParmUpdate to resue parmUpdate table.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    ///    The _onlyCreateParmUpdate to create only parmUpdate table.
    /// </param>
    /// <param name="_executeLateSelection">
    ///    The _executeLateSelection if it is late selection.
    /// </param>
    /// <returns>
    ///    container packed with the info from contract class.
    /// </returns>
    static public container chooseLinesServerShippingBill(
        container        _salseFormletterShipBillContractPacked,
        boolean          _append,
        Container        _salesParmTablePacked,
        boolean          _reuseParmUpdate       = false,
        boolean          _onlyCreateParmUpdate  = false,
        boolean          _executeLateSelection  = false)
    {
        SalesFormletterParmDataShippingBill_IN salesFormletterParmDataShipBill = SalesFormletterParmData::newChooseLines(
                                                                                                           _salseFormletterShipBillContractPacked,
                                                                                                           _reuseParmUpdate,
                                                                                                           _onlyCreateParmUpdate,
                                                                                                           _executeLateSelection);
        SalesParmTable  salesParmTable;

        if (_salesParmTablePacked)
        {
            salesParmTable = conPeek(_salesParmTablePacked, 1);
        }
        salesFormletterParmDataShipBill.createData(_append);

        salesFormletterParmDataShipBill.insertParmLines_IN(salesParmTable);

        return salesFormletterParmDataShipBill.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValueForExportOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Assessable Value to SalesParmLine_IN from export order line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales order line.
    /// </param>
    /// <param name="_salesParmLine">
    /// The sales order parm line.
    /// </param>
    protected void updateAssessableValueForExportOrderLine(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        if (SalesTable::find(_salesLine.SalesId).CustomsExportOrder_IN == NoYes::Yes)
        {
            RealBase factor = _salesLine.salesLine_IN().AssessableValueTransactionCurrency / _salesLine.SalesQty;

            SalesParmLine_IN salesParmLineIN = _salesParmLine.salesParmLine_IN();
            salesParmLineIN.AssessableValueTransactionCurrency = factor * _salesParmLine.DeliverNow;

            _salesParmLine.packSalesParmLine_IN(salesParmLineIN);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>