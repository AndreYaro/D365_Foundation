<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25CorrectionJournalCreate_ProfitTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The class <c>RTax25CorrectionJournalCreate_ProfitTax</c> used to determine which registers must be recalculated, starting from which period.
/// Also class used to created corrective journals for profit tax registers.
/// </summary>
class RTax25CorrectionJournalCreate_ProfitTax extends RTax25CorrectionJournalCreate
{
    TmpRTax25RegisterDependences    tmpRegisterDependences;
    Map                             correctionMap;
    RTax25PeriodType                reportingPeriodType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRegisterToCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method adds register to corrected registers set. The method is used to impelement recursion on registers tree.
    /// </summary>
    /// <param name="_registerSet">
    ///  The <c>Set</c> object, which contains corrected registers.
    /// </param>
    /// <param name="_registerId">
    ///  Id of register which must be added.
    /// </param>
    private void addRegisterToCorrection(Set _registerSet, RTax25RegisterId _registerId)
    {
        TmpRTax25RegisterDependences    regDepLocal;

        _registerSet.add(_registerId);

        regDepLocal.setTmpData(tmpRegisterDependences);

        while select regDepLocal
            where regDepLocal.ChildRegisterId == _registerId
        {
            this.addRegisterToCorrection(_registerSet, regDepLocal.ParentRegisterId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates <c>Map</c> object, which contains periods(end dates of periods) and <c>Set</c> object with registers which must be corrected on this date.
    /// </summary>
    /// <param name="_fromDateOrig">
    ///  Starting date for accounting date.
    /// </param>
    /// <param name="_toDateOrig">
    ///  Ending date for accounting date.
    /// </param>
    /// <param name="_toDateCorr">
    ///  Ending date for reporting date.
    /// </param>
    /// <remarks>
    ///  Only thouse registers checked, which are based on transactions. The rest registers will be added to recalculation by dependency.
    /// </remarks>
    private void calcCorrectionMap(FromDate _fromDateOrig, ToDate _toDateOrig, ToDate _toDateCorr = dateNull())
    {
        Set                         registerSet;
        RTax25RegisterTable         rTax25RegisterTable;
        RTax25RegCalc               rTax25RegCalc;
        ToDate                      toDateCorr = _toDateCorr ? _toDateCorr : _fromDateOrig - 1;
        ReportingDate_RU            correctedPeriodDate, firstCorrPeriodDate;
        Map                         tmpMap;

        if (correctionMap)
        {
            return;
        }

        tmpMap = new Map(Types::Date, Types::Class);

        this.fillTmpRegisterDependencies();

        while select RegisterType, RegisterId from rTax25RegisterTable
            where rTax25RegisterTable.RegisterType == RTax25RegisterType::AssetDeprBonusRecovery        ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::AssetsCost                    ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::AssetsDisposal                ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::Deferrals                     ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::Income                        ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::IntangibleAssetInfo           ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::IntangibleDepreciation        ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::IntangibleGroupDepreciation   ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::InventReceipt                 ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::NonInventIssue                ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::NonInventReceipt              ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::NotInfluenceIncome            ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::OutlayReal                    ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::OutlayRealTax                 ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::PaymentConsumption            ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::OutlayUnrealOther             ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::PaymentReceipt                ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::StdCurrentExpense             ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::StdCurrentRate                ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::StdDeferralsRate              ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TangibleAssetInfo             ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TangibleDepreciation          ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TangibleGroupDepreciation     ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TaxRemainGoods                ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TemporaryDifferences          ||
                  rTax25RegisterTable.RegisterType == RTax25RegisterType::TemporaryDifferencesByBalance
        {
            rTax25RegCalc = RTax25RegCalc::newRegisterType(rTax25RegisterTable.RegisterType);
            correctedPeriodDate = rTax25RegCalc.correctedPeriodDate(_fromDateOrig, _toDateOrig, toDateCorr);

            if (correctedPeriodDate)
            {
                if (year(correctedPeriodDate) < year(_fromDateOrig))
                {
                    correctedPeriodDate = dateEndYr(correctedPeriodDate);
                }

                if (!firstCorrPeriodDate || firstCorrPeriodDate > correctedPeriodDate)
                {
                    firstCorrPeriodDate = correctedPeriodDate;
                }

                if (tmpMap.exists(correctedPeriodDate))
                {
                    registerSet = tmpMap.lookup(correctedPeriodDate);
                }
                else
                {
                    registerSet = new Set(Types::String);
                }

                this.addRegisterToCorrection(registerSet, rTax25RegisterTable.RegisterId);

                tmpMap.insert(correctedPeriodDate,  registerSet);
            }
        }

        registerSet   = new Set(Types::String);
        correctionMap = new Map(Types::Date, Types::Class);

        if (!firstCorrPeriodDate)
        {
            firstCorrPeriodDate = dateMax();
        }

        for (correctedPeriodDate = mkDate(31, 12, year(firstCorrPeriodDate));
             correctedPeriodDate < _toDateOrig;
             correctedPeriodDate = nextYr(correctedPeriodDate))
        {
            if (tmpMap.exists(correctedPeriodDate))
            {
                registerSet = Set::union(registerSet, tmpMap.lookup(correctedPeriodDate));
            }
            correctionMap.insert(correctedPeriodDate, registerSet);
        }

        for (correctedPeriodDate = max(firstCorrPeriodDate, mkDate(31, 03, year(_toDateOrig)));
             correctedPeriodDate < _toDateOrig;
             correctedPeriodDate = endmth(nextQtr(correctedPeriodDate)))
        {
            if (tmpMap.exists(correctedPeriodDate))
            {
                registerSet = Set::union(registerSet, tmpMap.lookup(correctedPeriodDate));
            }
            correctionMap.insert(correctedPeriodDate, registerSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrectionJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates corrective tax registers based on previously calculated dates.
    /// </summary>
    public void createCorrectionJournals()
    {
        SetEnumerator               dateSetEnumerator;
        RTax25RegisterJournalTable  correctedRegisterJournalTable, correctiveRegisterJournalTable;
        NumberSeq                   numberSeq;

        void createCorrectiveJournal()
        {
            correctiveRegisterJournalTable.data(correctedRegisterJournalTable);

            correctiveRegisterJournalTable.JournalNum          = numberSeq.num();
            correctiveRegisterJournalTable.Name                = strfmt("@SYP4860764", correctedRegisterJournalTable.PeriodNum, correctedRegisterJournalTable.PeriodType, correctedRegisterJournalTable.FiscalYear);
            correctiveRegisterJournalTable.CorrectedRecId      = correctedRegisterJournalTable.RecId;
            correctiveRegisterJournalTable.SourceRecId         = rTax25RegisterJournalTable.RecId;
            correctiveRegisterJournalTable.Version             = RTax25RegisterJournalTable::lastVersion(correctedRegisterJournalTable.RecId) + 1;
            correctiveRegisterJournalTable.CalculationDate     = rTax25RegisterJournalTable.EndDate;
            correctiveRegisterJournalTable.Accepted            = RTax25CorrectionAccepted::NotProcessed;
            correctiveRegisterJournalTable.EnableCorrective    = NoYes::Yes;
            correctiveRegisterJournalTable.RegisterJournalType = rTax25RegisterJournalTable.RegisterJournalType;

            correctiveRegisterJournalTable.insert();

            info(strFmt("@SYP4860768", correctiveRegisterJournalTable.JournalNum), "", SysInfoAction_TableField::newBuffer(correctiveRegisterJournalTable));
        }

        this.calcCorrectionMap(dateStartQtr(rTax25RegisterJournalTable.EndDate), rTax25RegisterJournalTable.EndDate);

        dateSetEnumerator = correctionMap.keySet().getEnumerator();
        numberSeq = NumberSeq::newGetNum(RTax25Parameters::numRefRegisterJournalNum());

        //getting only earliest corrected date because all further register must be corrected
        if (dateSetEnumerator.moveNext())
        {
            while select correctedRegisterJournalTable
                where correctedRegisterJournalTable.EndDate    >= dateSetEnumerator.current()           &&
                      correctedRegisterJournalTable.Version    == 0                                     &&
                      correctedRegisterJournalTable.PeriodType == reportingPeriodType                   &&
                      correctedRegisterJournalTable.EndDate    <  rTax25RegisterJournalTable.EndDate    &&
                      correctedRegisterJournalTable.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType
            {
                createCorrectiveJournal();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRegistersToCorrect</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method is used to determine which registers must be recalculated for current journal.
    /// </summary>
    /// <returns>
    ///  <c>Set</c> object.
    /// </returns>
    protected Set determineRegistersToCorrect()
    {
        this.calcCorrectionMap(
            dateStartQtr(rTax25RegisterJournalTable.CalculationDate),
            rTax25RegisterJournalTable.CalculationDate,
            rTax25RegisterJournalTable.EndDate);

        if (correctionMap.exists(rTax25RegisterJournalTable.EndDate))
        {
            correctedRegistersSet = correctionMap.lookup(rTax25RegisterJournalTable.EndDate);
        }
        else
        {
            correctedRegistersSet = new Set(Types::String);
        }

        return correctedRegistersSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpRegisterDependencies</Name>
				<Source><![CDATA[
    private void fillTmpRegisterDependencies()
    {
        RTax25RegisterTable         rTax25RegisterTable;
        RTax25RegType               rTax25RegType;
        container                   childRegisters;
        int                         i;

        while select rTax25RegisterTable
        {
            rTax25RegType = RTax25RegType::construct(rTax25RegisterTable.RegisterType);

            childRegisters = rTax25RegType.childRegisters();

            for (i = 1; i <= conLen(childRegisters); i++)
            {
                tmpRegisterDependences.ParentRegisterId = rTax25RegisterTable.RegisterId;
                tmpRegisterDependences.ChildRegisterId  = RTax25RegisterTable::registerType2Id(conPeek(childRegisters, i));

                if (tmpRegisterDependences.ChildRegisterId)
                {
                    tmpRegisterDependences.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateCorrectionJournals</Name>
				<Source><![CDATA[
    public boolean mustCreateCorrectionJournals()
    {
        if (rTax25RegisterJournalTable.PeriodType != reportingPeriodType)
            return false;

        this.calcCorrectionMap(dateStartQtr(rTax25RegisterJournalTable.EndDate), rTax25RegisterJournalTable.EndDate);

        return correctionMap.elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates, if user must be prompted if he wants correction journals must be created. Always false in this case, that means that journals must be created anyway.
    /// </summary>
    /// <returns>
    ///  <c>Boolean</c> value.
    /// </returns>
    public boolean mustPrompt()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        reportingPeriodType = RTax25PeriodType::Quarter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>