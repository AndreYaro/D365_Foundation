<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleUpdatePeggingRequirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanRuleUpdatePeggingRequirement</c> class processes kanban status updates for event kanbans
/// that supply a given initial sales line or kanban.
/// </summary>
public class LeanRuleUpdatePeggingRequirement
{
    Common              common;
    boolean             silent;
    List                listKanbans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of kanban records that are pegged to the specified common record.
    /// </summary>
    /// <param name="_common">
    /// A common record.
    /// </param>
    /// <remarks>
    /// This method calls itself recursively until a <c>Kanban</c> record is encountered.At that point, the
    /// recursion stops; therefore, it will not include kanbans that are supplying other kanbans beyond the
    /// starting level.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildList(Common _common = common)
    {
        ReqPeggingTreeNode reqPeggingTreeNode = ReqPeggingTreeNode::newStandard(_common);
        List listChildren = reqPeggingTreeNode.listChildren();

        ListEnumerator le = listChildren.getEnumerator();
        while (le.moveNext())
        {
            Common commonChild = le.current();

            switch (commonChild.TableId)
            {
                case tableNum(Kanban):
                    Kanban kanban = commonChild as Kanban;
                    if (kanban)
                    {
                        if (this.mustIncludeKanban(kanban))
                        {
                            listKanbans.addEnd(kanban);
                        }
                    }
                    break;
                default:
                    this.buildList(commonChild);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        listKanbans = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified kanban must be included in the list for later processing.
    /// </summary>
    /// <param name="_kanban">
    /// A kanban.
    /// </param>
    /// <returns>
    /// true if the kanban must be included; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustIncludeKanban(Kanban _kanban)
    {
        return    _kanban.Status == LeanKanbanStatus::Received
               && _kanban.kanbanRule().HandlingUnitEmptyPolicy == LeanHandlingUnitEmptyPolicy::SourceRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common parmCommon(Common _common = common)
    {
        common = _common;
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSilent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmSilent(boolean _silent = silent)
    {
        silent = _silent;
        return silent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processList()
    {
        if (listKanbans.elements())
        {
            KanbanMultiKanban::newCallerListBuffer(LeanKanbanStatus::Emptied, listKanbans, silent, false).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a pegging requirement update.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        this.init();
        this.buildList();
        this.processList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanRuleUpdatePeggingRequirement construct()
    {
        return new LeanRuleUpdatePeggingRequirement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>LeanRuleUpdatePeggingRequirement</c> object.
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> record that is either a <c>Kanban</c> or a <c>SalesLine</c> record.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates whether to process silently.
    /// </param>
    /// <returns>
    /// A <c>LeanRuleUpdatePeggingRequirement</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The <c>Common</c> record type is not allowed.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleUpdatePeggingRequirement newStandard(
        Common           _common,
        boolean          _silent = true)
    {
        LeanRuleUpdatePeggingRequirement    leanRuleUpdatePeggingRequirement = LeanRuleUpdatePeggingRequirement::construct();

        if (   !(_common is SalesLine)
            && !(_common is Kanban))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        leanRuleUpdatePeggingRequirement.parmCommon(_common);
        leanRuleUpdatePeggingRequirement.parmSilent(_silent);

        return leanRuleUpdatePeggingRequirement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
