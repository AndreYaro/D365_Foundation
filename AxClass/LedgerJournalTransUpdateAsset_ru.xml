<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateAsset_ru</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerJournalTransUpdateAsset_ru extends LedgerJournalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetStandards</Name>
				<Source><![CDATA[
    private RAssetStandards assetStandards(LedgerJournalTrans  _ledgerJournalTrans)
    {
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);

        return ledgerJournalTrans_RAsset.StandardId ?
               RAssetStandards::find(_ledgerJournalTrans.parmAccount(), ledgerJournalTrans_RAsset.StandardId) :
               RAssetStandards::find(_ledgerJournalTrans.parmAccount(), RAssetParameters::standardIdDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check(LedgerJournalTrans         _ledgerJournalTrans,
                         boolean                    _checkNoSettlement = true,
                         LedgerVoucher              _ledgerVoucher = null,
                         LedgerPostingMessageLog    _ledgerPostingMessageCollection = null)
    {
        boolean                   ret = true;
        RAssetStandards           rAssetStandards;
        RAssetOperationType       rAssetOperationType;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);
      
        rAssetStandards = this.assetStandards(_ledgerJournalTrans);
      
        if (! rAssetStandards)
        {
            if (_ledgerPostingMessageCollection)
            {
                return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@GLS116650", _ledgerJournalTrans.parmAccount(), rAssetStandards.AssetStandardId));
            }
            else
            {
                return checkFailed(strFmt("@GLS116650", _ledgerJournalTrans.parmAccount(), rAssetStandards.AssetStandardId));
            }
        }
      
        rAssetOperationType = RAssetOperationType::construct(ledgerJournalTrans_RAsset.TransType,
                                                             _ledgerJournalTrans,
                                                             ledgerJournalTrans_RAsset.getTransDate(_ledgerJournalTrans),
                                                             rAssetStandards.AssetStandardId);
      
        if (rAssetOperationType.needCheck(ledgerJournalTrans_RAsset.ToFromRecId))
        {
            ttsbegin;
            ret = rAssetOperationType.check();
            ttscommit;
        }
      
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account of specified journal lines.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// The main account of specified journal lines.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);
        return ledgerJournalTrans_RAsset.DebLedgerDimension ?
            ledgerJournalTrans_RAsset.DebLedgerDimension :
            this.assetStandards(_ledgerJournalTrans).assetLedgerDimension(ledgerJournalTrans_RAsset.StandardId,
                                                                          _ledgerJournalTrans.PostingProfile,
                                                                          ledgerJournalTrans_RAsset.TransType);                                                      
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow(
        LedgerVoucher        _ledgerVoucher,
        LedgerPostingType    _posting,
        LedgerJournalTrans   _ledgerJournalTrans,
        LedgerJournalTrans   _originalLedgerJournalTrans,
        boolean              _interCompany = false,
        boolean              _reversalsMayExist = true,
        boolean              _isDueToDueFromAccount =  false
    )
    {
        LedgerPostingType             ledgerPostingType = LedgerPostingType::None;
        RAssetStandards               assetStandards    = this.assetStandards(_ledgerJournalTrans);
        LedgerVoucherTransObject      transObject;
        RAssetPost                    assetPost;
        LedgerJournalTrans_RAsset     ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);

        CurrencyExchangeHelper        currencyExhangeHelper;

        LedgerDimensionDefaultAccount defaultLedgerDimension;
        LedgerDimensionAccount        mergedLedgerDimension;

        if (this.check(_ledgerJournalTrans))
        {
            ledgerJournalTrans_RAsset.StandardId = assetStandards.AssetStandardId;

            if (ledgerJournalTrans_RAsset.CanDisposal || ! ledgerJournalTrans_RAsset.ToFromRecId)
            {
                assetPost = RAssetPost::construct(_ledgerJournalTrans,
                                                  _ledgerVoucher,
                                                  assetStandards.AssetStandardId);
                assetPost.run();
            }

            currencyExhangeHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::current(),
                ledgerJournalTrans_RAsset.getTransDate(_ledgerJournalTrans));

            currencyExhangeHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
            currencyExhangeHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);
            currencyExhangeHelper.parmReportingExchangeRate1(_ledgerJournalTrans.ReportingCurrencyExchRate);
            currencyExhangeHelper.parmReportingExchangeRate2(_ledgerJournalTrans.ReportingCurrencyExchRateSecondary);

            defaultLedgerDimension =  ledgerJournalTrans_RAsset.DebLedgerDimension ?
                                    ledgerJournalTrans_RAsset.DebLedgerDimension :
                                    assetStandards.assetLedgerDimension(ledgerJournalTrans_RAsset.StandardId,
                                                                        _ledgerJournalTrans.PostingProfile,
                                                                        ledgerJournalTrans_RAsset.TransType);

            mergedLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(defaultLedgerDimension, _ledgerJournalTrans.DefaultDimension);

            transObject =  LedgerVoucherTransObject::newTransactionAmountDefault(
                                _ledgerVoucher.findLedgerVoucherObject(),
                                LedgerJournalTransUpdateAsset_ru::getPostingType(ledgerJournalTrans_RAsset.PostValue,
                                                                                 ledgerJournalTrans_RAsset.TransType,
                                                                                 _ledgerJournalTrans.AmountCurDebit != 0),
                                mergedLedgerDimension,
                                _ledgerJournalTrans.CurrencyCode,
                                _ledgerJournalTrans.amount(),
                                currencyExhangeHelper);

            transObject.parmTaxParentReferenceTableId(_ledgerJournalTrans.TableId);
            transObject.parmTaxParentReferenceRecId(_ledgerJournalTrans.RecId);
            transObject.parmQuantity(_ledgerJournalTrans.Qty);
            transObject.parmTransTxt(_ledgerJournalTrans.Txt);
            transObject.parmReasonRefRecID(_ledgerJournalTrans.ReasonRefRecID);

            _ledgerVoucher.addTrans(transObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the General Ledger transaction.
    /// </summary>
    /// <param name="_postValue">
    /// The posting value type.
    /// </param>
    /// <param name="_transType">
    /// The transaction value type.
    /// </param>
    /// <param name="_amountInDebit">
    /// true, if the General journal amount is in debit amount field; otherwise, in credit amount field.
    /// </param>
    /// <returns>
    /// The ledger posting type for the General Ledger transaction.
    /// </returns>
    public static LedgerPostingType getPostingType(RAssetPostValue  _postValue,
                                                   RAssetTransType  _transType,
                                                   boolean          _amountInDebit)
    {
        switch (_postValue)
        {
            case RAssetPostValue::SaleValue:
                if (_transType == RAssetTransType::DisposalScrap ||
                    _transType == RAssetTransType::PartialTakeDown)
                {
                    return LedgerPostingType::InventReceipt;
                }
                return LedgerPostingType::LedgerJournal;

            case RAssetPostValue::Gain:
                return LedgerPostingType::LedgerJournal;
        }

        if (_amountInDebit)
        {
            return LedgerPostingType::FixedAssetsDebit_RU;
        }
        return LedgerPostingType::FixedAssetsCredit_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>