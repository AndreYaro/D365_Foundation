<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransFilterHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransFilterHelper</c> class manages cross company filtering for customer and vendor transactions.
/// </summary>
public class CustVendTransFilterHelper
{
    private FormDataSource filterDataSource;
    private FormStringControl companyFilterControl;
    private SysLookupMultiSelectCtrl companyLookupControl;
    private container userCompanies;
    private boolean shouldShowCompanyControls;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSelectedCompaniesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates company ranges on a selected query based on the selection of the company lookup control.
    /// </summary>
    /// <param name = "_query">The cross-company enabled query.</param>
    /// <remarks>If the company lookup control has no selected values, the company range defaults to the current company context.</remarks>
    public void addSelectedCompaniesToQuery(Query _query = filterDataSource.query())
    {
        if (_query)
        {
            container accessibleCompanies = this.selectedCompanyRecIdsToDataAreas(companyLookupControl.get());

            this.setCompanyRange(_query, accessibleCompanies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMyCompaniesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates company ranges on a selected query based on the companies available to the current user.
    /// </summary>
    /// <param name = "_query">The cross-company enabled query.</param>
    public void addMyCompaniesToQuery(Query _query = filterDataSource.query())
    {
        if (_query)
        {
            container myCompanies = this.parmUserCompanies();

            this.setCompanyRange(_query, myCompanies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyRange</Name>
				<Source><![CDATA[
    private void setCompanyRange(Query _query, container _companies)
    {
        DataAreaId company;

        _query.clearCompanyRange();

        for (int i = 1; i <= conLen(_companies); i++)
        {
            company = conPeek(_companies, i);

            if (company == '')
            {
                company = curExt();
            }

            _query.addCompanyRange(company);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedCompanyRecIdsToDataAreas</Name>
				<Source><![CDATA[
    private container selectedCompanyRecIdsToDataAreas(container _companyRecIds)
    {
        container companies;

        DataAreaId company;

        for (int i = 1; i <= conLen(_companyRecIds); i++)
        {
            company = CompanyInfo::findRecId(conPeek(_companyRecIds, i)).DataArea;

            if (company == '')
            {
                company = curExt();
            }

            companies += company;
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedFilterCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently selected companies from the lookup control.
    /// </summary>
    /// <returns>A container with the values of the currently selected companies from the lookup control</returns>
    public container getSelectedFilterCriteria()
    {
        return [companyLookupControl.get(), this.selectedCompanyRecIdsToDataAreas(companyLookupControl.get())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the user has access to multiple companies.
    /// </summary>
    /// <returns>True if the user has access to multiple companies; otherwise, false.</returns>
    public boolean isMultiCompany()
    {
        return conLen(this.parmUserCompanies()) > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set the container of companies that the current user has access to.
    /// </summary>
    /// <param name = "_userCompanies">The companies that the current user has access to</param>
    /// <returns>A container of companies that the current user has access to</returns>
    public container parmUserCompanies(container _userCompanies = userCompanies)
    {
        if (!prmIsDefault(_userCompanies))
        {
            userCompanies = _userCompanies;
        }
        else if (userCompanies == conNull())
        {
            MyLegalEntities myLegalEntities;

            while select myLegalEntities
            {
                userCompanies += myLegalEntities.DataArea;
            }
        }

        return userCompanies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldShowCompanyControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether the company specific controls should show regardless of other company context.
    /// </summary>
    /// <param name = "_shouldShowCompanyControls">Flag whether to show company controls.</param>
    /// <returns>True if the controls should show; otherwise, false.</returns>
    public boolean parmShouldShowCompanyControls(boolean _shouldShowCompanyControls = shouldShowCompanyControls)
    {
        shouldShowCompanyControls = _shouldShowCompanyControls;
        return shouldShowCompanyControls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyControlsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the company controls on the form.
    /// </summary>
    public void setCompanyControlsVisibility()
    {
        companyFilterControl.visible(shouldShowCompanyControls && this.isMultiCompany());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyMultiSelectLookup</Name>
				<Source><![CDATA[
    private void initCompanyMultiSelectLookup()
    {
        Query companyQuery = new Query();

        QueryBuildDataSource companyDataSource = companyQuery.addDataSource(tableNum(CompanyInfo));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, DataArea));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, Name));
        companyDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea));

        for (int i = 1; i <= conLen(this.parmUserCompanies()); i++)
        {
            companyDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(conPeek(this.parmUserCompanies(), i));
        }

        companyLookupControl = SysLookupMultiSelectCtrl::constructWithQuery(
            filterDataSource.formRun(),
            companyFilterControl,
            companyQuery,
            true);

        companyLookupControl.set([CompanyInfo::current(), userCompanies]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCompanyCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add company criteria to the existing lookup control.
    /// </summary>
    /// <param name = "_companyCriteria">The container of companies to add to the lookup selection</param>
    public void addCompanyCriteria(container _companyCriteria)
    {
        companyLookupControl.set(_companyCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the set of country region codes from the user companies.
    /// </summary>
    /// <returns>The set of country region codes for the user.</returns>
    public Set getCountryRegionCodes()
    {
        Set countryRegionCodes = new Set(Types::String);

        for (int i = 1; i <= conLen(this.parmUserCompanies()); i++)
        {
            countryRegionCodes.add(SysCountryRegionCode::countryInfo(conPeek(this.parmUserCompanies(), i)));
        }

        return countryRegionCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLegalEntityForRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the legal entity context of a given record.
    /// </summary>
    /// <param name = "_common">The record for context.</param>
    /// <returns>The legal entity.</returns>
    public SelectableDataArea findLegalEntityForRecord(Common _common)
    {
        SelectableDataArea legalEntity = curExt();

        if (_common)
        {
            DictTable dictTable = new DictTable(_common.tableId);

            if (dictTable && dictTable.dataPrCompany())
            {
                legalEntity = _common.DataAreaId;
            }
        }

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCrossCompanyControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cross company controls for the filter helper.
    /// </summary>
    /// <param name = "_filterDataSource">The data source to perform company filtering on.</param>
    /// <param name = "_companyFilterControl">The custom company filter control.</param>
    internal void initCrossCompanyControls(FormDataSource _filterDataSource, FormStringControl _companyFilterControl)
    {
        filterDataSource = _filterDataSource;
        companyFilterControl = _companyFilterControl;

        this.initCompanyMultiSelectLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustVendTransFilterHelper</c> class.
    /// </summary>
    /// <returns>An instance of the <c>VendInvoiceListFilterHelper</c> class.</returns>
    public static CustVendTransFilterHelper constructV2()
    {
        return new CustVendTransFilterHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initializes an instance of the <c>CustVendTransFilterHelper</c> class.
    /// </summary>
    /// <param name = "_filterDataSource">The data source to perform company filtering on.</param>
    /// <param name = "_companyFilterControl">The custom company filter control.</param>
    /// <returns>An instance of the <c>VendInvoiceListFilterHelper</c> class.</returns>
    [SysObsolete('This method has been deprecated. Please use the constructV2 method to generate the object and initialize form controls through the initCrossCompanyControls method', false, 30\6\2020)]
    public static CustVendTransFilterHelper construct(FormDataSource _filterDataSource, FormStringControl _companyFilterControl)
    {
        CustVendTransFilterHelper helper = new CustVendTransFilterHelper();

        helper.filterDataSource = _filterDataSource;
        helper.companyFilterControl = _companyFilterControl;
        helper.initCompanyMultiSelectLookup();

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enforceCurrentCompanyRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the given query to only the current company context.
    /// </summary>
    /// <param name = "_query">The query to restrict.</param>
    public static void enforceCurrentCompanyRange(Query _query)
    {
        _query.clearCompanyRange();
        _query.addCompanyRange(curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default company for form interactions.
    /// </summary>
    /// <param name = "_dataArea">The new default company.</param>
    public static void setDefaultCompany(SelectableDataArea _dataArea)
    {
        if (curExt() != _dataArea)
        {
            appl.setDefaultCompany(_dataArea, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>