<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanAggregatedMatrixBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Builds the matrix object for populating the viewers.
/// </summary>
class ReqDemPlanAggregatedMatrixBuilder
{
    List                                columnLabels;
    Map                                 dateColumnMap = new Map(Types::Date, Types::Integer);
    date                                startDate, endDate;
    int                                 internalPosition = 1;
    int                                 nextPagePosition = 1;
    int                                 pageSize = 25;
    ReqDemPlanDateGranularity           dateGranularity = ReqDemPlanDateGranularity::Day;
    Stack                               paginationStack = new Stack();
    ReqDemPlanForecastAttributeManager  attributeManager = new ReqDemPlanForecastAttributeManager();
    Query                               dataSourceQuery;
    QueryFilter                         dateFilter;
    List                                matrixLineDefinitions = new List(Types::Class);
    boolean                             nextPageExists;
    boolean                             showTotalSumColumn;
    boolean                             showTotalAverageColumn;
    private List                        forecastModelIds = new List(Types::String);
    private boolean                     forecastModelFilterEnabled = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Query _dataSourceQuery, date _startDate = dateNull(), date _endDate = dateMax(), ReqDemPlanDateGranularity _dateGranularity = ReqDemPlanDateGranularity::Day)
    {
        super();
        this.startDate = _startDate;
        this.endDate = _endDate;
        this.dateGranularity = _dateGranularity;
        dataSourceQuery = this.buildAggregatedForecastQuery(_dataSourceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatrixLineDefinitions</Name>
				<Source><![CDATA[
    public List parmMatrixLineDefinitions(List _matrixLineDefinitions = matrixLineDefinitions)
    {
        matrixLineDefinitions = _matrixLineDefinitions;

        return matrixLineDefinitions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public date parmStartDate(date _startDate = StartDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public date parmEndDate(date _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateGranularity</Name>
				<Source><![CDATA[
    public ReqDemPlanDateGranularity parmDateGranularity(ReqDemPlanDateGranularity _dateGranularity = dateGranularity)
    {
        dateGranularity = _dateGranularity;

        return dateGranularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPageSize</Name>
				<Source><![CDATA[
    public int parmPageSize(int _pageSize = pageSize)
    {
        pageSize = _pageSize;

        return pageSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceQuery</Name>
				<Source><![CDATA[
    public Query parmDataSourceQuery(Query _dataSourceQuery = dataSourceQuery)
    {
        dataSourceQuery = _dataSourceQuery;

        return dataSourceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTotalSumColumn</Name>
				<Source><![CDATA[
    public boolean parmShowTotalSumColumn(boolean _showTotalSumColumn = showTotalSumColumn)
    {
        showTotalSumColumn = _showTotalSumColumn;

        return showTotalSumColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTotalAverageColumn</Name>
				<Source><![CDATA[
    public boolean parmShowTotalAverageColumn(boolean _showTotalAverageColumn = showTotalAverageColumn)
    {
        showTotalAverageColumn = _showTotalAverageColumn;

        return showTotalAverageColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the forecast model ids used to filter the matrix results.
    /// </summary>
    /// <param name = "_forecastModelIds">The ids to set.</param>
    /// <returns>The set forecast model ids.</returns>
    public List parmForecastModelIds(List _forecastModelIds = forecastModelIds)
    {
        forecastModelIds = _forecastModelIds;
        return forecastModelIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMatrixLineDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears matrix line definitions list.
    /// </summary>
    public void clearMatrixLineDefinitions()
    {
        this.parmMatrixLineDefinitions(new List(Types::Class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMatrix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the cell matrix for populating data viewers depending on this class.
    /// </summary>
    /// <param name = "_pageDirection">The enum indicating which way we are moving in pages.</param>
    /// <returns>The <c>ReqDemPlanMatrix</c> class instance containing the row/column labels and cell matrix.</returns>
    public ReqDemPlanMatrix buildMatrix(ReqDemPlanPageDirection _pageDirection = ReqDemPlanPageDirection::Reset)
    {
        var columLength = columnLabels != null ? columnLabels.elements() : 0;
        if (columLength > 0)
        {
            var cellMatrix          = new Map(Types::Container, Types::Class);
            var rowLabels           = new List(Types::String);
            var rowNumberMap        = new Map(Types::String, Types::Integer);
            var lineDefinitionMap   = new Map(Types::Integer, Types::Class);

            this.setPageProperties(_pageDirection);

            dateFilter = dataSourceQuery.findQueryFilter(dataSourceQuery.dataSourceTable(tableNum(ReqDemPlanAggregatedForecast)), fieldStr(ReqDemPlanAggregatedForecast, ForecastDate));
            dateFilter.value(queryRange(startDate, endDate));

            this.setupModelFilter();

            QueryRun queryRun = new QueryRun(dataSourceQuery);
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(internalPosition, columLength * pageSize + 1);

            var recordCounter = 0;
            var rowNumber = 0;
            var rowNumberExceeded = false;
            while (queryRun.next() && !rowNumberExceeded)
            {
                ReqDemPlanAggregatedForecast aggregatedForecast = this.getReqDemPlanAggregatedFromQuery(queryRun);

                var lineDefinitionEnumerator = matrixLineDefinitions.getEnumerator();
                var lineDefinitionNumber = 1;
                while (lineDefinitionEnumerator.moveNext())
                {
                    var lineDefinition = lineDefinitionEnumerator.current() as ReqDemPlanMatrixLineDefinition;
                    var rowNumberMapKey = strFmt('%1|%2', aggregatedForecast.AttributeKey, lineDefinitionNumber);

                    if (!rowNumberMap.exists(rowNumberMapKey))
                    {
                        rowNumber++;

                        if (rowNumber > pageSize * matrixLineDefinitions.elements())
                        {
                            rowNumberExceeded = true;
                            break;
                        }

                        rowLabels.addEnd(lineDefinition.getRowLabel(aggregatedForecast));
                        rowNumberMap.insert(rowNumberMapKey, rowNumber);
                    }

                    int cellRowNumber = rowNumberMap.lookup(rowNumberMapKey);
                    lineDefinitionMap.insert(cellRowNumber, lineDefinition);

                    this.insertOrUpdateMatrixCell(
                        cellMatrix,
                        cellRowNumber,
                        dateColumnMap.lookup(aggregatedForecast.ForecastDate),
                        lineDefinition.getCellValue(aggregatedForecast),
                        aggregatedForecast.data());

                    lineDefinitionNumber++;
                }

                if (!rowNumberExceeded)
                {
                    recordCounter++;
                }
            }

            this.insertTotalsColumns(cellMatrix, lineDefinitionMap);

            nextPagePosition = internalPosition + recordCounter;

            if (recordCounter == 0)
            {
                // There is no need to keep pagination state of a next page, if there are no more records.
                paginationStack.pop();
            }

            nextPageExists = rowNumberExceeded;

            return new ReqDemPlanMatrix(rowLabels, columnLabels, cellMatrix);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqDemPlanAggregatedFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>ReqDemPlanAggregatedForecast</c> from the query run and updates its original quantity if forecast model ids are set.
    /// </summary>
    /// <param name = "_queryRun">The query run being executed.</param>
    /// <returns>The current aggregated forecast instance with the correct original quantity.</returns>
    private ReqDemPlanAggregatedForecast getReqDemPlanAggregatedFromQuery(QueryRun _queryRun)
    {
        ReqDemPlanAggregatedForecast aggregatedForecast = _queryRun.get(tableNum(ReqDemPlanAggregatedForecast)) as ReqDemPlanAggregatedForecast;

        if (this.forecastModelFilterEnabled)
        {
            ReqDemPlanAggregatedForecastHistoryByModel aggregatedForecastByPlan = _queryRun.get(tableNum(ReqDemPlanAggregatedForecastHistoryByModel)) as ReqDemPlanAggregatedForecastHistoryByModel;
            aggregatedForecast.OriginalQty = aggregatedForecastByPlan.OriginalQty;
        }
        return aggregatedForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupModelFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the query for filtering by forecast model if the forecastModelIds field is set; otherwise no filter is applied. 
    /// </summary>
    private void setupModelFilter()
    {
        QueryBuildDataSource forecastByModelDS = dataSourceQuery.dataSourceTable(tableNum(ReqDemPlanAggregatedForecastHistoryByModel));
        if (!this.forecastModelIds.empty())
        {
            if (!forecastByModelDS)
            {
                forecastByModelDS = this.initializeDataSourceForFiltering();
            }
            
            this.enableModelFilter(forecastByModelDS);
        }
        else 
        {
            if (forecastByModelDS && this.forecastModelFilterEnabled)
            {
                this.disableModelFilter(forecastByModelDS);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableModelFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the data source, clears the select and group by sections, and adds all fields from <c>ReqDemPlanAggregatedForecast</c>.
    /// </summary>
    /// <param name = "_forecastByModelDS">The data source for <c>ReqDemPlanAggregatedForecastHistoryByModel</c>.</param>
    private void disableModelFilter(QueryBuildDataSource _forecastByModelDS)
    {
        _forecastByModelDS.enabled(false);
        this.forecastModelFilterEnabled = false;
        dataSourceQuery.clearGroupBy();
        dataSourceQuery.clearAllFields();
        this.getAggregatedForecastDataSource().fields().addAllFields(tableStr(ReqDemPlanAggregatedForecast));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableModelFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the filter value and enables the data source if inactive.
    /// </summary>
    /// <param name = "_forecastByModelDS">The data source for <c>ReqDemPlanAggregatedForecastHistoryByModel</c>.</param>
    /// <param name = "_initialize">Whether the data source was initialized for the first time.</param>
    private void enableModelFilter(QueryBuildDataSource _forecastByModelDS)
    {   
        if (!this.forecastModelFilterEnabled)
        {
            QueryBuildDataSource qbds = this.getAggregatedForecastDataSource();
            qbds.fields().clearFieldList();
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, RecId));
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, AllocationKey));
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, AttributeKey));
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, ForecastDate));
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, Qty));
            qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, OriginalQty));

            if (ReqDemPlanAggregatedForecastChangeSortOrderToggle::instance().isEnabled())
            {
                qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, DataAreaId));
                qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, SourceTable));
                qbds.addGroupByAndSelectionField(fieldNum(ReqDemPlanAggregatedForecast, Version));
            }

            _forecastByModelDS.enabled(true);
            _forecastByModelDS.fields().clearFieldList();
            _forecastByModelDS.fields().addField(fieldNum(ReqDemPlanAggregatedForecastHistoryByModel, OriginalQty), SelectionField::Sum);
            this.forecastModelFilterEnabled = true;
        }
        
        _forecastByModelDS.clearRanges();
        ListEnumerator enumerator = this.forecastModelIds.getEnumerator();
        while (enumerator.moveNext())
        {
            str value = queryValue(enumerator.current());
            _forecastByModelDS.addRange(fieldNum(ReqDemPlanAggregatedForecastHistoryByModel, ForecastModelId)).value(value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDataSourceForFiltering</Name>
				<Source><![CDATA[
    private QueryBuildDataSource initializeDataSourceForFiltering()
    {
        QueryBuildDataSource forecastByModelDS = this.getAggregatedForecastDataSource().addDataSource(tableNum(ReqDemPlanAggregatedForecastHistoryByModel));
        forecastByModelDS.addLink(fieldNum(ReqDemPlanAggregatedForecast, RecId), fieldNum(ReqDemPlanAggregatedForecastHistoryByModel, SourceRecId));
        forecastByModelDS.joinMode(JoinMode::OuterJoin);
        return forecastByModelDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregatedForecastDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource getAggregatedForecastDataSource()
    {
        return dataSourceQuery.dataSourceTable(tableNum(ReqDemPlanAggregatedForecast));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatrixRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates matrix cells containing provided aggregated forecast record.
    /// </summary>
    /// <param name = "_matrix">The data matrix.</param>
    /// <param name = "_aggregatedForecast">The aggregated forecast record, that should be used to update data matrix.</param>
    public void updateMatrixRecord(ReqDemPlanMatrix _matrix, ReqDemPlanAggregatedForecast _aggregatedForecast)
    {
        var matrixCellMap = _matrix.parmCells();
        var matrixCellMapEnumerator = matrixCellMap.getEnumerator();

        int rowNum = 0;
        int colNum = 0;

        while (matrixCellMapEnumerator.moveNext())
        {
            ReqDemPlanMatrixCell cell = matrixCellMapEnumerator.currentValue();
            if (cell.record().RecId == _aggregatedForecast.RecId)
            {
                rowNum = conPeek(matrixCellMapEnumerator.currentKey(), 1);
                colNum = conPeek(matrixCellMapEnumerator.currentKey(), 2);

                this.updateMatrixCells(_matrix, rowNum, colNum, _aggregatedForecast);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatrixTotalRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update row total cell quantity in the data matrix.
    /// </summary>
    /// <param name = "_matrix">The data matrix.</param>
    /// <param name = "_rowNum">The row number in the data matrix.</param>
    /// <param name = "_colNum">The row number in the data matrix.</param>
    /// <param name = "_newSumQty">The new quantity of sum cell.</param>
    public void updateMatrixTotalRecord(ReqDemPlanMatrix _matrix, int _rowNum, int _colNum, real _newSumQty)
    {
        this.insertOrUpdateMatrixCell(_matrix.parmCells(), _rowNum, _colNum, _newSumQty, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAggregatedForecastQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and returns the query to be used for obtaining the data from the aggregated forecast table.
    /// </summary>
    /// <param name = "_dataSourceQuery">The query used as the base for the new query.</param>
    /// <returns>The query sorted by all attributes.</returns>
    public Query buildAggregatedForecastQuery(Query _dataSourceQuery)
    {
        QueryBuildDataSource            aggregatedForecastDataSource;
        Query                           query = _dataSourceQuery;

        query.allowCrossCompany(true);
        aggregatedForecastDataSource = query.dataSourceTable(tableNum(ReqDemPlanAggregatedForecast));
        dateFilter = query.findQueryFilter(aggregatedForecastDataSource, fieldStr(ReqDemPlanAggregatedForecast, ForecastDate));
        if (!dateFilter)
        {
            dateFilter = query.addQueryFilter(aggregatedForecastDataSource, fieldStr(ReqDemPlanAggregatedForecast, ForecastDate));
            dateFilter.status(RangeStatus::Hidden);
        }

        if (ReqDemPlanAggregatedForecastChangeSortOrderToggle::instance().isEnabled())
        {
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, DataAreaId));
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, SourceTable));
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, Version));
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, AttributeKey));
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, ForecastDate));
        }
        else
        {
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, AttributeKey));
            aggregatedForecastDataSource.addSortField(fieldNum(ReqDemPlanAggregatedForecast, ForecastDate));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPageProperties</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the page/pagination related properties based on the page move direction.
    /// </summary>
    /// <param name = "_pageDirection">The enum indicating which way we are moving in pages.</param>
    public void setPageProperties(ReqDemPlanPageDirection _pageDirection)
    {
        switch (_pageDirection)
        {
            case ReqDemPlanPageDirection::Reset:
                this.resetPageProperties();
                break;
            case ReqDemPlanPageDirection::NextPage:
                paginationStack.push([internalPosition]);
                internalPosition = nextPagePosition;
                break;
            case ReqDemPlanPageDirection::PreviousPage:
                if (internalPosition > 1)
                {
                    internalPosition = conPeek(paginationStack.pop(), 1);
                }
                break;
            case ReqDemPlanPageDirection::Current:
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPageProperties</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the page properties.
    /// </summary>
    public void resetPageProperties()
    {
        internalPosition = 1;
        paginationStack.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and builds the periods based on the bucket temporary table.
    /// </summary>
    /// <returns>The list of all periods in the horizon based on bucket type.</returns>
    public List buildPeriods()
    {
        ReqDemPlanBucket    bucket;
        int                 periodCounter = 1;

        columnLabels = new List(Types::String);
        dateColumnMap = new Map(Types::Date, Types::Integer);

        while select bucket
            where  bucket.CurrentPeriodStartDate >= startDate
                && bucket.CurrentPeriodStartDate <= endDate
        {
            var dateValue = bucket.CurrentPeriodStartDate;
            dateColumnMap.insert(dateValue, periodCounter);
            columnLabels.addEnd(date2StrUsr(dateValue));
            periodCounter++;
        }

        if (columnLabels.empty())
        {
            ReqDemPlanAggregatedForecast reqDemPlanAggregatedForecast;

            select firstonly RecId from reqDemPlanAggregatedForecast;

            // when forecast generation failed and there's nothing to show in the form anyway, no reason to show this error to the user
            if (reqDemPlanAggregatedForecast.RecId)
            {
                error("@SYS138113");
            }
        }

        return columnLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPreviousPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether previous page exists.
    /// </summary>
    /// <returns><c>true</c> if previous page exists; otherwise <c>false</c></returns>
    public boolean existsPreviousPage()
    {
        return paginationStack.qty() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNextPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether next page exists.
    /// </summary>
    /// <returns><c>true</c> if next page exists; otherwise <c>false</c></returns>
    public boolean existsNextPage()
    {
        return nextPageExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatrixCells</Name>
				<Source><![CDATA[
    private void updateMatrixCells(ReqDemPlanMatrix _matrix, int _rowNum, int _colNum, ReqDemPlanAggregatedForecast _aggregation)
    {
        var lineDefinitionMap = new Map(Types::Integer, Types::Class);

        _rowNum = this.getTopRowNumberWithAggregatedForecastRecId(_matrix, _rowNum, _colNum);

        var matrixCellMap               = _matrix.parmCells();

        var lineDefinitionEnumerator = matrixLineDefinitions.getEnumerator();
        while (lineDefinitionEnumerator.moveNext())
        {
            var lineDefinition = lineDefinitionEnumerator.current() as ReqDemPlanMatrixLineDefinition;

            lineDefinitionMap.insert(_rowNum, lineDefinition);

            this.insertOrUpdateMatrixCell(matrixCellMap, _rowNum, _colNum, lineDefinition.getCellValue(_aggregation), _aggregation);
            _rowNum++;
        }

        this.insertTotalsColumns(matrixCellMap, lineDefinitionMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopRowNumberWithAggregatedForecastRecId</Name>
				<Source><![CDATA[
    private int getTopRowNumberWithAggregatedForecastRecId(ReqDemPlanMatrix _matrix, int _rowNum, int _colNum)
    {
        while (true)
        {
            var aggregatedForecastRecId = _matrix.cellRecord([_rowNum, _colNum]).RecId;

            var previousRow = _rowNum - 1;
            if (previousRow >= 1 && _matrix.cellRecord([previousRow, _colNum]).RecId == aggregatedForecastRecId)
            {
                _rowNum = previousRow;
            }
            else
            {
                break;
            }
        }

        return _rowNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateMatrixCell</Name>
				<Source><![CDATA[
    private void insertOrUpdateMatrixCell(Map _matrixCellMap, int _rowNum, int _colNum, real _cellValue, ReqDemPlanAggregatedForecast _aggregation, boolean _enabled = true)
    {
        _matrixCellMap.insert([_rowNum, _colNum], new ReqDemPlanMatrixCell(_aggregation, _cellValue, _enabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalsColumns</Name>
				<Source><![CDATA[
    private void insertTotalsColumns(Map _cellMatrix, Map _lineDefinitionMap)
    {
        if (_cellMatrix.empty() || _lineDefinitionMap.empty() || (!showTotalSumColumn && !showTotalAverageColumn))
        {
            return;
        }

        int maxDateColumn  = this.getMaxDateColumn();

        if (maxDateColumn <= 0)
        {
            return;
        }

        var mapEnumerator = _lineDefinitionMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            ReqDemPlanMatrixLineDefinition lineDefinition = mapEnumerator.currentValue();

            real rowSum = this.calculateRowSum(_cellMatrix, maxDateColumn, mapEnumerator.currentKey());

            int columnIncrement = 1;

            if (showTotalSumColumn)
            {
                this.insertOrUpdateMatrixCell(
                        _cellMatrix,
                        mapEnumerator.currentKey(),
                        maxDateColumn + columnIncrement,
                        lineDefinition.isTotalSumAllowed()?  rowSum : 0,
                        null,
                        lineDefinition.isTotalSumAllowed());

                columnIncrement++;
            }

            if (showTotalAverageColumn)
            {
                this.insertOrUpdateMatrixCell(
                        _cellMatrix,
                        mapEnumerator.currentKey(),
                        maxDateColumn + columnIncrement,
                        rowSum / maxDateColumn,
                        null);
            }
        }

        if (columnLabels.elements() == maxDateColumn)
        {
            if (showTotalSumColumn)
            {
                columnLabels.addEnd("@DMP:TotalColumnSumName");
            }

            if (showTotalAverageColumn)
            {
                columnLabels.addEnd("@DMP:TotalColumnAverageName");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRowSum</Name>
				<Source><![CDATA[
    private real calculateRowSum(Map _cellMatrix, int _maxDateColumn, int _row)
    {
        real valueSum = 0;

        for (var i = 1; i <= _maxDateColumn; i++)
        {
            if (_cellMatrix.exists([_row, i]))
            {
                ReqDemPlanMatrixCell matrixCell = _cellMatrix.lookup([_row, i]);

                if (matrixCell)
                {
                    valueSum += matrixCell.value();
                }
            }
        }

        return valueSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxDateColumn</Name>
				<Source><![CDATA[
    private int getMaxDateColumn()
    {
        int maxColumn = 0;
        var dateColumnEnumerator = dateColumnMap.getEnumerator();
        while (dateColumnEnumerator.moveNext())
        {
            if (maxColumn < dateColumnEnumerator.currentValue())
            {
                maxColumn = dateColumnEnumerator.currentValue();
            }
        }

        return maxColumn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>