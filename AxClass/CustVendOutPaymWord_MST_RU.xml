<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaymWord_MST_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form of payment order to word document
/// </summary>
class CustVendOutPaymWord_MST_RU implements ERIReportPostProcessingSupported
{
    private Filename fileName;

    BankPaymentOrderJour_RU     paymentOrderJour;
    CustVendOutPaymReport_RU    custVendOutPaymReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmountCurFormatted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns formatted amount of payment order
    /// </summary>
    /// <returns>
    /// Formatted amount of payment order
    /// </returns>
    protected FreeText getAmountCurFormatted()
    {
        FreeText strNum = num2str(abs(paymentOrderJour.AmountCur), 1, 2, 1, 0);

        return strPoke(strNum, '-', strFind(strNum, '.', 1, strLen(strNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of report
    /// </summary>
    /// <param name="_caller">
    /// Caller of report
    /// </param>
    /// <exception cref="Exception::Error">
    /// If caller not initialized an error occurs
    /// </exception>
    protected void new(Object _caller)
    {
        if (_caller)
        {
            custVendOutPaymReport = _caller;
        }
        else
        {
            throw error("@SYS53926");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report with data.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record to get data from.</param>
    /// <exception cref="Exception::Error">
    /// Throws error if <c>paymentOrderJour</c> is not initialized.
    /// </exception>
    protected void printData(LedgerJournalTrans _ledgerJournalTrans = null)
    {
        const str resourceName = 'PaymentOrder_RU';

        if (! paymentOrderJour)
        {
            throw error(strFmt("@GLS102329", _ledgerJournalTrans.Voucher));
        }

        using(System.IO.Stream templateStream = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetResourceContentStream(resourceName))
        {
            using (System.IO.Stream documentStream = new System.IO.MemoryStream())
            {
                templateStream.CopyTo(documentStream);
                using (WordDocument_RU wordDocument = new WordDocument_RU(documentStream))
                {
                    wordDocument.insertValue('PaymentOrderNum', paymentOrderJour.PaymentOrderNum);
                    wordDocument.insertValue('PaymOrderDate', date2str(paymentOrderJour.PaymentTransDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
                    wordDocument.insertValue('PaymSpec', paymentOrderJour.PaymSpec);
                    wordDocument.insertValue('PaymStatusCode', paymentOrderJour.PaymStatusCode);
                    wordDocument.insertValue('AmountInWords', paymentOrderJour.numeralsToLetter());
                    wordDocument.insertValue('INNPayer', paymentOrderJour.inn_Payer());
                    wordDocument.insertValue('KPPPayer', paymentOrderJour.kppu_Payer());
                    wordDocument.insertValue('AmountCurFormatted', this.getAmountCurFormatted());
                    wordDocument.insertValue('BankNamePayer', paymentOrderJour.bankNamePayer());
                    wordDocument.insertValue('BankNameRecipient', paymentOrderJour.bankNameRecipient());
                    wordDocument.insertValue('NamePayer', paymentOrderJour.namePayer() + ' ' + paymentOrderJour.branchBankNamePayer());
                    wordDocument.insertValue('BankAccountPayer', paymentOrderJour.bankAccountPayer());
                    wordDocument.insertValue('BICPayer', paymentOrderJour.bic_Payer());
                    wordDocument.insertValue('CorrBankAccountPayer', paymentOrderJour.corrBankAccountPayer());
                    wordDocument.insertValue('BICRecipient'     , paymentOrderJour.bic_Recipient());
                    wordDocument.insertValue('CorrBankAccountRecipient', paymentOrderJour.corrBankAccountRecipient());
                    wordDocument.insertValue('BankAccountRecipient', paymentOrderJour.bankAccountRecipient());
                    wordDocument.insertValue('INNRecipient', paymentOrderJour.inn_Recipient());
                    wordDocument.insertValue('KPPRecipient', paymentOrderJour.kppu_Recipient());
                    wordDocument.insertValue('NameRecipient', paymentOrderJour.nameRecipient() + ' ' + paymentOrderJour.branchBankNameRecipient());
                    wordDocument.insertValue('OrderOfPayment', paymentOrderJour.OrderOfPayment);
                    wordDocument.insertValue('PaymBudgetReceiptClassCode', paymentOrderJour.PaymBudgetReceiptClassCode);
                    wordDocument.insertValue('OKATO', paymentOrderJour.okato());
                    wordDocument.insertValue('PaymBaseCode', paymentOrderJour.getPaymBaseCode());
                    wordDocument.insertValue('TaxPeriod', paymentOrderJour.getTaxPeriod());
                    wordDocument.insertValue('PaymDocNum', paymentOrderJour.getPaymDocNum());
                    wordDocument.insertValue('PaymDocDate', paymentOrderJour.getPaymDocDateAsStr());
                    wordDocument.insertValue('PaymTypeCode', paymentOrderJour.getPaymTypeCode());
                    wordDocument.insertValue('PurposeOfPayment', paymentOrderJour.purposeOfPaymentText());
                    wordDocument.insertValue('UIN', paymentOrderJour.UIN);

                    fileName = strFmt("@GLS102331", paymentOrderJour.PaymentOrderNum);

                    if (AccountingDocumentsERPostProcessingToggle::isEnabled())
                    {
                        ERBinaryContentService binaryContentService = new ERBinaryContentService();
                        binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
                        binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
                        binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
                    }
                    else
                    {
                        wordDocument.sendFileToBrowser(fileName);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return custVendOutPaymReport.reportName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If payment order jour is empty an error occurs
    /// </exception>
    public void run()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        ListEnumerator          enumOutPaymRecords;
        CustVendOutPaymRecord   outPaymRecord;

        if (custVendOutPaymReport.parmCustVendOutPaym())
        {
            enumOutPaymRecords = custVendOutPaymReport.parmCustVendOutPaym().getOutPaymRecords().getEnumerator();
            while (enumOutPaymRecords.moveNext())
            {
                outPaymRecord      = enumOutPaymRecords.current();
                ledgerJournalTrans = outPaymRecord.parmCustVendPaym().ledgerJournalTrans();
                ledgerJournalTrans.reread();
                paymentOrderJour   = ledgerJournalTrans.bankPaymentOrderJour_RU();
                this.printData(ledgerJournalTrans);
            }
        }
        else
        {
            paymentOrderJour = custVendOutPaymReport.parmPaymentOrderJour();
            this.printData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendOutPaymWord_MST_RU construct(Object _caller)
    {
        return new CustVendOutPaymWord_MST_RU(_caller);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>