<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB80_AccountsReceivable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReleaseUpdateDB80_AccountsReceivable extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module name of an upgrade class.
    /// </summary>
    /// <returns>
    /// The module name.
    /// </returns>
    /// <remarks>
    /// This method must be implemented by sub classes.
    /// </remarks>
    public ReleaseUpdateModule moduleName()
    {
        return "@AccountsReceivable:AR_DataUpgrade_MessageSupplemental_ModuleName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The script runs in any system having version < App80.
    /// </summary>
    /// <returns>Script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::v80;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSyncRemoveColumnsWithBadTypesInCustCustomerStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Presync action for CustCostomerStaging table, if the column personGender and personMaritalStatus have Enum type (int in db):
    ///     Create temp table and copy definitionGroup, executionID, customerAccount, personGender, personMaritalStatus from CustCostomerStaging.
    ///     Drop column personGender and personMaritalStatus (The database synchronization will put them back with the correct data type).
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute("@AccountsReceivable:CustCustomerStagingUpgradeScript"),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
        UpgradeScriptTableAttribute(tableStr(CustCustomerStaging), false, true, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncRemoveColumnsWithBadTypesInCustCustomerStaging()
    {
        Connection sessionConn = new Connection();

        if (this.isCustCustomerStagingGenderOrMaritalStatusEnum(sessionConn))
        {
            this.copyCustCustomerStagingGenderMaritalstatusToTempTable(sessionConn);
            
            this.dropColumnFromCustCustomerStaging(sessionConn, 'PERSONGENDER');
            this.dropColumnFromCustCustomerStaging(sessionConn, 'PERSONMARITALSTATUS');
        }

        sessionConn.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncCopyValueBackToCustCustomerStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// After db sync completed, if the temp table is created, convert and copy values of PersonGender and PersonMaritalStatus back to CustCustomerStaging.
    /// Then drop the temp table.
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute("@AccountsReceivable:CustCustomerStagingUpgradeScript"),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
        UpgradeScriptTableAttribute(tableStr(CustCustomerStaging), false, true, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncCopyValueBackToCustCustomerStaging()
    {
        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        str sql = @"
                IF OBJECT_ID('CUSTGENDERMARITALSTATUS', 'U') IS NOT NULL EXEC
                ('
                    UPDATE CCS
                        SET CCS.PERSONGENDER = ''''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONGENDER = 0;

                    UPDATE CCS
                        SET CCS.PERSONGENDER = ''Male''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONGENDER = 1;

                    UPDATE CCS
                        SET CCS.PERSONGENDER = ''Female''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONGENDER = 2;

                    UPDATE CCS
                        SET CCS.PERSONGENDER = ''Non-Specif''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONGENDER = 3;

                    UPDATE CCS
                        SET CCS.PERSONMARITALSTATUS = ''None''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONMARITALSTATUS = 0;

                    UPDATE CCS
                        SET CCS.PERSONMARITALSTATUS = ''Single''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONMARITALSTATUS = 1;

                    UPDATE CCS
                        SET CCS.PERSONMARITALSTATUS = ''Married''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONMARITALSTATUS = 2;

                    UPDATE CCS
                        SET CCS.PERSONMARITALSTATUS = ''Divorced''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONMARITALSTATUS = 3;
                
                    UPDATE CCS
                        SET CCS.PERSONMARITALSTATUS = ''Widowed''
                        FROM CUSTCUSTOMERSTAGING AS CCS, CUSTGENDERMARITALSTATUS AS CGM
                        WHERE CCS.DEFINITIONGROUP = CGM.DEFINITIONGROUP
                            AND CCS.EXECUTIONID = CGM.EXECUTIONID
                            AND CCS.PARTITION = CGM.PARTITION
                            AND CCS.CUSTOMERACCOUNT = CGM.CUSTOMERACCOUNT
                            AND CGM.PERSONMARITALSTATUS = 4;

                    DROP TABLE CUSTGENDERMARITALSTATUS;
                   ')";

        new SqlStatementExecutePermission(sql).assert();
        
        statement.executeUpdateWithParameters(sql, SqlParams::create());

        CodeAccessPermission::revertAssert();
        statement.close();
        sessionConn.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropColumnFromCustCustomerStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drop Columns from CustCustomerStaging table
    /// </summary>
    /// <param name = "_sessionConn"> Database connection session </param>
    /// <param name = "_columnName"> The name of the column need to be droped </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void dropColumnFromCustCustomerStaging(Connection _sessionConn, str _columnName)
    {
        Statement statement = _sessionConn.createStatement();

        str sql = strFmt(@"DECLARE @Constraint nvarchar(128)

                   SELECT @Constraint = NAME FROM SYS.DEFAULT_CONSTRAINTS
                   WHERE PARENT_OBJECT_ID = OBJECT_ID('CUSTCUSTOMERSTAGING')
                   AND PARENT_COLUMN_ID = (SELECT COLUMN_ID FROM SYS.COLUMNS WHERE NAME = '%1' AND OBJECT_ID = OBJECT_ID('CUSTCUSTOMERSTAGING'))
 
                   IF @Constraint IS NOT NULL EXEC('ALTER TABLE CUSTCUSTOMERSTAGING DROP CONSTRAINT ' + @Constraint)

                   IF EXISTS(SELECT * FROM SYS.COLUMNS WHERE NAME = '%1' AND OBJECT_ID = OBJECT_ID('CUSTCUSTOMERSTAGING'))
                   BEGIN
                   ALTER TABLE CUSTCUSTOMERSTAGING DROP COLUMN %1
                   END

                   DELETE FROM SQLDICTIONARY WHERE NAME = '%1' AND
                   TABLEID IN (SELECT ID FROM TABLEIDTABLE WHERE NAME = 'CUSTCUSTOMERSTAGING')", _columnName);

        new SqlStatementExecutePermission(sql).assert();
        
        statement.executeUpdateWithParameters(sql, SqlParams::create());

        CodeAccessPermission::revertAssert();
        statement.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustCustomerStagingGenderMaritalstatusToTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy values from PersonGender and PersonMaritalStatus column to a temp table.
    /// </summary>
    /// <param name = "_sessionConn"> Database connection session </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void copyCustCustomerStagingGenderMaritalstatusToTempTable(Connection _sessionConn)
    {
        Statement statement = _sessionConn.createStatement();
        
        str sql = @"SELECT C.*  INTO CUSTGENDERMARITALSTATUS FROM
                (SELECT DEFINITIONGROUP, EXECUTIONID, PARTITION, CUSTOMERACCOUNT, PERSONGENDER, PERSONMARITALSTATUS FROM CUSTCUSTOMERSTAGING) C";

        new SqlStatementExecutePermission(sql).assert();
        
        statement.executeUpdateWithParameters(sql, SqlParams::create());

        CodeAccessPermission::revertAssert();
        statement.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustCustomerStagingGenderOrMaritalStatusEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if PersonGender column or PersonMaritalStatus column in CustCustomerStahas data type Enum.
    /// </summary>
    /// <param name = "_sessionConn"> Database connection session </param>
    /// <returns> True, if PersonGender or PersonMaritialStatus is Enum; false, otherwise. </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isCustCustomerStagingGenderOrMaritalStatusEnum(Connection _sessionConn)
    {
        Statement statement = _sessionConn.createStatement();
        ResultSet resultSet;
        boolean isTypeEnum;

        str sql = @"SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
                    WHERE TABLE_NAME = 'CUSTCUSTOMERSTAGING' AND (COLUMN_NAME = 'PERSONGENDER' or COLUMN_NAME = 'PERSONMARITALSTATUS')";
        
        new SqlStatementExecutePermission(sql).assert();
        
        resultSet = statement.executeQueryWithParameters(sql, SqlParams::create());

        while (resultSet.next())
        {
            str fieldType = resultSet.getString(1);
            
            if (fieldType == 'int')
            {
                isTypeEnum = true;
            }
        }

        CodeAccessPermission::revertAssert();
        statement.close();

        return isTypeEnum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>