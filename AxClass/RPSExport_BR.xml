<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rpsExport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>RPSExport_BR</c> class implements the dialog
/// that allows to export RPS files.
/// </summary>
class rpsExport_BR extends RunBase
{
    #ConfMacros_BR

    FromDate                fromDate;
    ToDate                  toDate;
    FiscalDocumentTypeId_BR  fiscalDocumentTypeId;
    FiscalEstablishmentId_BR fiscalEstablishmentId;
    CustVendAC              fromAccount;
    CustVendAC              toAccount;
    InvoiceId               fromNumber;
    InvoiceId               toNumber;
    boolean                 includePreviouslyExportedRps;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructConfExportRPS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory method to construct the internal <c>ConfExportRPS_BR</c> object.
    /// </summary>
    /// <returns>A <c>ConfExportRPS_BR</c> instance.</returns>
    protected ConfExportRPS_BR constructConfExportRPS()
    {
        return ConfExportRPS_BR::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args            parameters = new Args();
        FormRun         formRun;

        parameters.name(formStr(RPSExport_BR));
        parameters.caller(this);
        formRun = classfactory.formRunClass(parameters);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameSave</Name>
				<Source><![CDATA[
    private Filename getFileNameSave()
    {
        str _fromDate           = date2Str(fromDate, 321, 2, 0, 2, 0, 4);
        str _toDate             = date2Str(toDate, 321, 2, 0, 2, 0, 4);
        str _dateToday          = date2Str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 321, 2, 0, 2, 0, 4);
        str _timeNow            = time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Dot, TimeFormat::AMPM);

        Filename _fileNameSave  = strFmt("%1_%2%3_%4_%5", fiscalEstablishmentId, _fromDate, _toDate, _dateToday, _timeNow);

        return _fileNameSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentTypeId</Name>
				<Source><![CDATA[
    public FiscalDocumentTypeId_BR parmFiscalDocumentTypeId(FiscalDocumentTypeId_BR _fiscalDocumentTypeId = fiscalDocumentTypeId)
    {
        fiscalDocumentTypeId = _fiscalDocumentTypeId;

        return fiscalDocumentTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentId</Name>
				<Source><![CDATA[
    public FiscalEstablishmentId_BR parmFiscalEstablishmentId(FiscalEstablishmentId_BR _fiscalEstablishmentId = fiscalEstablishmentId)
    {
        fiscalEstablishmentId = _fiscalEstablishmentId;

        return fiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmFromAccount(CustVendAC _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;

        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmFromNumber(InvoiceId _fromNumber = fromNumber)
    {
        fromNumber = _fromNumber;

        return fromNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePreviouslyExported</Name>
				<Source><![CDATA[
    public boolean parmIncludePreviouslyExported(boolean _includePreviouslyExported = includePreviouslyExportedRps)
    {
        includePreviouslyExportedRps = _includePreviouslyExported;
        return includePreviouslyExportedRps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmToAccount(CustVendAC _toAccount = toAccount)
    {
        toAccount = _toAccount;

        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToNumber</Name>
				<Source><![CDATA[
    public InvoiceId parmToNumber(InvoiceId _toNumber = toNumber)
    {
        toNumber = _toNumber;

        return toNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #RPSFlags_BR

        FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::find(fiscalDocumentTypeId, fiscalEstablishmentId);
        FiscalDocumentFormat_BR fiscalDocumentFormat = FiscalDocumentFormat_BR::find(fiscalDocumentType.RecId);
        Query electronicReportingQuery = this.buildElectronicReportingQuery(fiscalDocumentFormat);

        if (fiscalDocumentFormat.ERFormatMapping != nullValueBaseType(Types::Int64))
        {
            ERIModelDefinitionParamsUIAction parameters =  new ERModelDefinitionDatabaseContext()
                .addQuery(tablenum(EFDocumentCity_BR), electronicReportingQuery);

            str fileName;

            if (!RPSExportUseFileNameFromERFeature::isEnabled())
            {
                fileName = this.getFileNameSave();
            }

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(fiscalDocumentFormat.ERFormatMapping, fileName)
                .withParameter(parameters)
                .run();

            this.updateEFDocumentCity_BR(electronicReportingQuery);
        }
        else
        {
            ttsbegin;

            ConfExportRPS_BR        confExportRPS           = this.constructConfExportRPS();

            RPSExportDateRange_BR::insertDateRange(fromDate, toDate);

            confExportRPS.parmFiscalDocumentTypeId  (fiscalDocumentTypeId);
            confExportRPS.parmFiscalEstablishmentId (fiscalEstablishmentId);
            confExportRPS.parmFromDate              (fromDate);
            confExportRPS.parmToDate                (toDate);
            confExportRPS.parmLayoutId              (fiscalDocumentFormat.eInvoiceExportLayout);
            confExportRPS.parmGroupId               (ConfLayoutGroups_BR::find(fiscalDocumentFormat.eInvoiceExportLayout).ConfGroupId);
            confExportRPS.parmFileName              (strFmt("%1.txt", this.getFileNameSave()));
            confExportRPS.parmFromNumber            (fromNumber);
            confExportRPS.parmToNumber              (toNumber);
            confExportRPS.parmFromAccount           (fromAccount);
            confExportRPS.parmToAccount             (toAccount);
            confExportRPS.parmMaxFileSize           (#RPSMaxFileSize);
            confExportRPS.parmMaxFileSizeError      (#RPSMaxFileSizeError);
            confExportRPS.parmIncludePreviouslyExported (includePreviouslyExportedRps);

            confExportRPS.run();

            RPSExportDateRange_BR::deleteDateRange();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEFDocumentCity_BR</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates EFDocumentCity_BR
    /// </summary>
    private void updateEFDocumentCity_BR(Query _electronicReportingQuery)
    {
        QueryRun                    qr;
        EFDocumentCity_BR           efDocumentCity;

        ttsBegin;

        qr = new QueryRun(_electronicReportingQuery);
        qr.query().dataSourceTable(tableNum(EFDocumentCity_BR)).update(true);

        while (qr.next())
        {
            efDocumentCity  = qr.get(tableNum(EFDocumentCity_BR));

            if (efDocumentCity)
            {
                efDocumentCity.RPSExportDate    = datetobeginUtcDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getUserPreferredTimeZone());
                efDocumentCity.update();
            }
        }

        ttsCommit;
	}

]]></Source>
			</Method>
			<Method>
				<Name>buildElectronicReportingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query to the transactions.
    /// </summary>
    private Query buildElectronicReportingQuery(FiscalDocumentFormat_BR _fiscalDocumentFormat)
    {
        Query query = new Query();

        QueryBuildDataSource efDocumentCity_ds = query.addDataSource(tableNum(EFDocumentCity_BR));

        efDocumentCity_ds.addRange(fieldNum(EFDocumentCity_BR, RPSImportDate)).value(SysQuery::valueEmptyString());
        efDocumentCity_ds.addRange(fieldNum(EFDocumentCity_BR, RPSDate)).value(queryRange(this.parmFromDate(), this.parmToDate()));
        efDocumentCity_ds.addRange(fieldNum(EFDocumentCity_BR, RPSNumber)).value(queryRange(this.parmFromNumber(), this.parmToNumber()));

        if (!includePreviouslyExportedRps)
        {
            efDocumentCity_ds.addRange(fieldNum(EFDocumentCity_BR, RPSExportDate)).value(SysQuery::valueEmptyString());
        }

        QueryBuildDataSource fiscalDocument_ds = efDocumentCity_ds.addDataSource(tableNum(FiscalDocument_BR));
        fiscalDocument_ds.relations(true);

        fiscalDocument_ds.addRange(fieldnum(FiscalDocument_BR, FiscalEstablishment)).value(fiscalEstablishmentId);
        fiscalDocument_ds.addRange(fieldNum(FiscalDocument_BR, TotalServicesAmount)).value(SysQuery::valueNot(0));
        fiscalDocument_ds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentFormat)).value(queryValue(_fiscalDocumentFormat.RecId));
        fiscalDocument_ds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountType)).value(queryValue(CustVendType_BR::Customer));
        fiscalDocument_ds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentAccountNum)).value(queryRange(this.parmFromAccount(), this.parmToAccount()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the class fields values.
    /// </summary>
    /// <param name="calledFrom">Not used.</param>
    /// <returns>true if all fields are validated; false, otherwise.</returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::find(fiscalDocumentTypeId, fiscalEstablishmentId);
        FiscalDocumentFormat_BR fiscalDocumentFormat = FiscalDocumentFormat_BR::find(fiscalDocumentType.RecId);

        ret = super(calledFrom);

        if (!fromDate)
        {
            ret = checkFailed("@SYS91557");
        }

        if (!toDate)
        {
            ret = checkFailed("@SYS90868");
        }

        if (fromDate && toDate && fromDate > toDate)
        {
            ret = checkFailed("@SYS91020");
        }

        if (!fiscalDocumentTypeId)
        {
            ret = checkFailed("@GLS456");
        }
        else if (!fiscalDocumentType)
        {
            ret = checkFailed(strFmt("@SYS112224", fiscalDocumentTypeId, fieldPName(FiscalDocumentType_BR, FiscalDocumentTypeId), tablePName(FiscalDocumentType_BR)));
        }
        else if (!fiscalDocumentType.ElectronicInvoice)
        {
            ret = checkFailed(strFmt("@GLS60363", fiscalDocumentType.Name));
        }
        else if (!fiscalDocumentFormat.eInvoiceExportLayout)
        {
            ret = checkFailed("@GLS64083");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS60367";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPSExport_BR rpsExport = new RPSExport_BR();

        if (rpsExport.prompt())
        {
            rpsExport.init();
            rpsExport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
