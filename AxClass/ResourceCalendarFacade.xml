<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResourceCalendarFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ResourceCalendarFacade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCalendarDataAreaId</Name>
				<Source><![CDATA[
public static SelectableDataArea getCalendarDataAreaId(CalendarRecId _calendar)
{
    SelectableDataArea calendarDataAreaId;
    WorkCalendarTable workCalendarTable;

    if (_calendar)
    {
        select firstonly crossCompany CalendarId
            from workCalendarTable
            where workCalendarTable.RecId == _calendar;

        calendarDataAreaId = workCalendarTable.dataAreaId;
    }

    return calendarDataAreaId;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
public static CalendarId getCalendarId(CalendarRecId _calendar)
{
    CalendarId calendarId;
    WorkCalendarTable workCalendarTable;

    if (_calendar)
    {
        select firstonly crossCompany CalendarId
            from workCalendarTable
            where workCalendarTable.RecId == _calendar;

        calendarId = workCalendarTable.CalendarId;
    }

    return calendarId;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarRecId</Name>
				<Source><![CDATA[
public static CalendarRecId getCalendarRecId(CalendarId _calendarId, LegalEntityRecId _legalEntity = CompanyInfo::current())
{
    WorkCalendarTable calendar;
    SelectableDataArea calendarDataArea = CompanyInfo::findRecId(_legalEntity).DataArea;

    select crossCompany RecId from calendar
        where calendar.CalendarId == _calendarId
            && calendar.dataAreaId == calendarDataArea;

    return calendar.RecId;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCapacity</Name>
				<Source><![CDATA[
public static real getCapacity(CalendarRecId _calendar, date _date)
{
    real capacity;
    WorkCalendarTable workCalendarTable;
    WorkCalendarDateLine    workCalendarDateLine;

    if (_calendar)
    {
        select firstonly crossCompany DataAreaId, CalendarId
            from workCalendarTable
            where workCalendarTable.RecId == _calendar;

        if (workCalendarTable)
        {
            changecompany(workCalendarTable.DataAreaId)
            {
                while select workCalendarDateLine
                    where workCalendarDateLine.CalendarId == workCalendarTable.CalendarId  &&
                            workCalendarDateLine.TransDate == _date
                {
                    capacity += workCalendarDateLine.capacity(100, false);
                }
            }
        }
    }

    return capacity;
}

]]></Source>
			</Method>
			<Method>
				<Name>getDates</Name>
				<Source><![CDATA[
public static List getDates(CalendarRecId _calendar, date _fromDate, date _toDate)
{
    WorkCalendarTable workCalendarTable;
    WorkCalendarDate workCalendarDate;

    List dates = new List(Types::Date);

    if (_calendar && _fromDate && _toDate && (_toDate >= _fromDate))
    {
        select firstonly crossCompany DataAreaId, CalendarId
            from workCalendarTable
            where workCalendarTable.RecId == _calendar;

        if (workCalendarTable)
        {
            changecompany(workCalendarTable.DataAreaId)
            {
                while select TransDate from workCalendarDate where
                    workCalendarDate.TransDate >= _fromDate     &&
                    workCalendarDate.TransDate <= _toDate       &&
                    workCalendarDate.CalendarId == workCalendarTable.CalendarId
                {
                    dates.addEnd(workCalendarDate.TransDate);
                }
            }
        }
    }

    return dates;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>