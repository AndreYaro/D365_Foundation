<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExpenseItemizationFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

/// <summary>
/// The <c>ExpenseItemizationFeature</c> class defines the expense re-imagined itemization feature.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class ExpenseItemizationFeature implements IFeatureMetadata, IFeaturePrerequisites, IFeatureDependencies, IFeatureLifecycle, IFeatureMetadataEnablementNotifiable
{
    private static ExpenseItemizationFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new ExpenseItemizationFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ExpenseItemizationFeature instance()
    {
        return ExpenseItemizationFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Expense:ExpenseItemizationFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::TravelAndExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Expense:ExpenseItemizationFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://docs.microsoft.com/en-us/dynamics365/project-operations/prod-exp/expense-itemization";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        LabelString newExpenseUIFeature = "@Expense:ExpenseManagementGlobalEnableFeatureLabel";
        
        return strFmt("@Expense:PerDiemFeatureCannotEnableMessage", newExpenseUIFeature);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        boolean ret = Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ExpenseManagementGlobalEnableFeature::instance());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAllFeatures()
    {
        var featureDependency = new IFeature[1]();
        featureDependency.SetValue(ExpenseManagementGlobalEnableFeature::instance(), 0);
        return featureDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage featureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        // see if the number sequence is setup
        NumberSequenceDatatype nsdt = NumberSequenceDatatype::findByDatatypeId(extendedTypeNum(ExpenseItemizationGroupId));
        if (!nsdt)
        {
            // number sequenece initialization has not occurred for the expense module, create them
            NumberSeqModuleExpense numberSeqModuleExp = new NumberSeqModuleExpense();
            numberSeqModuleExp.load();
        }

        // create the number sequence
        NumberSeqScope numSeqScope = NumberSeqScopeFactory::createGlobalScope();
        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(ExpenseItemizationGroupId), numSeqScope);
        if (!numberSequenceReference)
        {
            NumberSequenceTable::autoCreate(extendedTypeNum(ExpenseItemizationGroupId), numSeqScope);
            numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(ExpenseItemizationGroupId), numSeqScope);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>