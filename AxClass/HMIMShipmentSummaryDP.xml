<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShipmentSummaryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>HMIMShipmentSummaryDP</c> Data provider class for the <c>HMIMShipmentSummary</c> report
/// </summary>
[SRSReportParameterAttribute(classStr(HMIMShipmentSummaryContract))]
class HMIMShipmentSummaryDP extends SRSReportDataProviderBase
{
    HMIMShipmentSummaryTmp shipSummaryHeaderTmp;
    HMIMShipmentSummaryItemTmp shipSummaryLineTmp;
    HMIMShipmentSummaryContract shipSummaryContract;
    WHSShipmentId shipmentId;
    WHSLoadLine loadLine;
    HMIMItemMaterial itemMaterial;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHMIMShipmentSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the header temporary table.
    /// </summary>
    /// <returns>
    /// The <c>HMIMShipmentSummaryTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tableStr(HMIMShipmentSummaryTmp))]
    public HMIMShipmentSummaryTmp getHMIMShipmentSummaryTmp()
    {
        select shipSummaryHeaderTmp;
        return shipSummaryHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHMIMShipSummaryRptLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the line temporary table.
    /// </summary>
    /// <returns>
    /// The <c>HMIMShipSummaryRptLineTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tableStr(HMIMShipmentSummaryItemTmp))]
    public HMIMShipmentSummaryItemTmp getHMIMShipSummaryRptLineTmp()
    {
        select shipSummaryLineTmp;
        return shipSummaryLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        shipSummaryContract = this.parmDataContract() as HMIMShipmentSummaryContract;
        shipmentId = shipSummaryContract.parmShipmentId(); 
            
        this.createHMIMShipmentSummaryHeader();
        this.createHMIMShipmentSummaryLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMIMShipmentSummaryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an HMI shipment summary header.
    /// </summary>    
    private void createHMIMShipmentSummaryHeader()
    {
        shipSummaryHeaderTmp = this.initializeHMIMShipmentSummaryHeader();
        this.insertHMIMShipmentSummaryHeader(shipSummaryHeaderTmp);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHMIMShipmentSummaryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an HMI shipment summary header.
    /// </summary>
    /// <returns>
    /// The initialized <c>HMIMShipmentSummaryTmp</c> HMI shipment summary header record.
    /// </returns>
    protected HMIMShipmentSummaryTmp initializeHMIMShipmentSummaryHeader()
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(shipmentId);
        CompanyInfo companyInfo = CompanyInfo::find();
     
        shipSummaryHeaderTmp.clear();
        shipSummaryHeaderTmp.CarrierName = shipmentTable.carrierName();
        shipSummaryHeaderTmp.CompanyAddress = companyInfo.postalAddress().Address;
        shipSummaryHeaderTmp.CompanyName = companyInfo.Name;
        shipSummaryHeaderTmp.CompanyLogo = CompanyImage::findByRecord(companyInfo, false, CompanyImageType::CompanyLogo).Image;
        shipSummaryHeaderTmp.DestinationAddress = shipmentTable.Address;
        shipSummaryHeaderTmp.ShipmentId = shipmentId;

        return shipSummaryHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHMIMShipmentSummaryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts header data for the report.
    /// </summary>
    /// <param name = "_shipmentSummaryTmp">
    /// The <c>HMIMShipmentSummaryTmp</c> HMI shipment summary header record to insert.
    /// </param>
    protected void insertHMIMShipmentSummaryHeader(HMIMShipmentSummaryTmp _shipmentSummaryTmp)
    {
        _shipmentSummaryTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMIMShipmentSummaryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the HMI shipment summary item lines.
    /// </summary>
    private void createHMIMShipmentSummaryLines()
    {
        var queryRun = new QueryRun(this.buildHMIMShipmentSummaryLinesQuery());

        while (queryRun.next())
        {
            this.getRecordsFromHMIMShipmentSummaryLinesQueryRun(queryRun);

            if (HMIMShipmentSummaryItemTmp::find(shipSummaryLineTmp, itemMaterial.TransportCategoryCode, true))
            {
                this.updateExistingHMIMShipmentSummaryLine(shipSummaryLineTmp);
            }
            else
            {
                this.createHMIMShipmentSummaryLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsFromHMIMShipmentSummaryLinesQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves necessary records from the specified QueryRun object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object from which to retrieve the records.
    /// </param>
    protected void getRecordsFromHMIMShipmentSummaryLinesQueryRun(QueryRun _queryRun)
    {
        loadLine = _queryRun.get(tableNum(WHSLoadLine));
        itemMaterial = _queryRun.get(tableNum(HMIMItemMaterial));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHMIMShipmentSummaryLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query to retrieve HMI shipment summary item lines.
    /// </summary>
    /// <returns>
    /// The instantiated <c>Query</c> object.
    /// </returns>
    protected Query buildHMIMShipmentSummaryLinesQuery()
    {
        var query = new Query();

        var qbdsLoadLine = query.addDataSource(tableNum(WHSLoadLine));
        qbdsLoadLine.addRange(fieldNum(WHSLoadLine, ShipmentId)).value(SysQuery::value(shipmentId));

        var qbdsInventTable = qbdsLoadLine.addDataSource(tableNum(InventTable));
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.addLink(fieldNum(InventTable, ItemId), fieldNum(WHSLoadLine, ItemId));
        qbdsInventTable.addRange(fieldNum(InventTable, HMIMIndicator)).value(SysQuery::value(NoYes::Yes));

        var qbdsHMIMItemMaterial = qbdsInventTable.addDataSource(tableNum(HMIMItemMaterial));
        qbdsHMIMItemMaterial.joinMode(JoinMode::OuterJoin);
        qbdsHMIMItemMaterial.addLink(fieldNum(InventTable, ItemId), fieldNum(HMIMItemMaterial, ItemId));
        qbdsHMIMItemMaterial.addRange(fieldNum(HMIMItemMaterial, RegCode)).value(SysQuery::value(WHSShipmentTable::find(shipmentId).HMIMGetRegCode()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an HMI shipment summary item line.
    /// </summary>
    private void createHMIMShipmentSummaryLine()
    {
        shipSummaryLineTmp = this.initializeHMIMShipmentSummaryLine();
        this.insertHMIMShipmentSummaryLine(shipSummaryLineTmp);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an HMI shipment summary item line.
    /// </summary>
    /// <returns>
    /// The initialized <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item.
    /// </returns>
    protected HMIMShipmentSummaryItemTmp initializeHMIMShipmentSummaryLine()
    {
        shipSummaryLineTmp.clear();
        shipSummaryLineTmp.ADRPoints = loadLine.HMIMHandlingQty() * itemMaterial.Qty * itemMaterial.Multiplier;
        shipSummaryLineTmp.PackingQty = HMIMPackDescription::getPackQtyForLoadLine(loadLine, itemMaterial.RegCode);
        shipSummaryLineTmp.TransportCategoryCode = itemMaterial.TransportCategoryCode;
        shipSummaryLineTmp.Weight = loadLine.displayItemWeight();

        return shipSummaryLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the HMI shipment summary item line.
    /// </summary>
    /// <param name = "_shipmentSummaryItemTmp">
    /// The <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item line to insert.
    /// </param>
    protected void insertHMIMShipmentSummaryLine(HMIMShipmentSummaryItemTmp _shipmentSummaryItemTmp)
    {
        _shipmentSummaryItemTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an HMI shipment summary item line.
    /// </summary>    
    /// <param name = "_shipmentSummaryItemTmp">
    /// The <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item line to update.
    /// </param>
    private void updateExistingHMIMShipmentSummaryLine(HMIMShipmentSummaryItemTmp _shipmentSummaryItemTmp)
    {
        shipSummaryLineTmp = this.updateSumValuesHMIMShipmentSummaryLine(_shipmentSummaryItemTmp);
        this.updateHMIMShipmentSummaryLine(shipSummaryLineTmp);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumValuesHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update values of currently selected HMI shipment summary item line.
    /// </summary>
    /// <param name = "_shipmentSummaryItemTmp">
    /// The <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item line to update.
    /// </param>
    /// <returns>
    /// The updated <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item.
    /// </returns>
    protected HMIMShipmentSummaryItemTmp updateSumValuesHMIMShipmentSummaryLine(HMIMShipmentSummaryItemTmp _shipmentSummaryItemTmp)
    {
        _shipmentSummaryItemTmp.ADRPoints += loadLine.HMIMHandlingQty() * itemMaterial.Qty * itemMaterial.Multiplier;

        _shipmentSummaryItemTmp.PackingQty += HMIMPackDescription::getPackQtyForLoadLine(loadLine, itemMaterial.RegCode);

        _shipmentSummaryItemTmp.Weight += loadLine.displayItemWeight();

        return _shipmentSummaryItemTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHMIMShipmentSummaryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the HMI shipment summary item line.
    /// </summary>
    /// <param name = "_shipmentSummaryItemTmp">
    /// The <c>HMIMShipmentSummaryItemTmp</c> HMI shipment summary item line to update.
    /// </param>
    protected void updateHMIMShipmentSummaryLine(HMIMShipmentSummaryItemTmp _shipmentSummaryItemTmp)
    {
        ttsbegin;
        _shipmentSummaryItemTmp.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>