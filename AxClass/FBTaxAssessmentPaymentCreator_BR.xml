<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentPaymentCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Create the tax assessment payment from the tax assessment.
/// </summary>

class FBTaxAssessmentPaymentCreator_BR
{
    FBTaxAssessmentPaymentCreatorType_BR paymentCreatorType;

    TransDate paymentDate;
    FBTaxAssessment_BR taxAssessment;
    FBTaxAssessmentCalculator_BR calculator;
    FBTaxAssessmentPayment_BR taxAssessmentPayment;

    List taxAssessmentAdjustmentList;
    List fiscalDocumentAdjustmentList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalAdjustment</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalAdjustment()
    {
        ListEnumerator enumerator;
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;
        AmountMST totalAmount = 0;

        // From FBTaxAssessmentAdjustment_BR
        enumerator = taxAssessmentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            taxAssessmentAdjustment = enumerator.current();
            totalAmount += taxAssessmentAdjustment.TaxAmount;
        }

        // From FBFiscalDocumentAdjustment_BR
        enumerator = fiscalDocumentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            fiscalDocumentAdjustment = enumerator.current();
            totalAmount += fiscalDocumentAdjustment.TaxAmount;
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevenueCode</Name>
				<Source><![CDATA[
    private RevenueCode_BR getRevenueCode()
    {
        ListEnumerator enumerator;
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;

        // From FBTaxAssessmentAdjustment_BR
        enumerator = taxAssessmentAdjustmentList.getEnumerator();
        if (enumerator.moveNext())
        {
            taxAssessmentAdjustment = enumerator.current();
            return taxAssessmentAdjustment.generalAdjustmentCode().RevenueCode;
        }

        // From FBFiscalDocumentAdjustment_BR
        enumerator = fiscalDocumentAdjustmentList.getEnumerator();
        if (enumerator.moveNext())
        {
            fiscalDocumentAdjustment = enumerator.current();
            return fiscalDocumentAdjustment.fiscalDocumentAdjustmentCodeView().RevenueCode;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentAdjustmentList</Name>
				<Source><![CDATA[
    protected List parmFiscalDocumentAdjustmentList(List _fiscalDocumentAdjustmentList = fiscalDocumentAdjustmentList)
    {
        fiscalDocumentAdjustmentList = _fiscalDocumentAdjustmentList;

        return fiscalDocumentAdjustmentList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentDate</Name>
				<Source><![CDATA[
    protected TransDate parmPaymentDate(TransDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessment</Name>
				<Source><![CDATA[
    protected FBTaxAssessment_BR parmTaxAssessment(FBTaxAssessment_BR _taxAssessment = taxAssessment)
    {
        taxAssessment = _taxAssessment;

        return taxAssessment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentAdjustmentList</Name>
				<Source><![CDATA[
    protected List parmTaxAssessmentAdjustmentList(List _taxAssessmentAdjustmentList = taxAssessmentAdjustmentList)
    {
        taxAssessmentAdjustmentList = _taxAssessmentAdjustmentList;

        return taxAssessmentAdjustmentList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentCalculator</Name>
				<Source><![CDATA[
    private FBTaxAssessmentCalculator_BR parmTaxAssessmentCalculator(FBTaxAssessmentCalculator_BR _taxAssessmentCalculator = calculator)
    {
        calculator = _taxAssessmentCalculator;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentPayment</Name>
				<Source><![CDATA[
    protected FBTaxAssessmentPayment_BR parmTaxAssessmentPayment(FBTaxAssessmentPayment_BR _taxAssessmentPayment = taxAssessmentPayment)
    {
        taxAssessmentPayment = _taxAssessmentPayment;

        return taxAssessmentPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAssessmentPaymentCreatorType</Name>
				<Source><![CDATA[
    protected FBTaxAssessmentPaymentCreatorType_BR parmTaxAssessmentPaymentCreatorType(FBTaxAssessmentPaymentCreatorType_BR _paymentCreatorType = paymentCreatorType)
    {
        paymentCreatorType = _paymentCreatorType;

        return paymentCreatorType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the payment record from tax assessment or tax adjustment.
    /// </summary>
    /// <returns>
    ///     The tax payment record.
    /// </returns>

    public FBTaxAssessmentPayment_BR run()
    {
        FBTaxAssessmentPayment_BR fbTaxAssessmentPayment;

        ttsBegin;

        switch (paymentCreatorType)
        {
            case FBTaxAssessmentPaymentCreatorType_BR::CreateFromPeriodicAssessment:
                fbTaxAssessmentPayment = this.runCreateFromPeriodicAssessment();
                break;

            case FBTaxAssessmentPaymentCreatorType_BR::CreateFromOtherDebits:
                fbTaxAssessmentPayment = this.runCreateFromOtherDebits();
                break;

            case FBTaxAssessmentPaymentCreatorType_BR::UpdateOtherDebits:
                fbTaxAssessmentPayment = this.runUpdateOtherDebits();
                break;

            case FBTaxAssessmentPaymentCreatorType_BR::CreateFromFiscalDocuments:
                fbTaxAssessmentPayment = this.runCreateForConsumerICMSDIf();
                this.runCreateForConsumerICMSDiffReturns();
                break;
        }

        ttsCommit;

        return fbTaxAssessmentPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreateForConsumerICMSDif</Name>
				<Source><![CDATA[
    private FBTaxAssessmentPayment_BR runCreateForConsumerICMSDif()
    {
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxAssessmentPayment_BR           payment, existentPaymentICMS, existentPaymentPovertyFund, existentPaymentGrouped;
        FiscalDocument_BR                   fiscalDocument;
        FBTaxTransPovertyFund_BR            fbTaxTransPovertyFund;
        FBParametersPerState_BR             parametersForState;
        LogisticsPostalAddress              taxAssessmentPostalAddress;
        boolean                             groupPayment;

        taxAssessmentPostalAddress.CountryRegionId = taxAssessment.bookingPeriod().fiscalEstablishment().postalAddress().CountryRegionId;
        taxAssessmentPostalAddress.State = taxAssessment.State;
        parametersForState = FBParametersPerState_BR::find(taxAssessmentPostalAddress);

        while select sum(TaxAmount), FiscalDocument_BR from fbTaxTrans
                where fbTaxTrans.FBTaxAssessment_BR         == taxAssessment.RecId
                    && fbTaxTrans.Classification            == FBTaxAssessmentClassification_BR::DocumentDebit
            join RecId, FiscalDocumentDate from fiscalDocument
                group by fbTaxTrans.FiscalDocument_BR,
                         fiscalDocument.RecId,
                         fiscalDocument.FiscalDocumentDate,
                         fiscaldocument.AccessKey,
                         fiscaldocument.ThirdPartyName
                where fiscalDocument.RecId == fbTaxTrans.FiscalDocument_BR
            outer join sum(TaxAmount) from fbTaxTransPovertyFund
                where fbTaxTransPovertyFund.FBTaxTrans_BR == fbTaxTrans.RecId
            outer join count(RecId) from existentPaymentICMS
                where existentPaymentICMS.FBTaxAssessment_BR == taxAssessment.RecId
                    && existentPaymentICMS.FiscalDocument_BR == fiscalDocument.RecId
                    && existentPaymentICMS.PaymentByDocumentType == FBTaxAssessmentPaymentByDocumentType_BR::ICMSOnly
            outer join count(RecId) from existentPaymentPovertyFund
                where existentPaymentPovertyFund.FBTaxAssessment_BR == taxAssessment.RecId
                    && existentPaymentPovertyFund.FiscalDocument_BR == fiscalDocument.RecId
                    && existentPaymentPovertyFund.PaymentByDocumentType == FBTaxAssessmentPaymentByDocumentType_BR::PovertyFundOnly
            outer join count(RecId) from existentPaymentGrouped
                where existentPaymentGrouped.FBTaxAssessment_BR == taxAssessment.RecId
                    && existentPaymentGrouped.FiscalDocument_BR == fiscalDocument.RecId
                    && existentPaymentGrouped.PaymentByDocumentType == FBTaxAssessmentPaymentByDocumentType_BR::ICMSAndPovertyFund
        {
            groupPayment = parametersForState.GroupICMSDifPaymentByDocument
                           && existentPaymentPovertyFund.RecId == 0
                           && existentPaymentICMS.RecId == 0;

            if (groupPayment)
            {
                if (fbTaxTrans.TaxAmount && existentPaymentGrouped.RecId == 0)
                {
                    payment = FBTaxASsessmentPaymentCreator_BR::cratePaymentFromFiscalDocument(fiscalDocument, fbTaxTrans.TaxAmount, taxAssessment, FBTaxAssessmentPaymentByDocumentType_BR::ICMSAndPovertyFund);
                }
            }
            else if (existentPaymentGrouped.RecId == 0)
            {
                if (fbTaxTrans.TaxAmount && existentPaymentICMS.RecId == 0)
                {
                    payment = FBTaxAssessmentPaymentCreator_BR::cratePaymentFromFiscalDocument(fiscalDocument, fbTaxTrans.TaxAmount - fbTaxTransPovertyFund.TaxAmount, taxAssessment, FBTaxAssessmentPaymentByDocumentType_BR::ICMSOnly);
                }

                if (fbTaxTransPovertyFund.TaxAmount && existentPaymentPovertyFund.RecId == 0)
                {
                    FBTaxAssessmentPaymentCreator_BR::cratePaymentFromFiscalDocument(fiscalDocument, fbTaxTransPovertyFund.TaxAmount, taxAssessment, FBTaxAssessmentPaymentByDocumentType_BR::PovertyFundOnly);
                }
            }
        }

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreateFromOtherDebits</Name>
				<Source><![CDATA[
    private FBTaxAssessmentPayment_BR runCreateFromOtherDebits()
    {
        FBTaxAssessmentPayment_BR payment;
        AmountMST openAdjustmentAmountToPay;
        RevenueCode_BR revenueCode;

        if (this.validateRevenueCode() == false)
        {
            error("@FBK309");
            return payment;
        }

        revenueCode = this.getRevenueCode();
        openAdjustmentAmountToPay = this.calculateTotalAdjustment();

        if (openAdjustmentAmountToPay  == 0)
        {
            return payment;
        }

        payment.initFromTaxAssessment(taxAssessment);
        payment.RevenueCode = revenueCode;
        payment.PaymentType = FBTaxAssessmentPaymentType_BR::OtherDebits;
        payment.TransDate = paymentDate;
        payment.TaxAmountToPay = openAdjustmentAmountToPay;
        payment.insert();

        this.updateTaxTransOtherDebits(payment);

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreateFromPeriodicAssessment</Name>
				<Source><![CDATA[
    private FBTaxAssessmentPayment_BR runCreateFromPeriodicAssessment()
    {
        FBTaxAssessmentPayment_BR payment;
        AmountMST openPeriodicAssessmentAmountToPay;

        openPeriodicAssessmentAmountToPay = calculator.getOpenPeriodicAssessmentAmountToPay();

        if (openPeriodicAssessmentAmountToPay  == 0)
            return payment;

        payment.initFromTaxAssessment(taxAssessment);
        payment.PaymentType = FBTaxAssessmentPaymentType_BR::Periodic;
        payment.TransDate = paymentDate;

        if (taxAssessment.ContribAssessmentRegimen == FBContribAssessmentRegimen_BR::Both)
        {
            var calculatorPisCofins = calculator as FBTaxAssessmentCalculatorPISCOFINS_BR;

            if (!FBTaxAssessmentPayment_BR::findByTaxAssessmentContribRegimen(taxAssessment.RecId, FBContribAssessmentRegimen_BR::NonCumulative)
                && calculatorPisCofins.getNonCumulativeTaxAmountToPay())
            {
                payment.ContribAssessmentRegimen = FBContribAssessmentRegimen_BR::NonCumulative;
                payment.TaxAmountToPay = calculatorPisCofins.getNonCumulativeTaxAmountToPay();
                payment.insert();

                this.updateTaxTransFromPeriodicAssessment(payment);
            }

            if (!FBTaxAssessmentPayment_BR::findByTaxAssessmentContribRegimen(taxAssessment.RecId, FBContribAssessmentRegimen_BR::Cumulative)
                && calculatorPisCofins.getCumulativeTaxAmountToPay())
            {
                payment.ContribAssessmentRegimen = FBContribAssessmentRegimen_BR::Cumulative;
                payment.TaxAmountToPay = calculatorPisCofins.getCumulativeTaxAmountToPay();
                payment.insert();

                this.updateCumulativeTaxTransFromAssessment(payment);
            }
        }
        else
        {
            payment.TaxAmountToPay = openPeriodicAssessmentAmountToPay;
            payment.insert();

            if (taxAssessment.ContribAssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative)
            {
                this.updateCumulativeTaxTransFromAssessment(payment);
            }
            else
            {
                this.updateTaxTransFromPeriodicAssessment(payment);
            }
        }

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdateOtherDebits</Name>
				<Source><![CDATA[
    private FBTaxAssessmentPayment_BR runUpdateOtherDebits()
    {
        FBTaxAssessmentPayment_BR payment;
        AmountMST openAdjustmentAmountToPay;
        RevenueCode_BR revenueCode;

        if (this.validateRevenueCode() == false)
        {
            error("@FBK309");
            return payment;
        }

        revenueCode = this.getRevenueCode();
        openAdjustmentAmountToPay = this.calculateTotalAdjustment();

        payment = this.parmTaxAssessmentPayment();

        ttsBegin;

        payment.TaxAmountToPay = openAdjustmentAmountToPay;
        payment.RevenueCode = revenueCode;
        payment.update();

        ttsCommit;

        this.updateTaxTransOtherDebits(payment);

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCumulativeTaxTransFromAssessment</Name>
				<Source><![CDATA[
    private void updateCumulativeTaxTransFromAssessment(FBTaxAssessmentPayment_BR _taxPayment)
    {
        FBTaxTrans_BR                       taxTrans;
        FBTaxAssessmentAdjustment_BR        taxAdjustment;
        FBTaxTransTaxAssessmentPayment_BR   taxTransTaxAssessmentPayment, existentTaxTransTaxAssessmentPayment;
        RecId                               taxPaymentRecId = _taxPayment.RecId;

        // All documents
        insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
            select RecId, taxPaymentRecId
            from taxTrans
            where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                && taxTrans.FBTaxAssessmentAdjustment_BR == 0
                // Get only the transactions used in the cumulative calculation
                && (taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeContribution
                ||  taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeWithholding
                ||  taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeWhtFromPreviousPeriod
                ||  taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeExempt
                ||  taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeNonRecoverable)
                notExists join existentTaxTransTaxAssessmentPayment
                    where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                        && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;

        // General adjustments with create payment false
        insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
            select RecId, taxPaymentRecId
            from taxTrans
            where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                exists join taxAdjustment
                    where taxAdjustment.FBTaxAssessment_BR == taxTrans.FBTaxAssessment_BR
                        && taxAdjustment.RecId == taxTrans.FBTaxAssessmentAdjustment_BR
                        && taxAdjustment.CreatePayment == NoYes::No
                        // Get only the adjustments used in the cumulative calculation
                        && (taxTrans.Classification == FBTaxAssessmentClassification_BR::CumulativeDeduction
                        // If only cumulative we need to consider GeneralDebitAdjustment and GeneralDebitReversalAdjustment too.
                        || (taxAssessment.ContribAssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative
                        &&  (taxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitAdjustment
                        ||   taxTrans.Classification == FBTaxAssessmentClassification_BR::GeneralDebitReversalAdjustment)))
                notExists join existentTaxTransTaxAssessmentPayment
                    where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                        && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransFromPeriodicAssessment</Name>
				<Source><![CDATA[
    private void updateTaxTransFromPeriodicAssessment(FBTaxAssessmentPayment_BR _taxPayment)
    {
        FBTaxTrans_BR                       taxTrans;
        FBTaxAssessmentAdjustment_BR        taxAdjustment;
        FBFiscalDocumentAdjustment_BR       fiscaldocumentTaxAdjustment;
        FBTaxTransTaxAssessmentPayment_BR   taxTransTaxAssessmentPayment, existentTaxTransTaxAssessmentPayment;
        RecId                               taxPaymentRecId = _taxPayment.RecId;

        // All documents
        insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
        select RecId, taxPaymentRecId
            from taxTrans
                where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                    && taxTrans.FBTaxAssessmentAdjustment_BR == 0
                    && taxTrans.FBFiscalDocumentAdjustment_BR == 0
                    // Exclude all cumulative transaction
                    && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeContribution
                    && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeWithholding
                    && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeWhtFromPreviousPeriod
                    && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeExempt
                    && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeNonRecoverable
                notExists join existentTaxTransTaxAssessmentPayment
                    where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                        && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;

        // General adjustments with create payment false
        insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
        select RecId, taxPaymentRecId
            from taxTrans
                where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                exists join taxAdjustment
                    where taxAdjustment.FBTaxAssessment_BR == taxTrans.FBTaxAssessment_BR
                        && taxAdjustment.RecId == taxTrans.FBTaxAssessmentAdjustment_BR
                        && taxAdjustment.CreatePayment == NoYes::No
                        // Exclude all cumulative transactions
                        && taxTrans.Classification != FBTaxAssessmentClassification_BR::CumulativeDeduction
                notExists join existentTaxTransTaxAssessmentPayment
                    where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                        && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;

        // Fiscal document adjustments with create payment false
        insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
            select RecId, taxPaymentRecId
                from taxTrans
                    where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                        exists join fiscaldocumentTaxAdjustment
                            where fiscaldocumentTaxAdjustment.FBTaxAssessment_BR == taxTrans.FBTaxAssessment_BR
                                && fiscaldocumentTaxAdjustment.RecId == taxTrans.FBFiscalDocumentAdjustment_BR
                                && fiscaldocumentTaxAdjustment.CreatePayment == NoYes::No
                        notExists join existentTaxTransTaxAssessmentPayment
                            where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                                && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransOtherDebits</Name>
				<Source><![CDATA[
    private void updateTaxTransOtherDebits(FBTaxAssessmentPayment_BR _taxPayment)
    {
        ListEnumerator                      enumerator;
        FBTaxAssessmentAdjustment_BR        taxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR       fiscalDocumentAdjustment;
        FBTaxTrans_BR                       taxTrans;
        FBTaxTransTaxAssessmentPayment_BR   taxTransTaxAssessmentPayment, existentTaxTransTaxAssessmentPayment;
        RecId                               taxPaymentRecId = _taxPayment.RecId;

        delete_from taxTransTaxAssessmentPayment
            exists join taxTrans
                where taxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                    && taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                    && taxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == _taxPayment.RecId;

        // From FBTaxAssessmentAdjustment_BR
        enumerator = taxAssessmentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            taxAssessmentAdjustment = enumerator.current();

            insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
                select RecId, taxPaymentRecId
                from taxTrans
                where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                    && TaxTrans.FBTaxAssessmentAdjustment_BR == taxAssessmentAdjustment.RecId
                    notExists join existentTaxTransTaxAssessmentPayment
                        where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                            && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;
        }

        // From FBFiscalDocumentAdjustment_BR
        enumerator = fiscalDocumentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            fiscalDocumentAdjustment = enumerator.current();

            insert_recordset taxTransTaxAssessmentPayment (FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
                select RecId, taxPaymentRecId
                from taxTrans
                where taxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                    && taxTrans.FBFiscalDocumentAdjustment_BR == fiscalDocumentAdjustment.RecId
                    notExists join existentTaxTransTaxAssessmentPayment
                        where existentTaxTransTaxAssessmentPayment.FBTaxTrans_BR == taxTrans.RecId
                            && existentTaxTransTaxAssessmentPayment.FBTaxAssessmentPayment_BR == taxPaymentRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRevenueCode</Name>
				<Source><![CDATA[
    private boolean validateRevenueCode()
    {
        ListEnumerator enumerator;
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;
        RevenueCode_BR revenueCode;
        boolean alreadyFoundRevenueCode = false;

        // From FBTaxAssessmentAdjustment_BR
        enumerator = taxAssessmentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            taxAssessmentAdjustment = enumerator.current();

            if (alreadyFoundRevenueCode == true)
            {
                if (revenueCode != taxAssessmentAdjustment.generalAdjustmentCode().RevenueCode)
                {
                    return false;
                }
            }
            else
            {
                alreadyFoundRevenueCode = true;
                revenueCode = taxAssessmentAdjustment.generalAdjustmentCode().RevenueCode;
            }
        }

        // From FBFiscalDocumentAdjustment_BR
        enumerator = fiscalDocumentAdjustmentList.getEnumerator();
        while (enumerator.moveNext())
        {
            fiscalDocumentAdjustment = enumerator.current();

            if (alreadyFoundRevenueCode == true)
            {
                if (revenueCode != fiscalDocumentAdjustment.fiscalDocumentAdjustmentCodeView().RevenueCode)
                {
                    return false;
                }
            }
            else
            {
                alreadyFoundRevenueCode = true;
                revenueCode = fiscalDocumentAdjustment.fiscalDocumentAdjustmentCodeView().RevenueCode;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cratePaymentFromFiscalDocument</Name>
				<Source><![CDATA[
	/// <summary>
    ///     Creates a tax assessment payment associated with a fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     The fiscal document the payment will be reffered to.
    /// </param>
    /// <param name="_amountToPay">
    ///     The amount to be paid.
    /// </param>
    /// <param name="_taxAssessment">
    ///     The tax assessment the payment will be reffered to.
    /// </param>
    /// <param name="_paymentByDocumentType">
    ///     Indicates the type of payment by document.
    /// </param>
    /// <returns>
    ///     An instance of the <c>FBTaxAssessmentPayment_BR</c> payment.
    /// </returns>

    public static FBTaxAssessmentPayment_BR cratePaymentFromFiscalDocument(
        FiscalDocument_BR                       _fiscalDocument,
        TaxAmount                               _amountToPay,
        FBTaxAssessment_BR                      _taxAssessment,
        FBTaxAssessmentPaymentByDocumentType_BR _paymentByDocumentType = FBTaxAssessmentPaymentByDocumentType_BR::ICMSOnly)
    {
        FBTaxAssessmentPayment_BR           payment;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxTransTaxAssessmentPayment_BR   fbTaxTransTaxAssessmentPayment;
        RecId                               paymentRecId;

        payment.clear();
        payment.PaymentByDocumentType = _paymentByDocumentType;
        payment.initFromTaxAssessment(_taxAssessment);
        payment.PaymentType = FBTaxAssessmentPaymentType_BR::ByDocument;
        payment.TransDate = _fiscalDocument.FiscalDocumentDate;
        payment.TaxAmountToPay = _amountToPay;
        payment.Description = strFmt("@Brazil:FBIcmsDifAccessKeyAndCustomer", _fiscalDocument.AccessKey, _fiscalDocument.ThirdPartyName);
	payment.FiscalDocument_BR = _fiscalDocument.RecId;
        payment.insert();

        paymentRecId = payment.RecId;

        insert_recordset fbTaxTransTaxAssessmentPayment(FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
            select RecId, paymentRecId
            from fbTaxTrans
            where  fbTaxTrans.FBTaxAssessment_BR == _taxAssessment.RecId
                && fbTaxTrans.Classification     == FBTaxASsessmentClassification_BR::DocumentDebit
                && fbTaxTrans.FiscalDocument_BR  == _fiscalDocument.RecId;

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>FBTaxAssessmentPaymentCreator_BR</c> object and initialize it for payment creation from tax assessment.
    /// </summary>
    /// <param name="_taxAssessment">
    ///     The <c>FBTaxAssessment_BR</c> record.
    /// </param>
    /// <param name="_paymentDate">
    ///     The payment date.
    /// </param>
    /// <param name="_taxAssessmentAdjustmentList">
    ///     The list containing the tax assessment adjustments to include in the payment.
    /// </param>
    /// <param name="_fiscalDocumentAdjustmentList">
    ///     The list containing the fiscal document adjustments to include in the payment.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBTaxAssessmentPaymentCreator_BR</c> class.
    /// </returns>

    public static FBTaxAssessmentPaymentCreator_BR createFromAdjustment(FBTaxAssessment_BR _taxAssessment, TransDate _paymentDate, List _taxAssessmentAdjustmentList, List _fiscalDocumentAdjustmentList)
    {
        FBTaxAssessmentPaymentCreator_BR paymentCreator = new FBTaxAssessmentPaymentCreator_BR();

        paymentCreator.parmTaxAssessmentPaymentCreatorType(FBTaxAssessmentPaymentCreatorType_BR::CreateFromOtherDebits);
        paymentCreator.parmTaxAssessment(_taxAssessment);
        paymentCreator.parmPaymentDate(_paymentDate);
        paymentCreator.parmTaxAssessmentAdjustmentList(_taxAssessmentAdjustmentList);
        paymentCreator.parmFiscalDocumentAdjustmentList(_fiscalDocumentAdjustmentList);

        return paymentCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromFiscalDocuments</Name>
				<Source><![CDATA[
	/// <summary>
    ///     Creates the <c>FBTaxAssessmentPaymentCreator_BR</c> object and initialize it for payment creation from fiscal documents.
    /// </summary>
    /// <param name="_taxAssessment">
    ///     The <c>FBTaxAssessment_BR</c> record.
    /// </param>
    /// <param name="_paymentDate">
    ///     The payment date.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBTaxAssessmentPaymentCreator_BR</c> class.
    /// </returns>
    public static FBTaxAssessmentPaymentCreator_BR createFromFiscalDocuments(FBTaxAssessment_BR _taxAssessment, TransDate _paymentDate)
    {
        FBTaxAssessmentPaymentCreator_BR paymentCreator = new FBTaxAssessmentPaymentCreator_BR();

        paymentCreator.parmTaxAssessmentPaymentCreatorType(FBTaxAssessmentPaymentCreatorType_BR::CreateFromFiscalDocuments);
        paymentCreator.parmTaxAssessment(_taxAssessment);
        paymentCreator.parmPaymentDate(_paymentDate);

        return paymentCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPeriodicAssessment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>FBTaxAssessmentPaymentCreator_BR</c> object and initialize it for payment creation from tax assessment.
    /// </summary>
    /// <param name="_taxAssessment">
    ///     The <c>FBTaxAssessment_BR</c> record.
    /// </param>
    /// <param name="_paymentDate">
    ///     The payment date.
    /// </param>
    /// <param name="_taxAssessmentCalculator">
    ///     The <c>FBTaxAssessmentCalculator_BR</c> calculator.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBTaxAssessmentPaymentCreator_BR</c> class.
    /// </returns>

    public static FBTaxAssessmentPaymentCreator_BR createFromPeriodicAssessment(FBTaxAssessment_BR _taxAssessment, TransDate _paymentDate, FBTaxAssessmentCalculator_BR _taxAssessmentCalculator)
    {
        FBTaxAssessmentPaymentCreator_BR paymentCreator = new FBTaxAssessmentPaymentCreator_BR();

        paymentCreator.parmTaxAssessmentPaymentCreatorType(FBTaxAssessmentPaymentCreatorType_BR::CreateFromPeriodicAssessment);
        paymentCreator.parmTaxAssessment(_taxAssessment);
        paymentCreator.parmPaymentDate(_paymentDate);
        paymentCreator.parmTaxAssessmentCalculator(_taxAssessmentCalculator);

        return paymentCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>FBTaxAssessmentPaymentCreator_BR</c> object and initialize it for payment creation from tax assessment.
    /// </summary>
    /// <param name="_taxAssessment">
    ///     The <c>FBTaxAssessment_BR</c> record.
    /// </param>
    /// <param name="_taxAssessmentPayment">
    ///     The <c>FBTaxAssessmentPayment_BR</c> record.
    /// </param>
    /// <param name="_taxAssessmentAdjustmentList">
    ///     The list containing the tax assessment adjustments to include in the payment.
    /// </param>
    /// <param name="_fiscalDocumentAdjustmentList">
    ///     The list containing the fiscal document adjustments to include in the payment.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBTaxAssessmentPaymentCreator_BR</c> class.
    /// </returns>

    public static FBTaxAssessmentPaymentCreator_BR updateFromAdjustment(FBTaxAssessment_BR _taxAssessment, FBTaxAssessmentPayment_BR _taxAssessmentPayment, List _taxAssessmentAdjustmentList, List _fiscalDocumentAdjustmentList)
    {
        FBTaxAssessmentPaymentCreator_BR paymentCreator = new FBTaxAssessmentPaymentCreator_BR();

        paymentCreator.parmTaxAssessmentPaymentCreatorType(FBTaxAssessmentPaymentCreatorType_BR::UpdateOtherDebits);
        paymentCreator.parmTaxAssessment(_taxAssessment);
        paymentCreator.parmTaxAssessmentPayment(_taxAssessmentPayment);
        paymentCreator.parmTaxAssessmentAdjustmentList(_taxAssessmentAdjustmentList);
        paymentCreator.parmFiscalDocumentAdjustmentList(_fiscalDocumentAdjustmentList);

        return paymentCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreateForConsumerICMSDiffReturns</Name>
				<Source><![CDATA[
    private void runCreateForConsumerICMSDiffReturns()
    {
        FBTaxTrans_BR fbTaxTrans, origFBTaxTrans;
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine, origFiscalDocumentLine;
        FBTaxTransPovertyFund_BR fbTaxTransPovertyFund;
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;
        SalesLine salesLine;
        FBTaxAssessmentPayment_BR paymentForOrigFiscalDocument;
        FBTaxTransTaxAssessmentPayment_BR fbTaxTransPayment;
        CustInvoiceTrans origCustInvoiceTrans;

        while select sum(TaxAmount), FiscalDocument_BR from fbTaxTrans
                where fbTaxTrans.FBTaxAssessment_BR == taxAssessment.RecId
                    && fbTaxTrans.Classification == FBTaxAssessmentClassification_BR::DocumentCredit
            join RecId from fiscalDocument
                where fiscalDocument.RecId == fbTaxTrans.FiscalDocument_BR
                    && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                    && fiscalDocument.RefTableId == tableNum(CustInvoiceJour)
            join RecId from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            join  RecId, PaymentByDocumentType, Voucher from paymentForOrigFiscalDocument
                group by fbTaxTrans.FiscalDocument_BR,
                         fiscalDocument.RecId,
                         fiscalDocumentLine.RecId,
                         paymentForOrigFiscalDocument.RecId,
                         paymentForOrigFiscalDocument.PaymentByDocumentType,
                         paymentForOrigFiscalDocument.Voucher
                where paymentForOrigFiscalDocument.FBTaxAssessment_BR == taxAssessment.RecId
            outer join sum(TaxAmount) from fbTaxTransPovertyFund
                where fbTaxTransPovertyFund.FBTaxTrans_BR == fbTaxTrans.RecId
            exists join salesLine
                where salesLine.InventTransId == fiscalDocumentLine.InventTransId 
            join origCustInvoiceTrans
                where origCustInvoiceTrans.InventTransId == salesLine.InventTransIdReturn
            join origFiscalDocumentLine
                where origFiscalDocumentLine.RefTableId == origCustInvoiceTrans.TableId
                    && origFiscalDocumentLine.RefRecId == origCustInvoiceTrans.RecId
            join origFBTaxTrans
                where origFBTaxTrans.FiscalDocument_BR == origFiscalDocumentLine.FiscalDocument
            join fbTaxTransPayment
                where fbTaxTransPayment.FBTaxAssessmentPayment_BR == paymentForOrigFiscalDocument.RecId
                    && fbTaxTransPayment.FBTaxTrans_BR == origFBTaxTrans.RecId
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.RecId == fbTaxTrans.FiscalDocumentTaxTrans_BR
        {
            switch (paymentForOrigFiscalDocument.PaymentByDocumentType)
            {
                case FBTaxAssessmentPaymentByDocumentType_BR::ICMSAndPovertyFund:
                    FBTaxAssessmentPaymentCreator_BR::adjustPaymentFromReturnFiscalDocument(
                        fiscalDocument, 
                        fiscalDocumentLine, 
                        fbTaxTrans.TaxAmount, 
                        paymentForOrigFiscalDocument);
                    break;
                case FBTaxAssessmentPaymentByDocumentType_BR::ICMSOnly:
                    FBTaxAssessmentPaymentCreator_BR::adjustPaymentFromReturnFiscalDocument(
                        fiscalDocument, 
                        fiscalDocumentLine, 
                        fbTaxTrans.TaxAmount - fbTaxTransPovertyFund.TaxAmount, 
                        paymentForOrigFiscalDocument);
                    break;
                case FBTaxAssessmentPaymentByDocumentType_BR::PovertyFundOnly:
                    FBTaxAssessmentPaymentCreator_BR::adjustPaymentFromReturnFiscalDocument(
                        fiscalDocument, 
                        fiscalDocumentLine, 
                        fbTaxTransPovertyFund.TaxAmount, 
                        paymentForOrigFiscalDocument);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPaymentFromReturnFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts a tax assessment payment associated with a fiscal document to the line reversal amount.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     The return fiscal document the payment will be reffered to.
    /// </param>
    /// <param name="_fiscalDocumentLine">
    ///     The fiscal document reversal line the payment will be reffered to.
    /// </param>
    /// <param name="_amountToAdjust">
    ///     The amount to be reversed.
    /// </param>
    /// <param name="_payment">
    ///     The payment which reverse is refer to.
    /// </param>
    private static void adjustPaymentFromReturnFiscalDocument(
        FiscalDocument_BR                       _fiscalDocument,
        FiscalDocumentLine_BR                   _fiscalDocumentLine,
        TaxAmount                               _amountToAdjust,
        FBTaxAssessmentPayment_BR               _payment)
    {
        if (_payment.Voucher != '')
        {
            warning(strFmt("@Brazil:OrigFDHasPaymentAlreadyPostedValidation", _payment.Description));
            return;
        }

        FBTaxAssessmentPayment_BR payment;

        ttsbegin;
        select firstonly forupdate payment
            where payment.RecId == _payment.RecId;

        payment.TaxAmountToPay = max(0, payment.TaxAmountToPay - _amountToAdjust);

        if (payment.TaxAmountToPay == 0)
        {
            payment.delete();
            ttscommit;

            return;
        }
        else
        {
            payment.update();
        }

        RecId paymentRecId = payment.RecId;

        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxTransTaxAssessmentPayment_BR   fbTaxTransTaxAssessmentPayment;
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        insert_recordset fbTaxTransTaxAssessmentPayment(FBTaxTrans_BR, FBTaxAssessmentPayment_BR)
            select RecId, paymentRecId
                from fbTaxTrans
                where  fbTaxTrans.FBTaxAssessment_BR == payment.FBTaxAssessment_BR
                    && fbTaxTrans.Classification     == FBTaxASsessmentClassification_BR::DocumentCredit
                    && fbTaxTrans.FiscalDocument_BR  == _fiscalDocument.RecId
            exists join fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.RecId == fbTaxTrans.FiscalDocumentTaxTrans_BR
                    && fiscalDocumentTaxTrans.FiscalDocumentLine == _fiscalDocumentLine.RecId;

        ttscommit;

        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>