<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistFormDisplay_MultiHeader_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>AccDistFormDisplay</c> class implementation to display multiple headers in one form.
/// </summary>
[SysClassNameAttribute(classStr(Object))]
class AccDistFormDisplay_MultiHeader_RU extends AccDistFormDisplay implements SysIConditionalExtension
{
    SourceDocumentSet_RU rootImplementation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterArgsSet_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes args object paramater to refer to current instance.
    /// </summary>
    /// <param name="_args"><c>Args</c> class instance.</param>
    protected void afterArgsSet_RU(Args _args)
    {
        super(_args);
        _args.parmObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSourceData</Name>
				<Source><![CDATA[
        protected boolean hasSourceData()
    {
        boolean ret;
        Common oldImplementation;
        oldImplementation = implementation.data();
        implementation = rootImplementation.findFirstDocumentImplementation();
        while (implementation && ! ret)
        {
            ret = super();
            next implementation;
        }
        implementation = oldImplementation;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
        protected void initialize(Args _args)
    {
        Common  record;
        Args    newArgs = new Args();
        rootImplementation = _args.record();
        record = rootImplementation.findFirstDocumentImplementation();
        Args::copyArgs(_args, newArgs);
        newArgs.record(record);
        super(newArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an extension can be applied under the specified extension context.
    /// </summary>
    /// <param name="_value">
    /// The extension context.
    /// </param>
    /// <returns>
    /// true if the extension can be applied in the specified extension context; otherwise, false.
    /// </returns>
    boolean isApplicableTo(AnyType _value)
    {
        Args args = _value;
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
               SourceDocumentSet_RU::implementedBy(args.dataset());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootImplementation</Name>
				<Source><![CDATA[
        public SourceDocumentSet_RU parmRootImplementation()
    {
        return rootImplementation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>