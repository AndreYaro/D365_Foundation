<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GiroPrintMgmtFormLetterController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GiroPrintMgmtFormLetterController</c> class is the base controller class that is extended by
///    reports that need to use form letter style of print management with GIRO.
/// </summary>
/// <remarks>
///    Print management can be implemented by directly using <c>PrintMgmtReportRun</c> class or using the
///    <c>FormLetter</c> approach. Use this base class for FormLetter scenario that need GIRO payment
///    stubs.
/// </remarks>
public abstract class GiroPrintMgmtFormLetterController extends SrsPrintMgmtFormLetterController
{
    RecId giroReportTmpRecId;
    RefRecId duplicateInvoiceRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGiroArgs</Name>
				<Source><![CDATA[
    protected Args getGiroArgs()
    {
        Args giroArgs = new Args();

        giroArgs.caller(this);
        // Set  the record in the temp table where the GIRO report will *get* the GIRO data.
        // Make sure to add mappings to the GiroReport table map for the record.
        giroArgs.parm(int642str(giroReportTmpRecId));
        giroArgs.parmEnum(this.getGiroType());
        giroArgs.parmEnumType(enumNum(PaymentStub));
        giroArgs.object(this.getGiroPrintSettings());

        return giroArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroPrintSettings</Name>
				<Source><![CDATA[
    protected SRSPrintDestinationSettings getGiroPrintSettings()
    {
    #File

        // Make a copy of the main report's printer settings
        SRSPrintDestinationSettings giroPrintSettings =
                new SRSPrintDestinationSettings(formLetterReport.parmReportRun().parmReportRunController().parmReportContract().parmPrintSettings().pack());
        str filePath;
        str fileName;
        str fileExtension;

        str fileNameJoin(str _path, str _name, str _extension)
        {
            return _path +  _name + _extension;
        }

        giroPrintSettings.numberOfCopies(1);

        // Append "giro" to the filename
        if (fileNameTrim(giroPrintSettings.fileName()))
        {
            [filePath, fileName, fileExtension] = fileNameSplit(giroPrintSettings.fileName());
            giroPrintSettings.fileName(fileNameJoin(filePath, fileName + 'giro', fileExtension));
        }

        // If sending to e-mail, save the GIRO report as a temp file and attach to the same e-mail as the main report
        // Add this back when we have support for more than one attachement
        if (false && giroPrintSettings.printMediumType() == SRSPrintMediumType::Email)
        {
            filePath = SysFileStoreParameters::find().FilePath;
            if (!filePath)
            {
                throw error(Error::missingParameter(this));
            }
            if (!strEndsWith(filePath, #FilePathDelimiter))
            {
                filePath += #FilePathDelimiter;
            }
            fileExtension = SRSPrintDestinationSettings::findFileNameType(giroPrintSettings.fileFormat(), giroPrintSettings.imageFileFormat());
            giroPrintSettings.fileName(fileNameNext(fileNameJoin(filePath, strFmt('GiroReport%1', giroReportTmpRecId), fileExtension)));
            giroPrintSettings.printMediumType(SRSPrintMediumType::File);
        }

        return giroPrintSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroType</Name>
				<Source><![CDATA[
    public abstract PaymentStub getGiroType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report for the print management setting currently loaded.
    /// </summary>
    /// <remarks>
    ///    The <c>outReports</c> method loops over print management settings and calls this method for each
    ///    print management setting loaded.Override this method to modify parameters for each print
    ///    settings.If you want to provide different footer text for each print settings loaded for a given
    ///    report.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Thrown if print management object has not been initialized.
    /// </exception>
    protected void outputReport()
    {
        int copy;
        int copies;
        Args giroArgs;

        if (this.parmCancelRun())
        {
            return;
        }

        if (giroReportTmpRecId)
        {
            // produce copies one-at-a-time so GIRO is interleaved, but only for the printer
            copies = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings().printMediumType() == SRSPrintMediumType::Printer ?
                    formLetterReport.getCurrentPrintSetting().parmNumberOfCopies() : 1;
            formLetterReport.getCurrentPrintSetting().parmNumberOfCopies(1);

            for (copy = 1; copy <= copies; copy++)
            {
                super();

                giroArgs = this.getGiroArgs();

                if (formLetterReport.getCurrentPrintSetting().parmPrintJobSettings().printMediumType() == SRSPrintMediumType::Screen)
                {
                    // Since GIRO is paired with another "main" report, we won't stop or redirect
                    // output with GIRO, we'll keep them together.
                    giroArgs.object(formLetterReport.parmReportRun().incScreenOutput(giroArgs.object(), null));
                }

                this.startGiroReport(giroArgs);
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDuplicateInvoiceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmDuplicateInvoiceRecId(RefRecId _duplicateInvoiceRecId = duplicateInvoiceRecId)
    {
        duplicateInvoiceRecId = _duplicateInvoiceRecId;

        return duplicateInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOutputReports</Name>
				<Source><![CDATA[
    protected void runOutputReports()
    {
        SrsReportPreProcessedDetails preProcessedDetails;
        GiroReportTmp giroReportTmp;
        RecId preProcessedId;

        giroReportTmpRecId = 0;

        if (GiroReportController::needGiroReport(this.getGiroType()))
        {
            preProcessedId = this.parmReportContract().parmReportExecutionInfo().parmRdpPreProcessedId();

            // Get the RecId of the GiroReportTmp table using the
            // transaction ID of the RDP preprocessed report it was created in.
            select RecId
                from giroReportTmp
                exists join preProcessedDetails
                    where preProcessedDetails.RecId == preProcessedId &&
                            preProcessedDetails.CreatedTransactionId == giroReportTmp.CreatedTransactionId;

            giroReportTmpRecId = giroReportTmp.RecId;
        }

        super();

        if (giroReportTmpRecId != 0)
        {
            delete_from giroReportTmp 
                where giroReportTmp.RecId == giroReportTmpRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startGiroReport</Name>
				<Source><![CDATA[
    protected void startGiroReport(Args _args)
    {
        new MenuFunction(menuitemOutputStr(GiroReport), MenuItemType::Output).run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>