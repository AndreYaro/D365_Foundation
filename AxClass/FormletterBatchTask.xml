<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterBatchTask</c> class is the base class for all batch tasks that are performed during batch posting.
/// </summary>
abstract public class FormletterBatchTask
extends RunBaseBatch implements BatchRetryable
{
    FormLetterContract  formLetterContract;
    FormletterType      formletterType;
    container           packedContract;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        formletterType,
        packedContract
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>FormletterServiceBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    A container that has the current instance of the <c>FormletterServiceBatchTask</c> class.
    /// </returns>
    public container pack()
    {
        if (formLetterContract)
        {
            packedContract   = formLetterContract.pack();
        }
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterContract</Name>
				<Source><![CDATA[
        public FormLetterContract parmFormletterContract(FormLetterContract _formLetterContract = formLetterContract)
    {
        formLetterContract = _formLetterContract;
        return formLetterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterType</Name>
				<Source><![CDATA[
        public FormletterType parmFormletterType(FormletterType _formletterType = formletterType)
    {
        formletterType = _formletterType;
        return formletterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch task is run on the server.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// Classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    /// and return false if a batch task is to be run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter to the current instance of the
    ///    <c>FormLetterMultiThread</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container to use to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if the deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                if (packedContract)
                {
                    formLetterContract = FormLetterContract::newFromPackedVersion(packedContract, formletterType);
                }

                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>