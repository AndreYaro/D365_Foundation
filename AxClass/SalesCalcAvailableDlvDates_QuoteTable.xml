<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_QuoteTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_QuoteTable extends SalesCalcAvailableDlvDates
{
    SalesQuotationTable     salesQuotationTable;
    SalesQuotationTable     salesQuotationTableOrig;
    SalesQuotationTable     salesQuotationTableCaller;
    SalesQuotationTableType salesQuotationTableType;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        salesQuotationTable,
        salesQuotationTableOrig,
        salesQuotationTableCaller
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to perform delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if the delivery date control on confirmed dates must be performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method always returns false in subclasses that are related to tables that do not contain
    /// confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery date control is active.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is active; otherwise, false.
    /// </returns>
    protected boolean deliveryDateControlActive()
    {
        boolean ok = super();

        if (ok)
        {
            if (!salesQuotationTableType)
            {
                salesQuotationTableType = salesQuotationTable.type();
            }

            if (!salesQuotationTableType.doDeliveryDateControl())
            {
                ok = false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (salesQuotationTableOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != salesQuotationTableOrig.DlvMode
            ||  deliveryDateControlMap.InventSiteId            != salesQuotationTableOrig.InventSiteId
            ||  deliveryDateControlMap.InventLocationId        != salesQuotationTableOrig.InventLocationId
            ||  deliveryDateControlMap.ShippingDateRequested   != salesQuotationTableOrig.ShippingDateRequested
            ||  deliveryDateControlMap.ReceiptDateRequested    != salesQuotationTableOrig.ReceiptDateRequested)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (salesQuotationTable.DlvMode                 != salesQuotationTableOrig.DlvMode
        ||  salesQuotationTable.InventLocationId        != salesQuotationTableOrig.InventLocationId
        ||  salesQuotationTable.DeliveryPostalAddress   != salesQuotationTableOrig.DeliveryPostalAddress
        ||  salesQuotationTable.DeliveryDateControlType != salesQuotationTableOrig.DeliveryDateControlType)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(FieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable,ReceiptDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldNum(SalesQuotationTable,ShippingDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = salesQuotationTable.InventLocationId)
    {
        deliveryDateControlMap.InventLocationId = _inventLocationId;
        salesQuotationTable.InventLocationId    = _inventLocationId;
        return salesQuotationTable.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = salesQuotationTable.InventSiteId)
    {
        deliveryDateControlMap.InventSiteId = _inventSiteId;
        salesQuotationTable.InventSiteId    = _inventSiteId;
        return salesQuotationTable.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable parmSalesQuotationTable(SalesQuotationTable _salesQuotationTable = salesQuotationTable)
    {
        deliveryDateControlMap      = _salesQuotationTable.data();
        salesQuotationTable         = _salesQuotationTable.data();
        salesQuotationTableOrig     = _salesQuotationTable.orig();
        salesQuotationTableCaller   = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransferToConfirmedButton</Name>
				<Source><![CDATA[
    public boolean parmShowTransferToConfirmedButton(boolean _showTransferToConfirmedButton = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldShowAvailableDlvDatesDialogPrompt</Name>
				<Source><![CDATA[
    internal protected boolean shouldShowAvailableDlvDatesDialogPrompt()
    {
        if (SalesQuotationDeliveryDateControlShowDialogFlight::instance().isEnabled())
        {
            return salesQuotationTable.IsIntegration != TradeIntegrationType::CDS
                && salesQuotationTable.IsIntegration != TradeIntegrationType::DataEntity
                && salesQuotationTable.IsIntegration != TradeIntegrationType::Dynamics365Sales;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = LogisticsLocationExt::find(salesQuotationTable.deliveryLocation()).SalesCalendarId;

        if (!receiptCalendarId && salesQuotationTable.AddressRefTableId && salesQuotationTable.AddressRefRecId )
        {
            switch (salesQuotationTable.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(salesQuotationTable.AddressRefRecId).SalesCalendarId;
                    break;
                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == salesQuotationTable.AddressRefTableId && custTable.RecId == salesQuotationTable.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = CustTable::find(salesQuotationTable.CustAccount).SalesCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        switch (salesQuotationTable.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                salesLeadTime  = 0;
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime  = SalesParameters::find().LeadTimeSalesDefault;
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
        {
            return;
        }

        if (_record.TableId != tableNum(SalesQuotationTable))
        {
            throw error("@SYS18626");
        }

        SalesQuotationTable salesQuotationTableCallerLocal = _record;

        if (this.parmCancelModifiedField())
        {
            salesQuotationTableCallerLocal.ShippingDateRequested   = salesQuotationTableOrig.ShippingDateRequested;
            salesQuotationTableCallerLocal.ReceiptDateRequested    = salesQuotationTableOrig.ReceiptDateRequested;
            salesQuotationTableCallerLocal.DeliveryDateControlType = salesQuotationTableOrig.DeliveryDateControlType;
            SalesCalcAvailableDlvDates::initDateFields(salesQuotationTableCallerLocal);
            throw error(this.parmErrorText());
        }

        if (_disableDlvDateControl)
        {
            salesQuotationTableCallerLocal.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
        else
        {
            salesQuotationTableCallerLocal.DlvMode               = deliveryDateControlMap.DlvMode;
            salesQuotationTableCallerLocal.InventLocationId      = deliveryDateControlMap.InventLocationId;
            salesQuotationTableCallerLocal.InventSiteId          = deliveryDateControlMap.InventSiteId;
            salesQuotationTableCallerLocal.ShippingDateRequested = deliveryDateControlMap.ShippingDateRequested;

            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                salesQuotationTableCallerLocal.ReceiptDateRequested  = deliveryDateControlMap.ReceiptDateRequested;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_QuoteTable construct()
    {
        return new SalesCalcAvailableDlvDates_QuoteTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesQuotationTable</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_QuoteTable newSalesQuotationTable(SalesQuotationTable  _salesQuotationTable,
                                                                                      FieldId              _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_QuoteTable   salesCalc = SalesCalcAvailableDlvDates_QuoteTable::construct();

        SalesDlvDateType masterDateType = salesCalc.fieldId2DlvDateType(_fieldId);
        salesCalc.parmSalesQuotationTable(_salesQuotationTable);
        salesCalc.parmInventLocationIdSelected(_salesQuotationTable.InventLocationId);
        salesCalc.parmDlvModeIdSelected(_salesQuotationTable.DlvMode);
        salesCalc.parmInventSiteIdSelected(_salesQuotationTable.InventSiteId);
        salesCalc.parmInventLocationTransportShipping(_salesQuotationTable.InventLocationId);
        salesCalc.parmOrderEntryDeadlineGroupId(CustTable::find(_salesQuotationTable.CustAccount).OrderEntryDeadlineGroupId);
        salesCalc.parmRecalculateShippingDate(_salesQuotationTable.RecId == 0);
        salesCalc.initMaster(masterDateType);
        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>