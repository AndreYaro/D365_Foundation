<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingParametersEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class RetailPriceChangeTrackingParametersEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RetailConfigurationParameters_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating RetailConfigurationParameters.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    [DataEventHandler(tableStr(RetailConfigurationParameters), DataEventType::Updated)]
    public static void RetailConfigurationParameters_onUpdated(Common sender, DataEventArgs e)
    {
        RetailConfigurationParameters original = sender.orig() as RetailConfigurationParameters;
        RetailConfigurationParameters newInstance = sender;

        // Setup change tracking when the azure search configuration is updated in a legal entity.
        if (newInstance.Name == RetailConfigurationParameters::getNameForUseAzureSearch())
        {
            boolean isUseAzureSearchEnabled = newInstance.Value == 'true';
            RetailPriceChangeTrackingDataArea::updateDataAreaTrackingStatus(curExt(), isUseAzureSearchEnabled);
        }
        else
        {
            // Orignal value is true and name is changed, then need to update the status.
            if (original.Name == RetailConfigurationParameters::getNameForUseAzureSearch() && original.Value == 'true')
            {
                RetailPriceChangeTrackingDataArea::updateDataAreaTrackingStatus(curExt(), false);
            }
        }

        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        if ((newInstance.Name == RetailConfigurationParameters::getNameForDiscountCompoundBehavior()
                || newInstance.Name == RetailConfigurationParameters::getNameForDiscountConcurrencyControlModel())
            && newInstance.Value != original.Value)
        {
            RetailPriceChangeTracking::writeFullRefreshRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailConfigurationParameters_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for delete RetailConfigurationParameters.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    [DataEventHandler(tableStr(RetailConfigurationParameters), DataEventType::Deleted)]
    public static void RetailConfigurationParameters_onDeleted(Common sender, DataEventArgs e)
    {
        RetailConfigurationParameters original = sender.orig() as RetailConfigurationParameters;

        // Setup change tracking when the azure search configuration is updated in a legal entity.
        if (original.Name == RetailConfigurationParameters::getNameForUseAzureSearch() && original.Value == 'true')
        {
            RetailPriceChangeTrackingDataArea::updateDataAreaTrackingStatus(curExt(), false);
        }

        // Discount configuration changes.
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        if (original.Name == RetailConfigurationParameters::getNameForDiscountCompoundBehavior()
                || original.Name == RetailConfigurationParameters::getNameForDiscountConcurrencyControlModel())
        {
            RetailPriceChangeTracking::writeFullRefreshRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailConfigurationParameters_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for inserting RetailConfigurationParameters.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    [DataEventHandler(tableStr(RetailConfigurationParameters), DataEventType::Inserted)]
    public static void RetailConfigurationParameters_onInserted(Common sender, DataEventArgs e)
    {
        RetailConfigurationParameters newInstance = sender;

        // Setup change tracking when the azure search configuration is updated in a legal entity.
        if (newInstance.Name == RetailConfigurationParameters::getNameForUseAzureSearch() && newInstance.Value == 'true')
        {
            RetailPriceChangeTrackingDataArea::updateDataAreaTrackingStatus(curExt(), true);
        }

        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        // Discount configuration changes.
        if (newInstance.Name == RetailConfigurationParameters::getNameForDiscountCompoundBehavior()
            || newInstance.Name == RetailConfigurationParameters::getNameForDiscountConcurrencyControlModel()
            || newInstance.Name == RetailConfigurationParameters::getNameForAllowPriceAdjustmentsToIncreasePrice())
        {
            RetailPriceChangeTracking::writeFullRefreshRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailChannelTable_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating RetailChannelTable.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailChannelTable_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailChannelTable original = orig as RetailChannelTable;
        RetailChannelTable newInstance = sender;

        if (original != null && original.inventLocation != newInstance.inventLocation)
        {
            RetailPriceChangeTracking::writeFullRefreshRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesParameters_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating SalesParameters.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void SalesParameters_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        SalesParameters original = orig as SalesParameters;
        SalesParameters newInstance = sender;

        if (original != null && original.Disc != newInstance.Disc)
        {
            RetailPriceChangeTracking::writeFullRefreshRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PriceParameters_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating PriceParameters.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void PriceParameters_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailPriceChangeTracking::writeFullRefreshRecord();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>