<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayPOLineReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle received purchase order line.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::PurchaseOrderLineReceiving)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate)]
class WhsWorkExecuteDisplayPOLineReceiving extends WHSWorkExecuteDisplayPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider createOrderProvider(boolean _throwOnNonReceiving)
    {
        return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPOReceiving</Name>
				<Source><![CDATA[
    container buildPOReceiving(container _con, str _extratext = '')
    {
        container       ret = _con;
        boolean         showExceptionButton;
        InventTable     inventTable;
        WHSProdQty      defaultQty;

        var orderProvider = this.receivingOrderProvider();

        ret += [this.buildControl(#RFLabel, 'POLineReceiving', pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += this.buildLocationControl();

        if (orderProvider.orderNum(pass) != '')
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, false)];

            if (orderProvider.lineNumStr(pass) != '')
            {
                ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, orderProvider.lineNumStr(pass), extendedTypeNum(LineNum), '', 0, false)];
                showExceptionButton = true;
            }
            else
            {
                ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, '', extendedTypeNum(LineNum), '', 0)];

                if (this.showLoadIdForOrder())
                {
                    // The 2nd screen (line) is where the flow loops back to after a line has been received,
                    // so it's the logical place for a load receiving complete detour.
                    ret += this.buildLoadIdForOrder();
                }
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, '', orderProvider.orderTypeId(), '', 0)];
            ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, '', extendedTypeNum(LineNum), '', 0)];
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

        if (pass.lookupStr(#ItemId) != '')
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
            InventDim inventDim = orderProvider.orderLine(pass).inventDim();
            WHSInventTable whsInventTable = WHSInventTable::find(inventTable.ItemId);
            defaultQty = this.defaultReceivingQuantity();

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            ret = this.buildInventoryDimensionsControlsFromInventDim(ret, inventTable.ItemId, inventDim, false);
        }
        else if (!pass.exists(#Initiation))
        {
            pass.insert(#Initiation, '1');
        }

        if ((!pass.exists(#Qty) || pass.lookupNum(#Qty) == 0) && defaultQty)
        {
            pass.insert(#Qty, defaultQty);
        }
        if (!pass.exists(#SelectedValueUOM) || pass.lookup(#SelectedValueUOM) == '')
        {
            pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(inventTable.ItemId));
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        
        boolean                 isCWItem;
        InventHandlingUnitId    handlingUnitId;

        if (inventTable.ItemId)
        {
            isCWItem = PdsGlobal::pdsIsCWItem(inventTable.ItemId);
            handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId);
        }

        if (inventTable.ItemId && isCWItem && WHSInventTable::shouldCaptureAggregateWeight(inventTable.ItemId))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
        }

        if (pass.exists(#SelectedValueUOM)
        &&  pass.lookup(#SelectedValueUOM)  != ''
        &&  pass.lookup(#SelectedValueUOM)  != handlingUnitId)
        {
            if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
            {
                pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
            }
            else if (!pass.exists(#Initiation))
            {
                pass.remove(#CurrentUOM);
            }

            if (orderProvider.hasLineNum(pass))
            {
                WHSReceiptOrderLine inboundOrderLine = orderProvider.orderLine(pass);

                if (isCWItem)
                {
                    ret += [this.buildControl(#RFLabel,
                                          'Invent Conversion',
                                          strFmt("1 %1 = %2 %3",
                                                 pass.lookup(#SelectedValueUOM),
                                                EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                inboundOrderLine.InventDimId,
                                                                                                1,
                                                                                                pass.lookup(#SelectedValueUOM),
                                                                                                handlingUnitId,
                                                                                                NoYes::No,
                                                                                                NoYes::Yes),
                                                handlingUnitId),
                                          1, '', #WHSRFUndefinedDataType, '', 0)];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel,
                                          'Invent Conversion',
                                          strFmt("1 %1 = %2 %3",
                                                 pass.lookup(#SelectedValueUOM),
                                                                            InventTableModule::unitConvert(inventTable.ItemId,
                                                                                ModuleInventPurchSales::Invent,
                                                                                pass.lookup(#SelectedValueUOM),
                                                                                1,
                                                                                inboundOrderLine.InventDimId),
                                                 handlingUnitId),
                                          1, '', #WHSRFUndefinedDataType, '', 0)];
                }
            }
        }
        else
        {
            if (pass.exists(#CurrentUOM))
            {
                pass.remove(#CurrentUOM);
            }
        }

        if (this.displayDispositionCodeControl())
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (showExceptionButton)
        {
            ret = this.addCancelButton(ret, 1, true);
            ret = this.addExceptionButton(ret);
            pass.insert(#NoCancelButton, '1');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to getOrderLine/receivingOrderLine', false, 13\02\2023)]
    protected PurchLine getPurchLine(WHSRFPassthrough _pass)
    {
        return this.receivingOrderLine(_pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPOReceivingAndPutawayExecuteMode</Name>
				<Source><![CDATA[
    protected WHSWorkExecuteMode getPOReceivingAndPutawayExecuteMode()
    {
        return WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the work process enum value of the current process.
    /// </summary>
    /// <returns>
    /// The work process enum value.
    /// </returns>
    [Hookable(false)]
    protected WhsWorkProcess workProcess()
    {
        return WhsWorkProcess::PurchaseLineReceiving;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>