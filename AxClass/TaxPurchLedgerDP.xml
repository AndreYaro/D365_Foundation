<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchLedgerDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxPurchLedgerDP</c> class is the Report Data Provider class for the <c>TaxSalesLedger</c>
///    report.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxPurchLedgerContract))]
public class TaxPurchLedgerDP extends SrsReportDataProviderPreProcessTempDB
{
    private const str FeatureReference = 'BE-00007';

    TaxPurchLedgerTmp   taxPurchLedgerTmp;
    TaxReportPeriod     taxReportPeriod;
    TaxPeriod           taxPeriod;
    FromDate            fromDate;
    ToDate              toDate;
    TaxRepVersion       taxRepVersion;
    RecId               tmpTableDataRecId;
    CompanyInfo         companyInfo;
    protected boolean isTaxSpecificExchangeRateEnabled;
    private boolean isTaxPurchLedgerDPDisposeTempTableFlightEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        isTaxSpecificExchangeRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();
        isTaxPurchLedgerDPDisposeTempTableFlightEnabled = TaxPurchLedgerDPDisposeTempTableFlight::instance().isEnabled();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount values.
    /// </summary>
    /// <param name="_taxPurchLedgerTmp">
    /// A temporay table instance that is used as parameter for inserting values in a temporary table.
    /// </param>
    /// <param name="_taxReportField">
    /// The <c>TaxReportField</c> value for calculations.
    /// </param>
    /// <param name="_amountMST">
    /// The amount value for calculations.
    /// </param>
    /// <param name="_taxInCostPriceMST">
    /// A <c>TaxAmount</c> value for calculations.
    /// </param>
    private void addAmount( TaxPurchLedgerTmp _taxPurchLedgerTmp,
        TaxReportField _taxReportField,
        AmountMST _amountMST,
        TaxAmount _taxInCostPriceMST = 0)
    {
        const int Field_55 = 55;
        const int Field_56 = 56;
        const int Field_57 = 57;
        const int Field_81 = 81;
        const int Field_82 = 82;
        const int Field_83 = 83;
        const int Field_84 = 84;
        const int Field_85 = 85;
        const int Field_86 = 86;
        const int Field_87 = 87;
        const int Field_88 = 88;
        const int Field_59 = 59;
        const int Field_61 = 61;
        const int Field_62 = 62;
        const int Field_63 = 63;
        const int Field_8184 = 8184;
        const int Field_8185 = 8185;
        const int Field_8187 = 8187;
        const int Field_8284 = 8284;
        const int Field_8387 = 8387;
        const int Field_8285 = 8285;
        const int Field_8384 = 8384;
        const int Field_8385 = 8385;
        const int Field_8287 = 8287;
        const int Field_8486 = 8486;
        const int Field_8488 = 8488;
        const int Field_8186 = 8186;
        const int Field_8188 = 8188;
        const int Field_8286 = 8286;
        const int Field_8288 = 8288;
        const int Field_828785 = 828785;

        switch (_taxReportField)
        {
            case Field_81:     _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);   break;
            case Field_82:     _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);   break;
            case Field_83:     _taxPurchLedgerTmp.TaxBaseAmountMSTBox83    += (_amountMST + _taxInCostPriceMST);   break;
            case Field_86:     _taxPurchLedgerTmp.TaxExemptAmountMSTBox86  += _amountMST;                          break;
            case Field_87:     _taxPurchLedgerTmp.TaxExemptAmountMSTBox87  += _amountMST;                          break;
            case Field_88:     _taxPurchLedgerTmp.TaxExemptAmountMSTBox88  += _amountMST;                          break;
            case Field_84:     _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);   break;
            case Field_85:     _taxPurchLedgerTmp.CreditNoteAmountMSTBox85 -= _amountMST;                          break;
            case Field_55:     _taxPurchLedgerTmp.TaxAmountMSTBox55        += _amountMST;                          break;
            case Field_56:     _taxPurchLedgerTmp.TaxAmountMSTBox56        += _amountMST;                          break;
            case Field_57:     _taxPurchLedgerTmp.TaxAmountMSTBox57        += _amountMST;                          break;
            case Field_61:     _taxPurchLedgerTmp.TaxAmountMSTBox61        -= _amountMST;                          break;
            case Field_62:     _taxPurchLedgerTmp.TaxAmountMSTBox62        -= _amountMST;                          break;
            case Field_63:     _taxPurchLedgerTmp.TaxAmountMSTBox63        -= (_amountMST - _taxInCostPriceMST);   break;
            case Field_59:     _taxPurchLedgerTmp.DeductibleAmountMSTBox59 += (_amountMST - _taxInCostPriceMST);   break;
            case Field_8184:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= _amountMST ;                         break;
            case Field_8185:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox85 -= _amountMST;                          break;
            case Field_8186:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox86  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8187:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox87  -= (_amountMST + _taxInCostPriceMST);   break;
            case Field_8188:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox81    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox88  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8284:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= _amountMST ;                         break;
            case Field_8387:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox83    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox87  -= (_amountMST + _taxInCostPriceMST);   break;
            case Field_8285:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox85 -= _amountMST;                          break;
            case Field_8286:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox86  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8288:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox88  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8384:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox83    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= _amountMST;                          break;
            case Field_8486:   _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= _amountMST;
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox86  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8488:   _taxPurchLedgerTmp.CreditNoteAmountMSTBox84 -= _amountMST;
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox88  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_8385:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox83    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox85 -= _amountMST;                          break;
            case Field_8287:   _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox87  += (_amountMST + _taxInCostPriceMST);   break;
            case Field_828785: _taxPurchLedgerTmp.TaxBaseAmountMSTBox82    += (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.TaxExemptAmountMSTBox87  -= (_amountMST + _taxInCostPriceMST);
                                _taxPurchLedgerTmp.CreditNoteAmountMSTBox85 -= _amountMST;                          break;
            default:  break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxPurchLedgerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the fields values for the temporary table and sends the temporary table instance to the
    /// insert method.
    /// </summary>
    /// <param name="_taxPeriod">
    /// A <c>TaxReport</c> value.
    /// </param>
    /// <param name="_fromDate">
    /// The <c>FromDate</c> value of <paramref name="_taxPeriod" />.
    /// </param>
    /// <param name="_toDate">
    /// The <c>ToDate</c> value of <paramref name="_taxPeriod" />.
    /// </param>
    /// <returns>
    /// A <c>TaxPurchLedgerTmp</c> temporary table instance.
    /// </returns>
    private void createTaxPurchLedgerTmp(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate)
    {
        TaxPurchLedgerTmp taxPurchLedgerTmpLocal;
        RecordInsertList taxPurchLedgerTmpList = new RecordInsertList(tableNum(TaxPurchLedgerTmp), true, true, true, false, true, taxPurchLedgerTmpLocal);

        if (isTaxPurchLedgerDPDisposeTempTableFlightEnabled)
        {
            this.setUserConnection(taxPurchLedgerTmpLocal);
        }
        else
        {
            this.takeOwnershipOfTempTable(taxPurchLedgerTmpLocal);
        }

        if (FeatureStateProvider::isFeatureEnabled(PurchSalesTaxTransReportWithCorrectionsFeature_BE::instance()))
        {
            this.doWhenCorrectionFeatureIsEnabled(
                taxPurchLedgerTmpList,
                taxPurchLedgerTmpLocal,
                _fromDate,
                _toDate,
                _taxPeriod);
        }
        else
        {
            this.doWhenCorrectionFeatureIsDisabled(
                taxPurchLedgerTmpList,
                taxPurchLedgerTmpLocal,
                _fromDate,
                _toDate,
                _taxPeriod);
        }

        if (taxPurchledgerTmpList.insertDatabase())
        {
            this.updateTaxPurchLedgerTmp(taxPurchLedgerTmpLocal, _toDate);
        }
        else
        {
            taxPurchLedgerTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _toDate);
            taxPurchLedgerTmp.CompanyVATNum = companyInfo.CoRegNum;
            taxPurchLedgerTmp.PeriodDate = strFmt(
                "@SYS76785",
                date2StrUsr(taxReportPeriod.FromDate, DateFlags::FormatAll),
                date2StrUsr(taxReportPeriod.ToDate, DateFlags::FormatAll));
            taxPurchLedgerTmp.insert();
        }

        if (isTaxPurchLedgerDPDisposeTempTableFlightEnabled)
        {
            taxPurchLedgerTmpLocal.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doWhenCorrectionFeatureIsEnabled</Name>
				<Source><![CDATA[
    private void doWhenCorrectionFeatureIsEnabled(
        RecordInsertList _taxPurchLedgerTmpList,
        TaxPurchLedgerTmp _taxPurchLedgerTmpLocal,
        FromDate _fromDate,
        ToDate _toDate,
        TaxPeriod _taxPeriod)
    {
        this.calculateLines(
            _taxPurchLedgerTmpList,
            _taxPurchLedgerTmpLocal,
            _fromDate,
            _toDate,
            _taxPeriod);

        TaxReportVoucher taxReportVoucher;
        select firstonly Voucher, TransDate from taxReportVoucher
            where taxReportVoucher.FromDate == _fromDate
                && taxReportVoucher.ToDate == _toDate
                && taxReportVoucher.TaxPeriod == _taxPeriod
                && taxReportVoucher.TaxRepVersion == TaxRepVersion::Original;

        if (taxReportVoucher)
        {
            TaxReportAdjustmentTrans taxReportAdjustmentTrans;
            while select FromDate, ToDate, TaxVersion from taxReportAdjustmentTrans
                where taxReportAdjustmentTrans.Voucher == taxReportVoucher.Voucher
                    && taxReportAdjustmentTrans.TransDate == taxReportVoucher.TransDate
                    && taxReportAdjustmentTrans.TaxPeriod == _taxPeriod
            {
                this.calculateLines(
                    _taxPurchLedgerTmpList,
                    _taxPurchLedgerTmpLocal,
                    taxReportAdjustmentTrans.FromDate,
                    taxReportAdjustmentTrans.ToDate,
                    _taxPeriod,
                    TaxRepVersion::Correct,
                    taxReportAdjustmentTrans.TaxVersion,
                    true);
            }
        }
        else
        {
            TaxReportPeriod taxReportPeriodPrevious;
            while select FromDate, ToDate, VersionNum from taxReportPeriodPrevious
                where taxReportPeriodPrevious.TaxPeriod == _taxPeriod
                    && taxReportPeriodPrevious.FromDate < _fromDate
                    && taxReportPeriodPrevious.VersionNum > 0
            {
                this.calculateLines(
                    _taxPurchledgerTmpList,
                    _taxPurchLedgerTmpLocal,
                    taxReportPeriodPrevious.FromDate,
                    taxReportPeriodPrevious.ToDate,
                    _taxPeriod,
                    TaxRepVersion::Correct,
                    taxReportPeriodPrevious.VersionNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doWhenCorrectionFeatureIsDisabled</Name>
				<Source><![CDATA[
    private void doWhenCorrectionFeatureIsDisabled(
        RecordInsertList _taxPurchLedgerTmpList,
        TaxPurchLedgerTmp _taxPurchLedgerTmpLocal,
        FromDate _fromDate,
        ToDate _toDate,
        TaxPeriod _taxPeriod)
    {
        const int OneMonth = 1;
        const int ThreeMonths = 3;

        TransDate prevFromDate = _toDate;
        TransDate prevToDate = _fromDate;

        TaxPeriodHead taxPeriodHead = TaxPeriodHead::find(_taxPeriod);
        if (taxPeriodHead && taxPeriodHead.PeriodUnit == PeriodUnit::Month)
        {
            if (taxPeriodHead.QtyUnit == OneMonth && TaxReportExtraFieldsBE::exist(_taxPeriod, prevMth(_fromDate), endmth(prevMth(_toDate))))
            {
                prevFromDate = prevMth(_fromDate);
                prevToDate = endmth(prevMth(_toDate));
            }
            else if (taxPeriodHead.QtyUnit == ThreeMonths && TaxReportExtraFieldsBE::exist(_taxPeriod, prevQtr(_fromDate), endmth(prevQtr(_toDate))))
            {
                prevFromDate = prevQtr(_fromDate);
                prevToDate = endmth(prevQtr(_toDate));
            }
        }

        TaxTrans taxTransTotal;
        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
            group by Voucher, TransDate, TaxDirection, TaxRepCounter
            where taxTransTotal.TaxPeriod == _taxPeriod
                && ((taxTransTotal.TransDate >= _fromDate
                        && taxTransTotal.TransDate <= _toDate
                        && taxTransTotal.TaxRepCounter == TaxRepVersion::Original)
                    || (taxTransTotal.TransDate >= prevFromDate
                        && taxTransTotal.TransDate <= prevToDate
                        && taxTransTotal.TaxRepCounter != TaxRepVersion::Original))
                && taxTransTotal.TaxOrigin != TaxOrigin::TaxReporting
                && (taxTransTotal.TaxDirection == TaxDirection::IncomingTax
                    || (isTaxSpecificExchangeRateEnabled
                    && taxTransTotal.TaxDirection == TaxDirection::IncomingTax_W)
                    || taxTransTotal.TaxDirection == TaxDirection::UseTax
                    || taxTransTotal.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            this.calculateLinesByVoucher(
                _taxPurchledgerTmpList,
                _taxPurchLedgerTmpLocal,
                taxTransTotal,
                _taxPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLines</Name>
				<Source><![CDATA[
    private void calculateLines(
        RecordInsertList _taxPurchLedgerTmpList,
        TaxPurchLedgerTmp _taxPurchLedgerTmpLocal,
        TransDate _fromDate,
        TransDate _toDate,
        TaxPeriod _taxPeriod,
        TaxRepVersion _taxRepVersion = TaxRepVersion::Original,
        TaxVersion _taxRepCounter = 0,
        NoYes _reported = NoYes::No)
    {
        TaxVersion versionMin;
        TaxVersion versionMax;
        [versionMin, versionMax] = TaxTransReportById::taxAmountByReportId_VersionMinMax(
            _fromDate,
            _taxPeriod,
            _taxRepVersion,
            _taxRepCounter,
            _reported);

        TaxTrans taxTransTotal;
        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
            group by Voucher, TransDate, TaxDirection, TaxRepCounter
            where taxTransTotal.TaxPeriod == _taxPeriod
                && taxTransTotal.TransDate >= _fromDate
                && taxTransTotal.TransDate <= _toDate
                && taxTransTotal.TaxRepCounter >= versionMin
                && taxTransTotal.TaxRepCounter <= versionMax
                && taxTransTotal.TaxOrigin != TaxOrigin::TaxReporting
                && (taxTransTotal.TaxDirection == TaxDirection::IncomingTax
                    || (isTaxSpecificExchangeRateEnabled
                    && taxTransTotal.TaxDirection == TaxDirection::IncomingTax_W)
                    || taxTransTotal.TaxDirection == TaxDirection::UseTax
                    || taxTransTotal.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            this.calculateLinesByVoucher(
                _taxPurchLedgerTmpList,
                _taxPurchLedgerTmpLocal,
                taxTransTotal,
                _taxPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLinesByVoucher</Name>
				<Source><![CDATA[
    private void calculateLinesByVoucher(
        RecordInsertList _taxPurchLedgerTmpList,
        TaxPurchLedgerTmp _taxPurchLedgerTmpLocal,
        TaxTrans _taxTransTotal,
        TaxPeriod _taxPeriod)
    {
        boolean isInvoice = (_taxTransTotal.TaxBaseAmount > 0 || (_taxTransTotal.TaxBaseAmount == 0 && _taxTransTotal.TaxAmount >= 0));

        Voucher oldVoucher;
        TransDate oldTransDate;
        RefTableId oldSourceTableId;
        RefRecId oldSourceRecId;

        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry voucherLink;
        TaxTrans taxTrans;
        TaxBase taxBaseAmount;
        Set taxReportCodes;
        while select sum(TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST) from taxTrans
            group by Voucher, TransDate, SourceTableId, SourceRecId, TaxCode, TaxDirection
            where taxTrans.TaxPeriod == _taxPeriod
                && taxTrans.Voucher == _taxTransTotal.Voucher
                && taxTrans.TransDate == _taxTransTotal.TransDate
                && taxTrans.TaxDirection == _taxTransTotal.TaxDirection
                && taxTrans.TaxRepCounter == _taxTransTotal.TaxRepCounter
        {
            AmountMST amountInclTax = 0;

            _taxPurchLedgerTmpLocal.clear();

            TaxTable taxTable = TaxTable::find(taxTrans.TaxCode);
            boolean isNewSourceLine = taxTrans.Voucher != oldVoucher || taxTrans.TransDate != oldTransDate ||
                taxTrans.SourceTableId != oldSourceTableId || taxTrans.SourceRecId != oldSourceRecId;
            TaxBase curTaxBase = 0;
            if (isNewSourceLine)
            {
                taxBaseAmount = taxTrans.TaxBaseAmount;
                amountInclTax = taxBaseAmount;
                oldSourceTableId = taxTrans.SourceTableId;
                oldSourceRecId = taxTrans.SourceRecId;
                taxReportCodes = new Set(Types::Integer);
            }            
            if (taxTrans.Voucher != oldVoucher || taxTrans.TransDate != oldTransDate)
            {
                select firstonly LedgerPostingJournal from generalJournalEntry
                        where generalJournalEntry.LedgerPostingJournalDataAreaId == curExt()
                    exists join voucherLink
                        where voucherLink.GeneralJournalEntry == generalJournalEntry.RecId
                            && voucherLink.Voucher == taxTrans.Voucher
                            && voucherLink.AccountingDate == taxTrans.TransDate;

                oldVoucher   = taxTrans.Voucher;
                oldTransDate = taxTrans.TransDate;
            }
            _taxPurchLedgerTmpLocal.LedgerPostingJournalId = generalJournalEntry.LedgerPostingJournal;
            _taxPurchLedgerTmpLocal.Voucher   = taxTrans.Voucher;
            _taxPurchLedgerTmpLocal.TransDate = taxTrans.TransDate;

            if (taxTrans.TaxDirection == TaxDirection::IncomingTax || 
                (isTaxSpecificExchangeRateEnabled && taxTrans.TaxDirection == TaxDirection::IncomingTax_W)) // Domestic purchase
            {
                if (isInvoice)
                {
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldTaxIncoming, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseIncoming, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseIncoming, curTaxBase + taxTrans.TaxInCostPriceMST);
                }
                else // creditNote
                {
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseIncomingCreditNote, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseIncomingCreditNote, curTaxBase, taxTrans.TaxInCostPriceMST);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldTaxIncomingCreditNote, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                }
                amountInclTax += taxTrans.TaxAmount;
            }
            else if (taxTrans.TaxDirection == TaxDirection::UseTax)  // Import from EU country/region or when an import license exist
            {
                if (isInvoice)
                {
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseUseTax, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseUseTax, curTaxBase, taxTrans.TaxInCostPriceMST);
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseUseTaxOffset, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseUseTaxOffset, curTaxBase, taxTrans.TaxInCostPriceMST);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldUseTax, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldUseTaxOffset, taxTrans.TaxAmount );
                }
                else // creditNote
                {
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseUseTaxCreditNote, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseUseTaxCreditNote, curTaxBase, taxTrans.TaxInCostPriceMST);
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldBaseUseTaxOffsetCreditNote, curTaxBase, taxTrans.TaxInCostPriceMST);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldUseTaxCreditNote, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldUseTaxOffsetCreditNote, taxTrans.TaxAmount);
                }
            }
            else if (taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)  // Import
            {
                if (isInvoice)
                {
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldTaxFreeBuy, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldTaxFreeBuy, curTaxBase);
                }
                else // creditNote
                {
                    curTaxBase = this.getCurTaxBase(taxReportCodes, taxTable.RepFieldTaxFreeBuyCreditNote, taxBaseAmount);
                    this.addAmount(_taxPurchLedgerTmpLocal,taxTable.RepFieldTaxFreeBuyCreditNote, curTaxBase);
                }
            }

            _taxPurchLedgerTmpLocal.AmountMSTInclTax = amountInclTax;
            _taxPurchLedgerTmpList.add(_taxPurchLedgerTmpLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurTaxBase</Name>
				<Source><![CDATA[
    private TaxBase getCurTaxBase(Set _taxReportCodes, TaxReportField _reportField, TaxBase _taxBase)
    {
        if (_taxReportCodes.add(_reportField))
        {
            return _taxBase;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxPurchLedgerTmp</Name>
				<Source><![CDATA[
    private void updateTaxPurchLedgerTmp(TaxPurchLedgerTmp _taxPurchLedgerTmpLocal, ToDate _toDate)
    {
        insert_recordset taxPurchLedgerTmp
        (
            AmountMSTInclTax,
            CreditNoteAmountMSTBox84,
            CreditNoteAmountMSTBox85,
            DeductibleAmountMSTBox59,
            LedgerPostingJournalId,
            TaxAmountMSTBox55,
            TaxAmountMSTBox56,
            TaxAmountMSTBox57,
            TaxAmountMSTBox61,
            TaxAmountMSTBox62,
            TaxAmountMSTBox63,
            TaxBaseAmountMSTBox81,
            TaxBaseAmountMSTBox82,
            TaxBaseAmountMSTBox83,
            TaxExemptAmountMSTBox86,
            TaxExemptAmountMSTBox87,
            TaxExemptAmountMSTBox88,
            TransDate,
            Voucher
        )
        select
            sum(AmountMSTInclTax),
            sum(CreditNoteAmountMSTBox84),
            sum(CreditNoteAmountMSTBox85),
            sum(DeductibleAmountMSTBox59),
            LedgerPostingJournalId,
            sum(TaxAmountMSTBox55),
            sum(TaxAmountMSTBox56),
            sum(TaxAmountMSTBox57),
            sum(TaxAmountMSTBox61),
            sum(TaxAmountMSTBox62),
            sum(TaxAmountMSTBox63),
            sum(TaxBaseAmountMSTBox81),
            sum(TaxBaseAmountMSTBox82),
            sum(TaxBaseAmountMSTBox83),
            sum(TaxExemptAmountMSTBox86),
            sum(TaxExemptAmountMSTBox87),
            sum(TaxExemptAmountMSTBox88),
            TransDate,
            Voucher
        from _taxPurchLedgerTmpLocal
        group by Voucher, TransDate, LedgerPostingJournalId;

        update_recordSet taxPurchLedgerTmp setting
            CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _toDate),
            CompanyVATNum = companyInfo.CoRegNum,
            PeriodDate = strFmt(
                "@SYS76785",
                date2StrUsr(taxReportPeriod.FromDate, DateFlags::FormatAll),
                date2StrUsr(taxReportPeriod.ToDate, DateFlags::FormatAll));

        VendTrans vendTrans;
        DirPartyTable dirPartyTable;
        VendTable vendTable;
        update_recordSet taxPurchLedgerTmp setting
            InvoiceId = vendTrans.Invoice,
            VendAccount = vendTrans.AccountNum,
            VendName = dirPartyTable.Name
        outer join firstOnly AccountNum, Invoice from vendTrans
            where vendTrans.Voucher == taxPurchLedgerTmp.Voucher
                && vendTrans.TransDate == taxPurchLedgerTmp.TransDate
        join Party from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum
        join firstOnly Name from dirPartyTable
            where dirPartyTable.recId == vendTable.Party;

        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        update_recordSet taxPurchLedgerTmp setting
            InvoiceId = vendTrans.Invoice,
            VendAccount = vendTrans.AccountNum,
            VendName = dirPartyTable.Name
            where taxPurchLedgerTmp.InvoiceId == ''
                && taxPurchLedgerTmp.VendAccount == ''
                && taxPurchLedgerTmp.VendName == ''
        outer join firstonly FromVoucher, FromDate, ToVoucher, ToDate from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == taxPurchLedgerTmp.Voucher
                && ledgerJournalVoucherChanged.ToDate == taxPurchLedgerTmp.TransDate
        join firstOnly AccountNum, Invoice from vendTrans
            where vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher
                && vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate
        join Party from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum
        join firstOnly Name from dirPartyTable
            where dirPartyTable.recId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPurchLedgerDP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and returns a data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from <c>TaxPurchLedgerTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSet(tableStr(TaxPurchLedgerTmp))
    ]
    public TaxPurchLedgerTmp getTaxPurchLedgerDP()
    {
        select taxPurchLedgerTmp;
        return taxPurchLedgerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method fetches the data from temporary table <c>TaxPurchLedgerTmp</c>.
    /// </summary>
    public void processReport()
    {
        if (isTaxPurchLedgerDPDisposeTempTableFlightEnabled)
        {
            this.setUserConnection(taxPurchLedgerTmp);
        }
        else
        {
            this.takeOwnershipOfTempTable(taxPurchLedgerTmp);
        }

        this.performReportProcessing();

        if (isTaxPurchLedgerDPDisposeTempTableFlightEnabled)
        {
            taxPurchLedgerTmp.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performReportProcessing</Name>
				<Source><![CDATA[
    internal void performReportProcessing()
    {
        TaxPurchLedgerContract  contract;
        contract                = this.parmDataContract() as TaxPurchLedgerContract;
        taxPeriod               = contract.parmTaxPeriod();
        fromDate                = contract.parmTaxPeriodDate();
        taxReportPeriod         = TaxReportPeriod::find(taxPeriod, fromDate);
        companyInfo             = CompanyInfo::find();

        if (taxReportPeriod)
        {
            fromDate            = taxReportPeriod.FromDate;
            toDate              = taxReportPeriod.ToDate;
            taxRepVersion       = TaxRepVersion::Original;
            this.createTaxPurchLedgerTmp(taxPeriod, fromDate, toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>