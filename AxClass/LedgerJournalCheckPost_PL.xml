<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalCheckPost_PL</c> class provides PL country/region support for the <c>LedgerJournalCheckPost</c> class.
/// </summary>
public class LedgerJournalCheckPost_PL
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarkedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to make sure that the invoice marked for settlement is not an advance
    ///     invoice.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>LedgerJournalTrans</c> record that has a marked invoice.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    ///     The posting messages collection; optional.
    /// </param>
    /// <returns>
    ///     true if the check passed; otherwise, false.
    /// </returns>
    public static boolean checkMarkedInvoice(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean allOk = true;
        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        CustTrans custTrans;

        while select crossCompany RecId from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.company() &&
                  specTrans.SpecTableId == _ledgerJournalTrans.TableId &&
                  specTrans.SpecRecId == _ledgerJournalTrans.RecId
            join RecId from custTransOpen
                where specTrans.RefCompany == custTransOpen.DataAreaId &&
                      specTrans.RefTableId == custTransOpen.TableId &&
                      specTrans.RefRecId == custTransOpen.RecId
            join RecId, AccountNum from custTrans
                where custTransOpen.RefRecId == custTrans.RecId &&
                      custTransOpen.AccountNum == custTrans.AccountNum
        {
            if (CustVendTransData::construct(custTrans).isAdvanceInvoice_W())
            {
                if (_ledgerPostingMessageCollection)
                {
                    _ledgerPostingMessageCollection.logAndThrowError("@GLS114162");
                }
                else
                {
                    throw error("@GLS114162");
                }

                allOk = false;
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherForExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the voucher number on the export sales VAT with the new assigned voucher number.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number that is associated with the export sales VAT.
    /// </param>
    /// <param name="_originalVoucher">
    /// The original voucher number.
    /// </param>
    /// <param name="_newVoucher">
    /// The new assigned voucher number.
    /// </param>
    public static void updateVoucherForExportSalesVAT(
        LedgerJournalId _journalNumber,
        Voucher _originalVoucher,
        Voucher _newVoucher)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ExportSalesInvoiceDomesticTaxVoucher::updateVoucherNumber(_journalNumber, _originalVoucher, _newVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreTmpVoucherForExportSalesVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the new assigned voucher numbers on the export sales VAT with the original temporary voucher numbers.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> instance.</param>
    public static void restoreTmpVoucherForExportSalesVAT(LedgerJournalCheckPost _caller)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            LedgerJournalId journalNumber = _caller.parmLedgerJournalTable().JournalNum;

            if (_caller.parmInTransfer() && _caller.parmErrorLedgerJournalId() != '')
            {
                // We are in the process to transfer errors to a new journal.
                // Use the error journal number to find the budget sources instead,
                // as they would have already been updated with the error journal number.
                journalNumber = _caller.parmErrorLedgerJournalId();
            }

            Map errorTmpVoucherMap = _caller.parmErrorTmpVoucherMap();
            if (errorTmpVoucherMap && errorTmpVoucherMap.elements() > 0)   // restore the voucher of the unposted ledgerJournalTrans
            {
                MapEnumerator errorTmpVoucherEnumerator = errorTmpVoucherMap.getEnumerator();

                while (errorTmpVoucherEnumerator.moveNext())
                {
                    LedgerJournalCheckPost_PL::updateVoucherForExportSalesVAT(
                        journalNumber,
                        errorTmpVoucherEnumerator.currentKey(),
                        errorTmpVoucherEnumerator.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>