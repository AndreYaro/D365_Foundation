<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqLogCoverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements in-memory tracking of planning coverage statistics. This can be used to add telemetry about planning runs.
/// </summary>
public class ReqLogCoverage
{
    ReqProcessId processId;
    ReqPlanId reqPlanId;
    DataAreaId dataAreaId;

    Map safetyStockLog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new instance of planning coverage statistics.
    /// </summary>
    /// <param name = "_processId">The process ID for planning run.</param>
    /// <param name = "_reqPlanId">The plan ID for the plan being run.</param>
    public void new(ReqProcessId _processId, DataAreaId _dataAreaId, ReqPlanId _reqPlanId)
    {
        processId = _processId;
        reqPlanId = _reqPlanId;
        dataAreaId = _dataAreaId;
        
        safetyStockLog = new Map(Types::Enum /* ReqCovType */, Types::Class /* ReqLogCoverageSafety */);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add planning statistics for the process ID and plan ID in this instance. Iteratively invoke to incrementally
    /// add more and more statistics for different items/dimensions.
    /// </summary>
    /// <param name = "_itemId">The item ID being coverage planned.</param>
    /// <param name = "_covInventDimId">The inventory dimensions being coverage planned.</param>
    /// <param name = "_covRule">The coverage rule being used.</param>
    /// <param name = "_minSatisfy">The fulfilment trigger being used.</param>
    /// <param name = "_covPeriod">The coverage period being used.</param>
    /// <param name = "_minimum">The minimum stock level being used.</param>
    /// <param name = "_maximum">The maximum stock level being used.</param>
    public void add(ItemId _itemId, ReqCovInventDimId _covInventDimId, ReqCovType _covRule, ReqMinSatisfy _minSatisfy,
        ReqCovPeriod _covPeriod, InventQtyMinOnhand _minimum, InventQtyMaxOnhand _maximum)
    {
        ReqLogCoverageSafety reqLogCoverageSafety = this.getReqLogCoverageSafety(_covRule);

        reqLogCoverageSafety.add(_itemId, _covInventDimId, _minSatisfy, _covPeriod, _minimum, _maximum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enter the statistics in this instance into telemetry. Invoking this method does not alter the data in this instance.
    /// </summary>
    /// <returns>Boolean value returned from the instrumentation API invocation.</returns>
    public boolean invokeTelemetry()
    {
        ReqLogCoverageSafety reqLogCoverageSafety;
        MapEnumerator safetyStockLogEnumerator = safetyStockLog.getEnumerator();

        boolean result = true;

        while (safetyStockLogEnumerator.moveNext())
        {
            reqLogCoverageSafety = safetyStockLogEnumerator.currentValue();
            result = result & reqLogCoverageSafety.invokeTelemetry(processId, dataAreaId, reqPlanId, safetyStockLogEnumerator.currentKey());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqLogCoverageSafety</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an instance of ReqLogCoverageSafety for the specified coverage rule.
    /// </summary>
    /// <param name = "_covRule">The coverage rule for the ReqLogCoverageSafety instance.</param>
    /// <param name = "_create">Whether to create a new instance if one does not already exist for the coverage rule.</param>
    /// <returns>An instance of ReqLogCoverageSafety, or null if an instance does not already exist for the coverage rule and _create is set to false.</returns>
    public ReqLogCoverageSafety getReqLogCoverageSafety(ReqCovType _covRule, boolean _create = true)
    {
        if (safetyStockLog.exists(_covRule))
        {
            return safetyStockLog.lookup(_covRule);
        }
        else if (_create)
        {
            ReqLogCoverageSafety reqLogCoverageSafety = new ReqLogCoverageSafety();
            safetyStockLog.insert(_covRule, reqLogCoverageSafety);
            return reqLogCoverageSafety;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>