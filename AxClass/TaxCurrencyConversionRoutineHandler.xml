<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCurrencyConversionRoutineHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class TaxCurrencyConversionRoutineHandler supports feature sales tax currency conversion path to enable multiple currency conversion routines
/// Currently, it supports scenarios:
/// 1. Transaction currency -> Accounting currency -> Tax currency (Legacy behavior)
/// 2. Transaction currency -> Reporting currency -> Tax currency
/// It is controled by parameter "Sales Tax Conversion" in Ledger parameter->Sales Tax.
/// </summary>
public class TaxCurrencyConversionRoutineHandler
{
    private static Map instances = new Map(Types::String, Types::Class);
    private Map currencyConvAmountMap;
    private Map conversionTargetMap;

    TaxCurrencyExchangeHelper currencyExchangeHelper;
    LedgerRecId ledgerRecId;
    Array conversionRoutine;
    Map fixedExchRateMap;
    TaxCurrency routine = TaxCurrency::ReportingCurrency; // current in scope conversion path: Rep = Tran->Rep->Tax(default);

    const str cur = "cur";
    const str amount = "amount";
    const str separator = "|";
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// in this initialzation, we need to load accounting currency and reporting currency,
    /// and by loading the tax parameter: tax currency conversion path, setup the routine of the selected conversion.
    /// </summary>
    protected void init()
    {
        Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());
        currencyExchangeHelper = TaxCurrencyExchangeHelper::construct();
        currencyConvAmountMap = new Map(Types::Enum,Types::Class);

        conversionTargetMap = new Map(Types::Enum,Types::AnyType);

        conversionRoutine = new Array(Types::Enum);
        conversionRoutine.value(1,TaxCurrency::TransactionCurrency);
        conversionRoutine.value(2,this.routine);
        conversionRoutine.value(3,TaxCurrency::TaxCurrency);
        conversionTargetMap.insert(TaxCurrency::TaxCurrency,conversionRoutine);

        conversionRoutine = new Array(Types::Enum);
        conversionRoutine.value(1,TaxCurrency::TransactionCurrency);
        conversionRoutine.value(2,TaxCurrency::ReportingCurrency);
        conversionTargetMap.insert(TaxCurrency::ReportingCurrency,conversionRoutine);

        Struct curAmountS;
        curAmountS = new Struct(Types::String, cur, Types::Real, amount);
        curAmountS.value(cur, ledger.AccountingCurrency);
        currencyConvAmountMap.insert(TaxCurrency::AccountingCurrency ,curAmountS);

        curAmountS = new Struct(Types::String, cur, Types::Real, amount);
        curAmountS.value(cur, ledger.ReportingCurrency);
        currencyConvAmountMap.insert(TaxCurrency::ReportingCurrency ,curAmountS);

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            this.setRoute(TaxCurrency::TaxCurrency);
        }
        else
        {
            TaxCurConvPath currentRoutine = TaxParameters::find().TaxCurConvPath;

            switch (currentRoutine)
            {
                case TaxCurConvPath::ReportingCurrency:
                    this.setRoute(TaxCurrency::ReportingCurrency);
                    break;
                default:
                    this.setRoute(TaxCurrency::ReportingCurrency);
                    break;
            }
        }

        fixedExchRateMap = new Map(Types::String, Types::AnyType);
        this.initExchageRateType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxCurrencyConversionRoutineHandler construct()
    {
        return new TaxCurrencyConversionRoutineHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Every company will have its own instance.
    /// </summary>
    /// <returns>singleton of this handler</returns>
    public static TaxCurrencyConversionRoutineHandler instance()
    {
        DataAreaId company = curext();
        TaxCurrencyConversionRoutineHandler instance;
        if(!instances.exists(company))
        {
            instance = new TaxCurrencyConversionRoutineHandler();
            instances.insert(company, instance);
        }
        else
        {
            //directly return instance, no need to check if taxParameter.TaxCurConvPath changed or not since currently only reporting routine is supported.
            instance = instances.lookup(company);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExchageRateType</Name>
				<Source><![CDATA[
    private void initExchageRateType()
    {
        if(this.routine == TaxCurrency::ReportingCurrency)
        {
            Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());
            currencyExchangeHelper.parmActiveReportingExchangeRateType(ActiveExchangeRateType::ExchangeRateType2);
            currencyExchangeHelper.parmReportingExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// An open API just for case a transaction currency needed to be set explicitly
    /// </summary>
    /// <param name = "_transactionCurrency">Transaction currency</param>
    public void setTransactionCurrency(CurrencyCode _transactionCurrency)
    {
        Struct curAmountS;
        curAmountS = new Struct(Types::String, cur, Types::Real, amount);
        curAmountS.value(cur, _transactionCurrency);
        currencyConvAmountMap.insert(TaxCurrency::TransactionCurrency ,curAmountS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// An open API just for case a tax currency needed to be set explicitly
    /// </summary>
    /// <param name = "_taxCurrency">Tax currency</param>
    public void setTaxCurrency(CurrencyCode _taxCurrency)
    {
        Struct curAmountS;
        curAmountS = new Struct(Types::String, cur, Types::Real, amount);
        curAmountS.value(cur, _taxCurrency);
        currencyConvAmountMap.insert(TaxCurrency::TaxCurrency ,curAmountS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// An open API just for case the a special conversion routine needed in certain scenario
    /// </summary>
    /// <param name = "_routine">Selected conversion routine</param>
    public void setRoute(TaxCurrency _routine)
    {
        this.routine = _routine;
        this.prepareTaxCurrencyRoutine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportingCurrencyRoutine</Name>
				<Source><![CDATA[
    private void prepareReportingCurrencyRoutine()
    {
        conversionRoutine = this.conversionTargetMap.lookup(TaxCurrency::ReportingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxCurrencyRoutine</Name>
				<Source><![CDATA[
    private void prepareTaxCurrencyRoutine()
    {
        conversionRoutine = this.conversionTargetMap.lookup(TaxCurrency::TaxCurrency);
        conversionRoutine.value(2,this.routine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCurrencyToTransCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// A reverse conversion that convert the transcation currency from tax currency.
    /// </summary>
    /// <param name = "_transactionCurrency">Transaction currency</param>
    /// <param name = "_taxCurrency">Tax currency</param>
    /// <param name = "_fromAmount">From amount</param>
    /// <param name = "_accExchRate">Accounting exchange rate</param>
    /// <param name = "_repExchRate">Reporting exchange rate</param>
    /// <param name = "_exchRateDate">Exchange rate date</param>
    /// <param name = "_roundResult">Rounding needed?</param>
    /// <returns>Transaction currency amount</returns>
    public AmountCur taxCurrencyToTransCurrency(CurrencyCode _transactionCurrency, CurrencyCode _taxCurrency,
                                                AmountCur _fromAmount, ExchRate _accExchRate, ExchRate _repExchRate,
                                                TransDate _exchRateDate= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                boolean _roundResult = true)
    {
        this.prepareTaxCurrencyRoutine();
        currencyExchangeHelper.parmExchangeDate(_exchRateDate);
        this.setTransactionCurrency(_taxCurrency);
        this.setTaxCurrency(_transactionCurrency);
        if (_accExchRate)
        {
            _accExchRate = ExchangeRateCalculation::calculateReciprocalExchangeRate(_accExchRate); //100*(1/(rate/100))
        }
        if (_repExchRate)
        {
            _repExchRate = ExchangeRateCalculation::calculateReciprocalExchangeRate(_repExchRate); //100*(1/(rate/100))
        }
        this.setFixedExchRate(_accExchRate, _repExchRate, true);
        return this.ProcessCurrencyConversion(_fromAmount, _roundResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCurrencyToTaxCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a transaction currency to tax currency via pre-set conversion routine
    /// </summary>
    /// <param name = "_transactionCurrency">Transaction currency</param>
    /// <param name = "_taxCurrency">Tax currency</param>
    /// <param name = "_fromAmount">From amount</param>
    /// <param name = "_accExchRate">Accounting exchange rate</param>
    /// <param name = "_repExchRate">Reporting exchange rate</param>
    /// <param name = "_exchRateDate">Exchange rate date</param>
    /// <param name = "_roundResult">Rounding needed?</param>
    /// <returns>Tax currency amount</returns>
    public AmountCur transCurrencyToTaxCurrency(CurrencyCode _transactionCurrency, CurrencyCode _taxCurrency,
                                                AmountCur _fromAmount, ExchRate _accExchRate, ExchRate _repExchRate,
                                                TransDate _exchRateDate= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                boolean _roundResult = true)
    {
        this.prepareTaxCurrencyRoutine();
        currencyExchangeHelper.parmExchangeDate(_exchRateDate);
        this.setTransactionCurrency(_transactionCurrency);
        this.setTaxCurrency(_taxCurrency);
        this.setFixedExchRate(_accExchRate, _repExchRate);
        return this.ProcessCurrencyConversion(_fromAmount, _roundResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCurrencyToReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a transaction currency to reporting currency
    /// If a tax currency amount is converted via reporting currency before calling this method, the reporting currency will be directly returned with the value converted previously
    /// </summary>
    /// <param name = "_transactionCurrency">Transaction currency</param>
    /// <param name = "_fromAmount">From amount</param>
    /// <param name = "_repExchRate">Reporting exchange rate</param>
    /// <param name = "_exchRateDate">Exchange rate date</param>
    /// <param name = "_roundResult">Rounding needed?</param>
    /// <returns>Reporting currency amount</returns>
    public AmountCur transCurrencyToReportingCurrency(CurrencyCode _transactionCurrency, AmountCur _fromAmount, ExchRate _repExchRate,
                                                        TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                        boolean _roundResult = true)
    {
        Struct transCurS;
        Struct repCurS;
        AmountCur amountRep;
        if (currencyConvAmountMap.exists(TaxCurrency::ReportingCurrency))
        {
            repCurS = currencyConvAmountMap.lookup(TaxCurrency::ReportingCurrency);
            if (!repCurS.value(cur)) 
            {
                // in case no reporting currency provided, the customer should have the transaction in one currency, then directly return transaction currency
                // but in GFM, it will directly return 0, then we should keep consistent with GFM, return 0
                return 0;
            }
        }
        
        this.prepareReportingCurrencyRoutine();
        currencyExchangeHelper.parmExchangeDate(_exchRateDate);
        this.setTransactionCurrency(_transactionCurrency);
        this.setFixedExchRate(0, _repExchRate);
        return this.ProcessCurrencyConversion(_fromAmount, _roundResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFixedExchRate</Name>
				<Source><![CDATA[
    private void setFixedExchRate(ExchRate _accExchRate, ExchRate _repExchRate, boolean _isReciprocalDirection = false)
    {
        Struct tranS;
        Struct AccS;
        Struct RepS;
        if (_accExchRate != 0)
        {
            if (_isReciprocalDirection)
            {
                tranS = currencyConvAmountMap.lookup(TaxCurrency::AccountingCurrency);
                AccS = currencyConvAmountMap.lookup(TaxCurrency::TransactionCurrency);
            }
            else
            {
                tranS = currencyConvAmountMap.lookup(TaxCurrency::TransactionCurrency);
                AccS = currencyConvAmountMap.lookup(TaxCurrency::AccountingCurrency);
            }
            fixedExchRateMap.insert(tranS.value(cur) + separator + AccS.value(cur), _accExchRate);
        }
        if (_repExchRate != 0)
        {
            if (_isReciprocalDirection)
            {
                tranS = currencyConvAmountMap.lookup(TaxCurrency::ReportingCurrency);
                RepS = currencyConvAmountMap.lookup(TaxCurrency::TransactionCurrency);
            }
            else
            {
                tranS = currencyConvAmountMap.lookup(TaxCurrency::TransactionCurrency);
                RepS = currencyConvAmountMap.lookup(TaxCurrency::ReportingCurrency);
            }
            fixedExchRateMap.insert(tranS.value(cur) + separator + RepS.value(cur), _repExchRate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// For case a fixed exchange rate not needed within one company
    /// </summary>
    public void removeFixedExchRate()
    {
        fixedExchRateMap = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCurrencyConversion</Name>
				<Source><![CDATA[
    private AmountCur processCurrencyConversion(AmountCur _fromAmount, boolean _roundResult)
    {
        this.initExchageRateType();
        AmountCur toAmount = _fromAmount;
        Struct fromCurS;
        Struct toCurS;
        fromCurS = currencyConvAmountMap.lookup(conversionRoutine.value(1));
        fromCurS.value(amount, _fromAmount);
        toCurS = currencyConvAmountMap.lookup(conversionRoutine.value(conversionRoutine.lastIndex()));
        if (fromCurS.value(cur) == toCurS.value(cur))
        {
            if (_roundResult)
            {
                toAmount = CurrencyExchangeHelper::amount(toAmount, toCurS.value(cur));
            }
            toCurS.value(amount, toAmount);
            return toAmount;
        }

        ExchRate tmpFixedExchRate = 0;
        for (int i = 2; i <= conversionRoutine.lastIndex(); i++)
        {
            if (conversionRoutine.value(i-1) != null && conversionRoutine.value(i) != null)
            {
                fromCurS = currencyConvAmountMap.lookup(conversionRoutine.value(i-1));
                toCurS = currencyConvAmountMap.lookup(conversionRoutine.value(i));
                if (fromCurS.value(cur) != toCurS.value(cur))
                {
                    if ( fixedExchRateMap.exists(fromCurS.value(cur) + separator + toCurS.value(cur)) )
                    {
                        tmpFixedExchRate = fixedExchRateMap.lookup(fromCurS.value(cur) + separator + toCurS.value(cur));
                    }
                    currencyExchangeHelper.parmExchangeRate1(tmpFixedExchRate);
                    toAmount = currencyExchangeHelper.calculateCurrencyToCurrency(fromCurS.value(cur), toCurS.value(cur), toAmount, _roundResult);
                }
                toCurS.value(amount, toAmount);
                tmpFixedExchRate = 0;
            }
        }
        return toAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>