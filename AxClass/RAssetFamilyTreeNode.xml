<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetFamilyTreeNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetFamilyTreeNode
{
    RAssetFamilyTreeNode        parent;
    RAssetFamilyTreeNodeLink    children;

    RAssetId                    rAssetId;
    RAssetStandardId            assetStandardId;
    NoYes                       enumDepreciate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewChildNode</Name>
				<Source><![CDATA[
        private void addNewChildNode(RAssetFamilyTreeNode _node)
    {
        if (children)
            children.appendAssetFamilyTreeNode(_node);
        else
            children = new RAssetFamilyTreeNodeLink(_node);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ancestorMatchDepreciation</Name>
				<Source><![CDATA[
        public boolean ancestorMatchDepreciation(NoYes _testvalue)
    {
        boolean ret = false;

        if(enumDepreciate == _testvalue)
        {
            ret = true;
        }
        else
        {
            if (parent)
                ret = parent.ancestorMatchDepreciation(_testvalue);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ancestorMatchingDepreciation</Name>
				<Source><![CDATA[
        public str ancestorMatchingDepreciation(NoYes _testvalue)
    {
        str ret;

        if (enumDepreciate == _testvalue)
        {
            ret = rAssetId;
        }
        else
        {
            if (parent)
                ret = parent.ancestorMatchingDepreciation(_testvalue);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAncestorLine</Name>
				<Source><![CDATA[
        public boolean buildAncestorLine(RAssetId         _assetId         = rAssetId,
                                     RAssetStandardId _assetStandardId = assetStandardId,
                                     RAssetId         _parentId        = RAssetTable::find(_assetId).AccountNumMain)
    {
        RAssetTable              myparent;
        boolean                  ret     = true;

        rAssetId        = _assetId;
        assetStandardId = _assetStandardId;

        if (_parentId)
        {
            select firstonly myparent
                where myparent.AccountNum == _parentId;

            if (myparent)
            {
                if (this.hasDescendant(myparent.AccountNum))
                    ret = false;
                else
                {
                    parent = new RAssetFamilyTreeNode();
                    parent.initiliseFromAssetTable(myparent,_assetStandardId);
                    ret = parent.buildAncestorLine();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDescendantTree</Name>
				<Source><![CDATA[
        public boolean buildDescendantTree(RAssetId         _assetId         = rAssetId,
                                       RAssetStandardId _assetStandardId = assetStandardId)
    {
        boolean                  ret = true;
        RAssetTable              child;
        RAssetFamilyTreeNode     rAssetFamilyTreeNode;

        rAssetId        = _assetId;
        assetStandardId = _assetStandardId;

        while select child
            where child.AccountNumMain == rAssetId
        {
            if (this.hasAncestor(child.AccountNum))
            {
                ret = false;
                break;
            }
            else
            {
                rAssetFamilyTreeNode = new RAssetFamilyTreeNode();
                rAssetFamilyTreeNode.setparent(this);
                rAssetFamilyTreeNode.initiliseFromAssetTable(child,_assetStandardId);
                if (rAssetFamilyTreeNode.buildDescendantTree())
                    this.addNewChildNode(rAssetFamilyTreeNode);
                else
                {
                    ret=false;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantAssetsMatchingDepreciation</Name>
				<Source><![CDATA[
        #define.comma(",")
    public str descendantAssetsMatchingDepreciation(NoYes _testvalue)
    {
        str ret;
        RAssetFamilyTreeNode             tNode;
        RAssetFamilyTreeNodeLinkIterator tIterator;

        tIterator = new RAssetFamilyTreeNodeLinkIterator(children);
        do
        {
            tNode = tIterator.getNext();
            if (tNode)
                ret += tNode.descendantAssetsMatchingDepreciation(_testvalue);

        }
        while (tNode);

        if (enumDepreciate == _testvalue)
        {
            ret += rAssetId;
            if ("" != ret)
                ret += #comma;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantMatchDepreciation</Name>
				<Source><![CDATA[
        public boolean descendantMatchDepreciation(NoYes _testvalue)
    {
        boolean                          ret = false;
        RAssetFamilyTreeNode             tNode;
        RAssetFamilyTreeNodeLinkIterator tIterator;

        if (enumDepreciate == _testvalue)
        {
            ret = true;
        }
        else
        {
            tIterator = new RAssetFamilyTreeNodeLinkIterator(children);
            do
            {
                tNode=tIterator.getNext();
                if (tNode)
                {
                    ret = tNode.descendantMatchDepreciation(_testvalue);
                }
            }
            while (! ret && tNode);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldestAncestor</Name>
				<Source><![CDATA[
        private RAssetFamilyTreeNode getOldestAncestor()
    {
        if(parent)
            return parent.getOldestAncestor();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAncestor</Name>
				<Source><![CDATA[
        private boolean hasAncestor(RAssetId _assetId)
    {
        boolean ret = false;

        if(rAssetId == _assetId)
            ret = true;
        else
        {
            if(parent)
                ret = parent.hasAncestor(_assetId);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDescendant</Name>
				<Source><![CDATA[
        public boolean hasDescendant(RAssetId _assetId)
    {
        boolean                          ret = false;
        RAssetFamilyTreeNode             tNode;
        RAssetFamilyTreeNodeLinkIterator tIterator;

        if (_assetId == rAssetId)
            ret = true;
        else
        {
            tIterator = new RAssetFamilyTreeNodeLinkIterator(children);
            do
            {
                tNode=tIterator.getNext();
                if (tNode)
                    ret = tNode.hasDescendant(_assetId);
            }
            while(! ret && tNode);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiliseFromAssetTable</Name>
				<Source><![CDATA[
        public void initiliseFromAssetTable(RAssetTable      _assetTable = null,
                                        RAssetStandardId _rAssetStandardId = assetStandardId)
    {
        RAssetTable rAssetTable;

        if (_assetTable)
        {
            rAssetId            = _assetTable.AccountNum;
            assetStandardId     = _rAssetStandardId;
            if (_rAssetStandardId)
                enumDepreciate  = RAssetStandards::find(rAssetId, _rAssetStandardId).Depreciation;
        }
        else
        {
            select  firstonly rAssetTable
                where rAssetTable.AccountNum == rAssetId;
            if (rAssetTable)
                this.initiliseFromAssetTable(rAssetTable);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setparent</Name>
				<Source><![CDATA[
        public void setparent(RAssetFamilyTreeNode _node)
    {
        parent = _node;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>