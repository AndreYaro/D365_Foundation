<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxTransReport
{
    // <GJP>
    #ISOCountryRegionCodes
    // </GJP>

    TaxReportPropertiesBag_W    propertiesBag;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPropertiesBag</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the class with extra parameters needed in the report class.
    /// </summary>
    /// <param name="_propertiesBagPacked">
    ///    Packed class with properties.
    /// </param>
    public void setPropertiesBag(container _propertiesBagPacked = conNull())
    {
        if (_propertiesBagPacked)
        {
            propertiesBag = TaxReportPropertiesBag_W::construct();
            propertiesBag.unpack(_propertiesBagPacked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
/*This method will return a table containing records with all reportIds and Amounts for a given period.*/
    TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter,
        NoYes               _reported,
        DebCredProposal     _debitCredit,
        Counter             _versionMin,
        Counter             _versionMax
        )
    {
        TaxTrans            taxTrans;
        TmpTaxReportById    tmpTaxReportById;
        TaxReportLayout     taxReportLayout;
        boolean             useVatDueDate_W = TaxParameters::reportUseVatDueDate_W();
        TaxTrans_W          taxTrans_W;

        taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(_taxPeriod).TaxAuthority).TaxReportLayout;
        boolean isCountryRegionAE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]);
        boolean isCountryRegionAU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU]);
        boolean isCountryRegionCZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);
        boolean allowReverseCharge = (!isCountryRegionAE && !isCountryRegionCZ);

        ttsbegin;

        if (_debitCredit == DebCredProposal::None ||
            _debitCredit == DebCredProposal::Debit)
        {
            if (!useVatDueDate_W)
            {
                //Selects only transactions that are not caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(SourceTaxAmountCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TaxOrigin
                     // <GEEU>
                     where (taxTrans.TransDate       >= _fromDate                       &&
                           taxTrans.TransDate       <= _toDate)                        &&
                           taxTrans.IntracomVAT == NoYes::No                           &&
                    // </GEEU>
                           (allowReverseCharge || taxTrans.ReverseCharge_W == NoYes::No) &&
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax &&
                          (((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                          ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                {
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoAE]))
                    {
                        taxTrans.TransDate = _fromDate; // we need to know period start date for the Norwegian tax report, so saving it in this field
                        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById,
                                                                                       NoYes::No,
                                                                                       null,
                                                                                       TaxAuthorityAddress::find(TaxPeriodHead::find(TaxTable::find(taxTrans.TaxCode).TaxPeriod).TaxAuthority).TaxReportLayout);
                    }
                    else
                    {
                        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No, null, taxReportLayout);
                    }
                }
            }
            else
            {
                //Selects only transactions that are not caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(SourceTaxAmountCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TaxOrigin
                     // <GEEU>
                     where !taxTrans.PostponeVAT                                        &&
                           taxTrans.IntracomVAT == NoYes::No                            &&
                    // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax &&
                          (((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                          ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                        // <GEEU>
                        join RecId from taxTrans_W
                            where taxTrans_W.TaxTrans == taxTrans.RecId
                                && (useVatDueDate_W
                                && taxTrans_W.VatDueDate_W    >= _fromDate
                                && taxTrans_W.VatDueDate_W    <= _toDate)
                        // </GEEU>
                {
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No);
                }
            }
        }

        if (_debitCredit == DebCredProposal::None ||
            _debitCredit == DebCredProposal::Credit)
        {
            if (!useVatDueDate_W)
            {
                //Selects only transactions there is caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(SourceTaxAmountCur)
                     from taxTrans
                     group by TaxDirection, TaxCode
                     // <GEEU>
                     where (taxTrans.TransDate       >= _fromDate                       &&
                           taxTrans.TransDate       <= _toDate)                        &&
                     // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax              &&
                          (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                {
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoAE]))
                    {
                        taxTrans.TransDate = _fromDate; // we need to know period start date for the Norwegian tax report, so saving it in this field
                    }
                    
                    TaxReportLayout taxReportLayoutCalc = taxReportLayout;

                    if (isCountryRegionAE)
                    {
                        taxReportLayoutCalc = TaxAuthorityAddress::find(TaxPeriodHead::find(TaxTable::find(taxTrans.TaxCode).TaxPeriod).TaxAuthority).TaxReportLayout;
                    }

                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes, null, taxReportLayoutCalc);
                }
            }
            else
            {
                //Selects only transactions there is caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(SourceTaxAmountCur)
                     from taxTrans
                     group by TaxDirection, TaxCode
                     // <GEEU>
                     where !taxTrans.PostponeVAT                                        &&
                     // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax              &&
                          (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                         // <GEEU>
                         join Recid from taxTrans_W
                            where taxTrans_W.TaxTrans == taxTrans.RecId
                                && (useVatDueDate_W
                                && taxTrans_W.VatDueDate_W    >= _fromDate
                                && taxTrans_W.VatDueDate_W    <= _toDate)
                        // </GEEU>
                {
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes);
                }
            }
        }

        // Updating value of adjusting amount of writeoff transactions
        if (isCountryRegionAE || isCountryRegionAU)
        {            
            TaxTable taxTable;
            CustTrans custTrans;

            while select sum(TaxAmount) from taxTrans
               group by taxTrans.TaxCode, taxTrans.TransDate, taxTable.RepFieldBaseOutgoing, taxTrans.TaxValue
            join TransType from custTrans
                where taxtrans.Voucher == custTrans.Voucher
                    && taxtrans.TransDate == custTrans.TransDate
                    && custTrans.TransType == LedgerTransType::WriteOff
                    && (taxTrans.TransDate >= _fromDate
                        && taxTrans.TransDate <= _toDate)
                    && taxTrans.TaxPeriod == _taxPeriod
            join RepFieldBaseOutgoing from taxTable
                where TaxTrans.TaxCode == taxTable.TaxCode
            {
                select firstonly forupdate AdjustedAmount_AE,Amount from tmpTaxReportById
                    where tmpTaxReportById.TaxReportField == taxTable.RepFieldBaseOutgoing;

                if (tmpTaxReportById)
                {
                    if (isCountryRegionAE)
                    {
                        tmpTaxReportById.AdjustedAmount_AE = taxTrans.TaxAmount;
                    }

                    if (isCountryRegionAU)
                    {
                        #TaxReportingCodesAU

                        Amount taxBaseAmount = taxTrans.TaxValue ? taxTrans.TaxAmount * 100 / taxTrans.TaxValue : 0;

                        if (taxTable.RepFieldBaseOutgoing == #field_1E ||
                            taxTable.RepFieldBaseOutgoing == #field_1C ||
                            taxTable.RepFieldBaseOutgoing == #field_G9And1A)
                        {
                            taxBaseAmount = -(taxBaseAmount);
                        }

                        tmpTaxReportById.Amount += taxBaseAmount;
                    }

                    tmpTaxReportById.update();
                }
            }
        }

        ttscommit;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static TaxTransReport construct(TaxPeriod _taxPeriod)
    {
        TaxTransReport  taxTransReport;
        TaxReportLayout taxReportLayout;
        ;

        taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(_taxPeriod).TaxAuthority).TaxReportLayout;

        switch (taxReportLayout)
        {
            case TaxReportLayout::Belgium:
                taxTransReport = new TaxTransReport_BE();
                break;

            // <GJP>
            case TaxReportLayout::Japan:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    taxTransReport = new TaxTransReport_JP();
                }
                break;
            // </GJP>

            case TaxReportLayout::Sweden, TaxReportLayout::Finland:
                taxTransReport = new TaxTransReport_W();
                break;

            default:
                // <GMY>
                if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
                {
                    taxTransReport = new TaxTransReport_MY();
                }
                else
                {
                // </GMY>
                taxTransReport = new TaxTransReport();
                // <GMY>
                }
                // </GMY>
        }
        return taxTransReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>