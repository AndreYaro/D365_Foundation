<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpCashMappingDistribution</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles expense line cash advance distribution mapping.
/// </summary>
class TrvExpCashMappingDistribution
{
    TrvExpTrans trvExpTrans;
    TrvCashAdvance trvCashAdvance;
    AmountMST availableToAllocate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapExpenseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> records for the tax lines for the expense.
    /// </summary>
    private void mapExpenseAmount()
    {
        AccountingDistribution accountingDistribution;

        SourceDocumentLineRefRecId sourceDocumentLineRecId = this.getExpSourceDocumentLineRecId();

        while select accountingDistribution where accountingDistribution.SourceDocumentLine == sourceDocumentLineRecId
        {
            AmountMST advanceAmountMST = ((accountingDistribution.TransactionCurrencyAmount / trvExpTrans.AmountCurr) * trvExpTrans.AmountMST);

            if (availableToAllocate >= advanceAmountMST)
            {
                TrvSubmitExpenseReportToWorkflow::insertTrvAccountingDistribution(accountingDistribution.RecId,
                                                                              trvCashAdvance.CurrencyCode,
                                                                              advanceAmountMST,
                                                                              accountingDistribution.TransactionCurrencyAmount,
                                                                              trvCashAdvance.RecId,
                                                                              NoYes::No, 0, NoYes::Yes);
                availableToAllocate = availableToAllocate - advanceAmountMST;

                if (availableToAllocate > 0 && trvExpTrans.TaxIncluded)
                {
                    AccountingDistribution accountingDistributionTax;
                    SourceDocumentLine sourceDocumentLine;

                    select firstonly ParentDistribution from accountingDistributionTax
                        exists join RecId from sourceDocumentLine
                            where sourceDocumentLine.ParentSourceDocumentLine == trvExpTrans.SourceDocumentLine
                                && accountingDistributionTax.SourceDocumentLine == sourceDocumentLine.RecId;

                    this.mapTaxAmountsForExpenseLine(accountingDistributionTax.ParentDistribution);
                }
            }
            else if (availableToAllocate > 0)
            {
                AmountCur availableToAllocateCurr = CurrencyExchangeHelper::curAmount(availableToAllocate,
                                                                                      accountingDistribution.TransactionCurrency,
                                                                                      accountingDistribution.AccountingDate,
                                                                                      UnknownNoYes::Unknown,
                                                                                      trvExpTrans.ExchangeRate);

                TrvSubmitExpenseReportToWorkflow::insertTrvAccountingDistribution(accountingDistribution.RecId,
                                                                              trvCashAdvance.CurrencyCode,
                                                                              availableToAllocate,
                                                                              availableToAllocateCurr,
                                                                              trvCashAdvance.RecId,
                                                                              NoYes::Yes, 0, NoYes::Yes);
                availableToAllocate = 0;
            }

        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>mapTaxAmountsForExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> records for the tax lines for the expense.
    /// </summary>
    /// <param name = "_parentDistributionRecId">
    /// Record identifier for parent accountingdistribution.
    /// </param>
    private void mapTaxAmountsForExpenseLine(AccountingDistributionRecId _parentDistributionRecId)
    {
        AccountingDistribution accountingDistribution;

        if (_parentDistributionRecId)
        {
            while select accountingDistribution where accountingDistribution.ParentDistribution == _parentDistributionRecId
            {
                AmountMST advanceAmountMST = ((accountingDistribution.TransactionCurrencyAmount / trvExpTrans.AmountCurr) * trvExpTrans.AmountMST);

                if (availableToAllocate >= advanceAmountMST)
                {
                    TrvSubmitExpenseReportToWorkflow::insertTrvAccountingDistribution(accountingDistribution.RecId,
                                                                                  trvCashAdvance.CurrencyCode,
                                                                                  advanceAmountMST,
                                                                                  accountingDistribution.TransactionCurrencyAmount,
                                                                                  trvCashAdvance.RecId,
                                                                                  NoYes::No, 0, NoYes::Yes);
                    availableToAllocate = availableToAllocate - advanceAmountMST;

                }
                else if (availableToAllocate > 0)
                {
                    TrvSubmitExpenseReportToWorkflow::insertTrvAccountingDistribution(accountingDistribution.RecId,
                                                                                  trvCashAdvance.CurrencyCode,
                                                                                  advanceAmountMST,
                                                                                  accountingDistribution.TransactionCurrencyAmount,
                                                                                  trvCashAdvance.RecId,
                                                                                  NoYes::Yes, 0, NoYes::Yes);
                    availableToAllocate = 0;
                }
            }
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get sourcedocumentline record identifier for the expense line.
    /// </summary>
    /// <returns>
    /// Sourcedocumentline record identifier for the expense line.
    /// </returns>
    private SourceDocumentLineRefRecId getExpSourceDocumentLineRecId()
    {
        return trvExpTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set and get instance of <c>_trvCashAdvance</c> table.
    /// </summary>
    /// <param name = "_trvCashAdvance">Cash advance record.</param>
    /// <returns>Instance of <c>TrvCashAdvance</c> record.</returns>
    private TrvCashAdvance parmTrvCashAdvance(TrvCashAdvance _trvCashAdvance = null)
    {
        if (prmIsDefault(_trvCashAdvance))
        {
            _trvCashAdvance = trvCashAdvance;
        }
        else
        {
            trvCashAdvance = _trvCashAdvance;
        }

        return _trvCashAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvExpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set and get instance of <c>_trvExpTrans</c> table.
    /// </summary>
    /// <param name = "_trvExpTrans">Expense line record.</param>
    /// <returns>Instance of <c>TrvExpTrans</c> record.</returns>
    private TrvExpTrans parmTrvExpTrans(TrvExpTrans _trvExpTrans = null)
    {
        if (prmIsDefault(_trvExpTrans))
        {
            _trvExpTrans = trvExpTrans;
        }
        else
        {
            trvExpTrans = _trvExpTrans;
        }
    
        return _trvExpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailableToAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set and get amount allocated to deduct from cash advance.
    /// </summary>
    /// <param name = "_availableToAllocate">Amount allocated to deduct from cash advance.</param>
    /// <returns>Amount allocated to deduct from cash advance.</returns>
    private AmountMST parmAvailableToAllocate(AmountMST _availableToAllocate = 0)
    {
        if (prmIsDefault(_availableToAllocate))
        {
            _availableToAllocate = availableToAllocate;
        }
        else
        {
            availableToAllocate = _availableToAllocate;
        }
    
        return _availableToAllocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrvAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TrvAccountingDistribution</c> record for expense.
    /// </summary>
    /// <param name = "_trvExpCashAdvanceMapping">Expense cash advance mapping record.</param>
    public static void createTrvAccountingDistribution(TrvExpCashAdvanceMapping _trvExpCashAdvanceMapping)
    {
        TrvExpTrans trvExpTrans = TrvExpTrans::find(_trvExpCashAdvanceMapping.ExpLineRecId);
        TrvCashAdvance trvCashAdvance = TrvCashAdvance::findRecId(_trvExpCashAdvanceMapping.CashAdvanceRecId);

        TrvExpCashMappingDistribution trvExpCashMappingDistribution = new TrvExpCashMappingDistribution();

        trvExpCashMappingDistribution.parmTrvExpTrans(trvExpTrans);
        trvExpCashMappingDistribution.parmTrvCashAdvance(trvCashAdvance);
        trvExpCashMappingDistribution.parmAvailableToAllocate(_trvExpCashAdvanceMapping.AmountMST);
        trvExpCashMappingDistribution.mapExpenseAmount();

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>