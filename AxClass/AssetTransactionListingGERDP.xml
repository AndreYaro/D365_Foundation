<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransactionListingGERDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransactionListingDP</c> class is the data provider for the <c>AssetTransactionListingGER</c> report.
/// </summary>
internal final class AssetTransactionListingGERDP
{
    AssetTransactionListingTmp assetTransactionListingTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTransactionListingTmp</Name>
				<Source><![CDATA[
    internal AssetTransactionListingTmp getAssetTransactionListingTmp(AssetTransactionListingGERContract _contract, Query _query)
    {
        AssetTransactionListing assetTransactionListing;
        AssetAmount transactionAmount;
        Query query;
        QueryRun queryRun;
        AssetSumCalc    assetSumCalc;
        AssetId lastAssetId;
        AssetBookId lastBookId;
        AssetAmount lastAcquisitionValue;
        AssetAmount lastNetBookValue;
        AssetAmountReportingCurrency lastAcquisitionValueReporting;

        query = _query;
        queryRun = new QueryRun(query);

        RecordInsertList recordList = new RecordInsertList(assetTransactionListingTmp.TableId, false, false, false, false, false, assetTransactionListingTmp);
        while (queryRun.next())
        {
            assetTransactionListing = queryRun.get(tableNum(AssetTransactionListing)) as AssetTransactionListing;

            assetTransactionListingTmp.clear();

            assetTransactionListingTmp.AssetGroup = assetTransactionListing.AssetGroup;
            assetTransactionListingTmp.AssetID = assetTransactionListing.AssetId;
            assetTransactionListingTmp.AssetName = assetTransactionListing.Name;
            assetTransactionListingTmp.Location = assetTransactionListing.Location;
            assetTransactionListingTmp.Status = assetTransactionListing.Status;
            assetTransactionListingTmp.BookID = assetTransactionListing.BookId;
            assetTransactionListingTmp.CurrentOperationsTax = assetTransactionListing.CurrentOperationsTax;

            // If the AssetId/BookId combination has changed, needed as there is significant cost to recalculating
            //  this for each transaction if it is not needed.
            if (lastAssetId != assetTransactionListing.AssetId
                || lastBookId != assetTransactionListing.BookId)
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetYear(assetTransactionListing.AssetId, assetTransactionListing.BookId);

                assetTransactionListingTmp.AquisitionValue = assetSumCalc.acquisitionValueAll();
                assetTransactionListingTmp.NetBookValue = assetSumCalc.netBookValue();

                // Update the new 'last' values
                lastAssetId = assetTransactionListing.AssetId;
                lastBookId = assetTransactionListing.BookId;
                lastAcquisitionValue = assetTransactionListingTmp.AquisitionValue;
                lastNetBookValue = assetTransactionListingTmp.NetBookValue;

                assetSumCalc = AssetSumCalc_Trans::newAssetYearByCurrency(assetTransactionListing.AssetId, assetTransactionListing.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, AssetSumCalcType::Reporting);

                assetTransactionListingTmp.AquisitionValueReporting = assetSumCalc.acquisitionValueAll();

                lastAcquisitionValueReporting = assetTransactionListingTmp.AquisitionValueReporting;
            }
            else
            {
                // Otherwise use the last values
                assetTransactionListingTmp.AquisitionValue = lastAcquisitionValue;
                assetTransactionListingTmp.NetBookValue = lastNetBookValue;
                assetTransactionListingTmp.AquisitionValueReporting = lastAcquisitionValueReporting;
            }

            assetTransactionListingTmp.Transdate = assetTransactionListing.TransDate;
            assetTransactionListingTmp.TransType = assetTransactionListing.TransType;
            assetTransactionListingTmp.Txt = assetTransactionListing.Txt;
            assetTransactionListingTmp.Voucher = assetTransactionListing.Voucher;
            assetTransactionListingTmp.CurrencyCode = assetTransactionListing.CurrencyCode;
            assetTransactionListingTmp.AmountCur = assetTransactionListing.AmountCur;
            assetTransactionListingTmp.AmountMst = assetTransactionListing.AmountMST;
            assetTransactionListingTmp.AmountMstSecond = assetTransactionListing.ReportingCurrencyAmount;
            assetTransactionListingTmp.PreviousRunningAmountMST = transactionAmount;
            transactionAmount += assetTransactionListing.AmountMST;
            assetTransactionListingTmp.RunningAmountMST = transactionAmount;

            recordList.add(assetTransactionListingTmp);
        }

        recordList.insertDatabase();

        select assetTransactionListingTmp;
        return assetTransactionListingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static AssetTransactionListingGERDP construct()
    {
        AssetTransactionListingGERDP dataProvider;
        dataProvider = new AssetTransactionListingGERDP();
        return dataProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>