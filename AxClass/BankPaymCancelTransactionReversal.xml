<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymCancelTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plugin for reversing transactions
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class BankPaymCancelTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerBankPayment</Name>
				<Source><![CDATA[
    private boolean isCustomerBankPayment(CustTrans _custTrans)
    {
        boolean isCustomerBankPayment = true;

        if (_custTrans.TransType == LedgerTransType::Payment
            && _custTrans.CompanyBankAccountId != '')
        {
            // If the payment has been cancelled, we cannot cancel it again.
            if (_custTrans.CancelledPayment == NoYes::Yes
                || _custTrans.BankLCExportLine != 0)
            {
                isCustomerBankPayment = false;
            }
            else
            {
                // disable if there is a post dated check
                if (CustVendPDCManager::isPostDatedChecksEnabled())
                {
                    isCustomerBankPayment = !CustVendPDCRegister::existsForCustTrans(_custTrans.RecId);
                }
            }
        }
        else
        {
            isCustomerBankPayment = false;
        }
        
        return isCustomerBankPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        // Bank cancels transactions instead of reversing them.
        CustTrans custTrans = CustTrans::findVoucherDate(_reversalExecutionDetail.SubledgerVoucher, _reversalExecutionDetail.TransactionDate);

        boolean isSuccessfulReversal = false;

        if (this.isCustomerBankPayment(custTrans))
        {
            Args args = new Args();
            args.record(custTrans);

            BankPaymCancel bankPaymCancel;
            bankPaymCancel = BankPaymCancel::newBankPaymCancel(custTrans);
            bankPaymCancel.parmContract(_contract);
            if (_contract.parmReversalDate() != dateNull())
            {
                bankPaymCancel.parmTransDate(_contract.parmReversalDate());
            }

            if (bankPaymCancel.prompt())
            {
                bankPaymCancel.runOperation();
                isSuccessfulReversal = bankPaymCancel.parmIsCancelSuccessful();
            }
        }

        return isSuccessfulReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        boolean isValid;

        switch (_detail.JournalCategory)
        {
            case LedgerTransType::Payment, LedgerTransType::GeneralJournal:
                isValid = BankAccountTrans::findByVoucher(_detail.SubledgerVoucher, _detail.TransactionDate).RecId != 0;
                break;

            case LedgerTransType::Bank:
                isValid = true;
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemActionStr(BankPaymentCancel);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>