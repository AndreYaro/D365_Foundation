<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCreatePeriodBalances_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerCreatePeriodBalances))]
public final class LedgerCreatePeriodBalances_ApplicationSuite_Extension
{
    private SimulationJournalGroupId_IT simulationJournalGroupId_IT;
    internal AmountMST periodToDateWithSim_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPeriodBalancesMainAccount</Name>
				<Source><![CDATA[
    public void createPeriodBalancesMainAccount(MainAccount _mainAccount)
    {
        next createPeriodBalancesMainAccount(_mainAccount);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            TmpDateSumCode tmpDateSumCode = this.periodBalances();
            LedgerBalanceMainAccountAmounts balances;
            FiscalCalendarPeriod FiscalCalendarPeriod;
            AmountMST accumulated;
            AmountMST accumulatedSim;

            if (usePostingLayerRange)
            {
                balances.parmPostingLayerList(postingLayerList);
                balances.parmPostingLayer(postingLayer);
            }

            balances.parmSeparateDebitsAndCredits(true);
            balances.parmSimulationJournalGroupId_IT(simulationJournalGroupId_IT);

            while select EndDate, Type, StartDate, RecId from fiscalCalendarPeriod
                join tmpDateSumCode
                    where tmpDateSumCode.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
            {
                balances.parmAccountingDateRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate);
                balances.parmIncludeClosingPeriod(fiscalCalendarPeriod.Type == FiscalPeriodType::Closing);
                balances.parmIncludeOpeningPeriod(fiscalCalendarPeriod.Type == FiscalPeriodType::Opening);
                balances.parmIncludeRegularPeriod(fiscalCalendarPeriod.Type == FiscalPeriodType::Operating);
                
                balances.calculateBalance(_mainAccount);

                accumulated += tmpDateSumCode.Total;

                balances.calculateBalanceSim_IT(_mainAccount);

                ttsbegin;
                while select forupdate tmpDateSumCode
                    where tmpDateSumCode.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                {
                    tmpDateSumCode.SimTotal_IT = (balances.getAccountingCurrencyDebitBalance() - balances.getAccountingCurrencyCreditBalance());
                    tmpDateSumCode.TotalWithSim_IT = tmpDateSumCode.Total + tmpDateSumCode.SimTotal_IT;
                    accumulatedSim += tmpDateSumCode.SimTotal_IT;
                    tmpDateSumCode.RegularHours += (accumulatedSim + accumulated);

                    tmpDateSumCode.update();
                }
                ttscommit;
            }
            periodToDateWithSim_IT = tmpDateSumCode.RegularHours;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSimulationJournalGroupId_IT</Name>
				<Source><![CDATA[
    public SimulationJournalGroupId_IT parmSimulationJournalGroupId_IT(SimulationJournalGroupId_IT _simulationJournalGroupId = simulationJournalGroupId_IT)
    {
        simulationJournalGroupId_IT = _simulationJournalGroupId;

        return simulationJournalGroupId_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodToDateWithSim_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the simulated closing balance.
    /// </summary>
    /// <returns>The simulated closing balance.</returns>
    public AmountMST periodToDateWithSim_IT()
    {
        return periodToDateWithSim_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodBalancesDimAttrValueCombo</Name>
				<Source><![CDATA[
    public void createPeriodBalancesDimAttrValueCombo(DimensionAttributeValueCombination _dimAttrValueCombo)
    {
        next createPeriodBalancesDimAttrValueCombo(_dimAttrValueCombo);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            periodToDateWithSim_IT = tmpDateSumCode.RegularHours;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpDateSumCodeForDimensionAttributeValueCombination</Name>
				<Source><![CDATA[
    protected TmpDateSumCode initTmpDateSumCodeForDimensionAttributeValueCombination(
        DimensionAttributeValueCombination _dimAttrValueCombo,
        FiscalCalendarPeriod _fiscalCalendarPeriod,
        LedgerBalanceDimAttrValueComboAmounts _balances)
    {
        
        TmpDateSumCode tmpDateSumCode = next initTmpDateSumCodeForDimensionAttributeValueCombination(
            _dimAttrValueCombo,
            _fiscalCalendarPeriod,
            _balances);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            _balances.calculateBalanceSim_IT(_dimAttrValueCombo);

            tmpDateSumCode.SimTotal_IT = (_balances.getAccountingCurrencyDebitBalance() - _balances.getAccountingCurrencyCreditBalance());
            tmpDateSumCode.TotalWithSim_IT = tmpDateSumCode.Total + tmpDateSumCode.SimTotal_IT;

            AmountMST accumulatedSim = tmpDateSumCode.SimTotal_IT;
            tmpDateSumCode.RegularHours += (accumulatedSim + accumulated);
        }

        return tmpDateSumCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>