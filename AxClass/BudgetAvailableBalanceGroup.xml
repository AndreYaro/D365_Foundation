<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAvailableBalanceGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetAvailableBalanceGroup</c> class provides budgetary control category aggregations for a
///    budget group by using the specified <c>BudgetModel</c> record, a starting interval date, and an
///    ending interval date.
/// </summary>
public class BudgetAvailableBalanceGroup extends BudgetAvailableBalance
{
    recId                   budgetGroupRecId;
    QueryBuildDataSource    budgetGroup_qbds;
    QueryBuildDataSource    budgetGroupLedgerDim_qbds;

    QueryBuildDataSource    budgetGroupLedgerDim_Relieved_qbds;
    QueryBuildDataSource    dimensionAttribValueCombControlLedger_qbds;

    QueryBuildRange         budgetGroup_qbr;
    QueryBuildRange         budgetGroup_Relieved_qbr;

    QueryBuildDataSource calculationSummaryGroupLedgerDimensionQbds;
    QueryBuildRange calculationSummaryGroupRange;

    QueryBuildDataSource calculationDeltaGroupLedgerDimensionQbds;
    QueryBuildRange calculationDeltaGroupRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal properties of an instance of the <c>BudgetAvailableBalanceGroup</c> class.
    /// </summary>
    /// <param name="_primaryLedgerId">
    ///    The record ID for the primary <c>Ledger</c> record to use for aggregations.
    /// </param>
    /// <param name="_budgetGroupRecId">
    ///    A record ID of a budget group table buffer.
    /// </param>
    /// <param name="_fromIntervalDate">
    ///    The starting date interval to use for aggregations.
    /// </param>
    /// <param name="_toIntervalDate">
    ///    The ending date interval to use for aggregations.
    /// </param>
    protected void initialize(
        recId _primaryLedgerId,
        recId _budgetGroupRecId,
        TransDate _fromIntervalDate,
        TransDate _toIntervalDate)
    {
        primaryLedgerId           = _primaryLedgerId;
        budgetGroupRecId          = _budgetGroupRecId;
        fromIntervalDate          = _fromIntervalDate;
        toIntervalDate            = _toIntervalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BudgetAvailableBalanceGroup</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is overridden to prevent a caller from constructing a class instance by using the
    ///    <c>new</c> method.
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBudgetControlCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetaryControlCategorySumAll</c> query for use by the aggregation calculation.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetaryControlCategorySumAll</c> query by calling
    ///    the <c>super</c> method and establishes the required query build data sources and query build
    ///    ranges. It also prepares the <c>trackingDateValueStr_qbr</c> query range value because it is a
    ///    constant for the lifetime of the object.
    /// </remarks>
    protected void prepareBudgetControlCategorySumAllQuery()
    {
        super();

        if (budgetControlCategorySumAll_q != null)
        {
            // Get dimension attribute value combination datasource from the tracking detail table to calculate
            // funds available only for the specific control ledger dimensions.
            dimensionAttribValueCombControlLedger_qbds = budgetControlCategorySumAll_q.dataSourceName(#dimensionAttributeValueComb_ControlLedgerDim);

            // Join budget group ledger dimension datasource to the tracking detail table to calculate
            // funds available only for the budget group specific control ledger dimensions.
            budgetGroupLedgerDim_qbds = dimensionAttribValueCombControlLedger_qbds.addDataSource(tablenum(BudgetGroupLedgerDimension));
            budgetGroupLedgerDim_qbds.fetchMode(QueryFetchMode::One2One);
            budgetGroupLedgerDim_qbds.joinMode(JoinMode::ExistsJoin);
            budgetGroupLedgerDim_qbds.addLink(fieldnum(DimensionAttributeValueCombination, RecId), fieldnum(BudgetGroupLedgerDimension, BudgetControlLedgerDimension));

            // Find a range on budget group.
            budgetGroup_qbr = budgetGroupLedgerDim_qbds.addRange(fieldnum(BudgetGroupLedgerDimension, BudgetGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_budgetModel">
    ///     A <c>BudgetModel</c> table buffer.
    /// </param>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status.
    /// </param>
    /// <param name="_includeDefaultBudgetModelTransactions">
    ///     A Boolean value that directs the calculation to include default
    ///     budget model budget control tracking data.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking data.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///     A record ID of main account which is used in calculating the <c>BudgetSourceLedgerDimension</c> record ID.
    /// </param>
    /// <param name="_includeAllAccounts">
    ///     A Boolean value which mentions whether to include all main accounts for the specified ledger dimension.
    /// </param>
    protected void prepareQueryRangeValues(
        BudgetModel _budgetModel,
        boolean     _includeConfirmed,
        boolean     _includeDraft,
        boolean     _includeDefaultBudgetModelTransactions,
        boolean     _includeIsSimulation,
        recId       _mainAccountRecId,
        boolean     _includeAllAccounts)
    {
        super(_budgetModel, _includeConfirmed, _includeDraft, _includeDefaultBudgetModelTransactions, _includeIsSimulation, _mainAccountRecId, _includeAllAccounts);

        if (budgetGroup_qbr != null)
        {
            budgetGroup_qbr.value(SysQuery::value(budgetGroupRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetControlRelievingCategorySumAll</c> query for use by the aggregation calculation.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetControlRelievingCategorySumAll</c> query and
    ///    establishes the required query build data sources and query build ranges. It also prepares the
    ///    <c>trackingDate_Relieving_qbr</c> query range value because it does not change for the lifetime of
    ///    the object.
    /// </remarks>
    protected void prepareRelievingCategorySumAllQuery()
    {
        super();

        if (budgetControlRelievingCategorySumAll_q != null && budgetSourceTrackingDetail_Relieved_qbds != null)
        {
            budgetGroupLedgerDim_Relieved_qbds = budgetSourceTrackingDetail_Relieved_qbds.addDataSource(tablenum(BudgetGroupLedgerDimension));
            budgetGroupLedgerDim_Relieved_qbds.fetchMode(QueryFetchMode::One2One);
            budgetGroupLedgerDim_Relieved_qbds.joinMode(JoinMode::ExistsJoin);
            budgetGroupLedgerDim_Relieved_qbds.addLink(fieldnum(BudgetSourceTrackingDetail, BudgetControlLedgerDimension), fieldnum(BudgetGroupLedgerDimension, BudgetControlLedgerDimension));

            // Find a range on budget group.
            budgetGroup_Relieved_qbr = budgetGroupLedgerDim_Relieved_qbds.addRange(fieldnum(BudgetGroupLedgerDimension, BudgetGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a draft status.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking relieving data.
    /// </param>
    /// <param name="_includeCarryforwardAmounts">
    ///     A Boolean value that directs the calculation to include carryforward
    ///     budget control tracking relieving data.
    /// </param>
    protected void prepareRelievingQueryRangeValues(
        boolean _includeConfirmed,
        boolean _includeDraft,
        boolean _includeIsSimulation,
        boolean _includeCarryforwardAmounts)
    {
        super(_includeConfirmed, _includeDraft, _includeIsSimulation, _includeCarryforwardAmounts);

        if (budgetGroup_Relieved_qbr != null)
        {
            budgetGroup_Relieved_qbr.value(SysQuery::value(budgetGroupRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of a <c>BudgetAvailableBalanceGroup</c> class.
    /// </summary>
    /// <param name="_primaryLedgerId">
    ///    The ID for the <c>Ledger</c> record to use for aggregations.
    /// </param>
    /// <param name="_budgetGroupRecId">
    ///    A record ID of the budget group table buffer.
    /// </param>
    /// <param name="_startIntervalDate">
    ///    The starting date interval to use for aggregations.
    /// </param>
    /// <param name="_endIntervalDate">
    ///    The ending date interval to use for aggregations.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetAvailableBalanceGroup</c> class.
    /// </returns>
    public static BudgetAvailableBalanceGroup construct(
        recId _primaryLedgerId,
        recId _budgetGroupRecId,
        TransDate _startIntervalDate,
        TransDate _endIntervalDate)
    {
        BudgetAvailableBalanceGroup    budgetAvailableBalanceGroup;

        if (_primaryLedgerId != 0 && _budgetGroupRecId != 0)
        {
            budgetAvailableBalanceGroup = new BudgetAvailableBalanceGroup();

            budgetAvailableBalanceGroup.initialize(_primaryLedgerId, _budgetGroupRecId, _startIntervalDate, _endIntervalDate);
        }

        return budgetAvailableBalanceGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>