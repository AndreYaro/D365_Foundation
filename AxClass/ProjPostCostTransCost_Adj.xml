<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostTransCost_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostTransCost_Adj extends ProjPostCostTransCost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method allows for extensibility in creating a transaction posting. This method is called by
    /// the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c> method when the
    /// <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        //  if the project parameter AlwaysRegulationTrans is set to 'No' fields are updated on the original transaction
        if (this.parmadjustBufferCost())            // Regulation without posting
        {
            projCostTransCost.CostPrice =  ExchangeRateHelper::mstPrice(this.parmadjustBufferCost().CostPrice, projCostTrans.CurrencyIdCost, this.getLedgerDateForOrigTrans(projCostTrans));
            projCostTransCost.LineAmount = this.parmadjustBufferCost().LineAmount;
            projCostTransCost.DefaultDimension = this.parmadjustBufferCost().DefaultDimension;
            projCostTransCost.FundingSource = this.parmadjustBufferCost().FundingSource;
        }
        else                                    // Regulation with posting
        {
            //  if the project parameter AlwaysRegulationTrans is set to 'Yes', the old transactions is updated
            if (this.parmTransStatus() == ProjTransStatus::Adjusted)
            {
                if (this.mustSetTransStatus())
                {
                    projCostTransCost.TransStatus = ProjTransStatus::Adjusted;
                }
            }
        }

        projCostTransCost.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transaction status change is needed.
    /// </summary>
    /// <returns>true if transaction status change is needed, otherwise, false</returns>
    protected boolean mustSetTransStatus()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>