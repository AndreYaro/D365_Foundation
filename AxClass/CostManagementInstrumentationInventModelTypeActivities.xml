<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostManagementInstrumentationInventModelTypeActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CostManagementInstrumentationInventModelTypeActivities
{
    private const str ActivityNamePrefix = 'InventModelType.';

    private const str CheckInventOnHand  = '.CheckInventOnHand';

    private const str MovingAverage      = 'InventModelType_MovingAverage';
    private const str StdCost            = 'InventModelType_StdCost';
    private const str InventDimIdStr     = 'InventDimId';
    private const str InventTableRecId   = 'InventTableRecId';
    private const str PostedQty          = 'PostedQty';
    private const str PostedValue        = 'PostedValue';
    private const str ExpectedAmount     = 'ExpectedAmount';
    private const str CostPrice          = 'CostPrice';
    private const str CheckOnHand        = 'CheckOnHandSuccess';

    private CostManagementInstrumentationLogger instrumentationLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        instrumentationLogger = _instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static CostManagementInstrumentationInventModelTypeActivities newFromLogger(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        return new CostManagementInstrumentationInventModelTypeActivities(_instrumentationLogger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOnHand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext checkInventOnHand(
        str         _className,
        InventDimId _inventDimId,
        RecId       _inventTableRecId,
        Qty         _postedQty,
        Real        _postedValue,
        Real        _expectedAmountOrCostPrice)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + CheckInventOnHand);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix + InventDimIdStr,     _inventDimId);
        activityContext.addCustomProperty(ActivityNamePrefix + InventTableRecId,   int642Str(_inventTableRecId));
        activityContext.addCustomProperty(ActivityNamePrefix + PostedQty,          real2double(_postedQty).ToString());
        activityContext.addCustomProperty(ActivityNamePrefix + PostedValue,        real2double(_postedValue).ToString());
        if (_className == MovingAverage)
        {
            activityContext.addCustomProperty(ActivityNamePrefix + ExpectedAmount, real2double(_expectedAmountOrCostPrice).ToString());
        }
        else if (_className == StdCost)
        {
            activityContext.addCustomProperty(ActivityNamePrefix + CostPrice, real2double(_expectedAmountOrCostPrice).ToString());
        }
        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>