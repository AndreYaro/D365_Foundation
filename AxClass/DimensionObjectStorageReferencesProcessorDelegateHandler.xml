<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionObjectStorageReferencesProcessorDelegateHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class DimensionObjectStorageReferencesProcessorDelegateHandler
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postProcessDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageReferencesProcessor), staticDelegateStr(DimensionObjectStorageReferencesProcessor, postProcessDelegate))]
    internal static void postProcessDelegate(DimensionObjectStorageTableReferences _tableReferences, int64 _topBundleSize, int64 _rangeBundleSize, EventHandlerResult _eventHandlerResult)
    {
        DimensionObjectStorageReferences storageReferences;
        storageReferences.skipDatabaseLog(true);
        storageReferences.skipEvents(true);
        storageReferences.skipDataMethods(true);

        Map sqlParams = SqlParams::create();
        sqlParams.add('PartitionRecId', getCurrentPartitionRecId());
        sqlParams.add('TableReferenceRecId', _tableReferences.RecId);

        // Tables that have very large size in current customer environments use directSQL to do chunking. 
        // Tables that are not huge in current customer environments do not need chunking and use X++;
        // All queries must be cross company in order to work.
        if (_tableReferences.ReferenceTableName == tableStr(AccountingDistribution))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getAccountingDistributionSQL(_topBundleSize);          
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(GeneralJournalAccountEntry))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getGeneralJournalAccountEntrySQL(_topBundleSize);     
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(SubledgerJournalAccountEntry))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getSubledgerJournalAccountEntrySQL(_topBundleSize);
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(MainAccountLegalEntity))
        {
            MainAccountLegalEntity male;
            CompanyInfo companyInfo;

            update_recordset storageReferences
                setting ReferenceDataAreaId = companyInfo.DataArea
            join LegalEntity, RecId from male
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && male.RecId == storageReferences.ReferenceRecId
            join DataArea from companyInfo
                where companyInfo.RecId == male.LegalEntity;
        }
        else if (_tableReferences.ReferenceTableName == tableStr(SalesLine))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getSalesLineSQL(_topBundleSize);
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(BudgetTransactionLine))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getBudgetTransactionLineSQL(_topBundleSize);
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(BudgetPlanLine))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getBudgetPlanLineSQL(_topBundleSize);
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(BudgetControlDataMaintenanceTracking))
        {
            BudgetControlDataMaintenanceTracking tracking;
            BudgetControlDataMaintenance dataMaintenance;
            Ledger ledger;

            update_recordset storageReferences
                setting ReferenceDataAreaId = ledger.Name
            join BudgetControlDataMaintenance, RecId from tracking
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && tracking.RecId == storageReferences.ReferenceRecId
            join PrimaryLedger from dataMaintenance
                where dataMaintenance.RecId == tracking.BudgetControlDataMaintenance
            join Name from ledger
                where ledger.RecId == dataMaintenance.PrimaryLedger;
        }
        else if (_tableReferences.ReferenceTableName == tableStr(AccountingDistributionTemplateDetail))
        {
            AccountingDistributionTemplateDetail templateDetail;
            AccountingDistributionTemplate template;
            CompanyInfo companyInfo;

            update_recordset storageReferences
                setting ReferenceDataAreaId = companyInfo.DataArea
            join DistributionTemplate, RecId from templateDetail
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && templateDetail.RecId == storageReferences.ReferenceRecId
            join LegalEntity from template
                where template.RecId == templateDetail.DistributionTemplate
            join DataArea from companyInfo
                where companyInfo.RecId == template.LegalEntity;
        }
        else if (_tableReferences.ReferenceTableName == tableStr(TaxRuntimeLookupAccountingResultDetail))
        {
            TaxRuntimeLookupAccountingResultDetail resultDetail;
            TaxRuntimeLookupAccountingResult result;
            TaxRuntimeLookupCondition condition;
            Ledger ledger;

            update_recordset storageReferences
                setting ReferenceDataAreaId = ledger.Name
            join LookupAccountingResult, RecId from resultDetail
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && resultDetail.RecId == storageReferences.ReferenceRecId
            join LookupCondition from result
                where result.RecId == resultDetail.LookupAccountingResult
            join Ledger from condition
                where condition.RecId == result.LookupCondition
            join Name from ledger
                where ledger.RecId == condition.Ledger;
        }
        else if (_tableReferences.ReferenceTableName == tableStr(PurchReqLineHistory))
        {
            str sqlStatement = DimensionObjectStorageReferencesProcessorDelegateHandler::getPurchReqLineHistorySQL(_topBundleSize);
            DimensionObjectStorageReferencesProcessorDelegateHandler::processTable(_tableReferences.RecId, _rangeBundleSize, sqlStatement, sqlParams);
        }
        else if (_tableReferences.ReferenceTableName == tableStr(KanBanJob))
        {
            KanbanJob kanbanJob;
            Kanban kanban;
            CompanyInfo companyInfo;

            update_recordset storageReferences
                setting ReferenceDataAreaId = companyInfo.DataArea
            join Kanban, RecId from kanbanJob
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && kanbanJob.RecId == storageReferences.ReferenceRecId
            join LegalEntity from kanban
                where kanban.RecId == kanbanJob.Kanban
            join DataArea from companyInfo
                where companyInfo.RecId == kanban.LegalEntity;
        }
        else if (_tableReferences.ReferenceTableName == tableStr(KanbanJobPickingList))
        {
            KanbanJobPickingList kanbanJobPickList;
            Kanban kanban;
            CompanyInfo companyInfo;

            update_recordset storageReferences
                setting ReferenceDataAreaId = companyInfo.DataArea
            join Kanban, RecId from kanbanJobPickList
                where storageReferences.DimensionObjectStorageTableReference == _tableReferences.RecId
                    && kanbanJobPickList.RecId == storageReferences.ReferenceRecId
            join LegalEntity from kanban
                where kanban.RecId == kanbanJobPickList.Kanban
            join DataArea from companyInfo
                where companyInfo.RecId == kanban.LegalEntity;
        }

        _eventHandlerResult.result(storageReferences.RowCount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDistributionSQL</Name>
				<Source><![CDATA[
    private static str getAccountingDistributionSQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = DataArea
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN AccountingDistribution common ON common.Partition = dosr.partition 
        //            AND common.RecId = dosr.ReferenceRecId
        //      INNER JOIN DirPartyTable dpt ON dpt.Partition = dosr.Partition
        //            AND dpt.Recid = common.AccountingLegalEntity
        //            AND dpt.DataArea <> dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %12;
            WHILE @RowCount = %12
            BEGIN
                UPDATE %8 dosr
                  SET %2 = dpt.%11
                FROM %1 dosr
                INNER JOIN %3 common ON common.%6 = dosr.%6
                    AND common.%4 = dosr.%5
                INNER JOIN %9 dpt ON dpt.%6 = dosr.%6
                    AND dpt.%4 = common.%10
                    AND dpt.%11 <> dosr.%2
                WHERE dosr.%7 = @TableReferenceRecId
                    AND dosr.%5 >= @MinRecId AND dosr.%5 <= @MaxRecId
                    AND dosr.%6 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(AccountingDistribution),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            tableStr(DirPartyTable),
            fieldStr(AccountingDistribution, AccountingLegalEntity),
            fieldStr(CompanyInfo, DataArea),
            int2Str(_topBundleSize));

            return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntrySQL</Name>
				<Source><![CDATA[
    private static str getGeneralJournalAccountEntrySQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = ledger.name
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN GeneralJournalAccountEntry gjae ON gjae.Partition = dosr.partition
        //            AND gjae.RecId = dosr.ReferenceRecId
        //      INNER JOIN GeneralJournalEntry gje ON gje.Partition = dosr.partition
        //            AND gje.RecId = gjae.GeneralJournalEntry
        //      INNER JOIN Ledger ledger ON ledger.Partition = dosr.Partition
        //            AND ledger.Recid = gje.Ledger
        //            AND ledger.Name <> dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %12;
            WHILE @RowCount = %12
            BEGIN
                UPDATE %9 dosr
                  SET %2 = ledger.%11
                FROM %1 dosr
                INNER JOIN %3 gjae ON gjae.%7 = dosr.%7
                    AND gjae.%5 = dosr.%6
                INNER JOIN %4 gje ON gje.%7 = dosr.%7
                    AND gje.%5 = gjae.%14
                INNER JOIN %10 ledger ON ledger.%7 = dosr.%7
                    AND ledger.%5 = gje.%13
                    AND ledger.%11 <> dosr.%2
                WHERE dosr.%8 = @TableReferenceRecId
                    AND dosr.%6 >= @MinRecId AND dosr.%6 <= @MaxRecId
                    AND dosr.%7 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(GeneralJournalAccountEntry),
            tableStr(GeneralJournalEntry),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            tableStr(Ledger),
            fieldStr(Ledger, Name),
            int2Str(_topBundleSize),
            fieldStr(GeneralJournalEntry, Ledger),
            fieldStr(GeneralJournalAccountEntry, GeneralJournalEntry));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerJournalAccountEntrySQL</Name>
				<Source><![CDATA[
    private static str getSubledgerJournalAccountEntrySQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = ledger.name
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN SubledgerJournalAccountEntry sjae ON sjae.Partition = dosr.partition
        //            AND sjae.RecId = dosr.ReferenceRecId
        //      INNER JOIN SubledgerJournalEntry sje ON sje.Partition = dosr.partition
        //            AND sje.RecId = sjae.SubledgerJournalEntry
        //      INNER JOIN Ledger ledger ON ledger.Partition = dosr.Partition
        //            AND ledger.Recid = sje.Ledger
        //            AND ledger.Name <> dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Parition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %12;
            WHILE @RowCount = %12
            BEGIN
                UPDATE %9 dosr
                  SET %2 = ledger.%11
                FROM %1 dosr
                INNER JOIN %3 sjae ON sjae.%7 = dosr.%7
                    AND sjae.%5 = dosr.%6
                INNER JOIN %4 sje ON sje.%7 = dosr.%7
                    AND sje.%5 = sjae.%13
                INNER JOIN %10 ledger ON ledger.%7 = dosr.%7
                    AND ledger.%5 = sje.%14
                    AND ledger.%11 <> dosr.%2
                WHERE dosr.%8 = @TableReferenceRecId
                    AND dosr.%6 >= @MinRecId AND dosr.%6 <= @MaxRecId
                    AND dosr.%7 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(SubledgerJournalAccountEntry),
            tableStr(SubledgerJournalEntry),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            tableStr(Ledger),
            fieldStr(Ledger, Name),
            int2Str(_topBundleSize),
            fieldStr(SubledgerJournalAccountEntry, SubledgerJournalEntry),
            fieldStr(SubledgerJournalEntry, Ledger));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTransactionLineSQL</Name>
				<Source><![CDATA[
    private static str getBudgetTransactionLineSQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = ledger.Name
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN BudgetTransactionLine common ON common.Partition = dosr.partition
        //            AND common.RecId = dosr.ReferenceRecId
        //      INNER JOIN BudgetTransactionHeader parent ON parent.Partition = dosr.partition
        //            AND parent.RecId = common.BudgetTransactionHeader
        //      INNER JOIN Ledger ledger ON ledger.Partition = dosr.Partition
        //            AND dpt.Recid = parent.ParentLedger
        //            AND ledger.Name <> dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %12;
            WHILE @RowCount = %12
            BEGIN
                UPDATE %9 dosr
                  SET %2 = ledger.%11
                FROM %1 dosr
                INNER JOIN %3 line ON line.%7 = dosr.%7
                    AND line.%5 = dosr.%6
                INNER JOIN %4 header ON header.%7 = dosr.%7
                    AND header.%5 = line.%14
                INNER JOIN %10 ledger ON ledger.%7 = dosr.%7
                    AND ledger.%5 = header.%13
                    AND ledger.%11 <> dosr.%2
                WHERE dosr.%8 = @TableReferenceRecId
                    AND dosr.%6 >= @MinRecId AND dosr.%6 <= @MaxRecId
                    AND dosr.%7 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(BudgetTransactionLine),
            tableStr(BudgetTransactionHeader),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            tableStr(Ledger),
            fieldStr(Ledger, Name),
            int2Str(_topBundleSize),
            fieldStr(BudgetTransactionHeader, PrimaryLedger),
            fieldStr(BudgetTransactionLine, BudgetTransactionHeader));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLineSQL</Name>
				<Source><![CDATA[
    private static str getBudgetPlanLineSQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = ledger.Name
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN BudgetPlanLine common ON common.Partition = dosr.partition
        //            AND common.RecId = dosr.ReferenceRecId
        //      INNER JOIN BudgetPlanLine parent ON parent.Partition = dosr.partition
        //            AND parent.RecId = common.BudgetPlanHeader
        //      INNER JOIN BudgetPlanningProcess grandparent ON grandparent.Partition = dosr.partition
        //            AND grandparent.RecId = parent.BudgetPlanningProcess
        //      INNER JOIN Ledger ledger ON ledger.Partition = dosr.Partition
        //            AND dpt.Recid = grandparent.Ledger
        //            AND ledger.Name <> dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %13;
            WHILE @RowCount = %13
            BEGIN
                UPDATE %10 dosr
                  SET %2 = ledger.%12
                FROM %1 dosr
                INNER JOIN %3 line ON line.%8 = dosr.%8
                    AND line.%6 = dosr.%7
                INNER JOIN %4 header ON header.%8 = dosr.%8
                    AND header.%6 = line.%14
                INNER JOIN %5 grandparent ON grandparent.%8 = dosr.%8
                    AND grandparent.%6 = header.%15
                INNER JOIN %11 ledger ON ledger.%8 = dosr.%8
                    AND ledger.%6 = grandparent.%16
                    AND ledger.%12 <> dosr.%2
                WHERE dosr.%9 = @TableReferenceRecId
                    AND dosr.%7 >= @MinRecId AND dosr.%7 <= @MaxRecId
                    AND dosr.%8 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(BudgetPlanLine),
            tableStr(BudgetPlanHeader),
            tableStr(BudgetPlanningProcess),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            tableStr(Ledger),
            fieldStr(Ledger, Name),
            int2Str(_topBundleSize),
            fieldStr(BudgetPlanLine, BudgetPlanHeader),
            fieldStr(BudgetPlanHeader, BudgetPlanningProcess),
            fieldStr(BudgetPlanningProcess, Ledger));

            return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineSQL</Name>
				<Source><![CDATA[
    private static str getSalesLineSQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = DataAreaId
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN SalesLine common ON common.Partition = dosr.partition
        //            AND common.RecId = dosr.ReferenceRecId
        //      INNER JOIN SalesHeader parent ON parent.Partition = dosr.partition
        //            AND parent.SalesId = common.SalesId
        //            AND parent.DataAreaId = dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %12;
            WHILE @RowCount = %12
            BEGIN
                UPDATE %10 dosr
                  SET %2 = parent.%11
                FROM %1 dosr
                INNER JOIN %3 common ON common.%8 = dosr.%8
                    AND common.%6 = dosr.%7
                INNER JOIN %4 parent ON parent.%8 = dosr.%8
                    AND parent.%5 = common.%5
                    AND parent.%11 <> dosr.%2
                WHERE dosr.%8 = @TableReferenceRecId
                    AND dosr.%7 >= @MinRecId AND dosr.%7 <= @MaxRecId
                    AND dosr.%8 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(SalesLine),
            tableStr(SalesTable),
            fieldStr(SalesLine, SalesId),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            identifierStr(DataAreaId),
            int2Str(_topBundleSize));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqLineHistorySQL</Name>
				<Source><![CDATA[
    private static str getPurchReqLineHistorySQL(int64 _topBundleSize)
    {
        // DECLARE @RowCount INT = 100000;
        // WHILE @RowCount = 100000
        // BEGIN
        //      UPDATE TOP (100000) dosr
        //          SET ReferenceDataAreaId = parent.DataAreaId
        //      FROM DimensionObjectStorageReferences dosr
        //      INNER JOIN PurchReqLineHistory common ON common.Partition = dosr.partition
        //            AND common.RecId = dosr.ReferenceRecId
        //      INNER JOIN PurchReqLine parent ON parent.Partition = dosr.partition
        //            AND parent.RecId = common.PurchReqLine
        //            AND parent.DataAreaId = dosr.ReferenceDataAreaId
        //      WHERE dosr.DimensionObjectStorageTableReference = @TableReferenceRecId
        //            AND dosr.ReferenceRecId >= @MinRecId AND dosr.ReferenceRecId <= @MaxRecId
        //            AND dosr.Partition = @PartitionRecId;
        //      SET @RowCount = @@ROWCOUNT;
        // END
        str topCommandStr = strfmt('TOP (%1)', int642Str(_topBundleSize));
        str sqlStatement = strfmt(@"
            DECLARE @RowCount INT = %11;
            WHILE @RowCount = %11
            BEGIN
                UPDATE %9 dosr
                  SET %2 = parent.%12
                FROM %1 dosr
                INNER JOIN %3 common ON common.%7 = dosr.%7
                    AND common.%5 = dosr.%6
                INNER JOIN %4 parent ON parent.%7 = dosr.%7
                    AND parent.%5 = common.%4
                    AND parent.%12 <> dosr.%2
                WHERE dosr.%6 = @TableReferenceRecId
                    AND dosr.%6 >= @MinRecId AND dosr.%6 <= @MaxRecId
                    AND dosr.%7 = @PartitionRecId
                SET @RowCount = @@ROWCOUNT;
            END",
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceDataAreaId),
            tableStr(PurchReqLineHistory),
            tableStr(PurchReqLine),
            identifierStr(RecId),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            identifierStr(Partition),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            topCommandStr,
            identifierStr(DataAreaId),
            int2Str(_topBundleSize),
            fieldStr(PurchReqLine, VendAccountDataArea));

            return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTable</Name>
				<Source><![CDATA[
    private static void processTable(DimensionObjectStorageTableReference _tableReference, int64 _rangeBundleSize, str _sqlStatement, Map _sqlParams)
    {
        int64 tableReferenceMinRecId = DimensionObjectStorageReferencesProcessorDelegateHandler::getNewMinRecId(_tableReference, 0);
        int64 tableReferenceMaxRecId = DimensionObjectStorageReferencesProcessorDelegateHandler::getMaxRecId(_tableReference);
        int64 currentMin = tableReferenceMinRecId;
        int64 currentMax = currentMin + _rangeBundleSize;
        
        str minRecIdString = 'MinRecId';
        str maxRecIdString = 'MaxRecId';
        _sqlParams.remove(minRecIdString);
        _sqlParams.remove(maxRecIdString);
        _sqlParams.add(minRecIdString, currentMin);
        _sqlParams.add(maxRecIdString, currentMax);

        int zeroCounter;

        System.Exception exception;
        try
        {
            while (currentMin <= tableReferenceMaxRecId)
            {
                int64 recordsProcessed = DimensionObjectStorageReferencesProcessorDelegateHandler::executeNonQuery(_sqlStatement, _sqlParams);
                if (recordsProcessed == 0)
                {
                    zeroCounter++;
                }
                
                currentMin = currentMax + 1;

                // Jump ahead when the process is spinning on a gap in the RecIds
                if (zeroCounter == 3)
                {
                    zeroCounter = 0;
                    currentMin = DimensionObjectStorageReferencesProcessorDelegateHandler::getNewMinRecId(_tableReference, currentMin);
                }

                currentMax = currentMin + _rangeBundleSize;

                _sqlParams.remove(minRecIdString);
                _sqlParams.remove(maxRecIdString);
                _sqlParams.add(minRecIdString, currentMin);
                _sqlParams.add(maxRecIdString, currentMax);
            }
        }
        catch (exception)
        {
            if (LedgerExceptionHandler::shouldExceptionBeRetried(exception))
            {
                retry;
            }
            else
            {
                throw exception;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewMinRecId</Name>
				<Source><![CDATA[
    private static RefRecId getNewMinRecId(DimensionObjectStorageTableReference _tableReference, int64 _currentMinRecId)
    {
        // SELECT min(ReferenceRecId) FROM %1 WHERE DimensionObjectStorageTableReference = _tableReference AND ReferenceRecId >= _currentMinRecId AND Partition = _currentPartition
        str sqlString = strFmt('SELECT min(%2) FROM %1 WHERE %4 = %5 AND %2 >= %3 AND %6 = %7',
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            int642Str(_currentMinRecId),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            int642Str(_tableReference),
            identifierStr(Partition),
            int642Str(getCurrentPartitionRecId()));
        RefRecId result = DimensionObjectStorageReferencesProcessorDelegateHandler::executeQueryReturnRecId(sqlString, SqlParams::create());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxRecId</Name>
				<Source><![CDATA[
    private static RefRecId getMaxRecId(DimensionObjectStorageTableReference _tableReference)
    {
        // SELECT max(ReferenceRecId) FROM %1 WHERE DimensionObjectStorageTableReference = _tableReference AND Partition = _currentPartition
        str sqlString = strFmt('SELECT max(%2) FROM %1 WHERE %3 = %4 AND %5 = %6',
            tableStr(DimensionObjectStorageReferences),
            fieldStr(DimensionObjectStorageReferences, ReferenceRecId),
            fieldStr(DimensionObjectStorageReferences, DimensionObjectStorageTableReference),
            int642Str(_tableReference),
            identifierStr(Partition),
            int642Str(getCurrentPartitionRecId()));
        RefRecId result = DimensionObjectStorageReferencesProcessorDelegateHandler::executeQueryReturnRecId(sqlString, SqlParams::create());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeNonQuery</Name>
				<Source><![CDATA[
    private static int64 executeNonQuery(str _sqlStatement, Map _sqlParams)
    {
        int64 impactedRows;
        System.Exception ex;
        Statement statement;
        UserConnection connection;

        try
        {
            connection = new UserConnection();
            connection.ttsbegin();

            statement = connection.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();
            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, _sqlParams);

            connection.ttscommit();
        }
        finally
        {
            if (statement != null)
            {
                statement.close();
            }

            connection.finalize();

            CodeAccessPermission::revertAssert();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryReturnRecId</Name>
				<Source><![CDATA[
    private static RefRecId executeQueryReturnRecId(str _sqlStatement, Map _sqlParams)
    {
        ResultSet resultSet;
        System.Exception ex;
        Statement statement;
        UserConnection connection;
        RefRecId result;
        try
        {
            connection = new UserConnection();
            connection.ttsbegin();

            statement = connection.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();
            resultSet = statement.executeQueryWithParameters(_sqlStatement, _sqlParams);
            resultset.next();
            result = resultSet.getInt64(1);

            connection.ttscommit();
        }
        finally
        {
            if (statement != null)
            {
                statement.close();
            }

            connection.finalize();

            CodeAccessPermission::revertAssert();
        }
        
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>