<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysListPanelSet_RAssetTransTypeJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysListPanelSet_RAssetTransTypeJour extends SysListPanelSet
{
    private const int NumberOfColumns = 1;

    protected container selectedData;
    protected container availableData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToContainer</Name>
				<Source><![CDATA[
    private void addToContainer(SysDictField dictField)
    {
        if (isConfigurationkeyEnabled(dictField.configurationKeyId()))
        {
            if (inSet.in(dictField.id()))
            {
                selectedData += [[dictField.id(), dictField.label(), dictField.help()]];
            }
            else
            {
                availableData += [[dictField.id(), dictField.label(), dictField.help()]];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    public void finalize()
    {
        ttsbegin;

        RAssetParameters assetParameters = RAssetParameters::find(true);
        assetParameters.Depreciation = inSet.in(fieldnum(RAssetParameters, Depreciation));
        assetParameters.DepreciationAdj = inSet.in(fieldnum(RAssetParameters, DepreciationAdj));
        assetParameters.Revaluation = inSet.in(fieldnum(RAssetParameters, Revaluation));
        assetParameters.Acquisition = inSet.in(fieldnum(RAssetParameters, Acquisition));
        assetParameters.AcquisitionAdj = inSet.in(fieldnum(RAssetParameters, AcquisitionAdj));
        assetParameters.DisposalSale = inSet.in(fieldnum(RAssetParameters, DisposalSale));
        assetParameters.DisposalScrap = inSet.in(fieldnum(RAssetParameters, DisposalScrap));
        assetParameters.PartialTakeDown = inSet.in(fieldnum(RAssetParameters, PartialTakeDown));
        assetParameters.Disposal = inSet.in(fieldnum(RAssetParameters, Disposal));
        assetParameters.WriteUpAdj = inSet.in(fieldnum(RAssetParameters, WriteUpAdj));
        assetParameters.WriteDownAdj = inSet.in(fieldnum(RAssetParameters, WriteDownAdj));
        assetParameters.Lending = inSet.in(fieldnum(RAssetParameters, Lending));
        assetParameters.LendingRet = inSet.in(fieldnum(RAssetParameters, LendingRet));
        assetParameters.Other = inSet.in(fieldnum(RAssetParameters, Other));
        assetParameters.CompanyIssue = inSet.in(fieldnum(RAssetParameters, CompanyIssue));
        assetParameters.CompanyReceipt = inSet.in(fieldnum(RAssetParameters, CompanyReceipt));
        assetParameters.update();

        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDictField</Name>
				<Source><![CDATA[
    private void addDictField(fieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(tablenum(RAssetParameters), _fieldId);
        this.addToContainer(dictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data for each transaction type from the <c>AssetParameters</c> table.
    /// </summary>
    /// <returns>
    /// A container that contains the last-saved state of all asset transaction types.
    /// </returns>
    public container getData()
    {
        this.addDictField(fieldnum(RAssetParameters, Depreciation));
        this.addDictField(fieldnum(RAssetParameters, DepreciationAdj));
        this.addDictField(fieldnum(RAssetParameters, Revaluation));
        this.addDictField(fieldnum(RAssetParameters, Acquisition));
        this.addDictField(fieldnum(RAssetParameters, AcquisitionAdj));
        this.addDictField(fieldnum(RAssetParameters, DisposalSale));
        this.addDictField(fieldnum(RAssetParameters, DisposalScrap));
        this.addDictField(fieldnum(RAssetParameters, PartialTakeDown));
        this.addDictField(fieldnum(RAssetParameters, Disposal));
        this.addDictField(fieldnum(RAssetParameters, WriteUpAdj));
        this.addDictField(fieldnum(RAssetParameters, WriteDownAdj));
        this.addDictField(fieldnum(RAssetParameters, Lending));
        this.addDictField(fieldnum(RAssetParameters, LendingRet));
        this.addDictField(fieldnum(RAssetParameters, Other));
        this.addDictField(fieldnum(RAssetParameters, CompanyIssue));
        this.addDictField(fieldnum(RAssetParameters, CompanyReceipt));

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddToSet</Name>
				<Source><![CDATA[
    private void checkAndAddToSet(RAssetParameters _rAssetParameters, FieldId _fieldId)
    {
        if (_rAssetParameters.(_fieldId))
        {
            inSet.add(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        RAssetParameters assetParameters = RAssetParameters::find();

        inSet = new Set(Types::Integer);

        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Depreciation));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, DepreciationAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Revaluation));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Acquisition));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, AcquisitionAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, DisposalSale));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, DisposalScrap));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, PartialTakeDown));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Disposal));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, WriteUpAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, WriteDownAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Lending));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, LendingRet));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, Other));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, CompanyIssue));
        this.checkAndAddToSet(assetParameters, fieldnum(RAssetParameters, CompanyReceipt));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    public int numOfColumns()
    {
        return NumberOfColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsLeft</Name>
				<Source><![CDATA[
    public int numOfColumnsLeft()
    {
        return this.numOfColumns();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsRight</Name>
				<Source><![CDATA[
    public int numOfColumnsRight()
    {
        return this.numOfColumns();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionSelected</Name>
				<Source><![CDATA[
    public str parmCaptionSelected(str _captionSelected = captionSelected)
    {
        return "@SYS101971";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionAvailable</Name>
				<Source><![CDATA[
    public str parmCaptionAvailable(str _captionAvailable = captionAvailable)
    {
        return "@SYS115755";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasAddAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasAddAllButton(boolean _hasAddAllButton = hasAddAllButton)
    {
        hasAddAllButton = _hasAddAllButton;
        return hasAddAllButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasRemoveAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasRemoveAllButton(boolean _hasRemoveAllButton = hasRemoveAllButton)
    {
        hasRemoveAllButton = _hasRemoveAllButton;
        return hasRemoveAllButton && this.parmItemsNeeded() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasUpDownButton</Name>
				<Source><![CDATA[
    public boolean parmHasUpDownButton(boolean _has = hasUpDownButton)
    {
        hasUpDownButton = _has;
        return hasUpDownButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemsNeeded</Name>
				<Source><![CDATA[
    public int parmItemsNeeded(int _itemsNeeded = itemsNeeded)
    {
        itemsNeeded = _itemsNeeded;
        return itemsNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysListPanelSet_RAssetTransTypeJour construct()
    {
        return new SysListPanelSet_RAssetTransTypeJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static SysListPanel newForm(FormRun formRun,
        int parentId,
        boolean hasAddAllButton = true,
        boolean hasRemoveAllButton = true)
    {
        SysListPanelSet_RAssetTransTypeJour sysListPanel = SysListPanelSet_RAssetTransTypeJour::construct();
        sysListPanel.parmFormRun(formRun);
        sysListPanel.parmParentId(parentId);
        sysListPanel.parmHasAddAllButton(hasAddAllButton);
        sysListPanel.parmHasRemoveAllButton(hasRemoveAllButton);

        sysListPanel.build();
        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>