<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMarkupOffsetDimensionDerivationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMarkupDimensionDerivationRule</c> class derives the ledger dimension for a cost entry related to markup.
/// </summary>
public class CostMarkupOffsetDimensionDerivationRule extends CostOffsetLedgerDimensionDerivationRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the offset ledger dimension for the markup related cost entry.
    /// </summary>
    protected void resolve()
    {
        CostProductCostDescriptor descriptor = entry.parmDescriptor();
        CostEventBase reconciledEvent = descriptor.parmReconciledEvent();
        if (reconciledEvent)
        {
            CostEntry reconciledEntry = reconciledEvent.findEntry(descriptor.reconciledDescriptor());
            this.resolveFromReconciledEntry(reconciledEntry);
        }
        else
        {
            this.resolveFromMarkup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromCustomerVendorMarkup</Name>
				<Source><![CDATA[
    private void resolveFromCustomerVendorMarkup(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        CostInventoryEvent inventoryEvent = entry.parmEvent().parmParentEvent();
        PurchLine purchLine = PurchLine::findInventTransId(InventTransOrigin::find(inventoryEvent.parmInventTransOriginId()).InventTransId);
        InventMov_Purch movement = InventMovement::construct(purchLine);

        if (movement.mustBeBookedCharge()
            && (   inventoryEvent is CostVendorInvoiceEvent
                || inventoryEvent is CostVendorDirectInvoiceEvent))
        {
            // Re-direct the posting to the offset physical to balance the original posting from distribution
            postingType = movement.postingOffsetPhysical();
            ledgerDimensionAccount = CostLedgerDimensionDerivationRule::createLedgerDimension(movement.offsetAccountPhysical(), movement.defaultDimension());
        }
        else
        {
            AccountingRule accountingRule = AccountingJournalizingRule::newRule(SourceDocumentLineItem::newFromSourceDocumentLineImplementation(_vendPackingSlipTrans), MonetaryAmount::Charge);
            MainAccountDimensionListProvider mainAccountDimensionListProvider = MainAccountDimensionListProvider::newFromAccountingRule(MainAccountDimensionListProviderType::Inventory, accountingRule);
            MainAccountDimensionList mainAccountDimensionList = mainAccountDimensionListProvider.parmMainAccountDimensionList();
            MainAccountDimension mainAccountDimension = mainAccountDimensionList.first();

            postingType = accountingRule.parmLedgerPostingType();
            ledgerDimensionAccount = CostLedgerDimensionDerivationRule::createLedgerDimension(mainAccountDimension.parmMainAccount(), _vendPackingSlipTrans.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromLedgerAccountMarkup</Name>
				<Source><![CDATA[
    private void resolveFromLedgerAccountMarkup(VendPackingSlipTrans _vendPackingSlipTrans, MarkupTable _markupTable)
    {
        CostInventoryEvent inventoryEvent = entry.parmEvent().parmParentEvent();
        PurchLine purchLine = PurchLine::findInventTransId(InventTransOrigin::find(inventoryEvent.parmInventTransOriginId()).InventTransId);
        InventMov_Purch movement = InventMovement::construct(purchLine);

        if (movement.mustBeBookedCharge()
            && (   inventoryEvent is CostVendorInvoiceEvent
                || inventoryEvent is CostVendorDirectInvoiceEvent))
        {
            // Re-direct the posting to operations to balance the original posting from distribution
            postingType = movement.postingOperations();
            ledgerDimensionAccount = CostLedgerDimensionDerivationRule::createLedgerDimension(movement.accountOperations(), movement.defaultDimension());
        }
        else
        {
            postingType             = _markupTable.VendPosting;
            ledgerDimensionAccount  = CostLedgerDimensionDerivationRule::createLedgerDimension(_markupTable.VendorLedgerDimension, _vendPackingSlipTrans.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromMarkup</Name>
				<Source><![CDATA[
    private void resolveFromMarkup()
    {
        CostEntry                           costEntry = entry;
        CostProductCostDescriptor           descriptor = costEntry.parmDescriptor();

        MarkupTrans markupTrans = MarkupTrans::findRecId(descriptor.parmSource().parmSourceRecId());
        MarkupTable markupTable = markupTrans.markupTable();
        VendPackingSlipTrans vendPackingSlipTrans = VendPackingSlipTrans::findRecId(markupTrans.TransRecId);

        switch (markupTable.VendType)
        {
            case MarkupType::CustVend:
                this.resolveFromCustomerVendorMarkup(vendPackingSlipTrans);
                break;

            case MarkupType::LedgerAccount:
                this.resolveFromLedgerAccountMarkup(vendPackingSlipTrans, markupTable);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromReconciledEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the ledger dimension from a reconciled entry.
    /// </summary>
    /// <param name = "_reconciledEntry">The reconciled entry.</param>
    protected void resolveFromReconciledEntry(CostEntry _reconciledEntry)
    {
        postingType             = _reconciledEntry.parmOffsetPostingType();
        ledgerDimensionAccount  = _reconciledEntry.parmOffsetLedgerDimension();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
