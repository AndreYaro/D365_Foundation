<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableApprovalData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTableApprovalData extends LedgerJournalTableData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveVoucherToJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves a voucher from the current journal to a new journal.
    /// </summary>
    /// <param name="_newLedgerJournalId">
    ///    The ID of the journal to which to move vouchers.
    /// </param>
    /// <param name="_fromVoucher">
    ///    The voucher at the start of the range of vouchers to move.
    /// </param>
    /// <param name="_toVoucher">
    ///    The voucher at the end of the range of vouchers to move; optional. If not provided, uses the
    ///    voucher that is specified by the <paramref name="_fromVoucher" /> parameter.
    /// </param>
    public void moveVoucherToJournal(
        LedgerJournalId     _newLedgerJournalId,
        Voucher             _fromVoucher,
        Voucher             _toVoucher = "")
    {
        #OCCRetryCount
        VendTrans                   vendTrans;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        LedgerJournalTable          ledgerJournalTable = this.journalTable();

        try
        {
            ttsbegin;

            super(_newLedgerJournalId, _fromVoucher);

            select firstonly forupdate ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.JournalNum == ledgerJournalTable.JournalNum &&
                  ledgerJournalVoucherChanged.ToVoucher  == _fromVoucher;

            ledgerJournalVoucherChanged.JournalNum = _newLedgerJournalId;
            ledgerJournalVoucherChanged.doUpdate();

            vendTrans.skipDataMethods(true);
            update_recordset vendTrans
                setting journalNum = _newLedgerJournalId
                where vendTrans.JournalNum  == ledgerJournalTable.JournalNum &&
                      vendTrans.Voucher     == ledgerJournalVoucherChanged.FromVoucher;

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>