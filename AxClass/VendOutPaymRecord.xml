<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class VendOutPaymRecord extends CustVendOutPaymRecord
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInvoiceRecord</Name>
				<Source><![CDATA[
    VendInvoiceJour getInvoiceRecord(LedgerJournalTrans _ljt)
    {
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;

        select crosscompany vendInvoiceJour
        join RecId from vendTrans
            where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
                  vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount &&
                  vendTrans.TransDate == vendInvoiceJour.InvoiceDate
            join RecId from vendTransOpen
                where vendTransOpen.AccountNum == vendTrans.AccountNum &&
                      vendTransOpen.RefRecId == vendTrans.RecId
                join RecId from specTrans
                    where specTrans.RefRecId == vendTransOpen.RecId &&
                          specTrans.RefTableId == vendTransOpen.TableId &&
                          specTrans.RefCompany == vendTransOpen.DataAreaId &&
                          specTrans.SpecTableId == _ljt.TableId &&
                          specTrans.SpecRecId == _ljt.RecId &&
                          specTrans.SpecCompany == _ljt.company();

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendOutPaymRecord</Name>
				<Source><![CDATA[
    static VendOutPaymRecord newVendOutPaymRecord(VendPaymModeSpec _vendPaymModeSpec)
    {
        if (!_vendPaymModeSpec.classId)
        {
            return null;
        }

        if (!SysDictClass::isSuperclass(_vendPaymModeSpec.classId, classNum(VendOutPaymRecord)))
        {
            return null;
        }

        DictClass dictClass = new DictClass(_vendPaymModeSpec.classId);
        VendOutPaymRecord vendOutPaymRecord = dictClass.makeObject();

        if (!vendOutPaymRecord)
        {
            return null;
        }

        return vendOutPaymRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    internal VendBankAccount getVendBankAccount()
    {
        VendBankAccountId vendBankAccountId = custVendPaym.ledgerJournalTrans().CustVendBankAccountId;
        if (!vendBankAccountId)
        {
            vendBankAccountId = VendTable::findByLedgerDimension(custVendPaym.ledgerJournalTrans().parmLedgerDimension()).BankAccount;
        }

        return VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), vendBankAccountId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>