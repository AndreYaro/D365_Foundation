<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGeneralJournalEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlGeneralJournalEntry</c> class contains general journal entry information that
/// is used by budget control integration processing.
/// </summary>
public class BudgetControlGeneralJournalEntry implements SysPackable
{
    recId generalJournalEntryId;
    dataAreaId journalDataArea;
    LedgerJournalId journalNumber;
    LedgerJournalType ledgerJournalType;
    Voucher voucherNumber;

    boolean showResultMessages;
    boolean isJournal;
    Set intercompanyGeneralJournalEntries;

    // Key: Legal entity data area (DataAreaId)
    // Value: is budget check required (Boolean)
    Map budgetCheckRequiredCacheForLegalEntities;

    BudgetControlCheckRequest budgetControlCheckRequest;

    boolean isBudgetSourceSaved;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        generalJournalEntryId,
        journalDataArea,
        journalNumber,
        ledgerJournalType,
        voucherNumber,
        showResultMessages,
        isJournal
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ledger account and amount details on the <c>GeneralJournalAccountEntry</c> records for the
    /// <c>GeneralJournalEntry</c> record in the ledger posting to the <c>BudgetControlCheckRequest</c>
    /// instance.
    /// </summary>
    /// <param name="_legalEntityDataArea">
    /// The <c>DataAreaId</c> for the legal entity to which the ledger account and amount details are
    /// posting.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The posting ledger account.
    /// </param>
    /// <param name="_transactionCurrencyAmount">
    /// The posting transaction amount.
    /// </param>
    /// <param name="_transactionCurrencyCode">
    /// The <c>CurrencyCode</c> for the posting transaction amount.
    /// </param>
    /// <returns>
    /// true if the ledger acccount and amount details is added for budget check; otherwise, false.
    /// </returns>
    public boolean addLedgerDimensionDetail(
        dataAreaId _legalEntityDataArea,
        LedgerDimensionAccount _ledgerDimensionAccount,
        AmountCur _transactionCurrencyAmount,
        CurrencyCode _transactionCurrencyCode)
    {
        CompanyInfo legalEntity;
        boolean isLedgerDimensionDetailAddedForBudgetCheck;

        if (this.isLegalEntityBudgetCheckRequired(_legalEntityDataArea))
        {
            legalEntity = CompanyInfo::findDataArea(_legalEntityDataArea);
            budgetControlCheckRequest.addLedgerDimensionDetail(
                BudgetCheckDetail::newBudgetCheckDetail(
                    legalEntity.RecId,
                    _ledgerDimensionAccount,
                    _transactionCurrencyAmount,
                    _transactionCurrencyCode));
            isLedgerDimensionDetailAddedForBudgetCheck = true;
        }

        return isLedgerDimensionDetailAddedForBudgetCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the details from the general journal entry.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> record that is posting to the ledger.
    /// </param>
    /// <param name="_subledgerVoucherNumber">
    /// The subledger voucher number that is posting to the ledger.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    protected void initializeForGeneralJournalEntry(
        GeneralJournalEntry _generalJournalEntry,
        Voucher _subledgerVoucherNumber,
        userId _userId,
        boolean _showResultMessages)
    {
        intercompanyGeneralJournalEntries = new Set(typeName2Type(extendedtypestr(recId)));
        budgetCheckRequiredCacheForLegalEntities = new Map(typeName2Type(extendedtypestr(dataAreaId)), Types::Enum);

        isJournal = false;

        generalJournalEntryId = _generalJournalEntry.RecId;
        voucherNumber = _subledgerVoucherNumber;
        showResultMessages = _showResultMessages;

        // Initialize the budget control check request
        budgetControlCheckRequest = BudgetControlCheckRequest::construct();

        budgetControlCheckRequest.parmBudgetControlCategory(BudgetControlCategory::ActualExpenditure);
        budgetControlCheckRequest.parmBudgetDate(_generalJournalEntry.AccountingDate);
        budgetControlCheckRequest.parmTransactionNumber(voucherNumber);
        budgetControlCheckRequest.parmUser(_userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the details from the ledger voucher.
    /// </summary>
    /// <param name="_journalDataArea">
    /// The <c>DataAreaId</c> value for the legal entity where the posting journal is created.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number for the posting journal.
    /// </param>
    /// <param name="_journalType">
    /// The <c>LedgerJournalType</c> value for the posting journal.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number that is shared by a set of journal lines in the posting journal.
    /// </param>
    /// <param name="_voucherTransDate">
    /// The transaction date on the voucher.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which budget check is performed for the ledger account and amount
    /// details on the journal lines; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    protected void initializeForLedgerVoucher(
        dataAreaId _journalDataArea,
        LedgerJournalId _journalNumber,
        LedgerJournalType _journalType,
        Voucher _voucherNumber,
        TransDate _voucherTransDate,
        userId _userId,
        boolean _showResultMessages)
    {
        intercompanyGeneralJournalEntries = new Set(typeName2Type(extendedtypestr(recId)));
        budgetCheckRequiredCacheForLegalEntities = new Map(typeName2Type(extendedtypestr(dataAreaId)), Types::Enum);

        isJournal = true;

        journalDataArea = _journalDataArea;
        journalNumber = _journalNumber;
        ledgerJournalType = _journalType;
        voucherNumber = _voucherNumber;
        showResultMessages = _showResultMessages;

        // Initialize the budget control check request
        budgetControlCheckRequest = BudgetControlCheckRequest::construct();

        budgetControlCheckRequest.parmBudgetControlCategory(BudgetControlCategory::ActualExpenditure);
        budgetControlCheckRequest.parmBudgetDate(_voucherTransDate);
        budgetControlCheckRequest.parmTransactionNumber(voucherNumber);
        budgetControlCheckRequest.parmUser(_userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetSourceSaved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget source has been saved.
    /// </summary>
    /// <returns>
    ///    true if the budget source has been saved; otherwise, false.
    /// </returns>
    public boolean isBudgetSourceSaved()
    {
        return isBudgetSourceSaved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityBudgetCheckRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the legal entity requires budget funds available check.
    /// </summary>
    /// <param name="_legalEntityDataArea">
    /// The legal entity data area.
    /// </param>
    /// <returns>
    /// true if the legal entity requires budget funds available check; otherwise, false.
    /// </returns>
    public boolean isLegalEntityBudgetCheckRequired(dataAreaId _legalEntityDataArea)
    {
        boolean isLegalEntityBudgetCheckRequired = false;

        if (budgetCheckRequiredCacheForLegalEntities.exists(_legalEntityDataArea))
        {
            isLegalEntityBudgetCheckRequired = budgetCheckRequiredCacheForLegalEntities.lookup(_legalEntityDataArea);
        }
        else
        {
            if (isJournal)
            {
                isLegalEntityBudgetCheckRequired =
                    LedgerJournalTableType::isBudgetCheckRequiredForJournalType(
                        ledgerJournalType,
                        _legalEntityDataArea);

                // A budget check is required if the integrator is enabled and the journal isn't filtered through the configuration.
                isLegalEntityBudgetCheckRequired = isLegalEntityBudgetCheckRequired && this.isJournalEnabled(_legalEntityDataArea);
            }
            else
            {
                isLegalEntityBudgetCheckRequired = Ledger::isLedgerBudgetControlEnabled(
                    Ledger::primaryLedger(CompanyInfo::current(_legalEntityDataArea)));
            }

            budgetCheckRequiredCacheForLegalEntities.insert(_legalEntityDataArea, isLegalEntityBudgetCheckRequired);
        }

        return isLegalEntityBudgetCheckRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    private boolean isJournalEnabled(dataAreaId _legalEntityDataArea)
    {
        boolean isJournalEnabled = true;
        str cacheScope = funcName();
        container cacheKey = [_legalEntityDataArea, journalDataArea, journalNumber, ledgerJournalType];

        if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
        {
            // Cache only at the transaction level. Anything more aggressive won't take changes into
            // account that could affect the result of the filtering query.
            isJournalEnabled = SysTransactionScopeCache::get(cacheScope, cacheKey);
        }
        else
        {
            isJournalEnabled = BudgetSourceLedgerJournalTrans::isJournalEnabled(
                _legalEntityDataArea,
                journalDataArea,
                journalNumber,
                ledgerJournalType);

            SysTransactionScopeCache::set(cacheScope, cacheKey, isJournalEnabled);
        }

        return isJournalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public final container pack()
    {
        // Pack all class member variables - maps must be packed & added separately
        return [#CurrentVersion, [#CurrentList, budgetControlCheckRequest.pack(), intercompanyGeneralJournalEntries.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetControlCheckRequest</Name>
				<Source><![CDATA[
    public budgetControlCheckRequest parmBudgetControlCheckRequest()
    {
        return budgetControlCheckRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetSourceId</Name>
				<Source><![CDATA[
    public recId parmBudgetSourceId()
    {
        return budgetControlCheckRequest.parmBudgetSourceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowResultMessages</Name>
				<Source><![CDATA[
    public boolean parmShowResultMessages()
    {
        return showResultMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a <c>BudgetSource</c> record that will be used to perform the budget funds available check
    /// and to store the budget funds available check result.
    /// </summary>
    public void saveBudgetSource()
    {
        GeneralJournalEntry generalJournalEntry;
        recId budgetSourceId;

        if (BudgetControlCheckRequest::isControlConfigured())
        {
            if (isJournal)
            {
                budgetSourceId = BudgetSourceLedgerJournalTrans::saveBudgetSourceByVoucher(
                    journalDataArea,
                    journalNumber,
                    voucherNumber,
                    ledgerJournalType);
            }
            else
            {
                generalJournalEntry = GeneralJournalEntry::find(generalJournalEntryId);

                // BudgetSource record for reversal transactions can only exists when the reversal transaction GeneralJournalEntry record exists.
                Debug::assert(generalJournalEntry != null);

                budgetSourceId = BudgetSourceGeneralJournalEntry::saveBudgetSource(generalJournalEntry);
            }

            budgetControlCheckRequest.parmBudgetSourceId(budgetSourceId);

            isBudgetSourceSaved = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public final boolean unpack(container _packedBudgetControlGeneralJournalEntry)
    {
        int version = conpeek(_packedBudgetControlGeneralJournalEntry, 1);
        container packedClassMembers;
        container packedBudgetControlCheckRequest;
        container packedIntercompanyGeneralJournalEntries;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedBudgetControlGeneralJournalEntry;

                // Extract the #CurrentList, packed budget control check request, and packed intercompany general journal entry record IDs.
                [#CurrentList, packedBudgetControlCheckRequest, packedIntercompanyGeneralJournalEntries] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedBudgetControlCheckRequest != connull())
        {
            budgetControlCheckRequest = BudgetControlCheckRequest::create(packedBudgetControlCheckRequest);
        }

        if (packedIntercompanyGeneralJournalEntries != connull())
        {
            // Unpack the packed intercompanyGeneralJournalEntries
            intercompanyGeneralJournalEntries = Set::create(packedIntercompanyGeneralJournalEntries);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlGeneralJournalEntry</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetControlGeneralJournalEntry">
    /// The packed instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </returns>
    public static BudgetControlGeneralJournalEntry create(container _packedBudgetControlGeneralJournalEntry)
    {
        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry = new BudgetControlGeneralJournalEntry();

        budgetControlGeneralJournalEntry.unpack(_packedBudgetControlGeneralJournalEntry);

        return budgetControlGeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </summary>
    /// <param name="_generalJournalEntryId">
    /// The ID for the <c>GeneralJournalEntry</c> record that is posting to the ledger.
    /// </param>
    /// <param name="_subledgerVoucherNumber">
    /// The subledger voucher number that is posting to the ledger.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_displayResultErrorWarningsInInfoLog">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </returns>
    public static BudgetControlGeneralJournalEntry newGeneralJournalEntry(
        recId _generalJournalEntryId,
        Voucher _subledgerVoucherNumber,
        userId _userId = curuserid(),
        boolean _displayResultErrorWarningsInInfoLog = true)
    {
        GeneralJournalEntry generalJournalEntry = GeneralJournalEntry::find(_generalJournalEntryId);
        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry;

        if (generalJournalEntry == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetControlGeneralJournalEntry = new BudgetControlGeneralJournalEntry();

        budgetControlGeneralJournalEntry.initializeForGeneralJournalEntry(
            generalJournalEntry,
            _subledgerVoucherNumber,
            _userId,
            _displayResultErrorWarningsInInfoLog);

        return budgetControlGeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </summary>
    /// <param name="_journalDataArea">
    /// The <c>DataAreaId</c> value for the legal entity where the posting journal is created.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number for the posting journal.
    /// </param>
    /// <param name="_journalType">
    /// The <c>LedgerJournalType</c> enumeration value for the posting journal.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number that is shared by a set of journal lines in the posting journal.
    /// </param>
    /// <param name="_voucherTransDate">
    /// The transaction date on the voucher.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which the budget check is performed for the ledger account and amount
    /// details on the journal lines; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlGeneralJournalEntry</c> class.
    /// </returns>
    public static BudgetControlGeneralJournalEntry newLedgerVoucher(
        dataAreaId _journalDataArea,
        LedgerJournalId _journalNumber,
        LedgerJournalType _journalType,
        Voucher _voucherNumber,
        TransDate _voucherTransDate,
        userId _userId = curuserid(),
        boolean _showResultMessages = true)
    {
        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry = new BudgetControlGeneralJournalEntry();

        budgetControlGeneralJournalEntry.initializeForLedgerVoucher(
            _journalDataArea,
            _journalNumber,
            _journalType,
            _voucherNumber,
            _voucherTransDate,
            _userId,
            _showResultMessages);

        return budgetControlGeneralJournalEntry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>