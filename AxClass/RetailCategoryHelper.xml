<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used in forms, where we display products by category.
/// </summary>
class RetailCategoryHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categorySelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Common code to be used in forms where we display products by category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The category selected
    /// </param>
    /// <param name="_ecoResCategoryDescendentsDS">
    /// all the descendants of the selected category.
    /// </param>
    /// <param name="_retailCategoryContainmentLookupDS">
    /// Collection of the categories contained in other categories.
    /// </param>
    /// <param name="_isRetailSupplementalCategory">
    /// If the selected category is a Retail supplemental category.
    /// </param>
    public static void categorySelectionChanged(EcoResCategory _ecoResCategory, FormDataSource _ecoResCategoryDescendentsDS, FormDataSource _retailCategoryContainmentLookupDS, boolean _isRetailSupplementalCategory)
    {
            if (_isRetailSupplementalCategory)
            {
                _retailCategoryContainmentLookupDS.query().dataSourceTable(tableNum(RetailCategoryContainmentLookup)).enabled(true);
                _retailCategoryContainmentLookupDS.query().dataSourceName('EcoResCategoryDescendents').enabled(false);

                _retailCategoryContainmentLookupDS.query().dataSourceTable(tableNum(RetailCategoryContainmentLookup))
                    .clearRange(fieldNum(RetailCategoryContainmentLookup, Category));

                // clear the range on EcoResProductCategory.CategoryHierarchy
                _retailCategoryContainmentLookupDS.query().dataSourceTable(tableNum(EcoResProductCategory))
                    .clearRange(fieldNum(EcoResProductCategory, CategoryHierarchy));

                // apply the query ranges.
                _retailCategoryContainmentLookupDS.query().dataSourceTable(tableNum(RetailCategoryContainmentLookup))
                    .addRange(fieldNum(RetailCategoryContainmentLookup, Category))
                    .value(queryValue(_ecoResCategory.RecId));
            }
            else
            {
                _retailCategoryContainmentLookupDS.query().dataSourceName('EcoResCategoryDescendents').enabled(_ecoResCategory.ParentCategory);
                _retailCategoryContainmentLookupDS.query().dataSourceTable(tableNum(RetailCategoryContainmentLookup)).enabled(false);

                // clear the ranges on EcoResCategoryDescendents data source

                _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                    .clearRange(fieldNum(EcoResCategory, CategoryHierarchy));

                _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                    .clearRange(fieldNum(EcoResCategory, NestedSetLeft));

                _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                    .clearRange(fieldNum(EcoResCategory, NestedSetRight));

                _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResProductCategory))
                    .clearRange(fieldNum(EcoResProductCategory, CategoryHierarchy));

                // apply the query ranges.
                if (!_ecoResCategory.ParentCategory)
                {
                    _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResProductCategory))
                        .addRange(fieldNum(EcoResProductCategory, CategoryHierarchy))
                        .value(queryValue(_ecoResCategory.CategoryHierarchy));
                }
                else
                {
                    _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                        .addRange(fieldNum(EcoResCategory, CategoryHierarchy))
                        .value(queryValue(_ecoResCategory.CategoryHierarchy));

                    _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                        .addRange(fieldNum(EcoResCategory, NestedSetLeft))
                        .value(Global::queryRange(_ecoResCategory.NestedSetLeft, _ecoResCategory.NestedSetRight));

                    _ecoResCategoryDescendentsDS.query().dataSourceTable(tableNum(EcoResCategory))
                        .addRange(fieldNum(EcoResCategory, NestedSetRight))
                        .value(Global::queryRange(_ecoResCategory.NestedSetLeft, _ecoResCategory.NestedSetRight));
                }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryInRetailProductHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find category in retail product hierarchy.
    /// </summary>
    /// <param name="_categoryName">
    /// The category name.
    /// </param>
    /// <returns>
    /// Category record.
    /// </returns>
    public static EcoResCategory findCategoryInRetailProductHierarchy(EcoResCategoryName _categoryName)
    {
        EcoResCategoryHierarchy categoryHierarchy;
        EcoResCategoryHierarchyRole categoryHierarchyRole;

        select firstonly categoryHierarchy
                join categoryHierarchyRole
                    where categoryHierarchyRole.CategoryHierarchy == categoryHierarchy.RecId
                        && categoryHierarchyRole.NamedCategoryHierarchyRole ==EcoResCategoryNamedHierarchyRole::Retail;

        EcoResCategory category = EcoResCategory::findByName(_categoryName, categoryHierarchy.RecId);

        return category;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>