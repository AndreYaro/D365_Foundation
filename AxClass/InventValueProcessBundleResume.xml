<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueProcessBundleResume</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueProcessBundleResume extends RunBaseBatch
{
    InventValueExecutionHistory inventValueExecutionHistory;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventValueExecutionHistory
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventValueExecutionHistory</Name>
				<Source><![CDATA[
    public  InventValueExecutionHistory parmInventValueExecutionHistory(InventValueExecutionHistory _inventValueExecutionHistory = inventValueExecutionHistory)
    {
        inventValueExecutionHistory = _inventValueExecutionHistory;
        return inventValueExecutionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(InventValueProcessBundleResume::description());

        boolean resumeGeneration;
        inventValueExecutionHistory = InventValueExecutionHistory::find(inventValueExecutionHistory.TransactionId, true);

        if (inventValueExecutionHistory.StopRunning == NoYes::No)
        {
            throw error("@SCM:InventoryValueReportIsRunning");
        }
        else
        {
            ttsbegin;
            inventValueExecutionHistory.StopRunning = NoYes::No;
            inventValueExecutionHistory.StopOnError = NoYes::No;
            inventValueExecutionHistory.update();
            InventValueBundleList::updateInventValueBundleStatus(inventValueExecutionHistory.TransactionId);
            resumeGeneration = true;
            ttscommit;
        }

        if (resumeGeneration)
        {
            InventValueProcessContract inventValueProcessContract = InventValueProcessContract::construct();
            inventValueProcessContract.parmTransactionId(inventValueExecutionHistory.TransactionId);
            inventValueProcessContract.parmReportId(inventValueExecutionHistory.ReportId);
            inventValueProcessContract.parmDateInterval(inventValueExecutionHistory.DateInterval);
            inventValueProcessContract.parmFromDate(inventValueExecutionHistory.FromDate);
            inventValueProcessContract.parmToDate(inventValueExecutionHistory.ToDate);
            inventValueProcessContract.parmRunInBundle(inventValueExecutionHistory.RunInBundle);
            inventValueProcessContract.parmQuery(SysOperationHelper::base64Encode(inventValueExecutionHistory.Filters));

            InventValueProcessService inventValueProcessService = new InventValueProcessService();
            inventValueProcessService.process(inventValueProcessContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueProcessBundleResume construct()
    {
        return new InventValueProcessBundleResume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventValueExecutionHistory</Name>
				<Source><![CDATA[
    public static InventValueProcessBundleResume newInventValueExecutionHistory(InventValueExecutionHistory _inventValueExecutionHistory)
    {
        InventValueProcessBundleResume inventValueProcessBundleResume = InventValueProcessBundleResume::construct();

        inventValueProcessBundleResume.getLast();
        inventValueProcessBundleResume.parmInventValueExecutionHistory(_inventValueExecutionHistory);
        inventValueProcessBundleResume.init();

        return inventValueProcessBundleResume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:ResumeInventValueReportGeneration";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addText("@SCM:ResumeInventValueReportGeneration_Text");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventValueExecutionHistory))
        {
            throw error(strFmt("@SYS29104",classStr(InventValueProcessBundleResume)));
        }

        if (args.dataset() == tableNum(InventValueExecutionHistory))
        {
            InventValueExecutionHistory inventValueExecutionHistory = args.record();
            inventValueExecutionHistory.reread();

            if (inventValueExecutionHistory.StopRunning == NoYes::No)
            {
                throw error("@SCM:InventoryValueReportIsRunning");
            }

            InventValueProcessBundleResume inventValueProcessBundleResume = InventValueProcessBundleResume::newInventValueExecutionHistory(args.record());
            
            if (inventValueProcessBundleResume.prompt())
            {
                inventValueProcessBundleResume.doBatch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>