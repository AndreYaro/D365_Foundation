<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Concrete implementation of <c>VendInvoiceAutomationIWorkflowSubmissionLogger</c> handles logging of automation vendor invoice submissions to workflow.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmissionLogger implements VendInvoiceAutomationIWorkflowSubmissionLogger
{
    private ProcessExecutionSourceLinkItem invoiceSubmissionSourceLink;
    private RefRecId invoiceSubmissionSourceLinkRecId;
    private List messageLogEntries;
    private VendInvoiceInfoTable vendorInvoice;
    private ProcessExecutionId workflowSubmissionExecutionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceWorkflowSubmission</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionLogger newFromInvoiceWorkflowSubmission(
        VendInvoiceInfoTable _vendorInvoice,
        ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationWorkflowSubmissionLogger submission =  new VendInvoiceAutomationWorkflowSubmissionLogger();
        submission.messageLogEntries = new List(Types::Class);
        submission.vendorInvoice = _vendorInvoice;
        submission.workflowSubmissionExecutionId = _processScheduleWorkItem.parmExecutionId();
        submission.initializeInvoiceSubmissionSourceLink(_vendorInvoice, _processScheduleWorkItem);

        return submission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceSubmissionSourceLink</Name>
				<Source><![CDATA[
    private void initializeInvoiceSubmissionSourceLink(VendInvoiceInfoTable _vendorInvoice, ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        // Initialize a default source link record for the vendor invoice workflow submission
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmHeader(_vendorInvoice.Num);
        sourceLinkItem.parmSourceRecId(_vendorInvoice.RecId);
        sourceLinkItem.parmSourceTableId(tableNum(VendInvoiceInfoTable));
        sourceLinkItem.parmMessage("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionInProcess");
        sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Success); // Assume submission will succeed until it fails

        // Write the source link record to the database and store the record's RecId for use in future updates and message log entries
        invoiceSubmissionSourceLink = sourceLinkItem;
        invoiceSubmissionSourceLinkRecId = ProcessExecutionSourceLink::insertSourceLink(invoiceSubmissionSourceLink).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSuccessfulSubmissionToProcessAutomationResults</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeSuccessfulSubmissionToProcessAutomationResults()
    {
        invoiceSubmissionSourceLink.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Success);

        this.updateProcessAutomationSourceLinkMessage("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionSuccess");
        this.writeMessageLogEntryToProcessAutomationResults(literalStr('@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionSuccess'), Exception::Info);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFailedSubmissionToProcessAutomationResults</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeFailedSubmissionToProcessAutomationResults()
    {
        invoiceSubmissionSourceLink.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);

        this.updateProcessAutomationSourceLinkMessage("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionFailed");
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMessageLogEntryToProcessAutomationResults</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeMessageLogEntryToProcessAutomationResults(LabelId _messageLabel, Exception _exception, container _labelParameters = conNull())
    {
        ProcessExecutionMessageLogItem messageLogEntry = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndLabel(
            invoiceSubmissionSourceLinkRecId,
            _exception,
            _messageLabel,
            _labelParameters);

        messageLogEntries.addEnd(messageLogEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFailureMessageLogEntryToProcessAutomationResults</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeFailureMessageLogEntryToProcessAutomationResults(LabelId _failureMessageLabelid, container _labelParameters = conNull())
    {
        // Fail the submission source link record
        this.writeFailedSubmissionToProcessAutomationResults();

        // Write the given failure message as an error to the submission message log
        this.writeMessageLogEntryToProcessAutomationResults(_failureMessageLabelid, Exception::Error, _labelParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessAutomationSourceLinkMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateProcessAutomationSourceLinkMessage(ProcessExecutionSourceLinkMessage _message)
    {
        invoiceSubmissionSourceLink.parmMessage(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSuccessfulSubmissionToInvoiceDocumentHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeSuccessfulSubmissionToInvoiceDocumentHistory()
    {
        this.logDocumentEvent(
            enumNum(VendInvoiceAutomationSubmitToWorkflow),
            VendInvoiceAutomationSubmitToWorkflow::Succeeded,
            vendorInvoice.RecId,
            workflowSubmissionExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFailedSubmissionToInvoiceDocumentHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeFailedSubmissionToInvoiceDocumentHistory()
    {
        this.logDocumentEvent(
            enumNum(VendInvoiceAutomationSubmitToWorkflow),
            VendInvoiceAutomationSubmitToWorkflow::Failed,
            vendorInvoice.RecId,
            workflowSubmissionExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAutomationPausedDueToFailedStepToDocumentHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeAutomationPausedDueToFailedStepToDocumentHistory()
    {
        DocumentEventLogRequest pauseFailedAutomationStepEvent = new DocumentEventLogRequest();
        pauseFailedAutomationStepEvent.eventEnumId = enumNum(VendInvoiceAutomationPausedFailedStepEvent);
        pauseFailedAutomationStepEvent.eventEnumValue = VendInvoiceAutomationPausedFailedStepEvent::NotSpecified;
        pauseFailedAutomationStepEvent.sourceRecId = vendorInvoice.RecId;
        pauseFailedAutomationStepEvent.sourceTableId = tableNum(VendInvoiceInfoTable);
        pauseFailedAutomationStepEvent.executionId = workflowSubmissionExecutionId;

        DocumentEventLog::logDocumentEvent(pauseFailedAutomationStepEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProcessAutomationResultsToDatabase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void writeProcessAutomationResultsToDatabase()
    {
        // Update the previously written source link record
        ProcessExecutionSourceLink::updateSourceLink(invoiceSubmissionSourceLinkRecId, invoiceSubmissionSourceLink);

        ListEnumerator messageLogEntryEnumerator = messageLogEntries.getEnumerator();

        // Iterate over message log entries and write to database
        while (messageLogEntryEnumerator.moveNext())
        {
            ProcessExecutionMessageLogItem messageLogEntry = messageLogEntryEnumerator.current() as ProcessExecutionMessageLogItem;
            ProcessExecutionMessageLog::insertMessage(messageLogEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentEvent</Name>
				<Source><![CDATA[
    private void logDocumentEvent(
        EnumId _eventEnumId,
        DocumentEventEnumValue _eventEnumValue,
        VendInvoiceInfoTableRecId _sourceRecId,
        ProcessExecutionId _executionId)
    {
        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = _eventEnumId;
        documentEventLogRequest.eventEnumValue = _eventEnumValue;
        documentEventLogRequest.sourceRecId = _sourceRecId;
        documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
        documentEventLogRequest.executionId = _executionId;

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>