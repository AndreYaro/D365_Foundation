<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardTransferJobForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardTransferJobForm</c> class provides the business logic that is required for the
///    <c>KanbanBoardTransferJob</c> form that includes filter management and inventory dimension setup.
/// </summary>
public class KanbanBoardTransferJobForm extends KanbanBoardForm
{
    InventDimCtrl_Frm       inventDimFormSetupTransferJobList;
    InventDimCtrl_Frm       inventDimFormSetupPickListPegging;

    FormDataSource          inventDimTransferJobList;
    FormDataSource          inventDimPickListAndPegging;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelSelectedKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels one or more selected kanban jobs.
    /// </summary>
    public void cancelSelectedKanbanJobs()
    {
        this.revertStatusSelectedKanbanJobs(LeanKanbanJobStatus::NotPlanned,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotCompletedProcessJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last not-completed process job of a kanban.
    /// </summary>
    /// <param name="_kanban">
    /// The kanban for which we need a job.
    /// </param>
    /// <returns>
    /// First not-completed process job or last process job (if all are completed).
    /// </returns>
    private KanbanJob getNotCompletedProcessJob(Kanban _kanban)
    {
        KanbanJob kanbanJob;

        // select first not completed job
        select firstonly kanbanJob
            order by Sequence
            where
                kanbanJob.Kanban == _kanban.RecId
            && kanbanJob.Type   == LeanKanbanJobType::Process
            && kanbanJob.Status != LeanKanbanJobStatus::Completed;

        if (!kanbanJob.RecId)
        {
            // if all completed return last job
            kanbanJob = _kanban.lastKanbanJobOfType(LeanKanbanJobType::Process);
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFormSetupPickListPegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimCtrl_Frm</c> object to use for dimensions setup in the picking list and
    ///    pegging.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventDimCtrl_Frm</c> class to use for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm inventDimFormSetupPickListPegging()
    {
        return inventDimFormSetupPickListPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFormSetupTransferJobList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimCtrl_Frm</c> object to use for dimensions setup in the transfer jobs list.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimCtrl_Frm</c> instance to use for dimensions setup.
    /// </returns>
    public InventDimCtrl_Frm inventDimFormSetupTransferJobList()
    {
        return inventDimFormSetupTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openKanbanForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the kanban form for a specified kanban job.
    /// </summary>
    /// <param name="_kanbanJobRefRecId">
    /// A record ID of a <c>KanbanJob</c> table record.
    /// </param>
    public void openKanbanForm(KanbanJobRefRecId _kanbanJobRefRecId)
    {
        if (_kanbanJobRefRecId)
        {
            Kanban kanban = KanbanJob::find(_kanbanJobRefRecId).kanban();
            if (kanban)
            {
                this.runMenuItem(menuitemDisplayStr(Kanban),MenuItemType::Display,kanban);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimPickListAndPegging</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimPickListAndPegging(FormDataSource _inventDimPickListAndPegging = inventDimPickListAndPegging)
    {
        inventDimPickListAndPegging = _inventDimPickListAndPegging;

        return inventDimPickListAndPegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimTransferJobList</Name>
				<Source><![CDATA[
    public FormDataSource parmInventDimTransferJobList(FormDataSource _inventDimTransferJobList = inventDimTransferJobList)
    {
        inventDimTransferJobList = _inventDimTransferJobList;

        return inventDimTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the action that is defined in the registration mode on a specified kanban card.
    /// </summary>
    /// <param name="_kanbanCardId">
    ///    A <c>KanbanCardId</c> string value.
    /// </param>
    /// <param name="_registrationMode">
    ///    A <c>KanbanScanMode</c> enumeration value.
    /// </param>
    /// <param name="_messageBoard">
    ///    The message board to use to show error messages.
    /// </param>
    /// <returns>
    ///    A Boolean value that indicates whether the card was processed.
    /// </returns>
    public boolean processCard(
        KanbanCardId               _kanbanCardId,
        KanbanScanMode             _registrationMode,
        KanbanBoardTmpMessageBoard _messageBoard)
    {
        Kanban          kanban = Kanban::findKanbanCardId(_kanbanCardId);
        boolean         result = true;

        if (kanban)
        {
            switch (_registrationMode)
            {
                case KanbanScanMode::StartTransfer:
                    KanbanJob kanbanJob = kanban.currentJob();
                    this.runMenuItem(menuitemActionStr(KanbanTransferJobInProgressSilent),MenuItemType::Action,kanbanJob);
                    break;
                case KanbanScanMode::EndTransfer:
                    kanbanJob = kanban.currentJob();
                    this.runMenuItem(menuitemActionStr(KanbanTransferJobCompleteSilent),MenuItemType::Action,kanbanJob);
                    break;
                case KanbanScanMode::Empty:
                    this.runMenuItem(menuitemActionStr(KanbanEmptySilent),MenuItemType::Action,kanban);
                    break;
                case KanbanScanMode::SelectKanban:
                    this.selectCardId(kanban, _kanbanCardId, _messageBoard);
                    break;
            }
        }
        else
        {
            _messageBoard.error(strFmt("@SYS4000392",_kanbanCardId));
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertStatusSelectedKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the status of one or more selected kanban jobs.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    /// A <c>LeanKanbanJoStatus</c> enum value that specifies the target kanban job status.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates if the status reversal should be processed silently.
    /// </param>
    public void revertStatusSelectedKanbanJobs(
        LeanKanbanJobStatus _leanKanbanJobStatus = LeanKanbanJobStatus::NotPlanned,
        boolean             _silent              = false)
    {
        int                             i;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds);

        if (selectedJobs)
        {
            List listSelectedJobs = new List(Types::Record);

            for (i=1;i<=conLen(selectedJobs);i++)
            {
                KanbanBoardTmpTransferJob kanbanBoardTmpTransferJob = conPeek(selectedJobs,i);
                listSelectedJobs.addEnd(kanbanBoardTmpTransferJob);
            }
            if (listSelectedJobs.elements() > 0)
            {
                KanbanMultiJobReset kanbanMultiJobReset = KanbanMultiJob::newCallerListBuffer(LeanKanbanJobStatus::NotPlanned,listSelectedJobs,_silent,true);
                kanbanMultiJobReset.runMain(KanbanMulti::makeArgs(_silent,'',formRun));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Highlights the specified card in the list of jobs.
    /// </summary>
    /// <param name="_kanban">
    ///    The kanban whose job is selected in the list.
    /// </param>
    /// <param name="_kanbanCardId">
    ///    The kanban card ID of the job to select in the job list.
    /// </param>
    /// <param name="_messageBoard">
    ///    The message board to use to show error messages.
    /// </param>
    /// <returns>
    ///    true if the job was found and selected; otherwise, false.
    /// </returns>
    public boolean selectCardId(
        Kanban                      _kanban,
        KanbanCardId                _kanbanCardId,
        KanbanBoardTmpMessageBoard  _messageBoard)
    {
        FormDataSource              formDataSource = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        boolean                     result =    _kanbanCardId
                                             && this.selectFormDataSourceRecord(
                                                            formDataSource,
                                                            fieldStr(KanbanBoardTmpTransferJob, CardId),
                                                            _kanbanCardId);

        if (!result)
        {
            KanbanJob kanbanJob = this.getNotCompletedProcessJob(_kanban);

            switch (kanbanJob.Status)
            {
                case LeanKanbanJobStatus::Completed:
                    _messageBoard.warning(strFmt("@SYS4000390", kanbanJob.PlanActivityName, _kanban.KanbanId));
                    break;
                default:
                    _messageBoard.error(strFmt("@SYS4000618", _kanban.KanbanId, kanbanJob.PlanActivityName));
                    break;
            }

            if (_kanban.Status == LeanKanbanStatus::Emptied)
            {
                _messageBoard.warning(strFmt("@SYS4000619", _kanban.KanbanId, _kanbanCardId));
            }

            _messageBoard.info("@SYS4000386");
        }
        else
        {
            if (_kanban.Status == LeanKanbanStatus::Emptied)
            {
                _messageBoard.warning(strFmt("@SYS4000387", _kanban.KanbanId));
            }
            else
            {
                KanbanBoardTmpTransferJob foundJob = formDataSource.getFirst();

                switch (foundJob.Status)
                {
                    case LeanKanbanJobStatus::NotPlanned:
                        FormDataSource kanbanJobTmpPegging_ds = formRun.dataSource(tableStr(KanbanJobTmpPegging));

                        if (kanbanJobTmpPegging_ds.numberOfRowsLoaded() == 0
                            || kanbanJobTmpPegging_ds.findValue(fieldNum(KanbanJobTmpPegging, JobStatus), SysQuery::value(LeanKanbanJobStatus::Completed)))
                        {
                            _messageBoard.info(strFmt("@SYS4000388", _kanban.KanbanId, foundJob.ActivityName));
                        }
                        else
                        {
                            KanbanJobTmpPegging kanbanJobTmpPegging = kanbanJobTmpPegging_ds.getFirst();
                            _messageBoard.info(strFmt("@SYS4000388", _kanban.KanbanId, foundJob.ActivityName));
                            _messageBoard.warning(strFmt("@SYS4000389", kanbanJobTmpPegging.ActivityName));
                        }
                        break;
                    case LeanKanbanJobStatus::InProgress:
                        _messageBoard.info(strFmt("@SYS4000388", _kanban.KanbanId, foundJob.ActivityName));
                        break;
                    case LeanKanbanJobStatus::Completed:
                        _messageBoard.info(strFmt("@SYS4000390", foundJob.ActivityName, _kanban.KanbanId));
                        break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Highlights the specified job in the list of jobs.
    /// </summary>
    /// <param name="_jobId">
    ///    A job identifier of the job to select in the job list.
    /// </param>
    /// <param name="_formDataSource">
    ///    A data source that contains the job list.
    /// </param>
    /// <returns>
    ///    true if the job was found and selected; otherwise, false.
    /// </returns>
    public boolean selectJob(
        RecId          _jobId,
        FormDataSource _formDataSource)
    {
        return    _jobId
               && this.selectFormDataSourceRecord(_formDataSource,fieldStr(KanbanBoardTmpTransferJob,Job),_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleSelectedJobsPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the kanban priority of one or more selected kanban jobs.
    /// </summary>
    /// <remarks>
    /// If one or more selected jobs are currently not a priority, all jobs are set to priority.
    /// If all jobs are currently a priority, all jobs are set to non-priority.
    /// </remarks>
    public void toggleSelectedJobsPriority()
    {
        KanbanBoardTmpTransferJob       kanbanBoardTmpTransferJob;
        Kanban                          kanban;
        NoYes                           isPriority = NoYes::No;
        int                             i;

        FormDataSource kanbanBoardTmpTransferJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpTransferJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpTransferJob_ds);

        if (selectedJobs)
        {
            for (i=1;i<=conLen(selectedJobs);i++)
            {
                kanbanBoardTmpTransferJob = conPeek(selectedJobs,i);
                if (kanbanBoardTmpTransferJob.Express == NoYes::No)
                {
                    //found at least one kanban that is currently not a priority
                    isPriority = NoYes::Yes;
                    break;
                }
            }

            //update
            ttsbegin;
            for (i=1;i<=conLen(selectedJobs);i++)
            {
                kanbanBoardTmpTransferJob = conPeek(selectedJobs,i);
                kanban.setPriority(isPriority,0,kanbanBoardTmpTransferJob.KanbanId);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers design updates to create or update the <c>InventDimFormSetup</c> class helpers.
    /// </summary>
    /// <param name="_mode">
    ///    An <c>InventDimFormDesignUpdate</c> value that specifies what type of action this is; for example,
    ///    initialize, or update; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An invalid parameter was passed.
    /// </exception>
    public void updateDesign(InventDimFormDesignUpdate _mode = InventDimFormDesignUpdate::Init)
    {
        Set             set;
        InventDimParm   inventDimParm;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                inventDimParm.initProductDimensionsAllGroups();

                if (!inventDimFormSetupPickListPegging)
                {
                    set = new Set(Types::String);
                    set.add(inventDimPickListAndPegging.name());
                    inventDimFormSetupPickListPegging = InventDimCtrl::newFromFormValidDataSources(formRun,set);
                    inventDimFormSetupPickListPegging.parmDimParmVisibleGrid(inventDimParm.data());
                }
                if (!inventDimFormSetupTransferJobList)
                {
                    set = new Set(Types::String);
                    set.add(inventDimTransferJobList.name());
                    inventDimFormSetupTransferJobList = InventDimCtrl::newFromFormValidDataSources(formRun,set);
                    inventDimFormSetupTransferJobList.parmDimParmVisibleGrid(inventDimParm.data());
                }
                //fall through
            case InventDimFormDesignUpdate::Active:
                inventDimFormSetupPickListPegging.formActiveSetup();
                inventDimFormSetupPickListPegging.formSetControls(true);
                inventDimFormSetupTransferJobList.formActiveSetup();
                inventDimFormSetupTransferJobList.formSetControls(true);
                break;
            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardTransferJobForm construct()
    {
        return new KanbanBoardTransferJobForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the <c>KanbanBoardTransferJob</c> form that is based on the actual
    ///    <c>FormRun</c> data.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object that represents the form.
    /// </param>
    /// <param name="_inventDimTransferJobList">
    ///    A data source with the inventory dimensions of the transfer jobs list.
    /// </param>
    /// <param name="_inventDimPickListPegging">
    ///    A data source with the inventory dimensions of the picking list and pegging.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanBoardTransferJobForm</c> class.
    /// </returns>
    public static KanbanBoardTransferJobForm newForm(
        FormRun        _formRun,
        FormDataSource _inventDimTransferJobList,
        FormDataSource _inventDimPickListPegging)
    {
        KanbanBoardTransferJobForm kanbanBoardTransferJobForm;

        if (_formRun)
        {
            kanbanBoardTransferJobForm = KanbanBoardTransferJobForm::construct();
            kanbanBoardTransferJobForm.parmFormRun(_formRun);
            kanbanBoardTransferJobForm.parmInventDimPickListAndPegging(_inventDimPickListPegging);
            kanbanBoardTransferJobForm.parmInventDimTransferJobList(_inventDimTransferJobList);
        }

        return kanbanBoardTransferJobForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the custom filter of the form is valid.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    /// The current filter criteria.
    /// </param>
    /// <returns>
    /// true if the filter is valid; otherwise, false.
    /// </returns>
    public static boolean validateFilter(KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria)
    {
        return _kanbanBoardTmpFilterCriteria.validateWrite();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
