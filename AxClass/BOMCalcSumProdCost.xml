<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcSumProdCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcSumProdCost</c> class rolls up the realized costs of a detailed production
///    calculation to a cost per cost group.
/// </summary>
class BomCalcSumProdCost extends BOMCalcSumCost
{
    ProdId  prodId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes <c>ProdCalcTrans</c> records into a sum per cost group and level.
    /// </summary>
    public void rollup()
    {
        ProdCalcTrans   prodCalcTrans;
        InventCostLevel costLevel;

        while select prodCalcTrans
            where prodCalcTrans.CollectRefProdId == prodId
        {
            costLevel = min(prodCalcTrans.CollectRefLevel, InventCostLevel::Multi);   //Everything above level 2 is cost accounted as level 2

            select firstonly forupdate tmpBOMCalcSumCost
                where tmpBOMCalcSumCost.CostLevel   == costLevel
                   && tmpBOMCalcSumCost.CostGroupId == prodCalcTrans.CostGroupId
                   && tmpBOMCalcSumCost.Split       == prodCalcTrans.bom;

            if (!tmpBOMCalcSumCost.RecId)
            {
                // Primary key
                tmpBOMCalcSumCost.CostLevel     = costLevel;
                tmpBOMCalcSumCost.CostGroupId   = prodCalcTrans.CostGroupId;
                tmpBOMCalcSumCost.Split         = prodCalcTrans.bom;

                tmpBOMCalcSumCost.Qty           = prodCalcTrans.Qty;
                tmpBOMCalcSumCost.UnitID        = prodCalcTrans.UnitId;
            }

            tmpBOMCalcSumCost.CostAmount += prodCalcTrans.realCostAmountTotal();
            tmpBOMCalcSumCost.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcSumProdCost construct()
    {
        return new BOMCalcSumProdCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>