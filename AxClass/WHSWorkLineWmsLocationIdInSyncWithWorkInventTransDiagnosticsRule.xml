<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineWmsLocationIdInSyncWithWorkInventTransDiagnosticsRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineWmsLocationIdInSyncWithWorkInventTransDiagnosticsRule</c> class is used to check whether any work inventory transactions 
/// have InventDimIdFrom/To which do not match the location defined directly on the work line.
/// </summary>
/// <remarks>
/// For Pick work lines, the <c>InventDimIdFrom</c> on all corresponding WorkInventTrans should be with WMSLocationId blank (or == to WMSLocationId of the workline)
/// For Put work lines, the <c>InventDimIdTo</c> on all corresponding WorkInventTrans should be with WMSLocationId == WMSLocationId from the workLine
/// </remarks>
[DiagnosticsRuleAttribute]
public final class WHSWorkLineWmsLocationIdInSyncWithWorkInventTransDiagnosticsRule implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether any work lines are out of sync with the respective work inventory transactions on the Location storage dimension.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::SCM, "@WAX:WHSInventoryTransactionDimensionDiagnosticsRuleName", DiagnosticsRunFrequency::Monthly, "@WAX:WorkLineLocationInSyncWithWorkInventTransDiagRule_Description")]
    public DiagnosticsRuleValidationResult validate()
    {
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();

        this.validatePickWorkLineWorkInventTransInventDimIdFrom(validationResult);
        this.validatePutWorkLineWorkInventTransInventDimIdTo(validationResult);
       
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickWorkLineWorkInventTransInventDimIdFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// For Pick work lines, the <c>InventDimIdFrom</c> on all corresponding WorkInventTrans should be with WMSLocationId blank (or == to WMSLocationId of the workline)
    /// </summary>
    /// <param name = "_validationResult">An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.</param>
    private void validatePickWorkLineWorkInventTransInventDimIdFrom(DiagnosticsRuleValidationResult _validationResult)
    {
        WHSWorkLine             workLine;
        WHSWorkInventTrans      workInventTrans;
        InventDim               inventDim;
        boolean                 foundErrors;

        // Find all Pick work lines for which there exists work inventory transactions
        // but for which the location on the InventDimidFrom is populated with a value different from the one on the work line.
        while select crosscompany WMSLocationId, DataAreaId, WorkId, LineNum from workLine
            where workLine.WorkType == WHSWorkType::Pick
                && workLine.WMSLocationId != ''
            join TableId from workInventTrans
                where workInventTrans.WorkId == workLine.WorkId
                    && workInventTrans.LineNum == workLine.LineNum
                join WMSLocationId from inventDim
                    where inventDim.inventDimId == workInventTrans.InventDimIdFrom
                        && inventDim.wMSLocationId != ''
                        && inventDim.wMSLocationId != workLine.WMSLocationId
        {
            if (!foundErrors)
            {
                _validationResult.addValidationResult("@WAX:WorkLineLocationInSyncWithWorkInventTransDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Medium, "@WAX:WorkLineLocationInSyncWithWorkInventTransDiagRule_Recommendation");
                foundErrors = true;
            }

            this.addValidationError(_validationResult, workLine, InventDim.wMSLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePutWorkLineWorkInventTransInventDimIdTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// For Put work lines, the <c>InventDimIdTo</c> on all corresponding WorkInventTrans should be with WMSLocationId == WMSLocationId from the workLine
    /// </summary>
    /// <param name = "_validationResult">An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.</param>
    private void validatePutWorkLineWorkInventTransInventDimIdTo(DiagnosticsRuleValidationResult _validationResult)
    {
        WHSWorkLine             workLine;
        WHSWorkInventTrans      workInventTrans;
        InventDim               inventDim;
        boolean                 foundErrors;

        // Find all Put work lines for which there exists work inventory transactions
        // but for which the location on the InventDimidTo is populated with a value different from the one on the work line.
        while select crosscompany WMSLocationId, DataAreaId, WorkId, LineNum from workLine
            where workLine.WorkType == WHSWorkType::Put
                && workLine.WMSLocationId != ''
            join TableId from workInventTrans
                where workInventTrans.WorkId == workLine.WorkId
                    && workInventTrans.LineNum == workLine.LineNum
                join WMSLocationId from inventDim
                    where inventDim.inventDimId == workInventTrans.InventDimIdTo
                        && inventDim.wMSLocationId != workLine.WMSLocationId
        {
            if (!foundErrors)
            {
                _validationResult.addValidationResult("@WAX:WorkLineLocationInSyncWithWorkInventTransDiagRule_ErrorMsg", DiagnosticsValidationSeverity::Medium, "@WAX:WorkLineLocationInSyncWithWorkInventTransDiagRule_Recommendation");
                foundErrors = true;
            }

            this.addValidationError(_validationResult, workLine, InventDim.wMSLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationError</Name>
				<Source><![CDATA[
    private void addValidationError(DiagnosticsRuleValidationResult _validationResult, WHSWorkLine _workLine, WMSLocationId _actualWmsLocationId)
    {
        _validationResult.addValidationDetail(fieldPName(WHSWorkLine, DataAreaId), _workLine.DataAreaId);
        _validationResult.addValidationDetail(fieldPName(WHSWorkLine, WorkId), _workLine.WorkId);
        _validationResult.addValidationDetail(fieldPName(WHSWorkLine, LineNum), strFmt("@SYS82282", _workLine.LineNum));
        _validationResult.addValidationDetail(fieldPName(WHSWorkTable, InventLocationId), _workLine.whsWorkTable().InventLocationId);
        _validationResult.addValidationDetail(strFmt("@WAX:FieldPNameOnTablePName", fieldPName(WHSWorkLine, WMSLocationId), tablePName(WHSWorkLine)), _workLine.WMSLocationId);
        _validationResult.addValidationDetail(strFmt("@WAX:FieldPNameOnTablePName", fieldPName(WHSWorkLine, WMSLocationId), tablePName(WHSWorkInventTrans)), _actualWmsLocationId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>