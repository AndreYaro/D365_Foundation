<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFinalizeServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFinalizeServiceController</c> class acts as a controller for the
/// <c>PurchFinalizeService</c> service.
/// </summary>
/// <remarks>
/// This class is a customized controller that extends from the <c>SysOperationServiceController</c>
/// class.
/// </remarks>
class PurchFinalizeServiceController extends SysOperationServiceController implements BatchRetryable
{
    Common  callerRecord;
    boolean doResearch;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object that is based on a caller record.
    /// </summary>
    protected void buildQuery()
    {
        PurchFinalizeContract           purchFinalizeContract;

        purchFinalizeContract = this.getDataContractObject('_dataContract');
        purchFinalizeContract.parmFinalizeHeader(true);

        if (this.parmCallerRecord())
        {
            Query   query = new Query(queryStr(PurchFinalizePurchaseOrder));

            switch (this.parmCallerRecord().TableId)
            {
                case tableNum(PurchTable):

                    if (this.checkRetentionAmt())
                    {
                        PurchTable  purchTable = this.parmCallerRecord();
                        query.dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(purchTable.PurchId));

                        purchFinalizeContract.parmOnlyEntireOrder(NoYes::Yes);
                    }
                    break;
                case tableNum(PurchLine):

                    if (this.checkRetentionAmt())
                    {
                        PurchLine   purchLine = this.parmCallerRecord();
                        query.dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(purchLine.PurchId));
                        query.dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, InventTransId)).value(queryValue(purchLine.InventTransId));

                        purchFinalizeContract.parmOnlyEntireOrder(NoYes::No);
                        purchFinalizeContract.parmFinalizeHeader(false);
                    }
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            // OnlyCompletedLine checkbox is hidden for a caller with a record
            // However the value could be loaded based on SysLastValue
            // therefore defaulting value is needed.
            purchFinalizeContract.parmOnlyCompletedLine(NoYes::No);

            // Set default values when finalizing one purchase order or line
            purchFinalizeContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));
        }

        purchFinalizeContract.parmClosingDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRetentionAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the retention amount is existing or not.
    /// </summary>
    /// <returns>
    /// return boolean value or warning
    /// </returns>

    public boolean checkRetentionAmt()
    {
        VendInvoiceTrans invoiceTrans;
        boolean          checkRetention = true;

        if (this.parmCallerRecord().TableId == tableNum(PurchTable))
        {
            PurchTable  purchTable = this.parmCallerRecord();

            select sum(PSARetainageAmount), sum(PSAReleaseAmount)
                from invoiceTrans
                where invoiceTrans.PurchID == purchTable.PurchId;

            if ((invoiceTrans.PSARetainageAmount - invoiceTrans.PSAReleaseAmount )> 0)
            {
                checkRetention = checkFailed("@PSA11603");
            }
        }
        else if (this.parmCallerRecord().TableId == tableNum(PurchLine))
        {
            PurchLine   purchLine = this.parmCallerRecord();

            select sum(PSARetainageAmount), sum(PSAReleaseAmount)
                from invoiceTrans
                where invoiceTrans.PurchID       == purchLine.PurchId &&
                      invoiceTrans.InventTransId == purchLine.InventTransId;

            if ((invoiceTrans.PSARetainageAmount - invoiceTrans.PSAReleaseAmount )> 0)
            {
                checkRetention = checkFailed("@PSA11603");
            }
        }

        return checkRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// The service class and method name.
    /// </returns>
    protected identifierName lastValueDesignName()
    {
        if (this.showQueryValues(''))
        {
            return super();
        }

        return strFmt('%1.%2', classStr(PurchFinalizeServiceController), staticMethodStr(PurchFinalizeServiceController, main));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(identifierName _className='', identifierName _methodName='', SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ReliableAsynchronous)
    {
        super(_className, _methodName, _executionMode);

        doResearch = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public Common parmCallerRecord(Common _callerRecord = callerRecord)
    {
        callerRecord = _callerRecord;

        return callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form data source.
    /// </summary>
    protected void refreshCallerRecord()
    {
        FormDataSource callerDataSource;
        object         dataSourceObject;

        if (this.parmCallerRecord() && FormDataUtil::getFormDataSource(this.parmCallerRecord()))
        {
            callerDataSource = FormDataUtil::getFormDataSource(this.parmCallerRecord());

            if (doResearch)
            {
                switch (callerDataSource.Table())
                {
                    case tableNum(PurchTable):
                        callerDataSource.research(true);
                        break;

                    case tableNum(PurchLine):
                        if (callerDataSource.joinSourceDataSource() && callerDataSource.joinSourceDataSource().table() == tableNum(PurchTable))
                        {
                            callerDataSource.joinSourceDataSource().research(true);
                        }
                        break;
                }

                doResearch = false;
            }
            else
            {
                callerDataSource.reread();
            }

            if (callerDataSource.table() == tableNum(PurchTable)
                && formDataSourceHasMethod(callerDataSource, identifierStr(reReadLines)))
            {
                dataSourceObject = callerDataSource;
                dataSourceObject.reReadLines();
            }

            if (!doResearch)
            {
                callerDataSource.refresh();
            }

            callerDataSource.selectionChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the query values should be shown in the dialog.
    /// </summary>
    /// <param name="parameterName">
    /// Name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    ///    true if the query values should be shown; otherwise, false.
    /// </returns>
    public boolean showQueryValues(str parameterName)
    {
        return !callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEncumbranceSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the values in the <c>PurchEncumbranceSummary</c> table.
    /// </summary>
    /// <remarks>
    /// The <c>PurchEncumbranceSummary</c> table contains the data behind the <c>Encumbrance Summary</c> factbox
    /// on the <c>PurchTable</c> and <c>PurchTableListPage</c> forms.
    /// </remarks>
    protected void updateEncumbranceSummary()
    {
        PurchTable      purchTable;
        PurchLine       purchLine;

        if (PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN && LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes)
        {
            switch (this.parmCallerRecord().TableId)
            {
                case tableNum(PurchTable):
                    purchTable = this.parmCallerRecord() as PurchTable;
                    PurchTotalsSummaryController::invalidateEncumbranceSummaryRecord(purchTable.PurchId);
                    PurchTotalsSummaryController::updateTotals(this.parmCallerRecord() as PurchTable, tableNum(PurchEncumbranceSummary));
                    doResearch = true;
                    break;

                case tableNum(PurchLine):
                    purchLine = this.parmCallerRecord() as PurchLine;
                    PurchTotalsSummaryController::invalidateEncumbranceSummaryRecord(purchLine.PurchId);
                    PurchTotalsSummaryController::updateTotals(PurchTable::find(purchLine.PurchId), tableNum(PurchEncumbranceSummary));
                    doResearch = true;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseOrder</Name>
				<Source><![CDATA[
    private boolean validatePurchaseOrder()
    {
        if (this.parmCallerRecord())
        {
            switch (this.parmCallerRecord().TableId)
            {
                case tableNum(PurchTable):
                    if (this.checkRetentionAmt())
                    {
                        PurchTable purchTable = this.parmCallerRecord();

                        if (!purchTable.canFinalize())
                        {
                            if (purchTable.isInvoiced()
                                || purchTable.isCanceled())
                            {
                                error(strFmt("@ProcurementAndSourcing:PurchFinalizeHeaderCannotBeFinalizedApprovalStatus", purchTable.PurchId, purchTable.DocumentState, VersioningDocumentState::Confirmed));
                            }
                            else
                            {
                                error(strFmt("@ProcurementAndSourcing:PurchFinalizeHeaderCannotBeFinalized", purchTable.PurchId));
                            }

                            return false;
                        }
                    }
                    break;

                case tableNum(PurchLine):
                    if (this.checkRetentionAmt())
                    {
                        PurchLine purchLine = this.parmCallerRecord();

                        if (!purchLine.canFinalize())
                        {
                            error(strFmt("@ProcurementAndSourcing:PurchFinalizeLineCannotBeFinalized", purchLine.LineNumber, purchLine.PurchId));

                            return false;
                        }
                    }
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes a <c>PurchTable</c> or <c>PurchLine</c> record.
    /// </summary>
    /// <param name="args">
    ///    The arguments of the <c>PurchFinalizeServiceController</c> class.
    /// </param>
    public static void main(Args args)
    {
        PurchFinalizeServiceController  controller;

        controller = PurchFinalizeServiceController::newFromArgs(args);

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(strFmt('%1_%2', formStr(Dialog), classStr(PurchFinalizeServiceController)), args.menuItemName()))
        {
            if (controller.checkRetentionAmt()
                && controller.validatePurchaseOrder())
            {
                controller.buildQuery();
                controller.startOperation();
                controller.updateEncumbranceSummary();
                controller.refreshCallerRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>PurchFinalizeServiceController</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>PurchFinalizeServiceController</c> class.
    /// </param>
    /// <returns>
    ///     An instance of the <c>PurchFinalizeServiceController</c> class.
    /// </returns>
    public static PurchFinalizeServiceController newFromArgs(Args _args)
    {
        PurchFinalizeServiceController  controller;
        identifierName                  className;
        identifierName                  methodName;
        SysOperationExecutionMode       executionMode;

        [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(_args);
        if (_args.record())
        {
            // Run synchronous when finalizing one purchase order or line
            executionMode = SysOperationExecutionMode::Synchronous;
        }
        controller = new PurchFinalizeServiceController(className, methodName, executionMode);
        controller.parmArgs(_args);
        controller.parmCallerRecord(_args.record());

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>