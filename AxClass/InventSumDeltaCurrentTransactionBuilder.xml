<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDeltaCurrentTransactionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSumDeltaCurrentTransactionBuilder extends ApplicationSQLObjects
{
    private str targetViewName;
    private str asPartition;
    private str asDataAreaId;
    private str asRecId;
    private str asItemId;
    private str asPhysicalInvent;
    private str asPdsCWPhysicalInvent;
    private str asInventDimId;
    private str sourceTableName;
    private str sourcePartition;
    private str sourceDataAreaId;
    private str sourceRecId;
    private str sourceItemId;
    private str sourcePhysicalInvent;
    private str sourcePdsCWPhysicalInvent;
    private str sourceInventDimId;
    private str sourceSqlTransactionId;

    //Inventory dimensions
    private str asConfigId;
    private str asInventBatchId;
    private str asInventColorId;
    private str asInventLocationId;
    private str asInventSerialId;
    private str asInventSiteId;
    private str asInventSizeId;
    private str asInventStatusId;
    private str asInventStyleId;
    private str asInventVersionId;
    private str asLicensePlateId;
    private str asWMSLocationId;
    private str asWMSPalletId;
    private str asInventGtdId_RU;
    private str asInventOwnerId_RU;
    private str asInventProfileId_RU;
    private str asInventDimension1;
    private str asInventDimension2;
    private str asInventDimension3;
    private str asInventDimension4;
    private str asInventDimension5;
    private str asInventDimension6;
    private str asInventDimension7;
    private str asInventDimension8;
    private str asInventDimension9;
    private str asInventDimension10;
    private str asInventDimension11;
    private str asInventDimension12;
    private str sourceConfigId;
    private str sourceInventBatchId;
    private str sourceInventColorId;
    private str sourceInventLocationId;
    private str sourceInventSerialId;
    private str sourceInventSiteId;
    private str sourceInventSizeId;
    private str sourceInventStatusId;
    private str sourceInventStyleId;
    private str sourceInventVersionId;
    private str sourceLicensePlateId;
    private str sourceWMSLocationId;
    private str sourceWMSPalletId;
    private str sourceInventGtdId_RU;
    private str sourceInventOwnerId_RU;
    private str sourceInventProfileId_RU;
    private str sourceInventDimension1;
    private str sourceInventDimension2;
    private str sourceInventDimension3;
    private str sourceInventDimension4;
    private str sourceInventDimension5;
    private str sourceInventDimension6;
    private str sourceInventDimension7;
    private str sourceInventDimension8;
    private str sourceInventDimension9;
    private str sourceInventDimension10;
    private str sourceInventDimension11;
    private str sourceInventDimension12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = InventSumDeltaCurrentTransactionBuilder::contruct();

        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    public static InventSumDeltaCurrentTransactionBuilder contruct()
    {
        return new InventSumDeltaCurrentTransactionBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    protected boolean createViews()
    {
        return this.createSqlTransactionHashingFunction() && this.dropView(targetViewName) && this.executeSqlStatement(this.createViewSqlStmt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSqlTransactionHashingFunction</Name>
				<Source><![CDATA[
    protected boolean createSqlTransactionHashingFunction()
    {
        return this.executeSqlStatement(strFmt('IF OBJECT_ID (N\'dbo.%1\', N\'FN\') IS NULL begin EXEC(\'CREATE FUNCTION dbo.%1() RETURNS BIGINT AS BEGIN RETURN CURRENT_TRANSACTION_ID(); END\'); END', InventUpdateOnhand::getInventUpdateOnHandHashingFunctionName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventSumDeltaHashingFunctionOnSystemStartup</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(ApplicationStartupEventManager), staticDelegateStr(ApplicationStartupEventManager, onSystemStartup)), Hookable(false)]
    internal static void createInventSumDeltaHashingFunctionOnSystemStartup()
    {
        try
        {
            var builder = InventSumDeltaCurrentTransactionBuilder::contruct();
            builder.createSqlTransactionHashingFunction();
        }
        catch // intentional catch-all not to disrupt normal AOS startup
        {}
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText createViewSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'CREATE VIEW ' + targetViewName + ' AS SELECT ';
        
        sqlStmt += sourcePartition + ' AS ' + asPartition +', ';
        sqlStmt += sourceDataAreaId + ' AS ' + asDataAreaId +', ';
        sqlStmt += sourceRecId + ' AS ' + asRecId +', ';
        sqlStmt += sourceItemId + ' AS ' + asItemId +', ';
        sqlStmt += sourcePhysicalInvent + ' AS ' + asPhysicalInvent +', ';

        // If the config key (PDSCatchWeight) is disabled, then the field name and alias will be empty.
        if (sourcePdsCWPhysicalInvent && asPdsCWPhysicalInvent)
        {
            sqlStmt += sourcePdsCWPhysicalInvent + ' AS ' + asPdsCWPhysicalInvent +', ';
        }

        //Inventory dimension fields
        sqlStmt += sourceInventSiteId + ' AS ' + asInventSiteId +', ';
        sqlStmt += sourceInventLocationId + ' AS ' + asInventLocationId +', ';
        sqlStmt += sourceInventBatchId + ' AS ' + asInventBatchId +', ';
        sqlStmt += sourceInventSerialId + ' AS ' + asInventSerialId +', ';

        // If the config key is disabled, then the field name and alias will be empty.
        if (sourceConfigId && asConfigId)
        {
            sqlStmt += sourceConfigId + ' AS ' + asConfigId +', ';
        }
        if (sourceInventColorId && asInventColorId)
        {
            sqlStmt += sourceInventColorId + ' AS ' + asInventColorId +', ';
        }
        if (sourceInventSizeId && asInventSizeId)
        {
            sqlStmt += sourceInventSizeId + ' AS ' + asInventSizeId +', ';
        }
        if (sourceInventStatusId && asInventStatusId)
        {
            sqlStmt += sourceInventStatusId + ' AS ' + asInventStatusId +', ';
        }
        if (sourceInventStyleId && asInventStyleId)
        {
            sqlStmt += sourceInventStyleId + ' AS ' + asInventStyleId +', ';
        }
        if (sourceInventVersionId && asInventVersionId)
        {
            sqlStmt += sourceInventVersionId + ' AS ' + asInventVersionId +', ';
        }
        if (sourceLicensePlateId && asLicensePlateId)
        {
            sqlStmt += sourceLicensePlateId + ' AS ' + asLicensePlateId +', ';
        }
        if (sourceWMSLocationId && asWMSLocationId)
        {
            sqlStmt += sourceWMSLocationId + ' AS ' + asWMSLocationId +', ';
        }
        if (sourceWMSPalletId && asWMSPalletId)
        {
            sqlStmt += sourceWMSPalletId + ' AS ' + asWMSPalletId +', ';
        }
        if (sourceInventGtdId_RU && asInventGtdId_RU)
        {
            sqlStmt += sourceInventGtdId_RU + ' AS ' + asInventGtdId_RU +', ';
        }
        if (sourceInventOwnerId_RU && asInventOwnerId_RU)
        {
            sqlStmt += sourceInventOwnerId_RU + ' AS ' + asInventOwnerId_RU +', ';
        }
        if (sourceInventProfileId_RU && asInventProfileId_RU)
        {
            sqlStmt += sourceInventProfileId_RU + ' AS ' + asInventProfileId_RU +', ';
        }
        if (sourceInventDimension1 && asInventDimension1)
        {
            sqlStmt += sourceInventDimension1 + ' AS ' + asInventDimension1 +', ';
        }
        if (sourceInventDimension2 && asInventDimension2)
        {
            sqlStmt += sourceInventDimension2 + ' AS ' + asInventDimension2 +', ';
        }
        if (sourceInventDimension3 && asInventDimension3)
        {
            sqlStmt += sourceInventDimension3 + ' AS ' + asInventDimension3+', ';
        }
        if (sourceInventDimension4 && asInventDimension4)
        {
            sqlStmt += sourceInventDimension4 + ' AS ' + asInventDimension4 +', ';
        }
        if (sourceInventDimension5 && asInventDimension5)
        {
            sqlStmt += sourceInventDimension5 + ' AS ' + asInventDimension5 +', ';
        }
        if (sourceInventDimension6 && asInventDimension6)
        {
            sqlStmt += sourceInventDimension6 + ' AS ' + asInventDimension6 +', ';
        }
        if (sourceInventDimension7 && asInventDimension7)
        {
            sqlStmt += sourceInventDimension7 + ' AS ' + asInventDimension7 +', ';
        }
        if (sourceInventDimension8 && asInventDimension8)
        {
            sqlStmt += sourceInventDimension8 + ' AS ' + asInventDimension8 +', ';
        }
        if (sourceInventDimension9 && asInventDimension9)
        {
            sqlStmt += sourceInventDimension9 + ' AS ' + asInventDimension9 +', ';
        }
        if (sourceInventDimension10 && asInventDimension10)
        {
            sqlStmt += sourceInventDimension10 + ' AS ' + asInventDimension10 +', ';
        }
        if (sourceInventDimension11 && asInventDimension11)
        {
            sqlStmt += sourceInventDimension11 + ' AS ' + asInventDimension11 +', ';
        }
        if (sourceInventDimension12 && asInventDimension12)
        {
            sqlStmt += sourceInventDimension12 + ' AS ' + asInventDimension12 +', ';
        }

        sqlStmt += sourceInventDimId + ' AS ' + asInventDimId +' ';

        sqlStmt += 'FROM ' + sourceTableName + ' ';

        sqlStmt += 'WHERE ' + sourceSqlTransactionId +' = dbo.' + InventUpdateOnhand::getInventUpdateOnHandHashingFunctionName()+'()';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        SysDictView sysDictView     = new SysDictView(tableNum(InventSumDeltaCurrentTransaction));
        targetViewName              = sysDictView.name(DbBackend::Sql);
        asPartition                 = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, Partition)).name(DbBackend::Sql);
        asDataAreaId                = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, DataAreaId)).name(DbBackend::Sql);
        asRecId                     = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, RecId)).name(DbBackend::Sql);
        asItemId                    = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, ItemId)).name(DbBackend::Sql);
        asPhysicalInvent            = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, PhysicalInvent)).name(DbBackend::Sql);
        asPdsCWPhysicalInvent       = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, PdsCWPhysicalInvent)).name(DbBackend::Sql);
        asInventDimId               = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimId)).name(DbBackend::Sql);
        asConfigId                  = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, Configid)).name(DbBackend::Sql);
        asInventBatchId             = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventBatchId)).name(DbBackend::Sql);
        asInventColorId             = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventColorId)).name(DbBackend::Sql);
        asInventLocationId          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventLocationId)).name(DbBackend::Sql);
        asInventSerialId            = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventSerialId)).name(DbBackend::Sql);
        asInventSiteId              = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventSiteId)).name(DbBackend::Sql);
        asInventSizeId              = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventSizeId)).name(DbBackend::Sql);
        asInventStatusId            = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventStatusId)).name(DbBackend::Sql);
        asInventStyleId             = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventStyleId)).name(DbBackend::Sql);
        asInventVersionId           = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventVersionId)).name(DbBackend::Sql);
        asLicensePlateId            = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, LicensePlateId)).name(DbBackend::Sql);
        asWMSLocationId             = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, wMSLocationId)).name(DbBackend::Sql);
        asWMSPalletId               = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, wMSPalletId)).name(DbBackend::Sql);
        asInventGtdId_RU            = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventGtdId_RU)).name(DbBackend::Sql);
        asInventOwnerId_RU          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventOwnerId_RU)).name(DbBackend::Sql);
        asInventProfileId_RU        = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventProfileId_RU)).name(DbBackend::Sql);
        asInventDimension1          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension1)).name(DbBackend::Sql);
        asInventDimension2          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension2)).name(DbBackend::Sql);
        asInventDimension3          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension3)).name(DbBackend::Sql);
        asInventDimension4          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension4)).name(DbBackend::Sql);
        asInventDimension5          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension5)).name(DbBackend::Sql);
        asInventDimension6          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension6)).name(DbBackend::Sql);
        asInventDimension7          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension7)).name(DbBackend::Sql);
        asInventDimension8          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension8)).name(DbBackend::Sql);
        asInventDimension9          = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension9)).name(DbBackend::Sql);
        asInventDimension10         = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension10)).name(DbBackend::Sql);
        asInventDimension11         = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension11)).name(DbBackend::Sql);
        asInventDimension12         = sysDictView.fieldObject(fieldNum(InventSumDeltaCurrentTransaction, InventDimension12)).name(DbBackend::Sql);

        SysDictTable sourceTable    = new SysDictTable(tableNum(InventSumDelta));
        sourceTableName             = sourceTable.name(DbBackend::Sql);
        sourcePartition             = sourceTable.fieldObject(fieldNum(InventSumDelta, Partition)).name(DbBackend::Sql);
        sourceDataAreaId            = sourceTable.fieldObject(fieldNum(InventSumDelta, DataAreaId)).name(DbBackend::Sql);
        sourceRecId                 = sourceTable.fieldObject(fieldNum(InventSumDelta, RecId)).name(DbBackend::Sql);
        sourceItemId                = sourceTable.fieldObject(fieldNum(InventSumDelta, ItemId)).name(DbBackend::Sql);
        sourcePhysicalInvent        = sourceTable.fieldObject(fieldNum(InventSumDelta, PhysicalInvent)).name(DbBackend::Sql);
        sourcePdsCWPhysicalInvent   = sourceTable.fieldObject(fieldNum(InventSumDelta, PdsCWPhysicalInvent)).name(DbBackend::Sql);
        sourceInventDimId           = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimId)).name(DbBackend::Sql);
        sourceSqlTransactionId      = sourceTable.fieldObject(fieldNum(InventSumDelta, SqlTransactionId)).name(DbBackend::Sql);
        sourceConfigId              = sourceTable.fieldObject(fieldNum(InventSumDelta, Configid)).name(DbBackend::Sql);
        sourceInventBatchId         = sourceTable.fieldObject(fieldNum(InventSumDelta, InventBatchId)).name(DbBackend::Sql);
        sourceInventColorId         = sourceTable.fieldObject(fieldNum(InventSumDelta, InventColorId)).name(DbBackend::Sql);
        sourceInventLocationId      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventLocationId)).name(DbBackend::Sql);
        sourceInventSerialId        = sourceTable.fieldObject(fieldNum(InventSumDelta, InventSerialId)).name(DbBackend::Sql);
        sourceInventSiteId          = sourceTable.fieldObject(fieldNum(InventSumDelta, InventSiteId)).name(DbBackend::Sql);
        sourceInventSizeId          = sourceTable.fieldObject(fieldNum(InventSumDelta, InventSizeId)).name(DbBackend::Sql);
        sourceInventStatusId        = sourceTable.fieldObject(fieldNum(InventSumDelta, InventStatusId)).name(DbBackend::Sql);
        sourceInventStyleId         = sourceTable.fieldObject(fieldNum(InventSumDelta, InventStyleId)).name(DbBackend::Sql);
        sourceInventVersionId       = sourceTable.fieldObject(fieldNum(InventSumDelta, InventVersionId)).name(DbBackend::Sql);
        sourceLicensePlateId        = sourceTable.fieldObject(fieldNum(InventSumDelta, LicensePlateId)).name(DbBackend::Sql);
        sourceWMSLocationId         = sourceTable.fieldObject(fieldNum(InventSumDelta, wMSLocationId)).name(DbBackend::Sql);
        sourceWMSPalletId           = sourceTable.fieldObject(fieldNum(InventSumDelta, wMSPalletId)).name(DbBackend::Sql);
        sourceInventGtdId_RU        = sourceTable.fieldObject(fieldNum(InventSumDelta, InventGtdId_RU)).name(DbBackend::Sql);
        sourceInventOwnerId_RU      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventOwnerId_RU)).name(DbBackend::Sql);
        sourceInventProfileId_RU    = sourceTable.fieldObject(fieldNum(InventSumDelta, InventProfileId_RU)).name(DbBackend::Sql);
        sourceInventDimension1      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension1)).name(DbBackend::Sql);
        sourceInventDimension2      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension2)).name(DbBackend::Sql);
        sourceInventDimension3      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension3)).name(DbBackend::Sql);
        sourceInventDimension4      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension4)).name(DbBackend::Sql);
        sourceInventDimension5      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension5)).name(DbBackend::Sql);
        sourceInventDimension6      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension6)).name(DbBackend::Sql);
        sourceInventDimension7      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension7)).name(DbBackend::Sql);
        sourceInventDimension8      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension8)).name(DbBackend::Sql);
        sourceInventDimension9      = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension9)).name(DbBackend::Sql);
        sourceInventDimension10     = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension10)).name(DbBackend::Sql);
        sourceInventDimension11     = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension11)).name(DbBackend::Sql);
        sourceInventDimension12     = sourceTable.fieldObject(fieldNum(InventSumDelta, InventDimension12)).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildView</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void buildView()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            var builder = InventSumDeltaCurrentTransactionBuilder::contruct();
            builder.createSqlObjects();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>