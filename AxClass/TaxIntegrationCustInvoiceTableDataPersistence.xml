<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCustInvoiceTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationCustInvoiceTableDataPersistence</c> class persists data to <c>CustInvoiceTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(CustInvoiceTable))]
public class TaxIntegrationCustInvoiceTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected CustInvoiceTable custInvoiceTable;
    protected CustInvoiceLine custInvoiceLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (this.document.getLocalRecord())
        {
            this.custInvoiceTable = this.document.getLocalRecord();
            custInvoiceTable.selectForUpdate(true);

            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.custInvoiceTable)
                .forUpdate()
                .where(this.custInvoiceTable, fieldStr(CustInvoiceTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.custInvoiceLine)
            .forUpdate()
            .where(this.custInvoiceLine, fieldStr(CustInvoiceLine, ParentRecId))
                .isEqualToLiteral(this.custInvoiceTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.custInvoiceTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.custInvoiceTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.custInvoiceLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.custInvoiceLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.custInvoiceLine.TableId, this.custInvoiceLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, custInvoiceTable);
        TaxIntegrationListCodeUtility::saveListCodeFromDocumentToTable(document, custInvoiceTable);

        this.saveNumberSequenceGroupToTable();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveNumberSequenceGroupToTable</Name>
				<Source><![CDATA[
    private void saveNumberSequenceGroupToTable()
    {
        NumberSequenceGroupId numberSequenceGroupId = document.getNumberSequenceGroupId();

        if (numberSequenceGroupId && custInvoiceTable.numberSequenceGroup != numberSequenceGroupId)
        {
            ttsbegin;
            custInvoiceTable.numberSequenceGroup = document.getNumberSequenceGroupId();
            custInvoiceTable.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();

        custInvoiceLine.TaxGroup = taxGroup;
        custInvoiceLine.TaxItemGroup = taxItemGroup;
        custInvoiceLine.doUpdate();
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>