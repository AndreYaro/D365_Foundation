<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceContract</c> class is used as data contract for the <c>VendInvoice</c>Microsoft
/// SQL Server Reporting Services report.
/// </summary>
[DataContractAttribute,
SysOperationContractProcessingAttribute(classstr(VendInvoiceUIBuilder)),
SysOperationGroupAttribute('Criteria', "@SYS13128", '1')]
public class VendInvoiceContract implements SysOperationInitializable, SysOperationValidatable
{
    Name dimensionFocus;
    FromDate fromDate;
    ToDate toDate;
    OpenPaidBoth invoiceType;
    boolean showDaysPastDue;
    ReportingDate reportingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data contract values.
    /// </summary>
    public void initialize()
    {
        invoiceType = OpenPaidBoth::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionFocus</Name>
				<Source><![CDATA[
    [DataMemberAttribute('DimensionFocus'),
    SysOperationLabelAttribute(literalstr("@SYS327299")),
    SysOperationHelpTextAttribute(literalstr("@SYS328569")),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('1')]
    public Name parmDimensionFocus(Name _dimensionFocus = dimensionFocus)
    {
        dimensionFocus = _dimensionFocus;
        return dimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute('FromDate'),
    SysOperationLabelAttribute(literalstr("@SYS328562")),
    SysOperationHelpTextAttribute(literalstr("@SYS328563")),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('2')]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceType</Name>
				<Source><![CDATA[
    [DataMemberAttribute('InvoiceType'),
    SysOperationLabelAttribute(literalstr("@SYS328566")),
    SysOperationHelpTextAttribute(literalstr("@SYS328567")),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('4')]
    public OpenPaidBoth parmInvoiceType(OpenPaidBoth _invoiceType = invoiceType)
    {
        invoiceType = _invoiceType;
        return invoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute('ToDate'),
    SysOperationLabelAttribute(literalstr("@SYS328564")),
    SysOperationHelpTextAttribute(literalstr("@SYS328565")),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('3')]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDaysPastDue</Name>
				<Source><![CDATA[
    [DataMemberAttribute('ShowDaysPastDue'),
    SysOperationLabelAttribute(literalStr('@AccountsPayable:ShowDaysPastDue')),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('5')]
    public boolean parmShowDaysPastDue(boolean _showDaysPastDue = showDaysPastDue)
    {
        showDaysPastDue = _showDaysPastDue;
        return showDaysPastDue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute('ReportingDate'),
    SysOperationLabelAttribute(literalStr('@AccountsPayable:ReportingDateDaysPastDue')),
    SysOperationGroupMemberAttribute('Criteria'),
    SysOperationDisplayOrderAttribute('6')]
    public ReportingDate parmReportingDate(ReportingDate _reportingDate = reportingDate)
    {
        reportingDate = _reportingDate;
        return reportingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data contract values.
    /// </summary>
    /// <returns>
    /// true if all the contract values are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        // Force date to be included in the restrictions. Without a date
        // range the resulting SQL query will need to do a cartesian product
        // against VendInvoiceJour and VendTrans before restricting down.
        // Even with a relatively small database this will result in filling
        // up tempdb and crashing the report as well as degrading all other
        // queries against the SQL server. With date range included, the
        // date indexes on VendInvoiceJour will be used to generate index
        //seeks and allow a reasonable query.
        if (!fromDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (!toDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (dimensionFocus != "" && !DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimensionFocus, false, false))
        {
            isValid = checkFailed("@SYS329337");
        }

        if (fromDate != dateNull() && toDate != dateNull() && fromDate > toDate)
        {
            isValid = checkFailed("@SYS329338");
        }

        if (reportingDate == dateNull() && showDaysPastDue)
        {
            isValid = checkFailed(strfmt('@sys120095', '@AccountsPayable:ReportingDateDaysPastDue', '@AccountsPayable:ShowDaysPastDue'));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceContract construct()
    {
        return new VendInvoiceContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>