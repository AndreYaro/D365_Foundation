<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOpsIntegrationJournalInstrumentationActivites</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class ProjOpsIntegrationJournalInstrumentationActivites extends ProjOpsInstrumentationBaseActitivies
{
    private const str IntegrationJournal = 'ProjOpsIntegJour.';

    // Post integration journal type & Post journal recid
    private const str PostAllDraft = 'PostAllDraftJournals';
    private const str PostMarked = 'PostMarkedJournals';
    private const str PostAdvancedJournal = 'PostAdvancedJournal';
    private const str CreatePostAdvancedJournalBatch = 'CreatePostAdvancedJournalBatch';
    private const str TransferAdvancedJournalErrorLines = 'TransferAdvancedJournalErrorLines';
    private const str PostAdvancedJournalLine = 'PostAdvancedJournalLine';
    private const str PostAdvancedJournalLineSetStatus = 'PostAdvancedJournalLine.UpdateJournalLineStatusToCorrectState';
    private const str AfterGLAdvancedJournalPosting = 'PostAdvancedJournal.AfterGLAdvancedJournalPosting';

    private SysInstrumentationActivity allDraftActivity;
    private SysInstrumentationActivity markedActivity;
    private SysInstrumentationActivity postAdvancedJournalActivity;
    private SysInstrumentationActivity createPostAdvancedJournalBatchActivity;
    private SysInstrumentationActivity afterGLPostAdvancedJournalPostingActivity;
    
    public static const str ProductReceiptParmStatus = 'Post product receipts to ledger';
    public static const str AdvancedJournalId = 'AdvancedJournalId';
    public static const str AdvancedJournalLineId = 'AdvancedJournalLineId';
    public static const str TransferredAdvancedJournalId = 'TransferredAdvancedJournalId';
    public static const str PostJournalRecId = 'PostJournalRecId';
    public static const str JournalListLength = 'JournalListLength';
    public static const str IsInBatch = 'IsInBatch';
    public static const str NumOfJournalLines = 'NumOfJournalLines';
    public static const str NumOfErrorJournalLines = 'NumOfErrorJournalLines';
    public static const str NumOfJournalLineTasks = 'NumOfJournalLineTasks';
    public static const str Action = 'Action';
    public static const str PostAdvancedJournalInfoMessage = "Posting advanced journal: %1";
    public static const str PostingUsingMultipleBatchTasks = 'Posting using multiple batch tasks';
    public static const str PostingWithoutMultipleBatchTasks = 'Posting without multiple batch task';
    public static const str CurrentStatusOfJournal = 'Current Status of Journal';
    public static const str MarkingHeaderAsError = 'Marking header as error (all lines in error state)';
    public static const str EnhancedPosting = 'EnhancedPosting';
    public static const str MovingJournalInfoToDraft = 'Moving journal lines back to Draft status';
    public static const str TransferredAdvancedJournalLines = 'TransferredAdvancedJournalLines';
    public static const str LinePostingCheckValidationFailed = "Posting advanced journal line %1 for journal header %2 failed validation";
    public static const str LinePostingProcessTaxes = 'Processing taxes for advanced journal line';
    public static const str LineMarkedPosted = 'Processing taxes for advanced journal line';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ProjOpsIntegrationJournalInstrumentationActivites construct(ProjOpsIntegrationLogger _logger)
    {
        ProjOpsIntegrationJournalInstrumentationActivites activities = new ProjOpsIntegrationJournalInstrumentationActivites();
        activities.logger = _logger;
        activities.Prefix = IntegrationJournal;
        return activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllDraftContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for all draft integration journals posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext postAllDraftContext()
    {
        return logger.activityContext(this.postAllDraftActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllDraftActivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity postAllDraftActivity()
    {
        if (!allDraftActivity)
        {
            allDraftActivity = this.activity(PostAllDraft);
        }
        return allDraftActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkedContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for marked integration journals posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext postMarkedContext()
    {
        return logger.activityContext(this.postMarkedActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkedActivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity postMarkedActivity()
    {
        if (!markedActivity)
        {
            markedActivity = this.activity(PostMarked);
        }

        return markedActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds activity context for advanced journal posting operation.
    /// </summary>
    /// <returns>Instrumentation activity context object</returns>
    [Hookable(false)]
    public SysInstrumentationActivityContext postAdvancedJournalContext()
    {
        return logger.activityContext(this.postAdvancedJournalActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferAdvancedJournalErrorLinesContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext transferAdvancedJournalErrorLinesContext()
    {
        return logger.activityContext(this.activity(TransferAdvancedJournalErrorLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalActivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity postAdvancedJournalActivity()
    {
        if (!postAdvancedJournalActivity)
        {
            postAdvancedJournalActivity = this.activity(PostAdvancedJournal);
        }
        return postAdvancedJournalActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostAdvancedJournalBatchContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext createPostAdvancedJournalBatchContext()
    {
        return logger.activityContext(this.activity(CreatePostAdvancedJournalBatch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markHeaderAsError</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext markHeaderAsError()
    {
        return logger.activityContext(this.activity(MarkingHeaderAsError));
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveJournalInfoToDraft</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext moveJournalInfoToDraft()
    {
        return logger.activityContext(this.activity(MovingJournalInfoToDraft));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalLinesContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext postAdvancedJournalLinesContext()
    {
        return logger.activityContext(this.activity(PostAdvancedJournalLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterGLPostAdvancedJournalPostingActivity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivity afterGLPostAdvancedJournalPostingActivity()
    {
        if (!afterGLPostAdvancedJournalPostingActivity)
        {
            afterGLPostAdvancedJournalPostingActivity = this.activity(AfterGLAdvancedJournalPosting);
        }
        return afterGLPostAdvancedJournalPostingActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterGLPostAdvancedJournalPostingContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext afterGLPostAdvancedJournalPostingContext()
    {
        return logger.activityContext(this.afterGLPostAdvancedJournalPostingActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubLedgerTransactionsContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext postSubLedgerTransactionsContext()
    {
        return logger.activityContext(this.afterGLPostAdvancedJournalPostingActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLineStatusToCorrectStateContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysInstrumentationActivityContext updateJournalLineStatusToCorrectStateContext()
    {
        return logger.activityContext(this.activity(PostAdvancedJournalLineSetStatus));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>