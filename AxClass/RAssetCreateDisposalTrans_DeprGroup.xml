<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCreateDisposalTrans_DeprGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetCreateDisposalTrans_DeprGroup extends RAssetCreateInferiorDisposalTrans implements BatchRetryable
{
    DialogField         groupControl;
    DialogField         subGroupControl;
    RAssetTaxGroupId    groupId;
    RAssetSubGroupId    subGroupId;
    RAssetStandards     rAssetStandards;
    DialogRunbase       dialog;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        groupId,
        subGroupId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
        protected boolean checkCanCreate(RAssetId  _rAssetId)
    {
        TransDate            firstAcquisitionDate;

        if (RAssetInferiorDisposalTrans::find(assetInferiorDisposalTable.RecId, _rAssetId).RecId)
            return false;

        if (rAssetStandards.subGroupId(assetInferiorDisposalTable.TransDate) != subGroupId)
            return false;

        if (RAssetSuspend::findSuspend(_rAssetId, assetInferiorDisposalTable.TransDate).RecId)
            return checkFailed(strFmt("@GLS117108", _rAssetId, assetInferiorDisposalTable.TransDate - 1));

        if (rAssetStandards.assetDeprMethod(assetInferiorDisposalTable.TransDate - 1) != RAssetDeprMethod::TaxNonLinearGroup)
            return false;

        firstAcquisitionDate = RAssetTrans::transTypeFirstDate(_rAssetId,
                                                               rAssetStandards.AssetStandardId,
                                                               RAssetTransType::Acquisition,
                                                               false);
        if (firstAcquisitionDate >= assetInferiorDisposalTable.TransDate || ! firstAcquisitionDate)
            return false;

        if (RAssetTrans::transLastDate(_rAssetId,
                                       rAssetStandards.AssetStandardId,
                                       false) > assetInferiorDisposalTable.TransDate)
            throw error("@GLS117106");

        if (rAssetStandards.LastDepDate &&
            rAssetStandards.LastDepDate > assetInferiorDisposalTable.TransDate)
            throw error("@GLS117107");

        if (! rAssetStandards.checkDeprPeriod(assetInferiorDisposalTable.TransDate, true))
            throw error("@GLS101992");

        if (RAssetSumCalc_Trans::newAssetPeriod(_rAssetId,
                                                rAssetStandards.AssetStandardId).netBookValue() <=
            RAssetGroup::find(rAssetStandards.AssetStandardId).DepreciationMin)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        ;

        dialog = super();

        groupControl    = dialog.addFieldValue(extendedTypeStr(RAssetGroupId), groupId);
        subGroupControl = dialog.addFieldValue(extendedTypeStr(RAssetSubGroupId), subGroupId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
        public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_lookup</Name>
				<Source><![CDATA[
        public void fld2_1_lookup()
    {
        Object          control = dialog.formRun().controlCallingMethod();
        Query           query = new Query();
        SysTableLookup  sysTableLookup;
        ;

        sysTableLookup = SysTableLookup::newParameters(tableNum(RAssetSubGroup), control);

        sysTableLookup.addLookupfield(fieldNum(RAssetSubGroup, SubGroupId), true);
        sysTableLookup.addLookupfield(fieldNum(RAssetSubGroup, Name));

        query.addDataSource(tableNum(RAssetSubGroup)).addRange(fieldNum(RAssetSubGroup, GroupId)).value(groupControl.value());
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        groupId    = groupControl.value();
        subGroupId = subGroupControl.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        protected void initValue(RAssetInferiorDisposalTable _assetInferiorDisposalTable)
    {
        ;

        assetInferiorDisposalTable = _assetInferiorDisposalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubGroupId</Name>
				<Source><![CDATA[
        // the method was created for automation test
    public RAssetSubGroupId parmSubGroupId(RAssetSubGroupId _subGroupId = subGroupId)
    {
        subGroupId = _subGroupId;

        return subGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroupId</Name>
				<Source><![CDATA[
        // the method was created for automation test
    public RAssetTaxGroupId parmTaxGroupId(RAssetTaxGroupId _groupId = groupId)
    {
        groupId = _groupId;

        return groupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        Counter              progressTotal;
        Query                query = new Query();
        QueryBuildDataSource qbds;
        #macrolib.AviFiles

        qbds = query.addDataSource(tableNum(RAssetStandards));
        qbds.addRange(fieldNum(RAssetStandards, AssetStandardId)).value(queryValue(RAssetParameters::standardTaxIdDefault()));
        qbds.addRange(fieldNum(RAssetStandards, AssetGroup)).value(queryValue(groupId));
        qbds.addRange(fieldNum(RAssetStandards, DisposalDate)).value(queryValue(dateNull()));
        qbds.addRange(fieldNum(RAssetStandards, Depreciation)).value(queryValue(NoYes::Yes));

        queryRun = new QueryRun(query);

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116748", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        ttsbegin;
        while (queryRun.next())
        {
            rAssetStandards = queryRun.get(tableNum(RAssetStandards));

            this.displayProgress(rAssetStandards.AssetId);

            if (this.checkCanCreate(rAssetStandards.AssetId))
            {
                RAssetInferiorDisposalTrans::createLine(assetInferiorDisposalTable.RecId, rAssetStandards.AssetId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
        public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! groupId)
            ret = checkFailed("@SYS38468");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>