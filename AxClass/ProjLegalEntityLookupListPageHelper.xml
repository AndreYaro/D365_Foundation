<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjLegalEntityLookupListPageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>ProjLegalEntityLookupListPageHelper</c> is used in list pages that display legal entity lookup to filter data across multiple companies.
/// </summary>
public class ProjLegalEntityLookupListPageHelper
{
    SysGlobalCache  cache;
    str             selectedLEs;
    String50        formName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the local <c>cache</c> variable from the global cache and initializes <c>formName</c> variable with the parameter passed.
    /// </summary>
    /// <param name="_formName">
    /// Name of a form.
    /// </param>
    public void new(String50 _formName)
    {
        cache = classfactory.globalCache();
        formName = _formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCrossCompanyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the list page's query as cross company and set the company ranges to selected legal entities.
    /// </summary>
    /// <param name="_query">
    /// List page's query
    /// </param>
    /// <returns>
    /// Query object.
    /// </returns>
    /// <remarks>
    /// This should be executed inside the initializedQuery method of the interaction class..
    /// </remarks>
    public Query setCrossCompanyQuery(Query _query)
    {
        Query           query = _query;
        List            listLE;
        ListEnumerator  listEnum;
        DataAreaId      dataAreaId;

        query.allowCrossCompany(false);

        if (hasGUI())  //---client return true, EP return false
        {
            query.allowCrossCompany(true);

            if (cache.isSet(formName, curUserId()))
            {
                selectedLEs = cache.get(formName, curUserId());
                listLE = strSplit(selectedLEs, ";");
                listEnum = listLE.getEnumerator();

                query.clearCompanyRange();

                while (listEnum.moveNext())
                {
                    dataAreaId = listEnum.current();
                    query.addCompanyRange(dataAreaId);
                }
            }
            else
            {
                query.addCompanyRange(curext());
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterValuesFromControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the company range of a given form data source query and execute the query.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source object of the ListPage.
    /// </param>
    /// <param name="_ctrlCompanyLookup">
    /// The name of the company lookup control of the ListPage.
    /// </param>
    /// <returns>
    /// False if there are no selected company or the first instance of the company does not exists.
    /// </returns>
    /// <remarks>
    /// This is called from both lookup and the modified event of the company lookup control of the ListPage.
    /// </remarks>
    public static boolean setFilterValuesFromControl(FormDataSource _formDataSource, str _ctrlCompanyLookup)
    {
        boolean parseFilterValues = true;
        str companyLookupText = strRTrim(strLTrim(_ctrlCompanyLookup));

        // clear company range if lookup has value of any legal entity
        if (companyLookupText == "@SYS4006013")
        {
            _formDataSource.query().clearCompanyRange();
        }
        else
        {
            List listLE = strSplit(companyLookupText, ProjConstants::multipleSelectLEDelimiter);
            ListEnumerator listEnum = listLE.getEnumerator();

            if (listLE.elements() == 0)
            {
                parseFilterValues = false;
            }
            else
            {
                // get the legal entity extended data type string length size
                Dictionary dictionary = new Dictionary();
                DictType legalEntityType = dictionary.typeObject(dictionary.typeName2Id('SelectableDataArea'));
                int legalEntityTypeStringLength = legalEntityType.stringLen();

                _formDataSource.query().clearCompanyRange();
                // get the list of LEs, verify and then adds to the query range
                while (listEnum.moveNext())
                {
                    str legalEntity = strRTrim(strLTrim(listEnum.current()));
                    if (strlen(legalEntity) <= legalEntityTypeStringLength && CompanyInfo::findDataArea(legalEntity))
                    {
                        _formDataSource.query().addCompanyRange(legalEntity);
                    }
                    else
                    {
                        parseFilterValues = false;
                        break;
                    }
                }
            }
        }

        if (!parseFilterValues)
        {
            _formDataSource.query().clearCompanyRange();
            _formDataSource.query().addCompanyRange(curExt());
        }
        _formDataSource.executeQuery();

        return parseFilterValues;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>