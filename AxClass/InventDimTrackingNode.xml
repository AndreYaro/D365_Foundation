<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimTrackingNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimTrackingNode
{
    InventTransOrigin   inventTransOrigin;
    InventTrans         inventTrans;
    Counter             level;
    boolean             stateExpanded;
    TreeItemIdx         nodeIdx;
    TreeItemIdx         parentNodeIdx;
    ForwardBackward     forwardBackward;
    InventDimParm       inventDimParm;
    NoYes               doDateChecking;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        inventTransOrigin,
        inventTrans,
        level,
        stateExpanded,
        forwardBackward,
        doDateChecking,
        nodeIdx,
        parentNodeIdx,
        inventDimParm
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoDateChecking</Name>
				<Source><![CDATA[
    public NoYes parmDoDateChecking(NoYes _doDateChecking = doDateChecking)
    {
        doDateChecking = _doDateChecking;
        return doDateChecking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForwardBackward</Name>
				<Source><![CDATA[
    public ForwardBackward parmForwardBackward(ForwardBackward _forwardBackward = forwardBackward)
    {
        forwardBackward = _forwardBackward;
        return forwardBackward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm.data();
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    public InventTrans parmInventTrans(InventTrans _inventTrans = inventTrans)
    {
        inventTrans = _inventTrans;
        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOrigin parmInventTransOrigin(InventTransOrigin _inventTransOrigin = inventTransOrigin)
    {
        inventTransOrigin = _inventTransOrigin;
        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Counter parmLevel(Counter _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeIdx</Name>
				<Source><![CDATA[
    public TreeItemIdx parmNodeIdx(TreeItemIdx _nodeIdx = nodeIdx)
    {
        nodeIdx = _nodeIdx;
        return nodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentNodeIdx</Name>
				<Source><![CDATA[
    public TreeItemIdx parmParentNodeIdx(TreeItemIdx _parentNodeIdx = parentNodeIdx)
    {
        parentNodeIdx = _parentNodeIdx;
        return parentNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateExpanded</Name>
				<Source><![CDATA[
    public boolean parmStateExpanded(boolean _stateExpanded = stateExpanded)
    {
        stateExpanded = _stateExpanded;
        return stateExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQty parmQty()
    {
        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIssue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal NoYes isIssue()
    {
        return inventTrans.Qty < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        return strFmt("@SYS28658", level) + '<' + strFmt('%1',inventTrans.RecId) + '>';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimTrackingNode construct()
    {
        return new InventDimTrackingNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static InventDimTrackingNode create(container _packedValues)
    {
        InventDimTrackingNode inventDimTrackingNode = InventDimTrackingNode::construct();

        inventDimTrackingNode.unpack(_packedValues);
        return inventDimTrackingNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventDimTrackingNode newParameters(
        TreeItemIdx         _nodeIdx,
        InventTransOrigin   _inventTransOrigin,
        InventTrans         _inventTrans,
        Counter             _level,
        boolean             _expanded,
        TreeItemIdx         _parentNodeIdx,
        ForwardBackward     _forwardBackward,
        InventDimParm       _inventDimParm,
        boolean             _doDateChecking)
    {
        InventDimTrackingNode inventDimTrackingNode = InventDimTrackingNode::construct();

        inventDimTrackingNode.parmNodeIdx(_nodeIdx);
        inventDimTrackingNode.parmInventTransOrigin(_inventTransOrigin.data());
        inventDimTrackingNode.parmInventTrans(_inventTrans.data());
        inventDimTrackingNode.parmLevel(_level);
        inventDimTrackingNode.parmStateExpanded(_expanded);
        inventDimTrackingNode.parmParentNodeIdx(_parentNodeIdx);
        inventDimTrackingNode.parmForwardBackward(_forwardBackward);
        inventDimTrackingNode.parmInventDimParm(_inventDimParm);
        inventDimTrackingNode.parmDoDateChecking(_doDateChecking);
        return inventDimTrackingNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId getItemId()
    {
        return this.parmInventTrans().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim getInventDim()
    {
        return this.parmInventTrans().inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveInventDimParm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimParm getActiveInventDimParm()
    {
        return this.getInventDim().toDimParm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>