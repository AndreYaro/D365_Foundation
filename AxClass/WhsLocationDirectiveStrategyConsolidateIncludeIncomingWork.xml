<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyConsolidateIncludeIncomingWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyConsolidateIncludeIncomingWork</c> class implements the ConsolidateIncludeIncomingWork strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::ConsolidateIncludeIncomingWork)]
internal class WhsLocationDirectiveStrategyConsolidateIncludeIncomingWork extends WhsLocationDirectiveStrategyConsolidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyPutLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPutLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        boolean ret = super(_actionQuery, _query);

        // Additional condition for an incoming work for a chosen location
        QueryBuildDatasource qbdsWMSLocation = _query.dataSourceTable(tableNum(WMSLocation));
        QueryBuildDatasource qbdsWorkLine = qbdsWMSLocation.addDataSource(tableNum(WHSWorkLine));

        qbdsWorkLine.relations(true);
        qbdsWorkLine.joinMode(JoinMode::ExistsJoin);
        qbdsWorkLine.existsMeanOrExists(true);
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkType)).value(queryValue(WHSWorkType::Put));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(queryRangeConcat(queryValue(WHSWorkStatus::Open), queryValue(WHSWorkStatus::InProcess)));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, ItemId)).value(queryValue(_actionQuery.parmItemId()));

        QueryBuildDataSource qbdsWorkTable = qbdsWorkLine.addDataSource(tableNum(WHSWorkTable));
        qbdsWorkTable.relations(true);
        qbdsWorkTable.joinMode(JoinMode::ExistsJoin);
        qbdsWorkTable.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(WHSWorkTable, InventLocationId), qbdsWMSLocation.name());

        // When splitting consider locations that just got assigned work
        QueryBuildDatasource qbdsTmpWorkLine;

        if (_actionQuery.parmAllowSplit())
        {
            // Additional condition for a temporary incoming work for a chosen location
            qbdsTmpWorkLine = qbdsWMSLocation.addDataSource(tableNum(WHSTmpWorkLine));
            qbdsTmpWorkLine.relations(true);
            qbdsTmpWorkLine.joinMode(JoinMode::ExistsJoin);
            qbdsTmpWorkLine.existsMeanOrExists(true);
            qbdsTmpWorkLine.addRange(fieldNum(WHSTmpWorkLine, WorkType)).value(queryValue(WHSWorkType::Put));
            qbdsTmpWorkLine.addRange(fieldNum(WHSTmpWorkLine, ItemId)).value(queryValue(_actionQuery.parmItemId()));
        }

        InventDim inventDim = InventDim::find(_actionQuery.parmInventDimId());

        if (inventDim.anyProductDimensionSpecified())
        {
            QueryBuildDatasource qbdsInventDim = qbdsWorkLine.addDataSource(tableNum(InventDim));
            QueryBuildDatasource qbdsTmpInventDim;

            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::ExistsJoin);

            if (qbdsTmpWorkLine != null)
            {
                qbdsTmpInventDim = qbdsTmpWorkLine.addDataSource(tableNum(InventDim));
                qbdsTmpInventDim.relations(true);
                qbdsTmpInventDim.joinMode(JoinMode::ExistsJoin);
            }

            Enumerator enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();

            while (enumerator.moveNext())
            {
                FieldId inventDimFieldId = enumerator.current();

                if (inventDim.(inventDimFieldId))
                {
                    qbdsInventDim.addRange(inventDimFieldId).value(queryValue(inventDim.(inventDimFieldId)));

                    if (qbdsTmpInventDim != null)
                    {
                        qbdsTmpInventDim.addRange(inventDimFieldId).value(queryValue(inventDim.(inventDimFieldId)));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>