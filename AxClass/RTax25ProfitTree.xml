<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25ProfitTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25ProfitTree
implements SysPackable
{
    FormTreeControl     tree;
    FormDataSource      tableDS;

    int                 lastId;
    Map                 profitIdxMap;

    boolean             treeVisible;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        treeVisible
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void buildTree()
    {
        RTax25ProfitTable   profitTable;

        tree.deleteAll();

        lastId = 1;
        profitIdxMap = new Map(Types::String, Types::Integer);

        while select RecId from profitTable
            index hint ParentProfitIdx
            where profitTable.ParentProfitRecId == 0
        {
            this.createNode(profitTable.RecId, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void close()
    {
        if (this.saveLastState())
        {
            xSysLastValue::saveLast(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    private TreeItemIdx createNode(
        RefRecId     _parentProfitRecId,
        TreeItemIdx _parentIdx)
    {
        RTax25ProfitTable   profitTable;
        TreeItemIdx         idx;
        int                 childCount;
        FormTreeItem        treeItem;

        select count(RecId) from profitTable
            index hint ParentProfitIdx
            where profitTable.ParentProfitRecId == _parentProfitRecId;

        childCount = any2int(profitTable.RecId);

        profitTable = RTax25ProfitTable::find(_parentProfitRecId);

        idx = tree.addItem(_parentIdx,
                           lastId,
                           new FormTreeItem(this.nodeDescription(profitTable),
                                            childCount ? 0 : 1,
                                            childCount,
                                            profitTable.ProfitId));

        profitIdxMap.insert(profitTable.ProfitId, idx);
        lastId++;

        treeItem = tree.getItem(idx);
        treeItem.stateBold(this.stateBold(profitTable));
        tree.setItem(treeItem);

        while select RecId from profitTable
            index hint ParentProfitIdx
            where profitTable.ParentProfitRecId == _parentProfitRecId
        {
             this.createNode(profitTable.RecId, idx);
        }

        if (this.expand())
        {
            tree.expand(idx, FormTreeExpand::Expand);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expand</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean expand()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTree</Name>
				<Source><![CDATA[
    #define.ImgParent(3069)
    #define.ImgChild (3066)

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initializeTree()
    {
        Imagelist   imagelist;
        Image       image;
        ;

        image     = new Image(#ImgParent);
        imagelist = new Imagelist(32, 32);
        imagelist.add(image);
        imagelist.add(new Image(#ImgChild));

        tree.setImagelist(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    private void initParmDefault()
    {
        treeVisible = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private identifierName lastValueDesignName()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private identifierName lastValueElementName()
    {
        if (tableDS)
        {
            return tableDS.formRun().name();
        }
        else
        {
            return int2str(classidget(this));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private userId lastValueUserId()
    {
        return curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProfitId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TreeItemIdx lookupProfitId(RTax25ProfitId _profitId)
    {
        return profitIdxMap.lookup(_profitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr nodeDescription(RTax25ProfitTable _profitTable)
    {
        return _profitTable.ProfitId + "@SYS35667"+"@GLS102908" + _profitTable.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatasource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void parmDatasource(FormDataSource _tableDS)
    {
        tableDS = _tableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTreeControl</Name>
				<Source><![CDATA[
    private void parmTreeControl(FormTreeControl _formTree)
    {
        tree = _formTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTreeVisible</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmTreeVisible(boolean _treeVisible = treeVisible)
    {
        treeVisible = _treeVisible;

        return treeVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemIdx</Name>
				<Source><![CDATA[
    private void processItemIdx(TreeItemIdx _idx)
    {
        FormTreeItem    item = tree.getItem(_idx);
        profitIdxMap.insert(item.data(), _idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildTreeIdxMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void rebuildTreeIdxMap()
    {
        TreeItemIdx     idx;
        ;
        profitIdxMap = new Map(Types::String, Types::Integer);

        idx = tree.getRoot();
        while (idx > 0)
        {
            this.processItemIdx(idx);
            this.traverseChildren(idx);
            idx = tree.getNextSibling(idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastState</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean saveLastState()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateBold</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean stateBold(RTax25ProfitTable _profitTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseChildren</Name>
				<Source><![CDATA[
    private void traverseChildren(TreeItemIdx _parentIdx)
    {
        TreeItemIdx childIdx;

        childIdx = tree.getChild(_parentIdx);
        while (childIdx > 0)
        {
            this.traverseChildren(childIdx);
            this.processItemIdx(childIdx);
            childIdx = tree.getNextSibling(childIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeChanged</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void treeChanged(FormTreeItem _newItem)
    {
        tableDS.positionToRecord(RTax25ProfitTable::find(_newItem.data()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTree construct(tableId _tableId)
    {
        RTax25ProfitTree ret;

        switch (_tableId)
        {
            case tablenum(RTax25ProfitTable) :
                ret = RTax25ProfitTableTree::construct();
                break;

            case tablenum(DimAttributeRTax25ProfitTable_RU):
                ret = RTax25ProfitDefaultingDimensionTree::construct();
                break;

            default                          :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormTree</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTree newFormTree(FormTreeControl _formTree,
                                               FormDataSource  _tableDS)
    {
        RTax25ProfitTree profitTree = RTax25ProfitTree::construct(_tableDS.cursor().TableId);
        ;
        profitTree.parmTreeControl(_formTree);
        profitTree.parmDatasource(_tableDS);

        profitTree.initializeTree();
        if (profitTree.saveLastState())
        {
            xSysLastValue::getLast(profitTree);
        }
        return profitTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>