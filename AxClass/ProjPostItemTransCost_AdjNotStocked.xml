<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemTransCost_AdjNotStocked</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemTransCost_AdjNotStocked extends ProjPost
{
    ProjItemTrans               projItemTransLocal;
    TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerStatusCostOrig</Name>
				<Source><![CDATA[
    public boolean parmLedgerStatusCostOrig(boolean _useLedgerStatusCostOrig = ledgerStatusCostOrig)
    {
        ledgerStatusCostOrig = _useLedgerStatusCostOrig;
		if (projTrans)
        {
			projTrans.parmLedgerStatusCostOrig(_useLedgerStatusCostOrig);
        }
        return ledgerStatusCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a budget update is required.
    /// </summary>
    /// <returns>
    ///    true if a budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        boolean ret;

        if (projTrans.qty() < 0 && !this.parmTransIdOrig())
        {
            ret = true;
        }
        else if (this.parmTransIdOrig())
        {
            ret = false;
        }
        else
        {
            ret = super();
        }
        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
public CurrencyCode currencyIdCost()
    {
        CurrencyCode                ret;
        PurchLine                   purchLine;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;

        ret = super();
        if (projItemTransLocal.TransactionOrigin == ProjOrigin::PurchaseOrder)
        {
            select firstonly CurrencyCode from purchLine where purchLine.ProjTransId == projItemTransLocal.ProjTransIdRef;

            if (purchLine.CurrencyCode)
            {
                ret = purchLine.CurrencyCode;
            }
        }
        else if (projItemTransLocal.TransactionOrigin == ProjOrigin::VendorInvoice)
        {
            select firstOnly CurrencyCode from vendInvoiceInfoLine
                where !vendInvoiceInfoLine.OrigPurchId
                    exists join vendInvoiceInfoLine_Project
                        where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId  == vendInvoiceInfoLine.RecId
                           && vendInvoiceInfoLine_Project.ProjTransId                  == projItemTransLocal.ProjTransIdRef;

            if (vendInvoiceInfoLine.CurrencyCode)
            {
                ret = vendInvoiceInfoLine.CurrencyCode;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the cost amount for the transaction in transaction currency.
    /// </summary>
    /// <returns>
    ///    The cost amount for the transaction in transaction currency.
    /// </returns>
    /// <remarks>
	///     Here the transCost always represents the transaction cost amount in accounting currency because we record
	///     cost amount for non-stocked item transactions in accounting currency.
	///     This method converts cost amount from accounting currency amount to transaction currency amount which is essential
	///     when posting to <c>GeneralJournalAccountEntry</c> table.
	///</remarks>
    public AmountCur costValueCUR()
    {
        return CurrencyExchangeHelper::curAmount(projTrans.transCost(), this.currencyIdCost(), projTrans.transDate(), 
            UnknownNoYes::Unknown, this.parmExchangeRate(), this.exchRateSecondary(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that will be used by this
    ///    transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension that is used for posting the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                }
                break;

            case ProjLedgerStatus::Operations:
                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                break;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjItemTrans _projItemTrans, TmpProjAdjustmentCreateCost _tmpProjAdjustmentCreateCost)
    {
        projItemTransLocal = _projItemTrans;
        tmpProjAdjustmentCreateCost = _tmpProjAdjustmentCreateCost;
        projTrans = ProjTrans::newProjTransItemTransCostAdj(_projItemTrans, _tmpProjAdjustmentCreateCost);

        super(tmpProjAdjustmentCreateCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with the posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in derived classes.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjStatusAccountItem;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;

            case ProjLedgerStatus::Operations   :
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjItemTransCost       projItemTransCost;
        ProjItemTrans           origProjItemTrans;
        ProjTrans               origProjTrans;

        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        ProjTransStatus getTransStatus()
        {
            ProjTransStatus ret;

            ret = this.parmTransStatus();

            if (!ret)
            {
                ret = ProjTransStatus::Posted;
            }

            return ret;
        }

        //Create ProjItemTransCost record

        projItemTransCost.clear();
        projItemTransCost.InventTransId = projItemTransLocal.InventTransId;
        projItemTransCost.ProjAdjustRefId = projItemTransLocal.ProjAdjustRefId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projItemTransCost.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            projItemTransCost.LedgerTransdate = getLedgerTransdate();
        }
        projItemTransCost.TransStatus = getTransStatus();
        if (this.parmTransStatus() == ProjTransStatus::Adjusted && (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet))
        {
			if (this.parmLedgerStatusCostOrig())
            {
                projItemTransCost.LedgerStatusCost = this.parmLedgerStatusCost();
            }
			else
            {
				projItemTransCost.LedgerStatusCost   = ProjLedgerStatus::None;
            }
        }
        else
        {
            if (projTrans.projLineProperty().ToBeCapitalize)
            {
                projItemTransCost.LedgerStatusCost   = this.parmLedgerStatusCost();
            }
            else if (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet)
            {
                projItemTransCost.LedgerStatusCost   = ProjLedgerStatus::Operations;
            }
            else
            {
                projItemTransCost.LedgerStatusCost   = this.parmLedgerStatusCost();
            }
        }
        projItemTransCost.FundingSource = tmpProjAdjustmentCreateCost.FundingSource;
        projItemTransCost.LineAmount = tmpProjAdjustmentCreateCost.LineAmount;

        origProjItemTrans = ProjItemTrans::find(projItemTransLocal.AdjRefTransId);
        origProjTrans = ProjTrans::newProjItemTrans(origProjItemTrans);
        if (origProjTrans.transCost())
        {
            projItemTransCost.AmountMST = tmpProjAdjustmentCreateCost.LineAmount / origProjTrans.transCost() * origProjTrans.transCostMST();
        }
        else
        {
            projItemTransCost.AmountMST = tmpProjAdjustmentCreateCost.LineAmount;
        }

        projItemTransCost.ProjId = projItemTransLocal.ProjId;
        projItemTransCost.ItemType = ProjItemTrans::transactionOriginToItemType(projItemTransLocal.TransactionOrigin);
        projItemTransCost.CostType = ProjItemTransCostType::Cost;
        projItemTransCost.Voucher = ledgerVoucher.lastVoucher();
        projItemTransCost.DefaultDimension = tmpProjAdjustmentCreateCost.DefaultDimension;
        projItemTransCost.insert();

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projItemTransLocal.ProjTransId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>