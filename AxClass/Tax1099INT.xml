<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099INT</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tax1099INT extends Tax1099Base implements Tax1099IForm
{
    const Tax1099Box I1 = 'INT-1';
    const Tax1099Box I2 = 'INT-2';
    const Tax1099Box I3 = 'INT-3';
    const Tax1099Box I4 = 'INT-4';
    const Tax1099Box I5 = 'INT-5';
    const Tax1099Box I6 = 'INT-6';
    const Tax1099Box I8 = 'INT-8';
    const Tax1099Box I9 = 'INT-9';
    const Tax1099Box I10 = 'INT-10';
    const Tax1099Box I11 = 'INT-11';
    const Tax1099Box I12 = 'INT-12';
    const Tax1099Box I13 = 'INT-13';
    const Tax1099Box I17 = 'INT-17';
    const str ReturnType = '6';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount1), sum(Amount2), sum(Amount3), sum(Amount4), sum(Amount5), sum(Amount6),
            sum(Amount8), sum(Amount9), sum(AmountA), sum(AmountB), sum(AmountD), sum(AmountE)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099INT;

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // Interest income not included in Amount Code 3
        }

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // Early withdrawal penalty
        }

        if (_localIRSPayerRec.Amount3 > 0)
        {
            tmpAmountCodes += Three; // Interest on U.S. Savings Bonds and Treasure obligations
        }

        if (_localIRSPayerRec.Amount4 > 0)
        {
            tmpAmountCodes += Four; // Federal income tax withheld (backup withholding)
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // Investment expenses
        }

        if (_localIRSPayerRec.Amount6 > 0)
        {
            tmpAmountCodes += Six; // Foreign tax paid
        }

        if (_localIRSPayerRec.Amount8 > 0)
        {
            tmpAmountCodes += Eight; // Tax exempt interest
        }

        if (_localIRSPayerRec.Amount9 > 0)
        {
            tmpAmountCodes += Nine; // Specific private activity bond interest
        }

        if (_localIRSPayerRec.AmountA > 0)
        {
            tmpAmountCodes += A; //Market Discount
        }

        if (_localIRSPayerRec.AmountB > 0)
        {
            tmpAmountCodes += B; //Bond Premium
        }

        if (_localIRSPayerRec.AmountD > 0)
        {
            tmpAmountCodes += D; // Bond premium on tax-exempt bond
        }

        if (_localIRSPayerRec.AmountE > 0)
        {
            tmpAmountCodes += E; // Bond premium on treasury obligations
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099INT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        // Second TIN Notice. Field Position: 544
        this.strInsert(_localIRSPayerRec.SecondTIN, 544);

        // Blank. Field Position: 545-546

        // Foreign Country or US Possession. Field Position: 547-586
        this.strInsert(subStr(_localIRSPayerRec.ForeignCountryRegionName, 1, 40), 547);

        // CUSIP Number. Field Position 587-599
        this.strInsert(strRFix(_localIRSPayerRec.CUSIPDetails, 13), 587);

        // FATCA Filing requirement. Field Position: 600
        if (_localIRSPayerRec.FATCAFilingRequirement == NoYes::Yes)
        {
            this.strInsert('1', 600);
        }

        // Blank. Field Position: 601-662
        // Special Data Entries. Field Position: 663-722 - Used by the different states

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Combined Federal / State Code. Field Position: 747-748
        this.strInsert(_localIRSPayerRec.CombinedFedStateCode, 747);

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        Tax1099StateSummary tax1099StateSummary;
        VendSettlementTax1099 vendSettlementTax1099;
        VendStateTaxID vendStateTaxID;
        CompanyInfo companyInfo = CompanyInfo::find();
        Tax1099IRSPayerRec localTax1099IRSPayerRec;
        int stateCounter;

        // Set output table Federal amounts to actual values
        void showFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
            _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
            _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3;
            _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
            _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
            _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
            _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
            _tax1099IRSPayerRecTmp.Amount9 = _tax1099IRSPayerRec.Amount9;
            _tax1099IRSPayerRecTmp.Amount8 = _tax1099IRSPayerRec.Amount8 + _tax1099IRSPayerRec.Amount9;
            _tax1099IRSPayerRecTmp.AmountA = _tax1099IRSPayerRec.AmountA;
            _tax1099IRSPayerRecTmp.AmountB = _tax1099IRSPayerRec.AmountB;
            _tax1099IRSPayerRecTmp.AmountD = _tax1099IRSPayerRec.AmountD;
            _tax1099IRSPayerRecTmp.AmountE = _tax1099IRSPayerRec.AmountE;
        }

        // Set output table Federal amounts to 0
        void hideFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = 0.0;
            _tax1099IRSPayerRecTmp.Amount2 = 0.0;
            _tax1099IRSPayerRecTmp.Amount3 = 0.0;
            _tax1099IRSPayerRecTmp.Amount4 = 0.0;
            _tax1099IRSPayerRecTmp.Amount5 = 0.0;
            _tax1099IRSPayerRecTmp.Amount6 = 0.0;
            _tax1099IRSPayerRecTmp.Amount7 = 0.0;
            _tax1099IRSPayerRecTmp.Amount9 = 0.0;
            _tax1099IRSPayerRecTmp.Amount8 = 0.0;
            _tax1099IRSPayerRecTmp.AmountA = 0.0;
            _tax1099IRSPayerRecTmp.AmountB = 0.0;
            _tax1099IRSPayerRecTmp.AmountD = 0.0;
            _tax1099IRSPayerRecTmp.AmountE = 0.0;
        }

        // Set output table values that are always needed
        void showDefaults()
        {
            _tax1099IRSPayerRecTmp.CompanyName = companyInfo.name();
            _tax1099IRSPayerRecTmp.CompanyAddress = companyInfo.postalAddress().Address;
            _tax1099IRSPayerRecTmp.CompanyPhone = companyInfo.phone();
            _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = companyInfo.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
            _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
            _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
            _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
            _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
            _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
            _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
            _tax1099IRSPayerRecTmp.FATCAFilingRequirementInd = _tax1099IRSPayerRec.FATCAFilingRequirementInd;
        }

        // Don't insert into output table if we have no values
        void doInsert()
        {
            if (_tax1099IRSPayerRecTmp.Amount1 + _tax1099IRSPayerRecTmp.Amount2 + _tax1099IRSPayerRecTmp.Amount3 +
                _tax1099IRSPayerRecTmp.Amount4 + _tax1099IRSPayerRecTmp.Amount5 + _tax1099IRSPayerRecTmp.Amount6 +
                _tax1099IRSPayerRecTmp.Amount7 + _tax1099IRSPayerRecTmp.Amount8 + _tax1099IRSPayerRecTmp.Amount9 +
                _tax1099IRSPayerRecTmp.AmountA + _tax1099IRSPayerRecTmp.AmountB + _tax1099IRSPayerRecTmp.AmountD +
                _tax1099IRSPayerRecTmp.AmountE +
                _tax1099IRSPayerRecTmp.StateTaxWithheld1 + _tax1099IRSPayerRecTmp.StateTaxWithheld2 > 0)
            {
                _tax1099IRSPayerRecTmp.insert();
            }
        }

        ttsbegin;
        // Loop through our temporary table and fill in the Tax1099StateSummary data
        tax1099StateSummary.setTmp();
        select forupdate tax1099StateSummary;

        delete_from localtax1099IRSPayerRec
            where localTax1099IRSPayerRec.Reportable == NoYes::No;

        if (_onlyStateToPrint == '')
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where vendStateTaxID.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099INTStateIncomeTax(vendStateTaxID.VendAccount, vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        else
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where _tax1099IRSPayerRec.VendAccount == vendStateTaxID.VendAccount &&
                    vendStateTaxID.StateId == _onlyStateToPrint
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099INTStateIncomeTax(vendStateTaxID.VendAccount, vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        ttscommit;

        // Build records using state information if needed
        while select _tax1099IRSPayerRec
        {
            _tax1099IRSPayerRecTmp.clear();
            showDefaults();

            stateCounter = 0;

            while select tax1099StateSummary
                where tax1099StateSummary.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                // Even case checks onlyStateToPrint, figures if we need federal info on the form, adds first state info
                if (stateCounter mod 2 == 0)
                {
                    if (_onlyStateToPrint != '' || stateCounter > 1)
                    {
                        hideFederal();
                    }
                    else
                    {
                        showFederal();
                    }

                    _tax1099IRSPayerRecTmp.StateTaxWithheld1 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId1 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId = tax1099StateSummary.StateId;
                }
                // Odd case adds second state, does insert, and sets up for next pass
                else
                {
                    _tax1099IRSPayerRecTmp.StateTaxWithheld2 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId2 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId2 = tax1099StateSummary.StateId;

                    doInsert();
                    _tax1099IRSPayerRecTmp.clear();
                    showDefaults();
                }

                stateCounter++;
            }

            // No state information means we just do federal
            if (stateCounter == 0 && _onlyStateToPrint == '')
            {
                showFederal();
                doInsert();
            }
            // Had state records, ended on an even, do the final insert
            else if (stateCounter mod 2 == 1)
            {
                doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        switch (Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box)
        {
            case I1:
                _tax1099IRSPayerRec.Amount1 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I2:
                _tax1099IRSPayerRec.Amount2 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I3:
                _tax1099IRSPayerRec.Amount3 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I4:
                _tax1099IRSPayerRec.Amount4 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I5:
                _tax1099IRSPayerRec.Amount5 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I6:
                _tax1099IRSPayerRec.Amount6 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I8:
                _tax1099IRSPayerRec.Amount8 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I9:
                _tax1099IRSPayerRec.Amount9 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I10:
                _tax1099IRSPayerRec.AmountA += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I11:
                _tax1099IRSPayerRec.AmountB += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I12:
                _tax1099IRSPayerRec.AmountE += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I13:
                _tax1099IRSPayerRec.AmountD += _localTax1099Summary.SettleTax1099Amount;
                break;

            case I17:
                break; // This is the state tax withheld value and is sourced elsewhere

            default:
                _localTax1099Summary.IRSReportable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I1, 'Interest income not included in box 3', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I2, 'Early withdrawal penalty', 0.01, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I3, 'Interest on U.S. Savings Bonds', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I4, 'Federal income tax withheld', 0.01, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I5, 'Investment expenses', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I6, 'Foreign tax paid', 0.01, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I8, 'Tax exempt interest', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I9, 'Specific private activity bond interest', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I10, 'Market Discount', 10, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I11, 'Bond Premium', 0.01, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I12, 'Bond premium on treasury obligations', 0.01, Tax1099Type::F1099INT, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I13, 'Bond premium on tax-exempt bond', 0.01, Tax1099Type::F1099INT, true);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, I17, 'State tax withheld', 0.01, Tax1099Type::F1099INT, _forceUpdate);

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        switch (_tax1099Fields.Tax1099Box )
        {
            case I1:
                _localIRSPayerRec.Amount1 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I2:
                _localIRSPayerRec.Amount2 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I3:
                _localIRSPayerRec.Amount3 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I4:
                _localIRSPayerRec.Amount4 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I5:
                _localIRSPayerRec.Amount5 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I6:
                _localIRSPayerRec.Amount6 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I8:
                _localIRSPayerRec.Amount8 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I9:
                _localIRSPayerRec.Amount8 += _tax1099Summary.SettleTax1099Amount;
                _localIRSPayerRec.Amount9 += _tax1099Summary.SettleTax1099Amount;
                break;

            case I10:
                _localIRSPayerRec.AmountA += _tax1099Summary.SettleTax1099Amount;
                break;

            case I11:
                _localIRSPayerRec.AmountB += _tax1099Summary.SettleTax1099Amount;
                break;

            case I12:
                _localIRSPayerRec.AmountE += _tax1099Summary.SettleTax1099Amount;
                break;

            case I13:
                _localIRSPayerRec.AmountD += _tax1099Summary.SettleTax1099Amount;
                break;

            case I17: // state tax withheld
                _localIRSPayerRec.StateTaxWitheld += _tax1099Summary.SettleTax1099Amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestIncome</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier interestIncome()
    {
        return Tax1099FieldIdentifier::construct(I1, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>earlyWithdrawlPenalty</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier earlyWithdrawlPenalty()
    {
        return Tax1099FieldIdentifier::construct(I2, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestUSBondsAndObligations</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier interestUSBondsAndObligations()
    {
        return Tax1099FieldIdentifier::construct(I3, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(I4, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>investmentExpenses</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier investmentExpenses()
    {
        return Tax1099FieldIdentifier::construct(I5, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignTaxPaid</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier foreignTaxPaid()
    {
        return Tax1099FieldIdentifier::construct(I6, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptInterest</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier taxExemptInterest()
    {
        return Tax1099FieldIdentifier::construct(I8, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>privateBondInterest</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier privateBondInterest()
    {
        return Tax1099FieldIdentifier::construct(I9, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marketDiscount</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier marketDiscount()
    {
        return Tax1099FieldIdentifier::construct(I10, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondPremium</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier bondPremium()
    {
        return Tax1099FieldIdentifier::construct(I11, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondPremiumOnTreasuryObligations</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier bondPremiumOnTreasuryObligations()
    {
        return Tax1099FieldIdentifier::construct(I12, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondPremiumOnTaxExemptBond</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier bondPremiumOnTaxExemptBond()
    {
        return Tax1099FieldIdentifier::construct(I13, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier stateTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(I17, Tax1099Type::F1099INT);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>