<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOM_BOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the form control handler for the <c>BOMVersion</c>
/// Classes <c>PmfFormCtrl_BOMTable_BOMVersion</c> and
/// <c>PmfFormCtrl_BOMConsistsOf_BOMVersion</c> are derived from this class
/// </summary>
class PmfFormCtrl_BOM_BOMVersion
    extends PmfFormCtrl
{
    BOM          bom;
    InventTable  bomVersionInventTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the record buffer as a typed <c>BOMVersion</c> record
    /// </summary>
    /// <returns>
    /// The <c>bomVersion</c> record
    /// </returns>
    public BOMVersion bomVersion()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BOM</c> record can be modified.
    /// </summary>
    /// <returns>
    /// true if the record can be modified; otherwise false.
    /// </returns>
    public boolean canModifyBOM()
    {
        BOMVersion bomVersion = this.bomVersion();

        return  !(pmfTableHasChanged(bomVersion)
                  && bomVersion.inventTable().isFormulaAllowed()
                  && Global::isConfigurationkeyEnabled(configurationkeynum(SIG))
                  && ((bomVersion.isApproved() && SIGProcSetup::classIdEnabled(classnum(SIGBOMVersionApproveProcedure)))
                   || (bomVersion.Active && SIGProcSetup::classIdEnabled(classnum(SIGBOMVersionActivateProcedure))))
                  && !BOMParameters::find().AllowSIGFormulaVersionEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of a recored on the forms datasource.
    /// </summary>
    /// <returns>Result of validation.
    /// true if record can be written; otherwise false.
    ///</returns>
    public boolean dataSourceValidateWrite()
    {
        boolean ret;

        ret = super();

        if (!this.canModifyBOM())
        {
            ret = checkFailed("@PRO2418");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unapproves the formula if the <c>BOMVersion</c> record has changed.
    /// </summary>
    public void dataSourceWritePost()
    {
        BOMVersion bomVersion = this.bomVersion();

        super();

        if (bomVersionInventTable.isFormulaAllowed())
        {
            PmfFormulaCoBy::setInventSite(bomVersion);
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the <c>BOMVersion</c> datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BOMVersion, PmfBatchSize):
                this.modifiedFormulaSize(true);
                break;
            case fieldnum(BOMVersion, PdsCWSize):
                this.modifiedFormulaSize(true);
                break;
            case fieldnum(BOMVersion, PmfFormulaVersionCalculation):
                this.modifiedPmfFormulaVersionCalculation();
                break;
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMVersionApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the BOM version is approved.
    /// </summary>
    /// <returns>
    /// True if the BOM version is approved; otherwise false.
    /// </returns>
    public boolean isBOMVersionApproved()
    {
        return this.bomVersion().isApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
        public boolean isFormulaEnabled()
    {
         throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFormulaSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and modifies the formula size for a <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_updateDS">
    /// A Boolean value that specifies whether to update the data source with a modified value.
    /// </param>
    public void modifiedFormulaSize(boolean _updateDS = true)
    {
        BOM             localBOM;
        BOMVersion      bomVerOrig, bomVersion = this.bomVersion();
        PmfFormulaCoBy  coBy;

        if (this.canModifyBOM() && bomVersion.RecId)
        {
            ttsbegin;

            bomVerOrig = bomVersion.orig();

            if (bomVersion.PmfBatchSize != bomVerOrig.PmfBatchSize)
            {
                while select forupdate localBOM
                    where localBOM.bomId == bomVersion.bomId
                {
                    this.initializeBOMLineFromBOMVersion(localBOM, bomVersion, bomVerOrig);
                    localBOM.update();
                }
                while select forupdate coBy
                    where coBy.bomId == bomVersion.bomId
                {
                    coBy.CoByQtySerie = bomVersion.PmfBatchSize;
                    coBy.update();
                }
            }

            ttscommit;

            if (_updateDS)
            {
                this.parmFormDataSource().write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBOMLineFromBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes BOM line from specified BOM version.
    /// </summary>
    /// <param name = "_bomLine">The BOM line to be initialized.</param>
    /// <param name = "_bomVersion">The current BOM version.</param>
    /// <param name = "_originalBOMVersion">The original BOM version.</param>
    protected void initializeBOMLineFromBOMVersion(BOM _bomLine, BOMVersion _bomVersion, BOMVersion _originalBOMVersion)
    {
        _bomLine.bomQtySerie = _bomVersion.PmfBatchSize;

        if (_bomLine.PmfPctEnable)
        {
            _bomLine.bomQty  = _bomLine.pmfBOMPctQty(_bomVersion);
        }
        else if (_bomLine.PmfScalable)
        {
            _bomLine.bomQty  = _bomLine.bomQty * (_bomVersion.PmfBatchSize / _originalBOMVersion.PmfBatchSize);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedPmfFormulaVersionCalculation</Name>
				<Source><![CDATA[
        public void modifiedPmfFormulaVersionCalculation()
    {
        BOMVersion thisBOMVersion = this.bomVersion();
        BOM        formulaLines;

        select recId from formulaLines
               where formulaLines.BOMId == thisBOMVersion.BOMId
               &&    formulaLines.PmfScalable == true;

        if (formulaLines.RecId !=0)
        {
            if (Box::okCancel("@PDS1521", DialogButton::Cancel) == DialogButton::Cancel)
            {
                thisBOMVersion.PmfFormulaVersionCalculation = thisBOMVersion.orig().PmfFormulaVersionCalculation;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTable</c> record from the active <c>BOMVersion</c> record
    /// </summary>
    /// <param name="_inventTable">
    /// Cache's the <c>InventTable</c> record for the active <c>BOMVersion</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventTable</c> record
    /// </returns>
    public InventTable parmInventTable(InventTable _inventTable = bomVersionInventTable)
    {
        if (!prmisdefault(_inventTable))
        {
            bomVersionInventTable = _inventTable;
        }

        return bomVersionInventTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>