<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerTaxRegionForm_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module form extension events for the <c>PayrollWorkerTaxRegion</c> form.
/// </summary>
[ExtensionOf(formStr(PayrollWorkerTaxRegion))]
public final class PayrollWorkerTaxRegionForm_AppSuite_Extension
{
    private boolean doSchoolMunicipalTaxCodeRefresh;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        doSchoolMunicipalTaxCodeRefresh = false;

        // Override the menu item button to allow for the dataset buffer to be passed
        WorkerTaxCodes.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked),
                                                identifierStr('workerTaxCodesMenuItem_Clicked'),
                                                this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkerTaxCodes</Name>
				<Source><![CDATA[
    public void refreshWorkerTaxCodes()
    {
        if (newWorkerTaxRegion || doSchoolMunicipalTaxCodeRefresh)
        {
            PayrollTaxEngineUtil::refreshWorkerTaxCodes(payrollWorkerTaxRegion, newWorkerTaxRegion);
            doSchoolMunicipalTaxCodeRefresh = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePoliticalSubDivision</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the <c>PayrollWorkerTaxRegionForSymmetry</c> table is associated with PA
    /// and the associated <c>PayrollWorkerTaxRegion</c> table has a school district ID
    /// and municipality ID, then ask the tax engine for the associated
    /// political sub-division and store it into the table.
    /// If the above conditions are not true, or the tax engine fails to find a political
    /// sub-division, clear the field.
    /// </summary>
    public void updatePoliticalSubDivision()
    {
        str politicalSubDivisionId;

        if (payrollWorkerTaxRegionForSymmetry.MunicipalityId && payrollWorkerTaxRegionForSymmetry.SchoolDistrictId)
        {
            PayrollTaxRegionForSymmetry taxRegionForSymmetry = PayrollTaxRegionForSymmetry::findByTaxRegion(payrollWorkerTaxRegion.TaxRegion);
            str stateCode = PayrollTaxEngineUtil::getTaxCodeSegment(taxRegionForSymmetry.gnis, PayrollTaxCodeSegment::State);

            if (str2int(stateCode) == PayrollUSState::PA)
            {
                str countyCode = PayrollTaxEngineUtil::getTaxCodeSegment(taxRegionForSymmetry.gnis, PayrollTaxCodeSegment::County);
                politicalSubDivisionId = PayrollTaxEngineUtil::getPoliticalSubDivision(stateCode, countyCode, payrollWorkerTaxRegionForSymmetry.MunicipalityId, payrollWorkerTaxRegionForSymmetry.SchoolDistrictId, false);

                if (!politicalSubDivisionId)
                {
                    warning("@SYS4010182");
                }
            }
        }

        if (payrollWorkerTaxRegion.PoliticalSubDivisionId != politicalSubDivisionId)
        {
            payrollWorkerTaxRegion.PoliticalSubDivisionId = politicalSubDivisionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerTaxRegion_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegion form data source OnWritten event handler for PayrollWorkerTaxRegion form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollWorkerTaxRegion data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PayrollWorkerTaxRegion, PayrollWorkerTaxRegion), FormDataSourceEventType::Written)]
    public void PayrollWorkerTaxRegion_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (newWorkerTaxRegion)
        {
            this.refreshWorkerTaxCodes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegion_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegion TaxRegion form data object OnModified event handler for the PayrollWorkerTaxRegion form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(PayrollWorkerTaxRegion, PayrollWorkerTaxRegion, TaxRegion), FormDataFieldEventType::Modified)]
    public void TaxRegion_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        payrollWorkerTaxRegionForSymmetry.MunicipalityId = '';
        payrollWorkerTaxRegionForSymmetry.SchoolDistrictId = '';

        schoolDistrictId.update();
        municipalityId.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerTaxRegionForSymmetry_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegionForSymmetry form data source Written event handler for PayrollWorkerTaxRegion form extension data source.
    /// </summary>
    /// <param name="_sender">The PayrollWorkerTaxRegionForSymmetry data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PayrollWorkerTaxRegion, PayrollWorkerTaxRegionForSymmetry), FormDataSourceEventType::Written)]
    public void PayrollWorkerTaxRegionForSymmetry_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (doSchoolMunicipalTaxCodeRefresh)
        {
            this.refreshWorkerTaxCodes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MunicipalityId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegionForSymmetry MunicipalityId form data object OnModified event handler for the PayrollWorkerTaxRegion form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(PayrollWorkerTaxRegion, PayrollWorkerTaxRegionForSymmetry, MunicipalityId), FormDataFieldEventType::Modified)]
    public void MunicipalityId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        if (payrollWorkerTaxRegionForSymmetry.MunicipalityId)
        {
            doSchoolMunicipalTaxCodeRefresh = true;
            this.updatePoliticalSubDivision();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MunicipalityId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegion MunicipalityId form data object OnLookup event handler for the PayrollWorkerTaxRegion form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(PayrollWorkerTaxRegion, MunicipalityId), FormControlEventType::Lookup)]
    public void MunicipalityId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        if (payrollTaxRegion.RecId != payrollWorkerTaxRegion.TaxRegion)
        {
            payrollTaxRegion_ds.executeQuery();
        }

        LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findByLocation(payrollTaxRegion.LogisticsLocation);
        LogisticsAddressCounty logisticsAddressCounty = LogisticsAddressCounty::findCountyCode(postalAddress.CountryRegionId, postalAddress.County);

        FormRun formRun = PayrollTaxEngineUtil::setupMunicipalitiesLookup(postalAddress.ZipCode, postalAddress.State, postalAddress.City, logisticsAddressCounty.Name);

        FormStringControl formStringControl = _sender as FormStringControl;
        formStringControl.performFormLookup(formRun);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SchoolDistrictId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegionForSymmetry SchoolDistrictId form data object OnModified event handler for the PayrollWorkerTaxRegion form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(PayrollWorkerTaxRegion, PayrollWorkerTaxRegionForSymmetry, SchoolDistrictId), FormDataFieldEventType::Modified)]
    public void SchoolDistrictId_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        if (payrollWorkerTaxRegionForSymmetry.SchoolDistrictId)
        {
            doSchoolMunicipalTaxCodeRefresh = true;
            this.updatePoliticalSubDivision();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SchoolDistrictId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerTaxRegion SchoolDistrictId form data object OnLookup event handler for the PayrollWorkerTaxRegion form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(PayrollWorkerTaxRegion, SchoolDistrictId), FormControlEventType::Lookup)]
    public void SchoolDistrictId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        if (payrollTaxRegion.RecId != payrollWorkerTaxRegion.TaxRegion)
        {
            payrollTaxRegion_ds.executeQuery();
        }

        LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findByLocation(payrollTaxRegion.LogisticsLocation);
        LogisticsAddressCounty logisticsAddressCounty = LogisticsAddressCounty::findCountyCode(postalAddress.CountryRegionId, postalAddress.County);

        FormRun formRun = PayrollTaxEngineUtil::setupSchoolDistrictsLookup(postalAddress.ZipCode, postalAddress.State, postalAddress.City, logisticsAddressCounty.Name);

        FormStringControl formStringControl = _sender as FormStringControl;
        formStringControl.performFormLookup(formRun);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerTaxCodesMenuItem_Clicked</Name>
				<Source><![CDATA[
    public void workerTaxCodesMenuItem_Clicked(FormFunctionButtonControl _control)
    {
        Args args = new Args();
        args.caller(this);
        args.record(hcmWorker);

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(PayrollWorkerTaxCode), MenuItemType::Display);

        FormRun formRun = menuFunction.create(args);
        formRun.run();

        formRun.wait();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>