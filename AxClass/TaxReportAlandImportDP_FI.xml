<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportAlandImportDP_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportAlandImportDP_FI</c> class provides methods to fetch the data that is used by the
///    <c>TaxReportAIAndImport_FI</c> report.
/// </summary>
/// <remarks>
///    This class contains the declaration of the global variables to use in this class.
/// </remarks>
[
    SRSReportQueryAttribute    (querystr(TaxReportAlandImport_FI)),
    SRSReportParameterAttribute(classstr(TaxReportAlandImportContract_FI))
    ]
    public class TaxReportAlandImportDP_FI extends SrsReportDataProviderPreProcessTempDB
{
    private const str FeatureReference = 'FI-00010';

    FromDate                        fromDate;
    int                             declarationNumber;
    boolean                         isSummary;
    str                             sectionTitle;
    TaxImportDirectionAland_FI      taxDirection;
    TaxImportAmountBeforeTax_FI     summaryBeforeTax;
    TaxImportTaxableAmount_FI       summaryTaxableAmount;
    TaxImportTaxAmount_FI           summaryTaxAmount;
    TaxImportPercent2Decimals_FI    currentTaxPercent;
    TaxImportTaxAmount_FI           totalTaxAmount;
    TaxImportTaxAmount_FI           customerTaxAmount;
    PaymReference                   paymentReference;
    container                       sumCustTaxPct;
    container                       sumCustAmtBeforeTax;
    container                       sumCustTaxableAmt;
    container                       sumCustTaxAmt;
    container                       sumTotalTaxPct;
    container                       sumTotalAmtBeforeTax;
    container                       sumTotalTaxableAmt;
    container                       sumTotalTaxAmt;
    QueryRun                        queryRun;
    CustTable                       custTable;
    TaxReportAlandImportTmp_FI      taxReportAlandImportTmp_FI;
    Name                            companyName;
    CompanyRegNum                   companyRegNum;
    str                             customsCustomerNumLE;
    TaxTmpImportAland_FI            taxImportTmp;

    boolean hasCustTableAccess      = hasTableAccess(tableNum(CustTable), AccessType::View);
    boolean hasCompanyInfoAccess    = hasTableAccess(tableNum(CompanyInfo), AccessType::View);

    const str EmptyString                       = '';
    const int Line1                             = 1;
    const int Line2                             = 2;
    const int MaxPercent                        = 101;
    const int MinPercent                        = -1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Address using a <c>CustTable</c> class method.
    /// </summary>
    /// <param name="_line">
    /// The specified required line number.
    /// </param>
    /// <returns>
    /// The required line from the Address.
    /// </returns>
    public str address(int _line)
    {
        str ret;

        ret = EmptyString;

        if (hasCustTableAccess)
        {
            ret = this.getAddressLine(custTable.postalAddress().Address, _line);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals for tax values before tax and after taxation.
    /// </summary>
    /// <param name="_percent">
    /// A percent value from the <c>TaxTmpImportAland_FI</c> table.
    /// </param>
    /// <param name="_amtBefore">
    /// The Amount value from the <c>TaxTmpImportAland_FI</c> table.
    /// </param>
    /// <param name="_taxable">
    /// The Amount from the <c>TaxTmpImportAland_FI</c> table.
    /// </param>
    /// <param name="_taxAmt">
    /// The TaxAmount value from <c>TaxTmpImportAland_FI</c> table.
    /// </param>
    /// <param name="_addToTotalSummary">
    /// A Boolean value that indicates whether to calculate summary total values.
    /// </param>
    private void addToTotals(TaxImportPercent2Decimals_FI _percent, AmountCur _amtBefore, AmountCur _taxable, TaxAmountCur _taxAmt, boolean _addToTotalSummary)
    {
        int position;

        position = confind(sumCustTaxPct, _percent);

        if (position)
        {
            sumCustAmtBeforeTax = conpoke(sumCustAmtBeforeTax, position, conpeek(sumCustAmtBeforeTax, position) + _amtBefore);
            sumCustTaxableAmt = conpoke(sumCustTaxableAmt, position, conpeek(sumCustTaxableAmt, position) + _taxable);
            sumCustTaxAmt = conpoke(sumCustTaxAmt, position, conpeek(sumCustTaxAmt, position) + _taxAmt);
        }
        else
        {
            sumCustTaxPct = conins(sumCustTaxPct, conlen(sumCustTaxPct) + 1, _percent);
            sumCustAmtBeforeTax = conins(sumCustAmtBeforeTax, conlen(sumCustAmtBeforeTax) + 1, _amtBefore);
            sumCustTaxableAmt = conins(sumCustTaxableAmt, conlen(sumCustTaxableAmt) + 1, _taxable);
            sumCustTaxAmt = conins(sumCustTaxAmt, conlen(sumCustTaxAmt) + 1, _taxAmt);
        }

        if (_addToTotalSummary)
        {
            position = confind(sumTotalTaxPct, _percent);

            if (position)
            {
                sumTotalAmtBeforeTax = conpoke(sumTotalAmtBeforeTax, position, conpeek(sumTotalAmtBeforeTax, position) + _amtBefore);
                sumTotalTaxableAmt = conpoke(sumTotalTaxableAmt, position, conpeek(sumTotalTaxableAmt, position) + _taxable);
                sumTotalTaxAmt = conpoke(sumTotalTaxAmt, position, conpeek(sumTotalTaxAmt, position) + _taxAmt);
            }
            else
            {
                sumTotalTaxPct = conins(sumTotalTaxPct, conlen(sumTotalTaxPct) + 1, _percent);
                sumTotalAmtBeforeTax = conins(sumTotalAmtBeforeTax, conlen(sumTotalAmtBeforeTax) + 1, _amtBefore);
                sumTotalTaxableAmt = conins(sumTotalTaxableAmt, conlen(sumTotalTaxableAmt) + 1, _taxable);
                sumTotalTaxAmt = conins(sumTotalTaxAmt, conlen(sumTotalTaxAmt) + 1, _taxAmt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the information that is related to the <c>CompanyInfo</c> table.
    /// </summary>
    /// <param name = "_actualDate">The date on which the information should be retrieved.</param>
    public void companyInfo(TransDate _actualDate)
    {
        CompanyInfo companyInfo;

        if (hasCompanyInfoAccess)
        {
            companyInfo				= CompanyInfo::find();
            companyName				= companyInfo.name();
            companyRegNum			= companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _actualDate);
            CustomsCustomerNumLE	= companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::CustomsCustomerId, _actualDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required Address line from an address.
    /// </summary>
    /// <param name="_addressTxt">
    /// The address value passed from the <c>address1</c> method.
    /// </param>
    /// <param name="_lineNum">
    /// The required line number.
    /// </param>
    /// <returns>
    /// The required line from the provided Address.
    /// </returns>
    private str getAddressLine(str _addressTxt, int _lineNum)
    {
        str addressLine;
        str addressTxt;

        // Append newline char to end of incoming addressTxt
        addressTxt = _addressTxt +  '\n';

        addressLine = strline(addressTxt, _lineNum - 1);

        return addressLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportAlandImportTmp_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>TaxReportAlandImportTmp_FI</c> temporary table and returns data table to the calling
    /// method.
    /// </summary>
    /// <returns>
    /// The required report data from <c>TaxReportAlandImportTmp_FI</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(TaxReportAlandImportTmp_FI))]
    public TaxReportAlandImportTmp_FI getTaxReportAlandImportTmp_FI()
    {
        select taxReportAlandImportTmp_FI;
        return taxReportAlandImportTmp_FI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required data and inserts it into the <c>TaxReportAlandImportTmp_FI</c> temporary
    /// table.
    /// </summary>
    /// <param name="_cursor">
    /// Takes the respective table ID for inserting data into the temporary table.
    /// </param>
    private void insertTmpTable(Common _cursor = null)
    {
        switch (_cursor.TableId)
        {
            case tableNum(CustTable):
                taxReportAlandImportTmp_FI.Buyer                = custTable.AccountNum;
                taxReportAlandImportTmp_FI.CustomerName         = custTable.name();
                taxReportAlandImportTmp_FI.VATNum               = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, taxImportTmp.TransDate);
                taxReportAlandImportTmp_FI.CustomsCustomerNum   = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::CustomsCustomerId, taxImportTmp.TransDate);
                break;

            case  tableNum(TaxTmpImportAland_FI):
                taxReportAlandImportTmp_FI.DeliveryDate         = taxImportTmp.TransDate;
                taxReportAlandImportTmp_FI.InvoiceId            = taxImportTmp.CustInvoiceId;
                taxReportAlandImportTmp_FI.LineAmount           = taxImportTmp.Amount;
                taxReportAlandImportTmp_FI.TaxableAmount        = taxImportTmp.Amount;
                taxReportAlandImportTmp_FI.TaxAmount            = taxImportTmp.TaxAmount;
                taxReportAlandImportTmp_FI.TaxPercent           = taxImportTmp.TaxPercent;
                break;
        }

        taxReportAlandImportTmp_FI.CustomsCustomerNumLE		= CustomsCustomerNumLE;
        taxReportAlandImportTmp_FI.CompanyName              = companyName;
        taxReportAlandImportTmp_FI.CompanyRegistrationNum   = companyRegNum;
        taxReportAlandImportTmp_FI.TaxSummarySectionTitle   = sectionTitle;
        taxReportAlandImportTmp_FI.SummaryAmountBeforeTax   = summaryBeforeTax;
        taxReportAlandImportTmp_FI.SummaryTaxableAmount     = summaryTaxableAmount;
        taxReportAlandImportTmp_FI.SummaryTaxAmount         = summaryTaxAmount;
        taxReportAlandImportTmp_FI.CurrentTaxPercent        = currentTaxPercent;
        taxReportAlandImportTmp_FI.PaymentReference         = paymentReference;
        taxReportAlandImportTmp_FI.Address1                 = this.address(Line1);
        taxReportAlandImportTmp_FI.Address2                 = this.address(Line2);
        taxReportAlandImportTmp_FI.DeclarationNum           = declarationNumber;
        taxReportAlandImportTmp_FI.Period                   = Global::dateStartMth(Global::dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1);

        taxReportAlandImportTmp_FI.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCustomerTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals for the <c>TaxImportPercent2Decimals_FI</c> currentTaxPercent value, the
    /// <c>TaxImportAmountBeforeTax_FI</c> summaryBeforeTax value, the <c>TaxImportTaxableAmount_FI</c>
    /// summaryTaxableAmount value, and the <c>TaxImportTaxAmount_FI</c> summaryTaxAmount value based on
    /// the customer.
    /// </summary>
    private void printCustomerTotals()
    {
        int                             outerCounter;
        int                             innerCounter;
        int                             currentMaxPosition;
        TaxImportPercent2Decimals_FI    previousMax;
        TaxImportPercent2Decimals_FI    currentMax;

        previousMax = MinPercent;

        for (outerCounter = 1; outerCounter <= conlen(sumCustTaxPct); outerCounter++)
        {
            currentMax = MaxPercent;
            for (innerCounter = 1; innerCounter <= conlen(sumCustTaxPct); innerCounter++)
            {
                if (conpeek(sumCustTaxPct, innerCounter) > previousMax && conpeek(sumCustTaxPct, innerCounter) < currentMax)
                {
                    currentMax          = conpeek(sumCustTaxPct, innerCounter);
                    currentMaxPosition  = innerCounter;
                }
            }

            currentTaxPercent       = conpeek(sumCustTaxPct, currentMaxPosition);
            summaryBeforeTax        = conpeek(sumCustAmtBeforeTax, currentMaxPosition);
            summaryTaxableAmount    = conpeek(sumCustTaxableAmt, currentMaxPosition);
            summaryTaxAmount        = conpeek(sumCustTaxAmt, currentMaxPosition);

            if (outerCounter == 1)
            {
                // Set section title for first summary
                sectionTitle = "@SYS97535";
            }
            else
            {
                sectionTitle = EmptyString;
            }

            previousMax = currentTaxPercent;
        }

        // Clear containers for next customer
        sumCustTaxPct       = connull();
        sumCustAmtBeforeTax = connull();
        sumCustTaxableAmt   = connull();
        sumCustTaxAmt       = connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSummaryTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals for for the <c>TaxImportPercent2Decimals_FI</c> currentTaxPercent value, the
    /// <c>TaxImportAmountBeforeTax_FI</c> summaryBeforeTax value, the <c>TaxImportTaxableAmount_FI</c>
    /// summaryTaxableAmount value, and the <c>TaxImportTaxAmount_FI</c> summaryTaxAmount value of all
    /// customers.
    /// </summary>
    private void printSummaryTotals()
    {
        int                             outerCounter;
        int                             innerCounter;
        int                             currentMaxPosition;
        TaxImportPercent2Decimals_FI    previousMax;
        TaxImportPercent2Decimals_FI    currentMax;

        previousMax = MinPercent;

        for (outerCounter = 1; outerCounter <= conlen(sumTotalTaxPct); outerCounter++)
        {
            currentMax = MaxPercent;
            for (innerCounter = 1; innerCounter <= conlen(sumTotalTaxPct); innerCounter++)
            {
                if (conpeek(sumTotalTaxPct, innerCounter) > previousMax && conpeek(sumTotalTaxPct, innerCounter) < currentMax)
                {
                    currentMax          = conpeek(sumTotalTaxPct, innerCounter);
                    currentMaxPosition  = innerCounter;
                }
            }

            currentTaxPercent       = conpeek(sumTotalTaxPct, currentMaxPosition);
            summaryBeforeTax        = conpeek(sumTotalAmtBeforeTax, currentMaxPosition);
            summaryTaxableAmount    = conpeek(sumTotalTaxableAmt, currentMaxPosition);
            summaryTaxAmount        = conpeek(sumTotalTaxAmt, currentMaxPosition);

            if (outerCounter == 1)
            {
                // Set section title for first summary
                sectionTitle = "@SYS97536";
            }
            else
            {
                sectionTitle = EmptyString;
            }

            previousMax = currentTaxPercent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// Microsoft SQL Server Reporting Services at runtime. The method should compute data and populate the
    /// data tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceJour         custInvoiceJour;
        LedgerJournalTrans      ledgerJournalTrans;
        TaxTable                taxCode;
        TaxTrans                taxTrans;
        TransDate               firstOfMonth;
        TransDate               lastOfMonth;

        TaxReportAlandImportContract_FI contract    = this.parmDataContract() as TaxReportAlandImportContract_FI;
        fromDate                                    = contract.parmFromDate();
        taxDirection                                = contract.parmTaxDirection();
        paymentReference                            = contract.parmPaymentReference();

        // Set record level security on temp table
        taxImportTmp.recordLevelSecurity(true);

        firstOfMonth    = Global::dateStartMth(fromDate);
        lastOfMonth     = Global::dateEndMth(fromDate);
        this.companyInfo(lastOfMonth);

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            custTable = queryRun.get(tablenum(CustTable));

            // Add customer invoices to temp table
            while select DlvDate, InvoiceDate, InvoiceId, InventTransId, LineAmount, TaxAmount, OrigSalesId,
                        SalesId, numberSequenceGroup from custInvoiceTrans
                where (custInvoiceTrans.DlvDate >= firstOfMonth && custInvoiceTrans.DlvDate <= lastOfMonth)
                      || (custInvoiceTrans.DlvDate == dateNull() && custInvoiceTrans.InvoiceDate >= firstOfMonth
                          && custInvoiceTrans.InvoiceDate <= lastOfMonth && custInvoiceTrans.OrigSalesId == EmptyString)
                join RecId from custInvoiceJour
                    where custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                          && custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                          && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                          && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup
                          && custInvoiceJour.OrderAccount == custTable.AccountNum
                join RecId from taxTrans
                    where taxTrans.TransDate == custInvoiceJour.InvoiceDate
                          && taxTrans.Voucher == custInvoiceJour.LedgerVoucher
                join TaxCode from taxCode
                    where taxCode.TaxCode == taxTrans.TaxCode
                          && taxCode.CustomsPractice_FI == true
            {
                if (custInvoiceTrans.DlvDate != dateNull())
                {
                    taxImportTmp.TransDate          = custInvoiceTrans.DlvDate;
                    taxImportTmp.TaxModuleTypeId    = TaxModuleType::Sales;
                }
                else
                {
                    taxImportTmp.TransDate          = custInvoiceTrans.InvoiceDate;
                    taxImportTmp.TaxModuleTypeId    = TaxModuleType::FreeTxtInvoice;
                }

                taxImportTmp.AccountNum             = custInvoiceTrans.orderAccount();
                taxImportTmp.CustInvoiceId          = custInvoiceTrans.InvoiceId;
                taxImportTmp.InventTransId          = custInvoiceTrans.InventTransId;
                taxImportTmp.Amount                 = custInvoiceTrans.LineAmount;
                taxImportTmp.TaxAmount              = custInvoiceTrans.TaxAmount;
                taxImportTmp.TaxPercent             = TaxData::percent(taxCode.TaxCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0);

                taxImportTmp.insert();
            }

            // Add ledger invoices to temp table
            while select TransDate, Invoice, AmountCurDebit, Voucher, TransDate, AccountType, TableId, RecId, LedgerDimension from ledgerJournalTrans
                where ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                      && ledgerJournalTrans.Invoice != EmptyString
                      && ledgerJournalTrans.TransDate >= firstOfMonth
                      && ledgerJournalTrans.TransDate <= lastOfMonth
                      && ledgerJournalTrans.LedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(custTable.AccountNum, LedgerJournalACType::Cust)
                join RecId from taxTrans
                    where taxTrans.SourceTableId == ledgerJournalTrans.TableId
                          && taxTrans.SourceRecId == ledgerJournalTrans.RecId
                join TaxCode from taxCode
                    where taxCode.TaxCode == taxTrans.TaxCode
                         && taxCode.CustomsPractice_FI == true
            {
                taxImportTmp.AccountNum         = ledgerJournalTrans.parmAccount();
                taxImportTmp.TransDate          = ledgerJournalTrans.TransDate;
                taxImportTmp.CustInvoiceId      = ledgerJournalTrans.Invoice;
                taxImportTmp.TaxModuleTypeId    = TaxModuleType::Voucher;
                taxImportTmp.InventTransId      = EmptyString;
                taxImportTmp.Amount             = ledgerJournalTrans.AmountCurDebit;
                taxImportTmp.TaxAmount          = -Tax::taxTotalVoucherDate(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
                taxImportTmp.TaxPercent         = TaxData::percent(taxCode.TaxCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0);

                taxImportTmp.insert();
            }
        }

        if (!taxImportTmp)
        {
            this.insertTmpTable();
        }

        // Write tax declaration pages
        while (taxImportTmp)
        {
            select firstonly custTable where taxImportTmp.AccountNum == custTable.AccountNum;

            if (custTable)
            {
                // Reset customer variables
                customerTaxAmount = 0;

                // Write customer header to report
                declarationNumber++;
                this.insertTmpTable(custTable);

                while select TransDate, CustInvoiceId, TaxModuleTypeId, InventTransId, sum(Amount), sum(TaxAmount), TaxPercent from taxImportTmp
                    group by TransDate, CustInvoiceId, TaxModuleTypeId, TaxPercent
                    where taxImportTmp.AccountNum == custTable.AccountNum
                {
                    // Write tax line to report
                    this.insertTmpTable(taxImportTmp);

                    // Add to totals
                    this.addToTotals(taxImportTmp.TaxPercent, taxImportTmp.Amount, taxImportTmp.Amount, taxImportTmp.TaxAmount, true);
                    customerTaxAmount   += taxImportTmp.TaxAmount;
                    totalTaxAmount      += taxImportTmp.TaxAmount;
                }

                // Finish tax declaration of import page
                this.printCustomerTotals();
                // Remove processed records from temp table
                delete_from taxImportTmp where taxImportTmp.AccountNum == custTable.AccountNum;
            }
        }

        // Run summary declaration
        isSummary = true;

        this.printSummaryTotals();
        sectiontitle = "@SYS97531";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>