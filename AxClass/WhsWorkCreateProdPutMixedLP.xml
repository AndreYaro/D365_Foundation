<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateProdPutMixedLP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateProdPutMixedLP</c> class creates warehouse work for production order putaway, grouped by license plate, which might include multiple serial numbers, batches and even items.
/// </summary>
internal class WhsWorkCreateProdPutMixedLP extends WHSWorkCreate
{    
    private InventDim initialRafJournalLineInventDim;

    // tmpWorkLinesFromRAF temporary table contains WMSTmpWorkLine records generated while adding RAF journal lines to the class (using addRAFJournalLine). 
    // After all the RAF information has been added, it is then looped over and converted to temporary work lines in createTempTable.
    // tmpWorkLineFromRAF are grouped by InventTrans and above-location-dimenions combination.
    private WHSTmpWorkLine tmpWorkLinesFromRAF; 
    
    private WHSWorkCreateId workCreateId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        if (!(_common is ProdJournalProd))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // starting location and license plate are taken from the first RAF journal line. Additional lines should have the same to be included in one LP
        ProdJournalProd rafJournalLine = _common as ProdJournalProd;
        initialRafJournalLineInventDim = rafJournalLine.inventDim();

        // Set some global variables that need to be set for work creation to work correctly                
        startLocationId = initialRafJournalLineInventDim.wmsLocationId;
        targetLicensePlateId = initialRafJournalLineInventDim.LicensePlateId;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
        
        tmpWorkLinesFromRAF.setTmp();

        super(rafJournalLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRAFJournalLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addRAFJournalLine(ProdJournalProd _rafJournalLine)
    {
        InventDim rafJournalLineInventDim = _rafJournalLine.inventDim();

        if (rafJournalLineInventDim.wMSLocationId != initialRafJournalLineInventDim.wMSLocationId
            || rafJournalLineInventDim.LicensePlateId != initialRafJournalLineInventDim.LicensePlateId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (!this.isPutWorkCreationAllowedForRAFJournalLine(_rafJournalLine))
        {
            return;
        }

        this.updateOrCreateTmpWorkLine(_rafJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrCreateTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the RAF journal line to the collection of future temporary work lines in tmpWorkLineFromRAF. To maintain the grouping of tmpWorkLineFromRAF, adds qty to existing tmpWorkLineFromRAF or creates a new one.
    /// </summary>
    /// <param name = "_rafJournalLine">RAF journal line to add to tmpWorkLinesFromRAF.</param>
    private void updateOrCreateTmpWorkLine(ProdJournalProd _rafJournalLine)
    {
        InventDim aboveLocDimFromRafJournalLine = InventDim::find(_rafJournalLine.InventDimId);
        aboveLocDimFromRafJournalLine.clearLocationAndBelowDim(_rafJournalLine.ItemId);
        aboveLocDimFromRafJournalLine = InventDim::findOrCreate(aboveLocDimFromRafJournalLine);

        // Maintain grouping of tmpWorkLineFromRAF, so first look in tmpWorkLinesFromRaf temporary table for an existing InventTransId/above-location-dimension entry        
        WHSTmpWorkLine existingTmpWorkLineFromRAF;
        existingTmpWorkLineFromRAF.setTmp();
        existingTmpWorkLineFromRAF.setTmpData(tmpWorkLinesFromRAF);                       

        select firstonly existingTmpWorkLineFromRAF
            where existingTmpWorkLineFromRAF.InventTransId == _rafJournalLine.InventTransId
               && existingTmpWorkLineFromRAF.InventDimId == aboveLocDimFromRafJournalLine.inventDimId;

        if (existingTmpWorkLineFromRAF)
        {
            InventHandlingQty handlingQty = this.getHandlingQty(_rafJournalLine);            

            tmpWorkLinesFromRAF.data(existingTmpWorkLineFromRAF);
            tmpWorkLinesFromRAF.InventQty += handlingQty;
            tmpWorkLinesFromRAF.update();
        }
        else
        {
            this.createTmpWorkLine(_rafJournalLine, aboveLocDimFromRafJournalLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpWorkLine</Name>
				<Source><![CDATA[
    private void createTmpWorkLine(ProdJournalProd _rafJournalLine, InventDim _rafJournalLineInventDim)
    {
        InventHandlingQty handlingQty = this.getHandlingQty(_rafJournalLine);
        
        ProdTable prodTable = ProdTable::find(_rafJournalLine.ProdId);

        tmpWorkLinesFromRAF.initializeTempWorkLineByPmfProductType(_rafJournalLine.PmfProductType);

        tmpWorkLinesFromRAF.WorkCreateId     = workCreateId;
        tmpWorkLinesFromRAF.WorkType         = WHSWorkType::Put;                
        tmpWorkLinesFromRAF.OriginRefId      = prodTable.ProdId;
        tmpWorkLinesFromRAF.OrderNum         = prodTable.ProdId;
        tmpWorkLinesFromRAF.RefTableId       = tableNum(ProdTable);
        tmpWorkLinesFromRAF.RefRecId         = prodTable.RecId;        
        tmpWorkLinesFromRAF.InventTransId    = _rafJournalLine.InventTransId;
        tmpWorkLinesFromRAF.ItemId           = _rafJournalLine.ItemId;                     
        tmpWorkLinesFromRAF.InventQty        = handlingQty;
        tmpWorkLinesFromRAF.InventDimId      = _rafJournalLineInventDim.inventDimId;
        tmpWorkLinesFromRAF.InventBatchId    = _rafJournalLineInventDim.inventBatchId;
        tmpWorkLinesFromRAF.InventSerialId   = _rafJournalLineInventDim.inventSerialId;
        tmpWorkLinesFromRAF.StartLocationId  = startLocationId;

        tmpWorkLinesFromRAF.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHandlingQty</Name>
				<Source><![CDATA[
    private InventHandlingQty getHandlingQty(ProdJournalProd _rafJournalLine)
    {
        InventHandlingQty handlingQty;
        
        if (PdsGlobal::pdsIsCWItem(_rafJournalLine.ItemId))
        {
            handlingQty = _rafJournalLine.PdsCWBatchGood;
        }
        else
        {
            handlingQty = _rafJournalLine.QtyGood;            
        }
        return handlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary work line(s) for mixed license plate finished goods putaway.
    /// </summary>
    [Hookable(false)]
    public void createTempTable()
    {
        ttsbegin;

        while select tmpWorkLinesFromRAF
        {
            tmpWorkLine.data(tmpWorkLinesFromRAF);

            tmpWorkLine.LineNum = 0;
            InventQty locInventQty = tmpWorkLine.InventQty;
            tmpWorkLine.InventQty = 0;
            
            // This random looking line below needs to be here because WHSTmpWorkLineCreator will eventually need the inventory dimensions
            // and it retrieves it via workCreate.parmWorkInventDim(), not tmpWorkLine
            workInventDim = InventDim::find(tmpWorkLine.InventDimId); 
            tmpWorkLine.InventDimId = '';            
            
            this.setGlobals();
            
            WHSWorkBuildId crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);
            InventQty qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(locInventQty,
                                                                                 crossDockWorkBuildId,
                                                                                 tmpWorkLine.ItemId,
                                                                                 targetLicensePlateId,
                                                                                 workInventDim);
            
            // Store off cross dock quantity to be used when evaluating cross docking later
            InventQty crossDockAdjustedQty = qtyToCreateWork;

            WHSWorkBuildId qualityItemSamplingWorkBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(targetLicensePlateId);
            qtyToCreateWork = this.getWorkCreateQuantityAfterQualityItemSampling(qtyToCreateWork,
                                                                                 qualityItemSamplingWorkBuildId,
                                                                                 tmpWorkLine.InventTransId,
                                                                                 targetLicensePlateId,
                                                                                 workInventDim);
            
            if (qtyToCreateWork > 0)
            {              
                ProdTable prodTable = ProdTable::find(tmpWorkLine.OriginRefId);

                // If marking exists, evaluate and execute cross docking at supply receipt if possible.
                if (WHSCrossDockingAtSupplyReceipt::validateMarkingExists(prodTable.InventTransId, targetLicensePlateId))
                {
                    WHSCrossDockingAtSupplyReceipt::crossDock(prodTable, qtyToCreateWork, targetLicensePlateId, tmpWorkLine);
                }

                // Recalculate the qty to create work for to account for any cross docking
                qtyToCreateWork -= (crossDockAdjustedQty - this.adjustQuantityForCrossDock(locInventQty,
                                                                                        targetLicensePlateId,
                                                                                        tmpWorkLine.WorkCreateId,
                                                                                        tmpWorkLine.ItemId,
                                                                                        WHSTmpWorkLineCreator::mergeWorkInventDim(prodTable.inventDim(), workInventDim, tmpWorkLine.ItemId)));
                

                if (qtyToCreateWork)
                {
                    this.createTempLine(tmpWorkLine, qtyToCreateWork);
                }
            }
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for the class instances.
    /// </summary>
    /// <param name="_common">
    /// Initial report as finished journal line to be used to construct the instance.
    /// </param>
    /// <param name="_workCreateId">
    /// Work creation id to be used to construct the instance.
    /// </param>
    /// <returns>
    /// The <c>WhsWorkCreateProdPutMixedLP</c> instance.
    /// </returns>
    [Hookable(false)]
    internal static WhsWorkCreateProdPutMixedLP construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        return new WhsWorkCreateProdPutMixedLP(_common, _workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPutWorkCreationAllowedForRAFJournalLine</Name>
				<Source><![CDATA[
    private boolean isPutWorkCreationAllowedForRAFJournalLine(ProdJournalProd _prodJournalProd)
    {        
        return WhsWorkCreateProdPutMixedLP::isPutWorkCreationAllowed(_prodJournalProd.ProdId, _prodJournalProd.PmfProductType, _prodJournalProd.ItemId, _prodJournalProd.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPutWorkCreationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if putaway work creation is allowed for an item being reported as finished on specific dimensions for a specific production order.
    /// </summary>
    /// <param name = "_prodId">Production order being reported as finished.</param>
    /// <param name = "_pmfProductType">Type of the item being reported as finished (main produced item, by or coproduct).</param>
    /// <param name = "_itemId">Item being reported as finished.</param>
    /// <param name = "_inventDim">Inventory dimensions used to report as finished.</param>
    /// <returns>true, if putaway work creation is allowed; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isPutWorkCreationAllowed(ProdId _prodId, PmfProductType _pmfProductType, ItemId _itemId, InventDim _inventDim)
    {
        WHSWorkTransType workTransType = WhsWorkCreateProdPutMixedLP::getWorkTransTypeFromPmfProductType(_pmfProductType);
        boolean isWorkAllowedToBeCreated = WHSWorkPolicy::isWorkAllowedToBeCreated(workTransType, _inventDim.InventLocationId, _inventDim.wMSLocationId, _itemId);

        // for project related production supply marked to real (e.g. sales) demand ensure a putaway work is created
        if (isWorkAllowedToBeCreated)
        {
            ProdTable prodTable = ProdTable::find(_prodId);

            isWorkAllowedToBeCreated = (!prodTable.ProjId || prodTable.ProjLinkedToOrder);
        }

        return isWorkAllowedToBeCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTypeFromPmfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the PmfProductType of an item being reported as finished into a WHSWorkTransType of the putaway work.
    /// </summary>
    /// <param name = "_pmfProducType">Type of the item being reported as finished.</param>
    /// <returns>WHSWorkTransType of the putaway work.</returns>
    [Hookable(false)]
    internal static WHSWorkTransType getWorkTransTypeFromPmfProductType(PmfProductType _pmfProducType)
    {
        WHSWorkTransType workTransType;
        
        switch (_pmfProducType)
        {
            case PmfProductType::BOM:
            case PmfProductType::None:
            case PmfProductType::Formula:
                workTransType = WHSWorkTransType::ProdPut;
                break;
            case PmfProductType::By_Product:
            case PmfProductType::Co_Product:
                workTransType = WHSWorkTransType::ProdProcessPut;
                break;
        }

        return workTransType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>