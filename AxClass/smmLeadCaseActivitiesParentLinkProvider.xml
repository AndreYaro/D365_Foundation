<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmLeadCaseActivitiesParentLinkProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plug in for case activities
/// </summary>
[ExportMetadataAttribute('CaseIActivityParentLink', 'Lead'), ExportAttribute('Dynamics.AX.Application.CaseIActivityParentLink')]
class smmLeadCaseActivitiesParentLinkProvider implements CaseIActivityParentLink
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLinkedTypes</Name>
				<Source><![CDATA[
    public container getLinkedTypes(smmActivityParentType _parentType)
    {
        return [smmActivityParentType::Customer, smmActivityParentType::BusRel];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRelatedLinkTable</Name>
				<Source><![CDATA[
    public smmActivityParentLinkTable insertRelatedLinkTable(smmActivityParentLinkTable _linkTable,
        smmActivityParentType _parentType,  Common _parent = null)
    {
        return smmLeadCaseActivitiesParentLinkProvider::insertLeadOpportunityLinkTable(_linkTable, _parentType, _parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessType</Name>
				<Source><![CDATA[
    public boolean isProcessType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentType2FieldId</Name>
				<Source><![CDATA[
    public FieldId parentType2FieldId()
    {
        return fieldNum(smmLeadTable,LeadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentType2RefTableId</Name>
				<Source><![CDATA[
    public RefTableId parentType2RefTableId(smmActivityParentType _parentType)
    {
        return tableNum(smmLeadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLeadOpportunityLinkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>smmActivityParentLinkTable</c> record for an opportunity or lead.
    /// </summary>
    /// <param name="_linkTable">
    /// The <c>smmActivityParentLinkTable</c> record that has already been created.
    /// </param>
    /// <param name="_parentType">
    /// The type of the <c>smmActivityParentLinkTable</c> record to create.
    /// </param>
    /// <param name="_parent">
    /// The existing <c>smmLeadTable</c> or <c>smmOpportunityTable</c> record.
    /// </param>
    /// <returns>
    /// A new <c>smmActivityParentLinkTable</c> record.
    /// </returns>
    public static smmActivityParentLinkTable insertLeadOpportunityLinkTable(smmActivityParentLinkTable _linkTable,
        smmActivityParentType _parentType,  Common _parent)
    {
        smmActivityParentLinkTable smmActivityParentLinkTable;
        smmBusRelTable             smmBusRelTable;
        CustTable                  custTable;
        smmLeadTable               smmLeadTable;
        smmOpportunityTable        smmOpportunityTable;
        DirPartyRecId              partyRecId;
        RefRecId                   refRecId;

        smmActivityParentLinkTable.clear();
        smmActivityParentLinkTable.ActivityNumber = _linkTable.ActivityNumber;
        smmActivityParentLinkTable.ParentType     = _parentType;
        smmActivityParentLinkTable.RefTableId     = smmActivityParentLink::parentType2RefTableId(_parentType);

        // Party RecId
        if (_parent.TableId == tableNum(smmLeadTable))
        {
            select Party from smmLeadTable where smmLeadTable.RecId == _linkTable.RefRecId;
            partyRecId = smmLeadTable.Party;
        }
        else
        {
            select Party from smmOpportunityTable where smmOpportunityTable.RecId == _linkTable.RefRecId;
            partyRecId = smmOpportunityTable.Party;
        }

        if (partyRecId == 0)
        {
            return smmActivityParentLinkTable;
        }

        // Lead and opportunity only add Customer or Prospect links
        switch (_parentType)
        {
            case smmActivityParentType::Customer:
                select RecId from custTable where custTable.Party == partyRecId;
                refRecId = custTable.RecId;
                break;

            case smmActivityParentType::BusRel:
                select RecId from smmBusRelTable where smmBusRelTable.Party == partyRecId;
                refRecId = smmBusRelTable.RecId;
                break;
        }

        if (refRecId == 0)
        {
            return smmActivityParentLinkTable;
        }

        smmActivityParentLinkTable.RefRecId = refRecId;
        if (!smmActivityParentLinkTable::existsParentLink(smmActivityParentLinkTable.ActivityNumber, _parentType))
        {
            smmActivityParentLinkTable.insert(null, false);
        }

        return smmActivityParentLinkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentType2PartyFieldId</Name>
				<Source><![CDATA[
    public FieldId parentType2PartyFieldId(smmActivityParentType _parentType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentMenuItem</Name>
				<Source><![CDATA[
    public str parentMenuItem(Args _args, smmActivityParentLinkTable _linkTable)
    {
        return menuitemDisplayStr(smmLeadTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>