<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanItemCheckKanbanRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanItemCheckKanbanRule</c> class checks whether a specific item can be used with
/// kanbans.The class uses the context of a kanban rule and flow for the check.
/// </summary>
/// <remarks>
/// Generally, all items that are used with kanbans must be standard cost controlled.The exception to
/// this rule is a withdrawal kanban that updates inventory on issue and receipt.
/// </remarks>
public class KanbanItemCheckKanbanRule extends KanbanItemCheckItemId
{
    KanbanRule              kanbanRule;
    KanbanFlow              kanbanFlow;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowBlankItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a blank item ID is allowed.
    /// </summary>
    /// <returns>
    /// true if a blank item ID is allowed; otherwise, false.
    /// </returns>
    protected boolean allowBlankItemId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the item can be used with kanbans.
    /// </summary>
    /// <returns>
    /// true if the item can be used; otherwise, false.
    /// </returns>
    protected boolean checkIsAllowed()
    {
        return    this.checkItemId()
               || (this.checkKanbanRule()
               &&  this.checkKanbanFlow()
               &&  this.checkPlanActivity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the kanban flow.
    /// </summary>
    /// <returns>
    ///    true if the kanban flow is valid; otherwise, false.
    /// </returns>
    protected boolean checkKanbanFlow()
    {
        return kanbanFlow.FirstPlanPlanActivity == kanbanFlow.LastPlanPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the kanban rule.
    /// </summary>
    /// <returns>
    ///    true if the kanban rule is valid; otherwise, false.
    /// </returns>
    protected boolean checkKanbanRule()
    {
        return    itemId
               && kanbanRule.KanbanType == LeanKanbanType::Withdrawal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the first plan activity of the kanban flow.
    /// </summary>
    /// <returns>
    ///    true if the activity is valid; otherwise, false.
    /// </returns>
    protected boolean checkPlanActivity()
    {
        PlanActivity    planActivity = kanbanFlow.firstPlanActivity();

        return    planActivity
               && planActivity.PlanActivityType == PlanActivityType::Transfer
               && planActivity.onHandUpdate(PlanActivityType::Pick)
               && planActivity.onHandUpdate(PlanActivityType::Receive)
               && (planActivity.receiptLocation().inventoryControl() == LeanInventoryControl::Full
               ||  (itemId
               &&   !InventDimGroupSetup::newItemId(itemId).isDimensionActive(fieldNum(InventDim,wmsLocationId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlow</Name>
				<Source><![CDATA[
        public KanbanFlow parmKanbanFlow(KanbanFlow _kanbanFlow = kanbanFlow)
    {
        kanbanFlow = _kanbanFlow;
        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanItemCheckKanbanRule construct()
    {
        return new KanbanItemCheckKanbanRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>KanbanItemCheckKanbanRule</c> object.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The kanban rule.
    /// </param>
    /// <param name="_itemId">
    /// The item.
    /// </param>
    /// <param name="_kanbanFlow">
    /// The kanban flow; optional.
    /// </param>
    /// <param name="_warningOnFailure">
    /// A Boolean value that indicates whether a warning must be given when the check fails; optional.
    /// </param>
    /// <param name="_errorOnFailure">
    /// A Boolean value that indicates whether an error must be thrown when the check fails; optional.
    /// </param>
    /// <returns>
    /// A new <c>KanbanItemCheckKanbanRule</c> object.
    /// </returns>
    public static KanbanItemCheckKanbanRule newStandard(
        KanbanRule   _kanbanRule,
        ItemId       _itemId,
        KanbanFlow   _kanbanFlow       = _kanbanRule.kanbanFlow(),
        boolean      _warningOnFailure = false,
        boolean      _errorOnFailure   = false)
    {
        KanbanItemCheckKanbanRule kanbanItemCheckKanbanRule = KanbanItemCheckKanbanRule::construct();

        kanbanItemCheckKanbanRule.parmKanbanRule(_kanbanRule);
        kanbanItemCheckKanbanRule.parmItemId(_itemId);
        kanbanItemCheckKanbanRule.parmKanbanFlow(_kanbanFlow);
        kanbanItemCheckKanbanRule.parmWarningOnFailure(_warningOnFailure);
        kanbanItemCheckKanbanRule.parmErrorOnFailure(_errorOnFailure);

        return kanbanItemCheckKanbanRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>