<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTableMap2LineField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQTableMap2LineField</c> class is a wrapper for a field that is used by updating from
///    a header to a line procedure.
/// </summary>
/// <remarks>
///    This class is used by the <c>PurchRFQTableMap2LineParametersForm</c>,
///    <c>PurchRFQTableMap2LineUpdate</c> and <c>PurchRFQTableMap2LineUpdatePrompt</c> classes.
/// </remarks>
class PurchRFQTableMap2LineField
{
    FieldId                             fieldId;
    FieldLabel                          fieldName;
    TradeTable2LineUpdate               table2lineUpdate;
    NoYes                               updatePurchRFQLines;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        fieldId,
        fieldName,
        table2lineUpdate,
        updatePurchRFQLines
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldGroupLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the label for the field group.
    /// </summary>
    /// <returns>
    ///    The label for the field group.
    /// </returns>
    /// <remarks>
    ///    The label will be shown on the "Update request for quote lines" form.
    /// </remarks>
    public FieldLabel fieldGroupLabel()
    {
        if (this.fieldId() == fieldNum(PurchRFQTableMap, InventLocationId))
            return "@SYS108783";

        return this.fieldName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and returns the <c>fieldId</c> property.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID to set; optional.
    /// </param>
    /// <returns>
    ///    The current field ID.
    /// </returns>
    public FieldId fieldId(FieldId _fieldId = fieldId)
    {
        if (_fieldId != fieldId)
        {
            this.initFieldId(_fieldId);
        }
        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field name.
    /// </summary>
    /// <returns>
    /// The field name.
    /// </returns>
    public FieldLabel fieldName()
    {
        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an object from the <c>PurchRFQTableMap2LineParameters</c> table. It sets the
    ///    <c>fieldId</c>, <c>fieldName</c> and <c>table2lineUpdate</c> parameters.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID that is used to find the <c>PurchRFQTableMap2LineParameters</c> table.
    /// </param>
    protected void initFieldId(FieldId _fieldId)
    {
        //call to database
        PurchRFQTableMap2LineParameters purchRFQTableMap2LineParameters = PurchRFQTableMap2LineParameters::find(_fieldId);

        fieldId = _fieldId;
        fieldName = purchRFQTableMap2LineParameters.fieldName(fieldId);
        this.table2LineUpdate(purchRFQTableMap2LineParameters.Table2LineUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUpdateDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of field.
    /// </summary>
    /// <returns>
    ///    The name of the field.
    /// </returns>
    /// <remarks>
    ///    The name will be shown on the update request for quote lines form.This method is called by the
    ///    <c>parameterLabel</c> method.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No label is defined for the field ID.
    /// </exception>
    public FieldLabel lineUpdateDescription()
    {
        switch (fieldExt2Id(this.fieldId()))
        {
            case fieldNum(PurchRFQTableMap, DefaultDimension)        :
                return "@SYS14926";

            case fieldNum(PurchRFQTableMap, InventLocationId) :
                return "@SYS108782";

            case fieldNum(PurchRFQTableMap, DeliveryDate)     :
                return fieldId2pname(tableNum(PurchRFQCaseLine), fieldNum(PurchRFQCaseLine, DeliveryDate));

            case fieldNum(PurchRFQTableMap, ExpiryDateTime)       :
                return fieldId2pname(tableNum(PurchRFQCaseLine), fieldNum(PurchRFQCaseLine, ExpiryDateTime));

            case fieldNum(PurchRFQTableMap, TaxGroup)       :
                return fieldId2pname(tableNum(PurchRFQLine), fieldNum(PurchRFQLine, TaxGroup));

            case fieldNum(PurchRFQTableMap, OverrideSalesTax):
                return fieldId2pname(tableNum(PurchRFQLine), fieldNum(PurchRFQLine, OverrideSalesTax));

            case fieldNum(PurchRFQTableMap, LanguageId)       :
                return fieldId2pname(tableNum(PurchRFQCaseLine), fieldNum(PurchRFQCaseLine, Name));
        }
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterHelp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the help text for the field.
    /// </summary>
    /// <returns>
    ///    The help text for the field.
    /// </returns>
    /// <remarks>
    ///    The text will be visible on the 'Update request for quote lines' form when the user selects the
    ///    field.
    /// </remarks>
    public FieldHelp parameterHelp()
    {
        return strFmt("@SYS103629", this.lineUpdateDescription(), this.fieldName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a label for the field.
    /// </summary>
    /// <returns>
    /// The Label for the field.
    /// </returns>
    /// <remarks>
    /// The label will be shown on the 'Update request for quote lines' form.
    /// </remarks>
    public FieldLabel parameterLabel()
    {
        return strFmt("@SYS62814", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the question text.
    /// </summary>
    /// <returns>
    /// The question text.
    /// </returns>
    public FieldHelp questionHelp()
    {
        return strFmt("@SYS103630", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label for the confirmation check box.
    /// </summary>
    /// <returns>
    ///    The label for the check box.
    /// </returns>
    /// <remarks>
    ///    The check box appears in the message box that appears when header field was updated so the
    ///    appropriate line field will be updated.The user must select the check box to confirm the line
    ///    update.
    /// </remarks>
    public FieldLabel questionLabel()
    {
        return strFmt("@SYS62835", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>table2LineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and returns the <c>table2lineUpdate</c> parameter.
    /// </summary>
    /// <param name="_table2LineUpdate">
    ///    The <c>table2LineUpdate</c> value to set; optional.
    /// </param>
    /// <returns>
    ///    The current <c>table2lineUpdate</c> parameter.
    /// </returns>
    public TradeTable2LineUpdate table2LineUpdate(TradeTable2LineUpdate _table2LineUpdate = table2LineUpdate)
    {
        table2LineUpdate = _table2LineUpdate;
        return table2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>PurchRFQTableMap</c> map ID.
    /// </summary>
    /// <returns>
    ///    The <c>PurchRFQTableMap</c> map ID.
    /// </returns>
    public TableId tableId()
    {
        return tableNum(PurchRFQTableMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and returns a value of the <c>updatePurchRFQLines</c> parameter.
    /// </summary>
    /// <param name="_updatePurchRFQLines">
    ///    A Boolean value that determines whether the lines should be updated; optional.
    /// </param>
    /// <returns>
    ///    The current <c>updatePurchRFQLines</c> value.
    /// </returns>
    /// <remarks>
    ///    If it is set to Yes, the line field will be updated.
    /// </remarks>
    public NoYes updatePurchRFQLines(NoYes _updatePurchRFQLines = updatePurchRFQLines)
    {
        updatePurchRFQLines = _updatePurchRFQLines;
        return updatePurchRFQLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQTableMap2LineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>PurchRFQTableMap2LineParameters</c> record with a new <c>table2LineUpdate</c> value
    ///    if it was changed.
    /// </summary>
    public void updatePurchRFQTableMap2LineParameters()
    {
        //call to database
        PurchRFQTableMap2LineParameters purchRFQTableMap2LineParameters = PurchRFQTableMap2LineParameters::find(this.fieldId(), true);

        if (table2LineUpdate != purchRFQTableMap2LineParameters.Table2LineUpdate)
        {
            ttsbegin;

            purchRFQTableMap2LineParameters.Table2LineUpdate = table2LineUpdate;

            if (purchRFQTableMap2LineParameters)
            {
                purchRFQTableMap2LineParameters.update();
            }
            else
            {
                purchRFQTableMap2LineParameters.FieldId = this.fieldId();
                purchRFQTableMap2LineParameters.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>PurchRFQTableMap2LineField</c> class.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID to use in the object.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchRFQTableMap2LineField</c> class.
    /// </returns>
    static PurchRFQTableMap2LineField construct(FieldId _fieldId)
    {
        PurchRFQTableMap2LineField         purchRFQTableMap2LineField;

        purchRFQTableMap2LineField = new PurchRFQTableMap2LineField();
        purchRFQTableMap2LineField.initFieldId(_fieldId);
        return purchRFQTableMap2LineField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>PurchRFQTableMap2LineField</c> class from the container.
    /// </summary>
    /// <param name="packedClass">
    /// An instance of the <c>PurchRFQTableMap2LineField</c> class packed into container.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchRFQTableMap2LineField</c> class.
    /// </returns>
    static public PurchRFQTableMap2LineField create(container packedClass)
    {
        PurchRFQTableMap2LineField purchRFQTableMap2LineField = new PurchRFQTableMap2LineField();
        purchRFQTableMap2LineField.unpack(packedClass);

        return purchRFQTableMap2LineField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>