<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGFacilityAgreementLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGFacilityAgreementLineType</c> class is the business object class for the
///    <c>BankLGFacilityAgreementLine</c> table.
/// </summary>
class BankLGFacilityAgreementLineType extends BankDocumentFacilityAgreementLineType
{
    BankLGFacilityAgreementLine     bankLGFacilityAgreementLine;
    CurrencyCode                    currencyCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCashMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cash margin for issuing a letter of guarantee or increasing or decreasing the value
    ///    of a letter of guarantee.
    /// </summary>
    /// <param name="_baseLGValue">
    ///    The base value to use to calculate the margin.
    /// </param>
    /// <param name="_isIssuance">
    ///    true to issue a letter of guarantee; false to increase or decrease the value of a letter of
    ///    guarantee.
    /// </param>
    /// <returns>
    ///    The calculated margin.
    /// </returns>
    /// <remarks>
    ///    To issue a letter of guarantee, the <paramref name="_baseLGValue" /> parameter should be the value
    ///    of the letter of guarantee. To increase or decrease the value of a letter of guarantee, the
    ///    <paramref name="_baseLGValue" /> parameter is the increased or decreased value of the letter of
    ///    guarantee.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankLGMarginCur calculateCashMargin(
        BankLGValueCur  _baseLGValue,
        boolean         _isIssuance = false)
    {
        BankLGMarginCur         margin;
        BankLGAmountCalculation bankLGAmountCalculation;

        bankLGAmountCalculation = BankLGAmountCalculation::find(bankLGFacilityAgreementLine.CashMarginCalc);

        if (bankLGAmountCalculation.RecId)
        {
            if (_isIssuance == false
                && bankLGAmountCalculation.CalcMethod == BankLGAmountCalcType::FixedValue)
            {
                margin = 0.0;
            }
            else
            {
                margin = bankLGAmountCalculation.calculate(currencyCode, _baseLGValue);
            }
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDecreaseValueCommission</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the commission for decreasing value.
    /// </summary>
    /// <param name="_baseLGValue">
    ///    The base value to use to calculate commission.
    /// </param>
    /// <returns>
    ///    The calculated commission.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_baseLGValue" /> is the total value of a letter of guarantee.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankLGMarginCur calculateDecreaseValueCommission(BankLGValueCur  _baseLGValue)
    {
        BankLGMarginCur         margin;
        BankLGAmountCalculation bankLGAmountCalculation;

        bankLGAmountCalculation = BankLGAmountCalculation::find(bankLGFacilityAgreementLine.DecreaseValueCommissionCalc);

        if (bankLGAmountCalculation.RecId)
        {
            margin = bankLGAmountCalculation.calculate(currencyCode, _baseLGValue);
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExtensionCommission</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the commission for an extension.
    /// </summary>
    /// <param name="_baseLGValue">
    ///    The base value to calculate commission.
    /// </param>
    /// <returns>
    ///    The calculated commission.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_baseLGValue" /> is the total value of the letter of guarantee.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankLGMarginCur calculateExtensionCommission(BankLGValueCur  _baseLGValue)
    {
        BankLGMarginCur         margin;
        BankLGAmountCalculation bankLGAmountCalculation;

        bankLGAmountCalculation = BankLGAmountCalculation::find(bankLGFacilityAgreementLine.ExtensionCommissionCalc);

        if (bankLGAmountCalculation.RecId)
        {
            margin = bankLGAmountCalculation.calculate(currencyCode, _baseLGValue);
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIncreaseValueCommission</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the commission for increasing value.
    /// </summary>
    /// <param name="_baseLGValue">
    ///    The base value to calculate commission.
    /// </param>
    /// <returns>
    ///    The calculated commission.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_baseLGValue" /> is the total value of the letter of guarantee.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankLGMarginCur calculateIncreaseValueCommission(BankLGValueCur  _baseLGValue)
    {
        BankLGMarginCur         margin;
        BankLGAmountCalculation bankLGAmountCalculation;

        bankLGAmountCalculation = BankLGAmountCalculation::find(bankLGFacilityAgreementLine.IncreaseValueCommissionCalc);

        if (bankLGAmountCalculation.RecId)
        {
            margin = bankLGAmountCalculation.calculate(currencyCode, _baseLGValue);
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIssuanceCommission</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the commission for issuing a letter of guarantee.
    /// </summary>
    /// <param name="_baseLGValue">
    ///    The base value to use to calculate the commission.
    /// </param>
    /// <returns>
    ///    The calculated commission.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_baseLGValue" /> is the total value of the letter of guarantee.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankLGMarginCur calculateIssuanceCommission(BankLGValueCur  _baseLGValue)
    {
        BankLGMarginCur         margin;
        BankLGAmountCalculation bankLGAmountCalculation;

        bankLGAmountCalculation = BankLGAmountCalculation::find(bankLGFacilityAgreementLine.IssuanceCommissionCalc);

        if (bankLGAmountCalculation.RecId)
        {
            margin = bankLGAmountCalculation.calculate(currencyCode, _baseLGValue);
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankLGFacilityAgreementLineType</c> class by using the
    ///    specified facility agreement line record ID.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLineRecId">
    ///    The facility agreement line record ID to use.
    /// </param>
    /// <param name="_forUpdate">
    ///    The <c>BankDocumentFacilityAgreement</c> table buffer from the base class will be updatable if the
    ///    value is true; optional
    /// </param>
    protected void new(
        BankDocumentAgreementLineRefRecId _bankDocumentFacilityAgreementLineRecId,
        boolean                           _forUpdate  = false)
    {
        super();

        this.parmBankDocumentAgreementLineRefRecId(_bankDocumentFacilityAgreementLineRecId);
        this.loadData(_forUpdate);

        currencyCode = bankDocumentFacilityAgreementLine.getBankDocumentFacilityAgreement().displayCurrencyCode();

        // Load BankLGFacilityAgreement buffer. And it is not needed to be updatable.
        bankLGFacilityAgreementLine = BankLGFacilityAgreementLine::findByDocumentAgreementLine(_bankDocumentFacilityAgreementLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLGFacilityAgreementLineType</c> class by using the specified
    ///    facility agreement line.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLineRecId">
    ///    The record ID of the facility agreement line.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The created instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGFacilityAgreementLineType construct(
        BankDocumentAgreementLineRefRecId _bankDocumentFacilityAgreementLineRecId,
        boolean                           _forUpdate  = false)
    {
        return new BankLGFacilityAgreementLineType(_bankDocumentFacilityAgreementLineRecId, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>