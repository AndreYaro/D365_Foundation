<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Mov_TransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_Mov_TransferOrder extends InventDimCtrl_Frm_Mov
{
    boolean fromShipReceiveUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustEnableControl</Name>
				<Source><![CDATA[
    protected boolean mustEnableControl(InventDimFormControlInterface _fc, InventDimParm _dimParmVisibleGrid = dimParmVisibleGrid)
    {
        // <GEERU>
        #ISOCOuntryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            ! fromShipReceiveUpdate &&
            movement.buffer().TableId == tablenum(InventTransferLine))
        {
            InventTransferLine inventTransferLine = movement.buffer();
            if (inventDimControls.datasourceName(_fc) == identifierstr(InventDimTo_RU))
            {
                if (inventDimControls.fieldId(_fc)  == fieldnum(InventDim, InventProfileId_RU))
                {
                    return super(_fc) && !inventTransferLine.inventTransferTable().InventProfileIdTo_RU;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if (inventDimControls.fieldId(_fc)  == fieldnum(InventDim, InventProfileId_RU))
                {
                    return super(_fc) && !inventTransferLine.inventTransferTable().InventProfileId_RU;
                }
                else
                {
                    return super(_fc);
                }
            }
        }
        // </GEERU>
        if (! fromShipReceiveUpdate)
        {
            return super(_fc);
        }

        fieldId dimParmFieldId = InventDim::dim2dimParm(inventDimControls.fieldId(_fc));

        if (inventDimControls.datasourceName(_fc) == identifierstr(InventDim))
        {
            if (movement && movement.itemId())
            {
                if (movement.inventDimGroupSetup().getFieldSetup(inventDimControls.fieldId(_fc)).isProductDimension())
                {
                    return false;
                }
            }
        }

        return dimParmEnabled.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    protected NoYes mustEnableField(FieldId  _dimFieldId)
    {
        if (fromShipReceiveUpdate)
        {
            if (movement && movement.itemId())
            {
                if (movement.buffer().RecId && movement.inventDimGroupSetup().getFieldSetup(_dimFieldId).isProductDimension())
                {
                    return false;
                }
            }
        }

        if (_dimFieldId == fieldNum(InventDim, InventLocationId) || _dimFieldId == fieldNum(InventDim, InventSiteId))
        {
            return NoYes::No;
        }

        return super(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkControlAsMandatory</Name>
				<Source><![CDATA[
    boolean mustMarkControlAsMandatory(InventDimFormControlInterface _fc, InventDimParm _dimParmEnabled = dimParmEnabled)
    {
        fieldId y = InventDim::dim2dimParm(inventDimControls.fieldId(_fc));
        if (inventDimControls.datasourceName(_fc) == identifierstr(InventDimTo_RU))
        {
            return false;
        }
        return super(_fc, _dimParmEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[

    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromShipReceiveUpdate</Name>
				<Source><![CDATA[
    public boolean parmFromShipReceiveUpdate(boolean _fromShipReceiveUpdate = fromShipReceiveUpdate)
    {
        fromShipReceiveUpdate = _fromShipReceiveUpdate;
        return fromShipReceiveUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_Mov_TransferOrder construct()
    {
        return new InventDimCtrl_Frm_Mov_TransferOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_movement">
    ///    An instance of the movement for which the class is used.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Mov_TransferOrder newFromFormMovement(
        FormRun         _formRun,
        InventMovement  _movement)
    {
        InventDimCtrl_Frm_Mov_TransferOrder     inventDimCtrl = InventDimCtrl_Frm_Mov_TransferOrder::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
