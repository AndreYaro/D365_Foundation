<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReverseShipConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReverseShipConfirm</c> class is used for reversing ship confirmations.
/// </summary>
public class WHSReverseShipConfirm
{
    WHSLoadTable loadTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCancelSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load can cancel related packing slips.
    /// </summary>
    /// <param name = "_loadTable">
    /// Load we want to cancel packing slips.
    /// </param>
    /// <returns>
    /// true if cancel packing slips button should be enabled; otherwise, false
    /// </returns>
    public static boolean canCancelSalesPackingSlip(WHSLoadTable _loadTable)
    {
        boolean cancelAllowed;
  
		if (_loadTable.LoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed)
		{
			return false;
		}

        if (_loadTable.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly
			&& WHSReverseShipConfirm::canOutboundLoadBeReversed(_loadTable))
        {
            WHSLoadTableCustPackingSlipJour loadCustJour;
            CustPackingSlipJour             custJour;

            select firstonly RecId from custJour
                where custJour.Qty
                exists join loadCustJour
                    where loadCustJour.WHSLoadTableLoadId       == _loadTable.LoadId
                    &&    loadCustJour.WHSLoadTableDataAreaId   == _loadTable.DataAreaId
                    &&    loadCustJour.CustPackingSlipJourRecId == custJour.RecId;

            if (custJour.RecId)
            {
                cancelAllowed = true;
            }
        }

        return cancelAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelProductReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load can cancel related product receipts.
    /// </summary>
    /// <param name = "_loadTable">
    /// Load to cancel product receipt.
    /// </param>
    /// <returns>
    /// true if cancel product receipt button should be enabled; otherwise, false
    /// </returns>
    public static boolean canCancelProductReceipt(WHSLoadTable _loadTable)
    {
        boolean cancelAllowed;

        if (_loadTable.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly)
        {
            WHSLoadTableVendPackingSlipJour loadVendJour;
            VendPackingSlipTrans			jourTrans;

            select firstonly RecId from jourTrans
				where jourTrans.FullyMatched	== NoYes::No
					&& jourTrans.Qty			!= 0
				exists join loadVendJour
					where loadVendJour.LoadId				== _loadTable.LoadId
						&& loadVendJour.LoadDataAreaId		== _loadTable.DataAreaId
						&& loadVendJour.VendPackingSlipJour	== jourTrans.VendPackingSlipJour;

            boolean activeProductReceiptExists = (jourTrans.RecId != 0);

            if (activeProductReceiptExists)
            {
                cancelAllowed = true;
            }
            else // no active product receipts exist - none has been posted yet or all have been cancelled
            {
                WHSWorkTable closedWork, inProgressWork;
                WHSLoadTableVendPackingSlipJour anyLoadAssociatedProductReceipt;

                select firstonly RecId from anyLoadAssociatedProductReceipt
                    where anyLoadAssociatedProductReceipt.LoadId == _loadTable.LoadId
                        && anyLoadAssociatedProductReceipt.LoadDataAreaId == _loadTable.DataAreaId;

                select firstonly RecId from closedWork
                    where closedWork.LoadId == _loadTable.LoadId
                        && closedWork.WorkStatus == WHSWorkStatus::Closed;

                select firstonly RecId from inProgressWork
                    where inProgressWork.LoadId == _loadTable.LoadId
                        && inProgressWork.WorkStatus == WHSWorkStatus::InProcess;

                boolean closedWorkExists = (closedWork.RecId != 0);
                boolean noInProgressWorkExists = (inProgressWork.RecId == 0);
                boolean anyLoadAssociatedProductReceiptExists = (anyLoadAssociatedProductReceipt.RecId != 0);

                cancelAllowed = anyLoadAssociatedProductReceiptExists && closedWorkExists && noInProgressWorkExists;
            }
		}

        return cancelAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipConfirmationBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the reverse ship confirm button should be enabled for the load.
    /// </summary>
    /// <param name = "_loadTable">
    /// Load we want to reverse ship confirm.
    /// </param>
    /// <returns>
    /// true if reverse ship confirm button should be enabled; otherwise, false
    /// </returns>
    public static boolean canShipConfirmationBeReversed(WHSLoadTable _loadTable)
    {
        boolean reverseAllowed;

        if (_loadTable.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly
			&& WHSReverseShipConfirm::canOutboundLoadBeReversed(_loadTable))
        {
            WHSLoadTableCustPackingSlipJour loadCustJour;
            CustPackingSlipJour             custJour;

            select firstonly RecId from custJour
                where custJour.Qty
                exists join loadCustJour
                    where loadCustJour.WHSLoadTableLoadId       == _loadTable.LoadId
                    &&    loadCustJour.WHSLoadTableDataAreaId   == _loadTable.DataAreaId
                    &&    loadCustJour.CustPackingSlipJourRecId == custJour.RecId;

            if (!custJour.RecId)
            {
                reverseAllowed = true;
            }
        }
        else if (_loadTable.LoadDirection == WHSLoadDirection::Inbound
             &&  _loadTable.LoadStatus    != WHSLoadStatus::Received
             &&  WHSShipmentTable::findByLoadId(_loadTable.LoadId).ShipConfirmUTCDateTime)
        {
            reverseAllowed = true;
        }

        return reverseAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOutboundLoadBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether reverse ship confirm button should be enabled for a load.
    /// </summary>
    /// <param name = "_loadTable">
    /// The <c>WHSLoadTable</c> we are checking.
    /// </param>
    /// <returns>
    /// true if button should be enabled; otherwise false
    /// </returns>
    private static boolean canOutboundLoadBeReversed(WHSLoadTable _loadTable)
    {
        boolean enabled;

        if (_loadTable.LoadDirection == WHSLoadDirection::Outbound
        &&  _loadTable.LoadStatus    == WHSLoadStatus::Shipped)
        {
            WHSLoadLine loadLine;

            select firstonly OrderNum from loadLine
                where loadLine.LoadId          == _loadTable.LoadId
                &&    loadLine.InventTransType == InventTransType::TransferOrderShip;

            if (loadLine.OrderNum)
            {
                if (TMSParameters::find().isSplitOfTransferOrderShipConfirmationAndPostingTransferShipEnabled(_loadTable.InventLocationId)
                &&  InventTransferTable::find(loadLine.OrderNum).TransferStatus == InventTransferStatus::Created)
                {
                    enabled = true;
                }
                else
                {
                    enabled = false;
                }
            }
            else
            {
                enabled = true;
            }
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the ship confirmation of a load.
    /// </summary>
    public void reverseShipConfirm()
    {
        ttsbegin;

        utcdatetime newDate = utcDateTimeNull();

        if (TMSRoute::exist(loadTable.RouteCode))
        {
            TMSRoute::unConfirm(loadTable.RouteCode);

            this.updateRouteSegment(newDate);
        }

        this.updateLoadLine(newDate);
        this.updateShipment(newDate, loadTable.LoadDirection);
        
        if (loadTable.LoadDirection == WHSLoadDirection::Outbound)
        {
            this.deleteUOMStructure();
            this.deleteASNItems();
            this.updateWave();
        }

        this.updateLoadTable(newDate);
        this.deleteCWTagShippedRegistration();

        this.resetReturnDetails(loadTable.LoadId);

        this.onReverseShipConfirm();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReturnDetails</Name>
				<Source><![CDATA[
    private void resetReturnDetails(WHSLoadId _loadId)
    {
        WHSReverseShipmentReturnDetailHandler returnDetailHandler = WHSReverseShipmentReturnDetailHandler::newFromLoadId(_loadId);
        returnDetailHandler.resetShipmentDateAndReturnUntilDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReverseShipConfirm</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void onReverseShipConfirm()
    {
        if (WHSLoadPackingSlipBackgroundPostingStatusFlight::instance().isEnabled()
            && loadTable.PackingSlipBackgroundPostingStatus != WHSLoadPackingSlipBackgroundPostingStatus::None)
        {
            loadTable.selectForUpdate(true);
            loadTable.PackingSlipBackgroundPostingStatus = WHSLoadPackingSlipBackgroundPostingStatus::None;
            loadTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteASNItems</Name>
				<Source><![CDATA[
    private void deleteASNItems()
    {
        WHSASNItem asnItem;

        delete_from asnItem
            where asnItem.LoadId == loadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUOMStructure</Name>
				<Source><![CDATA[
    private void deleteUOMStructure()
    {
        WHSUOMStructure uomStructure;
        uomStructure.skipDeleteMethod(true);

        delete_from uomStructure
            where uomStructure.LoadId == loadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRouteSegment</Name>
				<Source><![CDATA[
    private void updateRouteSegment(TMSActualShipUTCDateTime _newDate)
    {
        TMSRouteSegment routeSegment;
        routeSegment.skipDataMethods(true);

        update_recordset routeSegment
            setting ActualShipUTCDateTime = _newDate
            where routeSegment.RouteCode == loadTable.RouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLine</Name>
				<Source><![CDATA[
    private void updateLoadLine(WHSLoadClosedUTCDateTime _newDate)
    {
        WHSLoadLine loadLine;
        loadLine.skipDataMethods(true);

        if (!loadTable.Invalid
            && WHSLoadLine::preventZeroQuantity())
        {
            update_recordset loadLine
                setting Invalid = false,
                       LoadClosedUTCDateTime = _newDate
                where loadLine.LoadId == loadTable.LoadId;
        }
        else
        {
            update_recordset loadLine
                setting LoadClosedUTCDateTime = _newDate
                where loadLine.LoadId == loadTable.LoadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipment</Name>
				<Source><![CDATA[
    private void updateShipment(
        TransDateTime      _newDate,
        WHSLoadDirection _direction)
    {
        WHSShipmentTable shipment;
        WHSShipmentStatus newStatus = _direction == WHSLoadDirection::Outbound ? WHSShipmentStatus::Loaded : WHSShipmentStatus::InProcess;
        shipment.skipDataMethods(true);

        update_recordset shipment
            setting ShipmentStatus         = newStatus,
                    ShipConfirmUTCDateTime = _newDate,
                    DropOffUTCDateTime     = _newDate,
                    SCAC                   = ''
            where shipment.LoadId == loadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWave</Name>
				<Source><![CDATA[
    private void updateWave()
    {  
        // for the current load go over all related waves
        // we update the wave status, only for the waves
        // that are shipped.
        WHSShipmentTable    shipmentTable;
        WHSWaveTable        waveTable;

        waveTable.skipDataMethods(true);

        update_recordset waveTable
            setting WaveStatus = WHSWaveStatus::Released
                where waveTable.WaveStatus  == WHSWaveStatus::Shipped
            exists join shipmentTable
                where shipmentTable.WaveId  == waveTable.WaveId
                    && shipmentTable.LoadId == loadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadTable</Name>
				<Source><![CDATA[
    private void updateLoadTable(WHSLoadShipConfirmUTCDateTime _newDate)
    {
        loadTable.selectForUpdate(true);
        loadTable.LoadShipConfirmUTCDateTime = _newDate;
        loadTable.LoadStatus                 = loadTable.LoadDirection == WHSLoadDirection::Outbound ? WHSLoadStatus::Loaded : WHSLoadStatus::InProcess;
        loadTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCWTagShippedRegistration</Name>
				<Source><![CDATA[
    private void deleteCWTagShippedRegistration()
    {
        if (!WHSCatchWeightTagCache::construct().isCatchWeightTagFeatureUsed() ||
            !InventLocation::find(loadTable.InventLocationId).whsEnabled)
        {
            return;
        }

        WHSLoadLine                       loadLine;
        WHSCatchWeightTagLastRegistration lastRegistration;

        while select TagNumber
            from lastRegistration
            where lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::Shipped
        exists join loadLine
            where loadLine.LoadId        == loadTable.LoadId
            &&    loadLine.InventTransId == lastRegistration.InventTransId
        {
            WHSCatchWeightTagEventRegistration::removeTagLastRegistrationEvent(lastRegistration.TagNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class with a referenced load.
    /// </summary>
    /// <param name = "_loadTable">
    /// The <c>WHSLoadTable</c> record.
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSReverseShipConfirm</c></returns>
    public static WHSReverseShipConfirm newFromLoadTable(WHSLoadTable _loadTable)
    {
        WHSReverseShipConfirm reverseShipConfirm = WHSReverseShipConfirm::construct();

        reverseShipConfirm.parmLoadTable(_loadTable);

        return reverseShipConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSReverseShipConfirm construct()
    {
        return new WHSReverseShipConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTable</Name>
				<Source><![CDATA[
    public WHSLoadTable parmLoadTable(WHSLoadTable _loadTable = loadTable)
    {
        loadTable = _loadTable;

        return loadTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>