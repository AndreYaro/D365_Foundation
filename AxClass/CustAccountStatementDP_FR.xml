<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAccountStatementDP_FR</c> class is the report data provider class for the
/// <c>CustAccountStatement_FR</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustAccountStatement_FR)),
    SRSReportParameterAttribute(classstr(CustAccountStatementContract_FR))
]
class CustAccountStatementDP_FR extends SRSReportDataProviderBase
{
    private CustAccountStatementMonitor monitor;

    FromDate    fromDate;
    ToDate    toDate;
    TransDate    assessmentDate;
    NoYes    onlyOpen;
    NoYes    totalByLedgerAccount;

    TmpCustVendAccountStatement_FR  tmpCustStatement;
    TmpCustVendAccountStatement_FR  tmpCustStatementSRS;

    str 30                          periodStatus;

    Map                             settleMap;
    Counter                         settleMax;

    AmountMST                       balanceMST;
    AmountCur                       balanceCur;

    CustTable                       custTable;
    CustTrans                       custTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the <c>AmountMST</c> value.
    /// </summary>
    private void calBalanceMST()
    {
        if (tmpCustStatement.PeriodCode == FiscalPeriodType::Opening)
        {
            balanceMST  = tmpCustStatement.BalanceMST;
        }
        else
        {
            balanceMST += tmpCustStatement.DebitMST - tmpCustStatement.CreditMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get parameters from the report dialog box and sets them to relevant values.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    private boolean getFromDialog()
    {
        boolean    ret = true;

        CustAccountStatementContract_FR contract = this.parmDataContract() as CustAccountStatementContract_FR;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        assessmentDate = contract.parmAssessmentDate();
        onlyOpen = contract.parmOnlyOpen();
        totalByLedgerAccount = contract.parmTotalByLedgerAccount();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpCustVendAccountStatement_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TmpCustVendAccountStatement_FR</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TmpCustVendAccountStatement_FR</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(TmpCustVendAccountStatement_FR))]
    public TmpCustVendAccountStatement_FR getTmpCustVendAccountStatement_FR()
    {
        select * from tmpCustStatementSRS;
        return tmpCustStatementSRS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>AmountMST</c> value based on the opening date.
    /// </summary>
    /// <param name = "_postingProfile">
    /// Posting profile value
    /// </param>
    /// <param name = "_vouchers">
    /// Vouchers from query range
    /// </param>
    /// <returns>
    ///  The value of the <c>AmountMST</c> parameter.
    ///  </returns>
    private AmountMST openingBalance(PostingProfile _postingProfile, str _vouchers)
    {
        if (fromDate)
        {
            using (CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::construct())
            {
                reportContext.parmPostingProfile(_postingProfile);
                reportContext.parmVouchers(_vouchers);

                if (onlyOpen)
                {
                    balanceMST = custTable.openBalanceMST(dateNull(),fromDate -1, assessmentDate);
                }
                else
                {
                    balanceMST = custTable.balanceMST(dateNull(), fromDate -1);
                }
            }
        }
        else
        {
            balanceMST = 0;
        }

        return balanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalanceCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>AmountCur</c> currency type of the opening balance.
    /// </summary>
    /// <param name = "_postingProfile">Current posting profile</param>
    /// <param name = "_vouchers">Vouchers from query range</param>
    /// <returns>
    /// The value of the <c>AmountCur</c> parameter
    /// </returns>
    private AmountCur openingBalanceCur(PostingProfile _postingProfile, str _vouchers)
    {
        if (fromDate)
        {
            using (CustAccountStatementContext_FR reportContext = CustAccountStatementContext_FR::construct())
            {
                reportContext.parmPostingProfile(_postingProfile);
                reportContext.parmVouchers(_vouchers);
                if (onlyOpen)
                {
                    balanceCur = custTable.openBalanceCur(dateNull(), fromDate -1, assessmentDate);
                }
                else
                {
                    balanceCur = custTable.balanceCurrency(dateNull(), fromDate -1);
                }
            }
        }
        else
        {
            balanceCur = 0;
        }

        return balanceCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalanceWithoutCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// openingBalanceWithoutCustTrans method
    /// </summary>
    /// <param name="_custAccount">
    /// The argument for this method.
    /// </param>
    private void openingBalanceWithoutCustTrans(CustAccount     _custAccount)
    {
        CustTrans       localCustTrans;

        if (fromDate)
        {
            select sum(AmountMST),sum(AmountCur) from localCustTrans
                where localCustTrans.AccountNum  == _custAccount
                   && localCustTrans.TransDate   >= dateNull()
                   && localCustTrans.TransDate   <= fromDate - 1;

            balanceMST = localCustTrans.AmountMST;
            balanceCur = localCustTrans.AmountCur;
        }
        else
        {
            balanceMST = 0;
            balanceCur = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// The prepareTitle method
    /// </summary>
    private void prepareTitle()
    {
        tmpCustStatementSRS.UserId = curuserid();
        tmpCustStatementSRS.PeriodStatus = periodStatus;
        tmpCustStatementSRS.CreditMSTTxt = strfmt('%1 %2',"@SYS7084",Ledger::accountingCurrency());
        tmpCustStatementSRS.DebitMSTTxt = strfmt('%1 %2',"@SYS9512",Ledger::accountingCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the  report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic.This method will be called by
    /// at runtime.This method should compute data and populate the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(CustAccountStatementDP_FR));
        monitor = CustAccountStatementMonitor::construct(logger);

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00002, funcName());

        CustSettlement          custSettlement1;
        CustSettlement          custSettlement2;
        CustAccount             custAccount;
        AmountMST               tmpBalanceMST,tmpBalanceMST2;
        AmountCur               tmpBalanceCur,tmpBalanceCur2;
        Counter                 settleId;
        int                     tempInt,charInt;
        Query                   custQuery = new Query();
        QueryRun                custQueryRun;
        QueryRun                queryRun;
        QueryBuildDataSource    custTransDataSource;
        boolean                 foundTrans;
        container               seattleCompanies;

        MainAccount                         mainAccount;
        DimensionAttributeValueCombination  davc;

        this.getFromDialog();
        this.setPeriodStatus();

        queryRun = new QueryRun(this.parmQuery());

        custTransDataSource = queryRun.query().dataSourceTable(tablenum(CustTrans));
        custTransDataSource.findRange(fieldnum(CustTrans,TransDate)).value(queryRange(fromDate,toDate));

        PostingProfile postingProfile = queryRun.query().dataSourceTable(tablenum(CustTrans)).findRange(fieldnum(CustTrans,PostingProfile)).value();
        str vouchers = custTransDataSource.findRange(fieldnum(CustTrans,Voucher)).value();

        if (onlyOpen)
        {
            custTransDataSource.findRange(fieldnum(CustTrans,Closed)).value(queryRangeConcat(queryRange(assessmentDate + 1, maxdate()), dateNull()));
        }

        using (SysInstrumentationActivityContext activityContext = monitor.enterProcessRecords_France())
        {
            int lineCount;

            while (queryRun.next())
            {
                custTrans = queryRun.get(tablenum(CustTrans));

                if (SysReportRun::changed(queryRun,tablenum(CustTable)))
                {
                    settleMap = new Map(Types::String, Types::Integer);
                    settleMax = 0;

                    if (foundTrans) // print closing balance for previous
                    {
                        tmpCustStatement.clear();
                        tmpCustStatement.CustVendAC = custAccount;
                        tmpCustStatement.CustVendName = CustTable::find(custAccount).name();
                        tmpCustStatement.TransDate  = toDate;
                        tmpCustStatement.PeriodCode = FiscalPeriodType::Closing;
                        tmpCustStatement.TransTxt   = "@SYS15867";
                        tmpCustStatement.BalanceMST = tmpBalanceMST;
                        tmpCustStatement.insert();
                    }
                    custTable   = queryRun.get(tablenum(CustTable));
                    custAccount = custTable.AccountNum;

                    tmpBalanceMST = this.openingBalance(postingProfile, vouchers);
                    tmpBalanceCur = this.openingBalanceCur(postingProfile, vouchers);

                    tmpCustStatement.clear();
                    tmpCustStatement.CustVendAC = custAccount;
                    tmpCustStatement.CustVendName = CustTable::find(custAccount).name();
                    tmpCustStatement.TransDate  = fromDate;
                    tmpCustStatement.PeriodCode = FiscalPeriodType::Opening;
                    tmpCustStatement.TransTxt   = "@SYS939";
                    tmpCustStatement.BalanceMST = tmpBalanceMST;
                    if (tmpBalanceMST > 0)
                    {
                        tmpCustStatement.DebitMST  = tmpBalanceMST;
                        tmpCustStatement.DebitCur  = tmpBalanceCur;
                    }
                    else
                    {
                        tmpCustStatement.CreditMST = -tmpBalanceMST;
                        tmpCustStatement.CreditCur = -tmpBalanceCur;
                    }
                    tmpCustStatement.insert();

                    foundTrans = true;
                }

                if (onlyOpen)
                {
                    custTrans.transactionPerDate(assessmentDate);
                }
                tmpCustStatement.clear();

                tmpCustStatement.CustVendAC         = custTrans.AccountNum;
                tmpCustStatement.CustVendName       = CustTable::find(custTrans.AccountNum).name();
                tmpCustStatement.TransDate          = custTrans.TransDate;
                tmpCustStatement.PeriodCode         = FiscalPeriodType::Operating;
                tmpCustStatement.Voucher            = custTrans.Voucher;
                tmpCustStatement.TransTxt           = custTrans.Txt;
                tmpCustStatement.CurrencyCode       = custTrans.CurrencyCode;
                tmpCustStatement.LedgerDimension    = CustLedgerAccounts::summaryLedgerDimension(custTrans.AccountNum,custTrans.PostingProfile);
                tmpCustStatement.MainAccountId      = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(custTrans.AccountNum, custTrans.PostingProfile));

                // Amounts

                if (onlyOpen)
                {
                    custTrans.AmountMST = custTrans.remainAmountMST();
                    custTrans.AmountCur = custTrans.remainAmountCur();
                }

                if ((custTrans.AmountMST > 0 && custTrans.Correct == NoYes::No) ||
                    (custTrans.AmountMST < 0 && custTrans.Correct == NoYes::Yes)  )
                {
                    tmpCustStatement.DebitMST  = custTrans.AmountMST;
                    tmpCustStatement.DebitCur  = custTrans.AmountCur;
                }
                else
                {
                    tmpCustStatement.CreditMST = -custTrans.AmountMST;
                    tmpCustStatement.CreditCur = -custTrans.AmountCur;
                }

                // Balance

                tmpBalanceMST += tmpCustStatement.DebitMST - tmpCustStatement.CreditMST;
                tmpCustStatement.BalanceMST = tmpBalanceMST;

                // Settlement
                if (!onlyOpen)
                {
                    if (settleMap.exists(custTrans.LastSettleVoucher))
                    {
                        settleId = settleMap.lookup(custTrans.LastSettleVoucher);
                    }
                    else if (settleMap.exists(custTrans.Voucher))
                    {
                        settleId = settleMap.lookup(custTrans.Voucher);
                    }
                    else
                    {
                        settleId = 0;
                        while select OffsetRecid, OffsetCompany, OffsetTransVoucher from custSettlement1
                            where custSettlement1.TransRecId      == custTrans.RecId
                               && custSettlement1.SettleAmountCur != 0
                               && custSettlement1.OffsetRecid     != 0
                               && custSettlement1.OffsetCompany   != ''
                               && custSettlement1.TransDate       <= assessmentDate
                        {
                            if (!settleId)
                            {
                                settleMax++;
                                settleId = settleMax;
                                settleMap.insert(custTrans.Voucher, settleId);
                            }

                            if (!settleMap.exists(custSettlement1.OffsetTransVoucher))
                            {
                                settleMap.insert(custSettlement1.OffsetTransVoucher, settleId);

                                if (!confind(seattleCompanies, custSettlement1.OffsetCompany))
                                {
                                    seattleCompanies += custSettlement1.OffsetCompany;
                                }

                                while select crosscompany:seattleCompanies OffsetRecid from custSettlement2
                                    where custSettlement2.TransRecId      == custSettlement1.OffsetRecid
                                       && custSettlement2.TransCompany    == custSettlement1.OffsetCompany
                                       && custSettlement2.SettleAmountCur != 0
                                       && custSettlement2.OffsetRecid     != 0
                                       && custSettlement2.TransDate       <= assessmentDate
                                {
                                    if (!settleMap.exists(custSettlement2.OffsetTransVoucher))
                                    {
                                        settleMap.insert(custSettlement2.OffsetTransVoucher, settleId);
                                    }
                                }
                            }
                        }
                    }
                }

                if (settleId && custTrans.LastSettleDate && custTrans.LastSettleVoucher)
                {
                    tempInt = settleId;
                    while (tempInt > 0)
                    {
                        charInt = (tempInt-1) mod 26;
                        tempInt = (tempInt-1) div 26;
                        tmpCustStatement.SettlementCode = num2char(charInt+char2num('a',1))+tmpCustStatement.SettlementCode;
                    }
                    //                tmpCustStatement.SettlementCode = num2Char( settleId - 1 + char2Num('A',1));
                }

                // Create the transaction

                tmpCustStatement.insert();

                lineCount++;
            }

            monitor.exitProcessRecords_France(activityContext, lineCount);
        }

        if (foundTrans) // print closing balance for the last one
        {
            tmpCustStatement.clear();
            tmpCustStatement.CustVendAC = custAccount;
            tmpCustStatement.CustVendName   = CustTable::find(custAccount).name();
            tmpCustStatement.TransDate  = toDate;
            tmpCustStatement.PeriodCode = FiscalPeriodType::Closing;
            tmpCustStatement.TransTxt   = "@SYS15867";
            tmpCustStatement.BalanceMST = tmpBalanceMST;
            tmpCustStatement.insert();
        }

        custQuery = new Query(this.parmQuery());
        custQuery.dataSourceName(tableStr(CustTable)).addGroupByField(fieldNum(CustTable, AccountNum));
        custQueryRun = new QueryRun(custQuery);
        while  (custQueryRun.next())
        {
            custTable =  custQueryRun.get(tablenum(CustTable));
            select * from tmpCustStatement where tmpCustStatement.CustVendAC == custTable.AccountNum;

            if (!tmpCustStatement)
            {
                this.openingBalanceWithoutCustTrans(custTable.AccountNum);
                tmpBalanceMST  = balanceMST;
                tmpBalanceCur  = balanceCur;
                tmpBalanceMST2 = this.openingBalance(postingProfile, vouchers);
                tmpBalanceCur2 = this.openingBalanceCur(postingProfile, vouchers);

                if (tmpBalanceMST2)
                {
                    tmpCustStatement.clear();
                    tmpCustStatement.CustVendAC = custTable.AccountNum;
                    tmpCustStatement.CustVendName = CustTable::find(custTable.AccountNum).name();
                    tmpCustStatement.TransDate  = fromDate;
                    tmpCustStatement.PeriodCode = FiscalPeriodType::Opening;
                    tmpCustStatement.TransTxt   = "@SYS939";
                    tmpCustStatement.BalanceMST = tmpBalanceMST==tmpBalanceMST2 ? tmpBalanceMST:tmpBalanceMST2;
                    if (tmpCustStatement.BalanceMST > 0)
                    {
                        tmpCustStatement.DebitMST  = tmpCustStatement.BalanceMST;
                        tmpCustStatement.DebitCur  = tmpBalanceCur==tmpBalanceCur2 ? tmpBalanceCur:tmpBalanceCur2;
                    }
                    else
                    {
                        tmpCustStatement.CreditMST = -tmpCustStatement.BalanceMST;
                        tmpCustStatement.CreditCur = tmpBalanceCur==tmpBalanceCur2 ? -tmpBalanceCur:-tmpBalanceCur2;
                    }
                    tmpCustStatement.insert();
                }
            }
        }

        if (totalByLedgerAccount)
        {
            while select LedgerDimension from tmpCustStatement
                order by CustVendAC, PeriodCode, TransDate
                join RecId, MainAccount from davc
                    where davc.RecId == tmpCustStatement.LedgerDimension
                    join RecId from mainAccount
                    order by MainAccountId
                    where mainAccount.RecId == davc.MainAccount
            {
                balanceMST = 0;
                this.calBalanceMST();
                tmpCustStatementSRS.data(tmpCustStatement);
                tmpCustStatementSRS.ActualBalanceMST = balanceMST;
                this.prepareTitle();
                tmpCustStatementSRS.doInsert();
            }
        }
        else
        {
            while select tmpCustStatement
                order by CustVendAC, PeriodCode, TransDate, RecId
            {
                balanceMST = 0;
                this.calBalanceMST();
                tmpCustStatementSRS.data(tmpCustStatement);
                tmpCustStatementSRS.ActualBalanceMST = balanceMST;
                this.prepareTitle();
                tmpCustStatementSRS.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the period status.
    /// </summary>

    private void setPeriodStatus()
    {
        boolean isCloseYearExist;
        recId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        LedgerRecId ledgerRecId = Ledger::current();

        isCloseYearExist = LedgerFiscalCalendar::existYearByYearStatusDates(
                                    calendarRecId,
                                    ledgerRecId,
                                    toDate,
                                    fromDate,
                                    FiscalYearStatus::Close);

        if (isCloseYearExist)
        {
            periodStatus = "@SYS77870";
        }
        else
        {
            periodStatus = "@SYS19731";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>