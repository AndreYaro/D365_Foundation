<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferEngineByTaxId_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes

[IntrastatCountryRegionByTaxId(#isoIT)]
internal class IntrastatTransferEngineByTaxId_IT extends IntrastatTransferEngineByTaxId
{
    private LogisticsPostalAddress importDeliveryPostalAddress;
    private Set countryRegionsWithoutCurrencySet;
    private boolean skipUpdateTransactionCurrencyAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exportToBeIncluded</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncluded(
        LogisticsAddressCountryRegionId _dlvCountryRegion,
        RefNum _refNum = RefNum::SalesOrder,
        LogisticsAddressCountryRegionId _countryRegionOfShipment = '',
        LogisticsAddressCountryRegionId _invoiceCountryRegion = '',
        TradeLineDlvTypeId _dlvType = TradeLineDlvType::None,
        LogisticsAddressCountryRegionId _transportDocumentCountryRegion = '',
        IntrastatOrderType _orderType = IntrastatOrderType::Order)
    {
        if (_refNum != RefNum::SalesOrder && _refNum != RefNum::Cust)
        {
            return false;
        }

        if (!this.isCountryRegionStateInEU(deliveryPostalAddress) &&
            !this.isSpecialDomesticCache(_dlvCountryRegion) &&
            !this.isCountryRegionStateInEU(transportDocumentPostalAddress))
        {
            return false;
        }

        // delivering to another EU country/region means that we should report
        return _dlvCountryRegion != this.taxRegistrationAddress().CountryRegionId && 
            (!_transportDocumentCountryRegion || this.isCountryRegionStateInEU(transportDocumentPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase order should be included for Instrastat.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The account number of the vendor.
    /// </param>
    /// <param name="_countryRegion">
    ///    The delivery location country or region.
    /// </param>
    /// <param name="_trnasportDocumentCountryRegion">
    ///    The country or region of <c>TransportationDocument</c>.
    /// </param>
    /// <returns>
    ///    true if the purchase order is to be included for Intrastat; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the country or region of the vendor is an EU country or region and the delivery country or
    ///    region is either Italy or is in EU, the purchase order is to be included for Intrastat. San Marino
    ///    purchase orders should not be considered for Intrastat reporting.
    /// </remarks>
    protected boolean importToBeIncluded(
        VendAccount _vendAccount,
        LogisticsAddressCountryRegionId _countryRegion,
        LogisticsAddressCountryRegionId _transportDocumentCountryRegion = '')
    {
        return this.isCountryRegionStateInEU(this.primaryPostalAddress(this.getVendTable(_vendAccount).Party)) &&
            (this.isCountryRegionStateItalyOrInEU(importDeliveryPostalAddress) ||
            this.isCountryRegionStateItalyOrInEU(transportDocumentPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionStateItalyOrInEU</Name>
				<Source><![CDATA[
    private boolean isCountryRegionStateItalyOrInEU(LogisticsPostalAddress _postalAddress)
    {
        return _postalAddress.CountryRegionId &&
            (this.taxRegistrationAddress().CountryRegionId == _postalAddress.CountryRegionId ||
            this.isCountryRegionStateInEU(_postalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>alignSigns</Name>
				<Source><![CDATA[
    protected void alignSigns(Intrastat _intrastat, real _commonSign)
    {
        super(_intrastat, _commonSign);

        _intrastat.AmountCur = _commonSign * _intrastat.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcCustInvoiceJourAccountNum(CustInvoiceJour _custInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustPckSlipJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcCustPckSlipJourAccountNum(CustPackingSlipJour _custPackingSlipJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custPackingSlipJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcProjInvoiceJourAccountNum(ProjInvoiceJour _projInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _projInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcVendInvoiceJourAccountNum(VendInvoiceJour _vendInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _vendInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendPckSlipJourAccountNum</Name>
				<Source><![CDATA[
    protected VendAccount calcVendPckSlipJourAccountNum(VendPackingSlipJour _vendPackingSlipJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _vendPackingSlipJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFreeCustInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcFreeCustInvoiceJourAccountNum(CustInvoiceJour _custInvoiceJour)
    {
        // In Italy InvoiceAccount is used instead of OrderAccount because Italian intrastat contains both statistical and tax information
        return _custInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour, VendInvoiceTrans _vendInvoiceTrans)
    {
        if (_vendInvoiceTrans.DestCountryRegionId)
        {
            importDeliveryPostalAddress.CountryRegionId = _vendInvoiceTrans.DestCountryRegionId;
            importDeliveryPostalAddress.State = _vendInvoiceTrans.DestState;
        }
        else
        {
            importDeliveryPostalAddress.CountryRegionId = _vendInvoiceJour.CountryRegionId;
            importDeliveryPostalAddress.State = _vendInvoiceJour.State;
        }

        return this.importToBeIncluded(_vendInvoiceJour.OrderAccount, _vendInvoiceJour.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendPckSlipTrans(VendPackingSlipJour _vendPackingSlipJour, VendPackingSlipTrans _vendPackingSlipTrans)
    {
        importDeliveryPostalAddress = this.postalAddress(_vendPackingSlipJour.DeliveryPostalAddress);
        return this.importToBeIncluded(_vendPackingSlipJour.OrderAccount, importDeliveryPostalAddress.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour)
    {
        importDeliveryPostalAddress = this.taxRegistrationAddress();
        return super(_vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerPrimaryAddress</Name>
				<Source><![CDATA[
    protected boolean checkCustomerPrimaryAddress(CustAccount _orderAccount)
    {
        return !_orderAccount ||
            this.taxRegistrationAddress().CountryRegionId != this.primaryPostalAddress(this.getCustTable(_orderAccount).Party).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadIntrastatFromRecord</Name>
				<Source><![CDATA[
    protected void loadIntrastatFromRecord()
    {
        importDeliveryPostalAddress = null;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDirectionAndOrderType</Name>
				<Source><![CDATA[
    protected void initDirectionAndOrderType(
        ModuleCustVend _moduleCustVend,
        Qty _qty,
        Intrastat _intrastat,
        IntrastatTransactionCodeId _transactionCode,
        boolean _isReturnItem = false)
    {
        super(_moduleCustVend, _qty, _intrastat, _transactionCode, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
        CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _custInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _custInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode = _custInvoiceJour.DlvMode;
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, _custInvoiceJour.paymMode());
        intrastat.County = this.calcIntrastatCounty(intrastat.County, _custInvoiceTrans.InventDimId, '');

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _custInvoiceJour.VATNum;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(
        CustPackingSlipJour _custPackingSlipJour,
        CustPackingSlipTrans _custPackingSlipTrans,
        CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null,
        CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        intrastat.DlvMode = _custPackingSlipJour.DlvMode;
        intrastat.County = this.calcIntrastatCounty(intrastat.County, _custPackingSlipTrans.InventDimId, '');

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getCustTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custPackingSlipJour.DeliveryDate);
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _custInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _custInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode = _custInvoiceJour.DlvMode;
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, _custInvoiceJour.paymMode());

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _custInvoiceJour.VATNum;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromInventTransferJour(
        IntrastatDirection _direction,
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine)
    {
        skipUpdateTransactionCurrencyAmount = true;

        Intrastat intrastat = super(_direction, _inventTransferJour, _inventTransferJourLine);

        skipUpdateTransactionCurrencyAmount = false;

        InventLocationId inventLocationId = _direction == IntrastatDirection::Export ? 
            _inventTransferJour.InventLocationIdFrom : 
            _inventTransferJour.InventLocationIdTo;

        PaymMode paymMode = this.getVendTable(this.getVendAccountFromInventLocationCache(inventLocationId)).PaymMode;

        intrastat.CurrencyCode = companyStandardCurrency;
        intrastat.DlvMode = _inventTransferJour.DlvModeId;
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, paymMode);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        Intrastat intrastat = super(_projInvoiceJour, _projInvoiceItem);

        CustTrans custTrans = CustTrans::findVoucherDate(_projInvoiceJour.LedgerVoucher, _projInvoiceJour.InvoiceDate);

        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Cust, custTrans.PaymMode);
        intrastat.DlvMode = _projInvoiceJour.DlvMode;

        intrastat.State = this.getInventTable(intrastat.ItemId).OrigStateId;
        if (!intrastat.State)
        {
            intrastat.State = this.taxRegistrationAddress().County;
        }

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getCustTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _projInvoiceJour.InvoiceDate);
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour, VendInvoiceIntrastat _vendInvoiceIntrastat)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceIntrastat);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _vendInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _vendInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode = _vendInvoiceJour.DlvMode;

        VendTrans vendTrans = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate);
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, vendTrans.PaymMode);

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _vendInvoiceJour.VATNum;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(
        VendInvoiceJour _vendInvoiceJour,
        VendInvoiceTrans _vendInvoiceTrans,
        VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
        VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        if (intrastatParm.IntrastatDateSource_IT == IntrastatDateSource_IT::DocumentDate && _vendInvoiceJour.DocumentDate)
        {
            intrastat.TransDate = _vendInvoiceJour.DocumentDate;
        }

        intrastat.DlvMode = _vendInvoiceJour.DlvMode;

        VendTrans vendTrans = VendTrans::findAccountVoucherDate(_vendInvoiceJour.InvoiceAccount, _vendInvoiceJour.LedgerVoucher, _vendInvoiceJour.InvoiceDate);
        intrastat.PaymentMethod_IT = IntrastatTransferIT::calcPaymentMethod(ModuleInventCustVend::Vend, vendTrans.PaymMode);
        intrastat.County = this.calcIntrastatCounty(intrastat.County, _vendInvoiceTrans.InventDimId, _vendInvoiceTrans.PurchId);

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = _vendInvoiceJour.VATNum;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(
        VendPackingSlipJour _vendPackingSlipJour,
        VendPackingSlipTrans _vendPackingSlipTrans,
        VendPackingSlipJour_Intrastat _vendPackingSlipJour_Intrastat = null,
        VendPackingSlipTrans_Intrastat _vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, _vendPackingSlipJour_Intrastat, _vendPackingSlipTrans_Intrastat);

        intrastat.DlvMode = _vendPackingSlipJour.DlvMode;
        intrastat.County = this.calcIntrastatCounty(intrastat.County, _vendPackingSlipTrans.InventDimId, '');

        if (FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VATNum = this.getVendTable(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendPackingSlipJour.DocumentDate);
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIntrastatCounty</Name>
				<Source><![CDATA[
    private AddressCountyId calcIntrastatCounty(AddressCountyId _intrastatCounty, InventDimId _inventDimId, PurchId _countyVendPackingSlipJourPurchId)
    {
        AddressCountyId county = IntrastatTransferIT::calcIntrastatCounty(_intrastatCounty, _inventDimId, primaryPostalAddressForCurrentCompany.County);

        if (county)
        {
            return county;
        }

        if (_countyVendPackingSlipJourPurchId)
        {
            county = this.postalAddress(VendPackingSlipJour::findFromPurchId(_countyVendPackingSlipJourPurchId).DeliveryPostalAddress).County;

            if (county)
            {
                return county;
            }
        }

        return this.taxRegistrationAddress().County;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIntrastatInit</Name>
				<Source><![CDATA[
    protected void postIntrastatInit(Intrastat _intrastat)
    {
        super(_intrastat);

        InventTable inventTable = this.getInventTable(_intrastat.ItemId);

        _intrastat.ItemType_IT = IntrastatTransferIT::calculateItemTypeFromInventTable(inventTable, _intrastat.IntrastatCommodity);
        _intrastat.OrigCounty = IntrastatTransferIT::calculateOrigCountyFromInventTable(inventTable, _intrastat.DebCredType);

        if (!skipUpdateTransactionCurrencyAmount)
        {
            IntrastatTransferIT::updateIntrastatTransactionCurrencyAmount(_intrastat, companyStandardCurrency, countryRegionsWithoutCurrencySet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        countryRegionsWithoutCurrencySet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderType</Name>
				<Source><![CDATA[
    protected IntrastatOrderType getOrderType(
        ModuleCustVend _moduleCustVend,
        Qty _qty,
        IntrastatTransactionCodeId _transactionCode,
        IntrastatTransactionCodeId _returnOrderCode)
    {
        return _qty >= 0 ? IntrastatOrderType::Order : IntrastatOrderType::Correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>