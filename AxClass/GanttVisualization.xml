<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttVisualization</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttVisualization extends RunBase
{
    #WinAPI
    #KeyPressed

    #define.formWidthDefault(800)
    #define.formHeightDefault(300)

    GanttClient                     ganttClient;

    GanttDialog                     ganttDialog;

    GanttDataModificationCollection ganttDataModificationCollection;

    boolean                         existLoadingData;

    FormRun                         formRun;

    int                             formWidth;
    int                             formHeight;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        formWidth,
        formHeight
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUndoModification</Name>
				<Source><![CDATA[
    public boolean canUndoModification(GanttDataModification _ganttDataModificationPrev)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAll</Name>
				<Source><![CDATA[
    public void cleanAll()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.getValuesFromForm();

        this.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    protected void createForm()
    {
        Args args = new Args(this.formName());
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        this.setFormCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttDialog</Name>
				<Source><![CDATA[
    protected GanttDialog createGanttDialog()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLoadingData</Name>
				<Source><![CDATA[
    public boolean existLoadingData()
    {
        return existLoadingData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    // Must be overridden
    public FormName formName()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun()
    {
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttDataModificationCollection</Name>
				<Source><![CDATA[
    protected GanttDataModificationCollection ganttDataModificationCollection()
    {
        return ganttDataModificationCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFromForm</Name>
				<Source><![CDATA[
    protected void getValuesFromForm()
    {
        if (formRun)
        {
            formWidth   = formRun.design().widthValue();
            formHeight  = formRun.design().heightValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hWnd</Name>
				<Source><![CDATA[
    // Must be overridden
    public int hWnd()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoNoLoadingData</Name>
				<Source><![CDATA[
    protected void infoNoLoadingData()
    {
        info("@SYS59028");
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public boolean init()
    {
        this.getLast();

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.initData();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    protected void initData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoadingData</Name>
				<Source><![CDATA[
    protected void initLoadingData()
    {
        this.setExistLoadingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        formWidth   = #formWidthDefault;
        formHeight  = #formHeightDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertModification</Name>
				<Source><![CDATA[
    protected void insertModification(GanttDataModification _ganttDataModification)
    {
        ganttDataModificationCollection.insert(_ganttDataModification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void load()
    {
        if (!this.validateLoad())
        {
            throw Exception::Error;
        }

        this.initLoadingData();

        this.loadData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    protected void loadData()
    {
        this.setFormCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        ganttDataModificationCollection = GanttDataModificationCollection::construct();

        ganttDialog     = this.createGanttDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        ganttClient = _ganttClient;

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttDialog</Name>
				<Source><![CDATA[
    public GanttDialog parmGanttDialog(GanttDialog _ganttDialog = ganttDialog)
    {
        ganttDialog = _ganttDialog;

        return ganttDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        this.refresh();

        this.showPostLoadingInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUndoTransaction</Name>
				<Source><![CDATA[
    public void postUndoTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReload</Name>
				<Source><![CDATA[
    public void prepareReload()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUndoTransaction</Name>
				<Source><![CDATA[
    public void preUndoTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateModificationCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the updating of the modification collection was successful.
    /// </summary>
    /// <returns>
    ///    true if updating of the modification collection was successful; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The modification collection <c>ganttDataModificationCollection</c> container that contains all of
    ///    the data modified by the user.
    /// </remarks>
    protected boolean preUpdateModificationCollection()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    public void refresh()
    {
        this.refreshControlsOnForm();
        this.refreshFormInInfolog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshControlsOnForm</Name>
				<Source><![CDATA[
    public void refreshControlsOnForm()
    {
        Object object;
        if (formRun && formHasMethod(formRun, identifierstr(refreshControls)))
        {
            object = formRun;
            object.refreshControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormInInfolog</Name>
				<Source><![CDATA[
    protected void refreshFormInInfolog()
    {
        if (formRun)
        {
            infolog.setLastActivatedForm(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetModificationCollection</Name>
				<Source><![CDATA[
    protected void resetModificationCollection()
    {
        ganttDataModificationCollection = GanttDataModificationCollection::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resize</Name>
				<Source><![CDATA[
    public void resize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resizePost</Name>
				<Source><![CDATA[
    public void resizePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollBackModification</Name>
				<Source><![CDATA[
    protected void rollBackModification(GanttDataModification _ganttDataModification)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollBackModificationCollection</Name>
				<Source><![CDATA[
    protected void rollBackModificationCollection()
    {
        GanttDataModification   ganttDataModification;
        if (this.ganttDataModificationCollection().elements())
        {
            ganttDataModification = this.ganttDataModificationCollection().findFirst();

            while (ganttDataModification)
            {
                this.rollBackModification(ganttDataModification);

                ganttDataModification = this.ganttDataModificationCollection().findNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    protected void runForm()
    {
        if (formRun)
        {
            formRun.run();

            formRun.detach();

            this.setFormSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExistLoadingData</Name>
				<Source><![CDATA[
    protected void setExistLoadingData()
    {
        if (this.parmGanttClient().parmGanttData().parmGanttTableCollection().totalRecordsInAllTables())
        {
            existLoadingData = true;
        }
        else
        {
            existLoadingData = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaption</Name>
				<Source><![CDATA[
    public void setFormCaption()
    {
        if (formRun)
        {
            formRun.design().caption(this.parmGanttClient().caption());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormSize</Name>
				<Source><![CDATA[
    protected void setFormSize()
    {
        if (formRun)
        {
            formRun.design().widthValue(formWidth);
            formRun.design().heightValue(formHeight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostLoadingInfo</Name>
				<Source><![CDATA[
    protected void showPostLoadingInfo()
    {
        if (!this.existLoadingData())
        {
            this.infoNoLoadingData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoModification</Name>
				<Source><![CDATA[
    public void undoModification(GanttDataModification _ganttDataModificationPrev)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean  ret;
        Integer  version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModificationAfterVisualExtraFields</Name>
				<Source><![CDATA[
    protected boolean updateModificationAfterVisualExtraFields(GanttDataModification _ganttDataModification)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateModificationCollection</Name>
				<Source><![CDATA[
    protected void postUpdateModificationCollection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModificationCollection</Name>
				<Source><![CDATA[
    protected void updateModificationCollection(boolean _validateModification = false)
    {
        try
        {
            if (ganttDataModificationCollection && ganttDataModificationCollection.elements())
            {
                this.parmGanttClient().parmGanttData().updateModificationCollection(ganttDataModificationCollection, _validateModification);
            }
        }
        catch(Exception::Error)
        {
            this.rollBackModificationCollection();

            this.resetModificationCollection();

            throw Exception::Error;
        }

        this.postUpdateModificationCollection();
        this.resetModificationCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!this.parmGanttClient()                  ||
           !this.parmGanttClient().parmGanttData())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoad</Name>
				<Source><![CDATA[
    public boolean validateLoad()
    {
        if (!this.parmGanttClient().parmGanttData().parmGanttTableCollection() ||
           !this.parmGanttClient().parmGanttData().parmGanttTableCollection().elements())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModification</Name>
				<Source><![CDATA[
    protected boolean validateModification(GanttDataModification _ganttDataModification)
    {
        return this.parmGanttClient().parmGanttData().validateModification(_ganttDataModification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModificationCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hook method that is triggered in order to validate a GanttDataModificationCollection as a whole.
    /// </summary>
    /// <param name="validateAllModifications">
    /// Set to true if all modifications in the modifications collection should be validated by the method; otherwise set to false.
    /// </param>
    /// <returns>
    /// True if validation passed; false otherwise.
    /// </returns>
    /// <remarks>
    /// The method should be overridden when validation is needed with respect to several data modifications done by the user.
    /// </remarks>
    protected boolean validateModificationCollection(boolean validateAllModifications = false)
    {
        GanttDataModification           ganttDataModification;

        // if the caller wants to validate all the modifications in the modification collection, do it.
        if (validateAllModifications)
        {
            ganttDataModification = ganttDataModificationCollection.findFirst();
            while (ganttDataModification)
            {
                // validate the modification
                if (!this.validateModification(ganttDataModification))
                {
                    return false;
                }

                ganttDataModification = ganttDataModificationCollection.findNext();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public GanttVisualization construct()
    {
        return new GanttVisualization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>